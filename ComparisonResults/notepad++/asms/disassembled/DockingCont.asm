.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 1535190D6B56C3E6529380743044922B
.rdata:00000000 ; Input CRC32 : 99377A1B
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\DockingCont.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "libcpmtd"
.rdata:00000000 ; must resolve: ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.rdata:00000000 ; must resolve: ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.rdata:00000000 ; must resolve: ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@D@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@_W@std@@2V0locale@2@A
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 ; wchar_t _SG125145
.rdata:00000000 $SG125145       dw 0                    ; DATA XREF: DockingCont::SelectTab(int)+248o
.rdata:00000002                 db    0
.rdata:00000003                 db    0
.rdata:00000004 ; wchar_t _SG125147
.rdata:00000004 $SG125147:                              ; DATA XREF: DockingCont::SelectTab(int)+26Ao
.rdata:00000004                 unicode 0, <    >,0
.rdata:0000000E                 align 10h
.rdata:00000010 ; wchar_t _SG125163
.rdata:00000010 $SG125163:                              ; DATA XREF: DockingCont::updateCaption(void)+A8o
.rdata:00000010                 unicode 0, < - >,0
.rdata:00000018 ; const WCHAR _SG125178
.rdata:00000018 $SG125178:                              ; DATA XREF: DockingCont::focusClient(void)+6Do
.rdata:00000018                 unicode 0, <NOFOCUSWHILECLICKINGCAPTION>,0
.rdata:00000050 ; const WCHAR _SG124607
.rdata:00000050 $SG124607:                              ; DATA XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+18Bo
.rdata:00000050                 unicode 0, <GetLastError() returned %lu>,0
.rdata:00000088 ; const WCHAR _SG124608
.rdata:00000088 $SG124608:                              ; DATA XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+1A2o
.rdata:00000088                                         ; DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+43Ao ...
.rdata:00000088                 unicode 0, <SetWindowsHookEx(MOUSE) failed on runProcCaption>,0
.rdata:000000EA                 align 4
.rdata:000000EC ; wchar_t _SG124744
.rdata:000000EC $SG124744:                              ; DATA XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+5C1o
.rdata:000000EC                 unicode 0, <Close>,0
.rdata:000000F8 ; const WCHAR _SG124776
.rdata:000000F8 $SG124776:                              ; DATA XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+33Eo
.rdata:000000F8                 unicode 0, <MS Shell Dlg>,0
.rdata:00000112                 align 4
.rdata:00000112 _rdata          ends
.rdata:00000112
.bss:00000114 ; ===========================================================================
.bss:00000114
.bss:00000114 ; Segment type: Uninitialized
.bss:00000114 ; Segment permissions: Read/Write
.bss:00000114 _bss            segment dword public 'BSS' use32
.bss:00000114                 assume cs:_bss
.bss:00000114                 ;org 114h
.bss:00000114                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00000114 ; HWND hWndServer
.bss:00000114 _hWndServer     dd ?                    ; DATA XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+14Cw
.bss:00000114                                         ; hookProcMouse(uint,uint,long)+65r ...
.bss:00000118 ; HHOOK hookMouse
.bss:00000118 _hookMouse      dd ?                    ; DATA XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+16Aw
.bss:00000118                                         ; DockingCont::runProcCaption(HWND__ *,uint,uint,long)+16Fr ...
.bss:0000011C _allocator_arg  db    ? ;
.bss:0000011D _piecewise_construct db    ? ;
.bss:0000011E                 align 10h
.bss:0000011E _bss            ends
.bss:0000011E
.text$mn:00000120 ; ===========================================================================
.text$mn:00000120
.text$mn:00000120 ; Segment type: Pure code
.text$mn:00000120 ; Segment permissions: Read/Execute
.text$mn:00000120 _text$mn        segment para public 'CODE' use32
.text$mn:00000120                 assume cs:_text$mn
.text$mn:00000120                 ;org 120h
.text$mn:00000120                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000120
.text$mn:00000120 ; =============== S U B R O U T I N E =======================================
.text$mn:00000120
.text$mn:00000120 ; Attributes: bp-based frame
.text$mn:00000120
.text$mn:00000120 ; public: __thiscall DockingCont::DockingCont(void)
.text$mn:00000120                 public ??0DockingCont@@QAE@XZ
.text$mn:00000120 ??0DockingCont@@QAE@XZ proc near
.text$mn:00000120
.text$mn:00000120 var_10          = dword ptr -10h
.text$mn:00000120 var_C           = dword ptr -0Ch
.text$mn:00000120 var_4           = dword ptr -4
.text$mn:00000120
.text$mn:00000120                 push    ebp
.text$mn:00000121                 mov     ebp, esp
.text$mn:00000123                 push    0FFFFFFFFh
.text$mn:00000125                 push    offset __ehhandler$??0DockingCont@@QAE@XZ
.text$mn:0000012A                 mov     eax, large fs:0
.text$mn:00000130                 push    eax
.text$mn:00000131                 push    ecx
.text$mn:00000132                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000137                 xor     eax, ebp
.text$mn:00000139                 push    eax
.text$mn:0000013A                 lea     eax, [ebp+var_C]
.text$mn:0000013D                 mov     large fs:0, eax
.text$mn:00000143                 mov     [ebp+var_10], ecx
.text$mn:00000146                 mov     ecx, [ebp+var_10]
.text$mn:00000149                 call    ??0StaticDialog@@QAE@XZ ; StaticDialog::StaticDialog(void)
.text$mn:0000014E                 mov     [ebp+var_4], 0
.text$mn:00000155                 mov     eax, [ebp+var_10]
.text$mn:00000158                 mov     dword ptr [eax], offset ??_7DockingCont@@6B@ ; const DockingCont::`vftable'
.text$mn:0000015E                 mov     ecx, [ebp+var_10]
.text$mn:00000161                 add     ecx, 38h ; '8'
.text$mn:00000164                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00000169                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000016D                 mov     ecx, [ebp+var_10]
.text$mn:00000170                 add     ecx, 9Ch ; 'Â£'
.text$mn:00000176                 call    ??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ ; std::vector<tTbData *,std::allocator<tTbData *>>::vector<tTbData *,std::allocator<tTbData *>>(void)
.text$mn:0000017B                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000017F                 mov     ecx, [ebp+var_10]
.text$mn:00000182                 mov     dword ptr [ecx+5Ch], 0
.text$mn:00000189                 mov     edx, [ebp+var_10]
.text$mn:0000018C                 mov     dword ptr [edx+58h], 0
.text$mn:00000193                 mov     eax, [ebp+var_10]
.text$mn:00000196                 mov     dword ptr [eax+54h], 0
.text$mn:0000019D                 mov     ecx, [ebp+var_10]
.text$mn:000001A0                 mov     byte ptr [ecx+24h], 0
.text$mn:000001A4                 mov     edx, [ebp+var_10]
.text$mn:000001A7                 mov     dword ptr [edx+34h], 1
.text$mn:000001AE                 mov     eax, [ebp+var_10]
.text$mn:000001B1                 mov     dword ptr [eax+74h], 0
.text$mn:000001B8                 mov     ecx, [ebp+var_10]
.text$mn:000001BB                 mov     dword ptr [ecx+2Ch], 0
.text$mn:000001C2                 mov     edx, [ebp+var_10]
.text$mn:000001C5                 mov     dword ptr [edx+7Ch], 0
.text$mn:000001CC                 mov     eax, [ebp+var_10]
.text$mn:000001CF                 mov     dword ptr [eax+84h], 0
.text$mn:000001D9                 mov     ecx, [ebp+var_10]
.text$mn:000001DC                 mov     dword ptr [ecx+80h], 0
.text$mn:000001E6                 mov     edx, [ebp+var_10]
.text$mn:000001E9                 mov     dword ptr [edx+30h], 0
.text$mn:000001F0                 mov     eax, [ebp+var_10]
.text$mn:000001F3                 mov     dword ptr [eax+88h], 0
.text$mn:000001FD                 mov     ecx, [ebp+var_10]
.text$mn:00000200                 mov     dword ptr [ecx+90h], 0
.text$mn:0000020A                 mov     edx, [ebp+var_10]
.text$mn:0000020D                 mov     dword ptr [edx+94h], 0
.text$mn:00000217                 mov     eax, [ebp+var_10]
.text$mn:0000021A                 mov     dword ptr [eax+98h], 2
.text$mn:00000224                 mov     ecx, [ebp+var_10]
.text$mn:00000227                 mov     dword ptr [ecx+70h], 1
.text$mn:0000022E                 mov     ecx, [ebp+var_10]
.text$mn:00000231                 add     ecx, 9Ch ; 'Â£'
.text$mn:00000237                 call    ?clear@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEXXZ ; std::vector<tTbData *,std::allocator<tTbData *>>::clear(void)
.text$mn:0000023C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000243                 mov     eax, [ebp+var_10]
.text$mn:00000246                 mov     ecx, [ebp+var_C]
.text$mn:00000249                 mov     large fs:0, ecx
.text$mn:00000250                 pop     ecx
.text$mn:00000251                 mov     esp, ebp
.text$mn:00000253                 pop     ebp
.text$mn:00000254                 retn
.text$mn:00000254 ??0DockingCont@@QAE@XZ endp
.text$mn:00000254
.text$mn:00000254 ; ---------------------------------------------------------------------------
.text$mn:00000255                 align 10h
.text$mn:00000260
.text$mn:00000260 ; =============== S U B R O U T I N E =======================================
.text$mn:00000260
.text$mn:00000260 ; Attributes: bp-based frame
.text$mn:00000260
.text$mn:00000260 ; _DWORD __thiscall DockingCont::~DockingCont(DockingCont *__hidden this)
.text$mn:00000260                 public ??1DockingCont@@UAE@XZ
.text$mn:00000260 ??1DockingCont@@UAE@XZ proc near        ; CODE XREF: DockingCont::`scalar deleting destructor'(uint)+Ap
.text$mn:00000260
.text$mn:00000260 var_10          = dword ptr -10h
.text$mn:00000260 var_C           = dword ptr -0Ch
.text$mn:00000260 var_4           = dword ptr -4
.text$mn:00000260
.text$mn:00000260                 push    ebp
.text$mn:00000261                 mov     ebp, esp
.text$mn:00000263                 push    0FFFFFFFFh
.text$mn:00000265                 push    offset __ehhandler$??1DockingCont@@UAE@XZ
.text$mn:0000026A                 mov     eax, large fs:0
.text$mn:00000270                 push    eax
.text$mn:00000271                 push    ecx
.text$mn:00000272                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000277                 xor     eax, ebp
.text$mn:00000279                 push    eax
.text$mn:0000027A                 lea     eax, [ebp+var_C]
.text$mn:0000027D                 mov     large fs:0, eax
.text$mn:00000283                 mov     [ebp+var_10], ecx
.text$mn:00000286                 mov     eax, [ebp+var_10]
.text$mn:00000289                 mov     dword ptr [eax], offset ??_7DockingCont@@6B@ ; const DockingCont::`vftable'
.text$mn:0000028F                 mov     [ebp+var_4], 2
.text$mn:00000296                 mov     ecx, [ebp+var_10]
.text$mn:00000299                 mov     edx, [ecx+30h]
.text$mn:0000029C                 push    edx             ; ho
.text$mn:0000029D                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:000002A3                 mov     byte ptr [ebp+var_4], 1
.text$mn:000002A7                 mov     ecx, [ebp+var_10]
.text$mn:000002AA                 add     ecx, 9Ch ; 'Â£'
.text$mn:000002B0                 call    ??1?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ ; std::vector<tTbData *,std::allocator<tTbData *>>::~vector<tTbData *,std::allocator<tTbData *>>(void)
.text$mn:000002B5                 mov     byte ptr [ebp+var_4], 0
.text$mn:000002B9                 mov     ecx, [ebp+var_10]
.text$mn:000002BC                 add     ecx, 38h ; '8'
.text$mn:000002BF                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000002C4                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000002CB                 mov     ecx, [ebp+var_10] ; this
.text$mn:000002CE                 call    ??1StaticDialog@@UAE@XZ ; StaticDialog::~StaticDialog(void)
.text$mn:000002D3                 mov     ecx, [ebp+var_C]
.text$mn:000002D6                 mov     large fs:0, ecx
.text$mn:000002DD                 pop     ecx
.text$mn:000002DE                 mov     esp, ebp
.text$mn:000002E0                 pop     ebp
.text$mn:000002E1                 retn
.text$mn:000002E1 ??1DockingCont@@UAE@XZ endp
.text$mn:000002E1
.text$mn:000002E1 ; ---------------------------------------------------------------------------
.text$mn:000002E2                 align 10h
.text$mn:000002F0
.text$mn:000002F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000002F0
.text$mn:000002F0 ; Attributes: bp-based frame
.text$mn:000002F0
.text$mn:000002F0 ; public: struct tTbData * __thiscall DockingCont::createToolbar(struct tTbData)
.text$mn:000002F0                 public ?createToolbar@DockingCont@@QAEPAUtTbData@@U2@@Z
.text$mn:000002F0 ?createToolbar@DockingCont@@QAEPAUtTbData@@U2@@Z proc near
.text$mn:000002F0
.text$mn:000002F0 var_C           = dword ptr -0Ch
.text$mn:000002F0 var_8           = dword ptr -8
.text$mn:000002F0 var_4           = dword ptr -4
.text$mn:000002F0 arg_0           = byte ptr  8
.text$mn:000002F0
.text$mn:000002F0                 push    ebp
.text$mn:000002F1                 mov     ebp, esp
.text$mn:000002F3                 sub     esp, 0Ch
.text$mn:000002F6                 push    esi
.text$mn:000002F7                 push    edi
.text$mn:000002F8                 mov     [ebp+var_8], ecx
.text$mn:000002FB                 push    30h ; '0'       ; unsigned int
.text$mn:000002FD                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00000302                 add     esp, 4
.text$mn:00000305                 mov     [ebp+var_C], eax
.text$mn:00000308                 mov     eax, [ebp+var_C]
.text$mn:0000030B                 mov     [ebp+var_4], eax
.text$mn:0000030E                 mov     ecx, 0Ch
.text$mn:00000313                 lea     esi, [ebp+arg_0]
.text$mn:00000316                 mov     edi, [ebp+var_4]
.text$mn:00000319                 rep movsd
.text$mn:0000031B                 push    40000000h       ; dwNewLong
.text$mn:00000320                 push    0FFFFFFF0h      ; nIndex
.text$mn:00000322                 mov     ecx, [ebp+var_4]
.text$mn:00000325                 mov     edx, [ecx]
.text$mn:00000327                 push    edx             ; hWnd
.text$mn:00000328                 call    dword ptr ds:__imp__SetWindowLongW@12 ; SetWindowLongW(x,x,x)
.text$mn:0000032E                 push    0               ; dwNewLong
.text$mn:00000330                 push    0FFFFFFECh      ; nIndex
.text$mn:00000332                 mov     eax, [ebp+var_4]
.text$mn:00000335                 mov     ecx, [eax]
.text$mn:00000337                 push    ecx             ; hWnd
.text$mn:00000338                 call    dword ptr ds:__imp__SetWindowLongW@12 ; SetWindowLongW(x,x,x)
.text$mn:0000033E                 mov     edx, [ebp+var_8]
.text$mn:00000341                 movzx   eax, byte ptr [edx+24h]
.text$mn:00000345                 test    eax, eax
.text$mn:00000347                 jz      short loc_377
.text$mn:00000349                 push    0               ; lParam
.text$mn:0000034B                 push    0               ; wParam
.text$mn:0000034D                 push    1304h           ; Msg
.text$mn:00000352                 mov     ecx, [ebp+var_8]
.text$mn:00000355                 mov     edx, [ecx+2Ch]
.text$mn:00000358                 push    edx             ; hWnd
.text$mn:00000359                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000035F                 test    eax, eax
.text$mn:00000361                 jnz     short loc_377
.text$mn:00000363                 mov     eax, [ebp+var_4]
.text$mn:00000366                 add     eax, 18h
.text$mn:00000369                 push    eax
.text$mn:0000036A                 mov     ecx, [ebp+var_8]
.text$mn:0000036D                 mov     edx, [ecx]
.text$mn:0000036F                 mov     ecx, [ebp+var_8]
.text$mn:00000372                 mov     eax, [edx+14h]
.text$mn:00000375                 call    eax
.text$mn:00000377
.text$mn:00000377 loc_377:                                ; CODE XREF: DockingCont::createToolbar(tTbData)+57j
.text$mn:00000377                                         ; DockingCont::createToolbar(tTbData)+71j
.text$mn:00000377                 push    404h            ; nIDDlgItem
.text$mn:0000037C                 mov     ecx, [ebp+var_8]
.text$mn:0000037F                 mov     edx, [ecx+0Ch]
.text$mn:00000382                 push    edx             ; hDlg
.text$mn:00000383                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00000389                 push    eax             ; hWndNewParent
.text$mn:0000038A                 mov     eax, [ebp+var_4]
.text$mn:0000038D                 mov     ecx, [eax]
.text$mn:0000038F                 push    ecx             ; hWndChild
.text$mn:00000390                 call    dword ptr ds:__imp__SetParent@8 ; SetParent(x,x)
.text$mn:00000396                 mov     edx, [ebp+var_4]
.text$mn:00000399                 push    edx             ; struct tTbData *
.text$mn:0000039A                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000039D                 call    ?viewToolbar@DockingCont@@IAEXPAUtTbData@@@Z ; DockingCont::viewToolbar(tTbData *)
.text$mn:000003A2                 lea     eax, [ebp+var_4]
.text$mn:000003A5                 push    eax
.text$mn:000003A6                 mov     ecx, [ebp+var_8]
.text$mn:000003A9                 add     ecx, 9Ch ; 'Â£'
.text$mn:000003AF                 call    ?push_back@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEXABQAUtTbData@@@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * const &)
.text$mn:000003B4                 mov     eax, [ebp+var_4]
.text$mn:000003B7                 pop     edi
.text$mn:000003B8                 pop     esi
.text$mn:000003B9                 mov     esp, ebp
.text$mn:000003BB                 pop     ebp
.text$mn:000003BC                 retn    30h
.text$mn:000003BC ?createToolbar@DockingCont@@QAEPAUtTbData@@U2@@Z endp
.text$mn:000003BC
.text$mn:000003BC ; ---------------------------------------------------------------------------
.text$mn:000003BF                 align 10h
.text$mn:000003C0
.text$mn:000003C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000003C0
.text$mn:000003C0 ; Attributes: bp-based frame
.text$mn:000003C0
.text$mn:000003C0 ; public: void __thiscall DockingCont::removeToolbar(struct tTbData)
.text$mn:000003C0                 public ?removeToolbar@DockingCont@@QAEXUtTbData@@@Z
.text$mn:000003C0 ?removeToolbar@DockingCont@@QAEXUtTbData@@@Z proc near
.text$mn:000003C0
.text$mn:000003C0 var_54          = dword ptr -54h
.text$mn:000003C0 var_48          = byte ptr -48h
.text$mn:000003C0 var_3C          = dword ptr -3Ch
.text$mn:000003C0 var_30          = dword ptr -30h
.text$mn:000003C0 var_2C          = dword ptr -2Ch
.text$mn:000003C0 var_28          = dword ptr -28h
.text$mn:000003C0 var_24          = dword ptr -24h
.text$mn:000003C0 var_20          = dword ptr -20h
.text$mn:000003C0 var_1C          = dword ptr -1Ch
.text$mn:000003C0 var_18          = dword ptr -18h
.text$mn:000003C0 var_14          = dword ptr -14h
.text$mn:000003C0 Dst             = dword ptr -10h
.text$mn:000003C0 var_C           = dword ptr -0Ch
.text$mn:000003C0 var_4           = dword ptr -4
.text$mn:000003C0 arg_0           = dword ptr  8
.text$mn:000003C0
.text$mn:000003C0                 push    ebp
.text$mn:000003C1                 mov     ebp, esp
.text$mn:000003C3                 push    0FFFFFFFFh
.text$mn:000003C5                 push    offset __ehhandler$?removeToolbar@DockingCont@@QAEXUtTbData@@@Z
.text$mn:000003CA                 mov     eax, large fs:0
.text$mn:000003D0                 push    eax
.text$mn:000003D1                 sub     esp, 48h
.text$mn:000003D4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000003D9                 xor     eax, ebp
.text$mn:000003DB                 push    eax
.text$mn:000003DC                 lea     eax, [ebp+var_C]
.text$mn:000003DF                 mov     large fs:0, eax
.text$mn:000003E5                 mov     [ebp+var_14], ecx
.text$mn:000003E8                 mov     [ebp+Dst], 0
.text$mn:000003EF                 jmp     short loc_3FA
.text$mn:000003F1 ; ---------------------------------------------------------------------------
.text$mn:000003F1
.text$mn:000003F1 loc_3F1:                                ; CODE XREF: DockingCont::removeToolbar(tTbData):loc_4FCj
.text$mn:000003F1                 mov     eax, [ebp+Dst]
.text$mn:000003F4                 add     eax, 1
.text$mn:000003F7                 mov     [ebp+Dst], eax
.text$mn:000003FA
.text$mn:000003FA loc_3FA:                                ; CODE XREF: DockingCont::removeToolbar(tTbData)+2Fj
.text$mn:000003FA                 mov     ecx, [ebp+var_14]
.text$mn:000003FD                 add     ecx, 9Ch ; 'Â£'
.text$mn:00000403                 call    ?size@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ ; std::vector<tTbData *,std::allocator<tTbData *>>::size(void)
.text$mn:00000408                 cmp     [ebp+Dst], eax
.text$mn:0000040B                 jnb     loc_501
.text$mn:00000411                 mov     ecx, [ebp+Dst]
.text$mn:00000414                 push    ecx
.text$mn:00000415                 mov     ecx, [ebp+var_14]
.text$mn:00000418                 add     ecx, 9Ch ; 'Â£'
.text$mn:0000041E                 call    ??A?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEAAPAUtTbData@@I@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)
.text$mn:00000423                 mov     edx, [eax]
.text$mn:00000425                 mov     eax, [edx]
.text$mn:00000427                 cmp     eax, [ebp+arg_0]
.text$mn:0000042A                 jnz     loc_4FC
.text$mn:00000430                 mov     ecx, [ebp+Dst]
.text$mn:00000433                 push    ecx
.text$mn:00000434                 mov     ecx, [ebp+var_14]
.text$mn:00000437                 add     ecx, 9Ch ; 'Â£'
.text$mn:0000043D                 call    ??A?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEAAPAUtTbData@@I@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)
.text$mn:00000442                 mov     edx, [eax]
.text$mn:00000444                 push    edx             ; struct tTbData *
.text$mn:00000445                 mov     ecx, [ebp+var_14] ; this
.text$mn:00000448                 call    ?removeTab@DockingCont@@IAEHPAUtTbData@@@Z ; DockingCont::removeTab(tTbData *)
.text$mn:0000044D                 mov     eax, [ebp+Dst]
.text$mn:00000450                 push    eax
.text$mn:00000451                 mov     ecx, [ebp+var_14]
.text$mn:00000454                 add     ecx, 9Ch ; 'Â£'
.text$mn:0000045A                 call    ??A?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEAAPAUtTbData@@I@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)
.text$mn:0000045F                 mov     ecx, [eax]
.text$mn:00000461                 mov     [ebp+var_18], ecx
.text$mn:00000464                 mov     edx, [ebp+var_18]
.text$mn:00000467                 push    edx             ; void *
.text$mn:00000468                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000046D                 add     esp, 4
.text$mn:00000470                 mov     eax, [ebp+Dst]
.text$mn:00000473                 push    eax             ; Dst
.text$mn:00000474                 lea     ecx, [ebp+var_3C]
.text$mn:00000477                 push    ecx             ; int
.text$mn:00000478                 lea     edx, [ebp+var_48]
.text$mn:0000047B                 push    edx             ; char
.text$mn:0000047C                 mov     ecx, [ebp+var_14]
.text$mn:0000047F                 add     ecx, 9Ch ; 'Â£'
.text$mn:00000485                 call    ?begin@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@XZ ; std::vector<tTbData *,std::allocator<tTbData *>>::begin(void)
.text$mn:0000048A                 mov     [ebp+var_1C], eax
.text$mn:0000048D                 mov     eax, [ebp+var_1C]
.text$mn:00000490                 mov     [ebp+var_20], eax
.text$mn:00000493                 mov     [ebp+var_4], 0
.text$mn:0000049A                 mov     ecx, [ebp+var_20]
.text$mn:0000049D                 call    ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+(int)
.text$mn:000004A2                 mov     byte ptr [ebp+var_4], 2
.text$mn:000004A6                 lea     ecx, [ebp+var_48]
.text$mn:000004A9                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$mn:000004AE                 sub     esp, 0Ch
.text$mn:000004B1                 mov     ecx, esp
.text$mn:000004B3                 mov     [ebp+var_28], esp
.text$mn:000004B6                 lea     edx, [ebp+var_3C]
.text$mn:000004B9                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:000004BA                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>> const &)
.text$mn:000004BF                 mov     [ebp+var_24], eax
.text$mn:000004C2                 mov     eax, [ebp+var_24]
.text$mn:000004C5                 mov     [ebp+var_2C], eax
.text$mn:000004C8                 mov     byte ptr [ebp+var_4], 3
.text$mn:000004CC                 lea     ecx, [ebp+var_54]
.text$mn:000004CF                 push    ecx             ; int
.text$mn:000004D0                 mov     ecx, [ebp+var_14]
.text$mn:000004D3                 add     ecx, 9Ch ; 'Â£'
.text$mn:000004D9                 mov     byte ptr [ebp+var_4], 2
.text$mn:000004DD                 call    ?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>)
.text$mn:000004E2                 mov     [ebp+var_30], eax
.text$mn:000004E5                 lea     ecx, [ebp+var_54]
.text$mn:000004E8                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$mn:000004ED                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000004F4                 lea     ecx, [ebp+var_3C]
.text$mn:000004F7                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$mn:000004FC
.text$mn:000004FC loc_4FC:                                ; CODE XREF: DockingCont::removeToolbar(tTbData)+6Aj
.text$mn:000004FC                 jmp     loc_3F1
.text$mn:00000501 ; ---------------------------------------------------------------------------
.text$mn:00000501
.text$mn:00000501 loc_501:                                ; CODE XREF: DockingCont::removeToolbar(tTbData)+4Bj
.text$mn:00000501                 mov     ecx, [ebp+var_C]
.text$mn:00000504                 mov     large fs:0, ecx
.text$mn:0000050B                 pop     ecx
.text$mn:0000050C                 mov     esp, ebp
.text$mn:0000050E                 pop     ebp
.text$mn:0000050F                 retn    30h
.text$mn:0000050F ?removeToolbar@DockingCont@@QAEXUtTbData@@@Z endp
.text$mn:0000050F
.text$mn:0000050F ; ---------------------------------------------------------------------------
.text$mn:00000512                 align 10h
.text$mn:00000520
.text$mn:00000520 ; =============== S U B R O U T I N E =======================================
.text$mn:00000520
.text$mn:00000520 ; Attributes: bp-based frame
.text$mn:00000520
.text$mn:00000520 ; struct tTbData *__thiscall DockingCont::findToolbarByWnd(DockingCont *this, HWND)
.text$mn:00000520                 public ?findToolbarByWnd@DockingCont@@QAEPAUtTbData@@PAUHWND__@@@Z
.text$mn:00000520 ?findToolbarByWnd@DockingCont@@QAEPAUtTbData@@PAUHWND__@@@Z proc near
.text$mn:00000520
.text$mn:00000520 var_10          = dword ptr -10h
.text$mn:00000520 var_C           = dword ptr -0Ch
.text$mn:00000520 var_8           = dword ptr -8
.text$mn:00000520 var_4           = dword ptr -4
.text$mn:00000520 arg_0           = dword ptr  8
.text$mn:00000520
.text$mn:00000520                 push    ebp
.text$mn:00000521                 mov     ebp, esp
.text$mn:00000523                 sub     esp, 10h
.text$mn:00000526                 mov     [ebp+var_8], ecx
.text$mn:00000529                 mov     [ebp+var_C], 0
.text$mn:00000530                 mov     [ebp+var_4], 0
.text$mn:00000537                 mov     ecx, [ebp+var_8]
.text$mn:0000053A                 add     ecx, 9Ch ; 'Â£'
.text$mn:00000540                 call    ?size@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ ; std::vector<tTbData *,std::allocator<tTbData *>>::size(void)
.text$mn:00000545                 mov     [ebp+var_10], eax
.text$mn:00000548                 jmp     short loc_553
.text$mn:0000054A ; ---------------------------------------------------------------------------
.text$mn:0000054A
.text$mn:0000054A loc_54A:                                ; CODE XREF: DockingCont::findToolbarByWnd(HWND__ *):loc_58Dj
.text$mn:0000054A                 mov     eax, [ebp+var_4]
.text$mn:0000054D                 add     eax, 1
.text$mn:00000550                 mov     [ebp+var_4], eax
.text$mn:00000553
.text$mn:00000553 loc_553:                                ; CODE XREF: DockingCont::findToolbarByWnd(HWND__ *)+28j
.text$mn:00000553                 mov     ecx, [ebp+var_4]
.text$mn:00000556                 cmp     ecx, [ebp+var_10]
.text$mn:00000559                 jnb     short loc_58F
.text$mn:0000055B                 mov     edx, [ebp+var_4]
.text$mn:0000055E                 push    edx
.text$mn:0000055F                 mov     ecx, [ebp+var_8]
.text$mn:00000562                 add     ecx, 9Ch ; 'Â£'
.text$mn:00000568                 call    ??A?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEAAPAUtTbData@@I@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)
.text$mn:0000056D                 mov     eax, [eax]
.text$mn:0000056F                 mov     ecx, [ebp+arg_0]
.text$mn:00000572                 cmp     ecx, [eax]
.text$mn:00000574                 jnz     short loc_58D
.text$mn:00000576                 mov     edx, [ebp+var_4]
.text$mn:00000579                 push    edx
.text$mn:0000057A                 mov     ecx, [ebp+var_8]
.text$mn:0000057D                 add     ecx, 9Ch ; 'Â£'
.text$mn:00000583                 call    ??A?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEAAPAUtTbData@@I@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)
.text$mn:00000588                 mov     eax, [eax]
.text$mn:0000058A                 mov     [ebp+var_C], eax
.text$mn:0000058D
.text$mn:0000058D loc_58D:                                ; CODE XREF: DockingCont::findToolbarByWnd(HWND__ *)+54j
.text$mn:0000058D                 jmp     short loc_54A
.text$mn:0000058F ; ---------------------------------------------------------------------------
.text$mn:0000058F
.text$mn:0000058F loc_58F:                                ; CODE XREF: DockingCont::findToolbarByWnd(HWND__ *)+39j
.text$mn:0000058F                 mov     eax, [ebp+var_C]
.text$mn:00000592                 mov     esp, ebp
.text$mn:00000594                 pop     ebp
.text$mn:00000595                 retn    4
.text$mn:00000595 ?findToolbarByWnd@DockingCont@@QAEPAUtTbData@@PAUHWND__@@@Z endp
.text$mn:00000595
.text$mn:00000595 ; ---------------------------------------------------------------------------
.text$mn:00000598                 align 10h
.text$mn:000005A0
.text$mn:000005A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000005A0
.text$mn:000005A0 ; Attributes: bp-based frame
.text$mn:000005A0
.text$mn:000005A0 ; struct tTbData *__thiscall DockingCont::findToolbarByName(DockingCont *this, wchar_t *)
.text$mn:000005A0                 public ?findToolbarByName@DockingCont@@QAEPAUtTbData@@PA_W@Z
.text$mn:000005A0 ?findToolbarByName@DockingCont@@QAEPAUtTbData@@PA_W@Z proc near
.text$mn:000005A0
.text$mn:000005A0 var_10          = dword ptr -10h
.text$mn:000005A0 var_C           = dword ptr -0Ch
.text$mn:000005A0 var_8           = dword ptr -8
.text$mn:000005A0 var_4           = dword ptr -4
.text$mn:000005A0 lpString1       = dword ptr  8
.text$mn:000005A0
.text$mn:000005A0                 push    ebp
.text$mn:000005A1                 mov     ebp, esp
.text$mn:000005A3                 sub     esp, 10h
.text$mn:000005A6                 mov     [ebp+var_8], ecx
.text$mn:000005A9                 mov     [ebp+var_C], 0
.text$mn:000005B0                 mov     [ebp+var_4], 0
.text$mn:000005B7                 mov     ecx, [ebp+var_8]
.text$mn:000005BA                 add     ecx, 9Ch ; 'Â£'
.text$mn:000005C0                 call    ?size@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ ; std::vector<tTbData *,std::allocator<tTbData *>>::size(void)
.text$mn:000005C5                 mov     [ebp+var_10], eax
.text$mn:000005C8                 jmp     short loc_5D3
.text$mn:000005CA ; ---------------------------------------------------------------------------
.text$mn:000005CA
.text$mn:000005CA loc_5CA:                                ; CODE XREF: DockingCont::findToolbarByName(wchar_t *):loc_618j
.text$mn:000005CA                 mov     eax, [ebp+var_4]
.text$mn:000005CD                 add     eax, 1
.text$mn:000005D0                 mov     [ebp+var_4], eax
.text$mn:000005D3
.text$mn:000005D3 loc_5D3:                                ; CODE XREF: DockingCont::findToolbarByName(wchar_t *)+28j
.text$mn:000005D3                 mov     ecx, [ebp+var_4]
.text$mn:000005D6                 cmp     ecx, [ebp+var_10]
.text$mn:000005D9                 jnb     short loc_61A
.text$mn:000005DB                 mov     edx, [ebp+var_4]
.text$mn:000005DE                 push    edx
.text$mn:000005DF                 mov     ecx, [ebp+var_8]
.text$mn:000005E2                 add     ecx, 9Ch ; 'Â£'
.text$mn:000005E8                 call    ??A?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEAAPAUtTbData@@I@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)
.text$mn:000005ED                 mov     eax, [eax]
.text$mn:000005EF                 mov     ecx, [eax+4]
.text$mn:000005F2                 push    ecx             ; lpString2
.text$mn:000005F3                 mov     edx, [ebp+lpString1]
.text$mn:000005F6                 push    edx             ; lpString1
.text$mn:000005F7                 call    dword ptr ds:__imp__lstrcmpW@8 ; lstrcmpW(x,x)
.text$mn:000005FD                 test    eax, eax
.text$mn:000005FF                 jnz     short loc_618
.text$mn:00000601                 mov     eax, [ebp+var_4]
.text$mn:00000604                 push    eax
.text$mn:00000605                 mov     ecx, [ebp+var_8]
.text$mn:00000608                 add     ecx, 9Ch ; 'Â£'
.text$mn:0000060E                 call    ??A?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEAAPAUtTbData@@I@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)
.text$mn:00000613                 mov     ecx, [eax]
.text$mn:00000615                 mov     [ebp+var_C], ecx
.text$mn:00000618
.text$mn:00000618 loc_618:                                ; CODE XREF: DockingCont::findToolbarByName(wchar_t *)+5Fj
.text$mn:00000618                 jmp     short loc_5CA
.text$mn:0000061A ; ---------------------------------------------------------------------------
.text$mn:0000061A
.text$mn:0000061A loc_61A:                                ; CODE XREF: DockingCont::findToolbarByName(wchar_t *)+39j
.text$mn:0000061A                 mov     eax, [ebp+var_C]
.text$mn:0000061D                 mov     esp, ebp
.text$mn:0000061F                 pop     ebp
.text$mn:00000620                 retn    4
.text$mn:00000620 ?findToolbarByName@DockingCont@@QAEPAUtTbData@@PA_W@Z endp
.text$mn:00000620
.text$mn:00000620 ; ---------------------------------------------------------------------------
.text$mn:00000623                 align 10h
.text$mn:00000630
.text$mn:00000630 ; =============== S U B R O U T I N E =======================================
.text$mn:00000630
.text$mn:00000630 ; Attributes: bp-based frame
.text$mn:00000630
.text$mn:00000630 ; void __thiscall DockingCont::showToolbar(DockingCont *this, struct tTbData *, int)
.text$mn:00000630                 public ?showToolbar@DockingCont@@QAEXPAUtTbData@@H@Z
.text$mn:00000630 ?showToolbar@DockingCont@@QAEXPAUtTbData@@H@Z proc near
.text$mn:00000630
.text$mn:00000630 var_4           = dword ptr -4
.text$mn:00000630 arg_0           = dword ptr  8
.text$mn:00000630 arg_4           = dword ptr  0Ch
.text$mn:00000630
.text$mn:00000630                 push    ebp
.text$mn:00000631                 mov     ebp, esp
.text$mn:00000633                 push    ecx
.text$mn:00000634                 mov     [ebp+var_4], ecx
.text$mn:00000637                 cmp     [ebp+arg_4], 5
.text$mn:0000063B                 jnz     short loc_64B
.text$mn:0000063D                 mov     eax, [ebp+arg_0]
.text$mn:00000640                 push    eax             ; struct tTbData *
.text$mn:00000641                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000644                 call    ?viewToolbar@DockingCont@@IAEXPAUtTbData@@@Z ; DockingCont::viewToolbar(tTbData *)
.text$mn:00000649                 jmp     short loc_659
.text$mn:0000064B ; ---------------------------------------------------------------------------
.text$mn:0000064B
.text$mn:0000064B loc_64B:                                ; CODE XREF: DockingCont::showToolbar(tTbData *,int)+Bj
.text$mn:0000064B                 push    1               ; int
.text$mn:0000064D                 mov     ecx, [ebp+arg_0]
.text$mn:00000650                 push    ecx             ; struct tTbData *
.text$mn:00000651                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000654                 call    ?hideToolbar@DockingCont@@IAEHPAUtTbData@@H@Z ; DockingCont::hideToolbar(tTbData *,int)
.text$mn:00000659
.text$mn:00000659 loc_659:                                ; CODE XREF: DockingCont::showToolbar(tTbData *,int)+19j
.text$mn:00000659                 mov     esp, ebp
.text$mn:0000065B                 pop     ebp
.text$mn:0000065C                 retn    8
.text$mn:0000065C ?showToolbar@DockingCont@@QAEXPAUtTbData@@H@Z endp
.text$mn:0000065C
.text$mn:0000065C ; ---------------------------------------------------------------------------
.text$mn:0000065F                 align 10h
.text$mn:00000660
.text$mn:00000660 ; =============== S U B R O U T I N E =======================================
.text$mn:00000660
.text$mn:00000660 ; Attributes: bp-based frame
.text$mn:00000660
.text$mn:00000660 ; void __thiscall DockingCont::setActiveTb(DockingCont *this, struct tTbData *)
.text$mn:00000660                 public ?setActiveTb@DockingCont@@QAEXPAUtTbData@@@Z
.text$mn:00000660 ?setActiveTb@DockingCont@@QAEXPAUtTbData@@@Z proc near
.text$mn:00000660
.text$mn:00000660 var_8           = dword ptr -8
.text$mn:00000660 var_4           = dword ptr -4
.text$mn:00000660 arg_0           = dword ptr  8
.text$mn:00000660
.text$mn:00000660                 push    ebp
.text$mn:00000661                 mov     ebp, esp
.text$mn:00000663                 sub     esp, 8
.text$mn:00000666                 mov     [ebp+var_4], ecx
.text$mn:00000669                 mov     eax, [ebp+arg_0]
.text$mn:0000066C                 push    eax             ; struct tTbData *
.text$mn:0000066D                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000670                 call    ?SearchPosInTab@DockingCont@@IAEHPAUtTbData@@@Z ; DockingCont::SearchPosInTab(tTbData *)
.text$mn:00000675                 mov     [ebp+var_8], eax
.text$mn:00000678                 mov     ecx, [ebp+var_8]
.text$mn:0000067B                 push    ecx             ; int
.text$mn:0000067C                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000067F                 call    ?setActiveTb@DockingCont@@QAEXH@Z ; DockingCont::setActiveTb(int)
.text$mn:00000684                 mov     esp, ebp
.text$mn:00000686                 pop     ebp
.text$mn:00000687                 retn    4
.text$mn:00000687 ?setActiveTb@DockingCont@@QAEXPAUtTbData@@@Z endp
.text$mn:00000687
.text$mn:00000687 ; ---------------------------------------------------------------------------
.text$mn:0000068A                 align 10h
.text$mn:00000690
.text$mn:00000690 ; =============== S U B R O U T I N E =======================================
.text$mn:00000690
.text$mn:00000690 ; Attributes: bp-based frame
.text$mn:00000690
.text$mn:00000690 ; void __thiscall DockingCont::setActiveTb(DockingCont *this, int)
.text$mn:00000690                 public ?setActiveTb@DockingCont@@QAEXH@Z
.text$mn:00000690 ?setActiveTb@DockingCont@@QAEXH@Z proc near
.text$mn:00000690                                         ; CODE XREF: DockingCont::setActiveTb(tTbData *)+1Fp
.text$mn:00000690
.text$mn:00000690 var_4           = dword ptr -4
.text$mn:00000690 arg_0           = dword ptr  8
.text$mn:00000690
.text$mn:00000690                 push    ebp
.text$mn:00000691                 mov     ebp, esp
.text$mn:00000693                 push    ecx
.text$mn:00000694                 mov     [ebp+var_4], ecx
.text$mn:00000697                 push    0               ; lParam
.text$mn:00000699                 push    0               ; wParam
.text$mn:0000069B                 push    1304h           ; Msg
.text$mn:000006A0                 mov     eax, [ebp+var_4]
.text$mn:000006A3                 mov     ecx, [eax+2Ch]
.text$mn:000006A6                 push    ecx             ; hWnd
.text$mn:000006A7                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000006AD                 cmp     [ebp+arg_0], eax
.text$mn:000006B0                 jge     short loc_6BE
.text$mn:000006B2                 mov     edx, [ebp+arg_0]
.text$mn:000006B5                 push    edx             ; int
.text$mn:000006B6                 mov     ecx, [ebp+var_4] ; this
.text$mn:000006B9                 call    ?SelectTab@DockingCont@@IAEXH@Z ; DockingCont::SelectTab(int)
.text$mn:000006BE
.text$mn:000006BE loc_6BE:                                ; CODE XREF: DockingCont::setActiveTb(int)+20j
.text$mn:000006BE                 mov     esp, ebp
.text$mn:000006C0                 pop     ebp
.text$mn:000006C1                 retn    4
.text$mn:000006C1 ?setActiveTb@DockingCont@@QAEXH@Z endp
.text$mn:000006C1
.text$mn:000006C1 ; ---------------------------------------------------------------------------
.text$mn:000006C4                 align 10h
.text$mn:000006D0
.text$mn:000006D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000006D0
.text$mn:000006D0 ; Attributes: bp-based frame
.text$mn:000006D0
.text$mn:000006D0 ; int __thiscall DockingCont::getActiveTb(DockingCont *__hidden this)
.text$mn:000006D0                 public ?getActiveTb@DockingCont@@QAEHXZ
.text$mn:000006D0 ?getActiveTb@DockingCont@@QAEHXZ proc near
.text$mn:000006D0                                         ; CODE XREF: DockingCont::getDataOfActiveTb(void)+13p
.text$mn:000006D0                                         ; DockingCont::focusClient(void)+27p ...
.text$mn:000006D0
.text$mn:000006D0 var_4           = dword ptr -4
.text$mn:000006D0
.text$mn:000006D0                 push    ebp
.text$mn:000006D1                 mov     ebp, esp
.text$mn:000006D3                 push    ecx
.text$mn:000006D4                 mov     [ebp+var_4], ecx
.text$mn:000006D7                 push    0               ; lParam
.text$mn:000006D9                 push    0               ; wParam
.text$mn:000006DB                 push    130Bh           ; Msg
.text$mn:000006E0                 mov     eax, [ebp+var_4]
.text$mn:000006E3                 mov     ecx, [eax+2Ch]
.text$mn:000006E6                 push    ecx             ; hWnd
.text$mn:000006E7                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000006ED                 mov     esp, ebp
.text$mn:000006EF                 pop     ebp
.text$mn:000006F0                 retn
.text$mn:000006F0 ?getActiveTb@DockingCont@@QAEHXZ endp
.text$mn:000006F0
.text$mn:000006F0 ; ---------------------------------------------------------------------------
.text$mn:000006F1                 align 10h
.text$mn:00000700
.text$mn:00000700 ; =============== S U B R O U T I N E =======================================
.text$mn:00000700
.text$mn:00000700 ; Attributes: bp-based frame
.text$mn:00000700
.text$mn:00000700 ; struct tTbData *__thiscall DockingCont::getDataOfActiveTb(DockingCont *__hidden this)
.text$mn:00000700                 public ?getDataOfActiveTb@DockingCont@@QAEPAUtTbData@@XZ
.text$mn:00000700 ?getDataOfActiveTb@DockingCont@@QAEPAUtTbData@@XZ proc near
.text$mn:00000700
.text$mn:00000700 lParam          = dword ptr -28h
.text$mn:00000700 var_24          = dword ptr -24h
.text$mn:00000700 var_20          = dword ptr -20h
.text$mn:00000700 var_1C          = dword ptr -1Ch
.text$mn:00000700 var_18          = dword ptr -18h
.text$mn:00000700 var_14          = dword ptr -14h
.text$mn:00000700 var_10          = dword ptr -10h
.text$mn:00000700 var_C           = dword ptr -0Ch
.text$mn:00000700 var_8           = dword ptr -8
.text$mn:00000700 wParam          = dword ptr -4
.text$mn:00000700
.text$mn:00000700                 push    ebp
.text$mn:00000701                 mov     ebp, esp
.text$mn:00000703                 sub     esp, 28h
.text$mn:00000706                 mov     [ebp+var_8], ecx
.text$mn:00000709                 mov     [ebp+var_C], 0
.text$mn:00000710                 mov     ecx, [ebp+var_8] ; this
.text$mn:00000713                 call    ?getActiveTb@DockingCont@@QAEHXZ ; DockingCont::getActiveTb(void)
.text$mn:00000718                 mov     [ebp+wParam], eax
.text$mn:0000071B                 cmp     [ebp+wParam], 0FFFFFFFFh
.text$mn:0000071F                 jz      short loc_763
.text$mn:00000721                 mov     [ebp+lParam], 0
.text$mn:00000728                 xor     eax, eax
.text$mn:0000072A                 mov     [ebp+var_24], eax
.text$mn:0000072D                 mov     [ebp+var_20], eax
.text$mn:00000730                 mov     [ebp+var_1C], eax
.text$mn:00000733                 mov     [ebp+var_18], eax
.text$mn:00000736                 mov     [ebp+var_14], eax
.text$mn:00000739                 mov     [ebp+var_10], eax
.text$mn:0000073C                 mov     [ebp+lParam], 8
.text$mn:00000743                 lea     ecx, [ebp+lParam]
.text$mn:00000746                 push    ecx             ; lParam
.text$mn:00000747                 mov     edx, [ebp+wParam]
.text$mn:0000074A                 push    edx             ; wParam
.text$mn:0000074B                 push    133Ch           ; Msg
.text$mn:00000750                 mov     eax, [ebp+var_8]
.text$mn:00000753                 mov     ecx, [eax+2Ch]
.text$mn:00000756                 push    ecx             ; hWnd
.text$mn:00000757                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000075D                 mov     edx, [ebp+var_10]
.text$mn:00000760                 mov     [ebp+var_C], edx
.text$mn:00000763
.text$mn:00000763 loc_763:                                ; CODE XREF: DockingCont::getDataOfActiveTb(void)+1Fj
.text$mn:00000763                 mov     eax, [ebp+var_C]
.text$mn:00000766                 mov     esp, ebp
.text$mn:00000768                 pop     ebp
.text$mn:00000769                 retn
.text$mn:00000769 ?getDataOfActiveTb@DockingCont@@QAEPAUtTbData@@XZ endp
.text$mn:00000769
.text$mn:00000769 ; ---------------------------------------------------------------------------
.text$mn:0000076A                 align 10h
.text$mn:00000770
.text$mn:00000770 ; =============== S U B R O U T I N E =======================================
.text$mn:00000770
.text$mn:00000770 ; Attributes: bp-based frame
.text$mn:00000770
.text$mn:00000770 ; public: class std::vector<struct tTbData *, class std::allocator<struct tTbData *>> __thiscall DockingCont::getDataOfVisTb(void)
.text$mn:00000770                 public ?getDataOfVisTb@DockingCont@@QAE?AV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@XZ
.text$mn:00000770 ?getDataOfVisTb@DockingCont@@QAE?AV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@XZ proc near
.text$mn:00000770
.text$mn:00000770 lParam          = dword ptr -4Ch
.text$mn:00000770 var_48          = dword ptr -48h
.text$mn:00000770 var_44          = dword ptr -44h
.text$mn:00000770 var_40          = dword ptr -40h
.text$mn:00000770 var_3C          = dword ptr -3Ch
.text$mn:00000770 var_38          = dword ptr -38h
.text$mn:00000770 var_34          = dword ptr -34h
.text$mn:00000770 var_30          = byte ptr -30h
.text$mn:00000770 var_20          = dword ptr -20h
.text$mn:00000770 var_1C          = dword ptr -1Ch
.text$mn:00000770 var_18          = dword ptr -18h
.text$mn:00000770 var_14          = dword ptr -14h
.text$mn:00000770 wParam          = dword ptr -10h
.text$mn:00000770 var_C           = dword ptr -0Ch
.text$mn:00000770 var_4           = dword ptr -4
.text$mn:00000770 arg_0           = dword ptr  8
.text$mn:00000770
.text$mn:00000770                 push    ebp
.text$mn:00000771                 mov     ebp, esp
.text$mn:00000773                 push    0FFFFFFFFh
.text$mn:00000775                 push    offset __ehhandler$?getDataOfVisTb@DockingCont@@QAE?AV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@XZ
.text$mn:0000077A                 mov     eax, large fs:0
.text$mn:00000780                 push    eax
.text$mn:00000781                 sub     esp, 40h
.text$mn:00000784                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000789                 xor     eax, ebp
.text$mn:0000078B                 push    eax
.text$mn:0000078C                 lea     eax, [ebp+var_C]
.text$mn:0000078F                 mov     large fs:0, eax
.text$mn:00000795                 mov     [ebp+var_14], ecx
.text$mn:00000798                 mov     [ebp+var_18], 0
.text$mn:0000079F                 lea     ecx, [ebp+var_30]
.text$mn:000007A2                 call    ??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ ; std::vector<tTbData *,std::allocator<tTbData *>>::vector<tTbData *,std::allocator<tTbData *>>(void)
.text$mn:000007A7                 mov     [ebp+var_4], 1
.text$mn:000007AE                 mov     [ebp+lParam], 0
.text$mn:000007B5                 xor     eax, eax
.text$mn:000007B7                 mov     [ebp+var_48], eax
.text$mn:000007BA                 mov     [ebp+var_44], eax
.text$mn:000007BD                 mov     [ebp+var_40], eax
.text$mn:000007C0                 mov     [ebp+var_3C], eax
.text$mn:000007C3                 mov     [ebp+var_38], eax
.text$mn:000007C6                 mov     [ebp+var_34], eax
.text$mn:000007C9                 push    0               ; lParam
.text$mn:000007CB                 push    0               ; wParam
.text$mn:000007CD                 push    1304h           ; Msg
.text$mn:000007D2                 mov     ecx, [ebp+var_14]
.text$mn:000007D5                 mov     edx, [ecx+2Ch]
.text$mn:000007D8                 push    edx             ; hWnd
.text$mn:000007D9                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000007DF                 mov     [ebp+var_1C], eax
.text$mn:000007E2                 mov     [ebp+lParam], 8
.text$mn:000007E9                 mov     [ebp+wParam], 0
.text$mn:000007F0                 jmp     short loc_7FB
.text$mn:000007F2 ; ---------------------------------------------------------------------------
.text$mn:000007F2
.text$mn:000007F2 loc_7F2:                                ; CODE XREF: DockingCont::getDataOfVisTb(void)+BFj
.text$mn:000007F2                 mov     eax, [ebp+wParam]
.text$mn:000007F5                 add     eax, 1
.text$mn:000007F8                 mov     [ebp+wParam], eax
.text$mn:000007FB
.text$mn:000007FB loc_7FB:                                ; CODE XREF: DockingCont::getDataOfVisTb(void)+80j
.text$mn:000007FB                 mov     ecx, [ebp+wParam]
.text$mn:000007FE                 cmp     ecx, [ebp+var_1C]
.text$mn:00000801                 jge     short loc_831
.text$mn:00000803                 lea     edx, [ebp+lParam]
.text$mn:00000806                 push    edx             ; lParam
.text$mn:00000807                 mov     eax, [ebp+wParam]
.text$mn:0000080A                 push    eax             ; wParam
.text$mn:0000080B                 push    133Ch           ; Msg
.text$mn:00000810                 mov     ecx, [ebp+var_14]
.text$mn:00000813                 mov     edx, [ecx+2Ch]
.text$mn:00000816                 push    edx             ; hWnd
.text$mn:00000817                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000081D                 mov     eax, [ebp+var_34]
.text$mn:00000820                 mov     [ebp+var_20], eax
.text$mn:00000823                 lea     ecx, [ebp+var_20]
.text$mn:00000826                 push    ecx
.text$mn:00000827                 lea     ecx, [ebp+var_30]
.text$mn:0000082A                 call    ?push_back@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEX$$QAPAUtTbData@@@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * &&)
.text$mn:0000082F                 jmp     short loc_7F2
.text$mn:00000831 ; ---------------------------------------------------------------------------
.text$mn:00000831
.text$mn:00000831 loc_831:                                ; CODE XREF: DockingCont::getDataOfVisTb(void)+91j
.text$mn:00000831                 lea     edx, [ebp+var_30]
.text$mn:00000834                 push    edx
.text$mn:00000835                 mov     ecx, [ebp+arg_0]
.text$mn:00000838                 call    ??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@$$QAV01@@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::vector<tTbData *,std::allocator<tTbData *>>(std::vector<tTbData *,std::allocator<tTbData *>> &&)
.text$mn:0000083D                 mov     eax, [ebp+var_18]
.text$mn:00000840                 or      eax, 1
.text$mn:00000843                 mov     [ebp+var_18], eax
.text$mn:00000846                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000084A                 lea     ecx, [ebp+var_30]
.text$mn:0000084D                 call    ??1?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ ; std::vector<tTbData *,std::allocator<tTbData *>>::~vector<tTbData *,std::allocator<tTbData *>>(void)
.text$mn:00000852                 mov     eax, [ebp+arg_0]
.text$mn:00000855                 mov     ecx, [ebp+var_C]
.text$mn:00000858                 mov     large fs:0, ecx
.text$mn:0000085F                 pop     ecx
.text$mn:00000860                 mov     esp, ebp
.text$mn:00000862                 pop     ebp
.text$mn:00000863                 retn    4
.text$mn:00000863 ?getDataOfVisTb@DockingCont@@QAE?AV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@XZ endp
.text$mn:00000863
.text$mn:00000863 ; ---------------------------------------------------------------------------
.text$mn:00000866                 align 10h
.text$mn:00000870
.text$mn:00000870 ; =============== S U B R O U T I N E =======================================
.text$mn:00000870
.text$mn:00000870 ; Attributes: bp-based frame
.text$mn:00000870
.text$mn:00000870 ; bool __thiscall DockingCont::isTbVis(DockingCont *this, struct tTbData *)
.text$mn:00000870                 public ?isTbVis@DockingCont@@QAE_NPAUtTbData@@@Z
.text$mn:00000870 ?isTbVis@DockingCont@@QAE_NPAUtTbData@@@Z proc near
.text$mn:00000870
.text$mn:00000870 lParam          = dword ptr -28h
.text$mn:00000870 var_24          = dword ptr -24h
.text$mn:00000870 var_20          = dword ptr -20h
.text$mn:00000870 var_1C          = dword ptr -1Ch
.text$mn:00000870 var_18          = dword ptr -18h
.text$mn:00000870 var_14          = dword ptr -14h
.text$mn:00000870 var_10          = dword ptr -10h
.text$mn:00000870 var_C           = dword ptr -0Ch
.text$mn:00000870 var_8           = dword ptr -8
.text$mn:00000870 wParam          = dword ptr -4
.text$mn:00000870 arg_0           = dword ptr  8
.text$mn:00000870
.text$mn:00000870                 push    ebp
.text$mn:00000871                 mov     ebp, esp
.text$mn:00000873                 sub     esp, 28h
.text$mn:00000876                 mov     [ebp+var_8], ecx
.text$mn:00000879                 mov     [ebp+lParam], 0
.text$mn:00000880                 xor     eax, eax
.text$mn:00000882                 mov     [ebp+var_24], eax
.text$mn:00000885                 mov     [ebp+var_20], eax
.text$mn:00000888                 mov     [ebp+var_1C], eax
.text$mn:0000088B                 mov     [ebp+var_18], eax
.text$mn:0000088E                 mov     [ebp+var_14], eax
.text$mn:00000891                 mov     [ebp+var_10], eax
.text$mn:00000894                 push    0               ; lParam
.text$mn:00000896                 push    0               ; wParam
.text$mn:00000898                 push    1304h           ; Msg
.text$mn:0000089D                 mov     ecx, [ebp+var_8]
.text$mn:000008A0                 mov     edx, [ecx+2Ch]
.text$mn:000008A3                 push    edx             ; hWnd
.text$mn:000008A4                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000008AA                 mov     [ebp+var_C], eax
.text$mn:000008AD                 mov     [ebp+lParam], 8
.text$mn:000008B4                 mov     [ebp+wParam], 0
.text$mn:000008BB                 jmp     short loc_8C6
.text$mn:000008BD ; ---------------------------------------------------------------------------
.text$mn:000008BD
.text$mn:000008BD loc_8BD:                                ; CODE XREF: DockingCont::isTbVis(tTbData *):loc_8FEj
.text$mn:000008BD                 mov     eax, [ebp+wParam]
.text$mn:000008C0                 add     eax, 1
.text$mn:000008C3                 mov     [ebp+wParam], eax
.text$mn:000008C6
.text$mn:000008C6 loc_8C6:                                ; CODE XREF: DockingCont::isTbVis(tTbData *)+4Bj
.text$mn:000008C6                 mov     ecx, [ebp+wParam]
.text$mn:000008C9                 cmp     ecx, [ebp+var_C]
.text$mn:000008CC                 jge     short loc_900
.text$mn:000008CE                 lea     edx, [ebp+lParam]
.text$mn:000008D1                 push    edx             ; lParam
.text$mn:000008D2                 mov     eax, [ebp+wParam]
.text$mn:000008D5                 push    eax             ; wParam
.text$mn:000008D6                 push    133Ch           ; Msg
.text$mn:000008DB                 mov     ecx, [ebp+var_8]
.text$mn:000008DE                 mov     edx, [ecx+2Ch]
.text$mn:000008E1                 push    edx             ; hWnd
.text$mn:000008E2                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000008E8                 cmp     [ebp+var_10], 0
.text$mn:000008EC                 jnz     short loc_8F2
.text$mn:000008EE                 xor     al, al
.text$mn:000008F0                 jmp     short loc_902
.text$mn:000008F2 ; ---------------------------------------------------------------------------
.text$mn:000008F2
.text$mn:000008F2 loc_8F2:                                ; CODE XREF: DockingCont::isTbVis(tTbData *)+7Cj
.text$mn:000008F2                 mov     eax, [ebp+var_10]
.text$mn:000008F5                 cmp     eax, [ebp+arg_0]
.text$mn:000008F8                 jnz     short loc_8FE
.text$mn:000008FA                 mov     al, 1
.text$mn:000008FC                 jmp     short loc_902
.text$mn:000008FE ; ---------------------------------------------------------------------------
.text$mn:000008FE
.text$mn:000008FE loc_8FE:                                ; CODE XREF: DockingCont::isTbVis(tTbData *)+88j
.text$mn:000008FE                 jmp     short loc_8BD
.text$mn:00000900 ; ---------------------------------------------------------------------------
.text$mn:00000900
.text$mn:00000900 loc_900:                                ; CODE XREF: DockingCont::isTbVis(tTbData *)+5Cj
.text$mn:00000900                 xor     al, al
.text$mn:00000902
.text$mn:00000902 loc_902:                                ; CODE XREF: DockingCont::isTbVis(tTbData *)+80j
.text$mn:00000902                                         ; DockingCont::isTbVis(tTbData *)+8Cj
.text$mn:00000902                 mov     esp, ebp
.text$mn:00000904                 pop     ebp
.text$mn:00000905                 retn    4
.text$mn:00000905 ?isTbVis@DockingCont@@QAE_NPAUtTbData@@@Z endp
.text$mn:00000905
.text$mn:00000905 ; ---------------------------------------------------------------------------
.text$mn:00000908                 align 10h
.text$mn:00000910
.text$mn:00000910 ; =============== S U B R O U T I N E =======================================
.text$mn:00000910
.text$mn:00000910 ; Attributes: bp-based frame
.text$mn:00000910
.text$mn:00000910 ; void __thiscall DockingCont::doDialog(DockingCont *this, bool, bool)
.text$mn:00000910                 public ?doDialog@DockingCont@@QAEX_N0@Z
.text$mn:00000910 ?doDialog@DockingCont@@QAEX_N0@Z proc near
.text$mn:00000910                                         ; CODE XREF: DockingCont::doClose(void)+CFp
.text$mn:00000910                                         ; DockingCont::hideToolbar(tTbData *,int)+C1p ...
.text$mn:00000910
.text$mn:00000910 var_4           = dword ptr -4
.text$mn:00000910 arg_0           = byte ptr  8
.text$mn:00000910 arg_4           = byte ptr  0Ch
.text$mn:00000910
.text$mn:00000910                 push    ebp
.text$mn:00000911                 mov     ebp, esp
.text$mn:00000913                 push    ecx
.text$mn:00000914                 mov     [ebp+var_4], ecx
.text$mn:00000917                 mov     eax, [ebp+var_4]
.text$mn:0000091A                 mov     edx, [eax]
.text$mn:0000091C                 mov     ecx, [ebp+var_4]
.text$mn:0000091F                 mov     eax, [edx+34h]
.text$mn:00000922                 call    eax
.text$mn:00000924                 movzx   ecx, al
.text$mn:00000927                 test    ecx, ecx
.text$mn:00000929                 jnz     loc_9D4
.text$mn:0000092F                 push    1
.text$mn:00000931                 push    0
.text$mn:00000933                 push    8Bh ; 'Ã¯'
.text$mn:00000938                 mov     edx, [ebp+var_4]
.text$mn:0000093B                 mov     eax, [edx]
.text$mn:0000093D                 mov     ecx, [ebp+var_4]
.text$mn:00000940                 mov     edx, [eax+30h]
.text$mn:00000943                 call    edx
.text$mn:00000945                 mov     eax, [ebp+var_4]
.text$mn:00000948                 mov     cl, [ebp+arg_4]
.text$mn:0000094B                 mov     [eax+24h], cl
.text$mn:0000094E                 mov     edx, [ebp+var_4]
.text$mn:00000951                 movzx   eax, byte ptr [edx+24h]
.text$mn:00000955                 test    eax, eax
.text$mn:00000957                 jz      short loc_992
.text$mn:00000959                 push    84CD0000h       ; dwNewLong
.text$mn:0000095E                 push    0FFFFFFF0h      ; nIndex
.text$mn:00000960                 mov     ecx, [ebp+var_4]
.text$mn:00000963                 mov     edx, [ecx+0Ch]
.text$mn:00000966                 push    edx             ; hWnd
.text$mn:00000967                 call    dword ptr ds:__imp__SetWindowLongW@12 ; SetWindowLongW(x,x,x)
.text$mn:0000096D                 push    10180h          ; dwNewLong
.text$mn:00000972                 push    0FFFFFFECh      ; nIndex
.text$mn:00000974                 mov     eax, [ebp+var_4]
.text$mn:00000977                 mov     ecx, [eax+0Ch]
.text$mn:0000097A                 push    ecx             ; hWnd
.text$mn:0000097B                 call    dword ptr ds:__imp__SetWindowLongW@12 ; SetWindowLongW(x,x,x)
.text$mn:00000981                 push    0               ; nCmdShow
.text$mn:00000983                 mov     edx, [ebp+var_4]
.text$mn:00000986                 mov     eax, [edx+28h]
.text$mn:00000989                 push    eax             ; hWnd
.text$mn:0000098A                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00000990                 jmp     short loc_9C6
.text$mn:00000992 ; ---------------------------------------------------------------------------
.text$mn:00000992
.text$mn:00000992 loc_992:                                ; CODE XREF: DockingCont::doDialog(bool,bool)+47j
.text$mn:00000992                 push    40000000h       ; dwNewLong
.text$mn:00000997                 push    0FFFFFFF0h      ; nIndex
.text$mn:00000999                 mov     ecx, [ebp+var_4]
.text$mn:0000099C                 mov     edx, [ecx+0Ch]
.text$mn:0000099F                 push    edx             ; hWnd
.text$mn:000009A0                 call    dword ptr ds:__imp__SetWindowLongW@12 ; SetWindowLongW(x,x,x)
.text$mn:000009A6                 push    0               ; dwNewLong
.text$mn:000009A8                 push    0FFFFFFECh      ; nIndex
.text$mn:000009AA                 mov     eax, [ebp+var_4]
.text$mn:000009AD                 mov     ecx, [eax+0Ch]
.text$mn:000009B0                 push    ecx             ; hWnd
.text$mn:000009B1                 call    dword ptr ds:__imp__SetWindowLongW@12 ; SetWindowLongW(x,x,x)
.text$mn:000009B7                 push    5               ; nCmdShow
.text$mn:000009B9                 mov     edx, [ebp+var_4]
.text$mn:000009BC                 mov     eax, [edx+28h]
.text$mn:000009BF                 push    eax             ; hWnd
.text$mn:000009C0                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:000009C6
.text$mn:000009C6 loc_9C6:                                ; CODE XREF: DockingCont::doDialog(bool,bool)+80j
.text$mn:000009C6                 push    11h             ; i
.text$mn:000009C8                 call    dword ptr ds:__imp__GetStockObject@4 ; GetStockObject(x)
.text$mn:000009CE                 mov     ecx, [ebp+var_4]
.text$mn:000009D1                 mov     [ecx+30h], eax
.text$mn:000009D4
.text$mn:000009D4 loc_9D4:                                ; CODE XREF: DockingCont::doDialog(bool,bool)+19j
.text$mn:000009D4                 movzx   edx, [ebp+arg_0]
.text$mn:000009D8                 push    edx
.text$mn:000009D9                 mov     eax, [ebp+var_4]
.text$mn:000009DC                 mov     edx, [eax]
.text$mn:000009DE                 mov     ecx, [ebp+var_4]
.text$mn:000009E1                 mov     eax, [edx+0Ch]
.text$mn:000009E4                 call    eax
.text$mn:000009E6                 mov     esp, ebp
.text$mn:000009E8                 pop     ebp
.text$mn:000009E9                 retn    8
.text$mn:000009E9 ?doDialog@DockingCont@@QAEX_N0@Z endp
.text$mn:000009E9
.text$mn:000009E9 ; ---------------------------------------------------------------------------
.text$mn:000009EC                 align 10h
.text$mn:000009F0
.text$mn:000009F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000009F0
.text$mn:000009F0 ; Attributes: bp-based frame
.text$mn:000009F0
.text$mn:000009F0 ; void __thiscall DockingCont::focusClient(DockingCont *__hidden this)
.text$mn:000009F0                 public ?focusClient@DockingCont@@QAEXXZ
.text$mn:000009F0 ?focusClient@DockingCont@@QAEXXZ proc near
.text$mn:000009F0                                         ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+1CCp
.text$mn:000009F0                                         ; DockingCont::runProcCaption(HWND__ *,uint,uint,long)+237p ...
.text$mn:000009F0
.text$mn:000009F0 lParam          = dword ptr -28h
.text$mn:000009F0 var_24          = dword ptr -24h
.text$mn:000009F0 var_20          = dword ptr -20h
.text$mn:000009F0 var_1C          = dword ptr -1Ch
.text$mn:000009F0 var_18          = dword ptr -18h
.text$mn:000009F0 var_14          = dword ptr -14h
.text$mn:000009F0 var_10          = dword ptr -10h
.text$mn:000009F0 var_C           = dword ptr -0Ch
.text$mn:000009F0 wParam          = dword ptr -8
.text$mn:000009F0 var_4           = dword ptr -4
.text$mn:000009F0
.text$mn:000009F0                 push    ebp
.text$mn:000009F1                 mov     ebp, esp
.text$mn:000009F3                 sub     esp, 28h
.text$mn:000009F6                 mov     [ebp+var_C], ecx
.text$mn:000009F9                 mov     [ebp+lParam], 0
.text$mn:00000A00                 xor     eax, eax
.text$mn:00000A02                 mov     [ebp+var_24], eax
.text$mn:00000A05                 mov     [ebp+var_20], eax
.text$mn:00000A08                 mov     [ebp+var_1C], eax
.text$mn:00000A0B                 mov     [ebp+var_18], eax
.text$mn:00000A0E                 mov     [ebp+var_14], eax
.text$mn:00000A11                 mov     [ebp+var_10], eax
.text$mn:00000A14                 mov     ecx, [ebp+var_C] ; this
.text$mn:00000A17                 call    ?getActiveTb@DockingCont@@QAEHXZ ; DockingCont::getActiveTb(void)
.text$mn:00000A1C                 mov     [ebp+wParam], eax
.text$mn:00000A1F                 cmp     [ebp+wParam], 0FFFFFFFFh
.text$mn:00000A23                 jz      short loc_A81
.text$mn:00000A25                 mov     [ebp+lParam], 8
.text$mn:00000A2C                 lea     ecx, [ebp+lParam]
.text$mn:00000A2F                 push    ecx             ; lParam
.text$mn:00000A30                 mov     edx, [ebp+wParam]
.text$mn:00000A33                 push    edx             ; wParam
.text$mn:00000A34                 push    133Ch           ; Msg
.text$mn:00000A39                 mov     eax, [ebp+var_C]
.text$mn:00000A3C                 mov     ecx, [eax+2Ch]
.text$mn:00000A3F                 push    ecx             ; hWnd
.text$mn:00000A40                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00000A46                 cmp     [ebp+var_10], 0
.text$mn:00000A4A                 jnz     short loc_A4E
.text$mn:00000A4C                 jmp     short loc_A81
.text$mn:00000A4E ; ---------------------------------------------------------------------------
.text$mn:00000A4E
.text$mn:00000A4E loc_A4E:                                ; CODE XREF: DockingCont::focusClient(void)+5Aj
.text$mn:00000A4E                 mov     edx, [ebp+var_10]
.text$mn:00000A51                 mov     [ebp+var_4], edx
.text$mn:00000A54                 mov     eax, [ebp+var_4]
.text$mn:00000A57                 cmp     dword ptr [eax+14h], 0
.text$mn:00000A5B                 jz      short loc_A75
.text$mn:00000A5D                 push    offset $SG125178 ; "NOFOCUSWHILECLICKINGCAPTION"
.text$mn:00000A62                 mov     ecx, [ebp+var_4]
.text$mn:00000A65                 mov     edx, [ecx+14h]
.text$mn:00000A68                 push    edx             ; lpString1
.text$mn:00000A69                 call    dword ptr ds:__imp__lstrcmpW@8 ; lstrcmpW(x,x)
.text$mn:00000A6F                 test    eax, eax
.text$mn:00000A71                 jnz     short loc_A75
.text$mn:00000A73                 jmp     short loc_A81
.text$mn:00000A75 ; ---------------------------------------------------------------------------
.text$mn:00000A75
.text$mn:00000A75 loc_A75:                                ; CODE XREF: DockingCont::focusClient(void)+6Bj
.text$mn:00000A75                                         ; DockingCont::focusClient(void)+81j
.text$mn:00000A75                 mov     eax, [ebp+var_4]
.text$mn:00000A78                 mov     ecx, [eax]
.text$mn:00000A7A                 push    ecx             ; hWnd
.text$mn:00000A7B                 call    dword ptr ds:__imp__SetFocus@4 ; SetFocus(x)
.text$mn:00000A81
.text$mn:00000A81 loc_A81:                                ; CODE XREF: DockingCont::focusClient(void)+33j
.text$mn:00000A81                                         ; DockingCont::focusClient(void)+5Cj ...
.text$mn:00000A81                 mov     esp, ebp
.text$mn:00000A83                 pop     ebp
.text$mn:00000A84                 retn
.text$mn:00000A84 ?focusClient@DockingCont@@QAEXXZ endp
.text$mn:00000A84
.text$mn:00000A84 ; ---------------------------------------------------------------------------
.text$mn:00000A85                 align 10h
.text$mn:00000A90
.text$mn:00000A90 ; =============== S U B R O U T I N E =======================================
.text$mn:00000A90
.text$mn:00000A90 ; Attributes: bp-based frame
.text$mn:00000A90
.text$mn:00000A90 ; __int32 __thiscall DockingCont::runProcCaption(DockingCont *this, HWND hWnd, UINT Msg, WPARAM wParam, __int32)
.text$mn:00000A90                 public ?runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z
.text$mn:00000A90 ?runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z proc near
.text$mn:00000A90                                         ; CODE XREF: DockingCont::wndCaptionProc(HWND__ *,uint,uint,long)+21p
.text$mn:00000A90
.text$mn:00000A90 EventTrack      = tagTRACKMOUSEEVENT ptr -154h
.text$mn:00000A90 var_144         = dword ptr -144h
.text$mn:00000A90 var_140         = dword ptr -140h
.text$mn:00000A90 var_13C         = dword ptr -13Ch
.text$mn:00000A90 var_138         = tagPOINT ptr -138h
.text$mn:00000A90 Point           = tagPOINT ptr -130h
.text$mn:00000A90 var_128         = dword ptr -128h
.text$mn:00000A90 lParam          = dword ptr -124h
.text$mn:00000A90 var_120         = dword ptr -120h
.text$mn:00000A90 var_11C         = dword ptr -11Ch
.text$mn:00000A90 var_118         = dword ptr -118h
.text$mn:00000A90 var_114         = dword ptr -114h
.text$mn:00000A90 Text            = word ptr -110h
.text$mn:00000A90 var_10          = dword ptr -10h
.text$mn:00000A90 var_C           = dword ptr -0Ch
.text$mn:00000A90 var_4           = dword ptr -4
.text$mn:00000A90 hWnd            = dword ptr  8
.text$mn:00000A90 Msg             = dword ptr  0Ch
.text$mn:00000A90 wParam          = dword ptr  10h
.text$mn:00000A90 arg_C           = dword ptr  14h
.text$mn:00000A90
.text$mn:00000A90                 push    ebp
.text$mn:00000A91                 mov     ebp, esp
.text$mn:00000A93                 push    0FFFFFFFFh
.text$mn:00000A95                 push    offset __ehhandler$?runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z
.text$mn:00000A9A                 mov     eax, large fs:0
.text$mn:00000AA0                 push    eax
.text$mn:00000AA1                 sub     esp, 148h
.text$mn:00000AA7                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000AAC                 xor     eax, ebp
.text$mn:00000AAE                 mov     [ebp+var_10], eax
.text$mn:00000AB1                 push    eax
.text$mn:00000AB2                 lea     eax, [ebp+var_C]
.text$mn:00000AB5                 mov     large fs:0, eax
.text$mn:00000ABB                 mov     [ebp+lParam], ecx
.text$mn:00000AC1                 mov     eax, ds:?$S1@?1??runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4IA
.text$mn:00000AC6                 and     eax, 1
.text$mn:00000AC9                 jnz     short loc_AFF
.text$mn:00000ACB                 mov     ecx, ds:?$S1@?1??runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4IA
.text$mn:00000AD1                 or      ecx, 1
.text$mn:00000AD4                 mov     ds:?$S1@?1??runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4IA, ecx
.text$mn:00000ADA                 mov     [ebp+var_4], 0
.text$mn:00000AE1                 mov     ecx, offset ?toolTip@?1??runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4VToolTip@@A ; ToolTip `DockingCont::runProcCaption(HWND__ *,uint,uint,long)'::`2'::toolTip
.text$mn:00000AE6                 call    ??0ToolTip@@QAE@XZ ; ToolTip::ToolTip(void)
.text$mn:00000AEB                 push    offset ??__FtoolTip@?1??runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z@YAXXZ ; void (__cdecl *)()
.text$mn:00000AF0                 call    _atexit
.text$mn:00000AF5                 add     esp, 4
.text$mn:00000AF8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000AFF
.text$mn:00000AFF loc_AFF:                                ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+39j
.text$mn:00000AFF                 mov     edx, [ebp+Msg]
.text$mn:00000B02                 mov     [ebp+var_128], edx
.text$mn:00000B08                 cmp     [ebp+var_128], 200h
.text$mn:00000B12                 ja      short loc_B43
.text$mn:00000B14                 cmp     [ebp+var_128], 200h
.text$mn:00000B1E                 jz      loc_D39
.text$mn:00000B24                 cmp     [ebp+var_128], 5
.text$mn:00000B2B                 jz      loc_10B3
.text$mn:00000B31                 cmp     [ebp+var_128], 0Ch
.text$mn:00000B38                 jz      loc_10DF
.text$mn:00000B3E                 jmp     $LN29           ; jumptable 00000B71 default case
.text$mn:00000B43 ; ---------------------------------------------------------------------------
.text$mn:00000B43
.text$mn:00000B43 loc_B43:                                ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+82j
.text$mn:00000B43                 mov     eax, [ebp+var_128]
.text$mn:00000B49                 sub     eax, 201h
.text$mn:00000B4E                 mov     [ebp+var_128], eax
.text$mn:00000B54                 cmp     [ebp+var_128], 0A2h ; 'Ã³' ; switch 163 cases
.text$mn:00000B5E                 ja      $LN29           ; jumptable 00000B71 default case
.text$mn:00000B64                 mov     ecx, [ebp+var_128]
.text$mn:00000B6A                 movzx   edx, ds:$LN38[ecx]
.text$mn:00000B71                 jmp     ds:$LN40[edx*4] ; switch jump
.text$mn:00000B78 ; ---------------------------------------------------------------------------
.text$mn:00000B78
.text$mn:00000B78 $LN28:                                  ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+E1j
.text$mn:00000B78                                         ; DATA XREF: .text$mn:$LN40o
.text$mn:00000B78                 mov     eax, [ebp+lParam] ; jumptable 00000B71 case 0
.text$mn:00000B7E                 mov     dword ptr [eax+54h], 1
.text$mn:00000B85                 mov     ecx, [ebp+arg_C]
.text$mn:00000B88                 shr     ecx, 10h
.text$mn:00000B8B                 and     ecx, 0FFFFh
.text$mn:00000B91                 movzx   edx, cx
.text$mn:00000B94                 push    edx
.text$mn:00000B95                 mov     eax, [ebp+arg_C]
.text$mn:00000B98                 and     eax, 0FFFFh
.text$mn:00000B9D                 movzx   ecx, ax
.text$mn:00000BA0                 push    ecx
.text$mn:00000BA1                 mov     edx, [ebp+hWnd]
.text$mn:00000BA4                 push    edx
.text$mn:00000BA5                 mov     ecx, [ebp+lParam]
.text$mn:00000BAB                 call    ?isInRect@DockingCont@@IAE?AW4eMousePos@@PAUHWND__@@HH@Z ; DockingCont::isInRect(HWND__ *,int,int)
.text$mn:00000BB0                 cmp     eax, 2
.text$mn:00000BB3                 jnz     loc_C56
.text$mn:00000BB9                 mov     eax, [ebp+lParam]
.text$mn:00000BBF                 mov     dword ptr [eax+58h], 1
.text$mn:00000BC6                 mov     ecx, [ebp+lParam]
.text$mn:00000BCC                 mov     dword ptr [ecx+5Ch], 1
.text$mn:00000BD3                 mov     edx, [ebp+lParam]
.text$mn:00000BD9                 mov     eax, [edx+28h]
.text$mn:00000BDC                 mov     ds:_hWndServer, eax
.text$mn:00000BE1                 push    0               ; dwThreadId
.text$mn:00000BE3                 mov     ecx, [ebp+lParam]
.text$mn:00000BE9                 mov     edx, [ecx+4]
.text$mn:00000BEC                 push    edx             ; hmod
.text$mn:00000BED                 push    offset ?hookProcMouse@@YGJIIJ@Z ; lpfn
.text$mn:00000BF2                 push    0Eh             ; idHook
.text$mn:00000BF4                 call    dword ptr ds:__imp__SetWindowsHookExW@16 ; SetWindowsHookExW(x,x,x,x)
.text$mn:00000BFA                 mov     ds:_hookMouse, eax
.text$mn:00000BFF                 cmp     ds:_hookMouse, 0
.text$mn:00000C06                 jnz     short loc_C46
.text$mn:00000C08                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text$mn:00000C0E                 mov     [ebp+var_144], eax
.text$mn:00000C14                 mov     eax, [ebp+var_144]
.text$mn:00000C1A                 push    eax
.text$mn:00000C1B                 push    offset $SG124607 ; "GetLastError() returned %lu"
.text$mn:00000C20                 lea     ecx, [ebp+Text]
.text$mn:00000C26                 push    ecx             ; LPWSTR
.text$mn:00000C27                 call    dword ptr ds:__imp__wsprintfW
.text$mn:00000C2D                 add     esp, 0Ch
.text$mn:00000C30                 push    10h             ; uType
.text$mn:00000C32                 push    offset $SG124608 ; "SetWindowsHookEx(MOUSE) failed on runPr"...
.text$mn:00000C37                 lea     edx, [ebp+Text]
.text$mn:00000C3D                 push    edx             ; lpText
.text$mn:00000C3E                 push    0               ; hWnd
.text$mn:00000C40                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:00000C46
.text$mn:00000C46 loc_C46:                                ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+176j
.text$mn:00000C46                 push    1               ; flags
.text$mn:00000C48                 push    0               ; hrgnUpdate
.text$mn:00000C4A                 push    0               ; lprcUpdate
.text$mn:00000C4C                 mov     eax, [ebp+hWnd]
.text$mn:00000C4F                 push    eax             ; hWnd
.text$mn:00000C50                 call    dword ptr ds:__imp__RedrawWindow@16 ; RedrawWindow(x,x,x,x)
.text$mn:00000C56
.text$mn:00000C56 loc_C56:                                ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+123j
.text$mn:00000C56                 mov     ecx, [ebp+lParam] ; this
.text$mn:00000C5C                 call    ?focusClient@DockingCont@@QAEXXZ ; DockingCont::focusClient(void)
.text$mn:00000C61                 mov     eax, 1
.text$mn:00000C66                 jmp     loc_1116
.text$mn:00000C6B ; ---------------------------------------------------------------------------
.text$mn:00000C6B
.text$mn:00000C6B $LN25:                                  ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+E1j
.text$mn:00000C6B                                         ; DATA XREF: .text$mn:$LN40o
.text$mn:00000C6B                 mov     ecx, [ebp+lParam] ; jumptable 00000B71 case 1
.text$mn:00000C71                 mov     dword ptr [ecx+54h], 0
.text$mn:00000C78                 mov     edx, [ebp+lParam]
.text$mn:00000C7E                 cmp     dword ptr [edx+58h], 1
.text$mn:00000C82                 jnz     short loc_CC1
.text$mn:00000C84                 mov     eax, ds:_hookMouse
.text$mn:00000C89                 push    eax             ; hhk
.text$mn:00000C8A                 call    dword ptr ds:__imp__UnhookWindowsHookEx@4 ; UnhookWindowsHookEx(x)
.text$mn:00000C90                 mov     ecx, [ebp+lParam]
.text$mn:00000C96                 cmp     dword ptr [ecx+5Ch], 1
.text$mn:00000C9A                 jnz     short loc_CA7
.text$mn:00000C9C                 mov     ecx, [ebp+lParam] ; this
.text$mn:00000CA2                 call    ?doClose@DockingCont@@IAEXXZ ; DockingCont::doClose(void)
.text$mn:00000CA7
.text$mn:00000CA7 loc_CA7:                                ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+20Aj
.text$mn:00000CA7                 mov     edx, [ebp+lParam]
.text$mn:00000CAD                 mov     dword ptr [edx+58h], 0
.text$mn:00000CB4                 mov     eax, [ebp+lParam]
.text$mn:00000CBA                 mov     dword ptr [eax+5Ch], 0
.text$mn:00000CC1
.text$mn:00000CC1 loc_CC1:                                ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+1F2j
.text$mn:00000CC1                 mov     ecx, [ebp+lParam] ; this
.text$mn:00000CC7                 call    ?focusClient@DockingCont@@QAEXXZ ; DockingCont::focusClient(void)
.text$mn:00000CCC                 mov     eax, 1
.text$mn:00000CD1                 jmp     loc_1116
.text$mn:00000CD6 ; ---------------------------------------------------------------------------
.text$mn:00000CD6
.text$mn:00000CD6 $LN22:                                  ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+E1j
.text$mn:00000CD6                                         ; DATA XREF: .text$mn:$LN40o
.text$mn:00000CD6                 mov     ecx, [ebp+arg_C] ; jumptable 00000B71 case 2
.text$mn:00000CD9                 shr     ecx, 10h
.text$mn:00000CDC                 and     ecx, 0FFFFh
.text$mn:00000CE2                 movzx   edx, cx
.text$mn:00000CE5                 push    edx
.text$mn:00000CE6                 mov     eax, [ebp+arg_C]
.text$mn:00000CE9                 and     eax, 0FFFFh
.text$mn:00000CEE                 movzx   ecx, ax
.text$mn:00000CF1                 push    ecx
.text$mn:00000CF2                 mov     edx, [ebp+hWnd]
.text$mn:00000CF5                 push    edx
.text$mn:00000CF6                 mov     ecx, [ebp+lParam]
.text$mn:00000CFC                 call    ?isInRect@DockingCont@@IAE?AW4eMousePos@@PAUHWND__@@HH@Z ; DockingCont::isInRect(HWND__ *,int,int)
.text$mn:00000D01                 cmp     eax, 1
.text$mn:00000D04                 jnz     short loc_D24
.text$mn:00000D06                 mov     eax, [ebp+lParam]
.text$mn:00000D0C                 push    eax             ; lParam
.text$mn:00000D0D                 push    0               ; wParam
.text$mn:00000D0F                 push    5005h           ; Msg
.text$mn:00000D14                 mov     ecx, [ebp+lParam]
.text$mn:00000D1A                 mov     edx, [ecx+8]
.text$mn:00000D1D                 push    edx             ; hWnd
.text$mn:00000D1E                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00000D24
.text$mn:00000D24 loc_D24:                                ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+274j
.text$mn:00000D24                 mov     ecx, [ebp+lParam] ; this
.text$mn:00000D2A                 call    ?focusClient@DockingCont@@QAEXXZ ; DockingCont::focusClient(void)
.text$mn:00000D2F                 mov     eax, 1
.text$mn:00000D34                 jmp     loc_1116
.text$mn:00000D39 ; ---------------------------------------------------------------------------
.text$mn:00000D39
.text$mn:00000D39 loc_D39:                                ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+8Ej
.text$mn:00000D39                 mov     [ebp+Point.x], 0
.text$mn:00000D43                 xor     eax, eax
.text$mn:00000D45                 mov     [ebp+Point.y], eax
.text$mn:00000D4B                 lea     ecx, [ebp+Point]
.text$mn:00000D51                 push    ecx             ; lpPoint
.text$mn:00000D52                 call    dword ptr ds:__imp__GetCursorPos@4 ; GetCursorPos(x)
.text$mn:00000D58                 lea     edx, [ebp+Point]
.text$mn:00000D5E                 push    edx             ; lpPoint
.text$mn:00000D5F                 mov     eax, [ebp+lParam]
.text$mn:00000D65                 mov     ecx, [eax+28h]
.text$mn:00000D68                 push    ecx             ; hWnd
.text$mn:00000D69                 call    dword ptr ds:__imp__ScreenToClient@8 ; ScreenToClient(x,x)
.text$mn:00000D6F                 mov     edx, [ebp+lParam]
.text$mn:00000D75                 cmp     dword ptr [edx+54h], 1
.text$mn:00000D79                 jnz     loc_E72
.text$mn:00000D7F                 mov     eax, [ebp+lParam]
.text$mn:00000D85                 cmp     dword ptr [eax+58h], 0
.text$mn:00000D89                 jnz     short loc_DEE
.text$mn:00000D8B                 cmp     [ebp+wParam], 1
.text$mn:00000D8F                 jnz     short loc_DDF
.text$mn:00000D91                 mov     ecx, [ebp+Point.y]
.text$mn:00000D97                 push    ecx
.text$mn:00000D98                 mov     edx, [ebp+Point.x]
.text$mn:00000D9E                 push    edx
.text$mn:00000D9F                 mov     eax, [ebp+hWnd]
.text$mn:00000DA2                 push    eax
.text$mn:00000DA3                 mov     ecx, [ebp+lParam]
.text$mn:00000DA9                 call    ?isInRect@DockingCont@@IAE?AW4eMousePos@@PAUHWND__@@HH@Z ; DockingCont::isInRect(HWND__ *,int,int)
.text$mn:00000DAE                 cmp     eax, 1
.text$mn:00000DB1                 jnz     short loc_DDF
.text$mn:00000DB3                 mov     ecx, [ebp+lParam]
.text$mn:00000DB9                 mov     dword ptr [ecx+74h], 0
.text$mn:00000DC0                 push    5006h           ; unsigned int
.text$mn:00000DC5                 mov     ecx, [ebp+lParam] ; this
.text$mn:00000DCB                 call    ?NotifyParent@DockingCont@@IAEJI@Z ; DockingCont::NotifyParent(uint)
.text$mn:00000DD0                 mov     edx, [ebp+lParam]
.text$mn:00000DD6                 mov     dword ptr [edx+54h], 0
.text$mn:00000DDD                 jmp     short loc_DEC
.text$mn:00000DDF ; ---------------------------------------------------------------------------
.text$mn:00000DDF
.text$mn:00000DDF loc_DDF:                                ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+2FFj
.text$mn:00000DDF                                         ; DockingCont::runProcCaption(HWND__ *,uint,uint,long)+321j
.text$mn:00000DDF                 mov     eax, [ebp+lParam]
.text$mn:00000DE5                 mov     dword ptr [eax+54h], 0
.text$mn:00000DEC
.text$mn:00000DEC loc_DEC:                                ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+34Dj
.text$mn:00000DEC                 jmp     short loc_E6D
.text$mn:00000DEE ; ---------------------------------------------------------------------------
.text$mn:00000DEE
.text$mn:00000DEE loc_DEE:                                ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+2F9j
.text$mn:00000DEE                 mov     ecx, [ebp+lParam]
.text$mn:00000DF4                 mov     edx, [ecx+5Ch]
.text$mn:00000DF7                 mov     [ebp+var_140], edx
.text$mn:00000DFD                 mov     eax, [ebp+Point.y]
.text$mn:00000E03                 push    eax
.text$mn:00000E04                 mov     ecx, [ebp+Point.x]
.text$mn:00000E0A                 push    ecx
.text$mn:00000E0B                 mov     edx, [ebp+hWnd]
.text$mn:00000E0E                 push    edx
.text$mn:00000E0F                 mov     ecx, [ebp+lParam]
.text$mn:00000E15                 call    ?isInRect@DockingCont@@IAE?AW4eMousePos@@PAUHWND__@@HH@Z ; DockingCont::isInRect(HWND__ *,int,int)
.text$mn:00000E1A                 cmp     eax, 2
.text$mn:00000E1D                 jnz     short loc_E2B
.text$mn:00000E1F                 mov     [ebp+var_13C], 1
.text$mn:00000E29                 jmp     short loc_E35
.text$mn:00000E2B ; ---------------------------------------------------------------------------
.text$mn:00000E2B
.text$mn:00000E2B loc_E2B:                                ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+38Dj
.text$mn:00000E2B                 mov     [ebp+var_13C], 0
.text$mn:00000E35
.text$mn:00000E35 loc_E35:                                ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+399j
.text$mn:00000E35                 mov     eax, [ebp+lParam]
.text$mn:00000E3B                 mov     ecx, [ebp+var_13C]
.text$mn:00000E41                 mov     [eax+5Ch], ecx
.text$mn:00000E44                 mov     edx, [ebp+lParam]
.text$mn:00000E4A                 mov     eax, [edx+5Ch]
.text$mn:00000E4D                 cmp     eax, [ebp+var_140]
.text$mn:00000E53                 jz      short loc_E6D
.text$mn:00000E55                 push    0               ; hWnd
.text$mn:00000E57                 call    dword ptr ds:__imp__SetFocus@4 ; SetFocus(x)
.text$mn:00000E5D                 push    1               ; flags
.text$mn:00000E5F                 push    0               ; hrgnUpdate
.text$mn:00000E61                 push    0               ; lprcUpdate
.text$mn:00000E63                 mov     ecx, [ebp+hWnd]
.text$mn:00000E66                 push    ecx             ; hWnd
.text$mn:00000E67                 call    dword ptr ds:__imp__RedrawWindow@16 ; RedrawWindow(x,x,x,x)
.text$mn:00000E6D
.text$mn:00000E6D loc_E6D:                                ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long):loc_DECj
.text$mn:00000E6D                                         ; DockingCont::runProcCaption(HWND__ *,uint,uint,long)+3C3j
.text$mn:00000E6D                 jmp     loc_F7E
.text$mn:00000E72 ; ---------------------------------------------------------------------------
.text$mn:00000E72
.text$mn:00000E72 loc_E72:                                ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+2E9j
.text$mn:00000E72                 mov     edx, [ebp+lParam]
.text$mn:00000E78                 cmp     dword ptr [edx+94h], 0
.text$mn:00000E7F                 jnz     loc_F1C
.text$mn:00000E85                 mov     eax, [ebp+arg_C]
.text$mn:00000E88                 shr     eax, 10h
.text$mn:00000E8B                 and     eax, 0FFFFh
.text$mn:00000E90                 movzx   ecx, ax
.text$mn:00000E93                 push    ecx
.text$mn:00000E94                 mov     edx, [ebp+arg_C]
.text$mn:00000E97                 and     edx, 0FFFFh
.text$mn:00000E9D                 movzx   eax, dx
.text$mn:00000EA0                 push    eax
.text$mn:00000EA1                 mov     ecx, [ebp+hWnd]
.text$mn:00000EA4                 push    ecx
.text$mn:00000EA5                 mov     ecx, [ebp+lParam]
.text$mn:00000EAB                 call    ?isInRect@DockingCont@@IAE?AW4eMousePos@@PAUHWND__@@HH@Z ; DockingCont::isInRect(HWND__ *,int,int)
.text$mn:00000EB0                 mov     edx, [ebp+lParam]
.text$mn:00000EB6                 mov     [edx+98h], eax
.text$mn:00000EBC                 mov     eax, [ebp+lParam]
.text$mn:00000EC2                 cmp     dword ptr [eax+90h], 1
.text$mn:00000EC9                 jz      short loc_EDA
.text$mn:00000ECB                 mov     ecx, [ebp+lParam]
.text$mn:00000ED1                 cmp     dword ptr [ecx+98h], 2
.text$mn:00000ED8                 jnz     short loc_F1A
.text$mn:00000EDA
.text$mn:00000EDA loc_EDA:                                ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+439j
.text$mn:00000EDA                 mov     [ebp+EventTrack.cbSize], 10h
.text$mn:00000EE4                 mov     edx, [ebp+hWnd]
.text$mn:00000EE7                 mov     [ebp+EventTrack.hwndTrack], edx
.text$mn:00000EED                 mov     [ebp+EventTrack.dwFlags], 3
.text$mn:00000EF7                 mov     [ebp+EventTrack.dwHoverTime], 3E8h
.text$mn:00000F01                 lea     eax, [ebp+EventTrack]
.text$mn:00000F07                 push    eax             ; lpEventTrack
.text$mn:00000F08                 call    dword ptr ds:__imp___TrackMouseEvent@4 ; _TrackMouseEvent(x)
.text$mn:00000F0E                 mov     ecx, [ebp+lParam]
.text$mn:00000F14                 mov     [ecx+94h], eax
.text$mn:00000F1A
.text$mn:00000F1A loc_F1A:                                ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+448j
.text$mn:00000F1A                 jmp     short loc_F7E
.text$mn:00000F1C ; ---------------------------------------------------------------------------
.text$mn:00000F1C
.text$mn:00000F1C loc_F1C:                                ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+3EFj
.text$mn:00000F1C                 mov     edx, [ebp+lParam]
.text$mn:00000F22                 cmp     dword ptr [edx+94h], 1
.text$mn:00000F29                 jnz     short loc_F7E
.text$mn:00000F2B                 mov     eax, [ebp+arg_C]
.text$mn:00000F2E                 shr     eax, 10h
.text$mn:00000F31                 and     eax, 0FFFFh
.text$mn:00000F36                 movzx   ecx, ax
.text$mn:00000F39                 push    ecx
.text$mn:00000F3A                 mov     edx, [ebp+arg_C]
.text$mn:00000F3D                 and     edx, 0FFFFh
.text$mn:00000F43                 movzx   eax, dx
.text$mn:00000F46                 push    eax
.text$mn:00000F47                 mov     ecx, [ebp+hWnd]
.text$mn:00000F4A                 push    ecx
.text$mn:00000F4B                 mov     ecx, [ebp+lParam]
.text$mn:00000F51                 call    ?isInRect@DockingCont@@IAE?AW4eMousePos@@PAUHWND__@@HH@Z ; DockingCont::isInRect(HWND__ *,int,int)
.text$mn:00000F56                 mov     edx, [ebp+lParam]
.text$mn:00000F5C                 cmp     [edx+98h], eax
.text$mn:00000F62                 jz      short loc_F7E
.text$mn:00000F64                 mov     ecx, offset ?toolTip@?1??runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4VToolTip@@A ; this
.text$mn:00000F69                 call    ?destroy@ToolTip@@UAEXXZ ; ToolTip::destroy(void)
.text$mn:00000F6E                 mov     eax, [ebp+lParam]
.text$mn:00000F74                 mov     dword ptr [eax+94h], 0
.text$mn:00000F7E
.text$mn:00000F7E loc_F7E:                                ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long):loc_E6Dj
.text$mn:00000F7E                                         ; DockingCont::runProcCaption(HWND__ *,uint,uint,long):loc_F1Aj ...
.text$mn:00000F7E                 mov     eax, 1
.text$mn:00000F83                 jmp     loc_1116
.text$mn:00000F88 ; ---------------------------------------------------------------------------
.text$mn:00000F88
.text$mn:00000F88 $LN7:                                   ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+E1j
.text$mn:00000F88                                         ; DATA XREF: .text$mn:$LN40o
.text$mn:00000F88                 mov     [ebp+var_120], 0 ; jumptable 00000B71 case 160
.text$mn:00000F92                 xor     ecx, ecx
.text$mn:00000F94                 mov     [ebp+var_11C], ecx
.text$mn:00000F9A                 mov     [ebp+var_118], ecx
.text$mn:00000FA0                 mov     [ebp+var_114], ecx
.text$mn:00000FA6                 mov     [ebp+var_138.x], 0
.text$mn:00000FB0                 xor     edx, edx
.text$mn:00000FB2                 mov     [ebp+var_138.y], edx
.text$mn:00000FB8                 lea     eax, [ebp+var_138]
.text$mn:00000FBE                 push    eax             ; lpPoint
.text$mn:00000FBF                 call    dword ptr ds:__imp__GetCursorPos@4 ; GetCursorPos(x)
.text$mn:00000FC5                 mov     ecx, [ebp+hWnd]
.text$mn:00000FC8                 push    ecx             ; HWND
.text$mn:00000FC9                 mov     edx, [ebp+lParam]
.text$mn:00000FCF                 mov     eax, [edx+4]
.text$mn:00000FD2                 push    eax             ; HINSTANCE
.text$mn:00000FD3                 mov     ecx, offset ?toolTip@?1??runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4VToolTip@@A ; this
.text$mn:00000FD8                 call    ?init@ToolTip@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; ToolTip::init(HINSTANCE__ *,HWND__ *)
.text$mn:00000FDD                 mov     ecx, [ebp+lParam]
.text$mn:00000FE3                 cmp     dword ptr [ecx+98h], 1
.text$mn:00000FEA                 jnz     short loc_1040
.text$mn:00000FEC                 mov     edx, [ebp+var_138.y]
.text$mn:00000FF2                 add     edx, 14h
.text$mn:00000FF5                 push    edx             ; int
.text$mn:00000FF6                 mov     eax, [ebp+var_138.x]
.text$mn:00000FFC                 push    eax             ; int
.text$mn:00000FFD                 mov     ecx, [ebp+lParam]
.text$mn:00001003                 add     ecx, 38h ; '8'
.text$mn:00001006                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000100B                 push    eax             ; wchar_t *
.text$mn:0000100C                 sub     esp, 10h
.text$mn:0000100F                 mov     ecx, esp
.text$mn:00001011                 mov     edx, [ebp+var_120]
.text$mn:00001017                 mov     [ecx], edx
.text$mn:00001019                 mov     eax, [ebp+var_11C]
.text$mn:0000101F                 mov     [ecx+4], eax
.text$mn:00001022                 mov     edx, [ebp+var_118]
.text$mn:00001028                 mov     [ecx+8], edx
.text$mn:0000102B                 mov     eax, [ebp+var_114]
.text$mn:00001031                 mov     [ecx+0Ch], eax
.text$mn:00001034                 mov     ecx, offset ?toolTip@?1??runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4VToolTip@@A ; this
.text$mn:00001039                 call    ?Show@ToolTip@@QAEXUtagRECT@@PB_WHH@Z ; ToolTip::Show(tagRECT,wchar_t const *,int,int)
.text$mn:0000103E                 jmp     short loc_1088
.text$mn:00001040 ; ---------------------------------------------------------------------------
.text$mn:00001040
.text$mn:00001040 loc_1040:                               ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+55Aj
.text$mn:00001040                 mov     ecx, [ebp+var_138.y]
.text$mn:00001046                 add     ecx, 14h
.text$mn:00001049                 push    ecx             ; int
.text$mn:0000104A                 mov     edx, [ebp+var_138.x]
.text$mn:00001050                 push    edx             ; int
.text$mn:00001051                 push    offset $SG124744 ; "Close"
.text$mn:00001056                 sub     esp, 10h
.text$mn:00001059                 mov     eax, esp
.text$mn:0000105B                 mov     ecx, [ebp+var_120]
.text$mn:00001061                 mov     [eax], ecx
.text$mn:00001063                 mov     edx, [ebp+var_11C]
.text$mn:00001069                 mov     [eax+4], edx
.text$mn:0000106C                 mov     ecx, [ebp+var_118]
.text$mn:00001072                 mov     [eax+8], ecx
.text$mn:00001075                 mov     edx, [ebp+var_114]
.text$mn:0000107B                 mov     [eax+0Ch], edx
.text$mn:0000107E                 mov     ecx, offset ?toolTip@?1??runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4VToolTip@@A ; this
.text$mn:00001083                 call    ?Show@ToolTip@@QAEXUtagRECT@@PB_WHH@Z ; ToolTip::Show(tagRECT,wchar_t const *,int,int)
.text$mn:00001088
.text$mn:00001088 loc_1088:                               ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+5AEj
.text$mn:00001088                 mov     eax, 1
.text$mn:0000108D                 jmp     loc_1116
.text$mn:00001092 ; ---------------------------------------------------------------------------
.text$mn:00001092
.text$mn:00001092 $LN4:                                   ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+E1j
.text$mn:00001092                                         ; DATA XREF: .text$mn:$LN40o
.text$mn:00001092                 mov     ecx, offset ?toolTip@?1??runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4VToolTip@@A ; jumptable 00000B71 case 162
.text$mn:00001097                 call    ?destroy@ToolTip@@UAEXXZ ; ToolTip::destroy(void)
.text$mn:0000109C                 mov     eax, [ebp+lParam]
.text$mn:000010A2                 mov     dword ptr [eax+94h], 0
.text$mn:000010AC                 mov     eax, 1
.text$mn:000010B1                 jmp     short loc_1116
.text$mn:000010B3 ; ---------------------------------------------------------------------------
.text$mn:000010B3
.text$mn:000010B3 loc_10B3:                               ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+9Bj
.text$mn:000010B3                 mov     ecx, [ebp+lParam]
.text$mn:000010B9                 add     ecx, 60h ; '`'
.text$mn:000010BC                 push    ecx             ; lpRect
.text$mn:000010BD                 mov     edx, [ebp+hWnd]
.text$mn:000010C0                 push    edx             ; hWnd
.text$mn:000010C1                 call    dword ptr ds:__imp__GetWindowRect@8 ; GetWindowRect(x,x)
.text$mn:000010C7                 mov     eax, [ebp+lParam]
.text$mn:000010CD                 add     eax, 60h ; '`'
.text$mn:000010D0                 push    eax             ; struct tagRECT *
.text$mn:000010D1                 mov     ecx, [ebp+hWnd]
.text$mn:000010D4                 push    ecx             ; HWND
.text$mn:000010D5                 call    ?ScreenRectToClientRect@@YAXPAUHWND__@@PAUtagRECT@@@Z ; ScreenRectToClientRect(HWND__ *,tagRECT *)
.text$mn:000010DA                 add     esp, 8
.text$mn:000010DD                 jmp     short $LN29     ; jumptable 00000B71 default case
.text$mn:000010DF ; ---------------------------------------------------------------------------
.text$mn:000010DF
.text$mn:000010DF loc_10DF:                               ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+A8j
.text$mn:000010DF                 push    1               ; flags
.text$mn:000010E1                 push    0               ; hrgnUpdate
.text$mn:000010E3                 push    0               ; lprcUpdate
.text$mn:000010E5                 mov     edx, [ebp+hWnd]
.text$mn:000010E8                 push    edx             ; hWnd
.text$mn:000010E9                 call    dword ptr ds:__imp__RedrawWindow@16 ; RedrawWindow(x,x,x,x)
.text$mn:000010EF                 mov     eax, 1
.text$mn:000010F4                 jmp     short loc_1116
.text$mn:000010F6 ; ---------------------------------------------------------------------------
.text$mn:000010F6
.text$mn:000010F6 $LN29:                                  ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+AEj
.text$mn:000010F6                                         ; DockingCont::runProcCaption(HWND__ *,uint,uint,long)+CEj ...
.text$mn:000010F6                 mov     eax, [ebp+arg_C] ; jumptable 00000B71 default case
.text$mn:000010F9                 push    eax             ; lParam
.text$mn:000010FA                 mov     ecx, [ebp+wParam]
.text$mn:000010FD                 push    ecx             ; wParam
.text$mn:000010FE                 mov     edx, [ebp+Msg]
.text$mn:00001101                 push    edx             ; Msg
.text$mn:00001102                 mov     eax, [ebp+hWnd]
.text$mn:00001105                 push    eax             ; hWnd
.text$mn:00001106                 mov     ecx, [ebp+lParam]
.text$mn:0000110C                 mov     edx, [ecx+78h]
.text$mn:0000110F                 push    edx             ; lpPrevWndFunc
.text$mn:00001110                 call    dword ptr ds:__imp__CallWindowProcW@20 ; CallWindowProcW(x,x,x,x,x)
.text$mn:00001116
.text$mn:00001116 loc_1116:                               ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+1D6j
.text$mn:00001116                                         ; DockingCont::runProcCaption(HWND__ *,uint,uint,long)+241j ...
.text$mn:00001116                 mov     ecx, [ebp+var_C]
.text$mn:00001119                 mov     large fs:0, ecx
.text$mn:00001120                 pop     ecx
.text$mn:00001121                 mov     ecx, [ebp+var_10]
.text$mn:00001124                 xor     ecx, ebp
.text$mn:00001126                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000112B                 mov     esp, ebp
.text$mn:0000112D                 pop     ebp
.text$mn:0000112E                 retn    10h
.text$mn:0000112E ?runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z endp
.text$mn:0000112E
.text$mn:0000112E ; ---------------------------------------------------------------------------
.text$mn:00001131                 align 4
.text$mn:00001134 $LN40           dd offset $LN28, offset $LN25, offset $LN22, offset $LN7
.text$mn:00001134                                         ; DATA XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+E1r
.text$mn:00001134                 dd offset $LN4, offset $LN29 ; jump table for switch statement
.text$mn:0000114C $LN38           db      0,     1,     2,     5
.text$mn:0000114C                                         ; DATA XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+DAr
.text$mn:0000114C                 db      5,     5,     5,     5 ; indirect table for switch statement
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      5,     5,     5,     5
.text$mn:0000114C                 db      3,     5,     4
.text$mn:000011EF                 align 10h
.text$mn:000011F0
.text$mn:000011F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000011F0
.text$mn:000011F0 ; Attributes: bp-based frame
.text$mn:000011F0
.text$mn:000011F0 ; __int32 __thiscall DockingCont::runProcTab(DockingCont *this, HWND hWnd, UINT Msg, WPARAM, __int32)
.text$mn:000011F0                 public ?runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z
.text$mn:000011F0 ?runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z proc near
.text$mn:000011F0                                         ; CODE XREF: DockingCont::wndTabProc(HWND__ *,uint,uint,long)+21p
.text$mn:000011F0
.text$mn:000011F0 EventTrack      = tagTRACKMOUSEEVENT ptr -0F8h
.text$mn:000011F0 var_E8          = dword ptr -0E8h
.text$mn:000011F0 var_E4          = dword ptr -0E4h
.text$mn:000011F0 var_E0          = dword ptr -0E0h
.text$mn:000011F0 var_DC          = dword ptr -0DCh
.text$mn:000011F0 var_D8          = dword ptr -0D8h
.text$mn:000011F0 var_D4          = dword ptr -0D4h
.text$mn:000011F0 var_D0          = dword ptr -0D0h
.text$mn:000011F0 var_CC          = dword ptr -0CCh
.text$mn:000011F0 var_C8          = dword ptr -0C8h
.text$mn:000011F0 var_C4          = dword ptr -0C4h
.text$mn:000011F0 var_C0          = dword ptr -0C0h
.text$mn:000011F0 var_BC          = dword ptr -0BCh
.text$mn:000011F0 var_B8          = dword ptr -0B8h
.text$mn:000011F0 var_B4          = dword ptr -0B4h
.text$mn:000011F0 var_B0          = dword ptr -0B0h
.text$mn:000011F0 var_AC          = dword ptr -0ACh
.text$mn:000011F0 var_A8          = dword ptr -0A8h
.text$mn:000011F0 var_A4          = dword ptr -0A4h
.text$mn:000011F0 var_A0          = dword ptr -0A0h
.text$mn:000011F0 var_9C          = dword ptr -9Ch
.text$mn:000011F0 var_98          = dword ptr -98h
.text$mn:000011F0 var_94          = dword ptr -94h
.text$mn:000011F0 var_90          = dword ptr -90h
.text$mn:000011F0 var_8C          = dword ptr -8Ch
.text$mn:000011F0 var_88          = dword ptr -88h
.text$mn:000011F0 var_84          = dword ptr -84h
.text$mn:000011F0 var_80          = dword ptr -80h
.text$mn:000011F0 wParam          = dword ptr -7Ch
.text$mn:000011F0 var_78          = dword ptr -78h
.text$mn:000011F0 var_74          = dword ptr -74h
.text$mn:000011F0 var_70          = dword ptr -70h
.text$mn:000011F0 var_6C          = dword ptr -6Ch
.text$mn:000011F0 var_68          = dword ptr -68h
.text$mn:000011F0 var_64          = dword ptr -64h
.text$mn:000011F0 var_60          = dword ptr -60h
.text$mn:000011F0 var_5C          = dword ptr -5Ch
.text$mn:000011F0 var_58          = dword ptr -58h
.text$mn:000011F0 var_54          = dword ptr -54h
.text$mn:000011F0 var_50          = dword ptr -50h
.text$mn:000011F0 var_4C          = dword ptr -4Ch
.text$mn:000011F0 var_48          = dword ptr -48h
.text$mn:000011F0 var_44          = dword ptr -44h
.text$mn:000011F0 var_40          = dword ptr -40h
.text$mn:000011F0 var_3C          = dword ptr -3Ch
.text$mn:000011F0 var_38          = dword ptr -38h
.text$mn:000011F0 lParam          = dword ptr -34h
.text$mn:000011F0 var_30          = dword ptr -30h
.text$mn:000011F0 var_2C          = dword ptr -2Ch
.text$mn:000011F0 var_28          = dword ptr -28h
.text$mn:000011F0 var_24          = dword ptr -24h
.text$mn:000011F0 var_20          = dword ptr -20h
.text$mn:000011F0 var_1C          = dword ptr -1Ch
.text$mn:000011F0 var_18          = dword ptr -18h
.text$mn:000011F0 var_14          = dword ptr -14h
.text$mn:000011F0 var_10          = dword ptr -10h
.text$mn:000011F0 var_C           = dword ptr -0Ch
.text$mn:000011F0 var_4           = dword ptr -4
.text$mn:000011F0 hWnd            = dword ptr  8
.text$mn:000011F0 Msg             = dword ptr  0Ch
.text$mn:000011F0 arg_8           = dword ptr  10h
.text$mn:000011F0 arg_C           = dword ptr  14h
.text$mn:000011F0
.text$mn:000011F0                 push    ebp
.text$mn:000011F1                 mov     ebp, esp
.text$mn:000011F3                 push    0FFFFFFFFh
.text$mn:000011F5                 push    offset __ehhandler$?runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z
.text$mn:000011FA                 mov     eax, large fs:0
.text$mn:00001200                 push    eax
.text$mn:00001201                 sub     esp, 0ECh
.text$mn:00001207                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000120C                 xor     eax, ebp
.text$mn:0000120E                 mov     [ebp+var_10], eax
.text$mn:00001211                 push    eax
.text$mn:00001212                 lea     eax, [ebp+var_C]
.text$mn:00001215                 mov     large fs:0, eax
.text$mn:0000121B                 mov     [ebp+var_70], ecx
.text$mn:0000121E                 mov     eax, ds:?$S2@?1??runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4IA
.text$mn:00001223                 and     eax, 1
.text$mn:00001226                 jnz     short loc_125C
.text$mn:00001228                 mov     ecx, ds:?$S2@?1??runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4IA
.text$mn:0000122E                 or      ecx, 1
.text$mn:00001231                 mov     ds:?$S2@?1??runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4IA, ecx
.text$mn:00001237                 mov     [ebp+var_4], 0
.text$mn:0000123E                 mov     ecx, offset ?toolTip@?1??runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4VToolTip@@A ; ToolTip `DockingCont::runProcTab(HWND__ *,uint,uint,long)'::`2'::toolTip
.text$mn:00001243                 call    ??0ToolTip@@QAE@XZ ; ToolTip::ToolTip(void)
.text$mn:00001248                 push    offset ??__FtoolTip@?1??runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z@YAXXZ ; void (__cdecl *)()
.text$mn:0000124D                 call    _atexit
.text$mn:00001252                 add     esp, 4
.text$mn:00001255                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000125C
.text$mn:0000125C loc_125C:                               ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+36j
.text$mn:0000125C                 mov     edx, [ebp+Msg]
.text$mn:0000125F                 mov     [ebp+var_74], edx
.text$mn:00001262                 cmp     [ebp+var_74], 200h
.text$mn:00001269                 ja      short loc_1287
.text$mn:0000126B                 cmp     [ebp+var_74], 200h
.text$mn:00001272                 jz      loc_145E
.text$mn:00001278                 cmp     [ebp+var_74], 4Eh ; 'N'
.text$mn:0000127C                 jz      loc_17F6
.text$mn:00001282                 jmp     $LN22_0         ; jumptable 000012A9 default case
.text$mn:00001287 ; ---------------------------------------------------------------------------
.text$mn:00001287
.text$mn:00001287 loc_1287:                               ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+79j
.text$mn:00001287                 mov     eax, [ebp+var_74]
.text$mn:0000128A                 sub     eax, 201h
.text$mn:0000128F                 mov     [ebp+var_74], eax
.text$mn:00001292                 cmp     [ebp+var_74], 0A2h ; 'Ã³' ; switch 163 cases
.text$mn:00001299                 ja      $LN22_0         ; jumptable 000012A9 default case
.text$mn:0000129F                 mov     ecx, [ebp+var_74]
.text$mn:000012A2                 movzx   edx, ds:$LN31[ecx]
.text$mn:000012A9                 jmp     ds:$LN33[edx*4] ; switch jump
.text$mn:000012B0 ; ---------------------------------------------------------------------------
.text$mn:000012B0
.text$mn:000012B0 $LN21:                                  ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+B9j
.text$mn:000012B0                                         ; DATA XREF: .text$mn:$LN33o
.text$mn:000012B0                 mov     eax, [ebp+var_70] ; jumptable 000012A9 case 0
.text$mn:000012B3                 mov     dword ptr [eax+84h], 1
.text$mn:000012BD                 mov     eax, 1
.text$mn:000012C2                 jmp     loc_189E
.text$mn:000012C7 ; ---------------------------------------------------------------------------
.text$mn:000012C7
.text$mn:000012C7 $LN20:                                  ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+B9j
.text$mn:000012C7                                         ; DATA XREF: .text$mn:$LN33o
.text$mn:000012C7                 mov     [ebp+var_8C], 0 ; jumptable 000012A9 case 1
.text$mn:000012D1                 mov     [ebp+lParam], 0
.text$mn:000012D8                 xor     ecx, ecx
.text$mn:000012DA                 mov     [ebp+var_30], ecx
.text$mn:000012DD                 mov     [ebp+var_2C], ecx
.text$mn:000012E0                 mov     edx, [ebp+arg_C]
.text$mn:000012E3                 and     edx, 0FFFFh
.text$mn:000012E9                 movzx   eax, dx
.text$mn:000012EC                 mov     [ebp+lParam], eax
.text$mn:000012EF                 mov     ecx, [ebp+arg_C]
.text$mn:000012F2                 shr     ecx, 10h
.text$mn:000012F5                 and     ecx, 0FFFFh
.text$mn:000012FB                 movzx   edx, cx
.text$mn:000012FE                 mov     [ebp+var_30], edx
.text$mn:00001301                 lea     eax, [ebp+lParam]
.text$mn:00001304                 push    eax             ; lParam
.text$mn:00001305                 push    0               ; wParam
.text$mn:00001307                 push    130Dh           ; Msg
.text$mn:0000130C                 mov     ecx, [ebp+hWnd]
.text$mn:0000130F                 push    ecx             ; hWnd
.text$mn:00001310                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001316                 mov     [ebp+var_8C], eax
.text$mn:0000131C                 mov     edx, [ebp+var_8C]
.text$mn:00001322                 push    edx             ; int
.text$mn:00001323                 mov     ecx, [ebp+var_70] ; this
.text$mn:00001326                 call    ?SelectTab@DockingCont@@IAEXH@Z ; DockingCont::SelectTab(int)
.text$mn:0000132B                 mov     eax, [ebp+var_70]
.text$mn:0000132E                 mov     dword ptr [eax+84h], 0
.text$mn:00001338                 mov     eax, 1
.text$mn:0000133D                 jmp     loc_189E
.text$mn:00001342 ; ---------------------------------------------------------------------------
.text$mn:00001342
.text$mn:00001342 $LN19_1:                                ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+B9j
.text$mn:00001342                                         ; DATA XREF: .text$mn:$LN33o
.text$mn:00001342                 mov     ecx, [ebp+var_70] ; jumptable 000012A9 case 2
.text$mn:00001345                 movzx   edx, byte ptr [ecx+24h]
.text$mn:00001349                 cmp     edx, 1
.text$mn:0000134C                 jnz     short loc_1357
.text$mn:0000134E                 mov     [ebp+var_80], 5002h
.text$mn:00001355                 jmp     short loc_135E
.text$mn:00001357 ; ---------------------------------------------------------------------------
.text$mn:00001357
.text$mn:00001357 loc_1357:                               ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+15Cj
.text$mn:00001357                 mov     [ebp+var_80], 5003h
.text$mn:0000135E
.text$mn:0000135E loc_135E:                               ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+165j
.text$mn:0000135E                 mov     eax, [ebp+var_80]
.text$mn:00001361                 push    eax             ; unsigned int
.text$mn:00001362                 mov     ecx, [ebp+var_70] ; this
.text$mn:00001365                 call    ?NotifyParent@DockingCont@@IAEJI@Z ; DockingCont::NotifyParent(uint)
.text$mn:0000136A                 mov     eax, 1
.text$mn:0000136F                 jmp     loc_189E
.text$mn:00001374 ; ---------------------------------------------------------------------------
.text$mn:00001374
.text$mn:00001374 $LN18:                                  ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+B9j
.text$mn:00001374                                         ; DATA XREF: .text$mn:$LN33o
.text$mn:00001374                 mov     [ebp+wParam], 0 ; jumptable 000012A9 case 7
.text$mn:0000137B                 mov     [ebp+var_B0], 0
.text$mn:00001385                 xor     ecx, ecx
.text$mn:00001387                 mov     [ebp+var_AC], ecx
.text$mn:0000138D                 mov     [ebp+var_A8], ecx
.text$mn:00001393                 mov     [ebp+var_A4], ecx
.text$mn:00001399                 mov     [ebp+var_A0], ecx
.text$mn:0000139F                 mov     [ebp+var_9C], ecx
.text$mn:000013A5                 mov     [ebp+var_98], ecx
.text$mn:000013AB                 mov     [ebp+var_40], 0
.text$mn:000013B2                 xor     edx, edx
.text$mn:000013B4                 mov     [ebp+var_3C], edx
.text$mn:000013B7                 mov     [ebp+var_38], edx
.text$mn:000013BA                 mov     eax, [ebp+arg_C]
.text$mn:000013BD                 and     eax, 0FFFFh
.text$mn:000013C2                 movzx   ecx, ax
.text$mn:000013C5                 mov     [ebp+var_40], ecx
.text$mn:000013C8                 mov     edx, [ebp+arg_C]
.text$mn:000013CB                 shr     edx, 10h
.text$mn:000013CE                 and     edx, 0FFFFh
.text$mn:000013D4                 movzx   eax, dx
.text$mn:000013D7                 mov     [ebp+var_3C], eax
.text$mn:000013DA                 lea     ecx, [ebp+var_40]
.text$mn:000013DD                 push    ecx             ; lParam
.text$mn:000013DE                 push    0               ; wParam
.text$mn:000013E0                 push    130Dh           ; Msg
.text$mn:000013E5                 mov     edx, [ebp+hWnd]
.text$mn:000013E8                 push    edx             ; hWnd
.text$mn:000013E9                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000013EF                 mov     [ebp+wParam], eax
.text$mn:000013F2                 mov     eax, [ebp+wParam]
.text$mn:000013F5                 push    eax             ; int
.text$mn:000013F6                 mov     ecx, [ebp+var_70] ; this
.text$mn:000013F9                 call    ?SelectTab@DockingCont@@IAEXH@Z ; DockingCont::SelectTab(int)
.text$mn:000013FE                 mov     [ebp+var_B0], 8
.text$mn:00001408                 lea     ecx, [ebp+var_B0]
.text$mn:0000140E                 push    ecx             ; lParam
.text$mn:0000140F                 mov     edx, [ebp+wParam]
.text$mn:00001412                 push    edx             ; wParam
.text$mn:00001413                 push    133Ch           ; Msg
.text$mn:00001418                 mov     eax, [ebp+hWnd]
.text$mn:0000141B                 push    eax             ; hWnd
.text$mn:0000141C                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001422                 cmp     [ebp+var_98], 0
.text$mn:00001429                 jnz     short loc_1432
.text$mn:0000142B                 xor     eax, eax
.text$mn:0000142D                 jmp     loc_189E
.text$mn:00001432 ; ---------------------------------------------------------------------------
.text$mn:00001432
.text$mn:00001432 loc_1432:                               ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+239j
.text$mn:00001432                 push    5001h           ; unsigned int
.text$mn:00001437                 mov     ecx, [ebp+var_70] ; this
.text$mn:0000143A                 call    ?NotifyParent@DockingCont@@IAEJI@Z ; DockingCont::NotifyParent(uint)
.text$mn:0000143F                 test    eax, eax
.text$mn:00001441                 jnz     short loc_1454
.text$mn:00001443                 push    1               ; int
.text$mn:00001445                 mov     ecx, [ebp+var_98]
.text$mn:0000144B                 push    ecx             ; struct tTbData *
.text$mn:0000144C                 mov     ecx, [ebp+var_70] ; this
.text$mn:0000144F                 call    ?hideToolbar@DockingCont@@IAEHPAUtTbData@@H@Z ; DockingCont::hideToolbar(tTbData *,int)
.text$mn:00001454
.text$mn:00001454 loc_1454:                               ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+251j
.text$mn:00001454                 mov     eax, 1
.text$mn:00001459                 jmp     loc_189E
.text$mn:0000145E ; ---------------------------------------------------------------------------
.text$mn:0000145E
.text$mn:0000145E loc_145E:                               ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+82j
.text$mn:0000145E                 mov     [ebp+var_78], 0
.text$mn:00001465                 mov     [ebp+var_1C], 0
.text$mn:0000146C                 xor     edx, edx
.text$mn:0000146E                 mov     [ebp+var_18], edx
.text$mn:00001471                 mov     [ebp+var_14], edx
.text$mn:00001474                 mov     eax, [ebp+arg_C]
.text$mn:00001477                 and     eax, 0FFFFh
.text$mn:0000147C                 movzx   ecx, ax
.text$mn:0000147F                 mov     [ebp+var_1C], ecx
.text$mn:00001482                 mov     edx, [ebp+arg_C]
.text$mn:00001485                 shr     edx, 10h
.text$mn:00001488                 and     edx, 0FFFFh
.text$mn:0000148E                 movzx   eax, dx
.text$mn:00001491                 mov     [ebp+var_18], eax
.text$mn:00001494                 lea     ecx, [ebp+var_1C]
.text$mn:00001497                 push    ecx             ; lParam
.text$mn:00001498                 push    0               ; wParam
.text$mn:0000149A                 push    130Dh           ; Msg
.text$mn:0000149F                 mov     edx, [ebp+hWnd]
.text$mn:000014A2                 push    edx             ; hWnd
.text$mn:000014A3                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000014A9                 mov     [ebp+var_78], eax
.text$mn:000014AC                 mov     eax, [ebp+var_70]
.text$mn:000014AF                 cmp     dword ptr [eax+84h], 1
.text$mn:000014B6                 jnz     short loc_14F3
.text$mn:000014B8                 cmp     [ebp+arg_8], 1
.text$mn:000014BC                 jnz     short loc_14F3
.text$mn:000014BE                 mov     ecx, [ebp+var_78]
.text$mn:000014C1                 push    ecx             ; int
.text$mn:000014C2                 mov     ecx, [ebp+var_70] ; this
.text$mn:000014C5                 call    ?SelectTab@DockingCont@@IAEXH@Z ; DockingCont::SelectTab(int)
.text$mn:000014CA                 mov     edx, [ebp+var_70]
.text$mn:000014CD                 mov     dword ptr [edx+74h], 1
.text$mn:000014D4                 push    5006h           ; unsigned int
.text$mn:000014D9                 mov     ecx, [ebp+var_70] ; this
.text$mn:000014DC                 call    ?NotifyParent@DockingCont@@IAEJI@Z ; DockingCont::NotifyParent(uint)
.text$mn:000014E1                 mov     eax, [ebp+var_70]
.text$mn:000014E4                 mov     dword ptr [eax+84h], 0
.text$mn:000014EE                 jmp     loc_1695
.text$mn:000014F3 ; ---------------------------------------------------------------------------
.text$mn:000014F3
.text$mn:000014F3 loc_14F3:                               ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+2C6j
.text$mn:000014F3                                         ; DockingCont::runProcTab(HWND__ *,uint,uint,long)+2CCj
.text$mn:000014F3                 push    0               ; lParam
.text$mn:000014F5                 push    0               ; wParam
.text$mn:000014F7                 push    130Bh           ; Msg
.text$mn:000014FC                 mov     ecx, [ebp+hWnd]
.text$mn:000014FF                 push    ecx             ; hWnd
.text$mn:00001500                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001506                 mov     [ebp+var_94], eax
.text$mn:0000150C                 mov     edx, [ebp+var_70]
.text$mn:0000150F                 cmp     dword ptr [edx+88h], 0
.text$mn:00001516                 jnz     short loc_1565
.text$mn:00001518                 mov     eax, [ebp+var_78]
.text$mn:0000151B                 cmp     eax, [ebp+var_94]
.text$mn:00001521                 jz      short loc_1565
.text$mn:00001523                 mov     [ebp+EventTrack.cbSize], 10h
.text$mn:0000152D                 mov     ecx, [ebp+hWnd]
.text$mn:00001530                 mov     [ebp+EventTrack.hwndTrack], ecx
.text$mn:00001536                 mov     [ebp+EventTrack.dwFlags], 3
.text$mn:00001540                 mov     [ebp+EventTrack.dwHoverTime], 3E8h
.text$mn:0000154A                 lea     edx, [ebp+EventTrack]
.text$mn:00001550                 push    edx             ; lpEventTrack
.text$mn:00001551                 call    dword ptr ds:__imp___TrackMouseEvent@4 ; _TrackMouseEvent(x)
.text$mn:00001557                 mov     ecx, [ebp+var_70]
.text$mn:0000155A                 mov     [ecx+88h], eax
.text$mn:00001560                 jmp     loc_167C
.text$mn:00001565 ; ---------------------------------------------------------------------------
.text$mn:00001565
.text$mn:00001565 loc_1565:                               ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+326j
.text$mn:00001565                                         ; DockingCont::runProcTab(HWND__ *,uint,uint,long)+331j
.text$mn:00001565                 mov     edx, [ebp+var_78]
.text$mn:00001568                 cmp     edx, [ebp+var_94]
.text$mn:0000156E                 jnz     short loc_158C
.text$mn:00001570                 mov     ecx, offset ?toolTip@?1??runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4VToolTip@@A ; this
.text$mn:00001575                 call    ?destroy@ToolTip@@UAEXXZ ; ToolTip::destroy(void)
.text$mn:0000157A                 mov     eax, [ebp+var_70]
.text$mn:0000157D                 mov     dword ptr [eax+88h], 0
.text$mn:00001587                 jmp     loc_167C
.text$mn:0000158C ; ---------------------------------------------------------------------------
.text$mn:0000158C
.text$mn:0000158C loc_158C:                               ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+37Ej
.text$mn:0000158C                 mov     ecx, [ebp+var_70]
.text$mn:0000158F                 mov     edx, [ebp+var_78]
.text$mn:00001592                 cmp     edx, [ecx+8Ch]
.text$mn:00001598                 jz      loc_167C
.text$mn:0000159E                 mov     [ebp+var_E8], 0
.text$mn:000015A8                 xor     eax, eax
.text$mn:000015AA                 mov     [ebp+var_E4], eax
.text$mn:000015B0                 mov     [ebp+var_E0], eax
.text$mn:000015B6                 mov     [ebp+var_DC], eax
.text$mn:000015BC                 mov     [ebp+var_D8], eax
.text$mn:000015C2                 mov     [ebp+var_D4], eax
.text$mn:000015C8                 mov     [ebp+var_D0], eax
.text$mn:000015CE                 mov     [ebp+var_6C], 0
.text$mn:000015D5                 xor     ecx, ecx
.text$mn:000015D7                 mov     [ebp+var_68], ecx
.text$mn:000015DA                 mov     [ebp+var_64], ecx
.text$mn:000015DD                 mov     [ebp+var_60], ecx
.text$mn:000015E0                 mov     ecx, offset ?toolTip@?1??runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4VToolTip@@A ; this
.text$mn:000015E5                 call    ?destroy@ToolTip@@UAEXXZ ; ToolTip::destroy(void)
.text$mn:000015EA                 lea     edx, [ebp+var_1C]
.text$mn:000015ED                 push    edx             ; lpPoint
.text$mn:000015EE                 mov     eax, [ebp+hWnd]
.text$mn:000015F1                 push    eax             ; hWnd
.text$mn:000015F2                 call    dword ptr ds:__imp__ClientToScreen@8 ; ClientToScreen(x,x)
.text$mn:000015F8                 mov     [ebp+var_E8], 8
.text$mn:00001602                 lea     ecx, [ebp+var_E8]
.text$mn:00001608                 push    ecx             ; lParam
.text$mn:00001609                 mov     edx, [ebp+var_78]
.text$mn:0000160C                 push    edx             ; wParam
.text$mn:0000160D                 push    133Ch           ; Msg
.text$mn:00001612                 mov     eax, [ebp+hWnd]
.text$mn:00001615                 push    eax             ; hWnd
.text$mn:00001616                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000161C                 cmp     [ebp+var_D0], 0
.text$mn:00001623                 jnz     short loc_162C
.text$mn:00001625                 xor     eax, eax
.text$mn:00001627                 jmp     loc_189E
.text$mn:0000162C ; ---------------------------------------------------------------------------
.text$mn:0000162C
.text$mn:0000162C loc_162C:                               ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+433j
.text$mn:0000162C                 mov     ecx, [ebp+hWnd]
.text$mn:0000162F                 push    ecx             ; HWND
.text$mn:00001630                 mov     edx, [ebp+var_70]
.text$mn:00001633                 mov     eax, [edx+4]
.text$mn:00001636                 push    eax             ; HINSTANCE
.text$mn:00001637                 mov     ecx, offset ?toolTip@?1??runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4VToolTip@@A ; this
.text$mn:0000163C                 call    ?init@ToolTip@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; ToolTip::init(HINSTANCE__ *,HWND__ *)
.text$mn:00001641                 mov     ecx, [ebp+var_18]
.text$mn:00001644                 add     ecx, 14h
.text$mn:00001647                 push    ecx             ; int
.text$mn:00001648                 mov     edx, [ebp+var_1C]
.text$mn:0000164B                 push    edx             ; int
.text$mn:0000164C                 mov     eax, [ebp+var_D0]
.text$mn:00001652                 mov     ecx, [eax+4]
.text$mn:00001655                 push    ecx             ; wchar_t *
.text$mn:00001656                 sub     esp, 10h
.text$mn:00001659                 mov     edx, esp
.text$mn:0000165B                 mov     eax, [ebp+var_6C]
.text$mn:0000165E                 mov     [edx], eax
.text$mn:00001660                 mov     ecx, [ebp+var_68]
.text$mn:00001663                 mov     [edx+4], ecx
.text$mn:00001666                 mov     eax, [ebp+var_64]
.text$mn:00001669                 mov     [edx+8], eax
.text$mn:0000166C                 mov     ecx, [ebp+var_60]
.text$mn:0000166F                 mov     [edx+0Ch], ecx
.text$mn:00001672                 mov     ecx, offset ?toolTip@?1??runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4VToolTip@@A ; this
.text$mn:00001677                 call    ?Show@ToolTip@@QAEXUtagRECT@@PB_WHH@Z ; ToolTip::Show(tagRECT,wchar_t const *,int,int)
.text$mn:0000167C
.text$mn:0000167C loc_167C:                               ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+370j
.text$mn:0000167C                                         ; DockingCont::runProcTab(HWND__ *,uint,uint,long)+397j ...
.text$mn:0000167C                 mov     edx, [ebp+var_70]
.text$mn:0000167F                 mov     eax, [ebp+var_78]
.text$mn:00001682                 mov     [edx+8Ch], eax
.text$mn:00001688                 mov     ecx, [ebp+var_70]
.text$mn:0000168B                 mov     dword ptr [ecx+84h], 0
.text$mn:00001695
.text$mn:00001695 loc_1695:                               ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+2FEj
.text$mn:00001695                 mov     eax, 1
.text$mn:0000169A                 jmp     loc_189E
.text$mn:0000169F ; ---------------------------------------------------------------------------
.text$mn:0000169F
.text$mn:0000169F $LN6_2:                                 ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+B9j
.text$mn:0000169F                                         ; DATA XREF: .text$mn:$LN33o
.text$mn:0000169F                 mov     [ebp+var_84], 0 ; jumptable 000012A9 case 160
.text$mn:000016A9                 mov     [ebp+var_CC], 0
.text$mn:000016B3                 xor     edx, edx
.text$mn:000016B5                 mov     [ebp+var_C8], edx
.text$mn:000016BB                 mov     [ebp+var_C4], edx
.text$mn:000016C1                 mov     [ebp+var_C0], edx
.text$mn:000016C7                 mov     [ebp+var_BC], edx
.text$mn:000016CD                 mov     [ebp+var_B8], edx
.text$mn:000016D3                 mov     [ebp+var_B4], edx
.text$mn:000016D9                 mov     [ebp+var_5C], 0
.text$mn:000016E0                 xor     eax, eax
.text$mn:000016E2                 mov     [ebp+var_58], eax
.text$mn:000016E5                 mov     [ebp+var_54], eax
.text$mn:000016E8                 mov     [ebp+var_50], eax
.text$mn:000016EB                 mov     [ebp+var_28], 0
.text$mn:000016F2                 xor     ecx, ecx
.text$mn:000016F4                 mov     [ebp+var_24], ecx
.text$mn:000016F7                 mov     [ebp+var_20], ecx
.text$mn:000016FA                 mov     edx, [ebp+arg_C]
.text$mn:000016FD                 and     edx, 0FFFFh
.text$mn:00001703                 movzx   eax, dx
.text$mn:00001706                 mov     [ebp+var_28], eax
.text$mn:00001709                 mov     ecx, [ebp+arg_C]
.text$mn:0000170C                 shr     ecx, 10h
.text$mn:0000170F                 and     ecx, 0FFFFh
.text$mn:00001715                 movzx   edx, cx
.text$mn:00001718                 mov     [ebp+var_24], edx
.text$mn:0000171B                 lea     eax, [ebp+var_28]
.text$mn:0000171E                 push    eax             ; lParam
.text$mn:0000171F                 push    0               ; wParam
.text$mn:00001721                 push    130Dh           ; Msg
.text$mn:00001726                 mov     ecx, [ebp+hWnd]
.text$mn:00001729                 push    ecx             ; hWnd
.text$mn:0000172A                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001730                 mov     [ebp+var_84], eax
.text$mn:00001736                 lea     edx, [ebp+var_28]
.text$mn:00001739                 push    edx             ; lpPoint
.text$mn:0000173A                 mov     eax, [ebp+hWnd]
.text$mn:0000173D                 push    eax             ; hWnd
.text$mn:0000173E                 call    dword ptr ds:__imp__ClientToScreen@8 ; ClientToScreen(x,x)
.text$mn:00001744                 mov     [ebp+var_CC], 8
.text$mn:0000174E                 lea     ecx, [ebp+var_CC]
.text$mn:00001754                 push    ecx             ; lParam
.text$mn:00001755                 mov     edx, [ebp+var_84]
.text$mn:0000175B                 push    edx             ; wParam
.text$mn:0000175C                 push    133Ch           ; Msg
.text$mn:00001761                 mov     eax, [ebp+hWnd]
.text$mn:00001764                 push    eax             ; hWnd
.text$mn:00001765                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000176B                 cmp     [ebp+var_B4], 0
.text$mn:00001772                 jnz     short loc_177B
.text$mn:00001774                 xor     eax, eax
.text$mn:00001776                 jmp     loc_189E
.text$mn:0000177B ; ---------------------------------------------------------------------------
.text$mn:0000177B
.text$mn:0000177B loc_177B:                               ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+582j
.text$mn:0000177B                 mov     ecx, [ebp+hWnd]
.text$mn:0000177E                 push    ecx             ; HWND
.text$mn:0000177F                 mov     edx, [ebp+var_70]
.text$mn:00001782                 mov     eax, [edx+4]
.text$mn:00001785                 push    eax             ; HINSTANCE
.text$mn:00001786                 mov     ecx, offset ?toolTip@?1??runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4VToolTip@@A ; this
.text$mn:0000178B                 call    ?init@ToolTip@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; ToolTip::init(HINSTANCE__ *,HWND__ *)
.text$mn:00001790                 mov     ecx, [ebp+var_24]
.text$mn:00001793                 add     ecx, 14h
.text$mn:00001796                 push    ecx             ; int
.text$mn:00001797                 mov     edx, [ebp+var_28]
.text$mn:0000179A                 push    edx             ; int
.text$mn:0000179B                 mov     eax, [ebp+var_B4]
.text$mn:000017A1                 mov     ecx, [eax+4]
.text$mn:000017A4                 push    ecx             ; wchar_t *
.text$mn:000017A5                 sub     esp, 10h
.text$mn:000017A8                 mov     edx, esp
.text$mn:000017AA                 mov     eax, [ebp+var_5C]
.text$mn:000017AD                 mov     [edx], eax
.text$mn:000017AF                 mov     ecx, [ebp+var_58]
.text$mn:000017B2                 mov     [edx+4], ecx
.text$mn:000017B5                 mov     eax, [ebp+var_54]
.text$mn:000017B8                 mov     [edx+8], eax
.text$mn:000017BB                 mov     ecx, [ebp+var_50]
.text$mn:000017BE                 mov     [edx+0Ch], ecx
.text$mn:000017C1                 mov     ecx, offset ?toolTip@?1??runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4VToolTip@@A ; this
.text$mn:000017C6                 call    ?Show@ToolTip@@QAEXUtagRECT@@PB_WHH@Z ; ToolTip::Show(tagRECT,wchar_t const *,int,int)
.text$mn:000017CB                 mov     eax, 1
.text$mn:000017D0                 jmp     loc_189E
.text$mn:000017D5 ; ---------------------------------------------------------------------------
.text$mn:000017D5
.text$mn:000017D5 $LN4_0:                                 ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+B9j
.text$mn:000017D5                                         ; DATA XREF: .text$mn:$LN33o
.text$mn:000017D5                 mov     ecx, offset ?toolTip@?1??runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4VToolTip@@A ; jumptable 000012A9 case 162
.text$mn:000017DA                 call    ?destroy@ToolTip@@UAEXXZ ; ToolTip::destroy(void)
.text$mn:000017DF                 mov     edx, [ebp+var_70]
.text$mn:000017E2                 mov     dword ptr [edx+88h], 0
.text$mn:000017EC                 mov     eax, 1
.text$mn:000017F1                 jmp     loc_189E
.text$mn:000017F6 ; ---------------------------------------------------------------------------
.text$mn:000017F6
.text$mn:000017F6 loc_17F6:                               ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+8Cj
.text$mn:000017F6                 mov     eax, [ebp+arg_C]
.text$mn:000017F9                 mov     [ebp+var_90], eax
.text$mn:000017FF                 mov     ecx, [ebp+var_90]
.text$mn:00001805                 mov     edx, [ebp+var_70]
.text$mn:00001808                 mov     eax, [ecx]
.text$mn:0000180A                 cmp     eax, [edx+2Ch]
.text$mn:0000180D                 jnz     short $LN22_0   ; jumptable 000012A9 default case
.text$mn:0000180F                 mov     ecx, [ebp+var_90]
.text$mn:00001815                 cmp     dword ptr [ecx+8], 0FFFFFDD7h
.text$mn:0000181C                 jnz     short $LN22_0   ; jumptable 000012A9 default case
.text$mn:0000181E                 mov     [ebp+var_88], 0
.text$mn:00001828                 mov     [ebp+var_4C], 0
.text$mn:0000182F                 xor     edx, edx
.text$mn:00001831                 mov     [ebp+var_48], edx
.text$mn:00001834                 mov     [ebp+var_44], edx
.text$mn:00001837                 mov     eax, [ebp+arg_C]
.text$mn:0000183A                 and     eax, 0FFFFh
.text$mn:0000183F                 movzx   ecx, ax
.text$mn:00001842                 mov     [ebp+var_4C], ecx
.text$mn:00001845                 mov     edx, [ebp+arg_C]
.text$mn:00001848                 shr     edx, 10h
.text$mn:0000184B                 and     edx, 0FFFFh
.text$mn:00001851                 movzx   eax, dx
.text$mn:00001854                 mov     [ebp+var_48], eax
.text$mn:00001857                 lea     ecx, [ebp+var_4C]
.text$mn:0000185A                 push    ecx             ; lParam
.text$mn:0000185B                 push    0               ; wParam
.text$mn:0000185D                 push    130Dh           ; Msg
.text$mn:00001862                 mov     edx, [ebp+hWnd]
.text$mn:00001865                 push    edx             ; hWnd
.text$mn:00001866                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000186C                 mov     [ebp+var_88], eax
.text$mn:00001872                 mov     eax, [ebp+var_88]
.text$mn:00001878                 push    eax             ; int
.text$mn:00001879                 mov     ecx, [ebp+var_70] ; this
.text$mn:0000187C                 call    ?SelectTab@DockingCont@@IAEXH@Z ; DockingCont::SelectTab(int)
.text$mn:00001881
.text$mn:00001881 $LN22_0:                                ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+92j
.text$mn:00001881                                         ; DockingCont::runProcTab(HWND__ *,uint,uint,long)+A9j ...
.text$mn:00001881                 mov     ecx, [ebp+arg_C] ; jumptable 000012A9 default case
.text$mn:00001884                 push    ecx             ; lParam
.text$mn:00001885                 mov     edx, [ebp+arg_8]
.text$mn:00001888                 push    edx             ; wParam
.text$mn:00001889                 mov     eax, [ebp+Msg]
.text$mn:0000188C                 push    eax             ; Msg
.text$mn:0000188D                 mov     ecx, [ebp+hWnd]
.text$mn:00001890                 push    ecx             ; hWnd
.text$mn:00001891                 mov     edx, [ebp+var_70]
.text$mn:00001894                 mov     eax, [edx+7Ch]
.text$mn:00001897                 push    eax             ; lpPrevWndFunc
.text$mn:00001898                 call    dword ptr ds:__imp__CallWindowProcW@20 ; CallWindowProcW(x,x,x,x,x)
.text$mn:0000189E
.text$mn:0000189E loc_189E:                               ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+D2j
.text$mn:0000189E                                         ; DockingCont::runProcTab(HWND__ *,uint,uint,long)+14Dj ...
.text$mn:0000189E                 mov     ecx, [ebp+var_C]
.text$mn:000018A1                 mov     large fs:0, ecx
.text$mn:000018A8                 pop     ecx
.text$mn:000018A9                 mov     ecx, [ebp+var_10]
.text$mn:000018AC                 xor     ecx, ebp
.text$mn:000018AE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000018B3                 mov     esp, ebp
.text$mn:000018B5                 pop     ebp
.text$mn:000018B6                 retn    10h
.text$mn:000018B6 ?runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z endp
.text$mn:000018B6
.text$mn:000018B6 ; ---------------------------------------------------------------------------
.text$mn:000018B9                 align 4
.text$mn:000018BC $LN33           dd offset $LN21, offset $LN20, offset $LN19_1, offset $LN18
.text$mn:000018BC                                         ; DATA XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+B9r
.text$mn:000018BC                 dd offset $LN6_2, offset $LN4_0, offset $LN22_0 ; jump table for switch statement
.text$mn:000018D8 $LN31           db      0,     1,     2,     6
.text$mn:000018D8                                         ; DATA XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+B2r
.text$mn:000018D8                 db      6,     6,     6,     3 ; indirect table for switch statement
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      6,     6,     6,     6
.text$mn:000018D8                 db      4,     6,     5
.text$mn:0000197B                 align 10h
.text$mn:00001980
.text$mn:00001980 ; =============== S U B R O U T I N E =======================================
.text$mn:00001980
.text$mn:00001980 ; Attributes: bp-based frame
.text$mn:00001980
.text$mn:00001980 ; int __stdcall DockingCont::run_dlgProc(LONG dwNewLong, unsigned int, WPARAM wParam, struct tagDRAWITEMSTRUCT *)
.text$mn:00001980                 public ?run_dlgProc@DockingCont@@MAGHIIJ@Z
.text$mn:00001980 ?run_dlgProc@DockingCont@@MAGHIIJ@Z proc near
.text$mn:00001980                                         ; DATA XREF: .rdata:00009404o
.text$mn:00001980
.text$mn:00001980 var_3C          = dword ptr -3Ch
.text$mn:00001980 lParam          = dword ptr -38h
.text$mn:00001980 var_34          = dword ptr -34h
.text$mn:00001980 var_30          = dword ptr -30h
.text$mn:00001980 var_2C          = dword ptr -2Ch
.text$mn:00001980 var_28          = dword ptr -28h
.text$mn:00001980 var_24          = tagRECT ptr -24h
.text$mn:00001980 var_14          = dword ptr -14h
.text$mn:00001980 var_10          = dword ptr -10h
.text$mn:00001980 var_C           = dword ptr -0Ch
.text$mn:00001980 var_8           = dword ptr -8
.text$mn:00001980 var_4           = dword ptr -4
.text$mn:00001980 dwNewLong       = dword ptr  8
.text$mn:00001980 arg_4           = dword ptr  0Ch
.text$mn:00001980 wParam          = dword ptr  10h
.text$mn:00001980 arg_C           = dword ptr  14h
.text$mn:00001980
.text$mn:00001980                 push    ebp
.text$mn:00001981                 mov     ebp, esp
.text$mn:00001983                 sub     esp, 3Ch
.text$mn:00001986                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000198B                 xor     eax, ebp
.text$mn:0000198D                 mov     [ebp+var_4], eax
.text$mn:00001990                 mov     eax, [ebp+arg_4]
.text$mn:00001993                 mov     [ebp+var_28], eax
.text$mn:00001996                 cmp     [ebp+var_28], 0A3h ; 'Ãº'
.text$mn:0000199D                 ja      short loc_19D3
.text$mn:0000199F                 cmp     [ebp+var_28], 0A3h ; 'Ãº'
.text$mn:000019A6                 jz      loc_1B25
.text$mn:000019AC                 mov     ecx, [ebp+var_28]
.text$mn:000019AF                 sub     ecx, 5
.text$mn:000019B2                 mov     [ebp+var_28], ecx
.text$mn:000019B5                 cmp     [ebp+var_28], 81h ; 'Ã¼' ; switch 130 cases
.text$mn:000019BC                 ja      $LN21_0         ; jumptable 000019CC default case
.text$mn:000019C2                 mov     edx, [ebp+var_28]
.text$mn:000019C5                 movzx   eax, ds:$LN26[edx]
.text$mn:000019CC                 jmp     ds:$LN27[eax*4] ; switch jump
.text$mn:000019D3 ; ---------------------------------------------------------------------------
.text$mn:000019D3
.text$mn:000019D3 loc_19D3:                               ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+1Dj
.text$mn:000019D3                 cmp     [ebp+var_28], 110h
.text$mn:000019DA                 jz      short loc_1A1E
.text$mn:000019DC                 cmp     [ebp+var_28], 111h
.text$mn:000019E3                 jz      loc_1C09
.text$mn:000019E9                 cmp     [ebp+var_28], 112h
.text$mn:000019F0                 jz      loc_1BDA
.text$mn:000019F6                 jmp     $LN21_0         ; jumptable 000019CC default case
.text$mn:000019FB ; ---------------------------------------------------------------------------
.text$mn:000019FB
.text$mn:000019FB $LN20_0:                                ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+4Cj
.text$mn:000019FB                                         ; DATA XREF: .text$mn:$LN27o
.text$mn:000019FB                 cmp     [ebp+arg_C], 0FFFFFFFFh ; jumptable 000019CC case 129
.text$mn:000019FF                 jz      short loc_1A19
.text$mn:00001A01                 push    0               ; lParam
.text$mn:00001A03                 mov     ecx, [ebp+wParam]
.text$mn:00001A06                 push    ecx             ; wParam
.text$mn:00001A07                 push    86h ; 'Ã¥'       ; Msg
.text$mn:00001A0C                 mov     edx, [ebp+dwNewLong]
.text$mn:00001A0F                 mov     eax, [edx+8]
.text$mn:00001A12                 push    eax             ; hWnd
.text$mn:00001A13                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001A19
.text$mn:00001A19 loc_1A19:                               ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+7Fj
.text$mn:00001A19                 jmp     $LN21_0         ; jumptable 000019CC default case
.text$mn:00001A1E ; ---------------------------------------------------------------------------
.text$mn:00001A1E
.text$mn:00001A1E loc_1A1E:                               ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+5Aj
.text$mn:00001A1E                 push    403h            ; nIDDlgItem
.text$mn:00001A23                 mov     ecx, [ebp+dwNewLong]
.text$mn:00001A26                 mov     edx, [ecx+0Ch]
.text$mn:00001A29                 push    edx             ; hDlg
.text$mn:00001A2A                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00001A30                 mov     ecx, [ebp+dwNewLong]
.text$mn:00001A33                 mov     [ecx+2Ch], eax
.text$mn:00001A36                 push    41Ah            ; nIDDlgItem
.text$mn:00001A3B                 mov     edx, [ebp+dwNewLong]
.text$mn:00001A3E                 mov     eax, [edx+0Ch]
.text$mn:00001A41                 push    eax             ; hDlg
.text$mn:00001A42                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00001A48                 mov     ecx, [ebp+dwNewLong]
.text$mn:00001A4B                 mov     [ecx+28h], eax
.text$mn:00001A4E                 mov     edx, [ebp+dwNewLong]
.text$mn:00001A51                 push    edx             ; dwNewLong
.text$mn:00001A52                 push    0FFFFFFEBh      ; nIndex
.text$mn:00001A54                 mov     eax, [ebp+dwNewLong]
.text$mn:00001A57                 mov     ecx, [eax+28h]
.text$mn:00001A5A                 push    ecx             ; hWnd
.text$mn:00001A5B                 call    dword ptr ds:__imp__SetWindowLongW@12 ; SetWindowLongW(x,x,x)
.text$mn:00001A61                 push    offset ?wndCaptionProc@DockingCont@@KGJPAUHWND__@@IIJ@Z ; dwNewLong
.text$mn:00001A66                 push    0FFFFFFFCh      ; nIndex
.text$mn:00001A68                 mov     edx, [ebp+dwNewLong]
.text$mn:00001A6B                 mov     eax, [edx+28h]
.text$mn:00001A6E                 push    eax             ; hWnd
.text$mn:00001A6F                 call    dword ptr ds:__imp__SetWindowLongW@12 ; SetWindowLongW(x,x,x)
.text$mn:00001A75                 mov     ecx, [ebp+dwNewLong]
.text$mn:00001A78                 mov     [ecx+78h], eax
.text$mn:00001A7B                 mov     edx, [ebp+dwNewLong]
.text$mn:00001A7E                 push    edx             ; dwNewLong
.text$mn:00001A7F                 push    0FFFFFFEBh      ; nIndex
.text$mn:00001A81                 mov     eax, [ebp+dwNewLong]
.text$mn:00001A84                 mov     ecx, [eax+2Ch]
.text$mn:00001A87                 push    ecx             ; hWnd
.text$mn:00001A88                 call    dword ptr ds:__imp__SetWindowLongW@12 ; SetWindowLongW(x,x,x)
.text$mn:00001A8E                 push    offset ?wndTabProc@DockingCont@@KGJPAUHWND__@@IIJ@Z ; dwNewLong
.text$mn:00001A93                 push    0FFFFFFFCh      ; nIndex
.text$mn:00001A95                 mov     edx, [ebp+dwNewLong]
.text$mn:00001A98                 mov     eax, [edx+2Ch]
.text$mn:00001A9B                 push    eax             ; hWnd
.text$mn:00001A9C                 call    dword ptr ds:__imp__SetWindowLongW@12 ; SetWindowLongW(x,x,x)
.text$mn:00001AA2                 mov     ecx, [ebp+dwNewLong]
.text$mn:00001AA5                 mov     [ecx+7Ch], eax
.text$mn:00001AA8                 push    18h             ; int
.text$mn:00001AAA                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00001AAF                 add     eax, 0Ch
.text$mn:00001AB2                 mov     ecx, eax        ; this
.text$mn:00001AB4                 call    ?scaleY@DPIManager@@QAEHH@Z ; DPIManager::scaleY(int)
.text$mn:00001AB9                 mov     [ebp+lParam], eax
.text$mn:00001ABC                 mov     edx, [ebp+lParam]
.text$mn:00001ABF                 push    edx             ; lParam
.text$mn:00001AC0                 push    0               ; wParam
.text$mn:00001AC2                 push    1331h           ; Msg
.text$mn:00001AC7                 mov     eax, [ebp+dwNewLong]
.text$mn:00001ACA                 mov     ecx, [eax+2Ch]
.text$mn:00001ACD                 push    ecx             ; hWnd
.text$mn:00001ACE                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001AD4                 jmp     $LN21_0         ; jumptable 000019CC default case
.text$mn:00001AD9 ; ---------------------------------------------------------------------------
.text$mn:00001AD9
.text$mn:00001AD9 $LN17_1:                                ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+4Cj
.text$mn:00001AD9                                         ; DATA XREF: .text$mn:$LN27o
.text$mn:00001AD9                 mov     ecx, [ebp+dwNewLong] ; jumptable 000019CC cases 0,126
.text$mn:00001ADC                 call    ?onSize@DockingCont@@IAEXXZ ; DockingCont::onSize(void)
.text$mn:00001AE1                 jmp     $LN21_0         ; jumptable 000019CC default case
.text$mn:00001AE6 ; ---------------------------------------------------------------------------
.text$mn:00001AE6
.text$mn:00001AE6 $LN16:                                  ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+4Cj
.text$mn:00001AE6                                         ; DATA XREF: .text$mn:$LN27o
.text$mn:00001AE6                 mov     edx, [ebp+arg_C] ; jumptable 000019CC case 38
.text$mn:00001AE9                 cmp     dword ptr [edx+4], 403h
.text$mn:00001AF0                 jnz     short loc_1B0A
.text$mn:00001AF2                 mov     eax, [ebp+arg_C]
.text$mn:00001AF5                 push    eax             ; struct tagDRAWITEMSTRUCT *
.text$mn:00001AF6                 mov     ecx, [ebp+dwNewLong] ; this
.text$mn:00001AF9                 call    ?drawTabItem@DockingCont@@IAEXPAUtagDRAWITEMSTRUCT@@@Z ; DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)
.text$mn:00001AFE                 mov     eax, 1
.text$mn:00001B03                 jmp     loc_1C30
.text$mn:00001B08 ; ---------------------------------------------------------------------------
.text$mn:00001B08                 jmp     short loc_1B20
.text$mn:00001B0A ; ---------------------------------------------------------------------------
.text$mn:00001B0A
.text$mn:00001B0A loc_1B0A:                               ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+170j
.text$mn:00001B0A                 mov     ecx, [ebp+arg_C]
.text$mn:00001B0D                 push    ecx             ; struct tagDRAWITEMSTRUCT *
.text$mn:00001B0E                 mov     ecx, [ebp+dwNewLong] ; this
.text$mn:00001B11                 call    ?drawCaptionItem@DockingCont@@IAEXPAUtagDRAWITEMSTRUCT@@@Z ; DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)
.text$mn:00001B16                 mov     eax, 1
.text$mn:00001B1B                 jmp     loc_1C30
.text$mn:00001B20 ; ---------------------------------------------------------------------------
.text$mn:00001B20
.text$mn:00001B20 loc_1B20:                               ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+188j
.text$mn:00001B20                 jmp     $LN21_0         ; jumptable 000019CC default case
.text$mn:00001B25 ; ---------------------------------------------------------------------------
.text$mn:00001B25
.text$mn:00001B25 loc_1B25:                               ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+26j
.text$mn:00001B25                 mov     [ebp+var_14], 0
.text$mn:00001B2C                 xor     edx, edx
.text$mn:00001B2E                 mov     [ebp+var_10], edx
.text$mn:00001B31                 mov     [ebp+var_C], edx
.text$mn:00001B34                 mov     [ebp+var_8], edx
.text$mn:00001B37                 mov     [ebp+var_24.left], 0
.text$mn:00001B3E                 xor     eax, eax
.text$mn:00001B40                 mov     [ebp+var_24.top], eax
.text$mn:00001B43                 mov     [ebp+var_24.right], eax
.text$mn:00001B46                 mov     [ebp+var_24.bottom], eax
.text$mn:00001B49                 mov     ecx, [ebp+arg_C]
.text$mn:00001B4C                 shr     ecx, 10h
.text$mn:00001B4F                 and     ecx, 0FFFFh
.text$mn:00001B55                 movzx   edx, cx
.text$mn:00001B58                 mov     [ebp+var_30], edx
.text$mn:00001B5B                 mov     eax, [ebp+arg_C]
.text$mn:00001B5E                 and     eax, 0FFFFh
.text$mn:00001B63                 movzx   ecx, ax
.text$mn:00001B66                 mov     [ebp+var_2C], ecx
.text$mn:00001B69                 lea     edx, [ebp+var_14]
.text$mn:00001B6C                 push    edx
.text$mn:00001B6D                 mov     eax, [ebp+dwNewLong]
.text$mn:00001B70                 mov     edx, [eax]
.text$mn:00001B72                 mov     ecx, [ebp+dwNewLong]
.text$mn:00001B75                 mov     eax, [edx+20h]
.text$mn:00001B78                 call    eax
.text$mn:00001B7A                 lea     ecx, [ebp+var_24]
.text$mn:00001B7D                 push    ecx
.text$mn:00001B7E                 mov     edx, [ebp+dwNewLong]
.text$mn:00001B81                 mov     eax, [edx]
.text$mn:00001B83                 mov     ecx, [ebp+dwNewLong]
.text$mn:00001B86                 mov     edx, [eax+1Ch]
.text$mn:00001B89                 call    edx
.text$mn:00001B8B                 lea     eax, [ebp+var_24]
.text$mn:00001B8E                 push    eax             ; struct tagRECT *
.text$mn:00001B8F                 mov     ecx, [ebp+dwNewLong]
.text$mn:00001B92                 mov     edx, [ecx+0Ch]
.text$mn:00001B95                 push    edx             ; HWND
.text$mn:00001B96                 call    ?ClientRectToScreenRect@@YAXPAUHWND__@@PAUtagRECT@@@Z ; ClientRectToScreenRect(HWND__ *,tagRECT *)
.text$mn:00001B9B                 add     esp, 8
.text$mn:00001B9E                 mov     eax, [ebp+var_24.top]
.text$mn:00001BA1                 mov     [ebp+var_8], eax
.text$mn:00001BA4                 mov     ecx, [ebp+var_10]
.text$mn:00001BA7                 cmp     ecx, [ebp+var_30]
.text$mn:00001BAA                 jge     short loc_1BD8
.text$mn:00001BAC                 mov     edx, [ebp+var_8]
.text$mn:00001BAF                 cmp     edx, [ebp+var_30]
.text$mn:00001BB2                 jle     short loc_1BD8
.text$mn:00001BB4                 mov     eax, [ebp+var_14]
.text$mn:00001BB7                 cmp     eax, [ebp+var_2C]
.text$mn:00001BBA                 jge     short loc_1BD8
.text$mn:00001BBC                 mov     ecx, [ebp+var_C]
.text$mn:00001BBF                 cmp     ecx, [ebp+var_2C]
.text$mn:00001BC2                 jle     short loc_1BD8
.text$mn:00001BC4                 push    5004h           ; unsigned int
.text$mn:00001BC9                 mov     ecx, [ebp+dwNewLong] ; this
.text$mn:00001BCC                 call    ?NotifyParent@DockingCont@@IAEJI@Z ; DockingCont::NotifyParent(uint)
.text$mn:00001BD1                 mov     eax, 1
.text$mn:00001BD6                 jmp     short loc_1C30
.text$mn:00001BD8 ; ---------------------------------------------------------------------------
.text$mn:00001BD8
.text$mn:00001BD8 loc_1BD8:                               ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+22Aj
.text$mn:00001BD8                                         ; DockingCont::run_dlgProc(uint,uint,long)+232j ...
.text$mn:00001BD8                 jmp     short $LN21_0   ; jumptable 000019CC default case
.text$mn:00001BDA ; ---------------------------------------------------------------------------
.text$mn:00001BDA
.text$mn:00001BDA loc_1BDA:                               ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+70j
.text$mn:00001BDA                 mov     edx, [ebp+wParam]
.text$mn:00001BDD                 and     edx, 0FFF0h
.text$mn:00001BE3                 mov     [ebp+var_3C], edx
.text$mn:00001BE6                 cmp     [ebp+var_3C], 0F010h
.text$mn:00001BED                 jz      short loc_1BF1
.text$mn:00001BEF                 jmp     short loc_1C05
.text$mn:00001BF1 ; ---------------------------------------------------------------------------
.text$mn:00001BF1
.text$mn:00001BF1 loc_1BF1:                               ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+26Dj
.text$mn:00001BF1                 push    5006h           ; unsigned int
.text$mn:00001BF6                 mov     ecx, [ebp+dwNewLong] ; this
.text$mn:00001BF9                 call    ?NotifyParent@DockingCont@@IAEJI@Z ; DockingCont::NotifyParent(uint)
.text$mn:00001BFE                 mov     eax, 1
.text$mn:00001C03                 jmp     short loc_1C30
.text$mn:00001C05 ; ---------------------------------------------------------------------------
.text$mn:00001C05
.text$mn:00001C05 loc_1C05:                               ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+26Fj
.text$mn:00001C05                 xor     eax, eax
.text$mn:00001C07                 jmp     short loc_1C30
.text$mn:00001C09 ; ---------------------------------------------------------------------------
.text$mn:00001C09
.text$mn:00001C09 loc_1C09:                               ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+63j
.text$mn:00001C09                 mov     eax, [ebp+wParam]
.text$mn:00001C0C                 and     eax, 0FFFFh
.text$mn:00001C11                 movzx   ecx, ax
.text$mn:00001C14                 mov     [ebp+var_34], ecx
.text$mn:00001C17                 cmp     [ebp+var_34], 2
.text$mn:00001C1B                 jz      short loc_1C1F
.text$mn:00001C1D                 jmp     short $LN21_0   ; jumptable 000019CC default case
.text$mn:00001C1F ; ---------------------------------------------------------------------------
.text$mn:00001C1F
.text$mn:00001C1F loc_1C1F:                               ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+29Bj
.text$mn:00001C1F                 mov     ecx, [ebp+dwNewLong] ; this
.text$mn:00001C22                 call    ?doClose@DockingCont@@IAEXXZ ; DockingCont::doClose(void)
.text$mn:00001C27                 mov     eax, 1
.text$mn:00001C2C                 jmp     short loc_1C30
.text$mn:00001C2E ; ---------------------------------------------------------------------------
.text$mn:00001C2E
.text$mn:00001C2E $LN21_0:                                ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+3Cj
.text$mn:00001C2E                                         ; DockingCont::run_dlgProc(uint,uint,long)+4Cj ...
.text$mn:00001C2E                 xor     eax, eax        ; jumptable 000019CC default case
.text$mn:00001C30
.text$mn:00001C30 loc_1C30:                               ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+183j
.text$mn:00001C30                                         ; DockingCont::run_dlgProc(uint,uint,long)+19Bj ...
.text$mn:00001C30                 mov     ecx, [ebp+var_4]
.text$mn:00001C33                 xor     ecx, ebp
.text$mn:00001C35                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00001C3A                 mov     esp, ebp
.text$mn:00001C3C                 pop     ebp
.text$mn:00001C3D                 retn    10h
.text$mn:00001C3D ?run_dlgProc@DockingCont@@MAGHIIJ@Z endp
.text$mn:00001C3D
.text$mn:00001C3D ; ---------------------------------------------------------------------------
.text$mn:00001C40 $LN27           dd offset $LN17_1, offset $LN16, offset $LN20_0, offset $LN21_0
.text$mn:00001C40                                         ; DATA XREF: DockingCont::run_dlgProc(uint,uint,long)+4Cr
.text$mn:00001C40                                         ; jump table for switch statement
.text$mn:00001C50 $LN26           db      0,     3,     3,     3
.text$mn:00001C50                                         ; DATA XREF: DockingCont::run_dlgProc(uint,uint,long)+45r
.text$mn:00001C50                 db      3,     3,     3,     3 ; indirect table for switch statement
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     1,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     3,     3
.text$mn:00001C50                 db      3,     3,     0,     3
.text$mn:00001C50                 db      3,     2
.text$mn:00001CD2                 align 10h
.text$mn:00001CE0
.text$mn:00001CE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00001CE0
.text$mn:00001CE0 ; Attributes: bp-based frame
.text$mn:00001CE0
.text$mn:00001CE0 ; void __thiscall DockingCont::drawCaptionItem(DockingCont *this, struct tagDRAWITEMSTRUCT *)
.text$mn:00001CE0                 public ?drawCaptionItem@DockingCont@@IAEXPAUtagDRAWITEMSTRUCT@@@Z
.text$mn:00001CE0 ?drawCaptionItem@DockingCont@@IAEXPAUtagDRAWITEMSTRUCT@@@Z proc near
.text$mn:00001CE0                                         ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+191p
.text$mn:00001CE0
.text$mn:00001CE0 psizl           = tagSIZE ptr -74h
.text$mn:00001CE0 var_6C          = tagSIZE ptr -6Ch
.text$mn:00001CE0 var_64          = dword ptr -64h
.text$mn:00001CE0 nSavedDC        = dword ptr -60h
.text$mn:00001CE0 pv              = dword ptr -5Ch
.text$mn:00001CE0 var_58          = dword ptr -58h
.text$mn:00001CE0 cy              = dword ptr -54h
.text$mn:00001CE0 var_50          = dword ptr -50h
.text$mn:00001CE0 var_4C          = dword ptr -4Ch
.text$mn:00001CE0 var_48          = dword ptr -48h
.text$mn:00001CE0 var_44          = dword ptr -44h
.text$mn:00001CE0 ho              = dword ptr -40h
.text$mn:00001CE0 var_3C          = dword ptr -3Ch
.text$mn:00001CE0 var_38          = dword ptr -38h
.text$mn:00001CE0 var_34          = dword ptr -34h
.text$mn:00001CE0 h               = dword ptr -30h
.text$mn:00001CE0 cchText         = dword ptr -2Ch
.text$mn:00001CE0 var_28          = dword ptr -28h
.text$mn:00001CE0 hdcSrc          = dword ptr -24h
.text$mn:00001CE0 hbr             = dword ptr -20h
.text$mn:00001CE0 var_1C          = dword ptr -1Ch
.text$mn:00001CE0 hdc             = dword ptr -18h
.text$mn:00001CE0 rc              = RECT ptr -14h
.text$mn:00001CE0 var_4           = dword ptr -4
.text$mn:00001CE0 arg_0           = dword ptr  8
.text$mn:00001CE0
.text$mn:00001CE0                 push    ebp
.text$mn:00001CE1                 mov     ebp, esp
.text$mn:00001CE3                 sub     esp, 74h
.text$mn:00001CE6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001CEB                 xor     eax, ebp
.text$mn:00001CED                 mov     [ebp+var_4], eax
.text$mn:00001CF0                 mov     [ebp+var_1C], ecx
.text$mn:00001CF3                 mov     [ebp+hbr], 0
.text$mn:00001CFA                 mov     [ebp+h], 0
.text$mn:00001D01                 mov     eax, [ebp+arg_0]
.text$mn:00001D04                 add     eax, 1Ch
.text$mn:00001D07                 mov     ecx, [eax]
.text$mn:00001D09                 mov     [ebp+rc.left], ecx
.text$mn:00001D0C                 mov     edx, [eax+4]
.text$mn:00001D0F                 mov     [ebp+rc.top], edx
.text$mn:00001D12                 mov     ecx, [eax+8]
.text$mn:00001D15                 mov     [ebp+rc.right], ecx
.text$mn:00001D18                 mov     edx, [eax+0Ch]
.text$mn:00001D1B                 mov     [ebp+rc.bottom], edx
.text$mn:00001D1E                 mov     eax, [ebp+arg_0]
.text$mn:00001D21                 mov     ecx, [eax+18h]
.text$mn:00001D24                 mov     [ebp+hdc], ecx
.text$mn:00001D27                 push    10h             ; nIndex
.text$mn:00001D29                 call    dword ptr ds:__imp__GetSysColor@4 ; GetSysColor(x)
.text$mn:00001D2F                 push    eax             ; color
.text$mn:00001D30                 push    1               ; cWidth
.text$mn:00001D32                 push    0               ; iStyle
.text$mn:00001D34                 call    dword ptr ds:__imp__CreatePen@12 ; CreatePen(x,x,x)
.text$mn:00001D3A                 mov     [ebp+var_64], eax
.text$mn:00001D3D                 mov     [ebp+pv], 0
.text$mn:00001D44                 xor     edx, edx
.text$mn:00001D46                 mov     [ebp+var_58], edx
.text$mn:00001D49                 mov     [ebp+cy], edx
.text$mn:00001D4C                 mov     [ebp+var_50], edx
.text$mn:00001D4F                 mov     [ebp+var_4C], edx
.text$mn:00001D52                 mov     [ebp+var_48], edx
.text$mn:00001D55                 mov     [ebp+var_28], 0
.text$mn:00001D5C                 mov     [ebp+var_3C], 0
.text$mn:00001D63                 mov     [ebp+var_34], 0
.text$mn:00001D6A                 mov     ecx, [ebp+var_1C]
.text$mn:00001D6D                 add     ecx, 38h ; '8'
.text$mn:00001D70                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00001D75                 mov     [ebp+cchText], eax
.text$mn:00001D78                 mov     eax, [ebp+hdc]
.text$mn:00001D7B                 push    eax             ; hdc
.text$mn:00001D7C                 call    dword ptr ds:__imp__SaveDC@4 ; SaveDC(x)
.text$mn:00001D82                 mov     [ebp+nSavedDC], eax
.text$mn:00001D85                 push    1               ; mode
.text$mn:00001D87                 mov     ecx, [ebp+hdc]
.text$mn:00001D8A                 push    ecx             ; hdc
.text$mn:00001D8B                 call    dword ptr ds:__imp__SetBkMode@8 ; SetBkMode(x,x)
.text$mn:00001D91                 mov     edx, [ebp+var_1C]
.text$mn:00001D94                 cmp     dword ptr [edx+20h], 1
.text$mn:00001D98                 jnz     short loc_1DC1
.text$mn:00001D9A                 push    2               ; nIndex
.text$mn:00001D9C                 call    dword ptr ds:__imp__GetSysColor@4 ; GetSysColor(x)
.text$mn:00001DA2                 push    eax             ; color
.text$mn:00001DA3                 call    dword ptr ds:__imp__CreateSolidBrush@4 ; CreateSolidBrush(x)
.text$mn:00001DA9                 mov     [ebp+hbr], eax
.text$mn:00001DAC                 push    9               ; nIndex
.text$mn:00001DAE                 call    dword ptr ds:__imp__GetSysColor@4 ; GetSysColor(x)
.text$mn:00001DB4                 push    eax             ; color
.text$mn:00001DB5                 mov     eax, [ebp+hdc]
.text$mn:00001DB8                 push    eax             ; hdc
.text$mn:00001DB9                 call    dword ptr ds:__imp__SetTextColor@8 ; SetTextColor(x,x)
.text$mn:00001DBF                 jmp     short loc_1DD3
.text$mn:00001DC1 ; ---------------------------------------------------------------------------
.text$mn:00001DC1
.text$mn:00001DC1 loc_1DC1:                               ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+B8j
.text$mn:00001DC1                 push    0Fh             ; nIndex
.text$mn:00001DC3                 call    dword ptr ds:__imp__GetSysColor@4 ; GetSysColor(x)
.text$mn:00001DC9                 push    eax             ; color
.text$mn:00001DCA                 call    dword ptr ds:__imp__CreateSolidBrush@4 ; CreateSolidBrush(x)
.text$mn:00001DD0                 mov     [ebp+hbr], eax
.text$mn:00001DD3
.text$mn:00001DD3 loc_1DD3:                               ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+DFj
.text$mn:00001DD3                 mov     ecx, [ebp+var_1C]
.text$mn:00001DD6                 cmp     dword ptr [ecx+34h], 1
.text$mn:00001DDA                 jnz     loc_1F48
.text$mn:00001DE0                 mov     edx, [ebp+var_1C]
.text$mn:00001DE3                 cmp     dword ptr [edx+20h], 1
.text$mn:00001DE7                 jnz     short loc_1E12
.text$mn:00001DE9                 mov     eax, [ebp+hbr]
.text$mn:00001DEC                 push    eax             ; hbr
.text$mn:00001DED                 lea     ecx, [ebp+rc]
.text$mn:00001DF0                 push    ecx             ; lprc
.text$mn:00001DF1                 mov     edx, [ebp+hdc]
.text$mn:00001DF4                 push    edx             ; hDC
.text$mn:00001DF5                 call    dword ptr ds:__imp__FillRect@12 ; FillRect(x,x,x)
.text$mn:00001DFB                 mov     eax, [ebp+rc.right]
.text$mn:00001DFE                 sub     eax, 1
.text$mn:00001E01                 mov     [ebp+rc.right], eax
.text$mn:00001E04                 mov     ecx, [ebp+rc.bottom]
.text$mn:00001E07                 sub     ecx, 1
.text$mn:00001E0A                 mov     [ebp+rc.bottom], ecx
.text$mn:00001E0D                 jmp     loc_1E92
.text$mn:00001E12 ; ---------------------------------------------------------------------------
.text$mn:00001E12
.text$mn:00001E12 loc_1E12:                               ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+107j
.text$mn:00001E12                 mov     edx, [ebp+rc.right]
.text$mn:00001E15                 sub     edx, 1
.text$mn:00001E18                 mov     [ebp+rc.right], edx
.text$mn:00001E1B                 mov     eax, [ebp+rc.bottom]
.text$mn:00001E1E                 sub     eax, 1
.text$mn:00001E21                 mov     [ebp+rc.bottom], eax
.text$mn:00001E24                 mov     ecx, [ebp+hbr]
.text$mn:00001E27                 push    ecx             ; hbr
.text$mn:00001E28                 lea     edx, [ebp+rc]
.text$mn:00001E2B                 push    edx             ; lprc
.text$mn:00001E2C                 mov     eax, [ebp+hdc]
.text$mn:00001E2F                 push    eax             ; hDC
.text$mn:00001E30                 call    dword ptr ds:__imp__FillRect@12 ; FillRect(x,x,x)
.text$mn:00001E36                 push    0               ; lppt
.text$mn:00001E38                 mov     ecx, [ebp+rc.top]
.text$mn:00001E3B                 push    ecx             ; y
.text$mn:00001E3C                 mov     edx, [ebp+rc.left]
.text$mn:00001E3F                 push    edx             ; x
.text$mn:00001E40                 mov     eax, [ebp+hdc]
.text$mn:00001E43                 push    eax             ; hdc
.text$mn:00001E44                 call    dword ptr ds:__imp__MoveToEx@16 ; MoveToEx(x,x,x,x)
.text$mn:00001E4A                 mov     ecx, [ebp+rc.top]
.text$mn:00001E4D                 push    ecx             ; y
.text$mn:00001E4E                 mov     edx, [ebp+rc.right]
.text$mn:00001E51                 push    edx             ; x
.text$mn:00001E52                 mov     eax, [ebp+hdc]
.text$mn:00001E55                 push    eax             ; hdc
.text$mn:00001E56                 call    dword ptr ds:__imp__LineTo@12 ; LineTo(x,x,x)
.text$mn:00001E5C                 mov     ecx, [ebp+rc.bottom]
.text$mn:00001E5F                 push    ecx             ; y
.text$mn:00001E60                 mov     edx, [ebp+rc.right]
.text$mn:00001E63                 push    edx             ; x
.text$mn:00001E64                 mov     eax, [ebp+hdc]
.text$mn:00001E67                 push    eax             ; hdc
.text$mn:00001E68                 call    dword ptr ds:__imp__LineTo@12 ; LineTo(x,x,x)
.text$mn:00001E6E                 mov     ecx, [ebp+rc.bottom]
.text$mn:00001E71                 push    ecx             ; y
.text$mn:00001E72                 mov     edx, [ebp+rc.left]
.text$mn:00001E75                 push    edx             ; x
.text$mn:00001E76                 mov     eax, [ebp+hdc]
.text$mn:00001E79                 push    eax             ; hdc
.text$mn:00001E7A                 call    dword ptr ds:__imp__LineTo@12 ; LineTo(x,x,x)
.text$mn:00001E80                 mov     ecx, [ebp+rc.top]
.text$mn:00001E83                 push    ecx             ; y
.text$mn:00001E84                 mov     edx, [ebp+rc.left]
.text$mn:00001E87                 push    edx             ; x
.text$mn:00001E88                 mov     eax, [ebp+hdc]
.text$mn:00001E8B                 push    eax             ; hdc
.text$mn:00001E8C                 call    dword ptr ds:__imp__LineTo@12 ; LineTo(x,x,x)
.text$mn:00001E92
.text$mn:00001E92 loc_1E92:                               ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+12Dj
.text$mn:00001E92                 mov     ecx, [ebp+rc.left]
.text$mn:00001E95                 add     ecx, 2
.text$mn:00001E98                 mov     [ebp+rc.left], ecx
.text$mn:00001E9B                 mov     edx, [ebp+rc.top]
.text$mn:00001E9E                 add     edx, 1
.text$mn:00001EA1                 mov     [ebp+rc.top], edx
.text$mn:00001EA4                 mov     eax, [ebp+rc.right]
.text$mn:00001EA7                 sub     eax, 10h
.text$mn:00001EAA                 mov     [ebp+rc.right], eax
.text$mn:00001EAD                 mov     ecx, [ebp+var_1C]
.text$mn:00001EB0                 mov     edx, [ecx+30h]
.text$mn:00001EB3                 push    edx             ; h
.text$mn:00001EB4                 mov     eax, [ebp+hdc]
.text$mn:00001EB7                 push    eax             ; hdc
.text$mn:00001EB8                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text$mn:00001EBE                 mov     [ebp+h], eax
.text$mn:00001EC1                 push    8824h           ; format
.text$mn:00001EC6                 lea     ecx, [ebp+rc]
.text$mn:00001EC9                 push    ecx             ; lprc
.text$mn:00001ECA                 mov     edx, [ebp+cchText]
.text$mn:00001ECD                 push    edx             ; cchText
.text$mn:00001ECE                 mov     ecx, [ebp+var_1C]
.text$mn:00001ED1                 add     ecx, 38h ; '8'
.text$mn:00001ED4                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001ED9                 push    eax             ; lpchText
.text$mn:00001EDA                 mov     eax, [ebp+hdc]
.text$mn:00001EDD                 push    eax             ; hdc
.text$mn:00001EDE                 call    dword ptr ds:__imp__DrawTextW@20 ; DrawTextW(x,x,x,x,x)
.text$mn:00001EE4                 mov     [ebp+psizl._cx], 0
.text$mn:00001EEB                 xor     ecx, ecx
.text$mn:00001EED                 mov     [ebp+psizl.cy], ecx
.text$mn:00001EF0                 lea     edx, [ebp+psizl]
.text$mn:00001EF3                 push    edx             ; psizl
.text$mn:00001EF4                 mov     eax, [ebp+cchText]
.text$mn:00001EF7                 push    eax             ; c
.text$mn:00001EF8                 mov     ecx, [ebp+var_1C]
.text$mn:00001EFB                 add     ecx, 38h ; '8'
.text$mn:00001EFE                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001F03                 push    eax             ; lpString
.text$mn:00001F04                 mov     ecx, [ebp+hdc]
.text$mn:00001F07                 push    ecx             ; hdc
.text$mn:00001F08                 call    dword ptr ds:__imp__GetTextExtentPoint32W@16 ; GetTextExtentPoint32W(x,x,x,x)
.text$mn:00001F0E                 mov     edx, [ebp+rc.right]
.text$mn:00001F11                 sub     edx, [ebp+rc.left]
.text$mn:00001F14                 cmp     edx, [ebp+psizl._cx]
.text$mn:00001F17                 jge     short loc_1F22
.text$mn:00001F19                 mov     [ebp+var_38], 1
.text$mn:00001F20                 jmp     short loc_1F29
.text$mn:00001F22 ; ---------------------------------------------------------------------------
.text$mn:00001F22
.text$mn:00001F22 loc_1F22:                               ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+237j
.text$mn:00001F22                 mov     [ebp+var_38], 0
.text$mn:00001F29
.text$mn:00001F29 loc_1F29:                               ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+240j
.text$mn:00001F29                 mov     eax, [ebp+var_1C]
.text$mn:00001F2C                 mov     ecx, [ebp+var_38]
.text$mn:00001F2F                 mov     [eax+90h], ecx
.text$mn:00001F35                 mov     edx, [ebp+h]
.text$mn:00001F38                 push    edx             ; h
.text$mn:00001F39                 mov     eax, [ebp+hdc]
.text$mn:00001F3C                 push    eax             ; hdc
.text$mn:00001F3D                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text$mn:00001F43                 jmp     loc_20E9
.text$mn:00001F48 ; ---------------------------------------------------------------------------
.text$mn:00001F48
.text$mn:00001F48 loc_1F48:                               ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+FAj
.text$mn:00001F48                 mov     ecx, [ebp+var_1C]
.text$mn:00001F4B                 cmp     dword ptr [ecx+20h], 1
.text$mn:00001F4F                 jnz     short loc_1F7A
.text$mn:00001F51                 mov     edx, [ebp+hbr]
.text$mn:00001F54                 push    edx             ; hbr
.text$mn:00001F55                 lea     eax, [ebp+rc]
.text$mn:00001F58                 push    eax             ; lprc
.text$mn:00001F59                 mov     ecx, [ebp+hdc]
.text$mn:00001F5C                 push    ecx             ; hDC
.text$mn:00001F5D                 call    dword ptr ds:__imp__FillRect@12 ; FillRect(x,x,x)
.text$mn:00001F63                 mov     edx, [ebp+rc.right]
.text$mn:00001F66                 sub     edx, 1
.text$mn:00001F69                 mov     [ebp+rc.right], edx
.text$mn:00001F6C                 mov     eax, [ebp+rc.bottom]
.text$mn:00001F6F                 sub     eax, 1
.text$mn:00001F72                 mov     [ebp+rc.bottom], eax
.text$mn:00001F75                 jmp     loc_1FFA
.text$mn:00001F7A ; ---------------------------------------------------------------------------
.text$mn:00001F7A
.text$mn:00001F7A loc_1F7A:                               ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+26Fj
.text$mn:00001F7A                 mov     ecx, [ebp+rc.right]
.text$mn:00001F7D                 sub     ecx, 1
.text$mn:00001F80                 mov     [ebp+rc.right], ecx
.text$mn:00001F83                 mov     edx, [ebp+rc.bottom]
.text$mn:00001F86                 sub     edx, 1
.text$mn:00001F89                 mov     [ebp+rc.bottom], edx
.text$mn:00001F8C                 mov     eax, [ebp+hbr]
.text$mn:00001F8F                 push    eax             ; hbr
.text$mn:00001F90                 lea     ecx, [ebp+rc]
.text$mn:00001F93                 push    ecx             ; lprc
.text$mn:00001F94                 mov     edx, [ebp+hdc]
.text$mn:00001F97                 push    edx             ; hDC
.text$mn:00001F98                 call    dword ptr ds:__imp__FillRect@12 ; FillRect(x,x,x)
.text$mn:00001F9E                 push    0               ; lppt
.text$mn:00001FA0                 mov     eax, [ebp+rc.top]
.text$mn:00001FA3                 push    eax             ; y
.text$mn:00001FA4                 mov     ecx, [ebp+rc.left]
.text$mn:00001FA7                 push    ecx             ; x
.text$mn:00001FA8                 mov     edx, [ebp+hdc]
.text$mn:00001FAB                 push    edx             ; hdc
.text$mn:00001FAC                 call    dword ptr ds:__imp__MoveToEx@16 ; MoveToEx(x,x,x,x)
.text$mn:00001FB2                 mov     eax, [ebp+rc.top]
.text$mn:00001FB5                 push    eax             ; y
.text$mn:00001FB6                 mov     ecx, [ebp+rc.right]
.text$mn:00001FB9                 push    ecx             ; x
.text$mn:00001FBA                 mov     edx, [ebp+hdc]
.text$mn:00001FBD                 push    edx             ; hdc
.text$mn:00001FBE                 call    dword ptr ds:__imp__LineTo@12 ; LineTo(x,x,x)
.text$mn:00001FC4                 mov     eax, [ebp+rc.bottom]
.text$mn:00001FC7                 push    eax             ; y
.text$mn:00001FC8                 mov     ecx, [ebp+rc.right]
.text$mn:00001FCB                 push    ecx             ; x
.text$mn:00001FCC                 mov     edx, [ebp+hdc]
.text$mn:00001FCF                 push    edx             ; hdc
.text$mn:00001FD0                 call    dword ptr ds:__imp__LineTo@12 ; LineTo(x,x,x)
.text$mn:00001FD6                 mov     eax, [ebp+rc.bottom]
.text$mn:00001FD9                 push    eax             ; y
.text$mn:00001FDA                 mov     ecx, [ebp+rc.left]
.text$mn:00001FDD                 push    ecx             ; x
.text$mn:00001FDE                 mov     edx, [ebp+hdc]
.text$mn:00001FE1                 push    edx             ; hdc
.text$mn:00001FE2                 call    dword ptr ds:__imp__LineTo@12 ; LineTo(x,x,x)
.text$mn:00001FE8                 mov     eax, [ebp+rc.top]
.text$mn:00001FEB                 push    eax             ; y
.text$mn:00001FEC                 mov     ecx, [ebp+rc.left]
.text$mn:00001FEF                 push    ecx             ; x
.text$mn:00001FF0                 mov     edx, [ebp+hdc]
.text$mn:00001FF3                 push    edx             ; hdc
.text$mn:00001FF4                 call    dword ptr ds:__imp__LineTo@12 ; LineTo(x,x,x)
.text$mn:00001FFA
.text$mn:00001FFA loc_1FFA:                               ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+295j
.text$mn:00001FFA                 mov     eax, [ebp+rc.left]
.text$mn:00001FFD                 add     eax, 1
.text$mn:00002000                 mov     [ebp+rc.left], eax
.text$mn:00002003                 mov     ecx, [ebp+rc.top]
.text$mn:00002006                 add     ecx, 12h
.text$mn:00002009                 mov     [ebp+rc.top], ecx
.text$mn:0000200C                 mov     edx, [ebp+rc.bottom]
.text$mn:0000200F                 sub     edx, [ebp+rc.top]
.text$mn:00002012                 mov     [ebp+rc.right], edx
.text$mn:00002015                 mov     eax, [ebp+rc.bottom]
.text$mn:00002018                 add     eax, 0Eh
.text$mn:0000201B                 mov     [ebp+rc.bottom], eax
.text$mn:0000201E                 push    offset $SG124776 ; "MS Shell Dlg"
.text$mn:00002023                 push    10h             ; iPitchAndFamily
.text$mn:00002025                 push    0               ; iQuality
.text$mn:00002027                 push    0               ; iClipPrecision
.text$mn:00002029                 push    0               ; iOutPrecision
.text$mn:0000202B                 push    0               ; iCharSet
.text$mn:0000202D                 push    0               ; bStrikeOut
.text$mn:0000202F                 push    0               ; bUnderline
.text$mn:00002031                 push    0               ; bItalic
.text$mn:00002033                 push    190h            ; cWeight
.text$mn:00002038                 push    0               ; cOrientation
.text$mn:0000203A                 push    384h            ; cEscapement
.text$mn:0000203F                 push    0               ; cWidth
.text$mn:00002041                 push    0Ch             ; cHeight
.text$mn:00002043                 call    dword ptr ds:__imp__CreateFontW@56 ; CreateFontW(x,x,x,x,x,x,x,x,x,x,x,x,x,x)
.text$mn:00002049                 mov     [ebp+ho], eax
.text$mn:0000204C                 mov     ecx, [ebp+ho]
.text$mn:0000204F                 push    ecx             ; h
.text$mn:00002050                 mov     edx, [ebp+hdc]
.text$mn:00002053                 push    edx             ; hdc
.text$mn:00002054                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text$mn:0000205A                 mov     [ebp+h], eax
.text$mn:0000205D                 push    8828h           ; format
.text$mn:00002062                 lea     eax, [ebp+rc]
.text$mn:00002065                 push    eax             ; lprc
.text$mn:00002066                 mov     ecx, [ebp+cchText]
.text$mn:00002069                 push    ecx             ; cchText
.text$mn:0000206A                 mov     ecx, [ebp+var_1C]
.text$mn:0000206D                 add     ecx, 38h ; '8'
.text$mn:00002070                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002075                 push    eax             ; lpchText
.text$mn:00002076                 mov     edx, [ebp+hdc]
.text$mn:00002079                 push    edx             ; hdc
.text$mn:0000207A                 call    dword ptr ds:__imp__DrawTextW@20 ; DrawTextW(x,x,x,x,x)
.text$mn:00002080                 mov     [ebp+var_6C._cx], 0
.text$mn:00002087                 xor     eax, eax
.text$mn:00002089                 mov     [ebp+var_6C.cy], eax
.text$mn:0000208C                 lea     ecx, [ebp+var_6C]
.text$mn:0000208F                 push    ecx             ; psizl
.text$mn:00002090                 mov     edx, [ebp+cchText]
.text$mn:00002093                 push    edx             ; c
.text$mn:00002094                 mov     ecx, [ebp+var_1C]
.text$mn:00002097                 add     ecx, 38h ; '8'
.text$mn:0000209A                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000209F                 push    eax             ; lpString
.text$mn:000020A0                 mov     eax, [ebp+hdc]
.text$mn:000020A3                 push    eax             ; hdc
.text$mn:000020A4                 call    dword ptr ds:__imp__GetTextExtentPoint32W@16 ; GetTextExtentPoint32W(x,x,x,x)
.text$mn:000020AA                 mov     ecx, [ebp+rc.bottom]
.text$mn:000020AD                 sub     ecx, [ebp+rc.top]
.text$mn:000020B0                 cmp     ecx, [ebp+var_6C.cy]
.text$mn:000020B3                 jge     short loc_20BE
.text$mn:000020B5                 mov     [ebp+var_44], 1
.text$mn:000020BC                 jmp     short loc_20C5
.text$mn:000020BE ; ---------------------------------------------------------------------------
.text$mn:000020BE
.text$mn:000020BE loc_20BE:                               ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+3D3j
.text$mn:000020BE                 mov     [ebp+var_44], 0
.text$mn:000020C5
.text$mn:000020C5 loc_20C5:                               ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+3DCj
.text$mn:000020C5                 mov     edx, [ebp+var_1C]
.text$mn:000020C8                 mov     eax, [ebp+var_44]
.text$mn:000020CB                 mov     [edx+90h], eax
.text$mn:000020D1                 mov     ecx, [ebp+h]
.text$mn:000020D4                 push    ecx             ; h
.text$mn:000020D5                 mov     edx, [ebp+hdc]
.text$mn:000020D8                 push    edx             ; hdc
.text$mn:000020D9                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text$mn:000020DF                 mov     eax, [ebp+ho]
.text$mn:000020E2                 push    eax             ; ho
.text$mn:000020E3                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:000020E9
.text$mn:000020E9 loc_20E9:                               ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+263j
.text$mn:000020E9                 mov     ecx, [ebp+var_64]
.text$mn:000020EC                 push    ecx             ; ho
.text$mn:000020ED                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:000020F3                 mov     edx, [ebp+hbr]
.text$mn:000020F6                 push    edx             ; ho
.text$mn:000020F7                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:000020FD                 push    0               ; hdc
.text$mn:000020FF                 call    dword ptr ds:__imp__CreateCompatibleDC@4 ; CreateCompatibleDC(x)
.text$mn:00002105                 mov     [ebp+hdcSrc], eax
.text$mn:00002108                 mov     eax, [ebp+var_1C]
.text$mn:0000210B                 cmp     dword ptr [eax+5Ch], 1
.text$mn:0000210F                 jnz     short loc_2131
.text$mn:00002111                 mov     ecx, [ebp+var_1C]
.text$mn:00002114                 cmp     dword ptr [ecx+54h], 1
.text$mn:00002118                 jnz     short loc_2131
.text$mn:0000211A                 push    (offset $SG124608+1) ; lpBitmapName
.text$mn:0000211F                 mov     edx, [ebp+var_1C]
.text$mn:00002122                 mov     eax, [edx+4]
.text$mn:00002125                 push    eax             ; hInstance
.text$mn:00002126                 call    dword ptr ds:__imp__LoadBitmapW@8 ; LoadBitmapW(x,x)
.text$mn:0000212C                 mov     [ebp+var_28], eax
.text$mn:0000212F                 jmp     short loc_2146
.text$mn:00002131 ; ---------------------------------------------------------------------------
.text$mn:00002131
.text$mn:00002131 loc_2131:                               ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+42Fj
.text$mn:00002131                                         ; DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+438j
.text$mn:00002131                 push    (offset $SG124608+2) ; lpBitmapName
.text$mn:00002136                 mov     ecx, [ebp+var_1C]
.text$mn:00002139                 mov     edx, [ecx+4]
.text$mn:0000213C                 push    edx             ; hInstance
.text$mn:0000213D                 call    dword ptr ds:__imp__LoadBitmapW@8 ; LoadBitmapW(x,x)
.text$mn:00002143                 mov     [ebp+var_28], eax
.text$mn:00002146
.text$mn:00002146 loc_2146:                               ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+44Fj
.text$mn:00002146                 lea     eax, [ebp+pv]
.text$mn:00002149                 push    eax             ; pv
.text$mn:0000214A                 push    18h             ; c
.text$mn:0000214C                 mov     ecx, [ebp+var_28]
.text$mn:0000214F                 push    ecx             ; h
.text$mn:00002150                 call    dword ptr ds:__imp__GetObjectW@12 ; GetObjectW(x,x,x)
.text$mn:00002156                 mov     edx, [ebp+var_28]
.text$mn:00002159                 push    edx             ; h
.text$mn:0000215A                 mov     eax, [ebp+hdcSrc]
.text$mn:0000215D                 push    eax             ; hdc
.text$mn:0000215E                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text$mn:00002164                 mov     [ebp+var_3C], eax
.text$mn:00002167                 mov     ecx, [ebp+cy]
.text$mn:0000216A                 push    ecx             ; cy
.text$mn:0000216B                 mov     edx, [ebp+var_58]
.text$mn:0000216E                 push    edx             ; cx
.text$mn:0000216F                 mov     eax, [ebp+hdcSrc]
.text$mn:00002172                 push    eax             ; hdc
.text$mn:00002173                 call    dword ptr ds:__imp__CreateCompatibleBitmap@12 ; CreateCompatibleBitmap(x,x,x)
.text$mn:00002179                 mov     [ebp+var_34], eax
.text$mn:0000217C                 mov     ecx, [ebp+arg_0]
.text$mn:0000217F                 add     ecx, 1Ch
.text$mn:00002182                 mov     edx, [ecx]
.text$mn:00002184                 mov     [ebp+rc.left], edx
.text$mn:00002187                 mov     eax, [ecx+4]
.text$mn:0000218A                 mov     [ebp+rc.top], eax
.text$mn:0000218D                 mov     edx, [ecx+8]
.text$mn:00002190                 mov     [ebp+rc.right], edx
.text$mn:00002193                 mov     eax, [ecx+0Ch]
.text$mn:00002196                 mov     [ebp+rc.bottom], eax
.text$mn:00002199                 mov     ecx, [ebp+var_34]
.text$mn:0000219C                 push    ecx             ; h
.text$mn:0000219D                 mov     edx, [ebp+hdc]
.text$mn:000021A0                 push    edx             ; hdc
.text$mn:000021A1                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text$mn:000021A7                 mov     eax, [ebp+var_1C]
.text$mn:000021AA                 cmp     dword ptr [eax+34h], 1
.text$mn:000021AE                 jnz     short loc_21DD
.text$mn:000021B0                 push    0CC0020h        ; rop
.text$mn:000021B5                 push    0               ; y1
.text$mn:000021B7                 push    0               ; x1
.text$mn:000021B9                 mov     ecx, [ebp+hdcSrc]
.text$mn:000021BC                 push    ecx             ; hdcSrc
.text$mn:000021BD                 mov     edx, [ebp+cy]
.text$mn:000021C0                 push    edx             ; cy
.text$mn:000021C1                 mov     eax, [ebp+var_58]
.text$mn:000021C4                 push    eax             ; cx
.text$mn:000021C5                 push    3               ; y
.text$mn:000021C7                 mov     ecx, [ebp+rc.right]
.text$mn:000021CA                 sub     ecx, [ebp+var_58]
.text$mn:000021CD                 sub     ecx, 3
.text$mn:000021D0                 push    ecx             ; x
.text$mn:000021D1                 mov     edx, [ebp+hdc]
.text$mn:000021D4                 push    edx             ; hdc
.text$mn:000021D5                 call    dword ptr ds:__imp__BitBlt@36 ; BitBlt(x,x,x,x,x,x,x,x,x)
.text$mn:000021DB                 jmp     short loc_2200
.text$mn:000021DD ; ---------------------------------------------------------------------------
.text$mn:000021DD
.text$mn:000021DD loc_21DD:                               ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+4CEj
.text$mn:000021DD                 push    0CC0020h        ; rop
.text$mn:000021E2                 push    0               ; y1
.text$mn:000021E4                 push    0               ; x1
.text$mn:000021E6                 mov     eax, [ebp+hdcSrc]
.text$mn:000021E9                 push    eax             ; hdcSrc
.text$mn:000021EA                 mov     ecx, [ebp+cy]
.text$mn:000021ED                 push    ecx             ; cy
.text$mn:000021EE                 mov     edx, [ebp+var_58]
.text$mn:000021F1                 push    edx             ; cx
.text$mn:000021F2                 push    3               ; y
.text$mn:000021F4                 push    3               ; x
.text$mn:000021F6                 mov     eax, [ebp+hdc]
.text$mn:000021F9                 push    eax             ; hdc
.text$mn:000021FA                 call    dword ptr ds:__imp__BitBlt@36 ; BitBlt(x,x,x,x,x,x,x,x,x)
.text$mn:00002200
.text$mn:00002200 loc_2200:                               ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+4FBj
.text$mn:00002200                 mov     ecx, [ebp+var_3C]
.text$mn:00002203                 push    ecx             ; h
.text$mn:00002204                 mov     edx, [ebp+hdcSrc]
.text$mn:00002207                 push    edx             ; hdc
.text$mn:00002208                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text$mn:0000220E                 mov     eax, [ebp+var_28]
.text$mn:00002211                 push    eax             ; ho
.text$mn:00002212                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:00002218                 mov     ecx, [ebp+var_34]
.text$mn:0000221B                 push    ecx             ; ho
.text$mn:0000221C                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:00002222                 mov     edx, [ebp+hdcSrc]
.text$mn:00002225                 push    edx             ; hdc
.text$mn:00002226                 call    dword ptr ds:__imp__DeleteDC@4 ; DeleteDC(x)
.text$mn:0000222C                 mov     eax, [ebp+nSavedDC]
.text$mn:0000222F                 push    eax             ; nSavedDC
.text$mn:00002230                 mov     ecx, [ebp+hdc]
.text$mn:00002233                 push    ecx             ; hdc
.text$mn:00002234                 call    dword ptr ds:__imp__RestoreDC@8 ; RestoreDC(x,x)
.text$mn:0000223A                 mov     ecx, [ebp+var_4]
.text$mn:0000223D                 xor     ecx, ebp
.text$mn:0000223F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002244                 mov     esp, ebp
.text$mn:00002246                 pop     ebp
.text$mn:00002247                 retn    4
.text$mn:00002247 ?drawCaptionItem@DockingCont@@IAEXPAUtagDRAWITEMSTRUCT@@@Z endp
.text$mn:00002247
.text$mn:00002247 ; ---------------------------------------------------------------------------
.text$mn:0000224A                 align 10h
.text$mn:00002250
.text$mn:00002250 ; =============== S U B R O U T I N E =======================================
.text$mn:00002250
.text$mn:00002250 ; Attributes: bp-based frame
.text$mn:00002250
.text$mn:00002250 ; void __thiscall DockingCont::drawTabItem(DockingCont *this, struct tagDRAWITEMSTRUCT *)
.text$mn:00002250                 public ?drawTabItem@DockingCont@@IAEXPAUtagDRAWITEMSTRUCT@@@Z
.text$mn:00002250 ?drawTabItem@DockingCont@@IAEXPAUtagDRAWITEMSTRUCT@@@Z proc near
.text$mn:00002250                                         ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+179p
.text$mn:00002250
.text$mn:00002250 y               = dword ptr -98h
.text$mn:00002250 cchText         = dword ptr -94h
.text$mn:00002250 lParam          = dword ptr -90h
.text$mn:00002250 var_8C          = dword ptr -8Ch
.text$mn:00002250 var_88          = dword ptr -88h
.text$mn:00002250 var_84          = dword ptr -84h
.text$mn:00002250 var_80          = dword ptr -80h
.text$mn:00002250 var_7C          = dword ptr -7Ch
.text$mn:00002250 var_78          = dword ptr -78h
.text$mn:00002250 color           = dword ptr -74h
.text$mn:00002250 lpchText        = dword ptr -70h
.text$mn:00002250 nSavedDC        = dword ptr -6Ch
.text$mn:00002250 wParam          = dword ptr -68h
.text$mn:00002250 var_64          = dword ptr -64h
.text$mn:00002250 var_60          = dword ptr -60h
.text$mn:00002250 himl            = dword ptr -5Ch
.text$mn:00002250 i               = dword ptr -58h
.text$mn:00002250 hbr             = dword ptr -54h
.text$mn:00002250 var_50          = dword ptr -50h
.text$mn:00002250 hdc             = dword ptr -4Ch
.text$mn:00002250 var_45          = byte ptr -45h
.text$mn:00002250 pImageInfo      = IMAGEINFO ptr -44h
.text$mn:00002250 var_24          = RECT ptr -24h
.text$mn:00002250 rc              = RECT ptr -14h
.text$mn:00002250 var_4           = dword ptr -4
.text$mn:00002250 arg_0           = dword ptr  8
.text$mn:00002250
.text$mn:00002250                 push    ebp
.text$mn:00002251                 mov     ebp, esp
.text$mn:00002253                 sub     esp, 98h
.text$mn:00002259                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000225E                 xor     eax, ebp
.text$mn:00002260                 mov     [ebp+var_4], eax
.text$mn:00002263                 mov     [ebp+var_50], ecx
.text$mn:00002266                 mov     [ebp+lParam], 0
.text$mn:00002270                 xor     eax, eax
.text$mn:00002272                 mov     [ebp+var_8C], eax
.text$mn:00002278                 mov     [ebp+var_88], eax
.text$mn:0000227E                 mov     [ebp+var_84], eax
.text$mn:00002284                 mov     [ebp+var_80], eax
.text$mn:00002287                 mov     [ebp+var_7C], eax
.text$mn:0000228A                 mov     [ebp+var_78], eax
.text$mn:0000228D                 mov     ecx, [ebp+arg_0]
.text$mn:00002290                 add     ecx, 1Ch
.text$mn:00002293                 mov     edx, [ecx]
.text$mn:00002295                 mov     [ebp+rc.left], edx
.text$mn:00002298                 mov     eax, [ecx+4]
.text$mn:0000229B                 mov     [ebp+rc.top], eax
.text$mn:0000229E                 mov     edx, [ecx+8]
.text$mn:000022A1                 mov     [ebp+rc.right], edx
.text$mn:000022A4                 mov     eax, [ecx+0Ch]
.text$mn:000022A7                 mov     [ebp+rc.bottom], eax
.text$mn:000022AA                 mov     ecx, [ebp+arg_0]
.text$mn:000022AD                 mov     edx, [ecx+8]
.text$mn:000022B0                 mov     [ebp+wParam], edx
.text$mn:000022B3                 mov     ecx, [ebp+var_50] ; this
.text$mn:000022B6                 call    ?getActiveTb@DockingCont@@QAEHXZ ; DockingCont::getActiveTb(void)
.text$mn:000022BB                 cmp     [ebp+wParam], eax
.text$mn:000022BE                 jnz     short loc_22C9
.text$mn:000022C0                 mov     [ebp+var_64], 1
.text$mn:000022C7                 jmp     short loc_22D0
.text$mn:000022C9 ; ---------------------------------------------------------------------------
.text$mn:000022C9
.text$mn:000022C9 loc_22C9:                               ; CODE XREF: DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+6Ej
.text$mn:000022C9                 mov     [ebp+var_64], 0
.text$mn:000022D0
.text$mn:000022D0 loc_22D0:                               ; CODE XREF: DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+77j
.text$mn:000022D0                 mov     al, byte ptr [ebp+var_64]
.text$mn:000022D3                 mov     [ebp+var_45], al
.text$mn:000022D6                 mov     [ebp+lParam], 8
.text$mn:000022E0                 lea     ecx, [ebp+lParam]
.text$mn:000022E6                 push    ecx             ; lParam
.text$mn:000022E7                 mov     edx, [ebp+wParam]
.text$mn:000022EA                 push    edx             ; wParam
.text$mn:000022EB                 push    133Ch           ; Msg
.text$mn:000022F0                 mov     eax, [ebp+var_50]
.text$mn:000022F3                 mov     ecx, [eax+2Ch]
.text$mn:000022F6                 push    ecx             ; hWnd
.text$mn:000022F7                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000022FD                 cmp     [ebp+var_78], 0
.text$mn:00002301                 jnz     short loc_2308
.text$mn:00002303                 jmp     loc_2531
.text$mn:00002308 ; ---------------------------------------------------------------------------
.text$mn:00002308
.text$mn:00002308 loc_2308:                               ; CODE XREF: DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+B1j
.text$mn:00002308                 mov     edx, [ebp+var_78]
.text$mn:0000230B                 mov     eax, [edx+4]
.text$mn:0000230E                 mov     [ebp+lpchText], eax
.text$mn:00002311                 mov     ecx, [ebp+var_78]
.text$mn:00002314                 mov     edx, [ecx+4]
.text$mn:00002317                 push    edx             ; lpString
.text$mn:00002318                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:0000231E                 mov     [ebp+cchText], eax
.text$mn:00002324                 mov     eax, [ebp+arg_0]
.text$mn:00002327                 mov     ecx, [eax+18h]
.text$mn:0000232A                 mov     [ebp+hdc], ecx
.text$mn:0000232D                 mov     edx, [ebp+hdc]
.text$mn:00002330                 push    edx             ; hdc
.text$mn:00002331                 call    dword ptr ds:__imp__SaveDC@4 ; SaveDC(x)
.text$mn:00002337                 mov     [ebp+nSavedDC], eax
.text$mn:0000233A                 push    2Eh ; '.'       ; nIndex
.text$mn:0000233C                 call    dword ptr ds:__imp__GetSystemMetrics@4 ; GetSystemMetrics(x)
.text$mn:00002342                 add     eax, [ebp+rc.top]
.text$mn:00002345                 mov     [ebp+rc.top], eax
.text$mn:00002348                 push    1               ; mode
.text$mn:0000234A                 mov     eax, [ebp+hdc]
.text$mn:0000234D                 push    eax             ; hdc
.text$mn:0000234E                 call    dword ptr ds:__imp__SetBkMode@8 ; SetBkMode(x,x)
.text$mn:00002354                 push    0Fh             ; nIndex
.text$mn:00002356                 call    dword ptr ds:__imp__GetSysColor@4 ; GetSysColor(x)
.text$mn:0000235C                 push    eax             ; color
.text$mn:0000235D                 call    dword ptr ds:__imp__CreateSolidBrush@4 ; CreateSolidBrush(x)
.text$mn:00002363                 mov     [ebp+hbr], eax
.text$mn:00002366                 mov     ecx, [ebp+hbr]
.text$mn:00002369                 push    ecx             ; hbr
.text$mn:0000236A                 lea     edx, [ebp+rc]
.text$mn:0000236D                 push    edx             ; lprc
.text$mn:0000236E                 mov     eax, [ebp+hdc]
.text$mn:00002371                 push    eax             ; hDC
.text$mn:00002372                 call    dword ptr ds:__imp__FillRect@12 ; FillRect(x,x,x)
.text$mn:00002378                 mov     ecx, [ebp+hbr]
.text$mn:0000237B                 push    ecx             ; ho
.text$mn:0000237C                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:00002382                 mov     edx, [ebp+var_50]
.text$mn:00002385                 cmp     dword ptr [edx+70h], 0
.text$mn:00002389                 jz      short loc_23E2
.text$mn:0000238B                 movzx   eax, [ebp+var_45]
.text$mn:0000238F                 test    eax, eax
.text$mn:00002391                 jz      short loc_23E2
.text$mn:00002393                 mov     ecx, [ebp+rc.left]
.text$mn:00002396                 mov     [ebp+var_24.left], ecx
.text$mn:00002399                 mov     edx, [ebp+rc.top]
.text$mn:0000239C                 mov     [ebp+var_24.top], edx
.text$mn:0000239F                 mov     eax, [ebp+rc.right]
.text$mn:000023A2                 mov     [ebp+var_24.right], eax
.text$mn:000023A5                 mov     ecx, [ebp+rc.bottom]
.text$mn:000023A8                 mov     [ebp+var_24.bottom], ecx
.text$mn:000023AB                 mov     edx, [ebp+rc.bottom]
.text$mn:000023AE                 mov     eax, [ebp+var_24.top]
.text$mn:000023B1                 lea     ecx, [eax+edx-4]
.text$mn:000023B5                 mov     [ebp+var_24.top], ecx
.text$mn:000023B8                 push    3CAAFAh         ; color
.text$mn:000023BD                 call    dword ptr ds:__imp__CreateSolidBrush@4 ; CreateSolidBrush(x)
.text$mn:000023C3                 mov     [ebp+hbr], eax
.text$mn:000023C6                 mov     edx, [ebp+hbr]
.text$mn:000023C9                 push    edx             ; hbr
.text$mn:000023CA                 lea     eax, [ebp+var_24]
.text$mn:000023CD                 push    eax             ; lprc
.text$mn:000023CE                 mov     ecx, [ebp+hdc]
.text$mn:000023D1                 push    ecx             ; hDC
.text$mn:000023D2                 call    dword ptr ds:__imp__FillRect@12 ; FillRect(x,x,x)
.text$mn:000023D8                 mov     edx, [ebp+hbr]
.text$mn:000023DB                 push    edx             ; ho
.text$mn:000023DC                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:000023E2
.text$mn:000023E2 loc_23E2:                               ; CODE XREF: DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+139j
.text$mn:000023E2                                         ; DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+141j
.text$mn:000023E2                 mov     eax, [ebp+var_78]
.text$mn:000023E5                 mov     ecx, [eax+0Ch]
.text$mn:000023E8                 and     ecx, 1
.text$mn:000023EB                 jz      loc_24C7
.text$mn:000023F1                 push    0               ; lParam
.text$mn:000023F3                 push    0               ; wParam
.text$mn:000023F5                 push    5008h           ; Msg
.text$mn:000023FA                 mov     edx, [ebp+var_50]
.text$mn:000023FD                 mov     eax, [edx+8]
.text$mn:00002400                 push    eax             ; hWnd
.text$mn:00002401                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002407                 mov     [ebp+himl], eax
.text$mn:0000240A                 mov     ecx, [ebp+var_78]
.text$mn:0000240D                 mov     edx, [ecx]
.text$mn:0000240F                 push    edx             ; lParam
.text$mn:00002410                 push    0               ; wParam
.text$mn:00002412                 push    5009h           ; Msg
.text$mn:00002417                 mov     eax, [ebp+var_50]
.text$mn:0000241A                 mov     ecx, [eax+8]
.text$mn:0000241D                 push    ecx             ; hWnd
.text$mn:0000241E                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002424                 mov     [ebp+i], eax
.text$mn:00002427                 cmp     [ebp+himl], 0
.text$mn:0000242B                 jz      loc_24C7
.text$mn:00002431                 cmp     [ebp+i], 0
.text$mn:00002435                 jl      loc_24C7
.text$mn:0000243B                 mov     [ebp+pImageInfo.hbmImage], 0
.text$mn:00002442                 xor     edx, edx
.text$mn:00002444                 mov     [ebp+pImageInfo.hbmMask], edx
.text$mn:00002447                 mov     [ebp+pImageInfo.Unused1], edx
.text$mn:0000244A                 mov     [ebp+pImageInfo.Unused2], edx
.text$mn:0000244D                 mov     [ebp+pImageInfo.rcImage.left], edx
.text$mn:00002450                 mov     [ebp+pImageInfo.rcImage.top], edx
.text$mn:00002453                 mov     [ebp+pImageInfo.rcImage.right], edx
.text$mn:00002456                 mov     [ebp+pImageInfo.rcImage.bottom], edx
.text$mn:00002459                 lea     eax, [ebp+pImageInfo.rcImage]
.text$mn:0000245C                 mov     [ebp+var_60], eax
.text$mn:0000245F                 lea     ecx, [ebp+pImageInfo]
.text$mn:00002462                 push    ecx             ; pImageInfo
.text$mn:00002463                 mov     edx, [ebp+i]
.text$mn:00002466                 push    edx             ; i
.text$mn:00002467                 mov     eax, [ebp+himl]
.text$mn:0000246A                 push    eax             ; himl
.text$mn:0000246B                 call    dword ptr ds:__imp__ImageList_GetImageInfo@12 ; ImageList_GetImageInfo(x,x,x)
.text$mn:00002471                 push    7               ; int
.text$mn:00002473                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00002478                 add     eax, 0Ch
.text$mn:0000247B                 mov     ecx, eax        ; this
.text$mn:0000247D                 call    ?scaleY@DPIManager@@QAEHH@Z ; DPIManager::scaleY(int)
.text$mn:00002482                 mov     [ebp+y], eax
.text$mn:00002488                 push    0               ; fStyle
.text$mn:0000248A                 mov     ecx, [ebp+y]
.text$mn:00002490                 push    ecx             ; y
.text$mn:00002491                 mov     edx, [ebp+rc.left]
.text$mn:00002494                 add     edx, 3
.text$mn:00002497                 push    edx             ; x
.text$mn:00002498                 mov     eax, [ebp+hdc]
.text$mn:0000249B                 push    eax             ; hdcDst
.text$mn:0000249C                 mov     ecx, [ebp+i]
.text$mn:0000249F                 push    ecx             ; i
.text$mn:000024A0                 mov     edx, [ebp+himl]
.text$mn:000024A3                 push    edx             ; himl
.text$mn:000024A4                 call    dword ptr ds:__imp__ImageList_Draw@24 ; ImageList_Draw(x,x,x,x,x,x)
.text$mn:000024AA                 movzx   eax, [ebp+var_45]
.text$mn:000024AE                 test    eax, eax
.text$mn:000024B0                 jz      short loc_24C7
.text$mn:000024B2                 mov     ecx, [ebp+var_60]
.text$mn:000024B5                 mov     edx, [ebp+var_60]
.text$mn:000024B8                 mov     eax, [ecx+8]
.text$mn:000024BB                 sub     eax, [edx]
.text$mn:000024BD                 mov     ecx, [ebp+rc.left]
.text$mn:000024C0                 lea     edx, [ecx+eax+5]
.text$mn:000024C4                 mov     [ebp+rc.left], edx
.text$mn:000024C7
.text$mn:000024C7 loc_24C7:                               ; CODE XREF: DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+19Bj
.text$mn:000024C7                                         ; DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+1DBj ...
.text$mn:000024C7                 movzx   eax, [ebp+var_45]
.text$mn:000024CB                 test    eax, eax
.text$mn:000024CD                 jz      short loc_2523
.text$mn:000024CF                 mov     [ebp+color], 0
.text$mn:000024D6                 mov     ecx, [ebp+color]
.text$mn:000024D9                 push    ecx             ; color
.text$mn:000024DA                 mov     edx, [ebp+hdc]
.text$mn:000024DD                 push    edx             ; hdc
.text$mn:000024DE                 call    dword ptr ds:__imp__SetTextColor@8 ; SetTextColor(x,x)
.text$mn:000024E4                 push    2Eh ; '.'       ; nIndex
.text$mn:000024E6                 call    dword ptr ds:__imp__GetSystemMetrics@4 ; GetSystemMetrics(x)
.text$mn:000024EC                 mov     ecx, [ebp+rc.top]
.text$mn:000024EF                 sub     ecx, eax
.text$mn:000024F1                 mov     [ebp+rc.top], ecx
.text$mn:000024F4                 mov     edx, [ebp+var_50]
.text$mn:000024F7                 mov     eax, [edx+30h]
.text$mn:000024FA                 push    eax             ; h
.text$mn:000024FB                 mov     ecx, [ebp+hdc]
.text$mn:000024FE                 push    ecx             ; hdc
.text$mn:000024FF                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text$mn:00002505                 push    824h            ; format
.text$mn:0000250A                 lea     edx, [ebp+rc]
.text$mn:0000250D                 push    edx             ; lprc
.text$mn:0000250E                 mov     eax, [ebp+cchText]
.text$mn:00002514                 push    eax             ; cchText
.text$mn:00002515                 mov     ecx, [ebp+lpchText]
.text$mn:00002518                 push    ecx             ; lpchText
.text$mn:00002519                 mov     edx, [ebp+hdc]
.text$mn:0000251C                 push    edx             ; hdc
.text$mn:0000251D                 call    dword ptr ds:__imp__DrawTextW@20 ; DrawTextW(x,x,x,x,x)
.text$mn:00002523
.text$mn:00002523 loc_2523:                               ; CODE XREF: DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+27Dj
.text$mn:00002523                 mov     eax, [ebp+nSavedDC]
.text$mn:00002526                 push    eax             ; nSavedDC
.text$mn:00002527                 mov     ecx, [ebp+hdc]
.text$mn:0000252A                 push    ecx             ; hdc
.text$mn:0000252B                 call    dword ptr ds:__imp__RestoreDC@8 ; RestoreDC(x,x)
.text$mn:00002531
.text$mn:00002531 loc_2531:                               ; CODE XREF: DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+B3j
.text$mn:00002531                 mov     ecx, [ebp+var_4]
.text$mn:00002534                 xor     ecx, ebp
.text$mn:00002536                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000253B                 mov     esp, ebp
.text$mn:0000253D                 pop     ebp
.text$mn:0000253E                 retn    4
.text$mn:0000253E ?drawTabItem@DockingCont@@IAEXPAUtagDRAWITEMSTRUCT@@@Z endp
.text$mn:0000253E
.text$mn:0000253E ; ---------------------------------------------------------------------------
.text$mn:00002541                 align 10h
.text$mn:00002550
.text$mn:00002550 ; =============== S U B R O U T I N E =======================================
.text$mn:00002550
.text$mn:00002550 ; Attributes: bp-based frame
.text$mn:00002550
.text$mn:00002550 ; void __thiscall DockingCont::onSize(DockingCont *__hidden this)
.text$mn:00002550                 public ?onSize@DockingCont@@IAEXXZ
.text$mn:00002550 ?onSize@DockingCont@@IAEXXZ proc near   ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+15Cp
.text$mn:00002550                                         ; DockingCont::SelectTab(int)+2EBp ...
.text$mn:00002550
.text$mn:00002550 var_70          = dword ptr -70h
.text$mn:00002550 var_6C          = dword ptr -6Ch
.text$mn:00002550 var_68          = dword ptr -68h
.text$mn:00002550 lParam          = dword ptr -64h
.text$mn:00002550 var_60          = dword ptr -60h
.text$mn:00002550 var_5C          = dword ptr -5Ch
.text$mn:00002550 var_58          = dword ptr -58h
.text$mn:00002550 var_54          = dword ptr -54h
.text$mn:00002550 var_50          = dword ptr -50h
.text$mn:00002550 var_4C          = dword ptr -4Ch
.text$mn:00002550 var_48          = dword ptr -48h
.text$mn:00002550 var_44          = dword ptr -44h
.text$mn:00002550 var_40          = dword ptr -40h
.text$mn:00002550 var_3C          = dword ptr -3Ch
.text$mn:00002550 wParam          = dword ptr -38h
.text$mn:00002550 var_34          = dword ptr -34h
.text$mn:00002550 var_30          = dword ptr -30h
.text$mn:00002550 var_2C          = dword ptr -2Ch
.text$mn:00002550 var_28          = dword ptr -28h
.text$mn:00002550 X               = dword ptr -24h
.text$mn:00002550 Y               = dword ptr -20h
.text$mn:00002550 var_1C          = dword ptr -1Ch
.text$mn:00002550 cy              = dword ptr -18h
.text$mn:00002550 var_14          = dword ptr -14h
.text$mn:00002550 var_10          = dword ptr -10h
.text$mn:00002550 var_C           = dword ptr -0Ch
.text$mn:00002550 var_8           = dword ptr -8
.text$mn:00002550 var_4           = dword ptr -4
.text$mn:00002550
.text$mn:00002550                 push    ebp
.text$mn:00002551                 mov     ebp, esp
.text$mn:00002553                 sub     esp, 70h
.text$mn:00002556                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000255B                 xor     eax, ebp
.text$mn:0000255D                 mov     [ebp+var_4], eax
.text$mn:00002560                 mov     [ebp+var_28], ecx
.text$mn:00002563                 mov     [ebp+lParam], 0
.text$mn:0000256A                 xor     eax, eax
.text$mn:0000256C                 mov     [ebp+var_60], eax
.text$mn:0000256F                 mov     [ebp+var_5C], eax
.text$mn:00002572                 mov     [ebp+var_58], eax
.text$mn:00002575                 mov     [ebp+var_54], eax
.text$mn:00002578                 mov     [ebp+var_50], eax
.text$mn:0000257B                 mov     [ebp+var_4C], eax
.text$mn:0000257E                 mov     [ebp+X], 0
.text$mn:00002585                 xor     ecx, ecx
.text$mn:00002587                 mov     [ebp+Y], ecx
.text$mn:0000258A                 mov     [ebp+var_1C], ecx
.text$mn:0000258D                 mov     [ebp+cy], ecx
.text$mn:00002590                 mov     [ebp+var_14], 0
.text$mn:00002597                 xor     edx, edx
.text$mn:00002599                 mov     [ebp+var_10], edx
.text$mn:0000259C                 mov     [ebp+var_C], edx
.text$mn:0000259F                 mov     [ebp+var_8], edx
.text$mn:000025A2                 push    0               ; lParam
.text$mn:000025A4                 push    0               ; wParam
.text$mn:000025A6                 push    1304h           ; Msg
.text$mn:000025AB                 mov     eax, [ebp+var_28]
.text$mn:000025AE                 mov     ecx, [eax+2Ch]
.text$mn:000025B1                 push    ecx             ; hWnd
.text$mn:000025B2                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000025B8                 mov     [ebp+var_30], eax
.text$mn:000025BB                 mov     [ebp+var_3C], 0
.text$mn:000025C2                 lea     edx, [ebp+X]
.text$mn:000025C5                 push    edx
.text$mn:000025C6                 mov     eax, [ebp+var_28]
.text$mn:000025C9                 mov     edx, [eax]
.text$mn:000025CB                 mov     ecx, [ebp+var_28]
.text$mn:000025CE                 mov     eax, [edx+1Ch]
.text$mn:000025D1                 call    eax
.text$mn:000025D3                 cmp     [ebp+var_30], 1
.text$mn:000025D7                 jb      loc_290E
.text$mn:000025DD                 push    18h             ; int
.text$mn:000025DF                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:000025E4                 add     eax, 0Ch
.text$mn:000025E7                 mov     ecx, eax        ; this
.text$mn:000025E9                 call    ?scaleY@DPIManager@@QAEHH@Z ; DPIManager::scaleY(int)
.text$mn:000025EE                 mov     [ebp+var_2C], eax
.text$mn:000025F1                 mov     ecx, [ebp+var_28]
.text$mn:000025F4                 movzx   edx, byte ptr [ecx+24h]
.text$mn:000025F8                 test    edx, edx
.text$mn:000025FA                 jnz     loc_2750
.text$mn:00002600                 mov     eax, [ebp+var_28]
.text$mn:00002603                 cmp     dword ptr [eax+34h], 1
.text$mn:00002607                 jnz     short loc_263C
.text$mn:00002609                 push    14h             ; uFlags
.text$mn:0000260B                 push    12h             ; cy
.text$mn:0000260D                 mov     ecx, [ebp+var_1C]
.text$mn:00002610                 push    ecx             ; cx
.text$mn:00002611                 mov     edx, [ebp+Y]
.text$mn:00002614                 push    edx             ; Y
.text$mn:00002615                 mov     eax, [ebp+X]
.text$mn:00002618                 push    eax             ; X
.text$mn:00002619                 push    0               ; hWndInsertAfter
.text$mn:0000261B                 mov     ecx, [ebp+var_28]
.text$mn:0000261E                 mov     edx, [ecx+28h]
.text$mn:00002621                 push    edx             ; hWnd
.text$mn:00002622                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text$mn:00002628                 mov     eax, [ebp+Y]
.text$mn:0000262B                 add     eax, 12h
.text$mn:0000262E                 mov     [ebp+Y], eax
.text$mn:00002631                 mov     ecx, [ebp+cy]
.text$mn:00002634                 sub     ecx, 12h
.text$mn:00002637                 mov     [ebp+cy], ecx
.text$mn:0000263A                 jmp     short loc_266D
.text$mn:0000263C ; ---------------------------------------------------------------------------
.text$mn:0000263C
.text$mn:0000263C loc_263C:                               ; CODE XREF: DockingCont::onSize(void)+B7j
.text$mn:0000263C                 push    14h             ; uFlags
.text$mn:0000263E                 mov     edx, [ebp+cy]
.text$mn:00002641                 push    edx             ; cy
.text$mn:00002642                 push    12h             ; cx
.text$mn:00002644                 mov     eax, [ebp+Y]
.text$mn:00002647                 push    eax             ; Y
.text$mn:00002648                 mov     ecx, [ebp+X]
.text$mn:0000264B                 push    ecx             ; X
.text$mn:0000264C                 push    0               ; hWndInsertAfter
.text$mn:0000264E                 mov     edx, [ebp+var_28]
.text$mn:00002651                 mov     eax, [edx+28h]
.text$mn:00002654                 push    eax             ; hWnd
.text$mn:00002655                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text$mn:0000265B                 mov     ecx, [ebp+X]
.text$mn:0000265E                 add     ecx, 12h
.text$mn:00002661                 mov     [ebp+X], ecx
.text$mn:00002664                 mov     edx, [ebp+var_1C]
.text$mn:00002667                 sub     edx, 12h
.text$mn:0000266A                 mov     [ebp+var_1C], edx
.text$mn:0000266D
.text$mn:0000266D loc_266D:                               ; CODE XREF: DockingCont::onSize(void)+EAj
.text$mn:0000266D                 cmp     [ebp+var_30], 2
.text$mn:00002671                 jb      short loc_26C9
.text$mn:00002673                 mov     eax, [ebp+X]
.text$mn:00002676                 mov     [ebp+var_14], eax
.text$mn:00002679                 mov     ecx, [ebp+Y]
.text$mn:0000267C                 mov     [ebp+var_10], ecx
.text$mn:0000267F                 mov     edx, [ebp+var_1C]
.text$mn:00002682                 mov     [ebp+var_C], edx
.text$mn:00002685                 mov     eax, [ebp+cy]
.text$mn:00002688                 mov     [ebp+var_8], eax
.text$mn:0000268B                 mov     ecx, [ebp+var_8]
.text$mn:0000268E                 add     ecx, [ebp+var_10]
.text$mn:00002691                 mov     edx, [ebp+var_2C]
.text$mn:00002694                 add     edx, 2
.text$mn:00002697                 sub     ecx, edx
.text$mn:00002699                 mov     [ebp+var_10], ecx
.text$mn:0000269C                 mov     eax, [ebp+var_2C]
.text$mn:0000269F                 mov     [ebp+var_8], eax
.text$mn:000026A2                 mov     ecx, [ebp+var_2C]
.text$mn:000026A5                 mov     [ebp+var_3C], ecx
.text$mn:000026A8                 push    54h ; 'T'       ; uFlags
.text$mn:000026AA                 mov     edx, [ebp+var_8]
.text$mn:000026AD                 push    edx             ; cy
.text$mn:000026AE                 mov     eax, [ebp+var_C]
.text$mn:000026B1                 push    eax             ; cx
.text$mn:000026B2                 mov     ecx, [ebp+var_10]
.text$mn:000026B5                 push    ecx             ; Y
.text$mn:000026B6                 mov     edx, [ebp+var_14]
.text$mn:000026B9                 push    edx             ; X
.text$mn:000026BA                 push    0               ; hWndInsertAfter
.text$mn:000026BC                 mov     eax, [ebp+var_28]
.text$mn:000026BF                 mov     ecx, [eax+2Ch]
.text$mn:000026C2                 push    ecx             ; hWnd
.text$mn:000026C3                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text$mn:000026C9
.text$mn:000026C9 loc_26C9:                               ; CODE XREF: DockingCont::onSize(void)+121j
.text$mn:000026C9                 mov     edx, [ebp+X]
.text$mn:000026CC                 mov     [ebp+var_14], edx
.text$mn:000026CF                 mov     eax, [ebp+Y]
.text$mn:000026D2                 mov     [ebp+var_10], eax
.text$mn:000026D5                 mov     ecx, [ebp+var_1C]
.text$mn:000026D8                 mov     [ebp+var_C], ecx
.text$mn:000026DB                 mov     edx, [ebp+cy]
.text$mn:000026DE                 mov     [ebp+var_8], edx
.text$mn:000026E1                 mov     eax, [ebp+var_28]
.text$mn:000026E4                 cmp     dword ptr [eax+34h], 1
.text$mn:000026E8                 jnz     short loc_2703
.text$mn:000026EA                 mov     ecx, [ebp+var_10]
.text$mn:000026ED                 add     ecx, 2
.text$mn:000026F0                 mov     [ebp+var_10], ecx
.text$mn:000026F3                 mov     edx, [ebp+var_3C]
.text$mn:000026F6                 add     edx, 2
.text$mn:000026F9                 mov     eax, [ebp+var_8]
.text$mn:000026FC                 sub     eax, edx
.text$mn:000026FE                 mov     [ebp+var_8], eax
.text$mn:00002701                 jmp     short loc_271E
.text$mn:00002703 ; ---------------------------------------------------------------------------
.text$mn:00002703
.text$mn:00002703 loc_2703:                               ; CODE XREF: DockingCont::onSize(void)+198j
.text$mn:00002703                 mov     ecx, [ebp+var_14]
.text$mn:00002706                 add     ecx, 2
.text$mn:00002709                 mov     [ebp+var_14], ecx
.text$mn:0000270C                 mov     edx, [ebp+var_C]
.text$mn:0000270F                 sub     edx, 2
.text$mn:00002712                 mov     [ebp+var_C], edx
.text$mn:00002715                 mov     eax, [ebp+var_8]
.text$mn:00002718                 sub     eax, [ebp+var_3C]
.text$mn:0000271B                 mov     [ebp+var_8], eax
.text$mn:0000271E
.text$mn:0000271E loc_271E:                               ; CODE XREF: DockingCont::onSize(void)+1B1j
.text$mn:0000271E                 push    14h             ; uFlags
.text$mn:00002720                 mov     ecx, [ebp+var_8]
.text$mn:00002723                 push    ecx             ; cy
.text$mn:00002724                 mov     edx, [ebp+var_C]
.text$mn:00002727                 push    edx             ; cx
.text$mn:00002728                 mov     eax, [ebp+var_10]
.text$mn:0000272B                 push    eax             ; Y
.text$mn:0000272C                 mov     ecx, [ebp+var_14]
.text$mn:0000272F                 push    ecx             ; X
.text$mn:00002730                 push    0               ; hWndInsertAfter
.text$mn:00002732                 push    404h            ; nIDDlgItem
.text$mn:00002737                 mov     edx, [ebp+var_28]
.text$mn:0000273A                 mov     eax, [edx+0Ch]
.text$mn:0000273D                 push    eax             ; hDlg
.text$mn:0000273E                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00002744                 push    eax             ; hWnd
.text$mn:00002745                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text$mn:0000274B                 jmp     loc_2864
.text$mn:00002750 ; ---------------------------------------------------------------------------
.text$mn:00002750
.text$mn:00002750 loc_2750:                               ; CODE XREF: DockingCont::onSize(void)+AAj
.text$mn:00002750                 mov     ecx, [ebp+var_28]
.text$mn:00002753                 movzx   edx, byte ptr [ecx+24h]
.text$mn:00002757                 cmp     edx, 1
.text$mn:0000275A                 jnz     short loc_27AE
.text$mn:0000275C                 mov     [ebp+var_34], 0
.text$mn:00002763                 mov     ecx, [ebp+var_28]
.text$mn:00002766                 add     ecx, 9Ch ; 'Â£'
.text$mn:0000276C                 call    ?size@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ ; std::vector<tTbData *,std::allocator<tTbData *>>::size(void)
.text$mn:00002771                 mov     [ebp+var_44], eax
.text$mn:00002774                 jmp     short loc_277F
.text$mn:00002776 ; ---------------------------------------------------------------------------
.text$mn:00002776
.text$mn:00002776 loc_2776:                               ; CODE XREF: DockingCont::onSize(void)+25Cj
.text$mn:00002776                 mov     eax, [ebp+var_34]
.text$mn:00002779                 add     eax, 1
.text$mn:0000277C                 mov     [ebp+var_34], eax
.text$mn:0000277F
.text$mn:0000277F loc_277F:                               ; CODE XREF: DockingCont::onSize(void)+224j
.text$mn:0000277F                 mov     ecx, [ebp+var_34]
.text$mn:00002782                 cmp     ecx, [ebp+var_44]
.text$mn:00002785                 jnb     short loc_27AE
.text$mn:00002787                 mov     edx, [ebp+var_34]
.text$mn:0000278A                 push    edx
.text$mn:0000278B                 mov     ecx, [ebp+var_28]
.text$mn:0000278E                 add     ecx, 9Ch ; 'Â£'
.text$mn:00002794                 call    ??A?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEAAPAUtTbData@@I@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)
.text$mn:00002799                 mov     eax, [eax]
.text$mn:0000279B                 add     eax, 18h
.text$mn:0000279E                 push    eax
.text$mn:0000279F                 mov     ecx, [ebp+var_28]
.text$mn:000027A2                 mov     edx, [ecx]
.text$mn:000027A4                 mov     ecx, [ebp+var_28]
.text$mn:000027A7                 mov     eax, [edx+20h]
.text$mn:000027AA                 call    eax
.text$mn:000027AC                 jmp     short loc_2776
.text$mn:000027AE ; ---------------------------------------------------------------------------
.text$mn:000027AE
.text$mn:000027AE loc_27AE:                               ; CODE XREF: DockingCont::onSize(void)+20Aj
.text$mn:000027AE                                         ; DockingCont::onSize(void)+235j
.text$mn:000027AE                 cmp     [ebp+var_30], 2
.text$mn:000027B2                 jb      short loc_2801
.text$mn:000027B4                 mov     ecx, [ebp+X]
.text$mn:000027B7                 mov     [ebp+var_14], ecx
.text$mn:000027BA                 mov     edx, [ebp+Y]
.text$mn:000027BD                 mov     [ebp+var_10], edx
.text$mn:000027C0                 mov     eax, [ebp+var_1C]
.text$mn:000027C3                 mov     [ebp+var_C], eax
.text$mn:000027C6                 mov     ecx, [ebp+cy]
.text$mn:000027C9                 mov     [ebp+var_8], ecx
.text$mn:000027CC                 mov     edx, [ebp+var_2C]
.text$mn:000027CF                 add     edx, 2
.text$mn:000027D2                 mov     eax, [ebp+var_8]
.text$mn:000027D5                 sub     eax, edx
.text$mn:000027D7                 mov     [ebp+var_10], eax
.text$mn:000027DA                 mov     ecx, [ebp+var_2C]
.text$mn:000027DD                 mov     [ebp+var_8], ecx
.text$mn:000027E0                 push    44h ; 'D'       ; uFlags
.text$mn:000027E2                 mov     edx, [ebp+var_8]
.text$mn:000027E5                 push    edx             ; cy
.text$mn:000027E6                 mov     eax, [ebp+var_C]
.text$mn:000027E9                 push    eax             ; cx
.text$mn:000027EA                 mov     ecx, [ebp+var_10]
.text$mn:000027ED                 push    ecx             ; Y
.text$mn:000027EE                 mov     edx, [ebp+var_14]
.text$mn:000027F1                 push    edx             ; X
.text$mn:000027F2                 push    0               ; hWndInsertAfter
.text$mn:000027F4                 mov     eax, [ebp+var_28]
.text$mn:000027F7                 mov     ecx, [eax+2Ch]
.text$mn:000027FA                 push    ecx             ; hWnd
.text$mn:000027FB                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text$mn:00002801
.text$mn:00002801 loc_2801:                               ; CODE XREF: DockingCont::onSize(void)+262j
.text$mn:00002801                 mov     edx, [ebp+X]
.text$mn:00002804                 mov     [ebp+var_14], edx
.text$mn:00002807                 mov     eax, [ebp+Y]
.text$mn:0000280A                 mov     [ebp+var_10], eax
.text$mn:0000280D                 mov     ecx, [ebp+var_1C]
.text$mn:00002810                 mov     [ebp+var_C], ecx
.text$mn:00002813                 mov     edx, [ebp+cy]
.text$mn:00002816                 mov     [ebp+var_8], edx
.text$mn:00002819                 cmp     [ebp+var_30], 1
.text$mn:0000281D                 jnz     short loc_2828
.text$mn:0000281F                 mov     [ebp+var_40], 0
.text$mn:00002826                 jmp     short loc_282E
.text$mn:00002828 ; ---------------------------------------------------------------------------
.text$mn:00002828
.text$mn:00002828 loc_2828:                               ; CODE XREF: DockingCont::onSize(void)+2CDj
.text$mn:00002828                 mov     eax, [ebp+var_2C]
.text$mn:0000282B                 mov     [ebp+var_40], eax
.text$mn:0000282E
.text$mn:0000282E loc_282E:                               ; CODE XREF: DockingCont::onSize(void)+2D6j
.text$mn:0000282E                 mov     ecx, [ebp+var_8]
.text$mn:00002831                 sub     ecx, [ebp+var_40]
.text$mn:00002834                 mov     [ebp+var_8], ecx
.text$mn:00002837                 push    14h             ; uFlags
.text$mn:00002839                 mov     edx, [ebp+var_8]
.text$mn:0000283C                 push    edx             ; cy
.text$mn:0000283D                 mov     eax, [ebp+var_C]
.text$mn:00002840                 push    eax             ; cx
.text$mn:00002841                 mov     ecx, [ebp+var_10]
.text$mn:00002844                 push    ecx             ; Y
.text$mn:00002845                 mov     edx, [ebp+var_14]
.text$mn:00002848                 push    edx             ; X
.text$mn:00002849                 push    0               ; hWndInsertAfter
.text$mn:0000284B                 push    404h            ; nIDDlgItem
.text$mn:00002850                 mov     eax, [ebp+var_28]
.text$mn:00002853                 mov     ecx, [eax+0Ch]
.text$mn:00002856                 push    ecx             ; hDlg
.text$mn:00002857                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:0000285D                 push    eax             ; hWnd
.text$mn:0000285E                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text$mn:00002864
.text$mn:00002864 loc_2864:                               ; CODE XREF: DockingCont::onSize(void)+1FBj
.text$mn:00002864                 push    0               ; lParam
.text$mn:00002866                 push    0               ; wParam
.text$mn:00002868                 push    1304h           ; Msg
.text$mn:0000286D                 mov     edx, [ebp+var_28]
.text$mn:00002870                 mov     eax, [edx+2Ch]
.text$mn:00002873                 push    eax             ; hWnd
.text$mn:00002874                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000287A                 mov     [ebp+var_48], eax
.text$mn:0000287D                 mov     [ebp+wParam], 0
.text$mn:00002884                 jmp     short loc_288F
.text$mn:00002886 ; ---------------------------------------------------------------------------
.text$mn:00002886
.text$mn:00002886 loc_2886:                               ; CODE XREF: DockingCont::onSize(void)+36Ej
.text$mn:00002886                                         ; DockingCont::onSize(void)+3B9j
.text$mn:00002886                 mov     ecx, [ebp+wParam]
.text$mn:00002889                 add     ecx, 1
.text$mn:0000288C                 mov     [ebp+wParam], ecx
.text$mn:0000288F
.text$mn:0000288F loc_288F:                               ; CODE XREF: DockingCont::onSize(void)+334j
.text$mn:0000288F                 mov     edx, [ebp+wParam]
.text$mn:00002892                 cmp     edx, [ebp+var_48]
.text$mn:00002895                 jnb     short loc_290E
.text$mn:00002897                 mov     [ebp+lParam], 8
.text$mn:0000289E                 lea     eax, [ebp+lParam]
.text$mn:000028A1                 push    eax             ; lParam
.text$mn:000028A2                 mov     ecx, [ebp+wParam]
.text$mn:000028A5                 push    ecx             ; wParam
.text$mn:000028A6                 push    133Ch           ; Msg
.text$mn:000028AB                 mov     edx, [ebp+var_28]
.text$mn:000028AE                 mov     eax, [edx+2Ch]
.text$mn:000028B1                 push    eax             ; hWnd
.text$mn:000028B2                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000028B8                 cmp     [ebp+var_4C], 0
.text$mn:000028BC                 jnz     short loc_28C0
.text$mn:000028BE                 jmp     short loc_2886
.text$mn:000028C0 ; ---------------------------------------------------------------------------
.text$mn:000028C0
.text$mn:000028C0 loc_28C0:                               ; CODE XREF: DockingCont::onSize(void)+36Cj
.text$mn:000028C0                 push    4               ; uFlags
.text$mn:000028C2                 mov     ecx, [ebp+var_8]
.text$mn:000028C5                 push    ecx             ; cy
.text$mn:000028C6                 mov     edx, [ebp+var_C]
.text$mn:000028C9                 push    edx             ; cx
.text$mn:000028CA                 push    0               ; Y
.text$mn:000028CC                 push    0               ; X
.text$mn:000028CE                 push    0               ; hWndInsertAfter
.text$mn:000028D0                 mov     eax, [ebp+var_4C]
.text$mn:000028D3                 mov     ecx, [eax]
.text$mn:000028D5                 push    ecx             ; hWnd
.text$mn:000028D6                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text$mn:000028DC                 mov     [ebp+var_68], 420h
.text$mn:000028E3                 mov     edx, [ebp+var_28]
.text$mn:000028E6                 mov     eax, [edx+0Ch]
.text$mn:000028E9                 mov     [ebp+var_70], eax
.text$mn:000028EC                 mov     [ebp+var_6C], 0
.text$mn:000028F3                 lea     ecx, [ebp+var_70]
.text$mn:000028F6                 push    ecx             ; lParam
.text$mn:000028F7                 mov     edx, [ebp+var_6C]
.text$mn:000028FA                 push    edx             ; wParam
.text$mn:000028FB                 push    4Eh ; 'N'       ; Msg
.text$mn:000028FD                 mov     eax, [ebp+var_4C]
.text$mn:00002900                 mov     ecx, [eax]
.text$mn:00002902                 push    ecx             ; hWnd
.text$mn:00002903                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002909                 jmp     loc_2886
.text$mn:0000290E ; ---------------------------------------------------------------------------
.text$mn:0000290E
.text$mn:0000290E loc_290E:                               ; CODE XREF: DockingCont::onSize(void)+87j
.text$mn:0000290E                                         ; DockingCont::onSize(void)+345j
.text$mn:0000290E                 mov     ecx, [ebp+var_4]
.text$mn:00002911                 xor     ecx, ebp
.text$mn:00002913                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002918                 mov     esp, ebp
.text$mn:0000291A                 pop     ebp
.text$mn:0000291B                 retn
.text$mn:0000291B ?onSize@DockingCont@@IAEXXZ endp
.text$mn:0000291B
.text$mn:0000291B ; ---------------------------------------------------------------------------
.text$mn:0000291C                 align 10h
.text$mn:00002920
.text$mn:00002920 ; =============== S U B R O U T I N E =======================================
.text$mn:00002920
.text$mn:00002920 ; Attributes: bp-based frame
.text$mn:00002920
.text$mn:00002920 ; protected: enum  eMousePos __thiscall DockingCont::isInRect(struct HWND__ *, int, int)
.text$mn:00002920                 public ?isInRect@DockingCont@@IAE?AW4eMousePos@@PAUHWND__@@HH@Z
.text$mn:00002920 ?isInRect@DockingCont@@IAE?AW4eMousePos@@PAUHWND__@@HH@Z proc near
.text$mn:00002920                                         ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+11Bp
.text$mn:00002920                                         ; DockingCont::runProcCaption(HWND__ *,uint,uint,long)+26Cp ...
.text$mn:00002920
.text$mn:00002920 var_1C          = dword ptr -1Ch
.text$mn:00002920 var_18          = dword ptr -18h
.text$mn:00002920 Rect            = tagRECT ptr -14h
.text$mn:00002920 var_4           = dword ptr -4
.text$mn:00002920 hWnd            = dword ptr  8
.text$mn:00002920 arg_4           = dword ptr  0Ch
.text$mn:00002920 arg_8           = dword ptr  10h
.text$mn:00002920
.text$mn:00002920                 push    ebp
.text$mn:00002921                 mov     ebp, esp
.text$mn:00002923                 sub     esp, 1Ch
.text$mn:00002926                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000292B                 xor     eax, ebp
.text$mn:0000292D                 mov     [ebp+var_4], eax
.text$mn:00002930                 mov     [ebp+var_1C], ecx
.text$mn:00002933                 mov     [ebp+var_18], 0
.text$mn:0000293A                 lea     eax, [ebp+Rect]
.text$mn:0000293D                 push    eax             ; lpRect
.text$mn:0000293E                 mov     ecx, [ebp+hWnd]
.text$mn:00002941                 push    ecx             ; hWnd
.text$mn:00002942                 call    dword ptr ds:__imp__GetWindowRect@8 ; GetWindowRect(x,x)
.text$mn:00002948                 lea     edx, [ebp+Rect]
.text$mn:0000294B                 push    edx             ; struct tagRECT *
.text$mn:0000294C                 mov     eax, [ebp+hWnd]
.text$mn:0000294F                 push    eax             ; HWND
.text$mn:00002950                 call    ?ScreenRectToClientRect@@YAXPAUHWND__@@PAUtagRECT@@@Z ; ScreenRectToClientRect(HWND__ *,tagRECT *)
.text$mn:00002955                 add     esp, 8
.text$mn:00002958                 mov     ecx, [ebp+var_1C]
.text$mn:0000295B                 cmp     dword ptr [ecx+34h], 1
.text$mn:0000295F                 jnz     short loc_29C2
.text$mn:00002961                 mov     edx, [ebp+arg_4]
.text$mn:00002964                 cmp     edx, [ebp+Rect.left]
.text$mn:00002967                 jle     short loc_298D
.text$mn:00002969                 mov     eax, [ebp+Rect.right]
.text$mn:0000296C                 sub     eax, 12h
.text$mn:0000296F                 cmp     [ebp+arg_4], eax
.text$mn:00002972                 jge     short loc_298D
.text$mn:00002974                 mov     ecx, [ebp+arg_8]
.text$mn:00002977                 cmp     ecx, [ebp+Rect.top]
.text$mn:0000297A                 jle     short loc_298D
.text$mn:0000297C                 mov     edx, [ebp+arg_8]
.text$mn:0000297F                 cmp     edx, [ebp+Rect.bottom]
.text$mn:00002982                 jge     short loc_298D
.text$mn:00002984                 mov     [ebp+var_18], 1
.text$mn:0000298B                 jmp     short loc_29C0
.text$mn:0000298D ; ---------------------------------------------------------------------------
.text$mn:0000298D
.text$mn:0000298D loc_298D:                               ; CODE XREF: DockingCont::isInRect(HWND__ *,int,int)+47j
.text$mn:0000298D                                         ; DockingCont::isInRect(HWND__ *,int,int)+52j ...
.text$mn:0000298D                 mov     eax, [ebp+Rect.right]
.text$mn:00002990                 sub     eax, 0Fh
.text$mn:00002993                 cmp     [ebp+arg_4], eax
.text$mn:00002996                 jle     short loc_29C0
.text$mn:00002998                 mov     ecx, [ebp+Rect.right]
.text$mn:0000299B                 sub     ecx, 3
.text$mn:0000299E                 cmp     [ebp+arg_4], ecx
.text$mn:000029A1                 jge     short loc_29C0
.text$mn:000029A3                 mov     edx, [ebp+Rect.top]
.text$mn:000029A6                 add     edx, 3
.text$mn:000029A9                 cmp     [ebp+arg_8], edx
.text$mn:000029AC                 jle     short loc_29C0
.text$mn:000029AE                 mov     eax, [ebp+Rect.bottom]
.text$mn:000029B1                 sub     eax, 3
.text$mn:000029B4                 cmp     [ebp+arg_8], eax
.text$mn:000029B7                 jge     short loc_29C0
.text$mn:000029B9                 mov     [ebp+var_18], 2
.text$mn:000029C0
.text$mn:000029C0 loc_29C0:                               ; CODE XREF: DockingCont::isInRect(HWND__ *,int,int)+6Bj
.text$mn:000029C0                                         ; DockingCont::isInRect(HWND__ *,int,int)+76j ...
.text$mn:000029C0                 jmp     short loc_2A21
.text$mn:000029C2 ; ---------------------------------------------------------------------------
.text$mn:000029C2
.text$mn:000029C2 loc_29C2:                               ; CODE XREF: DockingCont::isInRect(HWND__ *,int,int)+3Fj
.text$mn:000029C2                 mov     ecx, [ebp+arg_4]
.text$mn:000029C5                 cmp     ecx, [ebp+Rect.left]
.text$mn:000029C8                 jle     short loc_29EE
.text$mn:000029CA                 mov     edx, [ebp+arg_4]
.text$mn:000029CD                 cmp     edx, [ebp+Rect.right]
.text$mn:000029D0                 jge     short loc_29EE
.text$mn:000029D2                 mov     eax, [ebp+Rect.top]
.text$mn:000029D5                 add     eax, 12h
.text$mn:000029D8                 cmp     [ebp+arg_8], eax
.text$mn:000029DB                 jle     short loc_29EE
.text$mn:000029DD                 mov     ecx, [ebp+arg_8]
.text$mn:000029E0                 cmp     ecx, [ebp+Rect.bottom]
.text$mn:000029E3                 jge     short loc_29EE
.text$mn:000029E5                 mov     [ebp+var_18], 1
.text$mn:000029EC                 jmp     short loc_2A21
.text$mn:000029EE ; ---------------------------------------------------------------------------
.text$mn:000029EE
.text$mn:000029EE loc_29EE:                               ; CODE XREF: DockingCont::isInRect(HWND__ *,int,int)+A8j
.text$mn:000029EE                                         ; DockingCont::isInRect(HWND__ *,int,int)+B0j ...
.text$mn:000029EE                 mov     edx, [ebp+Rect.left]
.text$mn:000029F1                 add     edx, 3
.text$mn:000029F4                 cmp     [ebp+arg_4], edx
.text$mn:000029F7                 jle     short loc_2A21
.text$mn:000029F9                 mov     eax, [ebp+Rect.right]
.text$mn:000029FC                 sub     eax, 3
.text$mn:000029FF                 cmp     [ebp+arg_4], eax
.text$mn:00002A02                 jge     short loc_2A21
.text$mn:00002A04                 mov     ecx, [ebp+Rect.top]
.text$mn:00002A07                 add     ecx, 3
.text$mn:00002A0A                 cmp     [ebp+arg_8], ecx
.text$mn:00002A0D                 jle     short loc_2A21
.text$mn:00002A0F                 mov     edx, [ebp+Rect.top]
.text$mn:00002A12                 add     edx, 0Fh
.text$mn:00002A15                 cmp     [ebp+arg_8], edx
.text$mn:00002A18                 jge     short loc_2A21
.text$mn:00002A1A                 mov     [ebp+var_18], 2
.text$mn:00002A21
.text$mn:00002A21 loc_2A21:                               ; CODE XREF: DockingCont::isInRect(HWND__ *,int,int):loc_29C0j
.text$mn:00002A21                                         ; DockingCont::isInRect(HWND__ *,int,int)+CCj ...
.text$mn:00002A21                 mov     eax, [ebp+var_18]
.text$mn:00002A24                 mov     ecx, [ebp+var_4]
.text$mn:00002A27                 xor     ecx, ebp
.text$mn:00002A29                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002A2E                 mov     esp, ebp
.text$mn:00002A30                 pop     ebp
.text$mn:00002A31                 retn    0Ch
.text$mn:00002A31 ?isInRect@DockingCont@@IAE?AW4eMousePos@@PAUHWND__@@HH@Z endp
.text$mn:00002A31
.text$mn:00002A31 ; ---------------------------------------------------------------------------
.text$mn:00002A34                 align 10h
.text$mn:00002A40
.text$mn:00002A40 ; =============== S U B R O U T I N E =======================================
.text$mn:00002A40
.text$mn:00002A40 ; Attributes: bp-based frame
.text$mn:00002A40
.text$mn:00002A40 ; void __thiscall DockingCont::doClose(DockingCont *__hidden this)
.text$mn:00002A40                 public ?doClose@DockingCont@@IAEXXZ
.text$mn:00002A40 ?doClose@DockingCont@@IAEXXZ proc near  ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+212p
.text$mn:00002A40                                         ; DockingCont::run_dlgProc(uint,uint,long)+2A2p
.text$mn:00002A40
.text$mn:00002A40 lParam          = dword ptr -2Ch
.text$mn:00002A40 var_28          = dword ptr -28h
.text$mn:00002A40 var_24          = dword ptr -24h
.text$mn:00002A40 var_20          = dword ptr -20h
.text$mn:00002A40 var_1C          = dword ptr -1Ch
.text$mn:00002A40 var_18          = dword ptr -18h
.text$mn:00002A40 var_14          = dword ptr -14h
.text$mn:00002A40 var_10          = dword ptr -10h
.text$mn:00002A40 var_C           = dword ptr -0Ch
.text$mn:00002A40 wParam          = dword ptr -8
.text$mn:00002A40 var_4           = dword ptr -4
.text$mn:00002A40
.text$mn:00002A40                 push    ebp
.text$mn:00002A41                 mov     ebp, esp
.text$mn:00002A43                 sub     esp, 2Ch
.text$mn:00002A46                 mov     [ebp+var_4], ecx
.text$mn:00002A49                 mov     [ebp+wParam], 0
.text$mn:00002A50                 push    0               ; lParam
.text$mn:00002A52                 push    0               ; wParam
.text$mn:00002A54                 push    1304h           ; Msg
.text$mn:00002A59                 mov     eax, [ebp+var_4]
.text$mn:00002A5C                 mov     ecx, [eax+2Ch]
.text$mn:00002A5F                 push    ecx             ; hWnd
.text$mn:00002A60                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002A66                 mov     [ebp+var_10], eax
.text$mn:00002A69                 mov     [ebp+var_C], 0
.text$mn:00002A70                 jmp     short loc_2A7B
.text$mn:00002A72 ; ---------------------------------------------------------------------------
.text$mn:00002A72
.text$mn:00002A72 loc_2A72:                               ; CODE XREF: DockingCont::doClose(void)+91j
.text$mn:00002A72                                         ; DockingCont::doClose(void):loc_2AFDj
.text$mn:00002A72                 mov     edx, [ebp+var_C]
.text$mn:00002A75                 add     edx, 1
.text$mn:00002A78                 mov     [ebp+var_C], edx
.text$mn:00002A7B
.text$mn:00002A7B loc_2A7B:                               ; CODE XREF: DockingCont::doClose(void)+30j
.text$mn:00002A7B                 mov     eax, [ebp+var_C]
.text$mn:00002A7E                 cmp     eax, [ebp+var_10]
.text$mn:00002A81                 jge     short loc_2B02
.text$mn:00002A83                 mov     [ebp+lParam], 0
.text$mn:00002A8A                 xor     ecx, ecx
.text$mn:00002A8C                 mov     [ebp+var_28], ecx
.text$mn:00002A8F                 mov     [ebp+var_24], ecx
.text$mn:00002A92                 mov     [ebp+var_20], ecx
.text$mn:00002A95                 mov     [ebp+var_1C], ecx
.text$mn:00002A98                 mov     [ebp+var_18], ecx
.text$mn:00002A9B                 mov     [ebp+var_14], ecx
.text$mn:00002A9E                 mov     edx, [ebp+wParam]
.text$mn:00002AA1                 push    edx             ; int
.text$mn:00002AA2                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002AA5                 call    ?SelectTab@DockingCont@@IAEXH@Z ; DockingCont::SelectTab(int)
.text$mn:00002AAA                 mov     [ebp+lParam], 8
.text$mn:00002AB1                 lea     eax, [ebp+lParam]
.text$mn:00002AB4                 push    eax             ; lParam
.text$mn:00002AB5                 mov     ecx, [ebp+wParam]
.text$mn:00002AB8                 push    ecx             ; wParam
.text$mn:00002AB9                 push    133Ch           ; Msg
.text$mn:00002ABE                 mov     edx, [ebp+var_4]
.text$mn:00002AC1                 mov     eax, [edx+2Ch]
.text$mn:00002AC4                 push    eax             ; hWnd
.text$mn:00002AC5                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002ACB                 cmp     [ebp+var_14], 0
.text$mn:00002ACF                 jnz     short loc_2AD3
.text$mn:00002AD1                 jmp     short loc_2A72
.text$mn:00002AD3 ; ---------------------------------------------------------------------------
.text$mn:00002AD3
.text$mn:00002AD3 loc_2AD3:                               ; CODE XREF: DockingCont::doClose(void)+8Fj
.text$mn:00002AD3                 push    5001h           ; unsigned int
.text$mn:00002AD8                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002ADB                 call    ?NotifyParent@DockingCont@@IAEJI@Z ; DockingCont::NotifyParent(uint)
.text$mn:00002AE0                 test    eax, eax
.text$mn:00002AE2                 jnz     short loc_2AF4
.text$mn:00002AE4                 push    1               ; int
.text$mn:00002AE6                 mov     ecx, [ebp+var_14]
.text$mn:00002AE9                 push    ecx             ; struct tTbData *
.text$mn:00002AEA                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002AED                 call    ?hideToolbar@DockingCont@@IAEHPAUtTbData@@H@Z ; DockingCont::hideToolbar(tTbData *,int)
.text$mn:00002AF2                 jmp     short loc_2AFD
.text$mn:00002AF4 ; ---------------------------------------------------------------------------
.text$mn:00002AF4
.text$mn:00002AF4 loc_2AF4:                               ; CODE XREF: DockingCont::doClose(void)+A2j
.text$mn:00002AF4                 mov     edx, [ebp+wParam]
.text$mn:00002AF7                 add     edx, 1
.text$mn:00002AFA                 mov     [ebp+wParam], edx
.text$mn:00002AFD
.text$mn:00002AFD loc_2AFD:                               ; CODE XREF: DockingCont::doClose(void)+B2j
.text$mn:00002AFD                 jmp     loc_2A72
.text$mn:00002B02 ; ---------------------------------------------------------------------------
.text$mn:00002B02
.text$mn:00002B02 loc_2B02:                               ; CODE XREF: DockingCont::doClose(void)+41j
.text$mn:00002B02                 cmp     [ebp+wParam], 0
.text$mn:00002B06                 jnz     short loc_2B27
.text$mn:00002B08                 push    0               ; bool
.text$mn:00002B0A                 push    0               ; bool
.text$mn:00002B0C                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002B0F                 call    ?doDialog@DockingCont@@QAEX_N0@Z ; DockingCont::doDialog(bool,bool)
.text$mn:00002B14                 push    0               ; lParam
.text$mn:00002B16                 push    0               ; wParam
.text$mn:00002B18                 push    5               ; Msg
.text$mn:00002B1A                 mov     eax, [ebp+var_4]
.text$mn:00002B1D                 mov     ecx, [eax+8]
.text$mn:00002B20                 push    ecx             ; hWnd
.text$mn:00002B21                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002B27
.text$mn:00002B27 loc_2B27:                               ; CODE XREF: DockingCont::doClose(void)+C6j
.text$mn:00002B27                 mov     esp, ebp
.text$mn:00002B29                 pop     ebp
.text$mn:00002B2A                 retn
.text$mn:00002B2A ?doClose@DockingCont@@IAEXXZ endp
.text$mn:00002B2A
.text$mn:00002B2A ; ---------------------------------------------------------------------------
.text$mn:00002B2B                 align 10h
.text$mn:00002B30
.text$mn:00002B30 ; =============== S U B R O U T I N E =======================================
.text$mn:00002B30
.text$mn:00002B30 ; Attributes: bp-based frame
.text$mn:00002B30
.text$mn:00002B30 ; int __thiscall DockingCont::SearchPosInTab(DockingCont *this, struct tTbData *)
.text$mn:00002B30                 public ?SearchPosInTab@DockingCont@@IAEHPAUtTbData@@@Z
.text$mn:00002B30 ?SearchPosInTab@DockingCont@@IAEHPAUtTbData@@@Z proc near
.text$mn:00002B30                                         ; CODE XREF: DockingCont::setActiveTb(tTbData *)+10p
.text$mn:00002B30                                         ; DockingCont::hideToolbar(tTbData *,int)+10p ...
.text$mn:00002B30
.text$mn:00002B30 lParam          = dword ptr -28h
.text$mn:00002B30 var_24          = dword ptr -24h
.text$mn:00002B30 var_20          = dword ptr -20h
.text$mn:00002B30 var_1C          = dword ptr -1Ch
.text$mn:00002B30 var_18          = dword ptr -18h
.text$mn:00002B30 var_14          = dword ptr -14h
.text$mn:00002B30 var_10          = dword ptr -10h
.text$mn:00002B30 var_C           = dword ptr -0Ch
.text$mn:00002B30 var_8           = dword ptr -8
.text$mn:00002B30 wParam          = dword ptr -4
.text$mn:00002B30 arg_0           = dword ptr  8
.text$mn:00002B30
.text$mn:00002B30                 push    ebp
.text$mn:00002B31                 mov     ebp, esp
.text$mn:00002B33                 sub     esp, 28h
.text$mn:00002B36                 mov     [ebp+var_8], ecx
.text$mn:00002B39                 mov     [ebp+lParam], 0
.text$mn:00002B40                 xor     eax, eax
.text$mn:00002B42                 mov     [ebp+var_24], eax
.text$mn:00002B45                 mov     [ebp+var_20], eax
.text$mn:00002B48                 mov     [ebp+var_1C], eax
.text$mn:00002B4B                 mov     [ebp+var_18], eax
.text$mn:00002B4E                 mov     [ebp+var_14], eax
.text$mn:00002B51                 mov     [ebp+var_10], eax
.text$mn:00002B54                 push    0               ; lParam
.text$mn:00002B56                 push    0               ; wParam
.text$mn:00002B58                 push    1304h           ; Msg
.text$mn:00002B5D                 mov     ecx, [ebp+var_8]
.text$mn:00002B60                 mov     edx, [ecx+2Ch]
.text$mn:00002B63                 push    edx             ; hWnd
.text$mn:00002B64                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002B6A                 mov     [ebp+var_C], eax
.text$mn:00002B6D                 mov     [ebp+lParam], 8
.text$mn:00002B74                 mov     [ebp+wParam], 0
.text$mn:00002B7B                 jmp     short loc_2B86
.text$mn:00002B7D ; ---------------------------------------------------------------------------
.text$mn:00002B7D
.text$mn:00002B7D loc_2B7D:                               ; CODE XREF: DockingCont::SearchPosInTab(tTbData *)+7Ej
.text$mn:00002B7D                                         ; DockingCont::SearchPosInTab(tTbData *):loc_2BC1j
.text$mn:00002B7D                 mov     eax, [ebp+wParam]
.text$mn:00002B80                 add     eax, 1
.text$mn:00002B83                 mov     [ebp+wParam], eax
.text$mn:00002B86
.text$mn:00002B86 loc_2B86:                               ; CODE XREF: DockingCont::SearchPosInTab(tTbData *)+4Bj
.text$mn:00002B86                 mov     ecx, [ebp+wParam]
.text$mn:00002B89                 cmp     ecx, [ebp+var_C]
.text$mn:00002B8C                 jge     short loc_2BC3
.text$mn:00002B8E                 lea     edx, [ebp+lParam]
.text$mn:00002B91                 push    edx             ; lParam
.text$mn:00002B92                 mov     eax, [ebp+wParam]
.text$mn:00002B95                 push    eax             ; wParam
.text$mn:00002B96                 push    133Ch           ; Msg
.text$mn:00002B9B                 mov     ecx, [ebp+var_8]
.text$mn:00002B9E                 mov     edx, [ecx+2Ch]
.text$mn:00002BA1                 push    edx             ; hWnd
.text$mn:00002BA2                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002BA8                 cmp     [ebp+var_10], 0
.text$mn:00002BAC                 jnz     short loc_2BB0
.text$mn:00002BAE                 jmp     short loc_2B7D
.text$mn:00002BB0 ; ---------------------------------------------------------------------------
.text$mn:00002BB0
.text$mn:00002BB0 loc_2BB0:                               ; CODE XREF: DockingCont::SearchPosInTab(tTbData *)+7Cj
.text$mn:00002BB0                 mov     eax, [ebp+var_10]
.text$mn:00002BB3                 mov     ecx, [ebp+arg_0]
.text$mn:00002BB6                 mov     edx, [eax]
.text$mn:00002BB8                 cmp     edx, [ecx]
.text$mn:00002BBA                 jnz     short loc_2BC1
.text$mn:00002BBC                 mov     eax, [ebp+wParam]
.text$mn:00002BBF                 jmp     short loc_2BC6
.text$mn:00002BC1 ; ---------------------------------------------------------------------------
.text$mn:00002BC1
.text$mn:00002BC1 loc_2BC1:                               ; CODE XREF: DockingCont::SearchPosInTab(tTbData *)+8Aj
.text$mn:00002BC1                 jmp     short loc_2B7D
.text$mn:00002BC3 ; ---------------------------------------------------------------------------
.text$mn:00002BC3
.text$mn:00002BC3 loc_2BC3:                               ; CODE XREF: DockingCont::SearchPosInTab(tTbData *)+5Cj
.text$mn:00002BC3                 or      eax, 0FFFFFFFFh
.text$mn:00002BC6
.text$mn:00002BC6 loc_2BC6:                               ; CODE XREF: DockingCont::SearchPosInTab(tTbData *)+8Fj
.text$mn:00002BC6                 mov     esp, ebp
.text$mn:00002BC8                 pop     ebp
.text$mn:00002BC9                 retn    4
.text$mn:00002BC9 ?SearchPosInTab@DockingCont@@IAEHPAUtTbData@@@Z endp
.text$mn:00002BC9
.text$mn:00002BC9 ; ---------------------------------------------------------------------------
.text$mn:00002BCC                 align 10h
.text$mn:00002BD0
.text$mn:00002BD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00002BD0
.text$mn:00002BD0 ; Attributes: bp-based frame
.text$mn:00002BD0
.text$mn:00002BD0 ; void __thiscall DockingCont::SelectTab(DockingCont *this, int)
.text$mn:00002BD0                 public ?SelectTab@DockingCont@@IAEXH@Z
.text$mn:00002BD0 ?SelectTab@DockingCont@@IAEXH@Z proc near
.text$mn:00002BD0                                         ; CODE XREF: DockingCont::setActiveTb(int)+29p
.text$mn:00002BD0                                         ; DockingCont::runProcTab(HWND__ *,uint,uint,long)+136p ...
.text$mn:00002BD0
.text$mn:00002BD0 var_88          = dword ptr -88h
.text$mn:00002BD0 var_84          = dword ptr -84h
.text$mn:00002BD0 var_80          = dword ptr -80h
.text$mn:00002BD0 var_7C          = dword ptr -7Ch
.text$mn:00002BD0 var_78          = dword ptr -78h
.text$mn:00002BD0 var_74          = dword ptr -74h
.text$mn:00002BD0 psizl           = tagSIZE ptr -70h
.text$mn:00002BD0 var_68          = dword ptr -68h
.text$mn:00002BD0 var_64          = dword ptr -64h
.text$mn:00002BD0 lParam          = dword ptr -60h
.text$mn:00002BD0 var_5C          = dword ptr -5Ch
.text$mn:00002BD0 var_58          = dword ptr -58h
.text$mn:00002BD0 var_54          = dword ptr -54h
.text$mn:00002BD0 var_50          = dword ptr -50h
.text$mn:00002BD0 var_4C          = dword ptr -4Ch
.text$mn:00002BD0 var_48          = dword ptr -48h
.text$mn:00002BD0 hdc             = dword ptr -44h
.text$mn:00002BD0 Str             = dword ptr -40h
.text$mn:00002BD0 var_3C          = dword ptr -3Ch
.text$mn:00002BD0 lpString        = dword ptr -38h
.text$mn:00002BD0 var_34          = dword ptr -34h
.text$mn:00002BD0 var_30          = dword ptr -30h
.text$mn:00002BD0 var_2C          = byte ptr -2Ch
.text$mn:00002BD0 var_10          = dword ptr -10h
.text$mn:00002BD0 var_C           = dword ptr -0Ch
.text$mn:00002BD0 var_4           = dword ptr -4
.text$mn:00002BD0 wParam          = dword ptr  8
.text$mn:00002BD0
.text$mn:00002BD0                 push    ebp
.text$mn:00002BD1                 mov     ebp, esp
.text$mn:00002BD3                 push    0FFFFFFFFh
.text$mn:00002BD5                 push    offset __ehhandler$?SelectTab@DockingCont@@IAEXH@Z
.text$mn:00002BDA                 mov     eax, large fs:0
.text$mn:00002BE0                 push    eax
.text$mn:00002BE1                 sub     esp, 7Ch
.text$mn:00002BE4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002BE9                 xor     eax, ebp
.text$mn:00002BEB                 mov     [ebp+var_10], eax
.text$mn:00002BEE                 push    eax
.text$mn:00002BEF                 lea     eax, [ebp+var_C]
.text$mn:00002BF2                 mov     large fs:0, eax
.text$mn:00002BF8                 mov     [ebp+var_30], ecx
.text$mn:00002BFB                 cmp     [ebp+wParam], 0FFFFFFFFh
.text$mn:00002BFF                 jz      loc_2EC0
.text$mn:00002C05                 mov     [ebp+Str], 0
.text$mn:00002C0C                 mov     [ebp+lParam], 0
.text$mn:00002C13                 xor     eax, eax
.text$mn:00002C15                 mov     [ebp+var_5C], eax
.text$mn:00002C18                 mov     [ebp+var_58], eax
.text$mn:00002C1B                 mov     [ebp+var_54], eax
.text$mn:00002C1E                 mov     [ebp+var_50], eax
.text$mn:00002C21                 mov     [ebp+var_4C], eax
.text$mn:00002C24                 mov     [ebp+var_48], eax
.text$mn:00002C27                 mov     [ebp+psizl._cx], 0
.text$mn:00002C2E                 xor     ecx, ecx
.text$mn:00002C30                 mov     [ebp+psizl.cy], ecx
.text$mn:00002C33                 mov     [ebp+var_64], 0
.text$mn:00002C3A                 push    0               ; lParam
.text$mn:00002C3C                 push    0               ; wParam
.text$mn:00002C3E                 push    1304h           ; Msg
.text$mn:00002C43                 mov     edx, [ebp+var_30]
.text$mn:00002C46                 mov     eax, [edx+2Ch]
.text$mn:00002C49                 push    eax             ; hWnd
.text$mn:00002C4A                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002C50                 mov     [ebp+var_68], eax
.text$mn:00002C53                 mov     [ebp+lParam], 8
.text$mn:00002C5A                 lea     ecx, [ebp+lParam]
.text$mn:00002C5D                 push    ecx             ; lParam
.text$mn:00002C5E                 mov     edx, [ebp+wParam]
.text$mn:00002C61                 push    edx             ; wParam
.text$mn:00002C62                 push    133Ch           ; Msg
.text$mn:00002C67                 mov     eax, [ebp+var_30]
.text$mn:00002C6A                 mov     ecx, [eax+2Ch]
.text$mn:00002C6D                 push    ecx             ; hWnd
.text$mn:00002C6E                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002C74                 cmp     [ebp+var_48], 0
.text$mn:00002C78                 jnz     short loc_2C7F
.text$mn:00002C7A                 jmp     loc_2EC0
.text$mn:00002C7F ; ---------------------------------------------------------------------------
.text$mn:00002C7F
.text$mn:00002C7F loc_2C7F:                               ; CODE XREF: DockingCont::SelectTab(int)+A8j
.text$mn:00002C7F                 push    5               ; nCmdShow
.text$mn:00002C81                 mov     edx, [ebp+var_48]
.text$mn:00002C84                 mov     eax, [edx]
.text$mn:00002C86                 push    eax             ; hWnd
.text$mn:00002C87                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00002C8D                 mov     ecx, [ebp+var_48]
.text$mn:00002C90                 mov     edx, [ecx]
.text$mn:00002C92                 push    edx             ; hWnd
.text$mn:00002C93                 call    dword ptr ds:__imp__SetFocus@4 ; SetFocus(x)
.text$mn:00002C99                 mov     [ebp+var_80], 41Eh
.text$mn:00002CA0                 mov     eax, [ebp+var_30]
.text$mn:00002CA3                 mov     ecx, [eax+0Ch]
.text$mn:00002CA6                 mov     [ebp+var_88], ecx
.text$mn:00002CAC                 mov     [ebp+var_84], 0
.text$mn:00002CB6                 lea     edx, [ebp+var_88]
.text$mn:00002CBC                 push    edx             ; lParam
.text$mn:00002CBD                 mov     eax, [ebp+var_84]
.text$mn:00002CC3                 push    eax             ; wParam
.text$mn:00002CC4                 push    4Eh ; 'N'       ; Msg
.text$mn:00002CC6                 mov     ecx, [ebp+var_48]
.text$mn:00002CC9                 mov     edx, [ecx]
.text$mn:00002CCB                 push    edx             ; hWnd
.text$mn:00002CCC                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002CD2                 mov     eax, [ebp+var_30]
.text$mn:00002CD5                 mov     ecx, [ebp+wParam]
.text$mn:00002CD8                 cmp     ecx, [eax+80h]
.text$mn:00002CDE                 jz      short loc_2D46
.text$mn:00002CE0                 lea     edx, [ebp+lParam]
.text$mn:00002CE3                 push    edx             ; lParam
.text$mn:00002CE4                 mov     eax, [ebp+var_30]
.text$mn:00002CE7                 mov     ecx, [eax+80h]
.text$mn:00002CED                 push    ecx             ; wParam
.text$mn:00002CEE                 push    133Ch           ; Msg
.text$mn:00002CF3                 mov     edx, [ebp+var_30]
.text$mn:00002CF6                 mov     eax, [edx+2Ch]
.text$mn:00002CF9                 push    eax             ; hWnd
.text$mn:00002CFA                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002D00                 cmp     [ebp+var_48], 0
.text$mn:00002D04                 jnz     short loc_2D0B
.text$mn:00002D06                 jmp     loc_2EC0
.text$mn:00002D0B ; ---------------------------------------------------------------------------
.text$mn:00002D0B
.text$mn:00002D0B loc_2D0B:                               ; CODE XREF: DockingCont::SelectTab(int)+134j
.text$mn:00002D0B                 push    0               ; nCmdShow
.text$mn:00002D0D                 mov     ecx, [ebp+var_48]
.text$mn:00002D10                 mov     edx, [ecx]
.text$mn:00002D12                 push    edx             ; hWnd
.text$mn:00002D13                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00002D19                 mov     [ebp+var_74], 41Fh
.text$mn:00002D20                 mov     eax, [ebp+var_30]
.text$mn:00002D23                 mov     ecx, [eax+0Ch]
.text$mn:00002D26                 mov     [ebp+var_7C], ecx
.text$mn:00002D29                 mov     [ebp+var_78], 0
.text$mn:00002D30                 lea     edx, [ebp+var_7C]
.text$mn:00002D33                 push    edx             ; lParam
.text$mn:00002D34                 mov     eax, [ebp+var_78]
.text$mn:00002D37                 push    eax             ; wParam
.text$mn:00002D38                 push    4Eh ; 'N'       ; Msg
.text$mn:00002D3A                 mov     ecx, [ebp+var_48]
.text$mn:00002D3D                 mov     edx, [ecx]
.text$mn:00002D3F                 push    edx             ; hWnd
.text$mn:00002D40                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002D46
.text$mn:00002D46 loc_2D46:                               ; CODE XREF: DockingCont::SelectTab(int)+10Ej
.text$mn:00002D46                 mov     eax, [ebp+var_30]
.text$mn:00002D49                 mov     ecx, [eax+2Ch]
.text$mn:00002D4C                 push    ecx             ; hWnd
.text$mn:00002D4D                 call    dword ptr ds:__imp__GetDC@4 ; GetDC(x)
.text$mn:00002D53                 mov     [ebp+hdc], eax
.text$mn:00002D56                 mov     edx, [ebp+var_30]
.text$mn:00002D59                 mov     eax, [edx+30h]
.text$mn:00002D5C                 push    eax             ; h
.text$mn:00002D5D                 mov     ecx, [ebp+hdc]
.text$mn:00002D60                 push    ecx             ; hdc
.text$mn:00002D61                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text$mn:00002D67                 mov     [ebp+var_3C], 0
.text$mn:00002D6E                 jmp     short loc_2D79
.text$mn:00002D70 ; ---------------------------------------------------------------------------
.text$mn:00002D70
.text$mn:00002D70 loc_2D70:                               ; CODE XREF: DockingCont::SelectTab(int)+1D8j
.text$mn:00002D70                                         ; DockingCont::SelectTab(int):loc_2DE4j
.text$mn:00002D70                 mov     edx, [ebp+var_3C]
.text$mn:00002D73                 add     edx, 1
.text$mn:00002D76                 mov     [ebp+var_3C], edx
.text$mn:00002D79
.text$mn:00002D79 loc_2D79:                               ; CODE XREF: DockingCont::SelectTab(int)+19Ej
.text$mn:00002D79                 mov     eax, [ebp+var_3C]
.text$mn:00002D7C                 cmp     eax, [ebp+var_68]
.text$mn:00002D7F                 jge     short loc_2DE6
.text$mn:00002D81                 mov     [ebp+lpString], 0
.text$mn:00002D88                 lea     ecx, [ebp+lParam]
.text$mn:00002D8B                 push    ecx             ; lParam
.text$mn:00002D8C                 mov     edx, [ebp+var_3C]
.text$mn:00002D8F                 push    edx             ; wParam
.text$mn:00002D90                 push    133Ch           ; Msg
.text$mn:00002D95                 mov     eax, [ebp+var_30]
.text$mn:00002D98                 mov     ecx, [eax+2Ch]
.text$mn:00002D9B                 push    ecx             ; hWnd
.text$mn:00002D9C                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002DA2                 cmp     [ebp+var_48], 0
.text$mn:00002DA6                 jnz     short loc_2DAA
.text$mn:00002DA8                 jmp     short loc_2D70
.text$mn:00002DAA ; ---------------------------------------------------------------------------
.text$mn:00002DAA
.text$mn:00002DAA loc_2DAA:                               ; CODE XREF: DockingCont::SelectTab(int)+1D6j
.text$mn:00002DAA                 mov     edx, [ebp+var_48]
.text$mn:00002DAD                 mov     eax, [edx+4]
.text$mn:00002DB0                 mov     [ebp+lpString], eax
.text$mn:00002DB3                 lea     ecx, [ebp+psizl]
.text$mn:00002DB6                 push    ecx             ; psizl
.text$mn:00002DB7                 mov     edx, [ebp+lpString]
.text$mn:00002DBA                 push    edx             ; lpString
.text$mn:00002DBB                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00002DC1                 push    eax             ; c
.text$mn:00002DC2                 mov     eax, [ebp+lpString]
.text$mn:00002DC5                 push    eax             ; lpString
.text$mn:00002DC6                 mov     ecx, [ebp+hdc]
.text$mn:00002DC9                 push    ecx             ; hdc
.text$mn:00002DCA                 call    dword ptr ds:__imp__GetTextExtentPoint32W@16 ; GetTextExtentPoint32W(x,x,x,x)
.text$mn:00002DD0                 mov     edx, [ebp+var_64]
.text$mn:00002DD3                 cmp     edx, [ebp+psizl._cx]
.text$mn:00002DD6                 jge     short loc_2DE4
.text$mn:00002DD8                 mov     eax, [ebp+psizl._cx]
.text$mn:00002DDB                 mov     [ebp+var_64], eax
.text$mn:00002DDE                 mov     ecx, [ebp+lpString]
.text$mn:00002DE1                 mov     [ebp+Str], ecx
.text$mn:00002DE4
.text$mn:00002DE4 loc_2DE4:                               ; CODE XREF: DockingCont::SelectTab(int)+206j
.text$mn:00002DE4                 jmp     short loc_2D70
.text$mn:00002DE6 ; ---------------------------------------------------------------------------
.text$mn:00002DE6
.text$mn:00002DE6 loc_2DE6:                               ; CODE XREF: DockingCont::SelectTab(int)+1AFj
.text$mn:00002DE6                 mov     edx, [ebp+hdc]
.text$mn:00002DE9                 push    edx             ; hDC
.text$mn:00002DEA                 mov     eax, [ebp+var_30]
.text$mn:00002DED                 mov     ecx, [eax+0Ch]
.text$mn:00002DF0                 push    ecx             ; hWnd
.text$mn:00002DF1                 call    dword ptr ds:__imp__ReleaseDC@8 ; ReleaseDC(x,x)
.text$mn:00002DF7                 mov     [ebp+lParam], 1
.text$mn:00002DFE                 mov     [ebp+var_34], 0
.text$mn:00002E05                 jmp     short loc_2E10
.text$mn:00002E07 ; ---------------------------------------------------------------------------
.text$mn:00002E07
.text$mn:00002E07 loc_2E07:                               ; CODE XREF: DockingCont::SelectTab(int)+2B7j
.text$mn:00002E07                 mov     edx, [ebp+var_34]
.text$mn:00002E0A                 add     edx, 1
.text$mn:00002E0D                 mov     [ebp+var_34], edx
.text$mn:00002E10
.text$mn:00002E10 loc_2E10:                               ; CODE XREF: DockingCont::SelectTab(int)+235j
.text$mn:00002E10                 mov     eax, [ebp+var_34]
.text$mn:00002E13                 cmp     eax, [ebp+var_68]
.text$mn:00002E16                 jge     short loc_2E8C
.text$mn:00002E18                 push    offset $SG125145 ; Str
.text$mn:00002E1D                 lea     ecx, [ebp+var_2C]
.text$mn:00002E20                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002E25                 mov     [ebp+var_4], 0
.text$mn:00002E2C                 mov     ecx, [ebp+var_34]
.text$mn:00002E2F                 cmp     ecx, [ebp+wParam]
.text$mn:00002E32                 jnz     short loc_2E53
.text$mn:00002E34                 cmp     [ebp+Str], 0
.text$mn:00002E38                 jz      short loc_2E53
.text$mn:00002E3A                 push    offset $SG125147 ; "    "
.text$mn:00002E3F                 lea     ecx, [ebp+var_2C]
.text$mn:00002E42                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00002E47                 mov     edx, [ebp+Str]
.text$mn:00002E4A                 push    edx             ; Str
.text$mn:00002E4B                 lea     ecx, [ebp+var_2C]
.text$mn:00002E4E                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00002E53
.text$mn:00002E53 loc_2E53:                               ; CODE XREF: DockingCont::SelectTab(int)+262j
.text$mn:00002E53                                         ; DockingCont::SelectTab(int)+268j
.text$mn:00002E53                 lea     ecx, [ebp+var_2C]
.text$mn:00002E56                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002E5B                 mov     [ebp+var_54], eax
.text$mn:00002E5E                 lea     eax, [ebp+lParam]
.text$mn:00002E61                 push    eax             ; lParam
.text$mn:00002E62                 mov     ecx, [ebp+var_34]
.text$mn:00002E65                 push    ecx             ; wParam
.text$mn:00002E66                 push    133Dh           ; Msg
.text$mn:00002E6B                 mov     edx, [ebp+var_30]
.text$mn:00002E6E                 mov     eax, [edx+2Ch]
.text$mn:00002E71                 push    eax             ; hWnd
.text$mn:00002E72                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002E78                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002E7F                 lea     ecx, [ebp+var_2C]
.text$mn:00002E82                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002E87                 jmp     loc_2E07
.text$mn:00002E8C ; ---------------------------------------------------------------------------
.text$mn:00002E8C
.text$mn:00002E8C loc_2E8C:                               ; CODE XREF: DockingCont::SelectTab(int)+246j
.text$mn:00002E8C                 push    0               ; lParam
.text$mn:00002E8E                 mov     ecx, [ebp+wParam]
.text$mn:00002E91                 push    ecx             ; wParam
.text$mn:00002E92                 push    130Ch           ; Msg
.text$mn:00002E97                 mov     edx, [ebp+var_30]
.text$mn:00002E9A                 mov     eax, [edx+2Ch]
.text$mn:00002E9D                 push    eax             ; hWnd
.text$mn:00002E9E                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002EA4                 mov     ecx, [ebp+var_30]
.text$mn:00002EA7                 mov     edx, [ebp+wParam]
.text$mn:00002EAA                 mov     [ecx+80h], edx
.text$mn:00002EB0                 mov     ecx, [ebp+var_30] ; this
.text$mn:00002EB3                 call    ?updateCaption@DockingCont@@IAE_NXZ ; DockingCont::updateCaption(void)
.text$mn:00002EB8                 mov     ecx, [ebp+var_30] ; this
.text$mn:00002EBB                 call    ?onSize@DockingCont@@IAEXXZ ; DockingCont::onSize(void)
.text$mn:00002EC0
.text$mn:00002EC0 loc_2EC0:                               ; CODE XREF: DockingCont::SelectTab(int)+2Fj
.text$mn:00002EC0                                         ; DockingCont::SelectTab(int)+AAj ...
.text$mn:00002EC0                 mov     ecx, [ebp+var_C]
.text$mn:00002EC3                 mov     large fs:0, ecx
.text$mn:00002ECA                 pop     ecx
.text$mn:00002ECB                 mov     ecx, [ebp+var_10]
.text$mn:00002ECE                 xor     ecx, ebp
.text$mn:00002ED0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002ED5                 mov     esp, ebp
.text$mn:00002ED7                 pop     ebp
.text$mn:00002ED8                 retn    4
.text$mn:00002ED8 ?SelectTab@DockingCont@@IAEXH@Z endp
.text$mn:00002ED8
.text$mn:00002ED8 ; ---------------------------------------------------------------------------
.text$mn:00002EDB                 align 10h
.text$mn:00002EE0
.text$mn:00002EE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00002EE0
.text$mn:00002EE0 ; Attributes: bp-based frame
.text$mn:00002EE0
.text$mn:00002EE0 ; int __thiscall DockingCont::hideToolbar(DockingCont *this, struct tTbData *, int)
.text$mn:00002EE0                 public ?hideToolbar@DockingCont@@IAEHPAUtTbData@@H@Z
.text$mn:00002EE0 ?hideToolbar@DockingCont@@IAEHPAUtTbData@@H@Z proc near
.text$mn:00002EE0                                         ; CODE XREF: DockingCont::showToolbar(tTbData *,int)+24p
.text$mn:00002EE0                                         ; DockingCont::runProcTab(HWND__ *,uint,uint,long)+25Fp ...
.text$mn:00002EE0
.text$mn:00002EE0 var_28          = dword ptr -28h
.text$mn:00002EE0 var_24          = dword ptr -24h
.text$mn:00002EE0 var_20          = dword ptr -20h
.text$mn:00002EE0 var_1C          = dword ptr -1Ch
.text$mn:00002EE0 var_18          = dword ptr -18h
.text$mn:00002EE0 var_14          = dword ptr -14h
.text$mn:00002EE0 var_10          = dword ptr -10h
.text$mn:00002EE0 var_C           = dword ptr -0Ch
.text$mn:00002EE0 wParam          = dword ptr -8
.text$mn:00002EE0 var_4           = dword ptr -4
.text$mn:00002EE0 arg_0           = dword ptr  8
.text$mn:00002EE0 arg_4           = dword ptr  0Ch
.text$mn:00002EE0
.text$mn:00002EE0                 push    ebp
.text$mn:00002EE1                 mov     ebp, esp
.text$mn:00002EE3                 sub     esp, 28h
.text$mn:00002EE6                 mov     [ebp+var_4], ecx
.text$mn:00002EE9                 mov     eax, [ebp+arg_0]
.text$mn:00002EEC                 push    eax             ; struct tTbData *
.text$mn:00002EED                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002EF0                 call    ?SearchPosInTab@DockingCont@@IAEHPAUtTbData@@@Z ; DockingCont::SearchPosInTab(tTbData *)
.text$mn:00002EF5                 mov     [ebp+wParam], eax
.text$mn:00002EF8                 push    0               ; lParam
.text$mn:00002EFA                 mov     ecx, [ebp+wParam]
.text$mn:00002EFD                 push    ecx             ; wParam
.text$mn:00002EFE                 push    1308h           ; Msg
.text$mn:00002F03                 mov     edx, [ebp+var_4]
.text$mn:00002F06                 mov     eax, [edx+2Ch]
.text$mn:00002F09                 push    eax             ; hWnd
.text$mn:00002F0A                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002F10                 cmp     eax, 1
.text$mn:00002F13                 jnz     loc_2FD8
.text$mn:00002F19                 push    0               ; lParam
.text$mn:00002F1B                 push    0               ; wParam
.text$mn:00002F1D                 push    1304h           ; Msg
.text$mn:00002F22                 mov     ecx, [ebp+var_4]
.text$mn:00002F25                 mov     edx, [ecx+2Ch]
.text$mn:00002F28                 push    edx             ; hWnd
.text$mn:00002F29                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002F2F                 mov     [ebp+var_C], eax
.text$mn:00002F32                 cmp     [ebp+var_C], 0
.text$mn:00002F36                 jz      short loc_2F9A
.text$mn:00002F38                 mov     [ebp+var_28], 0
.text$mn:00002F3F                 xor     eax, eax
.text$mn:00002F41                 mov     [ebp+var_24], eax
.text$mn:00002F44                 mov     [ebp+var_20], eax
.text$mn:00002F47                 mov     [ebp+var_1C], eax
.text$mn:00002F4A                 mov     [ebp+var_18], eax
.text$mn:00002F4D                 mov     [ebp+var_14], eax
.text$mn:00002F50                 mov     [ebp+var_10], eax
.text$mn:00002F53                 mov     [ebp+var_28], 8
.text$mn:00002F5A                 mov     ecx, [ebp+wParam]
.text$mn:00002F5D                 cmp     ecx, [ebp+var_C]
.text$mn:00002F60                 jnz     short loc_2F6B
.text$mn:00002F62                 mov     edx, [ebp+wParam]
.text$mn:00002F65                 sub     edx, 1
.text$mn:00002F68                 mov     [ebp+wParam], edx
.text$mn:00002F6B
.text$mn:00002F6B loc_2F6B:                               ; CODE XREF: DockingCont::hideToolbar(tTbData *,int)+80j
.text$mn:00002F6B                 mov     eax, [ebp+var_4]
.text$mn:00002F6E                 mov     ecx, [ebp+wParam]
.text$mn:00002F71                 mov     [eax+80h], ecx
.text$mn:00002F77                 mov     edx, [ebp+wParam]
.text$mn:00002F7A                 push    edx             ; int
.text$mn:00002F7B                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002F7E                 call    ?SelectTab@DockingCont@@IAEXH@Z ; DockingCont::SelectTab(int)
.text$mn:00002F83                 cmp     [ebp+var_C], 1
.text$mn:00002F87                 jnz     short loc_2F98
.text$mn:00002F89                 push    0               ; nCmdShow
.text$mn:00002F8B                 mov     eax, [ebp+var_4]
.text$mn:00002F8E                 mov     ecx, [eax+2Ch]
.text$mn:00002F91                 push    ecx             ; hWnd
.text$mn:00002F92                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00002F98
.text$mn:00002F98 loc_2F98:                               ; CODE XREF: DockingCont::hideToolbar(tTbData *,int)+A7j
.text$mn:00002F98                 jmp     short loc_2FC4
.text$mn:00002F9A ; ---------------------------------------------------------------------------
.text$mn:00002F9A
.text$mn:00002F9A loc_2F9A:                               ; CODE XREF: DockingCont::hideToolbar(tTbData *,int)+56j
.text$mn:00002F9A                 push    0               ; bool
.text$mn:00002F9C                 push    0               ; bool
.text$mn:00002F9E                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002FA1                 call    ?doDialog@DockingCont@@QAEX_N0@Z ; DockingCont::doDialog(bool,bool)
.text$mn:00002FA6                 mov     edx, [ebp+var_4]
.text$mn:00002FA9                 movzx   eax, byte ptr [edx+24h]
.text$mn:00002FAD                 test    eax, eax
.text$mn:00002FAF                 jnz     short loc_2FC4
.text$mn:00002FB1                 push    0               ; lParam
.text$mn:00002FB3                 push    0               ; wParam
.text$mn:00002FB5                 push    5               ; Msg
.text$mn:00002FB7                 mov     ecx, [ebp+var_4]
.text$mn:00002FBA                 mov     edx, [ecx+8]
.text$mn:00002FBD                 push    edx             ; hWnd
.text$mn:00002FBE                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002FC4
.text$mn:00002FC4 loc_2FC4:                               ; CODE XREF: DockingCont::hideToolbar(tTbData *,int):loc_2F98j
.text$mn:00002FC4                                         ; DockingCont::hideToolbar(tTbData *,int)+CFj
.text$mn:00002FC4                 cmp     [ebp+arg_4], 1
.text$mn:00002FC8                 jnz     short loc_2FD8
.text$mn:00002FCA                 push    0               ; nCmdShow
.text$mn:00002FCC                 mov     eax, [ebp+arg_0]
.text$mn:00002FCF                 mov     ecx, [eax]
.text$mn:00002FD1                 push    ecx             ; hWnd
.text$mn:00002FD2                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00002FD8
.text$mn:00002FD8 loc_2FD8:                               ; CODE XREF: DockingCont::hideToolbar(tTbData *,int)+33j
.text$mn:00002FD8                                         ; DockingCont::hideToolbar(tTbData *,int)+E8j
.text$mn:00002FD8                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002FDB                 call    ?onSize@DockingCont@@IAEXXZ ; DockingCont::onSize(void)
.text$mn:00002FE0                 mov     eax, [ebp+wParam]
.text$mn:00002FE3                 mov     esp, ebp
.text$mn:00002FE5                 pop     ebp
.text$mn:00002FE6                 retn    8
.text$mn:00002FE6 ?hideToolbar@DockingCont@@IAEHPAUtTbData@@H@Z endp
.text$mn:00002FE6
.text$mn:00002FE6 ; ---------------------------------------------------------------------------
.text$mn:00002FE9                 align 10h
.text$mn:00002FF0
.text$mn:00002FF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00002FF0
.text$mn:00002FF0 ; Attributes: bp-based frame
.text$mn:00002FF0
.text$mn:00002FF0 ; void __thiscall DockingCont::viewToolbar(DockingCont *this, struct tTbData *)
.text$mn:00002FF0                 public ?viewToolbar@DockingCont@@IAEXPAUtTbData@@@Z
.text$mn:00002FF0 ?viewToolbar@DockingCont@@IAEXPAUtTbData@@@Z proc near
.text$mn:00002FF0                                         ; CODE XREF: DockingCont::createToolbar(tTbData)+ADp
.text$mn:00002FF0                                         ; DockingCont::showToolbar(tTbData *,int)+14p
.text$mn:00002FF0
.text$mn:00002FF0 lParam          = dword ptr -2Ch
.text$mn:00002FF0 var_28          = dword ptr -28h
.text$mn:00002FF0 var_24          = dword ptr -24h
.text$mn:00002FF0 var_20          = dword ptr -20h
.text$mn:00002FF0 var_1C          = dword ptr -1Ch
.text$mn:00002FF0 var_18          = dword ptr -18h
.text$mn:00002FF0 var_14          = dword ptr -14h
.text$mn:00002FF0 wParam          = dword ptr -10h
.text$mn:00002FF0 var_C           = dword ptr -0Ch
.text$mn:00002FF0 var_8           = dword ptr -8
.text$mn:00002FF0 var_4           = dword ptr -4
.text$mn:00002FF0 arg_0           = dword ptr  8
.text$mn:00002FF0
.text$mn:00002FF0                 push    ebp
.text$mn:00002FF1                 mov     ebp, esp
.text$mn:00002FF3                 sub     esp, 2Ch
.text$mn:00002FF6                 mov     [ebp+var_4], ecx
.text$mn:00002FF9                 mov     [ebp+lParam], 0
.text$mn:00003000                 xor     eax, eax
.text$mn:00003002                 mov     [ebp+var_28], eax
.text$mn:00003005                 mov     [ebp+var_24], eax
.text$mn:00003008                 mov     [ebp+var_20], eax
.text$mn:0000300B                 mov     [ebp+var_1C], eax
.text$mn:0000300E                 mov     [ebp+var_18], eax
.text$mn:00003011                 mov     [ebp+var_14], eax
.text$mn:00003014                 push    0               ; lParam
.text$mn:00003016                 push    0               ; wParam
.text$mn:00003018                 push    1304h           ; Msg
.text$mn:0000301D                 mov     ecx, [ebp+var_4]
.text$mn:00003020                 mov     edx, [ecx+2Ch]
.text$mn:00003023                 push    edx             ; hWnd
.text$mn:00003024                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000302A                 mov     [ebp+var_8], eax
.text$mn:0000302D                 cmp     [ebp+var_8], 0
.text$mn:00003031                 jle     short loc_3078
.text$mn:00003033                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003036                 call    ?getActiveTb@DockingCont@@QAEHXZ ; DockingCont::getActiveTb(void)
.text$mn:0000303B                 mov     [ebp+wParam], eax
.text$mn:0000303E                 mov     [ebp+lParam], 8
.text$mn:00003045                 lea     eax, [ebp+lParam]
.text$mn:00003048                 push    eax             ; lParam
.text$mn:00003049                 mov     ecx, [ebp+wParam]
.text$mn:0000304C                 push    ecx             ; wParam
.text$mn:0000304D                 push    133Ch           ; Msg
.text$mn:00003052                 mov     edx, [ebp+var_4]
.text$mn:00003055                 mov     eax, [edx+2Ch]
.text$mn:00003058                 push    eax             ; hWnd
.text$mn:00003059                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000305F                 cmp     [ebp+var_14], 0
.text$mn:00003063                 jnz     short loc_306A
.text$mn:00003065                 jmp     loc_3123
.text$mn:0000306A ; ---------------------------------------------------------------------------
.text$mn:0000306A
.text$mn:0000306A loc_306A:                               ; CODE XREF: DockingCont::viewToolbar(tTbData *)+73j
.text$mn:0000306A                 push    0               ; nCmdShow
.text$mn:0000306C                 mov     ecx, [ebp+var_14]
.text$mn:0000306F                 mov     edx, [ecx]
.text$mn:00003071                 push    edx             ; hWnd
.text$mn:00003072                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00003078
.text$mn:00003078 loc_3078:                               ; CODE XREF: DockingCont::viewToolbar(tTbData *)+41j
.text$mn:00003078                 mov     eax, [ebp+arg_0]
.text$mn:0000307B                 push    eax             ; struct tTbData *
.text$mn:0000307C                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000307F                 call    ?SearchPosInTab@DockingCont@@IAEHPAUtTbData@@@Z ; DockingCont::SearchPosInTab(tTbData *)
.text$mn:00003084                 mov     [ebp+var_C], eax
.text$mn:00003087                 mov     [ebp+lParam], 8
.text$mn:0000308E                 mov     ecx, [ebp+arg_0]
.text$mn:00003091                 mov     [ebp+var_14], ecx
.text$mn:00003094                 cmp     [ebp+var_C], 0FFFFFFFFh
.text$mn:00003098                 jnz     short loc_30C2
.text$mn:0000309A                 lea     edx, [ebp+lParam]
.text$mn:0000309D                 push    edx             ; lParam
.text$mn:0000309E                 mov     eax, [ebp+var_8]
.text$mn:000030A1                 push    eax             ; wParam
.text$mn:000030A2                 push    133Eh           ; Msg
.text$mn:000030A7                 mov     ecx, [ebp+var_4]
.text$mn:000030AA                 mov     edx, [ecx+2Ch]
.text$mn:000030AD                 push    edx             ; hWnd
.text$mn:000030AE                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000030B4                 mov     eax, [ebp+var_8]
.text$mn:000030B7                 push    eax             ; int
.text$mn:000030B8                 mov     ecx, [ebp+var_4] ; this
.text$mn:000030BB                 call    ?SelectTab@DockingCont@@IAEXH@Z ; DockingCont::SelectTab(int)
.text$mn:000030C0                 jmp     short loc_30E8
.text$mn:000030C2 ; ---------------------------------------------------------------------------
.text$mn:000030C2
.text$mn:000030C2 loc_30C2:                               ; CODE XREF: DockingCont::viewToolbar(tTbData *)+A8j
.text$mn:000030C2                 lea     ecx, [ebp+lParam]
.text$mn:000030C5                 push    ecx             ; lParam
.text$mn:000030C6                 mov     edx, [ebp+var_C]
.text$mn:000030C9                 push    edx             ; wParam
.text$mn:000030CA                 push    133Dh           ; Msg
.text$mn:000030CF                 mov     eax, [ebp+var_4]
.text$mn:000030D2                 mov     ecx, [eax+2Ch]
.text$mn:000030D5                 push    ecx             ; hWnd
.text$mn:000030D6                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000030DC                 mov     edx, [ebp+var_C]
.text$mn:000030DF                 push    edx             ; int
.text$mn:000030E0                 mov     ecx, [ebp+var_4] ; this
.text$mn:000030E3                 call    ?SelectTab@DockingCont@@IAEXH@Z ; DockingCont::SelectTab(int)
.text$mn:000030E8
.text$mn:000030E8 loc_30E8:                               ; CODE XREF: DockingCont::viewToolbar(tTbData *)+D0j
.text$mn:000030E8                 mov     eax, [ebp+var_4]
.text$mn:000030EB                 mov     edx, [eax]
.text$mn:000030ED                 mov     ecx, [ebp+var_4]
.text$mn:000030F0                 mov     eax, [edx+2Ch]
.text$mn:000030F3                 call    eax
.text$mn:000030F5                 movzx   ecx, al
.text$mn:000030F8                 test    ecx, ecx
.text$mn:000030FA                 jnz     short loc_311B
.text$mn:000030FC                 push    0               ; bool
.text$mn:000030FE                 push    1               ; bool
.text$mn:00003100                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003103                 call    ?doDialog@DockingCont@@QAEX_N0@Z ; DockingCont::doDialog(bool,bool)
.text$mn:00003108                 push    0               ; lParam
.text$mn:0000310A                 push    0               ; wParam
.text$mn:0000310C                 push    5               ; Msg
.text$mn:0000310E                 mov     edx, [ebp+var_4]
.text$mn:00003111                 mov     eax, [edx+8]
.text$mn:00003114                 push    eax             ; hWnd
.text$mn:00003115                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000311B
.text$mn:0000311B loc_311B:                               ; CODE XREF: DockingCont::viewToolbar(tTbData *)+10Aj
.text$mn:0000311B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000311E                 call    ?onSize@DockingCont@@IAEXXZ ; DockingCont::onSize(void)
.text$mn:00003123
.text$mn:00003123 loc_3123:                               ; CODE XREF: DockingCont::viewToolbar(tTbData *)+75j
.text$mn:00003123                 mov     esp, ebp
.text$mn:00003125                 pop     ebp
.text$mn:00003126                 retn    4
.text$mn:00003126 ?viewToolbar@DockingCont@@IAEXPAUtTbData@@@Z endp
.text$mn:00003126
.text$mn:00003126 ; ---------------------------------------------------------------------------
.text$mn:00003129                 align 10h
.text$mn:00003130
.text$mn:00003130 ; =============== S U B R O U T I N E =======================================
.text$mn:00003130
.text$mn:00003130 ; Attributes: bp-based frame
.text$mn:00003130
.text$mn:00003130 ; bool __thiscall DockingCont::updateCaption(DockingCont *__hidden this)
.text$mn:00003130                 public ?updateCaption@DockingCont@@IAE_NXZ
.text$mn:00003130 ?updateCaption@DockingCont@@IAE_NXZ proc near
.text$mn:00003130                                         ; CODE XREF: DockingCont::SelectTab(int)+2E3p
.text$mn:00003130
.text$mn:00003130 lParam          = dword ptr -24h
.text$mn:00003130 var_20          = dword ptr -20h
.text$mn:00003130 var_1C          = dword ptr -1Ch
.text$mn:00003130 var_18          = dword ptr -18h
.text$mn:00003130 var_14          = dword ptr -14h
.text$mn:00003130 var_10          = dword ptr -10h
.text$mn:00003130 var_C           = dword ptr -0Ch
.text$mn:00003130 wParam          = dword ptr -8
.text$mn:00003130 var_4           = dword ptr -4
.text$mn:00003130
.text$mn:00003130                 push    ebp
.text$mn:00003131                 mov     ebp, esp
.text$mn:00003133                 sub     esp, 24h
.text$mn:00003136                 mov     [ebp+var_4], ecx
.text$mn:00003139                 mov     eax, [ebp+var_4]
.text$mn:0000313C                 cmp     dword ptr [eax+2Ch], 0
.text$mn:00003140                 jnz     short loc_3149
.text$mn:00003142                 xor     al, al
.text$mn:00003144                 jmp     loc_323C
.text$mn:00003149 ; ---------------------------------------------------------------------------
.text$mn:00003149
.text$mn:00003149 loc_3149:                               ; CODE XREF: DockingCont::updateCaption(void)+10j
.text$mn:00003149                 mov     [ebp+lParam], 0
.text$mn:00003150                 xor     ecx, ecx
.text$mn:00003152                 mov     [ebp+var_20], ecx
.text$mn:00003155                 mov     [ebp+var_1C], ecx
.text$mn:00003158                 mov     [ebp+var_18], ecx
.text$mn:0000315B                 mov     [ebp+var_14], ecx
.text$mn:0000315E                 mov     [ebp+var_10], ecx
.text$mn:00003161                 mov     [ebp+var_C], ecx
.text$mn:00003164                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003167                 call    ?getActiveTb@DockingCont@@QAEHXZ ; DockingCont::getActiveTb(void)
.text$mn:0000316C                 mov     [ebp+wParam], eax
.text$mn:0000316F                 cmp     [ebp+wParam], 0
.text$mn:00003173                 jge     short loc_317C
.text$mn:00003175                 xor     al, al
.text$mn:00003177                 jmp     loc_323C
.text$mn:0000317C ; ---------------------------------------------------------------------------
.text$mn:0000317C
.text$mn:0000317C loc_317C:                               ; CODE XREF: DockingCont::updateCaption(void)+43j
.text$mn:0000317C                 mov     [ebp+lParam], 8
.text$mn:00003183                 lea     edx, [ebp+lParam]
.text$mn:00003186                 push    edx             ; lParam
.text$mn:00003187                 mov     eax, [ebp+wParam]
.text$mn:0000318A                 push    eax             ; wParam
.text$mn:0000318B                 push    133Ch           ; Msg
.text$mn:00003190                 mov     ecx, [ebp+var_4]
.text$mn:00003193                 mov     edx, [ecx+2Ch]
.text$mn:00003196                 push    edx             ; hWnd
.text$mn:00003197                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000319D                 cmp     [ebp+var_C], 0
.text$mn:000031A1                 jnz     short loc_31AA
.text$mn:000031A3                 xor     al, al
.text$mn:000031A5                 jmp     loc_323C
.text$mn:000031AA ; ---------------------------------------------------------------------------
.text$mn:000031AA
.text$mn:000031AA loc_31AA:                               ; CODE XREF: DockingCont::updateCaption(void)+71j
.text$mn:000031AA                 mov     eax, [ebp+var_C]
.text$mn:000031AD                 mov     ecx, [eax+4]
.text$mn:000031B0                 push    ecx             ; Str
.text$mn:000031B1                 mov     ecx, [ebp+var_4]
.text$mn:000031B4                 add     ecx, 38h ; '8'
.text$mn:000031B7                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:000031BC                 mov     edx, [ebp+var_C]
.text$mn:000031BF                 mov     eax, [edx+0Ch]
.text$mn:000031C2                 and     eax, 4
.text$mn:000031C5                 jz      short loc_31FA
.text$mn:000031C7                 mov     ecx, [ebp+var_C]
.text$mn:000031CA                 mov     edx, [ecx+14h]
.text$mn:000031CD                 push    edx             ; lpString
.text$mn:000031CE                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:000031D4                 test    eax, eax
.text$mn:000031D6                 jz      short loc_31FA
.text$mn:000031D8                 push    offset $SG125163 ; " - "
.text$mn:000031DD                 mov     ecx, [ebp+var_4]
.text$mn:000031E0                 add     ecx, 38h ; '8'
.text$mn:000031E3                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:000031E8                 mov     eax, [ebp+var_C]
.text$mn:000031EB                 mov     ecx, [eax+14h]
.text$mn:000031EE                 push    ecx             ; Str
.text$mn:000031EF                 mov     ecx, [ebp+var_4]
.text$mn:000031F2                 add     ecx, 38h ; '8'
.text$mn:000031F5                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:000031FA
.text$mn:000031FA loc_31FA:                               ; CODE XREF: DockingCont::updateCaption(void)+95j
.text$mn:000031FA                                         ; DockingCont::updateCaption(void)+A6j
.text$mn:000031FA                 mov     edx, [ebp+var_4]
.text$mn:000031FD                 movzx   eax, byte ptr [edx+24h]
.text$mn:00003201                 cmp     eax, 1
.text$mn:00003204                 jnz     short loc_3221
.text$mn:00003206                 mov     ecx, [ebp+var_4]
.text$mn:00003209                 add     ecx, 38h ; '8'
.text$mn:0000320C                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00003211                 push    eax             ; lpString
.text$mn:00003212                 mov     ecx, [ebp+var_4]
.text$mn:00003215                 mov     edx, [ecx+0Ch]
.text$mn:00003218                 push    edx             ; hWnd
.text$mn:00003219                 call    dword ptr ds:__imp__SetWindowTextW@8 ; SetWindowTextW(x,x)
.text$mn:0000321F                 jmp     short loc_323A
.text$mn:00003221 ; ---------------------------------------------------------------------------
.text$mn:00003221
.text$mn:00003221 loc_3221:                               ; CODE XREF: DockingCont::updateCaption(void)+D4j
.text$mn:00003221                 mov     ecx, [ebp+var_4]
.text$mn:00003224                 add     ecx, 38h ; '8'
.text$mn:00003227                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000322C                 push    eax             ; lpString
.text$mn:0000322D                 mov     eax, [ebp+var_4]
.text$mn:00003230                 mov     ecx, [eax+28h]
.text$mn:00003233                 push    ecx             ; hWnd
.text$mn:00003234                 call    dword ptr ds:__imp__SetWindowTextW@8 ; SetWindowTextW(x,x)
.text$mn:0000323A
.text$mn:0000323A loc_323A:                               ; CODE XREF: DockingCont::updateCaption(void)+EFj
.text$mn:0000323A                 mov     al, 1
.text$mn:0000323C
.text$mn:0000323C loc_323C:                               ; CODE XREF: DockingCont::updateCaption(void)+14j
.text$mn:0000323C                                         ; DockingCont::updateCaption(void)+47j ...
.text$mn:0000323C                 mov     esp, ebp
.text$mn:0000323E                 pop     ebp
.text$mn:0000323F                 retn
.text$mn:0000323F ?updateCaption@DockingCont@@IAE_NXZ endp
.text$mn:0000323F
.text$mn:00003240
.text$mn:00003240 ; =============== S U B R O U T I N E =======================================
.text$mn:00003240
.text$mn:00003240 ; Attributes: bp-based frame
.text$mn:00003240
.text$mn:00003240 ; __int32 __thiscall DockingCont::NotifyParent(DockingCont *this, unsigned int)
.text$mn:00003240                 public ?NotifyParent@DockingCont@@IAEJI@Z
.text$mn:00003240 ?NotifyParent@DockingCont@@IAEJI@Z proc near
.text$mn:00003240                                         ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+33Bp
.text$mn:00003240                                         ; DockingCont::runProcTab(HWND__ *,uint,uint,long)+175p ...
.text$mn:00003240
.text$mn:00003240 lParam          = dword ptr -4
.text$mn:00003240 Msg             = dword ptr  8
.text$mn:00003240
.text$mn:00003240                 push    ebp
.text$mn:00003241                 mov     ebp, esp
.text$mn:00003243                 push    ecx
.text$mn:00003244                 mov     [ebp+lParam], ecx
.text$mn:00003247                 mov     eax, [ebp+lParam]
.text$mn:0000324A                 push    eax             ; lParam
.text$mn:0000324B                 push    0               ; wParam
.text$mn:0000324D                 mov     ecx, [ebp+Msg]
.text$mn:00003250                 push    ecx             ; Msg
.text$mn:00003251                 mov     edx, [ebp+lParam]
.text$mn:00003254                 mov     eax, [edx+8]
.text$mn:00003257                 push    eax             ; hWnd
.text$mn:00003258                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000325E                 mov     esp, ebp
.text$mn:00003260                 pop     ebp
.text$mn:00003261                 retn    4
.text$mn:00003261 ?NotifyParent@DockingCont@@IAEJI@Z endp
.text$mn:00003261
.text$mn:00003261 ; ---------------------------------------------------------------------------
.text$mn:00003264                 align 10h
.text$mn:00003270
.text$mn:00003270 ; =============== S U B R O U T I N E =======================================
.text$mn:00003270
.text$mn:00003270 ; Attributes: bp-based frame
.text$mn:00003270
.text$mn:00003270 ; LRESULT __stdcall hookProcMouse(int code, WPARAM wParam, LPARAM lParam)
.text$mn:00003270 ?hookProcMouse@@YGJIIJ@Z proc near      ; DATA XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+15Do
.text$mn:00003270
.text$mn:00003270 var_4           = dword ptr -4
.text$mn:00003270 code            = dword ptr  8
.text$mn:00003270 wParam          = dword ptr  0Ch
.text$mn:00003270 lParam          = dword ptr  10h
.text$mn:00003270
.text$mn:00003270                 push    ebp
.text$mn:00003271                 mov     ebp, esp
.text$mn:00003273                 push    ecx
.text$mn:00003274                 cmp     [ebp+code], 0
.text$mn:00003278                 jnb     short loc_3296
.text$mn:0000327A                 mov     eax, [ebp+lParam]
.text$mn:0000327D                 push    eax             ; lParam
.text$mn:0000327E                 mov     ecx, [ebp+wParam]
.text$mn:00003281                 push    ecx             ; wParam
.text$mn:00003282                 mov     edx, [ebp+code]
.text$mn:00003285                 push    edx             ; nCode
.text$mn:00003286                 mov     eax, ds:_hookMouse
.text$mn:0000328B                 push    eax             ; hhk
.text$mn:0000328C                 call    dword ptr ds:__imp__CallNextHookEx@16 ; CallNextHookEx(x,x,x,x)
.text$mn:00003292                 xor     eax, eax
.text$mn:00003294                 jmp     short loc_3310
.text$mn:00003296 ; ---------------------------------------------------------------------------
.text$mn:00003296
.text$mn:00003296 loc_3296:                               ; CODE XREF: hookProcMouse(uint,uint,long)+8j
.text$mn:00003296                 mov     ecx, [ebp+wParam]
.text$mn:00003299                 mov     [ebp+var_4], ecx
.text$mn:0000329C                 cmp     [ebp+var_4], 200h
.text$mn:000032A3                 ja      short loc_32C2
.text$mn:000032A5                 cmp     [ebp+var_4], 200h
.text$mn:000032AC                 jz      short loc_32CD
.text$mn:000032AE                 cmp     [ebp+var_4], 0A0h ; 'Ã¡'
.text$mn:000032B5                 jz      short loc_32CD
.text$mn:000032B7                 cmp     [ebp+var_4], 0A2h ; 'Ã³'
.text$mn:000032BE                 jz      short loc_32E3
.text$mn:000032C0                 jmp     short loc_32F8
.text$mn:000032C2 ; ---------------------------------------------------------------------------
.text$mn:000032C2
.text$mn:000032C2 loc_32C2:                               ; CODE XREF: hookProcMouse(uint,uint,long)+33j
.text$mn:000032C2                 cmp     [ebp+var_4], 202h
.text$mn:000032C9                 jz      short loc_32E3
.text$mn:000032CB                 jmp     short loc_32F8
.text$mn:000032CD ; ---------------------------------------------------------------------------
.text$mn:000032CD
.text$mn:000032CD loc_32CD:                               ; CODE XREF: hookProcMouse(uint,uint,long)+3Cj
.text$mn:000032CD                                         ; hookProcMouse(uint,uint,long)+45j
.text$mn:000032CD                 push    0               ; lParam
.text$mn:000032CF                 push    0               ; wParam
.text$mn:000032D1                 mov     edx, [ebp+wParam]
.text$mn:000032D4                 push    edx             ; Msg
.text$mn:000032D5                 mov     eax, ds:_hWndServer
.text$mn:000032DA                 push    eax             ; hWnd
.text$mn:000032DB                 call    dword ptr ds:__imp__PostMessageW@16 ; PostMessageW(x,x,x,x)
.text$mn:000032E1                 jmp     short loc_32F8
.text$mn:000032E3 ; ---------------------------------------------------------------------------
.text$mn:000032E3
.text$mn:000032E3 loc_32E3:                               ; CODE XREF: hookProcMouse(uint,uint,long)+4Ej
.text$mn:000032E3                                         ; hookProcMouse(uint,uint,long)+59j
.text$mn:000032E3                 push    0               ; lParam
.text$mn:000032E5                 push    0               ; wParam
.text$mn:000032E7                 mov     ecx, [ebp+wParam]
.text$mn:000032EA                 push    ecx             ; Msg
.text$mn:000032EB                 mov     edx, ds:_hWndServer
.text$mn:000032F1                 push    edx             ; hWnd
.text$mn:000032F2                 call    dword ptr ds:__imp__PostMessageW@16 ; PostMessageW(x,x,x,x)
.text$mn:000032F8
.text$mn:000032F8 loc_32F8:                               ; CODE XREF: hookProcMouse(uint,uint,long)+50j
.text$mn:000032F8                                         ; hookProcMouse(uint,uint,long)+5Bj ...
.text$mn:000032F8                 mov     eax, [ebp+lParam]
.text$mn:000032FB                 push    eax             ; lParam
.text$mn:000032FC                 mov     ecx, [ebp+wParam]
.text$mn:000032FF                 push    ecx             ; wParam
.text$mn:00003300                 mov     edx, [ebp+code]
.text$mn:00003303                 push    edx             ; nCode
.text$mn:00003304                 mov     eax, ds:_hookMouse
.text$mn:00003309                 push    eax             ; hhk
.text$mn:0000330A                 call    dword ptr ds:__imp__CallNextHookEx@16 ; CallNextHookEx(x,x,x,x)
.text$mn:00003310
.text$mn:00003310 loc_3310:                               ; CODE XREF: hookProcMouse(uint,uint,long)+24j
.text$mn:00003310                 mov     esp, ebp
.text$mn:00003312                 pop     ebp
.text$mn:00003313                 retn    0Ch
.text$mn:00003313 ?hookProcMouse@@YGJIIJ@Z endp
.text$mn:00003313
.text$mn:00003313 ; ---------------------------------------------------------------------------
.text$mn:00003316                 align 4
.text$mn:00003316 _text$mn        ends
.text$mn:00003316
.text$x:00003318 ; ===========================================================================
.text$x:00003318
.text$x:00003318 ; Segment type: Pure code
.text$x:00003318 ; Segment permissions: Read/Execute
.text$x:00003318 _text$x         segment para public 'CODE' use32
.text$x:00003318                 assume cs:_text$x
.text$x:00003318                 ;org 3318h
.text$x:00003318                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003318
.text$x:00003318 ; =============== S U B R O U T I N E =======================================
.text$x:00003318
.text$x:00003318
.text$x:00003318 __unwindfunclet$??0DockingCont@@QAE@XZ$0 proc near
.text$x:00003318                                         ; DATA XREF: .xdata$x:00008B4Co
.text$x:00003318                 mov     ecx, [ebp-10h]  ; this
.text$x:0000331B                 jmp     ??1StaticDialog@@UAE@XZ ; StaticDialog::~StaticDialog(void)
.text$x:0000331B __unwindfunclet$??0DockingCont@@QAE@XZ$0 endp
.text$x:0000331B
.text$x:00003320
.text$x:00003320 ; =============== S U B R O U T I N E =======================================
.text$x:00003320
.text$x:00003320
.text$x:00003320 __unwindfunclet$??0DockingCont@@QAE@XZ$1 proc near
.text$x:00003320                                         ; DATA XREF: .xdata$x:00008B54o
.text$x:00003320                 mov     ecx, [ebp-10h]
.text$x:00003323                 add     ecx, 38h ; '8'
.text$x:00003326                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003326 __unwindfunclet$??0DockingCont@@QAE@XZ$1 endp
.text$x:00003326
.text$x:0000332B
.text$x:0000332B ; =============== S U B R O U T I N E =======================================
.text$x:0000332B
.text$x:0000332B
.text$x:0000332B __unwindfunclet$??0DockingCont@@QAE@XZ$2 proc near
.text$x:0000332B                                         ; DATA XREF: .xdata$x:00008B5Co
.text$x:0000332B                 mov     ecx, [ebp-10h]
.text$x:0000332E                 add     ecx, 9Ch ; 'Â£'
.text$x:00003334                 jmp     ??1?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ ; std::vector<tTbData *,std::allocator<tTbData *>>::~vector<tTbData *,std::allocator<tTbData *>>(void)
.text$x:00003334 __unwindfunclet$??0DockingCont@@QAE@XZ$2 endp
.text$x:00003334
.text$x:00003339
.text$x:00003339 ; =============== S U B R O U T I N E =======================================
.text$x:00003339
.text$x:00003339
.text$x:00003339 __ehhandler$??0DockingCont@@QAE@XZ proc near
.text$x:00003339                                         ; DATA XREF: DockingCont::DockingCont(void)+5o
.text$x:00003339
.text$x:00003339 arg_4           = dword ptr  8
.text$x:00003339
.text$x:00003339                 mov     edx, [esp+arg_4]
.text$x:0000333D                 lea     eax, [edx+0Ch]
.text$x:00003340                 mov     ecx, [edx-8]
.text$x:00003343                 xor     ecx, eax
.text$x:00003345                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000334A                 mov     eax, offset __ehfuncinfo$??0DockingCont@@QAE@XZ
.text$x:0000334F                 jmp     ___CxxFrameHandler3
.text$x:0000334F __ehhandler$??0DockingCont@@QAE@XZ endp
.text$x:0000334F
.text$x:00003354
.text$x:00003354 ; =============== S U B R O U T I N E =======================================
.text$x:00003354
.text$x:00003354
.text$x:00003354 __unwindfunclet$??1DockingCont@@UAE@XZ$0 proc near
.text$x:00003354                                         ; DATA XREF: .xdata$x:00008B34o
.text$x:00003354                 mov     ecx, [ebp-10h]  ; this
.text$x:00003357                 jmp     ??1StaticDialog@@UAE@XZ ; StaticDialog::~StaticDialog(void)
.text$x:00003357 __unwindfunclet$??1DockingCont@@UAE@XZ$0 endp
.text$x:00003357
.text$x:0000335C
.text$x:0000335C ; =============== S U B R O U T I N E =======================================
.text$x:0000335C
.text$x:0000335C
.text$x:0000335C __unwindfunclet$??1DockingCont@@UAE@XZ$1 proc near
.text$x:0000335C                                         ; DATA XREF: .xdata$x:00008B3Co
.text$x:0000335C                 mov     ecx, [ebp-10h]
.text$x:0000335F                 add     ecx, 38h ; '8'
.text$x:00003362                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003362 __unwindfunclet$??1DockingCont@@UAE@XZ$1 endp
.text$x:00003362
.text$x:00003367
.text$x:00003367 ; =============== S U B R O U T I N E =======================================
.text$x:00003367
.text$x:00003367
.text$x:00003367 __unwindfunclet$??1DockingCont@@UAE@XZ$2 proc near
.text$x:00003367                                         ; DATA XREF: .xdata$x:00008B44o
.text$x:00003367                 mov     ecx, [ebp-10h]
.text$x:0000336A                 add     ecx, 9Ch ; 'Â£'
.text$x:00003370                 jmp     ??1?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ ; std::vector<tTbData *,std::allocator<tTbData *>>::~vector<tTbData *,std::allocator<tTbData *>>(void)
.text$x:00003370 __unwindfunclet$??1DockingCont@@UAE@XZ$2 endp
.text$x:00003370
.text$x:00003375
.text$x:00003375 ; =============== S U B R O U T I N E =======================================
.text$x:00003375
.text$x:00003375
.text$x:00003375 __ehhandler$??1DockingCont@@UAE@XZ proc near
.text$x:00003375                                         ; DATA XREF: DockingCont::~DockingCont(void)+5o
.text$x:00003375
.text$x:00003375 arg_4           = dword ptr  8
.text$x:00003375
.text$x:00003375                 mov     edx, [esp+arg_4]
.text$x:00003379                 lea     eax, [edx+0Ch]
.text$x:0000337C                 mov     ecx, [edx-8]
.text$x:0000337F                 xor     ecx, eax
.text$x:00003381                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003386                 mov     eax, offset __ehfuncinfo$??1DockingCont@@UAE@XZ
.text$x:0000338B                 jmp     ___CxxFrameHandler3
.text$x:0000338B __ehhandler$??1DockingCont@@UAE@XZ endp
.text$x:0000338B
.text$x:00003390
.text$x:00003390 ; =============== S U B R O U T I N E =======================================
.text$x:00003390
.text$x:00003390
.text$x:00003390 __unwindfunclet$?removeToolbar@DockingCont@@QAEXUtTbData@@@Z$0 proc near
.text$x:00003390                                         ; DATA XREF: .xdata$x:00008B64o
.text$x:00003390                 lea     ecx, [ebp-48h]
.text$x:00003393                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$x:00003393 __unwindfunclet$?removeToolbar@DockingCont@@QAEXUtTbData@@@Z$0 endp
.text$x:00003393
.text$x:00003398
.text$x:00003398 ; =============== S U B R O U T I N E =======================================
.text$x:00003398
.text$x:00003398
.text$x:00003398 __unwindfunclet$?removeToolbar@DockingCont@@QAEXUtTbData@@@Z$1 proc near
.text$x:00003398                                         ; DATA XREF: .xdata$x:00008B6Co
.text$x:00003398                                         ; .xdata$x:00008B74o
.text$x:00003398                 lea     ecx, [ebp-3Ch]
.text$x:0000339B                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$x:0000339B __unwindfunclet$?removeToolbar@DockingCont@@QAEXUtTbData@@@Z$1 endp
.text$x:0000339B
.text$x:000033A0
.text$x:000033A0 ; =============== S U B R O U T I N E =======================================
.text$x:000033A0
.text$x:000033A0
.text$x:000033A0 __unwindfunclet$?removeToolbar@DockingCont@@QAEXUtTbData@@@Z$2 proc near
.text$x:000033A0                                         ; DATA XREF: .xdata$x:00008B7Co
.text$x:000033A0                 mov     ecx, [ebp-28h]
.text$x:000033A3                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$x:000033A3 __unwindfunclet$?removeToolbar@DockingCont@@QAEXUtTbData@@@Z$2 endp
.text$x:000033A3
.text$x:000033A8
.text$x:000033A8 ; =============== S U B R O U T I N E =======================================
.text$x:000033A8
.text$x:000033A8
.text$x:000033A8 __ehhandler$?removeToolbar@DockingCont@@QAEXUtTbData@@@Z proc near
.text$x:000033A8                                         ; DATA XREF: DockingCont::removeToolbar(tTbData)+5o
.text$x:000033A8
.text$x:000033A8 arg_4           = dword ptr  8
.text$x:000033A8
.text$x:000033A8                 mov     edx, [esp+arg_4]
.text$x:000033AC                 lea     eax, [edx+0Ch]
.text$x:000033AF                 mov     ecx, [edx-4Ch]
.text$x:000033B2                 xor     ecx, eax
.text$x:000033B4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000033B9                 mov     eax, offset __ehfuncinfo$?removeToolbar@DockingCont@@QAEXUtTbData@@@Z
.text$x:000033BE                 jmp     ___CxxFrameHandler3
.text$x:000033BE __ehhandler$?removeToolbar@DockingCont@@QAEXUtTbData@@@Z endp
.text$x:000033BE
.text$x:000033C3
.text$x:000033C3 ; =============== S U B R O U T I N E =======================================
.text$x:000033C3
.text$x:000033C3
.text$x:000033C3 __unwindfunclet$?getDataOfVisTb@DockingCont@@QAE?AV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@XZ$0 proc near
.text$x:000033C3                                         ; DATA XREF: .xdata$x:00008B2Co
.text$x:000033C3                 lea     ecx, [ebp-30h]
.text$x:000033C6                 jmp     ??1?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ ; std::vector<tTbData *,std::allocator<tTbData *>>::~vector<tTbData *,std::allocator<tTbData *>>(void)
.text$x:000033C6 __unwindfunclet$?getDataOfVisTb@DockingCont@@QAE?AV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@XZ$0 endp
.text$x:000033C6
.text$x:000033CB
.text$x:000033CB ; =============== S U B R O U T I N E =======================================
.text$x:000033CB
.text$x:000033CB
.text$x:000033CB __unwindfunclet$?getDataOfVisTb@DockingCont@@QAE?AV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@XZ$1 proc near
.text$x:000033CB                                         ; DATA XREF: .xdata$x:00008B24o
.text$x:000033CB                 mov     eax, [ebp-18h]
.text$x:000033CE                 and     eax, 1
.text$x:000033D1                 jz      locret_33E3
.text$x:000033D7                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:000033DB                 mov     ecx, [ebp+8]
.text$x:000033DE                 jmp     ??1?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ ; std::vector<tTbData *,std::allocator<tTbData *>>::~vector<tTbData *,std::allocator<tTbData *>>(void)
.text$x:000033E3 ; ---------------------------------------------------------------------------
.text$x:000033E3
.text$x:000033E3 locret_33E3:                            ; CODE XREF: __unwindfunclet$?getDataOfVisTb@DockingCont@@QAE?AV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@XZ$1+6j
.text$x:000033E3                 retn
.text$x:000033E3 __unwindfunclet$?getDataOfVisTb@DockingCont@@QAE?AV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@XZ$1 endp
.text$x:000033E3
.text$x:000033E4
.text$x:000033E4 ; =============== S U B R O U T I N E =======================================
.text$x:000033E4
.text$x:000033E4
.text$x:000033E4 __ehhandler$?getDataOfVisTb@DockingCont@@QAE?AV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@XZ proc near
.text$x:000033E4                                         ; DATA XREF: DockingCont::getDataOfVisTb(void)+5o
.text$x:000033E4
.text$x:000033E4 arg_4           = dword ptr  8
.text$x:000033E4
.text$x:000033E4                 mov     edx, [esp+arg_4]
.text$x:000033E8                 lea     eax, [edx+0Ch]
.text$x:000033EB                 mov     ecx, [edx-44h]
.text$x:000033EE                 xor     ecx, eax
.text$x:000033F0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000033F5                 mov     eax, offset __ehfuncinfo$?getDataOfVisTb@DockingCont@@QAE?AV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@XZ
.text$x:000033FA                 jmp     ___CxxFrameHandler3
.text$x:000033FA __ehhandler$?getDataOfVisTb@DockingCont@@QAE?AV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@XZ endp
.text$x:000033FA
.text$x:000033FF
.text$x:000033FF ; =============== S U B R O U T I N E =======================================
.text$x:000033FF
.text$x:000033FF
.text$x:000033FF __unwindfunclet$?runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z$0 proc near
.text$x:000033FF                                         ; DATA XREF: .xdata$x:00008B1Co
.text$x:000033FF                 mov     eax, ds:?$S1@?1??runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4IA
.text$x:00003404                 and     eax, 0FFFFFFFEh
.text$x:00003407                 mov     ds:?$S1@?1??runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4IA, eax
.text$x:0000340C                 retn
.text$x:0000340C __unwindfunclet$?runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z$0 endp
.text$x:0000340C
.text$x:0000340D
.text$x:0000340D ; =============== S U B R O U T I N E =======================================
.text$x:0000340D
.text$x:0000340D
.text$x:0000340D __ehhandler$?runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z proc near
.text$x:0000340D                                         ; DATA XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+5o
.text$x:0000340D
.text$x:0000340D arg_4           = dword ptr  8
.text$x:0000340D
.text$x:0000340D                 mov     edx, [esp+arg_4]
.text$x:00003411                 lea     eax, [edx+0Ch]
.text$x:00003414                 mov     ecx, [edx-14Ch]
.text$x:0000341A                 xor     ecx, eax
.text$x:0000341C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003421                 mov     ecx, [edx-4]
.text$x:00003424                 xor     ecx, eax
.text$x:00003426                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000342B                 mov     eax, offset __ehfuncinfo$?runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z
.text$x:00003430                 jmp     ___CxxFrameHandler3
.text$x:00003430 __ehhandler$?runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z endp
.text$x:00003430
.text$x:00003435
.text$x:00003435 ; =============== S U B R O U T I N E =======================================
.text$x:00003435
.text$x:00003435
.text$x:00003435 __unwindfunclet$?runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z$0 proc near
.text$x:00003435                                         ; DATA XREF: .xdata$x:00008B14o
.text$x:00003435                 mov     eax, ds:?$S2@?1??runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4IA
.text$x:0000343A                 and     eax, 0FFFFFFFEh
.text$x:0000343D                 mov     ds:?$S2@?1??runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4IA, eax
.text$x:00003442                 retn
.text$x:00003442 __unwindfunclet$?runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z$0 endp
.text$x:00003442
.text$x:00003443
.text$x:00003443 ; =============== S U B R O U T I N E =======================================
.text$x:00003443
.text$x:00003443
.text$x:00003443 __ehhandler$?runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z proc near
.text$x:00003443                                         ; DATA XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+5o
.text$x:00003443
.text$x:00003443 arg_4           = dword ptr  8
.text$x:00003443
.text$x:00003443                 mov     edx, [esp+arg_4]
.text$x:00003447                 lea     eax, [edx+0Ch]
.text$x:0000344A                 mov     ecx, [edx-0F0h]
.text$x:00003450                 xor     ecx, eax
.text$x:00003452                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003457                 mov     ecx, [edx-4]
.text$x:0000345A                 xor     ecx, eax
.text$x:0000345C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003461                 mov     eax, offset __ehfuncinfo$?runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z
.text$x:00003466                 jmp     ___CxxFrameHandler3
.text$x:00003466 __ehhandler$?runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z endp
.text$x:00003466
.text$x:0000346B
.text$x:0000346B ; =============== S U B R O U T I N E =======================================
.text$x:0000346B
.text$x:0000346B
.text$x:0000346B __unwindfunclet$?SelectTab@DockingCont@@IAEXH@Z$0 proc near
.text$x:0000346B                                         ; DATA XREF: .xdata$x:00008B0Co
.text$x:0000346B                 lea     ecx, [ebp-2Ch]
.text$x:0000346E                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000346E __unwindfunclet$?SelectTab@DockingCont@@IAEXH@Z$0 endp
.text$x:0000346E
.text$x:00003473
.text$x:00003473 ; =============== S U B R O U T I N E =======================================
.text$x:00003473
.text$x:00003473
.text$x:00003473 __ehhandler$?SelectTab@DockingCont@@IAEXH@Z proc near
.text$x:00003473                                         ; DATA XREF: DockingCont::SelectTab(int)+5o
.text$x:00003473
.text$x:00003473 arg_4           = dword ptr  8
.text$x:00003473
.text$x:00003473                 mov     edx, [esp+arg_4]
.text$x:00003477                 lea     eax, [edx+0Ch]
.text$x:0000347A                 mov     ecx, [edx-80h]
.text$x:0000347D                 xor     ecx, eax
.text$x:0000347F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003484                 mov     ecx, [edx-4]
.text$x:00003487                 xor     ecx, eax
.text$x:00003489                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000348E                 mov     eax, offset __ehfuncinfo$?SelectTab@DockingCont@@IAEXH@Z
.text$x:00003493                 jmp     ___CxxFrameHandler3
.text$x:00003493 __ehhandler$?SelectTab@DockingCont@@IAEXH@Z endp
.text$x:00003493
.text$x:00003493 _text$x         ends
.text$x:00003493
.text$mn:00003498 ; ===========================================================================
.text$mn:00003498
.text$mn:00003498 ; Segment type: Pure code
.text$mn:00003498 ; Segment permissions: Read/Execute
.text$mn:00003498 _text$mn        segment para public 'CODE' use32
.text$mn:00003498                 assume cs:_text$mn
.text$mn:00003498                 ;org 3498h
.text$mn:00003498 ; COMDAT (pick any)
.text$mn:00003498                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003498
.text$mn:00003498 ; =============== S U B R O U T I N E =======================================
.text$mn:00003498
.text$mn:00003498 ; Attributes: bp-based frame
.text$mn:00003498
.text$mn:00003498 ; char * __cdecl std::_Allocate<char>(unsigned int, char *)
.text$mn:00003498                 public ??$_Allocate@D@std@@YAPADIPAD@Z
.text$mn:00003498 ??$_Allocate@D@std@@YAPADIPAD@Z proc near
.text$mn:00003498                                         ; CODE XREF: std::allocator<char>::allocate(uint)+Dp
.text$mn:00003498
.text$mn:00003498 var_4           = dword ptr -4
.text$mn:00003498 arg_0           = dword ptr  8
.text$mn:00003498
.text$mn:00003498                 push    ebp
.text$mn:00003499                 mov     ebp, esp
.text$mn:0000349B                 push    ecx
.text$mn:0000349C                 mov     [ebp+var_4], 0
.text$mn:000034A3                 cmp     [ebp+arg_0], 0
.text$mn:000034A7                 jnz     short loc_34AB
.text$mn:000034A9                 jmp     short loc_34CB
.text$mn:000034AB ; ---------------------------------------------------------------------------
.text$mn:000034AB
.text$mn:000034AB loc_34AB:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+Fj
.text$mn:000034AB                 cmp     [ebp+arg_0], 0FFFFFFFFh
.text$mn:000034AF                 ja      short loc_34C6
.text$mn:000034B1                 mov     eax, [ebp+arg_0]
.text$mn:000034B4                 push    eax             ; unsigned int
.text$mn:000034B5                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000034BA                 add     esp, 4
.text$mn:000034BD                 mov     [ebp+var_4], eax
.text$mn:000034C0                 cmp     [ebp+var_4], 0
.text$mn:000034C4                 jnz     short loc_34CB
.text$mn:000034C6
.text$mn:000034C6 loc_34C6:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+17j
.text$mn:000034C6                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:000034CB
.text$mn:000034CB loc_34CB:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+11j
.text$mn:000034CB                                         ; std::_Allocate<char>(uint,char *)+2Cj
.text$mn:000034CB                 mov     eax, [ebp+var_4]
.text$mn:000034CE                 mov     esp, ebp
.text$mn:000034D0                 pop     ebp
.text$mn:000034D1                 retn
.text$mn:000034D1 ??$_Allocate@D@std@@YAPADIPAD@Z endp
.text$mn:000034D1
.text$mn:000034D1 ; ---------------------------------------------------------------------------
.text$mn:000034D2                 align 4
.text$mn:000034D2 _text$mn        ends
.text$mn:000034D2
.text$mn:000034D4 ; ===========================================================================
.text$mn:000034D4
.text$mn:000034D4 ; Segment type: Pure code
.text$mn:000034D4 ; Segment permissions: Read/Execute
.text$mn:000034D4 _text$mn        segment para public 'CODE' use32
.text$mn:000034D4                 assume cs:_text$mn
.text$mn:000034D4                 ;org 34D4h
.text$mn:000034D4 ; COMDAT (pick any)
.text$mn:000034D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000034D4
.text$mn:000034D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000034D4
.text$mn:000034D4 ; Attributes: bp-based frame
.text$mn:000034D4
.text$mn:000034D4 ; struct tTbData * * __cdecl std::_Allocate<struct tTbData *>(unsigned int, struct tTbData * *)
.text$mn:000034D4                 public ??$_Allocate@PAUtTbData@@@std@@YAPAPAUtTbData@@IPAPAU1@@Z
.text$mn:000034D4 ??$_Allocate@PAUtTbData@@@std@@YAPAPAUtTbData@@IPAPAU1@@Z proc near
.text$mn:000034D4                                         ; CODE XREF: std::allocator<tTbData *>::allocate(uint)+Dp
.text$mn:000034D4
.text$mn:000034D4 var_4           = dword ptr -4
.text$mn:000034D4 arg_0           = dword ptr  8
.text$mn:000034D4
.text$mn:000034D4                 push    ebp
.text$mn:000034D5                 mov     ebp, esp
.text$mn:000034D7                 push    ecx
.text$mn:000034D8                 mov     [ebp+var_4], 0
.text$mn:000034DF                 cmp     [ebp+arg_0], 0
.text$mn:000034E3                 jnz     short loc_34E7
.text$mn:000034E5                 jmp     short loc_350D
.text$mn:000034E7 ; ---------------------------------------------------------------------------
.text$mn:000034E7
.text$mn:000034E7 loc_34E7:                               ; CODE XREF: std::_Allocate<tTbData *>(uint,tTbData * *)+Fj
.text$mn:000034E7                 cmp     [ebp+arg_0], 3FFFFFFFh
.text$mn:000034EE                 ja      short loc_3508
.text$mn:000034F0                 mov     eax, [ebp+arg_0]
.text$mn:000034F3                 shl     eax, 2
.text$mn:000034F6                 push    eax             ; unsigned int
.text$mn:000034F7                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000034FC                 add     esp, 4
.text$mn:000034FF                 mov     [ebp+var_4], eax
.text$mn:00003502                 cmp     [ebp+var_4], 0
.text$mn:00003506                 jnz     short loc_350D
.text$mn:00003508
.text$mn:00003508 loc_3508:                               ; CODE XREF: std::_Allocate<tTbData *>(uint,tTbData * *)+1Aj
.text$mn:00003508                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:0000350D
.text$mn:0000350D loc_350D:                               ; CODE XREF: std::_Allocate<tTbData *>(uint,tTbData * *)+11j
.text$mn:0000350D                                         ; std::_Allocate<tTbData *>(uint,tTbData * *)+32j
.text$mn:0000350D                 mov     eax, [ebp+var_4]
.text$mn:00003510                 mov     esp, ebp
.text$mn:00003512                 pop     ebp
.text$mn:00003513                 retn
.text$mn:00003513 ??$_Allocate@PAUtTbData@@@std@@YAPAPAUtTbData@@IPAPAU1@@Z endp
.text$mn:00003513
.text$mn:00003513 _text$mn        ends
.text$mn:00003513
.text$mn:00003514 ; ===========================================================================
.text$mn:00003514
.text$mn:00003514 ; Segment type: Pure code
.text$mn:00003514 ; Segment permissions: Read/Execute
.text$mn:00003514 _text$mn        segment para public 'CODE' use32
.text$mn:00003514                 assume cs:_text$mn
.text$mn:00003514                 ;org 3514h
.text$mn:00003514 ; COMDAT (pick any)
.text$mn:00003514                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003514
.text$mn:00003514 ; =============== S U B R O U T I N E =======================================
.text$mn:00003514
.text$mn:00003514 ; Attributes: bp-based frame
.text$mn:00003514
.text$mn:00003514 ; struct std::_Container_proxy * __cdecl std::_Allocate<struct std::_Container_proxy>(unsigned int, struct std::_Container_proxy *)
.text$mn:00003514                 public ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
.text$mn:00003514 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
.text$mn:00003514                                         ; CODE XREF: std::allocator<std::_Container_proxy>::allocate(uint)+Dp
.text$mn:00003514
.text$mn:00003514 var_4           = dword ptr -4
.text$mn:00003514 arg_0           = dword ptr  8
.text$mn:00003514
.text$mn:00003514                 push    ebp
.text$mn:00003515                 mov     ebp, esp
.text$mn:00003517                 push    ecx
.text$mn:00003518                 mov     [ebp+var_4], 0
.text$mn:0000351F                 cmp     [ebp+arg_0], 0
.text$mn:00003523                 jnz     short loc_3527
.text$mn:00003525                 jmp     short loc_354D
.text$mn:00003527 ; ---------------------------------------------------------------------------
.text$mn:00003527
.text$mn:00003527 loc_3527:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+Fj
.text$mn:00003527                 cmp     [ebp+arg_0], 1FFFFFFFh
.text$mn:0000352E                 ja      short loc_3548
.text$mn:00003530                 mov     eax, [ebp+arg_0]
.text$mn:00003533                 shl     eax, 3
.text$mn:00003536                 push    eax             ; unsigned int
.text$mn:00003537                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000353C                 add     esp, 4
.text$mn:0000353F                 mov     [ebp+var_4], eax
.text$mn:00003542                 cmp     [ebp+var_4], 0
.text$mn:00003546                 jnz     short loc_354D
.text$mn:00003548
.text$mn:00003548 loc_3548:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+1Aj
.text$mn:00003548                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:0000354D
.text$mn:0000354D loc_354D:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+11j
.text$mn:0000354D                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+32j
.text$mn:0000354D                 mov     eax, [ebp+var_4]
.text$mn:00003550                 mov     esp, ebp
.text$mn:00003552                 pop     ebp
.text$mn:00003553                 retn
.text$mn:00003553 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z endp
.text$mn:00003553
.text$mn:00003553 _text$mn        ends
.text$mn:00003553
.text$mn:00003554 ; ===========================================================================
.text$mn:00003554
.text$mn:00003554 ; Segment type: Pure code
.text$mn:00003554 ; Segment permissions: Read/Execute
.text$mn:00003554 _text$mn        segment para public 'CODE' use32
.text$mn:00003554                 assume cs:_text$mn
.text$mn:00003554                 ;org 3554h
.text$mn:00003554 ; COMDAT (pick any)
.text$mn:00003554                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003554
.text$mn:00003554 ; =============== S U B R O U T I N E =======================================
.text$mn:00003554
.text$mn:00003554 ; Attributes: bp-based frame
.text$mn:00003554
.text$mn:00003554 ; wchar_t * __cdecl std::_Allocate<wchar_t>(unsigned int, wchar_t *)
.text$mn:00003554                 public ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
.text$mn:00003554 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z proc near
.text$mn:00003554                                         ; CODE XREF: std::allocator<wchar_t>::allocate(uint)+Dp
.text$mn:00003554
.text$mn:00003554 var_4           = dword ptr -4
.text$mn:00003554 arg_0           = dword ptr  8
.text$mn:00003554
.text$mn:00003554                 push    ebp
.text$mn:00003555                 mov     ebp, esp
.text$mn:00003557                 push    ecx
.text$mn:00003558                 mov     [ebp+var_4], 0
.text$mn:0000355F                 cmp     [ebp+arg_0], 0
.text$mn:00003563                 jnz     short loc_3567
.text$mn:00003565                 jmp     short loc_358C
.text$mn:00003567 ; ---------------------------------------------------------------------------
.text$mn:00003567
.text$mn:00003567 loc_3567:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+Fj
.text$mn:00003567                 cmp     [ebp+arg_0], 7FFFFFFFh
.text$mn:0000356E                 ja      short loc_3587
.text$mn:00003570                 mov     eax, [ebp+arg_0]
.text$mn:00003573                 shl     eax, 1
.text$mn:00003575                 push    eax             ; unsigned int
.text$mn:00003576                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000357B                 add     esp, 4
.text$mn:0000357E                 mov     [ebp+var_4], eax
.text$mn:00003581                 cmp     [ebp+var_4], 0
.text$mn:00003585                 jnz     short loc_358C
.text$mn:00003587
.text$mn:00003587 loc_3587:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+1Aj
.text$mn:00003587                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:0000358C
.text$mn:0000358C loc_358C:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+11j
.text$mn:0000358C                                         ; std::_Allocate<wchar_t>(uint,wchar_t *)+31j
.text$mn:0000358C                 mov     eax, [ebp+var_4]
.text$mn:0000358F                 mov     esp, ebp
.text$mn:00003591                 pop     ebp
.text$mn:00003592                 retn
.text$mn:00003592 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z endp
.text$mn:00003592
.text$mn:00003592 ; ---------------------------------------------------------------------------
.text$mn:00003593                 align 4
.text$mn:00003593 _text$mn        ends
.text$mn:00003593
.text$mn:00003594 ; ===========================================================================
.text$mn:00003594
.text$mn:00003594 ; Segment type: Pure code
.text$mn:00003594 ; Segment permissions: Read/Execute
.text$mn:00003594 _text$mn        segment para public 'CODE' use32
.text$mn:00003594                 assume cs:_text$mn
.text$mn:00003594                 ;org 3594h
.text$mn:00003594 ; COMDAT (pick any)
.text$mn:00003594                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003594
.text$mn:00003594 ; =============== S U B R O U T I N E =======================================
.text$mn:00003594
.text$mn:00003594 ; Attributes: bp-based frame
.text$mn:00003594
.text$mn:00003594 ; int __cdecl std::_Debug_pointer<char>(int, wchar_t *, unsigned int)
.text$mn:00003594                 public ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
.text$mn:00003594 ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
.text$mn:00003594                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+15p
.text$mn:00003594                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+1Bp
.text$mn:00003594
.text$mn:00003594 arg_0           = dword ptr  8
.text$mn:00003594 arg_4           = dword ptr  0Ch
.text$mn:00003594 arg_8           = dword ptr  10h
.text$mn:00003594
.text$mn:00003594                 push    ebp
.text$mn:00003595                 mov     ebp, esp
.text$mn:00003597                 cmp     [ebp+arg_0], 0
.text$mn:0000359B                 jnz     short loc_35B2
.text$mn:0000359D                 mov     eax, [ebp+arg_8]
.text$mn:000035A0                 push    eax             ; unsigned int
.text$mn:000035A1                 mov     ecx, [ebp+arg_4]
.text$mn:000035A4                 push    ecx             ; wchar_t *
.text$mn:000035A5                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000035AA                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000035AF                 add     esp, 0Ch
.text$mn:000035B2
.text$mn:000035B2 loc_35B2:                               ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+7j
.text$mn:000035B2                 pop     ebp
.text$mn:000035B3                 retn
.text$mn:000035B3 ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z endp
.text$mn:000035B3
.text$mn:000035B3 _text$mn        ends
.text$mn:000035B3
.text$mn:000035B4 ; ===========================================================================
.text$mn:000035B4
.text$mn:000035B4 ; Segment type: Pure code
.text$mn:000035B4 ; Segment permissions: Read/Execute
.text$mn:000035B4 _text$mn        segment para public 'CODE' use32
.text$mn:000035B4                 assume cs:_text$mn
.text$mn:000035B4                 ;org 35B4h
.text$mn:000035B4 ; COMDAT (pick any)
.text$mn:000035B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000035B4
.text$mn:000035B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000035B4
.text$mn:000035B4 ; Attributes: bp-based frame
.text$mn:000035B4
.text$mn:000035B4 ; int __cdecl std::_Debug_pointer<tTbData *>(int, wchar_t *, unsigned int)
.text$mn:000035B4                 public ??$_Debug_pointer@PAUtTbData@@@std@@YAXPAPAUtTbData@@PB_WI@Z
.text$mn:000035B4 ??$_Debug_pointer@PAUtTbData@@@std@@YAXPAPAUtTbData@@PB_WI@Z proc near
.text$mn:000035B4                                         ; CODE XREF: std::_Debug_range2<tTbData * *>(tTbData * *,tTbData * *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:000035B4                                         ; std::_Debug_range2<tTbData * *>(tTbData * *,tTbData * *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:000035B4
.text$mn:000035B4 arg_0           = dword ptr  8
.text$mn:000035B4 arg_4           = dword ptr  0Ch
.text$mn:000035B4 arg_8           = dword ptr  10h
.text$mn:000035B4
.text$mn:000035B4                 push    ebp
.text$mn:000035B5                 mov     ebp, esp
.text$mn:000035B7                 cmp     [ebp+arg_0], 0
.text$mn:000035BB                 jnz     short loc_35D2
.text$mn:000035BD                 mov     eax, [ebp+arg_8]
.text$mn:000035C0                 push    eax             ; unsigned int
.text$mn:000035C1                 mov     ecx, [ebp+arg_4]
.text$mn:000035C4                 push    ecx             ; wchar_t *
.text$mn:000035C5                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000035CA                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000035CF                 add     esp, 0Ch
.text$mn:000035D2
.text$mn:000035D2 loc_35D2:                               ; CODE XREF: std::_Debug_pointer<tTbData *>(tTbData * *,wchar_t const *,uint)+7j
.text$mn:000035D2                 pop     ebp
.text$mn:000035D3                 retn
.text$mn:000035D3 ??$_Debug_pointer@PAUtTbData@@@std@@YAXPAPAUtTbData@@PB_WI@Z endp
.text$mn:000035D3
.text$mn:000035D3 _text$mn        ends
.text$mn:000035D3
.text$mn:000035D4 ; ===========================================================================
.text$mn:000035D4
.text$mn:000035D4 ; Segment type: Pure code
.text$mn:000035D4 ; Segment permissions: Read/Execute
.text$mn:000035D4 _text$mn        segment para public 'CODE' use32
.text$mn:000035D4                 assume cs:_text$mn
.text$mn:000035D4                 ;org 35D4h
.text$mn:000035D4 ; COMDAT (pick any)
.text$mn:000035D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000035D4
.text$mn:000035D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000035D4
.text$mn:000035D4 ; Attributes: bp-based frame
.text$mn:000035D4
.text$mn:000035D4 ; int __cdecl std::_Debug_pointer<wchar_t>(int, wchar_t *, unsigned int)
.text$mn:000035D4                 public ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z
.text$mn:000035D4 ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z proc near
.text$mn:000035D4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+15p
.text$mn:000035D4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+1Dp ...
.text$mn:000035D4
.text$mn:000035D4 arg_0           = dword ptr  8
.text$mn:000035D4 arg_4           = dword ptr  0Ch
.text$mn:000035D4 arg_8           = dword ptr  10h
.text$mn:000035D4
.text$mn:000035D4                 push    ebp
.text$mn:000035D5                 mov     ebp, esp
.text$mn:000035D7                 cmp     [ebp+arg_0], 0
.text$mn:000035DB                 jnz     short loc_35F2
.text$mn:000035DD                 mov     eax, [ebp+arg_8]
.text$mn:000035E0                 push    eax             ; unsigned int
.text$mn:000035E1                 mov     ecx, [ebp+arg_4]
.text$mn:000035E4                 push    ecx             ; wchar_t *
.text$mn:000035E5                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000035EA                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000035EF                 add     esp, 0Ch
.text$mn:000035F2
.text$mn:000035F2 loc_35F2:                               ; CODE XREF: std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+7j
.text$mn:000035F2                 pop     ebp
.text$mn:000035F3                 retn
.text$mn:000035F3 ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z endp
.text$mn:000035F3
.text$mn:000035F3 _text$mn        ends
.text$mn:000035F3
.text$mn:000035F4 ; ===========================================================================
.text$mn:000035F4
.text$mn:000035F4 ; Segment type: Pure code
.text$mn:000035F4 ; Segment permissions: Read/Execute
.text$mn:000035F4 _text$mn        segment para public 'CODE' use32
.text$mn:000035F4                 assume cs:_text$mn
.text$mn:000035F4                 ;org 35F4h
.text$mn:000035F4 ; COMDAT (pick any)
.text$mn:000035F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000035F4
.text$mn:000035F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000035F4
.text$mn:000035F4 ; Attributes: bp-based frame
.text$mn:000035F4
.text$mn:000035F4 ; int __cdecl std::_Debug_range2<tTbData * *>(int, int, wchar_t *, unsigned int)
.text$mn:000035F4                 public ??$_Debug_range2@PAPAUtTbData@@@std@@YAXPAPAUtTbData@@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:000035F4 ??$_Debug_range2@PAPAUtTbData@@@std@@YAXPAPAUtTbData@@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:000035F4                                         ; CODE XREF: std::_Debug_range<tTbData * *>(tTbData * *,tTbData * *,wchar_t const *,uint)+2Ap
.text$mn:000035F4
.text$mn:000035F4 arg_0           = dword ptr  8
.text$mn:000035F4 arg_4           = dword ptr  0Ch
.text$mn:000035F4 arg_8           = dword ptr  10h
.text$mn:000035F4 arg_C           = dword ptr  14h
.text$mn:000035F4
.text$mn:000035F4                 push    ebp
.text$mn:000035F5                 mov     ebp, esp
.text$mn:000035F7                 mov     eax, [ebp+arg_0]
.text$mn:000035FA                 cmp     eax, [ebp+arg_4]
.text$mn:000035FD                 jz      short loc_3644
.text$mn:000035FF                 mov     ecx, [ebp+arg_C]
.text$mn:00003602                 push    ecx             ; unsigned int
.text$mn:00003603                 mov     edx, [ebp+arg_8]
.text$mn:00003606                 push    edx             ; wchar_t *
.text$mn:00003607                 mov     eax, [ebp+arg_0]
.text$mn:0000360A                 push    eax             ; int
.text$mn:0000360B                 call    ??$_Debug_pointer@PAUtTbData@@@std@@YAXPAPAUtTbData@@PB_WI@Z ; std::_Debug_pointer<tTbData *>(tTbData * *,wchar_t const *,uint)
.text$mn:00003610                 add     esp, 0Ch
.text$mn:00003613                 mov     ecx, [ebp+arg_C]
.text$mn:00003616                 push    ecx             ; unsigned int
.text$mn:00003617                 mov     edx, [ebp+arg_8]
.text$mn:0000361A                 push    edx             ; wchar_t *
.text$mn:0000361B                 mov     eax, [ebp+arg_4]
.text$mn:0000361E                 push    eax             ; int
.text$mn:0000361F                 call    ??$_Debug_pointer@PAUtTbData@@@std@@YAXPAPAUtTbData@@PB_WI@Z ; std::_Debug_pointer<tTbData *>(tTbData * *,wchar_t const *,uint)
.text$mn:00003624                 add     esp, 0Ch
.text$mn:00003627                 mov     ecx, [ebp+arg_4]
.text$mn:0000362A                 cmp     ecx, [ebp+arg_0]
.text$mn:0000362D                 jnb     short loc_3644
.text$mn:0000362F                 mov     edx, [ebp+arg_C]
.text$mn:00003632                 push    edx             ; unsigned int
.text$mn:00003633                 mov     eax, [ebp+arg_8]
.text$mn:00003636                 push    eax             ; wchar_t *
.text$mn:00003637                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:0000363C                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00003641                 add     esp, 0Ch
.text$mn:00003644
.text$mn:00003644 loc_3644:                               ; CODE XREF: std::_Debug_range2<tTbData * *>(tTbData * *,tTbData * *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:00003644                                         ; std::_Debug_range2<tTbData * *>(tTbData * *,tTbData * *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:00003644                 pop     ebp
.text$mn:00003645                 retn
.text$mn:00003645 ??$_Debug_range2@PAPAUtTbData@@@std@@YAXPAPAUtTbData@@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:00003645
.text$mn:00003645 ; ---------------------------------------------------------------------------
.text$mn:00003646                 align 4
.text$mn:00003646 _text$mn        ends
.text$mn:00003646
.text$mn:00003648 ; ===========================================================================
.text$mn:00003648
.text$mn:00003648 ; Segment type: Pure code
.text$mn:00003648 ; Segment permissions: Read/Execute
.text$mn:00003648 _text$mn        segment para public 'CODE' use32
.text$mn:00003648                 assume cs:_text$mn
.text$mn:00003648                 ;org 3648h
.text$mn:00003648 ; COMDAT (pick any)
.text$mn:00003648                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003648
.text$mn:00003648 ; =============== S U B R O U T I N E =======================================
.text$mn:00003648
.text$mn:00003648 ; Attributes: bp-based frame
.text$mn:00003648
.text$mn:00003648 ; int __cdecl std::_Debug_range<tTbData * *>(int, int, wchar_t *, unsigned int)
.text$mn:00003648                 public ??$_Debug_range@PAPAUtTbData@@@std@@YAXPAPAUtTbData@@0PB_WI@Z
.text$mn:00003648 ??$_Debug_range@PAPAUtTbData@@@std@@YAXPAPAUtTbData@@0PB_WI@Z proc near
.text$mn:00003648                                         ; CODE XREF: std::_Uninit_move<tTbData *,tTbData *,tTbData *>(tTbData * *,tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>> &,tTbData * *,std::_Scalar_ptr_iterator_tag)+16p
.text$mn:00003648
.text$mn:00003648 var_1           = byte ptr -1
.text$mn:00003648 arg_0           = dword ptr  8
.text$mn:00003648 arg_4           = dword ptr  0Ch
.text$mn:00003648 arg_8           = dword ptr  10h
.text$mn:00003648 arg_C           = dword ptr  14h
.text$mn:00003648
.text$mn:00003648                 push    ebp
.text$mn:00003649                 mov     ebp, esp
.text$mn:0000364B                 push    ecx
.text$mn:0000364C                 lea     eax, [ebp+arg_0]
.text$mn:0000364F                 push    eax
.text$mn:00003650                 lea     ecx, [ebp+var_1]
.text$mn:00003653                 push    ecx
.text$mn:00003654                 call    ??$_Iter_cat@PAPAUtTbData@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAUtTbData@@@Z ; std::_Iter_cat<tTbData * *>(tTbData * * const &)
.text$mn:00003659                 add     esp, 8
.text$mn:0000365C                 mov     dl, [eax]
.text$mn:0000365E                 movzx   eax, dl
.text$mn:00003661                 push    eax
.text$mn:00003662                 mov     ecx, [ebp+arg_C]
.text$mn:00003665                 push    ecx             ; unsigned int
.text$mn:00003666                 mov     edx, [ebp+arg_8]
.text$mn:00003669                 push    edx             ; wchar_t *
.text$mn:0000366A                 mov     eax, [ebp+arg_4]
.text$mn:0000366D                 push    eax             ; int
.text$mn:0000366E                 mov     ecx, [ebp+arg_0]
.text$mn:00003671                 push    ecx             ; int
.text$mn:00003672                 call    ??$_Debug_range2@PAPAUtTbData@@@std@@YAXPAPAUtTbData@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<tTbData * *>(tTbData * *,tTbData * *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:00003677                 add     esp, 14h
.text$mn:0000367A                 mov     esp, ebp
.text$mn:0000367C                 pop     ebp
.text$mn:0000367D                 retn
.text$mn:0000367D ??$_Debug_range@PAPAUtTbData@@@std@@YAXPAPAUtTbData@@0PB_WI@Z endp
.text$mn:0000367D
.text$mn:0000367D ; ---------------------------------------------------------------------------
.text$mn:0000367E                 align 10h
.text$mn:0000367E _text$mn        ends
.text$mn:0000367E
.text$mn:00003680 ; ===========================================================================
.text$mn:00003680
.text$mn:00003680 ; Segment type: Pure code
.text$mn:00003680 ; Segment permissions: Read/Execute
.text$mn:00003680 _text$mn        segment para public 'CODE' use32
.text$mn:00003680                 assume cs:_text$mn
.text$mn:00003680                 ;org 3680h
.text$mn:00003680 ; COMDAT (pick any)
.text$mn:00003680                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003680
.text$mn:00003680 ; =============== S U B R O U T I N E =======================================
.text$mn:00003680
.text$mn:00003680 ; Attributes: bp-based frame
.text$mn:00003680
.text$mn:00003680 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<struct tTbData *>>>(struct tTbData * *, struct tTbData * *, struct std::_Wrap_alloc<class std::allocator<struct tTbData *>> &)
.text$mn:00003680                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@@std@@YAXPAPAUtTbData@@0AAU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@0@@Z
.text$mn:00003680 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@@std@@YAXPAPAUtTbData@@0AAU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@0@@Z proc near
.text$mn:00003680                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Destroy(tTbData * *,tTbData * *)+21p
.text$mn:00003680
.text$mn:00003680 var_1           = byte ptr -1
.text$mn:00003680 arg_0           = dword ptr  8
.text$mn:00003680 arg_4           = dword ptr  0Ch
.text$mn:00003680 arg_8           = dword ptr  10h
.text$mn:00003680
.text$mn:00003680                 push    ebp
.text$mn:00003681                 mov     ebp, esp
.text$mn:00003683                 push    ecx
.text$mn:00003684                 mov     eax, [ebp+arg_4]
.text$mn:00003687                 push    eax
.text$mn:00003688                 mov     ecx, [ebp+arg_0]
.text$mn:0000368B                 push    ecx
.text$mn:0000368C                 call    ??$_Ptr_cat@PAUtTbData@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtTbData@@0@Z ; std::_Ptr_cat<tTbData *,tTbData *>(tTbData * *,tTbData * *)
.text$mn:00003691                 add     esp, 8
.text$mn:00003694                 mov     [ebp+var_1], al
.text$mn:00003697                 movzx   edx, [ebp+var_1]
.text$mn:0000369B                 push    edx
.text$mn:0000369C                 mov     eax, [ebp+arg_8]
.text$mn:0000369F                 push    eax
.text$mn:000036A0                 mov     ecx, [ebp+arg_4]
.text$mn:000036A3                 push    ecx
.text$mn:000036A4                 mov     edx, [ebp+arg_0]
.text$mn:000036A7                 push    edx
.text$mn:000036A8                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@@std@@YAXPAPAUtTbData@@0AAU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<tTbData *>>>(tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>> &,std::_Scalar_ptr_iterator_tag)
.text$mn:000036AD                 add     esp, 10h
.text$mn:000036B0                 mov     esp, ebp
.text$mn:000036B2                 pop     ebp
.text$mn:000036B3                 retn
.text$mn:000036B3 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@@std@@YAXPAPAUtTbData@@0AAU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@0@@Z endp
.text$mn:000036B3
.text$mn:000036B3 _text$mn        ends
.text$mn:000036B3
.text$mn:000036B4 ; ===========================================================================
.text$mn:000036B4
.text$mn:000036B4 ; Segment type: Pure code
.text$mn:000036B4 ; Segment permissions: Read/Execute
.text$mn:000036B4 _text$mn        segment para public 'CODE' use32
.text$mn:000036B4                 assume cs:_text$mn
.text$mn:000036B4                 ;org 36B4h
.text$mn:000036B4 ; COMDAT (pick any)
.text$mn:000036B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000036B4
.text$mn:000036B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000036B4
.text$mn:000036B4 ; Attributes: bp-based frame
.text$mn:000036B4
.text$mn:000036B4 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<struct tTbData *>>>(struct tTbData * *, struct tTbData * *, struct std::_Wrap_alloc<class std::allocator<struct tTbData *>> &, struct std::_Scalar_ptr_iterator_tag)
.text$mn:000036B4                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@@std@@YAXPAPAUtTbData@@0AAU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
.text$mn:000036B4 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@@std@@YAXPAPAUtTbData@@0AAU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z proc near
.text$mn:000036B4                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<tTbData *>>>(tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>> &)+28p
.text$mn:000036B4                 push    ebp
.text$mn:000036B5                 mov     ebp, esp
.text$mn:000036B7                 pop     ebp
.text$mn:000036B8                 retn
.text$mn:000036B8 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@@std@@YAXPAPAUtTbData@@0AAU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z endp
.text$mn:000036B8
.text$mn:000036B8 ; ---------------------------------------------------------------------------
.text$mn:000036B9                 align 4
.text$mn:000036B9 _text$mn        ends
.text$mn:000036B9
.text$mn:000036BC ; ===========================================================================
.text$mn:000036BC
.text$mn:000036BC ; Segment type: Pure code
.text$mn:000036BC ; Segment permissions: Read/Execute
.text$mn:000036BC _text$mn        segment para public 'CODE' use32
.text$mn:000036BC                 assume cs:_text$mn
.text$mn:000036BC                 ;org 36BCh
.text$mn:000036BC ; COMDAT (pick any)
.text$mn:000036BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000036BC
.text$mn:000036BC ; =============== S U B R O U T I N E =======================================
.text$mn:000036BC
.text$mn:000036BC ; Attributes: bp-based frame
.text$mn:000036BC
.text$mn:000036BC ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<struct tTbData * *>(struct tTbData * * const &)
.text$mn:000036BC                 public ??$_Iter_cat@PAPAUtTbData@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAUtTbData@@@Z
.text$mn:000036BC ??$_Iter_cat@PAPAUtTbData@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAUtTbData@@@Z proc near
.text$mn:000036BC                                         ; CODE XREF: std::_Debug_range<tTbData * *>(tTbData * *,tTbData * *,wchar_t const *,uint)+Cp
.text$mn:000036BC
.text$mn:000036BC var_1           = byte ptr -1
.text$mn:000036BC arg_0           = dword ptr  8
.text$mn:000036BC
.text$mn:000036BC                 push    ebp
.text$mn:000036BD                 mov     ebp, esp
.text$mn:000036BF                 push    ecx
.text$mn:000036C0                 mov     eax, [ebp+arg_0]
.text$mn:000036C3                 mov     cl, [ebp+var_1]
.text$mn:000036C6                 mov     [eax], cl
.text$mn:000036C8                 mov     eax, [ebp+arg_0]
.text$mn:000036CB                 mov     esp, ebp
.text$mn:000036CD                 pop     ebp
.text$mn:000036CE                 retn
.text$mn:000036CE ??$_Iter_cat@PAPAUtTbData@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAUtTbData@@@Z endp
.text$mn:000036CE
.text$mn:000036CE ; ---------------------------------------------------------------------------
.text$mn:000036CF                 align 10h
.text$mn:000036CF _text$mn        ends
.text$mn:000036CF
.text$mn:000036D0 ; ===========================================================================
.text$mn:000036D0
.text$mn:000036D0 ; Segment type: Pure code
.text$mn:000036D0 ; Segment permissions: Read/Execute
.text$mn:000036D0 _text$mn        segment para public 'CODE' use32
.text$mn:000036D0                 assume cs:_text$mn
.text$mn:000036D0                 ;org 36D0h
.text$mn:000036D0 ; COMDAT (pick any)
.text$mn:000036D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000036D0
.text$mn:000036D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000036D0
.text$mn:000036D0 ; Attributes: bp-based frame
.text$mn:000036D0
.text$mn:000036D0 ; int __cdecl std::_Move<tTbData * *,tTbData * *>(void *Src, int, void *Dst)
.text$mn:000036D0                 public ??$_Move@PAPAUtTbData@@PAPAU1@@std@@YAPAPAUtTbData@@PAPAU1@00@Z
.text$mn:000036D0 ??$_Move@PAPAUtTbData@@PAPAU1@@std@@YAPAPAUtTbData@@PAPAU1@00@Z proc near
.text$mn:000036D0                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>)+82p
.text$mn:000036D0
.text$mn:000036D0 var_1           = byte ptr -1
.text$mn:000036D0 Src             = dword ptr  8
.text$mn:000036D0 arg_4           = dword ptr  0Ch
.text$mn:000036D0 Dst             = dword ptr  10h
.text$mn:000036D0
.text$mn:000036D0                 push    ebp
.text$mn:000036D1                 mov     ebp, esp
.text$mn:000036D3                 push    ecx
.text$mn:000036D4                 mov     eax, [ebp+Dst]
.text$mn:000036D7                 push    eax
.text$mn:000036D8                 mov     ecx, [ebp+Src]
.text$mn:000036DB                 push    ecx
.text$mn:000036DC                 call    ??$_Ptr_cat@PAUtTbData@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtTbData@@0@Z ; std::_Ptr_cat<tTbData *,tTbData *>(tTbData * *,tTbData * *)
.text$mn:000036E1                 add     esp, 8
.text$mn:000036E4                 mov     [ebp+var_1], al
.text$mn:000036E7                 movzx   edx, [ebp+var_1]
.text$mn:000036EB                 push    edx
.text$mn:000036EC                 mov     eax, [ebp+Dst]
.text$mn:000036EF                 push    eax             ; Dst
.text$mn:000036F0                 mov     ecx, [ebp+arg_4]
.text$mn:000036F3                 push    ecx             ; int
.text$mn:000036F4                 mov     edx, [ebp+Src]
.text$mn:000036F7                 push    edx             ; Src
.text$mn:000036F8                 call    ??$_Move@PAPAUtTbData@@PAPAU1@@std@@YAPAPAUtTbData@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<tTbData * *,tTbData * *>(tTbData * *,tTbData * *,tTbData * *,std::_Scalar_ptr_iterator_tag)
.text$mn:000036FD                 add     esp, 10h
.text$mn:00003700                 mov     esp, ebp
.text$mn:00003702                 pop     ebp
.text$mn:00003703                 retn
.text$mn:00003703 ??$_Move@PAPAUtTbData@@PAPAU1@@std@@YAPAPAUtTbData@@PAPAU1@00@Z endp
.text$mn:00003703
.text$mn:00003703 _text$mn        ends
.text$mn:00003703
.text$mn:00003704 ; ===========================================================================
.text$mn:00003704
.text$mn:00003704 ; Segment type: Pure code
.text$mn:00003704 ; Segment permissions: Read/Execute
.text$mn:00003704 _text$mn        segment para public 'CODE' use32
.text$mn:00003704                 assume cs:_text$mn
.text$mn:00003704                 ;org 3704h
.text$mn:00003704 ; COMDAT (pick any)
.text$mn:00003704                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003704
.text$mn:00003704 ; =============== S U B R O U T I N E =======================================
.text$mn:00003704
.text$mn:00003704 ; Attributes: bp-based frame
.text$mn:00003704
.text$mn:00003704 ; int __cdecl std::_Move<tTbData * *,tTbData * *>(void *Src, int, void *Dst)
.text$mn:00003704                 public ??$_Move@PAPAUtTbData@@PAPAU1@@std@@YAPAPAUtTbData@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z
.text$mn:00003704 ??$_Move@PAPAUtTbData@@PAPAU1@@std@@YAPAPAUtTbData@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00003704                                         ; CODE XREF: std::_Move<tTbData * *,tTbData * *>(tTbData * *,tTbData * *,tTbData * *)+28p
.text$mn:00003704
.text$mn:00003704 var_4           = dword ptr -4
.text$mn:00003704 Src             = dword ptr  8
.text$mn:00003704 arg_4           = dword ptr  0Ch
.text$mn:00003704 Dst             = dword ptr  10h
.text$mn:00003704
.text$mn:00003704                 push    ebp
.text$mn:00003705                 mov     ebp, esp
.text$mn:00003707                 push    ecx
.text$mn:00003708                 mov     eax, [ebp+arg_4]
.text$mn:0000370B                 sub     eax, [ebp+Src]
.text$mn:0000370E                 sar     eax, 2
.text$mn:00003711                 mov     [ebp+var_4], eax
.text$mn:00003714                 mov     ecx, [ebp+var_4]
.text$mn:00003717                 shl     ecx, 2
.text$mn:0000371A                 push    ecx             ; Size
.text$mn:0000371B                 mov     edx, [ebp+Src]
.text$mn:0000371E                 push    edx             ; Src
.text$mn:0000371F                 mov     eax, [ebp+Dst]
.text$mn:00003722                 push    eax             ; Dst
.text$mn:00003723                 call    _memmove
.text$mn:00003728                 add     esp, 0Ch
.text$mn:0000372B                 mov     ecx, [ebp+var_4]
.text$mn:0000372E                 mov     edx, [ebp+Dst]
.text$mn:00003731                 lea     eax, [edx+ecx*4]
.text$mn:00003734                 mov     esp, ebp
.text$mn:00003736                 pop     ebp
.text$mn:00003737                 retn
.text$mn:00003737 ??$_Move@PAPAUtTbData@@PAPAU1@@std@@YAPAPAUtTbData@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z endp
.text$mn:00003737
.text$mn:00003737 _text$mn        ends
.text$mn:00003737
.text$mn:00003738 ; ===========================================================================
.text$mn:00003738
.text$mn:00003738 ; Segment type: Pure code
.text$mn:00003738 ; Segment permissions: Read/Execute
.text$mn:00003738 _text$mn        segment para public 'CODE' use32
.text$mn:00003738                 assume cs:_text$mn
.text$mn:00003738                 ;org 3738h
.text$mn:00003738 ; COMDAT (pick any)
.text$mn:00003738                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003738
.text$mn:00003738 ; =============== S U B R O U T I N E =======================================
.text$mn:00003738
.text$mn:00003738 ; Attributes: bp-based frame
.text$mn:00003738
.text$mn:00003738 ; struct std::_Scalar_ptr_iterator_tag __cdecl std::_Ptr_cat<struct tTbData *, struct tTbData *>(struct tTbData * *, struct tTbData * *)
.text$mn:00003738                 public ??$_Ptr_cat@PAUtTbData@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtTbData@@0@Z
.text$mn:00003738 ??$_Ptr_cat@PAUtTbData@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtTbData@@0@Z proc near
.text$mn:00003738                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<tTbData *>>>(tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>> &)+Cp
.text$mn:00003738                                         ; std::_Move<tTbData * *,tTbData * *>(tTbData * *,tTbData * *,tTbData * *)+Cp ...
.text$mn:00003738
.text$mn:00003738 var_1           = byte ptr -1
.text$mn:00003738
.text$mn:00003738                 push    ebp
.text$mn:00003739                 mov     ebp, esp
.text$mn:0000373B                 push    ecx
.text$mn:0000373C                 mov     al, [ebp+var_1]
.text$mn:0000373F                 mov     esp, ebp
.text$mn:00003741                 pop     ebp
.text$mn:00003742                 retn
.text$mn:00003742 ??$_Ptr_cat@PAUtTbData@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtTbData@@0@Z endp
.text$mn:00003742
.text$mn:00003742 ; ---------------------------------------------------------------------------
.text$mn:00003743                 align 4
.text$mn:00003743 _text$mn        ends
.text$mn:00003743
.text$mn:00003744 ; ===========================================================================
.text$mn:00003744
.text$mn:00003744 ; Segment type: Pure code
.text$mn:00003744 ; Segment permissions: Read/Execute
.text$mn:00003744 _text$mn        segment para public 'CODE' use32
.text$mn:00003744                 assume cs:_text$mn
.text$mn:00003744                 ;org 3744h
.text$mn:00003744 ; COMDAT (pick any)
.text$mn:00003744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003744
.text$mn:00003744 ; =============== S U B R O U T I N E =======================================
.text$mn:00003744
.text$mn:00003744 ; Attributes: bp-based frame
.text$mn:00003744
.text$mn:00003744 ; struct tTbData * * & __cdecl std::_Rechecked<struct tTbData * *, struct tTbData * *>(struct tTbData * * &, struct tTbData * *)
.text$mn:00003744                 public ??$_Rechecked@PAPAUtTbData@@PAPAU1@@std@@YAAAPAPAUtTbData@@AAPAPAU1@PAPAU1@@Z
.text$mn:00003744 ??$_Rechecked@PAPAUtTbData@@PAPAU1@@std@@YAAAPAPAUtTbData@@AAPAPAU1@PAPAU1@@Z proc near
.text$mn:00003744                                         ; CODE XREF: std::_Uninitialized_move<tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>>>(tTbData * *,tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>> &)+3Bp
.text$mn:00003744
.text$mn:00003744 arg_0           = dword ptr  8
.text$mn:00003744 arg_4           = dword ptr  0Ch
.text$mn:00003744
.text$mn:00003744                 push    ebp
.text$mn:00003745                 mov     ebp, esp
.text$mn:00003747                 mov     eax, [ebp+arg_0]
.text$mn:0000374A                 mov     ecx, [ebp+arg_4]
.text$mn:0000374D                 mov     [eax], ecx
.text$mn:0000374F                 mov     eax, [ebp+arg_0]
.text$mn:00003752                 pop     ebp
.text$mn:00003753                 retn
.text$mn:00003753 ??$_Rechecked@PAPAUtTbData@@PAPAU1@@std@@YAAAPAPAUtTbData@@AAPAPAU1@PAPAU1@@Z endp
.text$mn:00003753
.text$mn:00003753 _text$mn        ends
.text$mn:00003753
.text$mn:00003754 ; ===========================================================================
.text$mn:00003754
.text$mn:00003754 ; Segment type: Pure code
.text$mn:00003754 ; Segment permissions: Read/Execute
.text$mn:00003754 _text$mn        segment para public 'CODE' use32
.text$mn:00003754                 assume cs:_text$mn
.text$mn:00003754                 ;org 3754h
.text$mn:00003754 ; COMDAT (pick any)
.text$mn:00003754                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003754
.text$mn:00003754 ; =============== S U B R O U T I N E =======================================
.text$mn:00003754
.text$mn:00003754 ; Attributes: bp-based frame
.text$mn:00003754
.text$mn:00003754 ; protected: struct tTbData * * __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::_Umove<struct tTbData * *>(struct tTbData * *, struct tTbData * *, struct tTbData * *)
.text$mn:00003754                 public ??$_Umove@PAPAUtTbData@@@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEPAPAUtTbData@@PAPAU2@00@Z
.text$mn:00003754 ??$_Umove@PAPAUtTbData@@@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEPAPAUtTbData@@PAPAU2@00@Z proc near
.text$mn:00003754                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Reallocate(uint)+65p
.text$mn:00003754
.text$mn:00003754 var_8           = dword ptr -8
.text$mn:00003754 var_1           = byte ptr -1
.text$mn:00003754 arg_0           = dword ptr  8
.text$mn:00003754 arg_4           = dword ptr  0Ch
.text$mn:00003754 arg_8           = dword ptr  10h
.text$mn:00003754
.text$mn:00003754                 push    ebp
.text$mn:00003755                 mov     ebp, esp
.text$mn:00003757                 sub     esp, 8
.text$mn:0000375A                 mov     [ebp+var_8], ecx
.text$mn:0000375D                 lea     eax, [ebp+var_1]
.text$mn:00003760                 push    eax
.text$mn:00003761                 mov     ecx, [ebp+var_8]
.text$mn:00003764                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Getal(void)
.text$mn:00003769                 lea     ecx, [ebp+var_1]
.text$mn:0000376C                 push    ecx
.text$mn:0000376D                 mov     edx, [ebp+arg_8]
.text$mn:00003770                 push    edx
.text$mn:00003771                 mov     eax, [ebp+arg_4]
.text$mn:00003774                 push    eax
.text$mn:00003775                 mov     ecx, [ebp+arg_0]
.text$mn:00003778                 push    ecx
.text$mn:00003779                 call    ??$_Uninitialized_move@PAPAUtTbData@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@@std@@YAPAPAUtTbData@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@0@@Z ; std::_Uninitialized_move<tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>>>(tTbData * *,tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>> &)
.text$mn:0000377E                 add     esp, 10h
.text$mn:00003781                 mov     esp, ebp
.text$mn:00003783                 pop     ebp
.text$mn:00003784                 retn    0Ch
.text$mn:00003784 ??$_Umove@PAPAUtTbData@@@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEPAPAUtTbData@@PAPAU2@00@Z endp
.text$mn:00003784
.text$mn:00003784 ; ---------------------------------------------------------------------------
.text$mn:00003787                 align 4
.text$mn:00003787 _text$mn        ends
.text$mn:00003787
.text$mn:00003788 ; ===========================================================================
.text$mn:00003788
.text$mn:00003788 ; Segment type: Pure code
.text$mn:00003788 ; Segment permissions: Read/Execute
.text$mn:00003788 _text$mn        segment para public 'CODE' use32
.text$mn:00003788                 assume cs:_text$mn
.text$mn:00003788                 ;org 3788h
.text$mn:00003788 ; COMDAT (pick any)
.text$mn:00003788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003788
.text$mn:00003788 ; =============== S U B R O U T I N E =======================================
.text$mn:00003788
.text$mn:00003788 ; Attributes: bp-based frame
.text$mn:00003788
.text$mn:00003788 ; struct tTbData * * __cdecl std::_Unchecked<struct tTbData * *>(struct tTbData * *)
.text$mn:00003788                 public ??$_Unchecked@PAPAUtTbData@@@std@@YAPAPAUtTbData@@PAPAU1@@Z
.text$mn:00003788 ??$_Unchecked@PAPAUtTbData@@@std@@YAPAPAUtTbData@@PAPAU1@@Z proc near
.text$mn:00003788                                         ; CODE XREF: std::_Uninitialized_move<tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>>>(tTbData * *,tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>> &)+Bp
.text$mn:00003788                                         ; std::_Uninitialized_move<tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>>>(tTbData * *,tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>> &)+18p ...
.text$mn:00003788
.text$mn:00003788 arg_0           = dword ptr  8
.text$mn:00003788
.text$mn:00003788                 push    ebp
.text$mn:00003789                 mov     ebp, esp
.text$mn:0000378B                 mov     eax, [ebp+arg_0]
.text$mn:0000378E                 pop     ebp
.text$mn:0000378F                 retn
.text$mn:0000378F ??$_Unchecked@PAPAUtTbData@@@std@@YAPAPAUtTbData@@PAPAU1@@Z endp
.text$mn:0000378F
.text$mn:0000378F _text$mn        ends
.text$mn:0000378F
.text$mn:00003790 ; ===========================================================================
.text$mn:00003790
.text$mn:00003790 ; Segment type: Pure code
.text$mn:00003790 ; Segment permissions: Read/Execute
.text$mn:00003790 _text$mn        segment para public 'CODE' use32
.text$mn:00003790                 assume cs:_text$mn
.text$mn:00003790                 ;org 3790h
.text$mn:00003790 ; COMDAT (pick any)
.text$mn:00003790                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003790
.text$mn:00003790 ; =============== S U B R O U T I N E =======================================
.text$mn:00003790
.text$mn:00003790 ; Attributes: bp-based frame
.text$mn:00003790
.text$mn:00003790 ; int __cdecl std::_Uninit_move<tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>>>(void *Src, int, void *Dst, int)
.text$mn:00003790                 public ??$_Uninit_move@PAPAUtTbData@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@@std@@YAPAPAUtTbData@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@0@@Z
.text$mn:00003790 ??$_Uninit_move@PAPAUtTbData@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@@std@@YAPAPAUtTbData@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@0@@Z proc near
.text$mn:00003790                                         ; CODE XREF: std::_Uninitialized_move<tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>>>(tTbData * *,tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>> &)+2Ep
.text$mn:00003790
.text$mn:00003790 var_1           = byte ptr -1
.text$mn:00003790 Src             = dword ptr  8
.text$mn:00003790 arg_4           = dword ptr  0Ch
.text$mn:00003790 Dst             = dword ptr  10h
.text$mn:00003790 arg_C           = dword ptr  14h
.text$mn:00003790
.text$mn:00003790                 push    ebp
.text$mn:00003791                 mov     ebp, esp
.text$mn:00003793                 push    ecx
.text$mn:00003794                 mov     eax, [ebp+Dst]
.text$mn:00003797                 push    eax
.text$mn:00003798                 mov     ecx, [ebp+Src]
.text$mn:0000379B                 push    ecx
.text$mn:0000379C                 call    ??$_Ptr_cat@PAUtTbData@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtTbData@@0@Z ; std::_Ptr_cat<tTbData *,tTbData *>(tTbData * *,tTbData * *)
.text$mn:000037A1                 add     esp, 8
.text$mn:000037A4                 mov     [ebp+var_1], al
.text$mn:000037A7                 movzx   edx, [ebp+var_1]
.text$mn:000037AB                 push    edx
.text$mn:000037AC                 mov     eax, [ebp+Src]
.text$mn:000037AF                 push    eax
.text$mn:000037B0                 call    ??$_Val_type@PAPAUtTbData@@@std@@YAPAPAUtTbData@@PAPAU1@@Z ; std::_Val_type<tTbData * *>(tTbData * *)
.text$mn:000037B5                 add     esp, 4
.text$mn:000037B8                 push    eax
.text$mn:000037B9                 mov     ecx, [ebp+arg_C]
.text$mn:000037BC                 push    ecx
.text$mn:000037BD                 mov     edx, [ebp+Dst]
.text$mn:000037C0                 push    edx             ; Dst
.text$mn:000037C1                 mov     eax, [ebp+arg_4]
.text$mn:000037C4                 push    eax             ; int
.text$mn:000037C5                 mov     ecx, [ebp+Src]
.text$mn:000037C8                 push    ecx             ; Src
.text$mn:000037C9                 call    ??$_Uninit_move@PAUtTbData@@PAU1@PAU1@@std@@YAPAPAUtTbData@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<tTbData *,tTbData *,tTbData *>(tTbData * *,tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>> &,tTbData * *,std::_Scalar_ptr_iterator_tag)
.text$mn:000037CE                 add     esp, 18h
.text$mn:000037D1                 mov     esp, ebp
.text$mn:000037D3                 pop     ebp
.text$mn:000037D4                 retn
.text$mn:000037D4 ??$_Uninit_move@PAPAUtTbData@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@@std@@YAPAPAUtTbData@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@0@@Z endp
.text$mn:000037D4
.text$mn:000037D4 ; ---------------------------------------------------------------------------
.text$mn:000037D5                 align 4
.text$mn:000037D5 _text$mn        ends
.text$mn:000037D5
.text$mn:000037D8 ; ===========================================================================
.text$mn:000037D8
.text$mn:000037D8 ; Segment type: Pure code
.text$mn:000037D8 ; Segment permissions: Read/Execute
.text$mn:000037D8 _text$mn        segment para public 'CODE' use32
.text$mn:000037D8                 assume cs:_text$mn
.text$mn:000037D8                 ;org 37D8h
.text$mn:000037D8 ; COMDAT (pick any)
.text$mn:000037D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000037D8
.text$mn:000037D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000037D8
.text$mn:000037D8 ; Attributes: bp-based frame
.text$mn:000037D8
.text$mn:000037D8 ; int __cdecl std::_Uninit_move<tTbData *,tTbData *,tTbData *>(void *Src, int, void *Dst)
.text$mn:000037D8                 public ??$_Uninit_move@PAUtTbData@@PAU1@PAU1@@std@@YAPAPAUtTbData@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
.text$mn:000037D8 ??$_Uninit_move@PAUtTbData@@PAU1@PAU1@@std@@YAPAPAUtTbData@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z proc near
.text$mn:000037D8                                         ; CODE XREF: std::_Uninit_move<tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>>>(tTbData * *,tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>> &)+39p
.text$mn:000037D8
.text$mn:000037D8 var_4           = dword ptr -4
.text$mn:000037D8 Src             = dword ptr  8
.text$mn:000037D8 arg_4           = dword ptr  0Ch
.text$mn:000037D8 Dst             = dword ptr  10h
.text$mn:000037D8
.text$mn:000037D8                 push    ebp
.text$mn:000037D9                 mov     ebp, esp
.text$mn:000037DB                 push    ecx
.text$mn:000037DC                 push    1D6h            ; unsigned int
.text$mn:000037E1                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000037E6                 mov     eax, [ebp+arg_4]
.text$mn:000037E9                 push    eax             ; int
.text$mn:000037EA                 mov     ecx, [ebp+Src]
.text$mn:000037ED                 push    ecx             ; int
.text$mn:000037EE                 call    ??$_Debug_range@PAPAUtTbData@@@std@@YAXPAPAUtTbData@@0PB_WI@Z ; std::_Debug_range<tTbData * *>(tTbData * *,tTbData * *,wchar_t const *,uint)
.text$mn:000037F3                 add     esp, 10h
.text$mn:000037F6                 push    1D7h            ; unsigned int
.text$mn:000037FB                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00003800                 mov     edx, [ebp+Dst]
.text$mn:00003803                 push    edx             ; int
.text$mn:00003804                 call    ??$_Debug_pointer@PAUtTbData@@@std@@YAXPAPAUtTbData@@PB_WI@Z ; std::_Debug_pointer<tTbData *>(tTbData * *,wchar_t const *,uint)
.text$mn:00003809                 add     esp, 0Ch
.text$mn:0000380C                 mov     eax, [ebp+arg_4]
.text$mn:0000380F                 sub     eax, [ebp+Src]
.text$mn:00003812                 sar     eax, 2
.text$mn:00003815                 mov     [ebp+var_4], eax
.text$mn:00003818                 mov     ecx, [ebp+var_4]
.text$mn:0000381B                 shl     ecx, 2
.text$mn:0000381E                 push    ecx             ; Size
.text$mn:0000381F                 mov     edx, [ebp+Src]
.text$mn:00003822                 push    edx             ; Src
.text$mn:00003823                 mov     eax, [ebp+Dst]
.text$mn:00003826                 push    eax             ; Dst
.text$mn:00003827                 call    _memmove
.text$mn:0000382C                 add     esp, 0Ch
.text$mn:0000382F                 mov     ecx, [ebp+var_4]
.text$mn:00003832                 lea     eax, [eax+ecx*4]
.text$mn:00003835                 mov     esp, ebp
.text$mn:00003837                 pop     ebp
.text$mn:00003838                 retn
.text$mn:00003838 ??$_Uninit_move@PAUtTbData@@PAU1@PAU1@@std@@YAPAPAUtTbData@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z endp
.text$mn:00003838
.text$mn:00003838 ; ---------------------------------------------------------------------------
.text$mn:00003839                 align 4
.text$mn:00003839 _text$mn        ends
.text$mn:00003839
.text$mn:0000383C ; ===========================================================================
.text$mn:0000383C
.text$mn:0000383C ; Segment type: Pure code
.text$mn:0000383C ; Segment permissions: Read/Execute
.text$mn:0000383C _text$mn        segment para public 'CODE' use32
.text$mn:0000383C                 assume cs:_text$mn
.text$mn:0000383C                 ;org 383Ch
.text$mn:0000383C ; COMDAT (pick any)
.text$mn:0000383C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000383C
.text$mn:0000383C ; =============== S U B R O U T I N E =======================================
.text$mn:0000383C
.text$mn:0000383C ; Attributes: bp-based frame
.text$mn:0000383C
.text$mn:0000383C ; struct tTbData * * __cdecl std::_Uninitialized_move<struct tTbData * *, struct tTbData * *, struct std::_Wrap_alloc<class std::allocator<struct tTbData *>>>(struct tTbData * *, struct tTbData * *, struct tTbData * *, struct std::_Wrap_alloc<class std::allocator<struct tTbData *>> &)
.text$mn:0000383C                 public ??$_Uninitialized_move@PAPAUtTbData@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@@std@@YAPAPAUtTbData@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@0@@Z
.text$mn:0000383C ??$_Uninitialized_move@PAPAUtTbData@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@@std@@YAPAPAUtTbData@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@0@@Z proc near
.text$mn:0000383C                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Umove<tTbData * *>(tTbData * *,tTbData * *,tTbData * *)+25p
.text$mn:0000383C
.text$mn:0000383C arg_0           = dword ptr  8
.text$mn:0000383C arg_4           = dword ptr  0Ch
.text$mn:0000383C arg_8           = dword ptr  10h
.text$mn:0000383C arg_C           = dword ptr  14h
.text$mn:0000383C
.text$mn:0000383C                 push    ebp
.text$mn:0000383D                 mov     ebp, esp
.text$mn:0000383F                 mov     eax, [ebp+arg_C]
.text$mn:00003842                 push    eax             ; int
.text$mn:00003843                 mov     ecx, [ebp+arg_8]
.text$mn:00003846                 push    ecx
.text$mn:00003847                 call    ??$_Unchecked@PAPAUtTbData@@@std@@YAPAPAUtTbData@@PAPAU1@@Z ; std::_Unchecked<tTbData * *>(tTbData * *)
.text$mn:0000384C                 add     esp, 4
.text$mn:0000384F                 push    eax             ; Dst
.text$mn:00003850                 mov     edx, [ebp+arg_4]
.text$mn:00003853                 push    edx
.text$mn:00003854                 call    ??$_Unchecked@PAPAUtTbData@@@std@@YAPAPAUtTbData@@PAPAU1@@Z ; std::_Unchecked<tTbData * *>(tTbData * *)
.text$mn:00003859                 add     esp, 4
.text$mn:0000385C                 push    eax             ; int
.text$mn:0000385D                 mov     eax, [ebp+arg_0]
.text$mn:00003860                 push    eax
.text$mn:00003861                 call    ??$_Unchecked@PAPAUtTbData@@@std@@YAPAPAUtTbData@@PAPAU1@@Z ; std::_Unchecked<tTbData * *>(tTbData * *)
.text$mn:00003866                 add     esp, 4
.text$mn:00003869                 push    eax             ; Src
.text$mn:0000386A                 call    ??$_Uninit_move@PAPAUtTbData@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@@std@@YAPAPAUtTbData@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@0@@Z ; std::_Uninit_move<tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>>>(tTbData * *,tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>> &)
.text$mn:0000386F                 add     esp, 10h
.text$mn:00003872                 push    eax
.text$mn:00003873                 lea     ecx, [ebp+arg_8]
.text$mn:00003876                 push    ecx
.text$mn:00003877                 call    ??$_Rechecked@PAPAUtTbData@@PAPAU1@@std@@YAAAPAPAUtTbData@@AAPAPAU1@PAPAU1@@Z ; std::_Rechecked<tTbData * *,tTbData * *>(tTbData * * &,tTbData * *)
.text$mn:0000387C                 add     esp, 8
.text$mn:0000387F                 mov     eax, [eax]
.text$mn:00003881                 pop     ebp
.text$mn:00003882                 retn
.text$mn:00003882 ??$_Uninitialized_move@PAPAUtTbData@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@@std@@YAPAPAUtTbData@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@0@@Z endp
.text$mn:00003882
.text$mn:00003882 ; ---------------------------------------------------------------------------
.text$mn:00003883                 align 4
.text$mn:00003883 _text$mn        ends
.text$mn:00003883
.text$mn:00003884 ; ===========================================================================
.text$mn:00003884
.text$mn:00003884 ; Segment type: Pure code
.text$mn:00003884 ; Segment permissions: Read/Execute
.text$mn:00003884 _text$mn        segment para public 'CODE' use32
.text$mn:00003884                 assume cs:_text$mn
.text$mn:00003884                 ;org 3884h
.text$mn:00003884 ; COMDAT (pick any)
.text$mn:00003884                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003884
.text$mn:00003884 ; =============== S U B R O U T I N E =======================================
.text$mn:00003884
.text$mn:00003884 ; Attributes: bp-based frame
.text$mn:00003884
.text$mn:00003884 ; struct tTbData * * __cdecl std::_Val_type<struct tTbData * *>(struct tTbData * *)
.text$mn:00003884                 public ??$_Val_type@PAPAUtTbData@@@std@@YAPAPAUtTbData@@PAPAU1@@Z
.text$mn:00003884 ??$_Val_type@PAPAUtTbData@@@std@@YAPAPAUtTbData@@PAPAU1@@Z proc near
.text$mn:00003884                                         ; CODE XREF: std::_Uninit_move<tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>>>(tTbData * *,tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>> &)+20p
.text$mn:00003884                 push    ebp
.text$mn:00003885                 mov     ebp, esp
.text$mn:00003887                 xor     eax, eax
.text$mn:00003889                 pop     ebp
.text$mn:0000388A                 retn
.text$mn:0000388A ??$_Val_type@PAPAUtTbData@@@std@@YAPAPAUtTbData@@PAPAU1@@Z endp
.text$mn:0000388A
.text$mn:0000388A ; ---------------------------------------------------------------------------
.text$mn:0000388B                 align 4
.text$mn:0000388B _text$mn        ends
.text$mn:0000388B
.text$mn:0000388C ; ===========================================================================
.text$mn:0000388C
.text$mn:0000388C ; Segment type: Pure code
.text$mn:0000388C ; Segment permissions: Read/Execute
.text$mn:0000388C _text$mn        segment para public 'CODE' use32
.text$mn:0000388C                 assume cs:_text$mn
.text$mn:0000388C                 ;org 388Ch
.text$mn:0000388C ; COMDAT (pick any)
.text$mn:0000388C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000388C
.text$mn:0000388C ; =============== S U B R O U T I N E =======================================
.text$mn:0000388C
.text$mn:0000388C ; Attributes: bp-based frame
.text$mn:0000388C
.text$mn:0000388C ; char * __cdecl std::addressof<char>(char &)
.text$mn:0000388C                 public ??$addressof@D@std@@YAPADAAD@Z
.text$mn:0000388C ??$addressof@D@std@@YAPADAAD@Z proc near
.text$mn:0000388C                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p
.text$mn:0000388C                                         ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p ...
.text$mn:0000388C
.text$mn:0000388C arg_0           = dword ptr  8
.text$mn:0000388C
.text$mn:0000388C                 push    ebp
.text$mn:0000388D                 mov     ebp, esp
.text$mn:0000388F                 mov     eax, [ebp+arg_0]
.text$mn:00003892                 pop     ebp
.text$mn:00003893                 retn
.text$mn:00003893 ??$addressof@D@std@@YAPADAAD@Z endp
.text$mn:00003893
.text$mn:00003893 _text$mn        ends
.text$mn:00003893
.text$mn:00003894 ; ===========================================================================
.text$mn:00003894
.text$mn:00003894 ; Segment type: Pure code
.text$mn:00003894 ; Segment permissions: Read/Execute
.text$mn:00003894 _text$mn        segment para public 'CODE' use32
.text$mn:00003894                 assume cs:_text$mn
.text$mn:00003894                 ;org 3894h
.text$mn:00003894 ; COMDAT (pick any)
.text$mn:00003894                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003894
.text$mn:00003894 ; =============== S U B R O U T I N E =======================================
.text$mn:00003894
.text$mn:00003894 ; Attributes: bp-based frame
.text$mn:00003894
.text$mn:00003894 ; struct tTbData * * __cdecl std::addressof<struct tTbData *>(struct tTbData * &)
.text$mn:00003894                 public ??$addressof@PAUtTbData@@@std@@YAPAPAUtTbData@@AAPAU1@@Z
.text$mn:00003894 ??$addressof@PAUtTbData@@@std@@YAPAPAUtTbData@@AAPAU1@@Z proc near
.text$mn:00003894                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * &&)+Dp
.text$mn:00003894                                         ; std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * &&)+2Dp
.text$mn:00003894
.text$mn:00003894 arg_0           = dword ptr  8
.text$mn:00003894
.text$mn:00003894                 push    ebp
.text$mn:00003895                 mov     ebp, esp
.text$mn:00003897                 mov     eax, [ebp+arg_0]
.text$mn:0000389A                 pop     ebp
.text$mn:0000389B                 retn
.text$mn:0000389B ??$addressof@PAUtTbData@@@std@@YAPAPAUtTbData@@AAPAU1@@Z endp
.text$mn:0000389B
.text$mn:0000389B _text$mn        ends
.text$mn:0000389B
.text$mn:0000389C ; ===========================================================================
.text$mn:0000389C
.text$mn:0000389C ; Segment type: Pure code
.text$mn:0000389C ; Segment permissions: Read/Execute
.text$mn:0000389C _text$mn        segment para public 'CODE' use32
.text$mn:0000389C                 assume cs:_text$mn
.text$mn:0000389C                 ;org 389Ch
.text$mn:0000389C ; COMDAT (pick any)
.text$mn:0000389C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000389C
.text$mn:0000389C ; =============== S U B R O U T I N E =======================================
.text$mn:0000389C
.text$mn:0000389C ; Attributes: bp-based frame
.text$mn:0000389C
.text$mn:0000389C ; struct tTbData * const * __cdecl std::addressof<struct tTbData * const>(struct tTbData * const &)
.text$mn:0000389C                 public ??$addressof@QAUtTbData@@@std@@YAPBQAUtTbData@@ABQAU1@@Z
.text$mn:0000389C ??$addressof@QAUtTbData@@@std@@YAPBQAUtTbData@@ABQAU1@@Z proc near
.text$mn:0000389C                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * const &)+Dp
.text$mn:0000389C                                         ; std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * const &)+29p
.text$mn:0000389C
.text$mn:0000389C arg_0           = dword ptr  8
.text$mn:0000389C
.text$mn:0000389C                 push    ebp
.text$mn:0000389D                 mov     ebp, esp
.text$mn:0000389F                 mov     eax, [ebp+arg_0]
.text$mn:000038A2                 pop     ebp
.text$mn:000038A3                 retn
.text$mn:000038A3 ??$addressof@QAUtTbData@@@std@@YAPBQAUtTbData@@ABQAU1@@Z endp
.text$mn:000038A3
.text$mn:000038A3 _text$mn        ends
.text$mn:000038A3
.text$mn:000038A4 ; ===========================================================================
.text$mn:000038A4
.text$mn:000038A4 ; Segment type: Pure code
.text$mn:000038A4 ; Segment permissions: Read/Execute
.text$mn:000038A4 _text$mn        segment para public 'CODE' use32
.text$mn:000038A4                 assume cs:_text$mn
.text$mn:000038A4                 ;org 38A4h
.text$mn:000038A4 ; COMDAT (pick any)
.text$mn:000038A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000038A4
.text$mn:000038A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000038A4
.text$mn:000038A4 ; Attributes: bp-based frame
.text$mn:000038A4
.text$mn:000038A4 ; wchar_t * __cdecl std::addressof<wchar_t>(wchar_t &)
.text$mn:000038A4                 public ??$addressof@_W@std@@YAPA_WAA_W@Z
.text$mn:000038A4 ??$addressof@_W@std@@YAPA_WAA_W@Z proc near
.text$mn:000038A4                                         ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p
.text$mn:000038A4                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p ...
.text$mn:000038A4
.text$mn:000038A4 arg_0           = dword ptr  8
.text$mn:000038A4
.text$mn:000038A4                 push    ebp
.text$mn:000038A5                 mov     ebp, esp
.text$mn:000038A7                 mov     eax, [ebp+arg_0]
.text$mn:000038AA                 pop     ebp
.text$mn:000038AB                 retn
.text$mn:000038AB ??$addressof@_W@std@@YAPA_WAA_W@Z endp
.text$mn:000038AB
.text$mn:000038AB _text$mn        ends
.text$mn:000038AB
.text$mn:000038AC ; ===========================================================================
.text$mn:000038AC
.text$mn:000038AC ; Segment type: Pure code
.text$mn:000038AC ; Segment permissions: Read/Execute
.text$mn:000038AC _text$mn        segment para public 'CODE' use32
.text$mn:000038AC                 assume cs:_text$mn
.text$mn:000038AC                 ;org 38ACh
.text$mn:000038AC ; COMDAT (pick any)
.text$mn:000038AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000038AC
.text$mn:000038AC ; =============== S U B R O U T I N E =======================================
.text$mn:000038AC
.text$mn:000038AC ; Attributes: bp-based frame
.text$mn:000038AC
.text$mn:000038AC ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(void *, int)
.text$mn:000038AC                 public ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
.text$mn:000038AC ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:000038AC                                         ; CODE XREF: $LN19+4Bp
.text$mn:000038AC
.text$mn:000038AC var_4           = dword ptr -4
.text$mn:000038AC arg_0           = dword ptr  8
.text$mn:000038AC arg_4           = dword ptr  0Ch
.text$mn:000038AC
.text$mn:000038AC                 push    ebp
.text$mn:000038AD                 mov     ebp, esp
.text$mn:000038AF                 push    ecx
.text$mn:000038B0                 mov     [ebp+var_4], ecx
.text$mn:000038B3                 mov     eax, [ebp+arg_4]
.text$mn:000038B6                 push    eax
.text$mn:000038B7                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:000038BC                 add     esp, 4
.text$mn:000038BF                 push    eax             ; int
.text$mn:000038C0                 mov     ecx, [ebp+arg_0]
.text$mn:000038C3                 push    ecx             ; void *
.text$mn:000038C4                 mov     edx, [ebp+var_4]
.text$mn:000038C7                 push    edx             ; int
.text$mn:000038C8                 call    ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)
.text$mn:000038CD                 add     esp, 0Ch
.text$mn:000038D0                 mov     esp, ebp
.text$mn:000038D2                 pop     ebp
.text$mn:000038D3                 retn    8
.text$mn:000038D3 ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z endp
.text$mn:000038D3
.text$mn:000038D3 ; ---------------------------------------------------------------------------
.text$mn:000038D6                 align 4
.text$mn:000038D6 _text$mn        ends
.text$mn:000038D6
.text$mn:000038D8 ; ===========================================================================
.text$mn:000038D8
.text$mn:000038D8 ; Segment type: Pure code
.text$mn:000038D8 ; Segment permissions: Read/Execute
.text$mn:000038D8 _text$mn        segment para public 'CODE' use32
.text$mn:000038D8                 assume cs:_text$mn
.text$mn:000038D8                 ;org 38D8h
.text$mn:000038D8 ; COMDAT (pick any)
.text$mn:000038D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000038D8
.text$mn:000038D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000038D8
.text$mn:000038D8 ; Attributes: bp-based frame
.text$mn:000038D8
.text$mn:000038D8 ; int __stdcall std::allocator<char>::construct<char *,char * &>(void *, int)
.text$mn:000038D8                 public ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:000038D8 ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:000038D8                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)+17p
.text$mn:000038D8
.text$mn:000038D8 var_1C          = dword ptr -1Ch
.text$mn:000038D8 var_18          = dword ptr -18h
.text$mn:000038D8 var_14          = dword ptr -14h
.text$mn:000038D8 var_10          = dword ptr -10h
.text$mn:000038D8 var_C           = dword ptr -0Ch
.text$mn:000038D8 var_4           = dword ptr -4
.text$mn:000038D8 arg_0           = dword ptr  8
.text$mn:000038D8 arg_4           = dword ptr  0Ch
.text$mn:000038D8
.text$mn:000038D8                 push    ebp
.text$mn:000038D9                 mov     ebp, esp
.text$mn:000038DB                 push    0FFFFFFFFh
.text$mn:000038DD                 push    offset __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:000038E2                 mov     eax, large fs:0
.text$mn:000038E8                 push    eax
.text$mn:000038E9                 sub     esp, 10h
.text$mn:000038EC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000038F1                 xor     eax, ebp
.text$mn:000038F3                 push    eax
.text$mn:000038F4                 lea     eax, [ebp+var_C]
.text$mn:000038F7                 mov     large fs:0, eax
.text$mn:000038FD                 mov     [ebp+var_18], ecx
.text$mn:00003900                 mov     eax, [ebp+arg_0]
.text$mn:00003903                 push    eax             ; void *
.text$mn:00003904                 push    4               ; unsigned int
.text$mn:00003906                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:0000390B                 add     esp, 8
.text$mn:0000390E                 mov     [ebp+var_10], eax
.text$mn:00003911                 mov     [ebp+var_4], 0
.text$mn:00003918                 cmp     [ebp+var_10], 0
.text$mn:0000391C                 jz      short loc_3939
.text$mn:0000391E                 mov     ecx, [ebp+arg_4]
.text$mn:00003921                 push    ecx
.text$mn:00003922                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00003927                 add     esp, 4
.text$mn:0000392A                 mov     edx, [ebp+var_10]
.text$mn:0000392D                 mov     eax, [eax]
.text$mn:0000392F                 mov     [edx], eax
.text$mn:00003931                 mov     ecx, [ebp+var_10]
.text$mn:00003934                 mov     [ebp+var_14], ecx
.text$mn:00003937                 jmp     short loc_3940
.text$mn:00003939 ; ---------------------------------------------------------------------------
.text$mn:00003939
.text$mn:00003939 loc_3939:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+44j
.text$mn:00003939                 mov     [ebp+var_14], 0
.text$mn:00003940
.text$mn:00003940 loc_3940:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5Fj
.text$mn:00003940                 mov     edx, [ebp+var_14]
.text$mn:00003943                 mov     [ebp+var_1C], edx
.text$mn:00003946                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000394D                 mov     ecx, [ebp+var_C]
.text$mn:00003950                 mov     large fs:0, ecx
.text$mn:00003957                 pop     ecx
.text$mn:00003958                 mov     esp, ebp
.text$mn:0000395A                 pop     ebp
.text$mn:0000395B                 retn    8
.text$mn:0000395B ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$mn:0000395B
.text$mn:0000395B ; ---------------------------------------------------------------------------
.text$mn:0000395E                 align 10h
.text$mn:0000395E _text$mn        ends
.text$mn:0000395E
.text$x:00003960 ; ===========================================================================
.text$x:00003960
.text$x:00003960 ; Segment type: Pure code
.text$x:00003960 ; Segment permissions: Read/Execute
.text$x:00003960 _text$x         segment para public 'CODE' use32
.text$x:00003960                 assume cs:_text$x
.text$x:00003960                 ;org 3960h
.text$x:00003960 ; COMDAT (pick associative to section at 38D8)
.text$x:00003960                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003960
.text$x:00003960 ; =============== S U B R O U T I N E =======================================
.text$x:00003960
.text$x:00003960
.text$x:00003960 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
.text$x:00003960                                         ; DATA XREF: .xdata$x:00009170o
.text$x:00003960                 mov     eax, [ebp+8]
.text$x:00003963                 push    eax
.text$x:00003964                 mov     eax, [ebp-10h]
.text$x:00003967                 push    eax             ; void *
.text$x:00003968                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:0000396D                 add     esp, 8
.text$x:00003970                 retn
.text$x:00003970 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 endp
.text$x:00003970
.text$x:00003971
.text$x:00003971 ; =============== S U B R O U T I N E =======================================
.text$x:00003971
.text$x:00003971
.text$x:00003971 __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$x:00003971                                         ; DATA XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5o
.text$x:00003971
.text$x:00003971 arg_4           = dword ptr  8
.text$x:00003971
.text$x:00003971                 mov     edx, [esp+arg_4]
.text$x:00003975                 lea     eax, [edx+0Ch]
.text$x:00003978                 mov     ecx, [edx-14h]
.text$x:0000397B                 xor     ecx, eax
.text$x:0000397D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003982                 mov     eax, offset __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$x:00003987                 jmp     ___CxxFrameHandler3
.text$x:00003987 __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$x:00003987
.text$x:00003987 _text$x         ends
.text$x:00003987
.text$mn:0000398C ; ===========================================================================
.text$mn:0000398C
.text$mn:0000398C ; Segment type: Pure code
.text$mn:0000398C ; Segment permissions: Read/Execute
.text$mn:0000398C _text$mn        segment para public 'CODE' use32
.text$mn:0000398C                 assume cs:_text$mn
.text$mn:0000398C                 ;org 398Ch
.text$mn:0000398C ; COMDAT (pick any)
.text$mn:0000398C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000398C
.text$mn:0000398C ; =============== S U B R O U T I N E =======================================
.text$mn:0000398C
.text$mn:0000398C ; Attributes: bp-based frame
.text$mn:0000398C
.text$mn:0000398C ; int __cdecl std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(int, void *, int)
.text$mn:0000398C                 public ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
.text$mn:0000398C ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
.text$mn:0000398C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+1Cp
.text$mn:0000398C
.text$mn:0000398C arg_0           = dword ptr  8
.text$mn:0000398C arg_4           = dword ptr  0Ch
.text$mn:0000398C arg_8           = dword ptr  10h
.text$mn:0000398C
.text$mn:0000398C                 push    ebp
.text$mn:0000398D                 mov     ebp, esp
.text$mn:0000398F                 mov     eax, [ebp+arg_8]
.text$mn:00003992                 push    eax
.text$mn:00003993                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00003998                 add     esp, 4
.text$mn:0000399B                 push    eax             ; int
.text$mn:0000399C                 mov     ecx, [ebp+arg_4]
.text$mn:0000399F                 push    ecx             ; void *
.text$mn:000039A0                 mov     ecx, [ebp+arg_0]
.text$mn:000039A3                 call    ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)
.text$mn:000039A8                 pop     ebp
.text$mn:000039A9                 retn
.text$mn:000039A9 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z endp
.text$mn:000039A9
.text$mn:000039A9 ; ---------------------------------------------------------------------------
.text$mn:000039AA                 align 4
.text$mn:000039AA _text$mn        ends
.text$mn:000039AA
.text$mn:000039AC ; ===========================================================================
.text$mn:000039AC
.text$mn:000039AC ; Segment type: Pure code
.text$mn:000039AC ; Segment permissions: Read/Execute
.text$mn:000039AC _text$mn        segment para public 'CODE' use32
.text$mn:000039AC                 assume cs:_text$mn
.text$mn:000039AC                 ;org 39ACh
.text$mn:000039AC ; COMDAT (pick any)
.text$mn:000039AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000039AC
.text$mn:000039AC ; =============== S U B R O U T I N E =======================================
.text$mn:000039AC
.text$mn:000039AC ; Attributes: bp-based frame
.text$mn:000039AC
.text$mn:000039AC ; int __stdcall std::_Wrap_alloc<std::allocator<tTbData *>>::construct<tTbData *,tTbData * &>(void *, int)
.text$mn:000039AC                 public ??$construct@PAUtTbData@@AAPAU1@@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEXPAPAUtTbData@@AAPAU2@@Z
.text$mn:000039AC ??$construct@PAUtTbData@@AAPAU1@@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEXPAPAUtTbData@@AAPAU2@@Z proc near
.text$mn:000039AC                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * const &)+8Dp
.text$mn:000039AC
.text$mn:000039AC var_4           = dword ptr -4
.text$mn:000039AC arg_0           = dword ptr  8
.text$mn:000039AC arg_4           = dword ptr  0Ch
.text$mn:000039AC
.text$mn:000039AC                 push    ebp
.text$mn:000039AD                 mov     ebp, esp
.text$mn:000039AF                 push    ecx
.text$mn:000039B0                 mov     [ebp+var_4], ecx
.text$mn:000039B3                 mov     eax, [ebp+arg_4]
.text$mn:000039B6                 push    eax
.text$mn:000039B7                 call    ??$forward@AAPAUtTbData@@@std@@YAAAPAUtTbData@@AAPAU1@@Z ; std::forward<tTbData * &>(tTbData * &)
.text$mn:000039BC                 add     esp, 4
.text$mn:000039BF                 push    eax             ; int
.text$mn:000039C0                 mov     ecx, [ebp+arg_0]
.text$mn:000039C3                 push    ecx             ; void *
.text$mn:000039C4                 mov     edx, [ebp+var_4]
.text$mn:000039C7                 push    edx             ; int
.text$mn:000039C8                 call    ??$construct@PAUtTbData@@AAPAU1@@?$allocator_traits@V?$allocator@PAUtTbData@@@std@@@std@@SAXAAV?$allocator@PAUtTbData@@@1@PAPAUtTbData@@AAPAU3@@Z ; std::allocator_traits<std::allocator<tTbData *>>::construct<tTbData *,tTbData * &>(std::allocator<tTbData *> &,tTbData * *,tTbData * &)
.text$mn:000039CD                 add     esp, 0Ch
.text$mn:000039D0                 mov     esp, ebp
.text$mn:000039D2                 pop     ebp
.text$mn:000039D3                 retn    8
.text$mn:000039D3 ??$construct@PAUtTbData@@AAPAU1@@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEXPAPAUtTbData@@AAPAU2@@Z endp
.text$mn:000039D3
.text$mn:000039D3 ; ---------------------------------------------------------------------------
.text$mn:000039D6                 align 4
.text$mn:000039D6 _text$mn        ends
.text$mn:000039D6
.text$mn:000039D8 ; ===========================================================================
.text$mn:000039D8
.text$mn:000039D8 ; Segment type: Pure code
.text$mn:000039D8 ; Segment permissions: Read/Execute
.text$mn:000039D8 _text$mn        segment para public 'CODE' use32
.text$mn:000039D8                 assume cs:_text$mn
.text$mn:000039D8                 ;org 39D8h
.text$mn:000039D8 ; COMDAT (pick any)
.text$mn:000039D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000039D8
.text$mn:000039D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000039D8
.text$mn:000039D8 ; Attributes: bp-based frame
.text$mn:000039D8
.text$mn:000039D8 ; int __stdcall std::allocator<tTbData *>::construct<tTbData *,tTbData * &>(void *, int)
.text$mn:000039D8                 public ??$construct@PAUtTbData@@AAPAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@AAPAU2@@Z
.text$mn:000039D8 ??$construct@PAUtTbData@@AAPAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@AAPAU2@@Z proc near
.text$mn:000039D8                                         ; CODE XREF: std::allocator_traits<std::allocator<tTbData *>>::construct<tTbData *,tTbData * &>(std::allocator<tTbData *> &,tTbData * *,tTbData * &)+17p
.text$mn:000039D8
.text$mn:000039D8 var_1C          = dword ptr -1Ch
.text$mn:000039D8 var_18          = dword ptr -18h
.text$mn:000039D8 var_14          = dword ptr -14h
.text$mn:000039D8 var_10          = dword ptr -10h
.text$mn:000039D8 var_C           = dword ptr -0Ch
.text$mn:000039D8 var_4           = dword ptr -4
.text$mn:000039D8 arg_0           = dword ptr  8
.text$mn:000039D8 arg_4           = dword ptr  0Ch
.text$mn:000039D8
.text$mn:000039D8                 push    ebp
.text$mn:000039D9                 mov     ebp, esp
.text$mn:000039DB                 push    0FFFFFFFFh
.text$mn:000039DD                 push    offset __ehhandler$??$construct@PAUtTbData@@AAPAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@AAPAU2@@Z
.text$mn:000039E2                 mov     eax, large fs:0
.text$mn:000039E8                 push    eax
.text$mn:000039E9                 sub     esp, 10h
.text$mn:000039EC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000039F1                 xor     eax, ebp
.text$mn:000039F3                 push    eax
.text$mn:000039F4                 lea     eax, [ebp+var_C]
.text$mn:000039F7                 mov     large fs:0, eax
.text$mn:000039FD                 mov     [ebp+var_18], ecx
.text$mn:00003A00                 mov     eax, [ebp+arg_0]
.text$mn:00003A03                 push    eax             ; void *
.text$mn:00003A04                 push    4               ; unsigned int
.text$mn:00003A06                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00003A0B                 add     esp, 8
.text$mn:00003A0E                 mov     [ebp+var_10], eax
.text$mn:00003A11                 mov     [ebp+var_4], 0
.text$mn:00003A18                 cmp     [ebp+var_10], 0
.text$mn:00003A1C                 jz      short loc_3A39
.text$mn:00003A1E                 mov     ecx, [ebp+arg_4]
.text$mn:00003A21                 push    ecx
.text$mn:00003A22                 call    ??$forward@AAPAUtTbData@@@std@@YAAAPAUtTbData@@AAPAU1@@Z ; std::forward<tTbData * &>(tTbData * &)
.text$mn:00003A27                 add     esp, 4
.text$mn:00003A2A                 mov     edx, [ebp+var_10]
.text$mn:00003A2D                 mov     eax, [eax]
.text$mn:00003A2F                 mov     [edx], eax
.text$mn:00003A31                 mov     ecx, [ebp+var_10]
.text$mn:00003A34                 mov     [ebp+var_14], ecx
.text$mn:00003A37                 jmp     short loc_3A40
.text$mn:00003A39 ; ---------------------------------------------------------------------------
.text$mn:00003A39
.text$mn:00003A39 loc_3A39:                               ; CODE XREF: std::allocator<tTbData *>::construct<tTbData *,tTbData * &>(tTbData * *,tTbData * &)+44j
.text$mn:00003A39                 mov     [ebp+var_14], 0
.text$mn:00003A40
.text$mn:00003A40 loc_3A40:                               ; CODE XREF: std::allocator<tTbData *>::construct<tTbData *,tTbData * &>(tTbData * *,tTbData * &)+5Fj
.text$mn:00003A40                 mov     edx, [ebp+var_14]
.text$mn:00003A43                 mov     [ebp+var_1C], edx
.text$mn:00003A46                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003A4D                 mov     ecx, [ebp+var_C]
.text$mn:00003A50                 mov     large fs:0, ecx
.text$mn:00003A57                 pop     ecx
.text$mn:00003A58                 mov     esp, ebp
.text$mn:00003A5A                 pop     ebp
.text$mn:00003A5B                 retn    8
.text$mn:00003A5B ??$construct@PAUtTbData@@AAPAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@AAPAU2@@Z endp
.text$mn:00003A5B
.text$mn:00003A5B ; ---------------------------------------------------------------------------
.text$mn:00003A5E                 align 10h
.text$mn:00003A5E _text$mn        ends
.text$mn:00003A5E
.text$x:00003A60 ; ===========================================================================
.text$x:00003A60
.text$x:00003A60 ; Segment type: Pure code
.text$x:00003A60 ; Segment permissions: Read/Execute
.text$x:00003A60 _text$x         segment para public 'CODE' use32
.text$x:00003A60                 assume cs:_text$x
.text$x:00003A60                 ;org 3A60h
.text$x:00003A60 ; COMDAT (pick associative to section at 39D8)
.text$x:00003A60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003A60
.text$x:00003A60 ; =============== S U B R O U T I N E =======================================
.text$x:00003A60
.text$x:00003A60
.text$x:00003A60 __unwindfunclet$??$construct@PAUtTbData@@AAPAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@AAPAU2@@Z$0 proc near
.text$x:00003A60                                         ; DATA XREF: .xdata$x:00009144o
.text$x:00003A60                 mov     eax, [ebp+8]
.text$x:00003A63                 push    eax
.text$x:00003A64                 mov     eax, [ebp-10h]
.text$x:00003A67                 push    eax             ; void *
.text$x:00003A68                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00003A6D                 add     esp, 8
.text$x:00003A70                 retn
.text$x:00003A70 __unwindfunclet$??$construct@PAUtTbData@@AAPAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@AAPAU2@@Z$0 endp
.text$x:00003A70
.text$x:00003A71
.text$x:00003A71 ; =============== S U B R O U T I N E =======================================
.text$x:00003A71
.text$x:00003A71
.text$x:00003A71 __ehhandler$??$construct@PAUtTbData@@AAPAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@AAPAU2@@Z proc near
.text$x:00003A71                                         ; DATA XREF: std::allocator<tTbData *>::construct<tTbData *,tTbData * &>(tTbData * *,tTbData * &)+5o
.text$x:00003A71
.text$x:00003A71 arg_4           = dword ptr  8
.text$x:00003A71
.text$x:00003A71                 mov     edx, [esp+arg_4]
.text$x:00003A75                 lea     eax, [edx+0Ch]
.text$x:00003A78                 mov     ecx, [edx-14h]
.text$x:00003A7B                 xor     ecx, eax
.text$x:00003A7D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003A82                 mov     eax, offset __ehfuncinfo$??$construct@PAUtTbData@@AAPAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@AAPAU2@@Z
.text$x:00003A87                 jmp     ___CxxFrameHandler3
.text$x:00003A87 __ehhandler$??$construct@PAUtTbData@@AAPAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@AAPAU2@@Z endp
.text$x:00003A87
.text$x:00003A87 _text$x         ends
.text$x:00003A87
.text$mn:00003A8C ; ===========================================================================
.text$mn:00003A8C
.text$mn:00003A8C ; Segment type: Pure code
.text$mn:00003A8C ; Segment permissions: Read/Execute
.text$mn:00003A8C _text$mn        segment para public 'CODE' use32
.text$mn:00003A8C                 assume cs:_text$mn
.text$mn:00003A8C                 ;org 3A8Ch
.text$mn:00003A8C ; COMDAT (pick any)
.text$mn:00003A8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003A8C
.text$mn:00003A8C ; =============== S U B R O U T I N E =======================================
.text$mn:00003A8C
.text$mn:00003A8C ; Attributes: bp-based frame
.text$mn:00003A8C
.text$mn:00003A8C ; int __cdecl std::allocator_traits<std::allocator<tTbData *>>::construct<tTbData *,tTbData * &>(int, void *, int)
.text$mn:00003A8C                 public ??$construct@PAUtTbData@@AAPAU1@@?$allocator_traits@V?$allocator@PAUtTbData@@@std@@@std@@SAXAAV?$allocator@PAUtTbData@@@1@PAPAUtTbData@@AAPAU3@@Z
.text$mn:00003A8C ??$construct@PAUtTbData@@AAPAU1@@?$allocator_traits@V?$allocator@PAUtTbData@@@std@@@std@@SAXAAV?$allocator@PAUtTbData@@@1@PAPAUtTbData@@AAPAU3@@Z proc near
.text$mn:00003A8C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<tTbData *>>::construct<tTbData *,tTbData * &>(tTbData * *,tTbData * &)+1Cp
.text$mn:00003A8C
.text$mn:00003A8C arg_0           = dword ptr  8
.text$mn:00003A8C arg_4           = dword ptr  0Ch
.text$mn:00003A8C arg_8           = dword ptr  10h
.text$mn:00003A8C
.text$mn:00003A8C                 push    ebp
.text$mn:00003A8D                 mov     ebp, esp
.text$mn:00003A8F                 mov     eax, [ebp+arg_8]
.text$mn:00003A92                 push    eax
.text$mn:00003A93                 call    ??$forward@AAPAUtTbData@@@std@@YAAAPAUtTbData@@AAPAU1@@Z ; std::forward<tTbData * &>(tTbData * &)
.text$mn:00003A98                 add     esp, 4
.text$mn:00003A9B                 push    eax             ; int
.text$mn:00003A9C                 mov     ecx, [ebp+arg_4]
.text$mn:00003A9F                 push    ecx             ; void *
.text$mn:00003AA0                 mov     ecx, [ebp+arg_0]
.text$mn:00003AA3                 call    ??$construct@PAUtTbData@@AAPAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@AAPAU2@@Z ; std::allocator<tTbData *>::construct<tTbData *,tTbData * &>(tTbData * *,tTbData * &)
.text$mn:00003AA8                 pop     ebp
.text$mn:00003AA9                 retn
.text$mn:00003AA9 ??$construct@PAUtTbData@@AAPAU1@@?$allocator_traits@V?$allocator@PAUtTbData@@@std@@@std@@SAXAAV?$allocator@PAUtTbData@@@1@PAPAUtTbData@@AAPAU3@@Z endp
.text$mn:00003AA9
.text$mn:00003AA9 ; ---------------------------------------------------------------------------
.text$mn:00003AAA                 align 4
.text$mn:00003AAA _text$mn        ends
.text$mn:00003AAA
.text$mn:00003AAC ; ===========================================================================
.text$mn:00003AAC
.text$mn:00003AAC ; Segment type: Pure code
.text$mn:00003AAC ; Segment permissions: Read/Execute
.text$mn:00003AAC _text$mn        segment para public 'CODE' use32
.text$mn:00003AAC                 assume cs:_text$mn
.text$mn:00003AAC                 ;org 3AACh
.text$mn:00003AAC ; COMDAT (pick any)
.text$mn:00003AAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003AAC
.text$mn:00003AAC ; =============== S U B R O U T I N E =======================================
.text$mn:00003AAC
.text$mn:00003AAC ; Attributes: bp-based frame
.text$mn:00003AAC
.text$mn:00003AAC ; int __stdcall std::_Wrap_alloc<std::allocator<tTbData *>>::construct<tTbData *,tTbData * const &>(void *, int)
.text$mn:00003AAC                 public ??$construct@PAUtTbData@@ABQAU1@@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEXPAPAUtTbData@@ABQAU2@@Z
.text$mn:00003AAC ??$construct@PAUtTbData@@ABQAU1@@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEXPAPAUtTbData@@ABQAU2@@Z proc near
.text$mn:00003AAC                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * const &)+EAp
.text$mn:00003AAC
.text$mn:00003AAC var_4           = dword ptr -4
.text$mn:00003AAC arg_0           = dword ptr  8
.text$mn:00003AAC arg_4           = dword ptr  0Ch
.text$mn:00003AAC
.text$mn:00003AAC                 push    ebp
.text$mn:00003AAD                 mov     ebp, esp
.text$mn:00003AAF                 push    ecx
.text$mn:00003AB0                 mov     [ebp+var_4], ecx
.text$mn:00003AB3                 mov     eax, [ebp+arg_4]
.text$mn:00003AB6                 push    eax
.text$mn:00003AB7                 call    ??$forward@ABQAUtTbData@@@std@@YAABQAUtTbData@@ABQAU1@@Z ; std::forward<tTbData * const &>(tTbData * const &)
.text$mn:00003ABC                 add     esp, 4
.text$mn:00003ABF                 push    eax             ; int
.text$mn:00003AC0                 mov     ecx, [ebp+arg_0]
.text$mn:00003AC3                 push    ecx             ; void *
.text$mn:00003AC4                 mov     edx, [ebp+var_4]
.text$mn:00003AC7                 push    edx             ; int
.text$mn:00003AC8                 call    ??$construct@PAUtTbData@@ABQAU1@@?$allocator_traits@V?$allocator@PAUtTbData@@@std@@@std@@SAXAAV?$allocator@PAUtTbData@@@1@PAPAUtTbData@@ABQAU3@@Z ; std::allocator_traits<std::allocator<tTbData *>>::construct<tTbData *,tTbData * const &>(std::allocator<tTbData *> &,tTbData * *,tTbData * const &)
.text$mn:00003ACD                 add     esp, 0Ch
.text$mn:00003AD0                 mov     esp, ebp
.text$mn:00003AD2                 pop     ebp
.text$mn:00003AD3                 retn    8
.text$mn:00003AD3 ??$construct@PAUtTbData@@ABQAU1@@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEXPAPAUtTbData@@ABQAU2@@Z endp
.text$mn:00003AD3
.text$mn:00003AD3 ; ---------------------------------------------------------------------------
.text$mn:00003AD6                 align 4
.text$mn:00003AD6 _text$mn        ends
.text$mn:00003AD6
.text$mn:00003AD8 ; ===========================================================================
.text$mn:00003AD8
.text$mn:00003AD8 ; Segment type: Pure code
.text$mn:00003AD8 ; Segment permissions: Read/Execute
.text$mn:00003AD8 _text$mn        segment para public 'CODE' use32
.text$mn:00003AD8                 assume cs:_text$mn
.text$mn:00003AD8                 ;org 3AD8h
.text$mn:00003AD8 ; COMDAT (pick any)
.text$mn:00003AD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003AD8
.text$mn:00003AD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003AD8
.text$mn:00003AD8 ; Attributes: bp-based frame
.text$mn:00003AD8
.text$mn:00003AD8 ; int __cdecl std::allocator_traits<std::allocator<tTbData *>>::construct<tTbData *,tTbData * const &>(int, void *, int)
.text$mn:00003AD8                 public ??$construct@PAUtTbData@@ABQAU1@@?$allocator_traits@V?$allocator@PAUtTbData@@@std@@@std@@SAXAAV?$allocator@PAUtTbData@@@1@PAPAUtTbData@@ABQAU3@@Z
.text$mn:00003AD8 ??$construct@PAUtTbData@@ABQAU1@@?$allocator_traits@V?$allocator@PAUtTbData@@@std@@@std@@SAXAAV?$allocator@PAUtTbData@@@1@PAPAUtTbData@@ABQAU3@@Z proc near
.text$mn:00003AD8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<tTbData *>>::construct<tTbData *,tTbData * const &>(tTbData * *,tTbData * const &)+1Cp
.text$mn:00003AD8
.text$mn:00003AD8 arg_0           = dword ptr  8
.text$mn:00003AD8 arg_4           = dword ptr  0Ch
.text$mn:00003AD8 arg_8           = dword ptr  10h
.text$mn:00003AD8
.text$mn:00003AD8                 push    ebp
.text$mn:00003AD9                 mov     ebp, esp
.text$mn:00003ADB                 mov     eax, [ebp+arg_8]
.text$mn:00003ADE                 push    eax
.text$mn:00003ADF                 call    ??$forward@ABQAUtTbData@@@std@@YAABQAUtTbData@@ABQAU1@@Z ; std::forward<tTbData * const &>(tTbData * const &)
.text$mn:00003AE4                 add     esp, 4
.text$mn:00003AE7                 push    eax             ; int
.text$mn:00003AE8                 mov     ecx, [ebp+arg_4]
.text$mn:00003AEB                 push    ecx             ; void *
.text$mn:00003AEC                 mov     ecx, [ebp+arg_0]
.text$mn:00003AEF                 call    ?construct@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@ABQAU3@@Z ; std::allocator<tTbData *>::construct(tTbData * *,tTbData * const &)
.text$mn:00003AF4                 pop     ebp
.text$mn:00003AF5                 retn
.text$mn:00003AF5 ??$construct@PAUtTbData@@ABQAU1@@?$allocator_traits@V?$allocator@PAUtTbData@@@std@@@std@@SAXAAV?$allocator@PAUtTbData@@@1@PAPAUtTbData@@ABQAU3@@Z endp
.text$mn:00003AF5
.text$mn:00003AF5 ; ---------------------------------------------------------------------------
.text$mn:00003AF6                 align 4
.text$mn:00003AF6 _text$mn        ends
.text$mn:00003AF6
.text$mn:00003AF8 ; ===========================================================================
.text$mn:00003AF8
.text$mn:00003AF8 ; Segment type: Pure code
.text$mn:00003AF8 ; Segment permissions: Read/Execute
.text$mn:00003AF8 _text$mn        segment para public 'CODE' use32
.text$mn:00003AF8                 assume cs:_text$mn
.text$mn:00003AF8                 ;org 3AF8h
.text$mn:00003AF8 ; COMDAT (pick any)
.text$mn:00003AF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003AF8
.text$mn:00003AF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003AF8
.text$mn:00003AF8 ; Attributes: bp-based frame
.text$mn:00003AF8
.text$mn:00003AF8 ; int __stdcall std::_Wrap_alloc<std::allocator<tTbData *>>::construct<tTbData *,tTbData *>(void *, int)
.text$mn:00003AF8                 public ??$construct@PAUtTbData@@PAU1@@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEXPAPAUtTbData@@$$QAPAU2@@Z
.text$mn:00003AF8 ??$construct@PAUtTbData@@PAU1@@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEXPAPAUtTbData@@$$QAPAU2@@Z proc near
.text$mn:00003AF8                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * &&)+9Ap
.text$mn:00003AF8                                         ; std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * &&)+100p
.text$mn:00003AF8
.text$mn:00003AF8 var_4           = dword ptr -4
.text$mn:00003AF8 arg_0           = dword ptr  8
.text$mn:00003AF8 arg_4           = dword ptr  0Ch
.text$mn:00003AF8
.text$mn:00003AF8                 push    ebp
.text$mn:00003AF9                 mov     ebp, esp
.text$mn:00003AFB                 push    ecx
.text$mn:00003AFC                 mov     [ebp+var_4], ecx
.text$mn:00003AFF                 mov     eax, [ebp+arg_4]
.text$mn:00003B02                 push    eax
.text$mn:00003B03                 call    ??$forward@PAUtTbData@@@std@@YA$$QAPAUtTbData@@AAPAU1@@Z ; std::forward<tTbData *>(tTbData * &)
.text$mn:00003B08                 add     esp, 4
.text$mn:00003B0B                 push    eax             ; int
.text$mn:00003B0C                 mov     ecx, [ebp+arg_0]
.text$mn:00003B0F                 push    ecx             ; void *
.text$mn:00003B10                 mov     edx, [ebp+var_4]
.text$mn:00003B13                 push    edx             ; int
.text$mn:00003B14                 call    ??$construct@PAUtTbData@@PAU1@@?$allocator_traits@V?$allocator@PAUtTbData@@@std@@@std@@SAXAAV?$allocator@PAUtTbData@@@1@PAPAUtTbData@@$$QAPAU3@@Z ; std::allocator_traits<std::allocator<tTbData *>>::construct<tTbData *,tTbData *>(std::allocator<tTbData *> &,tTbData * *,tTbData * &&)
.text$mn:00003B19                 add     esp, 0Ch
.text$mn:00003B1C                 mov     esp, ebp
.text$mn:00003B1E                 pop     ebp
.text$mn:00003B1F                 retn    8
.text$mn:00003B1F ??$construct@PAUtTbData@@PAU1@@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEXPAPAUtTbData@@$$QAPAU2@@Z endp
.text$mn:00003B1F
.text$mn:00003B1F ; ---------------------------------------------------------------------------
.text$mn:00003B22                 align 4
.text$mn:00003B22 _text$mn        ends
.text$mn:00003B22
.text$mn:00003B24 ; ===========================================================================
.text$mn:00003B24
.text$mn:00003B24 ; Segment type: Pure code
.text$mn:00003B24 ; Segment permissions: Read/Execute
.text$mn:00003B24 _text$mn        segment para public 'CODE' use32
.text$mn:00003B24                 assume cs:_text$mn
.text$mn:00003B24                 ;org 3B24h
.text$mn:00003B24 ; COMDAT (pick any)
.text$mn:00003B24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003B24
.text$mn:00003B24 ; =============== S U B R O U T I N E =======================================
.text$mn:00003B24
.text$mn:00003B24 ; Attributes: bp-based frame
.text$mn:00003B24
.text$mn:00003B24 ; int __stdcall std::allocator<tTbData *>::construct<tTbData *,tTbData *>(void *, int)
.text$mn:00003B24                 public ??$construct@PAUtTbData@@PAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@$$QAPAU2@@Z
.text$mn:00003B24 ??$construct@PAUtTbData@@PAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@$$QAPAU2@@Z proc near
.text$mn:00003B24                                         ; CODE XREF: std::allocator_traits<std::allocator<tTbData *>>::construct<tTbData *,tTbData *>(std::allocator<tTbData *> &,tTbData * *,tTbData * &&)+17p
.text$mn:00003B24
.text$mn:00003B24 var_1C          = dword ptr -1Ch
.text$mn:00003B24 var_18          = dword ptr -18h
.text$mn:00003B24 var_14          = dword ptr -14h
.text$mn:00003B24 var_10          = dword ptr -10h
.text$mn:00003B24 var_C           = dword ptr -0Ch
.text$mn:00003B24 var_4           = dword ptr -4
.text$mn:00003B24 arg_0           = dword ptr  8
.text$mn:00003B24 arg_4           = dword ptr  0Ch
.text$mn:00003B24
.text$mn:00003B24                 push    ebp
.text$mn:00003B25                 mov     ebp, esp
.text$mn:00003B27                 push    0FFFFFFFFh
.text$mn:00003B29                 push    offset __ehhandler$??$construct@PAUtTbData@@PAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@$$QAPAU2@@Z
.text$mn:00003B2E                 mov     eax, large fs:0
.text$mn:00003B34                 push    eax
.text$mn:00003B35                 sub     esp, 10h
.text$mn:00003B38                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003B3D                 xor     eax, ebp
.text$mn:00003B3F                 push    eax
.text$mn:00003B40                 lea     eax, [ebp+var_C]
.text$mn:00003B43                 mov     large fs:0, eax
.text$mn:00003B49                 mov     [ebp+var_18], ecx
.text$mn:00003B4C                 mov     eax, [ebp+arg_0]
.text$mn:00003B4F                 push    eax             ; void *
.text$mn:00003B50                 push    4               ; unsigned int
.text$mn:00003B52                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00003B57                 add     esp, 8
.text$mn:00003B5A                 mov     [ebp+var_10], eax
.text$mn:00003B5D                 mov     [ebp+var_4], 0
.text$mn:00003B64                 cmp     [ebp+var_10], 0
.text$mn:00003B68                 jz      short loc_3B85
.text$mn:00003B6A                 mov     ecx, [ebp+arg_4]
.text$mn:00003B6D                 push    ecx
.text$mn:00003B6E                 call    ??$forward@PAUtTbData@@@std@@YA$$QAPAUtTbData@@AAPAU1@@Z ; std::forward<tTbData *>(tTbData * &)
.text$mn:00003B73                 add     esp, 4
.text$mn:00003B76                 mov     edx, [ebp+var_10]
.text$mn:00003B79                 mov     eax, [eax]
.text$mn:00003B7B                 mov     [edx], eax
.text$mn:00003B7D                 mov     ecx, [ebp+var_10]
.text$mn:00003B80                 mov     [ebp+var_14], ecx
.text$mn:00003B83                 jmp     short loc_3B8C
.text$mn:00003B85 ; ---------------------------------------------------------------------------
.text$mn:00003B85
.text$mn:00003B85 loc_3B85:                               ; CODE XREF: std::allocator<tTbData *>::construct<tTbData *,tTbData *>(tTbData * *,tTbData * &&)+44j
.text$mn:00003B85                 mov     [ebp+var_14], 0
.text$mn:00003B8C
.text$mn:00003B8C loc_3B8C:                               ; CODE XREF: std::allocator<tTbData *>::construct<tTbData *,tTbData *>(tTbData * *,tTbData * &&)+5Fj
.text$mn:00003B8C                 mov     edx, [ebp+var_14]
.text$mn:00003B8F                 mov     [ebp+var_1C], edx
.text$mn:00003B92                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003B99                 mov     ecx, [ebp+var_C]
.text$mn:00003B9C                 mov     large fs:0, ecx
.text$mn:00003BA3                 pop     ecx
.text$mn:00003BA4                 mov     esp, ebp
.text$mn:00003BA6                 pop     ebp
.text$mn:00003BA7                 retn    8
.text$mn:00003BA7 ??$construct@PAUtTbData@@PAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@$$QAPAU2@@Z endp
.text$mn:00003BA7
.text$mn:00003BA7 ; ---------------------------------------------------------------------------
.text$mn:00003BAA                 align 4
.text$mn:00003BAA _text$mn        ends
.text$mn:00003BAA
.text$x:00003BAC ; ===========================================================================
.text$x:00003BAC
.text$x:00003BAC ; Segment type: Pure code
.text$x:00003BAC ; Segment permissions: Read/Execute
.text$x:00003BAC _text$x         segment para public 'CODE' use32
.text$x:00003BAC                 assume cs:_text$x
.text$x:00003BAC                 ;org 3BACh
.text$x:00003BAC ; COMDAT (pick associative to section at 3B24)
.text$x:00003BAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003BAC
.text$x:00003BAC ; =============== S U B R O U T I N E =======================================
.text$x:00003BAC
.text$x:00003BAC
.text$x:00003BAC __unwindfunclet$??$construct@PAUtTbData@@PAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@$$QAPAU2@@Z$0 proc near
.text$x:00003BAC                                         ; DATA XREF: .xdata$x:00009118o
.text$x:00003BAC                 mov     eax, [ebp+8]
.text$x:00003BAF                 push    eax
.text$x:00003BB0                 mov     eax, [ebp-10h]
.text$x:00003BB3                 push    eax             ; void *
.text$x:00003BB4                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00003BB9                 add     esp, 8
.text$x:00003BBC                 retn
.text$x:00003BBC __unwindfunclet$??$construct@PAUtTbData@@PAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@$$QAPAU2@@Z$0 endp
.text$x:00003BBC
.text$x:00003BBD
.text$x:00003BBD ; =============== S U B R O U T I N E =======================================
.text$x:00003BBD
.text$x:00003BBD
.text$x:00003BBD __ehhandler$??$construct@PAUtTbData@@PAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@$$QAPAU2@@Z proc near
.text$x:00003BBD                                         ; DATA XREF: std::allocator<tTbData *>::construct<tTbData *,tTbData *>(tTbData * *,tTbData * &&)+5o
.text$x:00003BBD
.text$x:00003BBD arg_4           = dword ptr  8
.text$x:00003BBD
.text$x:00003BBD                 mov     edx, [esp+arg_4]
.text$x:00003BC1                 lea     eax, [edx+0Ch]
.text$x:00003BC4                 mov     ecx, [edx-14h]
.text$x:00003BC7                 xor     ecx, eax
.text$x:00003BC9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003BCE                 mov     eax, offset __ehfuncinfo$??$construct@PAUtTbData@@PAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@$$QAPAU2@@Z
.text$x:00003BD3                 jmp     ___CxxFrameHandler3
.text$x:00003BD3 __ehhandler$??$construct@PAUtTbData@@PAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@$$QAPAU2@@Z endp
.text$x:00003BD3
.text$x:00003BD3 _text$x         ends
.text$x:00003BD3
.text$mn:00003BD8 ; ===========================================================================
.text$mn:00003BD8
.text$mn:00003BD8 ; Segment type: Pure code
.text$mn:00003BD8 ; Segment permissions: Read/Execute
.text$mn:00003BD8 _text$mn        segment para public 'CODE' use32
.text$mn:00003BD8                 assume cs:_text$mn
.text$mn:00003BD8                 ;org 3BD8h
.text$mn:00003BD8 ; COMDAT (pick any)
.text$mn:00003BD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003BD8
.text$mn:00003BD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003BD8
.text$mn:00003BD8 ; Attributes: bp-based frame
.text$mn:00003BD8
.text$mn:00003BD8 ; int __cdecl std::allocator_traits<std::allocator<tTbData *>>::construct<tTbData *,tTbData *>(int, void *, int)
.text$mn:00003BD8                 public ??$construct@PAUtTbData@@PAU1@@?$allocator_traits@V?$allocator@PAUtTbData@@@std@@@std@@SAXAAV?$allocator@PAUtTbData@@@1@PAPAUtTbData@@$$QAPAU3@@Z
.text$mn:00003BD8 ??$construct@PAUtTbData@@PAU1@@?$allocator_traits@V?$allocator@PAUtTbData@@@std@@@std@@SAXAAV?$allocator@PAUtTbData@@@1@PAPAUtTbData@@$$QAPAU3@@Z proc near
.text$mn:00003BD8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<tTbData *>>::construct<tTbData *,tTbData *>(tTbData * *,tTbData * &&)+1Cp
.text$mn:00003BD8
.text$mn:00003BD8 arg_0           = dword ptr  8
.text$mn:00003BD8 arg_4           = dword ptr  0Ch
.text$mn:00003BD8 arg_8           = dword ptr  10h
.text$mn:00003BD8
.text$mn:00003BD8                 push    ebp
.text$mn:00003BD9                 mov     ebp, esp
.text$mn:00003BDB                 mov     eax, [ebp+arg_8]
.text$mn:00003BDE                 push    eax
.text$mn:00003BDF                 call    ??$forward@PAUtTbData@@@std@@YA$$QAPAUtTbData@@AAPAU1@@Z ; std::forward<tTbData *>(tTbData * &)
.text$mn:00003BE4                 add     esp, 4
.text$mn:00003BE7                 push    eax             ; int
.text$mn:00003BE8                 mov     ecx, [ebp+arg_4]
.text$mn:00003BEB                 push    ecx             ; void *
.text$mn:00003BEC                 mov     ecx, [ebp+arg_0]
.text$mn:00003BEF                 call    ??$construct@PAUtTbData@@PAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@$$QAPAU2@@Z ; std::allocator<tTbData *>::construct<tTbData *,tTbData *>(tTbData * *,tTbData * &&)
.text$mn:00003BF4                 pop     ebp
.text$mn:00003BF5                 retn
.text$mn:00003BF5 ??$construct@PAUtTbData@@PAU1@@?$allocator_traits@V?$allocator@PAUtTbData@@@std@@@std@@SAXAAV?$allocator@PAUtTbData@@@1@PAPAUtTbData@@$$QAPAU3@@Z endp
.text$mn:00003BF5
.text$mn:00003BF5 ; ---------------------------------------------------------------------------
.text$mn:00003BF6                 align 4
.text$mn:00003BF6 _text$mn        ends
.text$mn:00003BF6
.text$mn:00003BF8 ; ===========================================================================
.text$mn:00003BF8
.text$mn:00003BF8 ; Segment type: Pure code
.text$mn:00003BF8 ; Segment permissions: Read/Execute
.text$mn:00003BF8 _text$mn        segment para public 'CODE' use32
.text$mn:00003BF8                 assume cs:_text$mn
.text$mn:00003BF8                 ;org 3BF8h
.text$mn:00003BF8 ; COMDAT (pick any)
.text$mn:00003BF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003BF8
.text$mn:00003BF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003BF8
.text$mn:00003BF8 ; Attributes: bp-based frame
.text$mn:00003BF8
.text$mn:00003BF8 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:00003BF8                 public ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00003BF8 ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:00003BF8                                         ; CODE XREF: $LN19_0+4Bp
.text$mn:00003BF8
.text$mn:00003BF8 var_4           = dword ptr -4
.text$mn:00003BF8 arg_0           = dword ptr  8
.text$mn:00003BF8 arg_4           = dword ptr  0Ch
.text$mn:00003BF8
.text$mn:00003BF8                 push    ebp
.text$mn:00003BF9                 mov     ebp, esp
.text$mn:00003BFB                 push    ecx
.text$mn:00003BFC                 mov     [ebp+var_4], ecx
.text$mn:00003BFF                 mov     eax, [ebp+arg_4]
.text$mn:00003C02                 push    eax
.text$mn:00003C03                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00003C08                 add     esp, 4
.text$mn:00003C0B                 push    eax             ; int
.text$mn:00003C0C                 mov     ecx, [ebp+arg_0]
.text$mn:00003C0F                 push    ecx             ; void *
.text$mn:00003C10                 mov     edx, [ebp+var_4]
.text$mn:00003C13                 push    edx             ; int
.text$mn:00003C14                 call    ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)
.text$mn:00003C19                 add     esp, 0Ch
.text$mn:00003C1C                 mov     esp, ebp
.text$mn:00003C1E                 pop     ebp
.text$mn:00003C1F                 retn    8
.text$mn:00003C1F ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:00003C1F
.text$mn:00003C1F ; ---------------------------------------------------------------------------
.text$mn:00003C22                 align 4
.text$mn:00003C22 _text$mn        ends
.text$mn:00003C22
.text$mn:00003C24 ; ===========================================================================
.text$mn:00003C24
.text$mn:00003C24 ; Segment type: Pure code
.text$mn:00003C24 ; Segment permissions: Read/Execute
.text$mn:00003C24 _text$mn        segment para public 'CODE' use32
.text$mn:00003C24                 assume cs:_text$mn
.text$mn:00003C24                 ;org 3C24h
.text$mn:00003C24 ; COMDAT (pick any)
.text$mn:00003C24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003C24
.text$mn:00003C24 ; =============== S U B R O U T I N E =======================================
.text$mn:00003C24
.text$mn:00003C24 ; Attributes: bp-based frame
.text$mn:00003C24
.text$mn:00003C24 ; int __stdcall std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:00003C24                 public ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00003C24 ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:00003C24                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)+17p
.text$mn:00003C24
.text$mn:00003C24 var_1C          = dword ptr -1Ch
.text$mn:00003C24 var_18          = dword ptr -18h
.text$mn:00003C24 var_14          = dword ptr -14h
.text$mn:00003C24 var_10          = dword ptr -10h
.text$mn:00003C24 var_C           = dword ptr -0Ch
.text$mn:00003C24 var_4           = dword ptr -4
.text$mn:00003C24 arg_0           = dword ptr  8
.text$mn:00003C24 arg_4           = dword ptr  0Ch
.text$mn:00003C24
.text$mn:00003C24                 push    ebp
.text$mn:00003C25                 mov     ebp, esp
.text$mn:00003C27                 push    0FFFFFFFFh
.text$mn:00003C29                 push    offset __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00003C2E                 mov     eax, large fs:0
.text$mn:00003C34                 push    eax
.text$mn:00003C35                 sub     esp, 10h
.text$mn:00003C38                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003C3D                 xor     eax, ebp
.text$mn:00003C3F                 push    eax
.text$mn:00003C40                 lea     eax, [ebp+var_C]
.text$mn:00003C43                 mov     large fs:0, eax
.text$mn:00003C49                 mov     [ebp+var_18], ecx
.text$mn:00003C4C                 mov     eax, [ebp+arg_0]
.text$mn:00003C4F                 push    eax             ; void *
.text$mn:00003C50                 push    4               ; unsigned int
.text$mn:00003C52                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00003C57                 add     esp, 8
.text$mn:00003C5A                 mov     [ebp+var_10], eax
.text$mn:00003C5D                 mov     [ebp+var_4], 0
.text$mn:00003C64                 cmp     [ebp+var_10], 0
.text$mn:00003C68                 jz      short loc_3C85
.text$mn:00003C6A                 mov     ecx, [ebp+arg_4]
.text$mn:00003C6D                 push    ecx
.text$mn:00003C6E                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00003C73                 add     esp, 4
.text$mn:00003C76                 mov     edx, [ebp+var_10]
.text$mn:00003C79                 mov     eax, [eax]
.text$mn:00003C7B                 mov     [edx], eax
.text$mn:00003C7D                 mov     ecx, [ebp+var_10]
.text$mn:00003C80                 mov     [ebp+var_14], ecx
.text$mn:00003C83                 jmp     short loc_3C8C
.text$mn:00003C85 ; ---------------------------------------------------------------------------
.text$mn:00003C85
.text$mn:00003C85 loc_3C85:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+44j
.text$mn:00003C85                 mov     [ebp+var_14], 0
.text$mn:00003C8C
.text$mn:00003C8C loc_3C8C:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5Fj
.text$mn:00003C8C                 mov     edx, [ebp+var_14]
.text$mn:00003C8F                 mov     [ebp+var_1C], edx
.text$mn:00003C92                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003C99                 mov     ecx, [ebp+var_C]
.text$mn:00003C9C                 mov     large fs:0, ecx
.text$mn:00003CA3                 pop     ecx
.text$mn:00003CA4                 mov     esp, ebp
.text$mn:00003CA6                 pop     ebp
.text$mn:00003CA7                 retn    8
.text$mn:00003CA7 ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:00003CA7
.text$mn:00003CA7 ; ---------------------------------------------------------------------------
.text$mn:00003CAA                 align 4
.text$mn:00003CAA _text$mn        ends
.text$mn:00003CAA
.text$x:00003CAC ; ===========================================================================
.text$x:00003CAC
.text$x:00003CAC ; Segment type: Pure code
.text$x:00003CAC ; Segment permissions: Read/Execute
.text$x:00003CAC _text$x         segment para public 'CODE' use32
.text$x:00003CAC                 assume cs:_text$x
.text$x:00003CAC                 ;org 3CACh
.text$x:00003CAC ; COMDAT (pick associative to section at 3C24)
.text$x:00003CAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003CAC
.text$x:00003CAC ; =============== S U B R O U T I N E =======================================
.text$x:00003CAC
.text$x:00003CAC
.text$x:00003CAC __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 proc near
.text$x:00003CAC                                         ; DATA XREF: .xdata$x:0000919Co
.text$x:00003CAC                 mov     eax, [ebp+8]
.text$x:00003CAF                 push    eax
.text$x:00003CB0                 mov     eax, [ebp-10h]
.text$x:00003CB3                 push    eax             ; void *
.text$x:00003CB4                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00003CB9                 add     esp, 8
.text$x:00003CBC                 retn
.text$x:00003CBC __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 endp
.text$x:00003CBC
.text$x:00003CBD
.text$x:00003CBD ; =============== S U B R O U T I N E =======================================
.text$x:00003CBD
.text$x:00003CBD
.text$x:00003CBD __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$x:00003CBD                                         ; DATA XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5o
.text$x:00003CBD
.text$x:00003CBD arg_4           = dword ptr  8
.text$x:00003CBD
.text$x:00003CBD                 mov     edx, [esp+arg_4]
.text$x:00003CC1                 lea     eax, [edx+0Ch]
.text$x:00003CC4                 mov     ecx, [edx-14h]
.text$x:00003CC7                 xor     ecx, eax
.text$x:00003CC9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003CCE                 mov     eax, offset __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$x:00003CD3                 jmp     ___CxxFrameHandler3
.text$x:00003CD3 __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$x:00003CD3
.text$x:00003CD3 _text$x         ends
.text$x:00003CD3
.text$mn:00003CD8 ; ===========================================================================
.text$mn:00003CD8
.text$mn:00003CD8 ; Segment type: Pure code
.text$mn:00003CD8 ; Segment permissions: Read/Execute
.text$mn:00003CD8 _text$mn        segment para public 'CODE' use32
.text$mn:00003CD8                 assume cs:_text$mn
.text$mn:00003CD8                 ;org 3CD8h
.text$mn:00003CD8 ; COMDAT (pick any)
.text$mn:00003CD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003CD8
.text$mn:00003CD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003CD8
.text$mn:00003CD8 ; Attributes: bp-based frame
.text$mn:00003CD8
.text$mn:00003CD8 ; int __cdecl std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(int, void *, int)
.text$mn:00003CD8                 public ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
.text$mn:00003CD8 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z proc near
.text$mn:00003CD8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+1Cp
.text$mn:00003CD8
.text$mn:00003CD8 arg_0           = dword ptr  8
.text$mn:00003CD8 arg_4           = dword ptr  0Ch
.text$mn:00003CD8 arg_8           = dword ptr  10h
.text$mn:00003CD8
.text$mn:00003CD8                 push    ebp
.text$mn:00003CD9                 mov     ebp, esp
.text$mn:00003CDB                 mov     eax, [ebp+arg_8]
.text$mn:00003CDE                 push    eax
.text$mn:00003CDF                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00003CE4                 add     esp, 4
.text$mn:00003CE7                 push    eax             ; int
.text$mn:00003CE8                 mov     ecx, [ebp+arg_4]
.text$mn:00003CEB                 push    ecx             ; void *
.text$mn:00003CEC                 mov     ecx, [ebp+arg_0]
.text$mn:00003CEF                 call    ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00003CF4                 pop     ebp
.text$mn:00003CF5                 retn
.text$mn:00003CF5 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z endp
.text$mn:00003CF5
.text$mn:00003CF5 ; ---------------------------------------------------------------------------
.text$mn:00003CF6                 align 4
.text$mn:00003CF6 _text$mn        ends
.text$mn:00003CF6
.text$mn:00003CF8 ; ===========================================================================
.text$mn:00003CF8
.text$mn:00003CF8 ; Segment type: Pure code
.text$mn:00003CF8 ; Segment permissions: Read/Execute
.text$mn:00003CF8 _text$mn        segment para public 'CODE' use32
.text$mn:00003CF8                 assume cs:_text$mn
.text$mn:00003CF8                 ;org 3CF8h
.text$mn:00003CF8 ; COMDAT (pick any)
.text$mn:00003CF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003CF8
.text$mn:00003CF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003CF8
.text$mn:00003CF8 ; Attributes: bp-based frame
.text$mn:00003CF8
.text$mn:00003CF8 ; int __stdcall std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:00003CF8                 public ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00003CF8 ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:00003CF8                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Alloc_proxy(void)+32p
.text$mn:00003CF8
.text$mn:00003CF8 var_4           = dword ptr -4
.text$mn:00003CF8 arg_0           = dword ptr  8
.text$mn:00003CF8 arg_4           = dword ptr  0Ch
.text$mn:00003CF8
.text$mn:00003CF8                 push    ebp
.text$mn:00003CF9                 mov     ebp, esp
.text$mn:00003CFB                 push    ecx
.text$mn:00003CFC                 mov     [ebp+var_4], ecx
.text$mn:00003CFF                 mov     eax, [ebp+arg_4]
.text$mn:00003D02                 push    eax
.text$mn:00003D03                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:00003D08                 add     esp, 4
.text$mn:00003D0B                 push    eax             ; int
.text$mn:00003D0C                 mov     ecx, [ebp+arg_0]
.text$mn:00003D0F                 push    ecx             ; void *
.text$mn:00003D10                 mov     edx, [ebp+var_4]
.text$mn:00003D13                 push    edx             ; int
.text$mn:00003D14                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00003D19                 add     esp, 0Ch
.text$mn:00003D1C                 mov     esp, ebp
.text$mn:00003D1E                 pop     ebp
.text$mn:00003D1F                 retn    8
.text$mn:00003D1F ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:00003D1F
.text$mn:00003D1F ; ---------------------------------------------------------------------------
.text$mn:00003D22                 align 4
.text$mn:00003D22 _text$mn        ends
.text$mn:00003D22
.text$mn:00003D24 ; ===========================================================================
.text$mn:00003D24
.text$mn:00003D24 ; Segment type: Pure code
.text$mn:00003D24 ; Segment permissions: Read/Execute
.text$mn:00003D24 _text$mn        segment para public 'CODE' use32
.text$mn:00003D24                 assume cs:_text$mn
.text$mn:00003D24                 ;org 3D24h
.text$mn:00003D24 ; COMDAT (pick any)
.text$mn:00003D24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003D24
.text$mn:00003D24 ; =============== S U B R O U T I N E =======================================
.text$mn:00003D24
.text$mn:00003D24 ; Attributes: bp-based frame
.text$mn:00003D24
.text$mn:00003D24 ; int __stdcall std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:00003D24                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00003D24 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:00003D24                                         ; CODE XREF: std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *,std::_Container_proxy &&)+17p
.text$mn:00003D24                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+32p ...
.text$mn:00003D24
.text$mn:00003D24 var_1C          = dword ptr -1Ch
.text$mn:00003D24 var_18          = dword ptr -18h
.text$mn:00003D24 var_14          = dword ptr -14h
.text$mn:00003D24 var_10          = dword ptr -10h
.text$mn:00003D24 var_C           = dword ptr -0Ch
.text$mn:00003D24 var_4           = dword ptr -4
.text$mn:00003D24 arg_0           = dword ptr  8
.text$mn:00003D24 arg_4           = dword ptr  0Ch
.text$mn:00003D24
.text$mn:00003D24                 push    ebp
.text$mn:00003D25                 mov     ebp, esp
.text$mn:00003D27                 push    0FFFFFFFFh
.text$mn:00003D29                 push    offset __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00003D2E                 mov     eax, large fs:0
.text$mn:00003D34                 push    eax
.text$mn:00003D35                 sub     esp, 10h
.text$mn:00003D38                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003D3D                 xor     eax, ebp
.text$mn:00003D3F                 push    eax
.text$mn:00003D40                 lea     eax, [ebp+var_C]
.text$mn:00003D43                 mov     large fs:0, eax
.text$mn:00003D49                 mov     [ebp+var_18], ecx
.text$mn:00003D4C                 mov     eax, [ebp+arg_0]
.text$mn:00003D4F                 push    eax             ; void *
.text$mn:00003D50                 push    8               ; unsigned int
.text$mn:00003D52                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00003D57                 add     esp, 8
.text$mn:00003D5A                 mov     [ebp+var_10], eax
.text$mn:00003D5D                 mov     [ebp+var_4], 0
.text$mn:00003D64                 cmp     [ebp+var_10], 0
.text$mn:00003D68                 jz      short loc_3D8B
.text$mn:00003D6A                 mov     ecx, [ebp+arg_4]
.text$mn:00003D6D                 push    ecx
.text$mn:00003D6E                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:00003D73                 add     esp, 4
.text$mn:00003D76                 mov     edx, [eax]
.text$mn:00003D78                 mov     eax, [eax+4]
.text$mn:00003D7B                 mov     ecx, [ebp+var_10]
.text$mn:00003D7E                 mov     [ecx], edx
.text$mn:00003D80                 mov     [ecx+4], eax
.text$mn:00003D83                 mov     edx, [ebp+var_10]
.text$mn:00003D86                 mov     [ebp+var_14], edx
.text$mn:00003D89                 jmp     short loc_3D92
.text$mn:00003D8B ; ---------------------------------------------------------------------------
.text$mn:00003D8B
.text$mn:00003D8B loc_3D8B:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+44j
.text$mn:00003D8B                 mov     [ebp+var_14], 0
.text$mn:00003D92
.text$mn:00003D92 loc_3D92:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+65j
.text$mn:00003D92                 mov     eax, [ebp+var_14]
.text$mn:00003D95                 mov     [ebp+var_1C], eax
.text$mn:00003D98                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003D9F                 mov     ecx, [ebp+var_C]
.text$mn:00003DA2                 mov     large fs:0, ecx
.text$mn:00003DA9                 pop     ecx
.text$mn:00003DAA                 mov     esp, ebp
.text$mn:00003DAC                 pop     ebp
.text$mn:00003DAD                 retn    8
.text$mn:00003DAD ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:00003DAD
.text$mn:00003DAD _text$mn        ends
.text$mn:00003DAD
.text$x:00003DB0 ; ===========================================================================
.text$x:00003DB0
.text$x:00003DB0 ; Segment type: Pure code
.text$x:00003DB0 ; Segment permissions: Read/Execute
.text$x:00003DB0 _text$x         segment para public 'CODE' use32
.text$x:00003DB0                 assume cs:_text$x
.text$x:00003DB0                 ;org 3DB0h
.text$x:00003DB0 ; COMDAT (pick associative to section at 3D24)
.text$x:00003DB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003DB0
.text$x:00003DB0 ; =============== S U B R O U T I N E =======================================
.text$x:00003DB0
.text$x:00003DB0
.text$x:00003DB0 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
.text$x:00003DB0                                         ; DATA XREF: .xdata$x:000090ECo
.text$x:00003DB0                 mov     eax, [ebp+8]
.text$x:00003DB3                 push    eax
.text$x:00003DB4                 mov     eax, [ebp-10h]
.text$x:00003DB7                 push    eax             ; void *
.text$x:00003DB8                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00003DBD                 add     esp, 8
.text$x:00003DC0                 retn
.text$x:00003DC0 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 endp
.text$x:00003DC0
.text$x:00003DC1
.text$x:00003DC1 ; =============== S U B R O U T I N E =======================================
.text$x:00003DC1
.text$x:00003DC1
.text$x:00003DC1 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$x:00003DC1                                         ; DATA XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+5o
.text$x:00003DC1
.text$x:00003DC1 arg_4           = dword ptr  8
.text$x:00003DC1
.text$x:00003DC1                 mov     edx, [esp+arg_4]
.text$x:00003DC5                 lea     eax, [edx+0Ch]
.text$x:00003DC8                 mov     ecx, [edx-14h]
.text$x:00003DCB                 xor     ecx, eax
.text$x:00003DCD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003DD2                 mov     eax, offset __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$x:00003DD7                 jmp     ___CxxFrameHandler3
.text$x:00003DD7 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$x:00003DD7
.text$x:00003DD7 _text$x         ends
.text$x:00003DD7
.text$mn:00003DDC ; ===========================================================================
.text$mn:00003DDC
.text$mn:00003DDC ; Segment type: Pure code
.text$mn:00003DDC ; Segment permissions: Read/Execute
.text$mn:00003DDC _text$mn        segment para public 'CODE' use32
.text$mn:00003DDC                 assume cs:_text$mn
.text$mn:00003DDC                 ;org 3DDCh
.text$mn:00003DDC ; COMDAT (pick any)
.text$mn:00003DDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003DDC
.text$mn:00003DDC ; =============== S U B R O U T I N E =======================================
.text$mn:00003DDC
.text$mn:00003DDC ; Attributes: bp-based frame
.text$mn:00003DDC
.text$mn:00003DDC ; int __cdecl std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(int, void *, int)
.text$mn:00003DDC                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z
.text$mn:00003DDC ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z proc near
.text$mn:00003DDC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+1Cp
.text$mn:00003DDC
.text$mn:00003DDC arg_0           = dword ptr  8
.text$mn:00003DDC arg_4           = dword ptr  0Ch
.text$mn:00003DDC arg_8           = dword ptr  10h
.text$mn:00003DDC
.text$mn:00003DDC                 push    ebp
.text$mn:00003DDD                 mov     ebp, esp
.text$mn:00003DDF                 mov     eax, [ebp+arg_8]
.text$mn:00003DE2                 push    eax
.text$mn:00003DE3                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:00003DE8                 add     esp, 4
.text$mn:00003DEB                 push    eax             ; int
.text$mn:00003DEC                 mov     ecx, [ebp+arg_4]
.text$mn:00003DEF                 push    ecx             ; void *
.text$mn:00003DF0                 mov     ecx, [ebp+arg_0]
.text$mn:00003DF3                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00003DF8                 pop     ebp
.text$mn:00003DF9                 retn
.text$mn:00003DF9 ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z endp
.text$mn:00003DF9
.text$mn:00003DF9 ; ---------------------------------------------------------------------------
.text$mn:00003DFA                 align 4
.text$mn:00003DFA _text$mn        ends
.text$mn:00003DFA
.text$mn:00003DFC ; ===========================================================================
.text$mn:00003DFC
.text$mn:00003DFC ; Segment type: Pure code
.text$mn:00003DFC ; Segment permissions: Read/Execute
.text$mn:00003DFC _text$mn        segment para public 'CODE' use32
.text$mn:00003DFC                 assume cs:_text$mn
.text$mn:00003DFC                 ;org 3DFCh
.text$mn:00003DFC ; COMDAT (pick any)
.text$mn:00003DFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003DFC
.text$mn:00003DFC ; =============== S U B R O U T I N E =======================================
.text$mn:00003DFC
.text$mn:00003DFC ; Attributes: bp-based frame
.text$mn:00003DFC
.text$mn:00003DFC ; public: void __thiscall std::_Wrap_alloc<class std::allocator<char>>::destroy<char *>(char * *)
.text$mn:00003DFC                 public ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
.text$mn:00003DFC ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc near
.text$mn:00003DFC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+3Ap
.text$mn:00003DFC
.text$mn:00003DFC var_4           = dword ptr -4
.text$mn:00003DFC arg_0           = dword ptr  8
.text$mn:00003DFC
.text$mn:00003DFC                 push    ebp
.text$mn:00003DFD                 mov     ebp, esp
.text$mn:00003DFF                 push    ecx
.text$mn:00003E00                 mov     [ebp+var_4], ecx
.text$mn:00003E03                 mov     eax, [ebp+arg_0]
.text$mn:00003E06                 push    eax
.text$mn:00003E07                 mov     ecx, [ebp+var_4]
.text$mn:00003E0A                 push    ecx
.text$mn:00003E0B                 call    ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)
.text$mn:00003E10                 add     esp, 8
.text$mn:00003E13                 mov     esp, ebp
.text$mn:00003E15                 pop     ebp
.text$mn:00003E16                 retn    4
.text$mn:00003E16 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z endp
.text$mn:00003E16
.text$mn:00003E16 ; ---------------------------------------------------------------------------
.text$mn:00003E19                 align 4
.text$mn:00003E19 _text$mn        ends
.text$mn:00003E19
.text$mn:00003E1C ; ===========================================================================
.text$mn:00003E1C
.text$mn:00003E1C ; Segment type: Pure code
.text$mn:00003E1C ; Segment permissions: Read/Execute
.text$mn:00003E1C _text$mn        segment para public 'CODE' use32
.text$mn:00003E1C                 assume cs:_text$mn
.text$mn:00003E1C                 ;org 3E1Ch
.text$mn:00003E1C ; COMDAT (pick any)
.text$mn:00003E1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E1C
.text$mn:00003E1C ; =============== S U B R O U T I N E =======================================
.text$mn:00003E1C
.text$mn:00003E1C ; Attributes: bp-based frame
.text$mn:00003E1C
.text$mn:00003E1C ; public: void __thiscall std::allocator<char>::destroy<char *>(char * *)
.text$mn:00003E1C                 public ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
.text$mn:00003E1C ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
.text$mn:00003E1C                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)+Ap
.text$mn:00003E1C
.text$mn:00003E1C var_4           = dword ptr -4
.text$mn:00003E1C
.text$mn:00003E1C                 push    ebp
.text$mn:00003E1D                 mov     ebp, esp
.text$mn:00003E1F                 push    ecx
.text$mn:00003E20                 mov     [ebp+var_4], ecx
.text$mn:00003E23                 mov     esp, ebp
.text$mn:00003E25                 pop     ebp
.text$mn:00003E26                 retn    4
.text$mn:00003E26 ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z endp
.text$mn:00003E26
.text$mn:00003E26 ; ---------------------------------------------------------------------------
.text$mn:00003E29                 align 4
.text$mn:00003E29 _text$mn        ends
.text$mn:00003E29
.text$mn:00003E2C ; ===========================================================================
.text$mn:00003E2C
.text$mn:00003E2C ; Segment type: Pure code
.text$mn:00003E2C ; Segment permissions: Read/Execute
.text$mn:00003E2C _text$mn        segment para public 'CODE' use32
.text$mn:00003E2C                 assume cs:_text$mn
.text$mn:00003E2C                 ;org 3E2Ch
.text$mn:00003E2C ; COMDAT (pick any)
.text$mn:00003E2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E2C
.text$mn:00003E2C ; =============== S U B R O U T I N E =======================================
.text$mn:00003E2C
.text$mn:00003E2C ; Attributes: bp-based frame
.text$mn:00003E2C
.text$mn:00003E2C ; public: static void __cdecl std::allocator_traits<class std::allocator<char>>::destroy<char *>(class std::allocator<char> &, char * *)
.text$mn:00003E2C                 public ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
.text$mn:00003E2C ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
.text$mn:00003E2C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)+Fp
.text$mn:00003E2C
.text$mn:00003E2C arg_0           = dword ptr  8
.text$mn:00003E2C arg_4           = dword ptr  0Ch
.text$mn:00003E2C
.text$mn:00003E2C                 push    ebp
.text$mn:00003E2D                 mov     ebp, esp
.text$mn:00003E2F                 mov     eax, [ebp+arg_4]
.text$mn:00003E32                 push    eax
.text$mn:00003E33                 mov     ecx, [ebp+arg_0]
.text$mn:00003E36                 call    ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>(char * *)
.text$mn:00003E3B                 pop     ebp
.text$mn:00003E3C                 retn
.text$mn:00003E3C ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z endp
.text$mn:00003E3C
.text$mn:00003E3C ; ---------------------------------------------------------------------------
.text$mn:00003E3D                 align 10h
.text$mn:00003E3D _text$mn        ends
.text$mn:00003E3D
.text$mn:00003E40 ; ===========================================================================
.text$mn:00003E40
.text$mn:00003E40 ; Segment type: Pure code
.text$mn:00003E40 ; Segment permissions: Read/Execute
.text$mn:00003E40 _text$mn        segment para public 'CODE' use32
.text$mn:00003E40                 assume cs:_text$mn
.text$mn:00003E40                 ;org 3E40h
.text$mn:00003E40 ; COMDAT (pick any)
.text$mn:00003E40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E40
.text$mn:00003E40 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E40
.text$mn:00003E40 ; Attributes: bp-based frame
.text$mn:00003E40
.text$mn:00003E40 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00003E40                 public ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
.text$mn:00003E40 ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z proc near
.text$mn:00003E40                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+3Ap
.text$mn:00003E40
.text$mn:00003E40 var_4           = dword ptr -4
.text$mn:00003E40 arg_0           = dword ptr  8
.text$mn:00003E40
.text$mn:00003E40                 push    ebp
.text$mn:00003E41                 mov     ebp, esp
.text$mn:00003E43                 push    ecx
.text$mn:00003E44                 mov     [ebp+var_4], ecx
.text$mn:00003E47                 mov     eax, [ebp+arg_0]
.text$mn:00003E4A                 push    eax
.text$mn:00003E4B                 mov     ecx, [ebp+var_4]
.text$mn:00003E4E                 push    ecx
.text$mn:00003E4F                 call    ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)
.text$mn:00003E54                 add     esp, 8
.text$mn:00003E57                 mov     esp, ebp
.text$mn:00003E59                 pop     ebp
.text$mn:00003E5A                 retn    4
.text$mn:00003E5A ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z endp
.text$mn:00003E5A
.text$mn:00003E5A ; ---------------------------------------------------------------------------
.text$mn:00003E5D                 align 10h
.text$mn:00003E5D _text$mn        ends
.text$mn:00003E5D
.text$mn:00003E60 ; ===========================================================================
.text$mn:00003E60
.text$mn:00003E60 ; Segment type: Pure code
.text$mn:00003E60 ; Segment permissions: Read/Execute
.text$mn:00003E60 _text$mn        segment para public 'CODE' use32
.text$mn:00003E60                 assume cs:_text$mn
.text$mn:00003E60                 ;org 3E60h
.text$mn:00003E60 ; COMDAT (pick any)
.text$mn:00003E60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E60
.text$mn:00003E60 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E60
.text$mn:00003E60 ; Attributes: bp-based frame
.text$mn:00003E60
.text$mn:00003E60 ; public: void __thiscall std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00003E60                 public ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
.text$mn:00003E60 ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z proc near
.text$mn:00003E60                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)+Ap
.text$mn:00003E60
.text$mn:00003E60 var_4           = dword ptr -4
.text$mn:00003E60
.text$mn:00003E60                 push    ebp
.text$mn:00003E61                 mov     ebp, esp
.text$mn:00003E63                 push    ecx
.text$mn:00003E64                 mov     [ebp+var_4], ecx
.text$mn:00003E67                 mov     esp, ebp
.text$mn:00003E69                 pop     ebp
.text$mn:00003E6A                 retn    4
.text$mn:00003E6A ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z endp
.text$mn:00003E6A
.text$mn:00003E6A ; ---------------------------------------------------------------------------
.text$mn:00003E6D                 align 10h
.text$mn:00003E6D _text$mn        ends
.text$mn:00003E6D
.text$mn:00003E70 ; ===========================================================================
.text$mn:00003E70
.text$mn:00003E70 ; Segment type: Pure code
.text$mn:00003E70 ; Segment permissions: Read/Execute
.text$mn:00003E70 _text$mn        segment para public 'CODE' use32
.text$mn:00003E70                 assume cs:_text$mn
.text$mn:00003E70                 ;org 3E70h
.text$mn:00003E70 ; COMDAT (pick any)
.text$mn:00003E70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E70
.text$mn:00003E70 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E70
.text$mn:00003E70 ; Attributes: bp-based frame
.text$mn:00003E70
.text$mn:00003E70 ; public: static void __cdecl std::allocator_traits<class std::allocator<wchar_t>>::destroy<wchar_t *>(class std::allocator<wchar_t> &, wchar_t * *)
.text$mn:00003E70                 public ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
.text$mn:00003E70 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z proc near
.text$mn:00003E70                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)+Fp
.text$mn:00003E70
.text$mn:00003E70 arg_0           = dword ptr  8
.text$mn:00003E70 arg_4           = dword ptr  0Ch
.text$mn:00003E70
.text$mn:00003E70                 push    ebp
.text$mn:00003E71                 mov     ebp, esp
.text$mn:00003E73                 mov     eax, [ebp+arg_4]
.text$mn:00003E76                 push    eax
.text$mn:00003E77                 mov     ecx, [ebp+arg_0]
.text$mn:00003E7A                 call    ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00003E7F                 pop     ebp
.text$mn:00003E80                 retn
.text$mn:00003E80 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z endp
.text$mn:00003E80
.text$mn:00003E80 ; ---------------------------------------------------------------------------
.text$mn:00003E81                 align 4
.text$mn:00003E81 _text$mn        ends
.text$mn:00003E81
.text$mn:00003E84 ; ===========================================================================
.text$mn:00003E84
.text$mn:00003E84 ; Segment type: Pure code
.text$mn:00003E84 ; Segment permissions: Read/Execute
.text$mn:00003E84 _text$mn        segment para public 'CODE' use32
.text$mn:00003E84                 assume cs:_text$mn
.text$mn:00003E84                 ;org 3E84h
.text$mn:00003E84 ; COMDAT (pick any)
.text$mn:00003E84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E84
.text$mn:00003E84 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E84
.text$mn:00003E84 ; Attributes: bp-based frame
.text$mn:00003E84
.text$mn:00003E84 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:00003E84                 public ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:00003E84 ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:00003E84                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Free_proxy(void)+22p
.text$mn:00003E84
.text$mn:00003E84 var_4           = dword ptr -4
.text$mn:00003E84 arg_0           = dword ptr  8
.text$mn:00003E84
.text$mn:00003E84                 push    ebp
.text$mn:00003E85                 mov     ebp, esp
.text$mn:00003E87                 push    ecx
.text$mn:00003E88                 mov     [ebp+var_4], ecx
.text$mn:00003E8B                 mov     eax, [ebp+arg_0]
.text$mn:00003E8E                 push    eax
.text$mn:00003E8F                 mov     ecx, [ebp+var_4]
.text$mn:00003E92                 push    ecx
.text$mn:00003E93                 call    ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *)
.text$mn:00003E98                 add     esp, 8
.text$mn:00003E9B                 mov     esp, ebp
.text$mn:00003E9D                 pop     ebp
.text$mn:00003E9E                 retn    4
.text$mn:00003E9E ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:00003E9E
.text$mn:00003E9E ; ---------------------------------------------------------------------------
.text$mn:00003EA1                 align 4
.text$mn:00003EA1 _text$mn        ends
.text$mn:00003EA1
.text$mn:00003EA4 ; ===========================================================================
.text$mn:00003EA4
.text$mn:00003EA4 ; Segment type: Pure code
.text$mn:00003EA4 ; Segment permissions: Read/Execute
.text$mn:00003EA4 _text$mn        segment para public 'CODE' use32
.text$mn:00003EA4                 assume cs:_text$mn
.text$mn:00003EA4                 ;org 3EA4h
.text$mn:00003EA4 ; COMDAT (pick any)
.text$mn:00003EA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003EA4
.text$mn:00003EA4 ; =============== S U B R O U T I N E =======================================
.text$mn:00003EA4
.text$mn:00003EA4 ; Attributes: bp-based frame
.text$mn:00003EA4
.text$mn:00003EA4 ; public: void __thiscall std::allocator<struct std::_Container_proxy>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:00003EA4                 public ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:00003EA4 ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:00003EA4                                         ; CODE XREF: std::allocator_traits<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *)+Ap
.text$mn:00003EA4                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+22p ...
.text$mn:00003EA4
.text$mn:00003EA4 var_4           = dword ptr -4
.text$mn:00003EA4
.text$mn:00003EA4                 push    ebp
.text$mn:00003EA5                 mov     ebp, esp
.text$mn:00003EA7                 push    ecx
.text$mn:00003EA8                 mov     [ebp+var_4], ecx
.text$mn:00003EAB                 mov     esp, ebp
.text$mn:00003EAD                 pop     ebp
.text$mn:00003EAE                 retn    4
.text$mn:00003EAE ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:00003EAE
.text$mn:00003EAE ; ---------------------------------------------------------------------------
.text$mn:00003EB1                 align 4
.text$mn:00003EB1 _text$mn        ends
.text$mn:00003EB1
.text$mn:00003EB4 ; ===========================================================================
.text$mn:00003EB4
.text$mn:00003EB4 ; Segment type: Pure code
.text$mn:00003EB4 ; Segment permissions: Read/Execute
.text$mn:00003EB4 _text$mn        segment para public 'CODE' use32
.text$mn:00003EB4                 assume cs:_text$mn
.text$mn:00003EB4                 ;org 3EB4h
.text$mn:00003EB4 ; COMDAT (pick any)
.text$mn:00003EB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003EB4
.text$mn:00003EB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00003EB4
.text$mn:00003EB4 ; Attributes: bp-based frame
.text$mn:00003EB4
.text$mn:00003EB4 ; public: static void __cdecl std::allocator_traits<class std::allocator<struct std::_Container_proxy>>::destroy<struct std::_Container_proxy>(class std::allocator<struct std::_Container_proxy> &, struct std::_Container_proxy *)
.text$mn:00003EB4                 public ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z
.text$mn:00003EB4 ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z proc near
.text$mn:00003EB4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)+Fp
.text$mn:00003EB4
.text$mn:00003EB4 arg_0           = dword ptr  8
.text$mn:00003EB4 arg_4           = dword ptr  0Ch
.text$mn:00003EB4
.text$mn:00003EB4                 push    ebp
.text$mn:00003EB5                 mov     ebp, esp
.text$mn:00003EB7                 mov     eax, [ebp+arg_4]
.text$mn:00003EBA                 push    eax
.text$mn:00003EBB                 mov     ecx, [ebp+arg_0]
.text$mn:00003EBE                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:00003EC3                 pop     ebp
.text$mn:00003EC4                 retn
.text$mn:00003EC4 ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z endp
.text$mn:00003EC4
.text$mn:00003EC4 ; ---------------------------------------------------------------------------
.text$mn:00003EC5                 align 4
.text$mn:00003EC5 _text$mn        ends
.text$mn:00003EC5
.text$mn:00003EC8 ; ===========================================================================
.text$mn:00003EC8
.text$mn:00003EC8 ; Segment type: Pure code
.text$mn:00003EC8 ; Segment permissions: Read/Execute
.text$mn:00003EC8 _text$mn        segment para public 'CODE' use32
.text$mn:00003EC8                 assume cs:_text$mn
.text$mn:00003EC8                 ;org 3EC8h
.text$mn:00003EC8 ; COMDAT (pick any)
.text$mn:00003EC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003EC8
.text$mn:00003EC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003EC8
.text$mn:00003EC8 ; Attributes: bp-based frame
.text$mn:00003EC8
.text$mn:00003EC8 ; char * & __cdecl std::forward<char * &>(char * &)
.text$mn:00003EC8                 public ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
.text$mn:00003EC8 ??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
.text$mn:00003EC8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+Bp
.text$mn:00003EC8                                         ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)+4Ap ...
.text$mn:00003EC8
.text$mn:00003EC8 arg_0           = dword ptr  8
.text$mn:00003EC8
.text$mn:00003EC8                 push    ebp
.text$mn:00003EC9                 mov     ebp, esp
.text$mn:00003ECB                 mov     eax, [ebp+arg_0]
.text$mn:00003ECE                 pop     ebp
.text$mn:00003ECF                 retn
.text$mn:00003ECF ??$forward@AAPAD@std@@YAAAPADAAPAD@Z endp
.text$mn:00003ECF
.text$mn:00003ECF _text$mn        ends
.text$mn:00003ECF
.text$mn:00003ED0 ; ===========================================================================
.text$mn:00003ED0
.text$mn:00003ED0 ; Segment type: Pure code
.text$mn:00003ED0 ; Segment permissions: Read/Execute
.text$mn:00003ED0 _text$mn        segment para public 'CODE' use32
.text$mn:00003ED0                 assume cs:_text$mn
.text$mn:00003ED0                 ;org 3ED0h
.text$mn:00003ED0 ; COMDAT (pick any)
.text$mn:00003ED0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003ED0
.text$mn:00003ED0 ; =============== S U B R O U T I N E =======================================
.text$mn:00003ED0
.text$mn:00003ED0 ; Attributes: bp-based frame
.text$mn:00003ED0
.text$mn:00003ED0 ; struct tTbData * & __cdecl std::forward<struct tTbData * &>(struct tTbData * &)
.text$mn:00003ED0                 public ??$forward@AAPAUtTbData@@@std@@YAAAPAUtTbData@@AAPAU1@@Z
.text$mn:00003ED0 ??$forward@AAPAUtTbData@@@std@@YAAAPAUtTbData@@AAPAU1@@Z proc near
.text$mn:00003ED0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<tTbData *>>::construct<tTbData *,tTbData * &>(tTbData * *,tTbData * &)+Bp
.text$mn:00003ED0                                         ; std::allocator<tTbData *>::construct<tTbData *,tTbData * &>(tTbData * *,tTbData * &)+4Ap ...
.text$mn:00003ED0
.text$mn:00003ED0 arg_0           = dword ptr  8
.text$mn:00003ED0
.text$mn:00003ED0                 push    ebp
.text$mn:00003ED1                 mov     ebp, esp
.text$mn:00003ED3                 mov     eax, [ebp+arg_0]
.text$mn:00003ED6                 pop     ebp
.text$mn:00003ED7                 retn
.text$mn:00003ED7 ??$forward@AAPAUtTbData@@@std@@YAAAPAUtTbData@@AAPAU1@@Z endp
.text$mn:00003ED7
.text$mn:00003ED7 _text$mn        ends
.text$mn:00003ED7
.text$mn:00003ED8 ; ===========================================================================
.text$mn:00003ED8
.text$mn:00003ED8 ; Segment type: Pure code
.text$mn:00003ED8 ; Segment permissions: Read/Execute
.text$mn:00003ED8 _text$mn        segment para public 'CODE' use32
.text$mn:00003ED8                 assume cs:_text$mn
.text$mn:00003ED8                 ;org 3ED8h
.text$mn:00003ED8 ; COMDAT (pick any)
.text$mn:00003ED8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003ED8
.text$mn:00003ED8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003ED8
.text$mn:00003ED8 ; Attributes: bp-based frame
.text$mn:00003ED8
.text$mn:00003ED8 ; wchar_t * & __cdecl std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00003ED8                 public ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
.text$mn:00003ED8 ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z proc near
.text$mn:00003ED8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+Bp
.text$mn:00003ED8                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+4Ap ...
.text$mn:00003ED8
.text$mn:00003ED8 arg_0           = dword ptr  8
.text$mn:00003ED8
.text$mn:00003ED8                 push    ebp
.text$mn:00003ED9                 mov     ebp, esp
.text$mn:00003EDB                 mov     eax, [ebp+arg_0]
.text$mn:00003EDE                 pop     ebp
.text$mn:00003EDF                 retn
.text$mn:00003EDF ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z endp
.text$mn:00003EDF
.text$mn:00003EDF _text$mn        ends
.text$mn:00003EDF
.text$mn:00003EE0 ; ===========================================================================
.text$mn:00003EE0
.text$mn:00003EE0 ; Segment type: Pure code
.text$mn:00003EE0 ; Segment permissions: Read/Execute
.text$mn:00003EE0 _text$mn        segment para public 'CODE' use32
.text$mn:00003EE0                 assume cs:_text$mn
.text$mn:00003EE0                 ;org 3EE0h
.text$mn:00003EE0 ; COMDAT (pick any)
.text$mn:00003EE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003EE0
.text$mn:00003EE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00003EE0
.text$mn:00003EE0 ; Attributes: bp-based frame
.text$mn:00003EE0
.text$mn:00003EE0 ; struct tTbData * const & __cdecl std::forward<struct tTbData * const &>(struct tTbData * const &)
.text$mn:00003EE0                 public ??$forward@ABQAUtTbData@@@std@@YAABQAUtTbData@@ABQAU1@@Z
.text$mn:00003EE0 ??$forward@ABQAUtTbData@@@std@@YAABQAUtTbData@@ABQAU1@@Z proc near
.text$mn:00003EE0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<tTbData *>>::construct<tTbData *,tTbData * const &>(tTbData * *,tTbData * const &)+Bp
.text$mn:00003EE0                                         ; std::allocator_traits<std::allocator<tTbData *>>::construct<tTbData *,tTbData * const &>(std::allocator<tTbData *> &,tTbData * *,tTbData * const &)+7p
.text$mn:00003EE0
.text$mn:00003EE0 arg_0           = dword ptr  8
.text$mn:00003EE0
.text$mn:00003EE0                 push    ebp
.text$mn:00003EE1                 mov     ebp, esp
.text$mn:00003EE3                 mov     eax, [ebp+arg_0]
.text$mn:00003EE6                 pop     ebp
.text$mn:00003EE7                 retn
.text$mn:00003EE7 ??$forward@ABQAUtTbData@@@std@@YAABQAUtTbData@@ABQAU1@@Z endp
.text$mn:00003EE7
.text$mn:00003EE7 _text$mn        ends
.text$mn:00003EE7
.text$mn:00003EE8 ; ===========================================================================
.text$mn:00003EE8
.text$mn:00003EE8 ; Segment type: Pure code
.text$mn:00003EE8 ; Segment permissions: Read/Execute
.text$mn:00003EE8 _text$mn        segment para public 'CODE' use32
.text$mn:00003EE8                 assume cs:_text$mn
.text$mn:00003EE8                 ;org 3EE8h
.text$mn:00003EE8 ; COMDAT (pick any)
.text$mn:00003EE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003EE8
.text$mn:00003EE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003EE8
.text$mn:00003EE8 ; Attributes: bp-based frame
.text$mn:00003EE8
.text$mn:00003EE8 ; struct tTbData * && __cdecl std::forward<struct tTbData *>(struct tTbData * &)
.text$mn:00003EE8                 public ??$forward@PAUtTbData@@@std@@YA$$QAPAUtTbData@@AAPAU1@@Z
.text$mn:00003EE8 ??$forward@PAUtTbData@@@std@@YA$$QAPAUtTbData@@AAPAU1@@Z proc near
.text$mn:00003EE8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<tTbData *>>::construct<tTbData *,tTbData *>(tTbData * *,tTbData * &&)+Bp
.text$mn:00003EE8                                         ; std::allocator<tTbData *>::construct<tTbData *,tTbData *>(tTbData * *,tTbData * &&)+4Ap ...
.text$mn:00003EE8
.text$mn:00003EE8 arg_0           = dword ptr  8
.text$mn:00003EE8
.text$mn:00003EE8                 push    ebp
.text$mn:00003EE9                 mov     ebp, esp
.text$mn:00003EEB                 mov     eax, [ebp+arg_0]
.text$mn:00003EEE                 pop     ebp
.text$mn:00003EEF                 retn
.text$mn:00003EEF ??$forward@PAUtTbData@@@std@@YA$$QAPAUtTbData@@AAPAU1@@Z endp
.text$mn:00003EEF
.text$mn:00003EEF _text$mn        ends
.text$mn:00003EEF
.text$mn:00003EF0 ; ===========================================================================
.text$mn:00003EF0
.text$mn:00003EF0 ; Segment type: Pure code
.text$mn:00003EF0 ; Segment permissions: Read/Execute
.text$mn:00003EF0 _text$mn        segment para public 'CODE' use32
.text$mn:00003EF0                 assume cs:_text$mn
.text$mn:00003EF0                 ;org 3EF0h
.text$mn:00003EF0 ; COMDAT (pick any)
.text$mn:00003EF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003EF0
.text$mn:00003EF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00003EF0
.text$mn:00003EF0 ; Attributes: bp-based frame
.text$mn:00003EF0
.text$mn:00003EF0 ; struct std::_Container_proxy && __cdecl std::forward<struct std::_Container_proxy>(struct std::_Container_proxy &)
.text$mn:00003EF0                 public ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
.text$mn:00003EF0 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc near
.text$mn:00003EF0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+Bp
.text$mn:00003EF0                                         ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+4Ap ...
.text$mn:00003EF0
.text$mn:00003EF0 arg_0           = dword ptr  8
.text$mn:00003EF0
.text$mn:00003EF0                 push    ebp
.text$mn:00003EF1                 mov     ebp, esp
.text$mn:00003EF3                 mov     eax, [ebp+arg_0]
.text$mn:00003EF6                 pop     ebp
.text$mn:00003EF7                 retn
.text$mn:00003EF7 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z endp
.text$mn:00003EF7
.text$mn:00003EF7 _text$mn        ends
.text$mn:00003EF7
.text$mn:00003EF8 ; ===========================================================================
.text$mn:00003EF8
.text$mn:00003EF8 ; Segment type: Pure code
.text$mn:00003EF8 ; Segment permissions: Read/Execute
.text$mn:00003EF8 _text$mn        segment para public 'CODE' use32
.text$mn:00003EF8                 assume cs:_text$mn
.text$mn:00003EF8                 ;org 3EF8h
.text$mn:00003EF8 ; COMDAT (pick any)
.text$mn:00003EF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003EF8
.text$mn:00003EF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003EF8
.text$mn:00003EF8 ; Attributes: bp-based frame
.text$mn:00003EF8
.text$mn:00003EF8 ; class std::vector<struct tTbData *, class std::allocator<struct tTbData *>> && __cdecl std::forward<class std::vector<struct tTbData *, class std::allocator<struct tTbData *>>>(class std::vector<struct tTbData *, class std::allocator<struct tTbData *>> &)
.text$mn:00003EF8                 public ??$forward@V?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@YA$$QAV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@0@AAV10@@Z
.text$mn:00003EF8 ??$forward@V?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@YA$$QAV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@0@AAV10@@Z proc near
.text$mn:00003EF8                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::vector<tTbData *,std::allocator<tTbData *>>(std::vector<tTbData *,std::allocator<tTbData *>> &&)+52p
.text$mn:00003EF8
.text$mn:00003EF8 arg_0           = dword ptr  8
.text$mn:00003EF8
.text$mn:00003EF8                 push    ebp
.text$mn:00003EF9                 mov     ebp, esp
.text$mn:00003EFB                 mov     eax, [ebp+arg_0]
.text$mn:00003EFE                 pop     ebp
.text$mn:00003EFF                 retn
.text$mn:00003EFF ??$forward@V?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@YA$$QAV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@0@AAV10@@Z endp
.text$mn:00003EFF
.text$mn:00003EFF _text$mn        ends
.text$mn:00003EFF
.text$mn:00003F00 ; ===========================================================================
.text$mn:00003F00
.text$mn:00003F00 ; Segment type: Pure code
.text$mn:00003F00 ; Segment permissions: Read/Execute
.text$mn:00003F00 _text$mn        segment para public 'CODE' use32
.text$mn:00003F00                 assume cs:_text$mn
.text$mn:00003F00                 ;org 3F00h
.text$mn:00003F00 ; COMDAT (pick any)
.text$mn:00003F00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003F00
.text$mn:00003F00 ; =============== S U B R O U T I N E =======================================
.text$mn:00003F00
.text$mn:00003F00 ; Attributes: bp-based frame
.text$mn:00003F00
.text$mn:00003F00 ; int __stdcall std::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>(struct std::_Iterator_base12 *)
.text$mn:00003F00                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:00003F00 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$mn:00003F00                                         ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>> const &)+2Dp
.text$mn:00003F00
.text$mn:00003F00 var_10          = dword ptr -10h
.text$mn:00003F00 var_C           = dword ptr -0Ch
.text$mn:00003F00 var_4           = dword ptr -4
.text$mn:00003F00 arg_0           = dword ptr  8
.text$mn:00003F00
.text$mn:00003F00                 push    ebp
.text$mn:00003F01                 mov     ebp, esp
.text$mn:00003F03                 push    0FFFFFFFFh
.text$mn:00003F05                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:00003F0A                 mov     eax, large fs:0
.text$mn:00003F10                 push    eax
.text$mn:00003F11                 push    ecx
.text$mn:00003F12                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003F17                 xor     eax, ebp
.text$mn:00003F19                 push    eax
.text$mn:00003F1A                 lea     eax, [ebp+var_C]
.text$mn:00003F1D                 mov     large fs:0, eax
.text$mn:00003F23                 mov     [ebp+var_10], ecx
.text$mn:00003F26                 mov     eax, [ebp+arg_0]
.text$mn:00003F29                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00003F2A                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003F2D                 call    ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)
.text$mn:00003F32                 mov     [ebp+var_4], 0
.text$mn:00003F39                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003F40                 mov     eax, [ebp+var_10]
.text$mn:00003F43                 mov     ecx, [ebp+var_C]
.text$mn:00003F46                 mov     large fs:0, ecx
.text$mn:00003F4D                 pop     ecx
.text$mn:00003F4E                 mov     esp, ebp
.text$mn:00003F50                 pop     ebp
.text$mn:00003F51                 retn    4
.text$mn:00003F51 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$mn:00003F51
.text$mn:00003F51 _text$mn        ends
.text$mn:00003F51
.text$x:00003F54 ; ===========================================================================
.text$x:00003F54
.text$x:00003F54 ; Segment type: Pure code
.text$x:00003F54 ; Segment permissions: Read/Execute
.text$x:00003F54 _text$x         segment para public 'CODE' use32
.text$x:00003F54                 assume cs:_text$x
.text$x:00003F54                 ;org 3F54h
.text$x:00003F54 ; COMDAT (pick associative to section at 3F00)
.text$x:00003F54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003F54
.text$x:00003F54 ; =============== S U B R O U T I N E =======================================
.text$x:00003F54
.text$x:00003F54
.text$x:00003F54 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 proc near
.text$x:00003F54                                         ; DATA XREF: .xdata$x:00008F84o
.text$x:00003F54                 mov     ecx, [ebp-10h]  ; this
.text$x:00003F57                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00003F57 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 endp
.text$x:00003F57
.text$x:00003F5C
.text$x:00003F5C ; =============== S U B R O U T I N E =======================================
.text$x:00003F5C
.text$x:00003F5C
.text$x:00003F5C __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$x:00003F5C                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12> const &)+5o
.text$x:00003F5C
.text$x:00003F5C arg_4           = dword ptr  8
.text$x:00003F5C
.text$x:00003F5C                 mov     edx, [esp+arg_4]
.text$x:00003F60                 lea     eax, [edx+0Ch]
.text$x:00003F63                 mov     ecx, [edx-8]
.text$x:00003F66                 xor     ecx, eax
.text$x:00003F68                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003F6D                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$x:00003F72                 jmp     ___CxxFrameHandler3
.text$x:00003F72 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$x:00003F72
.text$x:00003F72 ; ---------------------------------------------------------------------------
.text$x:00003F77                 align 4
.text$x:00003F77 _text$x         ends
.text$x:00003F77
.text$mn:00003F78 ; ===========================================================================
.text$mn:00003F78
.text$mn:00003F78 ; Segment type: Pure code
.text$mn:00003F78 ; Segment permissions: Read/Execute
.text$mn:00003F78 _text$mn        segment para public 'CODE' use32
.text$mn:00003F78                 assume cs:_text$mn
.text$mn:00003F78                 ;org 3F78h
.text$mn:00003F78 ; COMDAT (pick any)
.text$mn:00003F78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003F78
.text$mn:00003F78 ; =============== S U B R O U T I N E =======================================
.text$mn:00003F78
.text$mn:00003F78 ; Attributes: bp-based frame
.text$mn:00003F78
.text$mn:00003F78 ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, struct tTbData *, int, struct tTbData * const *, struct tTbData * const &, struct std::_Iterator_base12>::_Iterator012<struct std::random_access_iterator_tag, struct tTbData *, int, struct tTbData * const *, struct tTbData * const &, struct std::_Iterator_base12>(void)
.text$mn:00003F78                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00003F78 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00003F78                                         ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(tTbData * *,std::_Container_base12 const *)+29p
.text$mn:00003F78
.text$mn:00003F78 var_10          = dword ptr -10h
.text$mn:00003F78 var_C           = dword ptr -0Ch
.text$mn:00003F78 var_4           = dword ptr -4
.text$mn:00003F78
.text$mn:00003F78                 push    ebp
.text$mn:00003F79                 mov     ebp, esp
.text$mn:00003F7B                 push    0FFFFFFFFh
.text$mn:00003F7D                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00003F82                 mov     eax, large fs:0
.text$mn:00003F88                 push    eax
.text$mn:00003F89                 push    ecx
.text$mn:00003F8A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003F8F                 xor     eax, ebp
.text$mn:00003F91                 push    eax
.text$mn:00003F92                 lea     eax, [ebp+var_C]
.text$mn:00003F95                 mov     large fs:0, eax
.text$mn:00003F9B                 mov     [ebp+var_10], ecx
.text$mn:00003F9E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003FA1                 call    ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12(void)
.text$mn:00003FA6                 mov     [ebp+var_4], 0
.text$mn:00003FAD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003FB4                 mov     eax, [ebp+var_10]
.text$mn:00003FB7                 mov     ecx, [ebp+var_C]
.text$mn:00003FBA                 mov     large fs:0, ecx
.text$mn:00003FC1                 pop     ecx
.text$mn:00003FC2                 mov     esp, ebp
.text$mn:00003FC4                 pop     ebp
.text$mn:00003FC5                 retn
.text$mn:00003FC5 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00003FC5
.text$mn:00003FC5 ; ---------------------------------------------------------------------------
.text$mn:00003FC6                 align 4
.text$mn:00003FC6 _text$mn        ends
.text$mn:00003FC6
.text$x:00003FC8 ; ===========================================================================
.text$x:00003FC8
.text$x:00003FC8 ; Segment type: Pure code
.text$x:00003FC8 ; Segment permissions: Read/Execute
.text$x:00003FC8 _text$x         segment para public 'CODE' use32
.text$x:00003FC8                 assume cs:_text$x
.text$x:00003FC8                 ;org 3FC8h
.text$x:00003FC8 ; COMDAT (pick associative to section at 3F78)
.text$x:00003FC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003FC8
.text$x:00003FC8 ; =============== S U B R O U T I N E =======================================
.text$x:00003FC8
.text$x:00003FC8
.text$x:00003FC8 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00003FC8                                         ; DATA XREF: .xdata$x:00008F2Co
.text$x:00003FC8                 mov     ecx, [ebp-10h]  ; this
.text$x:00003FCB                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00003FCB __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:00003FCB
.text$x:00003FD0
.text$x:00003FD0 ; =============== S U B R O U T I N E =======================================
.text$x:00003FD0
.text$x:00003FD0
.text$x:00003FD0 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00003FD0                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>(void)+5o
.text$x:00003FD0
.text$x:00003FD0 arg_4           = dword ptr  8
.text$x:00003FD0
.text$x:00003FD0                 mov     edx, [esp+arg_4]
.text$x:00003FD4                 lea     eax, [edx+0Ch]
.text$x:00003FD7                 mov     ecx, [edx-8]
.text$x:00003FDA                 xor     ecx, eax
.text$x:00003FDC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003FE1                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ
.text$x:00003FE6                 jmp     ___CxxFrameHandler3
.text$x:00003FE6 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00003FE6
.text$x:00003FE6 ; ---------------------------------------------------------------------------
.text$x:00003FEB                 align 4
.text$x:00003FEB _text$x         ends
.text$x:00003FEB
.text$mn:00003FEC ; ===========================================================================
.text$mn:00003FEC
.text$mn:00003FEC ; Segment type: Pure code
.text$mn:00003FEC ; Segment permissions: Read/Execute
.text$mn:00003FEC _text$mn        segment para public 'CODE' use32
.text$mn:00003FEC                 assume cs:_text$mn
.text$mn:00003FEC                 ;org 3FECh
.text$mn:00003FEC ; COMDAT (pick any)
.text$mn:00003FEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003FEC
.text$mn:00003FEC ; =============== S U B R O U T I N E =======================================
.text$mn:00003FEC
.text$mn:00003FEC ; Attributes: bp-based frame
.text$mn:00003FEC
.text$mn:00003FEC ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(class std::allocator<char> const &)
.text$mn:00003FEC                 public ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:00003FEC ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$mn:00003FEC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+34p
.text$mn:00003FEC
.text$mn:00003FEC var_10          = dword ptr -10h
.text$mn:00003FEC var_C           = dword ptr -0Ch
.text$mn:00003FEC var_4           = dword ptr -4
.text$mn:00003FEC
.text$mn:00003FEC                 push    ebp
.text$mn:00003FED                 mov     ebp, esp
.text$mn:00003FEF                 push    0FFFFFFFFh
.text$mn:00003FF1                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:00003FF6                 mov     eax, large fs:0
.text$mn:00003FFC                 push    eax
.text$mn:00003FFD                 push    ecx
.text$mn:00003FFE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004003                 xor     eax, ebp
.text$mn:00004005                 push    eax
.text$mn:00004006                 lea     eax, [ebp+var_C]
.text$mn:00004009                 mov     large fs:0, eax
.text$mn:0000400F                 mov     [ebp+var_10], ecx
.text$mn:00004012                 mov     ecx, [ebp+var_10]
.text$mn:00004015                 call    ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)
.text$mn:0000401A                 mov     [ebp+var_4], 0
.text$mn:00004021                 mov     ecx, [ebp+var_10]
.text$mn:00004024                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:00004029                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004030                 mov     eax, [ebp+var_10]
.text$mn:00004033                 mov     ecx, [ebp+var_C]
.text$mn:00004036                 mov     large fs:0, ecx
.text$mn:0000403D                 pop     ecx
.text$mn:0000403E                 mov     esp, ebp
.text$mn:00004040                 pop     ebp
.text$mn:00004041                 retn    4
.text$mn:00004041 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$mn:00004041
.text$mn:00004041 _text$mn        ends
.text$mn:00004041
.text$x:00004044 ; ===========================================================================
.text$x:00004044
.text$x:00004044 ; Segment type: Pure code
.text$x:00004044 ; Segment permissions: Read/Execute
.text$x:00004044 _text$x         segment para public 'CODE' use32
.text$x:00004044                 assume cs:_text$x
.text$x:00004044                 ;org 4044h
.text$x:00004044 ; COMDAT (pick associative to section at 3FEC)
.text$x:00004044                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004044
.text$x:00004044 ; =============== S U B R O U T I N E =======================================
.text$x:00004044
.text$x:00004044
.text$x:00004044 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
.text$x:00004044                                         ; DATA XREF: .xdata$x:0000862Co
.text$x:00004044                 mov     ecx, [ebp-10h]
.text$x:00004047                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:00004047 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 endp
.text$x:00004047
.text$x:0000404C
.text$x:0000404C ; =============== S U B R O U T I N E =======================================
.text$x:0000404C
.text$x:0000404C
.text$x:0000404C __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$x:0000404C                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+5o
.text$x:0000404C
.text$x:0000404C arg_4           = dword ptr  8
.text$x:0000404C
.text$x:0000404C                 mov     edx, [esp+arg_4]
.text$x:00004050                 lea     eax, [edx+0Ch]
.text$x:00004053                 mov     ecx, [edx-8]
.text$x:00004056                 xor     ecx, eax
.text$x:00004058                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000405D                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$x:00004062                 jmp     ___CxxFrameHandler3
.text$x:00004062 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$x:00004062
.text$x:00004062 ; ---------------------------------------------------------------------------
.text$x:00004067                 align 4
.text$x:00004067 _text$x         ends
.text$x:00004067
.text$mn:00004068 ; ===========================================================================
.text$mn:00004068
.text$mn:00004068 ; Segment type: Pure code
.text$mn:00004068 ; Segment permissions: Read/Execute
.text$mn:00004068 _text$mn        segment para public 'CODE' use32
.text$mn:00004068                 assume cs:_text$mn
.text$mn:00004068                 ;org 4068h
.text$mn:00004068 ; COMDAT (pick any)
.text$mn:00004068                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004068
.text$mn:00004068 ; =============== S U B R O U T I N E =======================================
.text$mn:00004068
.text$mn:00004068 ; Attributes: bp-based frame
.text$mn:00004068
.text$mn:00004068 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(class std::allocator<wchar_t> const &)
.text$mn:00004068                 public ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00004068 ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:00004068                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+34p
.text$mn:00004068                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+34p
.text$mn:00004068
.text$mn:00004068 var_10          = dword ptr -10h
.text$mn:00004068 var_C           = dword ptr -0Ch
.text$mn:00004068 var_4           = dword ptr -4
.text$mn:00004068
.text$mn:00004068                 push    ebp
.text$mn:00004069                 mov     ebp, esp
.text$mn:0000406B                 push    0FFFFFFFFh
.text$mn:0000406D                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00004072                 mov     eax, large fs:0
.text$mn:00004078                 push    eax
.text$mn:00004079                 push    ecx
.text$mn:0000407A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000407F                 xor     eax, ebp
.text$mn:00004081                 push    eax
.text$mn:00004082                 lea     eax, [ebp+var_C]
.text$mn:00004085                 mov     large fs:0, eax
.text$mn:0000408B                 mov     [ebp+var_10], ecx
.text$mn:0000408E                 mov     ecx, [ebp+var_10]
.text$mn:00004091                 call    ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:00004096                 mov     [ebp+var_4], 0
.text$mn:0000409D                 mov     ecx, [ebp+var_10]
.text$mn:000040A0                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:000040A5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000040AC                 mov     eax, [ebp+var_10]
.text$mn:000040AF                 mov     ecx, [ebp+var_C]
.text$mn:000040B2                 mov     large fs:0, ecx
.text$mn:000040B9                 pop     ecx
.text$mn:000040BA                 mov     esp, ebp
.text$mn:000040BC                 pop     ebp
.text$mn:000040BD                 retn    4
.text$mn:000040BD ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:000040BD
.text$mn:000040BD _text$mn        ends
.text$mn:000040BD
.text$x:000040C0 ; ===========================================================================
.text$x:000040C0
.text$x:000040C0 ; Segment type: Pure code
.text$x:000040C0 ; Segment permissions: Read/Execute
.text$x:000040C0 _text$x         segment para public 'CODE' use32
.text$x:000040C0                 assume cs:_text$x
.text$x:000040C0                 ;org 40C0h
.text$x:000040C0 ; COMDAT (pick associative to section at 4068)
.text$x:000040C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000040C0
.text$x:000040C0 ; =============== S U B R O U T I N E =======================================
.text$x:000040C0
.text$x:000040C0
.text$x:000040C0 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 proc near
.text$x:000040C0                                         ; DATA XREF: .xdata$x:000089A4o
.text$x:000040C0                 mov     ecx, [ebp-10h]
.text$x:000040C3                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:000040C3 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 endp
.text$x:000040C3
.text$x:000040C8
.text$x:000040C8 ; =============== S U B R O U T I N E =======================================
.text$x:000040C8
.text$x:000040C8
.text$x:000040C8 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$x:000040C8                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+5o
.text$x:000040C8
.text$x:000040C8 arg_4           = dword ptr  8
.text$x:000040C8
.text$x:000040C8                 mov     edx, [esp+arg_4]
.text$x:000040CC                 lea     eax, [edx+0Ch]
.text$x:000040CF                 mov     ecx, [edx-8]
.text$x:000040D2                 xor     ecx, eax
.text$x:000040D4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000040D9                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$x:000040DE                 jmp     ___CxxFrameHandler3
.text$x:000040DE __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$x:000040DE
.text$x:000040DE ; ---------------------------------------------------------------------------
.text$x:000040E3                 align 4
.text$x:000040E3 _text$x         ends
.text$x:000040E3
.text$mn:000040E4 ; ===========================================================================
.text$mn:000040E4
.text$mn:000040E4 ; Segment type: Pure code
.text$mn:000040E4 ; Segment permissions: Read/Execute
.text$mn:000040E4 _text$mn        segment para public 'CODE' use32
.text$mn:000040E4                 assume cs:_text$mn
.text$mn:000040E4                 ;org 40E4h
.text$mn:000040E4 ; COMDAT (pick any)
.text$mn:000040E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000040E4
.text$mn:000040E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000040E4
.text$mn:000040E4 ; Attributes: bp-based frame
.text$mn:000040E4
.text$mn:000040E4 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::_String_val<struct std::_Simple_types<char>>(void)
.text$mn:000040E4                 public ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:000040E4 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:000040E4                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+29p
.text$mn:000040E4
.text$mn:000040E4 var_10          = dword ptr -10h
.text$mn:000040E4 var_C           = dword ptr -0Ch
.text$mn:000040E4 var_4           = dword ptr -4
.text$mn:000040E4
.text$mn:000040E4                 push    ebp
.text$mn:000040E5                 mov     ebp, esp
.text$mn:000040E7                 push    0FFFFFFFFh
.text$mn:000040E9                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:000040EE                 mov     eax, large fs:0
.text$mn:000040F4                 push    eax
.text$mn:000040F5                 push    ecx
.text$mn:000040F6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000040FB                 xor     eax, ebp
.text$mn:000040FD                 push    eax
.text$mn:000040FE                 lea     eax, [ebp+var_C]
.text$mn:00004101                 mov     large fs:0, eax
.text$mn:00004107                 mov     [ebp+var_10], ecx
.text$mn:0000410A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000410D                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00004112                 mov     [ebp+var_4], 0
.text$mn:00004119                 mov     eax, [ebp+var_10]
.text$mn:0000411C                 mov     dword ptr [eax+14h], 0
.text$mn:00004123                 mov     ecx, [ebp+var_10]
.text$mn:00004126                 mov     dword ptr [ecx+18h], 0
.text$mn:0000412D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004134                 mov     eax, [ebp+var_10]
.text$mn:00004137                 mov     ecx, [ebp+var_C]
.text$mn:0000413A                 mov     large fs:0, ecx
.text$mn:00004141                 pop     ecx
.text$mn:00004142                 mov     esp, ebp
.text$mn:00004144                 pop     ebp
.text$mn:00004145                 retn
.text$mn:00004145 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:00004145
.text$mn:00004145 ; ---------------------------------------------------------------------------
.text$mn:00004146                 align 4
.text$mn:00004146 _text$mn        ends
.text$mn:00004146
.text$x:00004148 ; ===========================================================================
.text$x:00004148
.text$x:00004148 ; Segment type: Pure code
.text$x:00004148 ; Segment permissions: Read/Execute
.text$x:00004148 _text$x         segment para public 'CODE' use32
.text$x:00004148                 assume cs:_text$x
.text$x:00004148                 ;org 4148h
.text$x:00004148 ; COMDAT (pick associative to section at 40E4)
.text$x:00004148                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004148
.text$x:00004148 ; =============== S U B R O U T I N E =======================================
.text$x:00004148
.text$x:00004148
.text$x:00004148 __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:00004148                                         ; DATA XREF: .xdata$x:000085D4o
.text$x:00004148                 mov     ecx, [ebp-10h]  ; this
.text$x:0000414B                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:0000414B __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:0000414B
.text$x:00004150
.text$x:00004150 ; =============== S U B R O U T I N E =======================================
.text$x:00004150
.text$x:00004150
.text$x:00004150 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:00004150                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+5o
.text$x:00004150
.text$x:00004150 arg_4           = dword ptr  8
.text$x:00004150
.text$x:00004150                 mov     edx, [esp+arg_4]
.text$x:00004154                 lea     eax, [edx+0Ch]
.text$x:00004157                 mov     ecx, [edx-8]
.text$x:0000415A                 xor     ecx, eax
.text$x:0000415C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004161                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:00004166                 jmp     ___CxxFrameHandler3
.text$x:00004166 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:00004166
.text$x:00004166 ; ---------------------------------------------------------------------------
.text$x:0000416B                 align 4
.text$x:0000416B _text$x         ends
.text$x:0000416B
.text$mn:0000416C ; ===========================================================================
.text$mn:0000416C
.text$mn:0000416C ; Segment type: Pure code
.text$mn:0000416C ; Segment permissions: Read/Execute
.text$mn:0000416C _text$mn        segment para public 'CODE' use32
.text$mn:0000416C                 assume cs:_text$mn
.text$mn:0000416C                 ;org 416Ch
.text$mn:0000416C ; COMDAT (pick any)
.text$mn:0000416C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000416C
.text$mn:0000416C ; =============== S U B R O U T I N E =======================================
.text$mn:0000416C
.text$mn:0000416C ; Attributes: bp-based frame
.text$mn:0000416C
.text$mn:0000416C ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:0000416C                 public ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:0000416C ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:0000416C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+29p
.text$mn:0000416C
.text$mn:0000416C var_10          = dword ptr -10h
.text$mn:0000416C var_C           = dword ptr -0Ch
.text$mn:0000416C var_4           = dword ptr -4
.text$mn:0000416C
.text$mn:0000416C                 push    ebp
.text$mn:0000416D                 mov     ebp, esp
.text$mn:0000416F                 push    0FFFFFFFFh
.text$mn:00004171                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00004176                 mov     eax, large fs:0
.text$mn:0000417C                 push    eax
.text$mn:0000417D                 push    ecx
.text$mn:0000417E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004183                 xor     eax, ebp
.text$mn:00004185                 push    eax
.text$mn:00004186                 lea     eax, [ebp+var_C]
.text$mn:00004189                 mov     large fs:0, eax
.text$mn:0000418F                 mov     [ebp+var_10], ecx
.text$mn:00004192                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004195                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:0000419A                 mov     [ebp+var_4], 0
.text$mn:000041A1                 mov     eax, [ebp+var_10]
.text$mn:000041A4                 mov     dword ptr [eax+14h], 0
.text$mn:000041AB                 mov     ecx, [ebp+var_10]
.text$mn:000041AE                 mov     dword ptr [ecx+18h], 0
.text$mn:000041B5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000041BC                 mov     eax, [ebp+var_10]
.text$mn:000041BF                 mov     ecx, [ebp+var_C]
.text$mn:000041C2                 mov     large fs:0, ecx
.text$mn:000041C9                 pop     ecx
.text$mn:000041CA                 mov     esp, ebp
.text$mn:000041CC                 pop     ebp
.text$mn:000041CD                 retn
.text$mn:000041CD ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:000041CD
.text$mn:000041CD ; ---------------------------------------------------------------------------
.text$mn:000041CE                 align 10h
.text$mn:000041CE _text$mn        ends
.text$mn:000041CE
.text$x:000041D0 ; ===========================================================================
.text$x:000041D0
.text$x:000041D0 ; Segment type: Pure code
.text$x:000041D0 ; Segment permissions: Read/Execute
.text$x:000041D0 _text$x         segment para public 'CODE' use32
.text$x:000041D0                 assume cs:_text$x
.text$x:000041D0                 ;org 41D0h
.text$x:000041D0 ; COMDAT (pick associative to section at 416C)
.text$x:000041D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000041D0
.text$x:000041D0 ; =============== S U B R O U T I N E =======================================
.text$x:000041D0
.text$x:000041D0
.text$x:000041D0 __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:000041D0                                         ; DATA XREF: .xdata$x:0000894Co
.text$x:000041D0                 mov     ecx, [ebp-10h]  ; this
.text$x:000041D3                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000041D3 __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:000041D3
.text$x:000041D8
.text$x:000041D8 ; =============== S U B R O U T I N E =======================================
.text$x:000041D8
.text$x:000041D8
.text$x:000041D8 __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:000041D8                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:000041D8
.text$x:000041D8 arg_4           = dword ptr  8
.text$x:000041D8
.text$x:000041D8                 mov     edx, [esp+arg_4]
.text$x:000041DC                 lea     eax, [edx+0Ch]
.text$x:000041DF                 mov     ecx, [edx-8]
.text$x:000041E2                 xor     ecx, eax
.text$x:000041E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000041E9                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:000041EE                 jmp     ___CxxFrameHandler3
.text$x:000041EE __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:000041EE
.text$x:000041EE ; ---------------------------------------------------------------------------
.text$x:000041F3                 align 4
.text$x:000041F3 _text$x         ends
.text$x:000041F3
.text$mn:000041F4 ; ===========================================================================
.text$mn:000041F4
.text$mn:000041F4 ; Segment type: Pure code
.text$mn:000041F4 ; Segment permissions: Read/Execute
.text$mn:000041F4 _text$mn        segment para public 'CODE' use32
.text$mn:000041F4                 assume cs:_text$mn
.text$mn:000041F4                 ;org 41F4h
.text$mn:000041F4 ; COMDAT (pick any)
.text$mn:000041F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000041F4
.text$mn:000041F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000041F4
.text$mn:000041F4 ; Attributes: bp-based frame
.text$mn:000041F4
.text$mn:000041F4 ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct tTbData *, class std::allocator<struct tTbData *>>>::_Vector_alloc<0, struct std::_Vec_base_types<struct tTbData *, class std::allocator<struct tTbData *>>>(class std::allocator<struct tTbData *> const &)
.text$mn:000041F4                 public ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtTbData@@@1@@Z
.text$mn:000041F4 ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtTbData@@@1@@Z proc near
.text$mn:000041F4                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::vector<tTbData *,std::allocator<tTbData *>>(std::vector<tTbData *,std::allocator<tTbData *>> &&)+38p
.text$mn:000041F4                                         ; std::vector<tTbData *,std::allocator<tTbData *>>::vector<tTbData *,std::allocator<tTbData *>>(void)+34p
.text$mn:000041F4
.text$mn:000041F4 var_10          = dword ptr -10h
.text$mn:000041F4 var_C           = dword ptr -0Ch
.text$mn:000041F4 var_4           = dword ptr -4
.text$mn:000041F4
.text$mn:000041F4                 push    ebp
.text$mn:000041F5                 mov     ebp, esp
.text$mn:000041F7                 push    0FFFFFFFFh
.text$mn:000041F9                 push    offset __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtTbData@@@1@@Z
.text$mn:000041FE                 mov     eax, large fs:0
.text$mn:00004204                 push    eax
.text$mn:00004205                 push    ecx
.text$mn:00004206                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000420B                 xor     eax, ebp
.text$mn:0000420D                 push    eax
.text$mn:0000420E                 lea     eax, [ebp+var_C]
.text$mn:00004211                 mov     large fs:0, eax
.text$mn:00004217                 mov     [ebp+var_10], ecx
.text$mn:0000421A                 mov     ecx, [ebp+var_10]
.text$mn:0000421D                 call    ??0?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<tTbData *>>::_Vector_val<std::_Simple_types<tTbData *>>(void)
.text$mn:00004222                 mov     [ebp+var_4], 0
.text$mn:00004229                 mov     ecx, [ebp+var_10]
.text$mn:0000422C                 call    ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Alloc_proxy(void)
.text$mn:00004231                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004238                 mov     eax, [ebp+var_10]
.text$mn:0000423B                 mov     ecx, [ebp+var_C]
.text$mn:0000423E                 mov     large fs:0, ecx
.text$mn:00004245                 pop     ecx
.text$mn:00004246                 mov     esp, ebp
.text$mn:00004248                 pop     ebp
.text$mn:00004249                 retn    4
.text$mn:00004249 ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtTbData@@@1@@Z endp
.text$mn:00004249
.text$mn:00004249 _text$mn        ends
.text$mn:00004249
.text$x:0000424C ; ===========================================================================
.text$x:0000424C
.text$x:0000424C ; Segment type: Pure code
.text$x:0000424C ; Segment permissions: Read/Execute
.text$x:0000424C _text$x         segment para public 'CODE' use32
.text$x:0000424C                 assume cs:_text$x
.text$x:0000424C                 ;org 424Ch
.text$x:0000424C ; COMDAT (pick associative to section at 41F4)
.text$x:0000424C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000424C
.text$x:0000424C ; =============== S U B R O U T I N E =======================================
.text$x:0000424C
.text$x:0000424C
.text$x:0000424C __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtTbData@@@1@@Z$0 proc near
.text$x:0000424C                                         ; DATA XREF: .xdata$x:00008CD8o
.text$x:0000424C                 mov     ecx, [ebp-10h]
.text$x:0000424F                 jmp     ??1?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<tTbData *>>::~_Vector_val<std::_Simple_types<tTbData *>>(void)
.text$x:0000424F __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtTbData@@@1@@Z$0 endp
.text$x:0000424F
.text$x:00004254
.text$x:00004254 ; =============== S U B R O U T I N E =======================================
.text$x:00004254
.text$x:00004254
.text$x:00004254 __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtTbData@@@1@@Z proc near
.text$x:00004254                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>(std::allocator<tTbData *> const &)+5o
.text$x:00004254
.text$x:00004254 arg_4           = dword ptr  8
.text$x:00004254
.text$x:00004254                 mov     edx, [esp+arg_4]
.text$x:00004258                 lea     eax, [edx+0Ch]
.text$x:0000425B                 mov     ecx, [edx-8]
.text$x:0000425E                 xor     ecx, eax
.text$x:00004260                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004265                 mov     eax, offset __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtTbData@@@1@@Z
.text$x:0000426A                 jmp     ___CxxFrameHandler3
.text$x:0000426A __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtTbData@@@1@@Z endp
.text$x:0000426A
.text$x:0000426A ; ---------------------------------------------------------------------------
.text$x:0000426F                 align 10h
.text$x:0000426F _text$x         ends
.text$x:0000426F
.text$mn:00004270 ; ===========================================================================
.text$mn:00004270
.text$mn:00004270 ; Segment type: Pure code
.text$mn:00004270 ; Segment permissions: Read/Execute
.text$mn:00004270 _text$mn        segment para public 'CODE' use32
.text$mn:00004270                 assume cs:_text$mn
.text$mn:00004270                 ;org 4270h
.text$mn:00004270 ; COMDAT (pick any)
.text$mn:00004270                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004270
.text$mn:00004270 ; =============== S U B R O U T I N E =======================================
.text$mn:00004270
.text$mn:00004270 ; Attributes: bp-based frame
.text$mn:00004270
.text$mn:00004270 ; int __stdcall std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(struct std::_Iterator_base12 *)
.text$mn:00004270                 public ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00004270 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:00004270                                         ; CODE XREF: DockingCont::removeToolbar(tTbData)+FAp
.text$mn:00004270                                         ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>> const &)+2Dp ...
.text$mn:00004270
.text$mn:00004270 var_10          = dword ptr -10h
.text$mn:00004270 var_C           = dword ptr -0Ch
.text$mn:00004270 var_4           = dword ptr -4
.text$mn:00004270 arg_0           = dword ptr  8
.text$mn:00004270
.text$mn:00004270                 push    ebp
.text$mn:00004271                 mov     ebp, esp
.text$mn:00004273                 push    0FFFFFFFFh
.text$mn:00004275                 push    offset __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:0000427A                 mov     eax, large fs:0
.text$mn:00004280                 push    eax
.text$mn:00004281                 push    ecx
.text$mn:00004282                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004287                 xor     eax, ebp
.text$mn:00004289                 push    eax
.text$mn:0000428A                 lea     eax, [ebp+var_C]
.text$mn:0000428D                 mov     large fs:0, eax
.text$mn:00004293                 mov     [ebp+var_10], ecx
.text$mn:00004296                 mov     eax, [ebp+arg_0]
.text$mn:00004299                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:0000429A                 mov     ecx, [ebp+var_10]
.text$mn:0000429D                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12> const &)
.text$mn:000042A2                 mov     [ebp+var_4], 0
.text$mn:000042A9                 mov     ecx, [ebp+var_10]
.text$mn:000042AC                 mov     edx, [ebp+arg_0]
.text$mn:000042AF                 mov     eax, [edx+8]
.text$mn:000042B2                 mov     [ecx+8], eax
.text$mn:000042B5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000042BC                 mov     eax, [ebp+var_10]
.text$mn:000042BF                 mov     ecx, [ebp+var_C]
.text$mn:000042C2                 mov     large fs:0, ecx
.text$mn:000042C9                 pop     ecx
.text$mn:000042CA                 mov     esp, ebp
.text$mn:000042CC                 pop     ebp
.text$mn:000042CD                 retn    4
.text$mn:000042CD ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:000042CD
.text$mn:000042CD _text$mn        ends
.text$mn:000042CD
.text$x:000042D0 ; ===========================================================================
.text$x:000042D0
.text$x:000042D0 ; Segment type: Pure code
.text$x:000042D0 ; Segment permissions: Read/Execute
.text$x:000042D0 _text$x         segment para public 'CODE' use32
.text$x:000042D0                 assume cs:_text$x
.text$x:000042D0                 ;org 42D0h
.text$x:000042D0 ; COMDAT (pick associative to section at 4270)
.text$x:000042D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000042D0
.text$x:000042D0 ; =============== S U B R O U T I N E =======================================
.text$x:000042D0
.text$x:000042D0
.text$x:000042D0 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:000042D0                                         ; DATA XREF: .xdata$x:00009008o
.text$x:000042D0                 mov     ecx, [ebp-10h]
.text$x:000042D3                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>(void)
.text$x:000042D3 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:000042D3
.text$x:000042D8
.text$x:000042D8 ; =============== S U B R O U T I N E =======================================
.text$x:000042D8
.text$x:000042D8
.text$x:000042D8 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:000042D8                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>> const &)+5o
.text$x:000042D8
.text$x:000042D8 arg_4           = dword ptr  8
.text$x:000042D8
.text$x:000042D8                 mov     edx, [esp+arg_4]
.text$x:000042DC                 lea     eax, [edx+0Ch]
.text$x:000042DF                 mov     ecx, [edx-8]
.text$x:000042E2                 xor     ecx, eax
.text$x:000042E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000042E9                 mov     eax, offset __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:000042EE                 jmp     ___CxxFrameHandler3
.text$x:000042EE __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:000042EE
.text$x:000042EE ; ---------------------------------------------------------------------------
.text$x:000042F3                 align 4
.text$x:000042F3 _text$x         ends
.text$x:000042F3
.text$mn:000042F4 ; ===========================================================================
.text$mn:000042F4
.text$mn:000042F4 ; Segment type: Pure code
.text$mn:000042F4 ; Segment permissions: Read/Execute
.text$mn:000042F4 _text$mn        segment para public 'CODE' use32
.text$mn:000042F4                 assume cs:_text$mn
.text$mn:000042F4                 ;org 42F4h
.text$mn:000042F4 ; COMDAT (pick any)
.text$mn:000042F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042F4
.text$mn:000042F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000042F4
.text$mn:000042F4 ; Attributes: bp-based frame
.text$mn:000042F4
.text$mn:000042F4 ; int __stdcall std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(int, struct std::_Container_base12 *)
.text$mn:000042F4                 public ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z
.text$mn:000042F4 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z proc near
.text$mn:000042F4                                         ; CODE XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(tTbData * *,std::_Container_base12 const *)+31p
.text$mn:000042F4
.text$mn:000042F4 var_10          = dword ptr -10h
.text$mn:000042F4 var_C           = dword ptr -0Ch
.text$mn:000042F4 var_4           = dword ptr -4
.text$mn:000042F4 arg_0           = dword ptr  8
.text$mn:000042F4 arg_4           = dword ptr  0Ch
.text$mn:000042F4
.text$mn:000042F4                 push    ebp
.text$mn:000042F5                 mov     ebp, esp
.text$mn:000042F7                 push    0FFFFFFFFh
.text$mn:000042F9                 push    offset __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z
.text$mn:000042FE                 mov     eax, large fs:0
.text$mn:00004304                 push    eax
.text$mn:00004305                 push    ecx
.text$mn:00004306                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000430B                 xor     eax, ebp
.text$mn:0000430D                 push    eax
.text$mn:0000430E                 lea     eax, [ebp+var_C]
.text$mn:00004311                 mov     large fs:0, eax
.text$mn:00004317                 mov     [ebp+var_10], ecx
.text$mn:0000431A                 mov     ecx, [ebp+var_10]
.text$mn:0000431D                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>(void)
.text$mn:00004322                 mov     [ebp+var_4], 0
.text$mn:00004329                 mov     eax, [ebp+var_10]
.text$mn:0000432C                 mov     ecx, [ebp+arg_0]
.text$mn:0000432F                 mov     [eax+8], ecx
.text$mn:00004332                 mov     edx, [ebp+arg_4]
.text$mn:00004335                 push    edx             ; struct std::_Container_base12 *
.text$mn:00004336                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004339                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:0000433E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004345                 mov     eax, [ebp+var_10]
.text$mn:00004348                 mov     ecx, [ebp+var_C]
.text$mn:0000434B                 mov     large fs:0, ecx
.text$mn:00004352                 pop     ecx
.text$mn:00004353                 mov     esp, ebp
.text$mn:00004355                 pop     ebp
.text$mn:00004356                 retn    8
.text$mn:00004356 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z endp
.text$mn:00004356
.text$mn:00004356 ; ---------------------------------------------------------------------------
.text$mn:00004359                 align 4
.text$mn:00004359 _text$mn        ends
.text$mn:00004359
.text$x:0000435C ; ===========================================================================
.text$x:0000435C
.text$x:0000435C ; Segment type: Pure code
.text$x:0000435C ; Segment permissions: Read/Execute
.text$x:0000435C _text$x         segment para public 'CODE' use32
.text$x:0000435C                 assume cs:_text$x
.text$x:0000435C                 ;org 435Ch
.text$x:0000435C ; COMDAT (pick associative to section at 42F4)
.text$x:0000435C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000435C
.text$x:0000435C ; =============== S U B R O U T I N E =======================================
.text$x:0000435C
.text$x:0000435C
.text$x:0000435C __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z$0 proc near
.text$x:0000435C                                         ; DATA XREF: .xdata$x:00008FB0o
.text$x:0000435C                 mov     ecx, [ebp-10h]
.text$x:0000435F                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>(void)
.text$x:0000435F __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z$0 endp
.text$x:0000435F
.text$x:00004364
.text$x:00004364 ; =============== S U B R O U T I N E =======================================
.text$x:00004364
.text$x:00004364
.text$x:00004364 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z proc near
.text$x:00004364                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(tTbData * *,std::_Container_base12 const *)+5o
.text$x:00004364
.text$x:00004364 arg_4           = dword ptr  8
.text$x:00004364
.text$x:00004364                 mov     edx, [esp+arg_4]
.text$x:00004368                 lea     eax, [edx+0Ch]
.text$x:0000436B                 mov     ecx, [edx-8]
.text$x:0000436E                 xor     ecx, eax
.text$x:00004370                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004375                 mov     eax, offset __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z
.text$x:0000437A                 jmp     ___CxxFrameHandler3
.text$x:0000437A __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z endp
.text$x:0000437A
.text$x:0000437A ; ---------------------------------------------------------------------------
.text$x:0000437F                 align 10h
.text$x:0000437F _text$x         ends
.text$x:0000437F
.text$mn:00004380 ; ===========================================================================
.text$mn:00004380
.text$mn:00004380 ; Segment type: Pure code
.text$mn:00004380 ; Segment permissions: Read/Execute
.text$mn:00004380 _text$mn        segment para public 'CODE' use32
.text$mn:00004380                 assume cs:_text$mn
.text$mn:00004380                 ;org 4380h
.text$mn:00004380 ; COMDAT (pick any)
.text$mn:00004380                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004380
.text$mn:00004380 ; =============== S U B R O U T I N E =======================================
.text$mn:00004380
.text$mn:00004380 ; Attributes: bp-based frame
.text$mn:00004380
.text$mn:00004380 ; int __stdcall std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(struct std::_Iterator_base12 *)
.text$mn:00004380                 public ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00004380 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:00004380                                         ; CODE XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+(int)+36p
.text$mn:00004380                                         ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+(int)+52p
.text$mn:00004380
.text$mn:00004380 var_10          = dword ptr -10h
.text$mn:00004380 var_C           = dword ptr -0Ch
.text$mn:00004380 var_4           = dword ptr -4
.text$mn:00004380 arg_0           = dword ptr  8
.text$mn:00004380
.text$mn:00004380                 push    ebp
.text$mn:00004381                 mov     ebp, esp
.text$mn:00004383                 push    0FFFFFFFFh
.text$mn:00004385                 push    offset __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:0000438A                 mov     eax, large fs:0
.text$mn:00004390                 push    eax
.text$mn:00004391                 push    ecx
.text$mn:00004392                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004397                 xor     eax, ebp
.text$mn:00004399                 push    eax
.text$mn:0000439A                 lea     eax, [ebp+var_C]
.text$mn:0000439D                 mov     large fs:0, eax
.text$mn:000043A3                 mov     [ebp+var_10], ecx
.text$mn:000043A6                 mov     eax, [ebp+arg_0]
.text$mn:000043A9                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:000043AA                 mov     ecx, [ebp+var_10]
.text$mn:000043AD                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>> const &)
.text$mn:000043B2                 mov     [ebp+var_4], 0
.text$mn:000043B9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000043C0                 mov     eax, [ebp+var_10]
.text$mn:000043C3                 mov     ecx, [ebp+var_C]
.text$mn:000043C6                 mov     large fs:0, ecx
.text$mn:000043CD                 pop     ecx
.text$mn:000043CE                 mov     esp, ebp
.text$mn:000043D0                 pop     ebp
.text$mn:000043D1                 retn    4
.text$mn:000043D1 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:000043D1
.text$mn:000043D1 _text$mn        ends
.text$mn:000043D1
.text$x:000043D4 ; ===========================================================================
.text$x:000043D4
.text$x:000043D4 ; Segment type: Pure code
.text$x:000043D4 ; Segment permissions: Read/Execute
.text$x:000043D4 _text$x         segment para public 'CODE' use32
.text$x:000043D4                 assume cs:_text$x
.text$x:000043D4                 ;org 43D4h
.text$x:000043D4 ; COMDAT (pick associative to section at 4380)
.text$x:000043D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000043D4
.text$x:000043D4 ; =============== S U B R O U T I N E =======================================
.text$x:000043D4
.text$x:000043D4
.text$x:000043D4 __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:000043D4                                         ; DATA XREF: .xdata$x:000090C0o
.text$x:000043D4                 mov     ecx, [ebp-10h]
.text$x:000043D7                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$x:000043D7 __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:000043D7
.text$x:000043DC
.text$x:000043DC ; =============== S U B R O U T I N E =======================================
.text$x:000043DC
.text$x:000043DC
.text$x:000043DC __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:000043DC                                         ; DATA XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>> const &)+5o
.text$x:000043DC
.text$x:000043DC arg_4           = dword ptr  8
.text$x:000043DC
.text$x:000043DC                 mov     edx, [esp+arg_4]
.text$x:000043E0                 lea     eax, [edx+0Ch]
.text$x:000043E3                 mov     ecx, [edx-8]
.text$x:000043E6                 xor     ecx, eax
.text$x:000043E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000043ED                 mov     eax, offset __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:000043F2                 jmp     ___CxxFrameHandler3
.text$x:000043F2 __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:000043F2
.text$x:000043F2 ; ---------------------------------------------------------------------------
.text$x:000043F7                 align 4
.text$x:000043F7 _text$x         ends
.text$x:000043F7
.text$mn:000043F8 ; ===========================================================================
.text$mn:000043F8
.text$mn:000043F8 ; Segment type: Pure code
.text$mn:000043F8 ; Segment permissions: Read/Execute
.text$mn:000043F8 _text$mn        segment para public 'CODE' use32
.text$mn:000043F8                 assume cs:_text$mn
.text$mn:000043F8                 ;org 43F8h
.text$mn:000043F8 ; COMDAT (pick any)
.text$mn:000043F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000043F8
.text$mn:000043F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000043F8
.text$mn:000043F8 ; Attributes: bp-based frame
.text$mn:000043F8
.text$mn:000043F8 ; int __stdcall std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(int, struct std::_Container_base12 *)
.text$mn:000043F8                 public ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z
.text$mn:000043F8 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z proc near
.text$mn:000043F8                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Make_iter(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>)+41p
.text$mn:000043F8                                         ; std::vector<tTbData *,std::allocator<tTbData *>>::begin(void)+3Dp
.text$mn:000043F8
.text$mn:000043F8 var_10          = dword ptr -10h
.text$mn:000043F8 var_C           = dword ptr -0Ch
.text$mn:000043F8 var_4           = dword ptr -4
.text$mn:000043F8 arg_0           = dword ptr  8
.text$mn:000043F8 arg_4           = dword ptr  0Ch
.text$mn:000043F8
.text$mn:000043F8                 push    ebp
.text$mn:000043F9                 mov     ebp, esp
.text$mn:000043FB                 push    0FFFFFFFFh
.text$mn:000043FD                 push    offset __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z
.text$mn:00004402                 mov     eax, large fs:0
.text$mn:00004408                 push    eax
.text$mn:00004409                 push    ecx
.text$mn:0000440A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000440F                 xor     eax, ebp
.text$mn:00004411                 push    eax
.text$mn:00004412                 lea     eax, [ebp+var_C]
.text$mn:00004415                 mov     large fs:0, eax
.text$mn:0000441B                 mov     [ebp+var_10], ecx
.text$mn:0000441E                 mov     eax, [ebp+arg_4]
.text$mn:00004421                 push    eax             ; struct std::_Container_base12 *
.text$mn:00004422                 mov     ecx, [ebp+arg_0]
.text$mn:00004425                 push    ecx             ; int
.text$mn:00004426                 mov     ecx, [ebp+var_10]
.text$mn:00004429                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(tTbData * *,std::_Container_base12 const *)
.text$mn:0000442E                 mov     [ebp+var_4], 0
.text$mn:00004435                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000443C                 mov     eax, [ebp+var_10]
.text$mn:0000443F                 mov     ecx, [ebp+var_C]
.text$mn:00004442                 mov     large fs:0, ecx
.text$mn:00004449                 pop     ecx
.text$mn:0000444A                 mov     esp, ebp
.text$mn:0000444C                 pop     ebp
.text$mn:0000444D                 retn    8
.text$mn:0000444D ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z endp
.text$mn:0000444D
.text$mn:0000444D _text$mn        ends
.text$mn:0000444D
.text$x:00004450 ; ===========================================================================
.text$x:00004450
.text$x:00004450 ; Segment type: Pure code
.text$x:00004450 ; Segment permissions: Read/Execute
.text$x:00004450 _text$x         segment para public 'CODE' use32
.text$x:00004450                 assume cs:_text$x
.text$x:00004450                 ;org 4450h
.text$x:00004450 ; COMDAT (pick associative to section at 43F8)
.text$x:00004450                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004450
.text$x:00004450 ; =============== S U B R O U T I N E =======================================
.text$x:00004450
.text$x:00004450
.text$x:00004450 __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z$0 proc near
.text$x:00004450                                         ; DATA XREF: .xdata$x:00009034o
.text$x:00004450                 mov     ecx, [ebp-10h]
.text$x:00004453                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$x:00004453 __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z$0 endp
.text$x:00004453
.text$x:00004458
.text$x:00004458 ; =============== S U B R O U T I N E =======================================
.text$x:00004458
.text$x:00004458
.text$x:00004458 __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z proc near
.text$x:00004458                                         ; DATA XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(tTbData * *,std::_Container_base12 const *)+5o
.text$x:00004458
.text$x:00004458 arg_4           = dword ptr  8
.text$x:00004458
.text$x:00004458                 mov     edx, [esp+arg_4]
.text$x:0000445C                 lea     eax, [edx+0Ch]
.text$x:0000445F                 mov     ecx, [edx-8]
.text$x:00004462                 xor     ecx, eax
.text$x:00004464                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004469                 mov     eax, offset __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z
.text$x:0000446E                 jmp     ___CxxFrameHandler3
.text$x:0000446E __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z endp
.text$x:0000446E
.text$x:0000446E ; ---------------------------------------------------------------------------
.text$x:00004473                 align 4
.text$x:00004473 _text$x         ends
.text$x:00004473
.text$mn:00004474 ; ===========================================================================
.text$mn:00004474
.text$mn:00004474 ; Segment type: Pure code
.text$mn:00004474 ; Segment permissions: Read/Execute
.text$mn:00004474 _text$mn        segment para public 'CODE' use32
.text$mn:00004474                 assume cs:_text$mn
.text$mn:00004474                 ;org 4474h
.text$mn:00004474 ; COMDAT (pick any)
.text$mn:00004474                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004474
.text$mn:00004474 ; =============== S U B R O U T I N E =======================================
.text$mn:00004474
.text$mn:00004474 ; Attributes: bp-based frame
.text$mn:00004474
.text$mn:00004474 ; public: __thiscall std::_Vector_val<struct std::_Simple_types<struct tTbData *>>::_Vector_val<struct std::_Simple_types<struct tTbData *>>(void)
.text$mn:00004474                 public ??0?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ
.text$mn:00004474 ??0?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ proc near
.text$mn:00004474                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>(std::allocator<tTbData *> const &)+29p
.text$mn:00004474
.text$mn:00004474 var_10          = dword ptr -10h
.text$mn:00004474 var_C           = dword ptr -0Ch
.text$mn:00004474 var_4           = dword ptr -4
.text$mn:00004474
.text$mn:00004474                 push    ebp
.text$mn:00004475                 mov     ebp, esp
.text$mn:00004477                 push    0FFFFFFFFh
.text$mn:00004479                 push    offset __ehhandler$??0?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ
.text$mn:0000447E                 mov     eax, large fs:0
.text$mn:00004484                 push    eax
.text$mn:00004485                 push    ecx
.text$mn:00004486                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000448B                 xor     eax, ebp
.text$mn:0000448D                 push    eax
.text$mn:0000448E                 lea     eax, [ebp+var_C]
.text$mn:00004491                 mov     large fs:0, eax
.text$mn:00004497                 mov     [ebp+var_10], ecx
.text$mn:0000449A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000449D                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:000044A2                 mov     [ebp+var_4], 0
.text$mn:000044A9                 mov     eax, [ebp+var_10]
.text$mn:000044AC                 mov     dword ptr [eax+4], 0
.text$mn:000044B3                 mov     ecx, [ebp+var_10]
.text$mn:000044B6                 mov     dword ptr [ecx+8], 0
.text$mn:000044BD                 mov     edx, [ebp+var_10]
.text$mn:000044C0                 mov     dword ptr [edx+0Ch], 0
.text$mn:000044C7                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000044CE                 mov     eax, [ebp+var_10]
.text$mn:000044D1                 mov     ecx, [ebp+var_C]
.text$mn:000044D4                 mov     large fs:0, ecx
.text$mn:000044DB                 pop     ecx
.text$mn:000044DC                 mov     esp, ebp
.text$mn:000044DE                 pop     ebp
.text$mn:000044DF                 retn
.text$mn:000044DF ??0?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ endp
.text$mn:000044DF
.text$mn:000044DF _text$mn        ends
.text$mn:000044DF
.text$x:000044E0 ; ===========================================================================
.text$x:000044E0
.text$x:000044E0 ; Segment type: Pure code
.text$x:000044E0 ; Segment permissions: Read/Execute
.text$x:000044E0 _text$x         segment para public 'CODE' use32
.text$x:000044E0                 assume cs:_text$x
.text$x:000044E0                 ;org 44E0h
.text$x:000044E0 ; COMDAT (pick associative to section at 4474)
.text$x:000044E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000044E0
.text$x:000044E0 ; =============== S U B R O U T I N E =======================================
.text$x:000044E0
.text$x:000044E0
.text$x:000044E0 __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000044E0                                         ; DATA XREF: .xdata$x:00008C80o
.text$x:000044E0                 mov     ecx, [ebp-10h]  ; this
.text$x:000044E3                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000044E3 __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ$0 endp
.text$x:000044E3
.text$x:000044E8
.text$x:000044E8 ; =============== S U B R O U T I N E =======================================
.text$x:000044E8
.text$x:000044E8
.text$x:000044E8 __ehhandler$??0?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ proc near
.text$x:000044E8                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<tTbData *>>::_Vector_val<std::_Simple_types<tTbData *>>(void)+5o
.text$x:000044E8
.text$x:000044E8 arg_4           = dword ptr  8
.text$x:000044E8
.text$x:000044E8                 mov     edx, [esp+arg_4]
.text$x:000044EC                 lea     eax, [edx+0Ch]
.text$x:000044EF                 mov     ecx, [edx-8]
.text$x:000044F2                 xor     ecx, eax
.text$x:000044F4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000044F9                 mov     eax, offset __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ
.text$x:000044FE                 jmp     ___CxxFrameHandler3
.text$x:000044FE __ehhandler$??0?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ endp
.text$x:000044FE
.text$x:000044FE ; ---------------------------------------------------------------------------
.text$x:00004503                 align 4
.text$x:00004503 _text$x         ends
.text$x:00004503
.text$mn:00004504 ; ===========================================================================
.text$mn:00004504
.text$mn:00004504 ; Segment type: Pure code
.text$mn:00004504 ; Segment permissions: Read/Execute
.text$mn:00004504 _text$mn        segment para public 'CODE' use32
.text$mn:00004504                 assume cs:_text$mn
.text$mn:00004504                 ;org 4504h
.text$mn:00004504 ; COMDAT (pick any)
.text$mn:00004504                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004504
.text$mn:00004504 ; =============== S U B R O U T I N E =======================================
.text$mn:00004504
.text$mn:00004504 ; Attributes: bp-based frame
.text$mn:00004504
.text$mn:00004504 ; public: __thiscall std::_Wrap_alloc<class std::allocator<char>>::_Wrap_alloc<class std::allocator<char>>(void)
.text$mn:00004504                 public ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
.text$mn:00004504 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
.text$mn:00004504                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)+Ap
.text$mn:00004504
.text$mn:00004504 var_4           = dword ptr -4
.text$mn:00004504
.text$mn:00004504                 push    ebp
.text$mn:00004505                 mov     ebp, esp
.text$mn:00004507                 push    ecx
.text$mn:00004508                 mov     [ebp+var_4], ecx
.text$mn:0000450B                 mov     ecx, [ebp+var_4]
.text$mn:0000450E                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00004513                 mov     eax, [ebp+var_4]
.text$mn:00004516                 mov     esp, ebp
.text$mn:00004518                 pop     ebp
.text$mn:00004519                 retn
.text$mn:00004519 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ endp
.text$mn:00004519
.text$mn:00004519 ; ---------------------------------------------------------------------------
.text$mn:0000451A                 align 4
.text$mn:0000451A _text$mn        ends
.text$mn:0000451A
.text$mn:0000451C ; ===========================================================================
.text$mn:0000451C
.text$mn:0000451C ; Segment type: Pure code
.text$mn:0000451C ; Segment permissions: Read/Execute
.text$mn:0000451C _text$mn        segment para public 'CODE' use32
.text$mn:0000451C                 assume cs:_text$mn
.text$mn:0000451C                 ;org 451Ch
.text$mn:0000451C ; COMDAT (pick any)
.text$mn:0000451C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000451C
.text$mn:0000451C ; =============== S U B R O U T I N E =======================================
.text$mn:0000451C
.text$mn:0000451C ; Attributes: bp-based frame
.text$mn:0000451C
.text$mn:0000451C ; public: __thiscall std::_Wrap_alloc<class std::allocator<struct tTbData *>>::_Wrap_alloc<class std::allocator<struct tTbData *>>(void)
.text$mn:0000451C                 public ??0?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ
.text$mn:0000451C ??0?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ proc near
.text$mn:0000451C                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Getal(void)+Ap
.text$mn:0000451C
.text$mn:0000451C var_4           = dword ptr -4
.text$mn:0000451C
.text$mn:0000451C                 push    ebp
.text$mn:0000451D                 mov     ebp, esp
.text$mn:0000451F                 push    ecx
.text$mn:00004520                 mov     [ebp+var_4], ecx
.text$mn:00004523                 mov     ecx, [ebp+var_4]
.text$mn:00004526                 call    ??0?$allocator@PAUtTbData@@@std@@QAE@XZ ; std::allocator<tTbData *>::allocator<tTbData *>(void)
.text$mn:0000452B                 mov     eax, [ebp+var_4]
.text$mn:0000452E                 mov     esp, ebp
.text$mn:00004530                 pop     ebp
.text$mn:00004531                 retn
.text$mn:00004531 ??0?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ endp
.text$mn:00004531
.text$mn:00004531 ; ---------------------------------------------------------------------------
.text$mn:00004532                 align 4
.text$mn:00004532 _text$mn        ends
.text$mn:00004532
.text$mn:00004534 ; ===========================================================================
.text$mn:00004534
.text$mn:00004534 ; Segment type: Pure code
.text$mn:00004534 ; Segment permissions: Read/Execute
.text$mn:00004534 _text$mn        segment para public 'CODE' use32
.text$mn:00004534                 assume cs:_text$mn
.text$mn:00004534                 ;org 4534h
.text$mn:00004534 ; COMDAT (pick any)
.text$mn:00004534                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004534
.text$mn:00004534 ; =============== S U B R O U T I N E =======================================
.text$mn:00004534
.text$mn:00004534 ; Attributes: bp-based frame
.text$mn:00004534
.text$mn:00004534 ; public: __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>(void)
.text$mn:00004534                 public ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
.text$mn:00004534 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00004534                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Alloc_proxy(void)+Cp
.text$mn:00004534                                         ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Free_proxy(void)+Cp
.text$mn:00004534
.text$mn:00004534 var_4           = dword ptr -4
.text$mn:00004534
.text$mn:00004534                 push    ebp
.text$mn:00004535                 mov     ebp, esp
.text$mn:00004537                 push    ecx
.text$mn:00004538                 mov     [ebp+var_4], ecx
.text$mn:0000453B                 mov     ecx, [ebp+var_4]
.text$mn:0000453E                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00004543                 mov     eax, [ebp+var_4]
.text$mn:00004546                 mov     esp, ebp
.text$mn:00004548                 pop     ebp
.text$mn:00004549                 retn
.text$mn:00004549 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ endp
.text$mn:00004549
.text$mn:00004549 ; ---------------------------------------------------------------------------
.text$mn:0000454A                 align 4
.text$mn:0000454A _text$mn        ends
.text$mn:0000454A
.text$mn:0000454C ; ===========================================================================
.text$mn:0000454C
.text$mn:0000454C ; Segment type: Pure code
.text$mn:0000454C ; Segment permissions: Read/Execute
.text$mn:0000454C _text$mn        segment para public 'CODE' use32
.text$mn:0000454C                 assume cs:_text$mn
.text$mn:0000454C                 ;org 454Ch
.text$mn:0000454C ; COMDAT (pick any)
.text$mn:0000454C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000454C
.text$mn:0000454C ; =============== S U B R O U T I N E =======================================
.text$mn:0000454C
.text$mn:0000454C ; Attributes: bp-based frame
.text$mn:0000454C
.text$mn:0000454C ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(void)
.text$mn:0000454C                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
.text$mn:0000454C ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ proc near
.text$mn:0000454C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)+Ap
.text$mn:0000454C
.text$mn:0000454C var_4           = dword ptr -4
.text$mn:0000454C
.text$mn:0000454C                 push    ebp
.text$mn:0000454D                 mov     ebp, esp
.text$mn:0000454F                 push    ecx
.text$mn:00004550                 mov     [ebp+var_4], ecx
.text$mn:00004553                 mov     ecx, [ebp+var_4]
.text$mn:00004556                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:0000455B                 mov     eax, [ebp+var_4]
.text$mn:0000455E                 mov     esp, ebp
.text$mn:00004560                 pop     ebp
.text$mn:00004561                 retn
.text$mn:00004561 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ endp
.text$mn:00004561
.text$mn:00004561 ; ---------------------------------------------------------------------------
.text$mn:00004562                 align 4
.text$mn:00004562 _text$mn        ends
.text$mn:00004562
.text$mn:00004564 ; ===========================================================================
.text$mn:00004564
.text$mn:00004564 ; Segment type: Pure code
.text$mn:00004564 ; Segment permissions: Read/Execute
.text$mn:00004564 _text$mn        segment para public 'CODE' use32
.text$mn:00004564                 assume cs:_text$mn
.text$mn:00004564                 ;org 4564h
.text$mn:00004564 ; COMDAT (pick any)
.text$mn:00004564                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004564
.text$mn:00004564 ; =============== S U B R O U T I N E =======================================
.text$mn:00004564
.text$mn:00004564 ; Attributes: bp-based frame
.text$mn:00004564
.text$mn:00004564 ; public: __thiscall std::allocator<char>::allocator<char>(void)
.text$mn:00004564                 public ??0?$allocator@D@std@@QAE@XZ
.text$mn:00004564 ??0?$allocator@D@std@@QAE@XZ proc near  ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)+Ap
.text$mn:00004564                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+2Bp
.text$mn:00004564
.text$mn:00004564 var_4           = dword ptr -4
.text$mn:00004564
.text$mn:00004564                 push    ebp
.text$mn:00004565                 mov     ebp, esp
.text$mn:00004567                 push    ecx
.text$mn:00004568                 mov     [ebp+var_4], ecx
.text$mn:0000456B                 mov     eax, [ebp+var_4]
.text$mn:0000456E                 mov     esp, ebp
.text$mn:00004570                 pop     ebp
.text$mn:00004571                 retn
.text$mn:00004571 ??0?$allocator@D@std@@QAE@XZ endp
.text$mn:00004571
.text$mn:00004571 ; ---------------------------------------------------------------------------
.text$mn:00004572                 align 4
.text$mn:00004572 _text$mn        ends
.text$mn:00004572
.text$mn:00004574 ; ===========================================================================
.text$mn:00004574
.text$mn:00004574 ; Segment type: Pure code
.text$mn:00004574 ; Segment permissions: Read/Execute
.text$mn:00004574 _text$mn        segment para public 'CODE' use32
.text$mn:00004574                 assume cs:_text$mn
.text$mn:00004574                 ;org 4574h
.text$mn:00004574 ; COMDAT (pick any)
.text$mn:00004574                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004574
.text$mn:00004574 ; =============== S U B R O U T I N E =======================================
.text$mn:00004574
.text$mn:00004574 ; Attributes: bp-based frame
.text$mn:00004574
.text$mn:00004574 ; public: __thiscall std::allocator<struct tTbData *>::allocator<struct tTbData *>(void)
.text$mn:00004574                 public ??0?$allocator@PAUtTbData@@@std@@QAE@XZ
.text$mn:00004574 ??0?$allocator@PAUtTbData@@@std@@QAE@XZ proc near
.text$mn:00004574                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<tTbData *>>::_Wrap_alloc<std::allocator<tTbData *>>(void)+Ap
.text$mn:00004574                                         ; std::vector<tTbData *,std::allocator<tTbData *>>::vector<tTbData *,std::allocator<tTbData *>>(void)+2Bp
.text$mn:00004574
.text$mn:00004574 var_4           = dword ptr -4
.text$mn:00004574
.text$mn:00004574                 push    ebp
.text$mn:00004575                 mov     ebp, esp
.text$mn:00004577                 push    ecx
.text$mn:00004578                 mov     [ebp+var_4], ecx
.text$mn:0000457B                 mov     eax, [ebp+var_4]
.text$mn:0000457E                 mov     esp, ebp
.text$mn:00004580                 pop     ebp
.text$mn:00004581                 retn
.text$mn:00004581 ??0?$allocator@PAUtTbData@@@std@@QAE@XZ endp
.text$mn:00004581
.text$mn:00004581 ; ---------------------------------------------------------------------------
.text$mn:00004582                 align 4
.text$mn:00004582 _text$mn        ends
.text$mn:00004582
.text$mn:00004584 ; ===========================================================================
.text$mn:00004584
.text$mn:00004584 ; Segment type: Pure code
.text$mn:00004584 ; Segment permissions: Read/Execute
.text$mn:00004584 _text$mn        segment para public 'CODE' use32
.text$mn:00004584                 assume cs:_text$mn
.text$mn:00004584                 ;org 4584h
.text$mn:00004584 ; COMDAT (pick any)
.text$mn:00004584                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004584
.text$mn:00004584 ; =============== S U B R O U T I N E =======================================
.text$mn:00004584
.text$mn:00004584 ; Attributes: bp-based frame
.text$mn:00004584
.text$mn:00004584 ; public: __thiscall std::allocator<struct std::_Container_proxy>::allocator<struct std::_Container_proxy>(void)
.text$mn:00004584                 public ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
.text$mn:00004584 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc near
.text$mn:00004584                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)+Ap
.text$mn:00004584                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+Cp ...
.text$mn:00004584
.text$mn:00004584 var_4           = dword ptr -4
.text$mn:00004584
.text$mn:00004584                 push    ebp
.text$mn:00004585                 mov     ebp, esp
.text$mn:00004587                 push    ecx
.text$mn:00004588                 mov     [ebp+var_4], ecx
.text$mn:0000458B                 mov     eax, [ebp+var_4]
.text$mn:0000458E                 mov     esp, ebp
.text$mn:00004590                 pop     ebp
.text$mn:00004591                 retn
.text$mn:00004591 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ endp
.text$mn:00004591
.text$mn:00004591 ; ---------------------------------------------------------------------------
.text$mn:00004592                 align 4
.text$mn:00004592 _text$mn        ends
.text$mn:00004592
.text$mn:00004594 ; ===========================================================================
.text$mn:00004594
.text$mn:00004594 ; Segment type: Pure code
.text$mn:00004594 ; Segment permissions: Read/Execute
.text$mn:00004594 _text$mn        segment para public 'CODE' use32
.text$mn:00004594                 assume cs:_text$mn
.text$mn:00004594                 ;org 4594h
.text$mn:00004594 ; COMDAT (pick any)
.text$mn:00004594                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004594
.text$mn:00004594 ; =============== S U B R O U T I N E =======================================
.text$mn:00004594
.text$mn:00004594 ; Attributes: bp-based frame
.text$mn:00004594
.text$mn:00004594 ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00004594                 public ??0?$allocator@_W@std@@QAE@XZ
.text$mn:00004594 ??0?$allocator@_W@std@@QAE@XZ proc near ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)+Ap
.text$mn:00004594                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+2Bp ...
.text$mn:00004594
.text$mn:00004594 var_4           = dword ptr -4
.text$mn:00004594
.text$mn:00004594                 push    ebp
.text$mn:00004595                 mov     ebp, esp
.text$mn:00004597                 push    ecx
.text$mn:00004598                 mov     [ebp+var_4], ecx
.text$mn:0000459B                 mov     eax, [ebp+var_4]
.text$mn:0000459E                 mov     esp, ebp
.text$mn:000045A0                 pop     ebp
.text$mn:000045A1                 retn
.text$mn:000045A1 ??0?$allocator@_W@std@@QAE@XZ endp
.text$mn:000045A1
.text$mn:000045A1 ; ---------------------------------------------------------------------------
.text$mn:000045A2                 align 4
.text$mn:000045A2 _text$mn        ends
.text$mn:000045A2
.text$mn:000045A4 ; ===========================================================================
.text$mn:000045A4
.text$mn:000045A4 ; Segment type: Pure code
.text$mn:000045A4 ; Segment permissions: Read/Execute
.text$mn:000045A4 _text$mn        segment para public 'CODE' use32
.text$mn:000045A4                 assume cs:_text$mn
.text$mn:000045A4                 ;org 45A4h
.text$mn:000045A4 ; COMDAT (pick any)
.text$mn:000045A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000045A4
.text$mn:000045A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000045A4
.text$mn:000045A4 ; Attributes: bp-based frame
.text$mn:000045A4
.text$mn:000045A4 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char *Str)
.text$mn:000045A4                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:000045A4 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$mn:000045A4                                         ; CODE XREF: std::_Generic_error_category::message(int)+5Ap
.text$mn:000045A4                                         ; std::_Iostream_error_category::message(int)+3Dp ...
.text$mn:000045A4
.text$mn:000045A4 var_14          = dword ptr -14h
.text$mn:000045A4 var_D           = byte ptr -0Dh
.text$mn:000045A4 var_C           = dword ptr -0Ch
.text$mn:000045A4 var_4           = dword ptr -4
.text$mn:000045A4 Str             = dword ptr  8
.text$mn:000045A4
.text$mn:000045A4                 push    ebp
.text$mn:000045A5                 mov     ebp, esp
.text$mn:000045A7                 push    0FFFFFFFFh
.text$mn:000045A9                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:000045AE                 mov     eax, large fs:0
.text$mn:000045B4                 push    eax
.text$mn:000045B5                 sub     esp, 8
.text$mn:000045B8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000045BD                 xor     eax, ebp
.text$mn:000045BF                 push    eax
.text$mn:000045C0                 lea     eax, [ebp+var_C]
.text$mn:000045C3                 mov     large fs:0, eax
.text$mn:000045C9                 mov     [ebp+var_14], ecx
.text$mn:000045CC                 lea     ecx, [ebp+var_D]
.text$mn:000045CF                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:000045D4                 push    eax
.text$mn:000045D5                 mov     ecx, [ebp+var_14]
.text$mn:000045D8                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:000045DD                 mov     [ebp+var_4], 0
.text$mn:000045E4                 push    0               ; Size
.text$mn:000045E6                 push    0               ; char
.text$mn:000045E8                 mov     ecx, [ebp+var_14]
.text$mn:000045EB                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000045F0                 mov     eax, [ebp+Str]
.text$mn:000045F3                 push    eax             ; Str
.text$mn:000045F4                 mov     ecx, [ebp+var_14]
.text$mn:000045F7                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)
.text$mn:000045FC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004603                 mov     eax, [ebp+var_14]
.text$mn:00004606                 mov     ecx, [ebp+var_C]
.text$mn:00004609                 mov     large fs:0, ecx
.text$mn:00004610                 pop     ecx
.text$mn:00004611                 mov     esp, ebp
.text$mn:00004613                 pop     ebp
.text$mn:00004614                 retn    4
.text$mn:00004614 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$mn:00004614
.text$mn:00004614 ; ---------------------------------------------------------------------------
.text$mn:00004617                 align 4
.text$mn:00004617 _text$mn        ends
.text$mn:00004617
.text$x:00004618 ; ===========================================================================
.text$x:00004618
.text$x:00004618 ; Segment type: Pure code
.text$x:00004618 ; Segment permissions: Read/Execute
.text$x:00004618 _text$x         segment para public 'CODE' use32
.text$x:00004618                 assume cs:_text$x
.text$x:00004618                 ;org 4618h
.text$x:00004618 ; COMDAT (pick associative to section at 45A4)
.text$x:00004618                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004618
.text$x:00004618 ; =============== S U B R O U T I N E =======================================
.text$x:00004618
.text$x:00004618
.text$x:00004618 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
.text$x:00004618                                         ; DATA XREF: .xdata$x:00008684o
.text$x:00004618                 mov     ecx, [ebp-14h]
.text$x:0000461B                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:0000461B __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 endp
.text$x:0000461B
.text$x:00004620
.text$x:00004620 ; =============== S U B R O U T I N E =======================================
.text$x:00004620
.text$x:00004620
.text$x:00004620 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$x:00004620                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+5o
.text$x:00004620
.text$x:00004620 arg_4           = dword ptr  8
.text$x:00004620
.text$x:00004620                 mov     edx, [esp+arg_4]
.text$x:00004624                 lea     eax, [edx+0Ch]
.text$x:00004627                 mov     ecx, [edx-0Ch]
.text$x:0000462A                 xor     ecx, eax
.text$x:0000462C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004631                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$x:00004636                 jmp     ___CxxFrameHandler3
.text$x:00004636 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$x:00004636
.text$x:00004636 ; ---------------------------------------------------------------------------
.text$x:0000463B                 align 4
.text$x:0000463B _text$x         ends
.text$x:0000463B
.text$mn:0000463C ; ===========================================================================
.text$mn:0000463C
.text$mn:0000463C ; Segment type: Pure code
.text$mn:0000463C ; Segment permissions: Read/Execute
.text$mn:0000463C _text$mn        segment para public 'CODE' use32
.text$mn:0000463C                 assume cs:_text$mn
.text$mn:0000463C                 ;org 463Ch
.text$mn:0000463C ; COMDAT (pick any)
.text$mn:0000463C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000463C
.text$mn:0000463C ; =============== S U B R O U T I N E =======================================
.text$mn:0000463C
.text$mn:0000463C ; Attributes: bp-based frame
.text$mn:0000463C
.text$mn:0000463C ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t *Str)
.text$mn:0000463C                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:0000463C ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$mn:0000463C                                         ; CODE XREF: DockingCont::SelectTab(int)+250p
.text$mn:0000463C
.text$mn:0000463C var_14          = dword ptr -14h
.text$mn:0000463C var_D           = byte ptr -0Dh
.text$mn:0000463C var_C           = dword ptr -0Ch
.text$mn:0000463C var_4           = dword ptr -4
.text$mn:0000463C Str             = dword ptr  8
.text$mn:0000463C
.text$mn:0000463C                 push    ebp
.text$mn:0000463D                 mov     ebp, esp
.text$mn:0000463F                 push    0FFFFFFFFh
.text$mn:00004641                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:00004646                 mov     eax, large fs:0
.text$mn:0000464C                 push    eax
.text$mn:0000464D                 sub     esp, 8
.text$mn:00004650                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004655                 xor     eax, ebp
.text$mn:00004657                 push    eax
.text$mn:00004658                 lea     eax, [ebp+var_C]
.text$mn:0000465B                 mov     large fs:0, eax
.text$mn:00004661                 mov     [ebp+var_14], ecx
.text$mn:00004664                 lea     ecx, [ebp+var_D]
.text$mn:00004667                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:0000466C                 push    eax
.text$mn:0000466D                 mov     ecx, [ebp+var_14]
.text$mn:00004670                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00004675                 mov     [ebp+var_4], 0
.text$mn:0000467C                 push    0
.text$mn:0000467E                 push    0
.text$mn:00004680                 mov     ecx, [ebp+var_14]
.text$mn:00004683                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00004688                 mov     eax, [ebp+Str]
.text$mn:0000468B                 push    eax             ; Str
.text$mn:0000468C                 mov     ecx, [ebp+var_14]
.text$mn:0000468F                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:00004694                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000469B                 mov     eax, [ebp+var_14]
.text$mn:0000469E                 mov     ecx, [ebp+var_C]
.text$mn:000046A1                 mov     large fs:0, ecx
.text$mn:000046A8                 pop     ecx
.text$mn:000046A9                 mov     esp, ebp
.text$mn:000046AB                 pop     ebp
.text$mn:000046AC                 retn    4
.text$mn:000046AC ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$mn:000046AC
.text$mn:000046AC ; ---------------------------------------------------------------------------
.text$mn:000046AF                 align 10h
.text$mn:000046AF _text$mn        ends
.text$mn:000046AF
.text$x:000046B0 ; ===========================================================================
.text$x:000046B0
.text$x:000046B0 ; Segment type: Pure code
.text$x:000046B0 ; Segment permissions: Read/Execute
.text$x:000046B0 _text$x         segment para public 'CODE' use32
.text$x:000046B0                 assume cs:_text$x
.text$x:000046B0                 ;org 46B0h
.text$x:000046B0 ; COMDAT (pick associative to section at 463C)
.text$x:000046B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000046B0
.text$x:000046B0 ; =============== S U B R O U T I N E =======================================
.text$x:000046B0
.text$x:000046B0
.text$x:000046B0 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 proc near
.text$x:000046B0                                         ; DATA XREF: .xdata$x:00008A28o
.text$x:000046B0                 mov     ecx, [ebp-14h]
.text$x:000046B3                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:000046B3 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 endp
.text$x:000046B3
.text$x:000046B8
.text$x:000046B8 ; =============== S U B R O U T I N E =======================================
.text$x:000046B8
.text$x:000046B8
.text$x:000046B8 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$x:000046B8                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+5o
.text$x:000046B8
.text$x:000046B8 arg_4           = dword ptr  8
.text$x:000046B8
.text$x:000046B8                 mov     edx, [esp+arg_4]
.text$x:000046BC                 lea     eax, [edx+0Ch]
.text$x:000046BF                 mov     ecx, [edx-0Ch]
.text$x:000046C2                 xor     ecx, eax
.text$x:000046C4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000046C9                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$x:000046CE                 jmp     ___CxxFrameHandler3
.text$x:000046CE __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$x:000046CE
.text$x:000046CE ; ---------------------------------------------------------------------------
.text$x:000046D3                 align 4
.text$x:000046D3 _text$x         ends
.text$x:000046D3
.text$mn:000046D4 ; ===========================================================================
.text$mn:000046D4
.text$mn:000046D4 ; Segment type: Pure code
.text$mn:000046D4 ; Segment permissions: Read/Execute
.text$mn:000046D4 _text$mn        segment para public 'CODE' use32
.text$mn:000046D4                 assume cs:_text$mn
.text$mn:000046D4                 ;org 46D4h
.text$mn:000046D4 ; COMDAT (pick any)
.text$mn:000046D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000046D4
.text$mn:000046D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000046D4
.text$mn:000046D4 ; Attributes: bp-based frame
.text$mn:000046D4
.text$mn:000046D4 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:000046D4                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:000046D4 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:000046D4                                         ; CODE XREF: DockingCont::DockingCont(void)+44p
.text$mn:000046D4
.text$mn:000046D4 var_14          = dword ptr -14h
.text$mn:000046D4 var_D           = byte ptr -0Dh
.text$mn:000046D4 var_C           = dword ptr -0Ch
.text$mn:000046D4 var_4           = dword ptr -4
.text$mn:000046D4
.text$mn:000046D4                 push    ebp
.text$mn:000046D5                 mov     ebp, esp
.text$mn:000046D7                 push    0FFFFFFFFh
.text$mn:000046D9                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:000046DE                 mov     eax, large fs:0
.text$mn:000046E4                 push    eax
.text$mn:000046E5                 sub     esp, 8
.text$mn:000046E8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000046ED                 xor     eax, ebp
.text$mn:000046EF                 push    eax
.text$mn:000046F0                 lea     eax, [ebp+var_C]
.text$mn:000046F3                 mov     large fs:0, eax
.text$mn:000046F9                 mov     [ebp+var_14], ecx
.text$mn:000046FC                 lea     ecx, [ebp+var_D]
.text$mn:000046FF                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00004704                 push    eax
.text$mn:00004705                 mov     ecx, [ebp+var_14]
.text$mn:00004708                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:0000470D                 mov     [ebp+var_4], 0
.text$mn:00004714                 push    0
.text$mn:00004716                 push    0
.text$mn:00004718                 mov     ecx, [ebp+var_14]
.text$mn:0000471B                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00004720                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004727                 mov     eax, [ebp+var_14]
.text$mn:0000472A                 mov     ecx, [ebp+var_C]
.text$mn:0000472D                 mov     large fs:0, ecx
.text$mn:00004734                 pop     ecx
.text$mn:00004735                 mov     esp, ebp
.text$mn:00004737                 pop     ebp
.text$mn:00004738                 retn
.text$mn:00004738 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:00004738
.text$mn:00004738 ; ---------------------------------------------------------------------------
.text$mn:00004739                 align 4
.text$mn:00004739 _text$mn        ends
.text$mn:00004739
.text$x:0000473C ; ===========================================================================
.text$x:0000473C
.text$x:0000473C ; Segment type: Pure code
.text$x:0000473C ; Segment permissions: Read/Execute
.text$x:0000473C _text$x         segment para public 'CODE' use32
.text$x:0000473C                 assume cs:_text$x
.text$x:0000473C                 ;org 473Ch
.text$x:0000473C ; COMDAT (pick associative to section at 46D4)
.text$x:0000473C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000473C
.text$x:0000473C ; =============== S U B R O U T I N E =======================================
.text$x:0000473C
.text$x:0000473C
.text$x:0000473C __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:0000473C                                         ; DATA XREF: .xdata$x:000089FCo
.text$x:0000473C                 mov     ecx, [ebp-14h]
.text$x:0000473F                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:0000473F __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:0000473F
.text$x:00004744
.text$x:00004744 ; =============== S U B R O U T I N E =======================================
.text$x:00004744
.text$x:00004744
.text$x:00004744 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:00004744                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:00004744
.text$x:00004744 arg_4           = dword ptr  8
.text$x:00004744
.text$x:00004744                 mov     edx, [esp+arg_4]
.text$x:00004748                 lea     eax, [edx+0Ch]
.text$x:0000474B                 mov     ecx, [edx-0Ch]
.text$x:0000474E                 xor     ecx, eax
.text$x:00004750                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004755                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:0000475A                 jmp     ___CxxFrameHandler3
.text$x:0000475A __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:0000475A
.text$x:0000475A ; ---------------------------------------------------------------------------
.text$x:0000475F                 align 10h
.text$x:0000475F _text$x         ends
.text$x:0000475F
.text$mn:00004760 ; ===========================================================================
.text$mn:00004760
.text$mn:00004760 ; Segment type: Pure code
.text$mn:00004760 ; Segment permissions: Read/Execute
.text$mn:00004760 _text$mn        segment para public 'CODE' use32
.text$mn:00004760                 assume cs:_text$mn
.text$mn:00004760                 ;org 4760h
.text$mn:00004760 ; COMDAT (pick any)
.text$mn:00004760                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004760
.text$mn:00004760 ; =============== S U B R O U T I N E =======================================
.text$mn:00004760
.text$mn:00004760 ; Attributes: bp-based frame
.text$mn:00004760
.text$mn:00004760 ; public: __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::vector<struct tTbData *, class std::allocator<struct tTbData *>>(class std::vector<struct tTbData *, class std::allocator<struct tTbData *>> &&)
.text$mn:00004760                 public ??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@$$QAV01@@Z
.text$mn:00004760 ??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@$$QAV01@@Z proc near
.text$mn:00004760                                         ; CODE XREF: DockingCont::getDataOfVisTb(void)+C8p
.text$mn:00004760
.text$mn:00004760 var_14          = dword ptr -14h
.text$mn:00004760 var_E           = byte ptr -0Eh
.text$mn:00004760 var_D           = byte ptr -0Dh
.text$mn:00004760 var_C           = dword ptr -0Ch
.text$mn:00004760 var_4           = dword ptr -4
.text$mn:00004760 arg_0           = dword ptr  8
.text$mn:00004760
.text$mn:00004760                 push    ebp
.text$mn:00004761                 mov     ebp, esp
.text$mn:00004763                 push    0FFFFFFFFh
.text$mn:00004765                 push    offset __ehhandler$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@$$QAV01@@Z
.text$mn:0000476A                 mov     eax, large fs:0
.text$mn:00004770                 push    eax
.text$mn:00004771                 sub     esp, 8
.text$mn:00004774                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004779                 xor     eax, ebp
.text$mn:0000477B                 push    eax
.text$mn:0000477C                 lea     eax, [ebp+var_C]
.text$mn:0000477F                 mov     large fs:0, eax
.text$mn:00004785                 mov     [ebp+var_14], ecx
.text$mn:00004788                 lea     eax, [ebp+var_E]
.text$mn:0000478B                 push    eax
.text$mn:0000478C                 mov     ecx, [ebp+arg_0]
.text$mn:0000478F                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Getal(void)
.text$mn:00004794                 push    eax
.text$mn:00004795                 mov     ecx, [ebp+var_14]
.text$mn:00004798                 call    ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtTbData@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>(std::allocator<tTbData *> const &)
.text$mn:0000479D                 mov     [ebp+var_4], 0
.text$mn:000047A4                 xor     ecx, ecx
.text$mn:000047A6                 mov     [ebp+var_D], cl
.text$mn:000047A9                 movzx   edx, [ebp+var_D]
.text$mn:000047AD                 push    edx             ; int
.text$mn:000047AE                 mov     eax, [ebp+arg_0]
.text$mn:000047B1                 push    eax
.text$mn:000047B2                 call    ??$forward@V?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@YA$$QAV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@0@AAV10@@Z ; std::forward<std::vector<tTbData *,std::allocator<tTbData *>>>(std::vector<tTbData *,std::allocator<tTbData *>> &)
.text$mn:000047B7                 add     esp, 4
.text$mn:000047BA                 push    eax             ; struct std::_Container_base12 *
.text$mn:000047BB                 mov     ecx, [ebp+var_14]
.text$mn:000047BE                 call    ?_Assign_rv@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::_Assign_rv(std::vector<tTbData *,std::allocator<tTbData *>> &&,std::integral_constant<bool,1>)
.text$mn:000047C3                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000047CA                 mov     eax, [ebp+var_14]
.text$mn:000047CD                 mov     ecx, [ebp+var_C]
.text$mn:000047D0                 mov     large fs:0, ecx
.text$mn:000047D7                 pop     ecx
.text$mn:000047D8                 mov     esp, ebp
.text$mn:000047DA                 pop     ebp
.text$mn:000047DB                 retn    4
.text$mn:000047DB ??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@$$QAV01@@Z endp
.text$mn:000047DB
.text$mn:000047DB ; ---------------------------------------------------------------------------
.text$mn:000047DE                 align 10h
.text$mn:000047DE _text$mn        ends
.text$mn:000047DE
.text$x:000047E0 ; ===========================================================================
.text$x:000047E0
.text$x:000047E0 ; Segment type: Pure code
.text$x:000047E0 ; Segment permissions: Read/Execute
.text$x:000047E0 _text$x         segment para public 'CODE' use32
.text$x:000047E0                 assume cs:_text$x
.text$x:000047E0                 ;org 47E0h
.text$x:000047E0 ; COMDAT (pick associative to section at 4760)
.text$x:000047E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000047E0
.text$x:000047E0 ; =============== S U B R O U T I N E =======================================
.text$x:000047E0
.text$x:000047E0
.text$x:000047E0 __unwindfunclet$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@$$QAV01@@Z$0 proc near
.text$x:000047E0                                         ; DATA XREF: .xdata$x:00008D5Co
.text$x:000047E0                 mov     ecx, [ebp-14h]
.text$x:000047E3                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::~_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>(void)
.text$x:000047E3 __unwindfunclet$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@$$QAV01@@Z$0 endp
.text$x:000047E3
.text$x:000047E8
.text$x:000047E8 ; =============== S U B R O U T I N E =======================================
.text$x:000047E8
.text$x:000047E8
.text$x:000047E8 __ehhandler$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@$$QAV01@@Z proc near
.text$x:000047E8                                         ; DATA XREF: std::vector<tTbData *,std::allocator<tTbData *>>::vector<tTbData *,std::allocator<tTbData *>>(std::vector<tTbData *,std::allocator<tTbData *>> &&)+5o
.text$x:000047E8
.text$x:000047E8 arg_4           = dword ptr  8
.text$x:000047E8
.text$x:000047E8                 mov     edx, [esp+arg_4]
.text$x:000047EC                 lea     eax, [edx+0Ch]
.text$x:000047EF                 mov     ecx, [edx-0Ch]
.text$x:000047F2                 xor     ecx, eax
.text$x:000047F4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000047F9                 mov     eax, offset __ehfuncinfo$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@$$QAV01@@Z
.text$x:000047FE                 jmp     ___CxxFrameHandler3
.text$x:000047FE __ehhandler$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@$$QAV01@@Z endp
.text$x:000047FE
.text$x:000047FE ; ---------------------------------------------------------------------------
.text$x:00004803                 align 4
.text$x:00004803 _text$x         ends
.text$x:00004803
.text$mn:00004804 ; ===========================================================================
.text$mn:00004804
.text$mn:00004804 ; Segment type: Pure code
.text$mn:00004804 ; Segment permissions: Read/Execute
.text$mn:00004804 _text$mn        segment para public 'CODE' use32
.text$mn:00004804                 assume cs:_text$mn
.text$mn:00004804                 ;org 4804h
.text$mn:00004804 ; COMDAT (pick any)
.text$mn:00004804                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004804
.text$mn:00004804 ; =============== S U B R O U T I N E =======================================
.text$mn:00004804
.text$mn:00004804 ; Attributes: bp-based frame
.text$mn:00004804
.text$mn:00004804 ; public: __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::vector<struct tTbData *, class std::allocator<struct tTbData *>>(void)
.text$mn:00004804                 public ??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ
.text$mn:00004804 ??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ proc near
.text$mn:00004804                                         ; CODE XREF: DockingCont::DockingCont(void)+56p
.text$mn:00004804                                         ; DockingCont::getDataOfVisTb(void)+32p
.text$mn:00004804
.text$mn:00004804 var_14          = dword ptr -14h
.text$mn:00004804 var_D           = byte ptr -0Dh
.text$mn:00004804 var_C           = dword ptr -0Ch
.text$mn:00004804 var_4           = dword ptr -4
.text$mn:00004804
.text$mn:00004804                 push    ebp
.text$mn:00004805                 mov     ebp, esp
.text$mn:00004807                 push    0FFFFFFFFh
.text$mn:00004809                 push    offset __ehhandler$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ
.text$mn:0000480E                 mov     eax, large fs:0
.text$mn:00004814                 push    eax
.text$mn:00004815                 sub     esp, 8
.text$mn:00004818                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000481D                 xor     eax, ebp
.text$mn:0000481F                 push    eax
.text$mn:00004820                 lea     eax, [ebp+var_C]
.text$mn:00004823                 mov     large fs:0, eax
.text$mn:00004829                 mov     [ebp+var_14], ecx
.text$mn:0000482C                 lea     ecx, [ebp+var_D]
.text$mn:0000482F                 call    ??0?$allocator@PAUtTbData@@@std@@QAE@XZ ; std::allocator<tTbData *>::allocator<tTbData *>(void)
.text$mn:00004834                 push    eax
.text$mn:00004835                 mov     ecx, [ebp+var_14]
.text$mn:00004838                 call    ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtTbData@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>(std::allocator<tTbData *> const &)
.text$mn:0000483D                 mov     [ebp+var_4], 0
.text$mn:00004844                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000484B                 mov     eax, [ebp+var_14]
.text$mn:0000484E                 mov     ecx, [ebp+var_C]
.text$mn:00004851                 mov     large fs:0, ecx
.text$mn:00004858                 pop     ecx
.text$mn:00004859                 mov     esp, ebp
.text$mn:0000485B                 pop     ebp
.text$mn:0000485C                 retn
.text$mn:0000485C ??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ endp
.text$mn:0000485C
.text$mn:0000485C ; ---------------------------------------------------------------------------
.text$mn:0000485D                 align 10h
.text$mn:0000485D _text$mn        ends
.text$mn:0000485D
.text$x:00004860 ; ===========================================================================
.text$x:00004860
.text$x:00004860 ; Segment type: Pure code
.text$x:00004860 ; Segment permissions: Read/Execute
.text$x:00004860 _text$x         segment para public 'CODE' use32
.text$x:00004860                 assume cs:_text$x
.text$x:00004860                 ;org 4860h
.text$x:00004860 ; COMDAT (pick associative to section at 4804)
.text$x:00004860                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004860
.text$x:00004860 ; =============== S U B R O U T I N E =======================================
.text$x:00004860
.text$x:00004860
.text$x:00004860 __unwindfunclet$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00004860                                         ; DATA XREF: .xdata$x:00008D30o
.text$x:00004860                 mov     ecx, [ebp-14h]
.text$x:00004863                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::~_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>(void)
.text$x:00004863 __unwindfunclet$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ$0 endp
.text$x:00004863
.text$x:00004868
.text$x:00004868 ; =============== S U B R O U T I N E =======================================
.text$x:00004868
.text$x:00004868
.text$x:00004868 __ehhandler$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ proc near
.text$x:00004868                                         ; DATA XREF: std::vector<tTbData *,std::allocator<tTbData *>>::vector<tTbData *,std::allocator<tTbData *>>(void)+5o
.text$x:00004868
.text$x:00004868 arg_4           = dword ptr  8
.text$x:00004868
.text$x:00004868                 mov     edx, [esp+arg_4]
.text$x:0000486C                 lea     eax, [edx+0Ch]
.text$x:0000486F                 mov     ecx, [edx-0Ch]
.text$x:00004872                 xor     ecx, eax
.text$x:00004874                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004879                 mov     eax, offset __ehfuncinfo$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ
.text$x:0000487E                 jmp     ___CxxFrameHandler3
.text$x:0000487E __ehhandler$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ endp
.text$x:0000487E
.text$x:0000487E ; ---------------------------------------------------------------------------
.text$x:00004883                 align 4
.text$x:00004883 _text$x         ends
.text$x:00004883
.text$mn:00004884 ; ===========================================================================
.text$mn:00004884
.text$mn:00004884 ; Segment type: Pure code
.text$mn:00004884 ; Segment permissions: Read/Execute
.text$mn:00004884 _text$mn        segment para public 'CODE' use32
.text$mn:00004884                 assume cs:_text$mn
.text$mn:00004884                 ;org 4884h
.text$mn:00004884 ; COMDAT (pick any)
.text$mn:00004884                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004884
.text$mn:00004884 ; =============== S U B R O U T I N E =======================================
.text$mn:00004884
.text$mn:00004884 ; Attributes: bp-based frame
.text$mn:00004884
.text$mn:00004884 ; public: __thiscall StaticDialog::StaticDialog(void)
.text$mn:00004884                 public ??0StaticDialog@@QAE@XZ
.text$mn:00004884 ??0StaticDialog@@QAE@XZ proc near       ; CODE XREF: DockingCont::DockingCont(void)+29p
.text$mn:00004884
.text$mn:00004884 var_10          = dword ptr -10h
.text$mn:00004884 var_C           = dword ptr -0Ch
.text$mn:00004884 var_4           = dword ptr -4
.text$mn:00004884
.text$mn:00004884                 push    ebp
.text$mn:00004885                 mov     ebp, esp
.text$mn:00004887                 push    0FFFFFFFFh
.text$mn:00004889                 push    offset __ehhandler$??0StaticDialog@@QAE@XZ
.text$mn:0000488E                 mov     eax, large fs:0
.text$mn:00004894                 push    eax
.text$mn:00004895                 push    ecx
.text$mn:00004896                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000489B                 xor     eax, ebp
.text$mn:0000489D                 push    eax
.text$mn:0000489E                 lea     eax, [ebp+var_C]
.text$mn:000048A1                 mov     large fs:0, eax
.text$mn:000048A7                 mov     [ebp+var_10], ecx
.text$mn:000048AA                 mov     ecx, [ebp+var_10] ; this
.text$mn:000048AD                 call    ??0Window@@QAE@XZ ; Window::Window(void)
.text$mn:000048B2                 mov     [ebp+var_4], 0
.text$mn:000048B9                 mov     eax, [ebp+var_10]
.text$mn:000048BC                 mov     dword ptr [eax], offset ??_7StaticDialog@@6B@ ; const StaticDialog::`vftable'
.text$mn:000048C2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000048C9                 mov     eax, [ebp+var_10]
.text$mn:000048CC                 mov     ecx, [ebp+var_C]
.text$mn:000048CF                 mov     large fs:0, ecx
.text$mn:000048D6                 pop     ecx
.text$mn:000048D7                 mov     esp, ebp
.text$mn:000048D9                 pop     ebp
.text$mn:000048DA                 retn
.text$mn:000048DA ??0StaticDialog@@QAE@XZ endp
.text$mn:000048DA
.text$mn:000048DA ; ---------------------------------------------------------------------------
.text$mn:000048DB                 align 4
.text$mn:000048DB _text$mn        ends
.text$mn:000048DB
.text$x:000048DC ; ===========================================================================
.text$x:000048DC
.text$x:000048DC ; Segment type: Pure code
.text$x:000048DC ; Segment permissions: Read/Execute
.text$x:000048DC _text$x         segment para public 'CODE' use32
.text$x:000048DC                 assume cs:_text$x
.text$x:000048DC                 ;org 48DCh
.text$x:000048DC ; COMDAT (pick associative to section at 4884)
.text$x:000048DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000048DC
.text$x:000048DC ; =============== S U B R O U T I N E =======================================
.text$x:000048DC
.text$x:000048DC
.text$x:000048DC __unwindfunclet$??0StaticDialog@@QAE@XZ$0 proc near
.text$x:000048DC                                         ; DATA XREF: .xdata$x:00008768o
.text$x:000048DC                 mov     ecx, [ebp-10h]  ; this
.text$x:000048DF                 jmp     ??1Window@@UAE@XZ ; Window::~Window(void)
.text$x:000048DF __unwindfunclet$??0StaticDialog@@QAE@XZ$0 endp
.text$x:000048DF
.text$x:000048E4
.text$x:000048E4 ; =============== S U B R O U T I N E =======================================
.text$x:000048E4
.text$x:000048E4
.text$x:000048E4 __ehhandler$??0StaticDialog@@QAE@XZ proc near
.text$x:000048E4                                         ; DATA XREF: StaticDialog::StaticDialog(void)+5o
.text$x:000048E4
.text$x:000048E4 arg_4           = dword ptr  8
.text$x:000048E4
.text$x:000048E4                 mov     edx, [esp+arg_4]
.text$x:000048E8                 lea     eax, [edx+0Ch]
.text$x:000048EB                 mov     ecx, [edx-8]
.text$x:000048EE                 xor     ecx, eax
.text$x:000048F0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000048F5                 mov     eax, offset __ehfuncinfo$??0StaticDialog@@QAE@XZ
.text$x:000048FA                 jmp     ___CxxFrameHandler3
.text$x:000048FA __ehhandler$??0StaticDialog@@QAE@XZ endp
.text$x:000048FA
.text$x:000048FA ; ---------------------------------------------------------------------------
.text$x:000048FF                 align 10h
.text$x:000048FF _text$x         ends
.text$x:000048FF
.text$mn:00004900 ; ===========================================================================
.text$mn:00004900
.text$mn:00004900 ; Segment type: Pure code
.text$mn:00004900 ; Segment permissions: Read/Execute
.text$mn:00004900 _text$mn        segment para public 'CODE' use32
.text$mn:00004900                 assume cs:_text$mn
.text$mn:00004900                 ;org 4900h
.text$mn:00004900 ; COMDAT (pick any)
.text$mn:00004900                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004900
.text$mn:00004900 ; =============== S U B R O U T I N E =======================================
.text$mn:00004900
.text$mn:00004900 ; Attributes: bp-based frame
.text$mn:00004900
.text$mn:00004900 ; public: __thiscall ToolTip::ToolTip(void)
.text$mn:00004900                 public ??0ToolTip@@QAE@XZ
.text$mn:00004900 ??0ToolTip@@QAE@XZ proc near            ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+56p
.text$mn:00004900                                         ; DockingCont::runProcTab(HWND__ *,uint,uint,long)+53p
.text$mn:00004900
.text$mn:00004900 var_10          = dword ptr -10h
.text$mn:00004900 var_C           = dword ptr -0Ch
.text$mn:00004900 var_4           = dword ptr -4
.text$mn:00004900
.text$mn:00004900                 push    ebp
.text$mn:00004901                 mov     ebp, esp
.text$mn:00004903                 push    0FFFFFFFFh
.text$mn:00004905                 push    offset __ehhandler$??0ToolTip@@QAE@XZ
.text$mn:0000490A                 mov     eax, large fs:0
.text$mn:00004910                 push    eax
.text$mn:00004911                 push    ecx
.text$mn:00004912                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004917                 xor     eax, ebp
.text$mn:00004919                 push    eax
.text$mn:0000491A                 lea     eax, [ebp+var_C]
.text$mn:0000491D                 mov     large fs:0, eax
.text$mn:00004923                 mov     [ebp+var_10], ecx
.text$mn:00004926                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004929                 call    ??0Window@@QAE@XZ ; Window::Window(void)
.text$mn:0000492E                 mov     [ebp+var_4], 0
.text$mn:00004935                 mov     eax, [ebp+var_10]
.text$mn:00004938                 mov     dword ptr [eax], offset ??_7ToolTip@@6B@ ; const ToolTip::`vftable'
.text$mn:0000493E                 mov     ecx, [ebp+var_10]
.text$mn:00004941                 mov     dword ptr [ecx+14h], 0
.text$mn:00004948                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000494F                 mov     eax, [ebp+var_10]
.text$mn:00004952                 mov     ecx, [ebp+var_C]
.text$mn:00004955                 mov     large fs:0, ecx
.text$mn:0000495C                 pop     ecx
.text$mn:0000495D                 mov     esp, ebp
.text$mn:0000495F                 pop     ebp
.text$mn:00004960                 retn
.text$mn:00004960 ??0ToolTip@@QAE@XZ endp
.text$mn:00004960
.text$mn:00004960 ; ---------------------------------------------------------------------------
.text$mn:00004961                 align 4
.text$mn:00004961 _text$mn        ends
.text$mn:00004961
.text$x:00004964 ; ===========================================================================
.text$x:00004964
.text$x:00004964 ; Segment type: Pure code
.text$x:00004964 ; Segment permissions: Read/Execute
.text$x:00004964 _text$x         segment para public 'CODE' use32
.text$x:00004964                 assume cs:_text$x
.text$x:00004964                 ;org 4964h
.text$x:00004964 ; COMDAT (pick associative to section at 4900)
.text$x:00004964                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004964
.text$x:00004964 ; =============== S U B R O U T I N E =======================================
.text$x:00004964
.text$x:00004964
.text$x:00004964 __unwindfunclet$??0ToolTip@@QAE@XZ$0 proc near
.text$x:00004964                                         ; DATA XREF: .xdata$x:00008ED4o
.text$x:00004964                 mov     ecx, [ebp-10h]  ; this
.text$x:00004967                 jmp     ??1Window@@UAE@XZ ; Window::~Window(void)
.text$x:00004967 __unwindfunclet$??0ToolTip@@QAE@XZ$0 endp
.text$x:00004967
.text$x:0000496C
.text$x:0000496C ; =============== S U B R O U T I N E =======================================
.text$x:0000496C
.text$x:0000496C
.text$x:0000496C __ehhandler$??0ToolTip@@QAE@XZ proc near
.text$x:0000496C                                         ; DATA XREF: ToolTip::ToolTip(void)+5o
.text$x:0000496C
.text$x:0000496C arg_4           = dword ptr  8
.text$x:0000496C
.text$x:0000496C                 mov     edx, [esp+arg_4]
.text$x:00004970                 lea     eax, [edx+0Ch]
.text$x:00004973                 mov     ecx, [edx-8]
.text$x:00004976                 xor     ecx, eax
.text$x:00004978                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000497D                 mov     eax, offset __ehfuncinfo$??0ToolTip@@QAE@XZ
.text$x:00004982                 jmp     ___CxxFrameHandler3
.text$x:00004982 __ehhandler$??0ToolTip@@QAE@XZ endp
.text$x:00004982
.text$x:00004982 ; ---------------------------------------------------------------------------
.text$x:00004987                 align 4
.text$x:00004987 _text$x         ends
.text$x:00004987
.text$mn:00004988 ; ===========================================================================
.text$mn:00004988
.text$mn:00004988 ; Segment type: Pure code
.text$mn:00004988 ; Segment permissions: Read/Execute
.text$mn:00004988 _text$mn        segment para public 'CODE' use32
.text$mn:00004988                 assume cs:_text$mn
.text$mn:00004988                 ;org 4988h
.text$mn:00004988 ; COMDAT (pick any)
.text$mn:00004988                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004988
.text$mn:00004988 ; =============== S U B R O U T I N E =======================================
.text$mn:00004988
.text$mn:00004988 ; Attributes: bp-based frame
.text$mn:00004988
.text$mn:00004988 ; _DWORD __thiscall Window::Window(Window *__hidden this)
.text$mn:00004988                 public ??0Window@@QAE@XZ
.text$mn:00004988 ??0Window@@QAE@XZ proc near             ; CODE XREF: StaticDialog::StaticDialog(void)+29p
.text$mn:00004988                                         ; ToolTip::ToolTip(void)+29p
.text$mn:00004988
.text$mn:00004988 var_4           = dword ptr -4
.text$mn:00004988
.text$mn:00004988                 push    ebp
.text$mn:00004989                 mov     ebp, esp
.text$mn:0000498B                 push    ecx
.text$mn:0000498C                 mov     [ebp+var_4], ecx
.text$mn:0000498F                 mov     eax, [ebp+var_4]
.text$mn:00004992                 mov     dword ptr [eax], offset ??_7Window@@6B@ ; const Window::`vftable'
.text$mn:00004998                 mov     ecx, [ebp+var_4]
.text$mn:0000499B                 mov     dword ptr [ecx+4], 0
.text$mn:000049A2                 mov     edx, [ebp+var_4]
.text$mn:000049A5                 mov     dword ptr [edx+8], 0
.text$mn:000049AC                 mov     eax, [ebp+var_4]
.text$mn:000049AF                 mov     dword ptr [eax+0Ch], 0
.text$mn:000049B6                 mov     eax, [ebp+var_4]
.text$mn:000049B9                 mov     esp, ebp
.text$mn:000049BB                 pop     ebp
.text$mn:000049BC                 retn
.text$mn:000049BC ??0Window@@QAE@XZ endp
.text$mn:000049BC
.text$mn:000049BC ; ---------------------------------------------------------------------------
.text$mn:000049BD                 align 10h
.text$mn:000049BD _text$mn        ends
.text$mn:000049BD
.text$mn:000049C0 ; ===========================================================================
.text$mn:000049C0
.text$mn:000049C0 ; Segment type: Pure code
.text$mn:000049C0 ; Segment permissions: Read/Execute
.text$mn:000049C0 _text$mn        segment para public 'CODE' use32
.text$mn:000049C0                 assume cs:_text$mn
.text$mn:000049C0                 ;org 49C0h
.text$mn:000049C0 ; COMDAT (pick any)
.text$mn:000049C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000049C0
.text$mn:000049C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000049C0
.text$mn:000049C0 ; Attributes: bp-based frame
.text$mn:000049C0
.text$mn:000049C0 ; _DWORD __thiscall std::_Container_base12::_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:000049C0                 public ??0_Container_base12@std@@QAE@XZ
.text$mn:000049C0 ??0_Container_base12@std@@QAE@XZ proc near
.text$mn:000049C0                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+29p
.text$mn:000049C0                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+29p ...
.text$mn:000049C0
.text$mn:000049C0 var_4           = dword ptr -4
.text$mn:000049C0
.text$mn:000049C0                 push    ebp
.text$mn:000049C1                 mov     ebp, esp
.text$mn:000049C3                 push    ecx
.text$mn:000049C4                 mov     [ebp+var_4], ecx
.text$mn:000049C7                 mov     eax, [ebp+var_4]
.text$mn:000049CA                 mov     dword ptr [eax], 0
.text$mn:000049D0                 mov     eax, [ebp+var_4]
.text$mn:000049D3                 mov     esp, ebp
.text$mn:000049D5                 pop     ebp
.text$mn:000049D6                 retn
.text$mn:000049D6 ??0_Container_base12@std@@QAE@XZ endp
.text$mn:000049D6
.text$mn:000049D6 ; ---------------------------------------------------------------------------
.text$mn:000049D7                 align 4
.text$mn:000049D7 _text$mn        ends
.text$mn:000049D7
.text$mn:000049D8 ; ===========================================================================
.text$mn:000049D8
.text$mn:000049D8 ; Segment type: Pure code
.text$mn:000049D8 ; Segment permissions: Read/Execute
.text$mn:000049D8 _text$mn        segment para public 'CODE' use32
.text$mn:000049D8                 assume cs:_text$mn
.text$mn:000049D8                 ;org 49D8h
.text$mn:000049D8 ; COMDAT (pick any)
.text$mn:000049D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000049D8
.text$mn:000049D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000049D8
.text$mn:000049D8 ; Attributes: bp-based frame
.text$mn:000049D8
.text$mn:000049D8 ; _DWORD __thiscall std::_Container_proxy::_Container_proxy(std::_Container_proxy *__hidden this)
.text$mn:000049D8                 public ??0_Container_proxy@std@@QAE@XZ
.text$mn:000049D8 ??0_Container_proxy@std@@QAE@XZ proc near
.text$mn:000049D8                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+23p
.text$mn:000049D8                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+23p ...
.text$mn:000049D8
.text$mn:000049D8 var_4           = dword ptr -4
.text$mn:000049D8
.text$mn:000049D8                 push    ebp
.text$mn:000049D9                 mov     ebp, esp
.text$mn:000049DB                 push    ecx
.text$mn:000049DC                 mov     [ebp+var_4], ecx
.text$mn:000049DF                 mov     eax, [ebp+var_4]
.text$mn:000049E2                 mov     dword ptr [eax], 0
.text$mn:000049E8                 mov     ecx, [ebp+var_4]
.text$mn:000049EB                 mov     dword ptr [ecx+4], 0
.text$mn:000049F2                 mov     eax, [ebp+var_4]
.text$mn:000049F5                 mov     esp, ebp
.text$mn:000049F7                 pop     ebp
.text$mn:000049F8                 retn
.text$mn:000049F8 ??0_Container_proxy@std@@QAE@XZ endp
.text$mn:000049F8
.text$mn:000049F8 ; ---------------------------------------------------------------------------
.text$mn:000049F9                 align 4
.text$mn:000049F9 _text$mn        ends
.text$mn:000049F9
.text$mn:000049FC ; ===========================================================================
.text$mn:000049FC
.text$mn:000049FC ; Segment type: Pure code
.text$mn:000049FC ; Segment permissions: Read/Execute
.text$mn:000049FC _text$mn        segment para public 'CODE' use32
.text$mn:000049FC                 assume cs:_text$mn
.text$mn:000049FC                 ;org 49FCh
.text$mn:000049FC ; COMDAT (pick any)
.text$mn:000049FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000049FC
.text$mn:000049FC ; =============== S U B R O U T I N E =======================================
.text$mn:000049FC
.text$mn:000049FC ; Attributes: bp-based frame
.text$mn:000049FC
.text$mn:000049FC ; _DWORD __thiscall std::_Generic_error_category::_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:000049FC                 public ??0_Generic_error_category@std@@QAE@XZ
.text$mn:000049FC ??0_Generic_error_category@std@@QAE@XZ proc near
.text$mn:000049FC                                         ; CODE XREF: std::_Iostream_error_category::_Iostream_error_category(void)+29p
.text$mn:000049FC                                         ; std::_System_error_category::_System_error_category(void)+29p ...
.text$mn:000049FC
.text$mn:000049FC var_10          = dword ptr -10h
.text$mn:000049FC var_C           = dword ptr -0Ch
.text$mn:000049FC var_4           = dword ptr -4
.text$mn:000049FC
.text$mn:000049FC                 push    ebp
.text$mn:000049FD                 mov     ebp, esp
.text$mn:000049FF                 push    0FFFFFFFFh
.text$mn:00004A01                 push    offset __ehhandler$??0_Generic_error_category@std@@QAE@XZ
.text$mn:00004A06                 mov     eax, large fs:0
.text$mn:00004A0C                 push    eax
.text$mn:00004A0D                 push    ecx
.text$mn:00004A0E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004A13                 xor     eax, ebp
.text$mn:00004A15                 push    eax
.text$mn:00004A16                 lea     eax, [ebp+var_C]
.text$mn:00004A19                 mov     large fs:0, eax
.text$mn:00004A1F                 mov     [ebp+var_10], ecx
.text$mn:00004A22                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004A25                 call    ??0error_category@std@@QAE@XZ ; std::error_category::error_category(void)
.text$mn:00004A2A                 mov     [ebp+var_4], 0
.text$mn:00004A31                 mov     eax, [ebp+var_10]
.text$mn:00004A34                 mov     dword ptr [eax], offset ??_7_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`vftable'
.text$mn:00004A3A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004A41                 mov     eax, [ebp+var_10]
.text$mn:00004A44                 mov     ecx, [ebp+var_C]
.text$mn:00004A47                 mov     large fs:0, ecx
.text$mn:00004A4E                 pop     ecx
.text$mn:00004A4F                 mov     esp, ebp
.text$mn:00004A51                 pop     ebp
.text$mn:00004A52                 retn
.text$mn:00004A52 ??0_Generic_error_category@std@@QAE@XZ endp
.text$mn:00004A52
.text$mn:00004A52 ; ---------------------------------------------------------------------------
.text$mn:00004A53                 align 4
.text$mn:00004A53 _text$mn        ends
.text$mn:00004A53
.text$x:00004A54 ; ===========================================================================
.text$x:00004A54
.text$x:00004A54 ; Segment type: Pure code
.text$x:00004A54 ; Segment permissions: Read/Execute
.text$x:00004A54 _text$x         segment para public 'CODE' use32
.text$x:00004A54                 assume cs:_text$x
.text$x:00004A54                 ;org 4A54h
.text$x:00004A54 ; COMDAT (pick associative to section at 49FC)
.text$x:00004A54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004A54
.text$x:00004A54 ; =============== S U B R O U T I N E =======================================
.text$x:00004A54
.text$x:00004A54
.text$x:00004A54 __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 proc near
.text$x:00004A54                                         ; DATA XREF: .xdata$x:000087C0o
.text$x:00004A54                 mov     ecx, [ebp-10h]  ; this
.text$x:00004A57                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:00004A57 __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 endp
.text$x:00004A57
.text$x:00004A5C
.text$x:00004A5C ; =============== S U B R O U T I N E =======================================
.text$x:00004A5C
.text$x:00004A5C
.text$x:00004A5C __ehhandler$??0_Generic_error_category@std@@QAE@XZ proc near
.text$x:00004A5C                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+5o
.text$x:00004A5C
.text$x:00004A5C arg_4           = dword ptr  8
.text$x:00004A5C
.text$x:00004A5C                 mov     edx, [esp+arg_4]
.text$x:00004A60                 lea     eax, [edx+0Ch]
.text$x:00004A63                 mov     ecx, [edx-8]
.text$x:00004A66                 xor     ecx, eax
.text$x:00004A68                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004A6D                 mov     eax, offset __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ
.text$x:00004A72                 jmp     ___CxxFrameHandler3
.text$x:00004A72 __ehhandler$??0_Generic_error_category@std@@QAE@XZ endp
.text$x:00004A72
.text$x:00004A72 ; ---------------------------------------------------------------------------
.text$x:00004A77                 align 4
.text$x:00004A77 _text$x         ends
.text$x:00004A77
.text$mn:00004A78 ; ===========================================================================
.text$mn:00004A78
.text$mn:00004A78 ; Segment type: Pure code
.text$mn:00004A78 ; Segment permissions: Read/Execute
.text$mn:00004A78 _text$mn        segment para public 'CODE' use32
.text$mn:00004A78                 assume cs:_text$mn
.text$mn:00004A78                 ;org 4A78h
.text$mn:00004A78 ; COMDAT (pick any)
.text$mn:00004A78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A78
.text$mn:00004A78 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A78
.text$mn:00004A78 ; Attributes: bp-based frame
.text$mn:00004A78
.text$mn:00004A78 ; _DWORD __thiscall std::_Iostream_error_category::_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00004A78                 public ??0_Iostream_error_category@std@@QAE@XZ
.text$mn:00004A78 ??0_Iostream_error_category@std@@QAE@XZ proc near
.text$mn:00004A78                                         ; CODE XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00004A78
.text$mn:00004A78 var_10          = dword ptr -10h
.text$mn:00004A78 var_C           = dword ptr -0Ch
.text$mn:00004A78 var_4           = dword ptr -4
.text$mn:00004A78
.text$mn:00004A78                 push    ebp
.text$mn:00004A79                 mov     ebp, esp
.text$mn:00004A7B                 push    0FFFFFFFFh
.text$mn:00004A7D                 push    offset __ehhandler$??0_Iostream_error_category@std@@QAE@XZ
.text$mn:00004A82                 mov     eax, large fs:0
.text$mn:00004A88                 push    eax
.text$mn:00004A89                 push    ecx
.text$mn:00004A8A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004A8F                 xor     eax, ebp
.text$mn:00004A91                 push    eax
.text$mn:00004A92                 lea     eax, [ebp+var_C]
.text$mn:00004A95                 mov     large fs:0, eax
.text$mn:00004A9B                 mov     [ebp+var_10], ecx
.text$mn:00004A9E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004AA1                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:00004AA6                 mov     [ebp+var_4], 0
.text$mn:00004AAD                 mov     eax, [ebp+var_10]
.text$mn:00004AB0                 mov     dword ptr [eax], offset ??_7_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`vftable'
.text$mn:00004AB6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004ABD                 mov     eax, [ebp+var_10]
.text$mn:00004AC0                 mov     ecx, [ebp+var_C]
.text$mn:00004AC3                 mov     large fs:0, ecx
.text$mn:00004ACA                 pop     ecx
.text$mn:00004ACB                 mov     esp, ebp
.text$mn:00004ACD                 pop     ebp
.text$mn:00004ACE                 retn
.text$mn:00004ACE ??0_Iostream_error_category@std@@QAE@XZ endp
.text$mn:00004ACE
.text$mn:00004ACE ; ---------------------------------------------------------------------------
.text$mn:00004ACF                 align 10h
.text$mn:00004ACF _text$mn        ends
.text$mn:00004ACF
.text$x:00004AD0 ; ===========================================================================
.text$x:00004AD0
.text$x:00004AD0 ; Segment type: Pure code
.text$x:00004AD0 ; Segment permissions: Read/Execute
.text$x:00004AD0 _text$x         segment para public 'CODE' use32
.text$x:00004AD0                 assume cs:_text$x
.text$x:00004AD0                 ;org 4AD0h
.text$x:00004AD0 ; COMDAT (pick associative to section at 4A78)
.text$x:00004AD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004AD0
.text$x:00004AD0 ; =============== S U B R O U T I N E =======================================
.text$x:00004AD0
.text$x:00004AD0
.text$x:00004AD0 __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 proc near
.text$x:00004AD0                                         ; DATA XREF: .xdata$x:00008844o
.text$x:00004AD0                 mov     ecx, [ebp-10h]  ; this
.text$x:00004AD3                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00004AD3 __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 endp
.text$x:00004AD3
.text$x:00004AD8
.text$x:00004AD8 ; =============== S U B R O U T I N E =======================================
.text$x:00004AD8
.text$x:00004AD8
.text$x:00004AD8 __ehhandler$??0_Iostream_error_category@std@@QAE@XZ proc near
.text$x:00004AD8                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+5o
.text$x:00004AD8
.text$x:00004AD8 arg_4           = dword ptr  8
.text$x:00004AD8
.text$x:00004AD8                 mov     edx, [esp+arg_4]
.text$x:00004ADC                 lea     eax, [edx+0Ch]
.text$x:00004ADF                 mov     ecx, [edx-8]
.text$x:00004AE2                 xor     ecx, eax
.text$x:00004AE4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004AE9                 mov     eax, offset __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ
.text$x:00004AEE                 jmp     ___CxxFrameHandler3
.text$x:00004AEE __ehhandler$??0_Iostream_error_category@std@@QAE@XZ endp
.text$x:00004AEE
.text$x:00004AEE ; ---------------------------------------------------------------------------
.text$x:00004AF3                 align 4
.text$x:00004AF3 _text$x         ends
.text$x:00004AF3
.text$mn:00004AF4 ; ===========================================================================
.text$mn:00004AF4
.text$mn:00004AF4 ; Segment type: Pure code
.text$mn:00004AF4 ; Segment permissions: Read/Execute
.text$mn:00004AF4 _text$mn        segment para public 'CODE' use32
.text$mn:00004AF4                 assume cs:_text$mn
.text$mn:00004AF4                 ;org 4AF4h
.text$mn:00004AF4 ; COMDAT (pick any)
.text$mn:00004AF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004AF4
.text$mn:00004AF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00004AF4
.text$mn:00004AF4 ; Attributes: bp-based frame
.text$mn:00004AF4
.text$mn:00004AF4 ; _DWORD __thiscall std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 *this, const struct std::_Iterator_base12 *)
.text$mn:00004AF4                 public ??0_Iterator_base12@std@@QAE@ABU01@@Z
.text$mn:00004AF4 ??0_Iterator_base12@std@@QAE@ABU01@@Z proc near
.text$mn:00004AF4                                         ; CODE XREF: std::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12> const &)+2Dp
.text$mn:00004AF4
.text$mn:00004AF4 var_4           = dword ptr -4
.text$mn:00004AF4 arg_0           = dword ptr  8
.text$mn:00004AF4
.text$mn:00004AF4                 push    ebp
.text$mn:00004AF5                 mov     ebp, esp
.text$mn:00004AF7                 push    ecx
.text$mn:00004AF8                 mov     [ebp+var_4], ecx
.text$mn:00004AFB                 mov     eax, [ebp+var_4]
.text$mn:00004AFE                 mov     dword ptr [eax], 0
.text$mn:00004B04                 mov     ecx, [ebp+var_4]
.text$mn:00004B07                 mov     dword ptr [ecx+4], 0
.text$mn:00004B0E                 mov     edx, [ebp+arg_0]
.text$mn:00004B11                 push    edx
.text$mn:00004B12                 mov     ecx, [ebp+var_4]
.text$mn:00004B15                 call    ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)
.text$mn:00004B1A                 mov     eax, [ebp+var_4]
.text$mn:00004B1D                 mov     esp, ebp
.text$mn:00004B1F                 pop     ebp
.text$mn:00004B20                 retn    4
.text$mn:00004B20 ??0_Iterator_base12@std@@QAE@ABU01@@Z endp
.text$mn:00004B20
.text$mn:00004B20 ; ---------------------------------------------------------------------------
.text$mn:00004B23                 align 4
.text$mn:00004B23 _text$mn        ends
.text$mn:00004B23
.text$mn:00004B24 ; ===========================================================================
.text$mn:00004B24
.text$mn:00004B24 ; Segment type: Pure code
.text$mn:00004B24 ; Segment permissions: Read/Execute
.text$mn:00004B24 _text$mn        segment para public 'CODE' use32
.text$mn:00004B24                 assume cs:_text$mn
.text$mn:00004B24                 ;org 4B24h
.text$mn:00004B24 ; COMDAT (pick any)
.text$mn:00004B24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B24
.text$mn:00004B24 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B24
.text$mn:00004B24 ; Attributes: bp-based frame
.text$mn:00004B24
.text$mn:00004B24 ; _DWORD __thiscall std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 *__hidden this)
.text$mn:00004B24                 public ??0_Iterator_base12@std@@QAE@XZ
.text$mn:00004B24 ??0_Iterator_base12@std@@QAE@XZ proc near
.text$mn:00004B24                                         ; CODE XREF: std::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>(void)+29p
.text$mn:00004B24
.text$mn:00004B24 var_4           = dword ptr -4
.text$mn:00004B24
.text$mn:00004B24                 push    ebp
.text$mn:00004B25                 mov     ebp, esp
.text$mn:00004B27                 push    ecx
.text$mn:00004B28                 mov     [ebp+var_4], ecx
.text$mn:00004B2B                 mov     eax, [ebp+var_4]
.text$mn:00004B2E                 mov     dword ptr [eax], 0
.text$mn:00004B34                 mov     ecx, [ebp+var_4]
.text$mn:00004B37                 mov     dword ptr [ecx+4], 0
.text$mn:00004B3E                 mov     eax, [ebp+var_4]
.text$mn:00004B41                 mov     esp, ebp
.text$mn:00004B43                 pop     ebp
.text$mn:00004B44                 retn
.text$mn:00004B44 ??0_Iterator_base12@std@@QAE@XZ endp
.text$mn:00004B44
.text$mn:00004B44 ; ---------------------------------------------------------------------------
.text$mn:00004B45                 align 4
.text$mn:00004B45 _text$mn        ends
.text$mn:00004B45
.text$mn:00004B48 ; ===========================================================================
.text$mn:00004B48
.text$mn:00004B48 ; Segment type: Pure code
.text$mn:00004B48 ; Segment permissions: Read/Execute
.text$mn:00004B48 _text$mn        segment para public 'CODE' use32
.text$mn:00004B48                 assume cs:_text$mn
.text$mn:00004B48                 ;org 4B48h
.text$mn:00004B48 ; COMDAT (pick any)
.text$mn:00004B48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B48
.text$mn:00004B48 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B48
.text$mn:00004B48 ; Attributes: bp-based frame
.text$mn:00004B48
.text$mn:00004B48 ; _DWORD __thiscall std::_System_error_category::_System_error_category(std::_System_error_category *__hidden this)
.text$mn:00004B48                 public ??0_System_error_category@std@@QAE@XZ
.text$mn:00004B48 ??0_System_error_category@std@@QAE@XZ proc near
.text$mn:00004B48                                         ; CODE XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:00004B48
.text$mn:00004B48 var_10          = dword ptr -10h
.text$mn:00004B48 var_C           = dword ptr -0Ch
.text$mn:00004B48 var_4           = dword ptr -4
.text$mn:00004B48
.text$mn:00004B48                 push    ebp
.text$mn:00004B49                 mov     ebp, esp
.text$mn:00004B4B                 push    0FFFFFFFFh
.text$mn:00004B4D                 push    offset __ehhandler$??0_System_error_category@std@@QAE@XZ
.text$mn:00004B52                 mov     eax, large fs:0
.text$mn:00004B58                 push    eax
.text$mn:00004B59                 push    ecx
.text$mn:00004B5A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004B5F                 xor     eax, ebp
.text$mn:00004B61                 push    eax
.text$mn:00004B62                 lea     eax, [ebp+var_C]
.text$mn:00004B65                 mov     large fs:0, eax
.text$mn:00004B6B                 mov     [ebp+var_10], ecx
.text$mn:00004B6E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004B71                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:00004B76                 mov     [ebp+var_4], 0
.text$mn:00004B7D                 mov     eax, [ebp+var_10]
.text$mn:00004B80                 mov     dword ptr [eax], offset ??_7_System_error_category@std@@6B@ ; const std::_System_error_category::`vftable'
.text$mn:00004B86                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004B8D                 mov     eax, [ebp+var_10]
.text$mn:00004B90                 mov     ecx, [ebp+var_C]
.text$mn:00004B93                 mov     large fs:0, ecx
.text$mn:00004B9A                 pop     ecx
.text$mn:00004B9B                 mov     esp, ebp
.text$mn:00004B9D                 pop     ebp
.text$mn:00004B9E                 retn
.text$mn:00004B9E ??0_System_error_category@std@@QAE@XZ endp
.text$mn:00004B9E
.text$mn:00004B9E ; ---------------------------------------------------------------------------
.text$mn:00004B9F                 align 10h
.text$mn:00004B9F _text$mn        ends
.text$mn:00004B9F
.text$x:00004BA0 ; ===========================================================================
.text$x:00004BA0
.text$x:00004BA0 ; Segment type: Pure code
.text$x:00004BA0 ; Segment permissions: Read/Execute
.text$x:00004BA0 _text$x         segment para public 'CODE' use32
.text$x:00004BA0                 assume cs:_text$x
.text$x:00004BA0                 ;org 4BA0h
.text$x:00004BA0 ; COMDAT (pick associative to section at 4B48)
.text$x:00004BA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004BA0
.text$x:00004BA0 ; =============== S U B R O U T I N E =======================================
.text$x:00004BA0
.text$x:00004BA0
.text$x:00004BA0 __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 proc near
.text$x:00004BA0                                         ; DATA XREF: .xdata$x:000088C8o
.text$x:00004BA0                 mov     ecx, [ebp-10h]  ; this
.text$x:00004BA3                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00004BA3 __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 endp
.text$x:00004BA3
.text$x:00004BA8
.text$x:00004BA8 ; =============== S U B R O U T I N E =======================================
.text$x:00004BA8
.text$x:00004BA8
.text$x:00004BA8 __ehhandler$??0_System_error_category@std@@QAE@XZ proc near
.text$x:00004BA8                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+5o
.text$x:00004BA8
.text$x:00004BA8 arg_4           = dword ptr  8
.text$x:00004BA8
.text$x:00004BA8                 mov     edx, [esp+arg_4]
.text$x:00004BAC                 lea     eax, [edx+0Ch]
.text$x:00004BAF                 mov     ecx, [edx-8]
.text$x:00004BB2                 xor     ecx, eax
.text$x:00004BB4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004BB9                 mov     eax, offset __ehfuncinfo$??0_System_error_category@std@@QAE@XZ
.text$x:00004BBE                 jmp     ___CxxFrameHandler3
.text$x:00004BBE __ehhandler$??0_System_error_category@std@@QAE@XZ endp
.text$x:00004BBE
.text$x:00004BBE ; ---------------------------------------------------------------------------
.text$x:00004BC3                 align 4
.text$x:00004BC3 _text$x         ends
.text$x:00004BC3
.text$mn:00004BC4 ; ===========================================================================
.text$mn:00004BC4
.text$mn:00004BC4 ; Segment type: Pure code
.text$mn:00004BC4 ; Segment permissions: Read/Execute
.text$mn:00004BC4 _text$mn        segment para public 'CODE' use32
.text$mn:00004BC4                 assume cs:_text$mn
.text$mn:00004BC4                 ;org 4BC4h
.text$mn:00004BC4 ; COMDAT (pick any)
.text$mn:00004BC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004BC4
.text$mn:00004BC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00004BC4
.text$mn:00004BC4 ; Attributes: bp-based frame
.text$mn:00004BC4
.text$mn:00004BC4 ; _DWORD __thiscall std::error_category::error_category(std::error_category *__hidden this)
.text$mn:00004BC4                 public ??0error_category@std@@QAE@XZ
.text$mn:00004BC4 ??0error_category@std@@QAE@XZ proc near ; CODE XREF: std::_Generic_error_category::_Generic_error_category(void)+29p
.text$mn:00004BC4
.text$mn:00004BC4 var_4           = dword ptr -4
.text$mn:00004BC4
.text$mn:00004BC4                 push    ebp
.text$mn:00004BC5                 mov     ebp, esp
.text$mn:00004BC7                 push    ecx
.text$mn:00004BC8                 mov     [ebp+var_4], ecx
.text$mn:00004BCB                 mov     eax, [ebp+var_4]
.text$mn:00004BCE                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00004BD4                 mov     eax, [ebp+var_4]
.text$mn:00004BD7                 mov     esp, ebp
.text$mn:00004BD9                 pop     ebp
.text$mn:00004BDA                 retn
.text$mn:00004BDA ??0error_category@std@@QAE@XZ endp
.text$mn:00004BDA
.text$mn:00004BDA ; ---------------------------------------------------------------------------
.text$mn:00004BDB                 align 4
.text$mn:00004BDB _text$mn        ends
.text$mn:00004BDB
.text$mn:00004BDC ; ===========================================================================
.text$mn:00004BDC
.text$mn:00004BDC ; Segment type: Pure code
.text$mn:00004BDC ; Segment permissions: Read/Execute
.text$mn:00004BDC _text$mn        segment para public 'CODE' use32
.text$mn:00004BDC                 assume cs:_text$mn
.text$mn:00004BDC                 ;org 4BDCh
.text$mn:00004BDC ; COMDAT (pick any)
.text$mn:00004BDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004BDC
.text$mn:00004BDC ; =============== S U B R O U T I N E =======================================
.text$mn:00004BDC
.text$mn:00004BDC ; Attributes: bp-based frame
.text$mn:00004BDC
.text$mn:00004BDC ; _DWORD __thiscall std::error_condition::error_condition(std::error_condition *this, int, const struct std::error_category *)
.text$mn:00004BDC                 public ??0error_condition@std@@QAE@HABVerror_category@1@@Z
.text$mn:00004BDC ??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
.text$mn:00004BDC                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+24p
.text$mn:00004BDC                                         ; std::_System_error_category::default_error_condition(int)+3Dp ...
.text$mn:00004BDC
.text$mn:00004BDC var_4           = dword ptr -4
.text$mn:00004BDC arg_0           = dword ptr  8
.text$mn:00004BDC arg_4           = dword ptr  0Ch
.text$mn:00004BDC
.text$mn:00004BDC                 push    ebp
.text$mn:00004BDD                 mov     ebp, esp
.text$mn:00004BDF                 push    ecx
.text$mn:00004BE0                 mov     [ebp+var_4], ecx
.text$mn:00004BE3                 mov     eax, [ebp+var_4]
.text$mn:00004BE6                 mov     ecx, [ebp+arg_0]
.text$mn:00004BE9                 mov     [eax], ecx
.text$mn:00004BEB                 mov     edx, [ebp+var_4]
.text$mn:00004BEE                 mov     eax, [ebp+arg_4]
.text$mn:00004BF1                 mov     [edx+4], eax
.text$mn:00004BF4                 mov     eax, [ebp+var_4]
.text$mn:00004BF7                 mov     esp, ebp
.text$mn:00004BF9                 pop     ebp
.text$mn:00004BFA                 retn    8
.text$mn:00004BFA ??0error_condition@std@@QAE@HABVerror_category@1@@Z endp
.text$mn:00004BFA
.text$mn:00004BFA ; ---------------------------------------------------------------------------
.text$mn:00004BFD                 align 10h
.text$mn:00004BFD _text$mn        ends
.text$mn:00004BFD
.text$mn:00004C00 ; ===========================================================================
.text$mn:00004C00
.text$mn:00004C00 ; Segment type: Pure code
.text$mn:00004C00 ; Segment permissions: Read/Execute
.text$mn:00004C00 _text$mn        segment para public 'CODE' use32
.text$mn:00004C00                 assume cs:_text$mn
.text$mn:00004C00                 ;org 4C00h
.text$mn:00004C00 ; COMDAT (pick any)
.text$mn:00004C00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C00
.text$mn:00004C00 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C00
.text$mn:00004C00 ; Attributes: bp-based frame
.text$mn:00004C00
.text$mn:00004C00 ; _DWORD __thiscall std::locale::id::id(std::locale::id *this, unsigned int)
.text$mn:00004C00                 public ??0id@locale@std@@QAE@I@Z
.text$mn:00004C00 ??0id@locale@std@@QAE@I@Z proc near     ; CODE XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+Ap
.text$mn:00004C00                                         ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+Ap ...
.text$mn:00004C00
.text$mn:00004C00 var_4           = dword ptr -4
.text$mn:00004C00 arg_0           = dword ptr  8
.text$mn:00004C00
.text$mn:00004C00                 push    ebp
.text$mn:00004C01                 mov     ebp, esp
.text$mn:00004C03                 push    ecx
.text$mn:00004C04                 mov     [ebp+var_4], ecx
.text$mn:00004C07                 mov     eax, [ebp+var_4]
.text$mn:00004C0A                 mov     ecx, [ebp+arg_0]
.text$mn:00004C0D                 mov     [eax], ecx
.text$mn:00004C0F                 mov     eax, [ebp+var_4]
.text$mn:00004C12                 mov     esp, ebp
.text$mn:00004C14                 pop     ebp
.text$mn:00004C15                 retn    4
.text$mn:00004C15 ??0id@locale@std@@QAE@I@Z endp
.text$mn:00004C15
.text$mn:00004C15 _text$mn        ends
.text$mn:00004C15
.text$mn:00004C18 ; ===========================================================================
.text$mn:00004C18
.text$mn:00004C18 ; Segment type: Pure code
.text$mn:00004C18 ; Segment permissions: Read/Execute
.text$mn:00004C18 _text$mn        segment para public 'CODE' use32
.text$mn:00004C18                 assume cs:_text$mn
.text$mn:00004C18                 ;org 4C18h
.text$mn:00004C18 ; COMDAT (pick any)
.text$mn:00004C18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C18
.text$mn:00004C18 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C18
.text$mn:00004C18 ; Attributes: bp-based frame
.text$mn:00004C18
.text$mn:00004C18 ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, struct tTbData *, int, struct tTbData * const *, struct tTbData * const &, struct std::_Iterator_base12>::~_Iterator012<struct std::random_access_iterator_tag, struct tTbData *, int, struct tTbData * const *, struct tTbData * const &, struct std::_Iterator_base12>(void)
.text$mn:00004C18                 public ??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00004C18 ??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00004C18                                         ; CODE XREF: __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z$0+3j
.text$mn:00004C18                                         ; __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z$0+3j ...
.text$mn:00004C18
.text$mn:00004C18 var_10          = dword ptr -10h
.text$mn:00004C18 var_C           = dword ptr -0Ch
.text$mn:00004C18 var_4           = dword ptr -4
.text$mn:00004C18
.text$mn:00004C18                 push    ebp
.text$mn:00004C19                 mov     ebp, esp
.text$mn:00004C1B                 push    0FFFFFFFFh
.text$mn:00004C1D                 push    offset __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00004C22                 mov     eax, large fs:0
.text$mn:00004C28                 push    eax
.text$mn:00004C29                 push    ecx
.text$mn:00004C2A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004C2F                 xor     eax, ebp
.text$mn:00004C31                 push    eax
.text$mn:00004C32                 lea     eax, [ebp+var_C]
.text$mn:00004C35                 mov     large fs:0, eax
.text$mn:00004C3B                 mov     [ebp+var_10], ecx
.text$mn:00004C3E                 mov     [ebp+var_4], 0
.text$mn:00004C45                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004C4C                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004C4F                 call    ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$mn:00004C54                 mov     ecx, [ebp+var_C]
.text$mn:00004C57                 mov     large fs:0, ecx
.text$mn:00004C5E                 pop     ecx
.text$mn:00004C5F                 mov     esp, ebp
.text$mn:00004C61                 pop     ebp
.text$mn:00004C62                 retn
.text$mn:00004C62 ??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00004C62
.text$mn:00004C62 ; ---------------------------------------------------------------------------
.text$mn:00004C63                 align 4
.text$mn:00004C63 _text$mn        ends
.text$mn:00004C63
.text$x:00004C64 ; ===========================================================================
.text$x:00004C64
.text$x:00004C64 ; Segment type: Pure code
.text$x:00004C64 ; Segment permissions: Read/Execute
.text$x:00004C64 _text$x         segment para public 'CODE' use32
.text$x:00004C64                 assume cs:_text$x
.text$x:00004C64                 ;org 4C64h
.text$x:00004C64 ; COMDAT (pick associative to section at 4C18)
.text$x:00004C64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004C64
.text$x:00004C64 ; =============== S U B R O U T I N E =======================================
.text$x:00004C64
.text$x:00004C64
.text$x:00004C64 __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00004C64                                         ; DATA XREF: .xdata$x:00008F58o
.text$x:00004C64                 mov     ecx, [ebp-10h]  ; this
.text$x:00004C67                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00004C67 __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:00004C67
.text$x:00004C6C
.text$x:00004C6C ; =============== S U B R O U T I N E =======================================
.text$x:00004C6C
.text$x:00004C6C
.text$x:00004C6C __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00004C6C                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>(void)+5o
.text$x:00004C6C
.text$x:00004C6C arg_4           = dword ptr  8
.text$x:00004C6C
.text$x:00004C6C                 mov     edx, [esp+arg_4]
.text$x:00004C70                 lea     eax, [edx+0Ch]
.text$x:00004C73                 mov     ecx, [edx-8]
.text$x:00004C76                 xor     ecx, eax
.text$x:00004C78                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004C7D                 mov     eax, offset __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ
.text$x:00004C82                 jmp     ___CxxFrameHandler3
.text$x:00004C82 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00004C82
.text$x:00004C82 ; ---------------------------------------------------------------------------
.text$x:00004C87                 align 4
.text$x:00004C87 _text$x         ends
.text$x:00004C87
.text$mn:00004C88 ; ===========================================================================
.text$mn:00004C88
.text$mn:00004C88 ; Segment type: Pure code
.text$mn:00004C88 ; Segment permissions: Read/Execute
.text$mn:00004C88 _text$mn        segment para public 'CODE' use32
.text$mn:00004C88                 assume cs:_text$mn
.text$mn:00004C88                 ;org 4C88h
.text$mn:00004C88 ; COMDAT (pick any)
.text$mn:00004C88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C88
.text$mn:00004C88 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C88
.text$mn:00004C88 ; Attributes: bp-based frame
.text$mn:00004C88
.text$mn:00004C88 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::~_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(void)
.text$mn:00004C88                 public ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:00004C88 ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00004C88                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0+3j
.text$mn:00004C88                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+43p ...
.text$mn:00004C88
.text$mn:00004C88 var_10          = dword ptr -10h
.text$mn:00004C88 var_C           = dword ptr -0Ch
.text$mn:00004C88 var_4           = dword ptr -4
.text$mn:00004C88
.text$mn:00004C88                 push    ebp
.text$mn:00004C89                 mov     ebp, esp
.text$mn:00004C8B                 push    0FFFFFFFFh
.text$mn:00004C8D                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:00004C92                 mov     eax, large fs:0
.text$mn:00004C98                 push    eax
.text$mn:00004C99                 push    ecx
.text$mn:00004C9A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004C9F                 xor     eax, ebp
.text$mn:00004CA1                 push    eax
.text$mn:00004CA2                 lea     eax, [ebp+var_C]
.text$mn:00004CA5                 mov     large fs:0, eax
.text$mn:00004CAB                 mov     [ebp+var_10], ecx
.text$mn:00004CAE                 mov     [ebp+var_4], 0
.text$mn:00004CB5                 mov     ecx, [ebp+var_10]
.text$mn:00004CB8                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)
.text$mn:00004CBD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004CC4                 mov     ecx, [ebp+var_10]
.text$mn:00004CC7                 call    ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$mn:00004CCC                 mov     ecx, [ebp+var_C]
.text$mn:00004CCF                 mov     large fs:0, ecx
.text$mn:00004CD6                 pop     ecx
.text$mn:00004CD7                 mov     esp, ebp
.text$mn:00004CD9                 pop     ebp
.text$mn:00004CDA                 retn
.text$mn:00004CDA ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$mn:00004CDA
.text$mn:00004CDA ; ---------------------------------------------------------------------------
.text$mn:00004CDB                 align 4
.text$mn:00004CDB _text$mn        ends
.text$mn:00004CDB
.text$x:00004CDC ; ===========================================================================
.text$x:00004CDC
.text$x:00004CDC ; Segment type: Pure code
.text$x:00004CDC ; Segment permissions: Read/Execute
.text$x:00004CDC _text$x         segment para public 'CODE' use32
.text$x:00004CDC                 assume cs:_text$x
.text$x:00004CDC                 ;org 4CDCh
.text$x:00004CDC ; COMDAT (pick associative to section at 4C88)
.text$x:00004CDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004CDC
.text$x:00004CDC ; =============== S U B R O U T I N E =======================================
.text$x:00004CDC
.text$x:00004CDC
.text$x:00004CDC __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00004CDC                                         ; DATA XREF: .xdata$x:00008658o
.text$x:00004CDC                 mov     ecx, [ebp-10h]
.text$x:00004CDF                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:00004CDF __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00004CDF
.text$x:00004CE4
.text$x:00004CE4 ; =============== S U B R O U T I N E =======================================
.text$x:00004CE4
.text$x:00004CE4
.text$x:00004CE4 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$x:00004CE4                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+5o
.text$x:00004CE4
.text$x:00004CE4 arg_4           = dword ptr  8
.text$x:00004CE4
.text$x:00004CE4                 mov     edx, [esp+arg_4]
.text$x:00004CE8                 lea     eax, [edx+0Ch]
.text$x:00004CEB                 mov     ecx, [edx-8]
.text$x:00004CEE                 xor     ecx, eax
.text$x:00004CF0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004CF5                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$x:00004CFA                 jmp     ___CxxFrameHandler3
.text$x:00004CFA __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$x:00004CFA
.text$x:00004CFA ; ---------------------------------------------------------------------------
.text$x:00004CFF                 align 10h
.text$x:00004CFF _text$x         ends
.text$x:00004CFF
.text$mn:00004D00 ; ===========================================================================
.text$mn:00004D00
.text$mn:00004D00 ; Segment type: Pure code
.text$mn:00004D00 ; Segment permissions: Read/Execute
.text$mn:00004D00 _text$mn        segment para public 'CODE' use32
.text$mn:00004D00                 assume cs:_text$mn
.text$mn:00004D00                 ;org 4D00h
.text$mn:00004D00 ; COMDAT (pick any)
.text$mn:00004D00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D00
.text$mn:00004D00 ; =============== S U B R O U T I N E =======================================
.text$mn:00004D00
.text$mn:00004D00 ; Attributes: bp-based frame
.text$mn:00004D00
.text$mn:00004D00 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::~_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(void)
.text$mn:00004D00                 public ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00004D00 ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00004D00                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0+3j
.text$mn:00004D00                                         ; __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0+3j ...
.text$mn:00004D00
.text$mn:00004D00 var_10          = dword ptr -10h
.text$mn:00004D00 var_C           = dword ptr -0Ch
.text$mn:00004D00 var_4           = dword ptr -4
.text$mn:00004D00
.text$mn:00004D00                 push    ebp
.text$mn:00004D01                 mov     ebp, esp
.text$mn:00004D03                 push    0FFFFFFFFh
.text$mn:00004D05                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00004D0A                 mov     eax, large fs:0
.text$mn:00004D10                 push    eax
.text$mn:00004D11                 push    ecx
.text$mn:00004D12                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004D17                 xor     eax, ebp
.text$mn:00004D19                 push    eax
.text$mn:00004D1A                 lea     eax, [ebp+var_C]
.text$mn:00004D1D                 mov     large fs:0, eax
.text$mn:00004D23                 mov     [ebp+var_10], ecx
.text$mn:00004D26                 mov     [ebp+var_4], 0
.text$mn:00004D2D                 mov     ecx, [ebp+var_10]
.text$mn:00004D30                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:00004D35                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004D3C                 mov     ecx, [ebp+var_10]
.text$mn:00004D3F                 call    ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:00004D44                 mov     ecx, [ebp+var_C]
.text$mn:00004D47                 mov     large fs:0, ecx
.text$mn:00004D4E                 pop     ecx
.text$mn:00004D4F                 mov     esp, ebp
.text$mn:00004D51                 pop     ebp
.text$mn:00004D52                 retn
.text$mn:00004D52 ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:00004D52
.text$mn:00004D52 ; ---------------------------------------------------------------------------
.text$mn:00004D53                 align 4
.text$mn:00004D53 _text$mn        ends
.text$mn:00004D53
.text$x:00004D54 ; ===========================================================================
.text$x:00004D54
.text$x:00004D54 ; Segment type: Pure code
.text$x:00004D54 ; Segment permissions: Read/Execute
.text$x:00004D54 _text$x         segment para public 'CODE' use32
.text$x:00004D54                 assume cs:_text$x
.text$x:00004D54                 ;org 4D54h
.text$x:00004D54 ; COMDAT (pick associative to section at 4D00)
.text$x:00004D54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004D54
.text$x:00004D54 ; =============== S U B R O U T I N E =======================================
.text$x:00004D54
.text$x:00004D54
.text$x:00004D54 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00004D54                                         ; DATA XREF: .xdata$x:000089D0o
.text$x:00004D54                 mov     ecx, [ebp-10h]
.text$x:00004D57                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:00004D57 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00004D57
.text$x:00004D5C
.text$x:00004D5C ; =============== S U B R O U T I N E =======================================
.text$x:00004D5C
.text$x:00004D5C
.text$x:00004D5C __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:00004D5C                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+5o
.text$x:00004D5C
.text$x:00004D5C arg_4           = dword ptr  8
.text$x:00004D5C
.text$x:00004D5C                 mov     edx, [esp+arg_4]
.text$x:00004D60                 lea     eax, [edx+0Ch]
.text$x:00004D63                 mov     ecx, [edx-8]
.text$x:00004D66                 xor     ecx, eax
.text$x:00004D68                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004D6D                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$x:00004D72                 jmp     ___CxxFrameHandler3
.text$x:00004D72 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:00004D72
.text$x:00004D72 ; ---------------------------------------------------------------------------
.text$x:00004D77                 align 4
.text$x:00004D77 _text$x         ends
.text$x:00004D77
.text$mn:00004D78 ; ===========================================================================
.text$mn:00004D78
.text$mn:00004D78 ; Segment type: Pure code
.text$mn:00004D78 ; Segment permissions: Read/Execute
.text$mn:00004D78 _text$mn        segment para public 'CODE' use32
.text$mn:00004D78                 assume cs:_text$mn
.text$mn:00004D78                 ;org 4D78h
.text$mn:00004D78 ; COMDAT (pick any)
.text$mn:00004D78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D78
.text$mn:00004D78 ; =============== S U B R O U T I N E =======================================
.text$mn:00004D78
.text$mn:00004D78 ; Attributes: bp-based frame
.text$mn:00004D78
.text$mn:00004D78 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::~_String_val<struct std::_Simple_types<char>>(void)
.text$mn:00004D78                 public ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00004D78 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:00004D78                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0+3j
.text$mn:00004D78                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+3Fp ...
.text$mn:00004D78
.text$mn:00004D78 var_10          = dword ptr -10h
.text$mn:00004D78 var_C           = dword ptr -0Ch
.text$mn:00004D78 var_4           = dword ptr -4
.text$mn:00004D78
.text$mn:00004D78                 push    ebp
.text$mn:00004D79                 mov     ebp, esp
.text$mn:00004D7B                 push    0FFFFFFFFh
.text$mn:00004D7D                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00004D82                 mov     eax, large fs:0
.text$mn:00004D88                 push    eax
.text$mn:00004D89                 push    ecx
.text$mn:00004D8A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004D8F                 xor     eax, ebp
.text$mn:00004D91                 push    eax
.text$mn:00004D92                 lea     eax, [ebp+var_C]
.text$mn:00004D95                 mov     large fs:0, eax
.text$mn:00004D9B                 mov     [ebp+var_10], ecx
.text$mn:00004D9E                 mov     [ebp+var_4], 0
.text$mn:00004DA5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004DAC                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004DAF                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00004DB4                 mov     ecx, [ebp+var_C]
.text$mn:00004DB7                 mov     large fs:0, ecx
.text$mn:00004DBE                 pop     ecx
.text$mn:00004DBF                 mov     esp, ebp
.text$mn:00004DC1                 pop     ebp
.text$mn:00004DC2                 retn
.text$mn:00004DC2 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:00004DC2
.text$mn:00004DC2 ; ---------------------------------------------------------------------------
.text$mn:00004DC3                 align 4
.text$mn:00004DC3 _text$mn        ends
.text$mn:00004DC3
.text$x:00004DC4 ; ===========================================================================
.text$x:00004DC4
.text$x:00004DC4 ; Segment type: Pure code
.text$x:00004DC4 ; Segment permissions: Read/Execute
.text$x:00004DC4 _text$x         segment para public 'CODE' use32
.text$x:00004DC4                 assume cs:_text$x
.text$x:00004DC4                 ;org 4DC4h
.text$x:00004DC4 ; COMDAT (pick associative to section at 4D78)
.text$x:00004DC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004DC4
.text$x:00004DC4 ; =============== S U B R O U T I N E =======================================
.text$x:00004DC4
.text$x:00004DC4
.text$x:00004DC4 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:00004DC4                                         ; DATA XREF: .xdata$x:00008600o
.text$x:00004DC4                 mov     ecx, [ebp-10h]  ; this
.text$x:00004DC7                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00004DC7 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:00004DC7
.text$x:00004DCC
.text$x:00004DCC ; =============== S U B R O U T I N E =======================================
.text$x:00004DCC
.text$x:00004DCC
.text$x:00004DCC __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:00004DCC                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)+5o
.text$x:00004DCC
.text$x:00004DCC arg_4           = dword ptr  8
.text$x:00004DCC
.text$x:00004DCC                 mov     edx, [esp+arg_4]
.text$x:00004DD0                 lea     eax, [edx+0Ch]
.text$x:00004DD3                 mov     ecx, [edx-8]
.text$x:00004DD6                 xor     ecx, eax
.text$x:00004DD8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004DDD                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:00004DE2                 jmp     ___CxxFrameHandler3
.text$x:00004DE2 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:00004DE2
.text$x:00004DE2 ; ---------------------------------------------------------------------------
.text$x:00004DE7                 align 4
.text$x:00004DE7 _text$x         ends
.text$x:00004DE7
.text$mn:00004DE8 ; ===========================================================================
.text$mn:00004DE8
.text$mn:00004DE8 ; Segment type: Pure code
.text$mn:00004DE8 ; Segment permissions: Read/Execute
.text$mn:00004DE8 _text$mn        segment para public 'CODE' use32
.text$mn:00004DE8                 assume cs:_text$mn
.text$mn:00004DE8                 ;org 4DE8h
.text$mn:00004DE8 ; COMDAT (pick any)
.text$mn:00004DE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004DE8
.text$mn:00004DE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00004DE8
.text$mn:00004DE8 ; Attributes: bp-based frame
.text$mn:00004DE8
.text$mn:00004DE8 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::~_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:00004DE8                 public ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00004DE8 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:00004DE8                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0+3j
.text$mn:00004DE8                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+3Fp ...
.text$mn:00004DE8
.text$mn:00004DE8 var_10          = dword ptr -10h
.text$mn:00004DE8 var_C           = dword ptr -0Ch
.text$mn:00004DE8 var_4           = dword ptr -4
.text$mn:00004DE8
.text$mn:00004DE8                 push    ebp
.text$mn:00004DE9                 mov     ebp, esp
.text$mn:00004DEB                 push    0FFFFFFFFh
.text$mn:00004DED                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00004DF2                 mov     eax, large fs:0
.text$mn:00004DF8                 push    eax
.text$mn:00004DF9                 push    ecx
.text$mn:00004DFA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004DFF                 xor     eax, ebp
.text$mn:00004E01                 push    eax
.text$mn:00004E02                 lea     eax, [ebp+var_C]
.text$mn:00004E05                 mov     large fs:0, eax
.text$mn:00004E0B                 mov     [ebp+var_10], ecx
.text$mn:00004E0E                 mov     [ebp+var_4], 0
.text$mn:00004E15                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004E1C                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004E1F                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00004E24                 mov     ecx, [ebp+var_C]
.text$mn:00004E27                 mov     large fs:0, ecx
.text$mn:00004E2E                 pop     ecx
.text$mn:00004E2F                 mov     esp, ebp
.text$mn:00004E31                 pop     ebp
.text$mn:00004E32                 retn
.text$mn:00004E32 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:00004E32
.text$mn:00004E32 ; ---------------------------------------------------------------------------
.text$mn:00004E33                 align 4
.text$mn:00004E33 _text$mn        ends
.text$mn:00004E33
.text$x:00004E34 ; ===========================================================================
.text$x:00004E34
.text$x:00004E34 ; Segment type: Pure code
.text$x:00004E34 ; Segment permissions: Read/Execute
.text$x:00004E34 _text$x         segment para public 'CODE' use32
.text$x:00004E34                 assume cs:_text$x
.text$x:00004E34                 ;org 4E34h
.text$x:00004E34 ; COMDAT (pick associative to section at 4DE8)
.text$x:00004E34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004E34
.text$x:00004E34 ; =============== S U B R O U T I N E =======================================
.text$x:00004E34
.text$x:00004E34
.text$x:00004E34 __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00004E34                                         ; DATA XREF: .xdata$x:00008978o
.text$x:00004E34                 mov     ecx, [ebp-10h]  ; this
.text$x:00004E37                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00004E37 __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:00004E37
.text$x:00004E3C
.text$x:00004E3C ; =============== S U B R O U T I N E =======================================
.text$x:00004E3C
.text$x:00004E3C
.text$x:00004E3C __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:00004E3C                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:00004E3C
.text$x:00004E3C arg_4           = dword ptr  8
.text$x:00004E3C
.text$x:00004E3C                 mov     edx, [esp+arg_4]
.text$x:00004E40                 lea     eax, [edx+0Ch]
.text$x:00004E43                 mov     ecx, [edx-8]
.text$x:00004E46                 xor     ecx, eax
.text$x:00004E48                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E4D                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:00004E52                 jmp     ___CxxFrameHandler3
.text$x:00004E52 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:00004E52
.text$x:00004E52 ; ---------------------------------------------------------------------------
.text$x:00004E57                 align 4
.text$x:00004E57 _text$x         ends
.text$x:00004E57
.text$mn:00004E58 ; ===========================================================================
.text$mn:00004E58
.text$mn:00004E58 ; Segment type: Pure code
.text$mn:00004E58 ; Segment permissions: Read/Execute
.text$mn:00004E58 _text$mn        segment para public 'CODE' use32
.text$mn:00004E58                 assume cs:_text$mn
.text$mn:00004E58                 ;org 4E58h
.text$mn:00004E58 ; COMDAT (pick any)
.text$mn:00004E58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004E58
.text$mn:00004E58 ; =============== S U B R O U T I N E =======================================
.text$mn:00004E58
.text$mn:00004E58 ; Attributes: bp-based frame
.text$mn:00004E58
.text$mn:00004E58 ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct tTbData *, class std::allocator<struct tTbData *>>>::~_Vector_alloc<0, struct std::_Vec_base_types<struct tTbData *, class std::allocator<struct tTbData *>>>(void)
.text$mn:00004E58                 public ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@XZ
.text$mn:00004E58 ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00004E58                                         ; CODE XREF: __unwindfunclet$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@$$QAV01@@Z$0+3j
.text$mn:00004E58                                         ; __unwindfunclet$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ$0+3j ...
.text$mn:00004E58
.text$mn:00004E58 var_10          = dword ptr -10h
.text$mn:00004E58 var_C           = dword ptr -0Ch
.text$mn:00004E58 var_4           = dword ptr -4
.text$mn:00004E58
.text$mn:00004E58                 push    ebp
.text$mn:00004E59                 mov     ebp, esp
.text$mn:00004E5B                 push    0FFFFFFFFh
.text$mn:00004E5D                 push    offset __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@XZ
.text$mn:00004E62                 mov     eax, large fs:0
.text$mn:00004E68                 push    eax
.text$mn:00004E69                 push    ecx
.text$mn:00004E6A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004E6F                 xor     eax, ebp
.text$mn:00004E71                 push    eax
.text$mn:00004E72                 lea     eax, [ebp+var_C]
.text$mn:00004E75                 mov     large fs:0, eax
.text$mn:00004E7B                 mov     [ebp+var_10], ecx
.text$mn:00004E7E                 mov     [ebp+var_4], 0
.text$mn:00004E85                 mov     ecx, [ebp+var_10]
.text$mn:00004E88                 call    ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Free_proxy(void)
.text$mn:00004E8D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004E94                 mov     ecx, [ebp+var_10]
.text$mn:00004E97                 call    ??1?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<tTbData *>>::~_Vector_val<std::_Simple_types<tTbData *>>(void)
.text$mn:00004E9C                 mov     ecx, [ebp+var_C]
.text$mn:00004E9F                 mov     large fs:0, ecx
.text$mn:00004EA6                 pop     ecx
.text$mn:00004EA7                 mov     esp, ebp
.text$mn:00004EA9                 pop     ebp
.text$mn:00004EAA                 retn
.text$mn:00004EAA ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00004EAA
.text$mn:00004EAA ; ---------------------------------------------------------------------------
.text$mn:00004EAB                 align 4
.text$mn:00004EAB _text$mn        ends
.text$mn:00004EAB
.text$x:00004EAC ; ===========================================================================
.text$x:00004EAC
.text$x:00004EAC ; Segment type: Pure code
.text$x:00004EAC ; Segment permissions: Read/Execute
.text$x:00004EAC _text$x         segment para public 'CODE' use32
.text$x:00004EAC                 assume cs:_text$x
.text$x:00004EAC                 ;org 4EACh
.text$x:00004EAC ; COMDAT (pick associative to section at 4E58)
.text$x:00004EAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004EAC
.text$x:00004EAC ; =============== S U B R O U T I N E =======================================
.text$x:00004EAC
.text$x:00004EAC
.text$x:00004EAC __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00004EAC                                         ; DATA XREF: .xdata$x:00008D04o
.text$x:00004EAC                 mov     ecx, [ebp-10h]
.text$x:00004EAF                 jmp     ??1?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<tTbData *>>::~_Vector_val<std::_Simple_types<tTbData *>>(void)
.text$x:00004EAF __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00004EAF
.text$x:00004EB4
.text$x:00004EB4 ; =============== S U B R O U T I N E =======================================
.text$x:00004EB4
.text$x:00004EB4
.text$x:00004EB4 __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@XZ proc near
.text$x:00004EB4                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::~_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>(void)+5o
.text$x:00004EB4
.text$x:00004EB4 arg_4           = dword ptr  8
.text$x:00004EB4
.text$x:00004EB4                 mov     edx, [esp+arg_4]
.text$x:00004EB8                 lea     eax, [edx+0Ch]
.text$x:00004EBB                 mov     ecx, [edx-8]
.text$x:00004EBE                 xor     ecx, eax
.text$x:00004EC0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004EC5                 mov     eax, offset __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@XZ
.text$x:00004ECA                 jmp     ___CxxFrameHandler3
.text$x:00004ECA __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@XZ endp
.text$x:00004ECA
.text$x:00004ECA ; ---------------------------------------------------------------------------
.text$x:00004ECF                 align 10h
.text$x:00004ECF _text$x         ends
.text$x:00004ECF
.text$mn:00004ED0 ; ===========================================================================
.text$mn:00004ED0
.text$mn:00004ED0 ; Segment type: Pure code
.text$mn:00004ED0 ; Segment permissions: Read/Execute
.text$mn:00004ED0 _text$mn        segment para public 'CODE' use32
.text$mn:00004ED0                 assume cs:_text$mn
.text$mn:00004ED0                 ;org 4ED0h
.text$mn:00004ED0 ; COMDAT (pick any)
.text$mn:00004ED0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004ED0
.text$mn:00004ED0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004ED0
.text$mn:00004ED0 ; Attributes: bp-based frame
.text$mn:00004ED0
.text$mn:00004ED0 ; public: __thiscall std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct tTbData *>>>::~_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct tTbData *>>>(void)
.text$mn:00004ED0                 public ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ
.text$mn:00004ED0 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00004ED0                                         ; CODE XREF: __unwindfunclet$?removeToolbar@DockingCont@@QAEXUtTbData@@@Z$2+3j
.text$mn:00004ED0                                         ; __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z$0+3j ...
.text$mn:00004ED0
.text$mn:00004ED0 var_10          = dword ptr -10h
.text$mn:00004ED0 var_C           = dword ptr -0Ch
.text$mn:00004ED0 var_4           = dword ptr -4
.text$mn:00004ED0
.text$mn:00004ED0                 push    ebp
.text$mn:00004ED1                 mov     ebp, esp
.text$mn:00004ED3                 push    0FFFFFFFFh
.text$mn:00004ED5                 push    offset __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ
.text$mn:00004EDA                 mov     eax, large fs:0
.text$mn:00004EE0                 push    eax
.text$mn:00004EE1                 push    ecx
.text$mn:00004EE2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004EE7                 xor     eax, ebp
.text$mn:00004EE9                 push    eax
.text$mn:00004EEA                 lea     eax, [ebp+var_C]
.text$mn:00004EED                 mov     large fs:0, eax
.text$mn:00004EF3                 mov     [ebp+var_10], ecx
.text$mn:00004EF6                 mov     [ebp+var_4], 0
.text$mn:00004EFD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004F04                 mov     ecx, [ebp+var_10]
.text$mn:00004F07                 call    ??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>(void)
.text$mn:00004F0C                 mov     ecx, [ebp+var_C]
.text$mn:00004F0F                 mov     large fs:0, ecx
.text$mn:00004F16                 pop     ecx
.text$mn:00004F17                 mov     esp, ebp
.text$mn:00004F19                 pop     ebp
.text$mn:00004F1A                 retn
.text$mn:00004F1A ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00004F1A
.text$mn:00004F1A ; ---------------------------------------------------------------------------
.text$mn:00004F1B                 align 4
.text$mn:00004F1B _text$mn        ends
.text$mn:00004F1B
.text$x:00004F1C ; ===========================================================================
.text$x:00004F1C
.text$x:00004F1C ; Segment type: Pure code
.text$x:00004F1C ; Segment permissions: Read/Execute
.text$x:00004F1C _text$x         segment para public 'CODE' use32
.text$x:00004F1C                 assume cs:_text$x
.text$x:00004F1C                 ;org 4F1Ch
.text$x:00004F1C ; COMDAT (pick associative to section at 4ED0)
.text$x:00004F1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004F1C
.text$x:00004F1C ; =============== S U B R O U T I N E =======================================
.text$x:00004F1C
.text$x:00004F1C
.text$x:00004F1C __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00004F1C                                         ; DATA XREF: .xdata$x:00008FDCo
.text$x:00004F1C                 mov     ecx, [ebp-10h]
.text$x:00004F1F                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,tTbData *,int,tTbData * const *,tTbData * const &,std::_Iterator_base12>(void)
.text$x:00004F1F __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00004F1F
.text$x:00004F24
.text$x:00004F24 ; =============== S U B R O U T I N E =======================================
.text$x:00004F24
.text$x:00004F24
.text$x:00004F24 __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ proc near
.text$x:00004F24                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)+5o
.text$x:00004F24
.text$x:00004F24 arg_4           = dword ptr  8
.text$x:00004F24
.text$x:00004F24                 mov     edx, [esp+arg_4]
.text$x:00004F28                 lea     eax, [edx+0Ch]
.text$x:00004F2B                 mov     ecx, [edx-8]
.text$x:00004F2E                 xor     ecx, eax
.text$x:00004F30                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F35                 mov     eax, offset __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ
.text$x:00004F3A                 jmp     ___CxxFrameHandler3
.text$x:00004F3A __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ endp
.text$x:00004F3A
.text$x:00004F3A ; ---------------------------------------------------------------------------
.text$x:00004F3F                 align 10h
.text$x:00004F3F _text$x         ends
.text$x:00004F3F
.text$mn:00004F40 ; ===========================================================================
.text$mn:00004F40
.text$mn:00004F40 ; Segment type: Pure code
.text$mn:00004F40 ; Segment permissions: Read/Execute
.text$mn:00004F40 _text$mn        segment para public 'CODE' use32
.text$mn:00004F40                 assume cs:_text$mn
.text$mn:00004F40                 ;org 4F40h
.text$mn:00004F40 ; COMDAT (pick any)
.text$mn:00004F40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004F40
.text$mn:00004F40 ; =============== S U B R O U T I N E =======================================
.text$mn:00004F40
.text$mn:00004F40 ; Attributes: bp-based frame
.text$mn:00004F40
.text$mn:00004F40 ; public: __thiscall std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<struct tTbData *>>>::~_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<struct tTbData *>>>(void)
.text$mn:00004F40                 public ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ
.text$mn:00004F40 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00004F40                                         ; CODE XREF: DockingCont::removeToolbar(tTbData)+E9p
.text$mn:00004F40                                         ; DockingCont::removeToolbar(tTbData)+128p ...
.text$mn:00004F40
.text$mn:00004F40 var_10          = dword ptr -10h
.text$mn:00004F40 var_C           = dword ptr -0Ch
.text$mn:00004F40 var_4           = dword ptr -4
.text$mn:00004F40
.text$mn:00004F40                 push    ebp
.text$mn:00004F41                 mov     ebp, esp
.text$mn:00004F43                 push    0FFFFFFFFh
.text$mn:00004F45                 push    offset __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ
.text$mn:00004F4A                 mov     eax, large fs:0
.text$mn:00004F50                 push    eax
.text$mn:00004F51                 push    ecx
.text$mn:00004F52                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004F57                 xor     eax, ebp
.text$mn:00004F59                 push    eax
.text$mn:00004F5A                 lea     eax, [ebp+var_C]
.text$mn:00004F5D                 mov     large fs:0, eax
.text$mn:00004F63                 mov     [ebp+var_10], ecx
.text$mn:00004F66                 mov     [ebp+var_4], 0
.text$mn:00004F6D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004F74                 mov     ecx, [ebp+var_10]
.text$mn:00004F77                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$mn:00004F7C                 mov     ecx, [ebp+var_C]
.text$mn:00004F7F                 mov     large fs:0, ecx
.text$mn:00004F86                 pop     ecx
.text$mn:00004F87                 mov     esp, ebp
.text$mn:00004F89                 pop     ebp
.text$mn:00004F8A                 retn
.text$mn:00004F8A ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00004F8A
.text$mn:00004F8A ; ---------------------------------------------------------------------------
.text$mn:00004F8B                 align 4
.text$mn:00004F8B _text$mn        ends
.text$mn:00004F8B
.text$x:00004F8C ; ===========================================================================
.text$x:00004F8C
.text$x:00004F8C ; Segment type: Pure code
.text$x:00004F8C ; Segment permissions: Read/Execute
.text$x:00004F8C _text$x         segment para public 'CODE' use32
.text$x:00004F8C                 assume cs:_text$x
.text$x:00004F8C                 ;org 4F8Ch
.text$x:00004F8C ; COMDAT (pick associative to section at 4F40)
.text$x:00004F8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004F8C
.text$x:00004F8C ; =============== S U B R O U T I N E =======================================
.text$x:00004F8C
.text$x:00004F8C
.text$x:00004F8C __unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00004F8C                                         ; DATA XREF: .xdata$x:00009094o
.text$x:00004F8C                 mov     ecx, [ebp-10h]
.text$x:00004F8F                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$x:00004F8F __unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00004F8F
.text$x:00004F94
.text$x:00004F94 ; =============== S U B R O U T I N E =======================================
.text$x:00004F94
.text$x:00004F94
.text$x:00004F94 __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ proc near
.text$x:00004F94                                         ; DATA XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)+5o
.text$x:00004F94
.text$x:00004F94 arg_4           = dword ptr  8
.text$x:00004F94
.text$x:00004F94                 mov     edx, [esp+arg_4]
.text$x:00004F98                 lea     eax, [edx+0Ch]
.text$x:00004F9B                 mov     ecx, [edx-8]
.text$x:00004F9E                 xor     ecx, eax
.text$x:00004FA0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004FA5                 mov     eax, offset __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ
.text$x:00004FAA                 jmp     ___CxxFrameHandler3
.text$x:00004FAA __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ endp
.text$x:00004FAA
.text$x:00004FAA ; ---------------------------------------------------------------------------
.text$x:00004FAF                 align 10h
.text$x:00004FAF _text$x         ends
.text$x:00004FAF
.text$mn:00004FB0 ; ===========================================================================
.text$mn:00004FB0
.text$mn:00004FB0 ; Segment type: Pure code
.text$mn:00004FB0 ; Segment permissions: Read/Execute
.text$mn:00004FB0 _text$mn        segment para public 'CODE' use32
.text$mn:00004FB0                 assume cs:_text$mn
.text$mn:00004FB0                 ;org 4FB0h
.text$mn:00004FB0 ; COMDAT (pick any)
.text$mn:00004FB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004FB0
.text$mn:00004FB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004FB0
.text$mn:00004FB0 ; Attributes: bp-based frame
.text$mn:00004FB0
.text$mn:00004FB0 ; public: __thiscall std::_Vector_val<struct std::_Simple_types<struct tTbData *>>::~_Vector_val<struct std::_Simple_types<struct tTbData *>>(void)
.text$mn:00004FB0                 public ??1?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ
.text$mn:00004FB0 ??1?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ proc near
.text$mn:00004FB0                                         ; CODE XREF: __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtTbData@@@1@@Z$0+3j
.text$mn:00004FB0                                         ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::~_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>(void)+3Fp ...
.text$mn:00004FB0
.text$mn:00004FB0 var_10          = dword ptr -10h
.text$mn:00004FB0 var_C           = dword ptr -0Ch
.text$mn:00004FB0 var_4           = dword ptr -4
.text$mn:00004FB0
.text$mn:00004FB0                 push    ebp
.text$mn:00004FB1                 mov     ebp, esp
.text$mn:00004FB3                 push    0FFFFFFFFh
.text$mn:00004FB5                 push    offset __ehhandler$??1?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ
.text$mn:00004FBA                 mov     eax, large fs:0
.text$mn:00004FC0                 push    eax
.text$mn:00004FC1                 push    ecx
.text$mn:00004FC2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004FC7                 xor     eax, ebp
.text$mn:00004FC9                 push    eax
.text$mn:00004FCA                 lea     eax, [ebp+var_C]
.text$mn:00004FCD                 mov     large fs:0, eax
.text$mn:00004FD3                 mov     [ebp+var_10], ecx
.text$mn:00004FD6                 mov     [ebp+var_4], 0
.text$mn:00004FDD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004FE4                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004FE7                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00004FEC                 mov     ecx, [ebp+var_C]
.text$mn:00004FEF                 mov     large fs:0, ecx
.text$mn:00004FF6                 pop     ecx
.text$mn:00004FF7                 mov     esp, ebp
.text$mn:00004FF9                 pop     ebp
.text$mn:00004FFA                 retn
.text$mn:00004FFA ??1?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ endp
.text$mn:00004FFA
.text$mn:00004FFA ; ---------------------------------------------------------------------------
.text$mn:00004FFB                 align 4
.text$mn:00004FFB _text$mn        ends
.text$mn:00004FFB
.text$x:00004FFC ; ===========================================================================
.text$x:00004FFC
.text$x:00004FFC ; Segment type: Pure code
.text$x:00004FFC ; Segment permissions: Read/Execute
.text$x:00004FFC _text$x         segment para public 'CODE' use32
.text$x:00004FFC                 assume cs:_text$x
.text$x:00004FFC                 ;org 4FFCh
.text$x:00004FFC ; COMDAT (pick associative to section at 4FB0)
.text$x:00004FFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004FFC
.text$x:00004FFC ; =============== S U B R O U T I N E =======================================
.text$x:00004FFC
.text$x:00004FFC
.text$x:00004FFC __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00004FFC                                         ; DATA XREF: .xdata$x:00008CACo
.text$x:00004FFC                 mov     ecx, [ebp-10h]  ; this
.text$x:00004FFF                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00004FFF __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ$0 endp
.text$x:00004FFF
.text$x:00005004
.text$x:00005004 ; =============== S U B R O U T I N E =======================================
.text$x:00005004
.text$x:00005004
.text$x:00005004 __ehhandler$??1?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ proc near
.text$x:00005004                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<tTbData *>>::~_Vector_val<std::_Simple_types<tTbData *>>(void)+5o
.text$x:00005004
.text$x:00005004 arg_4           = dword ptr  8
.text$x:00005004
.text$x:00005004                 mov     edx, [esp+arg_4]
.text$x:00005008                 lea     eax, [edx+0Ch]
.text$x:0000500B                 mov     ecx, [edx-8]
.text$x:0000500E                 xor     ecx, eax
.text$x:00005010                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005015                 mov     eax, offset __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ
.text$x:0000501A                 jmp     ___CxxFrameHandler3
.text$x:0000501A __ehhandler$??1?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ endp
.text$x:0000501A
.text$x:0000501A ; ---------------------------------------------------------------------------
.text$x:0000501F                 align 10h
.text$x:0000501F _text$x         ends
.text$x:0000501F
.text$mn:00005020 ; ===========================================================================
.text$mn:00005020
.text$mn:00005020 ; Segment type: Pure code
.text$mn:00005020 ; Segment permissions: Read/Execute
.text$mn:00005020 _text$mn        segment para public 'CODE' use32
.text$mn:00005020                 assume cs:_text$mn
.text$mn:00005020                 ;org 5020h
.text$mn:00005020 ; COMDAT (pick any)
.text$mn:00005020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005020
.text$mn:00005020 ; =============== S U B R O U T I N E =======================================
.text$mn:00005020
.text$mn:00005020 ; Attributes: bp-based frame
.text$mn:00005020
.text$mn:00005020 ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.text$mn:00005020                 public ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:00005020 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$mn:00005020                                         ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+13j
.text$mn:00005020                                         ; __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+13j ...
.text$mn:00005020
.text$mn:00005020 var_10          = dword ptr -10h
.text$mn:00005020 var_C           = dword ptr -0Ch
.text$mn:00005020 var_4           = dword ptr -4
.text$mn:00005020
.text$mn:00005020                 push    ebp
.text$mn:00005021                 mov     ebp, esp
.text$mn:00005023                 push    0FFFFFFFFh
.text$mn:00005025                 push    offset __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:0000502A                 mov     eax, large fs:0
.text$mn:00005030                 push    eax
.text$mn:00005031                 push    ecx
.text$mn:00005032                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005037                 xor     eax, ebp
.text$mn:00005039                 push    eax
.text$mn:0000503A                 lea     eax, [ebp+var_C]
.text$mn:0000503D                 mov     large fs:0, eax
.text$mn:00005043                 mov     [ebp+var_10], ecx
.text$mn:00005046                 mov     [ebp+var_4], 0
.text$mn:0000504D                 push    0               ; Size
.text$mn:0000504F                 push    1               ; char
.text$mn:00005051                 mov     ecx, [ebp+var_10]
.text$mn:00005054                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00005059                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005060                 mov     ecx, [ebp+var_10]
.text$mn:00005063                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$mn:00005068                 mov     ecx, [ebp+var_C]
.text$mn:0000506B                 mov     large fs:0, ecx
.text$mn:00005072                 pop     ecx
.text$mn:00005073                 mov     esp, ebp
.text$mn:00005075                 pop     ebp
.text$mn:00005076                 retn
.text$mn:00005076 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$mn:00005076
.text$mn:00005076 ; ---------------------------------------------------------------------------
.text$mn:00005077                 align 4
.text$mn:00005077 _text$mn        ends
.text$mn:00005077
.text$x:00005078 ; ===========================================================================
.text$x:00005078
.text$x:00005078 ; Segment type: Pure code
.text$x:00005078 ; Segment permissions: Read/Execute
.text$x:00005078 _text$x         segment para public 'CODE' use32
.text$x:00005078                 assume cs:_text$x
.text$x:00005078                 ;org 5078h
.text$x:00005078 ; COMDAT (pick associative to section at 5020)
.text$x:00005078                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005078
.text$x:00005078 ; =============== S U B R O U T I N E =======================================
.text$x:00005078
.text$x:00005078
.text$x:00005078 __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
.text$x:00005078                                         ; DATA XREF: .xdata$x:000086B0o
.text$x:00005078                 mov     ecx, [ebp-10h]
.text$x:0000507B                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:0000507B __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 endp
.text$x:0000507B
.text$x:00005080
.text$x:00005080 ; =============== S U B R O U T I N E =======================================
.text$x:00005080
.text$x:00005080
.text$x:00005080 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$x:00005080                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+5o
.text$x:00005080
.text$x:00005080 arg_4           = dword ptr  8
.text$x:00005080
.text$x:00005080                 mov     edx, [esp+arg_4]
.text$x:00005084                 lea     eax, [edx+0Ch]
.text$x:00005087                 mov     ecx, [edx-8]
.text$x:0000508A                 xor     ecx, eax
.text$x:0000508C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005091                 mov     eax, offset __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$x:00005096                 jmp     ___CxxFrameHandler3
.text$x:00005096 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$x:00005096
.text$x:00005096 ; ---------------------------------------------------------------------------
.text$x:0000509B                 align 4
.text$x:0000509B _text$x         ends
.text$x:0000509B
.text$mn:0000509C ; ===========================================================================
.text$mn:0000509C
.text$mn:0000509C ; Segment type: Pure code
.text$mn:0000509C ; Segment permissions: Read/Execute
.text$mn:0000509C _text$mn        segment para public 'CODE' use32
.text$mn:0000509C                 assume cs:_text$mn
.text$mn:0000509C                 ;org 509Ch
.text$mn:0000509C ; COMDAT (pick any)
.text$mn:0000509C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000509C
.text$mn:0000509C ; =============== S U B R O U T I N E =======================================
.text$mn:0000509C
.text$mn:0000509C ; Attributes: bp-based frame
.text$mn:0000509C
.text$mn:0000509C ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::~basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:0000509C                 public ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:0000509C ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:0000509C                                         ; CODE XREF: DockingCont::~DockingCont(void)+5Fp
.text$mn:0000509C                                         ; DockingCont::SelectTab(int)+2B2p ...
.text$mn:0000509C
.text$mn:0000509C var_10          = dword ptr -10h
.text$mn:0000509C var_C           = dword ptr -0Ch
.text$mn:0000509C var_4           = dword ptr -4
.text$mn:0000509C
.text$mn:0000509C                 push    ebp
.text$mn:0000509D                 mov     ebp, esp
.text$mn:0000509F                 push    0FFFFFFFFh
.text$mn:000050A1                 push    offset __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:000050A6                 mov     eax, large fs:0
.text$mn:000050AC                 push    eax
.text$mn:000050AD                 push    ecx
.text$mn:000050AE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000050B3                 xor     eax, ebp
.text$mn:000050B5                 push    eax
.text$mn:000050B6                 lea     eax, [ebp+var_C]
.text$mn:000050B9                 mov     large fs:0, eax
.text$mn:000050BF                 mov     [ebp+var_10], ecx
.text$mn:000050C2                 mov     [ebp+var_4], 0
.text$mn:000050C9                 push    0
.text$mn:000050CB                 push    1
.text$mn:000050CD                 mov     ecx, [ebp+var_10]
.text$mn:000050D0                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000050D5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000050DC                 mov     ecx, [ebp+var_10]
.text$mn:000050DF                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$mn:000050E4                 mov     ecx, [ebp+var_C]
.text$mn:000050E7                 mov     large fs:0, ecx
.text$mn:000050EE                 pop     ecx
.text$mn:000050EF                 mov     esp, ebp
.text$mn:000050F1                 pop     ebp
.text$mn:000050F2                 retn
.text$mn:000050F2 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:000050F2
.text$mn:000050F2 ; ---------------------------------------------------------------------------
.text$mn:000050F3                 align 4
.text$mn:000050F3 _text$mn        ends
.text$mn:000050F3
.text$x:000050F4 ; ===========================================================================
.text$x:000050F4
.text$x:000050F4 ; Segment type: Pure code
.text$x:000050F4 ; Segment permissions: Read/Execute
.text$x:000050F4 _text$x         segment para public 'CODE' use32
.text$x:000050F4                 assume cs:_text$x
.text$x:000050F4                 ;org 50F4h
.text$x:000050F4 ; COMDAT (pick associative to section at 509C)
.text$x:000050F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000050F4
.text$x:000050F4 ; =============== S U B R O U T I N E =======================================
.text$x:000050F4
.text$x:000050F4
.text$x:000050F4 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:000050F4                                         ; DATA XREF: .xdata$x:00008A54o
.text$x:000050F4                 mov     ecx, [ebp-10h]
.text$x:000050F7                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:000050F7 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:000050F7
.text$x:000050FC
.text$x:000050FC ; =============== S U B R O U T I N E =======================================
.text$x:000050FC
.text$x:000050FC
.text$x:000050FC __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:000050FC                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:000050FC
.text$x:000050FC arg_4           = dword ptr  8
.text$x:000050FC
.text$x:000050FC                 mov     edx, [esp+arg_4]
.text$x:00005100                 lea     eax, [edx+0Ch]
.text$x:00005103                 mov     ecx, [edx-8]
.text$x:00005106                 xor     ecx, eax
.text$x:00005108                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000510D                 mov     eax, offset __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:00005112                 jmp     ___CxxFrameHandler3
.text$x:00005112 __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:00005112
.text$x:00005112 ; ---------------------------------------------------------------------------
.text$x:00005117                 align 4
.text$x:00005117 _text$x         ends
.text$x:00005117
.text$mn:00005118 ; ===========================================================================
.text$mn:00005118
.text$mn:00005118 ; Segment type: Pure code
.text$mn:00005118 ; Segment permissions: Read/Execute
.text$mn:00005118 _text$mn        segment para public 'CODE' use32
.text$mn:00005118                 assume cs:_text$mn
.text$mn:00005118                 ;org 5118h
.text$mn:00005118 ; COMDAT (pick any)
.text$mn:00005118                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005118
.text$mn:00005118 ; =============== S U B R O U T I N E =======================================
.text$mn:00005118
.text$mn:00005118 ; Attributes: bp-based frame
.text$mn:00005118
.text$mn:00005118 ; public: __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::~vector<struct tTbData *, class std::allocator<struct tTbData *>>(void)
.text$mn:00005118                 public ??1?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ
.text$mn:00005118 ??1?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ proc near
.text$mn:00005118                                         ; CODE XREF: DockingCont::~DockingCont(void)+50p
.text$mn:00005118                                         ; DockingCont::getDataOfVisTb(void)+DDp ...
.text$mn:00005118
.text$mn:00005118 var_10          = dword ptr -10h
.text$mn:00005118 var_C           = dword ptr -0Ch
.text$mn:00005118 var_4           = dword ptr -4
.text$mn:00005118
.text$mn:00005118                 push    ebp
.text$mn:00005119                 mov     ebp, esp
.text$mn:0000511B                 push    0FFFFFFFFh
.text$mn:0000511D                 push    offset __ehhandler$??1?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ
.text$mn:00005122                 mov     eax, large fs:0
.text$mn:00005128                 push    eax
.text$mn:00005129                 push    ecx
.text$mn:0000512A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000512F                 xor     eax, ebp
.text$mn:00005131                 push    eax
.text$mn:00005132                 lea     eax, [ebp+var_C]
.text$mn:00005135                 mov     large fs:0, eax
.text$mn:0000513B                 mov     [ebp+var_10], ecx
.text$mn:0000513E                 mov     [ebp+var_4], 0
.text$mn:00005145                 mov     ecx, [ebp+var_10]
.text$mn:00005148                 call    ?_Tidy@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXXZ ; std::vector<tTbData *,std::allocator<tTbData *>>::_Tidy(void)
.text$mn:0000514D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005154                 mov     ecx, [ebp+var_10]
.text$mn:00005157                 call    ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::~_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>(void)
.text$mn:0000515C                 mov     ecx, [ebp+var_C]
.text$mn:0000515F                 mov     large fs:0, ecx
.text$mn:00005166                 pop     ecx
.text$mn:00005167                 mov     esp, ebp
.text$mn:00005169                 pop     ebp
.text$mn:0000516A                 retn
.text$mn:0000516A ??1?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ endp
.text$mn:0000516A
.text$mn:0000516A ; ---------------------------------------------------------------------------
.text$mn:0000516B                 align 4
.text$mn:0000516B _text$mn        ends
.text$mn:0000516B
.text$x:0000516C ; ===========================================================================
.text$x:0000516C
.text$x:0000516C ; Segment type: Pure code
.text$x:0000516C ; Segment permissions: Read/Execute
.text$x:0000516C _text$x         segment para public 'CODE' use32
.text$x:0000516C                 assume cs:_text$x
.text$x:0000516C                 ;org 516Ch
.text$x:0000516C ; COMDAT (pick associative to section at 5118)
.text$x:0000516C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000516C
.text$x:0000516C ; =============== S U B R O U T I N E =======================================
.text$x:0000516C
.text$x:0000516C
.text$x:0000516C __unwindfunclet$??1?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ$0 proc near
.text$x:0000516C                                         ; DATA XREF: .xdata$x:00008D88o
.text$x:0000516C                 mov     ecx, [ebp-10h]
.text$x:0000516F                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::~_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>(void)
.text$x:0000516F __unwindfunclet$??1?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ$0 endp
.text$x:0000516F
.text$x:00005174
.text$x:00005174 ; =============== S U B R O U T I N E =======================================
.text$x:00005174
.text$x:00005174
.text$x:00005174 __ehhandler$??1?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ proc near
.text$x:00005174                                         ; DATA XREF: std::vector<tTbData *,std::allocator<tTbData *>>::~vector<tTbData *,std::allocator<tTbData *>>(void)+5o
.text$x:00005174
.text$x:00005174 arg_4           = dword ptr  8
.text$x:00005174
.text$x:00005174                 mov     edx, [esp+arg_4]
.text$x:00005178                 lea     eax, [edx+0Ch]
.text$x:0000517B                 mov     ecx, [edx-8]
.text$x:0000517E                 xor     ecx, eax
.text$x:00005180                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005185                 mov     eax, offset __ehfuncinfo$??1?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ
.text$x:0000518A                 jmp     ___CxxFrameHandler3
.text$x:0000518A __ehhandler$??1?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ endp
.text$x:0000518A
.text$x:0000518A ; ---------------------------------------------------------------------------
.text$x:0000518F                 align 10h
.text$x:0000518F _text$x         ends
.text$x:0000518F
.text$mn:00005190 ; ===========================================================================
.text$mn:00005190
.text$mn:00005190 ; Segment type: Pure code
.text$mn:00005190 ; Segment permissions: Read/Execute
.text$mn:00005190 _text$mn        segment para public 'CODE' use32
.text$mn:00005190                 assume cs:_text$mn
.text$mn:00005190                 ;org 5190h
.text$mn:00005190 ; COMDAT (pick any)
.text$mn:00005190                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005190
.text$mn:00005190 ; =============== S U B R O U T I N E =======================================
.text$mn:00005190
.text$mn:00005190 ; Attributes: bp-based frame
.text$mn:00005190
.text$mn:00005190 ; _DWORD __thiscall StaticDialog::~StaticDialog(StaticDialog *__hidden this)
.text$mn:00005190                 public ??1StaticDialog@@UAE@XZ
.text$mn:00005190 ??1StaticDialog@@UAE@XZ proc near       ; CODE XREF: DockingCont::~DockingCont(void)+6Ep
.text$mn:00005190                                         ; __unwindfunclet$??0DockingCont@@QAE@XZ$0+3j ...
.text$mn:00005190
.text$mn:00005190 var_10          = dword ptr -10h
.text$mn:00005190 var_C           = dword ptr -0Ch
.text$mn:00005190 var_4           = dword ptr -4
.text$mn:00005190
.text$mn:00005190                 push    ebp
.text$mn:00005191                 mov     ebp, esp
.text$mn:00005193                 push    0FFFFFFFFh
.text$mn:00005195                 push    offset __ehhandler$??1StaticDialog@@UAE@XZ
.text$mn:0000519A                 mov     eax, large fs:0
.text$mn:000051A0                 push    eax
.text$mn:000051A1                 push    ecx
.text$mn:000051A2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000051A7                 xor     eax, ebp
.text$mn:000051A9                 push    eax
.text$mn:000051AA                 lea     eax, [ebp+var_C]
.text$mn:000051AD                 mov     large fs:0, eax
.text$mn:000051B3                 mov     [ebp+var_10], ecx
.text$mn:000051B6                 mov     eax, [ebp+var_10]
.text$mn:000051B9                 mov     dword ptr [eax], offset ??_7StaticDialog@@6B@ ; const StaticDialog::`vftable'
.text$mn:000051BF                 mov     [ebp+var_4], 0
.text$mn:000051C6                 mov     ecx, [ebp+var_10] ; this
.text$mn:000051C9                 call    ?isCreated@StaticDialog@@UBE_NXZ ; StaticDialog::isCreated(void)
.text$mn:000051CE                 movzx   ecx, al
.text$mn:000051D1                 test    ecx, ecx
.text$mn:000051D3                 jz      short loc_51EE
.text$mn:000051D5                 push    0               ; dwNewLong
.text$mn:000051D7                 push    0FFFFFFEBh      ; nIndex
.text$mn:000051D9                 mov     edx, [ebp+var_10]
.text$mn:000051DC                 mov     eax, [edx+0Ch]
.text$mn:000051DF                 push    eax             ; hWnd
.text$mn:000051E0                 call    dword ptr ds:__imp__SetWindowLongW@12 ; SetWindowLongW(x,x,x)
.text$mn:000051E6                 mov     ecx, [ebp+var_10] ; this
.text$mn:000051E9                 call    ?destroy@StaticDialog@@UAEXXZ ; StaticDialog::destroy(void)
.text$mn:000051EE
.text$mn:000051EE loc_51EE:                               ; CODE XREF: StaticDialog::~StaticDialog(void)+43j
.text$mn:000051EE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000051F5                 mov     ecx, [ebp+var_10] ; this
.text$mn:000051F8                 call    ??1Window@@UAE@XZ ; Window::~Window(void)
.text$mn:000051FD                 mov     ecx, [ebp+var_C]
.text$mn:00005200                 mov     large fs:0, ecx
.text$mn:00005207                 pop     ecx
.text$mn:00005208                 mov     esp, ebp
.text$mn:0000520A                 pop     ebp
.text$mn:0000520B                 retn
.text$mn:0000520B ??1StaticDialog@@UAE@XZ endp
.text$mn:0000520B
.text$mn:0000520B _text$mn        ends
.text$mn:0000520B
.text$x:0000520C ; ===========================================================================
.text$x:0000520C
.text$x:0000520C ; Segment type: Pure code
.text$x:0000520C ; Segment permissions: Read/Execute
.text$x:0000520C _text$x         segment para public 'CODE' use32
.text$x:0000520C                 assume cs:_text$x
.text$x:0000520C                 ;org 520Ch
.text$x:0000520C ; COMDAT (pick associative to section at 5190)
.text$x:0000520C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000520C
.text$x:0000520C ; =============== S U B R O U T I N E =======================================
.text$x:0000520C
.text$x:0000520C
.text$x:0000520C __unwindfunclet$??1StaticDialog@@UAE@XZ$0 proc near
.text$x:0000520C                                         ; DATA XREF: .xdata$x:00008794o
.text$x:0000520C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000520F                 jmp     ??1Window@@UAE@XZ ; Window::~Window(void)
.text$x:0000520F __unwindfunclet$??1StaticDialog@@UAE@XZ$0 endp
.text$x:0000520F
.text$x:00005214
.text$x:00005214 ; =============== S U B R O U T I N E =======================================
.text$x:00005214
.text$x:00005214
.text$x:00005214 __ehhandler$??1StaticDialog@@UAE@XZ proc near
.text$x:00005214                                         ; DATA XREF: StaticDialog::~StaticDialog(void)+5o
.text$x:00005214
.text$x:00005214 arg_4           = dword ptr  8
.text$x:00005214
.text$x:00005214                 mov     edx, [esp+arg_4]
.text$x:00005218                 lea     eax, [edx+0Ch]
.text$x:0000521B                 mov     ecx, [edx-8]
.text$x:0000521E                 xor     ecx, eax
.text$x:00005220                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005225                 mov     eax, offset __ehfuncinfo$??1StaticDialog@@UAE@XZ
.text$x:0000522A                 jmp     ___CxxFrameHandler3
.text$x:0000522A __ehhandler$??1StaticDialog@@UAE@XZ endp
.text$x:0000522A
.text$x:0000522A ; ---------------------------------------------------------------------------
.text$x:0000522F                 align 10h
.text$x:0000522F _text$x         ends
.text$x:0000522F
.text$mn:00005230 ; ===========================================================================
.text$mn:00005230
.text$mn:00005230 ; Segment type: Pure code
.text$mn:00005230 ; Segment permissions: Read/Execute
.text$mn:00005230 _text$mn        segment para public 'CODE' use32
.text$mn:00005230                 assume cs:_text$mn
.text$mn:00005230                 ;org 5230h
.text$mn:00005230 ; COMDAT (pick any)
.text$mn:00005230                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005230
.text$mn:00005230 ; =============== S U B R O U T I N E =======================================
.text$mn:00005230
.text$mn:00005230 ; Attributes: bp-based frame
.text$mn:00005230
.text$mn:00005230 ; _DWORD __thiscall ToolTip::~ToolTip(ToolTip *__hidden this)
.text$mn:00005230                 public ??1ToolTip@@UAE@XZ
.text$mn:00005230 ??1ToolTip@@UAE@XZ proc near            ; CODE XREF: ToolTip::`scalar deleting destructor'(uint)+Ap
.text$mn:00005230                                         ; `DockingCont::runProcCaption(HWND__ *,uint,uint,long)'::`2'::`dynamic atexit destructor for 'toolTip''(void)+8p ...
.text$mn:00005230
.text$mn:00005230 var_10          = dword ptr -10h
.text$mn:00005230 var_C           = dword ptr -0Ch
.text$mn:00005230 var_4           = dword ptr -4
.text$mn:00005230
.text$mn:00005230                 push    ebp
.text$mn:00005231                 mov     ebp, esp
.text$mn:00005233                 push    0FFFFFFFFh
.text$mn:00005235                 push    offset __ehhandler$??1ToolTip@@UAE@XZ
.text$mn:0000523A                 mov     eax, large fs:0
.text$mn:00005240                 push    eax
.text$mn:00005241                 push    ecx
.text$mn:00005242                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005247                 xor     eax, ebp
.text$mn:00005249                 push    eax
.text$mn:0000524A                 lea     eax, [ebp+var_C]
.text$mn:0000524D                 mov     large fs:0, eax
.text$mn:00005253                 mov     [ebp+var_10], ecx
.text$mn:00005256                 mov     [ebp+var_4], 0
.text$mn:0000525D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005264                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005267                 call    ??1Window@@UAE@XZ ; Window::~Window(void)
.text$mn:0000526C                 mov     ecx, [ebp+var_C]
.text$mn:0000526F                 mov     large fs:0, ecx
.text$mn:00005276                 pop     ecx
.text$mn:00005277                 mov     esp, ebp
.text$mn:00005279                 pop     ebp
.text$mn:0000527A                 retn
.text$mn:0000527A ??1ToolTip@@UAE@XZ endp
.text$mn:0000527A
.text$mn:0000527A ; ---------------------------------------------------------------------------
.text$mn:0000527B                 align 4
.text$mn:0000527B _text$mn        ends
.text$mn:0000527B
.text$x:0000527C ; ===========================================================================
.text$x:0000527C
.text$x:0000527C ; Segment type: Pure code
.text$x:0000527C ; Segment permissions: Read/Execute
.text$x:0000527C _text$x         segment para public 'CODE' use32
.text$x:0000527C                 assume cs:_text$x
.text$x:0000527C                 ;org 527Ch
.text$x:0000527C ; COMDAT (pick associative to section at 5230)
.text$x:0000527C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000527C
.text$x:0000527C ; =============== S U B R O U T I N E =======================================
.text$x:0000527C
.text$x:0000527C
.text$x:0000527C __unwindfunclet$??1ToolTip@@UAE@XZ$0 proc near
.text$x:0000527C                                         ; DATA XREF: .xdata$x:00008F00o
.text$x:0000527C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000527F                 jmp     ??1Window@@UAE@XZ ; Window::~Window(void)
.text$x:0000527F __unwindfunclet$??1ToolTip@@UAE@XZ$0 endp
.text$x:0000527F
.text$x:00005284
.text$x:00005284 ; =============== S U B R O U T I N E =======================================
.text$x:00005284
.text$x:00005284
.text$x:00005284 __ehhandler$??1ToolTip@@UAE@XZ proc near
.text$x:00005284                                         ; DATA XREF: ToolTip::~ToolTip(void)+5o
.text$x:00005284
.text$x:00005284 arg_4           = dword ptr  8
.text$x:00005284
.text$x:00005284                 mov     edx, [esp+arg_4]
.text$x:00005288                 lea     eax, [edx+0Ch]
.text$x:0000528B                 mov     ecx, [edx-8]
.text$x:0000528E                 xor     ecx, eax
.text$x:00005290                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005295                 mov     eax, offset __ehfuncinfo$??1ToolTip@@UAE@XZ
.text$x:0000529A                 jmp     ___CxxFrameHandler3
.text$x:0000529A __ehhandler$??1ToolTip@@UAE@XZ endp
.text$x:0000529A
.text$x:0000529A ; ---------------------------------------------------------------------------
.text$x:0000529F                 align 10h
.text$x:0000529F _text$x         ends
.text$x:0000529F
.text$mn:000052A0 ; ===========================================================================
.text$mn:000052A0
.text$mn:000052A0 ; Segment type: Pure code
.text$mn:000052A0 ; Segment permissions: Read/Execute
.text$mn:000052A0 _text$mn        segment para public 'CODE' use32
.text$mn:000052A0                 assume cs:_text$mn
.text$mn:000052A0                 ;org 52A0h
.text$mn:000052A0 ; COMDAT (pick any)
.text$mn:000052A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000052A0
.text$mn:000052A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000052A0
.text$mn:000052A0 ; Attributes: bp-based frame
.text$mn:000052A0
.text$mn:000052A0 ; _DWORD __thiscall Window::~Window(Window *__hidden this)
.text$mn:000052A0                 public ??1Window@@UAE@XZ
.text$mn:000052A0 ??1Window@@UAE@XZ proc near             ; CODE XREF: __unwindfunclet$??0StaticDialog@@QAE@XZ$0+3j
.text$mn:000052A0                                         ; __unwindfunclet$??0ToolTip@@QAE@XZ$0+3j ...
.text$mn:000052A0
.text$mn:000052A0 var_4           = dword ptr -4
.text$mn:000052A0
.text$mn:000052A0                 push    ebp
.text$mn:000052A1                 mov     ebp, esp
.text$mn:000052A3                 push    ecx
.text$mn:000052A4                 mov     [ebp+var_4], ecx
.text$mn:000052A7                 mov     eax, [ebp+var_4]
.text$mn:000052AA                 mov     dword ptr [eax], offset ??_7Window@@6B@ ; const Window::`vftable'
.text$mn:000052B0                 mov     esp, ebp
.text$mn:000052B2                 pop     ebp
.text$mn:000052B3                 retn
.text$mn:000052B3 ??1Window@@UAE@XZ endp
.text$mn:000052B3
.text$mn:000052B3 _text$mn        ends
.text$mn:000052B3
.text$mn:000052B4 ; ===========================================================================
.text$mn:000052B4
.text$mn:000052B4 ; Segment type: Pure code
.text$mn:000052B4 ; Segment permissions: Read/Execute
.text$mn:000052B4 _text$mn        segment para public 'CODE' use32
.text$mn:000052B4                 assume cs:_text$mn
.text$mn:000052B4                 ;org 52B4h
.text$mn:000052B4 ; COMDAT (pick any)
.text$mn:000052B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000052B4
.text$mn:000052B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000052B4
.text$mn:000052B4 ; Attributes: bp-based frame
.text$mn:000052B4
.text$mn:000052B4 ; _DWORD __thiscall std::_Container_base12::~_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:000052B4                 public ??1_Container_base12@std@@QAE@XZ
.text$mn:000052B4 ??1_Container_base12@std@@QAE@XZ proc near
.text$mn:000052B4                                         ; CODE XREF: __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0+3j
.text$mn:000052B4                                         ; __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0+3j ...
.text$mn:000052B4
.text$mn:000052B4 var_4           = dword ptr -4
.text$mn:000052B4
.text$mn:000052B4                 push    ebp
.text$mn:000052B5                 mov     ebp, esp
.text$mn:000052B7                 push    ecx
.text$mn:000052B8                 mov     [ebp+var_4], ecx
.text$mn:000052BB                 mov     ecx, [ebp+var_4] ; this
.text$mn:000052BE                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:000052C3                 mov     esp, ebp
.text$mn:000052C5                 pop     ebp
.text$mn:000052C6                 retn
.text$mn:000052C6 ??1_Container_base12@std@@QAE@XZ endp
.text$mn:000052C6
.text$mn:000052C6 ; ---------------------------------------------------------------------------
.text$mn:000052C7                 align 4
.text$mn:000052C7 _text$mn        ends
.text$mn:000052C7
.text$mn:000052C8 ; ===========================================================================
.text$mn:000052C8
.text$mn:000052C8 ; Segment type: Pure code
.text$mn:000052C8 ; Segment permissions: Read/Execute
.text$mn:000052C8 _text$mn        segment para public 'CODE' use32
.text$mn:000052C8                 assume cs:_text$mn
.text$mn:000052C8                 ;org 52C8h
.text$mn:000052C8 ; COMDAT (pick any)
.text$mn:000052C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000052C8
.text$mn:000052C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000052C8
.text$mn:000052C8 ; Attributes: bp-based frame
.text$mn:000052C8
.text$mn:000052C8 ; _DWORD __thiscall std::_Generic_error_category::~_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:000052C8                 public ??1_Generic_error_category@std@@UAE@XZ
.text$mn:000052C8 ??1_Generic_error_category@std@@UAE@XZ proc near
.text$mn:000052C8                                         ; CODE XREF: __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0+3j
.text$mn:000052C8                                         ; __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0+3j ...
.text$mn:000052C8
.text$mn:000052C8 var_10          = dword ptr -10h
.text$mn:000052C8 var_C           = dword ptr -0Ch
.text$mn:000052C8 var_4           = dword ptr -4
.text$mn:000052C8
.text$mn:000052C8                 push    ebp
.text$mn:000052C9                 mov     ebp, esp
.text$mn:000052CB                 push    0FFFFFFFFh
.text$mn:000052CD                 push    offset __ehhandler$??1_Generic_error_category@std@@UAE@XZ
.text$mn:000052D2                 mov     eax, large fs:0
.text$mn:000052D8                 push    eax
.text$mn:000052D9                 push    ecx
.text$mn:000052DA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000052DF                 xor     eax, ebp
.text$mn:000052E1                 push    eax
.text$mn:000052E2                 lea     eax, [ebp+var_C]
.text$mn:000052E5                 mov     large fs:0, eax
.text$mn:000052EB                 mov     [ebp+var_10], ecx
.text$mn:000052EE                 mov     [ebp+var_4], 0
.text$mn:000052F5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000052FC                 mov     ecx, [ebp+var_10] ; this
.text$mn:000052FF                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:00005304                 mov     ecx, [ebp+var_C]
.text$mn:00005307                 mov     large fs:0, ecx
.text$mn:0000530E                 pop     ecx
.text$mn:0000530F                 mov     esp, ebp
.text$mn:00005311                 pop     ebp
.text$mn:00005312                 retn
.text$mn:00005312 ??1_Generic_error_category@std@@UAE@XZ endp
.text$mn:00005312
.text$mn:00005312 ; ---------------------------------------------------------------------------
.text$mn:00005313                 align 4
.text$mn:00005313 _text$mn        ends
.text$mn:00005313
.text$x:00005314 ; ===========================================================================
.text$x:00005314
.text$x:00005314 ; Segment type: Pure code
.text$x:00005314 ; Segment permissions: Read/Execute
.text$x:00005314 _text$x         segment para public 'CODE' use32
.text$x:00005314                 assume cs:_text$x
.text$x:00005314                 ;org 5314h
.text$x:00005314 ; COMDAT (pick associative to section at 52C8)
.text$x:00005314                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005314
.text$x:00005314 ; =============== S U B R O U T I N E =======================================
.text$x:00005314
.text$x:00005314
.text$x:00005314 __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 proc near
.text$x:00005314                                         ; DATA XREF: .xdata$x:00008818o
.text$x:00005314                 mov     ecx, [ebp-10h]  ; this
.text$x:00005317                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:00005317 __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 endp
.text$x:00005317
.text$x:0000531C
.text$x:0000531C ; =============== S U B R O U T I N E =======================================
.text$x:0000531C
.text$x:0000531C
.text$x:0000531C __ehhandler$??1_Generic_error_category@std@@UAE@XZ proc near
.text$x:0000531C                                         ; DATA XREF: std::_Generic_error_category::~_Generic_error_category(void)+5o
.text$x:0000531C
.text$x:0000531C arg_4           = dword ptr  8
.text$x:0000531C
.text$x:0000531C                 mov     edx, [esp+arg_4]
.text$x:00005320                 lea     eax, [edx+0Ch]
.text$x:00005323                 mov     ecx, [edx-8]
.text$x:00005326                 xor     ecx, eax
.text$x:00005328                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000532D                 mov     eax, offset __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ
.text$x:00005332                 jmp     ___CxxFrameHandler3
.text$x:00005332 __ehhandler$??1_Generic_error_category@std@@UAE@XZ endp
.text$x:00005332
.text$x:00005332 ; ---------------------------------------------------------------------------
.text$x:00005337                 align 4
.text$x:00005337 _text$x         ends
.text$x:00005337
.text$mn:00005338 ; ===========================================================================
.text$mn:00005338
.text$mn:00005338 ; Segment type: Pure code
.text$mn:00005338 ; Segment permissions: Read/Execute
.text$mn:00005338 _text$mn        segment para public 'CODE' use32
.text$mn:00005338                 assume cs:_text$mn
.text$mn:00005338                 ;org 5338h
.text$mn:00005338 ; COMDAT (pick any)
.text$mn:00005338                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005338
.text$mn:00005338 ; =============== S U B R O U T I N E =======================================
.text$mn:00005338
.text$mn:00005338 ; Attributes: bp-based frame
.text$mn:00005338
.text$mn:00005338 ; _DWORD __thiscall std::_Iostream_error_category::~_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00005338                 public ??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00005338 ??1_Iostream_error_category@std@@UAE@XZ proc near
.text$mn:00005338                                         ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:00005338                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00005338
.text$mn:00005338 var_10          = dword ptr -10h
.text$mn:00005338 var_C           = dword ptr -0Ch
.text$mn:00005338 var_4           = dword ptr -4
.text$mn:00005338
.text$mn:00005338                 push    ebp
.text$mn:00005339                 mov     ebp, esp
.text$mn:0000533B                 push    0FFFFFFFFh
.text$mn:0000533D                 push    offset __ehhandler$??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00005342                 mov     eax, large fs:0
.text$mn:00005348                 push    eax
.text$mn:00005349                 push    ecx
.text$mn:0000534A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000534F                 xor     eax, ebp
.text$mn:00005351                 push    eax
.text$mn:00005352                 lea     eax, [ebp+var_C]
.text$mn:00005355                 mov     large fs:0, eax
.text$mn:0000535B                 mov     [ebp+var_10], ecx
.text$mn:0000535E                 mov     [ebp+var_4], 0
.text$mn:00005365                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000536C                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000536F                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00005374                 mov     ecx, [ebp+var_C]
.text$mn:00005377                 mov     large fs:0, ecx
.text$mn:0000537E                 pop     ecx
.text$mn:0000537F                 mov     esp, ebp
.text$mn:00005381                 pop     ebp
.text$mn:00005382                 retn
.text$mn:00005382 ??1_Iostream_error_category@std@@UAE@XZ endp
.text$mn:00005382
.text$mn:00005382 ; ---------------------------------------------------------------------------
.text$mn:00005383                 align 4
.text$mn:00005383 _text$mn        ends
.text$mn:00005383
.text$x:00005384 ; ===========================================================================
.text$x:00005384
.text$x:00005384 ; Segment type: Pure code
.text$x:00005384 ; Segment permissions: Read/Execute
.text$x:00005384 _text$x         segment para public 'CODE' use32
.text$x:00005384                 assume cs:_text$x
.text$x:00005384                 ;org 5384h
.text$x:00005384 ; COMDAT (pick associative to section at 5338)
.text$x:00005384                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005384
.text$x:00005384 ; =============== S U B R O U T I N E =======================================
.text$x:00005384
.text$x:00005384
.text$x:00005384 __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 proc near
.text$x:00005384                                         ; DATA XREF: .xdata$x:0000889Co
.text$x:00005384                 mov     ecx, [ebp-10h]  ; this
.text$x:00005387                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00005387 __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 endp
.text$x:00005387
.text$x:0000538C
.text$x:0000538C ; =============== S U B R O U T I N E =======================================
.text$x:0000538C
.text$x:0000538C
.text$x:0000538C __ehhandler$??1_Iostream_error_category@std@@UAE@XZ proc near
.text$x:0000538C                                         ; DATA XREF: std::_Iostream_error_category::~_Iostream_error_category(void)+5o
.text$x:0000538C
.text$x:0000538C arg_4           = dword ptr  8
.text$x:0000538C
.text$x:0000538C                 mov     edx, [esp+arg_4]
.text$x:00005390                 lea     eax, [edx+0Ch]
.text$x:00005393                 mov     ecx, [edx-8]
.text$x:00005396                 xor     ecx, eax
.text$x:00005398                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000539D                 mov     eax, offset __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ
.text$x:000053A2                 jmp     ___CxxFrameHandler3
.text$x:000053A2 __ehhandler$??1_Iostream_error_category@std@@UAE@XZ endp
.text$x:000053A2
.text$x:000053A2 ; ---------------------------------------------------------------------------
.text$x:000053A7                 align 4
.text$x:000053A7 _text$x         ends
.text$x:000053A7
.text$mn:000053A8 ; ===========================================================================
.text$mn:000053A8
.text$mn:000053A8 ; Segment type: Pure code
.text$mn:000053A8 ; Segment permissions: Read/Execute
.text$mn:000053A8 _text$mn        segment para public 'CODE' use32
.text$mn:000053A8                 assume cs:_text$mn
.text$mn:000053A8                 ;org 53A8h
.text$mn:000053A8 ; COMDAT (pick any)
.text$mn:000053A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000053A8
.text$mn:000053A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000053A8
.text$mn:000053A8 ; Attributes: bp-based frame
.text$mn:000053A8
.text$mn:000053A8 ; _DWORD __thiscall std::_Iterator_base12::~_Iterator_base12(std::_Iterator_base12 *__hidden this)
.text$mn:000053A8                 public ??1_Iterator_base12@std@@QAE@XZ
.text$mn:000053A8 ??1_Iterator_base12@std@@QAE@XZ proc near
.text$mn:000053A8                                         ; CODE XREF: __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0+3j
.text$mn:000053A8                                         ; __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ$0+3j ...
.text$mn:000053A8
.text$mn:000053A8 var_14          = byte ptr -14h
.text$mn:000053A8 var_10          = dword ptr -10h
.text$mn:000053A8 var_C           = dword ptr -0Ch
.text$mn:000053A8 var_4           = dword ptr -4
.text$mn:000053A8
.text$mn:000053A8                 push    ebp
.text$mn:000053A9                 mov     ebp, esp
.text$mn:000053AB                 push    0FFFFFFFFh
.text$mn:000053AD                 push    offset __ehhandler$??1_Iterator_base12@std@@QAE@XZ
.text$mn:000053B2                 mov     eax, large fs:0
.text$mn:000053B8                 push    eax
.text$mn:000053B9                 sub     esp, 8
.text$mn:000053BC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000053C1                 xor     eax, ebp
.text$mn:000053C3                 push    eax
.text$mn:000053C4                 lea     eax, [ebp+var_C]
.text$mn:000053C7                 mov     large fs:0, eax
.text$mn:000053CD                 mov     [ebp+var_10], ecx
.text$mn:000053D0                 push    3               ; int
.text$mn:000053D2                 lea     ecx, [ebp+var_14] ; this
.text$mn:000053D5                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:000053DA                 mov     [ebp+var_4], 0
.text$mn:000053E1                 mov     ecx, [ebp+var_10] ; this
.text$mn:000053E4                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:000053E9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000053F0                 lea     ecx, [ebp+var_14] ; this
.text$mn:000053F3                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:000053F8                 mov     ecx, [ebp+var_C]
.text$mn:000053FB                 mov     large fs:0, ecx
.text$mn:00005402                 pop     ecx
.text$mn:00005403                 mov     esp, ebp
.text$mn:00005405                 pop     ebp
.text$mn:00005406                 retn
.text$mn:00005406 ??1_Iterator_base12@std@@QAE@XZ endp
.text$mn:00005406
.text$mn:00005406 ; ---------------------------------------------------------------------------
.text$mn:00005407                 align 4
.text$mn:00005407 _text$mn        ends
.text$mn:00005407
.text$x:00005408 ; ===========================================================================
.text$x:00005408
.text$x:00005408 ; Segment type: Pure code
.text$x:00005408 ; Segment permissions: Read/Execute
.text$x:00005408 _text$x         segment para public 'CODE' use32
.text$x:00005408                 assume cs:_text$x
.text$x:00005408                 ;org 5408h
.text$x:00005408 ; COMDAT (pick associative to section at 53A8)
.text$x:00005408                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005408
.text$x:00005408 ; =============== S U B R O U T I N E =======================================
.text$x:00005408
.text$x:00005408
.text$x:00005408 __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 proc near
.text$x:00005408                                         ; DATA XREF: .xdata$x:00008574o
.text$x:00005408                 lea     ecx, [ebp-14h]  ; this
.text$x:0000540B                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000540B __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 endp
.text$x:0000540B
.text$x:00005410
.text$x:00005410 ; =============== S U B R O U T I N E =======================================
.text$x:00005410
.text$x:00005410
.text$x:00005410 __ehhandler$??1_Iterator_base12@std@@QAE@XZ proc near
.text$x:00005410                                         ; DATA XREF: std::_Iterator_base12::~_Iterator_base12(void)+5o
.text$x:00005410
.text$x:00005410 arg_4           = dword ptr  8
.text$x:00005410
.text$x:00005410                 mov     edx, [esp+arg_4]
.text$x:00005414                 lea     eax, [edx+0Ch]
.text$x:00005417                 mov     ecx, [edx-0Ch]
.text$x:0000541A                 xor     ecx, eax
.text$x:0000541C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005421                 mov     eax, offset __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
.text$x:00005426                 jmp     ___CxxFrameHandler3
.text$x:00005426 __ehhandler$??1_Iterator_base12@std@@QAE@XZ endp
.text$x:00005426
.text$x:00005426 ; ---------------------------------------------------------------------------
.text$x:0000542B                 align 4
.text$x:0000542B _text$x         ends
.text$x:0000542B
.text$mn:0000542C ; ===========================================================================
.text$mn:0000542C
.text$mn:0000542C ; Segment type: Pure code
.text$mn:0000542C ; Segment permissions: Read/Execute
.text$mn:0000542C _text$mn        segment para public 'CODE' use32
.text$mn:0000542C                 assume cs:_text$mn
.text$mn:0000542C                 ;org 542Ch
.text$mn:0000542C ; COMDAT (pick any)
.text$mn:0000542C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000542C
.text$mn:0000542C ; =============== S U B R O U T I N E =======================================
.text$mn:0000542C
.text$mn:0000542C ; Attributes: bp-based frame
.text$mn:0000542C
.text$mn:0000542C ; _DWORD __thiscall std::_System_error_category::~_System_error_category(std::_System_error_category *__hidden this)
.text$mn:0000542C                 public ??1_System_error_category@std@@UAE@XZ
.text$mn:0000542C ??1_System_error_category@std@@UAE@XZ proc near
.text$mn:0000542C                                         ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:0000542C                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:0000542C
.text$mn:0000542C var_10          = dword ptr -10h
.text$mn:0000542C var_C           = dword ptr -0Ch
.text$mn:0000542C var_4           = dword ptr -4
.text$mn:0000542C
.text$mn:0000542C                 push    ebp
.text$mn:0000542D                 mov     ebp, esp
.text$mn:0000542F                 push    0FFFFFFFFh
.text$mn:00005431                 push    offset __ehhandler$??1_System_error_category@std@@UAE@XZ
.text$mn:00005436                 mov     eax, large fs:0
.text$mn:0000543C                 push    eax
.text$mn:0000543D                 push    ecx
.text$mn:0000543E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005443                 xor     eax, ebp
.text$mn:00005445                 push    eax
.text$mn:00005446                 lea     eax, [ebp+var_C]
.text$mn:00005449                 mov     large fs:0, eax
.text$mn:0000544F                 mov     [ebp+var_10], ecx
.text$mn:00005452                 mov     [ebp+var_4], 0
.text$mn:00005459                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005460                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005463                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00005468                 mov     ecx, [ebp+var_C]
.text$mn:0000546B                 mov     large fs:0, ecx
.text$mn:00005472                 pop     ecx
.text$mn:00005473                 mov     esp, ebp
.text$mn:00005475                 pop     ebp
.text$mn:00005476                 retn
.text$mn:00005476 ??1_System_error_category@std@@UAE@XZ endp
.text$mn:00005476
.text$mn:00005476 ; ---------------------------------------------------------------------------
.text$mn:00005477                 align 4
.text$mn:00005477 _text$mn        ends
.text$mn:00005477
.text$x:00005478 ; ===========================================================================
.text$x:00005478
.text$x:00005478 ; Segment type: Pure code
.text$x:00005478 ; Segment permissions: Read/Execute
.text$x:00005478 _text$x         segment para public 'CODE' use32
.text$x:00005478                 assume cs:_text$x
.text$x:00005478                 ;org 5478h
.text$x:00005478 ; COMDAT (pick associative to section at 542C)
.text$x:00005478                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005478
.text$x:00005478 ; =============== S U B R O U T I N E =======================================
.text$x:00005478
.text$x:00005478
.text$x:00005478 __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 proc near
.text$x:00005478                                         ; DATA XREF: .xdata$x:00008920o
.text$x:00005478                 mov     ecx, [ebp-10h]  ; this
.text$x:0000547B                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:0000547B __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 endp
.text$x:0000547B
.text$x:00005480
.text$x:00005480 ; =============== S U B R O U T I N E =======================================
.text$x:00005480
.text$x:00005480
.text$x:00005480 __ehhandler$??1_System_error_category@std@@UAE@XZ proc near
.text$x:00005480                                         ; DATA XREF: std::_System_error_category::~_System_error_category(void)+5o
.text$x:00005480
.text$x:00005480 arg_4           = dword ptr  8
.text$x:00005480
.text$x:00005480                 mov     edx, [esp+arg_4]
.text$x:00005484                 lea     eax, [edx+0Ch]
.text$x:00005487                 mov     ecx, [edx-8]
.text$x:0000548A                 xor     ecx, eax
.text$x:0000548C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005491                 mov     eax, offset __ehfuncinfo$??1_System_error_category@std@@UAE@XZ
.text$x:00005496                 jmp     ___CxxFrameHandler3
.text$x:00005496 __ehhandler$??1_System_error_category@std@@UAE@XZ endp
.text$x:00005496
.text$x:00005496 ; ---------------------------------------------------------------------------
.text$x:0000549B                 align 4
.text$x:0000549B _text$x         ends
.text$x:0000549B
.text$mn:0000549C ; ===========================================================================
.text$mn:0000549C
.text$mn:0000549C ; Segment type: Pure code
.text$mn:0000549C ; Segment permissions: Read/Execute
.text$mn:0000549C _text$mn        segment para public 'CODE' use32
.text$mn:0000549C                 assume cs:_text$mn
.text$mn:0000549C                 ;org 549Ch
.text$mn:0000549C ; COMDAT (pick any)
.text$mn:0000549C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000549C
.text$mn:0000549C ; =============== S U B R O U T I N E =======================================
.text$mn:0000549C
.text$mn:0000549C ; Attributes: bp-based frame
.text$mn:0000549C
.text$mn:0000549C ; _DWORD __thiscall std::error_category::~error_category(std::error_category *__hidden this)
.text$mn:0000549C                 public ??1error_category@std@@UAE@XZ
.text$mn:0000549C ??1error_category@std@@UAE@XZ proc near ; CODE XREF: __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0+3j
.text$mn:0000549C                                         ; std::_Generic_error_category::~_Generic_error_category(void)+37p ...
.text$mn:0000549C
.text$mn:0000549C var_4           = dword ptr -4
.text$mn:0000549C
.text$mn:0000549C                 push    ebp
.text$mn:0000549D                 mov     ebp, esp
.text$mn:0000549F                 push    ecx
.text$mn:000054A0                 mov     [ebp+var_4], ecx
.text$mn:000054A3                 mov     eax, [ebp+var_4]
.text$mn:000054A6                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:000054AC                 mov     esp, ebp
.text$mn:000054AE                 pop     ebp
.text$mn:000054AF                 retn
.text$mn:000054AF ??1error_category@std@@UAE@XZ endp
.text$mn:000054AF
.text$mn:000054AF _text$mn        ends
.text$mn:000054AF
.text$mn:000054B0 ; ===========================================================================
.text$mn:000054B0
.text$mn:000054B0 ; Segment type: Pure code
.text$mn:000054B0 ; Segment permissions: Read/Execute
.text$mn:000054B0 _text$mn        segment para public 'CODE' use32
.text$mn:000054B0                 assume cs:_text$mn
.text$mn:000054B0                 ;org 54B0h
.text$mn:000054B0 ; COMDAT (pick any)
.text$mn:000054B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054B0
.text$mn:000054B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000054B0
.text$mn:000054B0 ; Attributes: bp-based frame
.text$mn:000054B0
.text$mn:000054B0 ; void *__cdecl operator new(unsigned int, void *)
.text$mn:000054B0                 public ??2@YAPAXIPAX@Z
.text$mn:000054B0 ??2@YAPAXIPAX@Z proc near               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+2Ep
.text$mn:000054B0                                         ; std::allocator<tTbData *>::construct<tTbData *,tTbData * &>(tTbData * *,tTbData * &)+2Ep ...
.text$mn:000054B0
.text$mn:000054B0 arg_4           = dword ptr  0Ch
.text$mn:000054B0
.text$mn:000054B0                 push    ebp
.text$mn:000054B1                 mov     ebp, esp
.text$mn:000054B3                 mov     eax, [ebp+arg_4]
.text$mn:000054B6                 pop     ebp
.text$mn:000054B7                 retn
.text$mn:000054B7 ??2@YAPAXIPAX@Z endp
.text$mn:000054B7
.text$mn:000054B7 _text$mn        ends
.text$mn:000054B7
.text$mn:000054B8 ; ===========================================================================
.text$mn:000054B8
.text$mn:000054B8 ; Segment type: Pure code
.text$mn:000054B8 ; Segment permissions: Read/Execute
.text$mn:000054B8 _text$mn        segment para public 'CODE' use32
.text$mn:000054B8                 assume cs:_text$mn
.text$mn:000054B8                 ;org 54B8h
.text$mn:000054B8 ; COMDAT (pick any)
.text$mn:000054B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054B8
.text$mn:000054B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000054B8
.text$mn:000054B8 ; Attributes: bp-based frame
.text$mn:000054B8
.text$mn:000054B8 ; void __cdecl operator delete(void *)
.text$mn:000054B8                 public ??3@YAXPAX0@Z
.text$mn:000054B8 ??3@YAXPAX0@Z   proc near               ; CODE XREF: __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0+8p
.text$mn:000054B8                                         ; __unwindfunclet$??$construct@PAUtTbData@@AAPAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@AAPAU2@@Z$0+8p ...
.text$mn:000054B8                 push    ebp
.text$mn:000054B9                 mov     ebp, esp
.text$mn:000054BB                 pop     ebp
.text$mn:000054BC                 retn
.text$mn:000054BC ??3@YAXPAX0@Z   endp
.text$mn:000054BC
.text$mn:000054BC ; ---------------------------------------------------------------------------
.text$mn:000054BD                 align 10h
.text$mn:000054BD _text$mn        ends
.text$mn:000054BD
.text$mn:000054C0 ; ===========================================================================
.text$mn:000054C0
.text$mn:000054C0 ; Segment type: Pure code
.text$mn:000054C0 ; Segment permissions: Read/Execute
.text$mn:000054C0 _text$mn        segment para public 'CODE' use32
.text$mn:000054C0                 assume cs:_text$mn
.text$mn:000054C0                 ;org 54C0h
.text$mn:000054C0 ; COMDAT (pick any)
.text$mn:000054C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054C0
.text$mn:000054C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000054C0
.text$mn:000054C0 ; Attributes: bp-based frame
.text$mn:000054C0
.text$mn:000054C0 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t *Str)
.text$mn:000054C0                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:000054C0 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:000054C0                                         ; CODE XREF: DockingCont::SelectTab(int)+272p
.text$mn:000054C0                                         ; DockingCont::updateCaption(void)+87p
.text$mn:000054C0
.text$mn:000054C0 var_4           = dword ptr -4
.text$mn:000054C0 Str             = dword ptr  8
.text$mn:000054C0
.text$mn:000054C0                 push    ebp
.text$mn:000054C1                 mov     ebp, esp
.text$mn:000054C3                 push    ecx
.text$mn:000054C4                 mov     [ebp+var_4], ecx
.text$mn:000054C7                 mov     eax, [ebp+Str]
.text$mn:000054CA                 push    eax             ; Str
.text$mn:000054CB                 mov     ecx, [ebp+var_4]
.text$mn:000054CE                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:000054D3                 mov     esp, ebp
.text$mn:000054D5                 pop     ebp
.text$mn:000054D6                 retn    4
.text$mn:000054D6 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:000054D6
.text$mn:000054D6 ; ---------------------------------------------------------------------------
.text$mn:000054D9                 align 4
.text$mn:000054D9 _text$mn        ends
.text$mn:000054D9
.text$mn:000054DC ; ===========================================================================
.text$mn:000054DC
.text$mn:000054DC ; Segment type: Pure code
.text$mn:000054DC ; Segment permissions: Read/Execute
.text$mn:000054DC _text$mn        segment para public 'CODE' use32
.text$mn:000054DC                 assume cs:_text$mn
.text$mn:000054DC                 ;org 54DCh
.text$mn:000054DC ; COMDAT (pick any)
.text$mn:000054DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054DC
.text$mn:000054DC ; =============== S U B R O U T I N E =======================================
.text$mn:000054DC
.text$mn:000054DC ; Attributes: bp-based frame
.text$mn:000054DC
.text$mn:000054DC ; public: struct std::_Iterator_base12 & __thiscall std::_Iterator_base12::operator=(struct std::_Iterator_base12 const &)
.text$mn:000054DC                 public ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$mn:000054DC ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
.text$mn:000054DC                                         ; CODE XREF: std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)+21p
.text$mn:000054DC
.text$mn:000054DC var_14          = byte ptr -14h
.text$mn:000054DC var_10          = dword ptr -10h
.text$mn:000054DC var_C           = dword ptr -0Ch
.text$mn:000054DC var_4           = dword ptr -4
.text$mn:000054DC arg_0           = dword ptr  8
.text$mn:000054DC
.text$mn:000054DC                 push    ebp
.text$mn:000054DD                 mov     ebp, esp
.text$mn:000054DF                 push    0FFFFFFFFh
.text$mn:000054E1                 push    offset __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$mn:000054E6                 mov     eax, large fs:0
.text$mn:000054EC                 push    eax
.text$mn:000054ED                 sub     esp, 8
.text$mn:000054F0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000054F5                 xor     eax, ebp
.text$mn:000054F7                 push    eax
.text$mn:000054F8                 lea     eax, [ebp+var_C]
.text$mn:000054FB                 mov     large fs:0, eax
.text$mn:00005501                 mov     [ebp+var_10], ecx
.text$mn:00005504                 mov     eax, [ebp+var_10]
.text$mn:00005507                 mov     ecx, [ebp+arg_0]
.text$mn:0000550A                 mov     edx, [eax]
.text$mn:0000550C                 cmp     edx, [ecx]
.text$mn:0000550E                 jnz     short loc_5512
.text$mn:00005510                 jmp     short loc_5554
.text$mn:00005512 ; ---------------------------------------------------------------------------
.text$mn:00005512
.text$mn:00005512 loc_5512:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+32j
.text$mn:00005512                 mov     eax, [ebp+arg_0]
.text$mn:00005515                 cmp     dword ptr [eax], 0
.text$mn:00005518                 jz      short loc_552C
.text$mn:0000551A                 mov     ecx, [ebp+arg_0]
.text$mn:0000551D                 mov     edx, [ecx]
.text$mn:0000551F                 mov     eax, [edx]
.text$mn:00005521                 push    eax             ; struct std::_Container_base12 *
.text$mn:00005522                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005525                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:0000552A                 jmp     short loc_5554
.text$mn:0000552C ; ---------------------------------------------------------------------------
.text$mn:0000552C
.text$mn:0000552C loc_552C:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+3Cj
.text$mn:0000552C                 push    3               ; int
.text$mn:0000552E                 lea     ecx, [ebp+var_14] ; this
.text$mn:00005531                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00005536                 mov     [ebp+var_4], 0
.text$mn:0000553D                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005540                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00005545                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000554C                 lea     ecx, [ebp+var_14] ; this
.text$mn:0000554F                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00005554
.text$mn:00005554 loc_5554:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+34j
.text$mn:00005554                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+4Ej
.text$mn:00005554                 mov     eax, [ebp+var_10]
.text$mn:00005557                 mov     ecx, [ebp+var_C]
.text$mn:0000555A                 mov     large fs:0, ecx
.text$mn:00005561                 pop     ecx
.text$mn:00005562                 mov     esp, ebp
.text$mn:00005564                 pop     ebp
.text$mn:00005565                 retn    4
.text$mn:00005565 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z endp
.text$mn:00005565
.text$mn:00005565 _text$mn        ends
.text$mn:00005565
.text$x:00005568 ; ===========================================================================
.text$x:00005568
.text$x:00005568 ; Segment type: Pure code
.text$x:00005568 ; Segment permissions: Read/Execute
.text$x:00005568 _text$x         segment para public 'CODE' use32
.text$x:00005568                 assume cs:_text$x
.text$x:00005568                 ;org 5568h
.text$x:00005568 ; COMDAT (pick associative to section at 54DC)
.text$x:00005568                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005568
.text$x:00005568 ; =============== S U B R O U T I N E =======================================
.text$x:00005568
.text$x:00005568
.text$x:00005568 __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 proc near
.text$x:00005568                                         ; DATA XREF: .xdata$x:00008548o
.text$x:00005568                 lea     ecx, [ebp-14h]  ; this
.text$x:0000556B                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000556B __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 endp
.text$x:0000556B
.text$x:00005570
.text$x:00005570 ; =============== S U B R O U T I N E =======================================
.text$x:00005570
.text$x:00005570
.text$x:00005570 __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
.text$x:00005570                                         ; DATA XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+5o
.text$x:00005570
.text$x:00005570 arg_4           = dword ptr  8
.text$x:00005570
.text$x:00005570                 mov     edx, [esp+arg_4]
.text$x:00005574                 lea     eax, [edx+0Ch]
.text$x:00005577                 mov     ecx, [edx-0Ch]
.text$x:0000557A                 xor     ecx, eax
.text$x:0000557C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005581                 mov     eax, offset __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$x:00005586                 jmp     ___CxxFrameHandler3
.text$x:00005586 __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z endp
.text$x:00005586
.text$x:00005586 ; ---------------------------------------------------------------------------
.text$x:0000558B                 align 4
.text$x:0000558B _text$x         ends
.text$x:0000558B
.text$mn:0000558C ; ===========================================================================
.text$mn:0000558C
.text$mn:0000558C ; Segment type: Pure code
.text$mn:0000558C ; Segment permissions: Read/Execute
.text$mn:0000558C _text$mn        segment para public 'CODE' use32
.text$mn:0000558C                 assume cs:_text$mn
.text$mn:0000558C                 ;org 558Ch
.text$mn:0000558C ; COMDAT (pick any)
.text$mn:0000558C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000558C
.text$mn:0000558C ; =============== S U B R O U T I N E =======================================
.text$mn:0000558C
.text$mn:0000558C ; Attributes: bp-based frame
.text$mn:0000558C
.text$mn:0000558C ; public: bool __thiscall std::error_category::operator==(class std::error_category const &)const
.text$mn:0000558C                 public ??8error_category@std@@QBE_NABV01@@Z
.text$mn:0000558C ??8error_category@std@@QBE_NABV01@@Z proc near
.text$mn:0000558C                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+1Dp
.text$mn:0000558C                                         ; std::error_category::equivalent(std::error_code const &,int)+15p
.text$mn:0000558C
.text$mn:0000558C var_8           = dword ptr -8
.text$mn:0000558C var_4           = dword ptr -4
.text$mn:0000558C arg_0           = dword ptr  8
.text$mn:0000558C
.text$mn:0000558C                 push    ebp
.text$mn:0000558D                 mov     ebp, esp
.text$mn:0000558F                 sub     esp, 8
.text$mn:00005592                 mov     [ebp+var_8], ecx
.text$mn:00005595                 mov     eax, [ebp+var_8]
.text$mn:00005598                 cmp     eax, [ebp+arg_0]
.text$mn:0000559B                 jnz     short loc_55A6
.text$mn:0000559D                 mov     [ebp+var_4], 1
.text$mn:000055A4                 jmp     short loc_55AD
.text$mn:000055A6 ; ---------------------------------------------------------------------------
.text$mn:000055A6
.text$mn:000055A6 loc_55A6:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+Fj
.text$mn:000055A6                 mov     [ebp+var_4], 0
.text$mn:000055AD
.text$mn:000055AD loc_55AD:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+18j
.text$mn:000055AD                 mov     al, byte ptr [ebp+var_4]
.text$mn:000055B0                 mov     esp, ebp
.text$mn:000055B2                 pop     ebp
.text$mn:000055B3                 retn    4
.text$mn:000055B3 ??8error_category@std@@QBE_NABV01@@Z endp
.text$mn:000055B3
.text$mn:000055B3 ; ---------------------------------------------------------------------------
.text$mn:000055B6                 align 4
.text$mn:000055B6 _text$mn        ends
.text$mn:000055B6
.text$mn:000055B8 ; ===========================================================================
.text$mn:000055B8
.text$mn:000055B8 ; Segment type: Pure code
.text$mn:000055B8 ; Segment permissions: Read/Execute
.text$mn:000055B8 _text$mn        segment para public 'CODE' use32
.text$mn:000055B8                 assume cs:_text$mn
.text$mn:000055B8                 ;org 55B8h
.text$mn:000055B8 ; COMDAT (pick any)
.text$mn:000055B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000055B8
.text$mn:000055B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000055B8
.text$mn:000055B8 ; Attributes: bp-based frame
.text$mn:000055B8
.text$mn:000055B8 ; int __stdcall std::error_condition::operator==(std::error_condition *)
.text$mn:000055B8                 public ??8error_condition@std@@QBE_NABV01@@Z
.text$mn:000055B8 ??8error_condition@std@@QBE_NABV01@@Z proc near
.text$mn:000055B8                                         ; CODE XREF: std::error_category::equivalent(int,std::error_condition const &)+24p
.text$mn:000055B8
.text$mn:000055B8 var_8           = dword ptr -8
.text$mn:000055B8 var_4           = dword ptr -4
.text$mn:000055B8 arg_0           = dword ptr  8
.text$mn:000055B8
.text$mn:000055B8                 push    ebp
.text$mn:000055B9                 mov     ebp, esp
.text$mn:000055BB                 sub     esp, 8
.text$mn:000055BE                 push    esi
.text$mn:000055BF                 mov     [ebp+var_4], ecx
.text$mn:000055C2                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000055C5                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:000055CA                 push    eax
.text$mn:000055CB                 mov     ecx, [ebp+var_4] ; this
.text$mn:000055CE                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:000055D3                 mov     ecx, eax
.text$mn:000055D5                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:000055DA                 movzx   eax, al
.text$mn:000055DD                 test    eax, eax
.text$mn:000055DF                 jz      short loc_5600
.text$mn:000055E1                 mov     ecx, [ebp+var_4] ; this
.text$mn:000055E4                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:000055E9                 mov     esi, eax
.text$mn:000055EB                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000055EE                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:000055F3                 cmp     esi, eax
.text$mn:000055F5                 jnz     short loc_5600
.text$mn:000055F7                 mov     [ebp+var_8], 1
.text$mn:000055FE                 jmp     short loc_5607
.text$mn:00005600 ; ---------------------------------------------------------------------------
.text$mn:00005600
.text$mn:00005600 loc_5600:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+27j
.text$mn:00005600                                         ; std::error_condition::operator==(std::error_condition const &)+3Dj
.text$mn:00005600                 mov     [ebp+var_8], 0
.text$mn:00005607
.text$mn:00005607 loc_5607:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+46j
.text$mn:00005607                 mov     al, byte ptr [ebp+var_8]
.text$mn:0000560A                 pop     esi
.text$mn:0000560B                 mov     esp, ebp
.text$mn:0000560D                 pop     ebp
.text$mn:0000560E                 retn    4
.text$mn:0000560E ??8error_condition@std@@QBE_NABV01@@Z endp
.text$mn:0000560E
.text$mn:0000560E ; ---------------------------------------------------------------------------
.text$mn:00005611                 align 4
.text$mn:00005611 _text$mn        ends
.text$mn:00005611
.text$mn:00005614 ; ===========================================================================
.text$mn:00005614
.text$mn:00005614 ; Segment type: Pure code
.text$mn:00005614 ; Segment permissions: Read/Execute
.text$mn:00005614 _text$mn        segment para public 'CODE' use32
.text$mn:00005614                 assume cs:_text$mn
.text$mn:00005614                 ;org 5614h
.text$mn:00005614 ; COMDAT (pick any)
.text$mn:00005614                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005614
.text$mn:00005614 ; =============== S U B R O U T I N E =======================================
.text$mn:00005614
.text$mn:00005614 ; Attributes: bp-based frame
.text$mn:00005614
.text$mn:00005614 ; public: struct tTbData * & __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::operator[](unsigned int)
.text$mn:00005614                 public ??A?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEAAPAUtTbData@@I@Z
.text$mn:00005614 ??A?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEAAPAUtTbData@@I@Z proc near
.text$mn:00005614                                         ; CODE XREF: DockingCont::removeToolbar(tTbData)+5Ep
.text$mn:00005614                                         ; DockingCont::removeToolbar(tTbData)+7Dp ...
.text$mn:00005614
.text$mn:00005614 var_4           = dword ptr -4
.text$mn:00005614 arg_0           = dword ptr  8
.text$mn:00005614
.text$mn:00005614                 push    ebp
.text$mn:00005615                 mov     ebp, esp
.text$mn:00005617                 push    ecx
.text$mn:00005618                 mov     [ebp+var_4], ecx
.text$mn:0000561B                 mov     ecx, [ebp+var_4]
.text$mn:0000561E                 call    ?size@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ ; std::vector<tTbData *,std::allocator<tTbData *>>::size(void)
.text$mn:00005623                 cmp     eax, [ebp+arg_0]
.text$mn:00005626                 ja      short loc_5690
.text$mn:00005628                 push    4B1h            ; unsigned int
.text$mn:0000562D                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005632                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:00005637                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000563C                 add     esp, 0Ch
.text$mn:0000563F                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00005644                 test    eax, eax
.text$mn:00005646                 jz      short loc_564C
.text$mn:00005648                 xor     ecx, ecx
.text$mn:0000564A                 jnz     short loc_5672
.text$mn:0000564C
.text$mn:0000564C loc_564C:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)+32j
.text$mn:0000564C                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00005651                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00005656                 push    0
.text$mn:00005658                 push    4B2h
.text$mn:0000565D                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005662                 push    2
.text$mn:00005664                 call    __CrtDbgReportW
.text$mn:00005669                 add     esp, 18h
.text$mn:0000566C                 cmp     eax, 1
.text$mn:0000566F                 jnz     short loc_5672
.text$mn:00005671                 int     3               ; Trap to Debugger
.text$mn:00005672
.text$mn:00005672 loc_5672:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)+36j
.text$mn:00005672                                         ; std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)+5Bj
.text$mn:00005672                 push    0
.text$mn:00005674                 push    4B2h
.text$mn:00005679                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000567E                 push    offset ??_C@_1KG@EEBFNKPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAt?$AAT?$AAb?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl?$AAa@ ; "std::vector<struct tTbData *,class std:"...
.text$mn:00005683                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00005688                 call    __invalid_parameter
.text$mn:0000568D                 add     esp, 14h
.text$mn:00005690
.text$mn:00005690 loc_5690:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)+12j
.text$mn:00005690                 mov     eax, [ebp+var_4]
.text$mn:00005693                 mov     ecx, [eax+4]
.text$mn:00005696                 mov     edx, [ebp+arg_0]
.text$mn:00005699                 lea     eax, [ecx+edx*4]
.text$mn:0000569C                 mov     esp, ebp
.text$mn:0000569E                 pop     ebp
.text$mn:0000569F                 retn    4
.text$mn:0000569F ??A?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEAAPAUtTbData@@I@Z endp
.text$mn:0000569F
.text$mn:0000569F ; ---------------------------------------------------------------------------
.text$mn:000056A2                 align 4
.text$mn:000056A2 _text$mn        ends
.text$mn:000056A2
.text$mn:000056A4 ; ===========================================================================
.text$mn:000056A4
.text$mn:000056A4 ; Segment type: Pure code
.text$mn:000056A4 ; Segment permissions: Read/Execute
.text$mn:000056A4 _text$mn        segment para public 'CODE' use32
.text$mn:000056A4                 assume cs:_text$mn
.text$mn:000056A4                 ;org 56A4h
.text$mn:000056A4 ; COMDAT (pick any)
.text$mn:000056A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000056A4
.text$mn:000056A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000056A4
.text$mn:000056A4 ; Attributes: bp-based frame
.text$mn:000056A4
.text$mn:000056A4 ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<struct tTbData *>>> __thiscall std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<struct tTbData *>>>::operator+(int)const
.text$mn:000056A4                 public ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QBE?AV01@H@Z
.text$mn:000056A4 ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QBE?AV01@H@Z proc near
.text$mn:000056A4                                         ; CODE XREF: DockingCont::removeToolbar(tTbData)+DDp
.text$mn:000056A4
.text$mn:000056A4 var_20          = byte ptr -20h
.text$mn:000056A4 var_14          = dword ptr -14h
.text$mn:000056A4 var_10          = dword ptr -10h
.text$mn:000056A4 var_C           = dword ptr -0Ch
.text$mn:000056A4 var_4           = dword ptr -4
.text$mn:000056A4 arg_0           = dword ptr  8
.text$mn:000056A4 arg_4           = dword ptr  0Ch
.text$mn:000056A4
.text$mn:000056A4                 push    ebp
.text$mn:000056A5                 mov     ebp, esp
.text$mn:000056A7                 push    0FFFFFFFFh
.text$mn:000056A9                 push    offset __ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QBE?AV01@H@Z
.text$mn:000056AE                 mov     eax, large fs:0
.text$mn:000056B4                 push    eax
.text$mn:000056B5                 sub     esp, 14h
.text$mn:000056B8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000056BD                 xor     eax, ebp
.text$mn:000056BF                 push    eax
.text$mn:000056C0                 lea     eax, [ebp+var_C]
.text$mn:000056C3                 mov     large fs:0, eax
.text$mn:000056C9                 mov     [ebp+var_14], ecx
.text$mn:000056CC                 mov     [ebp+var_10], 0
.text$mn:000056D3                 mov     eax, [ebp+var_14]
.text$mn:000056D6                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:000056D7                 lea     ecx, [ebp+var_20]
.text$mn:000056DA                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>> const &)
.text$mn:000056DF                 mov     [ebp+var_4], 1
.text$mn:000056E6                 mov     ecx, [ebp+arg_4]
.text$mn:000056E9                 push    ecx
.text$mn:000056EA                 lea     ecx, [ebp+var_20]
.text$mn:000056ED                 call    ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+=(int)
.text$mn:000056F2                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:000056F3                 mov     ecx, [ebp+arg_0]
.text$mn:000056F6                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>> const &)
.text$mn:000056FB                 mov     edx, [ebp+var_10]
.text$mn:000056FE                 or      edx, 1
.text$mn:00005701                 mov     [ebp+var_10], edx
.text$mn:00005704                 mov     byte ptr [ebp+var_4], 0
.text$mn:00005708                 lea     ecx, [ebp+var_20]
.text$mn:0000570B                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$mn:00005710                 mov     eax, [ebp+arg_0]
.text$mn:00005713                 mov     ecx, [ebp+var_C]
.text$mn:00005716                 mov     large fs:0, ecx
.text$mn:0000571D                 pop     ecx
.text$mn:0000571E                 mov     esp, ebp
.text$mn:00005720                 pop     ebp
.text$mn:00005721                 retn    8
.text$mn:00005721 ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QBE?AV01@H@Z endp
.text$mn:00005721
.text$mn:00005721 _text$mn        ends
.text$mn:00005721
.text$x:00005724 ; ===========================================================================
.text$x:00005724
.text$x:00005724 ; Segment type: Pure code
.text$x:00005724 ; Segment permissions: Read/Execute
.text$x:00005724 _text$x         segment para public 'CODE' use32
.text$x:00005724                 assume cs:_text$x
.text$x:00005724                 ;org 5724h
.text$x:00005724 ; COMDAT (pick associative to section at 56A4)
.text$x:00005724                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005724
.text$x:00005724 ; =============== S U B R O U T I N E =======================================
.text$x:00005724
.text$x:00005724
.text$x:00005724 __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QBE?AV01@H@Z$0 proc near
.text$x:00005724                                         ; DATA XREF: .xdata$x:00009068o
.text$x:00005724                 lea     ecx, [ebp-20h]
.text$x:00005727                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$x:00005727 __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QBE?AV01@H@Z$0 endp
.text$x:00005727
.text$x:0000572C
.text$x:0000572C ; =============== S U B R O U T I N E =======================================
.text$x:0000572C
.text$x:0000572C
.text$x:0000572C __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QBE?AV01@H@Z$1 proc near
.text$x:0000572C                                         ; DATA XREF: .xdata$x:00009060o
.text$x:0000572C                 mov     eax, [ebp-10h]
.text$x:0000572F                 and     eax, 1
.text$x:00005732                 jz      $LN5_0
.text$x:00005738                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:0000573C                 mov     ecx, [ebp+8]
.text$x:0000573F                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$x:00005744 ; ---------------------------------------------------------------------------
.text$x:00005744
.text$x:00005744 $LN5_0:                                 ; CODE XREF: __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QBE?AV01@H@Z$1+6j
.text$x:00005744                 retn
.text$x:00005744 __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QBE?AV01@H@Z$1 endp
.text$x:00005744
.text$x:00005745
.text$x:00005745 ; =============== S U B R O U T I N E =======================================
.text$x:00005745
.text$x:00005745
.text$x:00005745 __ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QBE?AV01@H@Z proc near
.text$x:00005745                                         ; DATA XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+(int)+5o
.text$x:00005745
.text$x:00005745 arg_4           = dword ptr  8
.text$x:00005745
.text$x:00005745                 mov     edx, [esp+arg_4]
.text$x:00005749                 lea     eax, [edx+0Ch]
.text$x:0000574C                 mov     ecx, [edx-18h]
.text$x:0000574F                 xor     ecx, eax
.text$x:00005751                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005756                 mov     eax, offset __ehfuncinfo$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QBE?AV01@H@Z
.text$x:0000575B                 jmp     ___CxxFrameHandler3
.text$x:0000575B __ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QBE?AV01@H@Z endp
.text$x:0000575B
.text$x:0000575B _text$x         ends
.text$x:0000575B
.text$mn:00005760 ; ===========================================================================
.text$mn:00005760
.text$mn:00005760 ; Segment type: Pure code
.text$mn:00005760 ; Segment permissions: Read/Execute
.text$mn:00005760 _text$mn        segment para public 'CODE' use32
.text$mn:00005760                 assume cs:_text$mn
.text$mn:00005760                 ;org 5760h
.text$mn:00005760 ; COMDAT (pick any)
.text$mn:00005760                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005760
.text$mn:00005760 ; =============== S U B R O U T I N E =======================================
.text$mn:00005760
.text$mn:00005760 ; Attributes: bp-based frame
.text$mn:00005760
.text$mn:00005760 ; public: class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct tTbData *>>> & __thiscall std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct tTbData *>>>::operator+=(int)
.text$mn:00005760                 public ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAEAAV01@H@Z
.text$mn:00005760 ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAEAAV01@H@Z proc near
.text$mn:00005760                                         ; CODE XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+=(int)+Ep
.text$mn:00005760
.text$mn:00005760 var_4           = dword ptr -4
.text$mn:00005760 arg_0           = dword ptr  8
.text$mn:00005760
.text$mn:00005760                 push    ebp
.text$mn:00005761                 mov     ebp, esp
.text$mn:00005763                 push    ecx
.text$mn:00005764                 push    esi
.text$mn:00005765                 mov     [ebp+var_4], ecx
.text$mn:00005768                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000576B                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00005770                 test    eax, eax
.text$mn:00005772                 jz      short loc_57A6
.text$mn:00005774                 mov     eax, [ebp+var_4]
.text$mn:00005777                 mov     ecx, [eax+8]
.text$mn:0000577A                 mov     edx, [ebp+arg_0]
.text$mn:0000577D                 lea     esi, [ecx+edx*4]
.text$mn:00005780                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005783                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00005788                 cmp     esi, [eax+4]
.text$mn:0000578B                 jb      short loc_57A6
.text$mn:0000578D                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005790                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00005795                 mov     ecx, [ebp+var_4]
.text$mn:00005798                 mov     edx, [ecx+8]
.text$mn:0000579B                 mov     ecx, [ebp+arg_0]
.text$mn:0000579E                 lea     edx, [edx+ecx*4]
.text$mn:000057A1                 cmp     [eax+8], edx
.text$mn:000057A4                 jnb     short loc_580E
.text$mn:000057A6
.text$mn:000057A6 loc_57A6:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+=(int)+12j
.text$mn:000057A6                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+=(int)+2Bj
.text$mn:000057A6                 push    9Fh ; 'Æ'       ; unsigned int
.text$mn:000057AB                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000057B0                 push    offset ??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@ ; "vector iterator + offset out of range"
.text$mn:000057B5                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000057BA                 add     esp, 0Ch
.text$mn:000057BD                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:000057C2                 test    eax, eax
.text$mn:000057C4                 jz      short loc_57CA
.text$mn:000057C6                 xor     ecx, ecx
.text$mn:000057C8                 jnz     short loc_57F0
.text$mn:000057CA
.text$mn:000057CA loc_57CA:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+=(int)+64j
.text$mn:000057CA                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:000057CF                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:000057D4                 push    0
.text$mn:000057D6                 push    0A0h ; 'Ã¡'
.text$mn:000057DB                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000057E0                 push    2
.text$mn:000057E2                 call    __CrtDbgReportW
.text$mn:000057E7                 add     esp, 18h
.text$mn:000057EA                 cmp     eax, 1
.text$mn:000057ED                 jnz     short loc_57F0
.text$mn:000057EF                 int     3               ; Trap to Debugger
.text$mn:000057F0
.text$mn:000057F0 loc_57F0:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+=(int)+68j
.text$mn:000057F0                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+=(int)+8Dj
.text$mn:000057F0                 push    0
.text$mn:000057F2                 push    0A0h ; 'Ã¡'
.text$mn:000057F7                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000057FC                 push    offset ??_C@_1OA@EFOMBAJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_Vector_const_iterator<class std::"...
.text$mn:00005801                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00005806                 call    __invalid_parameter
.text$mn:0000580B                 add     esp, 14h
.text$mn:0000580E
.text$mn:0000580E loc_580E:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+=(int)+44j
.text$mn:0000580E                 mov     eax, [ebp+var_4]
.text$mn:00005811                 mov     ecx, [eax+8]
.text$mn:00005814                 mov     edx, [ebp+arg_0]
.text$mn:00005817                 lea     eax, [ecx+edx*4]
.text$mn:0000581A                 mov     ecx, [ebp+var_4]
.text$mn:0000581D                 mov     [ecx+8], eax
.text$mn:00005820                 mov     eax, [ebp+var_4]
.text$mn:00005823                 pop     esi
.text$mn:00005824                 mov     esp, ebp
.text$mn:00005826                 pop     ebp
.text$mn:00005827                 retn    4
.text$mn:00005827 ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAEAAV01@H@Z endp
.text$mn:00005827
.text$mn:00005827 ; ---------------------------------------------------------------------------
.text$mn:0000582A                 align 4
.text$mn:0000582A _text$mn        ends
.text$mn:0000582A
.text$mn:0000582C ; ===========================================================================
.text$mn:0000582C
.text$mn:0000582C ; Segment type: Pure code
.text$mn:0000582C ; Segment permissions: Read/Execute
.text$mn:0000582C _text$mn        segment para public 'CODE' use32
.text$mn:0000582C                 assume cs:_text$mn
.text$mn:0000582C                 ;org 582Ch
.text$mn:0000582C ; COMDAT (pick any)
.text$mn:0000582C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000582C
.text$mn:0000582C ; =============== S U B R O U T I N E =======================================
.text$mn:0000582C
.text$mn:0000582C ; Attributes: bp-based frame
.text$mn:0000582C
.text$mn:0000582C ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<struct tTbData *>>> & __thiscall std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<struct tTbData *>>>::operator+=(int)
.text$mn:0000582C                 public ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAEAAV01@H@Z
.text$mn:0000582C ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAEAAV01@H@Z proc near
.text$mn:0000582C                                         ; CODE XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+(int)+49p
.text$mn:0000582C
.text$mn:0000582C var_4           = dword ptr -4
.text$mn:0000582C arg_0           = dword ptr  8
.text$mn:0000582C
.text$mn:0000582C                 push    ebp
.text$mn:0000582D                 mov     ebp, esp
.text$mn:0000582F                 push    ecx
.text$mn:00005830                 mov     [ebp+var_4], ecx
.text$mn:00005833                 mov     eax, [ebp+arg_0]
.text$mn:00005836                 push    eax
.text$mn:00005837                 mov     ecx, [ebp+var_4]
.text$mn:0000583A                 call    ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+=(int)
.text$mn:0000583F                 mov     eax, [ebp+var_4]
.text$mn:00005842                 mov     esp, ebp
.text$mn:00005844                 pop     ebp
.text$mn:00005845                 retn    4
.text$mn:00005845 ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAEAAV01@H@Z endp
.text$mn:00005845
.text$mn:00005845 _text$mn        ends
.text$mn:00005845
.text$mn:00005848 ; ===========================================================================
.text$mn:00005848
.text$mn:00005848 ; Segment type: Pure code
.text$mn:00005848 ; Segment permissions: Read/Execute
.text$mn:00005848 _text$mn        segment para public 'CODE' use32
.text$mn:00005848                 assume cs:_text$mn
.text$mn:00005848                 ;org 5848h
.text$mn:00005848 ; COMDAT (pick any)
.text$mn:00005848                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005848
.text$mn:00005848 ; =============== S U B R O U T I N E =======================================
.text$mn:00005848
.text$mn:00005848 ; Attributes: bp-based frame
.text$mn:00005848
.text$mn:00005848 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t *Str)
.text$mn:00005848                 public ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:00005848 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:00005848                                         ; CODE XREF: DockingCont::SelectTab(int)+27Ep
.text$mn:00005848                                         ; DockingCont::updateCaption(void)+B3p ...
.text$mn:00005848
.text$mn:00005848 var_4           = dword ptr -4
.text$mn:00005848 Str             = dword ptr  8
.text$mn:00005848
.text$mn:00005848                 push    ebp
.text$mn:00005849                 mov     ebp, esp
.text$mn:0000584B                 push    ecx
.text$mn:0000584C                 mov     [ebp+var_4], ecx
.text$mn:0000584F                 mov     eax, [ebp+Str]
.text$mn:00005852                 push    eax             ; Str
.text$mn:00005853                 mov     ecx, [ebp+var_4]
.text$mn:00005856                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)
.text$mn:0000585B                 mov     esp, ebp
.text$mn:0000585D                 pop     ebp
.text$mn:0000585E                 retn    4
.text$mn:0000585E ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:0000585E
.text$mn:0000585E ; ---------------------------------------------------------------------------
.text$mn:00005861                 align 4
.text$mn:00005861 _text$mn        ends
.text$mn:00005861
.text$mn:00005864 ; ===========================================================================
.text$mn:00005864
.text$mn:00005864 ; Segment type: Pure code
.text$mn:00005864 ; Segment permissions: Read/Execute
.text$mn:00005864 _text$mn        segment para public 'CODE' use32
.text$mn:00005864                 assume cs:_text$mn
.text$mn:00005864                 ;org 5864h
.text$mn:00005864 ; COMDAT (pick any)
.text$mn:00005864                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005864
.text$mn:00005864 ; =============== S U B R O U T I N E =======================================
.text$mn:00005864
.text$mn:00005864 ; Attributes: bp-based frame
.text$mn:00005864
.text$mn:00005864 ; public: virtual void * __thiscall DockingCont::`scalar deleting destructor'(unsigned int)
.text$mn:00005864                 public ??_GDockingCont@@UAEPAXI@Z
.text$mn:00005864 ??_GDockingCont@@UAEPAXI@Z proc near
.text$mn:00005864
.text$mn:00005864 var_4           = dword ptr -4
.text$mn:00005864 arg_0           = dword ptr  8
.text$mn:00005864
.text$mn:00005864                 push    ebp
.text$mn:00005865                 mov     ebp, esp
.text$mn:00005867                 push    ecx
.text$mn:00005868                 mov     [ebp+var_4], ecx
.text$mn:0000586B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000586E                 call    ??1DockingCont@@UAE@XZ ; DockingCont::~DockingCont(void)
.text$mn:00005873                 mov     eax, [ebp+arg_0]
.text$mn:00005876                 and     eax, 1
.text$mn:00005879                 jz      short loc_5887
.text$mn:0000587B                 mov     ecx, [ebp+var_4]
.text$mn:0000587E                 push    ecx             ; void *
.text$mn:0000587F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005884                 add     esp, 4
.text$mn:00005887
.text$mn:00005887 loc_5887:                               ; CODE XREF: DockingCont::`scalar deleting destructor'(uint)+15j
.text$mn:00005887                 mov     eax, [ebp+var_4]
.text$mn:0000588A                 mov     esp, ebp
.text$mn:0000588C                 pop     ebp
.text$mn:0000588D                 retn    4
.text$mn:0000588D ??_GDockingCont@@UAEPAXI@Z endp
.text$mn:0000588D
.text$mn:0000588D _text$mn        ends
.text$mn:0000588D
.text$mn:00005890 ; ===========================================================================
.text$mn:00005890
.text$mn:00005890 ; Segment type: Pure code
.text$mn:00005890 ; Segment permissions: Read/Execute
.text$mn:00005890 _text$mn        segment para public 'CODE' use32
.text$mn:00005890                 assume cs:_text$mn
.text$mn:00005890                 ;org 5890h
.text$mn:00005890 ; COMDAT (pick any)
.text$mn:00005890                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005890
.text$mn:00005890 ; =============== S U B R O U T I N E =======================================
.text$mn:00005890
.text$mn:00005890 ; Attributes: bp-based frame
.text$mn:00005890
.text$mn:00005890 ; public: virtual void * __thiscall StaticDialog::`scalar deleting destructor'(unsigned int)
.text$mn:00005890                 public ??_GStaticDialog@@UAEPAXI@Z
.text$mn:00005890 ??_GStaticDialog@@UAEPAXI@Z proc near
.text$mn:00005890
.text$mn:00005890 var_4           = dword ptr -4
.text$mn:00005890 arg_0           = dword ptr  8
.text$mn:00005890
.text$mn:00005890                 push    ebp
.text$mn:00005891                 mov     ebp, esp
.text$mn:00005893                 push    ecx
.text$mn:00005894                 mov     [ebp+var_4], ecx
.text$mn:00005897                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000589A                 call    ??1StaticDialog@@UAE@XZ ; StaticDialog::~StaticDialog(void)
.text$mn:0000589F                 mov     eax, [ebp+arg_0]
.text$mn:000058A2                 and     eax, 1
.text$mn:000058A5                 jz      short loc_58B3
.text$mn:000058A7                 mov     ecx, [ebp+var_4]
.text$mn:000058AA                 push    ecx             ; void *
.text$mn:000058AB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000058B0                 add     esp, 4
.text$mn:000058B3
.text$mn:000058B3 loc_58B3:                               ; CODE XREF: StaticDialog::`scalar deleting destructor'(uint)+15j
.text$mn:000058B3                 mov     eax, [ebp+var_4]
.text$mn:000058B6                 mov     esp, ebp
.text$mn:000058B8                 pop     ebp
.text$mn:000058B9                 retn    4
.text$mn:000058B9 ??_GStaticDialog@@UAEPAXI@Z endp
.text$mn:000058B9
.text$mn:000058B9 _text$mn        ends
.text$mn:000058B9
.text$mn:000058BC ; ===========================================================================
.text$mn:000058BC
.text$mn:000058BC ; Segment type: Pure code
.text$mn:000058BC ; Segment permissions: Read/Execute
.text$mn:000058BC _text$mn        segment para public 'CODE' use32
.text$mn:000058BC                 assume cs:_text$mn
.text$mn:000058BC                 ;org 58BCh
.text$mn:000058BC ; COMDAT (pick any)
.text$mn:000058BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000058BC
.text$mn:000058BC ; =============== S U B R O U T I N E =======================================
.text$mn:000058BC
.text$mn:000058BC ; Attributes: bp-based frame
.text$mn:000058BC
.text$mn:000058BC ; public: virtual void * __thiscall ToolTip::`scalar deleting destructor'(unsigned int)
.text$mn:000058BC                 public ??_GToolTip@@UAEPAXI@Z
.text$mn:000058BC ??_GToolTip@@UAEPAXI@Z proc near
.text$mn:000058BC
.text$mn:000058BC var_4           = dword ptr -4
.text$mn:000058BC arg_0           = dword ptr  8
.text$mn:000058BC
.text$mn:000058BC                 push    ebp
.text$mn:000058BD                 mov     ebp, esp
.text$mn:000058BF                 push    ecx
.text$mn:000058C0                 mov     [ebp+var_4], ecx
.text$mn:000058C3                 mov     ecx, [ebp+var_4] ; this
.text$mn:000058C6                 call    ??1ToolTip@@UAE@XZ ; ToolTip::~ToolTip(void)
.text$mn:000058CB                 mov     eax, [ebp+arg_0]
.text$mn:000058CE                 and     eax, 1
.text$mn:000058D1                 jz      short loc_58DF
.text$mn:000058D3                 mov     ecx, [ebp+var_4]
.text$mn:000058D6                 push    ecx             ; void *
.text$mn:000058D7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000058DC                 add     esp, 4
.text$mn:000058DF
.text$mn:000058DF loc_58DF:                               ; CODE XREF: ToolTip::`scalar deleting destructor'(uint)+15j
.text$mn:000058DF                 mov     eax, [ebp+var_4]
.text$mn:000058E2                 mov     esp, ebp
.text$mn:000058E4                 pop     ebp
.text$mn:000058E5                 retn    4
.text$mn:000058E5 ??_GToolTip@@UAEPAXI@Z endp
.text$mn:000058E5
.text$mn:000058E5 _text$mn        ends
.text$mn:000058E5
.text$mn:000058E8 ; ===========================================================================
.text$mn:000058E8
.text$mn:000058E8 ; Segment type: Pure code
.text$mn:000058E8 ; Segment permissions: Read/Execute
.text$mn:000058E8 _text$mn        segment para public 'CODE' use32
.text$mn:000058E8                 assume cs:_text$mn
.text$mn:000058E8                 ;org 58E8h
.text$mn:000058E8 ; COMDAT (pick any)
.text$mn:000058E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000058E8
.text$mn:000058E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000058E8
.text$mn:000058E8 ; Attributes: bp-based frame
.text$mn:000058E8
.text$mn:000058E8 ; public: virtual void * __thiscall Window::`scalar deleting destructor'(unsigned int)
.text$mn:000058E8                 public ??_GWindow@@UAEPAXI@Z
.text$mn:000058E8 ??_GWindow@@UAEPAXI@Z proc near
.text$mn:000058E8
.text$mn:000058E8 var_4           = dword ptr -4
.text$mn:000058E8 arg_0           = dword ptr  8
.text$mn:000058E8
.text$mn:000058E8                 push    ebp
.text$mn:000058E9                 mov     ebp, esp
.text$mn:000058EB                 push    ecx
.text$mn:000058EC                 mov     [ebp+var_4], ecx
.text$mn:000058EF                 mov     ecx, [ebp+var_4] ; this
.text$mn:000058F2                 call    ??1Window@@UAE@XZ ; Window::~Window(void)
.text$mn:000058F7                 mov     eax, [ebp+arg_0]
.text$mn:000058FA                 and     eax, 1
.text$mn:000058FD                 jz      short loc_590B
.text$mn:000058FF                 mov     ecx, [ebp+var_4]
.text$mn:00005902                 push    ecx             ; void *
.text$mn:00005903                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005908                 add     esp, 4
.text$mn:0000590B
.text$mn:0000590B loc_590B:                               ; CODE XREF: Window::`scalar deleting destructor'(uint)+15j
.text$mn:0000590B                 mov     eax, [ebp+var_4]
.text$mn:0000590E                 mov     esp, ebp
.text$mn:00005910                 pop     ebp
.text$mn:00005911                 retn    4
.text$mn:00005911 ??_GWindow@@UAEPAXI@Z endp
.text$mn:00005911
.text$mn:00005911 _text$mn        ends
.text$mn:00005911
.text$mn:00005914 ; ===========================================================================
.text$mn:00005914
.text$mn:00005914 ; Segment type: Pure code
.text$mn:00005914 ; Segment permissions: Read/Execute
.text$mn:00005914 _text$mn        segment para public 'CODE' use32
.text$mn:00005914                 assume cs:_text$mn
.text$mn:00005914                 ;org 5914h
.text$mn:00005914 ; COMDAT (pick any)
.text$mn:00005914                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005914
.text$mn:00005914 ; =============== S U B R O U T I N E =======================================
.text$mn:00005914
.text$mn:00005914 ; Attributes: bp-based frame
.text$mn:00005914
.text$mn:00005914 ; public: virtual void * __thiscall std::_Generic_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00005914                 public ??_G_Generic_error_category@std@@UAEPAXI@Z
.text$mn:00005914 ??_G_Generic_error_category@std@@UAEPAXI@Z proc near
.text$mn:00005914
.text$mn:00005914 var_4           = dword ptr -4
.text$mn:00005914 arg_0           = dword ptr  8
.text$mn:00005914
.text$mn:00005914                 push    ebp
.text$mn:00005915                 mov     ebp, esp
.text$mn:00005917                 push    ecx
.text$mn:00005918                 mov     [ebp+var_4], ecx
.text$mn:0000591B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000591E                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00005923                 mov     eax, [ebp+arg_0]
.text$mn:00005926                 and     eax, 1
.text$mn:00005929                 jz      short loc_5937
.text$mn:0000592B                 mov     ecx, [ebp+var_4]
.text$mn:0000592E                 push    ecx             ; void *
.text$mn:0000592F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005934                 add     esp, 4
.text$mn:00005937
.text$mn:00005937 loc_5937:                               ; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00005937                 mov     eax, [ebp+var_4]
.text$mn:0000593A                 mov     esp, ebp
.text$mn:0000593C                 pop     ebp
.text$mn:0000593D                 retn    4
.text$mn:0000593D ??_G_Generic_error_category@std@@UAEPAXI@Z endp
.text$mn:0000593D
.text$mn:0000593D _text$mn        ends
.text$mn:0000593D
.text$mn:00005940 ; ===========================================================================
.text$mn:00005940
.text$mn:00005940 ; Segment type: Pure code
.text$mn:00005940 ; Segment permissions: Read/Execute
.text$mn:00005940 _text$mn        segment para public 'CODE' use32
.text$mn:00005940                 assume cs:_text$mn
.text$mn:00005940                 ;org 5940h
.text$mn:00005940 ; COMDAT (pick any)
.text$mn:00005940                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005940
.text$mn:00005940 ; =============== S U B R O U T I N E =======================================
.text$mn:00005940
.text$mn:00005940 ; Attributes: bp-based frame
.text$mn:00005940
.text$mn:00005940 ; public: virtual void * __thiscall std::_Iostream_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00005940                 public ??_G_Iostream_error_category@std@@UAEPAXI@Z
.text$mn:00005940 ??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
.text$mn:00005940
.text$mn:00005940 var_4           = dword ptr -4
.text$mn:00005940 arg_0           = dword ptr  8
.text$mn:00005940
.text$mn:00005940                 push    ebp
.text$mn:00005941                 mov     ebp, esp
.text$mn:00005943                 push    ecx
.text$mn:00005944                 mov     [ebp+var_4], ecx
.text$mn:00005947                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000594A                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$mn:0000594F                 mov     eax, [ebp+arg_0]
.text$mn:00005952                 and     eax, 1
.text$mn:00005955                 jz      short loc_5963
.text$mn:00005957                 mov     ecx, [ebp+var_4]
.text$mn:0000595A                 push    ecx             ; void *
.text$mn:0000595B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005960                 add     esp, 4
.text$mn:00005963
.text$mn:00005963 loc_5963:                               ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00005963                 mov     eax, [ebp+var_4]
.text$mn:00005966                 mov     esp, ebp
.text$mn:00005968                 pop     ebp
.text$mn:00005969                 retn    4
.text$mn:00005969 ??_G_Iostream_error_category@std@@UAEPAXI@Z endp
.text$mn:00005969
.text$mn:00005969 _text$mn        ends
.text$mn:00005969
.text$mn:0000596C ; ===========================================================================
.text$mn:0000596C
.text$mn:0000596C ; Segment type: Pure code
.text$mn:0000596C ; Segment permissions: Read/Execute
.text$mn:0000596C _text$mn        segment para public 'CODE' use32
.text$mn:0000596C                 assume cs:_text$mn
.text$mn:0000596C                 ;org 596Ch
.text$mn:0000596C ; COMDAT (pick any)
.text$mn:0000596C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000596C
.text$mn:0000596C ; =============== S U B R O U T I N E =======================================
.text$mn:0000596C
.text$mn:0000596C ; Attributes: bp-based frame
.text$mn:0000596C
.text$mn:0000596C ; public: virtual void * __thiscall std::_System_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:0000596C                 public ??_G_System_error_category@std@@UAEPAXI@Z
.text$mn:0000596C ??_G_System_error_category@std@@UAEPAXI@Z proc near
.text$mn:0000596C
.text$mn:0000596C var_4           = dword ptr -4
.text$mn:0000596C arg_0           = dword ptr  8
.text$mn:0000596C
.text$mn:0000596C                 push    ebp
.text$mn:0000596D                 mov     ebp, esp
.text$mn:0000596F                 push    ecx
.text$mn:00005970                 mov     [ebp+var_4], ecx
.text$mn:00005973                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005976                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$mn:0000597B                 mov     eax, [ebp+arg_0]
.text$mn:0000597E                 and     eax, 1
.text$mn:00005981                 jz      short loc_598F
.text$mn:00005983                 mov     ecx, [ebp+var_4]
.text$mn:00005986                 push    ecx             ; void *
.text$mn:00005987                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000598C                 add     esp, 4
.text$mn:0000598F
.text$mn:0000598F loc_598F:                               ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:0000598F                 mov     eax, [ebp+var_4]
.text$mn:00005992                 mov     esp, ebp
.text$mn:00005994                 pop     ebp
.text$mn:00005995                 retn    4
.text$mn:00005995 ??_G_System_error_category@std@@UAEPAXI@Z endp
.text$mn:00005995
.text$mn:00005995 _text$mn        ends
.text$mn:00005995
.text$mn:00005998 ; ===========================================================================
.text$mn:00005998
.text$mn:00005998 ; Segment type: Pure code
.text$mn:00005998 ; Segment permissions: Read/Execute
.text$mn:00005998 _text$mn        segment para public 'CODE' use32
.text$mn:00005998                 assume cs:_text$mn
.text$mn:00005998                 ;org 5998h
.text$mn:00005998 ; COMDAT (pick any)
.text$mn:00005998                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005998
.text$mn:00005998 ; =============== S U B R O U T I N E =======================================
.text$mn:00005998
.text$mn:00005998 ; Attributes: bp-based frame
.text$mn:00005998
.text$mn:00005998 ; public: virtual void * __thiscall std::error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00005998                 public ??_Gerror_category@std@@UAEPAXI@Z
.text$mn:00005998 ??_Gerror_category@std@@UAEPAXI@Z proc near
.text$mn:00005998
.text$mn:00005998 var_4           = dword ptr -4
.text$mn:00005998 arg_0           = dword ptr  8
.text$mn:00005998
.text$mn:00005998                 push    ebp
.text$mn:00005999                 mov     ebp, esp
.text$mn:0000599B                 push    ecx
.text$mn:0000599C                 mov     [ebp+var_4], ecx
.text$mn:0000599F                 mov     ecx, [ebp+var_4] ; this
.text$mn:000059A2                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:000059A7                 mov     eax, [ebp+arg_0]
.text$mn:000059AA                 and     eax, 1
.text$mn:000059AD                 jz      short loc_59BB
.text$mn:000059AF                 mov     ecx, [ebp+var_4]
.text$mn:000059B2                 push    ecx             ; void *
.text$mn:000059B3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000059B8                 add     esp, 4
.text$mn:000059BB
.text$mn:000059BB loc_59BB:                               ; CODE XREF: std::error_category::`scalar deleting destructor'(uint)+15j
.text$mn:000059BB                 mov     eax, [ebp+var_4]
.text$mn:000059BE                 mov     esp, ebp
.text$mn:000059C0                 pop     ebp
.text$mn:000059C1                 retn    4
.text$mn:000059C1 ??_Gerror_category@std@@UAEPAXI@Z endp
.text$mn:000059C1
.text$mn:000059C1 _text$mn        ends
.text$mn:000059C1
.text$di:000059C4 ; ===========================================================================
.text$di:000059C4
.text$di:000059C4 ; Segment type: Pure code
.text$di:000059C4 ; Segment permissions: Read/Execute
.text$di:000059C4 _text$di        segment para public 'CODE' use32
.text$di:000059C4                 assume cs:_text$di
.text$di:000059C4                 ;org 59C4h
.text$di:000059C4 ; COMDAT (pick any)
.text$di:000059C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000059C4
.text$di:000059C4 ; =============== S U B R O U T I N E =======================================
.text$di:000059C4
.text$di:000059C4 ; Attributes: bp-based frame
.text$di:000059C4
.text$di:000059C4 ; void __cdecl `dynamic initializer for 'public: static class std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.text$di:000059C4 ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$di:000059C4                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Generic_object$initializer$)(void)o
.text$di:000059C4                 push    ebp
.text$di:000059C5                 mov     ebp, esp
.text$di:000059C7                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$di:000059CC                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$di:000059D1                 push    offset ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:000059D6                 call    _atexit
.text$di:000059DB                 add     esp, 4
.text$di:000059DE                 pop     ebp
.text$di:000059DF                 retn
.text$di:000059DF ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$di:000059DF
.text$di:000059DF _text$di        ends
.text$di:000059DF
.text$di:000059E0 ; ===========================================================================
.text$di:000059E0
.text$di:000059E0 ; Segment type: Pure code
.text$di:000059E0 ; Segment permissions: Read/Execute
.text$di:000059E0 _text$di        segment para public 'CODE' use32
.text$di:000059E0                 assume cs:_text$di
.text$di:000059E0                 ;org 59E0h
.text$di:000059E0 ; COMDAT (pick any)
.text$di:000059E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000059E0
.text$di:000059E0 ; =============== S U B R O U T I N E =======================================
.text$di:000059E0
.text$di:000059E0 ; Attributes: bp-based frame
.text$di:000059E0
.text$di:000059E0 ; void __cdecl `dynamic initializer for 'public: static class std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.text$di:000059E0 ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$di:000059E0                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Iostream_object$initializer$)(void)o
.text$di:000059E0                 push    ebp
.text$di:000059E1                 mov     ebp, esp
.text$di:000059E3                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$di:000059E8                 call    ??0_Iostream_error_category@std@@QAE@XZ ; std::_Iostream_error_category::_Iostream_error_category(void)
.text$di:000059ED                 push    offset ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:000059F2                 call    _atexit
.text$di:000059F7                 add     esp, 4
.text$di:000059FA                 pop     ebp
.text$di:000059FB                 retn
.text$di:000059FB ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$di:000059FB
.text$di:000059FB _text$di        ends
.text$di:000059FB
.text$di:000059FC ; ===========================================================================
.text$di:000059FC
.text$di:000059FC ; Segment type: Pure code
.text$di:000059FC ; Segment permissions: Read/Execute
.text$di:000059FC _text$di        segment para public 'CODE' use32
.text$di:000059FC                 assume cs:_text$di
.text$di:000059FC                 ;org 59FCh
.text$di:000059FC ; COMDAT (pick any)
.text$di:000059FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000059FC
.text$di:000059FC ; =============== S U B R O U T I N E =======================================
.text$di:000059FC
.text$di:000059FC ; Attributes: bp-based frame
.text$di:000059FC
.text$di:000059FC ; void __cdecl `dynamic initializer for 'public: static class std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.text$di:000059FC ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$di:000059FC                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_System_object$initializer$)(void)o
.text$di:000059FC                 push    ebp
.text$di:000059FD                 mov     ebp, esp
.text$di:000059FF                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$di:00005A04                 call    ??0_System_error_category@std@@QAE@XZ ; std::_System_error_category::_System_error_category(void)
.text$di:00005A09                 push    offset ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00005A0E                 call    _atexit
.text$di:00005A13                 add     esp, 4
.text$di:00005A16                 pop     ebp
.text$di:00005A17                 retn
.text$di:00005A17 ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$di:00005A17
.text$di:00005A17 _text$di        ends
.text$di:00005A17
.text$di:00005A18 ; ===========================================================================
.text$di:00005A18
.text$di:00005A18 ; Segment type: Pure code
.text$di:00005A18 ; Segment permissions: Read/Execute
.text$di:00005A18 _text$di        segment para public 'CODE' use32
.text$di:00005A18                 assume cs:_text$di
.text$di:00005A18                 ;org 5A18h
.text$di:00005A18 ; COMDAT (pick any)
.text$di:00005A18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00005A18
.text$di:00005A18 ; =============== S U B R O U T I N E =======================================
.text$di:00005A18
.text$di:00005A18 ; Attributes: bp-based frame
.text$di:00005A18
.text$di:00005A18 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id''(void)
.text$di:00005A18 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00005A18                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id$initializer$)(void)o
.text$di:00005A18                 push    ebp
.text$di:00005A19                 mov     ebp, esp
.text$di:00005A1B                 push    0               ; unsigned int
.text$di:00005A1D                 mov     ecx, offset ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:00005A22                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00005A27                 pop     ebp
.text$di:00005A28                 retn
.text$di:00005A28 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00005A28
.text$di:00005A28 ; ---------------------------------------------------------------------------
.text$di:00005A29                 align 4
.text$di:00005A29 _text$di        ends
.text$di:00005A29
.text$di:00005A2C ; ===========================================================================
.text$di:00005A2C
.text$di:00005A2C ; Segment type: Pure code
.text$di:00005A2C ; Segment permissions: Read/Execute
.text$di:00005A2C _text$di        segment para public 'CODE' use32
.text$di:00005A2C                 assume cs:_text$di
.text$di:00005A2C                 ;org 5A2Ch
.text$di:00005A2C ; COMDAT (pick any)
.text$di:00005A2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00005A2C
.text$di:00005A2C ; =============== S U B R O U T I N E =======================================
.text$di:00005A2C
.text$di:00005A2C ; Attributes: bp-based frame
.text$di:00005A2C
.text$di:00005A2C ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id''(void)
.text$di:00005A2C ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00005A2C                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id$initializer$)(void)o
.text$di:00005A2C                 push    ebp
.text$di:00005A2D                 mov     ebp, esp
.text$di:00005A2F                 push    0               ; unsigned int
.text$di:00005A31                 mov     ecx, offset ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:00005A36                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00005A3B                 pop     ebp
.text$di:00005A3C                 retn
.text$di:00005A3C ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00005A3C
.text$di:00005A3C ; ---------------------------------------------------------------------------
.text$di:00005A3D                 align 10h
.text$di:00005A3D _text$di        ends
.text$di:00005A3D
.text$di:00005A40 ; ===========================================================================
.text$di:00005A40
.text$di:00005A40 ; Segment type: Pure code
.text$di:00005A40 ; Segment permissions: Read/Execute
.text$di:00005A40 _text$di        segment para public 'CODE' use32
.text$di:00005A40                 assume cs:_text$di
.text$di:00005A40                 ;org 5A40h
.text$di:00005A40 ; COMDAT (pick any)
.text$di:00005A40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00005A40
.text$di:00005A40 ; =============== S U B R O U T I N E =======================================
.text$di:00005A40
.text$di:00005A40 ; Attributes: bp-based frame
.text$di:00005A40
.text$di:00005A40 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<char>::id''(void)
.text$di:00005A40 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00005A40                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<char>::id$initializer$)(void)o
.text$di:00005A40                 push    ebp
.text$di:00005A41                 mov     ebp, esp
.text$di:00005A43                 push    0               ; unsigned int
.text$di:00005A45                 mov     ecx, offset ?id@?$numpunct@D@std@@2V0locale@2@A ; this
.text$di:00005A4A                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00005A4F                 pop     ebp
.text$di:00005A50                 retn
.text$di:00005A50 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00005A50
.text$di:00005A50 ; ---------------------------------------------------------------------------
.text$di:00005A51                 align 4
.text$di:00005A51 _text$di        ends
.text$di:00005A51
.text$di:00005A54 ; ===========================================================================
.text$di:00005A54
.text$di:00005A54 ; Segment type: Pure code
.text$di:00005A54 ; Segment permissions: Read/Execute
.text$di:00005A54 _text$di        segment para public 'CODE' use32
.text$di:00005A54                 assume cs:_text$di
.text$di:00005A54                 ;org 5A54h
.text$di:00005A54 ; COMDAT (pick any)
.text$di:00005A54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00005A54
.text$di:00005A54 ; =============== S U B R O U T I N E =======================================
.text$di:00005A54
.text$di:00005A54 ; Attributes: bp-based frame
.text$di:00005A54
.text$di:00005A54 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<wchar_t>::id''(void)
.text$di:00005A54 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00005A54                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<wchar_t>::id$initializer$)(void)o
.text$di:00005A54                 push    ebp
.text$di:00005A55                 mov     ebp, esp
.text$di:00005A57                 push    0               ; unsigned int
.text$di:00005A59                 mov     ecx, offset ?id@?$numpunct@_W@std@@2V0locale@2@A ; this
.text$di:00005A5E                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00005A63                 pop     ebp
.text$di:00005A64                 retn
.text$di:00005A64 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00005A64
.text$di:00005A64 ; ---------------------------------------------------------------------------
.text$di:00005A65                 align 4
.text$di:00005A65 _text$di        ends
.text$di:00005A65
.text$di:00005A68 ; ===========================================================================
.text$di:00005A68
.text$di:00005A68 ; Segment type: Pure code
.text$di:00005A68 ; Segment permissions: Read/Execute
.text$di:00005A68 _text$di        segment para public 'CODE' use32
.text$di:00005A68                 assume cs:_text$di
.text$di:00005A68                 ;org 5A68h
.text$di:00005A68 ; COMDAT (pick any)
.text$di:00005A68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00005A68
.text$di:00005A68 ; =============== S U B R O U T I N E =======================================
.text$di:00005A68
.text$di:00005A68 ; Attributes: bp-based frame
.text$di:00005A68
.text$di:00005A68 ; void __cdecl std::`dynamic initializer for 'allocator_arg''(void)
.text$di:00005A68 ??__Eallocator_arg@std@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_allocator_arg$initializer$o
.text$di:00005A68
.text$di:00005A68 var_1           = byte ptr -1
.text$di:00005A68
.text$di:00005A68                 push    ebp
.text$di:00005A69                 mov     ebp, esp
.text$di:00005A6B                 push    ecx
.text$di:00005A6C                 xor     eax, eax
.text$di:00005A6E                 mov     [ebp+var_1], al
.text$di:00005A71                 mov     esp, ebp
.text$di:00005A73                 pop     ebp
.text$di:00005A74                 retn
.text$di:00005A74 ??__Eallocator_arg@std@@YAXXZ endp
.text$di:00005A74
.text$di:00005A74 ; ---------------------------------------------------------------------------
.text$di:00005A75                 align 4
.text$di:00005A75 _text$di        ends
.text$di:00005A75
.text$di:00005A78 ; ===========================================================================
.text$di:00005A78
.text$di:00005A78 ; Segment type: Pure code
.text$di:00005A78 ; Segment permissions: Read/Execute
.text$di:00005A78 _text$di        segment para public 'CODE' use32
.text$di:00005A78                 assume cs:_text$di
.text$di:00005A78                 ;org 5A78h
.text$di:00005A78 ; COMDAT (pick any)
.text$di:00005A78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00005A78
.text$di:00005A78 ; =============== S U B R O U T I N E =======================================
.text$di:00005A78
.text$di:00005A78 ; Attributes: bp-based frame
.text$di:00005A78
.text$di:00005A78 ; void __cdecl std::`dynamic initializer for 'piecewise_construct''(void)
.text$di:00005A78 ??__Epiecewise_construct@std@@YAXXZ proc near
.text$di:00005A78                                         ; DATA XREF: .CRT$XCU:_piecewise_construct$initializer$o
.text$di:00005A78
.text$di:00005A78 var_1           = byte ptr -1
.text$di:00005A78
.text$di:00005A78                 push    ebp
.text$di:00005A79                 mov     ebp, esp
.text$di:00005A7B                 push    ecx
.text$di:00005A7C                 xor     eax, eax
.text$di:00005A7E                 mov     [ebp+var_1], al
.text$di:00005A81                 mov     esp, ebp
.text$di:00005A83                 pop     ebp
.text$di:00005A84                 retn
.text$di:00005A84 ??__Epiecewise_construct@std@@YAXXZ endp
.text$di:00005A84
.text$di:00005A84 ; ---------------------------------------------------------------------------
.text$di:00005A85                 align 4
.text$di:00005A85 _text$di        ends
.text$di:00005A85
.text$yd:00005A88 ; ===========================================================================
.text$yd:00005A88
.text$yd:00005A88 ; Segment type: Pure code
.text$yd:00005A88 ; Segment permissions: Read/Execute
.text$yd:00005A88 _text$yd        segment para public 'CODE' use32
.text$yd:00005A88                 assume cs:_text$yd
.text$yd:00005A88                 ;org 5A88h
.text$yd:00005A88 ; COMDAT (pick any)
.text$yd:00005A88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00005A88
.text$yd:00005A88 ; =============== S U B R O U T I N E =======================================
.text$yd:00005A88
.text$yd:00005A88 ; Attributes: bp-based frame
.text$yd:00005A88
.text$yd:00005A88 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Generic_error_category std::_Error_objects<int>::_Generic_object''()
.text$yd:00005A88 ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$yd:00005A88                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+Do
.text$yd:00005A88                 push    ebp
.text$yd:00005A89                 mov     ebp, esp
.text$yd:00005A8B                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$yd:00005A90                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$yd:00005A95                 pop     ebp
.text$yd:00005A96                 retn
.text$yd:00005A96 ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$yd:00005A96
.text$yd:00005A96 ; ---------------------------------------------------------------------------
.text$yd:00005A97                 align 4
.text$yd:00005A97 _text$yd        ends
.text$yd:00005A97
.text$yd:00005A98 ; ===========================================================================
.text$yd:00005A98
.text$yd:00005A98 ; Segment type: Pure code
.text$yd:00005A98 ; Segment permissions: Read/Execute
.text$yd:00005A98 _text$yd        segment para public 'CODE' use32
.text$yd:00005A98                 assume cs:_text$yd
.text$yd:00005A98                 ;org 5A98h
.text$yd:00005A98 ; COMDAT (pick any)
.text$yd:00005A98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00005A98
.text$yd:00005A98 ; =============== S U B R O U T I N E =======================================
.text$yd:00005A98
.text$yd:00005A98 ; Attributes: bp-based frame
.text$yd:00005A98
.text$yd:00005A98 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''()
.text$yd:00005A98 ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$yd:00005A98                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+Do
.text$yd:00005A98                 push    ebp
.text$yd:00005A99                 mov     ebp, esp
.text$yd:00005A9B                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$yd:00005AA0                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$yd:00005AA5                 pop     ebp
.text$yd:00005AA6                 retn
.text$yd:00005AA6 ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$yd:00005AA6
.text$yd:00005AA6 ; ---------------------------------------------------------------------------
.text$yd:00005AA7                 align 4
.text$yd:00005AA7 _text$yd        ends
.text$yd:00005AA7
.text$yd:00005AA8 ; ===========================================================================
.text$yd:00005AA8
.text$yd:00005AA8 ; Segment type: Pure code
.text$yd:00005AA8 ; Segment permissions: Read/Execute
.text$yd:00005AA8 _text$yd        segment para public 'CODE' use32
.text$yd:00005AA8                 assume cs:_text$yd
.text$yd:00005AA8                 ;org 5AA8h
.text$yd:00005AA8 ; COMDAT (pick any)
.text$yd:00005AA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00005AA8
.text$yd:00005AA8 ; =============== S U B R O U T I N E =======================================
.text$yd:00005AA8
.text$yd:00005AA8 ; Attributes: bp-based frame
.text$yd:00005AA8
.text$yd:00005AA8 ; void __cdecl `dynamic atexit destructor for 'public: static std::_System_error_category std::_Error_objects<int>::_System_object''()
.text$yd:00005AA8 ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$yd:00005AA8                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+Do
.text$yd:00005AA8                 push    ebp
.text$yd:00005AA9                 mov     ebp, esp
.text$yd:00005AAB                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$yd:00005AB0                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$yd:00005AB5                 pop     ebp
.text$yd:00005AB6                 retn
.text$yd:00005AB6 ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$yd:00005AB6
.text$yd:00005AB6 ; ---------------------------------------------------------------------------
.text$yd:00005AB7                 align 4
.text$yd:00005AB7 _text$yd        ends
.text$yd:00005AB7
.text$yd:00005AB8 ; ===========================================================================
.text$yd:00005AB8
.text$yd:00005AB8 ; Segment type: Pure code
.text$yd:00005AB8 ; Segment permissions: Read/Execute
.text$yd:00005AB8 _text$yd        segment para public 'CODE' use32
.text$yd:00005AB8                 assume cs:_text$yd
.text$yd:00005AB8                 ;org 5AB8h
.text$yd:00005AB8 ; COMDAT (pick any)
.text$yd:00005AB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00005AB8
.text$yd:00005AB8 ; =============== S U B R O U T I N E =======================================
.text$yd:00005AB8
.text$yd:00005AB8 ; Attributes: bp-based frame
.text$yd:00005AB8
.text$yd:00005AB8 ; void __cdecl `DockingCont::runProcCaption'::`2'::`dynamic atexit destructor for 'toolTip''()
.text$yd:00005AB8 ??__FtoolTip@?1??runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z@YAXXZ proc near
.text$yd:00005AB8                                         ; DATA XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+5Bo
.text$yd:00005AB8                 push    ebp
.text$yd:00005AB9                 mov     ebp, esp
.text$yd:00005ABB                 mov     ecx, offset ?toolTip@?1??runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4VToolTip@@A ; this
.text$yd:00005AC0                 call    ??1ToolTip@@UAE@XZ ; ToolTip::~ToolTip(void)
.text$yd:00005AC5                 pop     ebp
.text$yd:00005AC6                 retn
.text$yd:00005AC6 ??__FtoolTip@?1??runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z@YAXXZ endp
.text$yd:00005AC6
.text$yd:00005AC6 ; ---------------------------------------------------------------------------
.text$yd:00005AC7                 align 4
.text$yd:00005AC7 _text$yd        ends
.text$yd:00005AC7
.text$yd:00005AC8 ; ===========================================================================
.text$yd:00005AC8
.text$yd:00005AC8 ; Segment type: Pure code
.text$yd:00005AC8 ; Segment permissions: Read/Execute
.text$yd:00005AC8 _text$yd        segment para public 'CODE' use32
.text$yd:00005AC8                 assume cs:_text$yd
.text$yd:00005AC8                 ;org 5AC8h
.text$yd:00005AC8 ; COMDAT (pick any)
.text$yd:00005AC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00005AC8
.text$yd:00005AC8 ; =============== S U B R O U T I N E =======================================
.text$yd:00005AC8
.text$yd:00005AC8 ; Attributes: bp-based frame
.text$yd:00005AC8
.text$yd:00005AC8 ; void __cdecl `DockingCont::runProcTab'::`2'::`dynamic atexit destructor for 'toolTip''()
.text$yd:00005AC8 ??__FtoolTip@?1??runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z@YAXXZ proc near
.text$yd:00005AC8                                         ; DATA XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+58o
.text$yd:00005AC8                 push    ebp
.text$yd:00005AC9                 mov     ebp, esp
.text$yd:00005ACB                 mov     ecx, offset ?toolTip@?1??runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4VToolTip@@A ; this
.text$yd:00005AD0                 call    ??1ToolTip@@UAE@XZ ; ToolTip::~ToolTip(void)
.text$yd:00005AD5                 pop     ebp
.text$yd:00005AD6                 retn
.text$yd:00005AD6 ??__FtoolTip@?1??runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z@YAXXZ endp
.text$yd:00005AD6
.text$yd:00005AD6 ; ---------------------------------------------------------------------------
.text$yd:00005AD7                 align 4
.text$yd:00005AD7 _text$yd        ends
.text$yd:00005AD7
.text$mn:00005AD8 ; ===========================================================================
.text$mn:00005AD8
.text$mn:00005AD8 ; Segment type: Pure code
.text$mn:00005AD8 ; Segment permissions: Read/Execute
.text$mn:00005AD8 _text$mn        segment para public 'CODE' use32
.text$mn:00005AD8                 assume cs:_text$mn
.text$mn:00005AD8                 ;org 5AD8h
.text$mn:00005AD8 ; COMDAT (pick any)
.text$mn:00005AD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005AD8
.text$mn:00005AD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00005AD8
.text$mn:00005AD8 ; Attributes: bp-based frame
.text$mn:00005AD8
.text$mn:00005AD8 ; void __thiscall std::_Iterator_base12::_Adopt(std::_Iterator_base12 *this, const struct std::_Container_base12 *)
.text$mn:00005AD8                 public ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$mn:00005AD8 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
.text$mn:00005AD8                                         ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(tTbData * *,std::_Container_base12 const *)+45p
.text$mn:00005AD8                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+49p
.text$mn:00005AD8
.text$mn:00005AD8 var_1C          = byte ptr -1Ch
.text$mn:00005AD8 var_18          = byte ptr -18h
.text$mn:00005AD8 var_14          = dword ptr -14h
.text$mn:00005AD8 var_10          = dword ptr -10h
.text$mn:00005AD8 var_C           = dword ptr -0Ch
.text$mn:00005AD8 var_4           = dword ptr -4
.text$mn:00005AD8 arg_0           = dword ptr  8
.text$mn:00005AD8
.text$mn:00005AD8                 push    ebp
.text$mn:00005AD9                 mov     ebp, esp
.text$mn:00005ADB                 push    0FFFFFFFFh
.text$mn:00005ADD                 push    offset __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$mn:00005AE2                 mov     eax, large fs:0
.text$mn:00005AE8                 push    eax
.text$mn:00005AE9                 sub     esp, 10h
.text$mn:00005AEC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005AF1                 xor     eax, ebp
.text$mn:00005AF3                 push    eax
.text$mn:00005AF4                 lea     eax, [ebp+var_C]
.text$mn:00005AF7                 mov     large fs:0, eax
.text$mn:00005AFD                 mov     [ebp+var_10], ecx
.text$mn:00005B00                 cmp     [ebp+arg_0], 0
.text$mn:00005B04                 jnz     short loc_5B30
.text$mn:00005B06                 push    3               ; int
.text$mn:00005B08                 lea     ecx, [ebp+var_18] ; this
.text$mn:00005B0B                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00005B10                 mov     [ebp+var_4], 0
.text$mn:00005B17                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005B1A                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00005B1F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005B26                 lea     ecx, [ebp+var_18] ; this
.text$mn:00005B29                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00005B2E                 jmp     short loc_5B87
.text$mn:00005B30 ; ---------------------------------------------------------------------------
.text$mn:00005B30
.text$mn:00005B30 loc_5B30:                               ; CODE XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+2Cj
.text$mn:00005B30                 mov     eax, [ebp+arg_0]
.text$mn:00005B33                 mov     ecx, [eax]
.text$mn:00005B35                 mov     [ebp+var_14], ecx
.text$mn:00005B38                 mov     edx, [ebp+var_10]
.text$mn:00005B3B                 mov     eax, [edx]
.text$mn:00005B3D                 cmp     eax, [ebp+var_14]
.text$mn:00005B40                 jz      short loc_5B87
.text$mn:00005B42                 push    3               ; int
.text$mn:00005B44                 lea     ecx, [ebp+var_1C] ; this
.text$mn:00005B47                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00005B4C                 mov     [ebp+var_4], 1
.text$mn:00005B53                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005B56                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00005B5B                 mov     ecx, [ebp+var_10]
.text$mn:00005B5E                 mov     edx, [ebp+var_14]
.text$mn:00005B61                 mov     eax, [edx+4]
.text$mn:00005B64                 mov     [ecx+4], eax
.text$mn:00005B67                 mov     ecx, [ebp+var_14]
.text$mn:00005B6A                 mov     edx, [ebp+var_10]
.text$mn:00005B6D                 mov     [ecx+4], edx
.text$mn:00005B70                 mov     eax, [ebp+var_10]
.text$mn:00005B73                 mov     ecx, [ebp+var_14]
.text$mn:00005B76                 mov     [eax], ecx
.text$mn:00005B78                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005B7F                 lea     ecx, [ebp+var_1C] ; this
.text$mn:00005B82                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00005B87
.text$mn:00005B87 loc_5B87:                               ; CODE XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+56j
.text$mn:00005B87                                         ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+68j
.text$mn:00005B87                 mov     ecx, [ebp+var_C]
.text$mn:00005B8A                 mov     large fs:0, ecx
.text$mn:00005B91                 pop     ecx
.text$mn:00005B92                 mov     esp, ebp
.text$mn:00005B94                 pop     ebp
.text$mn:00005B95                 retn    4
.text$mn:00005B95 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z endp
.text$mn:00005B95
.text$mn:00005B95 _text$mn        ends
.text$mn:00005B95
.text$x:00005B98 ; ===========================================================================
.text$x:00005B98
.text$x:00005B98 ; Segment type: Pure code
.text$x:00005B98 ; Segment permissions: Read/Execute
.text$x:00005B98 _text$x         segment para public 'CODE' use32
.text$x:00005B98                 assume cs:_text$x
.text$x:00005B98                 ;org 5B98h
.text$x:00005B98 ; COMDAT (pick associative to section at 5AD8)
.text$x:00005B98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005B98
.text$x:00005B98 ; =============== S U B R O U T I N E =======================================
.text$x:00005B98
.text$x:00005B98
.text$x:00005B98 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 proc near
.text$x:00005B98                                         ; DATA XREF: .xdata$x:000085A0o
.text$x:00005B98                 lea     ecx, [ebp-18h]  ; this
.text$x:00005B9B                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00005B9B __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 endp
.text$x:00005B9B
.text$x:00005BA0
.text$x:00005BA0 ; =============== S U B R O U T I N E =======================================
.text$x:00005BA0
.text$x:00005BA0
.text$x:00005BA0 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 proc near
.text$x:00005BA0                                         ; DATA XREF: .xdata$x:000085A8o
.text$x:00005BA0                 lea     ecx, [ebp-1Ch]  ; this
.text$x:00005BA3                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00005BA3 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 endp
.text$x:00005BA3
.text$x:00005BA8
.text$x:00005BA8 ; =============== S U B R O U T I N E =======================================
.text$x:00005BA8
.text$x:00005BA8
.text$x:00005BA8 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
.text$x:00005BA8                                         ; DATA XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+5o
.text$x:00005BA8
.text$x:00005BA8 arg_4           = dword ptr  8
.text$x:00005BA8
.text$x:00005BA8                 mov     edx, [esp+arg_4]
.text$x:00005BAC                 lea     eax, [edx+0Ch]
.text$x:00005BAF                 mov     ecx, [edx-14h]
.text$x:00005BB2                 xor     ecx, eax
.text$x:00005BB4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005BB9                 mov     eax, offset __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$x:00005BBE                 jmp     ___CxxFrameHandler3
.text$x:00005BBE __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z endp
.text$x:00005BBE
.text$x:00005BBE ; ---------------------------------------------------------------------------
.text$x:00005BC3                 align 4
.text$x:00005BC3 _text$x         ends
.text$x:00005BC3
.text$mn:00005BC4 ; ===========================================================================
.text$mn:00005BC4
.text$mn:00005BC4 ; Segment type: Pure code
.text$mn:00005BC4 ; Segment permissions: Read/Execute
.text$mn:00005BC4 _text$mn        segment para public 'CODE' use32
.text$mn:00005BC4                 assume cs:_text$mn
.text$mn:00005BC4                 ;org 5BC4h
.text$mn:00005BC4 ; COMDAT (pick any)
.text$mn:00005BC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005BC4
.text$mn:00005BC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005BC4
.text$mn:00005BC4 ; Attributes: bp-based frame
.text$mn:00005BC4
.text$mn:00005BC4 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:00005BC4                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:00005BC4 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00005BC4                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+38p
.text$mn:00005BC4
.text$mn:00005BC4 var_10          = byte ptr -10h
.text$mn:00005BC4 var_8           = dword ptr -8
.text$mn:00005BC4 var_1           = byte ptr -1
.text$mn:00005BC4
.text$mn:00005BC4                 push    ebp
.text$mn:00005BC5                 mov     ebp, esp
.text$mn:00005BC7                 sub     esp, 10h
.text$mn:00005BCA                 mov     [ebp+var_8], ecx
.text$mn:00005BCD                 lea     ecx, [ebp+var_1]
.text$mn:00005BD0                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00005BD5                 push    1
.text$mn:00005BD7                 lea     ecx, [ebp+var_1]
.text$mn:00005BDA                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:00005BDF                 mov     ecx, [ebp+var_8]
.text$mn:00005BE2                 mov     [ecx], eax
.text$mn:00005BE4                 lea     ecx, [ebp+var_10] ; this
.text$mn:00005BE7                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00005BEC                 push    eax             ; int
.text$mn:00005BED                 mov     edx, [ebp+var_8]
.text$mn:00005BF0                 mov     eax, [edx]
.text$mn:00005BF2                 push    eax             ; void *
.text$mn:00005BF3                 lea     ecx, [ebp+var_1]
.text$mn:00005BF6                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00005BFB                 mov     ecx, [ebp+var_8]
.text$mn:00005BFE                 mov     edx, [ecx]
.text$mn:00005C00                 mov     eax, [ebp+var_8]
.text$mn:00005C03                 mov     [edx], eax
.text$mn:00005C05                 mov     esp, ebp
.text$mn:00005C07                 pop     ebp
.text$mn:00005C08                 retn
.text$mn:00005C08 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:00005C08
.text$mn:00005C08 ; ---------------------------------------------------------------------------
.text$mn:00005C09                 align 4
.text$mn:00005C09 _text$mn        ends
.text$mn:00005C09
.text$mn:00005C0C ; ===========================================================================
.text$mn:00005C0C
.text$mn:00005C0C ; Segment type: Pure code
.text$mn:00005C0C ; Segment permissions: Read/Execute
.text$mn:00005C0C _text$mn        segment para public 'CODE' use32
.text$mn:00005C0C                 assume cs:_text$mn
.text$mn:00005C0C                 ;org 5C0Ch
.text$mn:00005C0C ; COMDAT (pick any)
.text$mn:00005C0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C0C
.text$mn:00005C0C ; =============== S U B R O U T I N E =======================================
.text$mn:00005C0C
.text$mn:00005C0C ; Attributes: bp-based frame
.text$mn:00005C0C
.text$mn:00005C0C ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:00005C0C                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:00005C0C ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00005C0C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+38p
.text$mn:00005C0C
.text$mn:00005C0C var_10          = byte ptr -10h
.text$mn:00005C0C var_8           = dword ptr -8
.text$mn:00005C0C var_1           = byte ptr -1
.text$mn:00005C0C
.text$mn:00005C0C                 push    ebp
.text$mn:00005C0D                 mov     ebp, esp
.text$mn:00005C0F                 sub     esp, 10h
.text$mn:00005C12                 mov     [ebp+var_8], ecx
.text$mn:00005C15                 lea     ecx, [ebp+var_1]
.text$mn:00005C18                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00005C1D                 push    1
.text$mn:00005C1F                 lea     ecx, [ebp+var_1]
.text$mn:00005C22                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:00005C27                 mov     ecx, [ebp+var_8]
.text$mn:00005C2A                 mov     [ecx], eax
.text$mn:00005C2C                 lea     ecx, [ebp+var_10] ; this
.text$mn:00005C2F                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00005C34                 push    eax             ; int
.text$mn:00005C35                 mov     edx, [ebp+var_8]
.text$mn:00005C38                 mov     eax, [edx]
.text$mn:00005C3A                 push    eax             ; void *
.text$mn:00005C3B                 lea     ecx, [ebp+var_1]
.text$mn:00005C3E                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00005C43                 mov     ecx, [ebp+var_8]
.text$mn:00005C46                 mov     edx, [ecx]
.text$mn:00005C48                 mov     eax, [ebp+var_8]
.text$mn:00005C4B                 mov     [edx], eax
.text$mn:00005C4D                 mov     esp, ebp
.text$mn:00005C4F                 pop     ebp
.text$mn:00005C50                 retn
.text$mn:00005C50 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:00005C50
.text$mn:00005C50 ; ---------------------------------------------------------------------------
.text$mn:00005C51                 align 4
.text$mn:00005C51 _text$mn        ends
.text$mn:00005C51
.text$mn:00005C54 ; ===========================================================================
.text$mn:00005C54
.text$mn:00005C54 ; Segment type: Pure code
.text$mn:00005C54 ; Segment permissions: Read/Execute
.text$mn:00005C54 _text$mn        segment para public 'CODE' use32
.text$mn:00005C54                 assume cs:_text$mn
.text$mn:00005C54                 ;org 5C54h
.text$mn:00005C54 ; COMDAT (pick any)
.text$mn:00005C54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C54
.text$mn:00005C54 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C54
.text$mn:00005C54 ; Attributes: bp-based frame
.text$mn:00005C54
.text$mn:00005C54 ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct tTbData *, class std::allocator<struct tTbData *>>>::_Alloc_proxy(void)
.text$mn:00005C54                 public ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAEXXZ
.text$mn:00005C54 ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00005C54                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>(std::allocator<tTbData *> const &)+38p
.text$mn:00005C54
.text$mn:00005C54 var_10          = byte ptr -10h
.text$mn:00005C54 var_8           = dword ptr -8
.text$mn:00005C54 var_1           = byte ptr -1
.text$mn:00005C54
.text$mn:00005C54                 push    ebp
.text$mn:00005C55                 mov     ebp, esp
.text$mn:00005C57                 sub     esp, 10h
.text$mn:00005C5A                 mov     [ebp+var_8], ecx
.text$mn:00005C5D                 lea     ecx, [ebp+var_1]
.text$mn:00005C60                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:00005C65                 push    1
.text$mn:00005C67                 lea     ecx, [ebp+var_1]
.text$mn:00005C6A                 call    ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::allocate(uint)
.text$mn:00005C6F                 mov     ecx, [ebp+var_8]
.text$mn:00005C72                 mov     [ecx], eax
.text$mn:00005C74                 lea     ecx, [ebp+var_10] ; this
.text$mn:00005C77                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00005C7C                 push    eax             ; int
.text$mn:00005C7D                 mov     edx, [ebp+var_8]
.text$mn:00005C80                 mov     eax, [edx]
.text$mn:00005C82                 push    eax             ; void *
.text$mn:00005C83                 lea     ecx, [ebp+var_1]
.text$mn:00005C86                 call    ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00005C8B                 mov     ecx, [ebp+var_8]
.text$mn:00005C8E                 mov     edx, [ecx]
.text$mn:00005C90                 mov     eax, [ebp+var_8]
.text$mn:00005C93                 mov     [edx], eax
.text$mn:00005C95                 mov     esp, ebp
.text$mn:00005C97                 pop     ebp
.text$mn:00005C98                 retn
.text$mn:00005C98 ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAEXXZ endp
.text$mn:00005C98
.text$mn:00005C98 ; ---------------------------------------------------------------------------
.text$mn:00005C99                 align 4
.text$mn:00005C99 _text$mn        ends
.text$mn:00005C99
.text$mn:00005C9C ; ===========================================================================
.text$mn:00005C9C
.text$mn:00005C9C ; Segment type: Pure code
.text$mn:00005C9C ; Segment permissions: Read/Execute
.text$mn:00005C9C _text$mn        segment para public 'CODE' use32
.text$mn:00005C9C                 assume cs:_text$mn
.text$mn:00005C9C                 ;org 5C9Ch
.text$mn:00005C9C ; COMDAT (pick any)
.text$mn:00005C9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C9C
.text$mn:00005C9C ; =============== S U B R O U T I N E =======================================
.text$mn:00005C9C
.text$mn:00005C9C ; Attributes: bp-based frame
.text$mn:00005C9C
.text$mn:00005C9C ; int __stdcall std::vector<tTbData *,std::allocator<tTbData *>>::_Assign_rv(struct std::_Container_base12 *, int)
.text$mn:00005C9C                 public ?_Assign_rv@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
.text$mn:00005C9C ?_Assign_rv@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z proc near
.text$mn:00005C9C                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::vector<tTbData *,std::allocator<tTbData *>>(std::vector<tTbData *,std::allocator<tTbData *>> &&)+5Ep
.text$mn:00005C9C
.text$mn:00005C9C var_4           = dword ptr -4
.text$mn:00005C9C arg_0           = dword ptr  8
.text$mn:00005C9C
.text$mn:00005C9C                 push    ebp
.text$mn:00005C9D                 mov     ebp, esp
.text$mn:00005C9F                 push    ecx
.text$mn:00005CA0                 mov     [ebp+var_4], ecx
.text$mn:00005CA3                 mov     eax, [ebp+arg_0]
.text$mn:00005CA6                 push    eax             ; struct std::_Container_base12 *
.text$mn:00005CA7                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005CAA                 call    ?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_all(std::_Container_base12 &)
.text$mn:00005CAF                 mov     ecx, [ebp+var_4]
.text$mn:00005CB2                 mov     edx, [ebp+arg_0]
.text$mn:00005CB5                 mov     eax, [edx+4]
.text$mn:00005CB8                 mov     [ecx+4], eax
.text$mn:00005CBB                 mov     ecx, [ebp+var_4]
.text$mn:00005CBE                 mov     edx, [ebp+arg_0]
.text$mn:00005CC1                 mov     eax, [edx+8]
.text$mn:00005CC4                 mov     [ecx+8], eax
.text$mn:00005CC7                 mov     ecx, [ebp+var_4]
.text$mn:00005CCA                 mov     edx, [ebp+arg_0]
.text$mn:00005CCD                 mov     eax, [edx+0Ch]
.text$mn:00005CD0                 mov     [ecx+0Ch], eax
.text$mn:00005CD3                 mov     ecx, [ebp+arg_0]
.text$mn:00005CD6                 mov     dword ptr [ecx+4], 0
.text$mn:00005CDD                 mov     edx, [ebp+arg_0]
.text$mn:00005CE0                 mov     dword ptr [edx+8], 0
.text$mn:00005CE7                 mov     eax, [ebp+arg_0]
.text$mn:00005CEA                 mov     dword ptr [eax+0Ch], 0
.text$mn:00005CF1                 mov     esp, ebp
.text$mn:00005CF3                 pop     ebp
.text$mn:00005CF4                 retn    8
.text$mn:00005CF4 ?_Assign_rv@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z endp
.text$mn:00005CF4
.text$mn:00005CF4 ; ---------------------------------------------------------------------------
.text$mn:00005CF7                 align 4
.text$mn:00005CF7 _text$mn        ends
.text$mn:00005CF7
.text$mn:00005CF8 ; ===========================================================================
.text$mn:00005CF8
.text$mn:00005CF8 ; Segment type: Pure code
.text$mn:00005CF8 ; Segment permissions: Read/Execute
.text$mn:00005CF8 _text$mn        segment para public 'CODE' use32
.text$mn:00005CF8                 assume cs:_text$mn
.text$mn:00005CF8                 ;org 5CF8h
.text$mn:00005CF8 ; COMDAT (pick any)
.text$mn:00005CF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005CF8
.text$mn:00005CF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CF8
.text$mn:00005CF8 ; Attributes: bp-based frame
.text$mn:00005CF8
.text$mn:00005CF8 ; void __thiscall std::_Iterator_base12::_Clrcont(std::_Iterator_base12 *__hidden this)
.text$mn:00005CF8                 public ?_Clrcont@_Iterator_base12@std@@QAEXXZ
.text$mn:00005CF8 ?_Clrcont@_Iterator_base12@std@@QAEXXZ proc near
.text$mn:00005CF8                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Orphan_range(tTbData * *,tTbData * *)+80p
.text$mn:00005CF8
.text$mn:00005CF8 var_4           = dword ptr -4
.text$mn:00005CF8
.text$mn:00005CF8                 push    ebp
.text$mn:00005CF9                 mov     ebp, esp
.text$mn:00005CFB                 push    ecx
.text$mn:00005CFC                 mov     [ebp+var_4], ecx
.text$mn:00005CFF                 mov     eax, [ebp+var_4]
.text$mn:00005D02                 mov     dword ptr [eax], 0
.text$mn:00005D08                 mov     esp, ebp
.text$mn:00005D0A                 pop     ebp
.text$mn:00005D0B                 retn
.text$mn:00005D0B ?_Clrcont@_Iterator_base12@std@@QAEXXZ endp
.text$mn:00005D0B
.text$mn:00005D0B _text$mn        ends
.text$mn:00005D0B
.text$mn:00005D0C ; ===========================================================================
.text$mn:00005D0C
.text$mn:00005D0C ; Segment type: Pure code
.text$mn:00005D0C ; Segment permissions: Read/Execute
.text$mn:00005D0C _text$mn        segment para public 'CODE' use32
.text$mn:00005D0C                 assume cs:_text$mn
.text$mn:00005D0C                 ;org 5D0Ch
.text$mn:00005D0C ; COMDAT (pick any)
.text$mn:00005D0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005D0C
.text$mn:00005D0C ; =============== S U B R O U T I N E =======================================
.text$mn:00005D0C
.text$mn:00005D0C ; Attributes: bp-based frame
.text$mn:00005D0C
.text$mn:00005D0C ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Copy(unsigned int, unsigned int)
.text$mn:00005D0C                 public ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00005D0C ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$mn:00005D0C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+37p
.text$mn:00005D0C
.text$mn:00005D0C var_20          = dword ptr -20h
.text$mn:00005D0C var_1C          = dword ptr -1Ch
.text$mn:00005D0C var_18          = dword ptr -18h
.text$mn:00005D0C var_11          = byte ptr -11h
.text$mn:00005D0C var_10          = dword ptr -10h
.text$mn:00005D0C var_C           = byte ptr -0Ch
.text$mn:00005D0C var_4           = dword ptr -4
.text$mn:00005D0C arg_0           = dword ptr  8
.text$mn:00005D0C
.text$mn:00005D0C ; FUNCTION CHUNK AT .text$mn:00005E2E SIZE 00000009 BYTES
.text$mn:00005D0C
.text$mn:00005D0C                 push    ebp
.text$mn:00005D0D                 mov     ebp, esp
.text$mn:00005D0F                 push    0FFFFFFFFh
.text$mn:00005D11                 push    offset __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00005D16                 mov     eax, large fs:0
.text$mn:00005D1C                 push    eax
.text$mn:00005D1D                 push    ecx
.text$mn:00005D1E                 sub     esp, 10h
.text$mn:00005D21                 push    ebx
.text$mn:00005D22                 push    esi
.text$mn:00005D23                 push    edi
.text$mn:00005D24                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005D29                 xor     eax, ebp
.text$mn:00005D2B                 push    eax
.text$mn:00005D2C                 lea     eax, [ebp+var_C]
.text$mn:00005D2F                 mov     large fs:0, eax
.text$mn:00005D35                 mov     [ebp+var_10], esp
.text$mn:00005D38                 mov     [ebp+var_18], ecx
.text$mn:00005D3B                 mov     eax, [ebp+arg_0]
.text$mn:00005D3E                 or      eax, 0Fh
.text$mn:00005D41                 mov     [ebp+var_1C], eax
.text$mn:00005D44                 mov     ecx, [ebp+var_18]
.text$mn:00005D47                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00005D4C                 cmp     eax, [ebp+var_1C]
.text$mn:00005D4F                 jnb     short loc_5D59
.text$mn:00005D51                 mov     ecx, [ebp+arg_0]
.text$mn:00005D54                 mov     [ebp+var_1C], ecx
.text$mn:00005D57                 jmp     short loc_5DAB
.text$mn:00005D59 ; ---------------------------------------------------------------------------
.text$mn:00005D59
.text$mn:00005D59 loc_5D59:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+43j
.text$mn:00005D59                 mov     edx, [ebp+var_18]
.text$mn:00005D5C                 mov     ecx, [edx+18h]
.text$mn:00005D5F                 shr     ecx, 1
.text$mn:00005D61                 mov     eax, [ebp+var_1C]
.text$mn:00005D64                 xor     edx, edx
.text$mn:00005D66                 mov     esi, 3
.text$mn:00005D6B                 div     esi
.text$mn:00005D6D                 cmp     ecx, eax
.text$mn:00005D6F                 ja      short loc_5D73
.text$mn:00005D71                 jmp     short loc_5DAB
.text$mn:00005D73 ; ---------------------------------------------------------------------------
.text$mn:00005D73
.text$mn:00005D73 loc_5D73:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+63j
.text$mn:00005D73                 mov     ecx, [ebp+var_18]
.text$mn:00005D76                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00005D7B                 mov     edx, [ebp+var_18]
.text$mn:00005D7E                 mov     ecx, [edx+18h]
.text$mn:00005D81                 shr     ecx, 1
.text$mn:00005D83                 sub     eax, ecx
.text$mn:00005D85                 mov     edx, [ebp+var_18]
.text$mn:00005D88                 cmp     [edx+18h], eax
.text$mn:00005D8B                 ja      short loc_5DA0
.text$mn:00005D8D                 mov     eax, [ebp+var_18]
.text$mn:00005D90                 mov     ecx, [eax+18h]
.text$mn:00005D93                 shr     ecx, 1
.text$mn:00005D95                 mov     edx, [ebp+var_18]
.text$mn:00005D98                 add     ecx, [edx+18h]
.text$mn:00005D9B                 mov     [ebp+var_1C], ecx
.text$mn:00005D9E                 jmp     short loc_5DAB
.text$mn:00005DA0 ; ---------------------------------------------------------------------------
.text$mn:00005DA0
.text$mn:00005DA0 loc_5DA0:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+7Fj
.text$mn:00005DA0                 mov     ecx, [ebp+var_18]
.text$mn:00005DA3                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00005DA8                 mov     [ebp+var_1C], eax
.text$mn:00005DAB
.text$mn:00005DAB loc_5DAB:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+4Bj
.text$mn:00005DAB                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+65j ...
.text$mn:00005DAB                 mov     [ebp+var_4], 0
.text$mn:00005DB2                 mov     eax, [ebp+var_1C]
.text$mn:00005DB5                 add     eax, 1
.text$mn:00005DB8                 push    eax
.text$mn:00005DB9                 lea     ecx, [ebp+var_11]
.text$mn:00005DBC                 push    ecx
.text$mn:00005DBD                 mov     ecx, [ebp+var_18]
.text$mn:00005DC0                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00005DC5                 mov     ecx, eax
.text$mn:00005DC7                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:00005DCC                 mov     [ebp+var_20], eax
.text$mn:00005DCF                 jmp     short loc_5E2E
.text$mn:00005DCF ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$mn:00005DCF
.text$mn:00005DD1
.text$mn:00005DD1 ; =============== S U B R O U T I N E =======================================
.text$mn:00005DD1
.text$mn:00005DD1
.text$mn:00005DD1 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
.text$mn:00005DD1                                         ; DATA XREF: .xdata$x:000086E4o
.text$mn:00005DD1
.text$mn:00005DD1 ; FUNCTION CHUNK AT .text$mn:00005E18 SIZE 00000009 BYTES
.text$mn:00005DD1 ; FUNCTION CHUNK AT .text$mn:00005E28 SIZE 00000006 BYTES
.text$mn:00005DD1
.text$mn:00005DD1                 mov     [ebp-10h], esp
.text$mn:00005DD4                 mov     edx, [ebp+8]
.text$mn:00005DD7                 mov     [ebp-1Ch], edx
.text$mn:00005DDA                 mov     byte ptr [ebp-4], 2
.text$mn:00005DDE                 mov     eax, [ebp-1Ch]
.text$mn:00005DE1                 add     eax, 1
.text$mn:00005DE4                 push    eax
.text$mn:00005DE5                 lea     ecx, [ebp-12h]
.text$mn:00005DE8                 push    ecx
.text$mn:00005DE9                 mov     ecx, [ebp-18h]
.text$mn:00005DEC                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00005DF1                 mov     ecx, eax
.text$mn:00005DF3                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:00005DF8                 mov     [ebp-20h], eax
.text$mn:00005DFB                 jmp     short loc_5E18
.text$mn:00005DFB __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 endp
.text$mn:00005DFB
.text$mn:00005DFD
.text$mn:00005DFD ; =============== S U B R O U T I N E =======================================
.text$mn:00005DFD
.text$mn:00005DFD ; Attributes: noreturn
.text$mn:00005DFD
.text$mn:00005DFD __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
.text$mn:00005DFD                                         ; DATA XREF: .xdata$x:000086F4o
.text$mn:00005DFD                 push    0               ; Size
.text$mn:00005DFF                 push    1               ; char
.text$mn:00005E01                 mov     ecx, [ebp-18h]
.text$mn:00005E04                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00005E09                 push    0
.text$mn:00005E0B                 push    0
.text$mn:00005E0D                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00005E0D __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 endp
.text$mn:00005E0D
.text$mn:00005E12 ; ---------------------------------------------------------------------------
.text$mn:00005E12                 mov     eax, offset $LN17
.text$mn:00005E17                 retn
.text$mn:00005E18 ; ---------------------------------------------------------------------------
.text$mn:00005E18 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00005E18
.text$mn:00005E18 loc_5E18:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+2Aj
.text$mn:00005E18                 mov     dword ptr [ebp-4], 1
.text$mn:00005E1F                 jmp     short loc_5E28
.text$mn:00005E1F ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00005E21
.text$mn:00005E21 ; =============== S U B R O U T I N E =======================================
.text$mn:00005E21
.text$mn:00005E21
.text$mn:00005E21 $LN17           proc near               ; DATA XREF: .text$mn:00005E12o
.text$mn:00005E21                 mov     dword ptr [ebp-4], 1
.text$mn:00005E21 $LN17           endp ; sp-analysis failed
.text$mn:00005E21
.text$mn:00005E28 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00005E28
.text$mn:00005E28 loc_5E28:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+4Ej
.text$mn:00005E28                 mov     eax, offset $LN19
.text$mn:00005E2D                 retn
.text$mn:00005E2D ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00005E2E ; ---------------------------------------------------------------------------
.text$mn:00005E2E ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00005E2E
.text$mn:00005E2E loc_5E2E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+C3j
.text$mn:00005E2E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005E35                 jmp     short loc_5E3E
.text$mn:00005E35 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00005E37
.text$mn:00005E37 ; =============== S U B R O U T I N E =======================================
.text$mn:00005E37
.text$mn:00005E37
.text$mn:00005E37 $LN19           proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:loc_5E28o
.text$mn:00005E37                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00005E3E
.text$mn:00005E3E loc_5E3E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+129j
.text$mn:00005E3E                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:00005E42                 jbe     short loc_5E5D
.text$mn:00005E44                 mov     edx, [ebp+0Ch]
.text$mn:00005E47                 push    edx             ; Size
.text$mn:00005E48                 mov     ecx, [ebp-18h]
.text$mn:00005E4B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00005E50                 push    eax             ; Src
.text$mn:00005E51                 mov     eax, [ebp-20h]
.text$mn:00005E54                 push    eax             ; Dst
.text$mn:00005E55                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00005E5A                 add     esp, 0Ch
.text$mn:00005E5D
.text$mn:00005E5D loc_5E5D:                               ; CODE XREF: $LN19+Bj
.text$mn:00005E5D                 push    0               ; Size
.text$mn:00005E5F                 push    1               ; char
.text$mn:00005E61                 mov     ecx, [ebp-18h]
.text$mn:00005E64                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00005E69                 lea     ecx, [ebp-20h]
.text$mn:00005E6C                 push    ecx             ; int
.text$mn:00005E6D                 mov     edx, [ebp-18h]
.text$mn:00005E70                 add     edx, 4
.text$mn:00005E73                 push    edx             ; void *
.text$mn:00005E74                 lea     eax, [ebp-13h]
.text$mn:00005E77                 push    eax
.text$mn:00005E78                 mov     ecx, [ebp-18h]
.text$mn:00005E7B                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00005E80                 mov     ecx, eax
.text$mn:00005E82                 call    ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)
.text$mn:00005E87                 mov     ecx, [ebp-18h]
.text$mn:00005E8A                 mov     edx, [ebp-1Ch]
.text$mn:00005E8D                 mov     [ecx+18h], edx
.text$mn:00005E90                 mov     eax, [ebp+0Ch]
.text$mn:00005E93                 push    eax
.text$mn:00005E94                 mov     ecx, [ebp-18h]
.text$mn:00005E97                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00005E9C                 mov     ecx, [ebp-0Ch]
.text$mn:00005E9F                 mov     large fs:0, ecx
.text$mn:00005EA6                 pop     ecx
.text$mn:00005EA7                 pop     edi
.text$mn:00005EA8                 pop     esi
.text$mn:00005EA9                 pop     ebx
.text$mn:00005EAA                 mov     esp, ebp
.text$mn:00005EAC                 pop     ebp
.text$mn:00005EAD                 retn    8
.text$mn:00005EAD $LN19           endp ; sp-analysis failed
.text$mn:00005EAD
.text$mn:00005EAD _text$mn        ends
.text$mn:00005EAD
.text$x:00005EB0 ; ===========================================================================
.text$x:00005EB0
.text$x:00005EB0 ; Segment type: Pure code
.text$x:00005EB0 ; Segment permissions: Read/Execute
.text$x:00005EB0 _text$x         segment para public 'CODE' use32
.text$x:00005EB0                 assume cs:_text$x
.text$x:00005EB0                 ;org 5EB0h
.text$x:00005EB0 ; COMDAT (pick associative to section at 5D0C)
.text$x:00005EB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005EB0
.text$x:00005EB0 ; =============== S U B R O U T I N E =======================================
.text$x:00005EB0
.text$x:00005EB0
.text$x:00005EB0 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$x:00005EB0                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+5o
.text$x:00005EB0
.text$x:00005EB0 arg_4           = dword ptr  8
.text$x:00005EB0
.text$x:00005EB0                 mov     edx, [esp+arg_4]
.text$x:00005EB4                 lea     eax, [edx+0Ch]
.text$x:00005EB7                 mov     ecx, [edx-24h]
.text$x:00005EBA                 xor     ecx, eax
.text$x:00005EBC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005EC1                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$x:00005EC6                 jmp     ___CxxFrameHandler3
.text$x:00005EC6 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$x:00005EC6
.text$x:00005EC6 ; ---------------------------------------------------------------------------
.text$x:00005ECB                 align 4
.text$x:00005ECB _text$x         ends
.text$x:00005ECB
.text$mn:00005ECC ; ===========================================================================
.text$mn:00005ECC
.text$mn:00005ECC ; Segment type: Pure code
.text$mn:00005ECC ; Segment permissions: Read/Execute
.text$mn:00005ECC _text$mn        segment para public 'CODE' use32
.text$mn:00005ECC                 assume cs:_text$mn
.text$mn:00005ECC                 ;org 5ECCh
.text$mn:00005ECC ; COMDAT (pick any)
.text$mn:00005ECC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005ECC
.text$mn:00005ECC ; =============== S U B R O U T I N E =======================================
.text$mn:00005ECC
.text$mn:00005ECC ; Attributes: bp-based frame
.text$mn:00005ECC
.text$mn:00005ECC ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Copy(unsigned int, unsigned int)
.text$mn:00005ECC                 public ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00005ECC ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$mn:00005ECC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+37p
.text$mn:00005ECC
.text$mn:00005ECC var_20          = dword ptr -20h
.text$mn:00005ECC var_1C          = dword ptr -1Ch
.text$mn:00005ECC var_18          = dword ptr -18h
.text$mn:00005ECC var_11          = byte ptr -11h
.text$mn:00005ECC var_10          = dword ptr -10h
.text$mn:00005ECC var_C           = byte ptr -0Ch
.text$mn:00005ECC var_4           = dword ptr -4
.text$mn:00005ECC arg_0           = dword ptr  8
.text$mn:00005ECC
.text$mn:00005ECC ; FUNCTION CHUNK AT .text$mn:00005FEE SIZE 00000009 BYTES
.text$mn:00005ECC
.text$mn:00005ECC                 push    ebp
.text$mn:00005ECD                 mov     ebp, esp
.text$mn:00005ECF                 push    0FFFFFFFFh
.text$mn:00005ED1                 push    offset __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00005ED6                 mov     eax, large fs:0
.text$mn:00005EDC                 push    eax
.text$mn:00005EDD                 push    ecx
.text$mn:00005EDE                 sub     esp, 10h
.text$mn:00005EE1                 push    ebx
.text$mn:00005EE2                 push    esi
.text$mn:00005EE3                 push    edi
.text$mn:00005EE4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005EE9                 xor     eax, ebp
.text$mn:00005EEB                 push    eax
.text$mn:00005EEC                 lea     eax, [ebp+var_C]
.text$mn:00005EEF                 mov     large fs:0, eax
.text$mn:00005EF5                 mov     [ebp+var_10], esp
.text$mn:00005EF8                 mov     [ebp+var_18], ecx
.text$mn:00005EFB                 mov     eax, [ebp+arg_0]
.text$mn:00005EFE                 or      eax, 7
.text$mn:00005F01                 mov     [ebp+var_1C], eax
.text$mn:00005F04                 mov     ecx, [ebp+var_18]
.text$mn:00005F07                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00005F0C                 cmp     eax, [ebp+var_1C]
.text$mn:00005F0F                 jnb     short loc_5F19
.text$mn:00005F11                 mov     ecx, [ebp+arg_0]
.text$mn:00005F14                 mov     [ebp+var_1C], ecx
.text$mn:00005F17                 jmp     short loc_5F6B
.text$mn:00005F19 ; ---------------------------------------------------------------------------
.text$mn:00005F19
.text$mn:00005F19 loc_5F19:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+43j
.text$mn:00005F19                 mov     edx, [ebp+var_18]
.text$mn:00005F1C                 mov     ecx, [edx+18h]
.text$mn:00005F1F                 shr     ecx, 1
.text$mn:00005F21                 mov     eax, [ebp+var_1C]
.text$mn:00005F24                 xor     edx, edx
.text$mn:00005F26                 mov     esi, 3
.text$mn:00005F2B                 div     esi
.text$mn:00005F2D                 cmp     ecx, eax
.text$mn:00005F2F                 ja      short loc_5F33
.text$mn:00005F31                 jmp     short loc_5F6B
.text$mn:00005F33 ; ---------------------------------------------------------------------------
.text$mn:00005F33
.text$mn:00005F33 loc_5F33:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+63j
.text$mn:00005F33                 mov     ecx, [ebp+var_18]
.text$mn:00005F36                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00005F3B                 mov     edx, [ebp+var_18]
.text$mn:00005F3E                 mov     ecx, [edx+18h]
.text$mn:00005F41                 shr     ecx, 1
.text$mn:00005F43                 sub     eax, ecx
.text$mn:00005F45                 mov     edx, [ebp+var_18]
.text$mn:00005F48                 cmp     [edx+18h], eax
.text$mn:00005F4B                 ja      short loc_5F60
.text$mn:00005F4D                 mov     eax, [ebp+var_18]
.text$mn:00005F50                 mov     ecx, [eax+18h]
.text$mn:00005F53                 shr     ecx, 1
.text$mn:00005F55                 mov     edx, [ebp+var_18]
.text$mn:00005F58                 add     ecx, [edx+18h]
.text$mn:00005F5B                 mov     [ebp+var_1C], ecx
.text$mn:00005F5E                 jmp     short loc_5F6B
.text$mn:00005F60 ; ---------------------------------------------------------------------------
.text$mn:00005F60
.text$mn:00005F60 loc_5F60:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+7Fj
.text$mn:00005F60                 mov     ecx, [ebp+var_18]
.text$mn:00005F63                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00005F68                 mov     [ebp+var_1C], eax
.text$mn:00005F6B
.text$mn:00005F6B loc_5F6B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+4Bj
.text$mn:00005F6B                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+65j ...
.text$mn:00005F6B                 mov     [ebp+var_4], 0
.text$mn:00005F72                 mov     eax, [ebp+var_1C]
.text$mn:00005F75                 add     eax, 1
.text$mn:00005F78                 push    eax
.text$mn:00005F79                 lea     ecx, [ebp+var_11]
.text$mn:00005F7C                 push    ecx
.text$mn:00005F7D                 mov     ecx, [ebp+var_18]
.text$mn:00005F80                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00005F85                 mov     ecx, eax
.text$mn:00005F87                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:00005F8C                 mov     [ebp+var_20], eax
.text$mn:00005F8F                 jmp     short loc_5FEE
.text$mn:00005F8F ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$mn:00005F8F
.text$mn:00005F91
.text$mn:00005F91 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F91
.text$mn:00005F91
.text$mn:00005F91 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 proc near
.text$mn:00005F91                                         ; DATA XREF: .xdata$x:00008A88o
.text$mn:00005F91
.text$mn:00005F91 ; FUNCTION CHUNK AT .text$mn:00005FD8 SIZE 00000009 BYTES
.text$mn:00005F91 ; FUNCTION CHUNK AT .text$mn:00005FE8 SIZE 00000006 BYTES
.text$mn:00005F91
.text$mn:00005F91                 mov     [ebp-10h], esp
.text$mn:00005F94                 mov     edx, [ebp+8]
.text$mn:00005F97                 mov     [ebp-1Ch], edx
.text$mn:00005F9A                 mov     byte ptr [ebp-4], 2
.text$mn:00005F9E                 mov     eax, [ebp-1Ch]
.text$mn:00005FA1                 add     eax, 1
.text$mn:00005FA4                 push    eax
.text$mn:00005FA5                 lea     ecx, [ebp-12h]
.text$mn:00005FA8                 push    ecx
.text$mn:00005FA9                 mov     ecx, [ebp-18h]
.text$mn:00005FAC                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00005FB1                 mov     ecx, eax
.text$mn:00005FB3                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:00005FB8                 mov     [ebp-20h], eax
.text$mn:00005FBB                 jmp     short loc_5FD8
.text$mn:00005FBB __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 endp
.text$mn:00005FBB
.text$mn:00005FBD
.text$mn:00005FBD ; =============== S U B R O U T I N E =======================================
.text$mn:00005FBD
.text$mn:00005FBD ; Attributes: noreturn
.text$mn:00005FBD
.text$mn:00005FBD __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 proc near
.text$mn:00005FBD                                         ; DATA XREF: .xdata$x:00008A98o
.text$mn:00005FBD                 push    0
.text$mn:00005FBF                 push    1
.text$mn:00005FC1                 mov     ecx, [ebp-18h]
.text$mn:00005FC4                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00005FC9                 push    0
.text$mn:00005FCB                 push    0
.text$mn:00005FCD                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00005FCD __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 endp
.text$mn:00005FCD
.text$mn:00005FD2 ; ---------------------------------------------------------------------------
.text$mn:00005FD2                 mov     eax, offset $LN17_0
.text$mn:00005FD7                 retn
.text$mn:00005FD8 ; ---------------------------------------------------------------------------
.text$mn:00005FD8 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00005FD8
.text$mn:00005FD8 loc_5FD8:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+2Aj
.text$mn:00005FD8                 mov     dword ptr [ebp-4], 1
.text$mn:00005FDF                 jmp     short loc_5FE8
.text$mn:00005FDF ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00005FE1
.text$mn:00005FE1 ; =============== S U B R O U T I N E =======================================
.text$mn:00005FE1
.text$mn:00005FE1
.text$mn:00005FE1 $LN17_0         proc near               ; DATA XREF: .text$mn:00005FD2o
.text$mn:00005FE1                 mov     dword ptr [ebp-4], 1
.text$mn:00005FE1 $LN17_0         endp ; sp-analysis failed
.text$mn:00005FE1
.text$mn:00005FE8 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00005FE8
.text$mn:00005FE8 loc_5FE8:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+4Ej
.text$mn:00005FE8                 mov     eax, offset $LN19_0
.text$mn:00005FED                 retn
.text$mn:00005FED ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00005FEE ; ---------------------------------------------------------------------------
.text$mn:00005FEE ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00005FEE
.text$mn:00005FEE loc_5FEE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+C3j
.text$mn:00005FEE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005FF5                 jmp     short loc_5FFE
.text$mn:00005FF5 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00005FF7
.text$mn:00005FF7 ; =============== S U B R O U T I N E =======================================
.text$mn:00005FF7
.text$mn:00005FF7
.text$mn:00005FF7 $LN19_0         proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0:loc_5FE8o
.text$mn:00005FF7                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00005FFE
.text$mn:00005FFE loc_5FFE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+129j
.text$mn:00005FFE                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:00006002                 jbe     short loc_601D
.text$mn:00006004                 mov     edx, [ebp+0Ch]
.text$mn:00006007                 push    edx             ; int
.text$mn:00006008                 mov     ecx, [ebp-18h]
.text$mn:0000600B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006010                 push    eax             ; Src
.text$mn:00006011                 mov     eax, [ebp-20h]
.text$mn:00006014                 push    eax             ; Dst
.text$mn:00006015                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000601A                 add     esp, 0Ch
.text$mn:0000601D
.text$mn:0000601D loc_601D:                               ; CODE XREF: $LN19_0+Bj
.text$mn:0000601D                 push    0
.text$mn:0000601F                 push    1
.text$mn:00006021                 mov     ecx, [ebp-18h]
.text$mn:00006024                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00006029                 lea     ecx, [ebp-20h]
.text$mn:0000602C                 push    ecx             ; int
.text$mn:0000602D                 mov     edx, [ebp-18h]
.text$mn:00006030                 add     edx, 4
.text$mn:00006033                 push    edx             ; void *
.text$mn:00006034                 lea     eax, [ebp-13h]
.text$mn:00006037                 push    eax
.text$mn:00006038                 mov     ecx, [ebp-18h]
.text$mn:0000603B                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00006040                 mov     ecx, eax
.text$mn:00006042                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00006047                 mov     ecx, [ebp-18h]
.text$mn:0000604A                 mov     edx, [ebp-1Ch]
.text$mn:0000604D                 mov     [ecx+18h], edx
.text$mn:00006050                 mov     eax, [ebp+0Ch]
.text$mn:00006053                 push    eax
.text$mn:00006054                 mov     ecx, [ebp-18h]
.text$mn:00006057                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000605C                 mov     ecx, [ebp-0Ch]
.text$mn:0000605F                 mov     large fs:0, ecx
.text$mn:00006066                 pop     ecx
.text$mn:00006067                 pop     edi
.text$mn:00006068                 pop     esi
.text$mn:00006069                 pop     ebx
.text$mn:0000606A                 mov     esp, ebp
.text$mn:0000606C                 pop     ebp
.text$mn:0000606D                 retn    8
.text$mn:0000606D $LN19_0         endp ; sp-analysis failed
.text$mn:0000606D
.text$mn:0000606D _text$mn        ends
.text$mn:0000606D
.text$x:00006070 ; ===========================================================================
.text$x:00006070
.text$x:00006070 ; Segment type: Pure code
.text$x:00006070 ; Segment permissions: Read/Execute
.text$x:00006070 _text$x         segment para public 'CODE' use32
.text$x:00006070                 assume cs:_text$x
.text$x:00006070                 ;org 6070h
.text$x:00006070 ; COMDAT (pick associative to section at 5ECC)
.text$x:00006070                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006070
.text$x:00006070 ; =============== S U B R O U T I N E =======================================
.text$x:00006070
.text$x:00006070
.text$x:00006070 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$x:00006070                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+5o
.text$x:00006070
.text$x:00006070 arg_4           = dword ptr  8
.text$x:00006070
.text$x:00006070                 mov     edx, [esp+arg_4]
.text$x:00006074                 lea     eax, [edx+0Ch]
.text$x:00006077                 mov     ecx, [edx-24h]
.text$x:0000607A                 xor     ecx, eax
.text$x:0000607C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006081                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$x:00006086                 jmp     ___CxxFrameHandler3
.text$x:00006086 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$x:00006086
.text$x:00006086 ; ---------------------------------------------------------------------------
.text$x:0000608B                 align 4
.text$x:0000608B _text$x         ends
.text$x:0000608B
.text$mn:0000608C ; ===========================================================================
.text$mn:0000608C
.text$mn:0000608C ; Segment type: Pure code
.text$mn:0000608C ; Segment permissions: Read/Execute
.text$mn:0000608C _text$mn        segment para public 'CODE' use32
.text$mn:0000608C                 assume cs:_text$mn
.text$mn:0000608C                 ;org 608Ch
.text$mn:0000608C ; COMDAT (pick any)
.text$mn:0000608C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000608C
.text$mn:0000608C ; =============== S U B R O U T I N E =======================================
.text$mn:0000608C
.text$mn:0000608C ; Attributes: bp-based frame
.text$mn:0000608C
.text$mn:0000608C ; protected: void __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::_Destroy(struct tTbData * *, struct tTbData * *)
.text$mn:0000608C                 public ?_Destroy@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXPAPAUtTbData@@0@Z
.text$mn:0000608C ?_Destroy@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXPAPAUtTbData@@0@Z proc near
.text$mn:0000608C                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Reallocate(uint)+CBp
.text$mn:0000608C                                         ; std::vector<tTbData *,std::allocator<tTbData *>>::_Tidy(void)+2Bp ...
.text$mn:0000608C
.text$mn:0000608C var_8           = dword ptr -8
.text$mn:0000608C var_1           = byte ptr -1
.text$mn:0000608C arg_0           = dword ptr  8
.text$mn:0000608C arg_4           = dword ptr  0Ch
.text$mn:0000608C
.text$mn:0000608C                 push    ebp
.text$mn:0000608D                 mov     ebp, esp
.text$mn:0000608F                 sub     esp, 8
.text$mn:00006092                 mov     [ebp+var_8], ecx
.text$mn:00006095                 lea     eax, [ebp+var_1]
.text$mn:00006098                 push    eax
.text$mn:00006099                 mov     ecx, [ebp+var_8]
.text$mn:0000609C                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Getal(void)
.text$mn:000060A1                 lea     ecx, [ebp+var_1]
.text$mn:000060A4                 push    ecx
.text$mn:000060A5                 mov     edx, [ebp+arg_4]
.text$mn:000060A8                 push    edx
.text$mn:000060A9                 mov     eax, [ebp+arg_0]
.text$mn:000060AC                 push    eax
.text$mn:000060AD                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@@std@@YAXPAPAUtTbData@@0AAU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<tTbData *>>>(tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>> &)
.text$mn:000060B2                 add     esp, 0Ch
.text$mn:000060B5                 mov     esp, ebp
.text$mn:000060B7                 pop     ebp
.text$mn:000060B8                 retn    8
.text$mn:000060B8 ?_Destroy@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXPAPAUtTbData@@0@Z endp
.text$mn:000060B8
.text$mn:000060B8 ; ---------------------------------------------------------------------------
.text$mn:000060BB                 align 4
.text$mn:000060BB _text$mn        ends
.text$mn:000060BB
.text$mn:000060BC ; ===========================================================================
.text$mn:000060BC
.text$mn:000060BC ; Segment type: Pure code
.text$mn:000060BC ; Segment permissions: Read/Execute
.text$mn:000060BC _text$mn        segment para public 'CODE' use32
.text$mn:000060BC                 assume cs:_text$mn
.text$mn:000060BC                 ;org 60BCh
.text$mn:000060BC ; COMDAT (pick any)
.text$mn:000060BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000060BC
.text$mn:000060BC ; =============== S U B R O U T I N E =======================================
.text$mn:000060BC
.text$mn:000060BC ; Attributes: bp-based frame
.text$mn:000060BC
.text$mn:000060BC ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Eos(unsigned int)
.text$mn:000060BC                 public ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
.text$mn:000060BC ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc near
.text$mn:000060BC                                         ; CODE XREF: $LN19+60p
.text$mn:000060BC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+83p ...
.text$mn:000060BC
.text$mn:000060BC var_8           = dword ptr -8
.text$mn:000060BC var_1           = byte ptr -1
.text$mn:000060BC arg_0           = dword ptr  8
.text$mn:000060BC
.text$mn:000060BC                 push    ebp
.text$mn:000060BD                 mov     ebp, esp
.text$mn:000060BF                 sub     esp, 8
.text$mn:000060C2                 mov     [ebp+var_8], ecx
.text$mn:000060C5                 mov     [ebp+var_1], 0
.text$mn:000060C9                 mov     eax, [ebp+var_8]
.text$mn:000060CC                 mov     ecx, [ebp+arg_0]
.text$mn:000060CF                 mov     [eax+14h], ecx
.text$mn:000060D2                 lea     edx, [ebp+var_1]
.text$mn:000060D5                 push    edx
.text$mn:000060D6                 mov     ecx, [ebp+var_8]
.text$mn:000060D9                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000060DE                 add     eax, [ebp+arg_0]
.text$mn:000060E1                 push    eax
.text$mn:000060E2                 call    ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign(char &,char const &)
.text$mn:000060E7                 add     esp, 8
.text$mn:000060EA                 mov     esp, ebp
.text$mn:000060EC                 pop     ebp
.text$mn:000060ED                 retn    4
.text$mn:000060ED ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z endp
.text$mn:000060ED
.text$mn:000060ED _text$mn        ends
.text$mn:000060ED
.text$mn:000060F0 ; ===========================================================================
.text$mn:000060F0
.text$mn:000060F0 ; Segment type: Pure code
.text$mn:000060F0 ; Segment permissions: Read/Execute
.text$mn:000060F0 _text$mn        segment para public 'CODE' use32
.text$mn:000060F0                 assume cs:_text$mn
.text$mn:000060F0                 ;org 60F0h
.text$mn:000060F0 ; COMDAT (pick any)
.text$mn:000060F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000060F0
.text$mn:000060F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000060F0
.text$mn:000060F0 ; Attributes: bp-based frame
.text$mn:000060F0
.text$mn:000060F0 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Eos(unsigned int)
.text$mn:000060F0                 public ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
.text$mn:000060F0 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z proc near
.text$mn:000060F0                                         ; CODE XREF: $LN19_0+60p
.text$mn:000060F0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+83p ...
.text$mn:000060F0
.text$mn:000060F0 var_8           = dword ptr -8
.text$mn:000060F0 var_2           = word ptr -2
.text$mn:000060F0 arg_0           = dword ptr  8
.text$mn:000060F0
.text$mn:000060F0                 push    ebp
.text$mn:000060F1                 mov     ebp, esp
.text$mn:000060F3                 sub     esp, 8
.text$mn:000060F6                 mov     [ebp+var_8], ecx
.text$mn:000060F9                 xor     eax, eax
.text$mn:000060FB                 mov     [ebp+var_2], ax
.text$mn:000060FF                 mov     ecx, [ebp+var_8]
.text$mn:00006102                 mov     edx, [ebp+arg_0]
.text$mn:00006105                 mov     [ecx+14h], edx
.text$mn:00006108                 lea     eax, [ebp+var_2]
.text$mn:0000610B                 push    eax
.text$mn:0000610C                 mov     ecx, [ebp+var_8]
.text$mn:0000610F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006114                 mov     ecx, [ebp+arg_0]
.text$mn:00006117                 lea     edx, [eax+ecx*2]
.text$mn:0000611A                 push    edx
.text$mn:0000611B                 call    ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign(wchar_t &,wchar_t const &)
.text$mn:00006120                 add     esp, 8
.text$mn:00006123                 mov     esp, ebp
.text$mn:00006125                 pop     ebp
.text$mn:00006126                 retn    4
.text$mn:00006126 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z endp
.text$mn:00006126
.text$mn:00006126 ; ---------------------------------------------------------------------------
.text$mn:00006129                 align 4
.text$mn:00006129 _text$mn        ends
.text$mn:00006129
.text$mn:0000612C ; ===========================================================================
.text$mn:0000612C
.text$mn:0000612C ; Segment type: Pure code
.text$mn:0000612C ; Segment permissions: Read/Execute
.text$mn:0000612C _text$mn        segment para public 'CODE' use32
.text$mn:0000612C                 assume cs:_text$mn
.text$mn:0000612C                 ;org 612Ch
.text$mn:0000612C ; COMDAT (pick any)
.text$mn:0000612C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000612C
.text$mn:0000612C ; =============== S U B R O U T I N E =======================================
.text$mn:0000612C
.text$mn:0000612C ; Attributes: bp-based frame
.text$mn:0000612C
.text$mn:0000612C ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Free_proxy(void)
.text$mn:0000612C                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:0000612C ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000612C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+30p
.text$mn:0000612C
.text$mn:0000612C var_8           = dword ptr -8
.text$mn:0000612C var_1           = byte ptr -1
.text$mn:0000612C
.text$mn:0000612C                 push    ebp
.text$mn:0000612D                 mov     ebp, esp
.text$mn:0000612F                 sub     esp, 8
.text$mn:00006132                 mov     [ebp+var_8], ecx
.text$mn:00006135                 lea     ecx, [ebp+var_1]
.text$mn:00006138                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:0000613D                 mov     ecx, [ebp+var_8] ; this
.text$mn:00006140                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00006145                 mov     eax, [ebp+var_8]
.text$mn:00006148                 mov     ecx, [eax]
.text$mn:0000614A                 push    ecx
.text$mn:0000614B                 lea     ecx, [ebp+var_1]
.text$mn:0000614E                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:00006153                 push    1               ; int
.text$mn:00006155                 mov     edx, [ebp+var_8]
.text$mn:00006158                 mov     eax, [edx]
.text$mn:0000615A                 push    eax             ; void *
.text$mn:0000615B                 lea     ecx, [ebp+var_1]
.text$mn:0000615E                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:00006163                 mov     ecx, [ebp+var_8]
.text$mn:00006166                 mov     dword ptr [ecx], 0
.text$mn:0000616C                 mov     esp, ebp
.text$mn:0000616E                 pop     ebp
.text$mn:0000616F                 retn
.text$mn:0000616F ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:0000616F
.text$mn:0000616F _text$mn        ends
.text$mn:0000616F
.text$mn:00006170 ; ===========================================================================
.text$mn:00006170
.text$mn:00006170 ; Segment type: Pure code
.text$mn:00006170 ; Segment permissions: Read/Execute
.text$mn:00006170 _text$mn        segment para public 'CODE' use32
.text$mn:00006170                 assume cs:_text$mn
.text$mn:00006170                 ;org 6170h
.text$mn:00006170 ; COMDAT (pick any)
.text$mn:00006170                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006170
.text$mn:00006170 ; =============== S U B R O U T I N E =======================================
.text$mn:00006170
.text$mn:00006170 ; Attributes: bp-based frame
.text$mn:00006170
.text$mn:00006170 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:00006170                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:00006170 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00006170                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+30p
.text$mn:00006170
.text$mn:00006170 var_8           = dword ptr -8
.text$mn:00006170 var_1           = byte ptr -1
.text$mn:00006170
.text$mn:00006170                 push    ebp
.text$mn:00006171                 mov     ebp, esp
.text$mn:00006173                 sub     esp, 8
.text$mn:00006176                 mov     [ebp+var_8], ecx
.text$mn:00006179                 lea     ecx, [ebp+var_1]
.text$mn:0000617C                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00006181                 mov     ecx, [ebp+var_8] ; this
.text$mn:00006184                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00006189                 mov     eax, [ebp+var_8]
.text$mn:0000618C                 mov     ecx, [eax]
.text$mn:0000618E                 push    ecx
.text$mn:0000618F                 lea     ecx, [ebp+var_1]
.text$mn:00006192                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:00006197                 push    1               ; int
.text$mn:00006199                 mov     edx, [ebp+var_8]
.text$mn:0000619C                 mov     eax, [edx]
.text$mn:0000619E                 push    eax             ; void *
.text$mn:0000619F                 lea     ecx, [ebp+var_1]
.text$mn:000061A2                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:000061A7                 mov     ecx, [ebp+var_8]
.text$mn:000061AA                 mov     dword ptr [ecx], 0
.text$mn:000061B0                 mov     esp, ebp
.text$mn:000061B2                 pop     ebp
.text$mn:000061B3                 retn
.text$mn:000061B3 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:000061B3
.text$mn:000061B3 _text$mn        ends
.text$mn:000061B3
.text$mn:000061B4 ; ===========================================================================
.text$mn:000061B4
.text$mn:000061B4 ; Segment type: Pure code
.text$mn:000061B4 ; Segment permissions: Read/Execute
.text$mn:000061B4 _text$mn        segment para public 'CODE' use32
.text$mn:000061B4                 assume cs:_text$mn
.text$mn:000061B4                 ;org 61B4h
.text$mn:000061B4 ; COMDAT (pick any)
.text$mn:000061B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000061B4
.text$mn:000061B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000061B4
.text$mn:000061B4 ; Attributes: bp-based frame
.text$mn:000061B4
.text$mn:000061B4 ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct tTbData *, class std::allocator<struct tTbData *>>>::_Free_proxy(void)
.text$mn:000061B4                 public ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAEXXZ
.text$mn:000061B4 ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAEXXZ proc near
.text$mn:000061B4                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::~_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>(void)+30p
.text$mn:000061B4
.text$mn:000061B4 var_8           = dword ptr -8
.text$mn:000061B4 var_1           = byte ptr -1
.text$mn:000061B4
.text$mn:000061B4                 push    ebp
.text$mn:000061B5                 mov     ebp, esp
.text$mn:000061B7                 sub     esp, 8
.text$mn:000061BA                 mov     [ebp+var_8], ecx
.text$mn:000061BD                 lea     ecx, [ebp+var_1]
.text$mn:000061C0                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:000061C5                 mov     ecx, [ebp+var_8] ; this
.text$mn:000061C8                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:000061CD                 mov     eax, [ebp+var_8]
.text$mn:000061D0                 mov     ecx, [eax]
.text$mn:000061D2                 push    ecx
.text$mn:000061D3                 lea     ecx, [ebp+var_1]
.text$mn:000061D6                 call    ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:000061DB                 push    1               ; int
.text$mn:000061DD                 mov     edx, [ebp+var_8]
.text$mn:000061E0                 mov     eax, [edx]
.text$mn:000061E2                 push    eax             ; void *
.text$mn:000061E3                 lea     ecx, [ebp+var_1]
.text$mn:000061E6                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(std::_Container_proxy *,uint)
.text$mn:000061EB                 mov     ecx, [ebp+var_8]
.text$mn:000061EE                 mov     dword ptr [ecx], 0
.text$mn:000061F4                 mov     esp, ebp
.text$mn:000061F6                 pop     ebp
.text$mn:000061F7                 retn
.text$mn:000061F7 ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAEXXZ endp
.text$mn:000061F7
.text$mn:000061F7 _text$mn        ends
.text$mn:000061F7
.text$mn:000061F8 ; ===========================================================================
.text$mn:000061F8
.text$mn:000061F8 ; Segment type: Pure code
.text$mn:000061F8 ; Segment permissions: Read/Execute
.text$mn:000061F8 _text$mn        segment para public 'CODE' use32
.text$mn:000061F8                 assume cs:_text$mn
.text$mn:000061F8                 ;org 61F8h
.text$mn:000061F8 ; COMDAT (pick any)
.text$mn:000061F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000061F8
.text$mn:000061F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000061F8
.text$mn:000061F8 ; Attributes: bp-based frame
.text$mn:000061F8
.text$mn:000061F8 ; public: struct std::_Wrap_alloc<class std::allocator<char>> __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Getal(void)const
.text$mn:000061F8                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
.text$mn:000061F8 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
.text$mn:000061F8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+B4p
.text$mn:000061F8                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+1Bp ...
.text$mn:000061F8
.text$mn:000061F8 var_4           = dword ptr -4
.text$mn:000061F8 arg_0           = dword ptr  8
.text$mn:000061F8
.text$mn:000061F8                 push    ebp
.text$mn:000061F9                 mov     ebp, esp
.text$mn:000061FB                 push    ecx
.text$mn:000061FC                 mov     [ebp+var_4], ecx
.text$mn:000061FF                 mov     ecx, [ebp+arg_0]
.text$mn:00006202                 call    ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)
.text$mn:00006207                 mov     eax, [ebp+arg_0]
.text$mn:0000620A                 mov     esp, ebp
.text$mn:0000620C                 pop     ebp
.text$mn:0000620D                 retn    4
.text$mn:0000620D ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ endp
.text$mn:0000620D
.text$mn:0000620D _text$mn        ends
.text$mn:0000620D
.text$mn:00006210 ; ===========================================================================
.text$mn:00006210
.text$mn:00006210 ; Segment type: Pure code
.text$mn:00006210 ; Segment permissions: Read/Execute
.text$mn:00006210 _text$mn        segment para public 'CODE' use32
.text$mn:00006210                 assume cs:_text$mn
.text$mn:00006210                 ;org 6210h
.text$mn:00006210 ; COMDAT (pick any)
.text$mn:00006210                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006210
.text$mn:00006210 ; =============== S U B R O U T I N E =======================================
.text$mn:00006210
.text$mn:00006210 ; Attributes: bp-based frame
.text$mn:00006210
.text$mn:00006210 ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Getal(void)const
.text$mn:00006210                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
.text$mn:00006210 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ proc near
.text$mn:00006210                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+B4p
.text$mn:00006210                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+1Bp ...
.text$mn:00006210
.text$mn:00006210 var_4           = dword ptr -4
.text$mn:00006210 arg_0           = dword ptr  8
.text$mn:00006210
.text$mn:00006210                 push    ebp
.text$mn:00006211                 mov     ebp, esp
.text$mn:00006213                 push    ecx
.text$mn:00006214                 mov     [ebp+var_4], ecx
.text$mn:00006217                 mov     ecx, [ebp+arg_0]
.text$mn:0000621A                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)
.text$mn:0000621F                 mov     eax, [ebp+arg_0]
.text$mn:00006222                 mov     esp, ebp
.text$mn:00006224                 pop     ebp
.text$mn:00006225                 retn    4
.text$mn:00006225 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ endp
.text$mn:00006225
.text$mn:00006225 _text$mn        ends
.text$mn:00006225
.text$mn:00006228 ; ===========================================================================
.text$mn:00006228
.text$mn:00006228 ; Segment type: Pure code
.text$mn:00006228 ; Segment permissions: Read/Execute
.text$mn:00006228 _text$mn        segment para public 'CODE' use32
.text$mn:00006228                 assume cs:_text$mn
.text$mn:00006228                 ;org 6228h
.text$mn:00006228 ; COMDAT (pick any)
.text$mn:00006228                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006228
.text$mn:00006228 ; =============== S U B R O U T I N E =======================================
.text$mn:00006228
.text$mn:00006228 ; Attributes: bp-based frame
.text$mn:00006228
.text$mn:00006228 ; public: struct std::_Wrap_alloc<class std::allocator<struct tTbData *>> __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct tTbData *, class std::allocator<struct tTbData *>>>::_Getal(void)const
.text$mn:00006228                 public ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@2@XZ
.text$mn:00006228 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@2@XZ proc near
.text$mn:00006228                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Umove<tTbData * *>(tTbData * *,tTbData * *,tTbData * *)+10p
.text$mn:00006228                                         ; std::vector<tTbData *,std::allocator<tTbData *>>::vector<tTbData *,std::allocator<tTbData *>>(std::vector<tTbData *,std::allocator<tTbData *>> &&)+2Fp ...
.text$mn:00006228
.text$mn:00006228 var_4           = dword ptr -4
.text$mn:00006228 arg_0           = dword ptr  8
.text$mn:00006228
.text$mn:00006228                 push    ebp
.text$mn:00006229                 mov     ebp, esp
.text$mn:0000622B                 push    ecx
.text$mn:0000622C                 mov     [ebp+var_4], ecx
.text$mn:0000622F                 mov     ecx, [ebp+arg_0]
.text$mn:00006232                 call    ??0?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<tTbData *>>::_Wrap_alloc<std::allocator<tTbData *>>(void)
.text$mn:00006237                 mov     eax, [ebp+arg_0]
.text$mn:0000623A                 mov     esp, ebp
.text$mn:0000623C                 pop     ebp
.text$mn:0000623D                 retn    4
.text$mn:0000623D ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@2@XZ endp
.text$mn:0000623D
.text$mn:0000623D _text$mn        ends
.text$mn:0000623D
.text$mn:00006240 ; ===========================================================================
.text$mn:00006240
.text$mn:00006240 ; Segment type: Pure code
.text$mn:00006240 ; Segment permissions: Read/Execute
.text$mn:00006240 _text$mn        segment para public 'CODE' use32
.text$mn:00006240                 assume cs:_text$mn
.text$mn:00006240                 ;org 6240h
.text$mn:00006240 ; COMDAT (pick any)
.text$mn:00006240                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006240
.text$mn:00006240 ; =============== S U B R O U T I N E =======================================
.text$mn:00006240
.text$mn:00006240 ; Attributes: bp-based frame
.text$mn:00006240
.text$mn:00006240 ; const struct std::_Container_base12 *__thiscall std::_Iterator_base12::_Getcont(std::_Iterator_base12 *__hidden this)
.text$mn:00006240                 public ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
.text$mn:00006240 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ proc near
.text$mn:00006240                                         ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+=(int)+Bp
.text$mn:00006240                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+=(int)+23p ...
.text$mn:00006240
.text$mn:00006240 var_8           = dword ptr -8
.text$mn:00006240 var_4           = dword ptr -4
.text$mn:00006240
.text$mn:00006240                 push    ebp
.text$mn:00006241                 mov     ebp, esp
.text$mn:00006243                 sub     esp, 8
.text$mn:00006246                 mov     [ebp+var_4], ecx
.text$mn:00006249                 mov     eax, [ebp+var_4]
.text$mn:0000624C                 cmp     dword ptr [eax], 0
.text$mn:0000624F                 jnz     short loc_625A
.text$mn:00006251                 mov     [ebp+var_8], 0
.text$mn:00006258                 jmp     short loc_6264
.text$mn:0000625A ; ---------------------------------------------------------------------------
.text$mn:0000625A
.text$mn:0000625A loc_625A:                               ; CODE XREF: std::_Iterator_base12::_Getcont(void)+Fj
.text$mn:0000625A                 mov     ecx, [ebp+var_4]
.text$mn:0000625D                 mov     edx, [ecx]
.text$mn:0000625F                 mov     eax, [edx]
.text$mn:00006261                 mov     [ebp+var_8], eax
.text$mn:00006264
.text$mn:00006264 loc_6264:                               ; CODE XREF: std::_Iterator_base12::_Getcont(void)+18j
.text$mn:00006264                 mov     eax, [ebp+var_8]
.text$mn:00006267                 mov     esp, ebp
.text$mn:00006269                 pop     ebp
.text$mn:0000626A                 retn
.text$mn:0000626A ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ endp
.text$mn:0000626A
.text$mn:0000626A ; ---------------------------------------------------------------------------
.text$mn:0000626B                 align 4
.text$mn:0000626B _text$mn        ends
.text$mn:0000626B
.text$mn:0000626C ; ===========================================================================
.text$mn:0000626C
.text$mn:0000626C ; Segment type: Pure code
.text$mn:0000626C ; Segment permissions: Read/Execute
.text$mn:0000626C _text$mn        segment para public 'CODE' use32
.text$mn:0000626C                 assume cs:_text$mn
.text$mn:0000626C                 ;org 626Ch
.text$mn:0000626C ; COMDAT (pick any)
.text$mn:0000626C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000626C
.text$mn:0000626C ; =============== S U B R O U T I N E =======================================
.text$mn:0000626C
.text$mn:0000626C ; Attributes: bp-based frame
.text$mn:0000626C
.text$mn:0000626C ; struct std::_Iterator_base12 **__thiscall std::_Container_base12::_Getpfirst(std::_Container_base12 *__hidden this)
.text$mn:0000626C                 public ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
.text$mn:0000626C ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ proc near
.text$mn:0000626C                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Orphan_range(tTbData * *,tTbData * *)+3Cp
.text$mn:0000626C
.text$mn:0000626C var_8           = dword ptr -8
.text$mn:0000626C var_4           = dword ptr -4
.text$mn:0000626C
.text$mn:0000626C                 push    ebp
.text$mn:0000626D                 mov     ebp, esp
.text$mn:0000626F                 sub     esp, 8
.text$mn:00006272                 mov     [ebp+var_4], ecx
.text$mn:00006275                 mov     eax, [ebp+var_4]
.text$mn:00006278                 cmp     dword ptr [eax], 0
.text$mn:0000627B                 jnz     short loc_6286
.text$mn:0000627D                 mov     [ebp+var_8], 0
.text$mn:00006284                 jmp     short loc_6291
.text$mn:00006286 ; ---------------------------------------------------------------------------
.text$mn:00006286
.text$mn:00006286 loc_6286:                               ; CODE XREF: std::_Container_base12::_Getpfirst(void)+Fj
.text$mn:00006286                 mov     ecx, [ebp+var_4]
.text$mn:00006289                 mov     edx, [ecx]
.text$mn:0000628B                 add     edx, 4
.text$mn:0000628E                 mov     [ebp+var_8], edx
.text$mn:00006291
.text$mn:00006291 loc_6291:                               ; CODE XREF: std::_Container_base12::_Getpfirst(void)+18j
.text$mn:00006291                 mov     eax, [ebp+var_8]
.text$mn:00006294                 mov     esp, ebp
.text$mn:00006296                 pop     ebp
.text$mn:00006297                 retn
.text$mn:00006297 ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ endp
.text$mn:00006297
.text$mn:00006297 _text$mn        ends
.text$mn:00006297
.text$mn:00006298 ; ===========================================================================
.text$mn:00006298
.text$mn:00006298 ; Segment type: Pure code
.text$mn:00006298 ; Segment permissions: Read/Execute
.text$mn:00006298 _text$mn        segment para public 'CODE' use32
.text$mn:00006298                 assume cs:_text$mn
.text$mn:00006298                 ;org 6298h
.text$mn:00006298 ; COMDAT (pick any)
.text$mn:00006298                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006298
.text$mn:00006298 ; =============== S U B R O U T I N E =======================================
.text$mn:00006298
.text$mn:00006298 ; Attributes: bp-based frame
.text$mn:00006298
.text$mn:00006298 ; struct std::_Iterator_base12 **__thiscall std::_Iterator_base12::_Getpnext(std::_Iterator_base12 *__hidden this)
.text$mn:00006298                 public ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
.text$mn:00006298 ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ proc near
.text$mn:00006298                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Orphan_range(tTbData * *,tTbData * *)+71p
.text$mn:00006298                                         ; std::vector<tTbData *,std::allocator<tTbData *>>::_Orphan_range(tTbData * *,tTbData * *)+8Ap
.text$mn:00006298
.text$mn:00006298 var_4           = dword ptr -4
.text$mn:00006298
.text$mn:00006298                 push    ebp
.text$mn:00006299                 mov     ebp, esp
.text$mn:0000629B                 push    ecx
.text$mn:0000629C                 mov     [ebp+var_4], ecx
.text$mn:0000629F                 mov     eax, [ebp+var_4]
.text$mn:000062A2                 add     eax, 4
.text$mn:000062A5                 mov     esp, ebp
.text$mn:000062A7                 pop     ebp
.text$mn:000062A8                 retn
.text$mn:000062A8 ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ endp
.text$mn:000062A8
.text$mn:000062A8 ; ---------------------------------------------------------------------------
.text$mn:000062A9                 align 4
.text$mn:000062A9 _text$mn        ends
.text$mn:000062A9
.text$mn:000062AC ; ===========================================================================
.text$mn:000062AC
.text$mn:000062AC ; Segment type: Pure code
.text$mn:000062AC ; Segment permissions: Read/Execute
.text$mn:000062AC _text$mn        segment para public 'CODE' use32
.text$mn:000062AC                 assume cs:_text$mn
.text$mn:000062AC                 ;org 62ACh
.text$mn:000062AC ; COMDAT (pick any)
.text$mn:000062AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000062AC
.text$mn:000062AC ; =============== S U B R O U T I N E =======================================
.text$mn:000062AC
.text$mn:000062AC ; Attributes: bp-based frame
.text$mn:000062AC
.text$mn:000062AC ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Grow(unsigned int, bool)
.text$mn:000062AC                 public ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
.text$mn:000062AC ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
.text$mn:000062AC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+6Ap
.text$mn:000062AC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+5Fp
.text$mn:000062AC
.text$mn:000062AC var_C           = dword ptr -0Ch
.text$mn:000062AC Size            = dword ptr -8
.text$mn:000062AC var_4           = dword ptr -4
.text$mn:000062AC arg_0           = dword ptr  8
.text$mn:000062AC arg_4           = byte ptr  0Ch
.text$mn:000062AC
.text$mn:000062AC                 push    ebp
.text$mn:000062AD                 mov     ebp, esp
.text$mn:000062AF                 sub     esp, 0Ch
.text$mn:000062B2                 mov     [ebp+var_4], ecx
.text$mn:000062B5                 mov     ecx, [ebp+var_4]
.text$mn:000062B8                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:000062BD                 cmp     eax, [ebp+arg_0]
.text$mn:000062C0                 jnb     short loc_62CA
.text$mn:000062C2                 mov     ecx, [ebp+var_4]
.text$mn:000062C5                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:000062CA
.text$mn:000062CA loc_62CA:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+14j
.text$mn:000062CA                 mov     eax, [ebp+var_4]
.text$mn:000062CD                 mov     ecx, [eax+18h]
.text$mn:000062D0                 cmp     ecx, [ebp+arg_0]
.text$mn:000062D3                 jnb     short loc_62EA
.text$mn:000062D5                 mov     edx, [ebp+var_4]
.text$mn:000062D8                 mov     eax, [edx+14h]
.text$mn:000062DB                 push    eax
.text$mn:000062DC                 mov     ecx, [ebp+arg_0]
.text$mn:000062DF                 push    ecx
.text$mn:000062E0                 mov     ecx, [ebp+var_4]
.text$mn:000062E3                 call    ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)
.text$mn:000062E8                 jmp     short loc_6334
.text$mn:000062EA ; ---------------------------------------------------------------------------
.text$mn:000062EA
.text$mn:000062EA loc_62EA:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+27j
.text$mn:000062EA                 movzx   edx, [ebp+arg_4]
.text$mn:000062EE                 test    edx, edx
.text$mn:000062F0                 jz      short loc_6324
.text$mn:000062F2                 cmp     [ebp+arg_0], 10h
.text$mn:000062F6                 jnb     short loc_6324
.text$mn:000062F8                 mov     eax, [ebp+var_4]
.text$mn:000062FB                 mov     ecx, [ebp+arg_0]
.text$mn:000062FE                 cmp     ecx, [eax+14h]
.text$mn:00006301                 jnb     short loc_630B
.text$mn:00006303                 mov     edx, [ebp+arg_0]
.text$mn:00006306                 mov     [ebp+Size], edx
.text$mn:00006309                 jmp     short loc_6314
.text$mn:0000630B ; ---------------------------------------------------------------------------
.text$mn:0000630B
.text$mn:0000630B loc_630B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+55j
.text$mn:0000630B                 mov     eax, [ebp+var_4]
.text$mn:0000630E                 mov     ecx, [eax+14h]
.text$mn:00006311                 mov     [ebp+Size], ecx
.text$mn:00006314
.text$mn:00006314 loc_6314:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+5Dj
.text$mn:00006314                 mov     edx, [ebp+Size]
.text$mn:00006317                 push    edx             ; Size
.text$mn:00006318                 push    1               ; char
.text$mn:0000631A                 mov     ecx, [ebp+var_4]
.text$mn:0000631D                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00006322                 jmp     short loc_6334
.text$mn:00006324 ; ---------------------------------------------------------------------------
.text$mn:00006324
.text$mn:00006324 loc_6324:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+44j
.text$mn:00006324                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+4Aj
.text$mn:00006324                 cmp     [ebp+arg_0], 0
.text$mn:00006328                 jnz     short loc_6334
.text$mn:0000632A                 push    0
.text$mn:0000632C                 mov     ecx, [ebp+var_4]
.text$mn:0000632F                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00006334
.text$mn:00006334 loc_6334:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+3Cj
.text$mn:00006334                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+76j ...
.text$mn:00006334                 cmp     [ebp+arg_0], 0
.text$mn:00006338                 jbe     short loc_6343
.text$mn:0000633A                 mov     [ebp+var_C], 1
.text$mn:00006341                 jmp     short loc_634A
.text$mn:00006343 ; ---------------------------------------------------------------------------
.text$mn:00006343
.text$mn:00006343 loc_6343:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+8Cj
.text$mn:00006343                 mov     [ebp+var_C], 0
.text$mn:0000634A
.text$mn:0000634A loc_634A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+95j
.text$mn:0000634A                 mov     al, byte ptr [ebp+var_C]
.text$mn:0000634D                 mov     esp, ebp
.text$mn:0000634F                 pop     ebp
.text$mn:00006350                 retn    8
.text$mn:00006350 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z endp
.text$mn:00006350
.text$mn:00006350 ; ---------------------------------------------------------------------------
.text$mn:00006353                 align 4
.text$mn:00006353 _text$mn        ends
.text$mn:00006353
.text$mn:00006354 ; ===========================================================================
.text$mn:00006354
.text$mn:00006354 ; Segment type: Pure code
.text$mn:00006354 ; Segment permissions: Read/Execute
.text$mn:00006354 _text$mn        segment para public 'CODE' use32
.text$mn:00006354                 assume cs:_text$mn
.text$mn:00006354                 ;org 6354h
.text$mn:00006354 ; COMDAT (pick any)
.text$mn:00006354                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006354
.text$mn:00006354 ; =============== S U B R O U T I N E =======================================
.text$mn:00006354
.text$mn:00006354 ; Attributes: bp-based frame
.text$mn:00006354
.text$mn:00006354 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Grow(unsigned int, bool)
.text$mn:00006354                 public ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z
.text$mn:00006354 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z proc near
.text$mn:00006354                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+6Dp
.text$mn:00006354                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+8Ep ...
.text$mn:00006354
.text$mn:00006354 var_C           = dword ptr -0Ch
.text$mn:00006354 var_8           = dword ptr -8
.text$mn:00006354 var_4           = dword ptr -4
.text$mn:00006354 arg_0           = dword ptr  8
.text$mn:00006354 arg_4           = byte ptr  0Ch
.text$mn:00006354
.text$mn:00006354                 push    ebp
.text$mn:00006355                 mov     ebp, esp
.text$mn:00006357                 sub     esp, 0Ch
.text$mn:0000635A                 mov     [ebp+var_4], ecx
.text$mn:0000635D                 mov     ecx, [ebp+var_4]
.text$mn:00006360                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00006365                 cmp     eax, [ebp+arg_0]
.text$mn:00006368                 jnb     short loc_6372
.text$mn:0000636A                 mov     ecx, [ebp+var_4]
.text$mn:0000636D                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00006372
.text$mn:00006372 loc_6372:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+14j
.text$mn:00006372                 mov     eax, [ebp+var_4]
.text$mn:00006375                 mov     ecx, [eax+18h]
.text$mn:00006378                 cmp     ecx, [ebp+arg_0]
.text$mn:0000637B                 jnb     short loc_6392
.text$mn:0000637D                 mov     edx, [ebp+var_4]
.text$mn:00006380                 mov     eax, [edx+14h]
.text$mn:00006383                 push    eax
.text$mn:00006384                 mov     ecx, [ebp+arg_0]
.text$mn:00006387                 push    ecx
.text$mn:00006388                 mov     ecx, [ebp+var_4]
.text$mn:0000638B                 call    ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)
.text$mn:00006390                 jmp     short loc_63DC
.text$mn:00006392 ; ---------------------------------------------------------------------------
.text$mn:00006392
.text$mn:00006392 loc_6392:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+27j
.text$mn:00006392                 movzx   edx, [ebp+arg_4]
.text$mn:00006396                 test    edx, edx
.text$mn:00006398                 jz      short loc_63CC
.text$mn:0000639A                 cmp     [ebp+arg_0], 8
.text$mn:0000639E                 jnb     short loc_63CC
.text$mn:000063A0                 mov     eax, [ebp+var_4]
.text$mn:000063A3                 mov     ecx, [ebp+arg_0]
.text$mn:000063A6                 cmp     ecx, [eax+14h]
.text$mn:000063A9                 jnb     short loc_63B3
.text$mn:000063AB                 mov     edx, [ebp+arg_0]
.text$mn:000063AE                 mov     [ebp+var_8], edx
.text$mn:000063B1                 jmp     short loc_63BC
.text$mn:000063B3 ; ---------------------------------------------------------------------------
.text$mn:000063B3
.text$mn:000063B3 loc_63B3:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+55j
.text$mn:000063B3                 mov     eax, [ebp+var_4]
.text$mn:000063B6                 mov     ecx, [eax+14h]
.text$mn:000063B9                 mov     [ebp+var_8], ecx
.text$mn:000063BC
.text$mn:000063BC loc_63BC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+5Dj
.text$mn:000063BC                 mov     edx, [ebp+var_8]
.text$mn:000063BF                 push    edx
.text$mn:000063C0                 push    1
.text$mn:000063C2                 mov     ecx, [ebp+var_4]
.text$mn:000063C5                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000063CA                 jmp     short loc_63DC
.text$mn:000063CC ; ---------------------------------------------------------------------------
.text$mn:000063CC
.text$mn:000063CC loc_63CC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+44j
.text$mn:000063CC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+4Aj
.text$mn:000063CC                 cmp     [ebp+arg_0], 0
.text$mn:000063D0                 jnz     short loc_63DC
.text$mn:000063D2                 push    0
.text$mn:000063D4                 mov     ecx, [ebp+var_4]
.text$mn:000063D7                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000063DC
.text$mn:000063DC loc_63DC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+3Cj
.text$mn:000063DC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+76j ...
.text$mn:000063DC                 cmp     [ebp+arg_0], 0
.text$mn:000063E0                 jbe     short loc_63EB
.text$mn:000063E2                 mov     [ebp+var_C], 1
.text$mn:000063E9                 jmp     short loc_63F2
.text$mn:000063EB ; ---------------------------------------------------------------------------
.text$mn:000063EB
.text$mn:000063EB loc_63EB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+8Cj
.text$mn:000063EB                 mov     [ebp+var_C], 0
.text$mn:000063F2
.text$mn:000063F2 loc_63F2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+95j
.text$mn:000063F2                 mov     al, byte ptr [ebp+var_C]
.text$mn:000063F5                 mov     esp, ebp
.text$mn:000063F7                 pop     ebp
.text$mn:000063F8                 retn    8
.text$mn:000063F8 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z endp
.text$mn:000063F8
.text$mn:000063F8 ; ---------------------------------------------------------------------------
.text$mn:000063FB                 align 4
.text$mn:000063FB _text$mn        ends
.text$mn:000063FB
.text$mn:000063FC ; ===========================================================================
.text$mn:000063FC
.text$mn:000063FC ; Segment type: Pure code
.text$mn:000063FC ; Segment permissions: Read/Execute
.text$mn:000063FC _text$mn        segment para public 'CODE' use32
.text$mn:000063FC                 assume cs:_text$mn
.text$mn:000063FC                 ;org 63FCh
.text$mn:000063FC ; COMDAT (pick any)
.text$mn:000063FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000063FC
.text$mn:000063FC ; =============== S U B R O U T I N E =======================================
.text$mn:000063FC
.text$mn:000063FC ; Attributes: bp-based frame
.text$mn:000063FC
.text$mn:000063FC ; protected: unsigned int __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::_Grow_to(unsigned int)const
.text$mn:000063FC                 public ?_Grow_to@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEII@Z
.text$mn:000063FC ?_Grow_to@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEII@Z proc near
.text$mn:000063FC                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Reserve(uint)+45p
.text$mn:000063FC
.text$mn:000063FC var_C           = dword ptr -0Ch
.text$mn:000063FC var_8           = dword ptr -8
.text$mn:000063FC var_4           = dword ptr -4
.text$mn:000063FC arg_0           = dword ptr  8
.text$mn:000063FC
.text$mn:000063FC                 push    ebp
.text$mn:000063FD                 mov     ebp, esp
.text$mn:000063FF                 sub     esp, 0Ch
.text$mn:00006402                 mov     [ebp+var_8], ecx
.text$mn:00006405                 mov     ecx, [ebp+var_8]
.text$mn:00006408                 call    ?capacity@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ ; std::vector<tTbData *,std::allocator<tTbData *>>::capacity(void)
.text$mn:0000640D                 mov     [ebp+var_4], eax
.text$mn:00006410                 mov     ecx, [ebp+var_8]
.text$mn:00006413                 call    ?max_size@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ ; std::vector<tTbData *,std::allocator<tTbData *>>::max_size(void)
.text$mn:00006418                 mov     ecx, [ebp+var_4]
.text$mn:0000641B                 shr     ecx, 1
.text$mn:0000641D                 sub     eax, ecx
.text$mn:0000641F                 cmp     eax, [ebp+var_4]
.text$mn:00006422                 jnb     short loc_642D
.text$mn:00006424                 mov     [ebp+var_C], 0
.text$mn:0000642B                 jmp     short loc_6438
.text$mn:0000642D ; ---------------------------------------------------------------------------
.text$mn:0000642D
.text$mn:0000642D loc_642D:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Grow_to(uint)+26j
.text$mn:0000642D                 mov     edx, [ebp+var_4]
.text$mn:00006430                 shr     edx, 1
.text$mn:00006432                 add     edx, [ebp+var_4]
.text$mn:00006435                 mov     [ebp+var_C], edx
.text$mn:00006438
.text$mn:00006438 loc_6438:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Grow_to(uint)+2Fj
.text$mn:00006438                 mov     eax, [ebp+var_C]
.text$mn:0000643B                 mov     [ebp+var_4], eax
.text$mn:0000643E                 mov     ecx, [ebp+var_4]
.text$mn:00006441                 cmp     ecx, [ebp+arg_0]
.text$mn:00006444                 jnb     short loc_644C
.text$mn:00006446                 mov     edx, [ebp+arg_0]
.text$mn:00006449                 mov     [ebp+var_4], edx
.text$mn:0000644C
.text$mn:0000644C loc_644C:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Grow_to(uint)+48j
.text$mn:0000644C                 mov     eax, [ebp+var_4]
.text$mn:0000644F                 mov     esp, ebp
.text$mn:00006451                 pop     ebp
.text$mn:00006452                 retn    4
.text$mn:00006452 ?_Grow_to@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEII@Z endp
.text$mn:00006452
.text$mn:00006452 ; ---------------------------------------------------------------------------
.text$mn:00006455                 align 4
.text$mn:00006455 _text$mn        ends
.text$mn:00006455
.text$mn:00006458 ; ===========================================================================
.text$mn:00006458
.text$mn:00006458 ; Segment type: Pure code
.text$mn:00006458 ; Segment permissions: Read/Execute
.text$mn:00006458 _text$mn        segment para public 'CODE' use32
.text$mn:00006458                 assume cs:_text$mn
.text$mn:00006458                 ;org 6458h
.text$mn:00006458 ; COMDAT (pick any)
.text$mn:00006458                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006458
.text$mn:00006458 ; =============== S U B R O U T I N E =======================================
.text$mn:00006458
.text$mn:00006458 ; Attributes: bp-based frame
.text$mn:00006458
.text$mn:00006458 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Inside(char const *)
.text$mn:00006458                 public ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
.text$mn:00006458 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
.text$mn:00006458                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+2Ap
.text$mn:00006458
.text$mn:00006458 var_4           = dword ptr -4
.text$mn:00006458 arg_0           = dword ptr  8
.text$mn:00006458
.text$mn:00006458                 push    ebp
.text$mn:00006459                 mov     ebp, esp
.text$mn:0000645B                 push    ecx
.text$mn:0000645C                 mov     [ebp+var_4], ecx
.text$mn:0000645F                 cmp     [ebp+arg_0], 0
.text$mn:00006463                 jz      short loc_6485
.text$mn:00006465                 mov     ecx, [ebp+var_4]
.text$mn:00006468                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000646D                 cmp     [ebp+arg_0], eax
.text$mn:00006470                 jb      short loc_6485
.text$mn:00006472                 mov     ecx, [ebp+var_4]
.text$mn:00006475                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000647A                 mov     ecx, [ebp+var_4]
.text$mn:0000647D                 add     eax, [ecx+14h]
.text$mn:00006480                 cmp     eax, [ebp+arg_0]
.text$mn:00006483                 ja      short loc_648B
.text$mn:00006485
.text$mn:00006485 loc_6485:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+Bj
.text$mn:00006485                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+18j
.text$mn:00006485                 xor     al, al
.text$mn:00006487                 jmp     short loc_648D
.text$mn:00006489 ; ---------------------------------------------------------------------------
.text$mn:00006489                 jmp     short loc_648D
.text$mn:0000648B ; ---------------------------------------------------------------------------
.text$mn:0000648B
.text$mn:0000648B loc_648B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Bj
.text$mn:0000648B                 mov     al, 1
.text$mn:0000648D
.text$mn:0000648D loc_648D:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Fj
.text$mn:0000648D                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+31j
.text$mn:0000648D                 mov     esp, ebp
.text$mn:0000648F                 pop     ebp
.text$mn:00006490                 retn    4
.text$mn:00006490 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z endp
.text$mn:00006490
.text$mn:00006490 ; ---------------------------------------------------------------------------
.text$mn:00006493                 align 4
.text$mn:00006493 _text$mn        ends
.text$mn:00006493
.text$mn:00006494 ; ===========================================================================
.text$mn:00006494
.text$mn:00006494 ; Segment type: Pure code
.text$mn:00006494 ; Segment permissions: Read/Execute
.text$mn:00006494 _text$mn        segment para public 'CODE' use32
.text$mn:00006494                 assume cs:_text$mn
.text$mn:00006494                 ;org 6494h
.text$mn:00006494 ; COMDAT (pick any)
.text$mn:00006494                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006494
.text$mn:00006494 ; =============== S U B R O U T I N E =======================================
.text$mn:00006494
.text$mn:00006494 ; Attributes: bp-based frame
.text$mn:00006494
.text$mn:00006494 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:00006494                 public ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z
.text$mn:00006494 ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z proc near
.text$mn:00006494                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+2Cp
.text$mn:00006494                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+2Ap
.text$mn:00006494
.text$mn:00006494 var_4           = dword ptr -4
.text$mn:00006494 arg_0           = dword ptr  8
.text$mn:00006494
.text$mn:00006494                 push    ebp
.text$mn:00006495                 mov     ebp, esp
.text$mn:00006497                 push    ecx
.text$mn:00006498                 mov     [ebp+var_4], ecx
.text$mn:0000649B                 cmp     [ebp+arg_0], 0
.text$mn:0000649F                 jz      short loc_64C4
.text$mn:000064A1                 mov     ecx, [ebp+var_4]
.text$mn:000064A4                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000064A9                 cmp     [ebp+arg_0], eax
.text$mn:000064AC                 jb      short loc_64C4
.text$mn:000064AE                 mov     ecx, [ebp+var_4]
.text$mn:000064B1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000064B6                 mov     ecx, [ebp+var_4]
.text$mn:000064B9                 mov     edx, [ecx+14h]
.text$mn:000064BC                 lea     eax, [eax+edx*2]
.text$mn:000064BF                 cmp     eax, [ebp+arg_0]
.text$mn:000064C2                 ja      short loc_64CA
.text$mn:000064C4
.text$mn:000064C4 loc_64C4:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+Bj
.text$mn:000064C4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+18j
.text$mn:000064C4                 xor     al, al
.text$mn:000064C6                 jmp     short loc_64CC
.text$mn:000064C8 ; ---------------------------------------------------------------------------
.text$mn:000064C8                 jmp     short loc_64CC
.text$mn:000064CA ; ---------------------------------------------------------------------------
.text$mn:000064CA
.text$mn:000064CA loc_64CA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+2Ej
.text$mn:000064CA                 mov     al, 1
.text$mn:000064CC
.text$mn:000064CC loc_64CC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+32j
.text$mn:000064CC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+34j
.text$mn:000064CC                 mov     esp, ebp
.text$mn:000064CE                 pop     ebp
.text$mn:000064CF                 retn    4
.text$mn:000064CF ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z endp
.text$mn:000064CF
.text$mn:000064CF ; ---------------------------------------------------------------------------
.text$mn:000064D2                 align 4
.text$mn:000064D2 _text$mn        ends
.text$mn:000064D2
.text$mn:000064D4 ; ===========================================================================
.text$mn:000064D4
.text$mn:000064D4 ; Segment type: Pure code
.text$mn:000064D4 ; Segment permissions: Read/Execute
.text$mn:000064D4 _text$mn        segment para public 'CODE' use32
.text$mn:000064D4                 assume cs:_text$mn
.text$mn:000064D4                 ;org 64D4h
.text$mn:000064D4 ; COMDAT (pick any)
.text$mn:000064D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064D4
.text$mn:000064D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000064D4
.text$mn:000064D4 ; Attributes: bp-based frame
.text$mn:000064D4
.text$mn:000064D4 ; protected: bool __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::_Inside(struct tTbData * const *)const
.text$mn:000064D4                 public ?_Inside@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBE_NPBQAUtTbData@@@Z
.text$mn:000064D4 ?_Inside@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBE_NPBQAUtTbData@@@Z proc near
.text$mn:000064D4                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * &&)+19p
.text$mn:000064D4                                         ; std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * const &)+19p
.text$mn:000064D4
.text$mn:000064D4 var_8           = dword ptr -8
.text$mn:000064D4 var_4           = dword ptr -4
.text$mn:000064D4 arg_0           = dword ptr  8
.text$mn:000064D4
.text$mn:000064D4                 push    ebp
.text$mn:000064D5                 mov     ebp, esp
.text$mn:000064D7                 sub     esp, 8
.text$mn:000064DA                 mov     [ebp+var_4], ecx
.text$mn:000064DD                 mov     eax, [ebp+var_4]
.text$mn:000064E0                 mov     ecx, [ebp+arg_0]
.text$mn:000064E3                 cmp     ecx, [eax+8]
.text$mn:000064E6                 jnb     short loc_64FC
.text$mn:000064E8                 mov     edx, [ebp+var_4]
.text$mn:000064EB                 mov     eax, [edx+4]
.text$mn:000064EE                 cmp     eax, [ebp+arg_0]
.text$mn:000064F1                 ja      short loc_64FC
.text$mn:000064F3                 mov     [ebp+var_8], 1
.text$mn:000064FA                 jmp     short loc_6503
.text$mn:000064FC ; ---------------------------------------------------------------------------
.text$mn:000064FC
.text$mn:000064FC loc_64FC:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Inside(tTbData * const *)+12j
.text$mn:000064FC                                         ; std::vector<tTbData *,std::allocator<tTbData *>>::_Inside(tTbData * const *)+1Dj
.text$mn:000064FC                 mov     [ebp+var_8], 0
.text$mn:00006503
.text$mn:00006503 loc_6503:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Inside(tTbData * const *)+26j
.text$mn:00006503                 mov     al, byte ptr [ebp+var_8]
.text$mn:00006506                 mov     esp, ebp
.text$mn:00006508                 pop     ebp
.text$mn:00006509                 retn    4
.text$mn:00006509 ?_Inside@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBE_NPBQAUtTbData@@@Z endp
.text$mn:00006509
.text$mn:00006509 _text$mn        ends
.text$mn:00006509
.text$mn:0000650C ; ===========================================================================
.text$mn:0000650C
.text$mn:0000650C ; Segment type: Pure code
.text$mn:0000650C ; Segment permissions: Read/Execute
.text$mn:0000650C _text$mn        segment para public 'CODE' use32
.text$mn:0000650C                 assume cs:_text$mn
.text$mn:0000650C                 ;org 650Ch
.text$mn:0000650C ; COMDAT (pick any)
.text$mn:0000650C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000650C
.text$mn:0000650C ; =============== S U B R O U T I N E =======================================
.text$mn:0000650C
.text$mn:0000650C ; Attributes: bp-based frame
.text$mn:0000650C
.text$mn:0000650C ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<struct tTbData *>>> __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::_Make_iter(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct tTbData *>>>)const
.text$mn:0000650C                 public ?_Make_iter@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z
.text$mn:0000650C ?_Make_iter@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z proc near
.text$mn:0000650C                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>)+EEp
.text$mn:0000650C
.text$mn:0000650C var_14          = dword ptr -14h
.text$mn:0000650C var_10          = dword ptr -10h
.text$mn:0000650C var_C           = dword ptr -0Ch
.text$mn:0000650C var_4           = dword ptr -4
.text$mn:0000650C arg_0           = dword ptr  8
.text$mn:0000650C arg_4           = byte ptr  0Ch
.text$mn:0000650C arg_C           = dword ptr  14h
.text$mn:0000650C
.text$mn:0000650C                 push    ebp
.text$mn:0000650D                 mov     ebp, esp
.text$mn:0000650F                 push    0FFFFFFFFh
.text$mn:00006511                 push    offset __ehhandler$?_Make_iter@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z
.text$mn:00006516                 mov     eax, large fs:0
.text$mn:0000651C                 push    eax
.text$mn:0000651D                 sub     esp, 8
.text$mn:00006520                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006525                 xor     eax, ebp
.text$mn:00006527                 push    eax
.text$mn:00006528                 lea     eax, [ebp+var_C]
.text$mn:0000652B                 mov     large fs:0, eax
.text$mn:00006531                 mov     [ebp+var_14], ecx
.text$mn:00006534                 mov     [ebp+var_10], 0
.text$mn:0000653B                 mov     [ebp+var_4], 1
.text$mn:00006542                 mov     eax, [ebp+var_14]
.text$mn:00006545                 push    eax             ; struct std::_Container_base12 *
.text$mn:00006546                 mov     ecx, [ebp+arg_C]
.text$mn:00006549                 push    ecx             ; int
.text$mn:0000654A                 mov     ecx, [ebp+arg_0]
.text$mn:0000654D                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(tTbData * *,std::_Container_base12 const *)
.text$mn:00006552                 mov     edx, [ebp+var_10]
.text$mn:00006555                 or      edx, 1
.text$mn:00006558                 mov     [ebp+var_10], edx
.text$mn:0000655B                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000655F                 lea     ecx, [ebp+arg_4]
.text$mn:00006562                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$mn:00006567                 mov     eax, [ebp+arg_0]
.text$mn:0000656A                 mov     ecx, [ebp+var_C]
.text$mn:0000656D                 mov     large fs:0, ecx
.text$mn:00006574                 pop     ecx
.text$mn:00006575                 mov     esp, ebp
.text$mn:00006577                 pop     ebp
.text$mn:00006578                 retn    10h
.text$mn:00006578 ?_Make_iter@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z endp
.text$mn:00006578
.text$mn:00006578 ; ---------------------------------------------------------------------------
.text$mn:0000657B                 align 4
.text$mn:0000657B _text$mn        ends
.text$mn:0000657B
.text$x:0000657C ; ===========================================================================
.text$x:0000657C
.text$x:0000657C ; Segment type: Pure code
.text$x:0000657C ; Segment permissions: Read/Execute
.text$x:0000657C _text$x         segment para public 'CODE' use32
.text$x:0000657C                 assume cs:_text$x
.text$x:0000657C                 ;org 657Ch
.text$x:0000657C ; COMDAT (pick associative to section at 650C)
.text$x:0000657C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000657C
.text$x:0000657C ; =============== S U B R O U T I N E =======================================
.text$x:0000657C
.text$x:0000657C
.text$x:0000657C __unwindfunclet$?_Make_iter@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z$0 proc near
.text$x:0000657C                                         ; DATA XREF: .xdata$x:00008DE8o
.text$x:0000657C                 lea     ecx, [ebp+0Ch]
.text$x:0000657F                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$x:0000657F __unwindfunclet$?_Make_iter@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z$0 endp
.text$x:0000657F
.text$x:00006584
.text$x:00006584 ; =============== S U B R O U T I N E =======================================
.text$x:00006584
.text$x:00006584
.text$x:00006584 __unwindfunclet$?_Make_iter@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z$1 proc near
.text$x:00006584                                         ; DATA XREF: .xdata$x:00008DE0o
.text$x:00006584                 mov     eax, [ebp-10h]
.text$x:00006587                 and     eax, 1
.text$x:0000658A                 jz      $LN5
.text$x:00006590                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00006594                 mov     ecx, [ebp+8]
.text$x:00006597                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$x:0000659C ; ---------------------------------------------------------------------------
.text$x:0000659C
.text$x:0000659C $LN5:                                   ; CODE XREF: __unwindfunclet$?_Make_iter@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z$1+6j
.text$x:0000659C                 retn
.text$x:0000659C __unwindfunclet$?_Make_iter@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z$1 endp
.text$x:0000659C
.text$x:0000659D
.text$x:0000659D ; =============== S U B R O U T I N E =======================================
.text$x:0000659D
.text$x:0000659D
.text$x:0000659D __ehhandler$?_Make_iter@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z proc near
.text$x:0000659D                                         ; DATA XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Make_iter(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>)+5o
.text$x:0000659D
.text$x:0000659D arg_4           = dword ptr  8
.text$x:0000659D
.text$x:0000659D                 mov     edx, [esp+arg_4]
.text$x:000065A1                 lea     eax, [edx+0Ch]
.text$x:000065A4                 mov     ecx, [edx-0Ch]
.text$x:000065A7                 xor     ecx, eax
.text$x:000065A9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000065AE                 mov     eax, offset __ehfuncinfo$?_Make_iter@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z
.text$x:000065B3                 jmp     ___CxxFrameHandler3
.text$x:000065B3 __ehhandler$?_Make_iter@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z endp
.text$x:000065B3
.text$x:000065B3 _text$x         ends
.text$x:000065B3
.text$mn:000065B8 ; ===========================================================================
.text$mn:000065B8
.text$mn:000065B8 ; Segment type: Pure code
.text$mn:000065B8 ; Segment permissions: Read/Execute
.text$mn:000065B8 _text$mn        segment para public 'CODE' use32
.text$mn:000065B8                 assume cs:_text$mn
.text$mn:000065B8                 ;org 65B8h
.text$mn:000065B8 ; COMDAT (pick any)
.text$mn:000065B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000065B8
.text$mn:000065B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000065B8
.text$mn:000065B8 ; Attributes: bp-based frame
.text$mn:000065B8
.text$mn:000065B8 ; public: char * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)
.text$mn:000065B8                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
.text$mn:000065B8 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
.text$mn:000065B8                                         ; CODE XREF: $LN19+14p
.text$mn:000065B8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+1Dp ...
.text$mn:000065B8
.text$mn:000065B8 var_8           = dword ptr -8
.text$mn:000065B8 var_4           = dword ptr -4
.text$mn:000065B8
.text$mn:000065B8                 push    ebp
.text$mn:000065B9                 mov     ebp, esp
.text$mn:000065BB                 sub     esp, 8
.text$mn:000065BE                 mov     [ebp+var_4], ecx
.text$mn:000065C1                 mov     eax, [ebp+var_4]
.text$mn:000065C4                 cmp     dword ptr [eax+18h], 10h
.text$mn:000065C8                 jb      short loc_65DE
.text$mn:000065CA                 mov     ecx, [ebp+var_4]
.text$mn:000065CD                 mov     edx, [ecx+4]
.text$mn:000065D0                 push    edx
.text$mn:000065D1                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:000065D6                 add     esp, 4
.text$mn:000065D9                 mov     [ebp+var_8], eax
.text$mn:000065DC                 jmp     short loc_65E7
.text$mn:000065DE ; ---------------------------------------------------------------------------
.text$mn:000065DE
.text$mn:000065DE loc_65DE:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:000065DE                 mov     eax, [ebp+var_4]
.text$mn:000065E1                 add     eax, 4
.text$mn:000065E4                 mov     [ebp+var_8], eax
.text$mn:000065E7
.text$mn:000065E7 loc_65E7:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:000065E7                 mov     eax, [ebp+var_8]
.text$mn:000065EA                 mov     esp, ebp
.text$mn:000065EC                 pop     ebp
.text$mn:000065ED                 retn
.text$mn:000065ED ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ endp
.text$mn:000065ED
.text$mn:000065ED ; ---------------------------------------------------------------------------
.text$mn:000065EE                 align 10h
.text$mn:000065EE _text$mn        ends
.text$mn:000065EE
.text$mn:000065F0 ; ===========================================================================
.text$mn:000065F0
.text$mn:000065F0 ; Segment type: Pure code
.text$mn:000065F0 ; Segment permissions: Read/Execute
.text$mn:000065F0 _text$mn        segment para public 'CODE' use32
.text$mn:000065F0                 assume cs:_text$mn
.text$mn:000065F0                 ;org 65F0h
.text$mn:000065F0 ; COMDAT (pick any)
.text$mn:000065F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000065F0
.text$mn:000065F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000065F0
.text$mn:000065F0 ; Attributes: bp-based frame
.text$mn:000065F0
.text$mn:000065F0 ; public: char const * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)const
.text$mn:000065F0                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
.text$mn:000065F0 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
.text$mn:000065F0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+7Dp
.text$mn:000065F0
.text$mn:000065F0 var_8           = dword ptr -8
.text$mn:000065F0 var_4           = dword ptr -4
.text$mn:000065F0
.text$mn:000065F0                 push    ebp
.text$mn:000065F1                 mov     ebp, esp
.text$mn:000065F3                 sub     esp, 8
.text$mn:000065F6                 mov     [ebp+var_4], ecx
.text$mn:000065F9                 mov     eax, [ebp+var_4]
.text$mn:000065FC                 cmp     dword ptr [eax+18h], 10h
.text$mn:00006600                 jb      short loc_6616
.text$mn:00006602                 mov     ecx, [ebp+var_4]
.text$mn:00006605                 mov     edx, [ecx+4]
.text$mn:00006608                 push    edx
.text$mn:00006609                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:0000660E                 add     esp, 4
.text$mn:00006611                 mov     [ebp+var_8], eax
.text$mn:00006614                 jmp     short loc_661F
.text$mn:00006616 ; ---------------------------------------------------------------------------
.text$mn:00006616
.text$mn:00006616 loc_6616:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:00006616                 mov     eax, [ebp+var_4]
.text$mn:00006619                 add     eax, 4
.text$mn:0000661C                 mov     [ebp+var_8], eax
.text$mn:0000661F
.text$mn:0000661F loc_661F:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:0000661F                 mov     eax, [ebp+var_8]
.text$mn:00006622                 mov     esp, ebp
.text$mn:00006624                 pop     ebp
.text$mn:00006625                 retn
.text$mn:00006625 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ endp
.text$mn:00006625
.text$mn:00006625 ; ---------------------------------------------------------------------------
.text$mn:00006626                 align 4
.text$mn:00006626 _text$mn        ends
.text$mn:00006626
.text$mn:00006628 ; ===========================================================================
.text$mn:00006628
.text$mn:00006628 ; Segment type: Pure code
.text$mn:00006628 ; Segment permissions: Read/Execute
.text$mn:00006628 _text$mn        segment para public 'CODE' use32
.text$mn:00006628                 assume cs:_text$mn
.text$mn:00006628                 ;org 6628h
.text$mn:00006628 ; COMDAT (pick any)
.text$mn:00006628                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006628
.text$mn:00006628 ; =============== S U B R O U T I N E =======================================
.text$mn:00006628
.text$mn:00006628 ; Attributes: bp-based frame
.text$mn:00006628
.text$mn:00006628 ; public: wchar_t * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006628                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
.text$mn:00006628 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ proc near
.text$mn:00006628                                         ; CODE XREF: $LN19_0+14p
.text$mn:00006628                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)+1Fp ...
.text$mn:00006628
.text$mn:00006628 var_8           = dword ptr -8
.text$mn:00006628 var_4           = dword ptr -4
.text$mn:00006628
.text$mn:00006628                 push    ebp
.text$mn:00006629                 mov     ebp, esp
.text$mn:0000662B                 sub     esp, 8
.text$mn:0000662E                 mov     [ebp+var_4], ecx
.text$mn:00006631                 mov     eax, [ebp+var_4]
.text$mn:00006634                 cmp     dword ptr [eax+18h], 8
.text$mn:00006638                 jb      short loc_664E
.text$mn:0000663A                 mov     ecx, [ebp+var_4]
.text$mn:0000663D                 mov     edx, [ecx+4]
.text$mn:00006640                 push    edx
.text$mn:00006641                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00006646                 add     esp, 4
.text$mn:00006649                 mov     [ebp+var_8], eax
.text$mn:0000664C                 jmp     short loc_6657
.text$mn:0000664E ; ---------------------------------------------------------------------------
.text$mn:0000664E
.text$mn:0000664E loc_664E:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:0000664E                 mov     eax, [ebp+var_4]
.text$mn:00006651                 add     eax, 4
.text$mn:00006654                 mov     [ebp+var_8], eax
.text$mn:00006657
.text$mn:00006657 loc_6657:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:00006657                 mov     eax, [ebp+var_8]
.text$mn:0000665A                 mov     esp, ebp
.text$mn:0000665C                 pop     ebp
.text$mn:0000665D                 retn
.text$mn:0000665D ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ endp
.text$mn:0000665D
.text$mn:0000665D ; ---------------------------------------------------------------------------
.text$mn:0000665E                 align 10h
.text$mn:0000665E _text$mn        ends
.text$mn:0000665E
.text$mn:00006660 ; ===========================================================================
.text$mn:00006660
.text$mn:00006660 ; Segment type: Pure code
.text$mn:00006660 ; Segment permissions: Read/Execute
.text$mn:00006660 _text$mn        segment para public 'CODE' use32
.text$mn:00006660                 assume cs:_text$mn
.text$mn:00006660                 ;org 6660h
.text$mn:00006660 ; COMDAT (pick any)
.text$mn:00006660                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006660
.text$mn:00006660 ; =============== S U B R O U T I N E =======================================
.text$mn:00006660
.text$mn:00006660 ; Attributes: bp-based frame
.text$mn:00006660
.text$mn:00006660 ; public: wchar_t const * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)const
.text$mn:00006660                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
.text$mn:00006660 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ proc near
.text$mn:00006660                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+80p
.text$mn:00006660                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+7Dp ...
.text$mn:00006660
.text$mn:00006660 var_8           = dword ptr -8
.text$mn:00006660 var_4           = dword ptr -4
.text$mn:00006660
.text$mn:00006660                 push    ebp
.text$mn:00006661                 mov     ebp, esp
.text$mn:00006663                 sub     esp, 8
.text$mn:00006666                 mov     [ebp+var_4], ecx
.text$mn:00006669                 mov     eax, [ebp+var_4]
.text$mn:0000666C                 cmp     dword ptr [eax+18h], 8
.text$mn:00006670                 jb      short loc_6686
.text$mn:00006672                 mov     ecx, [ebp+var_4]
.text$mn:00006675                 mov     edx, [ecx+4]
.text$mn:00006678                 push    edx
.text$mn:00006679                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:0000667E                 add     esp, 4
.text$mn:00006681                 mov     [ebp+var_8], eax
.text$mn:00006684                 jmp     short loc_668F
.text$mn:00006686 ; ---------------------------------------------------------------------------
.text$mn:00006686
.text$mn:00006686 loc_6686:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:00006686                 mov     eax, [ebp+var_4]
.text$mn:00006689                 add     eax, 4
.text$mn:0000668C                 mov     [ebp+var_8], eax
.text$mn:0000668F
.text$mn:0000668F loc_668F:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:0000668F                 mov     eax, [ebp+var_8]
.text$mn:00006692                 mov     esp, ebp
.text$mn:00006694                 pop     ebp
.text$mn:00006695                 retn
.text$mn:00006695 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ endp
.text$mn:00006695
.text$mn:00006695 ; ---------------------------------------------------------------------------
.text$mn:00006696                 align 4
.text$mn:00006696 _text$mn        ends
.text$mn:00006696
.text$mn:00006698 ; ===========================================================================
.text$mn:00006698
.text$mn:00006698 ; Segment type: Pure code
.text$mn:00006698 ; Segment permissions: Read/Execute
.text$mn:00006698 _text$mn        segment para public 'CODE' use32
.text$mn:00006698                 assume cs:_text$mn
.text$mn:00006698                 ;org 6698h
.text$mn:00006698 ; COMDAT (pick any)
.text$mn:00006698                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006698
.text$mn:00006698 ; =============== S U B R O U T I N E =======================================
.text$mn:00006698
.text$mn:00006698 ; Attributes: bp-based frame
.text$mn:00006698
.text$mn:00006698 ; void __thiscall std::_Container_base12::_Orphan_all(std::_Container_base12 *__hidden this)
.text$mn:00006698                 public ?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:00006698 ?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$mn:00006698                                         ; CODE XREF: std::_Container_base12::~_Container_base12(void)+Ap
.text$mn:00006698                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+14p ...
.text$mn:00006698
.text$mn:00006698 var_18          = byte ptr -18h
.text$mn:00006698 var_14          = dword ptr -14h
.text$mn:00006698 var_10          = dword ptr -10h
.text$mn:00006698 var_C           = dword ptr -0Ch
.text$mn:00006698 var_4           = dword ptr -4
.text$mn:00006698
.text$mn:00006698                 push    ebp
.text$mn:00006699                 mov     ebp, esp
.text$mn:0000669B                 push    0FFFFFFFFh
.text$mn:0000669D                 push    offset __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:000066A2                 mov     eax, large fs:0
.text$mn:000066A8                 push    eax
.text$mn:000066A9                 sub     esp, 0Ch
.text$mn:000066AC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000066B1                 xor     eax, ebp
.text$mn:000066B3                 push    eax
.text$mn:000066B4                 lea     eax, [ebp+var_C]
.text$mn:000066B7                 mov     large fs:0, eax
.text$mn:000066BD                 mov     [ebp+var_14], ecx
.text$mn:000066C0                 mov     eax, [ebp+var_14]
.text$mn:000066C3                 cmp     dword ptr [eax], 0
.text$mn:000066C6                 jz      short loc_6723
.text$mn:000066C8                 push    3               ; int
.text$mn:000066CA                 lea     ecx, [ebp+var_18] ; this
.text$mn:000066CD                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:000066D2                 mov     [ebp+var_4], 0
.text$mn:000066D9                 mov     ecx, [ebp+var_14]
.text$mn:000066DC                 mov     edx, [ecx]
.text$mn:000066DE                 add     edx, 4
.text$mn:000066E1                 mov     [ebp+var_10], edx
.text$mn:000066E4                 jmp     short loc_66F3
.text$mn:000066E6 ; ---------------------------------------------------------------------------
.text$mn:000066E6
.text$mn:000066E6 loc_66E6:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+6Ej
.text$mn:000066E6                 mov     eax, [ebp+var_10]
.text$mn:000066E9                 mov     ecx, [eax]
.text$mn:000066EB                 mov     edx, [ebp+var_10]
.text$mn:000066EE                 mov     eax, [ecx+4]
.text$mn:000066F1                 mov     [edx], eax
.text$mn:000066F3
.text$mn:000066F3 loc_66F3:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+4Cj
.text$mn:000066F3                 mov     ecx, [ebp+var_10]
.text$mn:000066F6                 cmp     dword ptr [ecx], 0
.text$mn:000066F9                 jz      short loc_6708
.text$mn:000066FB                 mov     edx, [ebp+var_10]
.text$mn:000066FE                 mov     eax, [edx]
.text$mn:00006700                 mov     dword ptr [eax], 0
.text$mn:00006706                 jmp     short loc_66E6
.text$mn:00006708 ; ---------------------------------------------------------------------------
.text$mn:00006708
.text$mn:00006708 loc_6708:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+61j
.text$mn:00006708                 mov     ecx, [ebp+var_14]
.text$mn:0000670B                 mov     edx, [ecx]
.text$mn:0000670D                 mov     dword ptr [edx+4], 0
.text$mn:00006714                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000671B                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000671E                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00006723
.text$mn:00006723 loc_6723:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+2Ej
.text$mn:00006723                 mov     ecx, [ebp+var_C]
.text$mn:00006726                 mov     large fs:0, ecx
.text$mn:0000672D                 pop     ecx
.text$mn:0000672E                 mov     esp, ebp
.text$mn:00006730                 pop     ebp
.text$mn:00006731                 retn
.text$mn:00006731 ?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$mn:00006731
.text$mn:00006731 ; ---------------------------------------------------------------------------
.text$mn:00006732                 align 4
.text$mn:00006732 _text$mn        ends
.text$mn:00006732
.text$x:00006734 ; ===========================================================================
.text$x:00006734
.text$x:00006734 ; Segment type: Pure code
.text$x:00006734 ; Segment permissions: Read/Execute
.text$x:00006734 _text$x         segment para public 'CODE' use32
.text$x:00006734                 assume cs:_text$x
.text$x:00006734                 ;org 6734h
.text$x:00006734 ; COMDAT (pick associative to section at 6698)
.text$x:00006734                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006734
.text$x:00006734 ; =============== S U B R O U T I N E =======================================
.text$x:00006734
.text$x:00006734
.text$x:00006734 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 proc near
.text$x:00006734                                         ; DATA XREF: .xdata$x:000084F0o
.text$x:00006734                 lea     ecx, [ebp-18h]  ; this
.text$x:00006737                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00006737 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 endp
.text$x:00006737
.text$x:0000673C
.text$x:0000673C ; =============== S U B R O U T I N E =======================================
.text$x:0000673C
.text$x:0000673C
.text$x:0000673C __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$x:0000673C                                         ; DATA XREF: std::_Container_base12::_Orphan_all(void)+5o
.text$x:0000673C
.text$x:0000673C arg_4           = dword ptr  8
.text$x:0000673C
.text$x:0000673C                 mov     edx, [esp+arg_4]
.text$x:00006740                 lea     eax, [edx+0Ch]
.text$x:00006743                 mov     ecx, [edx-10h]
.text$x:00006746                 xor     ecx, eax
.text$x:00006748                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000674D                 mov     eax, offset __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$x:00006752                 jmp     ___CxxFrameHandler3
.text$x:00006752 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$x:00006752
.text$x:00006752 ; ---------------------------------------------------------------------------
.text$x:00006757                 align 4
.text$x:00006757 _text$x         ends
.text$x:00006757
.text$mn:00006758 ; ===========================================================================
.text$mn:00006758
.text$mn:00006758 ; Segment type: Pure code
.text$mn:00006758 ; Segment permissions: Read/Execute
.text$mn:00006758 _text$mn        segment para public 'CODE' use32
.text$mn:00006758                 assume cs:_text$mn
.text$mn:00006758                 ;org 6758h
.text$mn:00006758 ; COMDAT (pick any)
.text$mn:00006758                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006758
.text$mn:00006758 ; =============== S U B R O U T I N E =======================================
.text$mn:00006758
.text$mn:00006758 ; Attributes: bp-based frame
.text$mn:00006758
.text$mn:00006758 ; void __thiscall std::_Iterator_base12::_Orphan_me(std::_Iterator_base12 *__hidden this)
.text$mn:00006758                 public ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
.text$mn:00006758 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ proc near
.text$mn:00006758                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+3Cp
.text$mn:00006758                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+64p ...
.text$mn:00006758
.text$mn:00006758 var_8           = dword ptr -8
.text$mn:00006758 var_4           = dword ptr -4
.text$mn:00006758
.text$mn:00006758                 push    ebp
.text$mn:00006759                 mov     ebp, esp
.text$mn:0000675B                 sub     esp, 8
.text$mn:0000675E                 mov     [ebp+var_8], ecx
.text$mn:00006761                 mov     eax, [ebp+var_8]
.text$mn:00006764                 cmp     dword ptr [eax], 0
.text$mn:00006767                 jz      short loc_67C6
.text$mn:00006769                 mov     ecx, [ebp+var_8]
.text$mn:0000676C                 mov     edx, [ecx]
.text$mn:0000676E                 add     edx, 4
.text$mn:00006771                 mov     [ebp+var_4], edx
.text$mn:00006774
.text$mn:00006774 loc_6774:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+39j
.text$mn:00006774                 mov     eax, [ebp+var_4]
.text$mn:00006777                 cmp     dword ptr [eax], 0
.text$mn:0000677A                 jz      short loc_6793
.text$mn:0000677C                 mov     ecx, [ebp+var_4]
.text$mn:0000677F                 mov     edx, [ecx]
.text$mn:00006781                 cmp     edx, [ebp+var_8]
.text$mn:00006784                 jz      short loc_6793
.text$mn:00006786                 mov     eax, [ebp+var_4]
.text$mn:00006789                 mov     ecx, [eax]
.text$mn:0000678B                 add     ecx, 4
.text$mn:0000678E                 mov     [ebp+var_4], ecx
.text$mn:00006791                 jmp     short loc_6774
.text$mn:00006793 ; ---------------------------------------------------------------------------
.text$mn:00006793
.text$mn:00006793 loc_6793:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+22j
.text$mn:00006793                                         ; std::_Iterator_base12::_Orphan_me(void)+2Cj
.text$mn:00006793                 mov     edx, [ebp+var_4]
.text$mn:00006796                 cmp     dword ptr [edx], 0
.text$mn:00006799                 jnz     short loc_67B2
.text$mn:0000679B                 push    0C9h ; '+'      ; unsigned int
.text$mn:000067A0                 push    offset ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000067A5                 push    offset ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; "ITERATOR LIST CORRUPTED!"
.text$mn:000067AA                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000067AF                 add     esp, 0Ch
.text$mn:000067B2
.text$mn:000067B2 loc_67B2:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+41j
.text$mn:000067B2                 mov     eax, [ebp+var_4]
.text$mn:000067B5                 mov     ecx, [ebp+var_8]
.text$mn:000067B8                 mov     edx, [ecx+4]
.text$mn:000067BB                 mov     [eax], edx
.text$mn:000067BD                 mov     eax, [ebp+var_8]
.text$mn:000067C0                 mov     dword ptr [eax], 0
.text$mn:000067C6
.text$mn:000067C6 loc_67C6:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+Fj
.text$mn:000067C6                 mov     esp, ebp
.text$mn:000067C8                 pop     ebp
.text$mn:000067C9                 retn
.text$mn:000067C9 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ endp
.text$mn:000067C9
.text$mn:000067C9 ; ---------------------------------------------------------------------------
.text$mn:000067CA                 align 4
.text$mn:000067CA _text$mn        ends
.text$mn:000067CA
.text$mn:000067CC ; ===========================================================================
.text$mn:000067CC
.text$mn:000067CC ; Segment type: Pure code
.text$mn:000067CC ; Segment permissions: Read/Execute
.text$mn:000067CC _text$mn        segment para public 'CODE' use32
.text$mn:000067CC                 assume cs:_text$mn
.text$mn:000067CC                 ;org 67CCh
.text$mn:000067CC ; COMDAT (pick any)
.text$mn:000067CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000067CC
.text$mn:000067CC ; =============== S U B R O U T I N E =======================================
.text$mn:000067CC
.text$mn:000067CC ; Attributes: bp-based frame
.text$mn:000067CC
.text$mn:000067CC ; protected: void __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::_Orphan_range(struct tTbData * *, struct tTbData * *)const
.text$mn:000067CC                 public ?_Orphan_range@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXPAPAUtTbData@@0@Z
.text$mn:000067CC ?_Orphan_range@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXPAPAUtTbData@@0@Z proc near
.text$mn:000067CC                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>)+B1p
.text$mn:000067CC                                         ; std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * &&)+6Ap ...
.text$mn:000067CC
.text$mn:000067CC var_18          = byte ptr -18h
.text$mn:000067CC var_14          = dword ptr -14h
.text$mn:000067CC var_10          = dword ptr -10h
.text$mn:000067CC var_C           = dword ptr -0Ch
.text$mn:000067CC var_4           = dword ptr -4
.text$mn:000067CC arg_0           = dword ptr  8
.text$mn:000067CC arg_4           = dword ptr  0Ch
.text$mn:000067CC
.text$mn:000067CC                 push    ebp
.text$mn:000067CD                 mov     ebp, esp
.text$mn:000067CF                 push    0FFFFFFFFh
.text$mn:000067D1                 push    offset __ehhandler$?_Orphan_range@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXPAPAUtTbData@@0@Z
.text$mn:000067D6                 mov     eax, large fs:0
.text$mn:000067DC                 push    eax
.text$mn:000067DD                 sub     esp, 0Ch
.text$mn:000067E0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000067E5                 xor     eax, ebp
.text$mn:000067E7                 push    eax
.text$mn:000067E8                 lea     eax, [ebp+var_C]
.text$mn:000067EB                 mov     large fs:0, eax
.text$mn:000067F1                 mov     [ebp+var_14], ecx
.text$mn:000067F4                 push    3               ; int
.text$mn:000067F6                 lea     ecx, [ebp+var_18] ; this
.text$mn:000067F9                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:000067FE                 mov     [ebp+var_4], 0
.text$mn:00006805                 mov     ecx, [ebp+var_14] ; this
.text$mn:00006808                 call    ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst(void)
.text$mn:0000680D                 mov     [ebp+var_10], eax
.text$mn:00006810                 cmp     [ebp+var_10], 0
.text$mn:00006814                 jz      short loc_6864
.text$mn:00006816
.text$mn:00006816 loc_6816:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Orphan_range(tTbData * *,tTbData * *):loc_6862j
.text$mn:00006816                 mov     eax, [ebp+var_10]
.text$mn:00006819                 cmp     dword ptr [eax], 0
.text$mn:0000681C                 jz      short loc_6864
.text$mn:0000681E                 mov     ecx, [ebp+var_10]
.text$mn:00006821                 mov     edx, [ecx]
.text$mn:00006823                 mov     eax, [edx+8]
.text$mn:00006826                 cmp     eax, [ebp+arg_0]
.text$mn:00006829                 jb      short loc_6838
.text$mn:0000682B                 mov     ecx, [ebp+var_10]
.text$mn:0000682E                 mov     edx, [ecx]
.text$mn:00006830                 mov     eax, [ebp+arg_4]
.text$mn:00006833                 cmp     eax, [edx+8]
.text$mn:00006836                 jnb     short loc_6847
.text$mn:00006838
.text$mn:00006838 loc_6838:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Orphan_range(tTbData * *,tTbData * *)+5Dj
.text$mn:00006838                 mov     ecx, [ebp+var_10]
.text$mn:0000683B                 mov     ecx, [ecx]      ; this
.text$mn:0000683D                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:00006842                 mov     [ebp+var_10], eax
.text$mn:00006845                 jmp     short loc_6862
.text$mn:00006847 ; ---------------------------------------------------------------------------
.text$mn:00006847
.text$mn:00006847 loc_6847:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Orphan_range(tTbData * *,tTbData * *)+6Aj
.text$mn:00006847                 mov     edx, [ebp+var_10]
.text$mn:0000684A                 mov     ecx, [edx]      ; this
.text$mn:0000684C                 call    ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont(void)
.text$mn:00006851                 mov     eax, [ebp+var_10]
.text$mn:00006854                 mov     ecx, [eax]      ; this
.text$mn:00006856                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:0000685B                 mov     ecx, [ebp+var_10]
.text$mn:0000685E                 mov     edx, [eax]
.text$mn:00006860                 mov     [ecx], edx
.text$mn:00006862
.text$mn:00006862 loc_6862:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Orphan_range(tTbData * *,tTbData * *)+79j
.text$mn:00006862                 jmp     short loc_6816
.text$mn:00006864 ; ---------------------------------------------------------------------------
.text$mn:00006864
.text$mn:00006864 loc_6864:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Orphan_range(tTbData * *,tTbData * *)+48j
.text$mn:00006864                                         ; std::vector<tTbData *,std::allocator<tTbData *>>::_Orphan_range(tTbData * *,tTbData * *)+50j
.text$mn:00006864                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000686B                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000686E                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00006873                 mov     ecx, [ebp+var_C]
.text$mn:00006876                 mov     large fs:0, ecx
.text$mn:0000687D                 pop     ecx
.text$mn:0000687E                 mov     esp, ebp
.text$mn:00006880                 pop     ebp
.text$mn:00006881                 retn    8
.text$mn:00006881 ?_Orphan_range@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXPAPAUtTbData@@0@Z endp
.text$mn:00006881
.text$mn:00006881 _text$mn        ends
.text$mn:00006881
.text$x:00006884 ; ===========================================================================
.text$x:00006884
.text$x:00006884 ; Segment type: Pure code
.text$x:00006884 ; Segment permissions: Read/Execute
.text$x:00006884 _text$x         segment para public 'CODE' use32
.text$x:00006884                 assume cs:_text$x
.text$x:00006884                 ;org 6884h
.text$x:00006884 ; COMDAT (pick associative to section at 67CC)
.text$x:00006884                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006884
.text$x:00006884 ; =============== S U B R O U T I N E =======================================
.text$x:00006884
.text$x:00006884
.text$x:00006884 __unwindfunclet$?_Orphan_range@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXPAPAUtTbData@@0@Z$0 proc near
.text$x:00006884                                         ; DATA XREF: .xdata$x:00008EA8o
.text$x:00006884                 lea     ecx, [ebp-18h]  ; this
.text$x:00006887                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00006887 __unwindfunclet$?_Orphan_range@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXPAPAUtTbData@@0@Z$0 endp
.text$x:00006887
.text$x:0000688C
.text$x:0000688C ; =============== S U B R O U T I N E =======================================
.text$x:0000688C
.text$x:0000688C
.text$x:0000688C __ehhandler$?_Orphan_range@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXPAPAUtTbData@@0@Z proc near
.text$x:0000688C                                         ; DATA XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Orphan_range(tTbData * *,tTbData * *)+5o
.text$x:0000688C
.text$x:0000688C arg_4           = dword ptr  8
.text$x:0000688C
.text$x:0000688C                 mov     edx, [esp+arg_4]
.text$x:00006890                 lea     eax, [edx+0Ch]
.text$x:00006893                 mov     ecx, [edx-10h]
.text$x:00006896                 xor     ecx, eax
.text$x:00006898                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000689D                 mov     eax, offset __ehfuncinfo$?_Orphan_range@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXPAPAUtTbData@@0@Z
.text$x:000068A2                 jmp     ___CxxFrameHandler3
.text$x:000068A2 __ehhandler$?_Orphan_range@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXPAPAUtTbData@@0@Z endp
.text$x:000068A2
.text$x:000068A2 ; ---------------------------------------------------------------------------
.text$x:000068A7                 align 4
.text$x:000068A7 _text$x         ends
.text$x:000068A7
.text$mn:000068A8 ; ===========================================================================
.text$mn:000068A8
.text$mn:000068A8 ; Segment type: Pure code
.text$mn:000068A8 ; Segment permissions: Read/Execute
.text$mn:000068A8 _text$mn        segment para public 'CODE' use32
.text$mn:000068A8                 assume cs:_text$mn
.text$mn:000068A8                 ;org 68A8h
.text$mn:000068A8 ; COMDAT (pick any)
.text$mn:000068A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000068A8
.text$mn:000068A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000068A8
.text$mn:000068A8 ; Attributes: bp-based frame
.text$mn:000068A8
.text$mn:000068A8 ; protected: void __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::_Reallocate(unsigned int)
.text$mn:000068A8                 public ?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z
.text$mn:000068A8 ?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z proc near
.text$mn:000068A8                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Reserve(uint)+4Ep
.text$mn:000068A8
.text$mn:000068A8 var_20          = dword ptr -20h
.text$mn:000068A8 var_1C          = dword ptr -1Ch
.text$mn:000068A8 var_18          = dword ptr -18h
.text$mn:000068A8 var_13          = byte ptr -13h
.text$mn:000068A8 var_11          = byte ptr -11h
.text$mn:000068A8 var_10          = dword ptr -10h
.text$mn:000068A8 var_C           = dword ptr -0Ch
.text$mn:000068A8 var_4           = dword ptr -4
.text$mn:000068A8 arg_0           = dword ptr  8
.text$mn:000068A8
.text$mn:000068A8 ; FUNCTION CHUNK AT .text$mn:0000693E SIZE 00000009 BYTES
.text$mn:000068A8 ; FUNCTION CHUNK AT .text$mn:0000694E SIZE 00000097 BYTES
.text$mn:000068A8
.text$mn:000068A8                 push    ebp
.text$mn:000068A9                 mov     ebp, esp
.text$mn:000068AB                 push    0FFFFFFFFh
.text$mn:000068AD                 push    offset __ehhandler$?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z
.text$mn:000068B2                 mov     eax, large fs:0
.text$mn:000068B8                 push    eax
.text$mn:000068B9                 push    ecx
.text$mn:000068BA                 sub     esp, 10h
.text$mn:000068BD                 push    ebx
.text$mn:000068BE                 push    esi
.text$mn:000068BF                 push    edi
.text$mn:000068C0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000068C5                 xor     eax, ebp
.text$mn:000068C7                 push    eax
.text$mn:000068C8                 lea     eax, [ebp+var_C]
.text$mn:000068CB                 mov     large fs:0, eax
.text$mn:000068D1                 mov     [ebp+var_10], esp
.text$mn:000068D4                 mov     [ebp+var_18], ecx
.text$mn:000068D7                 mov     eax, [ebp+arg_0]
.text$mn:000068DA                 push    eax
.text$mn:000068DB                 lea     ecx, [ebp+var_11]
.text$mn:000068DE                 push    ecx
.text$mn:000068DF                 mov     ecx, [ebp+var_18]
.text$mn:000068E2                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Getal(void)
.text$mn:000068E7                 mov     ecx, eax
.text$mn:000068E9                 call    ?allocate@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEPAPAUtTbData@@I@Z ; std::_Wrap_alloc<std::allocator<tTbData *>>::allocate(uint)
.text$mn:000068EE                 mov     [ebp+var_1C], eax
.text$mn:000068F1                 mov     [ebp+var_4], 0
.text$mn:000068F8                 mov     edx, [ebp+var_1C]
.text$mn:000068FB                 push    edx
.text$mn:000068FC                 mov     eax, [ebp+var_18]
.text$mn:000068FF                 mov     ecx, [eax+8]
.text$mn:00006902                 push    ecx
.text$mn:00006903                 mov     edx, [ebp+var_18]
.text$mn:00006906                 mov     eax, [edx+4]
.text$mn:00006909                 push    eax
.text$mn:0000690A                 mov     ecx, [ebp+var_18]
.text$mn:0000690D                 call    ??$_Umove@PAPAUtTbData@@@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEPAPAUtTbData@@PAPAU2@00@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::_Umove<tTbData * *>(tTbData * *,tTbData * *,tTbData * *)
.text$mn:00006912                 jmp     short loc_693E
.text$mn:00006912 ?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z endp
.text$mn:00006912
.text$mn:00006914
.text$mn:00006914 ; =============== S U B R O U T I N E =======================================
.text$mn:00006914
.text$mn:00006914 ; Attributes: noreturn
.text$mn:00006914
.text$mn:00006914 __catch$?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z$0 proc near
.text$mn:00006914                                         ; DATA XREF: .xdata$x:00008E58o
.text$mn:00006914                 mov     ecx, [ebp+8]
.text$mn:00006917                 push    ecx             ; int
.text$mn:00006918                 mov     edx, [ebp-1Ch]
.text$mn:0000691B                 push    edx             ; void *
.text$mn:0000691C                 lea     eax, [ebp-12h]
.text$mn:0000691F                 push    eax
.text$mn:00006920                 mov     ecx, [ebp-18h]
.text$mn:00006923                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Getal(void)
.text$mn:00006928                 mov     ecx, eax
.text$mn:0000692A                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEXPAPAUtTbData@@I@Z ; std::_Wrap_alloc<std::allocator<tTbData *>>::deallocate(tTbData * *,uint)
.text$mn:0000692F                 push    0
.text$mn:00006931                 push    0
.text$mn:00006933                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00006933 __catch$?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z$0 endp
.text$mn:00006933
.text$mn:00006938 ; ---------------------------------------------------------------------------
.text$mn:00006938                 mov     eax, offset $LN8_0
.text$mn:0000693D                 retn
.text$mn:0000693E ; ---------------------------------------------------------------------------
.text$mn:0000693E ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z
.text$mn:0000693E
.text$mn:0000693E loc_693E:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Reallocate(uint)+6Aj
.text$mn:0000693E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006945                 jmp     short loc_694E
.text$mn:00006945 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z
.text$mn:00006947
.text$mn:00006947 ; =============== S U B R O U T I N E =======================================
.text$mn:00006947
.text$mn:00006947
.text$mn:00006947 $LN8_0          proc near               ; DATA XREF: .text$mn:00006938o
.text$mn:00006947                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00006947 $LN8_0          endp ; sp-analysis failed
.text$mn:00006947
.text$mn:0000694E ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z
.text$mn:0000694E
.text$mn:0000694E loc_694E:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Reallocate(uint)+9Dj
.text$mn:0000694E                 mov     ecx, [ebp+var_18]
.text$mn:00006951                 call    ?size@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ ; std::vector<tTbData *,std::allocator<tTbData *>>::size(void)
.text$mn:00006956                 mov     [ebp+var_20], eax
.text$mn:00006959                 mov     ecx, [ebp+var_18]
.text$mn:0000695C                 cmp     dword ptr [ecx+4], 0
.text$mn:00006960                 jz      short loc_69A2
.text$mn:00006962                 mov     edx, [ebp+var_18]
.text$mn:00006965                 mov     eax, [edx+8]
.text$mn:00006968                 push    eax
.text$mn:00006969                 mov     ecx, [ebp+var_18]
.text$mn:0000696C                 mov     edx, [ecx+4]
.text$mn:0000696F                 push    edx
.text$mn:00006970                 mov     ecx, [ebp+var_18]
.text$mn:00006973                 call    ?_Destroy@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXPAPAUtTbData@@0@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::_Destroy(tTbData * *,tTbData * *)
.text$mn:00006978                 mov     eax, [ebp+var_18]
.text$mn:0000697B                 mov     ecx, [ebp+var_18]
.text$mn:0000697E                 mov     edx, [eax+0Ch]
.text$mn:00006981                 sub     edx, [ecx+4]
.text$mn:00006984                 sar     edx, 2
.text$mn:00006987                 push    edx             ; int
.text$mn:00006988                 mov     eax, [ebp+var_18]
.text$mn:0000698B                 mov     ecx, [eax+4]
.text$mn:0000698E                 push    ecx             ; void *
.text$mn:0000698F                 lea     edx, [ebp+var_13]
.text$mn:00006992                 push    edx
.text$mn:00006993                 mov     ecx, [ebp+var_18]
.text$mn:00006996                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Getal(void)
.text$mn:0000699B                 mov     ecx, eax
.text$mn:0000699D                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEXPAPAUtTbData@@I@Z ; std::_Wrap_alloc<std::allocator<tTbData *>>::deallocate(tTbData * *,uint)
.text$mn:000069A2
.text$mn:000069A2 loc_69A2:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Reallocate(uint)+B8j
.text$mn:000069A2                 mov     ecx, [ebp+var_18] ; this
.text$mn:000069A5                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:000069AA                 mov     eax, [ebp+arg_0]
.text$mn:000069AD                 mov     ecx, [ebp+var_1C]
.text$mn:000069B0                 lea     edx, [ecx+eax*4]
.text$mn:000069B3                 mov     eax, [ebp+var_18]
.text$mn:000069B6                 mov     [eax+0Ch], edx
.text$mn:000069B9                 mov     ecx, [ebp+var_20]
.text$mn:000069BC                 mov     edx, [ebp+var_1C]
.text$mn:000069BF                 lea     eax, [edx+ecx*4]
.text$mn:000069C2                 mov     ecx, [ebp+var_18]
.text$mn:000069C5                 mov     [ecx+8], eax
.text$mn:000069C8                 mov     edx, [ebp+var_18]
.text$mn:000069CB                 mov     eax, [ebp+var_1C]
.text$mn:000069CE                 mov     [edx+4], eax
.text$mn:000069D1                 mov     ecx, [ebp+var_C]
.text$mn:000069D4                 mov     large fs:0, ecx
.text$mn:000069DB                 pop     ecx
.text$mn:000069DC                 pop     edi
.text$mn:000069DD                 pop     esi
.text$mn:000069DE                 pop     ebx
.text$mn:000069DF                 mov     esp, ebp
.text$mn:000069E1                 pop     ebp
.text$mn:000069E2                 retn    4
.text$mn:000069E2 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z
.text$mn:000069E2 ; ---------------------------------------------------------------------------
.text$mn:000069E5                 align 4
.text$mn:000069E5 _text$mn        ends
.text$mn:000069E5
.text$x:000069E8 ; ===========================================================================
.text$x:000069E8
.text$x:000069E8 ; Segment type: Pure code
.text$x:000069E8 ; Segment permissions: Read/Execute
.text$x:000069E8 _text$x         segment para public 'CODE' use32
.text$x:000069E8                 assume cs:_text$x
.text$x:000069E8                 ;org 69E8h
.text$x:000069E8 ; COMDAT (pick associative to section at 68A8)
.text$x:000069E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000069E8
.text$x:000069E8 ; =============== S U B R O U T I N E =======================================
.text$x:000069E8
.text$x:000069E8
.text$x:000069E8 __ehhandler$?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z proc near
.text$x:000069E8                                         ; DATA XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Reallocate(uint)+5o
.text$x:000069E8
.text$x:000069E8 arg_4           = dword ptr  8
.text$x:000069E8
.text$x:000069E8                 mov     edx, [esp+arg_4]
.text$x:000069EC                 lea     eax, [edx+0Ch]
.text$x:000069EF                 mov     ecx, [edx-24h]
.text$x:000069F2                 xor     ecx, eax
.text$x:000069F4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000069F9                 mov     eax, offset __ehfuncinfo$?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z
.text$x:000069FE                 jmp     ___CxxFrameHandler3
.text$x:000069FE __ehhandler$?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z endp
.text$x:000069FE
.text$x:000069FE ; ---------------------------------------------------------------------------
.text$x:00006A03                 align 4
.text$x:00006A03 _text$x         ends
.text$x:00006A03
.text$mn:00006A04 ; ===========================================================================
.text$mn:00006A04
.text$mn:00006A04 ; Segment type: Pure code
.text$mn:00006A04 ; Segment permissions: Read/Execute
.text$mn:00006A04 _text$mn        segment para public 'CODE' use32
.text$mn:00006A04                 assume cs:_text$mn
.text$mn:00006A04                 ;org 6A04h
.text$mn:00006A04 ; COMDAT (pick any)
.text$mn:00006A04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006A04
.text$mn:00006A04 ; =============== S U B R O U T I N E =======================================
.text$mn:00006A04
.text$mn:00006A04 ; Attributes: bp-based frame
.text$mn:00006A04
.text$mn:00006A04 ; protected: void __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::_Reserve(unsigned int)
.text$mn:00006A04                 public ?_Reserve@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z
.text$mn:00006A04 ?_Reserve@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z proc near
.text$mn:00006A04                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * &&)+54p
.text$mn:00006A04                                         ; std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * &&)+C3p ...
.text$mn:00006A04
.text$mn:00006A04 var_4           = dword ptr -4
.text$mn:00006A04 arg_0           = dword ptr  8
.text$mn:00006A04
.text$mn:00006A04                 push    ebp
.text$mn:00006A05                 mov     ebp, esp
.text$mn:00006A07                 push    ecx
.text$mn:00006A08                 push    esi
.text$mn:00006A09                 mov     [ebp+var_4], ecx
.text$mn:00006A0C                 mov     ecx, [ebp+var_4]
.text$mn:00006A0F                 call    ?_Unused_capacity@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ ; std::vector<tTbData *,std::allocator<tTbData *>>::_Unused_capacity(void)
.text$mn:00006A14                 cmp     eax, [ebp+arg_0]
.text$mn:00006A17                 jnb     short loc_6A57
.text$mn:00006A19                 mov     ecx, [ebp+var_4]
.text$mn:00006A1C                 call    ?max_size@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ ; std::vector<tTbData *,std::allocator<tTbData *>>::max_size(void)
.text$mn:00006A21                 mov     esi, eax
.text$mn:00006A23                 mov     ecx, [ebp+var_4]
.text$mn:00006A26                 call    ?size@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ ; std::vector<tTbData *,std::allocator<tTbData *>>::size(void)
.text$mn:00006A2B                 sub     esi, eax
.text$mn:00006A2D                 cmp     esi, [ebp+arg_0]
.text$mn:00006A30                 jnb     short loc_6A3A
.text$mn:00006A32                 mov     ecx, [ebp+var_4]
.text$mn:00006A35                 call    ?_Xlen@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXXZ ; std::vector<tTbData *,std::allocator<tTbData *>>::_Xlen(void)
.text$mn:00006A3A
.text$mn:00006A3A loc_6A3A:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Reserve(uint)+2Cj
.text$mn:00006A3A                 mov     ecx, [ebp+var_4]
.text$mn:00006A3D                 call    ?size@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ ; std::vector<tTbData *,std::allocator<tTbData *>>::size(void)
.text$mn:00006A42                 add     eax, [ebp+arg_0]
.text$mn:00006A45                 push    eax
.text$mn:00006A46                 mov     ecx, [ebp+var_4]
.text$mn:00006A49                 call    ?_Grow_to@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEII@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::_Grow_to(uint)
.text$mn:00006A4E                 push    eax
.text$mn:00006A4F                 mov     ecx, [ebp+var_4]
.text$mn:00006A52                 call    ?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::_Reallocate(uint)
.text$mn:00006A57
.text$mn:00006A57 loc_6A57:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Reserve(uint)+13j
.text$mn:00006A57                 pop     esi
.text$mn:00006A58                 mov     esp, ebp
.text$mn:00006A5A                 pop     ebp
.text$mn:00006A5B                 retn    4
.text$mn:00006A5B ?_Reserve@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z endp
.text$mn:00006A5B
.text$mn:00006A5B ; ---------------------------------------------------------------------------
.text$mn:00006A5E                 align 10h
.text$mn:00006A5E _text$mn        ends
.text$mn:00006A5E
.text$mn:00006A60 ; ===========================================================================
.text$mn:00006A60
.text$mn:00006A60 ; Segment type: Pure code
.text$mn:00006A60 ; Segment permissions: Read/Execute
.text$mn:00006A60 _text$mn        segment para public 'CODE' use32
.text$mn:00006A60                 assume cs:_text$mn
.text$mn:00006A60                 ;org 6A60h
.text$mn:00006A60 ; COMDAT (pick any)
.text$mn:00006A60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006A60
.text$mn:00006A60 ; =============== S U B R O U T I N E =======================================
.text$mn:00006A60
.text$mn:00006A60 ; Attributes: bp-based frame
.text$mn:00006A60
.text$mn:00006A60 ; void __thiscall std::_Container_base12::_Swap_all(std::_Container_base12 *this, struct std::_Container_base12 *)
.text$mn:00006A60                 public ?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
.text$mn:00006A60 ?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z proc near
.text$mn:00006A60                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Assign_rv(std::vector<tTbData *,std::allocator<tTbData *>> &&,std::integral_constant<bool,1>)+Ep
.text$mn:00006A60
.text$mn:00006A60 var_18          = byte ptr -18h
.text$mn:00006A60 var_14          = dword ptr -14h
.text$mn:00006A60 var_10          = dword ptr -10h
.text$mn:00006A60 var_C           = dword ptr -0Ch
.text$mn:00006A60 var_4           = dword ptr -4
.text$mn:00006A60 arg_0           = dword ptr  8
.text$mn:00006A60
.text$mn:00006A60                 push    ebp
.text$mn:00006A61                 mov     ebp, esp
.text$mn:00006A63                 push    0FFFFFFFFh
.text$mn:00006A65                 push    offset __ehhandler$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
.text$mn:00006A6A                 mov     eax, large fs:0
.text$mn:00006A70                 push    eax
.text$mn:00006A71                 sub     esp, 0Ch
.text$mn:00006A74                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006A79                 xor     eax, ebp
.text$mn:00006A7B                 push    eax
.text$mn:00006A7C                 lea     eax, [ebp+var_C]
.text$mn:00006A7F                 mov     large fs:0, eax
.text$mn:00006A85                 mov     [ebp+var_10], ecx
.text$mn:00006A88                 push    3               ; int
.text$mn:00006A8A                 lea     ecx, [ebp+var_18] ; this
.text$mn:00006A8D                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00006A92                 mov     [ebp+var_4], 0
.text$mn:00006A99                 mov     eax, [ebp+var_10]
.text$mn:00006A9C                 mov     ecx, [eax]
.text$mn:00006A9E                 mov     [ebp+var_14], ecx
.text$mn:00006AA1                 mov     edx, [ebp+var_10]
.text$mn:00006AA4                 mov     eax, [ebp+arg_0]
.text$mn:00006AA7                 mov     ecx, [eax]
.text$mn:00006AA9                 mov     [edx], ecx
.text$mn:00006AAB                 mov     edx, [ebp+arg_0]
.text$mn:00006AAE                 mov     eax, [ebp+var_14]
.text$mn:00006AB1                 mov     [edx], eax
.text$mn:00006AB3                 mov     ecx, [ebp+var_10]
.text$mn:00006AB6                 cmp     dword ptr [ecx], 0
.text$mn:00006AB9                 jz      short loc_6AC5
.text$mn:00006ABB                 mov     edx, [ebp+var_10]
.text$mn:00006ABE                 mov     eax, [edx]
.text$mn:00006AC0                 mov     ecx, [ebp+var_10]
.text$mn:00006AC3                 mov     [eax], ecx
.text$mn:00006AC5
.text$mn:00006AC5 loc_6AC5:                               ; CODE XREF: std::_Container_base12::_Swap_all(std::_Container_base12 &)+59j
.text$mn:00006AC5                 mov     edx, [ebp+arg_0]
.text$mn:00006AC8                 cmp     dword ptr [edx], 0
.text$mn:00006ACB                 jz      short loc_6AD7
.text$mn:00006ACD                 mov     eax, [ebp+arg_0]
.text$mn:00006AD0                 mov     ecx, [eax]
.text$mn:00006AD2                 mov     edx, [ebp+arg_0]
.text$mn:00006AD5                 mov     [ecx], edx
.text$mn:00006AD7
.text$mn:00006AD7 loc_6AD7:                               ; CODE XREF: std::_Container_base12::_Swap_all(std::_Container_base12 &)+6Bj
.text$mn:00006AD7                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006ADE                 lea     ecx, [ebp+var_18] ; this
.text$mn:00006AE1                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00006AE6                 mov     ecx, [ebp+var_C]
.text$mn:00006AE9                 mov     large fs:0, ecx
.text$mn:00006AF0                 pop     ecx
.text$mn:00006AF1                 mov     esp, ebp
.text$mn:00006AF3                 pop     ebp
.text$mn:00006AF4                 retn    4
.text$mn:00006AF4 ?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z endp
.text$mn:00006AF4
.text$mn:00006AF4 ; ---------------------------------------------------------------------------
.text$mn:00006AF7                 align 4
.text$mn:00006AF7 _text$mn        ends
.text$mn:00006AF7
.text$x:00006AF8 ; ===========================================================================
.text$x:00006AF8
.text$x:00006AF8 ; Segment type: Pure code
.text$x:00006AF8 ; Segment permissions: Read/Execute
.text$x:00006AF8 _text$x         segment para public 'CODE' use32
.text$x:00006AF8                 assume cs:_text$x
.text$x:00006AF8                 ;org 6AF8h
.text$x:00006AF8 ; COMDAT (pick associative to section at 6A60)
.text$x:00006AF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006AF8
.text$x:00006AF8 ; =============== S U B R O U T I N E =======================================
.text$x:00006AF8
.text$x:00006AF8
.text$x:00006AF8 __unwindfunclet$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z$0 proc near
.text$x:00006AF8                                         ; DATA XREF: .xdata$x:0000851Co
.text$x:00006AF8                 lea     ecx, [ebp-18h]  ; this
.text$x:00006AFB                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00006AFB __unwindfunclet$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z$0 endp
.text$x:00006AFB
.text$x:00006B00
.text$x:00006B00 ; =============== S U B R O U T I N E =======================================
.text$x:00006B00
.text$x:00006B00
.text$x:00006B00 __ehhandler$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z proc near
.text$x:00006B00                                         ; DATA XREF: std::_Container_base12::_Swap_all(std::_Container_base12 &)+5o
.text$x:00006B00
.text$x:00006B00 arg_4           = dword ptr  8
.text$x:00006B00
.text$x:00006B00                 mov     edx, [esp+arg_4]
.text$x:00006B04                 lea     eax, [edx+0Ch]
.text$x:00006B07                 mov     ecx, [edx-10h]
.text$x:00006B0A                 xor     ecx, eax
.text$x:00006B0C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006B11                 mov     eax, offset __ehfuncinfo$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
.text$x:00006B16                 jmp     ___CxxFrameHandler3
.text$x:00006B16 __ehhandler$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z endp
.text$x:00006B16
.text$x:00006B16 ; ---------------------------------------------------------------------------
.text$x:00006B1B                 align 4
.text$x:00006B1B _text$x         ends
.text$x:00006B1B
.text$mn:00006B1C ; ===========================================================================
.text$mn:00006B1C
.text$mn:00006B1C ; Segment type: Pure code
.text$mn:00006B1C ; Segment permissions: Read/Execute
.text$mn:00006B1C _text$mn        segment para public 'CODE' use32
.text$mn:00006B1C                 assume cs:_text$mn
.text$mn:00006B1C                 ;org 6B1Ch
.text$mn:00006B1C ; COMDAT (pick any)
.text$mn:00006B1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B1C
.text$mn:00006B1C ; =============== S U B R O U T I N E =======================================
.text$mn:00006B1C
.text$mn:00006B1C ; Attributes: bp-based frame
.text$mn:00006B1C
.text$mn:00006B1C ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(char, size_t Size)
.text$mn:00006B1C                 public ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
.text$mn:00006B1C ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
.text$mn:00006B1C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+47p
.text$mn:00006B1C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+34p ...
.text$mn:00006B1C
.text$mn:00006B1C var_C           = dword ptr -0Ch
.text$mn:00006B1C var_8           = dword ptr -8
.text$mn:00006B1C var_2           = byte ptr -2
.text$mn:00006B1C var_1           = byte ptr -1
.text$mn:00006B1C arg_0           = byte ptr  8
.text$mn:00006B1C Size            = dword ptr  0Ch
.text$mn:00006B1C
.text$mn:00006B1C                 push    ebp
.text$mn:00006B1D                 mov     ebp, esp
.text$mn:00006B1F                 sub     esp, 0Ch
.text$mn:00006B22                 mov     [ebp+var_8], ecx
.text$mn:00006B25                 movzx   eax, [ebp+arg_0]
.text$mn:00006B29                 test    eax, eax
.text$mn:00006B2B                 jnz     short loc_6B2F
.text$mn:00006B2D                 jmp     short loc_6BA2
.text$mn:00006B2F ; ---------------------------------------------------------------------------
.text$mn:00006B2F
.text$mn:00006B2F loc_6B2F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+Fj
.text$mn:00006B2F                 mov     ecx, [ebp+var_8]
.text$mn:00006B32                 cmp     dword ptr [ecx+18h], 10h
.text$mn:00006B36                 jb      short loc_6BA2
.text$mn:00006B38                 mov     edx, [ebp+var_8]
.text$mn:00006B3B                 mov     eax, [edx+4]
.text$mn:00006B3E                 mov     [ebp+var_C], eax
.text$mn:00006B41                 mov     ecx, [ebp+var_8]
.text$mn:00006B44                 add     ecx, 4
.text$mn:00006B47                 push    ecx
.text$mn:00006B48                 lea     edx, [ebp+var_1]
.text$mn:00006B4B                 push    edx
.text$mn:00006B4C                 mov     ecx, [ebp+var_8]
.text$mn:00006B4F                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00006B54                 mov     ecx, eax
.text$mn:00006B56                 call    ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)
.text$mn:00006B5B                 cmp     [ebp+Size], 0
.text$mn:00006B5F                 jbe     short loc_6B81
.text$mn:00006B61                 mov     eax, [ebp+Size]
.text$mn:00006B64                 push    eax             ; Size
.text$mn:00006B65                 mov     ecx, [ebp+var_C]
.text$mn:00006B68                 push    ecx
.text$mn:00006B69                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00006B6E                 add     esp, 4
.text$mn:00006B71                 push    eax             ; Src
.text$mn:00006B72                 mov     edx, [ebp+var_8]
.text$mn:00006B75                 add     edx, 4
.text$mn:00006B78                 push    edx             ; Dst
.text$mn:00006B79                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00006B7E                 add     esp, 0Ch
.text$mn:00006B81
.text$mn:00006B81 loc_6B81:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+43j
.text$mn:00006B81                 mov     eax, [ebp+var_8]
.text$mn:00006B84                 mov     ecx, [eax+18h]
.text$mn:00006B87                 add     ecx, 1
.text$mn:00006B8A                 push    ecx             ; int
.text$mn:00006B8B                 mov     edx, [ebp+var_C]
.text$mn:00006B8E                 push    edx             ; void *
.text$mn:00006B8F                 lea     eax, [ebp+var_2]
.text$mn:00006B92                 push    eax
.text$mn:00006B93                 mov     ecx, [ebp+var_8]
.text$mn:00006B96                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00006B9B                 mov     ecx, eax
.text$mn:00006B9D                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)
.text$mn:00006BA2
.text$mn:00006BA2 loc_6BA2:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+11j
.text$mn:00006BA2                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+1Aj
.text$mn:00006BA2                 mov     ecx, [ebp+var_8]
.text$mn:00006BA5                 mov     dword ptr [ecx+18h], 0Fh
.text$mn:00006BAC                 mov     edx, [ebp+Size]
.text$mn:00006BAF                 push    edx
.text$mn:00006BB0                 mov     ecx, [ebp+var_8]
.text$mn:00006BB3                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00006BB8                 mov     esp, ebp
.text$mn:00006BBA                 pop     ebp
.text$mn:00006BBB                 retn    8
.text$mn:00006BBB ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z endp
.text$mn:00006BBB
.text$mn:00006BBB ; ---------------------------------------------------------------------------
.text$mn:00006BBE                 align 10h
.text$mn:00006BBE _text$mn        ends
.text$mn:00006BBE
.text$mn:00006BC0 ; ===========================================================================
.text$mn:00006BC0
.text$mn:00006BC0 ; Segment type: Pure code
.text$mn:00006BC0 ; Segment permissions: Read/Execute
.text$mn:00006BC0 _text$mn        segment para public 'CODE' use32
.text$mn:00006BC0                 assume cs:_text$mn
.text$mn:00006BC0                 ;org 6BC0h
.text$mn:00006BC0 ; COMDAT (pick any)
.text$mn:00006BC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006BC0
.text$mn:00006BC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00006BC0
.text$mn:00006BC0 ; Attributes: bp-based frame
.text$mn:00006BC0
.text$mn:00006BC0 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Tidy(bool, unsigned int)
.text$mn:00006BC0                 public ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z
.text$mn:00006BC0 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z proc near
.text$mn:00006BC0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+47p
.text$mn:00006BC0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+47p ...
.text$mn:00006BC0
.text$mn:00006BC0 var_C           = dword ptr -0Ch
.text$mn:00006BC0 var_8           = dword ptr -8
.text$mn:00006BC0 var_2           = byte ptr -2
.text$mn:00006BC0 var_1           = byte ptr -1
.text$mn:00006BC0 arg_0           = byte ptr  8
.text$mn:00006BC0 arg_4           = dword ptr  0Ch
.text$mn:00006BC0
.text$mn:00006BC0                 push    ebp
.text$mn:00006BC1                 mov     ebp, esp
.text$mn:00006BC3                 sub     esp, 0Ch
.text$mn:00006BC6                 mov     [ebp+var_8], ecx
.text$mn:00006BC9                 movzx   eax, [ebp+arg_0]
.text$mn:00006BCD                 test    eax, eax
.text$mn:00006BCF                 jnz     short loc_6BD3
.text$mn:00006BD1                 jmp     short loc_6C46
.text$mn:00006BD3 ; ---------------------------------------------------------------------------
.text$mn:00006BD3
.text$mn:00006BD3 loc_6BD3:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+Fj
.text$mn:00006BD3                 mov     ecx, [ebp+var_8]
.text$mn:00006BD6                 cmp     dword ptr [ecx+18h], 8
.text$mn:00006BDA                 jb      short loc_6C46
.text$mn:00006BDC                 mov     edx, [ebp+var_8]
.text$mn:00006BDF                 mov     eax, [edx+4]
.text$mn:00006BE2                 mov     [ebp+var_C], eax
.text$mn:00006BE5                 mov     ecx, [ebp+var_8]
.text$mn:00006BE8                 add     ecx, 4
.text$mn:00006BEB                 push    ecx
.text$mn:00006BEC                 lea     edx, [ebp+var_1]
.text$mn:00006BEF                 push    edx
.text$mn:00006BF0                 mov     ecx, [ebp+var_8]
.text$mn:00006BF3                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00006BF8                 mov     ecx, eax
.text$mn:00006BFA                 call    ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00006BFF                 cmp     [ebp+arg_4], 0
.text$mn:00006C03                 jbe     short loc_6C25
.text$mn:00006C05                 mov     eax, [ebp+arg_4]
.text$mn:00006C08                 push    eax             ; int
.text$mn:00006C09                 mov     ecx, [ebp+var_C]
.text$mn:00006C0C                 push    ecx
.text$mn:00006C0D                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00006C12                 add     esp, 4
.text$mn:00006C15                 push    eax             ; Src
.text$mn:00006C16                 mov     edx, [ebp+var_8]
.text$mn:00006C19                 add     edx, 4
.text$mn:00006C1C                 push    edx             ; Dst
.text$mn:00006C1D                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00006C22                 add     esp, 0Ch
.text$mn:00006C25
.text$mn:00006C25 loc_6C25:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+43j
.text$mn:00006C25                 mov     eax, [ebp+var_8]
.text$mn:00006C28                 mov     ecx, [eax+18h]
.text$mn:00006C2B                 add     ecx, 1
.text$mn:00006C2E                 push    ecx             ; int
.text$mn:00006C2F                 mov     edx, [ebp+var_C]
.text$mn:00006C32                 push    edx             ; void *
.text$mn:00006C33                 lea     eax, [ebp+var_2]
.text$mn:00006C36                 push    eax
.text$mn:00006C37                 mov     ecx, [ebp+var_8]
.text$mn:00006C3A                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00006C3F                 mov     ecx, eax
.text$mn:00006C41                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)
.text$mn:00006C46
.text$mn:00006C46 loc_6C46:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+11j
.text$mn:00006C46                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+1Aj
.text$mn:00006C46                 mov     ecx, [ebp+var_8]
.text$mn:00006C49                 mov     dword ptr [ecx+18h], 7
.text$mn:00006C50                 mov     edx, [ebp+arg_4]
.text$mn:00006C53                 push    edx
.text$mn:00006C54                 mov     ecx, [ebp+var_8]
.text$mn:00006C57                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00006C5C                 mov     esp, ebp
.text$mn:00006C5E                 pop     ebp
.text$mn:00006C5F                 retn    8
.text$mn:00006C5F ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z endp
.text$mn:00006C5F
.text$mn:00006C5F ; ---------------------------------------------------------------------------
.text$mn:00006C62                 align 4
.text$mn:00006C62 _text$mn        ends
.text$mn:00006C62
.text$mn:00006C64 ; ===========================================================================
.text$mn:00006C64
.text$mn:00006C64 ; Segment type: Pure code
.text$mn:00006C64 ; Segment permissions: Read/Execute
.text$mn:00006C64 _text$mn        segment para public 'CODE' use32
.text$mn:00006C64                 assume cs:_text$mn
.text$mn:00006C64                 ;org 6C64h
.text$mn:00006C64 ; COMDAT (pick any)
.text$mn:00006C64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C64
.text$mn:00006C64 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C64
.text$mn:00006C64 ; Attributes: bp-based frame
.text$mn:00006C64
.text$mn:00006C64 ; protected: void __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::_Tidy(void)
.text$mn:00006C64                 public ?_Tidy@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXXZ
.text$mn:00006C64 ?_Tidy@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXXZ proc near
.text$mn:00006C64                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::~vector<tTbData *,std::allocator<tTbData *>>(void)+30p
.text$mn:00006C64
.text$mn:00006C64 var_8           = dword ptr -8
.text$mn:00006C64 var_1           = byte ptr -1
.text$mn:00006C64
.text$mn:00006C64                 push    ebp
.text$mn:00006C65                 mov     ebp, esp
.text$mn:00006C67                 sub     esp, 8
.text$mn:00006C6A                 mov     [ebp+var_8], ecx
.text$mn:00006C6D                 mov     eax, [ebp+var_8]
.text$mn:00006C70                 cmp     dword ptr [eax+4], 0
.text$mn:00006C74                 jz      short loc_6CDC
.text$mn:00006C76                 mov     ecx, [ebp+var_8] ; this
.text$mn:00006C79                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00006C7E                 mov     ecx, [ebp+var_8]
.text$mn:00006C81                 mov     edx, [ecx+8]
.text$mn:00006C84                 push    edx
.text$mn:00006C85                 mov     eax, [ebp+var_8]
.text$mn:00006C88                 mov     ecx, [eax+4]
.text$mn:00006C8B                 push    ecx
.text$mn:00006C8C                 mov     ecx, [ebp+var_8]
.text$mn:00006C8F                 call    ?_Destroy@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXPAPAUtTbData@@0@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::_Destroy(tTbData * *,tTbData * *)
.text$mn:00006C94                 mov     edx, [ebp+var_8]
.text$mn:00006C97                 mov     eax, [ebp+var_8]
.text$mn:00006C9A                 mov     ecx, [edx+0Ch]
.text$mn:00006C9D                 sub     ecx, [eax+4]
.text$mn:00006CA0                 sar     ecx, 2
.text$mn:00006CA3                 push    ecx             ; int
.text$mn:00006CA4                 mov     edx, [ebp+var_8]
.text$mn:00006CA7                 mov     eax, [edx+4]
.text$mn:00006CAA                 push    eax             ; void *
.text$mn:00006CAB                 lea     ecx, [ebp+var_1]
.text$mn:00006CAE                 push    ecx
.text$mn:00006CAF                 mov     ecx, [ebp+var_8]
.text$mn:00006CB2                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Getal(void)
.text$mn:00006CB7                 mov     ecx, eax
.text$mn:00006CB9                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEXPAPAUtTbData@@I@Z ; std::_Wrap_alloc<std::allocator<tTbData *>>::deallocate(tTbData * *,uint)
.text$mn:00006CBE                 mov     edx, [ebp+var_8]
.text$mn:00006CC1                 mov     dword ptr [edx+4], 0
.text$mn:00006CC8                 mov     eax, [ebp+var_8]
.text$mn:00006CCB                 mov     dword ptr [eax+8], 0
.text$mn:00006CD2                 mov     ecx, [ebp+var_8]
.text$mn:00006CD5                 mov     dword ptr [ecx+0Ch], 0
.text$mn:00006CDC
.text$mn:00006CDC loc_6CDC:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Tidy(void)+10j
.text$mn:00006CDC                 mov     esp, ebp
.text$mn:00006CDE                 pop     ebp
.text$mn:00006CDF                 retn
.text$mn:00006CDF ?_Tidy@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXXZ endp
.text$mn:00006CDF
.text$mn:00006CDF _text$mn        ends
.text$mn:00006CDF
.text$mn:00006CE0 ; ===========================================================================
.text$mn:00006CE0
.text$mn:00006CE0 ; Segment type: Pure code
.text$mn:00006CE0 ; Segment permissions: Read/Execute
.text$mn:00006CE0 _text$mn        segment para public 'CODE' use32
.text$mn:00006CE0                 assume cs:_text$mn
.text$mn:00006CE0                 ;org 6CE0h
.text$mn:00006CE0 ; COMDAT (pick any)
.text$mn:00006CE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006CE0
.text$mn:00006CE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00006CE0
.text$mn:00006CE0 ; Attributes: bp-based frame
.text$mn:00006CE0
.text$mn:00006CE0 ; public: unsigned int __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::_Unused_capacity(void)const
.text$mn:00006CE0                 public ?_Unused_capacity@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ
.text$mn:00006CE0 ?_Unused_capacity@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ proc near
.text$mn:00006CE0                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Reserve(uint)+Bp
.text$mn:00006CE0
.text$mn:00006CE0 var_4           = dword ptr -4
.text$mn:00006CE0
.text$mn:00006CE0                 push    ebp
.text$mn:00006CE1                 mov     ebp, esp
.text$mn:00006CE3                 push    ecx
.text$mn:00006CE4                 mov     [ebp+var_4], ecx
.text$mn:00006CE7                 mov     eax, [ebp+var_4]
.text$mn:00006CEA                 mov     ecx, [ebp+var_4]
.text$mn:00006CED                 mov     eax, [eax+0Ch]
.text$mn:00006CF0                 sub     eax, [ecx+8]
.text$mn:00006CF3                 sar     eax, 2
.text$mn:00006CF6                 mov     esp, ebp
.text$mn:00006CF8                 pop     ebp
.text$mn:00006CF9                 retn
.text$mn:00006CF9 ?_Unused_capacity@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ endp
.text$mn:00006CF9
.text$mn:00006CF9 ; ---------------------------------------------------------------------------
.text$mn:00006CFA                 align 4
.text$mn:00006CFA _text$mn        ends
.text$mn:00006CFA
.text$mn:00006CFC ; ===========================================================================
.text$mn:00006CFC
.text$mn:00006CFC ; Segment type: Pure code
.text$mn:00006CFC ; Segment permissions: Read/Execute
.text$mn:00006CFC _text$mn        segment para public 'CODE' use32
.text$mn:00006CFC                 assume cs:_text$mn
.text$mn:00006CFC                 ;org 6CFCh
.text$mn:00006CFC ; COMDAT (pick any)
.text$mn:00006CFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006CFC
.text$mn:00006CFC ; =============== S U B R O U T I N E =======================================
.text$mn:00006CFC
.text$mn:00006CFC ; Attributes: bp-based frame
.text$mn:00006CFC
.text$mn:00006CFC ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xlen(void)const
.text$mn:00006CFC                 public ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:00006CFC ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:00006CFC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+19p
.text$mn:00006CFC
.text$mn:00006CFC var_4           = dword ptr -4
.text$mn:00006CFC
.text$mn:00006CFC                 push    ebp
.text$mn:00006CFD                 mov     ebp, esp
.text$mn:00006CFF                 push    ecx
.text$mn:00006D00                 mov     [ebp+var_4], ecx
.text$mn:00006D03                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:00006D08                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00006D0D                 mov     esp, ebp
.text$mn:00006D0F                 pop     ebp
.text$mn:00006D10                 retn
.text$mn:00006D10 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:00006D10
.text$mn:00006D10 ; ---------------------------------------------------------------------------
.text$mn:00006D11                 align 4
.text$mn:00006D11 _text$mn        ends
.text$mn:00006D11
.text$mn:00006D14 ; ===========================================================================
.text$mn:00006D14
.text$mn:00006D14 ; Segment type: Pure code
.text$mn:00006D14 ; Segment permissions: Read/Execute
.text$mn:00006D14 _text$mn        segment para public 'CODE' use32
.text$mn:00006D14                 assume cs:_text$mn
.text$mn:00006D14                 ;org 6D14h
.text$mn:00006D14 ; COMDAT (pick any)
.text$mn:00006D14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D14
.text$mn:00006D14 ; =============== S U B R O U T I N E =======================================
.text$mn:00006D14
.text$mn:00006D14 ; Attributes: bp-based frame
.text$mn:00006D14
.text$mn:00006D14 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xlen(void)const
.text$mn:00006D14                 public ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:00006D14 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:00006D14                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+19p
.text$mn:00006D14                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Dp ...
.text$mn:00006D14
.text$mn:00006D14 var_4           = dword ptr -4
.text$mn:00006D14
.text$mn:00006D14                 push    ebp
.text$mn:00006D15                 mov     ebp, esp
.text$mn:00006D17                 push    ecx
.text$mn:00006D18                 mov     [ebp+var_4], ecx
.text$mn:00006D1B                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:00006D20                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00006D25                 mov     esp, ebp
.text$mn:00006D27                 pop     ebp
.text$mn:00006D28                 retn
.text$mn:00006D28 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:00006D28
.text$mn:00006D28 ; ---------------------------------------------------------------------------
.text$mn:00006D29                 align 4
.text$mn:00006D29 _text$mn        ends
.text$mn:00006D29
.text$mn:00006D2C ; ===========================================================================
.text$mn:00006D2C
.text$mn:00006D2C ; Segment type: Pure code
.text$mn:00006D2C ; Segment permissions: Read/Execute
.text$mn:00006D2C _text$mn        segment para public 'CODE' use32
.text$mn:00006D2C                 assume cs:_text$mn
.text$mn:00006D2C                 ;org 6D2Ch
.text$mn:00006D2C ; COMDAT (pick any)
.text$mn:00006D2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D2C
.text$mn:00006D2C ; =============== S U B R O U T I N E =======================================
.text$mn:00006D2C
.text$mn:00006D2C ; Attributes: bp-based frame
.text$mn:00006D2C
.text$mn:00006D2C ; protected: void __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::_Xlen(void)const
.text$mn:00006D2C                 public ?_Xlen@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXXZ
.text$mn:00006D2C ?_Xlen@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXXZ proc near
.text$mn:00006D2C                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Reserve(uint)+31p
.text$mn:00006D2C
.text$mn:00006D2C var_4           = dword ptr -4
.text$mn:00006D2C
.text$mn:00006D2C                 push    ebp
.text$mn:00006D2D                 mov     ebp, esp
.text$mn:00006D2F                 push    ecx
.text$mn:00006D30                 mov     [ebp+var_4], ecx
.text$mn:00006D33                 push    offset ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; "vector<T> too long"
.text$mn:00006D38                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00006D3D                 mov     esp, ebp
.text$mn:00006D3F                 pop     ebp
.text$mn:00006D40                 retn
.text$mn:00006D40 ?_Xlen@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXXZ endp
.text$mn:00006D40
.text$mn:00006D40 ; ---------------------------------------------------------------------------
.text$mn:00006D41                 align 4
.text$mn:00006D41 _text$mn        ends
.text$mn:00006D41
.text$mn:00006D44 ; ===========================================================================
.text$mn:00006D44
.text$mn:00006D44 ; Segment type: Pure code
.text$mn:00006D44 ; Segment permissions: Read/Execute
.text$mn:00006D44 _text$mn        segment para public 'CODE' use32
.text$mn:00006D44                 assume cs:_text$mn
.text$mn:00006D44                 ;org 6D44h
.text$mn:00006D44 ; COMDAT (pick any)
.text$mn:00006D44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D44
.text$mn:00006D44 ; =============== S U B R O U T I N E =======================================
.text$mn:00006D44
.text$mn:00006D44 ; Attributes: bp-based frame
.text$mn:00006D44
.text$mn:00006D44 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xran(void)const
.text$mn:00006D44                 public ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:00006D44 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:00006D44                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+19p
.text$mn:00006D44                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+15p ...
.text$mn:00006D44
.text$mn:00006D44 var_4           = dword ptr -4
.text$mn:00006D44
.text$mn:00006D44                 push    ebp
.text$mn:00006D45                 mov     ebp, esp
.text$mn:00006D47                 push    ecx
.text$mn:00006D48                 mov     [ebp+var_4], ecx
.text$mn:00006D4B                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:00006D50                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:00006D55                 mov     esp, ebp
.text$mn:00006D57                 pop     ebp
.text$mn:00006D58                 retn
.text$mn:00006D58 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:00006D58
.text$mn:00006D58 ; ---------------------------------------------------------------------------
.text$mn:00006D59                 align 4
.text$mn:00006D59 _text$mn        ends
.text$mn:00006D59
.text$mn:00006D5C ; ===========================================================================
.text$mn:00006D5C
.text$mn:00006D5C ; Segment type: Pure code
.text$mn:00006D5C ; Segment permissions: Read/Execute
.text$mn:00006D5C _text$mn        segment para public 'CODE' use32
.text$mn:00006D5C                 assume cs:_text$mn
.text$mn:00006D5C                 ;org 6D5Ch
.text$mn:00006D5C ; COMDAT (pick any)
.text$mn:00006D5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D5C
.text$mn:00006D5C ; =============== S U B R O U T I N E =======================================
.text$mn:00006D5C
.text$mn:00006D5C ; Attributes: bp-based frame
.text$mn:00006D5C
.text$mn:00006D5C ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xran(void)const
.text$mn:00006D5C                 public ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:00006D5C ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:00006D5C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p
.text$mn:00006D5C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p ...
.text$mn:00006D5C
.text$mn:00006D5C var_4           = dword ptr -4
.text$mn:00006D5C
.text$mn:00006D5C                 push    ebp
.text$mn:00006D5D                 mov     ebp, esp
.text$mn:00006D5F                 push    ecx
.text$mn:00006D60                 mov     [ebp+var_4], ecx
.text$mn:00006D63                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:00006D68                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:00006D6D                 mov     esp, ebp
.text$mn:00006D6F                 pop     ebp
.text$mn:00006D70                 retn
.text$mn:00006D70 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:00006D70
.text$mn:00006D70 ; ---------------------------------------------------------------------------
.text$mn:00006D71                 align 4
.text$mn:00006D71 _text$mn        ends
.text$mn:00006D71
.text$mn:00006D74 ; ===========================================================================
.text$mn:00006D74
.text$mn:00006D74 ; Segment type: Pure code
.text$mn:00006D74 ; Segment permissions: Read/Execute
.text$mn:00006D74 _text$mn        segment para public 'CODE' use32
.text$mn:00006D74                 assume cs:_text$mn
.text$mn:00006D74                 ;org 6D74h
.text$mn:00006D74 ; COMDAT (pick any)
.text$mn:00006D74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D74
.text$mn:00006D74 ; =============== S U B R O U T I N E =======================================
.text$mn:00006D74
.text$mn:00006D74 ; Attributes: bp-based frame
.text$mn:00006D74
.text$mn:00006D74 ; public: char * __thiscall std::_Wrap_alloc<class std::allocator<char>>::allocate(unsigned int)
.text$mn:00006D74                 public ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
.text$mn:00006D74 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
.text$mn:00006D74                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+BBp
.text$mn:00006D74                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+22p
.text$mn:00006D74
.text$mn:00006D74 var_4           = dword ptr -4
.text$mn:00006D74 arg_0           = dword ptr  8
.text$mn:00006D74
.text$mn:00006D74                 push    ebp
.text$mn:00006D75                 mov     ebp, esp
.text$mn:00006D77                 push    ecx
.text$mn:00006D78                 mov     [ebp+var_4], ecx
.text$mn:00006D7B                 mov     eax, [ebp+arg_0]
.text$mn:00006D7E                 push    eax
.text$mn:00006D7F                 mov     ecx, [ebp+var_4]
.text$mn:00006D82                 call    ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
.text$mn:00006D87                 mov     esp, ebp
.text$mn:00006D89                 pop     ebp
.text$mn:00006D8A                 retn    4
.text$mn:00006D8A ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z endp
.text$mn:00006D8A
.text$mn:00006D8A ; ---------------------------------------------------------------------------
.text$mn:00006D8D                 align 10h
.text$mn:00006D8D _text$mn        ends
.text$mn:00006D8D
.text$mn:00006D90 ; ===========================================================================
.text$mn:00006D90
.text$mn:00006D90 ; Segment type: Pure code
.text$mn:00006D90 ; Segment permissions: Read/Execute
.text$mn:00006D90 _text$mn        segment para public 'CODE' use32
.text$mn:00006D90                 assume cs:_text$mn
.text$mn:00006D90                 ;org 6D90h
.text$mn:00006D90 ; COMDAT (pick any)
.text$mn:00006D90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D90
.text$mn:00006D90 ; =============== S U B R O U T I N E =======================================
.text$mn:00006D90
.text$mn:00006D90 ; Attributes: bp-based frame
.text$mn:00006D90
.text$mn:00006D90 ; public: struct tTbData * * __thiscall std::_Wrap_alloc<class std::allocator<struct tTbData *>>::allocate(unsigned int)
.text$mn:00006D90                 public ?allocate@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEPAPAUtTbData@@I@Z
.text$mn:00006D90 ?allocate@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEPAPAUtTbData@@I@Z proc near
.text$mn:00006D90                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Reallocate(uint)+41p
.text$mn:00006D90
.text$mn:00006D90 var_4           = dword ptr -4
.text$mn:00006D90 arg_0           = dword ptr  8
.text$mn:00006D90
.text$mn:00006D90                 push    ebp
.text$mn:00006D91                 mov     ebp, esp
.text$mn:00006D93                 push    ecx
.text$mn:00006D94                 mov     [ebp+var_4], ecx
.text$mn:00006D97                 mov     eax, [ebp+arg_0]
.text$mn:00006D9A                 push    eax
.text$mn:00006D9B                 mov     ecx, [ebp+var_4]
.text$mn:00006D9E                 call    ?allocate@?$allocator@PAUtTbData@@@std@@QAEPAPAUtTbData@@I@Z ; std::allocator<tTbData *>::allocate(uint)
.text$mn:00006DA3                 mov     esp, ebp
.text$mn:00006DA5                 pop     ebp
.text$mn:00006DA6                 retn    4
.text$mn:00006DA6 ?allocate@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEPAPAUtTbData@@I@Z endp
.text$mn:00006DA6
.text$mn:00006DA6 ; ---------------------------------------------------------------------------
.text$mn:00006DA9                 align 4
.text$mn:00006DA9 _text$mn        ends
.text$mn:00006DA9
.text$mn:00006DAC ; ===========================================================================
.text$mn:00006DAC
.text$mn:00006DAC ; Segment type: Pure code
.text$mn:00006DAC ; Segment permissions: Read/Execute
.text$mn:00006DAC _text$mn        segment para public 'CODE' use32
.text$mn:00006DAC                 assume cs:_text$mn
.text$mn:00006DAC                 ;org 6DACh
.text$mn:00006DAC ; COMDAT (pick any)
.text$mn:00006DAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006DAC
.text$mn:00006DAC ; =============== S U B R O U T I N E =======================================
.text$mn:00006DAC
.text$mn:00006DAC ; Attributes: bp-based frame
.text$mn:00006DAC
.text$mn:00006DAC ; public: struct std::_Container_proxy * __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::allocate(unsigned int)
.text$mn:00006DAC                 public ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:00006DAC ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:00006DAC                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Alloc_proxy(void)+16p
.text$mn:00006DAC
.text$mn:00006DAC var_4           = dword ptr -4
.text$mn:00006DAC arg_0           = dword ptr  8
.text$mn:00006DAC
.text$mn:00006DAC                 push    ebp
.text$mn:00006DAD                 mov     ebp, esp
.text$mn:00006DAF                 push    ecx
.text$mn:00006DB0                 mov     [ebp+var_4], ecx
.text$mn:00006DB3                 mov     eax, [ebp+arg_0]
.text$mn:00006DB6                 push    eax
.text$mn:00006DB7                 mov     ecx, [ebp+var_4]
.text$mn:00006DBA                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:00006DBF                 mov     esp, ebp
.text$mn:00006DC1                 pop     ebp
.text$mn:00006DC2                 retn    4
.text$mn:00006DC2 ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:00006DC2
.text$mn:00006DC2 ; ---------------------------------------------------------------------------
.text$mn:00006DC5                 align 4
.text$mn:00006DC5 _text$mn        ends
.text$mn:00006DC5
.text$mn:00006DC8 ; ===========================================================================
.text$mn:00006DC8
.text$mn:00006DC8 ; Segment type: Pure code
.text$mn:00006DC8 ; Segment permissions: Read/Execute
.text$mn:00006DC8 _text$mn        segment para public 'CODE' use32
.text$mn:00006DC8                 assume cs:_text$mn
.text$mn:00006DC8                 ;org 6DC8h
.text$mn:00006DC8 ; COMDAT (pick any)
.text$mn:00006DC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006DC8
.text$mn:00006DC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006DC8
.text$mn:00006DC8 ; Attributes: bp-based frame
.text$mn:00006DC8
.text$mn:00006DC8 ; public: wchar_t * __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::allocate(unsigned int)
.text$mn:00006DC8                 public ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
.text$mn:00006DC8 ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z proc near
.text$mn:00006DC8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+BBp
.text$mn:00006DC8                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+22p
.text$mn:00006DC8
.text$mn:00006DC8 var_4           = dword ptr -4
.text$mn:00006DC8 arg_0           = dword ptr  8
.text$mn:00006DC8
.text$mn:00006DC8                 push    ebp
.text$mn:00006DC9                 mov     ebp, esp
.text$mn:00006DCB                 push    ecx
.text$mn:00006DCC                 mov     [ebp+var_4], ecx
.text$mn:00006DCF                 mov     eax, [ebp+arg_0]
.text$mn:00006DD2                 push    eax
.text$mn:00006DD3                 mov     ecx, [ebp+var_4]
.text$mn:00006DD6                 call    ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate(uint)
.text$mn:00006DDB                 mov     esp, ebp
.text$mn:00006DDD                 pop     ebp
.text$mn:00006DDE                 retn    4
.text$mn:00006DDE ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z endp
.text$mn:00006DDE
.text$mn:00006DDE ; ---------------------------------------------------------------------------
.text$mn:00006DE1                 align 4
.text$mn:00006DE1 _text$mn        ends
.text$mn:00006DE1
.text$mn:00006DE4 ; ===========================================================================
.text$mn:00006DE4
.text$mn:00006DE4 ; Segment type: Pure code
.text$mn:00006DE4 ; Segment permissions: Read/Execute
.text$mn:00006DE4 _text$mn        segment para public 'CODE' use32
.text$mn:00006DE4                 assume cs:_text$mn
.text$mn:00006DE4                 ;org 6DE4h
.text$mn:00006DE4 ; COMDAT (pick any)
.text$mn:00006DE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006DE4
.text$mn:00006DE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00006DE4
.text$mn:00006DE4 ; Attributes: bp-based frame
.text$mn:00006DE4
.text$mn:00006DE4 ; public: char * __thiscall std::allocator<char>::allocate(unsigned int)
.text$mn:00006DE4                 public ?allocate@?$allocator@D@std@@QAEPADI@Z
.text$mn:00006DE4 ?allocate@?$allocator@D@std@@QAEPADI@Z proc near
.text$mn:00006DE4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::allocate(uint)+Ep
.text$mn:00006DE4
.text$mn:00006DE4 var_4           = dword ptr -4
.text$mn:00006DE4 arg_0           = dword ptr  8
.text$mn:00006DE4
.text$mn:00006DE4                 push    ebp
.text$mn:00006DE5                 mov     ebp, esp
.text$mn:00006DE7                 push    ecx
.text$mn:00006DE8                 mov     [ebp+var_4], ecx
.text$mn:00006DEB                 push    0
.text$mn:00006DED                 mov     eax, [ebp+arg_0]
.text$mn:00006DF0                 push    eax
.text$mn:00006DF1                 call    ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>(uint,char *)
.text$mn:00006DF6                 add     esp, 8
.text$mn:00006DF9                 mov     esp, ebp
.text$mn:00006DFB                 pop     ebp
.text$mn:00006DFC                 retn    4
.text$mn:00006DFC ?allocate@?$allocator@D@std@@QAEPADI@Z endp
.text$mn:00006DFC
.text$mn:00006DFC ; ---------------------------------------------------------------------------
.text$mn:00006DFF                 align 10h
.text$mn:00006DFF _text$mn        ends
.text$mn:00006DFF
.text$mn:00006E00 ; ===========================================================================
.text$mn:00006E00
.text$mn:00006E00 ; Segment type: Pure code
.text$mn:00006E00 ; Segment permissions: Read/Execute
.text$mn:00006E00 _text$mn        segment para public 'CODE' use32
.text$mn:00006E00                 assume cs:_text$mn
.text$mn:00006E00                 ;org 6E00h
.text$mn:00006E00 ; COMDAT (pick any)
.text$mn:00006E00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E00
.text$mn:00006E00 ; =============== S U B R O U T I N E =======================================
.text$mn:00006E00
.text$mn:00006E00 ; Attributes: bp-based frame
.text$mn:00006E00
.text$mn:00006E00 ; public: struct tTbData * * __thiscall std::allocator<struct tTbData *>::allocate(unsigned int)
.text$mn:00006E00                 public ?allocate@?$allocator@PAUtTbData@@@std@@QAEPAPAUtTbData@@I@Z
.text$mn:00006E00 ?allocate@?$allocator@PAUtTbData@@@std@@QAEPAPAUtTbData@@I@Z proc near
.text$mn:00006E00                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<tTbData *>>::allocate(uint)+Ep
.text$mn:00006E00
.text$mn:00006E00 var_4           = dword ptr -4
.text$mn:00006E00 arg_0           = dword ptr  8
.text$mn:00006E00
.text$mn:00006E00                 push    ebp
.text$mn:00006E01                 mov     ebp, esp
.text$mn:00006E03                 push    ecx
.text$mn:00006E04                 mov     [ebp+var_4], ecx
.text$mn:00006E07                 push    0
.text$mn:00006E09                 mov     eax, [ebp+arg_0]
.text$mn:00006E0C                 push    eax
.text$mn:00006E0D                 call    ??$_Allocate@PAUtTbData@@@std@@YAPAPAUtTbData@@IPAPAU1@@Z ; std::_Allocate<tTbData *>(uint,tTbData * *)
.text$mn:00006E12                 add     esp, 8
.text$mn:00006E15                 mov     esp, ebp
.text$mn:00006E17                 pop     ebp
.text$mn:00006E18                 retn    4
.text$mn:00006E18 ?allocate@?$allocator@PAUtTbData@@@std@@QAEPAPAUtTbData@@I@Z endp
.text$mn:00006E18
.text$mn:00006E18 ; ---------------------------------------------------------------------------
.text$mn:00006E1B                 align 4
.text$mn:00006E1B _text$mn        ends
.text$mn:00006E1B
.text$mn:00006E1C ; ===========================================================================
.text$mn:00006E1C
.text$mn:00006E1C ; Segment type: Pure code
.text$mn:00006E1C ; Segment permissions: Read/Execute
.text$mn:00006E1C _text$mn        segment para public 'CODE' use32
.text$mn:00006E1C                 assume cs:_text$mn
.text$mn:00006E1C                 ;org 6E1Ch
.text$mn:00006E1C ; COMDAT (pick any)
.text$mn:00006E1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E1C
.text$mn:00006E1C ; =============== S U B R O U T I N E =======================================
.text$mn:00006E1C
.text$mn:00006E1C ; Attributes: bp-based frame
.text$mn:00006E1C
.text$mn:00006E1C ; public: struct std::_Container_proxy * __thiscall std::allocator<struct std::_Container_proxy>::allocate(unsigned int)
.text$mn:00006E1C                 public ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:00006E1C ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:00006E1C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+16p
.text$mn:00006E1C                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+16p ...
.text$mn:00006E1C
.text$mn:00006E1C var_4           = dword ptr -4
.text$mn:00006E1C arg_0           = dword ptr  8
.text$mn:00006E1C
.text$mn:00006E1C                 push    ebp
.text$mn:00006E1D                 mov     ebp, esp
.text$mn:00006E1F                 push    ecx
.text$mn:00006E20                 mov     [ebp+var_4], ecx
.text$mn:00006E23                 push    0
.text$mn:00006E25                 mov     eax, [ebp+arg_0]
.text$mn:00006E28                 push    eax
.text$mn:00006E29                 call    ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)
.text$mn:00006E2E                 add     esp, 8
.text$mn:00006E31                 mov     esp, ebp
.text$mn:00006E33                 pop     ebp
.text$mn:00006E34                 retn    4
.text$mn:00006E34 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:00006E34
.text$mn:00006E34 ; ---------------------------------------------------------------------------
.text$mn:00006E37                 align 4
.text$mn:00006E37 _text$mn        ends
.text$mn:00006E37
.text$mn:00006E38 ; ===========================================================================
.text$mn:00006E38
.text$mn:00006E38 ; Segment type: Pure code
.text$mn:00006E38 ; Segment permissions: Read/Execute
.text$mn:00006E38 _text$mn        segment para public 'CODE' use32
.text$mn:00006E38                 assume cs:_text$mn
.text$mn:00006E38                 ;org 6E38h
.text$mn:00006E38 ; COMDAT (pick any)
.text$mn:00006E38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E38
.text$mn:00006E38 ; =============== S U B R O U T I N E =======================================
.text$mn:00006E38
.text$mn:00006E38 ; Attributes: bp-based frame
.text$mn:00006E38
.text$mn:00006E38 ; public: wchar_t * __thiscall std::allocator<wchar_t>::allocate(unsigned int)
.text$mn:00006E38                 public ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
.text$mn:00006E38 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z proc near
.text$mn:00006E38                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)+Ep
.text$mn:00006E38
.text$mn:00006E38 var_4           = dword ptr -4
.text$mn:00006E38 arg_0           = dword ptr  8
.text$mn:00006E38
.text$mn:00006E38                 push    ebp
.text$mn:00006E39                 mov     ebp, esp
.text$mn:00006E3B                 push    ecx
.text$mn:00006E3C                 mov     [ebp+var_4], ecx
.text$mn:00006E3F                 push    0
.text$mn:00006E41                 mov     eax, [ebp+arg_0]
.text$mn:00006E44                 push    eax
.text$mn:00006E45                 call    ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>(uint,wchar_t *)
.text$mn:00006E4A                 add     esp, 8
.text$mn:00006E4D                 mov     esp, ebp
.text$mn:00006E4F                 pop     ebp
.text$mn:00006E50                 retn    4
.text$mn:00006E50 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z endp
.text$mn:00006E50
.text$mn:00006E50 ; ---------------------------------------------------------------------------
.text$mn:00006E53                 align 4
.text$mn:00006E53 _text$mn        ends
.text$mn:00006E53
.text$mn:00006E54 ; ===========================================================================
.text$mn:00006E54
.text$mn:00006E54 ; Segment type: Pure code
.text$mn:00006E54 ; Segment permissions: Read/Execute
.text$mn:00006E54 _text$mn        segment para public 'CODE' use32
.text$mn:00006E54                 assume cs:_text$mn
.text$mn:00006E54                 ;org 6E54h
.text$mn:00006E54 ; COMDAT (pick any)
.text$mn:00006E54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E54
.text$mn:00006E54 ; =============== S U B R O U T I N E =======================================
.text$mn:00006E54
.text$mn:00006E54 ; Attributes: bp-based frame
.text$mn:00006E54
.text$mn:00006E54 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::append(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:00006E54                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00006E54 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00006E54                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+53p
.text$mn:00006E54
.text$mn:00006E54 var_8           = dword ptr -8
.text$mn:00006E54 var_4           = dword ptr -4
.text$mn:00006E54 arg_0           = dword ptr  8
.text$mn:00006E54 arg_4           = dword ptr  0Ch
.text$mn:00006E54 arg_8           = dword ptr  10h
.text$mn:00006E54
.text$mn:00006E54                 push    ebp
.text$mn:00006E55                 mov     ebp, esp
.text$mn:00006E57                 sub     esp, 8
.text$mn:00006E5A                 mov     [ebp+var_4], ecx
.text$mn:00006E5D                 mov     ecx, [ebp+arg_0]
.text$mn:00006E60                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00006E65                 cmp     eax, [ebp+arg_4]
.text$mn:00006E68                 jnb     short loc_6E72
.text$mn:00006E6A                 mov     ecx, [ebp+var_4]
.text$mn:00006E6D                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00006E72
.text$mn:00006E72 loc_6E72:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:00006E72                 mov     ecx, [ebp+arg_0]
.text$mn:00006E75                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00006E7A                 sub     eax, [ebp+arg_4]
.text$mn:00006E7D                 mov     [ebp+var_8], eax
.text$mn:00006E80                 mov     eax, [ebp+var_8]
.text$mn:00006E83                 cmp     eax, [ebp+arg_8]
.text$mn:00006E86                 jnb     short loc_6E8E
.text$mn:00006E88                 mov     ecx, [ebp+var_8]
.text$mn:00006E8B                 mov     [ebp+arg_8], ecx
.text$mn:00006E8E
.text$mn:00006E8E loc_6E8E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:00006E8E                 mov     edx, [ebp+var_4]
.text$mn:00006E91                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00006E96                 sub     eax, [edx+14h]
.text$mn:00006E99                 cmp     eax, [ebp+arg_8]
.text$mn:00006E9C                 ja      short loc_6EA6
.text$mn:00006E9E                 mov     ecx, [ebp+var_4]
.text$mn:00006EA1                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00006EA6
.text$mn:00006EA6 loc_6EA6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+48j
.text$mn:00006EA6                 cmp     [ebp+arg_8], 0
.text$mn:00006EAA                 jbe     short loc_6F06
.text$mn:00006EAC                 mov     ecx, [ebp+var_4]
.text$mn:00006EAF                 mov     edx, [ecx+14h]
.text$mn:00006EB2                 add     edx, [ebp+arg_8]
.text$mn:00006EB5                 mov     [ebp+var_8], edx
.text$mn:00006EB8                 push    0
.text$mn:00006EBA                 mov     eax, [ebp+var_8]
.text$mn:00006EBD                 push    eax
.text$mn:00006EBE                 mov     ecx, [ebp+var_4]
.text$mn:00006EC1                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00006EC6                 movzx   ecx, al
.text$mn:00006EC9                 test    ecx, ecx
.text$mn:00006ECB                 jz      short loc_6F06
.text$mn:00006ECD                 mov     edx, [ebp+arg_8]
.text$mn:00006ED0                 push    edx             ; int
.text$mn:00006ED1                 mov     ecx, [ebp+arg_0]
.text$mn:00006ED4                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006ED9                 mov     ecx, [ebp+arg_4]
.text$mn:00006EDC                 lea     edx, [eax+ecx*2]
.text$mn:00006EDF                 push    edx             ; Src
.text$mn:00006EE0                 mov     ecx, [ebp+var_4]
.text$mn:00006EE3                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006EE8                 mov     ecx, [ebp+var_4]
.text$mn:00006EEB                 mov     edx, [ecx+14h]
.text$mn:00006EEE                 lea     eax, [eax+edx*2]
.text$mn:00006EF1                 push    eax             ; Dst
.text$mn:00006EF2                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00006EF7                 add     esp, 0Ch
.text$mn:00006EFA                 mov     ecx, [ebp+var_8]
.text$mn:00006EFD                 push    ecx
.text$mn:00006EFE                 mov     ecx, [ebp+var_4]
.text$mn:00006F01                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00006F06
.text$mn:00006F06 loc_6F06:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+56j
.text$mn:00006F06                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+77j
.text$mn:00006F06                 mov     eax, [ebp+var_4]
.text$mn:00006F09                 mov     esp, ebp
.text$mn:00006F0B                 pop     ebp
.text$mn:00006F0C                 retn    0Ch
.text$mn:00006F0C ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00006F0C
.text$mn:00006F0C ; ---------------------------------------------------------------------------
.text$mn:00006F0F                 align 10h
.text$mn:00006F0F _text$mn        ends
.text$mn:00006F0F
.text$mn:00006F10 ; ===========================================================================
.text$mn:00006F10
.text$mn:00006F10 ; Segment type: Pure code
.text$mn:00006F10 ; Segment permissions: Read/Execute
.text$mn:00006F10 _text$mn        segment para public 'CODE' use32
.text$mn:00006F10                 assume cs:_text$mn
.text$mn:00006F10                 ;org 6F10h
.text$mn:00006F10 ; COMDAT (pick any)
.text$mn:00006F10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006F10
.text$mn:00006F10 ; =============== S U B R O U T I N E =======================================
.text$mn:00006F10
.text$mn:00006F10 ; Attributes: bp-based frame
.text$mn:00006F10
.text$mn:00006F10 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t *Str)
.text$mn:00006F10                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:00006F10 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:00006F10                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)+Ep
.text$mn:00006F10
.text$mn:00006F10 var_4           = dword ptr -4
.text$mn:00006F10 Str             = dword ptr  8
.text$mn:00006F10
.text$mn:00006F10                 push    ebp
.text$mn:00006F11                 mov     ebp, esp
.text$mn:00006F13                 push    ecx
.text$mn:00006F14                 mov     [ebp+var_4], ecx
.text$mn:00006F17                 push    43Eh            ; unsigned int
.text$mn:00006F1C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00006F21                 mov     eax, [ebp+Str]
.text$mn:00006F24                 push    eax             ; int
.text$mn:00006F25                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00006F2A                 add     esp, 0Ch
.text$mn:00006F2D                 mov     ecx, [ebp+Str]
.text$mn:00006F30                 push    ecx             ; Str
.text$mn:00006F31                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:00006F36                 add     esp, 4
.text$mn:00006F39                 push    eax             ; int
.text$mn:00006F3A                 mov     edx, [ebp+Str]
.text$mn:00006F3D                 push    edx             ; Src
.text$mn:00006F3E                 mov     ecx, [ebp+var_4]
.text$mn:00006F41                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)
.text$mn:00006F46                 mov     esp, ebp
.text$mn:00006F48                 pop     ebp
.text$mn:00006F49                 retn    4
.text$mn:00006F49 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:00006F49
.text$mn:00006F49 _text$mn        ends
.text$mn:00006F49
.text$mn:00006F4C ; ===========================================================================
.text$mn:00006F4C
.text$mn:00006F4C ; Segment type: Pure code
.text$mn:00006F4C ; Segment permissions: Read/Execute
.text$mn:00006F4C _text$mn        segment para public 'CODE' use32
.text$mn:00006F4C                 assume cs:_text$mn
.text$mn:00006F4C                 ;org 6F4Ch
.text$mn:00006F4C ; COMDAT (pick any)
.text$mn:00006F4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006F4C
.text$mn:00006F4C ; =============== S U B R O U T I N E =======================================
.text$mn:00006F4C
.text$mn:00006F4C ; Attributes: bp-based frame
.text$mn:00006F4C
.text$mn:00006F4C ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(void *Src, int)
.text$mn:00006F4C                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:00006F4C ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:00006F4C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+31p
.text$mn:00006F4C
.text$mn:00006F4C var_8           = dword ptr -8
.text$mn:00006F4C var_4           = dword ptr -4
.text$mn:00006F4C Src             = dword ptr  8
.text$mn:00006F4C arg_4           = dword ptr  0Ch
.text$mn:00006F4C
.text$mn:00006F4C                 push    ebp
.text$mn:00006F4D                 mov     ebp, esp
.text$mn:00006F4F                 sub     esp, 8
.text$mn:00006F52                 mov     [ebp+var_4], ecx
.text$mn:00006F55                 cmp     [ebp+arg_4], 0
.text$mn:00006F59                 jz      short loc_6F71
.text$mn:00006F5B                 push    42Ah            ; unsigned int
.text$mn:00006F60                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00006F65                 mov     eax, [ebp+Src]
.text$mn:00006F68                 push    eax             ; int
.text$mn:00006F69                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00006F6E                 add     esp, 0Ch
.text$mn:00006F71
.text$mn:00006F71 loc_6F71:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+Dj
.text$mn:00006F71                 mov     ecx, [ebp+Src]
.text$mn:00006F74                 push    ecx
.text$mn:00006F75                 mov     ecx, [ebp+var_4]
.text$mn:00006F78                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:00006F7D                 movzx   edx, al
.text$mn:00006F80                 test    edx, edx
.text$mn:00006F82                 jz      short loc_6FA6
.text$mn:00006F84                 mov     eax, [ebp+arg_4]
.text$mn:00006F87                 push    eax
.text$mn:00006F88                 mov     ecx, [ebp+var_4]
.text$mn:00006F8B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006F90                 mov     ecx, [ebp+Src]
.text$mn:00006F93                 sub     ecx, eax
.text$mn:00006F95                 sar     ecx, 1
.text$mn:00006F97                 push    ecx
.text$mn:00006F98                 mov     edx, [ebp+var_4]
.text$mn:00006F9B                 push    edx
.text$mn:00006F9C                 mov     ecx, [ebp+var_4]
.text$mn:00006F9F                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00006FA4                 jmp     short loc_7017
.text$mn:00006FA6 ; ---------------------------------------------------------------------------
.text$mn:00006FA6
.text$mn:00006FA6 loc_6FA6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+36j
.text$mn:00006FA6                 mov     eax, [ebp+var_4]
.text$mn:00006FA9                 mov     ecx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00006FAF                 sub     ecx, [eax+14h]
.text$mn:00006FB2                 cmp     ecx, [ebp+arg_4]
.text$mn:00006FB5                 ja      short loc_6FBF
.text$mn:00006FB7                 mov     ecx, [ebp+var_4]
.text$mn:00006FBA                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00006FBF
.text$mn:00006FBF loc_6FBF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+69j
.text$mn:00006FBF                 cmp     [ebp+arg_4], 0
.text$mn:00006FC3                 jbe     short loc_7014
.text$mn:00006FC5                 mov     edx, [ebp+var_4]
.text$mn:00006FC8                 mov     eax, [edx+14h]
.text$mn:00006FCB                 add     eax, [ebp+arg_4]
.text$mn:00006FCE                 mov     [ebp+var_8], eax
.text$mn:00006FD1                 push    0
.text$mn:00006FD3                 mov     ecx, [ebp+var_8]
.text$mn:00006FD6                 push    ecx
.text$mn:00006FD7                 mov     ecx, [ebp+var_4]
.text$mn:00006FDA                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00006FDF                 movzx   edx, al
.text$mn:00006FE2                 test    edx, edx
.text$mn:00006FE4                 jz      short loc_7014
.text$mn:00006FE6                 mov     eax, [ebp+arg_4]
.text$mn:00006FE9                 push    eax             ; int
.text$mn:00006FEA                 mov     ecx, [ebp+Src]
.text$mn:00006FED                 push    ecx             ; Src
.text$mn:00006FEE                 mov     ecx, [ebp+var_4]
.text$mn:00006FF1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006FF6                 mov     edx, [ebp+var_4]
.text$mn:00006FF9                 mov     ecx, [edx+14h]
.text$mn:00006FFC                 lea     edx, [eax+ecx*2]
.text$mn:00006FFF                 push    edx             ; Dst
.text$mn:00007000                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00007005                 add     esp, 0Ch
.text$mn:00007008                 mov     eax, [ebp+var_8]
.text$mn:0000700B                 push    eax
.text$mn:0000700C                 mov     ecx, [ebp+var_4]
.text$mn:0000700F                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00007014
.text$mn:00007014 loc_7014:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+77j
.text$mn:00007014                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+98j
.text$mn:00007014                 mov     eax, [ebp+var_4]
.text$mn:00007017
.text$mn:00007017 loc_7017:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+58j
.text$mn:00007017                 mov     esp, ebp
.text$mn:00007019                 pop     ebp
.text$mn:0000701A                 retn    8
.text$mn:0000701A ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:0000701A
.text$mn:0000701A ; ---------------------------------------------------------------------------
.text$mn:0000701D                 align 10h
.text$mn:0000701D _text$mn        ends
.text$mn:0000701D
.text$mn:00007020 ; ===========================================================================
.text$mn:00007020
.text$mn:00007020 ; Segment type: Pure code
.text$mn:00007020 ; Segment permissions: Read/Execute
.text$mn:00007020 _text$mn        segment para public 'CODE' use32
.text$mn:00007020                 assume cs:_text$mn
.text$mn:00007020                 ;org 7020h
.text$mn:00007020 ; COMDAT (pick any)
.text$mn:00007020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007020
.text$mn:00007020 ; =============== S U B R O U T I N E =======================================
.text$mn:00007020
.text$mn:00007020 ; Attributes: bp-based frame
.text$mn:00007020
.text$mn:00007020 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::assign(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, unsigned int, unsigned int)
.text$mn:00007020                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00007020 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00007020                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+4Fp
.text$mn:00007020
.text$mn:00007020 Size            = dword ptr -8
.text$mn:00007020 var_4           = dword ptr -4
.text$mn:00007020 arg_0           = dword ptr  8
.text$mn:00007020 arg_4           = dword ptr  0Ch
.text$mn:00007020 arg_8           = dword ptr  10h
.text$mn:00007020
.text$mn:00007020                 push    ebp
.text$mn:00007021                 mov     ebp, esp
.text$mn:00007023                 sub     esp, 8
.text$mn:00007026                 mov     [ebp+var_4], ecx
.text$mn:00007029                 mov     ecx, [ebp+arg_0]
.text$mn:0000702C                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:00007031                 cmp     eax, [ebp+arg_4]
.text$mn:00007034                 jnb     short loc_703E
.text$mn:00007036                 mov     ecx, [ebp+var_4]
.text$mn:00007039                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:0000703E
.text$mn:0000703E loc_703E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+14j
.text$mn:0000703E                 mov     ecx, [ebp+arg_0]
.text$mn:00007041                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:00007046                 sub     eax, [ebp+arg_4]
.text$mn:00007049                 mov     [ebp+Size], eax
.text$mn:0000704C                 mov     eax, [ebp+arg_8]
.text$mn:0000704F                 cmp     eax, [ebp+Size]
.text$mn:00007052                 jnb     short loc_705A
.text$mn:00007054                 mov     ecx, [ebp+arg_8]
.text$mn:00007057                 mov     [ebp+Size], ecx
.text$mn:0000705A
.text$mn:0000705A loc_705A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+32j
.text$mn:0000705A                 mov     edx, [ebp+var_4]
.text$mn:0000705D                 cmp     edx, [ebp+arg_0]
.text$mn:00007060                 jnz     short loc_7081
.text$mn:00007062                 mov     eax, [ebp+arg_4]
.text$mn:00007065                 add     eax, [ebp+Size]
.text$mn:00007068                 push    eax
.text$mn:00007069                 mov     ecx, [ebp+var_4]
.text$mn:0000706C                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)
.text$mn:00007071                 mov     ecx, [ebp+arg_4]
.text$mn:00007074                 push    ecx
.text$mn:00007075                 push    0
.text$mn:00007077                 mov     ecx, [ebp+var_4]
.text$mn:0000707A                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)
.text$mn:0000707F                 jmp     short loc_70C3
.text$mn:00007081 ; ---------------------------------------------------------------------------
.text$mn:00007081
.text$mn:00007081 loc_7081:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+40j
.text$mn:00007081                 push    0
.text$mn:00007083                 mov     edx, [ebp+Size]
.text$mn:00007086                 push    edx
.text$mn:00007087                 mov     ecx, [ebp+var_4]
.text$mn:0000708A                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:0000708F                 movzx   eax, al
.text$mn:00007092                 test    eax, eax
.text$mn:00007094                 jz      short loc_70C3
.text$mn:00007096                 mov     ecx, [ebp+Size]
.text$mn:00007099                 push    ecx             ; Size
.text$mn:0000709A                 mov     ecx, [ebp+arg_0]
.text$mn:0000709D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000070A2                 add     eax, [ebp+arg_4]
.text$mn:000070A5                 push    eax             ; Src
.text$mn:000070A6                 mov     ecx, [ebp+var_4]
.text$mn:000070A9                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000070AE                 push    eax             ; Dst
.text$mn:000070AF                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:000070B4                 add     esp, 0Ch
.text$mn:000070B7                 mov     edx, [ebp+Size]
.text$mn:000070BA                 push    edx
.text$mn:000070BB                 mov     ecx, [ebp+var_4]
.text$mn:000070BE                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000070C3
.text$mn:000070C3 loc_70C3:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Fj
.text$mn:000070C3                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+74j
.text$mn:000070C3                 mov     eax, [ebp+var_4]
.text$mn:000070C6                 mov     esp, ebp
.text$mn:000070C8                 pop     ebp
.text$mn:000070C9                 retn    0Ch
.text$mn:000070C9 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:000070C9
.text$mn:000070C9 _text$mn        ends
.text$mn:000070C9
.text$mn:000070CC ; ===========================================================================
.text$mn:000070CC
.text$mn:000070CC ; Segment type: Pure code
.text$mn:000070CC ; Segment permissions: Read/Execute
.text$mn:000070CC _text$mn        segment para public 'CODE' use32
.text$mn:000070CC                 assume cs:_text$mn
.text$mn:000070CC                 ;org 70CCh
.text$mn:000070CC ; COMDAT (pick any)
.text$mn:000070CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000070CC
.text$mn:000070CC ; =============== S U B R O U T I N E =======================================
.text$mn:000070CC
.text$mn:000070CC ; Attributes: bp-based frame
.text$mn:000070CC
.text$mn:000070CC ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char *Str)
.text$mn:000070CC                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
.text$mn:000070CC ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
.text$mn:000070CC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+53p
.text$mn:000070CC
.text$mn:000070CC var_4           = dword ptr -4
.text$mn:000070CC Str             = dword ptr  8
.text$mn:000070CC
.text$mn:000070CC                 push    ebp
.text$mn:000070CD                 mov     ebp, esp
.text$mn:000070CF                 push    ecx
.text$mn:000070D0                 mov     [ebp+var_4], ecx
.text$mn:000070D3                 push    490h            ; unsigned int
.text$mn:000070D8                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000070DD                 mov     eax, [ebp+Str]
.text$mn:000070E0                 push    eax             ; int
.text$mn:000070E1                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:000070E6                 add     esp, 0Ch
.text$mn:000070E9                 mov     ecx, [ebp+Str]
.text$mn:000070EC                 push    ecx             ; Str
.text$mn:000070ED                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:000070F2                 add     esp, 4
.text$mn:000070F5                 push    eax             ; Size
.text$mn:000070F6                 mov     edx, [ebp+Str]
.text$mn:000070F9                 push    edx             ; Src
.text$mn:000070FA                 mov     ecx, [ebp+var_4]
.text$mn:000070FD                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)
.text$mn:00007102                 mov     esp, ebp
.text$mn:00007104                 pop     ebp
.text$mn:00007105                 retn    4
.text$mn:00007105 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z endp
.text$mn:00007105
.text$mn:00007105 _text$mn        ends
.text$mn:00007105
.text$mn:00007108 ; ===========================================================================
.text$mn:00007108
.text$mn:00007108 ; Segment type: Pure code
.text$mn:00007108 ; Segment permissions: Read/Execute
.text$mn:00007108 _text$mn        segment para public 'CODE' use32
.text$mn:00007108                 assume cs:_text$mn
.text$mn:00007108                 ;org 7108h
.text$mn:00007108 ; COMDAT (pick any)
.text$mn:00007108                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007108
.text$mn:00007108 ; =============== S U B R O U T I N E =======================================
.text$mn:00007108
.text$mn:00007108 ; Attributes: bp-based frame
.text$mn:00007108
.text$mn:00007108 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(void *Src, size_t Size)
.text$mn:00007108                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
.text$mn:00007108 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
.text$mn:00007108                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+31p
.text$mn:00007108
.text$mn:00007108 var_4           = dword ptr -4
.text$mn:00007108 Src             = dword ptr  8
.text$mn:00007108 Size            = dword ptr  0Ch
.text$mn:00007108
.text$mn:00007108                 push    ebp
.text$mn:00007109                 mov     ebp, esp
.text$mn:0000710B                 push    ecx
.text$mn:0000710C                 mov     [ebp+var_4], ecx
.text$mn:0000710F                 cmp     [ebp+Size], 0
.text$mn:00007113                 jz      short loc_712B
.text$mn:00007115                 push    47Fh            ; unsigned int
.text$mn:0000711A                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000711F                 mov     eax, [ebp+Src]
.text$mn:00007122                 push    eax             ; int
.text$mn:00007123                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00007128                 add     esp, 0Ch
.text$mn:0000712B
.text$mn:0000712B loc_712B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+Bj
.text$mn:0000712B                 mov     ecx, [ebp+Src]
.text$mn:0000712E                 push    ecx
.text$mn:0000712F                 mov     ecx, [ebp+var_4]
.text$mn:00007132                 call    ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
.text$mn:00007137                 movzx   edx, al
.text$mn:0000713A                 test    edx, edx
.text$mn:0000713C                 jz      short loc_715E
.text$mn:0000713E                 mov     eax, [ebp+Size]
.text$mn:00007141                 push    eax
.text$mn:00007142                 mov     ecx, [ebp+var_4]
.text$mn:00007145                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000714A                 mov     ecx, [ebp+Src]
.text$mn:0000714D                 sub     ecx, eax
.text$mn:0000714F                 push    ecx
.text$mn:00007150                 mov     edx, [ebp+var_4]
.text$mn:00007153                 push    edx
.text$mn:00007154                 mov     ecx, [ebp+var_4]
.text$mn:00007157                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:0000715C                 jmp     short loc_719B
.text$mn:0000715E ; ---------------------------------------------------------------------------
.text$mn:0000715E
.text$mn:0000715E loc_715E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+34j
.text$mn:0000715E                 push    0
.text$mn:00007160                 mov     eax, [ebp+Size]
.text$mn:00007163                 push    eax
.text$mn:00007164                 mov     ecx, [ebp+var_4]
.text$mn:00007167                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:0000716C                 movzx   ecx, al
.text$mn:0000716F                 test    ecx, ecx
.text$mn:00007171                 jz      short loc_7198
.text$mn:00007173                 mov     edx, [ebp+Size]
.text$mn:00007176                 push    edx             ; Size
.text$mn:00007177                 mov     eax, [ebp+Src]
.text$mn:0000717A                 push    eax             ; Src
.text$mn:0000717B                 mov     ecx, [ebp+var_4]
.text$mn:0000717E                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00007183                 push    eax             ; Dst
.text$mn:00007184                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00007189                 add     esp, 0Ch
.text$mn:0000718C                 mov     ecx, [ebp+Size]
.text$mn:0000718F                 push    ecx
.text$mn:00007190                 mov     ecx, [ebp+var_4]
.text$mn:00007193                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00007198
.text$mn:00007198 loc_7198:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+69j
.text$mn:00007198                 mov     eax, [ebp+var_4]
.text$mn:0000719B
.text$mn:0000719B loc_719B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+54j
.text$mn:0000719B                 mov     esp, ebp
.text$mn:0000719D                 pop     ebp
.text$mn:0000719E                 retn    8
.text$mn:0000719E ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z endp
.text$mn:0000719E
.text$mn:0000719E ; ---------------------------------------------------------------------------
.text$mn:000071A1                 align 4
.text$mn:000071A1 _text$mn        ends
.text$mn:000071A1
.text$mn:000071A4 ; ===========================================================================
.text$mn:000071A4
.text$mn:000071A4 ; Segment type: Pure code
.text$mn:000071A4 ; Segment permissions: Read/Execute
.text$mn:000071A4 _text$mn        segment para public 'CODE' use32
.text$mn:000071A4                 assume cs:_text$mn
.text$mn:000071A4                 ;org 71A4h
.text$mn:000071A4 ; COMDAT (pick any)
.text$mn:000071A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000071A4
.text$mn:000071A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000071A4
.text$mn:000071A4 ; Attributes: bp-based frame
.text$mn:000071A4
.text$mn:000071A4 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:000071A4                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:000071A4 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:000071A4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+51p
.text$mn:000071A4
.text$mn:000071A4 var_8           = dword ptr -8
.text$mn:000071A4 var_4           = dword ptr -4
.text$mn:000071A4 arg_0           = dword ptr  8
.text$mn:000071A4 arg_4           = dword ptr  0Ch
.text$mn:000071A4 arg_8           = dword ptr  10h
.text$mn:000071A4
.text$mn:000071A4                 push    ebp
.text$mn:000071A5                 mov     ebp, esp
.text$mn:000071A7                 sub     esp, 8
.text$mn:000071AA                 mov     [ebp+var_4], ecx
.text$mn:000071AD                 mov     ecx, [ebp+arg_0]
.text$mn:000071B0                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:000071B5                 cmp     eax, [ebp+arg_4]
.text$mn:000071B8                 jnb     short loc_71C2
.text$mn:000071BA                 mov     ecx, [ebp+var_4]
.text$mn:000071BD                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:000071C2
.text$mn:000071C2 loc_71C2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:000071C2                 mov     ecx, [ebp+arg_0]
.text$mn:000071C5                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:000071CA                 sub     eax, [ebp+arg_4]
.text$mn:000071CD                 mov     [ebp+var_8], eax
.text$mn:000071D0                 mov     eax, [ebp+arg_8]
.text$mn:000071D3                 cmp     eax, [ebp+var_8]
.text$mn:000071D6                 jnb     short loc_71DE
.text$mn:000071D8                 mov     ecx, [ebp+arg_8]
.text$mn:000071DB                 mov     [ebp+var_8], ecx
.text$mn:000071DE
.text$mn:000071DE loc_71DE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:000071DE                 mov     edx, [ebp+var_4]
.text$mn:000071E1                 cmp     edx, [ebp+arg_0]
.text$mn:000071E4                 jnz     short loc_7205
.text$mn:000071E6                 mov     eax, [ebp+arg_4]
.text$mn:000071E9                 add     eax, [ebp+var_8]
.text$mn:000071EC                 push    eax
.text$mn:000071ED                 mov     ecx, [ebp+var_4]
.text$mn:000071F0                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)
.text$mn:000071F5                 mov     ecx, [ebp+arg_4]
.text$mn:000071F8                 push    ecx
.text$mn:000071F9                 push    0
.text$mn:000071FB                 mov     ecx, [ebp+var_4]
.text$mn:000071FE                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:00007203                 jmp     short loc_724A
.text$mn:00007205 ; ---------------------------------------------------------------------------
.text$mn:00007205
.text$mn:00007205 loc_7205:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+40j
.text$mn:00007205                 push    0
.text$mn:00007207                 mov     edx, [ebp+var_8]
.text$mn:0000720A                 push    edx
.text$mn:0000720B                 mov     ecx, [ebp+var_4]
.text$mn:0000720E                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00007213                 movzx   eax, al
.text$mn:00007216                 test    eax, eax
.text$mn:00007218                 jz      short loc_724A
.text$mn:0000721A                 mov     ecx, [ebp+var_8]
.text$mn:0000721D                 push    ecx             ; int
.text$mn:0000721E                 mov     ecx, [ebp+arg_0]
.text$mn:00007221                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00007226                 mov     edx, [ebp+arg_4]
.text$mn:00007229                 lea     eax, [eax+edx*2]
.text$mn:0000722C                 push    eax             ; Src
.text$mn:0000722D                 mov     ecx, [ebp+var_4]
.text$mn:00007230                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00007235                 push    eax             ; Dst
.text$mn:00007236                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000723B                 add     esp, 0Ch
.text$mn:0000723E                 mov     ecx, [ebp+var_8]
.text$mn:00007241                 push    ecx
.text$mn:00007242                 mov     ecx, [ebp+var_4]
.text$mn:00007245                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000724A
.text$mn:0000724A loc_724A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Fj
.text$mn:0000724A                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+74j
.text$mn:0000724A                 mov     eax, [ebp+var_4]
.text$mn:0000724D                 mov     esp, ebp
.text$mn:0000724F                 pop     ebp
.text$mn:00007250                 retn    0Ch
.text$mn:00007250 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00007250
.text$mn:00007250 ; ---------------------------------------------------------------------------
.text$mn:00007253                 align 4
.text$mn:00007253 _text$mn        ends
.text$mn:00007253
.text$mn:00007254 ; ===========================================================================
.text$mn:00007254
.text$mn:00007254 ; Segment type: Pure code
.text$mn:00007254 ; Segment permissions: Read/Execute
.text$mn:00007254 _text$mn        segment para public 'CODE' use32
.text$mn:00007254                 assume cs:_text$mn
.text$mn:00007254                 ;org 7254h
.text$mn:00007254 ; COMDAT (pick any)
.text$mn:00007254                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007254
.text$mn:00007254 ; =============== S U B R O U T I N E =======================================
.text$mn:00007254
.text$mn:00007254 ; Attributes: bp-based frame
.text$mn:00007254
.text$mn:00007254 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t *Str)
.text$mn:00007254                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:00007254 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:00007254                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+53p
.text$mn:00007254                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)+Ep
.text$mn:00007254
.text$mn:00007254 var_4           = dword ptr -4
.text$mn:00007254 Str             = dword ptr  8
.text$mn:00007254
.text$mn:00007254                 push    ebp
.text$mn:00007255                 mov     ebp, esp
.text$mn:00007257                 push    ecx
.text$mn:00007258                 mov     [ebp+var_4], ecx
.text$mn:0000725B                 push    490h            ; unsigned int
.text$mn:00007260                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007265                 mov     eax, [ebp+Str]
.text$mn:00007268                 push    eax             ; int
.text$mn:00007269                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000726E                 add     esp, 0Ch
.text$mn:00007271                 mov     ecx, [ebp+Str]
.text$mn:00007274                 push    ecx             ; Str
.text$mn:00007275                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000727A                 add     esp, 4
.text$mn:0000727D                 push    eax             ; int
.text$mn:0000727E                 mov     edx, [ebp+Str]
.text$mn:00007281                 push    edx             ; Src
.text$mn:00007282                 mov     ecx, [ebp+var_4]
.text$mn:00007285                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)
.text$mn:0000728A                 mov     esp, ebp
.text$mn:0000728C                 pop     ebp
.text$mn:0000728D                 retn    4
.text$mn:0000728D ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:0000728D
.text$mn:0000728D _text$mn        ends
.text$mn:0000728D
.text$mn:00007290 ; ===========================================================================
.text$mn:00007290
.text$mn:00007290 ; Segment type: Pure code
.text$mn:00007290 ; Segment permissions: Read/Execute
.text$mn:00007290 _text$mn        segment para public 'CODE' use32
.text$mn:00007290                 assume cs:_text$mn
.text$mn:00007290                 ;org 7290h
.text$mn:00007290 ; COMDAT (pick any)
.text$mn:00007290                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007290
.text$mn:00007290 ; =============== S U B R O U T I N E =======================================
.text$mn:00007290
.text$mn:00007290 ; Attributes: bp-based frame
.text$mn:00007290
.text$mn:00007290 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(void *Src, int)
.text$mn:00007290                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:00007290 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:00007290                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+31p
.text$mn:00007290
.text$mn:00007290 var_4           = dword ptr -4
.text$mn:00007290 Src             = dword ptr  8
.text$mn:00007290 arg_4           = dword ptr  0Ch
.text$mn:00007290
.text$mn:00007290                 push    ebp
.text$mn:00007291                 mov     ebp, esp
.text$mn:00007293                 push    ecx
.text$mn:00007294                 mov     [ebp+var_4], ecx
.text$mn:00007297                 cmp     [ebp+arg_4], 0
.text$mn:0000729B                 jz      short loc_72B3
.text$mn:0000729D                 push    47Fh            ; unsigned int
.text$mn:000072A2                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000072A7                 mov     eax, [ebp+Src]
.text$mn:000072AA                 push    eax             ; int
.text$mn:000072AB                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:000072B0                 add     esp, 0Ch
.text$mn:000072B3
.text$mn:000072B3 loc_72B3:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+Bj
.text$mn:000072B3                 mov     ecx, [ebp+Src]
.text$mn:000072B6                 push    ecx
.text$mn:000072B7                 mov     ecx, [ebp+var_4]
.text$mn:000072BA                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:000072BF                 movzx   edx, al
.text$mn:000072C2                 test    edx, edx
.text$mn:000072C4                 jz      short loc_72E8
.text$mn:000072C6                 mov     eax, [ebp+arg_4]
.text$mn:000072C9                 push    eax
.text$mn:000072CA                 mov     ecx, [ebp+var_4]
.text$mn:000072CD                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000072D2                 mov     ecx, [ebp+Src]
.text$mn:000072D5                 sub     ecx, eax
.text$mn:000072D7                 sar     ecx, 1
.text$mn:000072D9                 push    ecx
.text$mn:000072DA                 mov     edx, [ebp+var_4]
.text$mn:000072DD                 push    edx
.text$mn:000072DE                 mov     ecx, [ebp+var_4]
.text$mn:000072E1                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:000072E6                 jmp     short loc_7325
.text$mn:000072E8 ; ---------------------------------------------------------------------------
.text$mn:000072E8
.text$mn:000072E8 loc_72E8:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+34j
.text$mn:000072E8                 push    0
.text$mn:000072EA                 mov     eax, [ebp+arg_4]
.text$mn:000072ED                 push    eax
.text$mn:000072EE                 mov     ecx, [ebp+var_4]
.text$mn:000072F1                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:000072F6                 movzx   ecx, al
.text$mn:000072F9                 test    ecx, ecx
.text$mn:000072FB                 jz      short loc_7322
.text$mn:000072FD                 mov     edx, [ebp+arg_4]
.text$mn:00007300                 push    edx             ; int
.text$mn:00007301                 mov     eax, [ebp+Src]
.text$mn:00007304                 push    eax             ; Src
.text$mn:00007305                 mov     ecx, [ebp+var_4]
.text$mn:00007308                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000730D                 push    eax             ; Dst
.text$mn:0000730E                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00007313                 add     esp, 0Ch
.text$mn:00007316                 mov     ecx, [ebp+arg_4]
.text$mn:00007319                 push    ecx
.text$mn:0000731A                 mov     ecx, [ebp+var_4]
.text$mn:0000731D                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00007322
.text$mn:00007322 loc_7322:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+6Bj
.text$mn:00007322                 mov     eax, [ebp+var_4]
.text$mn:00007325
.text$mn:00007325 loc_7325:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+56j
.text$mn:00007325                 mov     esp, ebp
.text$mn:00007327                 pop     ebp
.text$mn:00007328                 retn    8
.text$mn:00007328 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:00007328
.text$mn:00007328 ; ---------------------------------------------------------------------------
.text$mn:0000732B                 align 4
.text$mn:0000732B _text$mn        ends
.text$mn:0000732B
.text$mn:0000732C ; ===========================================================================
.text$mn:0000732C
.text$mn:0000732C ; Segment type: Pure code
.text$mn:0000732C ; Segment permissions: Read/Execute
.text$mn:0000732C _text$mn        segment para public 'CODE' use32
.text$mn:0000732C                 assume cs:_text$mn
.text$mn:0000732C                 ;org 732Ch
.text$mn:0000732C ; COMDAT (pick any)
.text$mn:0000732C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000732C
.text$mn:0000732C ; =============== S U B R O U T I N E =======================================
.text$mn:0000732C
.text$mn:0000732C ; Attributes: bp-based frame
.text$mn:0000732C
.text$mn:0000732C ; public: static void __cdecl std::char_traits<char>::assign(char &, char const &)
.text$mn:0000732C                 public ?assign@?$char_traits@D@std@@SAXAADABD@Z
.text$mn:0000732C ?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
.text$mn:0000732C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+26p
.text$mn:0000732C
.text$mn:0000732C arg_0           = dword ptr  8
.text$mn:0000732C arg_4           = dword ptr  0Ch
.text$mn:0000732C
.text$mn:0000732C                 push    ebp
.text$mn:0000732D                 mov     ebp, esp
.text$mn:0000732F                 mov     eax, [ebp+arg_0]
.text$mn:00007332                 mov     ecx, [ebp+arg_4]
.text$mn:00007335                 mov     dl, [ecx]
.text$mn:00007337                 mov     [eax], dl
.text$mn:00007339                 pop     ebp
.text$mn:0000733A                 retn
.text$mn:0000733A ?assign@?$char_traits@D@std@@SAXAADABD@Z endp
.text$mn:0000733A
.text$mn:0000733A ; ---------------------------------------------------------------------------
.text$mn:0000733B                 align 4
.text$mn:0000733B _text$mn        ends
.text$mn:0000733B
.text$mn:0000733C ; ===========================================================================
.text$mn:0000733C
.text$mn:0000733C ; Segment type: Pure code
.text$mn:0000733C ; Segment permissions: Read/Execute
.text$mn:0000733C _text$mn        segment para public 'CODE' use32
.text$mn:0000733C                 assume cs:_text$mn
.text$mn:0000733C                 ;org 733Ch
.text$mn:0000733C ; COMDAT (pick any)
.text$mn:0000733C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000733C
.text$mn:0000733C ; =============== S U B R O U T I N E =======================================
.text$mn:0000733C
.text$mn:0000733C ; Attributes: bp-based frame
.text$mn:0000733C
.text$mn:0000733C ; public: static void __cdecl std::char_traits<wchar_t>::assign(wchar_t &, wchar_t const &)
.text$mn:0000733C                 public ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
.text$mn:0000733C ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z proc near
.text$mn:0000733C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)+2Bp
.text$mn:0000733C
.text$mn:0000733C arg_0           = dword ptr  8
.text$mn:0000733C arg_4           = dword ptr  0Ch
.text$mn:0000733C
.text$mn:0000733C                 push    ebp
.text$mn:0000733D                 mov     ebp, esp
.text$mn:0000733F                 mov     eax, [ebp+arg_0]
.text$mn:00007342                 mov     ecx, [ebp+arg_4]
.text$mn:00007345                 mov     dx, [ecx]
.text$mn:00007348                 mov     [eax], dx
.text$mn:0000734B                 pop     ebp
.text$mn:0000734C                 retn
.text$mn:0000734C ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z endp
.text$mn:0000734C
.text$mn:0000734C ; ---------------------------------------------------------------------------
.text$mn:0000734D                 align 10h
.text$mn:0000734D _text$mn        ends
.text$mn:0000734D
.text$mn:00007350 ; ===========================================================================
.text$mn:00007350
.text$mn:00007350 ; Segment type: Pure code
.text$mn:00007350 ; Segment permissions: Read/Execute
.text$mn:00007350 _text$mn        segment para public 'CODE' use32
.text$mn:00007350                 assume cs:_text$mn
.text$mn:00007350                 ;org 7350h
.text$mn:00007350 ; COMDAT (pick any)
.text$mn:00007350                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007350
.text$mn:00007350 ; =============== S U B R O U T I N E =======================================
.text$mn:00007350
.text$mn:00007350 ; Attributes: bp-based frame
.text$mn:00007350
.text$mn:00007350 ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<struct tTbData *>>> __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::begin(void)
.text$mn:00007350                 public ?begin@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@XZ
.text$mn:00007350 ?begin@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@XZ proc near
.text$mn:00007350                                         ; CODE XREF: DockingCont::removeToolbar(tTbData)+C5p
.text$mn:00007350
.text$mn:00007350 var_14          = dword ptr -14h
.text$mn:00007350 var_10          = dword ptr -10h
.text$mn:00007350 var_C           = dword ptr -0Ch
.text$mn:00007350 var_4           = dword ptr -4
.text$mn:00007350 arg_0           = dword ptr  8
.text$mn:00007350
.text$mn:00007350                 push    ebp
.text$mn:00007351                 mov     ebp, esp
.text$mn:00007353                 push    0FFFFFFFFh
.text$mn:00007355                 push    offset __ehhandler$?begin@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@XZ
.text$mn:0000735A                 mov     eax, large fs:0
.text$mn:00007360                 push    eax
.text$mn:00007361                 sub     esp, 8
.text$mn:00007364                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007369                 xor     eax, ebp
.text$mn:0000736B                 push    eax
.text$mn:0000736C                 lea     eax, [ebp+var_C]
.text$mn:0000736F                 mov     large fs:0, eax
.text$mn:00007375                 mov     [ebp+var_10], ecx
.text$mn:00007378                 mov     [ebp+var_14], 0
.text$mn:0000737F                 mov     eax, [ebp+var_10]
.text$mn:00007382                 push    eax             ; struct std::_Container_base12 *
.text$mn:00007383                 mov     ecx, [ebp+var_10]
.text$mn:00007386                 mov     edx, [ecx+4]
.text$mn:00007389                 push    edx             ; int
.text$mn:0000738A                 mov     ecx, [ebp+arg_0]
.text$mn:0000738D                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(tTbData * *,std::_Container_base12 const *)
.text$mn:00007392                 mov     [ebp+var_4], 0
.text$mn:00007399                 mov     eax, [ebp+var_14]
.text$mn:0000739C                 or      eax, 1
.text$mn:0000739F                 mov     [ebp+var_14], eax
.text$mn:000073A2                 mov     eax, [ebp+arg_0]
.text$mn:000073A5                 mov     ecx, [ebp+var_C]
.text$mn:000073A8                 mov     large fs:0, ecx
.text$mn:000073AF                 pop     ecx
.text$mn:000073B0                 mov     esp, ebp
.text$mn:000073B2                 pop     ebp
.text$mn:000073B3                 retn    4
.text$mn:000073B3 ?begin@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@XZ endp
.text$mn:000073B3
.text$mn:000073B3 ; ---------------------------------------------------------------------------
.text$mn:000073B6                 align 4
.text$mn:000073B6 _text$mn        ends
.text$mn:000073B6
.text$x:000073B8 ; ===========================================================================
.text$x:000073B8
.text$x:000073B8 ; Segment type: Pure code
.text$x:000073B8 ; Segment permissions: Read/Execute
.text$x:000073B8 _text$x         segment para public 'CODE' use32
.text$x:000073B8                 assume cs:_text$x
.text$x:000073B8                 ;org 73B8h
.text$x:000073B8 ; COMDAT (pick associative to section at 7350)
.text$x:000073B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000073B8
.text$x:000073B8 ; =============== S U B R O U T I N E =======================================
.text$x:000073B8
.text$x:000073B8
.text$x:000073B8 __unwindfunclet$?begin@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@XZ$0 proc near
.text$x:000073B8                                         ; DATA XREF: .xdata$x:00008DB4o
.text$x:000073B8                 mov     eax, [ebp-14h]
.text$x:000073BB                 and     eax, 1
.text$x:000073BE                 jz      $LN4_1
.text$x:000073C4                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:000073C8                 mov     ecx, [ebp+8]
.text$x:000073CB                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$x:000073D0 ; ---------------------------------------------------------------------------
.text$x:000073D0
.text$x:000073D0 $LN4_1:                                 ; CODE XREF: __unwindfunclet$?begin@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@XZ$0+6j
.text$x:000073D0                 retn
.text$x:000073D0 __unwindfunclet$?begin@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@XZ$0 endp
.text$x:000073D0
.text$x:000073D1
.text$x:000073D1 ; =============== S U B R O U T I N E =======================================
.text$x:000073D1
.text$x:000073D1
.text$x:000073D1 __ehhandler$?begin@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@XZ proc near
.text$x:000073D1                                         ; DATA XREF: std::vector<tTbData *,std::allocator<tTbData *>>::begin(void)+5o
.text$x:000073D1
.text$x:000073D1 arg_4           = dword ptr  8
.text$x:000073D1
.text$x:000073D1                 mov     edx, [esp+arg_4]
.text$x:000073D5                 lea     eax, [edx+0Ch]
.text$x:000073D8                 mov     ecx, [edx-0Ch]
.text$x:000073DB                 xor     ecx, eax
.text$x:000073DD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000073E2                 mov     eax, offset __ehfuncinfo$?begin@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@XZ
.text$x:000073E7                 jmp     ___CxxFrameHandler3
.text$x:000073E7 __ehhandler$?begin@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@XZ endp
.text$x:000073E7
.text$x:000073E7 _text$x         ends
.text$x:000073E7
.text$mn:000073EC ; ===========================================================================
.text$mn:000073EC
.text$mn:000073EC ; Segment type: Pure code
.text$mn:000073EC ; Segment permissions: Read/Execute
.text$mn:000073EC _text$mn        segment para public 'CODE' use32
.text$mn:000073EC                 assume cs:_text$mn
.text$mn:000073EC                 ;org 73ECh
.text$mn:000073EC ; COMDAT (pick any)
.text$mn:000073EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000073EC
.text$mn:000073EC ; =============== S U B R O U T I N E =======================================
.text$mn:000073EC
.text$mn:000073EC ; Attributes: bp-based frame
.text$mn:000073EC
.text$mn:000073EC ; public: wchar_t const * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::c_str(void)const
.text$mn:000073EC                 public ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
.text$mn:000073EC ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ proc near
.text$mn:000073EC                                         ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+576p
.text$mn:000073EC                                         ; DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+1F4p ...
.text$mn:000073EC
.text$mn:000073EC var_4           = dword ptr -4
.text$mn:000073EC
.text$mn:000073EC                 push    ebp
.text$mn:000073ED                 mov     ebp, esp
.text$mn:000073EF                 push    ecx
.text$mn:000073F0                 mov     [ebp+var_4], ecx
.text$mn:000073F3                 mov     ecx, [ebp+var_4]
.text$mn:000073F6                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000073FB                 mov     esp, ebp
.text$mn:000073FD                 pop     ebp
.text$mn:000073FE                 retn
.text$mn:000073FE ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ endp
.text$mn:000073FE
.text$mn:000073FE ; ---------------------------------------------------------------------------
.text$mn:000073FF                 align 10h
.text$mn:000073FF _text$mn        ends
.text$mn:000073FF
.text$mn:00007400 ; ===========================================================================
.text$mn:00007400
.text$mn:00007400 ; Segment type: Pure code
.text$mn:00007400 ; Segment permissions: Read/Execute
.text$mn:00007400 _text$mn        segment para public 'CODE' use32
.text$mn:00007400                 assume cs:_text$mn
.text$mn:00007400                 ;org 7400h
.text$mn:00007400 ; COMDAT (pick any)
.text$mn:00007400                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007400
.text$mn:00007400 ; =============== S U B R O U T I N E =======================================
.text$mn:00007400
.text$mn:00007400 ; Attributes: bp-based frame
.text$mn:00007400
.text$mn:00007400 ; public: unsigned int __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::capacity(void)const
.text$mn:00007400                 public ?capacity@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ
.text$mn:00007400 ?capacity@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ proc near
.text$mn:00007400                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Grow_to(uint)+Cp
.text$mn:00007400
.text$mn:00007400 var_4           = dword ptr -4
.text$mn:00007400
.text$mn:00007400                 push    ebp
.text$mn:00007401                 mov     ebp, esp
.text$mn:00007403                 push    ecx
.text$mn:00007404                 mov     [ebp+var_4], ecx
.text$mn:00007407                 mov     eax, [ebp+var_4]
.text$mn:0000740A                 mov     ecx, [ebp+var_4]
.text$mn:0000740D                 mov     eax, [eax+0Ch]
.text$mn:00007410                 sub     eax, [ecx+4]
.text$mn:00007413                 sar     eax, 2
.text$mn:00007416                 mov     esp, ebp
.text$mn:00007418                 pop     ebp
.text$mn:00007419                 retn
.text$mn:00007419 ?capacity@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ endp
.text$mn:00007419
.text$mn:00007419 ; ---------------------------------------------------------------------------
.text$mn:0000741A                 align 4
.text$mn:0000741A _text$mn        ends
.text$mn:0000741A
.text$mn:0000741C ; ===========================================================================
.text$mn:0000741C
.text$mn:0000741C ; Segment type: Pure code
.text$mn:0000741C ; Segment permissions: Read/Execute
.text$mn:0000741C _text$mn        segment para public 'CODE' use32
.text$mn:0000741C                 assume cs:_text$mn
.text$mn:0000741C                 ;org 741Ch
.text$mn:0000741C ; COMDAT (pick any)
.text$mn:0000741C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000741C
.text$mn:0000741C ; =============== S U B R O U T I N E =======================================
.text$mn:0000741C
.text$mn:0000741C ; Attributes: bp-based frame
.text$mn:0000741C
.text$mn:0000741C ; const struct std::error_category *__thiscall std::error_code::category(std::error_code *__hidden this)
.text$mn:0000741C                 public ?category@error_code@std@@QBEABVerror_category@2@XZ
.text$mn:0000741C ?category@error_code@std@@QBEABVerror_category@2@XZ proc near
.text$mn:0000741C                                         ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+Cp
.text$mn:0000741C
.text$mn:0000741C var_4           = dword ptr -4
.text$mn:0000741C
.text$mn:0000741C                 push    ebp
.text$mn:0000741D                 mov     ebp, esp
.text$mn:0000741F                 push    ecx
.text$mn:00007420                 mov     [ebp+var_4], ecx
.text$mn:00007423                 mov     eax, [ebp+var_4]
.text$mn:00007426                 mov     eax, [eax+4]
.text$mn:00007429                 mov     esp, ebp
.text$mn:0000742B                 pop     ebp
.text$mn:0000742C                 retn
.text$mn:0000742C ?category@error_code@std@@QBEABVerror_category@2@XZ endp
.text$mn:0000742C
.text$mn:0000742C ; ---------------------------------------------------------------------------
.text$mn:0000742D                 align 10h
.text$mn:0000742D _text$mn        ends
.text$mn:0000742D
.text$mn:00007430 ; ===========================================================================
.text$mn:00007430
.text$mn:00007430 ; Segment type: Pure code
.text$mn:00007430 ; Segment permissions: Read/Execute
.text$mn:00007430 _text$mn        segment para public 'CODE' use32
.text$mn:00007430                 assume cs:_text$mn
.text$mn:00007430                 ;org 7430h
.text$mn:00007430 ; COMDAT (pick any)
.text$mn:00007430                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007430
.text$mn:00007430 ; =============== S U B R O U T I N E =======================================
.text$mn:00007430
.text$mn:00007430 ; Attributes: bp-based frame
.text$mn:00007430
.text$mn:00007430 ; const struct std::error_category *__thiscall std::error_condition::category(std::error_condition *__hidden this)
.text$mn:00007430                 public ?category@error_condition@std@@QBEABVerror_category@2@XZ
.text$mn:00007430 ?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
.text$mn:00007430                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+Dp
.text$mn:00007430                                         ; std::error_condition::operator==(std::error_condition const &)+16p
.text$mn:00007430
.text$mn:00007430 var_4           = dword ptr -4
.text$mn:00007430
.text$mn:00007430                 push    ebp
.text$mn:00007431                 mov     ebp, esp
.text$mn:00007433                 push    ecx
.text$mn:00007434                 mov     [ebp+var_4], ecx
.text$mn:00007437                 mov     eax, [ebp+var_4]
.text$mn:0000743A                 mov     eax, [eax+4]
.text$mn:0000743D                 mov     esp, ebp
.text$mn:0000743F                 pop     ebp
.text$mn:00007440                 retn
.text$mn:00007440 ?category@error_condition@std@@QBEABVerror_category@2@XZ endp
.text$mn:00007440
.text$mn:00007440 ; ---------------------------------------------------------------------------
.text$mn:00007441                 align 4
.text$mn:00007441 _text$mn        ends
.text$mn:00007441
.text$mn:00007444 ; ===========================================================================
.text$mn:00007444
.text$mn:00007444 ; Segment type: Pure code
.text$mn:00007444 ; Segment permissions: Read/Execute
.text$mn:00007444 _text$mn        segment para public 'CODE' use32
.text$mn:00007444                 assume cs:_text$mn
.text$mn:00007444                 ;org 7444h
.text$mn:00007444 ; COMDAT (pick any)
.text$mn:00007444                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007444
.text$mn:00007444 ; =============== S U B R O U T I N E =======================================
.text$mn:00007444
.text$mn:00007444 ; Attributes: bp-based frame
.text$mn:00007444
.text$mn:00007444 ; public: void __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::clear(void)
.text$mn:00007444                 public ?clear@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEXXZ
.text$mn:00007444 ?clear@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEXXZ proc near
.text$mn:00007444                                         ; CODE XREF: DockingCont::DockingCont(void)+117p
.text$mn:00007444
.text$mn:00007444 var_4           = dword ptr -4
.text$mn:00007444
.text$mn:00007444                 push    ebp
.text$mn:00007445                 mov     ebp, esp
.text$mn:00007447                 push    ecx
.text$mn:00007448                 mov     [ebp+var_4], ecx
.text$mn:0000744B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000744E                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00007453                 mov     eax, [ebp+var_4]
.text$mn:00007456                 mov     ecx, [eax+8]
.text$mn:00007459                 push    ecx
.text$mn:0000745A                 mov     edx, [ebp+var_4]
.text$mn:0000745D                 mov     eax, [edx+4]
.text$mn:00007460                 push    eax
.text$mn:00007461                 mov     ecx, [ebp+var_4]
.text$mn:00007464                 call    ?_Destroy@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXPAPAUtTbData@@0@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::_Destroy(tTbData * *,tTbData * *)
.text$mn:00007469                 mov     ecx, [ebp+var_4]
.text$mn:0000746C                 mov     edx, [ebp+var_4]
.text$mn:0000746F                 mov     eax, [edx+4]
.text$mn:00007472                 mov     [ecx+8], eax
.text$mn:00007475                 mov     esp, ebp
.text$mn:00007477                 pop     ebp
.text$mn:00007478                 retn
.text$mn:00007478 ?clear@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEXXZ endp
.text$mn:00007478
.text$mn:00007478 ; ---------------------------------------------------------------------------
.text$mn:00007479                 align 4
.text$mn:00007479 _text$mn        ends
.text$mn:00007479
.text$mn:0000747C ; ===========================================================================
.text$mn:0000747C
.text$mn:0000747C ; Segment type: Pure code
.text$mn:0000747C ; Segment permissions: Read/Execute
.text$mn:0000747C _text$mn        segment para public 'CODE' use32
.text$mn:0000747C                 assume cs:_text$mn
.text$mn:0000747C                 ;org 747Ch
.text$mn:0000747C ; COMDAT (pick any)
.text$mn:0000747C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000747C
.text$mn:0000747C ; =============== S U B R O U T I N E =======================================
.text$mn:0000747C
.text$mn:0000747C ; Attributes: bp-based frame
.text$mn:0000747C
.text$mn:0000747C ; int __stdcall std::allocator<tTbData *>::construct(void *, int)
.text$mn:0000747C                 public ?construct@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@ABQAU3@@Z
.text$mn:0000747C ?construct@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@ABQAU3@@Z proc near
.text$mn:0000747C                                         ; CODE XREF: std::allocator_traits<std::allocator<tTbData *>>::construct<tTbData *,tTbData * const &>(std::allocator<tTbData *> &,tTbData * *,tTbData * const &)+17p
.text$mn:0000747C
.text$mn:0000747C var_C           = dword ptr -0Ch
.text$mn:0000747C var_8           = dword ptr -8
.text$mn:0000747C var_4           = dword ptr -4
.text$mn:0000747C arg_0           = dword ptr  8
.text$mn:0000747C arg_4           = dword ptr  0Ch
.text$mn:0000747C
.text$mn:0000747C                 push    ebp
.text$mn:0000747D                 mov     ebp, esp
.text$mn:0000747F                 sub     esp, 0Ch
.text$mn:00007482                 mov     [ebp+var_C], ecx
.text$mn:00007485                 mov     eax, [ebp+arg_0]
.text$mn:00007488                 push    eax             ; void *
.text$mn:00007489                 push    4               ; unsigned int
.text$mn:0000748B                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00007490                 add     esp, 8
.text$mn:00007493                 mov     [ebp+var_4], eax
.text$mn:00007496                 cmp     [ebp+var_4], 0
.text$mn:0000749A                 jz      short loc_74AE
.text$mn:0000749C                 mov     ecx, [ebp+var_4]
.text$mn:0000749F                 mov     edx, [ebp+arg_4]
.text$mn:000074A2                 mov     eax, [edx]
.text$mn:000074A4                 mov     [ecx], eax
.text$mn:000074A6                 mov     ecx, [ebp+var_4]
.text$mn:000074A9                 mov     [ebp+var_8], ecx
.text$mn:000074AC                 jmp     short loc_74B5
.text$mn:000074AE ; ---------------------------------------------------------------------------
.text$mn:000074AE
.text$mn:000074AE loc_74AE:                               ; CODE XREF: std::allocator<tTbData *>::construct(tTbData * *,tTbData * const &)+1Ej
.text$mn:000074AE                 mov     [ebp+var_8], 0
.text$mn:000074B5
.text$mn:000074B5 loc_74B5:                               ; CODE XREF: std::allocator<tTbData *>::construct(tTbData * *,tTbData * const &)+30j
.text$mn:000074B5                 mov     esp, ebp
.text$mn:000074B7                 pop     ebp
.text$mn:000074B8                 retn    8
.text$mn:000074B8 ?construct@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@ABQAU3@@Z endp
.text$mn:000074B8
.text$mn:000074B8 ; ---------------------------------------------------------------------------
.text$mn:000074BB                 align 4
.text$mn:000074BB _text$mn        ends
.text$mn:000074BB
.text$mn:000074BC ; ===========================================================================
.text$mn:000074BC
.text$mn:000074BC ; Segment type: Pure code
.text$mn:000074BC ; Segment permissions: Read/Execute
.text$mn:000074BC _text$mn        segment para public 'CODE' use32
.text$mn:000074BC                 assume cs:_text$mn
.text$mn:000074BC                 ;org 74BCh
.text$mn:000074BC ; COMDAT (pick any)
.text$mn:000074BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000074BC
.text$mn:000074BC ; =============== S U B R O U T I N E =======================================
.text$mn:000074BC
.text$mn:000074BC ; Attributes: bp-based frame
.text$mn:000074BC
.text$mn:000074BC ; int __cdecl std::char_traits<char>::copy(void *Dst, void *Src, size_t Size)
.text$mn:000074BC                 public ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:000074BC ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near ; CODE XREF: $LN19+1Ep
.text$mn:000074BC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+5Dp ...
.text$mn:000074BC
.text$mn:000074BC var_4           = dword ptr -4
.text$mn:000074BC Dst             = dword ptr  8
.text$mn:000074BC Src             = dword ptr  0Ch
.text$mn:000074BC Size            = dword ptr  10h
.text$mn:000074BC
.text$mn:000074BC                 push    ebp
.text$mn:000074BD                 mov     ebp, esp
.text$mn:000074BF                 push    ecx
.text$mn:000074C0                 cmp     [ebp+Size], 0
.text$mn:000074C4                 jnz     short loc_74CE
.text$mn:000074C6                 mov     eax, [ebp+Dst]
.text$mn:000074C9                 mov     [ebp+var_4], eax
.text$mn:000074CC                 jmp     short loc_74E5
.text$mn:000074CE ; ---------------------------------------------------------------------------
.text$mn:000074CE
.text$mn:000074CE loc_74CE:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+8j
.text$mn:000074CE                 mov     ecx, [ebp+Size]
.text$mn:000074D1                 push    ecx             ; Size
.text$mn:000074D2                 mov     edx, [ebp+Src]
.text$mn:000074D5                 push    edx             ; Src
.text$mn:000074D6                 mov     eax, [ebp+Dst]
.text$mn:000074D9                 push    eax             ; Dst
.text$mn:000074DA                 call    _memcpy
.text$mn:000074DF                 add     esp, 0Ch
.text$mn:000074E2                 mov     [ebp+var_4], eax
.text$mn:000074E5
.text$mn:000074E5 loc_74E5:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+10j
.text$mn:000074E5                 mov     eax, [ebp+var_4]
.text$mn:000074E8                 mov     esp, ebp
.text$mn:000074EA                 pop     ebp
.text$mn:000074EB                 retn
.text$mn:000074EB ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:000074EB
.text$mn:000074EB _text$mn        ends
.text$mn:000074EB
.text$mn:000074EC ; ===========================================================================
.text$mn:000074EC
.text$mn:000074EC ; Segment type: Pure code
.text$mn:000074EC ; Segment permissions: Read/Execute
.text$mn:000074EC _text$mn        segment para public 'CODE' use32
.text$mn:000074EC                 assume cs:_text$mn
.text$mn:000074EC                 ;org 74ECh
.text$mn:000074EC ; COMDAT (pick any)
.text$mn:000074EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000074EC
.text$mn:000074EC ; =============== S U B R O U T I N E =======================================
.text$mn:000074EC
.text$mn:000074EC ; Attributes: bp-based frame
.text$mn:000074EC
.text$mn:000074EC ; int __cdecl std::char_traits<wchar_t>::copy(void *Dst, void *Src, int)
.text$mn:000074EC                 public ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:000074EC ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:000074EC                                         ; CODE XREF: $LN19_0+1Ep
.text$mn:000074EC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+5Dp ...
.text$mn:000074EC
.text$mn:000074EC var_4           = dword ptr -4
.text$mn:000074EC Dst             = dword ptr  8
.text$mn:000074EC Src             = dword ptr  0Ch
.text$mn:000074EC arg_8           = dword ptr  10h
.text$mn:000074EC
.text$mn:000074EC                 push    ebp
.text$mn:000074ED                 mov     ebp, esp
.text$mn:000074EF                 push    ecx
.text$mn:000074F0                 cmp     [ebp+arg_8], 0
.text$mn:000074F4                 jnz     short loc_74FE
.text$mn:000074F6                 mov     eax, [ebp+Dst]
.text$mn:000074F9                 mov     [ebp+var_4], eax
.text$mn:000074FC                 jmp     short loc_7515
.text$mn:000074FE ; ---------------------------------------------------------------------------
.text$mn:000074FE
.text$mn:000074FE loc_74FE:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+8j
.text$mn:000074FE                 mov     ecx, [ebp+arg_8]
.text$mn:00007501                 push    ecx             ; int
.text$mn:00007502                 mov     edx, [ebp+Src]
.text$mn:00007505                 push    edx             ; Src
.text$mn:00007506                 mov     eax, [ebp+Dst]
.text$mn:00007509                 push    eax             ; Dst
.text$mn:0000750A                 call    _wmemcpy
.text$mn:0000750F                 add     esp, 0Ch
.text$mn:00007512                 mov     [ebp+var_4], eax
.text$mn:00007515
.text$mn:00007515 loc_7515:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+10j
.text$mn:00007515                 mov     eax, [ebp+var_4]
.text$mn:00007518                 mov     esp, ebp
.text$mn:0000751A                 pop     ebp
.text$mn:0000751B                 retn
.text$mn:0000751B ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:0000751B
.text$mn:0000751B _text$mn        ends
.text$mn:0000751B
.text$mn:0000751C ; ===========================================================================
.text$mn:0000751C
.text$mn:0000751C ; Segment type: Pure code
.text$mn:0000751C ; Segment permissions: Read/Execute
.text$mn:0000751C _text$mn        segment para public 'CODE' use32
.text$mn:0000751C                 assume cs:_text$mn
.text$mn:0000751C                 ;org 751Ch
.text$mn:0000751C ; COMDAT (pick any)
.text$mn:0000751C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000751C
.text$mn:0000751C ; =============== S U B R O U T I N E =======================================
.text$mn:0000751C
.text$mn:0000751C ; Attributes: bp-based frame
.text$mn:0000751C
.text$mn:0000751C ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::deallocate(void *, int)
.text$mn:0000751C                 public ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
.text$mn:0000751C ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
.text$mn:0000751C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+81p
.text$mn:0000751C
.text$mn:0000751C var_4           = dword ptr -4
.text$mn:0000751C arg_0           = dword ptr  8
.text$mn:0000751C arg_4           = dword ptr  0Ch
.text$mn:0000751C
.text$mn:0000751C                 push    ebp
.text$mn:0000751D                 mov     ebp, esp
.text$mn:0000751F                 push    ecx
.text$mn:00007520                 mov     [ebp+var_4], ecx
.text$mn:00007523                 mov     eax, [ebp+arg_4]
.text$mn:00007526                 push    eax             ; int
.text$mn:00007527                 mov     ecx, [ebp+arg_0]
.text$mn:0000752A                 push    ecx             ; void *
.text$mn:0000752B                 mov     ecx, [ebp+var_4]
.text$mn:0000752E                 call    ?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)
.text$mn:00007533                 mov     esp, ebp
.text$mn:00007535                 pop     ebp
.text$mn:00007536                 retn    8
.text$mn:00007536 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z endp
.text$mn:00007536
.text$mn:00007536 ; ---------------------------------------------------------------------------
.text$mn:00007539                 align 4
.text$mn:00007539 _text$mn        ends
.text$mn:00007539
.text$mn:0000753C ; ===========================================================================
.text$mn:0000753C
.text$mn:0000753C ; Segment type: Pure code
.text$mn:0000753C ; Segment permissions: Read/Execute
.text$mn:0000753C _text$mn        segment para public 'CODE' use32
.text$mn:0000753C                 assume cs:_text$mn
.text$mn:0000753C                 ;org 753Ch
.text$mn:0000753C ; COMDAT (pick any)
.text$mn:0000753C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000753C
.text$mn:0000753C ; =============== S U B R O U T I N E =======================================
.text$mn:0000753C
.text$mn:0000753C ; Attributes: bp-based frame
.text$mn:0000753C
.text$mn:0000753C ; int __stdcall std::_Wrap_alloc<std::allocator<tTbData *>>::deallocate(void *, int)
.text$mn:0000753C                 public ?deallocate@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEXPAPAUtTbData@@I@Z
.text$mn:0000753C ?deallocate@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEXPAPAUtTbData@@I@Z proc near
.text$mn:0000753C                                         ; CODE XREF: __catch$?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z$0+16p
.text$mn:0000753C                                         ; std::vector<tTbData *,std::allocator<tTbData *>>::_Reallocate(uint)+F5p ...
.text$mn:0000753C
.text$mn:0000753C var_4           = dword ptr -4
.text$mn:0000753C arg_0           = dword ptr  8
.text$mn:0000753C arg_4           = dword ptr  0Ch
.text$mn:0000753C
.text$mn:0000753C                 push    ebp
.text$mn:0000753D                 mov     ebp, esp
.text$mn:0000753F                 push    ecx
.text$mn:00007540                 mov     [ebp+var_4], ecx
.text$mn:00007543                 mov     eax, [ebp+arg_4]
.text$mn:00007546                 push    eax             ; int
.text$mn:00007547                 mov     ecx, [ebp+arg_0]
.text$mn:0000754A                 push    ecx             ; void *
.text$mn:0000754B                 mov     ecx, [ebp+var_4]
.text$mn:0000754E                 call    ?deallocate@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@I@Z ; std::allocator<tTbData *>::deallocate(tTbData * *,uint)
.text$mn:00007553                 mov     esp, ebp
.text$mn:00007555                 pop     ebp
.text$mn:00007556                 retn    8
.text$mn:00007556 ?deallocate@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEXPAPAUtTbData@@I@Z endp
.text$mn:00007556
.text$mn:00007556 ; ---------------------------------------------------------------------------
.text$mn:00007559                 align 4
.text$mn:00007559 _text$mn        ends
.text$mn:00007559
.text$mn:0000755C ; ===========================================================================
.text$mn:0000755C
.text$mn:0000755C ; Segment type: Pure code
.text$mn:0000755C ; Segment permissions: Read/Execute
.text$mn:0000755C _text$mn        segment para public 'CODE' use32
.text$mn:0000755C                 assume cs:_text$mn
.text$mn:0000755C                 ;org 755Ch
.text$mn:0000755C ; COMDAT (pick any)
.text$mn:0000755C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000755C
.text$mn:0000755C ; =============== S U B R O U T I N E =======================================
.text$mn:0000755C
.text$mn:0000755C ; Attributes: bp-based frame
.text$mn:0000755C
.text$mn:0000755C ; int __stdcall std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(void *, int)
.text$mn:0000755C                 public ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:0000755C ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:0000755C                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Free_proxy(void)+32p
.text$mn:0000755C
.text$mn:0000755C var_4           = dword ptr -4
.text$mn:0000755C arg_0           = dword ptr  8
.text$mn:0000755C arg_4           = dword ptr  0Ch
.text$mn:0000755C
.text$mn:0000755C                 push    ebp
.text$mn:0000755D                 mov     ebp, esp
.text$mn:0000755F                 push    ecx
.text$mn:00007560                 mov     [ebp+var_4], ecx
.text$mn:00007563                 mov     eax, [ebp+arg_4]
.text$mn:00007566                 push    eax             ; int
.text$mn:00007567                 mov     ecx, [ebp+arg_0]
.text$mn:0000756A                 push    ecx             ; void *
.text$mn:0000756B                 mov     ecx, [ebp+var_4]
.text$mn:0000756E                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:00007573                 mov     esp, ebp
.text$mn:00007575                 pop     ebp
.text$mn:00007576                 retn    8
.text$mn:00007576 ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:00007576
.text$mn:00007576 ; ---------------------------------------------------------------------------
.text$mn:00007579                 align 4
.text$mn:00007579 _text$mn        ends
.text$mn:00007579
.text$mn:0000757C ; ===========================================================================
.text$mn:0000757C
.text$mn:0000757C ; Segment type: Pure code
.text$mn:0000757C ; Segment permissions: Read/Execute
.text$mn:0000757C _text$mn        segment para public 'CODE' use32
.text$mn:0000757C                 assume cs:_text$mn
.text$mn:0000757C                 ;org 757Ch
.text$mn:0000757C ; COMDAT (pick any)
.text$mn:0000757C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000757C
.text$mn:0000757C ; =============== S U B R O U T I N E =======================================
.text$mn:0000757C
.text$mn:0000757C ; Attributes: bp-based frame
.text$mn:0000757C
.text$mn:0000757C ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(void *, int)
.text$mn:0000757C                 public ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
.text$mn:0000757C ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z proc near
.text$mn:0000757C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+81p
.text$mn:0000757C
.text$mn:0000757C var_4           = dword ptr -4
.text$mn:0000757C arg_0           = dword ptr  8
.text$mn:0000757C arg_4           = dword ptr  0Ch
.text$mn:0000757C
.text$mn:0000757C                 push    ebp
.text$mn:0000757D                 mov     ebp, esp
.text$mn:0000757F                 push    ecx
.text$mn:00007580                 mov     [ebp+var_4], ecx
.text$mn:00007583                 mov     eax, [ebp+arg_4]
.text$mn:00007586                 push    eax             ; int
.text$mn:00007587                 mov     ecx, [ebp+arg_0]
.text$mn:0000758A                 push    ecx             ; void *
.text$mn:0000758B                 mov     ecx, [ebp+var_4]
.text$mn:0000758E                 call    ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate(wchar_t *,uint)
.text$mn:00007593                 mov     esp, ebp
.text$mn:00007595                 pop     ebp
.text$mn:00007596                 retn    8
.text$mn:00007596 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z endp
.text$mn:00007596
.text$mn:00007596 ; ---------------------------------------------------------------------------
.text$mn:00007599                 align 4
.text$mn:00007599 _text$mn        ends
.text$mn:00007599
.text$mn:0000759C ; ===========================================================================
.text$mn:0000759C
.text$mn:0000759C ; Segment type: Pure code
.text$mn:0000759C ; Segment permissions: Read/Execute
.text$mn:0000759C _text$mn        segment para public 'CODE' use32
.text$mn:0000759C                 assume cs:_text$mn
.text$mn:0000759C                 ;org 759Ch
.text$mn:0000759C ; COMDAT (pick any)
.text$mn:0000759C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000759C
.text$mn:0000759C ; =============== S U B R O U T I N E =======================================
.text$mn:0000759C
.text$mn:0000759C ; Attributes: bp-based frame
.text$mn:0000759C
.text$mn:0000759C ; int __stdcall std::allocator<char>::deallocate(void *, int)
.text$mn:0000759C                 public ?deallocate@?$allocator@D@std@@QAEXPADI@Z
.text$mn:0000759C ?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
.text$mn:0000759C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)+12p
.text$mn:0000759C
.text$mn:0000759C var_4           = dword ptr -4
.text$mn:0000759C arg_0           = dword ptr  8
.text$mn:0000759C
.text$mn:0000759C                 push    ebp
.text$mn:0000759D                 mov     ebp, esp
.text$mn:0000759F                 push    ecx
.text$mn:000075A0                 mov     [ebp+var_4], ecx
.text$mn:000075A3                 mov     eax, [ebp+arg_0]
.text$mn:000075A6                 push    eax             ; void *
.text$mn:000075A7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000075AC                 add     esp, 4
.text$mn:000075AF                 mov     esp, ebp
.text$mn:000075B1                 pop     ebp
.text$mn:000075B2                 retn    8
.text$mn:000075B2 ?deallocate@?$allocator@D@std@@QAEXPADI@Z endp
.text$mn:000075B2
.text$mn:000075B2 ; ---------------------------------------------------------------------------
.text$mn:000075B5                 align 4
.text$mn:000075B5 _text$mn        ends
.text$mn:000075B5
.text$mn:000075B8 ; ===========================================================================
.text$mn:000075B8
.text$mn:000075B8 ; Segment type: Pure code
.text$mn:000075B8 ; Segment permissions: Read/Execute
.text$mn:000075B8 _text$mn        segment para public 'CODE' use32
.text$mn:000075B8                 assume cs:_text$mn
.text$mn:000075B8                 ;org 75B8h
.text$mn:000075B8 ; COMDAT (pick any)
.text$mn:000075B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000075B8
.text$mn:000075B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000075B8
.text$mn:000075B8 ; Attributes: bp-based frame
.text$mn:000075B8
.text$mn:000075B8 ; int __stdcall std::allocator<tTbData *>::deallocate(void *, int)
.text$mn:000075B8                 public ?deallocate@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@I@Z
.text$mn:000075B8 ?deallocate@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@I@Z proc near
.text$mn:000075B8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<tTbData *>>::deallocate(tTbData * *,uint)+12p
.text$mn:000075B8
.text$mn:000075B8 var_4           = dword ptr -4
.text$mn:000075B8 arg_0           = dword ptr  8
.text$mn:000075B8
.text$mn:000075B8                 push    ebp
.text$mn:000075B9                 mov     ebp, esp
.text$mn:000075BB                 push    ecx
.text$mn:000075BC                 mov     [ebp+var_4], ecx
.text$mn:000075BF                 mov     eax, [ebp+arg_0]
.text$mn:000075C2                 push    eax             ; void *
.text$mn:000075C3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000075C8                 add     esp, 4
.text$mn:000075CB                 mov     esp, ebp
.text$mn:000075CD                 pop     ebp
.text$mn:000075CE                 retn    8
.text$mn:000075CE ?deallocate@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@I@Z endp
.text$mn:000075CE
.text$mn:000075CE ; ---------------------------------------------------------------------------
.text$mn:000075D1                 align 4
.text$mn:000075D1 _text$mn        ends
.text$mn:000075D1
.text$mn:000075D4 ; ===========================================================================
.text$mn:000075D4
.text$mn:000075D4 ; Segment type: Pure code
.text$mn:000075D4 ; Segment permissions: Read/Execute
.text$mn:000075D4 _text$mn        segment para public 'CODE' use32
.text$mn:000075D4                 assume cs:_text$mn
.text$mn:000075D4                 ;org 75D4h
.text$mn:000075D4 ; COMDAT (pick any)
.text$mn:000075D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000075D4
.text$mn:000075D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000075D4
.text$mn:000075D4 ; Attributes: bp-based frame
.text$mn:000075D4
.text$mn:000075D4 ; int __stdcall std::allocator<std::_Container_proxy>::deallocate(void *, int)
.text$mn:000075D4                 public ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:000075D4 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:000075D4                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+32p
.text$mn:000075D4                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)+32p ...
.text$mn:000075D4
.text$mn:000075D4 var_4           = dword ptr -4
.text$mn:000075D4 arg_0           = dword ptr  8
.text$mn:000075D4
.text$mn:000075D4                 push    ebp
.text$mn:000075D5                 mov     ebp, esp
.text$mn:000075D7                 push    ecx
.text$mn:000075D8                 mov     [ebp+var_4], ecx
.text$mn:000075DB                 mov     eax, [ebp+arg_0]
.text$mn:000075DE                 push    eax             ; void *
.text$mn:000075DF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000075E4                 add     esp, 4
.text$mn:000075E7                 mov     esp, ebp
.text$mn:000075E9                 pop     ebp
.text$mn:000075EA                 retn    8
.text$mn:000075EA ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:000075EA
.text$mn:000075EA ; ---------------------------------------------------------------------------
.text$mn:000075ED                 align 10h
.text$mn:000075ED _text$mn        ends
.text$mn:000075ED
.text$mn:000075F0 ; ===========================================================================
.text$mn:000075F0
.text$mn:000075F0 ; Segment type: Pure code
.text$mn:000075F0 ; Segment permissions: Read/Execute
.text$mn:000075F0 _text$mn        segment para public 'CODE' use32
.text$mn:000075F0                 assume cs:_text$mn
.text$mn:000075F0                 ;org 75F0h
.text$mn:000075F0 ; COMDAT (pick any)
.text$mn:000075F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000075F0
.text$mn:000075F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000075F0
.text$mn:000075F0 ; Attributes: bp-based frame
.text$mn:000075F0
.text$mn:000075F0 ; int __stdcall std::allocator<wchar_t>::deallocate(void *, int)
.text$mn:000075F0                 public ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
.text$mn:000075F0 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z proc near
.text$mn:000075F0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)+12p
.text$mn:000075F0
.text$mn:000075F0 var_4           = dword ptr -4
.text$mn:000075F0 arg_0           = dword ptr  8
.text$mn:000075F0
.text$mn:000075F0                 push    ebp
.text$mn:000075F1                 mov     ebp, esp
.text$mn:000075F3                 push    ecx
.text$mn:000075F4                 mov     [ebp+var_4], ecx
.text$mn:000075F7                 mov     eax, [ebp+arg_0]
.text$mn:000075FA                 push    eax             ; void *
.text$mn:000075FB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007600                 add     esp, 4
.text$mn:00007603                 mov     esp, ebp
.text$mn:00007605                 pop     ebp
.text$mn:00007606                 retn    8
.text$mn:00007606 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z endp
.text$mn:00007606
.text$mn:00007606 ; ---------------------------------------------------------------------------
.text$mn:00007609                 align 4
.text$mn:00007609 _text$mn        ends
.text$mn:00007609
.text$mn:0000760C ; ===========================================================================
.text$mn:0000760C
.text$mn:0000760C ; Segment type: Pure code
.text$mn:0000760C ; Segment permissions: Read/Execute
.text$mn:0000760C _text$mn        segment para public 'CODE' use32
.text$mn:0000760C                 assume cs:_text$mn
.text$mn:0000760C                 ;org 760Ch
.text$mn:0000760C ; COMDAT (pick any)
.text$mn:0000760C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000760C
.text$mn:0000760C ; =============== S U B R O U T I N E =======================================
.text$mn:0000760C
.text$mn:0000760C ; Attributes: bp-based frame
.text$mn:0000760C
.text$mn:0000760C ; public: virtual class std::error_condition __thiscall std::_System_error_category::default_error_condition(int)const
.text$mn:0000760C                 public ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:0000760C ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:0000760C                                         ; DATA XREF: .rdata:0000939Co
.text$mn:0000760C
.text$mn:0000760C var_4           = dword ptr -4
.text$mn:0000760C arg_0           = dword ptr  8
.text$mn:0000760C arg_4           = dword ptr  0Ch
.text$mn:0000760C
.text$mn:0000760C                 push    ebp
.text$mn:0000760D                 mov     ebp, esp
.text$mn:0000760F                 push    ecx
.text$mn:00007610                 mov     [ebp+var_4], ecx
.text$mn:00007613                 mov     eax, [ebp+arg_4]
.text$mn:00007616                 push    eax             ; int
.text$mn:00007617                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:0000761C                 add     esp, 4
.text$mn:0000761F                 test    eax, eax
.text$mn:00007621                 jz      short loc_763C
.text$mn:00007623                 call    ?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category(void)
.text$mn:00007628                 push    eax             ; struct std::error_category *
.text$mn:00007629                 mov     ecx, [ebp+arg_4]
.text$mn:0000762C                 push    ecx             ; int
.text$mn:0000762D                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007630                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:00007635                 mov     eax, [ebp+arg_0]
.text$mn:00007638                 jmp     short loc_7651
.text$mn:0000763A ; ---------------------------------------------------------------------------
.text$mn:0000763A                 jmp     short loc_7651
.text$mn:0000763C ; ---------------------------------------------------------------------------
.text$mn:0000763C
.text$mn:0000763C loc_763C:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+15j
.text$mn:0000763C                 call    ?system_category@std@@YAABVerror_category@1@XZ ; std::system_category(void)
.text$mn:00007641                 push    eax             ; struct std::error_category *
.text$mn:00007642                 mov     edx, [ebp+arg_4]
.text$mn:00007645                 push    edx             ; int
.text$mn:00007646                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007649                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000764E                 mov     eax, [ebp+arg_0]
.text$mn:00007651
.text$mn:00007651 loc_7651:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+2Cj
.text$mn:00007651                                         ; std::_System_error_category::default_error_condition(int)+2Ej
.text$mn:00007651                 mov     esp, ebp
.text$mn:00007653                 pop     ebp
.text$mn:00007654                 retn    8
.text$mn:00007654 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:00007654
.text$mn:00007654 ; ---------------------------------------------------------------------------
.text$mn:00007657                 align 4
.text$mn:00007657 _text$mn        ends
.text$mn:00007657
.text$mn:00007658 ; ===========================================================================
.text$mn:00007658
.text$mn:00007658 ; Segment type: Pure code
.text$mn:00007658 ; Segment permissions: Read/Execute
.text$mn:00007658 _text$mn        segment para public 'CODE' use32
.text$mn:00007658                 assume cs:_text$mn
.text$mn:00007658                 ;org 7658h
.text$mn:00007658 ; COMDAT (pick any)
.text$mn:00007658                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007658
.text$mn:00007658 ; =============== S U B R O U T I N E =======================================
.text$mn:00007658
.text$mn:00007658 ; Attributes: bp-based frame
.text$mn:00007658
.text$mn:00007658 ; public: virtual class std::error_condition __thiscall std::error_category::default_error_condition(int)const
.text$mn:00007658                 public ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:00007658 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:00007658                                         ; DATA XREF: .rdata:0000930Co
.text$mn:00007658                                         ; .rdata:00009328o ...
.text$mn:00007658
.text$mn:00007658 var_4           = dword ptr -4
.text$mn:00007658 arg_0           = dword ptr  8
.text$mn:00007658 arg_4           = dword ptr  0Ch
.text$mn:00007658
.text$mn:00007658                 push    ebp
.text$mn:00007659                 mov     ebp, esp
.text$mn:0000765B                 push    ecx
.text$mn:0000765C                 mov     [ebp+var_4], ecx
.text$mn:0000765F                 mov     eax, [ebp+var_4]
.text$mn:00007662                 push    eax             ; struct std::error_category *
.text$mn:00007663                 mov     ecx, [ebp+arg_4]
.text$mn:00007666                 push    ecx             ; int
.text$mn:00007667                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000766A                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000766F                 mov     eax, [ebp+arg_0]
.text$mn:00007672                 mov     esp, ebp
.text$mn:00007674                 pop     ebp
.text$mn:00007675                 retn    8
.text$mn:00007675 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:00007675
.text$mn:00007675 _text$mn        ends
.text$mn:00007675
.text$mn:00007678 ; ===========================================================================
.text$mn:00007678
.text$mn:00007678 ; Segment type: Pure code
.text$mn:00007678 ; Segment permissions: Read/Execute
.text$mn:00007678 _text$mn        segment para public 'CODE' use32
.text$mn:00007678                 assume cs:_text$mn
.text$mn:00007678                 ;org 7678h
.text$mn:00007678 ; COMDAT (pick any)
.text$mn:00007678                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007678
.text$mn:00007678 ; =============== S U B R O U T I N E =======================================
.text$mn:00007678
.text$mn:00007678 ; Attributes: bp-based frame
.text$mn:00007678
.text$mn:00007678 ; void __thiscall DockingCont::destroy(DockingCont *__hidden this)
.text$mn:00007678                 public ?destroy@DockingCont@@UAEXXZ
.text$mn:00007678 ?destroy@DockingCont@@UAEXXZ proc near  ; DATA XREF: .rdata:000093D4o
.text$mn:00007678
.text$mn:00007678 var_C           = dword ptr -0Ch
.text$mn:00007678 var_8           = dword ptr -8
.text$mn:00007678 var_4           = dword ptr -4
.text$mn:00007678
.text$mn:00007678                 push    ebp
.text$mn:00007679                 mov     ebp, esp
.text$mn:0000767B                 sub     esp, 0Ch
.text$mn:0000767E                 mov     [ebp+var_8], ecx
.text$mn:00007681                 mov     ecx, [ebp+var_8]
.text$mn:00007684                 add     ecx, 9Ch ; 'Â£'
.text$mn:0000768A                 call    ?size@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ ; std::vector<tTbData *,std::allocator<tTbData *>>::size(void)
.text$mn:0000768F                 mov     [ebp+var_4], eax
.text$mn:00007692                 jmp     short loc_769D
.text$mn:00007694 ; ---------------------------------------------------------------------------
.text$mn:00007694
.text$mn:00007694 loc_7694:                               ; CODE XREF: DockingCont::destroy(void)+51j
.text$mn:00007694                 mov     eax, [ebp+var_4]
.text$mn:00007697                 sub     eax, 1
.text$mn:0000769A                 mov     [ebp+var_4], eax
.text$mn:0000769D
.text$mn:0000769D loc_769D:                               ; CODE XREF: DockingCont::destroy(void)+1Aj
.text$mn:0000769D                 cmp     [ebp+var_4], 0
.text$mn:000076A1                 jle     short loc_76CB
.text$mn:000076A3                 mov     ecx, [ebp+var_4]
.text$mn:000076A6                 sub     ecx, 1
.text$mn:000076A9                 push    ecx
.text$mn:000076AA                 mov     ecx, [ebp+var_8]
.text$mn:000076AD                 add     ecx, 9Ch ; 'Â£'
.text$mn:000076B3                 call    ??A?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEAAPAUtTbData@@I@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)
.text$mn:000076B8                 mov     edx, [eax]
.text$mn:000076BA                 mov     [ebp+var_C], edx
.text$mn:000076BD                 mov     eax, [ebp+var_C]
.text$mn:000076C0                 push    eax             ; void *
.text$mn:000076C1                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000076C6                 add     esp, 4
.text$mn:000076C9                 jmp     short loc_7694
.text$mn:000076CB ; ---------------------------------------------------------------------------
.text$mn:000076CB
.text$mn:000076CB loc_76CB:                               ; CODE XREF: DockingCont::destroy(void)+29j
.text$mn:000076CB                 mov     ecx, [ebp+var_8]
.text$mn:000076CE                 mov     edx, [ecx+0Ch]
.text$mn:000076D1                 push    edx             ; hWnd
.text$mn:000076D2                 call    dword ptr ds:__imp__DestroyWindow@4 ; DestroyWindow(x)
.text$mn:000076D8                 mov     esp, ebp
.text$mn:000076DA                 pop     ebp
.text$mn:000076DB                 retn
.text$mn:000076DB ?destroy@DockingCont@@UAEXXZ endp
.text$mn:000076DB
.text$mn:000076DB _text$mn        ends
.text$mn:000076DB
.text$mn:000076DC ; ===========================================================================
.text$mn:000076DC
.text$mn:000076DC ; Segment type: Pure code
.text$mn:000076DC ; Segment permissions: Read/Execute
.text$mn:000076DC _text$mn        segment para public 'CODE' use32
.text$mn:000076DC                 assume cs:_text$mn
.text$mn:000076DC                 ;org 76DCh
.text$mn:000076DC ; COMDAT (pick any)
.text$mn:000076DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000076DC
.text$mn:000076DC ; =============== S U B R O U T I N E =======================================
.text$mn:000076DC
.text$mn:000076DC ; Attributes: bp-based frame
.text$mn:000076DC
.text$mn:000076DC ; void __thiscall StaticDialog::destroy(StaticDialog *__hidden this)
.text$mn:000076DC                 public ?destroy@StaticDialog@@UAEXXZ
.text$mn:000076DC ?destroy@StaticDialog@@UAEXXZ proc near ; CODE XREF: StaticDialog::~StaticDialog(void)+59p
.text$mn:000076DC                                         ; DATA XREF: .rdata:000092C8o
.text$mn:000076DC
.text$mn:000076DC var_4           = dword ptr -4
.text$mn:000076DC
.text$mn:000076DC                 push    ebp
.text$mn:000076DD                 mov     ebp, esp
.text$mn:000076DF                 push    ecx
.text$mn:000076E0                 mov     [ebp+var_4], ecx
.text$mn:000076E3                 mov     eax, [ebp+var_4]
.text$mn:000076E6                 mov     ecx, [eax+0Ch]
.text$mn:000076E9                 push    ecx             ; lParam
.text$mn:000076EA                 push    1               ; wParam
.text$mn:000076EC                 push    7F4h            ; Msg
.text$mn:000076F1                 mov     edx, [ebp+var_4]
.text$mn:000076F4                 mov     eax, [edx+8]
.text$mn:000076F7                 push    eax             ; hWnd
.text$mn:000076F8                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000076FE                 mov     ecx, [ebp+var_4]
.text$mn:00007701                 mov     edx, [ecx+0Ch]
.text$mn:00007704                 push    edx             ; hWnd
.text$mn:00007705                 call    dword ptr ds:__imp__DestroyWindow@4 ; DestroyWindow(x)
.text$mn:0000770B                 mov     esp, ebp
.text$mn:0000770D                 pop     ebp
.text$mn:0000770E                 retn
.text$mn:0000770E ?destroy@StaticDialog@@UAEXXZ endp
.text$mn:0000770E
.text$mn:0000770E ; ---------------------------------------------------------------------------
.text$mn:0000770F                 align 10h
.text$mn:0000770F _text$mn        ends
.text$mn:0000770F
.text$mn:00007710 ; ===========================================================================
.text$mn:00007710
.text$mn:00007710 ; Segment type: Pure code
.text$mn:00007710 ; Segment permissions: Read/Execute
.text$mn:00007710 _text$mn        segment para public 'CODE' use32
.text$mn:00007710                 assume cs:_text$mn
.text$mn:00007710                 ;org 7710h
.text$mn:00007710 ; COMDAT (pick any)
.text$mn:00007710                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007710
.text$mn:00007710 ; =============== S U B R O U T I N E =======================================
.text$mn:00007710
.text$mn:00007710 ; Attributes: bp-based frame
.text$mn:00007710
.text$mn:00007710 ; void __thiscall ToolTip::destroy(ToolTip *__hidden this)
.text$mn:00007710                 public ?destroy@ToolTip@@UAEXXZ
.text$mn:00007710 ?destroy@ToolTip@@UAEXXZ proc near      ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+4D9p
.text$mn:00007710                                         ; DockingCont::runProcCaption(HWND__ *,uint,uint,long)+607p ...
.text$mn:00007710
.text$mn:00007710 var_4           = dword ptr -4
.text$mn:00007710
.text$mn:00007710                 push    ebp
.text$mn:00007711                 mov     ebp, esp
.text$mn:00007713                 push    ecx
.text$mn:00007714                 mov     [ebp+var_4], ecx
.text$mn:00007717                 mov     eax, [ebp+var_4]
.text$mn:0000771A                 mov     ecx, [eax+0Ch]
.text$mn:0000771D                 push    ecx             ; hWnd
.text$mn:0000771E                 call    dword ptr ds:__imp__DestroyWindow@4 ; DestroyWindow(x)
.text$mn:00007724                 mov     edx, [ebp+var_4]
.text$mn:00007727                 mov     dword ptr [edx+0Ch], 0
.text$mn:0000772E                 mov     esp, ebp
.text$mn:00007730                 pop     ebp
.text$mn:00007731                 retn
.text$mn:00007731 ?destroy@ToolTip@@UAEXXZ endp
.text$mn:00007731
.text$mn:00007731 ; ---------------------------------------------------------------------------
.text$mn:00007732                 align 4
.text$mn:00007732 _text$mn        ends
.text$mn:00007732
.text$mn:00007734 ; ===========================================================================
.text$mn:00007734
.text$mn:00007734 ; Segment type: Pure code
.text$mn:00007734 ; Segment permissions: Read/Execute
.text$mn:00007734 _text$mn        segment para public 'CODE' use32
.text$mn:00007734                 assume cs:_text$mn
.text$mn:00007734                 ;org 7734h
.text$mn:00007734 ; COMDAT (pick any)
.text$mn:00007734                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007734
.text$mn:00007734 ; =============== S U B R O U T I N E =======================================
.text$mn:00007734
.text$mn:00007734 ; Attributes: bp-based frame
.text$mn:00007734
.text$mn:00007734 ; void __thiscall Window::display(Window *this, bool)
.text$mn:00007734                 public ?display@Window@@UBEX_N@Z
.text$mn:00007734 ?display@Window@@UBEX_N@Z proc near     ; DATA XREF: .rdata:00009298o
.text$mn:00007734                                         ; .rdata:00009418o
.text$mn:00007734
.text$mn:00007734 var_8           = dword ptr -8
.text$mn:00007734 nCmdShow        = dword ptr -4
.text$mn:00007734 arg_0           = byte ptr  8
.text$mn:00007734
.text$mn:00007734                 push    ebp
.text$mn:00007735                 mov     ebp, esp
.text$mn:00007737                 sub     esp, 8
.text$mn:0000773A                 mov     [ebp+var_8], ecx
.text$mn:0000773D                 movzx   eax, [ebp+arg_0]
.text$mn:00007741                 test    eax, eax
.text$mn:00007743                 jz      short loc_774E
.text$mn:00007745                 mov     [ebp+nCmdShow], 5
.text$mn:0000774C                 jmp     short loc_7755
.text$mn:0000774E ; ---------------------------------------------------------------------------
.text$mn:0000774E
.text$mn:0000774E loc_774E:                               ; CODE XREF: Window::display(bool)+Fj
.text$mn:0000774E                 mov     [ebp+nCmdShow], 0
.text$mn:00007755
.text$mn:00007755 loc_7755:                               ; CODE XREF: Window::display(bool)+18j
.text$mn:00007755                 mov     ecx, [ebp+nCmdShow]
.text$mn:00007758                 push    ecx             ; nCmdShow
.text$mn:00007759                 mov     edx, [ebp+var_8]
.text$mn:0000775C                 mov     eax, [edx+0Ch]
.text$mn:0000775F                 push    eax             ; hWnd
.text$mn:00007760                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00007766                 mov     esp, ebp
.text$mn:00007768                 pop     ebp
.text$mn:00007769                 retn    4
.text$mn:00007769 ?display@Window@@UBEX_N@Z endp
.text$mn:00007769
.text$mn:00007769 _text$mn        ends
.text$mn:00007769
.text$mn:0000776C ; ===========================================================================
.text$mn:0000776C
.text$mn:0000776C ; Segment type: Pure code
.text$mn:0000776C ; Segment permissions: Read/Execute
.text$mn:0000776C _text$mn        segment para public 'CODE' use32
.text$mn:0000776C                 assume cs:_text$mn
.text$mn:0000776C                 ;org 776Ch
.text$mn:0000776C ; COMDAT (pick any)
.text$mn:0000776C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000776C
.text$mn:0000776C ; =============== S U B R O U T I N E =======================================
.text$mn:0000776C
.text$mn:0000776C ; Attributes: bp-based frame
.text$mn:0000776C
.text$mn:0000776C ; bool __thiscall std::error_category::equivalent(std::error_category *this, const struct std::error_code *, int)
.text$mn:0000776C                 public ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
.text$mn:0000776C ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
.text$mn:0000776C                                         ; DATA XREF: .rdata:00009310o
.text$mn:0000776C                                         ; .rdata:0000932Co ...
.text$mn:0000776C
.text$mn:0000776C var_8           = dword ptr -8
.text$mn:0000776C var_4           = dword ptr -4
.text$mn:0000776C arg_0           = dword ptr  8
.text$mn:0000776C arg_4           = dword ptr  0Ch
.text$mn:0000776C
.text$mn:0000776C                 push    ebp
.text$mn:0000776D                 mov     ebp, esp
.text$mn:0000776F                 sub     esp, 8
.text$mn:00007772                 mov     [ebp+var_8], ecx
.text$mn:00007775                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007778                 call    ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category(void)
.text$mn:0000777D                 push    eax
.text$mn:0000777E                 mov     ecx, [ebp+var_8]
.text$mn:00007781                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:00007786                 movzx   eax, al
.text$mn:00007789                 test    eax, eax
.text$mn:0000778B                 jz      short loc_77A3
.text$mn:0000778D                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007790                 call    ?value@error_code@std@@QBEHXZ ; std::error_code::value(void)
.text$mn:00007795                 cmp     eax, [ebp+arg_4]
.text$mn:00007798                 jnz     short loc_77A3
.text$mn:0000779A                 mov     [ebp+var_4], 1
.text$mn:000077A1                 jmp     short loc_77AA
.text$mn:000077A3 ; ---------------------------------------------------------------------------
.text$mn:000077A3
.text$mn:000077A3 loc_77A3:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+1Fj
.text$mn:000077A3                                         ; std::error_category::equivalent(std::error_code const &,int)+2Cj
.text$mn:000077A3                 mov     [ebp+var_4], 0
.text$mn:000077AA
.text$mn:000077AA loc_77AA:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+35j
.text$mn:000077AA                 mov     al, byte ptr [ebp+var_4]
.text$mn:000077AD                 mov     esp, ebp
.text$mn:000077AF                 pop     ebp
.text$mn:000077B0                 retn    8
.text$mn:000077B0 ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z endp
.text$mn:000077B0
.text$mn:000077B0 ; ---------------------------------------------------------------------------
.text$mn:000077B3                 align 4
.text$mn:000077B3 _text$mn        ends
.text$mn:000077B3
.text$mn:000077B4 ; ===========================================================================
.text$mn:000077B4
.text$mn:000077B4 ; Segment type: Pure code
.text$mn:000077B4 ; Segment permissions: Read/Execute
.text$mn:000077B4 _text$mn        segment para public 'CODE' use32
.text$mn:000077B4                 assume cs:_text$mn
.text$mn:000077B4                 ;org 77B4h
.text$mn:000077B4 ; COMDAT (pick any)
.text$mn:000077B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000077B4
.text$mn:000077B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000077B4
.text$mn:000077B4 ; Attributes: bp-based frame
.text$mn:000077B4
.text$mn:000077B4 ; bool __thiscall std::error_category::equivalent(std::error_category *this, int, const struct std::error_condition *)
.text$mn:000077B4                 public ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
.text$mn:000077B4 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
.text$mn:000077B4                                         ; DATA XREF: .rdata:00009314o
.text$mn:000077B4                                         ; .rdata:00009330o ...
.text$mn:000077B4
.text$mn:000077B4 var_C           = byte ptr -0Ch
.text$mn:000077B4 var_4           = dword ptr -4
.text$mn:000077B4 arg_0           = dword ptr  8
.text$mn:000077B4 arg_4           = dword ptr  0Ch
.text$mn:000077B4
.text$mn:000077B4                 push    ebp
.text$mn:000077B5                 mov     ebp, esp
.text$mn:000077B7                 sub     esp, 0Ch
.text$mn:000077BA                 mov     [ebp+var_4], ecx
.text$mn:000077BD                 mov     eax, [ebp+arg_4]
.text$mn:000077C0                 push    eax             ; std::error_condition *
.text$mn:000077C1                 mov     ecx, [ebp+arg_0]
.text$mn:000077C4                 push    ecx
.text$mn:000077C5                 lea     edx, [ebp+var_C]
.text$mn:000077C8                 push    edx
.text$mn:000077C9                 mov     eax, [ebp+var_4]
.text$mn:000077CC                 mov     edx, [eax]
.text$mn:000077CE                 mov     ecx, [ebp+var_4]
.text$mn:000077D1                 mov     eax, [edx+0Ch]
.text$mn:000077D4                 call    eax
.text$mn:000077D6                 mov     ecx, eax
.text$mn:000077D8                 call    ??8error_condition@std@@QBE_NABV01@@Z ; std::error_condition::operator==(std::error_condition const &)
.text$mn:000077DD                 mov     esp, ebp
.text$mn:000077DF                 pop     ebp
.text$mn:000077E0                 retn    8
.text$mn:000077E0 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z endp
.text$mn:000077E0
.text$mn:000077E0 ; ---------------------------------------------------------------------------
.text$mn:000077E3                 align 4
.text$mn:000077E3 _text$mn        ends
.text$mn:000077E3
.text$mn:000077E4 ; ===========================================================================
.text$mn:000077E4
.text$mn:000077E4 ; Segment type: Pure code
.text$mn:000077E4 ; Segment permissions: Read/Execute
.text$mn:000077E4 _text$mn        segment para public 'CODE' use32
.text$mn:000077E4                 assume cs:_text$mn
.text$mn:000077E4                 ;org 77E4h
.text$mn:000077E4 ; COMDAT (pick any)
.text$mn:000077E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000077E4
.text$mn:000077E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000077E4
.text$mn:000077E4 ; Attributes: bp-based frame
.text$mn:000077E4
.text$mn:000077E4 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int)
.text$mn:000077E4                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
.text$mn:000077E4 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
.text$mn:000077E4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+4Cp
.text$mn:000077E4
.text$mn:000077E4 var_4           = dword ptr -4
.text$mn:000077E4 arg_0           = dword ptr  8
.text$mn:000077E4
.text$mn:000077E4                 push    ebp
.text$mn:000077E5                 mov     ebp, esp
.text$mn:000077E7                 push    ecx
.text$mn:000077E8                 mov     [ebp+var_4], ecx
.text$mn:000077EB                 mov     eax, [ebp+var_4]
.text$mn:000077EE                 mov     ecx, [eax+14h]
.text$mn:000077F1                 cmp     ecx, [ebp+arg_0]
.text$mn:000077F4                 jnb     short loc_77FE
.text$mn:000077F6                 mov     ecx, [ebp+var_4]
.text$mn:000077F9                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:000077FE
.text$mn:000077FE loc_77FE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+10j
.text$mn:000077FE                 mov     edx, [ebp+arg_0]
.text$mn:00007801                 push    edx
.text$mn:00007802                 mov     ecx, [ebp+var_4]
.text$mn:00007805                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000780A                 mov     eax, [ebp+var_4]
.text$mn:0000780D                 mov     esp, ebp
.text$mn:0000780F                 pop     ebp
.text$mn:00007810                 retn    4
.text$mn:00007810 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z endp
.text$mn:00007810
.text$mn:00007810 ; ---------------------------------------------------------------------------
.text$mn:00007813                 align 4
.text$mn:00007813 _text$mn        ends
.text$mn:00007813
.text$mn:00007814 ; ===========================================================================
.text$mn:00007814
.text$mn:00007814 ; Segment type: Pure code
.text$mn:00007814 ; Segment permissions: Read/Execute
.text$mn:00007814 _text$mn        segment para public 'CODE' use32
.text$mn:00007814                 assume cs:_text$mn
.text$mn:00007814                 ;org 7814h
.text$mn:00007814 ; COMDAT (pick any)
.text$mn:00007814                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007814
.text$mn:00007814 ; =============== S U B R O U T I N E =======================================
.text$mn:00007814
.text$mn:00007814 ; Attributes: bp-based frame
.text$mn:00007814
.text$mn:00007814 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int, unsigned int)
.text$mn:00007814                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
.text$mn:00007814 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
.text$mn:00007814                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Ap
.text$mn:00007814
.text$mn:00007814 var_C           = dword ptr -0Ch
.text$mn:00007814 Dst             = dword ptr -8
.text$mn:00007814 var_4           = dword ptr -4
.text$mn:00007814 arg_0           = dword ptr  8
.text$mn:00007814 arg_4           = dword ptr  0Ch
.text$mn:00007814
.text$mn:00007814                 push    ebp
.text$mn:00007815                 mov     ebp, esp
.text$mn:00007817                 sub     esp, 0Ch
.text$mn:0000781A                 mov     [ebp+var_4], ecx
.text$mn:0000781D                 mov     eax, [ebp+var_4]
.text$mn:00007820                 mov     ecx, [eax+14h]
.text$mn:00007823                 cmp     ecx, [ebp+arg_0]
.text$mn:00007826                 jnb     short loc_7830
.text$mn:00007828                 mov     ecx, [ebp+var_4]
.text$mn:0000782B                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:00007830
.text$mn:00007830 loc_7830:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+12j
.text$mn:00007830                 mov     edx, [ebp+var_4]
.text$mn:00007833                 mov     eax, [edx+14h]
.text$mn:00007836                 sub     eax, [ebp+arg_0]
.text$mn:00007839                 cmp     eax, [ebp+arg_4]
.text$mn:0000783C                 ja      short loc_784C
.text$mn:0000783E                 mov     ecx, [ebp+arg_0]
.text$mn:00007841                 push    ecx
.text$mn:00007842                 mov     ecx, [ebp+var_4]
.text$mn:00007845                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000784A                 jmp     short loc_7892
.text$mn:0000784C ; ---------------------------------------------------------------------------
.text$mn:0000784C
.text$mn:0000784C loc_784C:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+28j
.text$mn:0000784C                 cmp     [ebp+arg_4], 0
.text$mn:00007850                 jbe     short loc_7892
.text$mn:00007852                 mov     ecx, [ebp+var_4]
.text$mn:00007855                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000785A                 add     eax, [ebp+arg_0]
.text$mn:0000785D                 mov     [ebp+Dst], eax
.text$mn:00007860                 mov     edx, [ebp+var_4]
.text$mn:00007863                 mov     eax, [edx+14h]
.text$mn:00007866                 sub     eax, [ebp+arg_4]
.text$mn:00007869                 mov     [ebp+var_C], eax
.text$mn:0000786C                 mov     ecx, [ebp+var_C]
.text$mn:0000786F                 sub     ecx, [ebp+arg_0]
.text$mn:00007872                 push    ecx             ; Size
.text$mn:00007873                 mov     edx, [ebp+Dst]
.text$mn:00007876                 add     edx, [ebp+arg_4]
.text$mn:00007879                 push    edx             ; Src
.text$mn:0000787A                 mov     eax, [ebp+Dst]
.text$mn:0000787D                 push    eax             ; Dst
.text$mn:0000787E                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:00007883                 add     esp, 0Ch
.text$mn:00007886                 mov     ecx, [ebp+var_C]
.text$mn:00007889                 push    ecx
.text$mn:0000788A                 mov     ecx, [ebp+var_4]
.text$mn:0000788D                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00007892
.text$mn:00007892 loc_7892:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+36j
.text$mn:00007892                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+3Cj
.text$mn:00007892                 mov     eax, [ebp+var_4]
.text$mn:00007895                 mov     esp, ebp
.text$mn:00007897                 pop     ebp
.text$mn:00007898                 retn    8
.text$mn:00007898 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z endp
.text$mn:00007898
.text$mn:00007898 ; ---------------------------------------------------------------------------
.text$mn:0000789B                 align 4
.text$mn:0000789B _text$mn        ends
.text$mn:0000789B
.text$mn:0000789C ; ===========================================================================
.text$mn:0000789C
.text$mn:0000789C ; Segment type: Pure code
.text$mn:0000789C ; Segment permissions: Read/Execute
.text$mn:0000789C _text$mn        segment para public 'CODE' use32
.text$mn:0000789C                 assume cs:_text$mn
.text$mn:0000789C                 ;org 789Ch
.text$mn:0000789C ; COMDAT (pick any)
.text$mn:0000789C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000789C
.text$mn:0000789C ; =============== S U B R O U T I N E =======================================
.text$mn:0000789C
.text$mn:0000789C ; Attributes: bp-based frame
.text$mn:0000789C
.text$mn:0000789C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int)
.text$mn:0000789C                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
.text$mn:0000789C ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z proc near
.text$mn:0000789C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Cp
.text$mn:0000789C
.text$mn:0000789C var_4           = dword ptr -4
.text$mn:0000789C arg_0           = dword ptr  8
.text$mn:0000789C
.text$mn:0000789C                 push    ebp
.text$mn:0000789D                 mov     ebp, esp
.text$mn:0000789F                 push    ecx
.text$mn:000078A0                 mov     [ebp+var_4], ecx
.text$mn:000078A3                 mov     eax, [ebp+var_4]
.text$mn:000078A6                 mov     ecx, [eax+14h]
.text$mn:000078A9                 cmp     ecx, [ebp+arg_0]
.text$mn:000078AC                 jnb     short loc_78B6
.text$mn:000078AE                 mov     ecx, [ebp+var_4]
.text$mn:000078B1                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:000078B6
.text$mn:000078B6 loc_78B6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)+10j
.text$mn:000078B6                 mov     edx, [ebp+arg_0]
.text$mn:000078B9                 push    edx
.text$mn:000078BA                 mov     ecx, [ebp+var_4]
.text$mn:000078BD                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000078C2                 mov     eax, [ebp+var_4]
.text$mn:000078C5                 mov     esp, ebp
.text$mn:000078C7                 pop     ebp
.text$mn:000078C8                 retn    4
.text$mn:000078C8 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z endp
.text$mn:000078C8
.text$mn:000078C8 ; ---------------------------------------------------------------------------
.text$mn:000078CB                 align 4
.text$mn:000078CB _text$mn        ends
.text$mn:000078CB
.text$mn:000078CC ; ===========================================================================
.text$mn:000078CC
.text$mn:000078CC ; Segment type: Pure code
.text$mn:000078CC ; Segment permissions: Read/Execute
.text$mn:000078CC _text$mn        segment para public 'CODE' use32
.text$mn:000078CC                 assume cs:_text$mn
.text$mn:000078CC                 ;org 78CCh
.text$mn:000078CC ; COMDAT (pick any)
.text$mn:000078CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000078CC
.text$mn:000078CC ; =============== S U B R O U T I N E =======================================
.text$mn:000078CC
.text$mn:000078CC ; Attributes: bp-based frame
.text$mn:000078CC
.text$mn:000078CC ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int, unsigned int)
.text$mn:000078CC                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
.text$mn:000078CC ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z proc near
.text$mn:000078CC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Ap
.text$mn:000078CC
.text$mn:000078CC var_C           = dword ptr -0Ch
.text$mn:000078CC Dst             = dword ptr -8
.text$mn:000078CC var_4           = dword ptr -4
.text$mn:000078CC arg_0           = dword ptr  8
.text$mn:000078CC arg_4           = dword ptr  0Ch
.text$mn:000078CC
.text$mn:000078CC                 push    ebp
.text$mn:000078CD                 mov     ebp, esp
.text$mn:000078CF                 sub     esp, 0Ch
.text$mn:000078D2                 mov     [ebp+var_4], ecx
.text$mn:000078D5                 mov     eax, [ebp+var_4]
.text$mn:000078D8                 mov     ecx, [eax+14h]
.text$mn:000078DB                 cmp     ecx, [ebp+arg_0]
.text$mn:000078DE                 jnb     short loc_78E8
.text$mn:000078E0                 mov     ecx, [ebp+var_4]
.text$mn:000078E3                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:000078E8
.text$mn:000078E8 loc_78E8:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+12j
.text$mn:000078E8                 mov     edx, [ebp+var_4]
.text$mn:000078EB                 mov     eax, [edx+14h]
.text$mn:000078EE                 sub     eax, [ebp+arg_0]
.text$mn:000078F1                 cmp     eax, [ebp+arg_4]
.text$mn:000078F4                 ja      short loc_7904
.text$mn:000078F6                 mov     ecx, [ebp+arg_0]
.text$mn:000078F9                 push    ecx
.text$mn:000078FA                 mov     ecx, [ebp+var_4]
.text$mn:000078FD                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00007902                 jmp     short loc_7950
.text$mn:00007904 ; ---------------------------------------------------------------------------
.text$mn:00007904
.text$mn:00007904 loc_7904:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+28j
.text$mn:00007904                 cmp     [ebp+arg_4], 0
.text$mn:00007908                 jbe     short loc_7950
.text$mn:0000790A                 mov     ecx, [ebp+var_4]
.text$mn:0000790D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00007912                 mov     edx, [ebp+arg_0]
.text$mn:00007915                 lea     eax, [eax+edx*2]
.text$mn:00007918                 mov     [ebp+Dst], eax
.text$mn:0000791B                 mov     ecx, [ebp+var_4]
.text$mn:0000791E                 mov     edx, [ecx+14h]
.text$mn:00007921                 sub     edx, [ebp+arg_4]
.text$mn:00007924                 mov     [ebp+var_C], edx
.text$mn:00007927                 mov     eax, [ebp+var_C]
.text$mn:0000792A                 sub     eax, [ebp+arg_0]
.text$mn:0000792D                 push    eax             ; int
.text$mn:0000792E                 mov     ecx, [ebp+arg_4]
.text$mn:00007931                 mov     edx, [ebp+Dst]
.text$mn:00007934                 lea     eax, [edx+ecx*2]
.text$mn:00007937                 push    eax             ; Src
.text$mn:00007938                 mov     ecx, [ebp+Dst]
.text$mn:0000793B                 push    ecx             ; Dst
.text$mn:0000793C                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00007941                 add     esp, 0Ch
.text$mn:00007944                 mov     edx, [ebp+var_C]
.text$mn:00007947                 push    edx
.text$mn:00007948                 mov     ecx, [ebp+var_4]
.text$mn:0000794B                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00007950
.text$mn:00007950 loc_7950:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+36j
.text$mn:00007950                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+3Cj
.text$mn:00007950                 mov     eax, [ebp+var_4]
.text$mn:00007953                 mov     esp, ebp
.text$mn:00007955                 pop     ebp
.text$mn:00007956                 retn    8
.text$mn:00007956 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z endp
.text$mn:00007956
.text$mn:00007956 ; ---------------------------------------------------------------------------
.text$mn:00007959                 align 4
.text$mn:00007959 _text$mn        ends
.text$mn:00007959
.text$mn:0000795C ; ===========================================================================
.text$mn:0000795C
.text$mn:0000795C ; Segment type: Pure code
.text$mn:0000795C ; Segment permissions: Read/Execute
.text$mn:0000795C _text$mn        segment para public 'CODE' use32
.text$mn:0000795C                 assume cs:_text$mn
.text$mn:0000795C                 ;org 795Ch
.text$mn:0000795C ; COMDAT (pick any)
.text$mn:0000795C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000795C
.text$mn:0000795C ; =============== S U B R O U T I N E =======================================
.text$mn:0000795C
.text$mn:0000795C ; Attributes: bp-based frame
.text$mn:0000795C
.text$mn:0000795C ; int __stdcall std::vector<tTbData *,std::allocator<tTbData *>>::erase(int, char, int, void *Dst)
.text$mn:0000795C                 public ?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z
.text$mn:0000795C ?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z proc near
.text$mn:0000795C                                         ; CODE XREF: DockingCont::removeToolbar(tTbData)+11Dp
.text$mn:0000795C
.text$mn:0000795C var_24          = dword ptr -24h
.text$mn:0000795C var_20          = dword ptr -20h
.text$mn:0000795C var_1C          = dword ptr -1Ch
.text$mn:0000795C var_18          = dword ptr -18h
.text$mn:0000795C var_14          = dword ptr -14h
.text$mn:0000795C var_10          = dword ptr -10h
.text$mn:0000795C var_C           = dword ptr -0Ch
.text$mn:0000795C var_4           = dword ptr -4
.text$mn:0000795C arg_0           = dword ptr  8
.text$mn:0000795C arg_4           = byte ptr  0Ch
.text$mn:0000795C Dst             = dword ptr  14h
.text$mn:0000795C
.text$mn:0000795C                 push    ebp
.text$mn:0000795D                 mov     ebp, esp
.text$mn:0000795F                 push    0FFFFFFFFh
.text$mn:00007961                 push    offset __ehhandler$?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z
.text$mn:00007966                 mov     eax, large fs:0
.text$mn:0000796C                 push    eax
.text$mn:0000796D                 sub     esp, 18h
.text$mn:00007970                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007975                 xor     eax, ebp
.text$mn:00007977                 push    eax
.text$mn:00007978                 lea     eax, [ebp+var_C]
.text$mn:0000797B                 mov     large fs:0, eax
.text$mn:00007981                 mov     [ebp+var_10], ecx
.text$mn:00007984                 mov     [ebp+var_14], 0
.text$mn:0000798B                 mov     [ebp+var_4], 1
.text$mn:00007992                 lea     ecx, [ebp+arg_4] ; this
.text$mn:00007995                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000799A                 cmp     eax, [ebp+var_10]
.text$mn:0000799D                 jnz     short loc_79B5
.text$mn:0000799F                 mov     eax, [ebp+var_10]
.text$mn:000079A2                 mov     ecx, [ebp+Dst]
.text$mn:000079A5                 cmp     ecx, [eax+4]
.text$mn:000079A8                 jb      short loc_79B5
.text$mn:000079AA                 mov     edx, [ebp+var_10]
.text$mn:000079AD                 mov     eax, [edx+8]
.text$mn:000079B0                 cmp     eax, [ebp+Dst]
.text$mn:000079B3                 ja      short loc_79CC
.text$mn:000079B5
.text$mn:000079B5 loc_79B5:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>)+41j
.text$mn:000079B5                                         ; std::vector<tTbData *,std::allocator<tTbData *>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>)+4Cj
.text$mn:000079B5                 push    5A2h            ; unsigned int
.text$mn:000079BA                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000079BF                 push    offset ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@ ; "vector erase iterator outside range"
.text$mn:000079C4                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000079C9                 add     esp, 0Ch
.text$mn:000079CC
.text$mn:000079CC loc_79CC:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>)+57j
.text$mn:000079CC                 mov     ecx, [ebp+Dst]
.text$mn:000079CF                 push    ecx             ; Dst
.text$mn:000079D0                 mov     edx, [ebp+var_10]
.text$mn:000079D3                 mov     eax, [edx+8]
.text$mn:000079D6                 push    eax             ; int
.text$mn:000079D7                 mov     ecx, [ebp+Dst]
.text$mn:000079DA                 add     ecx, 4
.text$mn:000079DD                 push    ecx             ; Src
.text$mn:000079DE                 call    ??$_Move@PAPAUtTbData@@PAPAU1@@std@@YAPAPAUtTbData@@PAPAU1@00@Z ; std::_Move<tTbData * *,tTbData * *>(tTbData * *,tTbData * *,tTbData * *)
.text$mn:000079E3                 add     esp, 0Ch
.text$mn:000079E6                 mov     edx, [ebp+var_10]
.text$mn:000079E9                 mov     eax, [edx+8]
.text$mn:000079EC                 push    eax
.text$mn:000079ED                 mov     ecx, [ebp+var_10]
.text$mn:000079F0                 mov     edx, [ecx+8]
.text$mn:000079F3                 sub     edx, 4
.text$mn:000079F6                 push    edx
.text$mn:000079F7                 mov     ecx, [ebp+var_10]
.text$mn:000079FA                 call    ?_Destroy@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXPAPAUtTbData@@0@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::_Destroy(tTbData * *,tTbData * *)
.text$mn:000079FF                 mov     eax, [ebp+var_10]
.text$mn:00007A02                 mov     ecx, [eax+8]
.text$mn:00007A05                 push    ecx
.text$mn:00007A06                 mov     edx, [ebp+Dst]
.text$mn:00007A09                 push    edx
.text$mn:00007A0A                 mov     ecx, [ebp+var_10]
.text$mn:00007A0D                 call    ?_Orphan_range@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXPAPAUtTbData@@0@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::_Orphan_range(tTbData * *,tTbData * *)
.text$mn:00007A12                 mov     eax, [ebp+var_10]
.text$mn:00007A15                 mov     ecx, [eax+8]
.text$mn:00007A18                 sub     ecx, 4
.text$mn:00007A1B                 mov     edx, [ebp+var_10]
.text$mn:00007A1E                 mov     [edx+8], ecx
.text$mn:00007A21                 sub     esp, 0Ch
.text$mn:00007A24                 mov     ecx, esp
.text$mn:00007A26                 mov     [ebp+var_1C], esp
.text$mn:00007A29                 lea     eax, [ebp+arg_4]
.text$mn:00007A2C                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00007A2D                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>> const &)
.text$mn:00007A32                 mov     [ebp+var_18], eax
.text$mn:00007A35                 mov     ecx, [ebp+var_18]
.text$mn:00007A38                 mov     [ebp+var_20], ecx
.text$mn:00007A3B                 mov     byte ptr [ebp+var_4], 2
.text$mn:00007A3F                 mov     edx, [ebp+arg_0]
.text$mn:00007A42                 push    edx
.text$mn:00007A43                 mov     byte ptr [ebp+var_4], 1
.text$mn:00007A47                 mov     ecx, [ebp+var_10]
.text$mn:00007A4A                 call    ?_Make_iter@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::_Make_iter(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>)
.text$mn:00007A4F                 mov     [ebp+var_24], eax
.text$mn:00007A52                 mov     eax, [ebp+var_14]
.text$mn:00007A55                 or      eax, 1
.text$mn:00007A58                 mov     [ebp+var_14], eax
.text$mn:00007A5B                 mov     byte ptr [ebp+var_4], 0
.text$mn:00007A5F                 lea     ecx, [ebp+arg_4]
.text$mn:00007A62                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$mn:00007A67                 mov     eax, [ebp+arg_0]
.text$mn:00007A6A                 mov     ecx, [ebp+var_C]
.text$mn:00007A6D                 mov     large fs:0, ecx
.text$mn:00007A74                 pop     ecx
.text$mn:00007A75                 mov     esp, ebp
.text$mn:00007A77                 pop     ebp
.text$mn:00007A78                 retn    10h
.text$mn:00007A78 ?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z endp
.text$mn:00007A78
.text$mn:00007A78 ; ---------------------------------------------------------------------------
.text$mn:00007A7B                 align 4
.text$mn:00007A7B _text$mn        ends
.text$mn:00007A7B
.text$x:00007A7C ; ===========================================================================
.text$x:00007A7C
.text$x:00007A7C ; Segment type: Pure code
.text$x:00007A7C ; Segment permissions: Read/Execute
.text$x:00007A7C _text$x         segment para public 'CODE' use32
.text$x:00007A7C                 assume cs:_text$x
.text$x:00007A7C                 ;org 7A7Ch
.text$x:00007A7C ; COMDAT (pick associative to section at 795C)
.text$x:00007A7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007A7C
.text$x:00007A7C ; =============== S U B R O U T I N E =======================================
.text$x:00007A7C
.text$x:00007A7C
.text$x:00007A7C __unwindfunclet$?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z$0 proc near
.text$x:00007A7C                                         ; DATA XREF: .xdata$x:00008E1Co
.text$x:00007A7C                 lea     ecx, [ebp+0Ch]
.text$x:00007A7F                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$x:00007A7F __unwindfunclet$?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z$0 endp
.text$x:00007A7F
.text$x:00007A84
.text$x:00007A84 ; =============== S U B R O U T I N E =======================================
.text$x:00007A84
.text$x:00007A84
.text$x:00007A84 __unwindfunclet$?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z$1 proc near
.text$x:00007A84                                         ; DATA XREF: .xdata$x:00008E24o
.text$x:00007A84                 mov     ecx, [ebp-1Ch]
.text$x:00007A87                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$x:00007A87 __unwindfunclet$?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z$1 endp
.text$x:00007A87
.text$x:00007A8C
.text$x:00007A8C ; =============== S U B R O U T I N E =======================================
.text$x:00007A8C
.text$x:00007A8C
.text$x:00007A8C __unwindfunclet$?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z$2 proc near
.text$x:00007A8C                                         ; DATA XREF: .xdata$x:00008E14o
.text$x:00007A8C                 mov     eax, [ebp-14h]
.text$x:00007A8F                 and     eax, 1
.text$x:00007A92                 jz      $LN8
.text$x:00007A98                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:00007A9C                 mov     ecx, [ebp+8]
.text$x:00007A9F                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>(void)
.text$x:00007AA4 ; ---------------------------------------------------------------------------
.text$x:00007AA4
.text$x:00007AA4 $LN8:                                   ; CODE XREF: __unwindfunclet$?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z$2+6j
.text$x:00007AA4                 retn
.text$x:00007AA4 __unwindfunclet$?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z$2 endp
.text$x:00007AA4
.text$x:00007AA5
.text$x:00007AA5 ; =============== S U B R O U T I N E =======================================
.text$x:00007AA5
.text$x:00007AA5
.text$x:00007AA5 __ehhandler$?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z proc near
.text$x:00007AA5                                         ; DATA XREF: std::vector<tTbData *,std::allocator<tTbData *>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>)+5o
.text$x:00007AA5
.text$x:00007AA5 arg_4           = dword ptr  8
.text$x:00007AA5
.text$x:00007AA5                 mov     edx, [esp+arg_4]
.text$x:00007AA9                 lea     eax, [edx+0Ch]
.text$x:00007AAC                 mov     ecx, [edx-1Ch]
.text$x:00007AAF                 xor     ecx, eax
.text$x:00007AB1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007AB6                 mov     eax, offset __ehfuncinfo$?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z
.text$x:00007ABB                 jmp     ___CxxFrameHandler3
.text$x:00007ABB __ehhandler$?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z endp
.text$x:00007ABB
.text$x:00007ABB _text$x         ends
.text$x:00007ABB
.text$mn:00007AC0 ; ===========================================================================
.text$mn:00007AC0
.text$mn:00007AC0 ; Segment type: Pure code
.text$mn:00007AC0 ; Segment permissions: Read/Execute
.text$mn:00007AC0 _text$mn        segment para public 'CODE' use32
.text$mn:00007AC0                 assume cs:_text$mn
.text$mn:00007AC0                 ;org 7AC0h
.text$mn:00007AC0 ; COMDAT (pick any)
.text$mn:00007AC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007AC0
.text$mn:00007AC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007AC0
.text$mn:00007AC0 ; Attributes: bp-based frame
.text$mn:00007AC0
.text$mn:00007AC0 ; const struct std::error_category *__cdecl std::generic_category()
.text$mn:00007AC0                 public ?generic_category@std@@YAABVerror_category@1@XZ
.text$mn:00007AC0 ?generic_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:00007AC0                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+17p
.text$mn:00007AC0                 push    ebp
.text$mn:00007AC1                 mov     ebp, esp
.text$mn:00007AC3                 mov     eax, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.text$mn:00007AC8                 pop     ebp
.text$mn:00007AC9                 retn
.text$mn:00007AC9 ?generic_category@std@@YAABVerror_category@1@XZ endp
.text$mn:00007AC9
.text$mn:00007AC9 ; ---------------------------------------------------------------------------
.text$mn:00007ACA                 align 4
.text$mn:00007ACA _text$mn        ends
.text$mn:00007ACA
.text$mn:00007ACC ; ===========================================================================
.text$mn:00007ACC
.text$mn:00007ACC ; Segment type: Pure code
.text$mn:00007ACC ; Segment permissions: Read/Execute
.text$mn:00007ACC _text$mn        segment para public 'CODE' use32
.text$mn:00007ACC                 assume cs:_text$mn
.text$mn:00007ACC                 ;org 7ACCh
.text$mn:00007ACC ; COMDAT (pick any)
.text$mn:00007ACC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007ACC
.text$mn:00007ACC ; =============== S U B R O U T I N E =======================================
.text$mn:00007ACC
.text$mn:00007ACC ; Attributes: bp-based frame
.text$mn:00007ACC
.text$mn:00007ACC ; void __thiscall Window::getClientRect(Window *this, struct tagRECT *)
.text$mn:00007ACC                 public ?getClientRect@Window@@UBEXAAUtagRECT@@@Z
.text$mn:00007ACC ?getClientRect@Window@@UBEXAAUtagRECT@@@Z proc near
.text$mn:00007ACC                                         ; DATA XREF: .rdata:000092A8o
.text$mn:00007ACC                                         ; .rdata:000092DCo ...
.text$mn:00007ACC
.text$mn:00007ACC var_4           = dword ptr -4
.text$mn:00007ACC lpRect          = dword ptr  8
.text$mn:00007ACC
.text$mn:00007ACC                 push    ebp
.text$mn:00007ACD                 mov     ebp, esp
.text$mn:00007ACF                 push    ecx
.text$mn:00007AD0                 mov     [ebp+var_4], ecx
.text$mn:00007AD3                 mov     eax, [ebp+lpRect]
.text$mn:00007AD6                 push    eax             ; lpRect
.text$mn:00007AD7                 mov     ecx, [ebp+var_4]
.text$mn:00007ADA                 mov     edx, [ecx+0Ch]
.text$mn:00007ADD                 push    edx             ; hWnd
.text$mn:00007ADE                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text$mn:00007AE4                 mov     esp, ebp
.text$mn:00007AE6                 pop     ebp
.text$mn:00007AE7                 retn    4
.text$mn:00007AE7 ?getClientRect@Window@@UBEXAAUtagRECT@@@Z endp
.text$mn:00007AE7
.text$mn:00007AE7 ; ---------------------------------------------------------------------------
.text$mn:00007AEA                 align 4
.text$mn:00007AEA _text$mn        ends
.text$mn:00007AEA
.text$mn:00007AEC ; ===========================================================================
.text$mn:00007AEC
.text$mn:00007AEC ; Segment type: Pure code
.text$mn:00007AEC ; Segment permissions: Read/Execute
.text$mn:00007AEC _text$mn        segment para public 'CODE' use32
.text$mn:00007AEC                 assume cs:_text$mn
.text$mn:00007AEC                 ;org 7AECh
.text$mn:00007AEC ; COMDAT (pick any)
.text$mn:00007AEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007AEC
.text$mn:00007AEC ; =============== S U B R O U T I N E =======================================
.text$mn:00007AEC
.text$mn:00007AEC ; Attributes: bp-based frame
.text$mn:00007AEC
.text$mn:00007AEC ; int __thiscall Window::getHeight(Window *__hidden this)
.text$mn:00007AEC                 public ?getHeight@Window@@UBEHXZ
.text$mn:00007AEC ?getHeight@Window@@UBEHXZ proc near     ; DATA XREF: .rdata:000092B4o
.text$mn:00007AEC                                         ; .rdata:000092E8o ...
.text$mn:00007AEC
.text$mn:00007AEC var_18          = dword ptr -18h
.text$mn:00007AEC Rect            = tagRECT ptr -14h
.text$mn:00007AEC var_4           = dword ptr -4
.text$mn:00007AEC
.text$mn:00007AEC                 push    ebp
.text$mn:00007AED                 mov     ebp, esp
.text$mn:00007AEF                 sub     esp, 18h
.text$mn:00007AF2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007AF7                 xor     eax, ebp
.text$mn:00007AF9                 mov     [ebp+var_4], eax
.text$mn:00007AFC                 mov     [ebp+var_18], ecx
.text$mn:00007AFF                 lea     eax, [ebp+Rect]
.text$mn:00007B02                 push    eax             ; lpRect
.text$mn:00007B03                 mov     ecx, [ebp+var_18]
.text$mn:00007B06                 mov     edx, [ecx+0Ch]
.text$mn:00007B09                 push    edx             ; hWnd
.text$mn:00007B0A                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text$mn:00007B10                 mov     eax, [ebp+var_18]
.text$mn:00007B13                 mov     ecx, [eax+0Ch]
.text$mn:00007B16                 push    ecx             ; hWnd
.text$mn:00007B17                 call    dword ptr ds:__imp__IsWindowVisible@4 ; IsWindowVisible(x)
.text$mn:00007B1D                 cmp     eax, 1
.text$mn:00007B20                 jnz     short loc_7B2A
.text$mn:00007B22                 mov     eax, [ebp+Rect.bottom]
.text$mn:00007B25                 sub     eax, [ebp+Rect.top]
.text$mn:00007B28                 jmp     short loc_7B2C
.text$mn:00007B2A ; ---------------------------------------------------------------------------
.text$mn:00007B2A
.text$mn:00007B2A loc_7B2A:                               ; CODE XREF: Window::getHeight(void)+34j
.text$mn:00007B2A                 xor     eax, eax
.text$mn:00007B2C
.text$mn:00007B2C loc_7B2C:                               ; CODE XREF: Window::getHeight(void)+3Cj
.text$mn:00007B2C                 mov     ecx, [ebp+var_4]
.text$mn:00007B2F                 xor     ecx, ebp
.text$mn:00007B31                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00007B36                 mov     esp, ebp
.text$mn:00007B38                 pop     ebp
.text$mn:00007B39                 retn
.text$mn:00007B39 ?getHeight@Window@@UBEHXZ endp
.text$mn:00007B39
.text$mn:00007B39 ; ---------------------------------------------------------------------------
.text$mn:00007B3A                 align 4
.text$mn:00007B3A _text$mn        ends
.text$mn:00007B3A
.text$mn:00007B3C ; ===========================================================================
.text$mn:00007B3C
.text$mn:00007B3C ; Segment type: Pure code
.text$mn:00007B3C ; Segment permissions: Read/Execute
.text$mn:00007B3C _text$mn        segment para public 'CODE' use32
.text$mn:00007B3C                 assume cs:_text$mn
.text$mn:00007B3C                 ;org 7B3Ch
.text$mn:00007B3C ; COMDAT (pick any)
.text$mn:00007B3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B3C
.text$mn:00007B3C ; =============== S U B R O U T I N E =======================================
.text$mn:00007B3C
.text$mn:00007B3C ; Attributes: bp-based frame
.text$mn:00007B3C
.text$mn:00007B3C ; struct NppParameters *__cdecl NppParameters::getInstance()
.text$mn:00007B3C                 public ?getInstance@NppParameters@@SAPAV1@XZ
.text$mn:00007B3C ?getInstance@NppParameters@@SAPAV1@XZ proc near
.text$mn:00007B3C                                         ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+12Ap
.text$mn:00007B3C                                         ; DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+223p ...
.text$mn:00007B3C                 push    ebp
.text$mn:00007B3D                 mov     ebp, esp
.text$mn:00007B3F                 mov     eax, dword ptr ds:?_pSelf@NppParameters@@0PAV1@A ; NppParameters * NppParameters::_pSelf
.text$mn:00007B44                 pop     ebp
.text$mn:00007B45                 retn
.text$mn:00007B45 ?getInstance@NppParameters@@SAPAV1@XZ endp
.text$mn:00007B45
.text$mn:00007B45 ; ---------------------------------------------------------------------------
.text$mn:00007B46                 align 4
.text$mn:00007B46 _text$mn        ends
.text$mn:00007B46
.text$mn:00007B48 ; ===========================================================================
.text$mn:00007B48
.text$mn:00007B48 ; Segment type: Pure code
.text$mn:00007B48 ; Segment permissions: Read/Execute
.text$mn:00007B48 _text$mn        segment para public 'CODE' use32
.text$mn:00007B48                 assume cs:_text$mn
.text$mn:00007B48                 ;org 7B48h
.text$mn:00007B48 ; COMDAT (pick any)
.text$mn:00007B48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B48
.text$mn:00007B48 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B48
.text$mn:00007B48 ; Attributes: bp-based frame
.text$mn:00007B48
.text$mn:00007B48 ; int __thiscall Window::getWidth(Window *__hidden this)
.text$mn:00007B48                 public ?getWidth@Window@@UBEHXZ
.text$mn:00007B48 ?getWidth@Window@@UBEHXZ proc near      ; DATA XREF: .rdata:000092B0o
.text$mn:00007B48                                         ; .rdata:000092E4o ...
.text$mn:00007B48
.text$mn:00007B48 var_18          = dword ptr -18h
.text$mn:00007B48 Rect            = tagRECT ptr -14h
.text$mn:00007B48 var_4           = dword ptr -4
.text$mn:00007B48
.text$mn:00007B48                 push    ebp
.text$mn:00007B49                 mov     ebp, esp
.text$mn:00007B4B                 sub     esp, 18h
.text$mn:00007B4E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007B53                 xor     eax, ebp
.text$mn:00007B55                 mov     [ebp+var_4], eax
.text$mn:00007B58                 mov     [ebp+var_18], ecx
.text$mn:00007B5B                 lea     eax, [ebp+Rect]
.text$mn:00007B5E                 push    eax             ; lpRect
.text$mn:00007B5F                 mov     ecx, [ebp+var_18]
.text$mn:00007B62                 mov     edx, [ecx+0Ch]
.text$mn:00007B65                 push    edx             ; hWnd
.text$mn:00007B66                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text$mn:00007B6C                 mov     eax, [ebp+Rect.right]
.text$mn:00007B6F                 sub     eax, [ebp+Rect.left]
.text$mn:00007B72                 mov     ecx, [ebp+var_4]
.text$mn:00007B75                 xor     ecx, ebp
.text$mn:00007B77                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00007B7C                 mov     esp, ebp
.text$mn:00007B7E                 pop     ebp
.text$mn:00007B7F                 retn
.text$mn:00007B7F ?getWidth@Window@@UBEHXZ endp
.text$mn:00007B7F
.text$mn:00007B7F _text$mn        ends
.text$mn:00007B7F
.text$mn:00007B80 ; ===========================================================================
.text$mn:00007B80
.text$mn:00007B80 ; Segment type: Pure code
.text$mn:00007B80 ; Segment permissions: Read/Execute
.text$mn:00007B80 _text$mn        segment para public 'CODE' use32
.text$mn:00007B80                 assume cs:_text$mn
.text$mn:00007B80                 ;org 7B80h
.text$mn:00007B80 ; COMDAT (pick any)
.text$mn:00007B80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B80
.text$mn:00007B80 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B80
.text$mn:00007B80 ; Attributes: bp-based frame
.text$mn:00007B80
.text$mn:00007B80 ; void __thiscall Window::getWindowRect(Window *this, struct tagRECT *)
.text$mn:00007B80                 public ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z
.text$mn:00007B80 ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z proc near
.text$mn:00007B80                                         ; DATA XREF: .rdata:000092ACo
.text$mn:00007B80                                         ; .rdata:000092E0o ...
.text$mn:00007B80
.text$mn:00007B80 var_4           = dword ptr -4
.text$mn:00007B80 lpRect          = dword ptr  8
.text$mn:00007B80
.text$mn:00007B80                 push    ebp
.text$mn:00007B81                 mov     ebp, esp
.text$mn:00007B83                 push    ecx
.text$mn:00007B84                 mov     [ebp+var_4], ecx
.text$mn:00007B87                 mov     eax, [ebp+lpRect]
.text$mn:00007B8A                 push    eax             ; lpRect
.text$mn:00007B8B                 mov     ecx, [ebp+var_4]
.text$mn:00007B8E                 mov     edx, [ecx+0Ch]
.text$mn:00007B91                 push    edx             ; hWnd
.text$mn:00007B92                 call    dword ptr ds:__imp__GetWindowRect@8 ; GetWindowRect(x,x)
.text$mn:00007B98                 mov     esp, ebp
.text$mn:00007B9A                 pop     ebp
.text$mn:00007B9B                 retn    4
.text$mn:00007B9B ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z endp
.text$mn:00007B9B
.text$mn:00007B9B ; ---------------------------------------------------------------------------
.text$mn:00007B9E                 align 10h
.text$mn:00007B9E _text$mn        ends
.text$mn:00007B9E
.text$mn:00007BA0 ; ===========================================================================
.text$mn:00007BA0
.text$mn:00007BA0 ; Segment type: Pure code
.text$mn:00007BA0 ; Segment permissions: Read/Execute
.text$mn:00007BA0 _text$mn        segment para public 'CODE' use32
.text$mn:00007BA0                 assume cs:_text$mn
.text$mn:00007BA0                 ;org 7BA0h
.text$mn:00007BA0 ; COMDAT (pick any)
.text$mn:00007BA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007BA0
.text$mn:00007BA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007BA0
.text$mn:00007BA0 ; Attributes: bp-based frame
.text$mn:00007BA0
.text$mn:00007BA0 ; void __thiscall Window::init(Window *this, HINSTANCE, HWND)
.text$mn:00007BA0                 public ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
.text$mn:00007BA0 ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z proc near
.text$mn:00007BA0                                         ; DATA XREF: .rdata:00009290o
.text$mn:00007BA0                                         ; .rdata:000092C4o ...
.text$mn:00007BA0
.text$mn:00007BA0 var_4           = dword ptr -4
.text$mn:00007BA0 arg_0           = dword ptr  8
.text$mn:00007BA0 arg_4           = dword ptr  0Ch
.text$mn:00007BA0
.text$mn:00007BA0                 push    ebp
.text$mn:00007BA1                 mov     ebp, esp
.text$mn:00007BA3                 push    ecx
.text$mn:00007BA4                 mov     [ebp+var_4], ecx
.text$mn:00007BA7                 mov     eax, [ebp+var_4]
.text$mn:00007BAA                 mov     ecx, [ebp+arg_0]
.text$mn:00007BAD                 mov     [eax+4], ecx
.text$mn:00007BB0                 mov     edx, [ebp+var_4]
.text$mn:00007BB3                 mov     eax, [ebp+arg_4]
.text$mn:00007BB6                 mov     [edx+8], eax
.text$mn:00007BB9                 mov     esp, ebp
.text$mn:00007BBB                 pop     ebp
.text$mn:00007BBC                 retn    8
.text$mn:00007BBC ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z endp
.text$mn:00007BBC
.text$mn:00007BBC ; ---------------------------------------------------------------------------
.text$mn:00007BBF                 align 10h
.text$mn:00007BBF _text$mn        ends
.text$mn:00007BBF
.text$mn:00007BC0 ; ===========================================================================
.text$mn:00007BC0
.text$mn:00007BC0 ; Segment type: Pure code
.text$mn:00007BC0 ; Segment permissions: Read/Execute
.text$mn:00007BC0 _text$mn        segment para public 'CODE' use32
.text$mn:00007BC0                 assume cs:_text$mn
.text$mn:00007BC0                 ;org 7BC0h
.text$mn:00007BC0 ; COMDAT (pick any)
.text$mn:00007BC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007BC0
.text$mn:00007BC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007BC0
.text$mn:00007BC0 ; Attributes: bp-based frame
.text$mn:00007BC0
.text$mn:00007BC0 ; bool __thiscall StaticDialog::isCreated(StaticDialog *__hidden this)
.text$mn:00007BC0                 public ?isCreated@StaticDialog@@UBE_NXZ
.text$mn:00007BC0 ?isCreated@StaticDialog@@UBE_NXZ proc near
.text$mn:00007BC0                                         ; CODE XREF: StaticDialog::~StaticDialog(void)+39p
.text$mn:00007BC0                                         ; DATA XREF: .rdata:000092F4o ...
.text$mn:00007BC0
.text$mn:00007BC0 var_8           = dword ptr -8
.text$mn:00007BC0 var_4           = dword ptr -4
.text$mn:00007BC0
.text$mn:00007BC0                 push    ebp
.text$mn:00007BC1                 mov     ebp, esp
.text$mn:00007BC3                 sub     esp, 8
.text$mn:00007BC6                 mov     [ebp+var_8], ecx
.text$mn:00007BC9                 mov     eax, [ebp+var_8]
.text$mn:00007BCC                 cmp     dword ptr [eax+0Ch], 0
.text$mn:00007BD0                 jz      short loc_7BDB
.text$mn:00007BD2                 mov     [ebp+var_4], 1
.text$mn:00007BD9                 jmp     short loc_7BE2
.text$mn:00007BDB ; ---------------------------------------------------------------------------
.text$mn:00007BDB
.text$mn:00007BDB loc_7BDB:                               ; CODE XREF: StaticDialog::isCreated(void)+10j
.text$mn:00007BDB                 mov     [ebp+var_4], 0
.text$mn:00007BE2
.text$mn:00007BE2 loc_7BE2:                               ; CODE XREF: StaticDialog::isCreated(void)+19j
.text$mn:00007BE2                 mov     al, byte ptr [ebp+var_4]
.text$mn:00007BE5                 mov     esp, ebp
.text$mn:00007BE7                 pop     ebp
.text$mn:00007BE8                 retn
.text$mn:00007BE8 ?isCreated@StaticDialog@@UBE_NXZ endp
.text$mn:00007BE8
.text$mn:00007BE8 ; ---------------------------------------------------------------------------
.text$mn:00007BE9                 align 4
.text$mn:00007BE9 _text$mn        ends
.text$mn:00007BE9
.text$mn:00007BEC ; ===========================================================================
.text$mn:00007BEC
.text$mn:00007BEC ; Segment type: Pure code
.text$mn:00007BEC ; Segment permissions: Read/Execute
.text$mn:00007BEC _text$mn        segment para public 'CODE' use32
.text$mn:00007BEC                 assume cs:_text$mn
.text$mn:00007BEC                 ;org 7BECh
.text$mn:00007BEC ; COMDAT (pick any)
.text$mn:00007BEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007BEC
.text$mn:00007BEC ; =============== S U B R O U T I N E =======================================
.text$mn:00007BEC
.text$mn:00007BEC ; Attributes: bp-based frame
.text$mn:00007BEC
.text$mn:00007BEC ; bool __thiscall Window::isVisible(Window *__hidden this)
.text$mn:00007BEC                 public ?isVisible@Window@@UBE_NXZ
.text$mn:00007BEC ?isVisible@Window@@UBE_NXZ proc near    ; DATA XREF: .rdata:000092B8o
.text$mn:00007BEC                                         ; .rdata:000092ECo ...
.text$mn:00007BEC
.text$mn:00007BEC var_8           = dword ptr -8
.text$mn:00007BEC var_1           = byte ptr -1
.text$mn:00007BEC
.text$mn:00007BEC                 push    ebp
.text$mn:00007BED                 mov     ebp, esp
.text$mn:00007BEF                 sub     esp, 8
.text$mn:00007BF2                 mov     [ebp+var_8], ecx
.text$mn:00007BF5                 mov     eax, [ebp+var_8]
.text$mn:00007BF8                 mov     ecx, [eax+0Ch]
.text$mn:00007BFB                 push    ecx             ; hWnd
.text$mn:00007BFC                 call    dword ptr ds:__imp__IsWindowVisible@4 ; IsWindowVisible(x)
.text$mn:00007C02                 test    eax, eax
.text$mn:00007C04                 jz      short loc_7C0C
.text$mn:00007C06                 mov     [ebp+var_1], 1
.text$mn:00007C0A                 jmp     short loc_7C10
.text$mn:00007C0C ; ---------------------------------------------------------------------------
.text$mn:00007C0C
.text$mn:00007C0C loc_7C0C:                               ; CODE XREF: Window::isVisible(void)+18j
.text$mn:00007C0C                 mov     [ebp+var_1], 0
.text$mn:00007C10
.text$mn:00007C10 loc_7C10:                               ; CODE XREF: Window::isVisible(void)+1Ej
.text$mn:00007C10                 mov     al, [ebp+var_1]
.text$mn:00007C13                 mov     esp, ebp
.text$mn:00007C15                 pop     ebp
.text$mn:00007C16                 retn
.text$mn:00007C16 ?isVisible@Window@@UBE_NXZ endp
.text$mn:00007C16
.text$mn:00007C16 ; ---------------------------------------------------------------------------
.text$mn:00007C17                 align 4
.text$mn:00007C17 _text$mn        ends
.text$mn:00007C17
.text$mn:00007C18 ; ===========================================================================
.text$mn:00007C18
.text$mn:00007C18 ; Segment type: Pure code
.text$mn:00007C18 ; Segment permissions: Read/Execute
.text$mn:00007C18 _text$mn        segment para public 'CODE' use32
.text$mn:00007C18                 assume cs:_text$mn
.text$mn:00007C18                 ;org 7C18h
.text$mn:00007C18 ; COMDAT (pick any)
.text$mn:00007C18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C18
.text$mn:00007C18 ; =============== S U B R O U T I N E =======================================
.text$mn:00007C18
.text$mn:00007C18 ; Attributes: bp-based frame
.text$mn:00007C18
.text$mn:00007C18 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::length(void)const
.text$mn:00007C18                 public ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:00007C18 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:00007C18                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+90p
.text$mn:00007C18
.text$mn:00007C18 var_4           = dword ptr -4
.text$mn:00007C18
.text$mn:00007C18                 push    ebp
.text$mn:00007C19                 mov     ebp, esp
.text$mn:00007C1B                 push    ecx
.text$mn:00007C1C                 mov     [ebp+var_4], ecx
.text$mn:00007C1F                 mov     eax, [ebp+var_4]
.text$mn:00007C22                 mov     eax, [eax+14h]
.text$mn:00007C25                 mov     esp, ebp
.text$mn:00007C27                 pop     ebp
.text$mn:00007C28                 retn
.text$mn:00007C28 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:00007C28
.text$mn:00007C28 ; ---------------------------------------------------------------------------
.text$mn:00007C29                 align 4
.text$mn:00007C29 _text$mn        ends
.text$mn:00007C29
.text$mn:00007C2C ; ===========================================================================
.text$mn:00007C2C
.text$mn:00007C2C ; Segment type: Pure code
.text$mn:00007C2C ; Segment permissions: Read/Execute
.text$mn:00007C2C _text$mn        segment para public 'CODE' use32
.text$mn:00007C2C                 assume cs:_text$mn
.text$mn:00007C2C                 ;org 7C2Ch
.text$mn:00007C2C ; COMDAT (pick any)
.text$mn:00007C2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C2C
.text$mn:00007C2C ; =============== S U B R O U T I N E =======================================
.text$mn:00007C2C
.text$mn:00007C2C ; Attributes: bp-based frame
.text$mn:00007C2C
.text$mn:00007C2C ; int __cdecl std::char_traits<char>::length(char *Str)
.text$mn:00007C2C                 public ?length@?$char_traits@D@std@@SAIPBD@Z
.text$mn:00007C2C ?length@?$char_traits@D@std@@SAIPBD@Z proc near
.text$mn:00007C2C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+21p
.text$mn:00007C2C
.text$mn:00007C2C var_4           = dword ptr -4
.text$mn:00007C2C Str             = dword ptr  8
.text$mn:00007C2C
.text$mn:00007C2C                 push    ebp
.text$mn:00007C2D                 mov     ebp, esp
.text$mn:00007C2F                 push    ecx
.text$mn:00007C30                 mov     eax, [ebp+Str]
.text$mn:00007C33                 movsx   ecx, byte ptr [eax]
.text$mn:00007C36                 test    ecx, ecx
.text$mn:00007C38                 jnz     short loc_7C43
.text$mn:00007C3A                 mov     [ebp+var_4], 0
.text$mn:00007C41                 jmp     short loc_7C52
.text$mn:00007C43 ; ---------------------------------------------------------------------------
.text$mn:00007C43
.text$mn:00007C43 loc_7C43:                               ; CODE XREF: std::char_traits<char>::length(char const *)+Cj
.text$mn:00007C43                 mov     edx, [ebp+Str]
.text$mn:00007C46                 push    edx             ; Str
.text$mn:00007C47                 call    _strlen
.text$mn:00007C4C                 add     esp, 4
.text$mn:00007C4F                 mov     [ebp+var_4], eax
.text$mn:00007C52
.text$mn:00007C52 loc_7C52:                               ; CODE XREF: std::char_traits<char>::length(char const *)+15j
.text$mn:00007C52                 mov     eax, [ebp+var_4]
.text$mn:00007C55                 mov     esp, ebp
.text$mn:00007C57                 pop     ebp
.text$mn:00007C58                 retn
.text$mn:00007C58 ?length@?$char_traits@D@std@@SAIPBD@Z endp
.text$mn:00007C58
.text$mn:00007C58 ; ---------------------------------------------------------------------------
.text$mn:00007C59                 align 4
.text$mn:00007C59 _text$mn        ends
.text$mn:00007C59
.text$mn:00007C5C ; ===========================================================================
.text$mn:00007C5C
.text$mn:00007C5C ; Segment type: Pure code
.text$mn:00007C5C ; Segment permissions: Read/Execute
.text$mn:00007C5C _text$mn        segment para public 'CODE' use32
.text$mn:00007C5C                 assume cs:_text$mn
.text$mn:00007C5C                 ;org 7C5Ch
.text$mn:00007C5C ; COMDAT (pick any)
.text$mn:00007C5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C5C
.text$mn:00007C5C ; =============== S U B R O U T I N E =======================================
.text$mn:00007C5C
.text$mn:00007C5C ; Attributes: bp-based frame
.text$mn:00007C5C
.text$mn:00007C5C ; int __cdecl std::char_traits<wchar_t>::length(wchar_t *Str)
.text$mn:00007C5C                 public ?length@?$char_traits@_W@std@@SAIPB_W@Z
.text$mn:00007C5C ?length@?$char_traits@_W@std@@SAIPB_W@Z proc near
.text$mn:00007C5C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+21p
.text$mn:00007C5C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+21p
.text$mn:00007C5C
.text$mn:00007C5C var_4           = dword ptr -4
.text$mn:00007C5C Str             = dword ptr  8
.text$mn:00007C5C
.text$mn:00007C5C                 push    ebp
.text$mn:00007C5D                 mov     ebp, esp
.text$mn:00007C5F                 push    ecx
.text$mn:00007C60                 mov     eax, [ebp+Str]
.text$mn:00007C63                 movzx   ecx, word ptr [eax]
.text$mn:00007C66                 test    ecx, ecx
.text$mn:00007C68                 jnz     short loc_7C73
.text$mn:00007C6A                 mov     [ebp+var_4], 0
.text$mn:00007C71                 jmp     short loc_7C82
.text$mn:00007C73 ; ---------------------------------------------------------------------------
.text$mn:00007C73
.text$mn:00007C73 loc_7C73:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+Cj
.text$mn:00007C73                 mov     edx, [ebp+Str]
.text$mn:00007C76                 push    edx             ; Str
.text$mn:00007C77                 call    _wcslen
.text$mn:00007C7C                 add     esp, 4
.text$mn:00007C7F                 mov     [ebp+var_4], eax
.text$mn:00007C82
.text$mn:00007C82 loc_7C82:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+15j
.text$mn:00007C82                 mov     eax, [ebp+var_4]
.text$mn:00007C85                 mov     esp, ebp
.text$mn:00007C87                 pop     ebp
.text$mn:00007C88                 retn
.text$mn:00007C88 ?length@?$char_traits@_W@std@@SAIPB_W@Z endp
.text$mn:00007C88
.text$mn:00007C88 ; ---------------------------------------------------------------------------
.text$mn:00007C89                 align 4
.text$mn:00007C89 _text$mn        ends
.text$mn:00007C89
.text$mn:00007C8C ; ===========================================================================
.text$mn:00007C8C
.text$mn:00007C8C ; Segment type: Pure code
.text$mn:00007C8C ; Segment permissions: Read/Execute
.text$mn:00007C8C _text$mn        segment para public 'CODE' use32
.text$mn:00007C8C                 assume cs:_text$mn
.text$mn:00007C8C                 ;org 7C8Ch
.text$mn:00007C8C ; COMDAT (pick any)
.text$mn:00007C8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C8C
.text$mn:00007C8C ; =============== S U B R O U T I N E =======================================
.text$mn:00007C8C
.text$mn:00007C8C ; Attributes: bp-based frame
.text$mn:00007C8C
.text$mn:00007C8C ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<char>>::max_size(void)const
.text$mn:00007C8C                 public ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
.text$mn:00007C8C ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
.text$mn:00007C8C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+17p
.text$mn:00007C8C
.text$mn:00007C8C var_4           = dword ptr -4
.text$mn:00007C8C
.text$mn:00007C8C                 push    ebp
.text$mn:00007C8D                 mov     ebp, esp
.text$mn:00007C8F                 push    ecx
.text$mn:00007C90                 mov     [ebp+var_4], ecx
.text$mn:00007C93                 mov     eax, [ebp+var_4]
.text$mn:00007C96                 push    eax
.text$mn:00007C97                 call    ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)
.text$mn:00007C9C                 add     esp, 4
.text$mn:00007C9F                 mov     esp, ebp
.text$mn:00007CA1                 pop     ebp
.text$mn:00007CA2                 retn
.text$mn:00007CA2 ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ endp
.text$mn:00007CA2
.text$mn:00007CA2 ; ---------------------------------------------------------------------------
.text$mn:00007CA3                 align 4
.text$mn:00007CA3 _text$mn        ends
.text$mn:00007CA3
.text$mn:00007CA4 ; ===========================================================================
.text$mn:00007CA4
.text$mn:00007CA4 ; Segment type: Pure code
.text$mn:00007CA4 ; Segment permissions: Read/Execute
.text$mn:00007CA4 _text$mn        segment para public 'CODE' use32
.text$mn:00007CA4                 assume cs:_text$mn
.text$mn:00007CA4                 ;org 7CA4h
.text$mn:00007CA4 ; COMDAT (pick any)
.text$mn:00007CA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CA4
.text$mn:00007CA4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007CA4
.text$mn:00007CA4 ; Attributes: bp-based frame
.text$mn:00007CA4
.text$mn:00007CA4 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<struct tTbData *>>::max_size(void)const
.text$mn:00007CA4                 public ?max_size@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ
.text$mn:00007CA4 ?max_size@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ proc near
.text$mn:00007CA4                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::max_size(void)+17p
.text$mn:00007CA4
.text$mn:00007CA4 var_4           = dword ptr -4
.text$mn:00007CA4
.text$mn:00007CA4                 push    ebp
.text$mn:00007CA5                 mov     ebp, esp
.text$mn:00007CA7                 push    ecx
.text$mn:00007CA8                 mov     [ebp+var_4], ecx
.text$mn:00007CAB                 mov     eax, [ebp+var_4]
.text$mn:00007CAE                 push    eax
.text$mn:00007CAF                 call    ?max_size@?$allocator_traits@V?$allocator@PAUtTbData@@@std@@@std@@SAIABV?$allocator@PAUtTbData@@@2@@Z ; std::allocator_traits<std::allocator<tTbData *>>::max_size(std::allocator<tTbData *> const &)
.text$mn:00007CB4                 add     esp, 4
.text$mn:00007CB7                 mov     esp, ebp
.text$mn:00007CB9                 pop     ebp
.text$mn:00007CBA                 retn
.text$mn:00007CBA ?max_size@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ endp
.text$mn:00007CBA
.text$mn:00007CBA ; ---------------------------------------------------------------------------
.text$mn:00007CBB                 align 4
.text$mn:00007CBB _text$mn        ends
.text$mn:00007CBB
.text$mn:00007CBC ; ===========================================================================
.text$mn:00007CBC
.text$mn:00007CBC ; Segment type: Pure code
.text$mn:00007CBC ; Segment permissions: Read/Execute
.text$mn:00007CBC _text$mn        segment para public 'CODE' use32
.text$mn:00007CBC                 assume cs:_text$mn
.text$mn:00007CBC                 ;org 7CBCh
.text$mn:00007CBC ; COMDAT (pick any)
.text$mn:00007CBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CBC
.text$mn:00007CBC ; =============== S U B R O U T I N E =======================================
.text$mn:00007CBC
.text$mn:00007CBC ; Attributes: bp-based frame
.text$mn:00007CBC
.text$mn:00007CBC ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::max_size(void)const
.text$mn:00007CBC                 public ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ
.text$mn:00007CBC ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ proc near
.text$mn:00007CBC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+17p
.text$mn:00007CBC
.text$mn:00007CBC var_4           = dword ptr -4
.text$mn:00007CBC
.text$mn:00007CBC                 push    ebp
.text$mn:00007CBD                 mov     ebp, esp
.text$mn:00007CBF                 push    ecx
.text$mn:00007CC0                 mov     [ebp+var_4], ecx
.text$mn:00007CC3                 mov     eax, [ebp+var_4]
.text$mn:00007CC6                 push    eax
.text$mn:00007CC7                 call    ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)
.text$mn:00007CCC                 add     esp, 4
.text$mn:00007CCF                 mov     esp, ebp
.text$mn:00007CD1                 pop     ebp
.text$mn:00007CD2                 retn
.text$mn:00007CD2 ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ endp
.text$mn:00007CD2
.text$mn:00007CD2 ; ---------------------------------------------------------------------------
.text$mn:00007CD3                 align 4
.text$mn:00007CD3 _text$mn        ends
.text$mn:00007CD3
.text$mn:00007CD4 ; ===========================================================================
.text$mn:00007CD4
.text$mn:00007CD4 ; Segment type: Pure code
.text$mn:00007CD4 ; Segment permissions: Read/Execute
.text$mn:00007CD4 _text$mn        segment para public 'CODE' use32
.text$mn:00007CD4                 assume cs:_text$mn
.text$mn:00007CD4                 ;org 7CD4h
.text$mn:00007CD4 ; COMDAT (pick any)
.text$mn:00007CD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CD4
.text$mn:00007CD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007CD4
.text$mn:00007CD4 ; Attributes: bp-based frame
.text$mn:00007CD4
.text$mn:00007CD4 ; public: unsigned int __thiscall std::allocator<char>::max_size(void)const
.text$mn:00007CD4                 public ?max_size@?$allocator@D@std@@QBEIXZ
.text$mn:00007CD4 ?max_size@?$allocator@D@std@@QBEIXZ proc near
.text$mn:00007CD4                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)+6p
.text$mn:00007CD4
.text$mn:00007CD4 var_4           = dword ptr -4
.text$mn:00007CD4
.text$mn:00007CD4                 push    ebp
.text$mn:00007CD5                 mov     ebp, esp
.text$mn:00007CD7                 push    ecx
.text$mn:00007CD8                 mov     [ebp+var_4], ecx
.text$mn:00007CDB                 or      eax, 0FFFFFFFFh
.text$mn:00007CDE                 mov     esp, ebp
.text$mn:00007CE0                 pop     ebp
.text$mn:00007CE1                 retn
.text$mn:00007CE1 ?max_size@?$allocator@D@std@@QBEIXZ endp
.text$mn:00007CE1
.text$mn:00007CE1 ; ---------------------------------------------------------------------------
.text$mn:00007CE2                 align 4
.text$mn:00007CE2 _text$mn        ends
.text$mn:00007CE2
.text$mn:00007CE4 ; ===========================================================================
.text$mn:00007CE4
.text$mn:00007CE4 ; Segment type: Pure code
.text$mn:00007CE4 ; Segment permissions: Read/Execute
.text$mn:00007CE4 _text$mn        segment para public 'CODE' use32
.text$mn:00007CE4                 assume cs:_text$mn
.text$mn:00007CE4                 ;org 7CE4h
.text$mn:00007CE4 ; COMDAT (pick any)
.text$mn:00007CE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CE4
.text$mn:00007CE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007CE4
.text$mn:00007CE4 ; Attributes: bp-based frame
.text$mn:00007CE4
.text$mn:00007CE4 ; public: unsigned int __thiscall std::allocator<struct tTbData *>::max_size(void)const
.text$mn:00007CE4                 public ?max_size@?$allocator@PAUtTbData@@@std@@QBEIXZ
.text$mn:00007CE4 ?max_size@?$allocator@PAUtTbData@@@std@@QBEIXZ proc near
.text$mn:00007CE4                                         ; CODE XREF: std::allocator_traits<std::allocator<tTbData *>>::max_size(std::allocator<tTbData *> const &)+6p
.text$mn:00007CE4
.text$mn:00007CE4 var_4           = dword ptr -4
.text$mn:00007CE4
.text$mn:00007CE4                 push    ebp
.text$mn:00007CE5                 mov     ebp, esp
.text$mn:00007CE7                 push    ecx
.text$mn:00007CE8                 mov     [ebp+var_4], ecx
.text$mn:00007CEB                 mov     eax, 3FFFFFFFh
.text$mn:00007CF0                 mov     esp, ebp
.text$mn:00007CF2                 pop     ebp
.text$mn:00007CF3                 retn
.text$mn:00007CF3 ?max_size@?$allocator@PAUtTbData@@@std@@QBEIXZ endp
.text$mn:00007CF3
.text$mn:00007CF3 _text$mn        ends
.text$mn:00007CF3
.text$mn:00007CF4 ; ===========================================================================
.text$mn:00007CF4
.text$mn:00007CF4 ; Segment type: Pure code
.text$mn:00007CF4 ; Segment permissions: Read/Execute
.text$mn:00007CF4 _text$mn        segment para public 'CODE' use32
.text$mn:00007CF4                 assume cs:_text$mn
.text$mn:00007CF4                 ;org 7CF4h
.text$mn:00007CF4 ; COMDAT (pick any)
.text$mn:00007CF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CF4
.text$mn:00007CF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007CF4
.text$mn:00007CF4 ; Attributes: bp-based frame
.text$mn:00007CF4
.text$mn:00007CF4 ; public: unsigned int __thiscall std::allocator<wchar_t>::max_size(void)const
.text$mn:00007CF4                 public ?max_size@?$allocator@_W@std@@QBEIXZ
.text$mn:00007CF4 ?max_size@?$allocator@_W@std@@QBEIXZ proc near
.text$mn:00007CF4                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)+6p
.text$mn:00007CF4
.text$mn:00007CF4 var_4           = dword ptr -4
.text$mn:00007CF4
.text$mn:00007CF4                 push    ebp
.text$mn:00007CF5                 mov     ebp, esp
.text$mn:00007CF7                 push    ecx
.text$mn:00007CF8                 mov     [ebp+var_4], ecx
.text$mn:00007CFB                 mov     eax, 7FFFFFFFh
.text$mn:00007D00                 mov     esp, ebp
.text$mn:00007D02                 pop     ebp
.text$mn:00007D03                 retn
.text$mn:00007D03 ?max_size@?$allocator@_W@std@@QBEIXZ endp
.text$mn:00007D03
.text$mn:00007D03 _text$mn        ends
.text$mn:00007D03
.text$mn:00007D04 ; ===========================================================================
.text$mn:00007D04
.text$mn:00007D04 ; Segment type: Pure code
.text$mn:00007D04 ; Segment permissions: Read/Execute
.text$mn:00007D04 _text$mn        segment para public 'CODE' use32
.text$mn:00007D04                 assume cs:_text$mn
.text$mn:00007D04                 ;org 7D04h
.text$mn:00007D04 ; COMDAT (pick any)
.text$mn:00007D04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007D04
.text$mn:00007D04 ; =============== S U B R O U T I N E =======================================
.text$mn:00007D04
.text$mn:00007D04 ; Attributes: bp-based frame
.text$mn:00007D04
.text$mn:00007D04 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<char>>::max_size(class std::allocator<char> const &)
.text$mn:00007D04                 public ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
.text$mn:00007D04 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z proc near
.text$mn:00007D04                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::max_size(void)+Bp
.text$mn:00007D04
.text$mn:00007D04 arg_0           = dword ptr  8
.text$mn:00007D04
.text$mn:00007D04                 push    ebp
.text$mn:00007D05                 mov     ebp, esp
.text$mn:00007D07                 mov     ecx, [ebp+arg_0]
.text$mn:00007D0A                 call    ?max_size@?$allocator@D@std@@QBEIXZ ; std::allocator<char>::max_size(void)
.text$mn:00007D0F                 pop     ebp
.text$mn:00007D10                 retn
.text$mn:00007D10 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z endp
.text$mn:00007D10
.text$mn:00007D10 ; ---------------------------------------------------------------------------
.text$mn:00007D11                 align 4
.text$mn:00007D11 _text$mn        ends
.text$mn:00007D11
.text$mn:00007D14 ; ===========================================================================
.text$mn:00007D14
.text$mn:00007D14 ; Segment type: Pure code
.text$mn:00007D14 ; Segment permissions: Read/Execute
.text$mn:00007D14 _text$mn        segment para public 'CODE' use32
.text$mn:00007D14                 assume cs:_text$mn
.text$mn:00007D14                 ;org 7D14h
.text$mn:00007D14 ; COMDAT (pick any)
.text$mn:00007D14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007D14
.text$mn:00007D14 ; =============== S U B R O U T I N E =======================================
.text$mn:00007D14
.text$mn:00007D14 ; Attributes: bp-based frame
.text$mn:00007D14
.text$mn:00007D14 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<struct tTbData *>>::max_size(class std::allocator<struct tTbData *> const &)
.text$mn:00007D14                 public ?max_size@?$allocator_traits@V?$allocator@PAUtTbData@@@std@@@std@@SAIABV?$allocator@PAUtTbData@@@2@@Z
.text$mn:00007D14 ?max_size@?$allocator_traits@V?$allocator@PAUtTbData@@@std@@@std@@SAIABV?$allocator@PAUtTbData@@@2@@Z proc near
.text$mn:00007D14                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<tTbData *>>::max_size(void)+Bp
.text$mn:00007D14
.text$mn:00007D14 arg_0           = dword ptr  8
.text$mn:00007D14
.text$mn:00007D14                 push    ebp
.text$mn:00007D15                 mov     ebp, esp
.text$mn:00007D17                 mov     ecx, [ebp+arg_0]
.text$mn:00007D1A                 call    ?max_size@?$allocator@PAUtTbData@@@std@@QBEIXZ ; std::allocator<tTbData *>::max_size(void)
.text$mn:00007D1F                 pop     ebp
.text$mn:00007D20                 retn
.text$mn:00007D20 ?max_size@?$allocator_traits@V?$allocator@PAUtTbData@@@std@@@std@@SAIABV?$allocator@PAUtTbData@@@2@@Z endp
.text$mn:00007D20
.text$mn:00007D20 ; ---------------------------------------------------------------------------
.text$mn:00007D21                 align 4
.text$mn:00007D21 _text$mn        ends
.text$mn:00007D21
.text$mn:00007D24 ; ===========================================================================
.text$mn:00007D24
.text$mn:00007D24 ; Segment type: Pure code
.text$mn:00007D24 ; Segment permissions: Read/Execute
.text$mn:00007D24 _text$mn        segment para public 'CODE' use32
.text$mn:00007D24                 assume cs:_text$mn
.text$mn:00007D24                 ;org 7D24h
.text$mn:00007D24 ; COMDAT (pick any)
.text$mn:00007D24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007D24
.text$mn:00007D24 ; =============== S U B R O U T I N E =======================================
.text$mn:00007D24
.text$mn:00007D24 ; Attributes: bp-based frame
.text$mn:00007D24
.text$mn:00007D24 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<wchar_t>>::max_size(class std::allocator<wchar_t> const &)
.text$mn:00007D24                 public ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
.text$mn:00007D24 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z proc near
.text$mn:00007D24                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)+Bp
.text$mn:00007D24
.text$mn:00007D24 arg_0           = dword ptr  8
.text$mn:00007D24
.text$mn:00007D24                 push    ebp
.text$mn:00007D25                 mov     ebp, esp
.text$mn:00007D27                 mov     ecx, [ebp+arg_0]
.text$mn:00007D2A                 call    ?max_size@?$allocator@_W@std@@QBEIXZ ; std::allocator<wchar_t>::max_size(void)
.text$mn:00007D2F                 pop     ebp
.text$mn:00007D30                 retn
.text$mn:00007D30 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z endp
.text$mn:00007D30
.text$mn:00007D30 ; ---------------------------------------------------------------------------
.text$mn:00007D31                 align 4
.text$mn:00007D31 _text$mn        ends
.text$mn:00007D31
.text$mn:00007D34 ; ===========================================================================
.text$mn:00007D34
.text$mn:00007D34 ; Segment type: Pure code
.text$mn:00007D34 ; Segment permissions: Read/Execute
.text$mn:00007D34 _text$mn        segment para public 'CODE' use32
.text$mn:00007D34                 assume cs:_text$mn
.text$mn:00007D34                 ;org 7D34h
.text$mn:00007D34 ; COMDAT (pick any)
.text$mn:00007D34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007D34
.text$mn:00007D34 ; =============== S U B R O U T I N E =======================================
.text$mn:00007D34
.text$mn:00007D34 ; Attributes: bp-based frame
.text$mn:00007D34
.text$mn:00007D34 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::max_size(void)const
.text$mn:00007D34                 public ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:00007D34 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:00007D34                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+3Bp
.text$mn:00007D34                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+6Ap ...
.text$mn:00007D34
.text$mn:00007D34 var_10          = dword ptr -10h
.text$mn:00007D34 var_C           = dword ptr -0Ch
.text$mn:00007D34 var_8           = dword ptr -8
.text$mn:00007D34 var_1           = byte ptr -1
.text$mn:00007D34
.text$mn:00007D34                 push    ebp
.text$mn:00007D35                 mov     ebp, esp
.text$mn:00007D37                 sub     esp, 10h
.text$mn:00007D3A                 mov     [ebp+var_10], ecx
.text$mn:00007D3D                 lea     eax, [ebp+var_1]
.text$mn:00007D40                 push    eax
.text$mn:00007D41                 mov     ecx, [ebp+var_10]
.text$mn:00007D44                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00007D49                 mov     ecx, eax
.text$mn:00007D4B                 call    ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char>>::max_size(void)
.text$mn:00007D50                 mov     [ebp+var_8], eax
.text$mn:00007D53                 cmp     [ebp+var_8], 1
.text$mn:00007D57                 ja      short loc_7D62
.text$mn:00007D59                 mov     [ebp+var_C], 1
.text$mn:00007D60                 jmp     short loc_7D6B
.text$mn:00007D62 ; ---------------------------------------------------------------------------
.text$mn:00007D62
.text$mn:00007D62 loc_7D62:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+23j
.text$mn:00007D62                 mov     ecx, [ebp+var_8]
.text$mn:00007D65                 sub     ecx, 1
.text$mn:00007D68                 mov     [ebp+var_C], ecx
.text$mn:00007D6B
.text$mn:00007D6B loc_7D6B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+2Cj
.text$mn:00007D6B                 mov     eax, [ebp+var_C]
.text$mn:00007D6E                 mov     esp, ebp
.text$mn:00007D70                 pop     ebp
.text$mn:00007D71                 retn
.text$mn:00007D71 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:00007D71
.text$mn:00007D71 ; ---------------------------------------------------------------------------
.text$mn:00007D72                 align 4
.text$mn:00007D72 _text$mn        ends
.text$mn:00007D72
.text$mn:00007D74 ; ===========================================================================
.text$mn:00007D74
.text$mn:00007D74 ; Segment type: Pure code
.text$mn:00007D74 ; Segment permissions: Read/Execute
.text$mn:00007D74 _text$mn        segment para public 'CODE' use32
.text$mn:00007D74                 assume cs:_text$mn
.text$mn:00007D74                 ;org 7D74h
.text$mn:00007D74 ; COMDAT (pick any)
.text$mn:00007D74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007D74
.text$mn:00007D74 ; =============== S U B R O U T I N E =======================================
.text$mn:00007D74
.text$mn:00007D74 ; Attributes: bp-based frame
.text$mn:00007D74
.text$mn:00007D74 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::max_size(void)const
.text$mn:00007D74                 public ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:00007D74 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:00007D74                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+3Bp
.text$mn:00007D74                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+6Ap ...
.text$mn:00007D74
.text$mn:00007D74 var_10          = dword ptr -10h
.text$mn:00007D74 var_C           = dword ptr -0Ch
.text$mn:00007D74 var_8           = dword ptr -8
.text$mn:00007D74 var_1           = byte ptr -1
.text$mn:00007D74
.text$mn:00007D74                 push    ebp
.text$mn:00007D75                 mov     ebp, esp
.text$mn:00007D77                 sub     esp, 10h
.text$mn:00007D7A                 mov     [ebp+var_10], ecx
.text$mn:00007D7D                 lea     eax, [ebp+var_1]
.text$mn:00007D80                 push    eax
.text$mn:00007D81                 mov     ecx, [ebp+var_10]
.text$mn:00007D84                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00007D89                 mov     ecx, eax
.text$mn:00007D8B                 call    ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)
.text$mn:00007D90                 mov     [ebp+var_8], eax
.text$mn:00007D93                 cmp     [ebp+var_8], 1
.text$mn:00007D97                 ja      short loc_7DA2
.text$mn:00007D99                 mov     [ebp+var_C], 1
.text$mn:00007DA0                 jmp     short loc_7DAB
.text$mn:00007DA2 ; ---------------------------------------------------------------------------
.text$mn:00007DA2
.text$mn:00007DA2 loc_7DA2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+23j
.text$mn:00007DA2                 mov     ecx, [ebp+var_8]
.text$mn:00007DA5                 sub     ecx, 1
.text$mn:00007DA8                 mov     [ebp+var_C], ecx
.text$mn:00007DAB
.text$mn:00007DAB loc_7DAB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+2Cj
.text$mn:00007DAB                 mov     eax, [ebp+var_C]
.text$mn:00007DAE                 mov     esp, ebp
.text$mn:00007DB0                 pop     ebp
.text$mn:00007DB1                 retn
.text$mn:00007DB1 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:00007DB1
.text$mn:00007DB1 ; ---------------------------------------------------------------------------
.text$mn:00007DB2                 align 4
.text$mn:00007DB2 _text$mn        ends
.text$mn:00007DB2
.text$mn:00007DB4 ; ===========================================================================
.text$mn:00007DB4
.text$mn:00007DB4 ; Segment type: Pure code
.text$mn:00007DB4 ; Segment permissions: Read/Execute
.text$mn:00007DB4 _text$mn        segment para public 'CODE' use32
.text$mn:00007DB4                 assume cs:_text$mn
.text$mn:00007DB4                 ;org 7DB4h
.text$mn:00007DB4 ; COMDAT (pick any)
.text$mn:00007DB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007DB4
.text$mn:00007DB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007DB4
.text$mn:00007DB4 ; Attributes: bp-based frame
.text$mn:00007DB4
.text$mn:00007DB4 ; public: unsigned int __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::max_size(void)const
.text$mn:00007DB4                 public ?max_size@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ
.text$mn:00007DB4 ?max_size@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ proc near
.text$mn:00007DB4                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Grow_to(uint)+17p
.text$mn:00007DB4                                         ; std::vector<tTbData *,std::allocator<tTbData *>>::_Reserve(uint)+18p
.text$mn:00007DB4
.text$mn:00007DB4 var_8           = dword ptr -8
.text$mn:00007DB4 var_1           = byte ptr -1
.text$mn:00007DB4
.text$mn:00007DB4                 push    ebp
.text$mn:00007DB5                 mov     ebp, esp
.text$mn:00007DB7                 sub     esp, 8
.text$mn:00007DBA                 mov     [ebp+var_8], ecx
.text$mn:00007DBD                 lea     eax, [ebp+var_1]
.text$mn:00007DC0                 push    eax
.text$mn:00007DC1                 mov     ecx, [ebp+var_8]
.text$mn:00007DC4                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Getal(void)
.text$mn:00007DC9                 mov     ecx, eax
.text$mn:00007DCB                 call    ?max_size@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<tTbData *>>::max_size(void)
.text$mn:00007DD0                 mov     esp, ebp
.text$mn:00007DD2                 pop     ebp
.text$mn:00007DD3                 retn
.text$mn:00007DD3 ?max_size@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ endp
.text$mn:00007DD3
.text$mn:00007DD3 _text$mn        ends
.text$mn:00007DD3
.text$mn:00007DD4 ; ===========================================================================
.text$mn:00007DD4
.text$mn:00007DD4 ; Segment type: Pure code
.text$mn:00007DD4 ; Segment permissions: Read/Execute
.text$mn:00007DD4 _text$mn        segment para public 'CODE' use32
.text$mn:00007DD4                 assume cs:_text$mn
.text$mn:00007DD4                 ;org 7DD4h
.text$mn:00007DD4 ; COMDAT (pick any)
.text$mn:00007DD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007DD4
.text$mn:00007DD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007DD4
.text$mn:00007DD4 ; Attributes: bp-based frame
.text$mn:00007DD4
.text$mn:00007DD4 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Generic_error_category::message(int)const
.text$mn:00007DD4                 public ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00007DD4 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00007DD4                                         ; CODE XREF: std::_Iostream_error_category::message(int)+64p
.text$mn:00007DD4                                         ; DATA XREF: .rdata:00009324o
.text$mn:00007DD4
.text$mn:00007DD4 var_1C          = dword ptr -1Ch
.text$mn:00007DD4 var_18          = dword ptr -18h
.text$mn:00007DD4 Str             = dword ptr -14h
.text$mn:00007DD4 var_10          = dword ptr -10h
.text$mn:00007DD4 var_C           = dword ptr -0Ch
.text$mn:00007DD4 var_4           = dword ptr -4
.text$mn:00007DD4 arg_0           = dword ptr  8
.text$mn:00007DD4 arg_4           = dword ptr  0Ch
.text$mn:00007DD4
.text$mn:00007DD4                 push    ebp
.text$mn:00007DD5                 mov     ebp, esp
.text$mn:00007DD7                 push    0FFFFFFFFh
.text$mn:00007DD9                 push    offset __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00007DDE                 mov     eax, large fs:0
.text$mn:00007DE4                 push    eax
.text$mn:00007DE5                 sub     esp, 10h
.text$mn:00007DE8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007DED                 xor     eax, ebp
.text$mn:00007DEF                 push    eax
.text$mn:00007DF0                 lea     eax, [ebp+var_C]
.text$mn:00007DF3                 mov     large fs:0, eax
.text$mn:00007DF9                 mov     [ebp+var_1C], ecx
.text$mn:00007DFC                 mov     [ebp+var_18], 0
.text$mn:00007E03                 mov     eax, [ebp+arg_4]
.text$mn:00007E06                 push    eax             ; int
.text$mn:00007E07                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:00007E0C                 add     esp, 4
.text$mn:00007E0F                 mov     [ebp+var_10], eax
.text$mn:00007E12                 cmp     [ebp+var_10], 0
.text$mn:00007E16                 jz      short loc_7E20
.text$mn:00007E18                 mov     ecx, [ebp+var_10]
.text$mn:00007E1B                 mov     [ebp+Str], ecx
.text$mn:00007E1E                 jmp     short loc_7E27
.text$mn:00007E20 ; ---------------------------------------------------------------------------
.text$mn:00007E20
.text$mn:00007E20 loc_7E20:                               ; CODE XREF: std::_Generic_error_category::message(int)+42j
.text$mn:00007E20                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:00007E27
.text$mn:00007E27 loc_7E27:                               ; CODE XREF: std::_Generic_error_category::message(int)+4Aj
.text$mn:00007E27                 mov     edx, [ebp+Str]
.text$mn:00007E2A                 push    edx             ; Str
.text$mn:00007E2B                 mov     ecx, [ebp+arg_0]
.text$mn:00007E2E                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00007E33                 mov     [ebp+var_4], 0
.text$mn:00007E3A                 mov     eax, [ebp+var_18]
.text$mn:00007E3D                 or      eax, 1
.text$mn:00007E40                 mov     [ebp+var_18], eax
.text$mn:00007E43                 mov     eax, [ebp+arg_0]
.text$mn:00007E46                 mov     ecx, [ebp+var_C]
.text$mn:00007E49                 mov     large fs:0, ecx
.text$mn:00007E50                 pop     ecx
.text$mn:00007E51                 mov     esp, ebp
.text$mn:00007E53                 pop     ebp
.text$mn:00007E54                 retn    8
.text$mn:00007E54 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00007E54
.text$mn:00007E54 ; ---------------------------------------------------------------------------
.text$mn:00007E57                 align 4
.text$mn:00007E57 _text$mn        ends
.text$mn:00007E57
.text$x:00007E58 ; ===========================================================================
.text$x:00007E58
.text$x:00007E58 ; Segment type: Pure code
.text$x:00007E58 ; Segment permissions: Read/Execute
.text$x:00007E58 _text$x         segment para public 'CODE' use32
.text$x:00007E58                 assume cs:_text$x
.text$x:00007E58                 ;org 7E58h
.text$x:00007E58 ; COMDAT (pick associative to section at 7DD4)
.text$x:00007E58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007E58
.text$x:00007E58 ; =============== S U B R O U T I N E =======================================
.text$x:00007E58
.text$x:00007E58
.text$x:00007E58 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00007E58                                         ; DATA XREF: .xdata$x:000087ECo
.text$x:00007E58                 mov     eax, [ebp-18h]
.text$x:00007E5B                 and     eax, 1
.text$x:00007E5E                 jz      $LN6
.text$x:00007E64                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:00007E68                 mov     ecx, [ebp+8]
.text$x:00007E6B                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00007E70 ; ---------------------------------------------------------------------------
.text$x:00007E70
.text$x:00007E70 $LN6:                                   ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00007E70                 retn
.text$x:00007E70 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00007E70
.text$x:00007E71
.text$x:00007E71 ; =============== S U B R O U T I N E =======================================
.text$x:00007E71
.text$x:00007E71
.text$x:00007E71 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00007E71                                         ; DATA XREF: std::_Generic_error_category::message(int)+5o
.text$x:00007E71
.text$x:00007E71 arg_4           = dword ptr  8
.text$x:00007E71
.text$x:00007E71                 mov     edx, [esp+arg_4]
.text$x:00007E75                 lea     eax, [edx+0Ch]
.text$x:00007E78                 mov     ecx, [edx-14h]
.text$x:00007E7B                 xor     ecx, eax
.text$x:00007E7D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007E82                 mov     eax, offset __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:00007E87                 jmp     ___CxxFrameHandler3
.text$x:00007E87 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:00007E87
.text$x:00007E87 _text$x         ends
.text$x:00007E87
.text$mn:00007E8C ; ===========================================================================
.text$mn:00007E8C
.text$mn:00007E8C ; Segment type: Pure code
.text$mn:00007E8C ; Segment permissions: Read/Execute
.text$mn:00007E8C _text$mn        segment para public 'CODE' use32
.text$mn:00007E8C                 assume cs:_text$mn
.text$mn:00007E8C                 ;org 7E8Ch
.text$mn:00007E8C ; COMDAT (pick any)
.text$mn:00007E8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007E8C
.text$mn:00007E8C ; =============== S U B R O U T I N E =======================================
.text$mn:00007E8C
.text$mn:00007E8C ; Attributes: bp-based frame
.text$mn:00007E8C
.text$mn:00007E8C ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Iostream_error_category::message(int)const
.text$mn:00007E8C                 public ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00007E8C ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00007E8C                                         ; DATA XREF: .rdata:00009358o
.text$mn:00007E8C
.text$mn:00007E8C var_14          = dword ptr -14h
.text$mn:00007E8C var_10          = dword ptr -10h
.text$mn:00007E8C var_C           = dword ptr -0Ch
.text$mn:00007E8C var_4           = dword ptr -4
.text$mn:00007E8C arg_0           = dword ptr  8
.text$mn:00007E8C arg_4           = dword ptr  0Ch
.text$mn:00007E8C
.text$mn:00007E8C                 push    ebp
.text$mn:00007E8D                 mov     ebp, esp
.text$mn:00007E8F                 push    0FFFFFFFFh
.text$mn:00007E91                 push    offset __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00007E96                 mov     eax, large fs:0
.text$mn:00007E9C                 push    eax
.text$mn:00007E9D                 sub     esp, 8
.text$mn:00007EA0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007EA5                 xor     eax, ebp
.text$mn:00007EA7                 push    eax
.text$mn:00007EA8                 lea     eax, [ebp+var_C]
.text$mn:00007EAB                 mov     large fs:0, eax
.text$mn:00007EB1                 mov     [ebp+var_14], ecx
.text$mn:00007EB4                 mov     [ebp+var_10], 0
.text$mn:00007EBB                 cmp     [ebp+arg_4], 1
.text$mn:00007EBF                 jnz     short loc_7EE5
.text$mn:00007EC1                 push    offset ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ ; "iostream stream error"
.text$mn:00007EC6                 mov     ecx, [ebp+arg_0]
.text$mn:00007EC9                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00007ECE                 mov     [ebp+var_4], 0
.text$mn:00007ED5                 mov     eax, [ebp+var_10]
.text$mn:00007ED8                 or      eax, 1
.text$mn:00007EDB                 mov     [ebp+var_10], eax
.text$mn:00007EDE                 mov     eax, [ebp+arg_0]
.text$mn:00007EE1                 jmp     short loc_7F08
.text$mn:00007EE3 ; ---------------------------------------------------------------------------
.text$mn:00007EE3                 jmp     short loc_7F08
.text$mn:00007EE5 ; ---------------------------------------------------------------------------
.text$mn:00007EE5
.text$mn:00007EE5 loc_7EE5:                               ; CODE XREF: std::_Iostream_error_category::message(int)+33j
.text$mn:00007EE5                 mov     ecx, [ebp+arg_4]
.text$mn:00007EE8                 push    ecx
.text$mn:00007EE9                 mov     edx, [ebp+arg_0]
.text$mn:00007EEC                 push    edx
.text$mn:00007EED                 mov     ecx, [ebp+var_14]
.text$mn:00007EF0                 call    ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.text$mn:00007EF5                 mov     [ebp+var_4], 0
.text$mn:00007EFC                 mov     eax, [ebp+var_10]
.text$mn:00007EFF                 or      eax, 1
.text$mn:00007F02                 mov     [ebp+var_10], eax
.text$mn:00007F05                 mov     eax, [ebp+arg_0]
.text$mn:00007F08
.text$mn:00007F08 loc_7F08:                               ; CODE XREF: std::_Iostream_error_category::message(int)+55j
.text$mn:00007F08                                         ; std::_Iostream_error_category::message(int)+57j
.text$mn:00007F08                 mov     ecx, [ebp+var_C]
.text$mn:00007F0B                 mov     large fs:0, ecx
.text$mn:00007F12                 pop     ecx
.text$mn:00007F13                 mov     esp, ebp
.text$mn:00007F15                 pop     ebp
.text$mn:00007F16                 retn    8
.text$mn:00007F16 ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00007F16
.text$mn:00007F16 ; ---------------------------------------------------------------------------
.text$mn:00007F19                 align 4
.text$mn:00007F19 _text$mn        ends
.text$mn:00007F19
.text$x:00007F1C ; ===========================================================================
.text$x:00007F1C
.text$x:00007F1C ; Segment type: Pure code
.text$x:00007F1C ; Segment permissions: Read/Execute
.text$x:00007F1C _text$x         segment para public 'CODE' use32
.text$x:00007F1C                 assume cs:_text$x
.text$x:00007F1C                 ;org 7F1Ch
.text$x:00007F1C ; COMDAT (pick associative to section at 7E8C)
.text$x:00007F1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007F1C
.text$x:00007F1C ; =============== S U B R O U T I N E =======================================
.text$x:00007F1C
.text$x:00007F1C
.text$x:00007F1C __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00007F1C                                         ; DATA XREF: .xdata$x:00008870o
.text$x:00007F1C                 mov     eax, [ebp-10h]
.text$x:00007F1F                 and     eax, 1
.text$x:00007F22                 jz      $LN6_0
.text$x:00007F28                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00007F2C                 mov     ecx, [ebp+8]
.text$x:00007F2F                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00007F34 ; ---------------------------------------------------------------------------
.text$x:00007F34
.text$x:00007F34 $LN6_0:                                 ; CODE XREF: __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00007F34                 retn
.text$x:00007F34 __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00007F34
.text$x:00007F35
.text$x:00007F35 ; =============== S U B R O U T I N E =======================================
.text$x:00007F35
.text$x:00007F35
.text$x:00007F35 __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00007F35                                         ; DATA XREF: std::_Iostream_error_category::message(int)+5o
.text$x:00007F35
.text$x:00007F35 arg_4           = dword ptr  8
.text$x:00007F35
.text$x:00007F35                 mov     edx, [esp+arg_4]
.text$x:00007F39                 lea     eax, [edx+0Ch]
.text$x:00007F3C                 mov     ecx, [edx-0Ch]
.text$x:00007F3F                 xor     ecx, eax
.text$x:00007F41                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007F46                 mov     eax, offset __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:00007F4B                 jmp     ___CxxFrameHandler3
.text$x:00007F4B __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:00007F4B
.text$x:00007F4B _text$x         ends
.text$x:00007F4B
.text$mn:00007F50 ; ===========================================================================
.text$mn:00007F50
.text$mn:00007F50 ; Segment type: Pure code
.text$mn:00007F50 ; Segment permissions: Read/Execute
.text$mn:00007F50 _text$mn        segment para public 'CODE' use32
.text$mn:00007F50                 assume cs:_text$mn
.text$mn:00007F50                 ;org 7F50h
.text$mn:00007F50 ; COMDAT (pick any)
.text$mn:00007F50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F50
.text$mn:00007F50 ; =============== S U B R O U T I N E =======================================
.text$mn:00007F50
.text$mn:00007F50 ; Attributes: bp-based frame
.text$mn:00007F50
.text$mn:00007F50 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_System_error_category::message(int)const
.text$mn:00007F50                 public ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00007F50 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00007F50                                         ; DATA XREF: .rdata:00009398o
.text$mn:00007F50
.text$mn:00007F50 var_1C          = dword ptr -1Ch
.text$mn:00007F50 var_18          = dword ptr -18h
.text$mn:00007F50 Str             = dword ptr -14h
.text$mn:00007F50 var_10          = dword ptr -10h
.text$mn:00007F50 var_C           = dword ptr -0Ch
.text$mn:00007F50 var_4           = dword ptr -4
.text$mn:00007F50 arg_0           = dword ptr  8
.text$mn:00007F50 arg_4           = dword ptr  0Ch
.text$mn:00007F50
.text$mn:00007F50                 push    ebp
.text$mn:00007F51                 mov     ebp, esp
.text$mn:00007F53                 push    0FFFFFFFFh
.text$mn:00007F55                 push    offset __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00007F5A                 mov     eax, large fs:0
.text$mn:00007F60                 push    eax
.text$mn:00007F61                 sub     esp, 10h
.text$mn:00007F64                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007F69                 xor     eax, ebp
.text$mn:00007F6B                 push    eax
.text$mn:00007F6C                 lea     eax, [ebp+var_C]
.text$mn:00007F6F                 mov     large fs:0, eax
.text$mn:00007F75                 mov     [ebp+var_1C], ecx
.text$mn:00007F78                 mov     [ebp+var_18], 0
.text$mn:00007F7F                 mov     eax, [ebp+arg_4]
.text$mn:00007F82                 push    eax             ; int
.text$mn:00007F83                 call    ?_Winerror_map@std@@YAPBDH@Z ; std::_Winerror_map(int)
.text$mn:00007F88                 add     esp, 4
.text$mn:00007F8B                 mov     [ebp+var_10], eax
.text$mn:00007F8E                 cmp     [ebp+var_10], 0
.text$mn:00007F92                 jz      short loc_7F9C
.text$mn:00007F94                 mov     ecx, [ebp+var_10]
.text$mn:00007F97                 mov     [ebp+Str], ecx
.text$mn:00007F9A                 jmp     short loc_7FA3
.text$mn:00007F9C ; ---------------------------------------------------------------------------
.text$mn:00007F9C
.text$mn:00007F9C loc_7F9C:                               ; CODE XREF: std::_System_error_category::message(int)+42j
.text$mn:00007F9C                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:00007FA3
.text$mn:00007FA3 loc_7FA3:                               ; CODE XREF: std::_System_error_category::message(int)+4Aj
.text$mn:00007FA3                 mov     edx, [ebp+Str]
.text$mn:00007FA6                 push    edx             ; Str
.text$mn:00007FA7                 mov     ecx, [ebp+arg_0]
.text$mn:00007FAA                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00007FAF                 mov     [ebp+var_4], 0
.text$mn:00007FB6                 mov     eax, [ebp+var_18]
.text$mn:00007FB9                 or      eax, 1
.text$mn:00007FBC                 mov     [ebp+var_18], eax
.text$mn:00007FBF                 mov     eax, [ebp+arg_0]
.text$mn:00007FC2                 mov     ecx, [ebp+var_C]
.text$mn:00007FC5                 mov     large fs:0, ecx
.text$mn:00007FCC                 pop     ecx
.text$mn:00007FCD                 mov     esp, ebp
.text$mn:00007FCF                 pop     ebp
.text$mn:00007FD0                 retn    8
.text$mn:00007FD0 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00007FD0
.text$mn:00007FD0 ; ---------------------------------------------------------------------------
.text$mn:00007FD3                 align 4
.text$mn:00007FD3 _text$mn        ends
.text$mn:00007FD3
.text$x:00007FD4 ; ===========================================================================
.text$x:00007FD4
.text$x:00007FD4 ; Segment type: Pure code
.text$x:00007FD4 ; Segment permissions: Read/Execute
.text$x:00007FD4 _text$x         segment para public 'CODE' use32
.text$x:00007FD4                 assume cs:_text$x
.text$x:00007FD4                 ;org 7FD4h
.text$x:00007FD4 ; COMDAT (pick associative to section at 7F50)
.text$x:00007FD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007FD4
.text$x:00007FD4 ; =============== S U B R O U T I N E =======================================
.text$x:00007FD4
.text$x:00007FD4
.text$x:00007FD4 __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00007FD4                                         ; DATA XREF: .xdata$x:000088F4o
.text$x:00007FD4                 mov     eax, [ebp-18h]
.text$x:00007FD7                 and     eax, 1
.text$x:00007FDA                 jz      $LN6_1
.text$x:00007FE0                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:00007FE4                 mov     ecx, [ebp+8]
.text$x:00007FE7                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00007FEC ; ---------------------------------------------------------------------------
.text$x:00007FEC
.text$x:00007FEC $LN6_1:                                 ; CODE XREF: __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00007FEC                 retn
.text$x:00007FEC __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00007FEC
.text$x:00007FED
.text$x:00007FED ; =============== S U B R O U T I N E =======================================
.text$x:00007FED
.text$x:00007FED
.text$x:00007FED __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00007FED                                         ; DATA XREF: std::_System_error_category::message(int)+5o
.text$x:00007FED
.text$x:00007FED arg_4           = dword ptr  8
.text$x:00007FED
.text$x:00007FED                 mov     edx, [esp+arg_4]
.text$x:00007FF1                 lea     eax, [edx+0Ch]
.text$x:00007FF4                 mov     ecx, [edx-14h]
.text$x:00007FF7                 xor     ecx, eax
.text$x:00007FF9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007FFE                 mov     eax, offset __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:00008003                 jmp     ___CxxFrameHandler3
.text$x:00008003 __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:00008003
.text$x:00008003 _text$x         ends
.text$x:00008003
.text$mn:00008008 ; ===========================================================================
.text$mn:00008008
.text$mn:00008008 ; Segment type: Pure code
.text$mn:00008008 ; Segment permissions: Read/Execute
.text$mn:00008008 _text$mn        segment para public 'CODE' use32
.text$mn:00008008                 assume cs:_text$mn
.text$mn:00008008                 ;org 8008h
.text$mn:00008008 ; COMDAT (pick any)
.text$mn:00008008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008008
.text$mn:00008008 ; =============== S U B R O U T I N E =======================================
.text$mn:00008008
.text$mn:00008008 ; Attributes: bp-based frame
.text$mn:00008008
.text$mn:00008008 ; int __cdecl std::char_traits<char>::move(void *Dst, void *Src, size_t Size)
.text$mn:00008008                 public ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:00008008 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
.text$mn:00008008                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+6Ap
.text$mn:00008008
.text$mn:00008008 var_4           = dword ptr -4
.text$mn:00008008 Dst             = dword ptr  8
.text$mn:00008008 Src             = dword ptr  0Ch
.text$mn:00008008 Size            = dword ptr  10h
.text$mn:00008008
.text$mn:00008008                 push    ebp
.text$mn:00008009                 mov     ebp, esp
.text$mn:0000800B                 push    ecx
.text$mn:0000800C                 cmp     [ebp+Size], 0
.text$mn:00008010                 jnz     short loc_801A
.text$mn:00008012                 mov     eax, [ebp+Dst]
.text$mn:00008015                 mov     [ebp+var_4], eax
.text$mn:00008018                 jmp     short loc_8031
.text$mn:0000801A ; ---------------------------------------------------------------------------
.text$mn:0000801A
.text$mn:0000801A loc_801A:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+8j
.text$mn:0000801A                 mov     ecx, [ebp+Size]
.text$mn:0000801D                 push    ecx             ; Size
.text$mn:0000801E                 mov     edx, [ebp+Src]
.text$mn:00008021                 push    edx             ; Src
.text$mn:00008022                 mov     eax, [ebp+Dst]
.text$mn:00008025                 push    eax             ; Dst
.text$mn:00008026                 call    _memmove
.text$mn:0000802B                 add     esp, 0Ch
.text$mn:0000802E                 mov     [ebp+var_4], eax
.text$mn:00008031
.text$mn:00008031 loc_8031:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+10j
.text$mn:00008031                 mov     eax, [ebp+var_4]
.text$mn:00008034                 mov     esp, ebp
.text$mn:00008036                 pop     ebp
.text$mn:00008037                 retn
.text$mn:00008037 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:00008037
.text$mn:00008037 _text$mn        ends
.text$mn:00008037
.text$mn:00008038 ; ===========================================================================
.text$mn:00008038
.text$mn:00008038 ; Segment type: Pure code
.text$mn:00008038 ; Segment permissions: Read/Execute
.text$mn:00008038 _text$mn        segment para public 'CODE' use32
.text$mn:00008038                 assume cs:_text$mn
.text$mn:00008038                 ;org 8038h
.text$mn:00008038 ; COMDAT (pick any)
.text$mn:00008038                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008038
.text$mn:00008038 ; =============== S U B R O U T I N E =======================================
.text$mn:00008038
.text$mn:00008038 ; Attributes: bp-based frame
.text$mn:00008038
.text$mn:00008038 ; int __cdecl std::char_traits<wchar_t>::move(void *Dst, void *Src, int)
.text$mn:00008038                 public ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:00008038 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:00008038                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+70p
.text$mn:00008038
.text$mn:00008038 var_4           = dword ptr -4
.text$mn:00008038 Dst             = dword ptr  8
.text$mn:00008038 Src             = dword ptr  0Ch
.text$mn:00008038 arg_8           = dword ptr  10h
.text$mn:00008038
.text$mn:00008038                 push    ebp
.text$mn:00008039                 mov     ebp, esp
.text$mn:0000803B                 push    ecx
.text$mn:0000803C                 cmp     [ebp+arg_8], 0
.text$mn:00008040                 jnz     short loc_804A
.text$mn:00008042                 mov     eax, [ebp+Dst]
.text$mn:00008045                 mov     [ebp+var_4], eax
.text$mn:00008048                 jmp     short loc_8061
.text$mn:0000804A ; ---------------------------------------------------------------------------
.text$mn:0000804A
.text$mn:0000804A loc_804A:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+8j
.text$mn:0000804A                 mov     ecx, [ebp+arg_8]
.text$mn:0000804D                 push    ecx             ; int
.text$mn:0000804E                 mov     edx, [ebp+Src]
.text$mn:00008051                 push    edx             ; Src
.text$mn:00008052                 mov     eax, [ebp+Dst]
.text$mn:00008055                 push    eax             ; Dst
.text$mn:00008056                 call    _wmemmove
.text$mn:0000805B                 add     esp, 0Ch
.text$mn:0000805E                 mov     [ebp+var_4], eax
.text$mn:00008061
.text$mn:00008061 loc_8061:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+10j
.text$mn:00008061                 mov     eax, [ebp+var_4]
.text$mn:00008064                 mov     esp, ebp
.text$mn:00008066                 pop     ebp
.text$mn:00008067                 retn
.text$mn:00008067 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:00008067
.text$mn:00008067 _text$mn        ends
.text$mn:00008067
.text$mn:00008068 ; ===========================================================================
.text$mn:00008068
.text$mn:00008068 ; Segment type: Pure code
.text$mn:00008068 ; Segment permissions: Read/Execute
.text$mn:00008068 _text$mn        segment para public 'CODE' use32
.text$mn:00008068                 assume cs:_text$mn
.text$mn:00008068                 ;org 8068h
.text$mn:00008068 ; COMDAT (pick any)
.text$mn:00008068                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008068
.text$mn:00008068 ; =============== S U B R O U T I N E =======================================
.text$mn:00008068
.text$mn:00008068 ; Attributes: bp-based frame
.text$mn:00008068
.text$mn:00008068 ; const char *__thiscall std::_Generic_error_category::name(std::_Generic_error_category *__hidden this)
.text$mn:00008068                 public ?name@_Generic_error_category@std@@UBEPBDXZ
.text$mn:00008068 ?name@_Generic_error_category@std@@UBEPBDXZ proc near
.text$mn:00008068                                         ; DATA XREF: .rdata:00009320o
.text$mn:00008068
.text$mn:00008068 var_4           = dword ptr -4
.text$mn:00008068
.text$mn:00008068                 push    ebp
.text$mn:00008069                 mov     ebp, esp
.text$mn:0000806B                 push    ecx
.text$mn:0000806C                 mov     [ebp+var_4], ecx
.text$mn:0000806F                 mov     eax, offset ??_C@_07DCLBNMLN@generic?$AA@ ; "generic"
.text$mn:00008074                 mov     esp, ebp
.text$mn:00008076                 pop     ebp
.text$mn:00008077                 retn
.text$mn:00008077 ?name@_Generic_error_category@std@@UBEPBDXZ endp
.text$mn:00008077
.text$mn:00008077 _text$mn        ends
.text$mn:00008077
.text$mn:00008078 ; ===========================================================================
.text$mn:00008078
.text$mn:00008078 ; Segment type: Pure code
.text$mn:00008078 ; Segment permissions: Read/Execute
.text$mn:00008078 _text$mn        segment para public 'CODE' use32
.text$mn:00008078                 assume cs:_text$mn
.text$mn:00008078                 ;org 8078h
.text$mn:00008078 ; COMDAT (pick any)
.text$mn:00008078                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008078
.text$mn:00008078 ; =============== S U B R O U T I N E =======================================
.text$mn:00008078
.text$mn:00008078 ; Attributes: bp-based frame
.text$mn:00008078
.text$mn:00008078 ; const char *__thiscall std::_Iostream_error_category::name(std::_Iostream_error_category *__hidden this)
.text$mn:00008078                 public ?name@_Iostream_error_category@std@@UBEPBDXZ
.text$mn:00008078 ?name@_Iostream_error_category@std@@UBEPBDXZ proc near
.text$mn:00008078                                         ; DATA XREF: .rdata:00009354o
.text$mn:00008078
.text$mn:00008078 var_4           = dword ptr -4
.text$mn:00008078
.text$mn:00008078                 push    ebp
.text$mn:00008079                 mov     ebp, esp
.text$mn:0000807B                 push    ecx
.text$mn:0000807C                 mov     [ebp+var_4], ecx
.text$mn:0000807F                 mov     eax, offset ??_C@_08LLGCOLLL@iostream?$AA@ ; "iostream"
.text$mn:00008084                 mov     esp, ebp
.text$mn:00008086                 pop     ebp
.text$mn:00008087                 retn
.text$mn:00008087 ?name@_Iostream_error_category@std@@UBEPBDXZ endp
.text$mn:00008087
.text$mn:00008087 _text$mn        ends
.text$mn:00008087
.text$mn:00008088 ; ===========================================================================
.text$mn:00008088
.text$mn:00008088 ; Segment type: Pure code
.text$mn:00008088 ; Segment permissions: Read/Execute
.text$mn:00008088 _text$mn        segment para public 'CODE' use32
.text$mn:00008088                 assume cs:_text$mn
.text$mn:00008088                 ;org 8088h
.text$mn:00008088 ; COMDAT (pick any)
.text$mn:00008088                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008088
.text$mn:00008088 ; =============== S U B R O U T I N E =======================================
.text$mn:00008088
.text$mn:00008088 ; Attributes: bp-based frame
.text$mn:00008088
.text$mn:00008088 ; const char *__thiscall std::_System_error_category::name(std::_System_error_category *__hidden this)
.text$mn:00008088                 public ?name@_System_error_category@std@@UBEPBDXZ
.text$mn:00008088 ?name@_System_error_category@std@@UBEPBDXZ proc near
.text$mn:00008088                                         ; DATA XREF: .rdata:00009394o
.text$mn:00008088
.text$mn:00008088 var_4           = dword ptr -4
.text$mn:00008088
.text$mn:00008088                 push    ebp
.text$mn:00008089                 mov     ebp, esp
.text$mn:0000808B                 push    ecx
.text$mn:0000808C                 mov     [ebp+var_4], ecx
.text$mn:0000808F                 mov     eax, offset ??_C@_06FHFOAHML@system?$AA@ ; "system"
.text$mn:00008094                 mov     esp, ebp
.text$mn:00008096                 pop     ebp
.text$mn:00008097                 retn
.text$mn:00008097 ?name@_System_error_category@std@@UBEPBDXZ endp
.text$mn:00008097
.text$mn:00008097 _text$mn        ends
.text$mn:00008097
.text$mn:00008098 ; ===========================================================================
.text$mn:00008098
.text$mn:00008098 ; Segment type: Pure code
.text$mn:00008098 ; Segment permissions: Read/Execute
.text$mn:00008098 _text$mn        segment para public 'CODE' use32
.text$mn:00008098                 assume cs:_text$mn
.text$mn:00008098                 ;org 8098h
.text$mn:00008098 ; COMDAT (pick any)
.text$mn:00008098                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008098
.text$mn:00008098 ; =============== S U B R O U T I N E =======================================
.text$mn:00008098
.text$mn:00008098 ; Attributes: bp-based frame
.text$mn:00008098
.text$mn:00008098 ; public: void __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::push_back(struct tTbData * &&)
.text$mn:00008098                 public ?push_back@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEX$$QAPAUtTbData@@@Z
.text$mn:00008098 ?push_back@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEX$$QAPAUtTbData@@@Z proc near
.text$mn:00008098                                         ; CODE XREF: DockingCont::getDataOfVisTb(void)+BAp
.text$mn:00008098
.text$mn:00008098 var_C           = dword ptr -0Ch
.text$mn:00008098 var_8           = dword ptr -8
.text$mn:00008098 var_2           = byte ptr -2
.text$mn:00008098 var_1           = byte ptr -1
.text$mn:00008098 arg_0           = dword ptr  8
.text$mn:00008098
.text$mn:00008098                 push    ebp
.text$mn:00008099                 mov     ebp, esp
.text$mn:0000809B                 sub     esp, 0Ch
.text$mn:0000809E                 mov     [ebp+var_8], ecx
.text$mn:000080A1                 mov     eax, [ebp+arg_0]
.text$mn:000080A4                 push    eax
.text$mn:000080A5                 call    ??$addressof@PAUtTbData@@@std@@YAPAPAUtTbData@@AAPAU1@@Z ; std::addressof<tTbData *>(tTbData * &)
.text$mn:000080AA                 add     esp, 4
.text$mn:000080AD                 push    eax
.text$mn:000080AE                 mov     ecx, [ebp+var_8]
.text$mn:000080B1                 call    ?_Inside@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBE_NPBQAUtTbData@@@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::_Inside(tTbData * const *)
.text$mn:000080B6                 movzx   ecx, al
.text$mn:000080B9                 test    ecx, ecx
.text$mn:000080BB                 jz      loc_8148
.text$mn:000080C1                 mov     edx, [ebp+arg_0]
.text$mn:000080C4                 push    edx
.text$mn:000080C5                 call    ??$addressof@PAUtTbData@@@std@@YAPAPAUtTbData@@AAPAU1@@Z ; std::addressof<tTbData *>(tTbData * &)
.text$mn:000080CA                 add     esp, 4
.text$mn:000080CD                 mov     ecx, [ebp+var_8]
.text$mn:000080D0                 sub     eax, [ecx+4]
.text$mn:000080D3                 sar     eax, 2
.text$mn:000080D6                 mov     [ebp+var_C], eax
.text$mn:000080D9                 mov     edx, [ebp+var_8]
.text$mn:000080DC                 mov     eax, [ebp+var_8]
.text$mn:000080DF                 mov     ecx, [edx+8]
.text$mn:000080E2                 cmp     ecx, [eax+0Ch]
.text$mn:000080E5                 jnz     short loc_80F1
.text$mn:000080E7                 push    1
.text$mn:000080E9                 mov     ecx, [ebp+var_8]
.text$mn:000080EC                 call    ?_Reserve@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::_Reserve(uint)
.text$mn:000080F1
.text$mn:000080F1 loc_80F1:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * &&)+4Dj
.text$mn:000080F1                 mov     edx, [ebp+var_8]
.text$mn:000080F4                 mov     eax, [edx+8]
.text$mn:000080F7                 push    eax
.text$mn:000080F8                 mov     ecx, [ebp+var_8]
.text$mn:000080FB                 mov     edx, [ecx+8]
.text$mn:000080FE                 push    edx
.text$mn:000080FF                 mov     ecx, [ebp+var_8]
.text$mn:00008102                 call    ?_Orphan_range@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXPAPAUtTbData@@0@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::_Orphan_range(tTbData * *,tTbData * *)
.text$mn:00008107                 mov     eax, [ebp+var_8]
.text$mn:0000810A                 mov     ecx, [eax+4]
.text$mn:0000810D                 mov     edx, [ebp+var_C]
.text$mn:00008110                 lea     eax, [ecx+edx*4]
.text$mn:00008113                 push    eax
.text$mn:00008114                 call    ??$forward@PAUtTbData@@@std@@YA$$QAPAUtTbData@@AAPAU1@@Z ; std::forward<tTbData *>(tTbData * &)
.text$mn:00008119                 add     esp, 4
.text$mn:0000811C                 push    eax             ; int
.text$mn:0000811D                 mov     ecx, [ebp+var_8]
.text$mn:00008120                 mov     edx, [ecx+8]
.text$mn:00008123                 push    edx             ; void *
.text$mn:00008124                 lea     eax, [ebp+var_1]
.text$mn:00008127                 push    eax
.text$mn:00008128                 mov     ecx, [ebp+var_8]
.text$mn:0000812B                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Getal(void)
.text$mn:00008130                 mov     ecx, eax
.text$mn:00008132                 call    ??$construct@PAUtTbData@@PAU1@@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEXPAPAUtTbData@@$$QAPAU2@@Z ; std::_Wrap_alloc<std::allocator<tTbData *>>::construct<tTbData *,tTbData *>(tTbData * *,tTbData * &&)
.text$mn:00008137                 mov     ecx, [ebp+var_8]
.text$mn:0000813A                 mov     edx, [ecx+8]
.text$mn:0000813D                 add     edx, 4
.text$mn:00008140                 mov     eax, [ebp+var_8]
.text$mn:00008143                 mov     [eax+8], edx
.text$mn:00008146                 jmp     short loc_81AC
.text$mn:00008148 ; ---------------------------------------------------------------------------
.text$mn:00008148
.text$mn:00008148 loc_8148:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * &&)+23j
.text$mn:00008148                 mov     ecx, [ebp+var_8]
.text$mn:0000814B                 mov     edx, [ebp+var_8]
.text$mn:0000814E                 mov     eax, [ecx+8]
.text$mn:00008151                 cmp     eax, [edx+0Ch]
.text$mn:00008154                 jnz     short loc_8160
.text$mn:00008156                 push    1
.text$mn:00008158                 mov     ecx, [ebp+var_8]
.text$mn:0000815B                 call    ?_Reserve@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::_Reserve(uint)
.text$mn:00008160
.text$mn:00008160 loc_8160:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * &&)+BCj
.text$mn:00008160                 mov     ecx, [ebp+var_8]
.text$mn:00008163                 mov     edx, [ecx+8]
.text$mn:00008166                 push    edx
.text$mn:00008167                 mov     eax, [ebp+var_8]
.text$mn:0000816A                 mov     ecx, [eax+8]
.text$mn:0000816D                 push    ecx
.text$mn:0000816E                 mov     ecx, [ebp+var_8]
.text$mn:00008171                 call    ?_Orphan_range@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXPAPAUtTbData@@0@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::_Orphan_range(tTbData * *,tTbData * *)
.text$mn:00008176                 mov     edx, [ebp+arg_0]
.text$mn:00008179                 push    edx
.text$mn:0000817A                 call    ??$forward@PAUtTbData@@@std@@YA$$QAPAUtTbData@@AAPAU1@@Z ; std::forward<tTbData *>(tTbData * &)
.text$mn:0000817F                 add     esp, 4
.text$mn:00008182                 push    eax             ; int
.text$mn:00008183                 mov     eax, [ebp+var_8]
.text$mn:00008186                 mov     ecx, [eax+8]
.text$mn:00008189                 push    ecx             ; void *
.text$mn:0000818A                 lea     edx, [ebp+var_2]
.text$mn:0000818D                 push    edx
.text$mn:0000818E                 mov     ecx, [ebp+var_8]
.text$mn:00008191                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Getal(void)
.text$mn:00008196                 mov     ecx, eax
.text$mn:00008198                 call    ??$construct@PAUtTbData@@PAU1@@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEXPAPAUtTbData@@$$QAPAU2@@Z ; std::_Wrap_alloc<std::allocator<tTbData *>>::construct<tTbData *,tTbData *>(tTbData * *,tTbData * &&)
.text$mn:0000819D                 mov     eax, [ebp+var_8]
.text$mn:000081A0                 mov     ecx, [eax+8]
.text$mn:000081A3                 add     ecx, 4
.text$mn:000081A6                 mov     edx, [ebp+var_8]
.text$mn:000081A9                 mov     [edx+8], ecx
.text$mn:000081AC
.text$mn:000081AC loc_81AC:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * &&)+AEj
.text$mn:000081AC                 mov     esp, ebp
.text$mn:000081AE                 pop     ebp
.text$mn:000081AF                 retn    4
.text$mn:000081AF ?push_back@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEX$$QAPAUtTbData@@@Z endp
.text$mn:000081AF
.text$mn:000081AF ; ---------------------------------------------------------------------------
.text$mn:000081B2                 align 4
.text$mn:000081B2 _text$mn        ends
.text$mn:000081B2
.text$mn:000081B4 ; ===========================================================================
.text$mn:000081B4
.text$mn:000081B4 ; Segment type: Pure code
.text$mn:000081B4 ; Segment permissions: Read/Execute
.text$mn:000081B4 _text$mn        segment para public 'CODE' use32
.text$mn:000081B4                 assume cs:_text$mn
.text$mn:000081B4                 ;org 81B4h
.text$mn:000081B4 ; COMDAT (pick any)
.text$mn:000081B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000081B4
.text$mn:000081B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000081B4
.text$mn:000081B4 ; Attributes: bp-based frame
.text$mn:000081B4
.text$mn:000081B4 ; public: void __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::push_back(struct tTbData * const &)
.text$mn:000081B4                 public ?push_back@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEXABQAUtTbData@@@Z
.text$mn:000081B4 ?push_back@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEXABQAUtTbData@@@Z proc near
.text$mn:000081B4                                         ; CODE XREF: DockingCont::createToolbar(tTbData)+BFp
.text$mn:000081B4
.text$mn:000081B4 var_C           = dword ptr -0Ch
.text$mn:000081B4 var_8           = dword ptr -8
.text$mn:000081B4 var_2           = byte ptr -2
.text$mn:000081B4 var_1           = byte ptr -1
.text$mn:000081B4 arg_0           = dword ptr  8
.text$mn:000081B4
.text$mn:000081B4                 push    ebp
.text$mn:000081B5                 mov     ebp, esp
.text$mn:000081B7                 sub     esp, 0Ch
.text$mn:000081BA                 mov     [ebp+var_8], ecx
.text$mn:000081BD                 mov     eax, [ebp+arg_0]
.text$mn:000081C0                 push    eax
.text$mn:000081C1                 call    ??$addressof@QAUtTbData@@@std@@YAPBQAUtTbData@@ABQAU1@@Z ; std::addressof<tTbData * const>(tTbData * const &)
.text$mn:000081C6                 add     esp, 4
.text$mn:000081C9                 push    eax
.text$mn:000081CA                 mov     ecx, [ebp+var_8]
.text$mn:000081CD                 call    ?_Inside@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBE_NPBQAUtTbData@@@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::_Inside(tTbData * const *)
.text$mn:000081D2                 movzx   ecx, al
.text$mn:000081D5                 test    ecx, ecx
.text$mn:000081D7                 jz      short loc_8257
.text$mn:000081D9                 mov     edx, [ebp+arg_0]
.text$mn:000081DC                 push    edx
.text$mn:000081DD                 call    ??$addressof@QAUtTbData@@@std@@YAPBQAUtTbData@@ABQAU1@@Z ; std::addressof<tTbData * const>(tTbData * const &)
.text$mn:000081E2                 add     esp, 4
.text$mn:000081E5                 mov     ecx, [ebp+var_8]
.text$mn:000081E8                 sub     eax, [ecx+4]
.text$mn:000081EB                 sar     eax, 2
.text$mn:000081EE                 mov     [ebp+var_C], eax
.text$mn:000081F1                 mov     edx, [ebp+var_8]
.text$mn:000081F4                 mov     eax, [ebp+var_8]
.text$mn:000081F7                 mov     ecx, [edx+8]
.text$mn:000081FA                 cmp     ecx, [eax+0Ch]
.text$mn:000081FD                 jnz     short loc_8209
.text$mn:000081FF                 push    1
.text$mn:00008201                 mov     ecx, [ebp+var_8]
.text$mn:00008204                 call    ?_Reserve@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::_Reserve(uint)
.text$mn:00008209
.text$mn:00008209 loc_8209:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * const &)+49j
.text$mn:00008209                 mov     edx, [ebp+var_8]
.text$mn:0000820C                 mov     eax, [edx+8]
.text$mn:0000820F                 push    eax
.text$mn:00008210                 mov     ecx, [ebp+var_8]
.text$mn:00008213                 mov     edx, [ecx+8]
.text$mn:00008216                 push    edx
.text$mn:00008217                 mov     ecx, [ebp+var_8]
.text$mn:0000821A                 call    ?_Orphan_range@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXPAPAUtTbData@@0@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::_Orphan_range(tTbData * *,tTbData * *)
.text$mn:0000821F                 mov     eax, [ebp+var_8]
.text$mn:00008222                 mov     ecx, [eax+4]
.text$mn:00008225                 mov     edx, [ebp+var_C]
.text$mn:00008228                 lea     eax, [ecx+edx*4]
.text$mn:0000822B                 push    eax             ; int
.text$mn:0000822C                 mov     ecx, [ebp+var_8]
.text$mn:0000822F                 mov     edx, [ecx+8]
.text$mn:00008232                 push    edx             ; void *
.text$mn:00008233                 lea     eax, [ebp+var_1]
.text$mn:00008236                 push    eax
.text$mn:00008237                 mov     ecx, [ebp+var_8]
.text$mn:0000823A                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Getal(void)
.text$mn:0000823F                 mov     ecx, eax
.text$mn:00008241                 call    ??$construct@PAUtTbData@@AAPAU1@@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEXPAPAUtTbData@@AAPAU2@@Z ; std::_Wrap_alloc<std::allocator<tTbData *>>::construct<tTbData *,tTbData * &>(tTbData * *,tTbData * &)
.text$mn:00008246                 mov     ecx, [ebp+var_8]
.text$mn:00008249                 mov     edx, [ecx+8]
.text$mn:0000824C                 add     edx, 4
.text$mn:0000824F                 mov     eax, [ebp+var_8]
.text$mn:00008252                 mov     [eax+8], edx
.text$mn:00008255                 jmp     short loc_82B2
.text$mn:00008257 ; ---------------------------------------------------------------------------
.text$mn:00008257
.text$mn:00008257 loc_8257:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * const &)+23j
.text$mn:00008257                 mov     ecx, [ebp+var_8]
.text$mn:0000825A                 mov     edx, [ebp+var_8]
.text$mn:0000825D                 mov     eax, [ecx+8]
.text$mn:00008260                 cmp     eax, [edx+0Ch]
.text$mn:00008263                 jnz     short loc_826F
.text$mn:00008265                 push    1
.text$mn:00008267                 mov     ecx, [ebp+var_8]
.text$mn:0000826A                 call    ?_Reserve@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::_Reserve(uint)
.text$mn:0000826F
.text$mn:0000826F loc_826F:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * const &)+AFj
.text$mn:0000826F                 mov     ecx, [ebp+var_8]
.text$mn:00008272                 mov     edx, [ecx+8]
.text$mn:00008275                 push    edx
.text$mn:00008276                 mov     eax, [ebp+var_8]
.text$mn:00008279                 mov     ecx, [eax+8]
.text$mn:0000827C                 push    ecx
.text$mn:0000827D                 mov     ecx, [ebp+var_8]
.text$mn:00008280                 call    ?_Orphan_range@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXPAPAUtTbData@@0@Z ; std::vector<tTbData *,std::allocator<tTbData *>>::_Orphan_range(tTbData * *,tTbData * *)
.text$mn:00008285                 mov     edx, [ebp+arg_0]
.text$mn:00008288                 push    edx             ; int
.text$mn:00008289                 mov     eax, [ebp+var_8]
.text$mn:0000828C                 mov     ecx, [eax+8]
.text$mn:0000828F                 push    ecx             ; void *
.text$mn:00008290                 lea     edx, [ebp+var_2]
.text$mn:00008293                 push    edx
.text$mn:00008294                 mov     ecx, [ebp+var_8]
.text$mn:00008297                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tTbData *,std::allocator<tTbData *>>>::_Getal(void)
.text$mn:0000829C                 mov     ecx, eax
.text$mn:0000829E                 call    ??$construct@PAUtTbData@@ABQAU1@@?$_Wrap_alloc@V?$allocator@PAUtTbData@@@std@@@std@@QAEXPAPAUtTbData@@ABQAU2@@Z ; std::_Wrap_alloc<std::allocator<tTbData *>>::construct<tTbData *,tTbData * const &>(tTbData * *,tTbData * const &)
.text$mn:000082A3                 mov     eax, [ebp+var_8]
.text$mn:000082A6                 mov     ecx, [eax+8]
.text$mn:000082A9                 add     ecx, 4
.text$mn:000082AC                 mov     edx, [ebp+var_8]
.text$mn:000082AF                 mov     [edx+8], ecx
.text$mn:000082B2
.text$mn:000082B2 loc_82B2:                               ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::push_back(tTbData * const &)+A1j
.text$mn:000082B2                 mov     esp, ebp
.text$mn:000082B4                 pop     ebp
.text$mn:000082B5                 retn    4
.text$mn:000082B5 ?push_back@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAEXABQAUtTbData@@@Z endp
.text$mn:000082B5
.text$mn:000082B5 _text$mn        ends
.text$mn:000082B5
.text$mn:000082B8 ; ===========================================================================
.text$mn:000082B8
.text$mn:000082B8 ; Segment type: Pure code
.text$mn:000082B8 ; Segment permissions: Read/Execute
.text$mn:000082B8 _text$mn        segment para public 'CODE' use32
.text$mn:000082B8                 assume cs:_text$mn
.text$mn:000082B8                 ;org 82B8h
.text$mn:000082B8 ; COMDAT (pick any)
.text$mn:000082B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000082B8
.text$mn:000082B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000082B8
.text$mn:000082B8 ; Attributes: bp-based frame
.text$mn:000082B8
.text$mn:000082B8 ; void __thiscall Window::reSizeTo(Window *this, struct tagRECT *)
.text$mn:000082B8                 public ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z
.text$mn:000082B8 ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z proc near
.text$mn:000082B8                                         ; DATA XREF: .rdata:0000929Co
.text$mn:000082B8                                         ; .rdata:000092D0o ...
.text$mn:000082B8
.text$mn:000082B8 var_4           = dword ptr -4
.text$mn:000082B8 arg_0           = dword ptr  8
.text$mn:000082B8
.text$mn:000082B8                 push    ebp
.text$mn:000082B9                 mov     ebp, esp
.text$mn:000082BB                 push    ecx
.text$mn:000082BC                 mov     [ebp+var_4], ecx
.text$mn:000082BF                 push    1               ; bRepaint
.text$mn:000082C1                 mov     eax, [ebp+arg_0]
.text$mn:000082C4                 mov     ecx, [eax+0Ch]
.text$mn:000082C7                 push    ecx             ; nHeight
.text$mn:000082C8                 mov     edx, [ebp+arg_0]
.text$mn:000082CB                 mov     eax, [edx+8]
.text$mn:000082CE                 push    eax             ; nWidth
.text$mn:000082CF                 mov     ecx, [ebp+arg_0]
.text$mn:000082D2                 mov     edx, [ecx+4]
.text$mn:000082D5                 push    edx             ; Y
.text$mn:000082D6                 mov     eax, [ebp+arg_0]
.text$mn:000082D9                 mov     ecx, [eax]
.text$mn:000082DB                 push    ecx             ; X
.text$mn:000082DC                 mov     edx, [ebp+var_4]
.text$mn:000082DF                 mov     eax, [edx+0Ch]
.text$mn:000082E2                 push    eax             ; hWnd
.text$mn:000082E3                 call    dword ptr ds:__imp__MoveWindow@24 ; MoveWindow(x,x,x,x,x,x)
.text$mn:000082E9                 push    0
.text$mn:000082EB                 mov     ecx, [ebp+var_4]
.text$mn:000082EE                 mov     edx, [ecx]
.text$mn:000082F0                 mov     ecx, [ebp+var_4]
.text$mn:000082F3                 mov     eax, [edx+18h]
.text$mn:000082F6                 call    eax
.text$mn:000082F8                 mov     esp, ebp
.text$mn:000082FA                 pop     ebp
.text$mn:000082FB                 retn    4
.text$mn:000082FB ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z endp
.text$mn:000082FB
.text$mn:000082FB ; ---------------------------------------------------------------------------
.text$mn:000082FE                 align 10h
.text$mn:000082FE _text$mn        ends
.text$mn:000082FE
.text$mn:00008300 ; ===========================================================================
.text$mn:00008300
.text$mn:00008300 ; Segment type: Pure code
.text$mn:00008300 ; Segment permissions: Read/Execute
.text$mn:00008300 _text$mn        segment para public 'CODE' use32
.text$mn:00008300                 assume cs:_text$mn
.text$mn:00008300                 ;org 8300h
.text$mn:00008300 ; COMDAT (pick any)
.text$mn:00008300                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008300
.text$mn:00008300 ; =============== S U B R O U T I N E =======================================
.text$mn:00008300
.text$mn:00008300 ; Attributes: bp-based frame
.text$mn:00008300
.text$mn:00008300 ; void __thiscall Window::reSizeToWH(Window *this, struct tagRECT *)
.text$mn:00008300                 public ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z
.text$mn:00008300 ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z proc near
.text$mn:00008300                                         ; DATA XREF: .rdata:000092A0o
.text$mn:00008300                                         ; .rdata:000092D4o ...
.text$mn:00008300
.text$mn:00008300 var_4           = dword ptr -4
.text$mn:00008300 arg_0           = dword ptr  8
.text$mn:00008300
.text$mn:00008300                 push    ebp
.text$mn:00008301                 mov     ebp, esp
.text$mn:00008303                 push    ecx
.text$mn:00008304                 mov     [ebp+var_4], ecx
.text$mn:00008307                 push    1               ; bRepaint
.text$mn:00008309                 mov     eax, [ebp+arg_0]
.text$mn:0000830C                 mov     ecx, [ebp+arg_0]
.text$mn:0000830F                 mov     edx, [eax+0Ch]
.text$mn:00008312                 sub     edx, [ecx+4]
.text$mn:00008315                 push    edx             ; nHeight
.text$mn:00008316                 mov     eax, [ebp+arg_0]
.text$mn:00008319                 mov     ecx, [ebp+arg_0]
.text$mn:0000831C                 mov     edx, [eax+8]
.text$mn:0000831F                 sub     edx, [ecx]
.text$mn:00008321                 push    edx             ; nWidth
.text$mn:00008322                 mov     eax, [ebp+arg_0]
.text$mn:00008325                 mov     ecx, [eax+4]
.text$mn:00008328                 push    ecx             ; Y
.text$mn:00008329                 mov     edx, [ebp+arg_0]
.text$mn:0000832C                 mov     eax, [edx]
.text$mn:0000832E                 push    eax             ; X
.text$mn:0000832F                 mov     ecx, [ebp+var_4]
.text$mn:00008332                 mov     edx, [ecx+0Ch]
.text$mn:00008335                 push    edx             ; hWnd
.text$mn:00008336                 call    dword ptr ds:__imp__MoveWindow@24 ; MoveWindow(x,x,x,x,x,x)
.text$mn:0000833C                 push    0
.text$mn:0000833E                 mov     eax, [ebp+var_4]
.text$mn:00008341                 mov     edx, [eax]
.text$mn:00008343                 mov     ecx, [ebp+var_4]
.text$mn:00008346                 mov     eax, [edx+18h]
.text$mn:00008349                 call    eax
.text$mn:0000834B                 mov     esp, ebp
.text$mn:0000834D                 pop     ebp
.text$mn:0000834E                 retn    4
.text$mn:0000834E ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z endp
.text$mn:0000834E
.text$mn:0000834E ; ---------------------------------------------------------------------------
.text$mn:00008351                 align 4
.text$mn:00008351 _text$mn        ends
.text$mn:00008351
.text$mn:00008354 ; ===========================================================================
.text$mn:00008354
.text$mn:00008354 ; Segment type: Pure code
.text$mn:00008354 ; Segment permissions: Read/Execute
.text$mn:00008354 _text$mn        segment para public 'CODE' use32
.text$mn:00008354                 assume cs:_text$mn
.text$mn:00008354                 ;org 8354h
.text$mn:00008354 ; COMDAT (pick any)
.text$mn:00008354                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008354
.text$mn:00008354 ; =============== S U B R O U T I N E =======================================
.text$mn:00008354
.text$mn:00008354 ; Attributes: bp-based frame
.text$mn:00008354
.text$mn:00008354 ; void __thiscall Window::redraw(Window *this, bool)
.text$mn:00008354                 public ?redraw@Window@@UBEX_N@Z
.text$mn:00008354 ?redraw@Window@@UBEX_N@Z proc near      ; DATA XREF: .rdata:000092A4o
.text$mn:00008354                                         ; .rdata:000092D8o ...
.text$mn:00008354
.text$mn:00008354 var_4           = dword ptr -4
.text$mn:00008354 arg_0           = byte ptr  8
.text$mn:00008354
.text$mn:00008354                 push    ebp
.text$mn:00008355                 mov     ebp, esp
.text$mn:00008357                 push    ecx
.text$mn:00008358                 mov     [ebp+var_4], ecx
.text$mn:0000835B                 push    1               ; bErase
.text$mn:0000835D                 push    0               ; lpRect
.text$mn:0000835F                 mov     eax, [ebp+var_4]
.text$mn:00008362                 mov     ecx, [eax+0Ch]
.text$mn:00008365                 push    ecx             ; hWnd
.text$mn:00008366                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text$mn:0000836C                 movzx   edx, [ebp+arg_0]
.text$mn:00008370                 test    edx, edx
.text$mn:00008372                 jz      short loc_8381
.text$mn:00008374                 mov     eax, [ebp+var_4]
.text$mn:00008377                 mov     ecx, [eax+0Ch]
.text$mn:0000837A                 push    ecx             ; hWnd
.text$mn:0000837B                 call    dword ptr ds:__imp__UpdateWindow@4 ; UpdateWindow(x)
.text$mn:00008381
.text$mn:00008381 loc_8381:                               ; CODE XREF: Window::redraw(bool)+1Ej
.text$mn:00008381                 mov     esp, ebp
.text$mn:00008383                 pop     ebp
.text$mn:00008384                 retn    4
.text$mn:00008384 ?redraw@Window@@UBEX_N@Z endp
.text$mn:00008384
.text$mn:00008384 ; ---------------------------------------------------------------------------
.text$mn:00008387                 align 4
.text$mn:00008387 _text$mn        ends
.text$mn:00008387
.text$mn:00008388 ; ===========================================================================
.text$mn:00008388
.text$mn:00008388 ; Segment type: Pure code
.text$mn:00008388 ; Segment permissions: Read/Execute
.text$mn:00008388 _text$mn        segment para public 'CODE' use32
.text$mn:00008388                 assume cs:_text$mn
.text$mn:00008388                 ;org 8388h
.text$mn:00008388 ; COMDAT (pick any)
.text$mn:00008388                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008388
.text$mn:00008388 ; =============== S U B R O U T I N E =======================================
.text$mn:00008388
.text$mn:00008388 ; Attributes: bp-based frame
.text$mn:00008388
.text$mn:00008388 ; int __thiscall DockingCont::removeTab(DockingCont *this, struct tTbData *)
.text$mn:00008388                 public ?removeTab@DockingCont@@IAEHPAUtTbData@@@Z
.text$mn:00008388 ?removeTab@DockingCont@@IAEHPAUtTbData@@@Z proc near
.text$mn:00008388                                         ; CODE XREF: DockingCont::removeToolbar(tTbData)+88p
.text$mn:00008388
.text$mn:00008388 var_4           = dword ptr -4
.text$mn:00008388 arg_0           = dword ptr  8
.text$mn:00008388
.text$mn:00008388                 push    ebp
.text$mn:00008389                 mov     ebp, esp
.text$mn:0000838B                 push    ecx
.text$mn:0000838C                 mov     [ebp+var_4], ecx
.text$mn:0000838F                 push    0               ; int
.text$mn:00008391                 mov     eax, [ebp+arg_0]
.text$mn:00008394                 push    eax             ; struct tTbData *
.text$mn:00008395                 mov     ecx, [ebp+var_4] ; this
.text$mn:00008398                 call    ?hideToolbar@DockingCont@@IAEHPAUtTbData@@H@Z ; DockingCont::hideToolbar(tTbData *,int)
.text$mn:0000839D                 mov     esp, ebp
.text$mn:0000839F                 pop     ebp
.text$mn:000083A0                 retn    4
.text$mn:000083A0 ?removeTab@DockingCont@@IAEHPAUtTbData@@@Z endp
.text$mn:000083A0
.text$mn:000083A0 ; ---------------------------------------------------------------------------
.text$mn:000083A3                 align 4
.text$mn:000083A3 _text$mn        ends
.text$mn:000083A3
.text$mn:000083A4 ; ===========================================================================
.text$mn:000083A4
.text$mn:000083A4 ; Segment type: Pure code
.text$mn:000083A4 ; Segment permissions: Read/Execute
.text$mn:000083A4 _text$mn        segment para public 'CODE' use32
.text$mn:000083A4                 assume cs:_text$mn
.text$mn:000083A4                 ;org 83A4h
.text$mn:000083A4 ; COMDAT (pick any)
.text$mn:000083A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000083A4
.text$mn:000083A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000083A4
.text$mn:000083A4 ; Attributes: bp-based frame
.text$mn:000083A4
.text$mn:000083A4 ; int __thiscall DPIManager::scaleY(DPIManager *this, int)
.text$mn:000083A4                 public ?scaleY@DPIManager@@QAEHH@Z
.text$mn:000083A4 ?scaleY@DPIManager@@QAEHH@Z proc near   ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+134p
.text$mn:000083A4                                         ; DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+22Dp ...
.text$mn:000083A4
.text$mn:000083A4 var_4           = dword ptr -4
.text$mn:000083A4 nNumber         = dword ptr  8
.text$mn:000083A4
.text$mn:000083A4                 push    ebp
.text$mn:000083A5                 mov     ebp, esp
.text$mn:000083A7                 push    ecx
.text$mn:000083A8                 mov     [ebp+var_4], ecx
.text$mn:000083AB                 push    60h ; '`'       ; nDenominator
.text$mn:000083AD                 mov     eax, [ebp+var_4]
.text$mn:000083B0                 mov     ecx, [eax+4]
.text$mn:000083B3                 push    ecx             ; nNumerator
.text$mn:000083B4                 mov     edx, [ebp+nNumber]
.text$mn:000083B7                 push    edx             ; nNumber
.text$mn:000083B8                 call    dword ptr ds:__imp__MulDiv@12 ; MulDiv(x,x,x)
.text$mn:000083BE                 mov     esp, ebp
.text$mn:000083C0                 pop     ebp
.text$mn:000083C1                 retn    4
.text$mn:000083C1 ?scaleY@DPIManager@@QAEHH@Z endp
.text$mn:000083C1
.text$mn:000083C1 _text$mn        ends
.text$mn:000083C1
.text$mn:000083C4 ; ===========================================================================
.text$mn:000083C4
.text$mn:000083C4 ; Segment type: Pure code
.text$mn:000083C4 ; Segment permissions: Read/Execute
.text$mn:000083C4 _text$mn        segment para public 'CODE' use32
.text$mn:000083C4                 assume cs:_text$mn
.text$mn:000083C4                 ;org 83C4h
.text$mn:000083C4 ; COMDAT (pick any)
.text$mn:000083C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000083C4
.text$mn:000083C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000083C4
.text$mn:000083C4 ; Attributes: bp-based frame
.text$mn:000083C4
.text$mn:000083C4 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::size(void)const
.text$mn:000083C4                 public ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:000083C4 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:000083C4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+Cp
.text$mn:000083C4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+21p
.text$mn:000083C4
.text$mn:000083C4 var_4           = dword ptr -4
.text$mn:000083C4
.text$mn:000083C4                 push    ebp
.text$mn:000083C5                 mov     ebp, esp
.text$mn:000083C7                 push    ecx
.text$mn:000083C8                 mov     [ebp+var_4], ecx
.text$mn:000083CB                 mov     eax, [ebp+var_4]
.text$mn:000083CE                 mov     eax, [eax+14h]
.text$mn:000083D1                 mov     esp, ebp
.text$mn:000083D3                 pop     ebp
.text$mn:000083D4                 retn
.text$mn:000083D4 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:000083D4
.text$mn:000083D4 ; ---------------------------------------------------------------------------
.text$mn:000083D5                 align 4
.text$mn:000083D5 _text$mn        ends
.text$mn:000083D5
.text$mn:000083D8 ; ===========================================================================
.text$mn:000083D8
.text$mn:000083D8 ; Segment type: Pure code
.text$mn:000083D8 ; Segment permissions: Read/Execute
.text$mn:000083D8 _text$mn        segment para public 'CODE' use32
.text$mn:000083D8                 assume cs:_text$mn
.text$mn:000083D8                 ;org 83D8h
.text$mn:000083D8 ; COMDAT (pick any)
.text$mn:000083D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000083D8
.text$mn:000083D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000083D8
.text$mn:000083D8 ; Attributes: bp-based frame
.text$mn:000083D8
.text$mn:000083D8 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::size(void)const
.text$mn:000083D8                 public ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:000083D8 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:000083D8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+Cp
.text$mn:000083D8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+21p ...
.text$mn:000083D8
.text$mn:000083D8 var_4           = dword ptr -4
.text$mn:000083D8
.text$mn:000083D8                 push    ebp
.text$mn:000083D9                 mov     ebp, esp
.text$mn:000083DB                 push    ecx
.text$mn:000083DC                 mov     [ebp+var_4], ecx
.text$mn:000083DF                 mov     eax, [ebp+var_4]
.text$mn:000083E2                 mov     eax, [eax+14h]
.text$mn:000083E5                 mov     esp, ebp
.text$mn:000083E7                 pop     ebp
.text$mn:000083E8                 retn
.text$mn:000083E8 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:000083E8
.text$mn:000083E8 ; ---------------------------------------------------------------------------
.text$mn:000083E9                 align 4
.text$mn:000083E9 _text$mn        ends
.text$mn:000083E9
.text$mn:000083EC ; ===========================================================================
.text$mn:000083EC
.text$mn:000083EC ; Segment type: Pure code
.text$mn:000083EC ; Segment permissions: Read/Execute
.text$mn:000083EC _text$mn        segment para public 'CODE' use32
.text$mn:000083EC                 assume cs:_text$mn
.text$mn:000083EC                 ;org 83ECh
.text$mn:000083EC ; COMDAT (pick any)
.text$mn:000083EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000083EC
.text$mn:000083EC ; =============== S U B R O U T I N E =======================================
.text$mn:000083EC
.text$mn:000083EC ; Attributes: bp-based frame
.text$mn:000083EC
.text$mn:000083EC ; public: unsigned int __thiscall std::vector<struct tTbData *, class std::allocator<struct tTbData *>>::size(void)const
.text$mn:000083EC                 public ?size@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ
.text$mn:000083EC ?size@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ proc near
.text$mn:000083EC                                         ; CODE XREF: DockingCont::removeToolbar(tTbData)+43p
.text$mn:000083EC                                         ; DockingCont::findToolbarByWnd(HWND__ *)+20p ...
.text$mn:000083EC
.text$mn:000083EC var_4           = dword ptr -4
.text$mn:000083EC
.text$mn:000083EC                 push    ebp
.text$mn:000083ED                 mov     ebp, esp
.text$mn:000083EF                 push    ecx
.text$mn:000083F0                 mov     [ebp+var_4], ecx
.text$mn:000083F3                 mov     eax, [ebp+var_4]
.text$mn:000083F6                 mov     ecx, [ebp+var_4]
.text$mn:000083F9                 mov     eax, [eax+8]
.text$mn:000083FC                 sub     eax, [ecx+4]
.text$mn:000083FF                 sar     eax, 2
.text$mn:00008402                 mov     esp, ebp
.text$mn:00008404                 pop     ebp
.text$mn:00008405                 retn
.text$mn:00008405 ?size@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBEIXZ endp
.text$mn:00008405
.text$mn:00008405 ; ---------------------------------------------------------------------------
.text$mn:00008406                 align 4
.text$mn:00008406 _text$mn        ends
.text$mn:00008406
.text$mn:00008408 ; ===========================================================================
.text$mn:00008408
.text$mn:00008408 ; Segment type: Pure code
.text$mn:00008408 ; Segment permissions: Read/Execute
.text$mn:00008408 _text$mn        segment para public 'CODE' use32
.text$mn:00008408                 assume cs:_text$mn
.text$mn:00008408                 ;org 8408h
.text$mn:00008408 ; COMDAT (pick any)
.text$mn:00008408                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008408
.text$mn:00008408 ; =============== S U B R O U T I N E =======================================
.text$mn:00008408
.text$mn:00008408 ; Attributes: bp-based frame
.text$mn:00008408
.text$mn:00008408 ; const struct std::error_category *__cdecl std::system_category()
.text$mn:00008408                 public ?system_category@std@@YAABVerror_category@1@XZ
.text$mn:00008408 ?system_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:00008408                                         ; CODE XREF: std::_System_error_category::default_error_condition(int):loc_763Cp
.text$mn:00008408                 push    ebp
.text$mn:00008409                 mov     ebp, esp
.text$mn:0000840B                 mov     eax, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_System_error_category std::_Error_objects<int>::_System_object
.text$mn:00008410                 pop     ebp
.text$mn:00008411                 retn
.text$mn:00008411 ?system_category@std@@YAABVerror_category@1@XZ endp
.text$mn:00008411
.text$mn:00008411 ; ---------------------------------------------------------------------------
.text$mn:00008412                 align 4
.text$mn:00008412 _text$mn        ends
.text$mn:00008412
.text$mn:00008414 ; ===========================================================================
.text$mn:00008414
.text$mn:00008414 ; Segment type: Pure code
.text$mn:00008414 ; Segment permissions: Read/Execute
.text$mn:00008414 _text$mn        segment para public 'CODE' use32
.text$mn:00008414                 assume cs:_text$mn
.text$mn:00008414                 ;org 8414h
.text$mn:00008414 ; COMDAT (pick any)
.text$mn:00008414                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008414
.text$mn:00008414 ; =============== S U B R O U T I N E =======================================
.text$mn:00008414
.text$mn:00008414 ; Attributes: bp-based frame
.text$mn:00008414
.text$mn:00008414 ; int __thiscall std::error_code::value(std::error_code *__hidden this)
.text$mn:00008414                 public ?value@error_code@std@@QBEHXZ
.text$mn:00008414 ?value@error_code@std@@QBEHXZ proc near ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+24p
.text$mn:00008414
.text$mn:00008414 var_4           = dword ptr -4
.text$mn:00008414
.text$mn:00008414                 push    ebp
.text$mn:00008415                 mov     ebp, esp
.text$mn:00008417                 push    ecx
.text$mn:00008418                 mov     [ebp+var_4], ecx
.text$mn:0000841B                 mov     eax, [ebp+var_4]
.text$mn:0000841E                 mov     eax, [eax]
.text$mn:00008420                 mov     esp, ebp
.text$mn:00008422                 pop     ebp
.text$mn:00008423                 retn
.text$mn:00008423 ?value@error_code@std@@QBEHXZ endp
.text$mn:00008423
.text$mn:00008423 _text$mn        ends
.text$mn:00008423
.text$mn:00008424 ; ===========================================================================
.text$mn:00008424
.text$mn:00008424 ; Segment type: Pure code
.text$mn:00008424 ; Segment permissions: Read/Execute
.text$mn:00008424 _text$mn        segment para public 'CODE' use32
.text$mn:00008424                 assume cs:_text$mn
.text$mn:00008424                 ;org 8424h
.text$mn:00008424 ; COMDAT (pick any)
.text$mn:00008424                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008424
.text$mn:00008424 ; =============== S U B R O U T I N E =======================================
.text$mn:00008424
.text$mn:00008424 ; Attributes: bp-based frame
.text$mn:00008424
.text$mn:00008424 ; int __thiscall std::error_condition::value(std::error_condition *__hidden this)
.text$mn:00008424                 public ?value@error_condition@std@@QBEHXZ
.text$mn:00008424 ?value@error_condition@std@@QBEHXZ proc near
.text$mn:00008424                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+2Cp
.text$mn:00008424                                         ; std::error_condition::operator==(std::error_condition const &)+36p
.text$mn:00008424
.text$mn:00008424 var_4           = dword ptr -4
.text$mn:00008424
.text$mn:00008424                 push    ebp
.text$mn:00008425                 mov     ebp, esp
.text$mn:00008427                 push    ecx
.text$mn:00008428                 mov     [ebp+var_4], ecx
.text$mn:0000842B                 mov     eax, [ebp+var_4]
.text$mn:0000842E                 mov     eax, [eax]
.text$mn:00008430                 mov     esp, ebp
.text$mn:00008432                 pop     ebp
.text$mn:00008433                 retn
.text$mn:00008433 ?value@error_condition@std@@QBEHXZ endp
.text$mn:00008433
.text$mn:00008433 _text$mn        ends
.text$mn:00008433
.text$mn:00008434 ; ===========================================================================
.text$mn:00008434
.text$mn:00008434 ; Segment type: Pure code
.text$mn:00008434 ; Segment permissions: Read/Execute
.text$mn:00008434 _text$mn        segment para public 'CODE' use32
.text$mn:00008434                 assume cs:_text$mn
.text$mn:00008434                 ;org 8434h
.text$mn:00008434 ; COMDAT (pick any)
.text$mn:00008434                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008434
.text$mn:00008434 ; =============== S U B R O U T I N E =======================================
.text$mn:00008434
.text$mn:00008434 ; Attributes: bp-based frame
.text$mn:00008434
.text$mn:00008434 ; __int32 __stdcall DockingCont::wndCaptionProc(HWND hWnd, UINT Msg, WPARAM wParam, __int32)
.text$mn:00008434                 public ?wndCaptionProc@DockingCont@@KGJPAUHWND__@@IIJ@Z
.text$mn:00008434 ?wndCaptionProc@DockingCont@@KGJPAUHWND__@@IIJ@Z proc near
.text$mn:00008434                                         ; DATA XREF: DockingCont::run_dlgProc(uint,uint,long)+E1o
.text$mn:00008434
.text$mn:00008434 hWnd            = dword ptr  8
.text$mn:00008434 Msg             = dword ptr  0Ch
.text$mn:00008434 wParam          = dword ptr  10h
.text$mn:00008434 arg_C           = dword ptr  14h
.text$mn:00008434
.text$mn:00008434                 push    ebp
.text$mn:00008435                 mov     ebp, esp
.text$mn:00008437                 mov     eax, [ebp+arg_C]
.text$mn:0000843A                 push    eax             ; __int32
.text$mn:0000843B                 mov     ecx, [ebp+wParam]
.text$mn:0000843E                 push    ecx             ; wParam
.text$mn:0000843F                 mov     edx, [ebp+Msg]
.text$mn:00008442                 push    edx             ; Msg
.text$mn:00008443                 mov     eax, [ebp+hWnd]
.text$mn:00008446                 push    eax             ; hWnd
.text$mn:00008447                 push    0FFFFFFEBh      ; nIndex
.text$mn:00008449                 mov     ecx, [ebp+hWnd]
.text$mn:0000844C                 push    ecx             ; hWnd
.text$mn:0000844D                 call    dword ptr ds:__imp__GetWindowLongW@8 ; GetWindowLongW(x,x)
.text$mn:00008453                 mov     ecx, eax        ; this
.text$mn:00008455                 call    ?runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z ; DockingCont::runProcCaption(HWND__ *,uint,uint,long)
.text$mn:0000845A                 pop     ebp
.text$mn:0000845B                 retn    10h
.text$mn:0000845B ?wndCaptionProc@DockingCont@@KGJPAUHWND__@@IIJ@Z endp
.text$mn:0000845B
.text$mn:0000845B ; ---------------------------------------------------------------------------
.text$mn:0000845E                 align 10h
.text$mn:0000845E _text$mn        ends
.text$mn:0000845E
.text$mn:00008460 ; ===========================================================================
.text$mn:00008460
.text$mn:00008460 ; Segment type: Pure code
.text$mn:00008460 ; Segment permissions: Read/Execute
.text$mn:00008460 _text$mn        segment para public 'CODE' use32
.text$mn:00008460                 assume cs:_text$mn
.text$mn:00008460                 ;org 8460h
.text$mn:00008460 ; COMDAT (pick any)
.text$mn:00008460                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008460
.text$mn:00008460 ; =============== S U B R O U T I N E =======================================
.text$mn:00008460
.text$mn:00008460 ; Attributes: bp-based frame
.text$mn:00008460
.text$mn:00008460 ; __int32 __stdcall DockingCont::wndTabProc(HWND hWnd, UINT Msg, WPARAM, __int32)
.text$mn:00008460                 public ?wndTabProc@DockingCont@@KGJPAUHWND__@@IIJ@Z
.text$mn:00008460 ?wndTabProc@DockingCont@@KGJPAUHWND__@@IIJ@Z proc near
.text$mn:00008460                                         ; DATA XREF: DockingCont::run_dlgProc(uint,uint,long)+10Eo
.text$mn:00008460
.text$mn:00008460 hWnd            = dword ptr  8
.text$mn:00008460 Msg             = dword ptr  0Ch
.text$mn:00008460 arg_8           = dword ptr  10h
.text$mn:00008460 arg_C           = dword ptr  14h
.text$mn:00008460
.text$mn:00008460                 push    ebp
.text$mn:00008461                 mov     ebp, esp
.text$mn:00008463                 mov     eax, [ebp+arg_C]
.text$mn:00008466                 push    eax             ; __int32
.text$mn:00008467                 mov     ecx, [ebp+arg_8]
.text$mn:0000846A                 push    ecx             ; WPARAM
.text$mn:0000846B                 mov     edx, [ebp+Msg]
.text$mn:0000846E                 push    edx             ; Msg
.text$mn:0000846F                 mov     eax, [ebp+hWnd]
.text$mn:00008472                 push    eax             ; hWnd
.text$mn:00008473                 push    0FFFFFFEBh      ; nIndex
.text$mn:00008475                 mov     ecx, [ebp+hWnd]
.text$mn:00008478                 push    ecx             ; hWnd
.text$mn:00008479                 call    dword ptr ds:__imp__GetWindowLongW@8 ; GetWindowLongW(x,x)
.text$mn:0000847F                 mov     ecx, eax        ; this
.text$mn:00008481                 call    ?runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z ; DockingCont::runProcTab(HWND__ *,uint,uint,long)
.text$mn:00008486                 pop     ebp
.text$mn:00008487                 retn    10h
.text$mn:00008487 ?wndTabProc@DockingCont@@KGJPAUHWND__@@IIJ@Z endp
.text$mn:00008487
.text$mn:00008487 ; ---------------------------------------------------------------------------
.text$mn:0000848A                 align 4
.text$mn:0000848A _text$mn        ends
.text$mn:0000848A
.text$mn:0000848C ; ===========================================================================
.text$mn:0000848C
.text$mn:0000848C ; Segment type: Pure code
.text$mn:0000848C ; Segment permissions: Read/Execute
.text$mn:0000848C _text$mn        segment para public 'CODE' use32
.text$mn:0000848C                 assume cs:_text$mn
.text$mn:0000848C                 ;org 848Ch
.text$mn:0000848C ; COMDAT (pick any)
.text$mn:0000848C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000848C
.text$mn:0000848C ; =============== S U B R O U T I N E =======================================
.text$mn:0000848C
.text$mn:0000848C ; Attributes: bp-based frame
.text$mn:0000848C
.text$mn:0000848C                 public _hypot
.text$mn:0000848C _hypot          proc near
.text$mn:0000848C
.text$mn:0000848C var_10          = qword ptr -10h
.text$mn:0000848C var_8           = qword ptr -8
.text$mn:0000848C arg_0           = qword ptr  8
.text$mn:0000848C arg_8           = qword ptr  10h
.text$mn:0000848C
.text$mn:0000848C                 push    ebp
.text$mn:0000848D                 mov     ebp, esp
.text$mn:0000848F                 sub     esp, 8
.text$mn:00008492                 movsd   xmm0, [ebp+arg_8]
.text$mn:00008497                 movsd   [esp+8+var_8], xmm0
.text$mn:0000849C                 sub     esp, 8
.text$mn:0000849F                 movsd   xmm0, [ebp+arg_0]
.text$mn:000084A4                 movsd   [esp+10h+var_10], xmm0
.text$mn:000084A9                 call    __hypot
.text$mn:000084AE                 add     esp, 10h
.text$mn:000084B1                 pop     ebp
.text$mn:000084B2                 retn
.text$mn:000084B2 _hypot          endp
.text$mn:000084B2
.text$mn:000084B2 ; ---------------------------------------------------------------------------
.text$mn:000084B3                 align 4
.text$mn:000084B3 _text$mn        ends
.text$mn:000084B3
.text$mn:000084B4 ; ===========================================================================
.text$mn:000084B4
.text$mn:000084B4 ; Segment type: Pure code
.text$mn:000084B4 ; Segment permissions: Read/Execute
.text$mn:000084B4 _text$mn        segment para public 'CODE' use32
.text$mn:000084B4                 assume cs:_text$mn
.text$mn:000084B4                 ;org 84B4h
.text$mn:000084B4 ; COMDAT (pick any)
.text$mn:000084B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000084B4
.text$mn:000084B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000084B4
.text$mn:000084B4 ; Attributes: bp-based frame
.text$mn:000084B4
.text$mn:000084B4 ; int __cdecl wmemcpy(void *Dst, void *Src, int)
.text$mn:000084B4                 public _wmemcpy
.text$mn:000084B4 _wmemcpy        proc near               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:000084B4
.text$mn:000084B4 Dst             = dword ptr  8
.text$mn:000084B4 Src             = dword ptr  0Ch
.text$mn:000084B4 arg_8           = dword ptr  10h
.text$mn:000084B4
.text$mn:000084B4                 push    ebp
.text$mn:000084B5                 mov     ebp, esp
.text$mn:000084B7                 mov     eax, [ebp+arg_8]
.text$mn:000084BA                 shl     eax, 1
.text$mn:000084BC                 push    eax             ; Size
.text$mn:000084BD                 mov     ecx, [ebp+Src]
.text$mn:000084C0                 push    ecx             ; Src
.text$mn:000084C1                 mov     edx, [ebp+Dst]
.text$mn:000084C4                 push    edx             ; Dst
.text$mn:000084C5                 call    _memcpy
.text$mn:000084CA                 add     esp, 0Ch
.text$mn:000084CD                 pop     ebp
.text$mn:000084CE                 retn
.text$mn:000084CE _wmemcpy        endp
.text$mn:000084CE
.text$mn:000084CE ; ---------------------------------------------------------------------------
.text$mn:000084CF                 align 10h
.text$mn:000084CF _text$mn        ends
.text$mn:000084CF
.text$mn:000084D0 ; ===========================================================================
.text$mn:000084D0
.text$mn:000084D0 ; Segment type: Pure code
.text$mn:000084D0 ; Segment permissions: Read/Execute
.text$mn:000084D0 _text$mn        segment para public 'CODE' use32
.text$mn:000084D0                 assume cs:_text$mn
.text$mn:000084D0                 ;org 84D0h
.text$mn:000084D0 ; COMDAT (pick any)
.text$mn:000084D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000084D0
.text$mn:000084D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000084D0
.text$mn:000084D0 ; Attributes: bp-based frame
.text$mn:000084D0
.text$mn:000084D0 ; int __cdecl wmemmove(void *Dst, void *Src, int)
.text$mn:000084D0                 public _wmemmove
.text$mn:000084D0 _wmemmove       proc near               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:000084D0
.text$mn:000084D0 Dst             = dword ptr  8
.text$mn:000084D0 Src             = dword ptr  0Ch
.text$mn:000084D0 arg_8           = dword ptr  10h
.text$mn:000084D0
.text$mn:000084D0                 push    ebp
.text$mn:000084D1                 mov     ebp, esp
.text$mn:000084D3                 mov     eax, [ebp+arg_8]
.text$mn:000084D6                 shl     eax, 1
.text$mn:000084D8                 push    eax             ; Size
.text$mn:000084D9                 mov     ecx, [ebp+Src]
.text$mn:000084DC                 push    ecx             ; Src
.text$mn:000084DD                 mov     edx, [ebp+Dst]
.text$mn:000084E0                 push    edx             ; Dst
.text$mn:000084E1                 call    _memmove
.text$mn:000084E6                 add     esp, 0Ch
.text$mn:000084E9                 pop     ebp
.text$mn:000084EA                 retn
.text$mn:000084EA _wmemmove       endp
.text$mn:000084EA
.text$mn:000084EA ; ---------------------------------------------------------------------------
.text$mn:000084EB                 align 4
.text$mn:000084EB _text$mn        ends
.text$mn:000084EB
.xdata$x:000084EC ; ===========================================================================
.xdata$x:000084EC
.xdata$x:000084EC ; Segment type: Pure data
.xdata$x:000084EC ; Segment permissions: Read
.xdata$x:000084EC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000084EC                 assume cs:_xdata$x
.xdata$x:000084EC                 ;org 84ECh
.xdata$x:000084EC ; COMDAT (pick associative to section at 6698)
.xdata$x:000084EC __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ db 0FFh
.xdata$x:000084EC                                         ; DATA XREF: .xdata$x:000084FCo
.xdata$x:000084ED                 db 0FFh
.xdata$x:000084EE                 db 0FFh
.xdata$x:000084EF                 db 0FFh
.xdata$x:000084F0                 dd offset __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
.xdata$x:000084F4 __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ db  22h ; "
.xdata$x:000084F4                                         ; DATA XREF: __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ+11o
.xdata$x:000084F5                 db    5
.xdata$x:000084F6                 db  93h ; Ã´
.xdata$x:000084F7                 db  19h
.xdata$x:000084F8                 db    1
.xdata$x:000084F9                 db    0
.xdata$x:000084FA                 db    0
.xdata$x:000084FB                 db    0
.xdata$x:000084FC                 dd offset __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
.xdata$x:00008500                 db    0
.xdata$x:00008501                 db    0
.xdata$x:00008502                 db    0
.xdata$x:00008503                 db    0
.xdata$x:00008504                 db    0
.xdata$x:00008505                 db    0
.xdata$x:00008506                 db    0
.xdata$x:00008507                 db    0
.xdata$x:00008508                 db    0
.xdata$x:00008509                 db    0
.xdata$x:0000850A                 db    0
.xdata$x:0000850B                 db    0
.xdata$x:0000850C                 db    0
.xdata$x:0000850D                 db    0
.xdata$x:0000850E                 db    0
.xdata$x:0000850F                 db    0
.xdata$x:00008510                 db    0
.xdata$x:00008511                 db    0
.xdata$x:00008512                 db    0
.xdata$x:00008513                 db    0
.xdata$x:00008514                 db    0
.xdata$x:00008515                 db    0
.xdata$x:00008516                 db    0
.xdata$x:00008517                 db    0
.xdata$x:00008517 _xdata$x        ends
.xdata$x:00008517
.xdata$x:00008518 ; ===========================================================================
.xdata$x:00008518
.xdata$x:00008518 ; Segment type: Pure data
.xdata$x:00008518 ; Segment permissions: Read
.xdata$x:00008518 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008518                 assume cs:_xdata$x
.xdata$x:00008518                 ;org 8518h
.xdata$x:00008518 ; COMDAT (pick associative to section at 6A60)
.xdata$x:00008518 __unwindtable$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z db 0FFh
.xdata$x:00008518                                         ; DATA XREF: .xdata$x:00008528o
.xdata$x:00008519                 db 0FFh
.xdata$x:0000851A                 db 0FFh
.xdata$x:0000851B                 db 0FFh
.xdata$x:0000851C                 dd offset __unwindfunclet$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z$0
.xdata$x:00008520 __ehfuncinfo$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z db  22h ; "
.xdata$x:00008520                                         ; DATA XREF: __ehhandler$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z+11o
.xdata$x:00008521                 db    5
.xdata$x:00008522                 db  93h ; Ã´
.xdata$x:00008523                 db  19h
.xdata$x:00008524                 db    1
.xdata$x:00008525                 db    0
.xdata$x:00008526                 db    0
.xdata$x:00008527                 db    0
.xdata$x:00008528                 dd offset __unwindtable$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
.xdata$x:0000852C                 db    0
.xdata$x:0000852D                 db    0
.xdata$x:0000852E                 db    0
.xdata$x:0000852F                 db    0
.xdata$x:00008530                 db    0
.xdata$x:00008531                 db    0
.xdata$x:00008532                 db    0
.xdata$x:00008533                 db    0
.xdata$x:00008534                 db    0
.xdata$x:00008535                 db    0
.xdata$x:00008536                 db    0
.xdata$x:00008537                 db    0
.xdata$x:00008538                 db    0
.xdata$x:00008539                 db    0
.xdata$x:0000853A                 db    0
.xdata$x:0000853B                 db    0
.xdata$x:0000853C                 db    0
.xdata$x:0000853D                 db    0
.xdata$x:0000853E                 db    0
.xdata$x:0000853F                 db    0
.xdata$x:00008540                 db    0
.xdata$x:00008541                 db    0
.xdata$x:00008542                 db    0
.xdata$x:00008543                 db    0
.xdata$x:00008543 _xdata$x        ends
.xdata$x:00008543
.xdata$x:00008544 ; ===========================================================================
.xdata$x:00008544
.xdata$x:00008544 ; Segment type: Pure data
.xdata$x:00008544 ; Segment permissions: Read
.xdata$x:00008544 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008544                 assume cs:_xdata$x
.xdata$x:00008544                 ;org 8544h
.xdata$x:00008544 ; COMDAT (pick associative to section at 54DC)
.xdata$x:00008544 __unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z db 0FFh
.xdata$x:00008544                                         ; DATA XREF: .xdata$x:00008554o
.xdata$x:00008545                 db 0FFh
.xdata$x:00008546                 db 0FFh
.xdata$x:00008547                 db 0FFh
.xdata$x:00008548                 dd offset __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0
.xdata$x:0000854C __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z db  22h ; "
.xdata$x:0000854C                                         ; DATA XREF: __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z+11o
.xdata$x:0000854D                 db    5
.xdata$x:0000854E                 db  93h ; Ã´
.xdata$x:0000854F                 db  19h
.xdata$x:00008550                 db    1
.xdata$x:00008551                 db    0
.xdata$x:00008552                 db    0
.xdata$x:00008553                 db    0
.xdata$x:00008554                 dd offset __unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.xdata$x:00008558                 db    0
.xdata$x:00008559                 db    0
.xdata$x:0000855A                 db    0
.xdata$x:0000855B                 db    0
.xdata$x:0000855C                 db    0
.xdata$x:0000855D                 db    0
.xdata$x:0000855E                 db    0
.xdata$x:0000855F                 db    0
.xdata$x:00008560                 db    0
.xdata$x:00008561                 db    0
.xdata$x:00008562                 db    0
.xdata$x:00008563                 db    0
.xdata$x:00008564                 db    0
.xdata$x:00008565                 db    0
.xdata$x:00008566                 db    0
.xdata$x:00008567                 db    0
.xdata$x:00008568                 db    0
.xdata$x:00008569                 db    0
.xdata$x:0000856A                 db    0
.xdata$x:0000856B                 db    0
.xdata$x:0000856C                 db    0
.xdata$x:0000856D                 db    0
.xdata$x:0000856E                 db    0
.xdata$x:0000856F                 db    0
.xdata$x:0000856F _xdata$x        ends
.xdata$x:0000856F
.xdata$x:00008570 ; ===========================================================================
.xdata$x:00008570
.xdata$x:00008570 ; Segment type: Pure data
.xdata$x:00008570 ; Segment permissions: Read
.xdata$x:00008570 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008570                 assume cs:_xdata$x
.xdata$x:00008570                 ;org 8570h
.xdata$x:00008570 ; COMDAT (pick associative to section at 53A8)
.xdata$x:00008570 __unwindtable$??1_Iterator_base12@std@@QAE@XZ db 0FFh
.xdata$x:00008570                                         ; DATA XREF: .xdata$x:00008580o
.xdata$x:00008571                 db 0FFh
.xdata$x:00008572                 db 0FFh
.xdata$x:00008573                 db 0FFh
.xdata$x:00008574                 dd offset __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0
.xdata$x:00008578 __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ db  22h ; "
.xdata$x:00008578                                         ; DATA XREF: __ehhandler$??1_Iterator_base12@std@@QAE@XZ+11o
.xdata$x:00008579                 db    5
.xdata$x:0000857A                 db  93h ; Ã´
.xdata$x:0000857B                 db  19h
.xdata$x:0000857C                 db    1
.xdata$x:0000857D                 db    0
.xdata$x:0000857E                 db    0
.xdata$x:0000857F                 db    0
.xdata$x:00008580                 dd offset __unwindtable$??1_Iterator_base12@std@@QAE@XZ
.xdata$x:00008584                 db    0
.xdata$x:00008585                 db    0
.xdata$x:00008586                 db    0
.xdata$x:00008587                 db    0
.xdata$x:00008588                 db    0
.xdata$x:00008589                 db    0
.xdata$x:0000858A                 db    0
.xdata$x:0000858B                 db    0
.xdata$x:0000858C                 db    0
.xdata$x:0000858D                 db    0
.xdata$x:0000858E                 db    0
.xdata$x:0000858F                 db    0
.xdata$x:00008590                 db    0
.xdata$x:00008591                 db    0
.xdata$x:00008592                 db    0
.xdata$x:00008593                 db    0
.xdata$x:00008594                 db    0
.xdata$x:00008595                 db    0
.xdata$x:00008596                 db    0
.xdata$x:00008597                 db    0
.xdata$x:00008598                 db    0
.xdata$x:00008599                 db    0
.xdata$x:0000859A                 db    0
.xdata$x:0000859B                 db    0
.xdata$x:0000859B _xdata$x        ends
.xdata$x:0000859B
.xdata$x:0000859C ; ===========================================================================
.xdata$x:0000859C
.xdata$x:0000859C ; Segment type: Pure data
.xdata$x:0000859C ; Segment permissions: Read
.xdata$x:0000859C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000859C                 assume cs:_xdata$x
.xdata$x:0000859C                 ;org 859Ch
.xdata$x:0000859C ; COMDAT (pick associative to section at 5AD8)
.xdata$x:0000859C __unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z db 0FFh
.xdata$x:0000859C                                         ; DATA XREF: .xdata$x:000085B4o
.xdata$x:0000859D                 db 0FFh
.xdata$x:0000859E                 db 0FFh
.xdata$x:0000859F                 db 0FFh
.xdata$x:000085A0                 dd offset __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0
.xdata$x:000085A4                 db 0FFh
.xdata$x:000085A5                 db 0FFh
.xdata$x:000085A6                 db 0FFh
.xdata$x:000085A7                 db 0FFh
.xdata$x:000085A8                 dd offset __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1
.xdata$x:000085AC __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z db  22h ; "
.xdata$x:000085AC                                         ; DATA XREF: __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z+11o
.xdata$x:000085AD                 db    5
.xdata$x:000085AE                 db  93h ; Ã´
.xdata$x:000085AF                 db  19h
.xdata$x:000085B0                 db    2
.xdata$x:000085B1                 db    0
.xdata$x:000085B2                 db    0
.xdata$x:000085B3                 db    0
.xdata$x:000085B4                 dd offset __unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.xdata$x:000085B8                 db    0
.xdata$x:000085B9                 db    0
.xdata$x:000085BA                 db    0
.xdata$x:000085BB                 db    0
.xdata$x:000085BC                 db    0
.xdata$x:000085BD                 db    0
.xdata$x:000085BE                 db    0
.xdata$x:000085BF                 db    0
.xdata$x:000085C0                 db    0
.xdata$x:000085C1                 db    0
.xdata$x:000085C2                 db    0
.xdata$x:000085C3                 db    0
.xdata$x:000085C4                 db    0
.xdata$x:000085C5                 db    0
.xdata$x:000085C6                 db    0
.xdata$x:000085C7                 db    0
.xdata$x:000085C8                 db    0
.xdata$x:000085C9                 db    0
.xdata$x:000085CA                 db    0
.xdata$x:000085CB                 db    0
.xdata$x:000085CC                 db    0
.xdata$x:000085CD                 db    0
.xdata$x:000085CE                 db    0
.xdata$x:000085CF                 db    0
.xdata$x:000085CF _xdata$x        ends
.xdata$x:000085CF
.xdata$x:000085D0 ; ===========================================================================
.xdata$x:000085D0
.xdata$x:000085D0 ; Segment type: Pure data
.xdata$x:000085D0 ; Segment permissions: Read
.xdata$x:000085D0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000085D0                 assume cs:_xdata$x
.xdata$x:000085D0                 ;org 85D0h
.xdata$x:000085D0 ; COMDAT (pick associative to section at 40E4)
.xdata$x:000085D0 __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000085D0                                         ; DATA XREF: .xdata$x:000085E0o
.xdata$x:000085D1                 db 0FFh
.xdata$x:000085D2                 db 0FFh
.xdata$x:000085D3                 db 0FFh
.xdata$x:000085D4                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:000085D8 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000085D8                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:000085D9                 db    5
.xdata$x:000085DA                 db  93h ; Ã´
.xdata$x:000085DB                 db  19h
.xdata$x:000085DC                 db    1
.xdata$x:000085DD                 db    0
.xdata$x:000085DE                 db    0
.xdata$x:000085DF                 db    0
.xdata$x:000085E0                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:000085E4                 db    0
.xdata$x:000085E5                 db    0
.xdata$x:000085E6                 db    0
.xdata$x:000085E7                 db    0
.xdata$x:000085E8                 db    0
.xdata$x:000085E9                 db    0
.xdata$x:000085EA                 db    0
.xdata$x:000085EB                 db    0
.xdata$x:000085EC                 db    0
.xdata$x:000085ED                 db    0
.xdata$x:000085EE                 db    0
.xdata$x:000085EF                 db    0
.xdata$x:000085F0                 db    0
.xdata$x:000085F1                 db    0
.xdata$x:000085F2                 db    0
.xdata$x:000085F3                 db    0
.xdata$x:000085F4                 db    0
.xdata$x:000085F5                 db    0
.xdata$x:000085F6                 db    0
.xdata$x:000085F7                 db    0
.xdata$x:000085F8                 db    0
.xdata$x:000085F9                 db    0
.xdata$x:000085FA                 db    0
.xdata$x:000085FB                 db    0
.xdata$x:000085FB _xdata$x        ends
.xdata$x:000085FB
.xdata$x:000085FC ; ===========================================================================
.xdata$x:000085FC
.xdata$x:000085FC ; Segment type: Pure data
.xdata$x:000085FC ; Segment permissions: Read
.xdata$x:000085FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000085FC                 assume cs:_xdata$x
.xdata$x:000085FC                 ;org 85FCh
.xdata$x:000085FC ; COMDAT (pick associative to section at 4D78)
.xdata$x:000085FC __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000085FC                                         ; DATA XREF: .xdata$x:0000860Co
.xdata$x:000085FD                 db 0FFh
.xdata$x:000085FE                 db 0FFh
.xdata$x:000085FF                 db 0FFh
.xdata$x:00008600                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:00008604 __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00008604                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:00008605                 db    5
.xdata$x:00008606                 db  93h ; Ã´
.xdata$x:00008607                 db  19h
.xdata$x:00008608                 db    1
.xdata$x:00008609                 db    0
.xdata$x:0000860A                 db    0
.xdata$x:0000860B                 db    0
.xdata$x:0000860C                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:00008610                 db    0
.xdata$x:00008611                 db    0
.xdata$x:00008612                 db    0
.xdata$x:00008613                 db    0
.xdata$x:00008614                 db    0
.xdata$x:00008615                 db    0
.xdata$x:00008616                 db    0
.xdata$x:00008617                 db    0
.xdata$x:00008618                 db    0
.xdata$x:00008619                 db    0
.xdata$x:0000861A                 db    0
.xdata$x:0000861B                 db    0
.xdata$x:0000861C                 db    0
.xdata$x:0000861D                 db    0
.xdata$x:0000861E                 db    0
.xdata$x:0000861F                 db    0
.xdata$x:00008620                 db    0
.xdata$x:00008621                 db    0
.xdata$x:00008622                 db    0
.xdata$x:00008623                 db    0
.xdata$x:00008624                 db    0
.xdata$x:00008625                 db    0
.xdata$x:00008626                 db    0
.xdata$x:00008627                 db    0
.xdata$x:00008627 _xdata$x        ends
.xdata$x:00008627
.xdata$x:00008628 ; ===========================================================================
.xdata$x:00008628
.xdata$x:00008628 ; Segment type: Pure data
.xdata$x:00008628 ; Segment permissions: Read
.xdata$x:00008628 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008628                 assume cs:_xdata$x
.xdata$x:00008628                 ;org 8628h
.xdata$x:00008628 ; COMDAT (pick associative to section at 3FEC)
.xdata$x:00008628 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db 0FFh
.xdata$x:00008628                                         ; DATA XREF: .xdata$x:00008638o
.xdata$x:00008629                 db 0FFh
.xdata$x:0000862A                 db 0FFh
.xdata$x:0000862B                 db 0FFh
.xdata$x:0000862C                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
.xdata$x:00008630 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db  22h ; "
.xdata$x:00008630                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z+11o
.xdata$x:00008631                 db    5
.xdata$x:00008632                 db  93h ; Ã´
.xdata$x:00008633                 db  19h
.xdata$x:00008634                 db    1
.xdata$x:00008635                 db    0
.xdata$x:00008636                 db    0
.xdata$x:00008637                 db    0
.xdata$x:00008638                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.xdata$x:0000863C                 db    0
.xdata$x:0000863D                 db    0
.xdata$x:0000863E                 db    0
.xdata$x:0000863F                 db    0
.xdata$x:00008640                 db    0
.xdata$x:00008641                 db    0
.xdata$x:00008642                 db    0
.xdata$x:00008643                 db    0
.xdata$x:00008644                 db    0
.xdata$x:00008645                 db    0
.xdata$x:00008646                 db    0
.xdata$x:00008647                 db    0
.xdata$x:00008648                 db    0
.xdata$x:00008649                 db    0
.xdata$x:0000864A                 db    0
.xdata$x:0000864B                 db    0
.xdata$x:0000864C                 db    0
.xdata$x:0000864D                 db    0
.xdata$x:0000864E                 db    0
.xdata$x:0000864F                 db    0
.xdata$x:00008650                 db    0
.xdata$x:00008651                 db    0
.xdata$x:00008652                 db    0
.xdata$x:00008653                 db    0
.xdata$x:00008653 _xdata$x        ends
.xdata$x:00008653
.xdata$x:00008654 ; ===========================================================================
.xdata$x:00008654
.xdata$x:00008654 ; Segment type: Pure data
.xdata$x:00008654 ; Segment permissions: Read
.xdata$x:00008654 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008654                 assume cs:_xdata$x
.xdata$x:00008654                 ;org 8654h
.xdata$x:00008654 ; COMDAT (pick associative to section at 4C88)
.xdata$x:00008654 __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00008654                                         ; DATA XREF: .xdata$x:00008664o
.xdata$x:00008655                 db 0FFh
.xdata$x:00008656                 db 0FFh
.xdata$x:00008657                 db 0FFh
.xdata$x:00008658                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000865C __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000865C                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000865D                 db    5
.xdata$x:0000865E                 db  93h ; Ã´
.xdata$x:0000865F                 db  19h
.xdata$x:00008660                 db    1
.xdata$x:00008661                 db    0
.xdata$x:00008662                 db    0
.xdata$x:00008663                 db    0
.xdata$x:00008664                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.xdata$x:00008668                 align 20h
.xdata$x:00008668 _xdata$x        ends
.xdata$x:00008668
.xdata$x:00008680 ; ===========================================================================
.xdata$x:00008680
.xdata$x:00008680 ; Segment type: Pure data
.xdata$x:00008680 ; Segment permissions: Read
.xdata$x:00008680 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008680                 assume cs:_xdata$x
.xdata$x:00008680                 ;org 8680h
.xdata$x:00008680 ; COMDAT (pick associative to section at 45A4)
.xdata$x:00008680 __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db 0FFh
.xdata$x:00008680                                         ; DATA XREF: .xdata$x:00008690o
.xdata$x:00008681                 db 0FFh
.xdata$x:00008682                 db 0FFh
.xdata$x:00008683                 db 0FFh
.xdata$x:00008684                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
.xdata$x:00008688 __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db  22h ; "
.xdata$x:00008688                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z+11o
.xdata$x:00008689                 db    5
.xdata$x:0000868A                 db  93h ; Ã´
.xdata$x:0000868B                 db  19h
.xdata$x:0000868C                 db    1
.xdata$x:0000868D                 db    0
.xdata$x:0000868E                 db    0
.xdata$x:0000868F                 db    0
.xdata$x:00008690                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.xdata$x:00008694                 db    0
.xdata$x:00008695                 db    0
.xdata$x:00008696                 db    0
.xdata$x:00008697                 db    0
.xdata$x:00008698                 db    0
.xdata$x:00008699                 db    0
.xdata$x:0000869A                 db    0
.xdata$x:0000869B                 db    0
.xdata$x:0000869C                 db    0
.xdata$x:0000869D                 db    0
.xdata$x:0000869E                 db    0
.xdata$x:0000869F                 db    0
.xdata$x:000086A0                 db    0
.xdata$x:000086A1                 db    0
.xdata$x:000086A2                 db    0
.xdata$x:000086A3                 db    0
.xdata$x:000086A4                 db    0
.xdata$x:000086A5                 db    0
.xdata$x:000086A6                 db    0
.xdata$x:000086A7                 db    0
.xdata$x:000086A8                 db    0
.xdata$x:000086A9                 db    0
.xdata$x:000086AA                 db    0
.xdata$x:000086AB                 db    0
.xdata$x:000086AB _xdata$x        ends
.xdata$x:000086AB
.xdata$x:000086AC ; ===========================================================================
.xdata$x:000086AC
.xdata$x:000086AC ; Segment type: Pure data
.xdata$x:000086AC ; Segment permissions: Read
.xdata$x:000086AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000086AC                 assume cs:_xdata$x
.xdata$x:000086AC                 ;org 86ACh
.xdata$x:000086AC ; COMDAT (pick associative to section at 5020)
.xdata$x:000086AC __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db 0FFh
.xdata$x:000086AC                                         ; DATA XREF: .xdata$x:000086BCo
.xdata$x:000086AD                 db 0FFh
.xdata$x:000086AE                 db 0FFh
.xdata$x:000086AF                 db 0FFh
.xdata$x:000086B0                 dd offset __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
.xdata$x:000086B4 __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db  22h ; "
.xdata$x:000086B4                                         ; DATA XREF: __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ+11o
.xdata$x:000086B5                 db    5
.xdata$x:000086B6                 db  93h ; Ã´
.xdata$x:000086B7                 db  19h
.xdata$x:000086B8                 db    1
.xdata$x:000086B9                 db    0
.xdata$x:000086BA                 db    0
.xdata$x:000086BB                 db    0
.xdata$x:000086BC                 dd offset __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.xdata$x:000086C0                 db    0
.xdata$x:000086C1                 db    0
.xdata$x:000086C2                 db    0
.xdata$x:000086C3                 db    0
.xdata$x:000086C4                 db    0
.xdata$x:000086C5                 db    0
.xdata$x:000086C6                 db    0
.xdata$x:000086C7                 db    0
.xdata$x:000086C8                 db    0
.xdata$x:000086C9                 db    0
.xdata$x:000086CA                 db    0
.xdata$x:000086CB                 db    0
.xdata$x:000086CC                 db    0
.xdata$x:000086CD                 db    0
.xdata$x:000086CE                 db    0
.xdata$x:000086CF                 db    0
.xdata$x:000086D0                 db    0
.xdata$x:000086D1                 db    0
.xdata$x:000086D2                 db    0
.xdata$x:000086D3                 db    0
.xdata$x:000086D4                 db    0
.xdata$x:000086D5                 db    0
.xdata$x:000086D6                 db    0
.xdata$x:000086D7                 db    0
.xdata$x:000086D7 _xdata$x        ends
.xdata$x:000086D7
.xdata$x:000086D8 ; ===========================================================================
.xdata$x:000086D8
.xdata$x:000086D8 ; Segment type: Pure data
.xdata$x:000086D8 ; Segment permissions: Read
.xdata$x:000086D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000086D8                 assume cs:_xdata$x
.xdata$x:000086D8                 ;org 86D8h
.xdata$x:000086D8 ; COMDAT (pick associative to section at 5D0C)
.xdata$x:000086D8 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 db    0
.xdata$x:000086D8                                         ; DATA XREF: .xdata$x:00008760o
.xdata$x:000086D9                 db    0
.xdata$x:000086DA                 db    0
.xdata$x:000086DB                 db    0
.xdata$x:000086DC                 db    0
.xdata$x:000086DD                 db    0
.xdata$x:000086DE                 db    0
.xdata$x:000086DF                 db    0
.xdata$x:000086E0                 db    0
.xdata$x:000086E1                 db    0
.xdata$x:000086E2                 db    0
.xdata$x:000086E3                 db    0
.xdata$x:000086E4                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.xdata$x:000086E8 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 db    0
.xdata$x:000086E8                                         ; DATA XREF: .xdata$x:0000874Co
.xdata$x:000086E9                 db    0
.xdata$x:000086EA                 db    0
.xdata$x:000086EB                 db    0
.xdata$x:000086EC                 db    0
.xdata$x:000086ED                 db    0
.xdata$x:000086EE                 db    0
.xdata$x:000086EF                 db    0
.xdata$x:000086F0                 db    0
.xdata$x:000086F1                 db    0
.xdata$x:000086F2                 db    0
.xdata$x:000086F3                 db    0
.xdata$x:000086F4                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
.xdata$x:000086F8 __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db 0FFh
.xdata$x:000086F8                                         ; DATA XREF: .xdata$x:00008720o
.xdata$x:000086F9                 db 0FFh
.xdata$x:000086FA                 db 0FFh
.xdata$x:000086FB                 db 0FFh
.xdata$x:000086FC                 db    0
.xdata$x:000086FD                 db    0
.xdata$x:000086FE                 db    0
.xdata$x:000086FF                 db    0
.xdata$x:00008700                 db 0FFh
.xdata$x:00008701                 db 0FFh
.xdata$x:00008702                 db 0FFh
.xdata$x:00008703                 db 0FFh
.xdata$x:00008704                 db    0
.xdata$x:00008705                 db    0
.xdata$x:00008706                 db    0
.xdata$x:00008707                 db    0
.xdata$x:00008708                 db    1
.xdata$x:00008709                 db    0
.xdata$x:0000870A                 db    0
.xdata$x:0000870B                 db    0
.xdata$x:0000870C                 db    0
.xdata$x:0000870D                 db    0
.xdata$x:0000870E                 db    0
.xdata$x:0000870F                 db    0
.xdata$x:00008710                 db    1
.xdata$x:00008711                 db    0
.xdata$x:00008712                 db    0
.xdata$x:00008713                 db    0
.xdata$x:00008714                 db    0
.xdata$x:00008715                 db    0
.xdata$x:00008716                 db    0
.xdata$x:00008717                 db    0
.xdata$x:00008718 __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:00008718                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z+11o
.xdata$x:00008719                 db    5
.xdata$x:0000871A                 db  93h ; Ã´
.xdata$x:0000871B                 db  19h
.xdata$x:0000871C                 db    4
.xdata$x:0000871D                 db    0
.xdata$x:0000871E                 db    0
.xdata$x:0000871F                 db    0
.xdata$x:00008720                 dd offset __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:00008724                 db    2
.xdata$x:00008725                 db    0
.xdata$x:00008726                 db    0
.xdata$x:00008727                 db    0
.xdata$x:00008728                 dd offset __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:0000872C                 db    0
.xdata$x:0000872D                 db    0
.xdata$x:0000872E                 db    0
.xdata$x:0000872F                 db    0
.xdata$x:00008730                 db    0
.xdata$x:00008731                 db    0
.xdata$x:00008732                 db    0
.xdata$x:00008733                 db    0
.xdata$x:00008734                 db    0
.xdata$x:00008735                 db    0
.xdata$x:00008736                 db    0
.xdata$x:00008737                 db    0
.xdata$x:00008738                 db    0
.xdata$x:00008739                 db    0
.xdata$x:0000873A                 db    0
.xdata$x:0000873B                 db    0
.xdata$x:0000873C __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db    2
.xdata$x:0000873C                                         ; DATA XREF: .xdata$x:00008728o
.xdata$x:0000873D                 db    0
.xdata$x:0000873E                 db    0
.xdata$x:0000873F                 db    0
.xdata$x:00008740                 db    2
.xdata$x:00008741                 db    0
.xdata$x:00008742                 db    0
.xdata$x:00008743                 db    0
.xdata$x:00008744                 db    3
.xdata$x:00008745                 db    0
.xdata$x:00008746                 db    0
.xdata$x:00008747                 db    0
.xdata$x:00008748                 db    1
.xdata$x:00008749                 db    0
.xdata$x:0000874A                 db    0
.xdata$x:0000874B                 db    0
.xdata$x:0000874C                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
.xdata$x:00008750                 db    0
.xdata$x:00008751                 db    0
.xdata$x:00008752                 db    0
.xdata$x:00008753                 db    0
.xdata$x:00008754                 db    0
.xdata$x:00008755                 db    0
.xdata$x:00008756                 db    0
.xdata$x:00008757                 db    0
.xdata$x:00008758                 db    3
.xdata$x:00008759                 db    0
.xdata$x:0000875A                 db    0
.xdata$x:0000875B                 db    0
.xdata$x:0000875C                 db    1
.xdata$x:0000875D                 db    0
.xdata$x:0000875E                 db    0
.xdata$x:0000875F                 db    0
.xdata$x:00008760                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
.xdata$x:00008760 _xdata$x        ends
.xdata$x:00008760
.xdata$x:00008764 ; ===========================================================================
.xdata$x:00008764
.xdata$x:00008764 ; Segment type: Pure data
.xdata$x:00008764 ; Segment permissions: Read
.xdata$x:00008764 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008764                 assume cs:_xdata$x
.xdata$x:00008764                 ;org 8764h
.xdata$x:00008764 ; COMDAT (pick associative to section at 4884)
.xdata$x:00008764 __unwindtable$??0StaticDialog@@QAE@XZ db 0FFh
.xdata$x:00008764                                         ; DATA XREF: .xdata$x:00008774o
.xdata$x:00008765                 db 0FFh
.xdata$x:00008766                 db 0FFh
.xdata$x:00008767                 db 0FFh
.xdata$x:00008768                 dd offset __unwindfunclet$??0StaticDialog@@QAE@XZ$0
.xdata$x:0000876C __ehfuncinfo$??0StaticDialog@@QAE@XZ db  22h ; "
.xdata$x:0000876C                                         ; DATA XREF: __ehhandler$??0StaticDialog@@QAE@XZ+11o
.xdata$x:0000876D                 db    5
.xdata$x:0000876E                 db  93h ; Ã´
.xdata$x:0000876F                 db  19h
.xdata$x:00008770                 db    1
.xdata$x:00008771                 db    0
.xdata$x:00008772                 db    0
.xdata$x:00008773                 db    0
.xdata$x:00008774                 dd offset __unwindtable$??0StaticDialog@@QAE@XZ
.xdata$x:00008778                 db    0
.xdata$x:00008779                 db    0
.xdata$x:0000877A                 db    0
.xdata$x:0000877B                 db    0
.xdata$x:0000877C                 db    0
.xdata$x:0000877D                 db    0
.xdata$x:0000877E                 db    0
.xdata$x:0000877F                 db    0
.xdata$x:00008780                 db    0
.xdata$x:00008781                 db    0
.xdata$x:00008782                 db    0
.xdata$x:00008783                 db    0
.xdata$x:00008784                 db    0
.xdata$x:00008785                 db    0
.xdata$x:00008786                 db    0
.xdata$x:00008787                 db    0
.xdata$x:00008788                 db    0
.xdata$x:00008789                 db    0
.xdata$x:0000878A                 db    0
.xdata$x:0000878B                 db    0
.xdata$x:0000878C                 db    0
.xdata$x:0000878D                 db    0
.xdata$x:0000878E                 db    0
.xdata$x:0000878F                 db    0
.xdata$x:0000878F _xdata$x        ends
.xdata$x:0000878F
.xdata$x:00008790 ; ===========================================================================
.xdata$x:00008790
.xdata$x:00008790 ; Segment type: Pure data
.xdata$x:00008790 ; Segment permissions: Read
.xdata$x:00008790 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008790                 assume cs:_xdata$x
.xdata$x:00008790                 ;org 8790h
.xdata$x:00008790 ; COMDAT (pick associative to section at 5190)
.xdata$x:00008790 __unwindtable$??1StaticDialog@@UAE@XZ db 0FFh
.xdata$x:00008790                                         ; DATA XREF: .xdata$x:000087A0o
.xdata$x:00008791                 db 0FFh
.xdata$x:00008792                 db 0FFh
.xdata$x:00008793                 db 0FFh
.xdata$x:00008794                 dd offset __unwindfunclet$??1StaticDialog@@UAE@XZ$0
.xdata$x:00008798 __ehfuncinfo$??1StaticDialog@@UAE@XZ db  22h ; "
.xdata$x:00008798                                         ; DATA XREF: __ehhandler$??1StaticDialog@@UAE@XZ+11o
.xdata$x:00008799                 db    5
.xdata$x:0000879A                 db  93h ; Ã´
.xdata$x:0000879B                 db  19h
.xdata$x:0000879C                 db    1
.xdata$x:0000879D                 db    0
.xdata$x:0000879E                 db    0
.xdata$x:0000879F                 db    0
.xdata$x:000087A0                 dd offset __unwindtable$??1StaticDialog@@UAE@XZ
.xdata$x:000087A4                 db    0
.xdata$x:000087A5                 db    0
.xdata$x:000087A6                 db    0
.xdata$x:000087A7                 db    0
.xdata$x:000087A8                 db    0
.xdata$x:000087A9                 db    0
.xdata$x:000087AA                 db    0
.xdata$x:000087AB                 db    0
.xdata$x:000087AC                 db    0
.xdata$x:000087AD                 db    0
.xdata$x:000087AE                 db    0
.xdata$x:000087AF                 db    0
.xdata$x:000087B0                 db    0
.xdata$x:000087B1                 db    0
.xdata$x:000087B2                 db    0
.xdata$x:000087B3                 db    0
.xdata$x:000087B4                 db    0
.xdata$x:000087B5                 db    0
.xdata$x:000087B6                 db    0
.xdata$x:000087B7                 db    0
.xdata$x:000087B8                 db    0
.xdata$x:000087B9                 db    0
.xdata$x:000087BA                 db    0
.xdata$x:000087BB                 db    0
.xdata$x:000087BB _xdata$x        ends
.xdata$x:000087BB
.xdata$x:000087BC ; ===========================================================================
.xdata$x:000087BC
.xdata$x:000087BC ; Segment type: Pure data
.xdata$x:000087BC ; Segment permissions: Read
.xdata$x:000087BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000087BC                 assume cs:_xdata$x
.xdata$x:000087BC                 ;org 87BCh
.xdata$x:000087BC ; COMDAT (pick associative to section at 49FC)
.xdata$x:000087BC __unwindtable$??0_Generic_error_category@std@@QAE@XZ db 0FFh
.xdata$x:000087BC                                         ; DATA XREF: .xdata$x:000087CCo
.xdata$x:000087BD                 db 0FFh
.xdata$x:000087BE                 db 0FFh
.xdata$x:000087BF                 db 0FFh
.xdata$x:000087C0                 dd offset __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0
.xdata$x:000087C4 __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:000087C4                                         ; DATA XREF: __ehhandler$??0_Generic_error_category@std@@QAE@XZ+11o
.xdata$x:000087C5                 db    5
.xdata$x:000087C6                 db  93h ; Ã´
.xdata$x:000087C7                 db  19h
.xdata$x:000087C8                 db    1
.xdata$x:000087C9                 db    0
.xdata$x:000087CA                 db    0
.xdata$x:000087CB                 db    0
.xdata$x:000087CC                 dd offset __unwindtable$??0_Generic_error_category@std@@QAE@XZ
.xdata$x:000087D0                 db    0
.xdata$x:000087D1                 db    0
.xdata$x:000087D2                 db    0
.xdata$x:000087D3                 db    0
.xdata$x:000087D4                 db    0
.xdata$x:000087D5                 db    0
.xdata$x:000087D6                 db    0
.xdata$x:000087D7                 db    0
.xdata$x:000087D8                 db    0
.xdata$x:000087D9                 db    0
.xdata$x:000087DA                 db    0
.xdata$x:000087DB                 db    0
.xdata$x:000087DC                 db    0
.xdata$x:000087DD                 db    0
.xdata$x:000087DE                 db    0
.xdata$x:000087DF                 db    0
.xdata$x:000087E0                 db    0
.xdata$x:000087E1                 db    0
.xdata$x:000087E2                 db    0
.xdata$x:000087E3                 db    0
.xdata$x:000087E4                 db    0
.xdata$x:000087E5                 db    0
.xdata$x:000087E6                 db    0
.xdata$x:000087E7                 db    0
.xdata$x:000087E7 _xdata$x        ends
.xdata$x:000087E7
.xdata$x:000087E8 ; ===========================================================================
.xdata$x:000087E8
.xdata$x:000087E8 ; Segment type: Pure data
.xdata$x:000087E8 ; Segment permissions: Read
.xdata$x:000087E8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000087E8                 assume cs:_xdata$x
.xdata$x:000087E8                 ;org 87E8h
.xdata$x:000087E8 ; COMDAT (pick associative to section at 7DD4)
.xdata$x:000087E8 __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:000087E8                                         ; DATA XREF: .xdata$x:000087F8o
.xdata$x:000087E9                 db 0FFh
.xdata$x:000087EA                 db 0FFh
.xdata$x:000087EB                 db 0FFh
.xdata$x:000087EC                 dd offset __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:000087F0 __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:000087F0                                         ; DATA XREF: __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:000087F1                 db    5
.xdata$x:000087F2                 db  93h ; Ã´
.xdata$x:000087F3                 db  19h
.xdata$x:000087F4                 db    1
.xdata$x:000087F5                 db    0
.xdata$x:000087F6                 db    0
.xdata$x:000087F7                 db    0
.xdata$x:000087F8                 dd offset __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:000087FC                 db    0
.xdata$x:000087FD                 db    0
.xdata$x:000087FE                 db    0
.xdata$x:000087FF                 db    0
.xdata$x:00008800                 db    0
.xdata$x:00008801                 db    0
.xdata$x:00008802                 db    0
.xdata$x:00008803                 db    0
.xdata$x:00008804                 db    0
.xdata$x:00008805                 db    0
.xdata$x:00008806                 db    0
.xdata$x:00008807                 db    0
.xdata$x:00008808                 db    0
.xdata$x:00008809                 db    0
.xdata$x:0000880A                 db    0
.xdata$x:0000880B                 db    0
.xdata$x:0000880C                 db    0
.xdata$x:0000880D                 db    0
.xdata$x:0000880E                 db    0
.xdata$x:0000880F                 db    0
.xdata$x:00008810                 db    0
.xdata$x:00008811                 db    0
.xdata$x:00008812                 db    0
.xdata$x:00008813                 db    0
.xdata$x:00008813 _xdata$x        ends
.xdata$x:00008813
.xdata$x:00008814 ; ===========================================================================
.xdata$x:00008814
.xdata$x:00008814 ; Segment type: Pure data
.xdata$x:00008814 ; Segment permissions: Read
.xdata$x:00008814 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008814                 assume cs:_xdata$x
.xdata$x:00008814                 ;org 8814h
.xdata$x:00008814 ; COMDAT (pick associative to section at 52C8)
.xdata$x:00008814 __unwindtable$??1_Generic_error_category@std@@UAE@XZ db 0FFh
.xdata$x:00008814                                         ; DATA XREF: .xdata$x:00008824o
.xdata$x:00008815                 db 0FFh
.xdata$x:00008816                 db 0FFh
.xdata$x:00008817                 db 0FFh
.xdata$x:00008818                 dd offset __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0
.xdata$x:0000881C __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000881C                                         ; DATA XREF: __ehhandler$??1_Generic_error_category@std@@UAE@XZ+11o
.xdata$x:0000881D                 db    5
.xdata$x:0000881E                 db  93h ; Ã´
.xdata$x:0000881F                 db  19h
.xdata$x:00008820                 db    1
.xdata$x:00008821                 db    0
.xdata$x:00008822                 db    0
.xdata$x:00008823                 db    0
.xdata$x:00008824                 dd offset __unwindtable$??1_Generic_error_category@std@@UAE@XZ
.xdata$x:00008828                 align 20h
.xdata$x:00008828 _xdata$x        ends
.xdata$x:00008828
.xdata$x:00008840 ; ===========================================================================
.xdata$x:00008840
.xdata$x:00008840 ; Segment type: Pure data
.xdata$x:00008840 ; Segment permissions: Read
.xdata$x:00008840 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008840                 assume cs:_xdata$x
.xdata$x:00008840                 ;org 8840h
.xdata$x:00008840 ; COMDAT (pick associative to section at 4A78)
.xdata$x:00008840 __unwindtable$??0_Iostream_error_category@std@@QAE@XZ db 0FFh
.xdata$x:00008840                                         ; DATA XREF: .xdata$x:00008850o
.xdata$x:00008841                 db 0FFh
.xdata$x:00008842                 db 0FFh
.xdata$x:00008843                 db 0FFh
.xdata$x:00008844                 dd offset __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0
.xdata$x:00008848 __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:00008848                                         ; DATA XREF: __ehhandler$??0_Iostream_error_category@std@@QAE@XZ+11o
.xdata$x:00008849                 db    5
.xdata$x:0000884A                 db  93h ; Ã´
.xdata$x:0000884B                 db  19h
.xdata$x:0000884C                 db    1
.xdata$x:0000884D                 db    0
.xdata$x:0000884E                 db    0
.xdata$x:0000884F                 db    0
.xdata$x:00008850                 dd offset __unwindtable$??0_Iostream_error_category@std@@QAE@XZ
.xdata$x:00008854                 db    0
.xdata$x:00008855                 db    0
.xdata$x:00008856                 db    0
.xdata$x:00008857                 db    0
.xdata$x:00008858                 db    0
.xdata$x:00008859                 db    0
.xdata$x:0000885A                 db    0
.xdata$x:0000885B                 db    0
.xdata$x:0000885C                 db    0
.xdata$x:0000885D                 db    0
.xdata$x:0000885E                 db    0
.xdata$x:0000885F                 db    0
.xdata$x:00008860                 db    0
.xdata$x:00008861                 db    0
.xdata$x:00008862                 db    0
.xdata$x:00008863                 db    0
.xdata$x:00008864                 db    0
.xdata$x:00008865                 db    0
.xdata$x:00008866                 db    0
.xdata$x:00008867                 db    0
.xdata$x:00008868                 db    0
.xdata$x:00008869                 db    0
.xdata$x:0000886A                 db    0
.xdata$x:0000886B                 db    0
.xdata$x:0000886B _xdata$x        ends
.xdata$x:0000886B
.xdata$x:0000886C ; ===========================================================================
.xdata$x:0000886C
.xdata$x:0000886C ; Segment type: Pure data
.xdata$x:0000886C ; Segment permissions: Read
.xdata$x:0000886C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000886C                 assume cs:_xdata$x
.xdata$x:0000886C                 ;org 886Ch
.xdata$x:0000886C ; COMDAT (pick associative to section at 7E8C)
.xdata$x:0000886C __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000886C                                         ; DATA XREF: .xdata$x:0000887Co
.xdata$x:0000886D                 db 0FFh
.xdata$x:0000886E                 db 0FFh
.xdata$x:0000886F                 db 0FFh
.xdata$x:00008870                 dd offset __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:00008874 __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:00008874                                         ; DATA XREF: __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:00008875                 db    5
.xdata$x:00008876                 db  93h ; Ã´
.xdata$x:00008877                 db  19h
.xdata$x:00008878                 db    1
.xdata$x:00008879                 db    0
.xdata$x:0000887A                 db    0
.xdata$x:0000887B                 db    0
.xdata$x:0000887C                 dd offset __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:00008880                 db    0
.xdata$x:00008881                 db    0
.xdata$x:00008882                 db    0
.xdata$x:00008883                 db    0
.xdata$x:00008884                 db    0
.xdata$x:00008885                 db    0
.xdata$x:00008886                 db    0
.xdata$x:00008887                 db    0
.xdata$x:00008888                 db    0
.xdata$x:00008889                 db    0
.xdata$x:0000888A                 db    0
.xdata$x:0000888B                 db    0
.xdata$x:0000888C                 db    0
.xdata$x:0000888D                 db    0
.xdata$x:0000888E                 db    0
.xdata$x:0000888F                 db    0
.xdata$x:00008890                 db    0
.xdata$x:00008891                 db    0
.xdata$x:00008892                 db    0
.xdata$x:00008893                 db    0
.xdata$x:00008894                 db    0
.xdata$x:00008895                 db    0
.xdata$x:00008896                 db    0
.xdata$x:00008897                 db    0
.xdata$x:00008897 _xdata$x        ends
.xdata$x:00008897
.xdata$x:00008898 ; ===========================================================================
.xdata$x:00008898
.xdata$x:00008898 ; Segment type: Pure data
.xdata$x:00008898 ; Segment permissions: Read
.xdata$x:00008898 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008898                 assume cs:_xdata$x
.xdata$x:00008898                 ;org 8898h
.xdata$x:00008898 ; COMDAT (pick associative to section at 5338)
.xdata$x:00008898 __unwindtable$??1_Iostream_error_category@std@@UAE@XZ db 0FFh
.xdata$x:00008898                                         ; DATA XREF: .xdata$x:000088A8o
.xdata$x:00008899                 db 0FFh
.xdata$x:0000889A                 db 0FFh
.xdata$x:0000889B                 db 0FFh
.xdata$x:0000889C                 dd offset __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0
.xdata$x:000088A0 __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:000088A0                                         ; DATA XREF: __ehhandler$??1_Iostream_error_category@std@@UAE@XZ+11o
.xdata$x:000088A1                 db    5
.xdata$x:000088A2                 db  93h ; Ã´
.xdata$x:000088A3                 db  19h
.xdata$x:000088A4                 db    1
.xdata$x:000088A5                 db    0
.xdata$x:000088A6                 db    0
.xdata$x:000088A7                 db    0
.xdata$x:000088A8                 dd offset __unwindtable$??1_Iostream_error_category@std@@UAE@XZ
.xdata$x:000088AC                 db    0
.xdata$x:000088AD                 db    0
.xdata$x:000088AE                 db    0
.xdata$x:000088AF                 db    0
.xdata$x:000088B0                 db    0
.xdata$x:000088B1                 db    0
.xdata$x:000088B2                 db    0
.xdata$x:000088B3                 db    0
.xdata$x:000088B4                 db    0
.xdata$x:000088B5                 db    0
.xdata$x:000088B6                 db    0
.xdata$x:000088B7                 db    0
.xdata$x:000088B8                 db    0
.xdata$x:000088B9                 db    0
.xdata$x:000088BA                 db    0
.xdata$x:000088BB                 db    0
.xdata$x:000088BC                 db    0
.xdata$x:000088BD                 db    0
.xdata$x:000088BE                 db    0
.xdata$x:000088BF                 db    0
.xdata$x:000088C0                 db    0
.xdata$x:000088C1                 db    0
.xdata$x:000088C2                 db    0
.xdata$x:000088C3                 db    0
.xdata$x:000088C3 _xdata$x        ends
.xdata$x:000088C3
.xdata$x:000088C4 ; ===========================================================================
.xdata$x:000088C4
.xdata$x:000088C4 ; Segment type: Pure data
.xdata$x:000088C4 ; Segment permissions: Read
.xdata$x:000088C4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000088C4                 assume cs:_xdata$x
.xdata$x:000088C4                 ;org 88C4h
.xdata$x:000088C4 ; COMDAT (pick associative to section at 4B48)
.xdata$x:000088C4 __unwindtable$??0_System_error_category@std@@QAE@XZ db 0FFh
.xdata$x:000088C4                                         ; DATA XREF: .xdata$x:000088D4o
.xdata$x:000088C5                 db 0FFh
.xdata$x:000088C6                 db 0FFh
.xdata$x:000088C7                 db 0FFh
.xdata$x:000088C8                 dd offset __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0
.xdata$x:000088CC __ehfuncinfo$??0_System_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:000088CC                                         ; DATA XREF: __ehhandler$??0_System_error_category@std@@QAE@XZ+11o
.xdata$x:000088CD                 db    5
.xdata$x:000088CE                 db  93h ; Ã´
.xdata$x:000088CF                 db  19h
.xdata$x:000088D0                 db    1
.xdata$x:000088D1                 db    0
.xdata$x:000088D2                 db    0
.xdata$x:000088D3                 db    0
.xdata$x:000088D4                 dd offset __unwindtable$??0_System_error_category@std@@QAE@XZ
.xdata$x:000088D8                 db    0
.xdata$x:000088D9                 db    0
.xdata$x:000088DA                 db    0
.xdata$x:000088DB                 db    0
.xdata$x:000088DC                 db    0
.xdata$x:000088DD                 db    0
.xdata$x:000088DE                 db    0
.xdata$x:000088DF                 db    0
.xdata$x:000088E0                 db    0
.xdata$x:000088E1                 db    0
.xdata$x:000088E2                 db    0
.xdata$x:000088E3                 db    0
.xdata$x:000088E4                 db    0
.xdata$x:000088E5                 db    0
.xdata$x:000088E6                 db    0
.xdata$x:000088E7                 db    0
.xdata$x:000088E8                 db    0
.xdata$x:000088E9                 db    0
.xdata$x:000088EA                 db    0
.xdata$x:000088EB                 db    0
.xdata$x:000088EC                 db    0
.xdata$x:000088ED                 db    0
.xdata$x:000088EE                 db    0
.xdata$x:000088EF                 db    0
.xdata$x:000088EF _xdata$x        ends
.xdata$x:000088EF
.xdata$x:000088F0 ; ===========================================================================
.xdata$x:000088F0
.xdata$x:000088F0 ; Segment type: Pure data
.xdata$x:000088F0 ; Segment permissions: Read
.xdata$x:000088F0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000088F0                 assume cs:_xdata$x
.xdata$x:000088F0                 ;org 88F0h
.xdata$x:000088F0 ; COMDAT (pick associative to section at 7F50)
.xdata$x:000088F0 __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:000088F0                                         ; DATA XREF: .xdata$x:00008900o
.xdata$x:000088F1                 db 0FFh
.xdata$x:000088F2                 db 0FFh
.xdata$x:000088F3                 db 0FFh
.xdata$x:000088F4                 dd offset __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:000088F8 __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:000088F8                                         ; DATA XREF: __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:000088F9                 db    5
.xdata$x:000088FA                 db  93h ; Ã´
.xdata$x:000088FB                 db  19h
.xdata$x:000088FC                 db    1
.xdata$x:000088FD                 db    0
.xdata$x:000088FE                 db    0
.xdata$x:000088FF                 db    0
.xdata$x:00008900                 dd offset __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:00008904                 db    0
.xdata$x:00008905                 db    0
.xdata$x:00008906                 db    0
.xdata$x:00008907                 db    0
.xdata$x:00008908                 db    0
.xdata$x:00008909                 db    0
.xdata$x:0000890A                 db    0
.xdata$x:0000890B                 db    0
.xdata$x:0000890C                 db    0
.xdata$x:0000890D                 db    0
.xdata$x:0000890E                 db    0
.xdata$x:0000890F                 db    0
.xdata$x:00008910                 db    0
.xdata$x:00008911                 db    0
.xdata$x:00008912                 db    0
.xdata$x:00008913                 db    0
.xdata$x:00008914                 db    0
.xdata$x:00008915                 db    0
.xdata$x:00008916                 db    0
.xdata$x:00008917                 db    0
.xdata$x:00008918                 db    0
.xdata$x:00008919                 db    0
.xdata$x:0000891A                 db    0
.xdata$x:0000891B                 db    0
.xdata$x:0000891B _xdata$x        ends
.xdata$x:0000891B
.xdata$x:0000891C ; ===========================================================================
.xdata$x:0000891C
.xdata$x:0000891C ; Segment type: Pure data
.xdata$x:0000891C ; Segment permissions: Read
.xdata$x:0000891C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000891C                 assume cs:_xdata$x
.xdata$x:0000891C                 ;org 891Ch
.xdata$x:0000891C ; COMDAT (pick associative to section at 542C)
.xdata$x:0000891C __unwindtable$??1_System_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000891C                                         ; DATA XREF: .xdata$x:0000892Co
.xdata$x:0000891D                 db 0FFh
.xdata$x:0000891E                 db 0FFh
.xdata$x:0000891F                 db 0FFh
.xdata$x:00008920                 dd offset __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0
.xdata$x:00008924 __ehfuncinfo$??1_System_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:00008924                                         ; DATA XREF: __ehhandler$??1_System_error_category@std@@UAE@XZ+11o
.xdata$x:00008925                 db    5
.xdata$x:00008926                 db  93h ; Ã´
.xdata$x:00008927                 db  19h
.xdata$x:00008928                 db    1
.xdata$x:00008929                 db    0
.xdata$x:0000892A                 db    0
.xdata$x:0000892B                 db    0
.xdata$x:0000892C                 dd offset __unwindtable$??1_System_error_category@std@@UAE@XZ
.xdata$x:00008930                 db    0
.xdata$x:00008931                 db    0
.xdata$x:00008932                 db    0
.xdata$x:00008933                 db    0
.xdata$x:00008934                 db    0
.xdata$x:00008935                 db    0
.xdata$x:00008936                 db    0
.xdata$x:00008937                 db    0
.xdata$x:00008938                 db    0
.xdata$x:00008939                 db    0
.xdata$x:0000893A                 db    0
.xdata$x:0000893B                 db    0
.xdata$x:0000893C                 db    0
.xdata$x:0000893D                 db    0
.xdata$x:0000893E                 db    0
.xdata$x:0000893F                 db    0
.xdata$x:00008940                 db    0
.xdata$x:00008941                 db    0
.xdata$x:00008942                 db    0
.xdata$x:00008943                 db    0
.xdata$x:00008944                 db    0
.xdata$x:00008945                 db    0
.xdata$x:00008946                 db    0
.xdata$x:00008947                 db    0
.xdata$x:00008947 _xdata$x        ends
.xdata$x:00008947
.xdata$x:00008948 ; ===========================================================================
.xdata$x:00008948
.xdata$x:00008948 ; Segment type: Pure data
.xdata$x:00008948 ; Segment permissions: Read
.xdata$x:00008948 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008948                 assume cs:_xdata$x
.xdata$x:00008948                 ;org 8948h
.xdata$x:00008948 ; COMDAT (pick associative to section at 416C)
.xdata$x:00008948 __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00008948                                         ; DATA XREF: .xdata$x:00008958o
.xdata$x:00008949                 db 0FFh
.xdata$x:0000894A                 db 0FFh
.xdata$x:0000894B                 db 0FFh
.xdata$x:0000894C                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:00008950 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00008950                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:00008951                 db    5
.xdata$x:00008952                 db  93h ; Ã´
.xdata$x:00008953                 db  19h
.xdata$x:00008954                 db    1
.xdata$x:00008955                 db    0
.xdata$x:00008956                 db    0
.xdata$x:00008957                 db    0
.xdata$x:00008958                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:0000895C                 db    0
.xdata$x:0000895D                 db    0
.xdata$x:0000895E                 db    0
.xdata$x:0000895F                 db    0
.xdata$x:00008960                 db    0
.xdata$x:00008961                 db    0
.xdata$x:00008962                 db    0
.xdata$x:00008963                 db    0
.xdata$x:00008964                 db    0
.xdata$x:00008965                 db    0
.xdata$x:00008966                 db    0
.xdata$x:00008967                 db    0
.xdata$x:00008968                 db    0
.xdata$x:00008969                 db    0
.xdata$x:0000896A                 db    0
.xdata$x:0000896B                 db    0
.xdata$x:0000896C                 db    0
.xdata$x:0000896D                 db    0
.xdata$x:0000896E                 db    0
.xdata$x:0000896F                 db    0
.xdata$x:00008970                 db    0
.xdata$x:00008971                 db    0
.xdata$x:00008972                 db    0
.xdata$x:00008973                 db    0
.xdata$x:00008973 _xdata$x        ends
.xdata$x:00008973
.xdata$x:00008974 ; ===========================================================================
.xdata$x:00008974
.xdata$x:00008974 ; Segment type: Pure data
.xdata$x:00008974 ; Segment permissions: Read
.xdata$x:00008974 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008974                 assume cs:_xdata$x
.xdata$x:00008974                 ;org 8974h
.xdata$x:00008974 ; COMDAT (pick associative to section at 4DE8)
.xdata$x:00008974 __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00008974                                         ; DATA XREF: .xdata$x:00008984o
.xdata$x:00008975                 db 0FFh
.xdata$x:00008976                 db 0FFh
.xdata$x:00008977                 db 0FFh
.xdata$x:00008978                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:0000897C __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000897C                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:0000897D                 db    5
.xdata$x:0000897E                 db  93h ; Ã´
.xdata$x:0000897F                 db  19h
.xdata$x:00008980                 db    1
.xdata$x:00008981                 db    0
.xdata$x:00008982                 db    0
.xdata$x:00008983                 db    0
.xdata$x:00008984                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:00008988                 align 20h
.xdata$x:00008988 _xdata$x        ends
.xdata$x:00008988
.xdata$x:000089A0 ; ===========================================================================
.xdata$x:000089A0
.xdata$x:000089A0 ; Segment type: Pure data
.xdata$x:000089A0 ; Segment permissions: Read
.xdata$x:000089A0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000089A0                 assume cs:_xdata$x
.xdata$x:000089A0                 ;org 89A0h
.xdata$x:000089A0 ; COMDAT (pick associative to section at 4068)
.xdata$x:000089A0 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db 0FFh
.xdata$x:000089A0                                         ; DATA XREF: .xdata$x:000089B0o
.xdata$x:000089A1                 db 0FFh
.xdata$x:000089A2                 db 0FFh
.xdata$x:000089A3                 db 0FFh
.xdata$x:000089A4                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0
.xdata$x:000089A8 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db  22h ; "
.xdata$x:000089A8                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z+11o
.xdata$x:000089A9                 db    5
.xdata$x:000089AA                 db  93h ; Ã´
.xdata$x:000089AB                 db  19h
.xdata$x:000089AC                 db    1
.xdata$x:000089AD                 db    0
.xdata$x:000089AE                 db    0
.xdata$x:000089AF                 db    0
.xdata$x:000089B0                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.xdata$x:000089B4                 db    0
.xdata$x:000089B5                 db    0
.xdata$x:000089B6                 db    0
.xdata$x:000089B7                 db    0
.xdata$x:000089B8                 db    0
.xdata$x:000089B9                 db    0
.xdata$x:000089BA                 db    0
.xdata$x:000089BB                 db    0
.xdata$x:000089BC                 db    0
.xdata$x:000089BD                 db    0
.xdata$x:000089BE                 db    0
.xdata$x:000089BF                 db    0
.xdata$x:000089C0                 db    0
.xdata$x:000089C1                 db    0
.xdata$x:000089C2                 db    0
.xdata$x:000089C3                 db    0
.xdata$x:000089C4                 db    0
.xdata$x:000089C5                 db    0
.xdata$x:000089C6                 db    0
.xdata$x:000089C7                 db    0
.xdata$x:000089C8                 db    0
.xdata$x:000089C9                 db    0
.xdata$x:000089CA                 db    0
.xdata$x:000089CB                 db    0
.xdata$x:000089CB _xdata$x        ends
.xdata$x:000089CB
.xdata$x:000089CC ; ===========================================================================
.xdata$x:000089CC
.xdata$x:000089CC ; Segment type: Pure data
.xdata$x:000089CC ; Segment permissions: Read
.xdata$x:000089CC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000089CC                 assume cs:_xdata$x
.xdata$x:000089CC                 ;org 89CCh
.xdata$x:000089CC ; COMDAT (pick associative to section at 4D00)
.xdata$x:000089CC __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000089CC                                         ; DATA XREF: .xdata$x:000089DCo
.xdata$x:000089CD                 db 0FFh
.xdata$x:000089CE                 db 0FFh
.xdata$x:000089CF                 db 0FFh
.xdata$x:000089D0                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:000089D4 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000089D4                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:000089D5                 db    5
.xdata$x:000089D6                 db  93h ; Ã´
.xdata$x:000089D7                 db  19h
.xdata$x:000089D8                 db    1
.xdata$x:000089D9                 db    0
.xdata$x:000089DA                 db    0
.xdata$x:000089DB                 db    0
.xdata$x:000089DC                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:000089E0                 db    0
.xdata$x:000089E1                 db    0
.xdata$x:000089E2                 db    0
.xdata$x:000089E3                 db    0
.xdata$x:000089E4                 db    0
.xdata$x:000089E5                 db    0
.xdata$x:000089E6                 db    0
.xdata$x:000089E7                 db    0
.xdata$x:000089E8                 db    0
.xdata$x:000089E9                 db    0
.xdata$x:000089EA                 db    0
.xdata$x:000089EB                 db    0
.xdata$x:000089EC                 db    0
.xdata$x:000089ED                 db    0
.xdata$x:000089EE                 db    0
.xdata$x:000089EF                 db    0
.xdata$x:000089F0                 db    0
.xdata$x:000089F1                 db    0
.xdata$x:000089F2                 db    0
.xdata$x:000089F3                 db    0
.xdata$x:000089F4                 db    0
.xdata$x:000089F5                 db    0
.xdata$x:000089F6                 db    0
.xdata$x:000089F7                 db    0
.xdata$x:000089F7 _xdata$x        ends
.xdata$x:000089F7
.xdata$x:000089F8 ; ===========================================================================
.xdata$x:000089F8
.xdata$x:000089F8 ; Segment type: Pure data
.xdata$x:000089F8 ; Segment permissions: Read
.xdata$x:000089F8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000089F8                 assume cs:_xdata$x
.xdata$x:000089F8                 ;org 89F8h
.xdata$x:000089F8 ; COMDAT (pick associative to section at 46D4)
.xdata$x:000089F8 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:000089F8                                         ; DATA XREF: .xdata$x:00008A08o
.xdata$x:000089F9                 db 0FFh
.xdata$x:000089FA                 db 0FFh
.xdata$x:000089FB                 db 0FFh
.xdata$x:000089FC                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:00008A00 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00008A00                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:00008A01                 db    5
.xdata$x:00008A02                 db  93h ; Ã´
.xdata$x:00008A03                 db  19h
.xdata$x:00008A04                 db    1
.xdata$x:00008A05                 db    0
.xdata$x:00008A06                 db    0
.xdata$x:00008A07                 db    0
.xdata$x:00008A08                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:00008A0C                 db    0
.xdata$x:00008A0D                 db    0
.xdata$x:00008A0E                 db    0
.xdata$x:00008A0F                 db    0
.xdata$x:00008A10                 db    0
.xdata$x:00008A11                 db    0
.xdata$x:00008A12                 db    0
.xdata$x:00008A13                 db    0
.xdata$x:00008A14                 db    0
.xdata$x:00008A15                 db    0
.xdata$x:00008A16                 db    0
.xdata$x:00008A17                 db    0
.xdata$x:00008A18                 db    0
.xdata$x:00008A19                 db    0
.xdata$x:00008A1A                 db    0
.xdata$x:00008A1B                 db    0
.xdata$x:00008A1C                 db    0
.xdata$x:00008A1D                 db    0
.xdata$x:00008A1E                 db    0
.xdata$x:00008A1F                 db    0
.xdata$x:00008A20                 db    0
.xdata$x:00008A21                 db    0
.xdata$x:00008A22                 db    0
.xdata$x:00008A23                 db    0
.xdata$x:00008A23 _xdata$x        ends
.xdata$x:00008A23
.xdata$x:00008A24 ; ===========================================================================
.xdata$x:00008A24
.xdata$x:00008A24 ; Segment type: Pure data
.xdata$x:00008A24 ; Segment permissions: Read
.xdata$x:00008A24 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008A24                 assume cs:_xdata$x
.xdata$x:00008A24                 ;org 8A24h
.xdata$x:00008A24 ; COMDAT (pick associative to section at 463C)
.xdata$x:00008A24 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db 0FFh
.xdata$x:00008A24                                         ; DATA XREF: .xdata$x:00008A34o
.xdata$x:00008A25                 db 0FFh
.xdata$x:00008A26                 db 0FFh
.xdata$x:00008A27                 db 0FFh
.xdata$x:00008A28                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0
.xdata$x:00008A2C __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db  22h ; "
.xdata$x:00008A2C                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z+11o
.xdata$x:00008A2D                 db    5
.xdata$x:00008A2E                 db  93h ; Ã´
.xdata$x:00008A2F                 db  19h
.xdata$x:00008A30                 db    1
.xdata$x:00008A31                 db    0
.xdata$x:00008A32                 db    0
.xdata$x:00008A33                 db    0
.xdata$x:00008A34                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.xdata$x:00008A38                 db    0
.xdata$x:00008A39                 db    0
.xdata$x:00008A3A                 db    0
.xdata$x:00008A3B                 db    0
.xdata$x:00008A3C                 db    0
.xdata$x:00008A3D                 db    0
.xdata$x:00008A3E                 db    0
.xdata$x:00008A3F                 db    0
.xdata$x:00008A40                 db    0
.xdata$x:00008A41                 db    0
.xdata$x:00008A42                 db    0
.xdata$x:00008A43                 db    0
.xdata$x:00008A44                 db    0
.xdata$x:00008A45                 db    0
.xdata$x:00008A46                 db    0
.xdata$x:00008A47                 db    0
.xdata$x:00008A48                 db    0
.xdata$x:00008A49                 db    0
.xdata$x:00008A4A                 db    0
.xdata$x:00008A4B                 db    0
.xdata$x:00008A4C                 db    0
.xdata$x:00008A4D                 db    0
.xdata$x:00008A4E                 db    0
.xdata$x:00008A4F                 db    0
.xdata$x:00008A4F _xdata$x        ends
.xdata$x:00008A4F
.xdata$x:00008A50 ; ===========================================================================
.xdata$x:00008A50
.xdata$x:00008A50 ; Segment type: Pure data
.xdata$x:00008A50 ; Segment permissions: Read
.xdata$x:00008A50 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008A50                 assume cs:_xdata$x
.xdata$x:00008A50                 ;org 8A50h
.xdata$x:00008A50 ; COMDAT (pick associative to section at 509C)
.xdata$x:00008A50 __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:00008A50                                         ; DATA XREF: .xdata$x:00008A60o
.xdata$x:00008A51                 db 0FFh
.xdata$x:00008A52                 db 0FFh
.xdata$x:00008A53                 db 0FFh
.xdata$x:00008A54                 dd offset __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:00008A58 __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00008A58                                         ; DATA XREF: __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:00008A59                 db    5
.xdata$x:00008A5A                 db  93h ; Ã´
.xdata$x:00008A5B                 db  19h
.xdata$x:00008A5C                 db    1
.xdata$x:00008A5D                 db    0
.xdata$x:00008A5E                 db    0
.xdata$x:00008A5F                 db    0
.xdata$x:00008A60                 dd offset __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:00008A64                 db    0
.xdata$x:00008A65                 db    0
.xdata$x:00008A66                 db    0
.xdata$x:00008A67                 db    0
.xdata$x:00008A68                 db    0
.xdata$x:00008A69                 db    0
.xdata$x:00008A6A                 db    0
.xdata$x:00008A6B                 db    0
.xdata$x:00008A6C                 db    0
.xdata$x:00008A6D                 db    0
.xdata$x:00008A6E                 db    0
.xdata$x:00008A6F                 db    0
.xdata$x:00008A70                 db    0
.xdata$x:00008A71                 db    0
.xdata$x:00008A72                 db    0
.xdata$x:00008A73                 db    0
.xdata$x:00008A74                 db    0
.xdata$x:00008A75                 db    0
.xdata$x:00008A76                 db    0
.xdata$x:00008A77                 db    0
.xdata$x:00008A78                 db    0
.xdata$x:00008A79                 db    0
.xdata$x:00008A7A                 db    0
.xdata$x:00008A7B                 db    0
.xdata$x:00008A7B _xdata$x        ends
.xdata$x:00008A7B
.xdata$x:00008A7C ; ===========================================================================
.xdata$x:00008A7C
.xdata$x:00008A7C ; Segment type: Pure data
.xdata$x:00008A7C ; Segment permissions: Read
.xdata$x:00008A7C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008A7C                 assume cs:_xdata$x
.xdata$x:00008A7C                 ;org 8A7Ch
.xdata$x:00008A7C ; COMDAT (pick associative to section at 5ECC)
.xdata$x:00008A7C __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5 db    0
.xdata$x:00008A7C                                         ; DATA XREF: .xdata$x:00008B04o
.xdata$x:00008A7D                 db    0
.xdata$x:00008A7E                 db    0
.xdata$x:00008A7F                 db    0
.xdata$x:00008A80                 db    0
.xdata$x:00008A81                 db    0
.xdata$x:00008A82                 db    0
.xdata$x:00008A83                 db    0
.xdata$x:00008A84                 db    0
.xdata$x:00008A85                 db    0
.xdata$x:00008A86                 db    0
.xdata$x:00008A87                 db    0
.xdata$x:00008A88                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.xdata$x:00008A8C __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4 db    0
.xdata$x:00008A8C                                         ; DATA XREF: .xdata$x:00008AF0o
.xdata$x:00008A8D                 db    0
.xdata$x:00008A8E                 db    0
.xdata$x:00008A8F                 db    0
.xdata$x:00008A90                 db    0
.xdata$x:00008A91                 db    0
.xdata$x:00008A92                 db    0
.xdata$x:00008A93                 db    0
.xdata$x:00008A94                 db    0
.xdata$x:00008A95                 db    0
.xdata$x:00008A96                 db    0
.xdata$x:00008A97                 db    0
.xdata$x:00008A98                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1
.xdata$x:00008A9C __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db 0FFh
.xdata$x:00008A9C                                         ; DATA XREF: .xdata$x:00008AC4o
.xdata$x:00008A9D                 db 0FFh
.xdata$x:00008A9E                 db 0FFh
.xdata$x:00008A9F                 db 0FFh
.xdata$x:00008AA0                 db    0
.xdata$x:00008AA1                 db    0
.xdata$x:00008AA2                 db    0
.xdata$x:00008AA3                 db    0
.xdata$x:00008AA4                 db 0FFh
.xdata$x:00008AA5                 db 0FFh
.xdata$x:00008AA6                 db 0FFh
.xdata$x:00008AA7                 db 0FFh
.xdata$x:00008AA8                 db    0
.xdata$x:00008AA9                 db    0
.xdata$x:00008AAA                 db    0
.xdata$x:00008AAB                 db    0
.xdata$x:00008AAC                 db    1
.xdata$x:00008AAD                 db    0
.xdata$x:00008AAE                 db    0
.xdata$x:00008AAF                 db    0
.xdata$x:00008AB0                 db    0
.xdata$x:00008AB1                 db    0
.xdata$x:00008AB2                 db    0
.xdata$x:00008AB3                 db    0
.xdata$x:00008AB4                 db    1
.xdata$x:00008AB5                 db    0
.xdata$x:00008AB6                 db    0
.xdata$x:00008AB7                 db    0
.xdata$x:00008AB8                 db    0
.xdata$x:00008AB9                 db    0
.xdata$x:00008ABA                 db    0
.xdata$x:00008ABB                 db    0
.xdata$x:00008ABC __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:00008ABC                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z+11o
.xdata$x:00008ABD                 db    5
.xdata$x:00008ABE                 db  93h ; Ã´
.xdata$x:00008ABF                 db  19h
.xdata$x:00008AC0                 db    4
.xdata$x:00008AC1                 db    0
.xdata$x:00008AC2                 db    0
.xdata$x:00008AC3                 db    0
.xdata$x:00008AC4                 dd offset __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:00008AC8                 db    2
.xdata$x:00008AC9                 db    0
.xdata$x:00008ACA                 db    0
.xdata$x:00008ACB                 db    0
.xdata$x:00008ACC                 dd offset __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:00008AD0                 align 20h
.xdata$x:00008AE0 __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db    2
.xdata$x:00008AE0                                         ; DATA XREF: .xdata$x:00008ACCo
.xdata$x:00008AE1                 db    0
.xdata$x:00008AE2                 db    0
.xdata$x:00008AE3                 db    0
.xdata$x:00008AE4                 db    2
.xdata$x:00008AE5                 db    0
.xdata$x:00008AE6                 db    0
.xdata$x:00008AE7                 db    0
.xdata$x:00008AE8                 db    3
.xdata$x:00008AE9                 db    0
.xdata$x:00008AEA                 db    0
.xdata$x:00008AEB                 db    0
.xdata$x:00008AEC                 db    1
.xdata$x:00008AED                 db    0
.xdata$x:00008AEE                 db    0
.xdata$x:00008AEF                 db    0
.xdata$x:00008AF0                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4
.xdata$x:00008AF4                 db    0
.xdata$x:00008AF5                 db    0
.xdata$x:00008AF6                 db    0
.xdata$x:00008AF7                 db    0
.xdata$x:00008AF8                 db    0
.xdata$x:00008AF9                 db    0
.xdata$x:00008AFA                 db    0
.xdata$x:00008AFB                 db    0
.xdata$x:00008AFC                 db    3
.xdata$x:00008AFD                 db    0
.xdata$x:00008AFE                 db    0
.xdata$x:00008AFF                 db    0
.xdata$x:00008B00                 db    1
.xdata$x:00008B01                 db    0
.xdata$x:00008B02                 db    0
.xdata$x:00008B03                 db    0
.xdata$x:00008B04                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5
.xdata$x:00008B04 _xdata$x        ends
.xdata$x:00008B04
.xdata$x:00008B08 ; ===========================================================================
.xdata$x:00008B08
.xdata$x:00008B08 ; Segment type: Pure data
.xdata$x:00008B08 ; Segment permissions: Read
.xdata$x:00008B08 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008B08                 assume cs:_xdata$x
.xdata$x:00008B08                 ;org 8B08h
.xdata$x:00008B08 __unwindtable$?SelectTab@DockingCont@@IAEXH@Z db 0FFh
.xdata$x:00008B08                                         ; DATA XREF: .xdata$x:00008B88o
.xdata$x:00008B09                 db 0FFh
.xdata$x:00008B0A                 db 0FFh
.xdata$x:00008B0B                 db 0FFh
.xdata$x:00008B0C                 dd offset __unwindfunclet$?SelectTab@DockingCont@@IAEXH@Z$0
.xdata$x:00008B10 __unwindtable$?runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z db 0FFh
.xdata$x:00008B10                                         ; DATA XREF: .xdata$x:00008BACo
.xdata$x:00008B11                 db 0FFh
.xdata$x:00008B12                 db 0FFh
.xdata$x:00008B13                 db 0FFh
.xdata$x:00008B14                 dd offset __unwindfunclet$?runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z$0
.xdata$x:00008B18 __unwindtable$?runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z db 0FFh
.xdata$x:00008B18                                         ; DATA XREF: .xdata$x:00008BD0o
.xdata$x:00008B19                 db 0FFh
.xdata$x:00008B1A                 db 0FFh
.xdata$x:00008B1B                 db 0FFh
.xdata$x:00008B1C                 dd offset __unwindfunclet$?runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z$0
.xdata$x:00008B20 __unwindtable$?getDataOfVisTb@DockingCont@@QAE?AV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@XZ db 0FFh
.xdata$x:00008B20                                         ; DATA XREF: .xdata$x:00008BF4o
.xdata$x:00008B21                 db 0FFh
.xdata$x:00008B22                 db 0FFh
.xdata$x:00008B23                 db 0FFh
.xdata$x:00008B24                 dd offset __unwindfunclet$?getDataOfVisTb@DockingCont@@QAE?AV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@XZ$1
.xdata$x:00008B28                 db    0
.xdata$x:00008B29                 db    0
.xdata$x:00008B2A                 db    0
.xdata$x:00008B2B                 db    0
.xdata$x:00008B2C                 dd offset __unwindfunclet$?getDataOfVisTb@DockingCont@@QAE?AV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@XZ$0
.xdata$x:00008B30 __unwindtable$??1DockingCont@@UAE@XZ db 0FFh
.xdata$x:00008B30                                         ; DATA XREF: .xdata$x:00008C3Co
.xdata$x:00008B31                 db 0FFh
.xdata$x:00008B32                 db 0FFh
.xdata$x:00008B33                 db 0FFh
.xdata$x:00008B34                 dd offset __unwindfunclet$??1DockingCont@@UAE@XZ$0
.xdata$x:00008B38                 db    0
.xdata$x:00008B39                 db    0
.xdata$x:00008B3A                 db    0
.xdata$x:00008B3B                 db    0
.xdata$x:00008B3C                 dd offset __unwindfunclet$??1DockingCont@@UAE@XZ$1
.xdata$x:00008B40                 db    1
.xdata$x:00008B41                 db    0
.xdata$x:00008B42                 db    0
.xdata$x:00008B43                 db    0
.xdata$x:00008B44                 dd offset __unwindfunclet$??1DockingCont@@UAE@XZ$2
.xdata$x:00008B48 __unwindtable$??0DockingCont@@QAE@XZ db 0FFh
.xdata$x:00008B48                                         ; DATA XREF: .xdata$x:00008C60o
.xdata$x:00008B49                 db 0FFh
.xdata$x:00008B4A                 db 0FFh
.xdata$x:00008B4B                 db 0FFh
.xdata$x:00008B4C                 dd offset __unwindfunclet$??0DockingCont@@QAE@XZ$0
.xdata$x:00008B50                 db    0
.xdata$x:00008B51                 db    0
.xdata$x:00008B52                 db    0
.xdata$x:00008B53                 db    0
.xdata$x:00008B54                 dd offset __unwindfunclet$??0DockingCont@@QAE@XZ$1
.xdata$x:00008B58                 db    1
.xdata$x:00008B59                 db    0
.xdata$x:00008B5A                 db    0
.xdata$x:00008B5B                 db    0
.xdata$x:00008B5C                 dd offset __unwindfunclet$??0DockingCont@@QAE@XZ$2
.xdata$x:00008B60 __unwindtable$?removeToolbar@DockingCont@@QAEXUtTbData@@@Z db 0FFh
.xdata$x:00008B60                                         ; DATA XREF: .xdata$x:00008C18o
.xdata$x:00008B61                 db 0FFh
.xdata$x:00008B62                 db 0FFh
.xdata$x:00008B63                 db 0FFh
.xdata$x:00008B64                 dd offset __unwindfunclet$?removeToolbar@DockingCont@@QAEXUtTbData@@@Z$0
.xdata$x:00008B68                 db    0
.xdata$x:00008B69                 db    0
.xdata$x:00008B6A                 db    0
.xdata$x:00008B6B                 db    0
.xdata$x:00008B6C                 dd offset __unwindfunclet$?removeToolbar@DockingCont@@QAEXUtTbData@@@Z$1
.xdata$x:00008B70                 db 0FFh
.xdata$x:00008B71                 db 0FFh
.xdata$x:00008B72                 db 0FFh
.xdata$x:00008B73                 db 0FFh
.xdata$x:00008B74                 dd offset __unwindfunclet$?removeToolbar@DockingCont@@QAEXUtTbData@@@Z$1
.xdata$x:00008B78                 db    2
.xdata$x:00008B79                 db    0
.xdata$x:00008B7A                 db    0
.xdata$x:00008B7B                 db    0
.xdata$x:00008B7C                 dd offset __unwindfunclet$?removeToolbar@DockingCont@@QAEXUtTbData@@@Z$2
.xdata$x:00008B80 __ehfuncinfo$?SelectTab@DockingCont@@IAEXH@Z db  22h ; "
.xdata$x:00008B80                                         ; DATA XREF: __ehhandler$?SelectTab@DockingCont@@IAEXH@Z+1Bo
.xdata$x:00008B81                 db    5
.xdata$x:00008B82                 db  93h ; Ã´
.xdata$x:00008B83                 db  19h
.xdata$x:00008B84                 db    1
.xdata$x:00008B85                 db    0
.xdata$x:00008B86                 db    0
.xdata$x:00008B87                 db    0
.xdata$x:00008B88                 dd offset __unwindtable$?SelectTab@DockingCont@@IAEXH@Z
.xdata$x:00008B8C                 db    0
.xdata$x:00008B8D                 db    0
.xdata$x:00008B8E                 db    0
.xdata$x:00008B8F                 db    0
.xdata$x:00008B90                 db    0
.xdata$x:00008B91                 db    0
.xdata$x:00008B92                 db    0
.xdata$x:00008B93                 db    0
.xdata$x:00008B94                 db    0
.xdata$x:00008B95                 db    0
.xdata$x:00008B96                 db    0
.xdata$x:00008B97                 db    0
.xdata$x:00008B98                 db    0
.xdata$x:00008B99                 db    0
.xdata$x:00008B9A                 db    0
.xdata$x:00008B9B                 db    0
.xdata$x:00008B9C                 db    0
.xdata$x:00008B9D                 db    0
.xdata$x:00008B9E                 db    0
.xdata$x:00008B9F                 db    0
.xdata$x:00008BA0                 db    0
.xdata$x:00008BA1                 db    0
.xdata$x:00008BA2                 db    0
.xdata$x:00008BA3                 db    0
.xdata$x:00008BA4 __ehfuncinfo$?runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z db  22h ; "
.xdata$x:00008BA4                                         ; DATA XREF: __ehhandler$?runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z+1Eo
.xdata$x:00008BA5                 db    5
.xdata$x:00008BA6                 db  93h ; Ã´
.xdata$x:00008BA7                 db  19h
.xdata$x:00008BA8                 db    1
.xdata$x:00008BA9                 db    0
.xdata$x:00008BAA                 db    0
.xdata$x:00008BAB                 db    0
.xdata$x:00008BAC                 dd offset __unwindtable$?runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z
.xdata$x:00008BB0                 db    0
.xdata$x:00008BB1                 db    0
.xdata$x:00008BB2                 db    0
.xdata$x:00008BB3                 db    0
.xdata$x:00008BB4                 db    0
.xdata$x:00008BB5                 db    0
.xdata$x:00008BB6                 db    0
.xdata$x:00008BB7                 db    0
.xdata$x:00008BB8                 db    0
.xdata$x:00008BB9                 db    0
.xdata$x:00008BBA                 db    0
.xdata$x:00008BBB                 db    0
.xdata$x:00008BBC                 db    0
.xdata$x:00008BBD                 db    0
.xdata$x:00008BBE                 db    0
.xdata$x:00008BBF                 db    0
.xdata$x:00008BC0                 db    0
.xdata$x:00008BC1                 db    0
.xdata$x:00008BC2                 db    0
.xdata$x:00008BC3                 db    0
.xdata$x:00008BC4                 db    0
.xdata$x:00008BC5                 db    0
.xdata$x:00008BC6                 db    0
.xdata$x:00008BC7                 db    0
.xdata$x:00008BC8 __ehfuncinfo$?runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z db  22h ; "
.xdata$x:00008BC8                                         ; DATA XREF: __ehhandler$?runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z+1Eo
.xdata$x:00008BC9                 db    5
.xdata$x:00008BCA                 db  93h ; Ã´
.xdata$x:00008BCB                 db  19h
.xdata$x:00008BCC                 db    1
.xdata$x:00008BCD                 db    0
.xdata$x:00008BCE                 db    0
.xdata$x:00008BCF                 db    0
.xdata$x:00008BD0                 dd offset __unwindtable$?runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z
.xdata$x:00008BD4                 db    0
.xdata$x:00008BD5                 db    0
.xdata$x:00008BD6                 db    0
.xdata$x:00008BD7                 db    0
.xdata$x:00008BD8                 db    0
.xdata$x:00008BD9                 db    0
.xdata$x:00008BDA                 db    0
.xdata$x:00008BDB                 db    0
.xdata$x:00008BDC                 db    0
.xdata$x:00008BDD                 db    0
.xdata$x:00008BDE                 db    0
.xdata$x:00008BDF                 db    0
.xdata$x:00008BE0                 db    0
.xdata$x:00008BE1                 db    0
.xdata$x:00008BE2                 db    0
.xdata$x:00008BE3                 db    0
.xdata$x:00008BE4                 db    0
.xdata$x:00008BE5                 db    0
.xdata$x:00008BE6                 db    0
.xdata$x:00008BE7                 db    0
.xdata$x:00008BE8                 db    0
.xdata$x:00008BE9                 db    0
.xdata$x:00008BEA                 db    0
.xdata$x:00008BEB                 db    0
.xdata$x:00008BEC __ehfuncinfo$?getDataOfVisTb@DockingCont@@QAE?AV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@XZ db  22h ; "
.xdata$x:00008BEC                                         ; DATA XREF: __ehhandler$?getDataOfVisTb@DockingCont@@QAE?AV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@XZ+11o
.xdata$x:00008BED                 db    5
.xdata$x:00008BEE                 db  93h ; Ã´
.xdata$x:00008BEF                 db  19h
.xdata$x:00008BF0                 db    2
.xdata$x:00008BF1                 db    0
.xdata$x:00008BF2                 db    0
.xdata$x:00008BF3                 db    0
.xdata$x:00008BF4                 dd offset __unwindtable$?getDataOfVisTb@DockingCont@@QAE?AV?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@XZ
.xdata$x:00008BF8                 db    0
.xdata$x:00008BF9                 db    0
.xdata$x:00008BFA                 db    0
.xdata$x:00008BFB                 db    0
.xdata$x:00008BFC                 db    0
.xdata$x:00008BFD                 db    0
.xdata$x:00008BFE                 db    0
.xdata$x:00008BFF                 db    0
.xdata$x:00008C00                 db    0
.xdata$x:00008C01                 db    0
.xdata$x:00008C02                 db    0
.xdata$x:00008C03                 db    0
.xdata$x:00008C04                 db    0
.xdata$x:00008C05                 db    0
.xdata$x:00008C06                 db    0
.xdata$x:00008C07                 db    0
.xdata$x:00008C08                 db    0
.xdata$x:00008C09                 db    0
.xdata$x:00008C0A                 db    0
.xdata$x:00008C0B                 db    0
.xdata$x:00008C0C                 db    0
.xdata$x:00008C0D                 db    0
.xdata$x:00008C0E                 db    0
.xdata$x:00008C0F                 db    0
.xdata$x:00008C10 __ehfuncinfo$?removeToolbar@DockingCont@@QAEXUtTbData@@@Z db  22h ; "
.xdata$x:00008C10                                         ; DATA XREF: __ehhandler$?removeToolbar@DockingCont@@QAEXUtTbData@@@Z+11o
.xdata$x:00008C11                 db    5
.xdata$x:00008C12                 db  93h ; Ã´
.xdata$x:00008C13                 db  19h
.xdata$x:00008C14                 db    4
.xdata$x:00008C15                 db    0
.xdata$x:00008C16                 db    0
.xdata$x:00008C17                 db    0
.xdata$x:00008C18                 dd offset __unwindtable$?removeToolbar@DockingCont@@QAEXUtTbData@@@Z
.xdata$x:00008C1C                 db    0
.xdata$x:00008C1D                 db    0
.xdata$x:00008C1E                 db    0
.xdata$x:00008C1F                 db    0
.xdata$x:00008C20                 db    0
.xdata$x:00008C21                 db    0
.xdata$x:00008C22                 db    0
.xdata$x:00008C23                 db    0
.xdata$x:00008C24                 db    0
.xdata$x:00008C25                 db    0
.xdata$x:00008C26                 db    0
.xdata$x:00008C27                 db    0
.xdata$x:00008C28                 db    0
.xdata$x:00008C29                 db    0
.xdata$x:00008C2A                 db    0
.xdata$x:00008C2B                 db    0
.xdata$x:00008C2C                 db    0
.xdata$x:00008C2D                 db    0
.xdata$x:00008C2E                 db    0
.xdata$x:00008C2F                 db    0
.xdata$x:00008C30                 db    0
.xdata$x:00008C31                 db    0
.xdata$x:00008C32                 db    0
.xdata$x:00008C33                 db    0
.xdata$x:00008C34 __ehfuncinfo$??1DockingCont@@UAE@XZ db  22h ; "
.xdata$x:00008C34                                         ; DATA XREF: __ehhandler$??1DockingCont@@UAE@XZ+11o
.xdata$x:00008C35                 db    5
.xdata$x:00008C36                 db  93h ; Ã´
.xdata$x:00008C37                 db  19h
.xdata$x:00008C38                 db    3
.xdata$x:00008C39                 db    0
.xdata$x:00008C3A                 db    0
.xdata$x:00008C3B                 db    0
.xdata$x:00008C3C                 dd offset __unwindtable$??1DockingCont@@UAE@XZ
.xdata$x:00008C40                 db    0
.xdata$x:00008C41                 db    0
.xdata$x:00008C42                 db    0
.xdata$x:00008C43                 db    0
.xdata$x:00008C44                 db    0
.xdata$x:00008C45                 db    0
.xdata$x:00008C46                 db    0
.xdata$x:00008C47                 db    0
.xdata$x:00008C48                 db    0
.xdata$x:00008C49                 db    0
.xdata$x:00008C4A                 db    0
.xdata$x:00008C4B                 db    0
.xdata$x:00008C4C                 db    0
.xdata$x:00008C4D                 db    0
.xdata$x:00008C4E                 db    0
.xdata$x:00008C4F                 db    0
.xdata$x:00008C50                 db    0
.xdata$x:00008C51                 db    0
.xdata$x:00008C52                 db    0
.xdata$x:00008C53                 db    0
.xdata$x:00008C54                 db    0
.xdata$x:00008C55                 db    0
.xdata$x:00008C56                 db    0
.xdata$x:00008C57                 db    0
.xdata$x:00008C58 __ehfuncinfo$??0DockingCont@@QAE@XZ db  22h ; "
.xdata$x:00008C58                                         ; DATA XREF: __ehhandler$??0DockingCont@@QAE@XZ+11o
.xdata$x:00008C59                 db    5
.xdata$x:00008C5A                 db  93h ; Ã´
.xdata$x:00008C5B                 db  19h
.xdata$x:00008C5C                 db    3
.xdata$x:00008C5D                 db    0
.xdata$x:00008C5E                 db    0
.xdata$x:00008C5F                 db    0
.xdata$x:00008C60                 dd offset __unwindtable$??0DockingCont@@QAE@XZ
.xdata$x:00008C64                 db    0
.xdata$x:00008C65                 db    0
.xdata$x:00008C66                 db    0
.xdata$x:00008C67                 db    0
.xdata$x:00008C68                 db    0
.xdata$x:00008C69                 db    0
.xdata$x:00008C6A                 db    0
.xdata$x:00008C6B                 db    0
.xdata$x:00008C6C                 db    0
.xdata$x:00008C6D                 db    0
.xdata$x:00008C6E                 db    0
.xdata$x:00008C6F                 db    0
.xdata$x:00008C70                 db    0
.xdata$x:00008C71                 db    0
.xdata$x:00008C72                 db    0
.xdata$x:00008C73                 db    0
.xdata$x:00008C74                 db    0
.xdata$x:00008C75                 db    0
.xdata$x:00008C76                 db    0
.xdata$x:00008C77                 db    0
.xdata$x:00008C78                 db    0
.xdata$x:00008C79                 db    0
.xdata$x:00008C7A                 db    0
.xdata$x:00008C7B                 db    0
.xdata$x:00008C7B _xdata$x        ends
.xdata$x:00008C7B
.xdata$x:00008C7C ; ===========================================================================
.xdata$x:00008C7C
.xdata$x:00008C7C ; Segment type: Pure data
.xdata$x:00008C7C ; Segment permissions: Read
.xdata$x:00008C7C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008C7C                 assume cs:_xdata$x
.xdata$x:00008C7C                 ;org 8C7Ch
.xdata$x:00008C7C ; COMDAT (pick associative to section at 4474)
.xdata$x:00008C7C __unwindtable$??0?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00008C7C                                         ; DATA XREF: .xdata$x:00008C8Co
.xdata$x:00008C7D                 db 0FFh
.xdata$x:00008C7E                 db 0FFh
.xdata$x:00008C7F                 db 0FFh
.xdata$x:00008C80                 dd offset __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ$0
.xdata$x:00008C84 __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00008C84                                         ; DATA XREF: __ehhandler$??0?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ+11o
.xdata$x:00008C85                 db    5
.xdata$x:00008C86                 db  93h ; Ã´
.xdata$x:00008C87                 db  19h
.xdata$x:00008C88                 db    1
.xdata$x:00008C89                 db    0
.xdata$x:00008C8A                 db    0
.xdata$x:00008C8B                 db    0
.xdata$x:00008C8C                 dd offset __unwindtable$??0?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ
.xdata$x:00008C90                 db    0
.xdata$x:00008C91                 db    0
.xdata$x:00008C92                 db    0
.xdata$x:00008C93                 db    0
.xdata$x:00008C94                 db    0
.xdata$x:00008C95                 db    0
.xdata$x:00008C96                 db    0
.xdata$x:00008C97                 db    0
.xdata$x:00008C98                 db    0
.xdata$x:00008C99                 db    0
.xdata$x:00008C9A                 db    0
.xdata$x:00008C9B                 db    0
.xdata$x:00008C9C                 db    0
.xdata$x:00008C9D                 db    0
.xdata$x:00008C9E                 db    0
.xdata$x:00008C9F                 db    0
.xdata$x:00008CA0                 db    0
.xdata$x:00008CA1                 db    0
.xdata$x:00008CA2                 db    0
.xdata$x:00008CA3                 db    0
.xdata$x:00008CA4                 db    0
.xdata$x:00008CA5                 db    0
.xdata$x:00008CA6                 db    0
.xdata$x:00008CA7                 db    0
.xdata$x:00008CA7 _xdata$x        ends
.xdata$x:00008CA7
.xdata$x:00008CA8 ; ===========================================================================
.xdata$x:00008CA8
.xdata$x:00008CA8 ; Segment type: Pure data
.xdata$x:00008CA8 ; Segment permissions: Read
.xdata$x:00008CA8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008CA8                 assume cs:_xdata$x
.xdata$x:00008CA8                 ;org 8CA8h
.xdata$x:00008CA8 ; COMDAT (pick associative to section at 4FB0)
.xdata$x:00008CA8 __unwindtable$??1?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00008CA8                                         ; DATA XREF: .xdata$x:00008CB8o
.xdata$x:00008CA9                 db 0FFh
.xdata$x:00008CAA                 db 0FFh
.xdata$x:00008CAB                 db 0FFh
.xdata$x:00008CAC                 dd offset __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ$0
.xdata$x:00008CB0 __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00008CB0                                         ; DATA XREF: __ehhandler$??1?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ+11o
.xdata$x:00008CB1                 db    5
.xdata$x:00008CB2                 db  93h ; Ã´
.xdata$x:00008CB3                 db  19h
.xdata$x:00008CB4                 db    1
.xdata$x:00008CB5                 db    0
.xdata$x:00008CB6                 db    0
.xdata$x:00008CB7                 db    0
.xdata$x:00008CB8                 dd offset __unwindtable$??1?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@QAE@XZ
.xdata$x:00008CBC                 db    0
.xdata$x:00008CBD                 db    0
.xdata$x:00008CBE                 db    0
.xdata$x:00008CBF                 db    0
.xdata$x:00008CC0                 db    0
.xdata$x:00008CC1                 db    0
.xdata$x:00008CC2                 db    0
.xdata$x:00008CC3                 db    0
.xdata$x:00008CC4                 db    0
.xdata$x:00008CC5                 db    0
.xdata$x:00008CC6                 db    0
.xdata$x:00008CC7                 db    0
.xdata$x:00008CC8                 db    0
.xdata$x:00008CC9                 db    0
.xdata$x:00008CCA                 db    0
.xdata$x:00008CCB                 db    0
.xdata$x:00008CCC                 db    0
.xdata$x:00008CCD                 db    0
.xdata$x:00008CCE                 db    0
.xdata$x:00008CCF                 db    0
.xdata$x:00008CD0                 db    0
.xdata$x:00008CD1                 db    0
.xdata$x:00008CD2                 db    0
.xdata$x:00008CD3                 db    0
.xdata$x:00008CD3 _xdata$x        ends
.xdata$x:00008CD3
.xdata$x:00008CD4 ; ===========================================================================
.xdata$x:00008CD4
.xdata$x:00008CD4 ; Segment type: Pure data
.xdata$x:00008CD4 ; Segment permissions: Read
.xdata$x:00008CD4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008CD4                 assume cs:_xdata$x
.xdata$x:00008CD4                 ;org 8CD4h
.xdata$x:00008CD4 ; COMDAT (pick associative to section at 41F4)
.xdata$x:00008CD4 __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtTbData@@@1@@Z db 0FFh
.xdata$x:00008CD4                                         ; DATA XREF: .xdata$x:00008CE4o
.xdata$x:00008CD5                 db 0FFh
.xdata$x:00008CD6                 db 0FFh
.xdata$x:00008CD7                 db 0FFh
.xdata$x:00008CD8                 dd offset __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtTbData@@@1@@Z$0
.xdata$x:00008CDC __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtTbData@@@1@@Z db  22h ; "
.xdata$x:00008CDC                                         ; DATA XREF: __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtTbData@@@1@@Z+11o
.xdata$x:00008CDD                 db    5
.xdata$x:00008CDE                 db  93h ; Ã´
.xdata$x:00008CDF                 db  19h
.xdata$x:00008CE0                 db    1
.xdata$x:00008CE1                 db    0
.xdata$x:00008CE2                 db    0
.xdata$x:00008CE3                 db    0
.xdata$x:00008CE4                 dd offset __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtTbData@@@1@@Z
.xdata$x:00008CE8                 align 20h
.xdata$x:00008CE8 _xdata$x        ends
.xdata$x:00008CE8
.xdata$x:00008D00 ; ===========================================================================
.xdata$x:00008D00
.xdata$x:00008D00 ; Segment type: Pure data
.xdata$x:00008D00 ; Segment permissions: Read
.xdata$x:00008D00 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008D00                 assume cs:_xdata$x
.xdata$x:00008D00                 ;org 8D00h
.xdata$x:00008D00 ; COMDAT (pick associative to section at 4E58)
.xdata$x:00008D00 __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00008D00                                         ; DATA XREF: .xdata$x:00008D10o
.xdata$x:00008D01                 db 0FFh
.xdata$x:00008D02                 db 0FFh
.xdata$x:00008D03                 db 0FFh
.xdata$x:00008D04                 dd offset __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00008D08 __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00008D08                                         ; DATA XREF: __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00008D09                 db    5
.xdata$x:00008D0A                 db  93h ; Ã´
.xdata$x:00008D0B                 db  19h
.xdata$x:00008D0C                 db    1
.xdata$x:00008D0D                 db    0
.xdata$x:00008D0E                 db    0
.xdata$x:00008D0F                 db    0
.xdata$x:00008D10                 dd offset __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@@std@@QAE@XZ
.xdata$x:00008D14                 db    0
.xdata$x:00008D15                 db    0
.xdata$x:00008D16                 db    0
.xdata$x:00008D17                 db    0
.xdata$x:00008D18                 db    0
.xdata$x:00008D19                 db    0
.xdata$x:00008D1A                 db    0
.xdata$x:00008D1B                 db    0
.xdata$x:00008D1C                 db    0
.xdata$x:00008D1D                 db    0
.xdata$x:00008D1E                 db    0
.xdata$x:00008D1F                 db    0
.xdata$x:00008D20                 db    0
.xdata$x:00008D21                 db    0
.xdata$x:00008D22                 db    0
.xdata$x:00008D23                 db    0
.xdata$x:00008D24                 db    0
.xdata$x:00008D25                 db    0
.xdata$x:00008D26                 db    0
.xdata$x:00008D27                 db    0
.xdata$x:00008D28                 db    0
.xdata$x:00008D29                 db    0
.xdata$x:00008D2A                 db    0
.xdata$x:00008D2B                 db    0
.xdata$x:00008D2B _xdata$x        ends
.xdata$x:00008D2B
.xdata$x:00008D2C ; ===========================================================================
.xdata$x:00008D2C
.xdata$x:00008D2C ; Segment type: Pure data
.xdata$x:00008D2C ; Segment permissions: Read
.xdata$x:00008D2C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008D2C                 assume cs:_xdata$x
.xdata$x:00008D2C                 ;org 8D2Ch
.xdata$x:00008D2C ; COMDAT (pick associative to section at 4804)
.xdata$x:00008D2C __unwindtable$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00008D2C                                         ; DATA XREF: .xdata$x:00008D3Co
.xdata$x:00008D2D                 db 0FFh
.xdata$x:00008D2E                 db 0FFh
.xdata$x:00008D2F                 db 0FFh
.xdata$x:00008D30                 dd offset __unwindfunclet$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ$0
.xdata$x:00008D34 __ehfuncinfo$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00008D34                                         ; DATA XREF: __ehhandler$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ+11o
.xdata$x:00008D35                 db    5
.xdata$x:00008D36                 db  93h ; Ã´
.xdata$x:00008D37                 db  19h
.xdata$x:00008D38                 db    1
.xdata$x:00008D39                 db    0
.xdata$x:00008D3A                 db    0
.xdata$x:00008D3B                 db    0
.xdata$x:00008D3C                 dd offset __unwindtable$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ
.xdata$x:00008D40                 db    0
.xdata$x:00008D41                 db    0
.xdata$x:00008D42                 db    0
.xdata$x:00008D43                 db    0
.xdata$x:00008D44                 db    0
.xdata$x:00008D45                 db    0
.xdata$x:00008D46                 db    0
.xdata$x:00008D47                 db    0
.xdata$x:00008D48                 db    0
.xdata$x:00008D49                 db    0
.xdata$x:00008D4A                 db    0
.xdata$x:00008D4B                 db    0
.xdata$x:00008D4C                 db    0
.xdata$x:00008D4D                 db    0
.xdata$x:00008D4E                 db    0
.xdata$x:00008D4F                 db    0
.xdata$x:00008D50                 db    0
.xdata$x:00008D51                 db    0
.xdata$x:00008D52                 db    0
.xdata$x:00008D53                 db    0
.xdata$x:00008D54                 db    0
.xdata$x:00008D55                 db    0
.xdata$x:00008D56                 db    0
.xdata$x:00008D57                 db    0
.xdata$x:00008D57 _xdata$x        ends
.xdata$x:00008D57
.xdata$x:00008D58 ; ===========================================================================
.xdata$x:00008D58
.xdata$x:00008D58 ; Segment type: Pure data
.xdata$x:00008D58 ; Segment permissions: Read
.xdata$x:00008D58 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008D58                 assume cs:_xdata$x
.xdata$x:00008D58                 ;org 8D58h
.xdata$x:00008D58 ; COMDAT (pick associative to section at 4760)
.xdata$x:00008D58 __unwindtable$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@$$QAV01@@Z db 0FFh
.xdata$x:00008D58                                         ; DATA XREF: .xdata$x:00008D68o
.xdata$x:00008D59                 db 0FFh
.xdata$x:00008D5A                 db 0FFh
.xdata$x:00008D5B                 db 0FFh
.xdata$x:00008D5C                 dd offset __unwindfunclet$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@$$QAV01@@Z$0
.xdata$x:00008D60 __ehfuncinfo$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@$$QAV01@@Z db  22h ; "
.xdata$x:00008D60                                         ; DATA XREF: __ehhandler$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@$$QAV01@@Z+11o
.xdata$x:00008D61                 db    5
.xdata$x:00008D62                 db  93h ; Ã´
.xdata$x:00008D63                 db  19h
.xdata$x:00008D64                 db    1
.xdata$x:00008D65                 db    0
.xdata$x:00008D66                 db    0
.xdata$x:00008D67                 db    0
.xdata$x:00008D68                 dd offset __unwindtable$??0?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@$$QAV01@@Z
.xdata$x:00008D6C                 db    0
.xdata$x:00008D6D                 db    0
.xdata$x:00008D6E                 db    0
.xdata$x:00008D6F                 db    0
.xdata$x:00008D70                 db    0
.xdata$x:00008D71                 db    0
.xdata$x:00008D72                 db    0
.xdata$x:00008D73                 db    0
.xdata$x:00008D74                 db    0
.xdata$x:00008D75                 db    0
.xdata$x:00008D76                 db    0
.xdata$x:00008D77                 db    0
.xdata$x:00008D78                 db    0
.xdata$x:00008D79                 db    0
.xdata$x:00008D7A                 db    0
.xdata$x:00008D7B                 db    0
.xdata$x:00008D7C                 db    0
.xdata$x:00008D7D                 db    0
.xdata$x:00008D7E                 db    0
.xdata$x:00008D7F                 db    0
.xdata$x:00008D80                 db    0
.xdata$x:00008D81                 db    0
.xdata$x:00008D82                 db    0
.xdata$x:00008D83                 db    0
.xdata$x:00008D83 _xdata$x        ends
.xdata$x:00008D83
.xdata$x:00008D84 ; ===========================================================================
.xdata$x:00008D84
.xdata$x:00008D84 ; Segment type: Pure data
.xdata$x:00008D84 ; Segment permissions: Read
.xdata$x:00008D84 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008D84                 assume cs:_xdata$x
.xdata$x:00008D84                 ;org 8D84h
.xdata$x:00008D84 ; COMDAT (pick associative to section at 5118)
.xdata$x:00008D84 __unwindtable$??1?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00008D84                                         ; DATA XREF: .xdata$x:00008D94o
.xdata$x:00008D85                 db 0FFh
.xdata$x:00008D86                 db 0FFh
.xdata$x:00008D87                 db 0FFh
.xdata$x:00008D88                 dd offset __unwindfunclet$??1?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ$0
.xdata$x:00008D8C __ehfuncinfo$??1?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00008D8C                                         ; DATA XREF: __ehhandler$??1?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ+11o
.xdata$x:00008D8D                 db    5
.xdata$x:00008D8E                 db  93h ; Ã´
.xdata$x:00008D8F                 db  19h
.xdata$x:00008D90                 db    1
.xdata$x:00008D91                 db    0
.xdata$x:00008D92                 db    0
.xdata$x:00008D93                 db    0
.xdata$x:00008D94                 dd offset __unwindtable$??1?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE@XZ
.xdata$x:00008D98                 db    0
.xdata$x:00008D99                 db    0
.xdata$x:00008D9A                 db    0
.xdata$x:00008D9B                 db    0
.xdata$x:00008D9C                 db    0
.xdata$x:00008D9D                 db    0
.xdata$x:00008D9E                 db    0
.xdata$x:00008D9F                 db    0
.xdata$x:00008DA0                 db    0
.xdata$x:00008DA1                 db    0
.xdata$x:00008DA2                 db    0
.xdata$x:00008DA3                 db    0
.xdata$x:00008DA4                 db    0
.xdata$x:00008DA5                 db    0
.xdata$x:00008DA6                 db    0
.xdata$x:00008DA7                 db    0
.xdata$x:00008DA8                 db    0
.xdata$x:00008DA9                 db    0
.xdata$x:00008DAA                 db    0
.xdata$x:00008DAB                 db    0
.xdata$x:00008DAC                 db    0
.xdata$x:00008DAD                 db    0
.xdata$x:00008DAE                 db    0
.xdata$x:00008DAF                 db    0
.xdata$x:00008DAF _xdata$x        ends
.xdata$x:00008DAF
.xdata$x:00008DB0 ; ===========================================================================
.xdata$x:00008DB0
.xdata$x:00008DB0 ; Segment type: Pure data
.xdata$x:00008DB0 ; Segment permissions: Read
.xdata$x:00008DB0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008DB0                 assume cs:_xdata$x
.xdata$x:00008DB0                 ;org 8DB0h
.xdata$x:00008DB0 ; COMDAT (pick associative to section at 7350)
.xdata$x:00008DB0 __unwindtable$?begin@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@XZ db 0FFh
.xdata$x:00008DB0                                         ; DATA XREF: .xdata$x:00008DC0o
.xdata$x:00008DB1                 db 0FFh
.xdata$x:00008DB2                 db 0FFh
.xdata$x:00008DB3                 db 0FFh
.xdata$x:00008DB4                 dd offset __unwindfunclet$?begin@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@XZ$0
.xdata$x:00008DB8 __ehfuncinfo$?begin@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@XZ db  22h ; "
.xdata$x:00008DB8                                         ; DATA XREF: __ehhandler$?begin@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@XZ+11o
.xdata$x:00008DB9                 db    5
.xdata$x:00008DBA                 db  93h ; Ã´
.xdata$x:00008DBB                 db  19h
.xdata$x:00008DBC                 db    1
.xdata$x:00008DBD                 db    0
.xdata$x:00008DBE                 db    0
.xdata$x:00008DBF                 db    0
.xdata$x:00008DC0                 dd offset __unwindtable$?begin@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@XZ
.xdata$x:00008DC4                 db    0
.xdata$x:00008DC5                 db    0
.xdata$x:00008DC6                 db    0
.xdata$x:00008DC7                 db    0
.xdata$x:00008DC8                 db    0
.xdata$x:00008DC9                 db    0
.xdata$x:00008DCA                 db    0
.xdata$x:00008DCB                 db    0
.xdata$x:00008DCC                 db    0
.xdata$x:00008DCD                 db    0
.xdata$x:00008DCE                 db    0
.xdata$x:00008DCF                 db    0
.xdata$x:00008DD0                 db    0
.xdata$x:00008DD1                 db    0
.xdata$x:00008DD2                 db    0
.xdata$x:00008DD3                 db    0
.xdata$x:00008DD4                 db    0
.xdata$x:00008DD5                 db    0
.xdata$x:00008DD6                 db    0
.xdata$x:00008DD7                 db    0
.xdata$x:00008DD8                 db    0
.xdata$x:00008DD9                 db    0
.xdata$x:00008DDA                 db    0
.xdata$x:00008DDB                 db    0
.xdata$x:00008DDB _xdata$x        ends
.xdata$x:00008DDB
.xdata$x:00008DDC ; ===========================================================================
.xdata$x:00008DDC
.xdata$x:00008DDC ; Segment type: Pure data
.xdata$x:00008DDC ; Segment permissions: Read
.xdata$x:00008DDC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008DDC                 assume cs:_xdata$x
.xdata$x:00008DDC                 ;org 8DDCh
.xdata$x:00008DDC ; COMDAT (pick associative to section at 650C)
.xdata$x:00008DDC __unwindtable$?_Make_iter@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z db 0FFh
.xdata$x:00008DDC                                         ; DATA XREF: .xdata$x:00008DF4o
.xdata$x:00008DDD                 db 0FFh
.xdata$x:00008DDE                 db 0FFh
.xdata$x:00008DDF                 db 0FFh
.xdata$x:00008DE0                 dd offset __unwindfunclet$?_Make_iter@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z$1
.xdata$x:00008DE4                 align 8
.xdata$x:00008DE8                 dd offset __unwindfunclet$?_Make_iter@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z$0
.xdata$x:00008DEC __ehfuncinfo$?_Make_iter@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z db  22h ; "
.xdata$x:00008DEC                                         ; DATA XREF: __ehhandler$?_Make_iter@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z+11o
.xdata$x:00008DED                 db    5
.xdata$x:00008DEE                 db  93h ; Ã´
.xdata$x:00008DEF                 db  19h
.xdata$x:00008DF0                 db    2
.xdata$x:00008DF1                 db    0
.xdata$x:00008DF2                 db    0
.xdata$x:00008DF3                 db    0
.xdata$x:00008DF4                 dd offset __unwindtable$?_Make_iter@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z
.xdata$x:00008DF8                 db    0
.xdata$x:00008DF9                 db    0
.xdata$x:00008DFA                 db    0
.xdata$x:00008DFB                 db    0
.xdata$x:00008DFC                 db    0
.xdata$x:00008DFD                 db    0
.xdata$x:00008DFE                 db    0
.xdata$x:00008DFF                 db    0
.xdata$x:00008E00                 db    0
.xdata$x:00008E01                 db    0
.xdata$x:00008E02                 db    0
.xdata$x:00008E03                 db    0
.xdata$x:00008E04                 db    0
.xdata$x:00008E05                 db    0
.xdata$x:00008E06                 db    0
.xdata$x:00008E07                 db    0
.xdata$x:00008E08                 db    0
.xdata$x:00008E09                 db    0
.xdata$x:00008E0A                 db    0
.xdata$x:00008E0B                 db    0
.xdata$x:00008E0C                 db    0
.xdata$x:00008E0D                 db    0
.xdata$x:00008E0E                 db    0
.xdata$x:00008E0F                 db    0
.xdata$x:00008E0F _xdata$x        ends
.xdata$x:00008E0F
.xdata$x:00008E10 ; ===========================================================================
.xdata$x:00008E10
.xdata$x:00008E10 ; Segment type: Pure data
.xdata$x:00008E10 ; Segment permissions: Read
.xdata$x:00008E10 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008E10                 assume cs:_xdata$x
.xdata$x:00008E10                 ;org 8E10h
.xdata$x:00008E10 ; COMDAT (pick associative to section at 795C)
.xdata$x:00008E10 __unwindtable$?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z db 0FFh
.xdata$x:00008E10                                         ; DATA XREF: .xdata$x:00008E30o
.xdata$x:00008E11                 db 0FFh
.xdata$x:00008E12                 db 0FFh
.xdata$x:00008E13                 db 0FFh
.xdata$x:00008E14                 dd offset __unwindfunclet$?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z$2
.xdata$x:00008E18                 db    0
.xdata$x:00008E19                 db    0
.xdata$x:00008E1A                 db    0
.xdata$x:00008E1B                 db    0
.xdata$x:00008E1C                 dd offset __unwindfunclet$?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z$0
.xdata$x:00008E20                 db    1
.xdata$x:00008E21                 db    0
.xdata$x:00008E22                 db    0
.xdata$x:00008E23                 db    0
.xdata$x:00008E24                 dd offset __unwindfunclet$?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z$1
.xdata$x:00008E28 __ehfuncinfo$?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z db  22h ; "
.xdata$x:00008E28                                         ; DATA XREF: __ehhandler$?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z+11o
.xdata$x:00008E29                 db    5
.xdata$x:00008E2A                 db  93h ; Ã´
.xdata$x:00008E2B                 db  19h
.xdata$x:00008E2C                 db    3
.xdata$x:00008E2D                 db    0
.xdata$x:00008E2E                 db    0
.xdata$x:00008E2F                 db    0
.xdata$x:00008E30                 dd offset __unwindtable$?erase@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@2@@Z
.xdata$x:00008E34                 db    0
.xdata$x:00008E35                 db    0
.xdata$x:00008E36                 db    0
.xdata$x:00008E37                 db    0
.xdata$x:00008E38                 db    0
.xdata$x:00008E39                 db    0
.xdata$x:00008E3A                 db    0
.xdata$x:00008E3B                 db    0
.xdata$x:00008E3C                 db    0
.xdata$x:00008E3D                 db    0
.xdata$x:00008E3E                 db    0
.xdata$x:00008E3F                 db    0
.xdata$x:00008E40                 db    0
.xdata$x:00008E41                 db    0
.xdata$x:00008E42                 db    0
.xdata$x:00008E43                 db    0
.xdata$x:00008E44                 db    0
.xdata$x:00008E45                 db    0
.xdata$x:00008E46                 db    0
.xdata$x:00008E47                 db    0
.xdata$x:00008E48                 db    0
.xdata$x:00008E49                 db    0
.xdata$x:00008E4A                 db    0
.xdata$x:00008E4B                 db    0
.xdata$x:00008E4B _xdata$x        ends
.xdata$x:00008E4B
.xdata$x:00008E4C ; ===========================================================================
.xdata$x:00008E4C
.xdata$x:00008E4C ; Segment type: Pure data
.xdata$x:00008E4C ; Segment permissions: Read
.xdata$x:00008E4C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008E4C                 assume cs:_xdata$x
.xdata$x:00008E4C                 ;org 8E4Ch
.xdata$x:00008E4C ; COMDAT (pick associative to section at 68A8)
.xdata$x:00008E4C __catchsym$?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z$2 db    0
.xdata$x:00008E4C                                         ; DATA XREF: .xdata$x:00008E7Co
.xdata$x:00008E4D                 db    0
.xdata$x:00008E4E                 db    0
.xdata$x:00008E4F                 db    0
.xdata$x:00008E50                 db    0
.xdata$x:00008E51                 db    0
.xdata$x:00008E52                 db    0
.xdata$x:00008E53                 db    0
.xdata$x:00008E54                 db    0
.xdata$x:00008E55                 db    0
.xdata$x:00008E56                 db    0
.xdata$x:00008E57                 db    0
.xdata$x:00008E58                 dd offset __catch$?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z$0
.xdata$x:00008E5C __unwindtable$?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z db 0FFh
.xdata$x:00008E5C                                         ; DATA XREF: .xdata$x:00008E88o
.xdata$x:00008E5D                 db 0FFh
.xdata$x:00008E5E                 db 0FFh
.xdata$x:00008E5F                 db 0FFh
.xdata$x:00008E60                 db    0
.xdata$x:00008E61                 db    0
.xdata$x:00008E62                 db    0
.xdata$x:00008E63                 db    0
.xdata$x:00008E64                 db 0FFh
.xdata$x:00008E65                 db 0FFh
.xdata$x:00008E66                 db 0FFh
.xdata$x:00008E67                 db 0FFh
.xdata$x:00008E68                 db    0
.xdata$x:00008E69                 db    0
.xdata$x:00008E6A                 db    0
.xdata$x:00008E6B                 db    0
.xdata$x:00008E6C __tryblocktable$?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z db    0
.xdata$x:00008E6C                                         ; DATA XREF: .xdata$x:00008E90o
.xdata$x:00008E6D                 db    0
.xdata$x:00008E6E                 db    0
.xdata$x:00008E6F                 db    0
.xdata$x:00008E70                 db    0
.xdata$x:00008E71                 db    0
.xdata$x:00008E72                 db    0
.xdata$x:00008E73                 db    0
.xdata$x:00008E74                 db    1
.xdata$x:00008E75                 db    0
.xdata$x:00008E76                 db    0
.xdata$x:00008E77                 db    0
.xdata$x:00008E78                 db    1
.xdata$x:00008E79                 db    0
.xdata$x:00008E7A                 db    0
.xdata$x:00008E7B                 db    0
.xdata$x:00008E7C                 dd offset __catchsym$?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z$2
.xdata$x:00008E80 __ehfuncinfo$?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z db  22h ; "
.xdata$x:00008E80                                         ; DATA XREF: __ehhandler$?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z+11o
.xdata$x:00008E81                 db    5
.xdata$x:00008E82                 db  93h ; Ã´
.xdata$x:00008E83                 db  19h
.xdata$x:00008E84                 db    2
.xdata$x:00008E85                 db    0
.xdata$x:00008E86                 db    0
.xdata$x:00008E87                 db    0
.xdata$x:00008E88                 dd offset __unwindtable$?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z
.xdata$x:00008E8C                 db    1
.xdata$x:00008E8D                 db    0
.xdata$x:00008E8E                 db    0
.xdata$x:00008E8F                 db    0
.xdata$x:00008E90                 dd offset __tryblocktable$?_Reallocate@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IAEXI@Z
.xdata$x:00008E94                 db    0
.xdata$x:00008E95                 db    0
.xdata$x:00008E96                 db    0
.xdata$x:00008E97                 db    0
.xdata$x:00008E98                 db    0
.xdata$x:00008E99                 db    0
.xdata$x:00008E9A                 db    0
.xdata$x:00008E9B                 db    0
.xdata$x:00008E9C                 db    0
.xdata$x:00008E9D                 db    0
.xdata$x:00008E9E                 db    0
.xdata$x:00008E9F                 db    0
.xdata$x:00008EA0                 db    0
.xdata$x:00008EA1                 db    0
.xdata$x:00008EA2                 db    0
.xdata$x:00008EA3                 db    0
.xdata$x:00008EA3 _xdata$x        ends
.xdata$x:00008EA3
.xdata$x:00008EA4 ; ===========================================================================
.xdata$x:00008EA4
.xdata$x:00008EA4 ; Segment type: Pure data
.xdata$x:00008EA4 ; Segment permissions: Read
.xdata$x:00008EA4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008EA4                 assume cs:_xdata$x
.xdata$x:00008EA4                 ;org 8EA4h
.xdata$x:00008EA4 ; COMDAT (pick associative to section at 67CC)
.xdata$x:00008EA4 __unwindtable$?_Orphan_range@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXPAPAUtTbData@@0@Z db 0FFh
.xdata$x:00008EA4                                         ; DATA XREF: .xdata$x:00008EB4o
.xdata$x:00008EA5                 db 0FFh
.xdata$x:00008EA6                 db 0FFh
.xdata$x:00008EA7                 db 0FFh
.xdata$x:00008EA8                 dd offset __unwindfunclet$?_Orphan_range@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXPAPAUtTbData@@0@Z$0
.xdata$x:00008EAC __ehfuncinfo$?_Orphan_range@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXPAPAUtTbData@@0@Z db  22h ; "
.xdata$x:00008EAC                                         ; DATA XREF: __ehhandler$?_Orphan_range@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXPAPAUtTbData@@0@Z+11o
.xdata$x:00008EAD                 db    5
.xdata$x:00008EAE                 db  93h ; Ã´
.xdata$x:00008EAF                 db  19h
.xdata$x:00008EB0                 db    1
.xdata$x:00008EB1                 db    0
.xdata$x:00008EB2                 db    0
.xdata$x:00008EB3                 db    0
.xdata$x:00008EB4                 dd offset __unwindtable$?_Orphan_range@?$vector@PAUtTbData@@V?$allocator@PAUtTbData@@@std@@@std@@IBEXPAPAUtTbData@@0@Z
.xdata$x:00008EB8                 db    0
.xdata$x:00008EB9                 db    0
.xdata$x:00008EBA                 db    0
.xdata$x:00008EBB                 db    0
.xdata$x:00008EBC                 db    0
.xdata$x:00008EBD                 db    0
.xdata$x:00008EBE                 db    0
.xdata$x:00008EBF                 db    0
.xdata$x:00008EC0                 db    0
.xdata$x:00008EC1                 db    0
.xdata$x:00008EC2                 db    0
.xdata$x:00008EC3                 db    0
.xdata$x:00008EC4                 db    0
.xdata$x:00008EC5                 db    0
.xdata$x:00008EC6                 db    0
.xdata$x:00008EC7                 db    0
.xdata$x:00008EC8                 db    0
.xdata$x:00008EC9                 db    0
.xdata$x:00008ECA                 db    0
.xdata$x:00008ECB                 db    0
.xdata$x:00008ECC                 db    0
.xdata$x:00008ECD                 db    0
.xdata$x:00008ECE                 db    0
.xdata$x:00008ECF                 db    0
.xdata$x:00008ECF _xdata$x        ends
.xdata$x:00008ECF
.xdata$x:00008ED0 ; ===========================================================================
.xdata$x:00008ED0
.xdata$x:00008ED0 ; Segment type: Pure data
.xdata$x:00008ED0 ; Segment permissions: Read
.xdata$x:00008ED0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008ED0                 assume cs:_xdata$x
.xdata$x:00008ED0                 ;org 8ED0h
.xdata$x:00008ED0 ; COMDAT (pick associative to section at 4900)
.xdata$x:00008ED0 __unwindtable$??0ToolTip@@QAE@XZ db 0FFh ; DATA XREF: .xdata$x:00008EE0o
.xdata$x:00008ED1                 db 0FFh
.xdata$x:00008ED2                 db 0FFh
.xdata$x:00008ED3                 db 0FFh
.xdata$x:00008ED4                 dd offset __unwindfunclet$??0ToolTip@@QAE@XZ$0
.xdata$x:00008ED8 __ehfuncinfo$??0ToolTip@@QAE@XZ db  22h ; "
.xdata$x:00008ED8                                         ; DATA XREF: __ehhandler$??0ToolTip@@QAE@XZ+11o
.xdata$x:00008ED9                 db    5
.xdata$x:00008EDA                 db  93h ; Ã´
.xdata$x:00008EDB                 db  19h
.xdata$x:00008EDC                 db    1
.xdata$x:00008EDD                 db    0
.xdata$x:00008EDE                 db    0
.xdata$x:00008EDF                 db    0
.xdata$x:00008EE0                 dd offset __unwindtable$??0ToolTip@@QAE@XZ
.xdata$x:00008EE4                 db    0
.xdata$x:00008EE5                 db    0
.xdata$x:00008EE6                 db    0
.xdata$x:00008EE7                 db    0
.xdata$x:00008EE8                 db    0
.xdata$x:00008EE9                 db    0
.xdata$x:00008EEA                 db    0
.xdata$x:00008EEB                 db    0
.xdata$x:00008EEC                 db    0
.xdata$x:00008EED                 db    0
.xdata$x:00008EEE                 db    0
.xdata$x:00008EEF                 db    0
.xdata$x:00008EF0                 db    0
.xdata$x:00008EF1                 db    0
.xdata$x:00008EF2                 db    0
.xdata$x:00008EF3                 db    0
.xdata$x:00008EF4                 db    0
.xdata$x:00008EF5                 db    0
.xdata$x:00008EF6                 db    0
.xdata$x:00008EF7                 db    0
.xdata$x:00008EF8                 db    0
.xdata$x:00008EF9                 db    0
.xdata$x:00008EFA                 db    0
.xdata$x:00008EFB                 db    0
.xdata$x:00008EFB _xdata$x        ends
.xdata$x:00008EFB
.xdata$x:00008EFC ; ===========================================================================
.xdata$x:00008EFC
.xdata$x:00008EFC ; Segment type: Pure data
.xdata$x:00008EFC ; Segment permissions: Read
.xdata$x:00008EFC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008EFC                 assume cs:_xdata$x
.xdata$x:00008EFC                 ;org 8EFCh
.xdata$x:00008EFC ; COMDAT (pick associative to section at 5230)
.xdata$x:00008EFC __unwindtable$??1ToolTip@@UAE@XZ db 0FFh ; DATA XREF: .xdata$x:00008F0Co
.xdata$x:00008EFD                 db 0FFh
.xdata$x:00008EFE                 db 0FFh
.xdata$x:00008EFF                 db 0FFh
.xdata$x:00008F00                 dd offset __unwindfunclet$??1ToolTip@@UAE@XZ$0
.xdata$x:00008F04 __ehfuncinfo$??1ToolTip@@UAE@XZ db  22h ; "
.xdata$x:00008F04                                         ; DATA XREF: __ehhandler$??1ToolTip@@UAE@XZ+11o
.xdata$x:00008F05                 db    5
.xdata$x:00008F06                 db  93h ; Ã´
.xdata$x:00008F07                 db  19h
.xdata$x:00008F08                 db    1
.xdata$x:00008F09                 db    0
.xdata$x:00008F0A                 db    0
.xdata$x:00008F0B                 db    0
.xdata$x:00008F0C                 dd offset __unwindtable$??1ToolTip@@UAE@XZ
.xdata$x:00008F10                 db    0
.xdata$x:00008F11                 db    0
.xdata$x:00008F12                 db    0
.xdata$x:00008F13                 db    0
.xdata$x:00008F14                 db    0
.xdata$x:00008F15                 db    0
.xdata$x:00008F16                 db    0
.xdata$x:00008F17                 db    0
.xdata$x:00008F18                 db    0
.xdata$x:00008F19                 db    0
.xdata$x:00008F1A                 db    0
.xdata$x:00008F1B                 db    0
.xdata$x:00008F1C                 db    0
.xdata$x:00008F1D                 db    0
.xdata$x:00008F1E                 db    0
.xdata$x:00008F1F                 db    0
.xdata$x:00008F20                 db    0
.xdata$x:00008F21                 db    0
.xdata$x:00008F22                 db    0
.xdata$x:00008F23                 db    0
.xdata$x:00008F24                 db    0
.xdata$x:00008F25                 db    0
.xdata$x:00008F26                 db    0
.xdata$x:00008F27                 db    0
.xdata$x:00008F27 _xdata$x        ends
.xdata$x:00008F27
.xdata$x:00008F28 ; ===========================================================================
.xdata$x:00008F28
.xdata$x:00008F28 ; Segment type: Pure data
.xdata$x:00008F28 ; Segment permissions: Read
.xdata$x:00008F28 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008F28                 assume cs:_xdata$x
.xdata$x:00008F28                 ;org 8F28h
.xdata$x:00008F28 ; COMDAT (pick associative to section at 3F78)
.xdata$x:00008F28 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:00008F28                                         ; DATA XREF: .xdata$x:00008F38o
.xdata$x:00008F29                 db 0FFh
.xdata$x:00008F2A                 db 0FFh
.xdata$x:00008F2B                 db 0FFh
.xdata$x:00008F2C                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:00008F30 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00008F30                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:00008F31                 db    5
.xdata$x:00008F32                 db  93h ; Ã´
.xdata$x:00008F33                 db  19h
.xdata$x:00008F34                 db    1
.xdata$x:00008F35                 db    0
.xdata$x:00008F36                 db    0
.xdata$x:00008F37                 db    0
.xdata$x:00008F38                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:00008F3C                 db    0
.xdata$x:00008F3D                 db    0
.xdata$x:00008F3E                 db    0
.xdata$x:00008F3F                 db    0
.xdata$x:00008F40                 db    0
.xdata$x:00008F41                 db    0
.xdata$x:00008F42                 db    0
.xdata$x:00008F43                 db    0
.xdata$x:00008F44                 db    0
.xdata$x:00008F45                 db    0
.xdata$x:00008F46                 db    0
.xdata$x:00008F47                 db    0
.xdata$x:00008F48                 db    0
.xdata$x:00008F49                 db    0
.xdata$x:00008F4A                 db    0
.xdata$x:00008F4B                 db    0
.xdata$x:00008F4C                 db    0
.xdata$x:00008F4D                 db    0
.xdata$x:00008F4E                 db    0
.xdata$x:00008F4F                 db    0
.xdata$x:00008F50                 db    0
.xdata$x:00008F51                 db    0
.xdata$x:00008F52                 db    0
.xdata$x:00008F53                 db    0
.xdata$x:00008F53 _xdata$x        ends
.xdata$x:00008F53
.xdata$x:00008F54 ; ===========================================================================
.xdata$x:00008F54
.xdata$x:00008F54 ; Segment type: Pure data
.xdata$x:00008F54 ; Segment permissions: Read
.xdata$x:00008F54 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008F54                 assume cs:_xdata$x
.xdata$x:00008F54                 ;org 8F54h
.xdata$x:00008F54 ; COMDAT (pick associative to section at 4C18)
.xdata$x:00008F54 __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:00008F54                                         ; DATA XREF: .xdata$x:00008F64o
.xdata$x:00008F55                 db 0FFh
.xdata$x:00008F56                 db 0FFh
.xdata$x:00008F57                 db 0FFh
.xdata$x:00008F58                 dd offset __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:00008F5C __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00008F5C                                         ; DATA XREF: __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:00008F5D                 db    5
.xdata$x:00008F5E                 db  93h ; Ã´
.xdata$x:00008F5F                 db  19h
.xdata$x:00008F60                 db    1
.xdata$x:00008F61                 db    0
.xdata$x:00008F62                 db    0
.xdata$x:00008F63                 db    0
.xdata$x:00008F64                 dd offset __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:00008F68                 align 20h
.xdata$x:00008F68 _xdata$x        ends
.xdata$x:00008F68
.xdata$x:00008F80 ; ===========================================================================
.xdata$x:00008F80
.xdata$x:00008F80 ; Segment type: Pure data
.xdata$x:00008F80 ; Segment permissions: Read
.xdata$x:00008F80 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008F80                 assume cs:_xdata$x
.xdata$x:00008F80                 ;org 8F80h
.xdata$x:00008F80 ; COMDAT (pick associative to section at 3F00)
.xdata$x:00008F80 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z db 0FFh
.xdata$x:00008F80                                         ; DATA XREF: .xdata$x:00008F90o
.xdata$x:00008F81                 db 0FFh
.xdata$x:00008F82                 db 0FFh
.xdata$x:00008F83                 db 0FFh
.xdata$x:00008F84                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
.xdata$x:00008F88 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z db  22h ; "
.xdata$x:00008F88                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z+11o
.xdata$x:00008F89                 db    5
.xdata$x:00008F8A                 db  93h ; Ã´
.xdata$x:00008F8B                 db  19h
.xdata$x:00008F8C                 db    1
.xdata$x:00008F8D                 db    0
.xdata$x:00008F8E                 db    0
.xdata$x:00008F8F                 db    0
.xdata$x:00008F90                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAUtTbData@@HPBQAU3@ABQAU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.xdata$x:00008F94                 db    0
.xdata$x:00008F95                 db    0
.xdata$x:00008F96                 db    0
.xdata$x:00008F97                 db    0
.xdata$x:00008F98                 db    0
.xdata$x:00008F99                 db    0
.xdata$x:00008F9A                 db    0
.xdata$x:00008F9B                 db    0
.xdata$x:00008F9C                 db    0
.xdata$x:00008F9D                 db    0
.xdata$x:00008F9E                 db    0
.xdata$x:00008F9F                 db    0
.xdata$x:00008FA0                 db    0
.xdata$x:00008FA1                 db    0
.xdata$x:00008FA2                 db    0
.xdata$x:00008FA3                 db    0
.xdata$x:00008FA4                 db    0
.xdata$x:00008FA5                 db    0
.xdata$x:00008FA6                 db    0
.xdata$x:00008FA7                 db    0
.xdata$x:00008FA8                 db    0
.xdata$x:00008FA9                 db    0
.xdata$x:00008FAA                 db    0
.xdata$x:00008FAB                 db    0
.xdata$x:00008FAB _xdata$x        ends
.xdata$x:00008FAB
.xdata$x:00008FAC ; ===========================================================================
.xdata$x:00008FAC
.xdata$x:00008FAC ; Segment type: Pure data
.xdata$x:00008FAC ; Segment permissions: Read
.xdata$x:00008FAC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008FAC                 assume cs:_xdata$x
.xdata$x:00008FAC                 ;org 8FACh
.xdata$x:00008FAC ; COMDAT (pick associative to section at 42F4)
.xdata$x:00008FAC __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z db 0FFh
.xdata$x:00008FAC                                         ; DATA XREF: .xdata$x:00008FBCo
.xdata$x:00008FAD                 db 0FFh
.xdata$x:00008FAE                 db 0FFh
.xdata$x:00008FAF                 db 0FFh
.xdata$x:00008FB0                 dd offset __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z$0
.xdata$x:00008FB4 __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z db  22h ; "
.xdata$x:00008FB4                                         ; DATA XREF: __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z+11o
.xdata$x:00008FB5                 db    5
.xdata$x:00008FB6                 db  93h ; Ã´
.xdata$x:00008FB7                 db  19h
.xdata$x:00008FB8                 db    1
.xdata$x:00008FB9                 db    0
.xdata$x:00008FBA                 db    0
.xdata$x:00008FBB                 db    0
.xdata$x:00008FBC                 dd offset __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z
.xdata$x:00008FC0                 db    0
.xdata$x:00008FC1                 db    0
.xdata$x:00008FC2                 db    0
.xdata$x:00008FC3                 db    0
.xdata$x:00008FC4                 db    0
.xdata$x:00008FC5                 db    0
.xdata$x:00008FC6                 db    0
.xdata$x:00008FC7                 db    0
.xdata$x:00008FC8                 db    0
.xdata$x:00008FC9                 db    0
.xdata$x:00008FCA                 db    0
.xdata$x:00008FCB                 db    0
.xdata$x:00008FCC                 db    0
.xdata$x:00008FCD                 db    0
.xdata$x:00008FCE                 db    0
.xdata$x:00008FCF                 db    0
.xdata$x:00008FD0                 db    0
.xdata$x:00008FD1                 db    0
.xdata$x:00008FD2                 db    0
.xdata$x:00008FD3                 db    0
.xdata$x:00008FD4                 db    0
.xdata$x:00008FD5                 db    0
.xdata$x:00008FD6                 db    0
.xdata$x:00008FD7                 db    0
.xdata$x:00008FD7 _xdata$x        ends
.xdata$x:00008FD7
.xdata$x:00008FD8 ; ===========================================================================
.xdata$x:00008FD8
.xdata$x:00008FD8 ; Segment type: Pure data
.xdata$x:00008FD8 ; Segment permissions: Read
.xdata$x:00008FD8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008FD8                 assume cs:_xdata$x
.xdata$x:00008FD8                 ;org 8FD8h
.xdata$x:00008FD8 ; COMDAT (pick associative to section at 4ED0)
.xdata$x:00008FD8 __unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00008FD8                                         ; DATA XREF: .xdata$x:00008FE8o
.xdata$x:00008FD9                 db 0FFh
.xdata$x:00008FDA                 db 0FFh
.xdata$x:00008FDB                 db 0FFh
.xdata$x:00008FDC                 dd offset __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00008FE0 __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00008FE0                                         ; DATA XREF: __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00008FE1                 db    5
.xdata$x:00008FE2                 db  93h ; Ã´
.xdata$x:00008FE3                 db  19h
.xdata$x:00008FE4                 db    1
.xdata$x:00008FE5                 db    0
.xdata$x:00008FE6                 db    0
.xdata$x:00008FE7                 db    0
.xdata$x:00008FE8                 dd offset __unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ
.xdata$x:00008FEC                 db    0
.xdata$x:00008FED                 db    0
.xdata$x:00008FEE                 db    0
.xdata$x:00008FEF                 db    0
.xdata$x:00008FF0                 db    0
.xdata$x:00008FF1                 db    0
.xdata$x:00008FF2                 db    0
.xdata$x:00008FF3                 db    0
.xdata$x:00008FF4                 db    0
.xdata$x:00008FF5                 db    0
.xdata$x:00008FF6                 db    0
.xdata$x:00008FF7                 db    0
.xdata$x:00008FF8                 db    0
.xdata$x:00008FF9                 db    0
.xdata$x:00008FFA                 db    0
.xdata$x:00008FFB                 db    0
.xdata$x:00008FFC                 db    0
.xdata$x:00008FFD                 db    0
.xdata$x:00008FFE                 db    0
.xdata$x:00008FFF                 db    0
.xdata$x:00009000                 db    0
.xdata$x:00009001                 db    0
.xdata$x:00009002                 db    0
.xdata$x:00009003                 db    0
.xdata$x:00009003 _xdata$x        ends
.xdata$x:00009003
.xdata$x:00009004 ; ===========================================================================
.xdata$x:00009004
.xdata$x:00009004 ; Segment type: Pure data
.xdata$x:00009004 ; Segment permissions: Read
.xdata$x:00009004 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009004                 assume cs:_xdata$x
.xdata$x:00009004                 ;org 9004h
.xdata$x:00009004 ; COMDAT (pick associative to section at 4270)
.xdata$x:00009004 __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:00009004                                         ; DATA XREF: .xdata$x:00009014o
.xdata$x:00009005                 db 0FFh
.xdata$x:00009006                 db 0FFh
.xdata$x:00009007                 db 0FFh
.xdata$x:00009008                 dd offset __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:0000900C __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000900C                                         ; DATA XREF: __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000900D                 db    5
.xdata$x:0000900E                 db  93h ; Ã´
.xdata$x:0000900F                 db  19h
.xdata$x:00009010                 db    1
.xdata$x:00009011                 db    0
.xdata$x:00009012                 db    0
.xdata$x:00009013                 db    0
.xdata$x:00009014                 dd offset __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:00009018                 db    0
.xdata$x:00009019                 db    0
.xdata$x:0000901A                 db    0
.xdata$x:0000901B                 db    0
.xdata$x:0000901C                 db    0
.xdata$x:0000901D                 db    0
.xdata$x:0000901E                 db    0
.xdata$x:0000901F                 db    0
.xdata$x:00009020                 db    0
.xdata$x:00009021                 db    0
.xdata$x:00009022                 db    0
.xdata$x:00009023                 db    0
.xdata$x:00009024                 db    0
.xdata$x:00009025                 db    0
.xdata$x:00009026                 db    0
.xdata$x:00009027                 db    0
.xdata$x:00009028                 db    0
.xdata$x:00009029                 db    0
.xdata$x:0000902A                 db    0
.xdata$x:0000902B                 db    0
.xdata$x:0000902C                 db    0
.xdata$x:0000902D                 db    0
.xdata$x:0000902E                 db    0
.xdata$x:0000902F                 db    0
.xdata$x:0000902F _xdata$x        ends
.xdata$x:0000902F
.xdata$x:00009030 ; ===========================================================================
.xdata$x:00009030
.xdata$x:00009030 ; Segment type: Pure data
.xdata$x:00009030 ; Segment permissions: Read
.xdata$x:00009030 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009030                 assume cs:_xdata$x
.xdata$x:00009030                 ;org 9030h
.xdata$x:00009030 ; COMDAT (pick associative to section at 43F8)
.xdata$x:00009030 __unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z db 0FFh
.xdata$x:00009030                                         ; DATA XREF: .xdata$x:00009040o
.xdata$x:00009031                 db 0FFh
.xdata$x:00009032                 db 0FFh
.xdata$x:00009033                 db 0FFh
.xdata$x:00009034                 dd offset __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z$0
.xdata$x:00009038 __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z db  22h ; "
.xdata$x:00009038                                         ; DATA XREF: __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z+11o
.xdata$x:00009039                 db    5
.xdata$x:0000903A                 db  93h ; Ã´
.xdata$x:0000903B                 db  19h
.xdata$x:0000903C                 db    1
.xdata$x:0000903D                 db    0
.xdata$x:0000903E                 db    0
.xdata$x:0000903F                 db    0
.xdata$x:00009040                 dd offset __unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@PAPAUtTbData@@PBU_Container_base12@1@@Z
.xdata$x:00009044                 db    0
.xdata$x:00009045                 db    0
.xdata$x:00009046                 db    0
.xdata$x:00009047                 db    0
.xdata$x:00009048                 db    0
.xdata$x:00009049                 db    0
.xdata$x:0000904A                 db    0
.xdata$x:0000904B                 db    0
.xdata$x:0000904C                 db    0
.xdata$x:0000904D                 db    0
.xdata$x:0000904E                 db    0
.xdata$x:0000904F                 db    0
.xdata$x:00009050                 db    0
.xdata$x:00009051                 db    0
.xdata$x:00009052                 db    0
.xdata$x:00009053                 db    0
.xdata$x:00009054                 db    0
.xdata$x:00009055                 db    0
.xdata$x:00009056                 db    0
.xdata$x:00009057                 db    0
.xdata$x:00009058                 db    0
.xdata$x:00009059                 db    0
.xdata$x:0000905A                 db    0
.xdata$x:0000905B                 db    0
.xdata$x:0000905B _xdata$x        ends
.xdata$x:0000905B
.xdata$x:0000905C ; ===========================================================================
.xdata$x:0000905C
.xdata$x:0000905C ; Segment type: Pure data
.xdata$x:0000905C ; Segment permissions: Read
.xdata$x:0000905C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000905C                 assume cs:_xdata$x
.xdata$x:0000905C                 ;org 905Ch
.xdata$x:0000905C ; COMDAT (pick associative to section at 56A4)
.xdata$x:0000905C __unwindtable$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QBE?AV01@H@Z db 0FFh
.xdata$x:0000905C                                         ; DATA XREF: .xdata$x:00009074o
.xdata$x:0000905D                 db 0FFh
.xdata$x:0000905E                 db 0FFh
.xdata$x:0000905F                 db 0FFh
.xdata$x:00009060                 dd offset __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QBE?AV01@H@Z$1
.xdata$x:00009064                 align 8
.xdata$x:00009068                 dd offset __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QBE?AV01@H@Z$0
.xdata$x:0000906C __ehfuncinfo$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QBE?AV01@H@Z db  22h ; "
.xdata$x:0000906C                                         ; DATA XREF: __ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QBE?AV01@H@Z+11o
.xdata$x:0000906D                 db    5
.xdata$x:0000906E                 db  93h ; Ã´
.xdata$x:0000906F                 db  19h
.xdata$x:00009070                 db    2
.xdata$x:00009071                 db    0
.xdata$x:00009072                 db    0
.xdata$x:00009073                 db    0
.xdata$x:00009074                 dd offset __unwindtable$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QBE?AV01@H@Z
.xdata$x:00009078                 db    0
.xdata$x:00009079                 db    0
.xdata$x:0000907A                 db    0
.xdata$x:0000907B                 db    0
.xdata$x:0000907C                 db    0
.xdata$x:0000907D                 db    0
.xdata$x:0000907E                 db    0
.xdata$x:0000907F                 db    0
.xdata$x:00009080                 db    0
.xdata$x:00009081                 db    0
.xdata$x:00009082                 db    0
.xdata$x:00009083                 db    0
.xdata$x:00009084                 db    0
.xdata$x:00009085                 db    0
.xdata$x:00009086                 db    0
.xdata$x:00009087                 db    0
.xdata$x:00009088                 db    0
.xdata$x:00009089                 db    0
.xdata$x:0000908A                 db    0
.xdata$x:0000908B                 db    0
.xdata$x:0000908C                 db    0
.xdata$x:0000908D                 db    0
.xdata$x:0000908E                 db    0
.xdata$x:0000908F                 db    0
.xdata$x:0000908F _xdata$x        ends
.xdata$x:0000908F
.xdata$x:00009090 ; ===========================================================================
.xdata$x:00009090
.xdata$x:00009090 ; Segment type: Pure data
.xdata$x:00009090 ; Segment permissions: Read
.xdata$x:00009090 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009090                 assume cs:_xdata$x
.xdata$x:00009090                 ;org 9090h
.xdata$x:00009090 ; COMDAT (pick associative to section at 4F40)
.xdata$x:00009090 __unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00009090                                         ; DATA XREF: .xdata$x:000090A0o
.xdata$x:00009091                 db 0FFh
.xdata$x:00009092                 db 0FFh
.xdata$x:00009093                 db 0FFh
.xdata$x:00009094                 dd offset __unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00009098 __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00009098                                         ; DATA XREF: __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00009099                 db    5
.xdata$x:0000909A                 db  93h ; Ã´
.xdata$x:0000909B                 db  19h
.xdata$x:0000909C                 db    1
.xdata$x:0000909D                 db    0
.xdata$x:0000909E                 db    0
.xdata$x:0000909F                 db    0
.xdata$x:000090A0                 dd offset __unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@XZ
.xdata$x:000090A4                 db    0
.xdata$x:000090A5                 db    0
.xdata$x:000090A6                 db    0
.xdata$x:000090A7                 db    0
.xdata$x:000090A8                 db    0
.xdata$x:000090A9                 db    0
.xdata$x:000090AA                 db    0
.xdata$x:000090AB                 db    0
.xdata$x:000090AC                 db    0
.xdata$x:000090AD                 db    0
.xdata$x:000090AE                 db    0
.xdata$x:000090AF                 db    0
.xdata$x:000090B0                 db    0
.xdata$x:000090B1                 db    0
.xdata$x:000090B2                 db    0
.xdata$x:000090B3                 db    0
.xdata$x:000090B4                 db    0
.xdata$x:000090B5                 db    0
.xdata$x:000090B6                 db    0
.xdata$x:000090B7                 db    0
.xdata$x:000090B8                 db    0
.xdata$x:000090B9                 db    0
.xdata$x:000090BA                 db    0
.xdata$x:000090BB                 db    0
.xdata$x:000090BB _xdata$x        ends
.xdata$x:000090BB
.xdata$x:000090BC ; ===========================================================================
.xdata$x:000090BC
.xdata$x:000090BC ; Segment type: Pure data
.xdata$x:000090BC ; Segment permissions: Read
.xdata$x:000090BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000090BC                 assume cs:_xdata$x
.xdata$x:000090BC                 ;org 90BCh
.xdata$x:000090BC ; COMDAT (pick associative to section at 4380)
.xdata$x:000090BC __unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:000090BC                                         ; DATA XREF: .xdata$x:000090CCo
.xdata$x:000090BD                 db 0FFh
.xdata$x:000090BE                 db 0FFh
.xdata$x:000090BF                 db 0FFh
.xdata$x:000090C0                 dd offset __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:000090C4 __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:000090C4                                         ; DATA XREF: __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:000090C5                 db    5
.xdata$x:000090C6                 db  93h ; Ã´
.xdata$x:000090C7                 db  19h
.xdata$x:000090C8                 db    1
.xdata$x:000090C9                 db    0
.xdata$x:000090CA                 db    0
.xdata$x:000090CB                 db    0
.xdata$x:000090CC                 dd offset __unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUtTbData@@@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:000090D0                 db    0
.xdata$x:000090D1                 db    0
.xdata$x:000090D2                 db    0
.xdata$x:000090D3                 db    0
.xdata$x:000090D4                 db    0
.xdata$x:000090D5                 db    0
.xdata$x:000090D6                 db    0
.xdata$x:000090D7                 db    0
.xdata$x:000090D8                 db    0
.xdata$x:000090D9                 db    0
.xdata$x:000090DA                 db    0
.xdata$x:000090DB                 db    0
.xdata$x:000090DC                 db    0
.xdata$x:000090DD                 db    0
.xdata$x:000090DE                 db    0
.xdata$x:000090DF                 db    0
.xdata$x:000090E0                 db    0
.xdata$x:000090E1                 db    0
.xdata$x:000090E2                 db    0
.xdata$x:000090E3                 db    0
.xdata$x:000090E4                 db    0
.xdata$x:000090E5                 db    0
.xdata$x:000090E6                 db    0
.xdata$x:000090E7                 db    0
.xdata$x:000090E7 _xdata$x        ends
.xdata$x:000090E7
.xdata$x:000090E8 ; ===========================================================================
.xdata$x:000090E8
.xdata$x:000090E8 ; Segment type: Pure data
.xdata$x:000090E8 ; Segment permissions: Read
.xdata$x:000090E8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000090E8                 assume cs:_xdata$x
.xdata$x:000090E8                 ;org 90E8h
.xdata$x:000090E8 ; COMDAT (pick associative to section at 3D24)
.xdata$x:000090E8 __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db 0FFh
.xdata$x:000090E8                                         ; DATA XREF: .xdata$x:000090F8o
.xdata$x:000090E9                 db 0FFh
.xdata$x:000090EA                 db 0FFh
.xdata$x:000090EB                 db 0FFh
.xdata$x:000090EC                 dd offset __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
.xdata$x:000090F0 __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db  22h ; "
.xdata$x:000090F0                                         ; DATA XREF: __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z+11o
.xdata$x:000090F1                 db    5
.xdata$x:000090F2                 db  93h ; Ã´
.xdata$x:000090F3                 db  19h
.xdata$x:000090F4                 db    1
.xdata$x:000090F5                 db    0
.xdata$x:000090F6                 db    0
.xdata$x:000090F7                 db    0
.xdata$x:000090F8                 dd offset __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.xdata$x:000090FC                 db    0
.xdata$x:000090FD                 db    0
.xdata$x:000090FE                 db    0
.xdata$x:000090FF                 db    0
.xdata$x:00009100                 db    0
.xdata$x:00009101                 db    0
.xdata$x:00009102                 db    0
.xdata$x:00009103                 db    0
.xdata$x:00009104                 db    0
.xdata$x:00009105                 db    0
.xdata$x:00009106                 db    0
.xdata$x:00009107                 db    0
.xdata$x:00009108                 db    0
.xdata$x:00009109                 db    0
.xdata$x:0000910A                 db    0
.xdata$x:0000910B                 db    0
.xdata$x:0000910C                 db    0
.xdata$x:0000910D                 db    0
.xdata$x:0000910E                 db    0
.xdata$x:0000910F                 db    0
.xdata$x:00009110                 db    0
.xdata$x:00009111                 db    0
.xdata$x:00009112                 db    0
.xdata$x:00009113                 db    0
.xdata$x:00009113 _xdata$x        ends
.xdata$x:00009113
.xdata$x:00009114 ; ===========================================================================
.xdata$x:00009114
.xdata$x:00009114 ; Segment type: Pure data
.xdata$x:00009114 ; Segment permissions: Read
.xdata$x:00009114 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009114                 assume cs:_xdata$x
.xdata$x:00009114                 ;org 9114h
.xdata$x:00009114 ; COMDAT (pick associative to section at 3B24)
.xdata$x:00009114 __unwindtable$??$construct@PAUtTbData@@PAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@$$QAPAU2@@Z db 0FFh
.xdata$x:00009114                                         ; DATA XREF: .xdata$x:00009124o
.xdata$x:00009115                 db 0FFh
.xdata$x:00009116                 db 0FFh
.xdata$x:00009117                 db 0FFh
.xdata$x:00009118                 dd offset __unwindfunclet$??$construct@PAUtTbData@@PAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@$$QAPAU2@@Z$0
.xdata$x:0000911C __ehfuncinfo$??$construct@PAUtTbData@@PAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@$$QAPAU2@@Z db  22h ; "
.xdata$x:0000911C                                         ; DATA XREF: __ehhandler$??$construct@PAUtTbData@@PAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@$$QAPAU2@@Z+11o
.xdata$x:0000911D                 db    5
.xdata$x:0000911E                 db  93h ; Ã´
.xdata$x:0000911F                 db  19h
.xdata$x:00009120                 db    1
.xdata$x:00009121                 db    0
.xdata$x:00009122                 db    0
.xdata$x:00009123                 db    0
.xdata$x:00009124                 dd offset __unwindtable$??$construct@PAUtTbData@@PAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@$$QAPAU2@@Z
.xdata$x:00009128                 align 20h
.xdata$x:00009128 _xdata$x        ends
.xdata$x:00009128
.xdata$x:00009140 ; ===========================================================================
.xdata$x:00009140
.xdata$x:00009140 ; Segment type: Pure data
.xdata$x:00009140 ; Segment permissions: Read
.xdata$x:00009140 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009140                 assume cs:_xdata$x
.xdata$x:00009140                 ;org 9140h
.xdata$x:00009140 ; COMDAT (pick associative to section at 39D8)
.xdata$x:00009140 __unwindtable$??$construct@PAUtTbData@@AAPAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@AAPAU2@@Z db 0FFh
.xdata$x:00009140                                         ; DATA XREF: .xdata$x:00009150o
.xdata$x:00009141                 db 0FFh
.xdata$x:00009142                 db 0FFh
.xdata$x:00009143                 db 0FFh
.xdata$x:00009144                 dd offset __unwindfunclet$??$construct@PAUtTbData@@AAPAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@AAPAU2@@Z$0
.xdata$x:00009148 __ehfuncinfo$??$construct@PAUtTbData@@AAPAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@AAPAU2@@Z db  22h ; "
.xdata$x:00009148                                         ; DATA XREF: __ehhandler$??$construct@PAUtTbData@@AAPAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@AAPAU2@@Z+11o
.xdata$x:00009149                 db    5
.xdata$x:0000914A                 db  93h ; Ã´
.xdata$x:0000914B                 db  19h
.xdata$x:0000914C                 db    1
.xdata$x:0000914D                 db    0
.xdata$x:0000914E                 db    0
.xdata$x:0000914F                 db    0
.xdata$x:00009150                 dd offset __unwindtable$??$construct@PAUtTbData@@AAPAU1@@?$allocator@PAUtTbData@@@std@@QAEXPAPAUtTbData@@AAPAU2@@Z
.xdata$x:00009154                 db    0
.xdata$x:00009155                 db    0
.xdata$x:00009156                 db    0
.xdata$x:00009157                 db    0
.xdata$x:00009158                 db    0
.xdata$x:00009159                 db    0
.xdata$x:0000915A                 db    0
.xdata$x:0000915B                 db    0
.xdata$x:0000915C                 db    0
.xdata$x:0000915D                 db    0
.xdata$x:0000915E                 db    0
.xdata$x:0000915F                 db    0
.xdata$x:00009160                 db    0
.xdata$x:00009161                 db    0
.xdata$x:00009162                 db    0
.xdata$x:00009163                 db    0
.xdata$x:00009164                 db    0
.xdata$x:00009165                 db    0
.xdata$x:00009166                 db    0
.xdata$x:00009167                 db    0
.xdata$x:00009168                 db    0
.xdata$x:00009169                 db    0
.xdata$x:0000916A                 db    0
.xdata$x:0000916B                 db    0
.xdata$x:0000916B _xdata$x        ends
.xdata$x:0000916B
.xdata$x:0000916C ; ===========================================================================
.xdata$x:0000916C
.xdata$x:0000916C ; Segment type: Pure data
.xdata$x:0000916C ; Segment permissions: Read
.xdata$x:0000916C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000916C                 assume cs:_xdata$x
.xdata$x:0000916C                 ;org 916Ch
.xdata$x:0000916C ; COMDAT (pick associative to section at 38D8)
.xdata$x:0000916C __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db 0FFh
.xdata$x:0000916C                                         ; DATA XREF: .xdata$x:0000917Co
.xdata$x:0000916D                 db 0FFh
.xdata$x:0000916E                 db 0FFh
.xdata$x:0000916F                 db 0FFh
.xdata$x:00009170                 dd offset __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
.xdata$x:00009174 __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db  22h ; "
.xdata$x:00009174                                         ; DATA XREF: __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z+11o
.xdata$x:00009175                 db    5
.xdata$x:00009176                 db  93h ; Ã´
.xdata$x:00009177                 db  19h
.xdata$x:00009178                 db    1
.xdata$x:00009179                 db    0
.xdata$x:0000917A                 db    0
.xdata$x:0000917B                 db    0
.xdata$x:0000917C                 dd offset __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.xdata$x:00009180                 db    0
.xdata$x:00009181                 db    0
.xdata$x:00009182                 db    0
.xdata$x:00009183                 db    0
.xdata$x:00009184                 db    0
.xdata$x:00009185                 db    0
.xdata$x:00009186                 db    0
.xdata$x:00009187                 db    0
.xdata$x:00009188                 db    0
.xdata$x:00009189                 db    0
.xdata$x:0000918A                 db    0
.xdata$x:0000918B                 db    0
.xdata$x:0000918C                 db    0
.xdata$x:0000918D                 db    0
.xdata$x:0000918E                 db    0
.xdata$x:0000918F                 db    0
.xdata$x:00009190                 db    0
.xdata$x:00009191                 db    0
.xdata$x:00009192                 db    0
.xdata$x:00009193                 db    0
.xdata$x:00009194                 db    0
.xdata$x:00009195                 db    0
.xdata$x:00009196                 db    0
.xdata$x:00009197                 db    0
.xdata$x:00009197 _xdata$x        ends
.xdata$x:00009197
.xdata$x:00009198 ; ===========================================================================
.xdata$x:00009198
.xdata$x:00009198 ; Segment type: Pure data
.xdata$x:00009198 ; Segment permissions: Read
.xdata$x:00009198 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009198                 assume cs:_xdata$x
.xdata$x:00009198                 ;org 9198h
.xdata$x:00009198 ; COMDAT (pick associative to section at 3C24)
.xdata$x:00009198 __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db 0FFh
.xdata$x:00009198                                         ; DATA XREF: .xdata$x:000091A8o
.xdata$x:00009199                 db 0FFh
.xdata$x:0000919A                 db 0FFh
.xdata$x:0000919B                 db 0FFh
.xdata$x:0000919C                 dd offset __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0
.xdata$x:000091A0 __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db  22h ; "
.xdata$x:000091A0                                         ; DATA XREF: __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z+11o
.xdata$x:000091A1                 db    5
.xdata$x:000091A2                 db  93h ; Ã´
.xdata$x:000091A3                 db  19h
.xdata$x:000091A4                 db    1
.xdata$x:000091A5                 db    0
.xdata$x:000091A6                 db    0
.xdata$x:000091A7                 db    0
.xdata$x:000091A8                 dd offset __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.xdata$x:000091AC                 db    0
.xdata$x:000091AD                 db    0
.xdata$x:000091AE                 db    0
.xdata$x:000091AF                 db    0
.xdata$x:000091B0                 db    0
.xdata$x:000091B1                 db    0
.xdata$x:000091B2                 db    0
.xdata$x:000091B3                 db    0
.xdata$x:000091B4                 db    0
.xdata$x:000091B5                 db    0
.xdata$x:000091B6                 db    0
.xdata$x:000091B7                 db    0
.xdata$x:000091B8                 db    0
.xdata$x:000091B9                 db    0
.xdata$x:000091BA                 db    0
.xdata$x:000091BB                 db    0
.xdata$x:000091BC                 db    0
.xdata$x:000091BD                 db    0
.xdata$x:000091BE                 db    0
.xdata$x:000091BF                 db    0
.xdata$x:000091C0                 db    0
.xdata$x:000091C1                 db    0
.xdata$x:000091C2                 db    0
.xdata$x:000091C3                 db    0
.xdata$x:000091C3 _xdata$x        ends
.xdata$x:000091C3
.rdata:000091C4 ; ===========================================================================
.rdata:000091C4
.rdata:000091C4 ; Segment type: Pure data
.rdata:000091C4 ; Segment permissions: Read
.rdata:000091C4 ; Segment alignment 'qword' can not be represented in assembly
.rdata:000091C4 _rdata          segment para public 'DATA' use32
.rdata:000091C4                 assume cs:_rdata
.rdata:000091C4                 ;org 91C4h
.rdata:000091C4 ; COMDAT (pick any)
.rdata:000091C4                 public ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:000091C4 ; wchar_t `string'
.rdata:000091C4 ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:000091C4                                         ; DATA XREF: std::_Iterator_base12::_Orphan_me(void)+48o
.rdata:000091C4                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:000091C4                 unicode 0, <clude\xutility>,0
.rdata:000091C4 _rdata          ends
.rdata:000091C4
.rdata:00009254 ; ===========================================================================
.rdata:00009254
.rdata:00009254 ; Segment type: Pure data
.rdata:00009254 ; Segment permissions: Read
.rdata:00009254 _rdata          segment dword public 'DATA' use32
.rdata:00009254                 assume cs:_rdata
.rdata:00009254                 ;org 9254h
.rdata:00009254 ; COMDAT (pick any)
.rdata:00009254                 public ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
.rdata:00009254 ; wchar_t `string'
.rdata:00009254 ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@:
.rdata:00009254                                         ; DATA XREF: std::_Iterator_base12::_Orphan_me(void)+4Do
.rdata:00009254                 unicode 0, <ITERATOR LIST CORRUPTED!>,0
.rdata:00009286                 align 4
.rdata:00009286 _rdata          ends
.rdata:00009286
.rdata:00009288 ; ===========================================================================
.rdata:00009288
.rdata:00009288 ; Segment type: Pure data
.rdata:00009288 ; Segment permissions: Read
.rdata:00009288 _rdata          segment dword public 'DATA' use32
.rdata:00009288                 assume cs:_rdata
.rdata:00009288                 ;org 9288h
.rdata:00009288 ; COMDAT (pick largest)
.rdata:00009288                 dd offset ??_R4Window@@6B@ ; const Window::`RTTI Complete Object Locator'
.rdata:0000928C                 public ??_7Window@@6B@
.rdata:0000928C ; const Window::`vftable'
.rdata:0000928C ??_7Window@@6B@ dd offset ??_EWindow@@UAEPAXI@Z
.rdata:0000928C                                         ; DATA XREF: Window::Window(void)+Ao
.rdata:0000928C                                         ; Window::~Window(void)+Ao
.rdata:0000928C                                         ; Window::`vector deleting destructor'(uint)
.rdata:00009290                 dd offset ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; Window::init(HINSTANCE__ *,HWND__ *)
.rdata:00009294                 dd offset __purecall
.rdata:00009298                 dd offset ?display@Window@@UBEX_N@Z ; Window::display(bool)
.rdata:0000929C                 dd offset ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeTo(tagRECT &)
.rdata:000092A0                 dd offset ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeToWH(tagRECT &)
.rdata:000092A4                 dd offset ?redraw@Window@@UBEX_N@Z ; Window::redraw(bool)
.rdata:000092A8                 dd offset ?getClientRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getClientRect(tagRECT &)
.rdata:000092AC                 dd offset ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getWindowRect(tagRECT &)
.rdata:000092B0                 dd offset ?getWidth@Window@@UBEHXZ ; Window::getWidth(void)
.rdata:000092B4                 dd offset ?getHeight@Window@@UBEHXZ ; Window::getHeight(void)
.rdata:000092B8                 dd offset ?isVisible@Window@@UBE_NXZ ; Window::isVisible(void)
.rdata:000092B8 _rdata          ends
.rdata:000092B8
.rdata:000092BC ; ===========================================================================
.rdata:000092BC
.rdata:000092BC ; Segment type: Pure data
.rdata:000092BC ; Segment permissions: Read
.rdata:000092BC _rdata          segment dword public 'DATA' use32
.rdata:000092BC                 assume cs:_rdata
.rdata:000092BC                 ;org 92BCh
.rdata:000092BC ; COMDAT (pick largest)
.rdata:000092BC                 dd offset ??_R4StaticDialog@@6B@ ; const StaticDialog::`RTTI Complete Object Locator'
.rdata:000092C0                 public ??_7StaticDialog@@6B@
.rdata:000092C0 ; const StaticDialog::`vftable'
.rdata:000092C0 ??_7StaticDialog@@6B@ dd offset ??_EStaticDialog@@UAEPAXI@Z
.rdata:000092C0                                         ; DATA XREF: StaticDialog::StaticDialog(void)+38o
.rdata:000092C0                                         ; StaticDialog::~StaticDialog(void)+29o
.rdata:000092C0                                         ; StaticDialog::`vector deleting destructor'(uint)
.rdata:000092C4                 dd offset ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; Window::init(HINSTANCE__ *,HWND__ *)
.rdata:000092C8                 dd offset ?destroy@StaticDialog@@UAEXXZ ; StaticDialog::destroy(void)
.rdata:000092CC                 dd offset ?display@StaticDialog@@UBEX_N@Z ; StaticDialog::display(bool)
.rdata:000092D0                 dd offset ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeTo(tagRECT &)
.rdata:000092D4                 dd offset ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeToWH(tagRECT &)
.rdata:000092D8                 dd offset ?redraw@Window@@UBEX_N@Z ; Window::redraw(bool)
.rdata:000092DC                 dd offset ?getClientRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getClientRect(tagRECT &)
.rdata:000092E0                 dd offset ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getWindowRect(tagRECT &)
.rdata:000092E4                 dd offset ?getWidth@Window@@UBEHXZ ; Window::getWidth(void)
.rdata:000092E8                 dd offset ?getHeight@Window@@UBEHXZ ; Window::getHeight(void)
.rdata:000092EC                 dd offset ?isVisible@Window@@UBE_NXZ ; Window::isVisible(void)
.rdata:000092F0                 dd offset ?create@StaticDialog@@UAEXH_N0@Z ; StaticDialog::create(int,bool,bool)
.rdata:000092F4                 dd offset ?isCreated@StaticDialog@@UBE_NXZ ; StaticDialog::isCreated(void)
.rdata:000092F8                 dd offset __purecall
.rdata:000092F8 _rdata          ends
.rdata:000092F8
.rdata:000092FC ; ===========================================================================
.rdata:000092FC
.rdata:000092FC ; Segment type: Pure data
.rdata:000092FC ; Segment permissions: Read
.rdata:000092FC _rdata          segment dword public 'DATA' use32
.rdata:000092FC                 assume cs:_rdata
.rdata:000092FC                 ;org 92FCh
.rdata:000092FC ; COMDAT (pick largest)
.rdata:000092FC                 dd offset ??_R4error_category@std@@6B@ ; const std::error_category::`RTTI Complete Object Locator'
.rdata:00009300                 public ??_7error_category@std@@6B@
.rdata:00009300 ; const std::error_category::`vftable'
.rdata:00009300 ??_7error_category@std@@6B@ dd offset ??_Eerror_category@std@@UAEPAXI@Z
.rdata:00009300                                         ; DATA XREF: std::error_category::error_category(void)+Ao
.rdata:00009300                                         ; std::error_category::~error_category(void)+Ao
.rdata:00009300                                         ; std::error_category::`vector deleting destructor'(uint)
.rdata:00009304                 dd offset __purecall
.rdata:00009308                 dd offset __purecall
.rdata:0000930C                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:00009310                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00009314                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00009314 _rdata          ends
.rdata:00009314
.rdata:00009318 ; ===========================================================================
.rdata:00009318
.rdata:00009318 ; Segment type: Pure data
.rdata:00009318 ; Segment permissions: Read
.rdata:00009318 _rdata          segment dword public 'DATA' use32
.rdata:00009318                 assume cs:_rdata
.rdata:00009318                 ;org 9318h
.rdata:00009318 ; COMDAT (pick largest)
.rdata:00009318                 dd offset ??_R4_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata:0000931C                 public ??_7_Generic_error_category@std@@6B@
.rdata:0000931C ; const std::_Generic_error_category::`vftable'
.rdata:0000931C ??_7_Generic_error_category@std@@6B@ dd offset ??_E_Generic_error_category@std@@UAEPAXI@Z
.rdata:0000931C                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+38o
.rdata:0000931C                                         ; std::_Generic_error_category::`vector deleting destructor'(uint)
.rdata:00009320                 dd offset ?name@_Generic_error_category@std@@UBEPBDXZ ; std::_Generic_error_category::name(void)
.rdata:00009324                 dd offset ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.rdata:00009328                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000932C                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00009330                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00009330 _rdata          ends
.rdata:00009330
.rdata:00009334 ; ===========================================================================
.rdata:00009334
.rdata:00009334 ; Segment type: Pure data
.rdata:00009334 ; Segment permissions: Read
.rdata:00009334 _rdata          segment dword public 'DATA' use32
.rdata:00009334                 assume cs:_rdata
.rdata:00009334                 ;org 9334h
.rdata:00009334 ; COMDAT (pick any)
.rdata:00009334                 public ??_C@_07DCLBNMLN@generic?$AA@
.rdata:00009334 ; `string'
.rdata:00009334 ??_C@_07DCLBNMLN@generic?$AA@ db 'generic',0
.rdata:00009334                                         ; DATA XREF: std::_Generic_error_category::name(void)+7o
.rdata:00009334 _rdata          ends
.rdata:00009334
.rdata:0000933C ; ===========================================================================
.rdata:0000933C
.rdata:0000933C ; Segment type: Pure data
.rdata:0000933C ; Segment permissions: Read
.rdata:0000933C _rdata          segment dword public 'DATA' use32
.rdata:0000933C                 assume cs:_rdata
.rdata:0000933C                 ;org 933Ch
.rdata:0000933C ; COMDAT (pick any)
.rdata:0000933C                 public ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
.rdata:0000933C ; `string'
.rdata:0000933C ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ db 'unknown error',0
.rdata:0000933C                                         ; DATA XREF: std::_Generic_error_category::message(int):loc_7E20o
.rdata:0000933C                                         ; std::_System_error_category::message(int):loc_7F9Co
.rdata:0000934A                 align 4
.rdata:0000934A _rdata          ends
.rdata:0000934A
.rdata:0000934C ; ===========================================================================
.rdata:0000934C
.rdata:0000934C ; Segment type: Pure data
.rdata:0000934C ; Segment permissions: Read
.rdata:0000934C _rdata          segment dword public 'DATA' use32
.rdata:0000934C                 assume cs:_rdata
.rdata:0000934C                 ;org 934Ch
.rdata:0000934C ; COMDAT (pick largest)
.rdata:0000934C                 dd offset ??_R4_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata:00009350                 public ??_7_Iostream_error_category@std@@6B@
.rdata:00009350 ; const std::_Iostream_error_category::`vftable'
.rdata:00009350 ??_7_Iostream_error_category@std@@6B@ dd offset ??_E_Iostream_error_category@std@@UAEPAXI@Z
.rdata:00009350                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+38o
.rdata:00009350                                         ; std::_Iostream_error_category::`vector deleting destructor'(uint)
.rdata:00009354                 dd offset ?name@_Iostream_error_category@std@@UBEPBDXZ ; std::_Iostream_error_category::name(void)
.rdata:00009358                 dd offset ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message(int)
.rdata:0000935C                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:00009360                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00009364                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00009364 _rdata          ends
.rdata:00009364
.rdata:00009368 ; ===========================================================================
.rdata:00009368
.rdata:00009368 ; Segment type: Pure data
.rdata:00009368 ; Segment permissions: Read
.rdata:00009368 _rdata          segment dword public 'DATA' use32
.rdata:00009368                 assume cs:_rdata
.rdata:00009368                 ;org 9368h
.rdata:00009368 ; COMDAT (pick any)
.rdata:00009368                 public ??_C@_08LLGCOLLL@iostream?$AA@
.rdata:00009368 ; `string'
.rdata:00009368 ??_C@_08LLGCOLLL@iostream?$AA@ db 'iostream',0
.rdata:00009368                                         ; DATA XREF: std::_Iostream_error_category::name(void)+7o
.rdata:00009371                 align 4
.rdata:00009371 _rdata          ends
.rdata:00009371
.rdata:00009374 ; ===========================================================================
.rdata:00009374
.rdata:00009374 ; Segment type: Pure data
.rdata:00009374 ; Segment permissions: Read
.rdata:00009374 _rdata          segment dword public 'DATA' use32
.rdata:00009374                 assume cs:_rdata
.rdata:00009374                 ;org 9374h
.rdata:00009374 ; COMDAT (pick any)
.rdata:00009374                 public ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
.rdata:00009374 ; char `string'[]
.rdata:00009374 ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ db 'iostream stream error',0
.rdata:00009374                                         ; DATA XREF: std::_Iostream_error_category::message(int)+35o
.rdata:0000938A                 align 4
.rdata:0000938A _rdata          ends
.rdata:0000938A
.rdata:0000938C ; ===========================================================================
.rdata:0000938C
.rdata:0000938C ; Segment type: Pure data
.rdata:0000938C ; Segment permissions: Read
.rdata:0000938C _rdata          segment dword public 'DATA' use32
.rdata:0000938C                 assume cs:_rdata
.rdata:0000938C                 ;org 938Ch
.rdata:0000938C ; COMDAT (pick largest)
.rdata:0000938C                 dd offset ??_R4_System_error_category@std@@6B@ ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata:00009390                 public ??_7_System_error_category@std@@6B@
.rdata:00009390 ; const std::_System_error_category::`vftable'
.rdata:00009390 ??_7_System_error_category@std@@6B@ dd offset ??_E_System_error_category@std@@UAEPAXI@Z
.rdata:00009390                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+38o
.rdata:00009390                                         ; std::_System_error_category::`vector deleting destructor'(uint)
.rdata:00009394                 dd offset ?name@_System_error_category@std@@UBEPBDXZ ; std::_System_error_category::name(void)
.rdata:00009398                 dd offset ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message(int)
.rdata:0000939C                 dd offset ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition(int)
.rdata:000093A0                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:000093A4                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:000093A4 _rdata          ends
.rdata:000093A4
.rdata:000093A8 ; ===========================================================================
.rdata:000093A8
.rdata:000093A8 ; Segment type: Pure data
.rdata:000093A8 ; Segment permissions: Read
.rdata:000093A8 _rdata          segment dword public 'DATA' use32
.rdata:000093A8                 assume cs:_rdata
.rdata:000093A8                 ;org 93A8h
.rdata:000093A8 ; COMDAT (pick any)
.rdata:000093A8                 public ??_C@_06FHFOAHML@system?$AA@
.rdata:000093A8 ; `string'
.rdata:000093A8 ??_C@_06FHFOAHML@system?$AA@ db 'system',0
.rdata:000093A8                                         ; DATA XREF: std::_System_error_category::name(void)+7o
.rdata:000093AF                 align 10h
.rdata:000093AF _rdata          ends
.rdata:000093AF
.bss:000093B0 ; ===========================================================================
.bss:000093B0
.bss:000093B0 ; Segment type: Uninitialized
.bss:000093B0 ; Segment permissions: Read/Write
.bss:000093B0 _bss            segment dword public 'BSS' use32
.bss:000093B0                 assume cs:_bss
.bss:000093B0                 ;org 93B0h
.bss:000093B0 ; COMDAT (pick any)
.bss:000093B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000093B0                 public ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.bss:000093B0 ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.bss:000093B0 ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A db    ? ;
.bss:000093B0                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o
.bss:000093B0                                         ; `dynamic atexit destructor for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o ...
.bss:000093B1                 db    ? ;
.bss:000093B2                 db    ? ;
.bss:000093B3                 db    ? ;
.bss:000093B3 _bss            ends
.bss:000093B3
.bss:000093B4 ; ===========================================================================
.bss:000093B4
.bss:000093B4 ; Segment type: Uninitialized
.bss:000093B4 ; Segment permissions: Read/Write
.bss:000093B4 _bss            segment dword public 'BSS' use32
.bss:000093B4                 assume cs:_bss
.bss:000093B4                 ;org 93B4h
.bss:000093B4 ; COMDAT (pick any)
.bss:000093B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000093B4                 public ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.bss:000093B4 ; std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object
.bss:000093B4 ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A db    ? ;
.bss:000093B4                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:000093B4                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:000093B5                 db    ? ;
.bss:000093B6                 db    ? ;
.bss:000093B7                 db    ? ;
.bss:000093B7 _bss            ends
.bss:000093B7
.bss:000093B8 ; ===========================================================================
.bss:000093B8
.bss:000093B8 ; Segment type: Uninitialized
.bss:000093B8 ; Segment permissions: Read/Write
.bss:000093B8 _bss            segment dword public 'BSS' use32
.bss:000093B8                 assume cs:_bss
.bss:000093B8                 ;org 93B8h
.bss:000093B8 ; COMDAT (pick any)
.bss:000093B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000093B8                 public ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.bss:000093B8 ; std::_System_error_category std::_Error_objects<int>::_System_object
.bss:000093B8 ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A db    ? ;
.bss:000093B8                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o
.bss:000093B8                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o ...
.bss:000093B9                 db    ? ;
.bss:000093BA                 db    ? ;
.bss:000093BB                 db    ? ;
.bss:000093BB _bss            ends
.bss:000093BB
.rdata:000093BC ; ===========================================================================
.rdata:000093BC
.rdata:000093BC ; Segment type: Pure data
.rdata:000093BC ; Segment permissions: Read
.rdata:000093BC _rdata          segment dword public 'DATA' use32
.rdata:000093BC                 assume cs:_rdata
.rdata:000093BC                 ;org 93BCh
.rdata:000093BC ; COMDAT (pick any)
.rdata:000093BC                 public ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
.rdata:000093BC ; public: static unsigned int const std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::npos
.rdata:000093BC ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB dd 0FFFFFFFFh
.rdata:000093BC                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+3Dr
.rdata:000093BC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+5Dr
.rdata:000093BC _rdata          ends
.rdata:000093BC
.bss:000093C0 ; ===========================================================================
.bss:000093C0
.bss:000093C0 ; Segment type: Uninitialized
.bss:000093C0 ; Segment permissions: Read/Write
.bss:000093C0 _bss            segment dword public 'BSS' use32
.bss:000093C0                 assume cs:_bss
.bss:000093C0                 ;org 93C0h
.bss:000093C0 ; COMDAT (pick any)
.bss:000093C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000093C0                 public ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.bss:000093C0 ; std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id
.bss:000093C0 ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:000093C0                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+5o
.bss:000093C1                 db    ? ;
.bss:000093C2                 db    ? ;
.bss:000093C3                 db    ? ;
.bss:000093C3 _bss            ends
.bss:000093C3
.bss:000093C4 ; ===========================================================================
.bss:000093C4
.bss:000093C4 ; Segment type: Uninitialized
.bss:000093C4 ; Segment permissions: Read/Write
.bss:000093C4 _bss            segment dword public 'BSS' use32
.bss:000093C4                 assume cs:_bss
.bss:000093C4                 ;org 93C4h
.bss:000093C4 ; COMDAT (pick any)
.bss:000093C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000093C4                 public ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.bss:000093C4 ; std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id
.bss:000093C4 ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:000093C4                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+5o
.bss:000093C5                 db    ? ;
.bss:000093C6                 db    ? ;
.bss:000093C7                 db    ? ;
.bss:000093C7 _bss            ends
.bss:000093C7
.rdata:000093C8 ; ===========================================================================
.rdata:000093C8
.rdata:000093C8 ; Segment type: Pure data
.rdata:000093C8 ; Segment permissions: Read
.rdata:000093C8 _rdata          segment dword public 'DATA' use32
.rdata:000093C8                 assume cs:_rdata
.rdata:000093C8                 ;org 93C8h
.rdata:000093C8 ; COMDAT (pick largest)
.rdata:000093C8                 dd offset ??_R4DockingCont@@6B@ ; const DockingCont::`RTTI Complete Object Locator'
.rdata:000093CC                 public ??_7DockingCont@@6B@
.rdata:000093CC ; const DockingCont::`vftable'
.rdata:000093CC ??_7DockingCont@@6B@ dd offset ??_EDockingCont@@UAEPAXI@Z
.rdata:000093CC                                         ; DATA XREF: DockingCont::DockingCont(void)+38o
.rdata:000093CC                                         ; DockingCont::~DockingCont(void)+29o
.rdata:000093CC                                         ; DockingCont::`vector deleting destructor'(uint)
.rdata:000093D0                 dd offset ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; Window::init(HINSTANCE__ *,HWND__ *)
.rdata:000093D4                 dd offset ?destroy@DockingCont@@UAEXXZ ; DockingCont::destroy(void)
.rdata:000093D8                 dd offset ?display@StaticDialog@@UBEX_N@Z ; StaticDialog::display(bool)
.rdata:000093DC                 dd offset ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeTo(tagRECT &)
.rdata:000093E0                 dd offset ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeToWH(tagRECT &)
.rdata:000093E4                 dd offset ?redraw@Window@@UBEX_N@Z ; Window::redraw(bool)
.rdata:000093E8                 dd offset ?getClientRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getClientRect(tagRECT &)
.rdata:000093EC                 dd offset ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getWindowRect(tagRECT &)
.rdata:000093F0                 dd offset ?getWidth@Window@@UBEHXZ ; Window::getWidth(void)
.rdata:000093F4                 dd offset ?getHeight@Window@@UBEHXZ ; Window::getHeight(void)
.rdata:000093F8                 dd offset ?isVisible@Window@@UBE_NXZ ; Window::isVisible(void)
.rdata:000093FC                 dd offset ?create@StaticDialog@@UAEXH_N0@Z ; StaticDialog::create(int,bool,bool)
.rdata:00009400                 dd offset ?isCreated@StaticDialog@@UBE_NXZ ; StaticDialog::isCreated(void)
.rdata:00009404                 dd offset ?run_dlgProc@DockingCont@@MAGHIIJ@Z ; DockingCont::run_dlgProc(uint,uint,long)
.rdata:00009404 _rdata          ends
.rdata:00009404
.rdata:00009408 ; ===========================================================================
.rdata:00009408
.rdata:00009408 ; Segment type: Pure data
.rdata:00009408 ; Segment permissions: Read
.rdata:00009408 _rdata          segment dword public 'DATA' use32
.rdata:00009408                 assume cs:_rdata
.rdata:00009408                 ;org 9408h
.rdata:00009408 ; COMDAT (pick largest)
.rdata:00009408                 dd offset ??_R4ToolTip@@6B@ ; const ToolTip::`RTTI Complete Object Locator'
.rdata:0000940C                 public ??_7ToolTip@@6B@
.rdata:0000940C ; const ToolTip::`vftable'
.rdata:0000940C ??_7ToolTip@@6B@ dd offset ??_EToolTip@@UAEPAXI@Z
.rdata:0000940C                                         ; DATA XREF: ToolTip::ToolTip(void)+38o
.rdata:0000940C                                         ; ToolTip::`vector deleting destructor'(uint)
.rdata:00009410                 dd offset ?init@ToolTip@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; ToolTip::init(HINSTANCE__ *,HWND__ *)
.rdata:00009414                 dd offset ?destroy@ToolTip@@UAEXXZ ; ToolTip::destroy(void)
.rdata:00009418                 dd offset ?display@Window@@UBEX_N@Z ; Window::display(bool)
.rdata:0000941C                 dd offset ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeTo(tagRECT &)
.rdata:00009420                 dd offset ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeToWH(tagRECT &)
.rdata:00009424                 dd offset ?redraw@Window@@UBEX_N@Z ; Window::redraw(bool)
.rdata:00009428                 dd offset ?getClientRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getClientRect(tagRECT &)
.rdata:0000942C                 dd offset ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getWindowRect(tagRECT &)
.rdata:00009430                 dd offset ?getWidth@Window@@UBEHXZ ; Window::getWidth(void)
.rdata:00009434                 dd offset ?getHeight@Window@@UBEHXZ ; Window::getHeight(void)
.rdata:00009438                 dd offset ?isVisible@Window@@UBE_NXZ ; Window::isVisible(void)
.rdata:00009438 _rdata          ends
.rdata:00009438
.bss:0000943C ; ===========================================================================
.bss:0000943C
.bss:0000943C ; Segment type: Uninitialized
.bss:0000943C ; Segment permissions: Read/Write
.bss:0000943C ; Segment alignment 'qword' can not be represented in assembly
.bss:0000943C _bss            segment para public 'BSS' use32
.bss:0000943C                 assume cs:_bss
.bss:0000943C                 ;org 943Ch
.bss:0000943C ; COMDAT (pick any)
.bss:0000943C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000943C ; ToolTip `DockingCont::runProcCaption'::`2'::toolTip
.bss:0000943C ?toolTip@?1??runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4VToolTip@@A db    ? ;
.bss:0000943C                                         ; DATA XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+51o
.bss:0000943C                                         ; DockingCont::runProcCaption(HWND__ *,uint,uint,long)+4D4o ...
.bss:0000943D                 db    ? ;
.bss:0000943E                 db    ? ;
.bss:0000943F                 db    ? ;
.bss:00009440                 db    ? ;
.bss:00009441                 db    ? ;
.bss:00009442                 db    ? ;
.bss:00009443                 db    ? ;
.bss:00009444                 db    ? ;
.bss:00009445                 db    ? ;
.bss:00009446                 db    ? ;
.bss:00009447                 db    ? ;
.bss:00009448                 db    ? ;
.bss:00009449                 db    ? ;
.bss:0000944A                 db    ? ;
.bss:0000944B                 db    ? ;
.bss:0000944C                 db    ? ;
.bss:0000944D                 db    ? ;
.bss:0000944E                 db    ? ;
.bss:0000944F                 db    ? ;
.bss:00009450                 db    ? ;
.bss:00009451                 db    ? ;
.bss:00009452                 db    ? ;
.bss:00009453                 db    ? ;
.bss:00009454                 db    ? ;
.bss:00009455                 db    ? ;
.bss:00009456                 db    ? ;
.bss:00009457                 db    ? ;
.bss:00009458                 db    ? ;
.bss:00009459                 db    ? ;
.bss:0000945A                 db    ? ;
.bss:0000945B                 db    ? ;
.bss:0000945C                 db    ? ;
.bss:0000945D                 db    ? ;
.bss:0000945E                 db    ? ;
.bss:0000945F                 db    ? ;
.bss:00009460                 db    ? ;
.bss:00009461                 db    ? ;
.bss:00009462                 db    ? ;
.bss:00009463                 db    ? ;
.bss:00009464                 db    ? ;
.bss:00009465                 db    ? ;
.bss:00009466                 db    ? ;
.bss:00009467                 db    ? ;
.bss:00009468                 db    ? ;
.bss:00009469                 db    ? ;
.bss:0000946A                 db    ? ;
.bss:0000946B                 db    ? ;
.bss:0000946C                 db    ? ;
.bss:0000946D                 db    ? ;
.bss:0000946E                 db    ? ;
.bss:0000946F                 db    ? ;
.bss:00009470                 db    ? ;
.bss:00009471                 db    ? ;
.bss:00009472                 db    ? ;
.bss:00009473                 db    ? ;
.bss:00009474                 db    ? ;
.bss:00009475                 db    ? ;
.bss:00009476                 db    ? ;
.bss:00009477                 db    ? ;
.bss:00009478                 db    ? ;
.bss:00009479                 db    ? ;
.bss:0000947A                 db    ? ;
.bss:0000947B                 db    ? ;
.bss:0000947C                 db    ? ;
.bss:0000947D                 db    ? ;
.bss:0000947E                 db    ? ;
.bss:0000947F                 db    ? ;
.bss:00009480                 db    ? ;
.bss:00009481                 db    ? ;
.bss:00009482                 db    ? ;
.bss:00009483                 db    ? ;
.bss:00009483 _bss            ends
.bss:00009483
.bss:00009484 ; ===========================================================================
.bss:00009484
.bss:00009484 ; Segment type: Uninitialized
.bss:00009484 ; Segment permissions: Read/Write
.bss:00009484 _bss            segment dword public 'BSS' use32
.bss:00009484                 assume cs:_bss
.bss:00009484                 ;org 9484h
.bss:00009484 ; COMDAT (pick any)
.bss:00009484                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00009484 ?$S1@?1??runProcCaption@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4IA dd ?
.bss:00009484                                         ; DATA XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+31r
.bss:00009484                                         ; DockingCont::runProcCaption(HWND__ *,uint,uint,long)+3Br ...
.bss:00009484 _bss            ends
.bss:00009484
.bss:00009488 ; ===========================================================================
.bss:00009488
.bss:00009488 ; Segment type: Uninitialized
.bss:00009488 ; Segment permissions: Read/Write
.bss:00009488 ; Segment alignment 'qword' can not be represented in assembly
.bss:00009488 _bss            segment para public 'BSS' use32
.bss:00009488                 assume cs:_bss
.bss:00009488                 ;org 9488h
.bss:00009488 ; COMDAT (pick any)
.bss:00009488                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00009488 ; ToolTip `DockingCont::runProcTab'::`2'::toolTip
.bss:00009488 ?toolTip@?1??runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4VToolTip@@A db    ? ;
.bss:00009488                                         ; DATA XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+4Eo
.bss:00009488                                         ; DockingCont::runProcTab(HWND__ *,uint,uint,long)+380o ...
.bss:00009489                 db    ? ;
.bss:0000948A                 db    ? ;
.bss:0000948B                 db    ? ;
.bss:0000948C                 db    ? ;
.bss:0000948D                 db    ? ;
.bss:0000948E                 db    ? ;
.bss:0000948F                 db    ? ;
.bss:00009490                 db    ? ;
.bss:00009491                 db    ? ;
.bss:00009492                 db    ? ;
.bss:00009493                 db    ? ;
.bss:00009494                 db    ? ;
.bss:00009495                 db    ? ;
.bss:00009496                 db    ? ;
.bss:00009497                 db    ? ;
.bss:00009498                 db    ? ;
.bss:00009499                 db    ? ;
.bss:0000949A                 db    ? ;
.bss:0000949B                 db    ? ;
.bss:0000949C                 db    ? ;
.bss:0000949D                 db    ? ;
.bss:0000949E                 db    ? ;
.bss:0000949F                 db    ? ;
.bss:000094A0                 db    ? ;
.bss:000094A1                 db    ? ;
.bss:000094A2                 db    ? ;
.bss:000094A3                 db    ? ;
.bss:000094A4                 db    ? ;
.bss:000094A5                 db    ? ;
.bss:000094A6                 db    ? ;
.bss:000094A7                 db    ? ;
.bss:000094A8                 db    ? ;
.bss:000094A9                 db    ? ;
.bss:000094AA                 db    ? ;
.bss:000094AB                 db    ? ;
.bss:000094AC                 db    ? ;
.bss:000094AD                 db    ? ;
.bss:000094AE                 db    ? ;
.bss:000094AF                 db    ? ;
.bss:000094B0                 db    ? ;
.bss:000094B1                 db    ? ;
.bss:000094B2                 db    ? ;
.bss:000094B3                 db    ? ;
.bss:000094B4                 db    ? ;
.bss:000094B5                 db    ? ;
.bss:000094B6                 db    ? ;
.bss:000094B7                 db    ? ;
.bss:000094B8                 db    ? ;
.bss:000094B9                 db    ? ;
.bss:000094BA                 db    ? ;
.bss:000094BB                 db    ? ;
.bss:000094BC                 db    ? ;
.bss:000094BD                 db    ? ;
.bss:000094BE                 db    ? ;
.bss:000094BF                 db    ? ;
.bss:000094C0                 db    ? ;
.bss:000094C1                 db    ? ;
.bss:000094C2                 db    ? ;
.bss:000094C3                 db    ? ;
.bss:000094C4                 db    ? ;
.bss:000094C5                 db    ? ;
.bss:000094C6                 db    ? ;
.bss:000094C7                 db    ? ;
.bss:000094C8                 db    ? ;
.bss:000094C9                 db    ? ;
.bss:000094CA                 db    ? ;
.bss:000094CB                 db    ? ;
.bss:000094CC                 db    ? ;
.bss:000094CD                 db    ? ;
.bss:000094CE                 db    ? ;
.bss:000094CF                 db    ? ;
.bss:000094CF _bss            ends
.bss:000094CF
.bss:000094D0 ; ===========================================================================
.bss:000094D0
.bss:000094D0 ; Segment type: Uninitialized
.bss:000094D0 ; Segment permissions: Read/Write
.bss:000094D0 _bss            segment dword public 'BSS' use32
.bss:000094D0                 assume cs:_bss
.bss:000094D0                 ;org 94D0h
.bss:000094D0 ; COMDAT (pick any)
.bss:000094D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000094D0 ?$S2@?1??runProcTab@DockingCont@@IAEJPAUHWND__@@IIJ@Z@4IA dd ?
.bss:000094D0                                         ; DATA XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+2Er
.bss:000094D0                                         ; DockingCont::runProcTab(HWND__ *,uint,uint,long)+38r ...
.bss:000094D0 _bss            ends
.bss:000094D0
.rdata:000094D4 ; ===========================================================================
.rdata:000094D4
.rdata:000094D4 ; Segment type: Pure data
.rdata:000094D4 ; Segment permissions: Read
.rdata:000094D4 ; Segment alignment 'qword' can not be represented in assembly
.rdata:000094D4 _rdata          segment para public 'DATA' use32
.rdata:000094D4                 assume cs:_rdata
.rdata:000094D4                 ;org 94D4h
.rdata:000094D4 ; COMDAT (pick any)
.rdata:000094D4                 public ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:000094D4 ; wchar_t `string'
.rdata:000094D4 ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:000094D4                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+Co
.rdata:000094D4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+14o ...
.rdata:000094D4                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:000094D4                 unicode 0, <clude\xstring>,0
.rdata:00009562                 align 4
.rdata:00009562 _rdata          ends
.rdata:00009562
.bss:00009564 ; ===========================================================================
.bss:00009564
.bss:00009564 ; Segment type: Uninitialized
.bss:00009564 ; Segment permissions: Read/Write
.bss:00009564 _bss            segment dword public 'BSS' use32
.bss:00009564                 assume cs:_bss
.bss:00009564                 ;org 9564h
.bss:00009564 ; COMDAT (pick any)
.bss:00009564                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00009564                 public ?id@?$numpunct@D@std@@2V0locale@2@A
.bss:00009564 ; std::locale::id std::numpunct<char>::id
.bss:00009564 ?id@?$numpunct@D@std@@2V0locale@2@A db    ? ;
.bss:00009564                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)+5o
.bss:00009565                 db    ? ;
.bss:00009566                 db    ? ;
.bss:00009567                 db    ? ;
.bss:00009567 _bss            ends
.bss:00009567
.bss:00009568 ; ===========================================================================
.bss:00009568
.bss:00009568 ; Segment type: Uninitialized
.bss:00009568 ; Segment permissions: Read/Write
.bss:00009568 _bss            segment dword public 'BSS' use32
.bss:00009568                 assume cs:_bss
.bss:00009568                 ;org 9568h
.bss:00009568 ; COMDAT (pick any)
.bss:00009568                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00009568                 public ?id@?$numpunct@_W@std@@2V0locale@2@A
.bss:00009568 ; std::locale::id std::numpunct<wchar_t>::id
.bss:00009568 ?id@?$numpunct@_W@std@@2V0locale@2@A db    ? ;
.bss:00009568                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)+5o
.bss:00009569                 db    ? ;
.bss:0000956A                 db    ? ;
.bss:0000956B                 db    ? ;
.bss:0000956B _bss            ends
.bss:0000956B
.rdata:0000956C ; ===========================================================================
.rdata:0000956C
.rdata:0000956C ; Segment type: Pure data
.rdata:0000956C ; Segment permissions: Read
.rdata:0000956C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000956C _rdata          segment para public 'DATA' use32
.rdata:0000956C                 assume cs:_rdata
.rdata:0000956C                 ;org 956Ch
.rdata:0000956C ; COMDAT (pick any)
.rdata:0000956C                 public ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000956C ; wchar_t `string'
.rdata:0000956C ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000956C                                         ; DATA XREF: std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)+19o
.rdata:0000956C                                         ; std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)+49o ...
.rdata:0000956C                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000956C                 unicode 0, <clude\vector>,0
.rdata:0000956C _rdata          ends
.rdata:0000956C
.rdata:000095F8 ; ===========================================================================
.rdata:000095F8
.rdata:000095F8 ; Segment type: Pure data
.rdata:000095F8 ; Segment permissions: Read
.rdata:000095F8 _rdata          segment dword public 'DATA' use32
.rdata:000095F8                 assume cs:_rdata
.rdata:000095F8                 ;org 95F8h
.rdata:000095F8 ; COMDAT (pick any)
.rdata:000095F8                 public ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:000095F8 ; wchar_t `string'
.rdata:000095F8 ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:000095F8                                         ; DATA XREF: std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)+1Eo
.rdata:000095F8                 unicode 0, <vector subscript out of range>,0
.rdata:000095F8 _rdata          ends
.rdata:000095F8
.rdata:00009634 ; ===========================================================================
.rdata:00009634
.rdata:00009634 ; Segment type: Pure data
.rdata:00009634 ; Segment permissions: Read
.rdata:00009634 _rdata          segment dword public 'DATA' use32
.rdata:00009634                 assume cs:_rdata
.rdata:00009634                 ;org 9634h
.rdata:00009634 ; COMDAT (pick any)
.rdata:00009634                 public ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
.rdata:00009634 ; `string'
.rdata:00009634 ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ db 'Standard C++ Libraries Out of Range',0
.rdata:00009634                                         ; DATA XREF: std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)+2Bo
.rdata:00009634                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+=(int)+5Do
.rdata:00009634 _rdata          ends
.rdata:00009634
.rdata:00009658 ; ===========================================================================
.rdata:00009658
.rdata:00009658 ; Segment type: Pure data
.rdata:00009658 ; Segment permissions: Read
.rdata:00009658 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00009658 _rdata          segment para public 'DATA' use32
.rdata:00009658                 assume cs:_rdata
.rdata:00009658                 ;org 9658h
.rdata:00009658 ; COMDAT (pick any)
.rdata:00009658                 public ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
.rdata:00009658 ; `string'
.rdata:00009658 ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@:
.rdata:00009658                                         ; DATA XREF: std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint):loc_564Co
.rdata:00009658                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+=(int):loc_57CAo
.rdata:00009658                 unicode 0, <"Standard C++ Libraries Out of Range" && 0>,0
.rdata:000096AE                 align 10h
.rdata:000096AE _rdata          ends
.rdata:000096AE
.rdata:000096B0 ; ===========================================================================
.rdata:000096B0
.rdata:000096B0 ; Segment type: Pure data
.rdata:000096B0 ; Segment permissions: Read
.rdata:000096B0 _rdata          segment dword public 'DATA' use32
.rdata:000096B0                 assume cs:_rdata
.rdata:000096B0                 ;org 96B0h
.rdata:000096B0 ; COMDAT (pick any)
.rdata:000096B0                 public ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
.rdata:000096B0 ; `string'
.rdata:000096B0 ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@:
.rdata:000096B0                                         ; DATA XREF: std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)+3Do
.rdata:000096B0                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+=(int)+6Fo
.rdata:000096B0                 unicode 0, <%s>,0
.rdata:000096B6                 align 4
.rdata:000096B6 _rdata          ends
.rdata:000096B6
.rdata:000096B8 ; ===========================================================================
.rdata:000096B8
.rdata:000096B8 ; Segment type: Pure data
.rdata:000096B8 ; Segment permissions: Read
.rdata:000096B8 ; Segment alignment 'qword' can not be represented in assembly
.rdata:000096B8 _rdata          segment para public 'DATA' use32
.rdata:000096B8                 assume cs:_rdata
.rdata:000096B8                 ;org 96B8h
.rdata:000096B8 ; COMDAT (pick any)
.rdata:000096B8                 public ??_C@_1KG@EEBFNKPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAt?$AAT?$AAb?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl?$AAa@
.rdata:000096B8 ; `string'
.rdata:000096B8 ??_C@_1KG@EEBFNKPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAt?$AAT?$AAb?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl?$AAa@:
.rdata:000096B8                                         ; DATA XREF: std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)+6Ao
.rdata:000096B8                 unicode 0, <std::vector>
.rdata:000096B8                 dw 3Ch
.rdata:000096B8                 unicode 0, <struct tTbData *,class std::allocator>
.rdata:000096B8                 dw 3Ch
.rdata:000096B8                 unicode 0, <struct tTbData *>
.rdata:000096B8                 dw 3Eh
.rdata:000096B8                 unicode 0, < >
.rdata:000096B8                 dw 3Eh
.rdata:000096B8                 unicode 0, <::operator []>,0
.rdata:0000975E                 align 10h
.rdata:0000975E _rdata          ends
.rdata:0000975E
.rdata:00009760 ; ===========================================================================
.rdata:00009760
.rdata:00009760 ; Segment type: Pure data
.rdata:00009760 ; Segment permissions: Read
.rdata:00009760 _rdata          segment dword public 'DATA' use32
.rdata:00009760                 assume cs:_rdata
.rdata:00009760                 ;org 9760h
.rdata:00009760 ; COMDAT (pick any)
.rdata:00009760                 public ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
.rdata:00009760 ; `string'
.rdata:00009760 ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@:
.rdata:00009760                                         ; DATA XREF: std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)+6Fo
.rdata:00009760                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+=(int)+A1o
.rdata:00009760                 unicode 0, <"out of range">,0
.rdata:0000977E                 align 10h
.rdata:0000977E _rdata          ends
.rdata:0000977E
.rdata:00009780 ; ===========================================================================
.rdata:00009780
.rdata:00009780 ; Segment type: Pure data
.rdata:00009780 ; Segment permissions: Read
.rdata:00009780 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00009780 _rdata          segment para public 'DATA' use32
.rdata:00009780                 assume cs:_rdata
.rdata:00009780                 ;org 9780h
.rdata:00009780 ; COMDAT (pick any)
.rdata:00009780                 public ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
.rdata:00009780 ; wchar_t `string'
.rdata:00009780 ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@:
.rdata:00009780                                         ; DATA XREF: std::vector<tTbData *,std::allocator<tTbData *>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>)+63o
.rdata:00009780                 unicode 0, <vector erase iterator outside range>,0
.rdata:00009780 _rdata          ends
.rdata:00009780
.rdata:000097C8 ; ===========================================================================
.rdata:000097C8
.rdata:000097C8 ; Segment type: Pure data
.rdata:000097C8 ; Segment permissions: Read
.rdata:000097C8 _rdata          segment dword public 'DATA' use32
.rdata:000097C8                 assume cs:_rdata
.rdata:000097C8                 ;org 97C8h
.rdata:000097C8 ; COMDAT (pick any)
.rdata:000097C8                 public ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
.rdata:000097C8 ; char `string'[]
.rdata:000097C8 ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ db 'string too long',0
.rdata:000097C8                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+7o
.rdata:000097C8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+7o
.rdata:000097C8 _rdata          ends
.rdata:000097C8
.rdata:000097D8 ; ===========================================================================
.rdata:000097D8
.rdata:000097D8 ; Segment type: Pure data
.rdata:000097D8 ; Segment permissions: Read
.rdata:000097D8 _rdata          segment dword public 'DATA' use32
.rdata:000097D8                 assume cs:_rdata
.rdata:000097D8                 ;org 97D8h
.rdata:000097D8 ; COMDAT (pick any)
.rdata:000097D8                 public ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
.rdata:000097D8 ; char `string'[]
.rdata:000097D8 ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ db 'invalid string position',0
.rdata:000097D8                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+7o
.rdata:000097D8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+7o
.rdata:000097D8 _rdata          ends
.rdata:000097D8
.rdata:000097F0 ; ===========================================================================
.rdata:000097F0
.rdata:000097F0 ; Segment type: Pure data
.rdata:000097F0 ; Segment permissions: Read
.rdata:000097F0 _rdata          segment dword public 'DATA' use32
.rdata:000097F0                 assume cs:_rdata
.rdata:000097F0                 ;org 97F0h
.rdata:000097F0 ; COMDAT (pick any)
.rdata:000097F0                 public ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
.rdata:000097F0 ; char `string'[]
.rdata:000097F0 ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ db 'vector<T> too long',0
.rdata:000097F0                                         ; DATA XREF: std::vector<tTbData *,std::allocator<tTbData *>>::_Xlen(void)+7o
.rdata:00009803                 align 4
.rdata:00009803 _rdata          ends
.rdata:00009803
.rdata:00009804 ; ===========================================================================
.rdata:00009804
.rdata:00009804 ; Segment type: Pure data
.rdata:00009804 ; Segment permissions: Read
.rdata:00009804 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00009804 _rdata          segment para public 'DATA' use32
.rdata:00009804                 assume cs:_rdata
.rdata:00009804                 ;org 9804h
.rdata:00009804 ; COMDAT (pick any)
.rdata:00009804                 public ??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
.rdata:00009804 ; wchar_t `string'
.rdata:00009804 ??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@:
.rdata:00009804                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+=(int)+50o
.rdata:00009804                 unicode 0, <vector iterator + offset out of range>,0
.rdata:00009804 _rdata          ends
.rdata:00009804
.rdata:00009850 ; ===========================================================================
.rdata:00009850
.rdata:00009850 ; Segment type: Pure data
.rdata:00009850 ; Segment permissions: Read
.rdata:00009850 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00009850 _rdata          segment para public 'DATA' use32
.rdata:00009850                 assume cs:_rdata
.rdata:00009850                 ;org 9850h
.rdata:00009850 ; COMDAT (pick any)
.rdata:00009850                 public ??_C@_1OA@EFOMBAJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:00009850 ; `string'
.rdata:00009850 ??_C@_1OA@EFOMBAJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:00009850                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+=(int)+9Co
.rdata:00009850                 unicode 0, <std::_Vector_const_iterator>
.rdata:00009850                 dw 3Ch
.rdata:00009850                 unicode 0, <class std::_Vector_val>
.rdata:00009850                 dw 3Ch
.rdata:00009850                 unicode 0, <struct std::_Simple_types>
.rdata:00009850                 dw 3Ch
.rdata:00009850                 unicode 0, <struct tTbData *>
.rdata:00009850                 dw 3Eh
.rdata:00009850                 unicode 0, < >
.rdata:00009850                 dw 3Eh
.rdata:00009850                 unicode 0, < >
.rdata:00009850                 dw 3Eh
.rdata:00009850                 unicode 0, <::operator +=>,0
.rdata:00009850 _rdata          ends
.rdata:00009850
.rdata:00009930 ; ===========================================================================
.rdata:00009930
.rdata:00009930 ; Segment type: Pure data
.rdata:00009930 ; Segment permissions: Read
.rdata:00009930 _rdata          segment dword public 'DATA' use32
.rdata:00009930                 assume cs:_rdata
.rdata:00009930                 ;org 9930h
.rdata:00009930 ; COMDAT (pick any)
.rdata:00009930                 public ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
.rdata:00009930 ; wchar_t `string'
.rdata:00009930 ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@:
.rdata:00009930                                         ; DATA XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+11o
.rdata:00009930                                         ; std::_Debug_pointer<tTbData *>(tTbData * *,wchar_t const *,uint)+11o ...
.rdata:00009930                 unicode 0, <invalid null pointer>,0
.rdata:0000995A                 align 4
.rdata:0000995A _rdata          ends
.rdata:0000995A
.rdata:0000995C ; ===========================================================================
.rdata:0000995C
.rdata:0000995C ; Segment type: Pure data
.rdata:0000995C ; Segment permissions: Read
.rdata:0000995C _rdata          segment dword public 'DATA' use32
.rdata:0000995C                 assume cs:_rdata
.rdata:0000995C                 ;org 995Ch
.rdata:0000995C ; COMDAT (pick any)
.rdata:0000995C                 public ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:0000995C ; wchar_t `string'
.rdata:0000995C ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:0000995C                                         ; DATA XREF: std::_Debug_range2<tTbData * *>(tTbData * *,tTbData * *,wchar_t const *,uint,std::random_access_iterator_tag)+43o
.rdata:0000995C                 unicode 0, <invalid iterator range>,0
.rdata:0000998A                 align 4
.rdata:0000998A _rdata          ends
.rdata:0000998A
.rdata:0000998C ; ===========================================================================
.rdata:0000998C
.rdata:0000998C ; Segment type: Pure data
.rdata:0000998C ; Segment permissions: Read
.rdata:0000998C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000998C _rdata          segment para public 'DATA' use32
.rdata:0000998C                 assume cs:_rdata
.rdata:0000998C                 ;org 998Ch
.rdata:0000998C ; COMDAT (pick any)
.rdata:0000998C                 public ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000998C ; wchar_t `string'
.rdata:0000998C ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000998C                                         ; DATA XREF: std::_Uninit_move<tTbData *,tTbData *,tTbData *>(tTbData * *,tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>> &,tTbData * *,std::_Scalar_ptr_iterator_tag)+9o
.rdata:0000998C                                         ; std::_Uninit_move<tTbData *,tTbData *,tTbData *>(tTbData * *,tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>> &,tTbData * *,std::_Scalar_ptr_iterator_tag)+23o
.rdata:0000998C                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000998C                 unicode 0, <clude\xmemory>,0
.rdata:00009A1A                 align 4
.rdata:00009A1A _rdata          ends
.rdata:00009A1A
.rdata$r:00009A1C ; ===========================================================================
.rdata$r:00009A1C
.rdata$r:00009A1C ; Segment type: Pure data
.rdata$r:00009A1C ; Segment permissions: Read
.rdata$r:00009A1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009A1C                 assume cs:_rdata$r
.rdata$r:00009A1C                 ;org 9A1Ch
.rdata$r:00009A1C ; COMDAT (pick any)
.rdata$r:00009A1C                 public ??_R4Window@@6B@
.rdata$r:00009A1C ; const Window::`RTTI Complete Object Locator'
.rdata$r:00009A1C ??_R4Window@@6B@ db    0                ; DATA XREF: .rdata:00009288o
.rdata$r:00009A1D                 db    0
.rdata$r:00009A1E                 db    0
.rdata$r:00009A1F                 db    0
.rdata$r:00009A20                 db    0
.rdata$r:00009A21                 db    0
.rdata$r:00009A22                 db    0
.rdata$r:00009A23                 db    0
.rdata$r:00009A24                 db    0
.rdata$r:00009A25                 db    0
.rdata$r:00009A26                 db    0
.rdata$r:00009A27                 db    0
.rdata$r:00009A28                 dd offset ??_R0?AVWindow@@@8 ; Window `RTTI Type Descriptor'
.rdata$r:00009A2C                 dd offset ??_R3Window@@8 ; Window::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009A2C _rdata$r        ends
.rdata$r:00009A2C
.data$r:00009A30 ; ===========================================================================
.data$r:00009A30
.data$r:00009A30 ; Segment type: Pure data
.data$r:00009A30 ; Segment permissions: Read/Write
.data$r:00009A30 _data$r         segment dword public 'DATA' use32
.data$r:00009A30                 assume cs:_data$r
.data$r:00009A30                 ;org 9A30h
.data$r:00009A30 ; COMDAT (pick any)
.data$r:00009A30                 public ??_R0?AVWindow@@@8
.data$r:00009A30 ; class Window `RTTI Type Descriptor'
.data$r:00009A30 ??_R0?AVWindow@@@8 dd offset ??_7type_info@@6B@
.data$r:00009A30                                         ; DATA XREF: .rdata$r:00009A28o
.data$r:00009A30                                         ; .rdata$r:Window::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00009A30                                         ; const type_info::`vftable'
.data$r:00009A34                 align 8
.data$r:00009A38 a_?avwindow@@   db '.?AVWindow@@',0
.data$r:00009A45                 align 4
.data$r:00009A45 _data$r         ends
.data$r:00009A45
.rdata$r:00009A48 ; ===========================================================================
.rdata$r:00009A48
.rdata$r:00009A48 ; Segment type: Pure data
.rdata$r:00009A48 ; Segment permissions: Read
.rdata$r:00009A48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009A48                 assume cs:_rdata$r
.rdata$r:00009A48                 ;org 9A48h
.rdata$r:00009A48 ; COMDAT (pick any)
.rdata$r:00009A48                 public ??_R3Window@@8
.rdata$r:00009A48 ; Window::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009A48 ??_R3Window@@8  db    0                 ; DATA XREF: .rdata$r:00009A2Co
.rdata$r:00009A48                                         ; .rdata$r:00009A78o
.rdata$r:00009A49                 db    0
.rdata$r:00009A4A                 db    0
.rdata$r:00009A4B                 db    0
.rdata$r:00009A4C                 db    0
.rdata$r:00009A4D                 db    0
.rdata$r:00009A4E                 db    0
.rdata$r:00009A4F                 db    0
.rdata$r:00009A50                 db    1
.rdata$r:00009A51                 db    0
.rdata$r:00009A52                 db    0
.rdata$r:00009A53                 db    0
.rdata$r:00009A54                 dd offset ??_R2Window@@8 ; Window::`RTTI Base Class Array'
.rdata$r:00009A54 _rdata$r        ends
.rdata$r:00009A54
.rdata$r:00009A58 ; ===========================================================================
.rdata$r:00009A58
.rdata$r:00009A58 ; Segment type: Pure data
.rdata$r:00009A58 ; Segment permissions: Read
.rdata$r:00009A58 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009A58                 assume cs:_rdata$r
.rdata$r:00009A58                 ;org 9A58h
.rdata$r:00009A58 ; COMDAT (pick any)
.rdata$r:00009A58                 public ??_R2Window@@8
.rdata$r:00009A58 ; Window::`RTTI Base Class Array'
.rdata$r:00009A58 ??_R2Window@@8  dd offset ??_R1A@?0A@EA@Window@@8
.rdata$r:00009A58                                         ; DATA XREF: .rdata$r:00009A54o
.rdata$r:00009A58                                         ; Window::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009A5C                 db    0
.rdata$r:00009A5D                 align 10h
.rdata$r:00009A5D _rdata$r        ends
.rdata$r:00009A5D
.rdata$r:00009A60 ; ===========================================================================
.rdata$r:00009A60
.rdata$r:00009A60 ; Segment type: Pure data
.rdata$r:00009A60 ; Segment permissions: Read
.rdata$r:00009A60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009A60                 assume cs:_rdata$r
.rdata$r:00009A60                 ;org 9A60h
.rdata$r:00009A60 ; COMDAT (pick any)
.rdata$r:00009A60                 public ??_R1A@?0A@EA@Window@@8
.rdata$r:00009A60 ; Window::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00009A60 ??_R1A@?0A@EA@Window@@8 dd offset ??_R0?AVWindow@@@8
.rdata$r:00009A60                                         ; DATA XREF: .rdata$r:Window::`RTTI Base Class Array'o
.rdata$r:00009A60                                         ; .rdata$r:00009AC0o ...
.rdata$r:00009A60                                         ; Window `RTTI Type Descriptor'
.rdata$r:00009A64                 db    0
.rdata$r:00009A65                 db    0
.rdata$r:00009A66                 db    0
.rdata$r:00009A67                 db    0
.rdata$r:00009A68                 db    0
.rdata$r:00009A69                 db    0
.rdata$r:00009A6A                 db    0
.rdata$r:00009A6B                 db    0
.rdata$r:00009A6C                 db 0FFh
.rdata$r:00009A6D                 db 0FFh
.rdata$r:00009A6E                 db 0FFh
.rdata$r:00009A6F                 db 0FFh
.rdata$r:00009A70                 db    0
.rdata$r:00009A71                 db    0
.rdata$r:00009A72                 db    0
.rdata$r:00009A73                 db    0
.rdata$r:00009A74                 db  40h ; @
.rdata$r:00009A75                 db    0
.rdata$r:00009A76                 db    0
.rdata$r:00009A77                 db    0
.rdata$r:00009A78                 dd offset ??_R3Window@@8 ; Window::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009A78 _rdata$r        ends
.rdata$r:00009A78
.rdata$r:00009A7C ; ===========================================================================
.rdata$r:00009A7C
.rdata$r:00009A7C ; Segment type: Pure data
.rdata$r:00009A7C ; Segment permissions: Read
.rdata$r:00009A7C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009A7C                 assume cs:_rdata$r
.rdata$r:00009A7C                 ;org 9A7Ch
.rdata$r:00009A7C ; COMDAT (pick any)
.rdata$r:00009A7C                 public ??_R4StaticDialog@@6B@
.rdata$r:00009A7C ; const StaticDialog::`RTTI Complete Object Locator'
.rdata$r:00009A7C ??_R4StaticDialog@@6B@ db    0          ; DATA XREF: .rdata:000092BCo
.rdata$r:00009A7D                 db    0
.rdata$r:00009A7E                 db    0
.rdata$r:00009A7F                 db    0
.rdata$r:00009A80                 db    0
.rdata$r:00009A81                 db    0
.rdata$r:00009A82                 db    0
.rdata$r:00009A83                 db    0
.rdata$r:00009A84                 db    0
.rdata$r:00009A85                 db    0
.rdata$r:00009A86                 db    0
.rdata$r:00009A87                 db    0
.rdata$r:00009A88                 dd offset ??_R0?AVStaticDialog@@@8 ; StaticDialog `RTTI Type Descriptor'
.rdata$r:00009A8C                 dd offset ??_R3StaticDialog@@8 ; StaticDialog::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009A8C _rdata$r        ends
.rdata$r:00009A8C
.data$r:00009A90 ; ===========================================================================
.data$r:00009A90
.data$r:00009A90 ; Segment type: Pure data
.data$r:00009A90 ; Segment permissions: Read/Write
.data$r:00009A90 _data$r         segment dword public 'DATA' use32
.data$r:00009A90                 assume cs:_data$r
.data$r:00009A90                 ;org 9A90h
.data$r:00009A90 ; COMDAT (pick any)
.data$r:00009A90                 public ??_R0?AVStaticDialog@@@8
.data$r:00009A90 ; class StaticDialog `RTTI Type Descriptor'
.data$r:00009A90 ??_R0?AVStaticDialog@@@8 dd offset ??_7type_info@@6B@
.data$r:00009A90                                         ; DATA XREF: .rdata$r:00009A88o
.data$r:00009A90                                         ; .rdata$r:StaticDialog::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00009A90                                         ; const type_info::`vftable'
.data$r:00009A94                 align 8
.data$r:00009A98 a_?avstaticdial db '.?AVStaticDialog@@',0
.data$r:00009AAB                 align 4
.data$r:00009AAB _data$r         ends
.data$r:00009AAB
.rdata$r:00009AAC ; ===========================================================================
.rdata$r:00009AAC
.rdata$r:00009AAC ; Segment type: Pure data
.rdata$r:00009AAC ; Segment permissions: Read
.rdata$r:00009AAC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009AAC                 assume cs:_rdata$r
.rdata$r:00009AAC                 ;org 9AACh
.rdata$r:00009AAC ; COMDAT (pick any)
.rdata$r:00009AAC                 public ??_R3StaticDialog@@8
.rdata$r:00009AAC ; StaticDialog::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009AAC ??_R3StaticDialog@@8 db    0            ; DATA XREF: .rdata$r:00009A8Co
.rdata$r:00009AAC                                         ; .rdata$r:00009AE0o
.rdata$r:00009AAD                 db    0
.rdata$r:00009AAE                 db    0
.rdata$r:00009AAF                 db    0
.rdata$r:00009AB0                 db    0
.rdata$r:00009AB1                 db    0
.rdata$r:00009AB2                 db    0
.rdata$r:00009AB3                 db    0
.rdata$r:00009AB4                 db    2
.rdata$r:00009AB5                 db    0
.rdata$r:00009AB6                 db    0
.rdata$r:00009AB7                 db    0
.rdata$r:00009AB8                 dd offset ??_R2StaticDialog@@8 ; StaticDialog::`RTTI Base Class Array'
.rdata$r:00009AB8 _rdata$r        ends
.rdata$r:00009AB8
.rdata$r:00009ABC ; ===========================================================================
.rdata$r:00009ABC
.rdata$r:00009ABC ; Segment type: Pure data
.rdata$r:00009ABC ; Segment permissions: Read
.rdata$r:00009ABC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009ABC                 assume cs:_rdata$r
.rdata$r:00009ABC                 ;org 9ABCh
.rdata$r:00009ABC ; COMDAT (pick any)
.rdata$r:00009ABC                 public ??_R2StaticDialog@@8
.rdata$r:00009ABC ; StaticDialog::`RTTI Base Class Array'
.rdata$r:00009ABC ??_R2StaticDialog@@8 dd offset ??_R1A@?0A@EA@StaticDialog@@8
.rdata$r:00009ABC                                         ; DATA XREF: .rdata$r:00009AB8o
.rdata$r:00009ABC                                         ; StaticDialog::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009AC0                 dd offset ??_R1A@?0A@EA@Window@@8 ; Window::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009AC4                 db    0
.rdata$r:00009AC5                 align 4
.rdata$r:00009AC5 _rdata$r        ends
.rdata$r:00009AC5
.rdata$r:00009AC8 ; ===========================================================================
.rdata$r:00009AC8
.rdata$r:00009AC8 ; Segment type: Pure data
.rdata$r:00009AC8 ; Segment permissions: Read
.rdata$r:00009AC8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009AC8                 assume cs:_rdata$r
.rdata$r:00009AC8                 ;org 9AC8h
.rdata$r:00009AC8 ; COMDAT (pick any)
.rdata$r:00009AC8                 public ??_R1A@?0A@EA@StaticDialog@@8
.rdata$r:00009AC8 ; StaticDialog::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00009AC8 ??_R1A@?0A@EA@StaticDialog@@8 dd offset ??_R0?AVStaticDialog@@@8
.rdata$r:00009AC8                                         ; DATA XREF: .rdata$r:StaticDialog::`RTTI Base Class Array'o
.rdata$r:00009AC8                                         ; .rdata$r:00009D04o
.rdata$r:00009AC8                                         ; StaticDialog `RTTI Type Descriptor'
.rdata$r:00009ACC                 db    1
.rdata$r:00009ACD                 db    0
.rdata$r:00009ACE                 db    0
.rdata$r:00009ACF                 db    0
.rdata$r:00009AD0                 db    0
.rdata$r:00009AD1                 db    0
.rdata$r:00009AD2                 db    0
.rdata$r:00009AD3                 db    0
.rdata$r:00009AD4                 db 0FFh
.rdata$r:00009AD5                 db 0FFh
.rdata$r:00009AD6                 db 0FFh
.rdata$r:00009AD7                 db 0FFh
.rdata$r:00009AD8                 db    0
.rdata$r:00009AD9                 db    0
.rdata$r:00009ADA                 db    0
.rdata$r:00009ADB                 db    0
.rdata$r:00009ADC                 db  40h ; @
.rdata$r:00009ADD                 db    0
.rdata$r:00009ADE                 db    0
.rdata$r:00009ADF                 db    0
.rdata$r:00009AE0                 dd offset ??_R3StaticDialog@@8 ; StaticDialog::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009AE0 _rdata$r        ends
.rdata$r:00009AE0
.rdata$r:00009AE4 ; ===========================================================================
.rdata$r:00009AE4
.rdata$r:00009AE4 ; Segment type: Pure data
.rdata$r:00009AE4 ; Segment permissions: Read
.rdata$r:00009AE4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009AE4                 assume cs:_rdata$r
.rdata$r:00009AE4                 ;org 9AE4h
.rdata$r:00009AE4 ; COMDAT (pick any)
.rdata$r:00009AE4                 public ??_R4error_category@std@@6B@
.rdata$r:00009AE4 ; const std::error_category::`RTTI Complete Object Locator'
.rdata$r:00009AE4 ??_R4error_category@std@@6B@ db    0    ; DATA XREF: .rdata:000092FCo
.rdata$r:00009AE5                 db    0
.rdata$r:00009AE6                 db    0
.rdata$r:00009AE7                 db    0
.rdata$r:00009AE8                 db    0
.rdata$r:00009AE9                 db    0
.rdata$r:00009AEA                 db    0
.rdata$r:00009AEB                 db    0
.rdata$r:00009AEC                 db    0
.rdata$r:00009AED                 db    0
.rdata$r:00009AEE                 db    0
.rdata$r:00009AEF                 db    0
.rdata$r:00009AF0                 dd offset ??_R0?AVerror_category@std@@@8 ; std::error_category `RTTI Type Descriptor'
.rdata$r:00009AF4                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009AF4 _rdata$r        ends
.rdata$r:00009AF4
.data$r:00009AF8 ; ===========================================================================
.data$r:00009AF8
.data$r:00009AF8 ; Segment type: Pure data
.data$r:00009AF8 ; Segment permissions: Read/Write
.data$r:00009AF8 _data$r         segment dword public 'DATA' use32
.data$r:00009AF8                 assume cs:_data$r
.data$r:00009AF8                 ;org 9AF8h
.data$r:00009AF8 ; COMDAT (pick any)
.data$r:00009AF8                 public ??_R0?AVerror_category@std@@@8
.data$r:00009AF8 ; class std::error_category `RTTI Type Descriptor'
.data$r:00009AF8 ??_R0?AVerror_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00009AF8                                         ; DATA XREF: .rdata$r:00009AF0o
.data$r:00009AF8                                         ; .rdata$r:std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00009AF8                                         ; const type_info::`vftable'
.data$r:00009AFC                 align 10h
.data$r:00009B00 a_?averror_cate db '.?AVerror_category@std@@',0
.data$r:00009B19                 align 4
.data$r:00009B19 _data$r         ends
.data$r:00009B19
.rdata$r:00009B1C ; ===========================================================================
.rdata$r:00009B1C
.rdata$r:00009B1C ; Segment type: Pure data
.rdata$r:00009B1C ; Segment permissions: Read
.rdata$r:00009B1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009B1C                 assume cs:_rdata$r
.rdata$r:00009B1C                 ;org 9B1Ch
.rdata$r:00009B1C ; COMDAT (pick any)
.rdata$r:00009B1C                 public ??_R3error_category@std@@8
.rdata$r:00009B1C ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009B1C ??_R3error_category@std@@8 db    0      ; DATA XREF: .rdata$r:00009AF4o
.rdata$r:00009B1C                                         ; .rdata$r:00009B4Co
.rdata$r:00009B1D                 db    0
.rdata$r:00009B1E                 db    0
.rdata$r:00009B1F                 db    0
.rdata$r:00009B20                 db    0
.rdata$r:00009B21                 db    0
.rdata$r:00009B22                 db    0
.rdata$r:00009B23                 db    0
.rdata$r:00009B24                 db    1
.rdata$r:00009B25                 db    0
.rdata$r:00009B26                 db    0
.rdata$r:00009B27                 db    0
.rdata$r:00009B28                 dd offset ??_R2error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
.rdata$r:00009B28 _rdata$r        ends
.rdata$r:00009B28
.rdata$r:00009B2C ; ===========================================================================
.rdata$r:00009B2C
.rdata$r:00009B2C ; Segment type: Pure data
.rdata$r:00009B2C ; Segment permissions: Read
.rdata$r:00009B2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009B2C                 assume cs:_rdata$r
.rdata$r:00009B2C                 ;org 9B2Ch
.rdata$r:00009B2C ; COMDAT (pick any)
.rdata$r:00009B2C                 public ??_R2error_category@std@@8
.rdata$r:00009B2C ; std::error_category::`RTTI Base Class Array'
.rdata$r:00009B2C ??_R2error_category@std@@8 dd offset ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:00009B2C                                         ; DATA XREF: .rdata$r:00009B28o
.rdata$r:00009B2C                                         ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009B30                 db    0
.rdata$r:00009B31                 align 4
.rdata$r:00009B31 _rdata$r        ends
.rdata$r:00009B31
.rdata$r:00009B34 ; ===========================================================================
.rdata$r:00009B34
.rdata$r:00009B34 ; Segment type: Pure data
.rdata$r:00009B34 ; Segment permissions: Read
.rdata$r:00009B34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009B34                 assume cs:_rdata$r
.rdata$r:00009B34                 ;org 9B34h
.rdata$r:00009B34 ; COMDAT (pick any)
.rdata$r:00009B34                 public ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:00009B34 ; std::error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00009B34 ??_R1A@?0A@EA@error_category@std@@8 dd offset ??_R0?AVerror_category@std@@@8
.rdata$r:00009B34                                         ; DATA XREF: .rdata$r:std::error_category::`RTTI Base Class Array'o
.rdata$r:00009B34                                         ; .rdata$r:00009BA4o ...
.rdata$r:00009B34                                         ; std::error_category `RTTI Type Descriptor'
.rdata$r:00009B38                 align 10h
.rdata$r:00009B40                 db 0FFh
.rdata$r:00009B41                 db 0FFh
.rdata$r:00009B42                 db 0FFh
.rdata$r:00009B43                 db 0FFh
.rdata$r:00009B44                 db    0
.rdata$r:00009B45                 db    0
.rdata$r:00009B46                 db    0
.rdata$r:00009B47                 db    0
.rdata$r:00009B48                 db  40h ; @
.rdata$r:00009B49                 db    0
.rdata$r:00009B4A                 db    0
.rdata$r:00009B4B                 db    0
.rdata$r:00009B4C                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009B4C _rdata$r        ends
.rdata$r:00009B4C
.rdata$r:00009B50 ; ===========================================================================
.rdata$r:00009B50
.rdata$r:00009B50 ; Segment type: Pure data
.rdata$r:00009B50 ; Segment permissions: Read
.rdata$r:00009B50 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009B50                 assume cs:_rdata$r
.rdata$r:00009B50                 ;org 9B50h
.rdata$r:00009B50 ; COMDAT (pick any)
.rdata$r:00009B50                 public ??_R4_Generic_error_category@std@@6B@
.rdata$r:00009B50 ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata$r:00009B50 ??_R4_Generic_error_category@std@@6B@ db    0
.rdata$r:00009B50                                         ; DATA XREF: .rdata:00009318o
.rdata$r:00009B51                 db    0
.rdata$r:00009B52                 db    0
.rdata$r:00009B53                 db    0
.rdata$r:00009B54                 db    0
.rdata$r:00009B55                 db    0
.rdata$r:00009B56                 db    0
.rdata$r:00009B57                 db    0
.rdata$r:00009B58                 db    0
.rdata$r:00009B59                 db    0
.rdata$r:00009B5A                 db    0
.rdata$r:00009B5B                 db    0
.rdata$r:00009B5C                 dd offset ??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:00009B60                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009B60 _rdata$r        ends
.rdata$r:00009B60
.data$r:00009B64 ; ===========================================================================
.data$r:00009B64
.data$r:00009B64 ; Segment type: Pure data
.data$r:00009B64 ; Segment permissions: Read/Write
.data$r:00009B64 _data$r         segment dword public 'DATA' use32
.data$r:00009B64                 assume cs:_data$r
.data$r:00009B64                 ;org 9B64h
.data$r:00009B64 ; COMDAT (pick any)
.data$r:00009B64                 public ??_R0?AV_Generic_error_category@std@@@8
.data$r:00009B64 ; class std::_Generic_error_category `RTTI Type Descriptor'
.data$r:00009B64 ??_R0?AV_Generic_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00009B64                                         ; DATA XREF: .rdata$r:00009B5Co
.data$r:00009B64                                         ; .rdata$r:std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00009B64                                         ; const type_info::`vftable'
.data$r:00009B68                 db    0
.data$r:00009B69                 db    0
.data$r:00009B6A                 db    0
.data$r:00009B6B                 db    0
.data$r:00009B6C                 db  2Eh ; .
.data$r:00009B6D                 db  3Fh ; ?
.data$r:00009B6E                 db  41h ; A
.data$r:00009B6F                 db  56h ; V
.data$r:00009B70                 db  5Fh ; _
.data$r:00009B71                 db  47h ; G
.data$r:00009B72                 db  65h ; e
.data$r:00009B73                 db  6Eh ; n
.data$r:00009B74                 db  65h ; e
.data$r:00009B75                 db  72h ; r
.data$r:00009B76                 db  69h ; i
.data$r:00009B77                 db  63h ; c
.data$r:00009B78                 db  5Fh ; _
.data$r:00009B79                 db  65h ; e
.data$r:00009B7A                 db  72h ; r
.data$r:00009B7B                 db  72h ; r
.data$r:00009B7C                 db  6Fh ; o
.data$r:00009B7D                 db  72h ; r
.data$r:00009B7E                 db  5Fh ; _
.data$r:00009B7F                 db  63h ; c
.data$r:00009B80                 db  61h ; a
.data$r:00009B81                 db  74h ; t
.data$r:00009B82                 db  65h ; e
.data$r:00009B83                 db  67h ; g
.data$r:00009B84                 db  6Fh ; o
.data$r:00009B85                 db  72h ; r
.data$r:00009B86                 db  79h ; y
.data$r:00009B87                 db  40h ; @
.data$r:00009B88                 db  73h ; s
.data$r:00009B89                 db  74h ; t
.data$r:00009B8A                 db  64h ; d
.data$r:00009B8B                 db  40h ; @
.data$r:00009B8C                 db  40h ; @
.data$r:00009B8D                 db    0
.data$r:00009B8E                 align 10h
.data$r:00009B8E _data$r         ends
.data$r:00009B8E
.rdata$r:00009B90 ; ===========================================================================
.rdata$r:00009B90
.rdata$r:00009B90 ; Segment type: Pure data
.rdata$r:00009B90 ; Segment permissions: Read
.rdata$r:00009B90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009B90                 assume cs:_rdata$r
.rdata$r:00009B90                 ;org 9B90h
.rdata$r:00009B90 ; COMDAT (pick any)
.rdata$r:00009B90                 public ??_R3_Generic_error_category@std@@8
.rdata$r:00009B90 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009B90 ??_R3_Generic_error_category@std@@8 db    0
.rdata$r:00009B90                                         ; DATA XREF: .rdata$r:00009B60o
.rdata$r:00009B90                                         ; .rdata$r:00009BC4o
.rdata$r:00009B91                 db    0
.rdata$r:00009B92                 db    0
.rdata$r:00009B93                 db    0
.rdata$r:00009B94                 db    0
.rdata$r:00009B95                 db    0
.rdata$r:00009B96                 db    0
.rdata$r:00009B97                 db    0
.rdata$r:00009B98                 db    2
.rdata$r:00009B99                 db    0
.rdata$r:00009B9A                 db    0
.rdata$r:00009B9B                 db    0
.rdata$r:00009B9C                 dd offset ??_R2_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:00009B9C _rdata$r        ends
.rdata$r:00009B9C
.rdata$r:00009BA0 ; ===========================================================================
.rdata$r:00009BA0
.rdata$r:00009BA0 ; Segment type: Pure data
.rdata$r:00009BA0 ; Segment permissions: Read
.rdata$r:00009BA0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009BA0                 assume cs:_rdata$r
.rdata$r:00009BA0                 ;org 9BA0h
.rdata$r:00009BA0 ; COMDAT (pick any)
.rdata$r:00009BA0                 public ??_R2_Generic_error_category@std@@8
.rdata$r:00009BA0 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:00009BA0 ??_R2_Generic_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:00009BA0                                         ; DATA XREF: .rdata$r:00009B9Co
.rdata$r:00009BA0                                         ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009BA4                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009BA8                 db    0
.rdata$r:00009BA9                 align 4
.rdata$r:00009BA9 _rdata$r        ends
.rdata$r:00009BA9
.rdata$r:00009BAC ; ===========================================================================
.rdata$r:00009BAC
.rdata$r:00009BAC ; Segment type: Pure data
.rdata$r:00009BAC ; Segment permissions: Read
.rdata$r:00009BAC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009BAC                 assume cs:_rdata$r
.rdata$r:00009BAC                 ;org 9BACh
.rdata$r:00009BAC ; COMDAT (pick any)
.rdata$r:00009BAC                 public ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:00009BAC ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00009BAC ??_R1A@?0A@EA@_Generic_error_category@std@@8 dd offset ??_R0?AV_Generic_error_category@std@@@8
.rdata$r:00009BAC                                         ; DATA XREF: .rdata$r:std::_Generic_error_category::`RTTI Base Class Array'o
.rdata$r:00009BAC                                         ; .rdata$r:00009C1Co ...
.rdata$r:00009BAC                                         ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:00009BB0                 db    1
.rdata$r:00009BB1                 db    0
.rdata$r:00009BB2                 db    0
.rdata$r:00009BB3                 db    0
.rdata$r:00009BB4                 db    0
.rdata$r:00009BB5                 db    0
.rdata$r:00009BB6                 db    0
.rdata$r:00009BB7                 db    0
.rdata$r:00009BB8                 db 0FFh
.rdata$r:00009BB9                 db 0FFh
.rdata$r:00009BBA                 db 0FFh
.rdata$r:00009BBB                 db 0FFh
.rdata$r:00009BBC                 db    0
.rdata$r:00009BBD                 db    0
.rdata$r:00009BBE                 db    0
.rdata$r:00009BBF                 db    0
.rdata$r:00009BC0                 db  40h ; @
.rdata$r:00009BC1                 db    0
.rdata$r:00009BC2                 db    0
.rdata$r:00009BC3                 db    0
.rdata$r:00009BC4                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009BC4 _rdata$r        ends
.rdata$r:00009BC4
.rdata$r:00009BC8 ; ===========================================================================
.rdata$r:00009BC8
.rdata$r:00009BC8 ; Segment type: Pure data
.rdata$r:00009BC8 ; Segment permissions: Read
.rdata$r:00009BC8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009BC8                 assume cs:_rdata$r
.rdata$r:00009BC8                 ;org 9BC8h
.rdata$r:00009BC8 ; COMDAT (pick any)
.rdata$r:00009BC8                 public ??_R4_Iostream_error_category@std@@6B@
.rdata$r:00009BC8 ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata$r:00009BC8 ??_R4_Iostream_error_category@std@@6B@ db    0
.rdata$r:00009BC8                                         ; DATA XREF: .rdata:0000934Co
.rdata$r:00009BC9                 db    0
.rdata$r:00009BCA                 db    0
.rdata$r:00009BCB                 db    0
.rdata$r:00009BCC                 db    0
.rdata$r:00009BCD                 db    0
.rdata$r:00009BCE                 db    0
.rdata$r:00009BCF                 db    0
.rdata$r:00009BD0                 db    0
.rdata$r:00009BD1                 db    0
.rdata$r:00009BD2                 db    0
.rdata$r:00009BD3                 db    0
.rdata$r:00009BD4                 dd offset ??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:00009BD8                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009BD8 _rdata$r        ends
.rdata$r:00009BD8
.data$r:00009BDC ; ===========================================================================
.data$r:00009BDC
.data$r:00009BDC ; Segment type: Pure data
.data$r:00009BDC ; Segment permissions: Read/Write
.data$r:00009BDC _data$r         segment dword public 'DATA' use32
.data$r:00009BDC                 assume cs:_data$r
.data$r:00009BDC                 ;org 9BDCh
.data$r:00009BDC ; COMDAT (pick any)
.data$r:00009BDC                 public ??_R0?AV_Iostream_error_category@std@@@8
.data$r:00009BDC ; class std::_Iostream_error_category `RTTI Type Descriptor'
.data$r:00009BDC ??_R0?AV_Iostream_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00009BDC                                         ; DATA XREF: .rdata$r:00009BD4o
.data$r:00009BDC                                         ; .rdata$r:std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00009BDC                                         ; const type_info::`vftable'
.data$r:00009BE0                 db    0
.data$r:00009BE1                 db    0
.data$r:00009BE2                 db    0
.data$r:00009BE3                 db    0
.data$r:00009BE4                 db  2Eh ; .
.data$r:00009BE5                 db  3Fh ; ?
.data$r:00009BE6                 db  41h ; A
.data$r:00009BE7                 db  56h ; V
.data$r:00009BE8                 db  5Fh ; _
.data$r:00009BE9                 db  49h ; I
.data$r:00009BEA                 db  6Fh ; o
.data$r:00009BEB                 db  73h ; s
.data$r:00009BEC                 db  74h ; t
.data$r:00009BED                 db  72h ; r
.data$r:00009BEE                 db  65h ; e
.data$r:00009BEF                 db  61h ; a
.data$r:00009BF0                 db  6Dh ; m
.data$r:00009BF1                 db  5Fh ; _
.data$r:00009BF2                 db  65h ; e
.data$r:00009BF3                 db  72h ; r
.data$r:00009BF4                 db  72h ; r
.data$r:00009BF5                 db  6Fh ; o
.data$r:00009BF6                 db  72h ; r
.data$r:00009BF7                 db  5Fh ; _
.data$r:00009BF8                 db  63h ; c
.data$r:00009BF9                 db  61h ; a
.data$r:00009BFA                 db  74h ; t
.data$r:00009BFB                 db  65h ; e
.data$r:00009BFC                 db  67h ; g
.data$r:00009BFD                 db  6Fh ; o
.data$r:00009BFE                 db  72h ; r
.data$r:00009BFF                 db  79h ; y
.data$r:00009C00                 db  40h ; @
.data$r:00009C01                 db  73h ; s
.data$r:00009C02                 db  74h ; t
.data$r:00009C03                 db  64h ; d
.data$r:00009C04                 db  40h ; @
.data$r:00009C05                 db  40h ; @
.data$r:00009C06                 db    0
.data$r:00009C07                 align 4
.data$r:00009C07 _data$r         ends
.data$r:00009C07
.rdata$r:00009C08 ; ===========================================================================
.rdata$r:00009C08
.rdata$r:00009C08 ; Segment type: Pure data
.rdata$r:00009C08 ; Segment permissions: Read
.rdata$r:00009C08 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009C08                 assume cs:_rdata$r
.rdata$r:00009C08                 ;org 9C08h
.rdata$r:00009C08 ; COMDAT (pick any)
.rdata$r:00009C08                 public ??_R3_Iostream_error_category@std@@8
.rdata$r:00009C08 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009C08 ??_R3_Iostream_error_category@std@@8 db    0
.rdata$r:00009C08                                         ; DATA XREF: .rdata$r:00009BD8o
.rdata$r:00009C08                                         ; .rdata$r:00009C40o
.rdata$r:00009C09                 db    0
.rdata$r:00009C0A                 db    0
.rdata$r:00009C0B                 db    0
.rdata$r:00009C0C                 db    0
.rdata$r:00009C0D                 db    0
.rdata$r:00009C0E                 db    0
.rdata$r:00009C0F                 db    0
.rdata$r:00009C10                 db    3
.rdata$r:00009C11                 db    0
.rdata$r:00009C12                 db    0
.rdata$r:00009C13                 db    0
.rdata$r:00009C14                 dd offset ??_R2_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:00009C14 _rdata$r        ends
.rdata$r:00009C14
.rdata$r:00009C18 ; ===========================================================================
.rdata$r:00009C18
.rdata$r:00009C18 ; Segment type: Pure data
.rdata$r:00009C18 ; Segment permissions: Read
.rdata$r:00009C18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009C18                 assume cs:_rdata$r
.rdata$r:00009C18                 ;org 9C18h
.rdata$r:00009C18 ; COMDAT (pick any)
.rdata$r:00009C18                 public ??_R2_Iostream_error_category@std@@8
.rdata$r:00009C18 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:00009C18 ??_R2_Iostream_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:00009C18                                         ; DATA XREF: .rdata$r:00009C14o
.rdata$r:00009C18                                         ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009C1C                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009C20                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009C24                 db    0
.rdata$r:00009C25                 align 4
.rdata$r:00009C25 _rdata$r        ends
.rdata$r:00009C25
.rdata$r:00009C28 ; ===========================================================================
.rdata$r:00009C28
.rdata$r:00009C28 ; Segment type: Pure data
.rdata$r:00009C28 ; Segment permissions: Read
.rdata$r:00009C28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009C28                 assume cs:_rdata$r
.rdata$r:00009C28                 ;org 9C28h
.rdata$r:00009C28 ; COMDAT (pick any)
.rdata$r:00009C28                 public ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:00009C28 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00009C28 ??_R1A@?0A@EA@_Iostream_error_category@std@@8 dd offset ??_R0?AV_Iostream_error_category@std@@@8
.rdata$r:00009C28                                         ; DATA XREF: .rdata$r:std::_Iostream_error_category::`RTTI Base Class Array'o
.rdata$r:00009C28                                         ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:00009C2C                 db    2
.rdata$r:00009C2D                 db    0
.rdata$r:00009C2E                 db    0
.rdata$r:00009C2F                 db    0
.rdata$r:00009C30                 db    0
.rdata$r:00009C31                 db    0
.rdata$r:00009C32                 db    0
.rdata$r:00009C33                 db    0
.rdata$r:00009C34                 db 0FFh
.rdata$r:00009C35                 db 0FFh
.rdata$r:00009C36                 db 0FFh
.rdata$r:00009C37                 db 0FFh
.rdata$r:00009C38                 db    0
.rdata$r:00009C39                 db    0
.rdata$r:00009C3A                 db    0
.rdata$r:00009C3B                 db    0
.rdata$r:00009C3C                 db  40h ; @
.rdata$r:00009C3D                 db    0
.rdata$r:00009C3E                 db    0
.rdata$r:00009C3F                 db    0
.rdata$r:00009C40                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009C40 _rdata$r        ends
.rdata$r:00009C40
.rdata$r:00009C44 ; ===========================================================================
.rdata$r:00009C44
.rdata$r:00009C44 ; Segment type: Pure data
.rdata$r:00009C44 ; Segment permissions: Read
.rdata$r:00009C44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009C44                 assume cs:_rdata$r
.rdata$r:00009C44                 ;org 9C44h
.rdata$r:00009C44 ; COMDAT (pick any)
.rdata$r:00009C44                 public ??_R4_System_error_category@std@@6B@
.rdata$r:00009C44 ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata$r:00009C44 ??_R4_System_error_category@std@@6B@ db    0 ; DATA XREF: .rdata:0000938Co
.rdata$r:00009C45                 db    0
.rdata$r:00009C46                 db    0
.rdata$r:00009C47                 db    0
.rdata$r:00009C48                 db    0
.rdata$r:00009C49                 db    0
.rdata$r:00009C4A                 db    0
.rdata$r:00009C4B                 db    0
.rdata$r:00009C4C                 db    0
.rdata$r:00009C4D                 db    0
.rdata$r:00009C4E                 db    0
.rdata$r:00009C4F                 db    0
.rdata$r:00009C50                 dd offset ??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:00009C54                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009C54 _rdata$r        ends
.rdata$r:00009C54
.data$r:00009C58 ; ===========================================================================
.data$r:00009C58
.data$r:00009C58 ; Segment type: Pure data
.data$r:00009C58 ; Segment permissions: Read/Write
.data$r:00009C58 _data$r         segment dword public 'DATA' use32
.data$r:00009C58                 assume cs:_data$r
.data$r:00009C58                 ;org 9C58h
.data$r:00009C58 ; COMDAT (pick any)
.data$r:00009C58                 public ??_R0?AV_System_error_category@std@@@8
.data$r:00009C58 ; class std::_System_error_category `RTTI Type Descriptor'
.data$r:00009C58 ??_R0?AV_System_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00009C58                                         ; DATA XREF: .rdata$r:00009C50o
.data$r:00009C58                                         ; .rdata$r:std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00009C58                                         ; const type_info::`vftable'
.data$r:00009C5C                 align 10h
.data$r:00009C60 a_?av_system_er db '.?AV_System_error_category@std@@',0
.data$r:00009C81                 align 4
.data$r:00009C81 _data$r         ends
.data$r:00009C81
.rdata$r:00009C84 ; ===========================================================================
.rdata$r:00009C84
.rdata$r:00009C84 ; Segment type: Pure data
.rdata$r:00009C84 ; Segment permissions: Read
.rdata$r:00009C84 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009C84                 assume cs:_rdata$r
.rdata$r:00009C84                 ;org 9C84h
.rdata$r:00009C84 ; COMDAT (pick any)
.rdata$r:00009C84                 public ??_R3_System_error_category@std@@8
.rdata$r:00009C84 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009C84 ??_R3_System_error_category@std@@8 db    0 ; DATA XREF: .rdata$r:00009C54o
.rdata$r:00009C84                                         ; .rdata$r:00009CBCo
.rdata$r:00009C85                 db    0
.rdata$r:00009C86                 db    0
.rdata$r:00009C87                 db    0
.rdata$r:00009C88                 db    0
.rdata$r:00009C89                 db    0
.rdata$r:00009C8A                 db    0
.rdata$r:00009C8B                 db    0
.rdata$r:00009C8C                 db    3
.rdata$r:00009C8D                 db    0
.rdata$r:00009C8E                 db    0
.rdata$r:00009C8F                 db    0
.rdata$r:00009C90                 dd offset ??_R2_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:00009C90 _rdata$r        ends
.rdata$r:00009C90
.rdata$r:00009C94 ; ===========================================================================
.rdata$r:00009C94
.rdata$r:00009C94 ; Segment type: Pure data
.rdata$r:00009C94 ; Segment permissions: Read
.rdata$r:00009C94 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009C94                 assume cs:_rdata$r
.rdata$r:00009C94                 ;org 9C94h
.rdata$r:00009C94 ; COMDAT (pick any)
.rdata$r:00009C94                 public ??_R2_System_error_category@std@@8
.rdata$r:00009C94 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:00009C94 ??_R2_System_error_category@std@@8 dd offset ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:00009C94                                         ; DATA XREF: .rdata$r:00009C90o
.rdata$r:00009C94                                         ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009C98                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009C9C                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009CA0                 db    0
.rdata$r:00009CA1                 align 4
.rdata$r:00009CA1 _rdata$r        ends
.rdata$r:00009CA1
.rdata$r:00009CA4 ; ===========================================================================
.rdata$r:00009CA4
.rdata$r:00009CA4 ; Segment type: Pure data
.rdata$r:00009CA4 ; Segment permissions: Read
.rdata$r:00009CA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009CA4                 assume cs:_rdata$r
.rdata$r:00009CA4                 ;org 9CA4h
.rdata$r:00009CA4 ; COMDAT (pick any)
.rdata$r:00009CA4                 public ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:00009CA4 ; std::_System_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00009CA4 ??_R1A@?0A@EA@_System_error_category@std@@8 dd offset ??_R0?AV_System_error_category@std@@@8
.rdata$r:00009CA4                                         ; DATA XREF: .rdata$r:std::_System_error_category::`RTTI Base Class Array'o
.rdata$r:00009CA4                                         ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:00009CA8                 db    2
.rdata$r:00009CA9                 db    0
.rdata$r:00009CAA                 db    0
.rdata$r:00009CAB                 db    0
.rdata$r:00009CAC                 db    0
.rdata$r:00009CAD                 db    0
.rdata$r:00009CAE                 db    0
.rdata$r:00009CAF                 db    0
.rdata$r:00009CB0                 db 0FFh
.rdata$r:00009CB1                 db 0FFh
.rdata$r:00009CB2                 db 0FFh
.rdata$r:00009CB3                 db 0FFh
.rdata$r:00009CB4                 db    0
.rdata$r:00009CB5                 db    0
.rdata$r:00009CB6                 db    0
.rdata$r:00009CB7                 db    0
.rdata$r:00009CB8                 db  40h ; @
.rdata$r:00009CB9                 db    0
.rdata$r:00009CBA                 db    0
.rdata$r:00009CBB                 db    0
.rdata$r:00009CBC                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009CBC _rdata$r        ends
.rdata$r:00009CBC
.rdata$r:00009CC0 ; ===========================================================================
.rdata$r:00009CC0
.rdata$r:00009CC0 ; Segment type: Pure data
.rdata$r:00009CC0 ; Segment permissions: Read
.rdata$r:00009CC0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009CC0                 assume cs:_rdata$r
.rdata$r:00009CC0                 ;org 9CC0h
.rdata$r:00009CC0 ; COMDAT (pick any)
.rdata$r:00009CC0                 public ??_R4DockingCont@@6B@
.rdata$r:00009CC0 ; const DockingCont::`RTTI Complete Object Locator'
.rdata$r:00009CC0 ??_R4DockingCont@@6B@ db    0           ; DATA XREF: .rdata:000093C8o
.rdata$r:00009CC1                 db    0
.rdata$r:00009CC2                 db    0
.rdata$r:00009CC3                 db    0
.rdata$r:00009CC4                 db    0
.rdata$r:00009CC5                 db    0
.rdata$r:00009CC6                 db    0
.rdata$r:00009CC7                 db    0
.rdata$r:00009CC8                 db    0
.rdata$r:00009CC9                 db    0
.rdata$r:00009CCA                 db    0
.rdata$r:00009CCB                 db    0
.rdata$r:00009CCC                 dd offset ??_R0?AVDockingCont@@@8 ; DockingCont `RTTI Type Descriptor'
.rdata$r:00009CD0                 dd offset ??_R3DockingCont@@8 ; DockingCont::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009CD0 _rdata$r        ends
.rdata$r:00009CD0
.data$r:00009CD4 ; ===========================================================================
.data$r:00009CD4
.data$r:00009CD4 ; Segment type: Pure data
.data$r:00009CD4 ; Segment permissions: Read/Write
.data$r:00009CD4 _data$r         segment dword public 'DATA' use32
.data$r:00009CD4                 assume cs:_data$r
.data$r:00009CD4                 ;org 9CD4h
.data$r:00009CD4 ; COMDAT (pick any)
.data$r:00009CD4                 public ??_R0?AVDockingCont@@@8
.data$r:00009CD4 ; class DockingCont `RTTI Type Descriptor'
.data$r:00009CD4 ??_R0?AVDockingCont@@@8 dd offset ??_7type_info@@6B@
.data$r:00009CD4                                         ; DATA XREF: .rdata$r:00009CCCo
.data$r:00009CD4                                         ; .rdata$r:DockingCont::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00009CD4                                         ; const type_info::`vftable'
.data$r:00009CD8                 db    0
.data$r:00009CD9                 db    0
.data$r:00009CDA                 db    0
.data$r:00009CDB                 db    0
.data$r:00009CDC                 db  2Eh ; .
.data$r:00009CDD                 db  3Fh ; ?
.data$r:00009CDE                 db  41h ; A
.data$r:00009CDF                 db  56h ; V
.data$r:00009CE0                 db  44h ; D
.data$r:00009CE1                 db  6Fh ; o
.data$r:00009CE2                 db  63h ; c
.data$r:00009CE3                 db  6Bh ; k
.data$r:00009CE4                 db  69h ; i
.data$r:00009CE5                 db  6Eh ; n
.data$r:00009CE6                 db  67h ; g
.data$r:00009CE7                 db  43h ; C
.data$r:00009CE8                 db  6Fh ; o
.data$r:00009CE9                 db  6Eh ; n
.data$r:00009CEA                 db  74h ; t
.data$r:00009CEB                 db  40h ; @
.data$r:00009CEC                 db  40h ; @
.data$r:00009CED                 db    0
.data$r:00009CEE                 align 10h
.data$r:00009CEE _data$r         ends
.data$r:00009CEE
.rdata$r:00009CF0 ; ===========================================================================
.rdata$r:00009CF0
.rdata$r:00009CF0 ; Segment type: Pure data
.rdata$r:00009CF0 ; Segment permissions: Read
.rdata$r:00009CF0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009CF0                 assume cs:_rdata$r
.rdata$r:00009CF0                 ;org 9CF0h
.rdata$r:00009CF0 ; COMDAT (pick any)
.rdata$r:00009CF0                 public ??_R3DockingCont@@8
.rdata$r:00009CF0 ; DockingCont::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009CF0 ??_R3DockingCont@@8 db    0             ; DATA XREF: .rdata$r:00009CD0o
.rdata$r:00009CF0                                         ; .rdata$r:00009D28o
.rdata$r:00009CF1                 db    0
.rdata$r:00009CF2                 db    0
.rdata$r:00009CF3                 db    0
.rdata$r:00009CF4                 db    0
.rdata$r:00009CF5                 db    0
.rdata$r:00009CF6                 db    0
.rdata$r:00009CF7                 db    0
.rdata$r:00009CF8                 db    3
.rdata$r:00009CF9                 db    0
.rdata$r:00009CFA                 db    0
.rdata$r:00009CFB                 db    0
.rdata$r:00009CFC                 dd offset ??_R2DockingCont@@8 ; DockingCont::`RTTI Base Class Array'
.rdata$r:00009CFC _rdata$r        ends
.rdata$r:00009CFC
.rdata$r:00009D00 ; ===========================================================================
.rdata$r:00009D00
.rdata$r:00009D00 ; Segment type: Pure data
.rdata$r:00009D00 ; Segment permissions: Read
.rdata$r:00009D00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009D00                 assume cs:_rdata$r
.rdata$r:00009D00                 ;org 9D00h
.rdata$r:00009D00 ; COMDAT (pick any)
.rdata$r:00009D00                 public ??_R2DockingCont@@8
.rdata$r:00009D00 ; DockingCont::`RTTI Base Class Array'
.rdata$r:00009D00 ??_R2DockingCont@@8 dd offset ??_R1A@?0A@EA@DockingCont@@8
.rdata$r:00009D00                                         ; DATA XREF: .rdata$r:00009CFCo
.rdata$r:00009D00                                         ; DockingCont::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009D04                 dd offset ??_R1A@?0A@EA@StaticDialog@@8 ; StaticDialog::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009D08                 dd offset ??_R1A@?0A@EA@Window@@8 ; Window::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009D0C                 db    0
.rdata$r:00009D0D                 align 10h
.rdata$r:00009D0D _rdata$r        ends
.rdata$r:00009D0D
.rdata$r:00009D10 ; ===========================================================================
.rdata$r:00009D10
.rdata$r:00009D10 ; Segment type: Pure data
.rdata$r:00009D10 ; Segment permissions: Read
.rdata$r:00009D10 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009D10                 assume cs:_rdata$r
.rdata$r:00009D10                 ;org 9D10h
.rdata$r:00009D10 ; COMDAT (pick any)
.rdata$r:00009D10                 public ??_R1A@?0A@EA@DockingCont@@8
.rdata$r:00009D10 ; DockingCont::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00009D10 ??_R1A@?0A@EA@DockingCont@@8 dd offset ??_R0?AVDockingCont@@@8
.rdata$r:00009D10                                         ; DATA XREF: .rdata$r:DockingCont::`RTTI Base Class Array'o
.rdata$r:00009D10                                         ; DockingCont `RTTI Type Descriptor'
.rdata$r:00009D14                 db    2
.rdata$r:00009D15                 db    0
.rdata$r:00009D16                 db    0
.rdata$r:00009D17                 db    0
.rdata$r:00009D18                 db    0
.rdata$r:00009D19                 db    0
.rdata$r:00009D1A                 db    0
.rdata$r:00009D1B                 db    0
.rdata$r:00009D1C                 db 0FFh
.rdata$r:00009D1D                 db 0FFh
.rdata$r:00009D1E                 db 0FFh
.rdata$r:00009D1F                 db 0FFh
.rdata$r:00009D20                 db    0
.rdata$r:00009D21                 db    0
.rdata$r:00009D22                 db    0
.rdata$r:00009D23                 db    0
.rdata$r:00009D24                 db  40h ; @
.rdata$r:00009D25                 db    0
.rdata$r:00009D26                 db    0
.rdata$r:00009D27                 db    0
.rdata$r:00009D28                 dd offset ??_R3DockingCont@@8 ; DockingCont::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009D28 _rdata$r        ends
.rdata$r:00009D28
.rdata$r:00009D2C ; ===========================================================================
.rdata$r:00009D2C
.rdata$r:00009D2C ; Segment type: Pure data
.rdata$r:00009D2C ; Segment permissions: Read
.rdata$r:00009D2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009D2C                 assume cs:_rdata$r
.rdata$r:00009D2C                 ;org 9D2Ch
.rdata$r:00009D2C ; COMDAT (pick any)
.rdata$r:00009D2C                 public ??_R4ToolTip@@6B@
.rdata$r:00009D2C ; const ToolTip::`RTTI Complete Object Locator'
.rdata$r:00009D2C ??_R4ToolTip@@6B@ db    0               ; DATA XREF: .rdata:00009408o
.rdata$r:00009D2D                 db    0
.rdata$r:00009D2E                 db    0
.rdata$r:00009D2F                 db    0
.rdata$r:00009D30                 db    0
.rdata$r:00009D31                 db    0
.rdata$r:00009D32                 db    0
.rdata$r:00009D33                 db    0
.rdata$r:00009D34                 db    0
.rdata$r:00009D35                 db    0
.rdata$r:00009D36                 db    0
.rdata$r:00009D37                 db    0
.rdata$r:00009D38                 dd offset ??_R0?AVToolTip@@@8 ; ToolTip `RTTI Type Descriptor'
.rdata$r:00009D3C                 dd offset ??_R3ToolTip@@8 ; ToolTip::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009D3C _rdata$r        ends
.rdata$r:00009D3C
.data$r:00009D40 ; ===========================================================================
.data$r:00009D40
.data$r:00009D40 ; Segment type: Pure data
.data$r:00009D40 ; Segment permissions: Read/Write
.data$r:00009D40 _data$r         segment dword public 'DATA' use32
.data$r:00009D40                 assume cs:_data$r
.data$r:00009D40                 ;org 9D40h
.data$r:00009D40 ; COMDAT (pick any)
.data$r:00009D40                 public ??_R0?AVToolTip@@@8
.data$r:00009D40 ; class ToolTip `RTTI Type Descriptor'
.data$r:00009D40 ??_R0?AVToolTip@@@8 dd offset ??_7type_info@@6B@
.data$r:00009D40                                         ; DATA XREF: .rdata$r:00009D38o
.data$r:00009D40                                         ; .rdata$r:ToolTip::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00009D40                                         ; const type_info::`vftable'
.data$r:00009D44                 align 8
.data$r:00009D48 a_?avtooltip@@  db '.?AVToolTip@@',0
.data$r:00009D56                 align 4
.data$r:00009D56 _data$r         ends
.data$r:00009D56
.rdata$r:00009D58 ; ===========================================================================
.rdata$r:00009D58
.rdata$r:00009D58 ; Segment type: Pure data
.rdata$r:00009D58 ; Segment permissions: Read
.rdata$r:00009D58 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009D58                 assume cs:_rdata$r
.rdata$r:00009D58                 ;org 9D58h
.rdata$r:00009D58 ; COMDAT (pick any)
.rdata$r:00009D58                 public ??_R3ToolTip@@8
.rdata$r:00009D58 ; ToolTip::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009D58 ??_R3ToolTip@@8 db    0                 ; DATA XREF: .rdata$r:00009D3Co
.rdata$r:00009D58                                         ; .rdata$r:00009D8Co
.rdata$r:00009D59                 db    0
.rdata$r:00009D5A                 db    0
.rdata$r:00009D5B                 db    0
.rdata$r:00009D5C                 db    0
.rdata$r:00009D5D                 db    0
.rdata$r:00009D5E                 db    0
.rdata$r:00009D5F                 db    0
.rdata$r:00009D60                 db    2
.rdata$r:00009D61                 db    0
.rdata$r:00009D62                 db    0
.rdata$r:00009D63                 db    0
.rdata$r:00009D64                 dd offset ??_R2ToolTip@@8 ; ToolTip::`RTTI Base Class Array'
.rdata$r:00009D64 _rdata$r        ends
.rdata$r:00009D64
.rdata$r:00009D68 ; ===========================================================================
.rdata$r:00009D68
.rdata$r:00009D68 ; Segment type: Pure data
.rdata$r:00009D68 ; Segment permissions: Read
.rdata$r:00009D68 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009D68                 assume cs:_rdata$r
.rdata$r:00009D68                 ;org 9D68h
.rdata$r:00009D68 ; COMDAT (pick any)
.rdata$r:00009D68                 public ??_R2ToolTip@@8
.rdata$r:00009D68 ; ToolTip::`RTTI Base Class Array'
.rdata$r:00009D68 ??_R2ToolTip@@8 dd offset ??_R1A@?0A@EA@ToolTip@@8
.rdata$r:00009D68                                         ; DATA XREF: .rdata$r:00009D64o
.rdata$r:00009D68                                         ; ToolTip::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009D6C                 dd offset ??_R1A@?0A@EA@Window@@8 ; Window::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009D70                 db    0
.rdata$r:00009D71                 align 4
.rdata$r:00009D71 _rdata$r        ends
.rdata$r:00009D71
.rdata$r:00009D74 ; ===========================================================================
.rdata$r:00009D74
.rdata$r:00009D74 ; Segment type: Pure data
.rdata$r:00009D74 ; Segment permissions: Read
.rdata$r:00009D74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009D74                 assume cs:_rdata$r
.rdata$r:00009D74                 ;org 9D74h
.rdata$r:00009D74 ; COMDAT (pick any)
.rdata$r:00009D74                 public ??_R1A@?0A@EA@ToolTip@@8
.rdata$r:00009D74 ; ToolTip::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00009D74 ??_R1A@?0A@EA@ToolTip@@8 dd offset ??_R0?AVToolTip@@@8
.rdata$r:00009D74                                         ; DATA XREF: .rdata$r:ToolTip::`RTTI Base Class Array'o
.rdata$r:00009D74                                         ; ToolTip `RTTI Type Descriptor'
.rdata$r:00009D78                 db    1
.rdata$r:00009D79                 db    0
.rdata$r:00009D7A                 db    0
.rdata$r:00009D7B                 db    0
.rdata$r:00009D7C                 db    0
.rdata$r:00009D7D                 db    0
.rdata$r:00009D7E                 db    0
.rdata$r:00009D7F                 db    0
.rdata$r:00009D80                 db 0FFh
.rdata$r:00009D81                 db 0FFh
.rdata$r:00009D82                 db 0FFh
.rdata$r:00009D83                 db 0FFh
.rdata$r:00009D84                 db    0
.rdata$r:00009D85                 db    0
.rdata$r:00009D86                 db    0
.rdata$r:00009D87                 db    0
.rdata$r:00009D88                 db  40h ; @
.rdata$r:00009D89                 db    0
.rdata$r:00009D8A                 db    0
.rdata$r:00009D8B                 db    0
.rdata$r:00009D8C                 dd offset ??_R3ToolTip@@8 ; ToolTip::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009D8C _rdata$r        ends
.rdata$r:00009D8C
.CRT$XCU:00009D90 ; ===========================================================================
.CRT$XCU:00009D90
.CRT$XCU:00009D90 ; Segment type: Pure data
.CRT$XCU:00009D90 ; Segment permissions: Read
.CRT$XCU:00009D90 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00009D90                 assume cs:_CRT$XCU
.CRT$XCU:00009D90                 ;org 9D90h
.CRT$XCU:00009D90 _piecewise_construct$initializer$ dd offset ??__Epiecewise_construct@std@@YAXXZ ; std::`dynamic initializer for 'piecewise_construct''(void)
.CRT$XCU:00009D94 _allocator_arg$initializer$ dd offset ??__Eallocator_arg@std@@YAXXZ ; std::`dynamic initializer for 'allocator_arg''(void)
.CRT$XCU:00009D94 _CRT$XCU        ends
.CRT$XCU:00009D94
.CRT$XCU:00009D98 ; ===========================================================================
.CRT$XCU:00009D98
.CRT$XCU:00009D98 ; Segment type: Pure data
.CRT$XCU:00009D98 ; Segment permissions: Read
.CRT$XCU:00009D98 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00009D98                 assume cs:_CRT$XCU
.CRT$XCU:00009D98                 ;org 9D98h
.CRT$XCU:00009D98 ; COMDAT (pick associative to section at 93B0)
.CRT$XCU:00009D98 ; public: static void (__cdecl *std::_Error_objects<int>::_Generic_object$initializer$)(void)
.CRT$XCU:00009D98 ?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.CRT$XCU:00009D98 _CRT$XCU        ends
.CRT$XCU:00009D98
.CRT$XCU:00009D9C ; ===========================================================================
.CRT$XCU:00009D9C
.CRT$XCU:00009D9C ; Segment type: Pure data
.CRT$XCU:00009D9C ; Segment permissions: Read
.CRT$XCU:00009D9C _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00009D9C                 assume cs:_CRT$XCU
.CRT$XCU:00009D9C                 ;org 9D9Ch
.CRT$XCU:00009D9C ; COMDAT (pick associative to section at 93B4)
.CRT$XCU:00009D9C ; public: static void (__cdecl *std::_Error_objects<int>::_Iostream_object$initializer$)(void)
.CRT$XCU:00009D9C ?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.CRT$XCU:00009D9C _CRT$XCU        ends
.CRT$XCU:00009D9C
.CRT$XCU:00009DA0 ; ===========================================================================
.CRT$XCU:00009DA0
.CRT$XCU:00009DA0 ; Segment type: Pure data
.CRT$XCU:00009DA0 ; Segment permissions: Read
.CRT$XCU:00009DA0 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00009DA0                 assume cs:_CRT$XCU
.CRT$XCU:00009DA0                 ;org 9DA0h
.CRT$XCU:00009DA0 ; COMDAT (pick associative to section at 93B8)
.CRT$XCU:00009DA0 ; public: static void (__cdecl *std::_Error_objects<int>::_System_object$initializer$)(void)
.CRT$XCU:00009DA0 ?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.CRT$XCU:00009DA0 _CRT$XCU        ends
.CRT$XCU:00009DA0
.CRT$XCU:00009DA4 ; ===========================================================================
.CRT$XCU:00009DA4
.CRT$XCU:00009DA4 ; Segment type: Pure data
.CRT$XCU:00009DA4 ; Segment permissions: Read
.CRT$XCU:00009DA4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00009DA4                 assume cs:_CRT$XCU
.CRT$XCU:00009DA4                 ;org 9DA4h
.CRT$XCU:00009DA4 ; COMDAT (pick associative to section at 93C0)
.CRT$XCU:00009DA4 ; public: static void (__cdecl *std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id$initializer$)(void)
.CRT$XCU:00009DA4 ?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)
.CRT$XCU:00009DA4 _CRT$XCU        ends
.CRT$XCU:00009DA4
.CRT$XCU:00009DA8 ; ===========================================================================
.CRT$XCU:00009DA8
.CRT$XCU:00009DA8 ; Segment type: Pure data
.CRT$XCU:00009DA8 ; Segment permissions: Read
.CRT$XCU:00009DA8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00009DA8                 assume cs:_CRT$XCU
.CRT$XCU:00009DA8                 ;org 9DA8h
.CRT$XCU:00009DA8 ; COMDAT (pick associative to section at 93C4)
.CRT$XCU:00009DA8 ; public: static void (__cdecl *std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id$initializer$)(void)
.CRT$XCU:00009DA8 ?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)
.CRT$XCU:00009DA8 _CRT$XCU        ends
.CRT$XCU:00009DA8
.CRT$XCU:00009DAC ; ===========================================================================
.CRT$XCU:00009DAC
.CRT$XCU:00009DAC ; Segment type: Pure data
.CRT$XCU:00009DAC ; Segment permissions: Read
.CRT$XCU:00009DAC _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00009DAC                 assume cs:_CRT$XCU
.CRT$XCU:00009DAC                 ;org 9DACh
.CRT$XCU:00009DAC ; COMDAT (pick associative to section at 9564)
.CRT$XCU:00009DAC ; public: static void (__cdecl *std::numpunct<char>::id$initializer$)(void)
.CRT$XCU:00009DAC ?id$initializer$@?$numpunct@D@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)
.CRT$XCU:00009DAC _CRT$XCU        ends
.CRT$XCU:00009DAC
.CRT$XCU:00009DB0 ; ===========================================================================
.CRT$XCU:00009DB0
.CRT$XCU:00009DB0 ; Segment type: Pure data
.CRT$XCU:00009DB0 ; Segment permissions: Read
.CRT$XCU:00009DB0 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00009DB0                 assume cs:_CRT$XCU
.CRT$XCU:00009DB0                 ;org 9DB0h
.CRT$XCU:00009DB0 ; COMDAT (pick associative to section at 9568)
.CRT$XCU:00009DB0 ; public: static void (__cdecl *std::numpunct<wchar_t>::id$initializer$)(void)
.CRT$XCU:00009DB0 ?id$initializer$@?$numpunct@_W@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)
.CRT$XCU:00009DB0 _CRT$XCU        ends
.CRT$XCU:00009DB0
UNDEF:00009DC0 ; ===========================================================================
UNDEF:00009DC0
UNDEF:00009DC0 ; Segment type: Externs
UNDEF:00009DC0 ; UNDEF
UNDEF:00009DC0                 extrn __purecall:near   ; DATA XREF: .rdata:00009294o
UNDEF:00009DC0                                         ; .rdata:000092F8o ...
UNDEF:00009DC4 ; void *__cdecl operator new(unsigned int)
UNDEF:00009DC4                 extrn ??2@YAPAXI@Z:near ; CODE XREF: DockingCont::createToolbar(tTbData)+Dp
UNDEF:00009DC4                                         ; std::_Allocate<char>(uint,char *)+1Dp ...
UNDEF:00009DC8 ; void __cdecl operator delete(void *)
UNDEF:00009DC8                 extrn ??3@YAXPAX@Z:near ; CODE XREF: DockingCont::removeToolbar(tTbData)+A8p
UNDEF:00009DC8                                         ; DockingCont::`scalar deleting destructor'(uint)+1Bp ...
UNDEF:00009DCC ; int __cdecl atexit(void (__cdecl *)())
UNDEF:00009DCC                 extrn _atexit:near      ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+60p
UNDEF:00009DCC                                         ; DockingCont::runProcTab(HWND__ *,uint,uint,long)+5Dp ...
UNDEF:00009DD0                 extrn __invalid_parameter:near
UNDEF:00009DD0                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)+74p
UNDEF:00009DD0                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+=(int)+A6p
UNDEF:00009DD4 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00009DD4                 extrn _memcpy:near      ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+1Ep
UNDEF:00009DD4                                         ; _wmemcpy+11p
UNDEF:00009DD8 ; size_t __cdecl strlen(const char *Str)
UNDEF:00009DD8                 extrn _strlen:near      ; CODE XREF: std::char_traits<char>::length(char const *)+1Bp
UNDEF:00009DDC ; void *__cdecl memmove(void *Dst, const void *Src, size_t Size)
UNDEF:00009DDC                 extrn _memmove:near     ; CODE XREF: std::_Move<tTbData * *,tTbData * *>(tTbData * *,tTbData * *,tTbData * *,std::_Scalar_ptr_iterator_tag)+1Fp
UNDEF:00009DDC                                         ; std::_Uninit_move<tTbData *,tTbData *,tTbData *>(tTbData * *,tTbData * *,tTbData * *,std::_Wrap_alloc<std::allocator<tTbData *>> &,tTbData * *,std::_Scalar_ptr_iterator_tag)+4Fp ...
UNDEF:00009DE0 ; size_t __cdecl wcslen(const wchar_t *Str)
UNDEF:00009DE0                 extrn _wcslen:near      ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+1Bp
UNDEF:00009DE4 ; DWORD __stdcall GetLastError()
UNDEF:00009DE4                 extrn __imp__GetLastError@0:near
UNDEF:00009DE4                                         ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+178p
UNDEF:00009DE4                                         ; DATA XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+178r
UNDEF:00009DE8 ; int __stdcall MulDiv(int nNumber, int nNumerator, int nDenominator)
UNDEF:00009DE8                 extrn __imp__MulDiv@12:near
UNDEF:00009DE8                                         ; CODE XREF: DPIManager::scaleY(int)+14p
UNDEF:00009DE8                                         ; DATA XREF: DPIManager::scaleY(int)+14r
UNDEF:00009DEC ; int __stdcall lstrcmpW(LPCWSTR lpString1, LPCWSTR lpString2)
UNDEF:00009DEC                 extrn __imp__lstrcmpW@8:near
UNDEF:00009DEC                                         ; CODE XREF: DockingCont::findToolbarByName(wchar_t *)+57p
UNDEF:00009DEC                                         ; DockingCont::focusClient(void)+79p
UNDEF:00009DEC                                         ; DATA XREF: ...
UNDEF:00009DF0 ; int __stdcall lstrlenW(LPCWSTR lpString)
UNDEF:00009DF0                 extrn __imp__lstrlenW@4:near
UNDEF:00009DF0                                         ; CODE XREF: DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+C8p
UNDEF:00009DF0                                         ; DockingCont::SelectTab(int)+1EBp ...
UNDEF:00009DF4 ; BOOL __stdcall BitBlt(HDC hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, DWORD rop)
UNDEF:00009DF4                 extrn __imp__BitBlt@36:near
UNDEF:00009DF4                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+4F5p
UNDEF:00009DF4                                         ; DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+51Ap
UNDEF:00009DF4                                         ; DATA XREF: ...
UNDEF:00009DF8 ; HBITMAP __stdcall CreateCompatibleBitmap(HDC hdc, int cx, int cy)
UNDEF:00009DF8                 extrn __imp__CreateCompatibleBitmap@12:near
UNDEF:00009DF8                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+493p
UNDEF:00009DF8                                         ; DATA XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+493r
UNDEF:00009DFC ; HDC __stdcall CreateCompatibleDC(HDC hdc)
UNDEF:00009DFC                 extrn __imp__CreateCompatibleDC@4:near
UNDEF:00009DFC                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+41Fp
UNDEF:00009DFC                                         ; DATA XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+41Fr
UNDEF:00009E00 ; HFONT __stdcall CreateFontW(int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic, DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision, DWORD iQuality, DWORD iPitchAndFamily, LPCWSTR pszFaceName)
UNDEF:00009E00                 extrn __imp__CreateFontW@56:near
UNDEF:00009E00                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+363p
UNDEF:00009E00                                         ; DATA XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+363r
UNDEF:00009E04 ; HPEN __stdcall CreatePen(int iStyle, int cWidth, COLORREF color)
UNDEF:00009E04                 extrn __imp__CreatePen@12:near
UNDEF:00009E04                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+54p
UNDEF:00009E04                                         ; DATA XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+54r
UNDEF:00009E08 ; HBRUSH __stdcall CreateSolidBrush(COLORREF color)
UNDEF:00009E08                 extrn __imp__CreateSolidBrush@4:near
UNDEF:00009E08                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+C3p
UNDEF:00009E08                                         ; DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+EAp ...
UNDEF:00009E0C ; BOOL __stdcall DeleteDC(HDC hdc)
UNDEF:00009E0C                 extrn __imp__DeleteDC@4:near
UNDEF:00009E0C                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+546p
UNDEF:00009E0C                                         ; DATA XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+546r
UNDEF:00009E10 ; BOOL __stdcall DeleteObject(HGDIOBJ ho)
UNDEF:00009E10                 extrn __imp__DeleteObject@4:near
UNDEF:00009E10                                         ; CODE XREF: DockingCont::~DockingCont(void)+3Dp
UNDEF:00009E10                                         ; DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+403p ...
UNDEF:00009E14 ; HGDIOBJ __stdcall GetStockObject(int i)
UNDEF:00009E14                 extrn __imp__GetStockObject@4:near
UNDEF:00009E14                                         ; CODE XREF: DockingCont::doDialog(bool,bool)+B8p
UNDEF:00009E14                                         ; DATA XREF: DockingCont::doDialog(bool,bool)+B8r
UNDEF:00009E18 ; BOOL __stdcall GetTextExtentPoint32W(HDC hdc, LPCWSTR lpString, int c, LPSIZE psizl)
UNDEF:00009E18                 extrn __imp__GetTextExtentPoint32W@16:near
UNDEF:00009E18                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+228p
UNDEF:00009E18                                         ; DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+3C4p ...
UNDEF:00009E1C ; BOOL __stdcall LineTo(HDC hdc, int x, int y)
UNDEF:00009E1C                 extrn __imp__LineTo@12:near
UNDEF:00009E1C                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+176p
UNDEF:00009E1C                                         ; DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+188p ...
UNDEF:00009E20 ; BOOL __stdcall RestoreDC(HDC hdc, int nSavedDC)
UNDEF:00009E20                 extrn __imp__RestoreDC@8:near
UNDEF:00009E20                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+554p
UNDEF:00009E20                                         ; DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+2DBp
UNDEF:00009E20                                         ; DATA XREF: ...
UNDEF:00009E24 ; int __stdcall SaveDC(HDC hdc)
UNDEF:00009E24                 extrn __imp__SaveDC@4:near
UNDEF:00009E24                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+9Cp
UNDEF:00009E24                                         ; DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+E1p
UNDEF:00009E24                                         ; DATA XREF: ...
UNDEF:00009E28 ; HGDIOBJ __stdcall SelectObject(HDC hdc, HGDIOBJ h)
UNDEF:00009E28                 extrn __imp__SelectObject@8:near
UNDEF:00009E28                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+1D8p
UNDEF:00009E28                                         ; DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+25Dp ...
UNDEF:00009E2C ; int __stdcall SetBkMode(HDC hdc, int mode)
UNDEF:00009E2C                 extrn __imp__SetBkMode@8:near
UNDEF:00009E2C                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+ABp
UNDEF:00009E2C                                         ; DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+FEp
UNDEF:00009E2C                                         ; DATA XREF: ...
UNDEF:00009E30 ; COLORREF __stdcall SetTextColor(HDC hdc, COLORREF color)
UNDEF:00009E30                 extrn __imp__SetTextColor@8:near
UNDEF:00009E30                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+D9p
UNDEF:00009E30                                         ; DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+28Ep
UNDEF:00009E30                                         ; DATA XREF: ...
UNDEF:00009E34 ; int __stdcall GetObjectW(HANDLE h, int c, LPVOID pv)
UNDEF:00009E34                 extrn __imp__GetObjectW@12:near
UNDEF:00009E34                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+470p
UNDEF:00009E34                                         ; DATA XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+470r
UNDEF:00009E38 ; BOOL __stdcall MoveToEx(HDC hdc, int x, int y, LPPOINT lppt)
UNDEF:00009E38                 extrn __imp__MoveToEx@16:near
UNDEF:00009E38                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+164p
UNDEF:00009E38                                         ; DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+2CCp
UNDEF:00009E38                                         ; DATA XREF: ...
UNDEF:00009E3C ; int _wsprintfW(LPWSTR, LPCWSTR, ...)
UNDEF:00009E3C                 extrn __imp__wsprintfW:near
UNDEF:00009E3C                                         ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+197p
UNDEF:00009E3C                                         ; DATA XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+197r
UNDEF:00009E40 ; LRESULT __stdcall SendMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:00009E40                 extrn __imp__SendMessageW@16:near
UNDEF:00009E40                                         ; CODE XREF: DockingCont::createToolbar(tTbData)+69p
UNDEF:00009E40                                         ; DockingCont::setActiveTb(int)+17p ...
UNDEF:00009E44 ; BOOL __stdcall PostMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:00009E44                 extrn __imp__PostMessageW@16:near
UNDEF:00009E44                                         ; CODE XREF: hookProcMouse(uint,uint,long)+6Bp
UNDEF:00009E44                                         ; hookProcMouse(uint,uint,long)+82p
UNDEF:00009E44                                         ; DATA XREF: ...
UNDEF:00009E48 ; LRESULT __stdcall CallWindowProcW(WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:00009E48                 extrn __imp__CallWindowProcW@20:near
UNDEF:00009E48                                         ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+680p
UNDEF:00009E48                                         ; DockingCont::runProcTab(HWND__ *,uint,uint,long)+6A8p
UNDEF:00009E48                                         ; DATA XREF: ...
UNDEF:00009E4C ; BOOL __stdcall DestroyWindow(HWND hWnd)
UNDEF:00009E4C                 extrn __imp__DestroyWindow@4:near
UNDEF:00009E4C                                         ; CODE XREF: DockingCont::destroy(void)+5Ap
UNDEF:00009E4C                                         ; StaticDialog::destroy(void)+29p ...
UNDEF:00009E50 ; BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow)
UNDEF:00009E50                 extrn __imp__ShowWindow@8:near
UNDEF:00009E50                                         ; CODE XREF: DockingCont::doDialog(bool,bool)+7Ap
UNDEF:00009E50                                         ; DockingCont::doDialog(bool,bool)+B0p ...
UNDEF:00009E54 ; BOOL __stdcall MoveWindow(HWND hWnd, int X, int Y, int nWidth, int nHeight, BOOL bRepaint)
UNDEF:00009E54                 extrn __imp__MoveWindow@24:near
UNDEF:00009E54                                         ; CODE XREF: Window::reSizeTo(tagRECT &)+2Bp
UNDEF:00009E54                                         ; Window::reSizeToWH(tagRECT &)+36p
UNDEF:00009E54                                         ; DATA XREF: ...
UNDEF:00009E58 ; BOOL __stdcall SetWindowPos(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags)
UNDEF:00009E58                 extrn __imp__SetWindowPos@28:near
UNDEF:00009E58                                         ; CODE XREF: DockingCont::onSize(void)+D2p
UNDEF:00009E58                                         ; DockingCont::onSize(void)+105p ...
UNDEF:00009E5C ; BOOL __stdcall IsWindowVisible(HWND hWnd)
UNDEF:00009E5C                 extrn __imp__IsWindowVisible@4:near
UNDEF:00009E5C                                         ; CODE XREF: Window::getHeight(void)+2Bp
UNDEF:00009E5C                                         ; Window::isVisible(void)+10p
UNDEF:00009E5C                                         ; DATA XREF: ...
UNDEF:00009E60 ; HWND __stdcall GetDlgItem(HWND hDlg, int nIDDlgItem)
UNDEF:00009E60                 extrn __imp__GetDlgItem@8:near
UNDEF:00009E60                                         ; CODE XREF: DockingCont::createToolbar(tTbData)+93p
UNDEF:00009E60                                         ; DockingCont::run_dlgProc(uint,uint,long)+AAp ...
UNDEF:00009E64 ; HWND __stdcall SetFocus(HWND hWnd)
UNDEF:00009E64                 extrn __imp__SetFocus@4:near
UNDEF:00009E64                                         ; CODE XREF: DockingCont::focusClient(void)+8Bp
UNDEF:00009E64                                         ; DockingCont::runProcCaption(HWND__ *,uint,uint,long)+3C7p ...
UNDEF:00009E68 ; int __stdcall GetSystemMetrics(int nIndex)
UNDEF:00009E68                 extrn __imp__GetSystemMetrics@4:near
UNDEF:00009E68                                         ; CODE XREF: DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+ECp
UNDEF:00009E68                                         ; DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+296p
UNDEF:00009E68                                         ; DATA XREF: ...
UNDEF:00009E6C ; int __stdcall DrawTextW(HDC hdc, LPCWSTR lpchText, int cchText, LPRECT lprc, UINT format)
UNDEF:00009E6C                 extrn __imp__DrawTextW@20:near
UNDEF:00009E6C                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+1FEp
UNDEF:00009E6C                                         ; DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+39Ap ...
UNDEF:00009E70 ; BOOL __stdcall UpdateWindow(HWND hWnd)
UNDEF:00009E70                 extrn __imp__UpdateWindow@4:near
UNDEF:00009E70                                         ; CODE XREF: Window::redraw(bool)+27p
UNDEF:00009E70                                         ; DATA XREF: Window::redraw(bool)+27r
UNDEF:00009E74 ; HDC __stdcall GetDC(HWND hWnd)
UNDEF:00009E74                 extrn __imp__GetDC@4:near
UNDEF:00009E74                                         ; CODE XREF: DockingCont::SelectTab(int)+17Dp
UNDEF:00009E74                                         ; DATA XREF: DockingCont::SelectTab(int)+17Dr
UNDEF:00009E78 ; int __stdcall ReleaseDC(HWND hWnd, HDC hDC)
UNDEF:00009E78                 extrn __imp__ReleaseDC@8:near
UNDEF:00009E78                                         ; CODE XREF: DockingCont::SelectTab(int)+221p
UNDEF:00009E78                                         ; DATA XREF: DockingCont::SelectTab(int)+221r
UNDEF:00009E7C ; BOOL __stdcall InvalidateRect(HWND hWnd, const RECT *lpRect, BOOL bErase)
UNDEF:00009E7C                 extrn __imp__InvalidateRect@12:near
UNDEF:00009E7C                                         ; CODE XREF: Window::redraw(bool)+12p
UNDEF:00009E7C                                         ; DATA XREF: Window::redraw(bool)+12r
UNDEF:00009E80 ; BOOL __stdcall RedrawWindow(HWND hWnd, const RECT *lprcUpdate, HRGN hrgnUpdate, UINT flags)
UNDEF:00009E80                 extrn __imp__RedrawWindow@16:near
UNDEF:00009E80                                         ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+1C0p
UNDEF:00009E80                                         ; DockingCont::runProcCaption(HWND__ *,uint,uint,long)+3D7p ...
UNDEF:00009E84 ; BOOL __stdcall SetWindowTextW(HWND hWnd, LPCWSTR lpString)
UNDEF:00009E84                 extrn __imp__SetWindowTextW@8:near
UNDEF:00009E84                                         ; CODE XREF: DockingCont::updateCaption(void)+E9p
UNDEF:00009E84                                         ; DockingCont::updateCaption(void)+104p
UNDEF:00009E84                                         ; DATA XREF: ...
UNDEF:00009E88 ; BOOL __stdcall GetClientRect(HWND hWnd, LPRECT lpRect)
UNDEF:00009E88                 extrn __imp__GetClientRect@8:near
UNDEF:00009E88                                         ; CODE XREF: Window::getClientRect(tagRECT &)+12p
UNDEF:00009E88                                         ; Window::getHeight(void)+1Ep ...
UNDEF:00009E8C ; BOOL __stdcall GetWindowRect(HWND hWnd, LPRECT lpRect)
UNDEF:00009E8C                 extrn __imp__GetWindowRect@8:near
UNDEF:00009E8C                                         ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+631p
UNDEF:00009E8C                                         ; DockingCont::isInRect(HWND__ *,int,int)+22p ...
UNDEF:00009E90 ; int __stdcall MessageBoxW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)
UNDEF:00009E90                 extrn __imp__MessageBoxW@16:near
UNDEF:00009E90                                         ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+1B0p
UNDEF:00009E90                                         ; DATA XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+1B0r
UNDEF:00009E94 ; BOOL __stdcall GetCursorPos(LPPOINT lpPoint)
UNDEF:00009E94                 extrn __imp__GetCursorPos@4:near
UNDEF:00009E94                                         ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+2C2p
UNDEF:00009E94                                         ; DockingCont::runProcCaption(HWND__ *,uint,uint,long)+52Fp
UNDEF:00009E94                                         ; DATA XREF: ...
UNDEF:00009E98 ; BOOL __stdcall ClientToScreen(HWND hWnd, LPPOINT lpPoint)
UNDEF:00009E98                 extrn __imp__ClientToScreen@8:near
UNDEF:00009E98                                         ; CODE XREF: DockingCont::runProcTab(HWND__ *,uint,uint,long)+402p
UNDEF:00009E98                                         ; DockingCont::runProcTab(HWND__ *,uint,uint,long)+54Ep
UNDEF:00009E98                                         ; DATA XREF: ...
UNDEF:00009E9C ; BOOL __stdcall ScreenToClient(HWND hWnd, LPPOINT lpPoint)
UNDEF:00009E9C                 extrn __imp__ScreenToClient@8:near
UNDEF:00009E9C                                         ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+2D9p
UNDEF:00009E9C                                         ; DATA XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+2D9r
UNDEF:00009EA0 ; DWORD __stdcall GetSysColor(int nIndex)
UNDEF:00009EA0                 extrn __imp__GetSysColor@4:near
UNDEF:00009EA0                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+49p
UNDEF:00009EA0                                         ; DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+BCp ...
UNDEF:00009EA4 ; int __stdcall FillRect(HDC hDC, const RECT *lprc, HBRUSH hbr)
UNDEF:00009EA4                 extrn __imp__FillRect@12:near
UNDEF:00009EA4                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+115p
UNDEF:00009EA4                                         ; DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+150p ...
UNDEF:00009EA8 ; LONG __stdcall GetWindowLongW(HWND hWnd, int nIndex)
UNDEF:00009EA8                 extrn __imp__GetWindowLongW@8:near
UNDEF:00009EA8                                         ; CODE XREF: DockingCont::wndCaptionProc(HWND__ *,uint,uint,long)+19p
UNDEF:00009EA8                                         ; DockingCont::wndTabProc(HWND__ *,uint,uint,long)+19p
UNDEF:00009EA8                                         ; DATA XREF: ...
UNDEF:00009EAC ; LONG __stdcall SetWindowLongW(HWND hWnd, int nIndex, LONG dwNewLong)
UNDEF:00009EAC                 extrn __imp__SetWindowLongW@12:near
UNDEF:00009EAC                                         ; CODE XREF: DockingCont::createToolbar(tTbData)+38p
UNDEF:00009EAC                                         ; DockingCont::createToolbar(tTbData)+48p ...
UNDEF:00009EB0 ; HWND __stdcall SetParent(HWND hWndChild, HWND hWndNewParent)
UNDEF:00009EB0                 extrn __imp__SetParent@8:near
UNDEF:00009EB0                                         ; CODE XREF: DockingCont::createToolbar(tTbData)+A0p
UNDEF:00009EB0                                         ; DATA XREF: DockingCont::createToolbar(tTbData)+A0r
UNDEF:00009EB4 ; HHOOK __stdcall SetWindowsHookExW(int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId)
UNDEF:00009EB4                 extrn __imp__SetWindowsHookExW@16:near
UNDEF:00009EB4                                         ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+164p
UNDEF:00009EB4                                         ; DATA XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+164r
UNDEF:00009EB8 ; BOOL __stdcall UnhookWindowsHookEx(HHOOK hhk)
UNDEF:00009EB8                 extrn __imp__UnhookWindowsHookEx@4:near
UNDEF:00009EB8                                         ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+1FAp
UNDEF:00009EB8                                         ; DATA XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+1FAr
UNDEF:00009EBC ; LRESULT __stdcall CallNextHookEx(HHOOK hhk, int nCode, WPARAM wParam, LPARAM lParam)
UNDEF:00009EBC                 extrn __imp__CallNextHookEx@16:near
UNDEF:00009EBC                                         ; CODE XREF: hookProcMouse(uint,uint,long)+1Cp
UNDEF:00009EBC                                         ; hookProcMouse(uint,uint,long)+9Ap
UNDEF:00009EBC                                         ; DATA XREF: ...
UNDEF:00009EC0 ; HBITMAP __stdcall LoadBitmapW(HINSTANCE hInstance, LPCWSTR lpBitmapName)
UNDEF:00009EC0                 extrn __imp__LoadBitmapW@8:near
UNDEF:00009EC0                                         ; CODE XREF: DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+446p
UNDEF:00009EC0                                         ; DockingCont::drawCaptionItem(tagDRAWITEMSTRUCT *)+45Dp
UNDEF:00009EC0                                         ; DATA XREF: ...
UNDEF:00009EC4 ; _DWORD __thiscall std::_Lockit::_Lockit(std::_Lockit *__hidden this, int)
UNDEF:00009EC4                 extrn ??0_Lockit@std@@QAE@H@Z:near
UNDEF:00009EC4                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+2Dp
UNDEF:00009EC4                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+55p ...
UNDEF:00009EC8 ; _DWORD __thiscall std::_Lockit::~_Lockit(std::_Lockit *__hidden this)
UNDEF:00009EC8                 extrn ??1_Lockit@std@@QAE@XZ:near
UNDEF:00009EC8                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+4Bp
UNDEF:00009EC8                                         ; __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0+3j ...
UNDEF:00009ECC                 extrn __hypot:near      ; CODE XREF: _hypot+1Dp
UNDEF:00009ED0                 extrn __CrtDbgReportW:near
UNDEF:00009ED0                                         ; CODE XREF: std::vector<tTbData *,std::allocator<tTbData *>>::operator[](uint)+50p
UNDEF:00009ED0                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tTbData *>>>::operator+=(int)+82p
UNDEF:00009ED4 ; void __cdecl std::_Debug_message(const wchar_t *, const wchar_t *, unsigned int)
UNDEF:00009ED4                 extrn ?_Debug_message@std@@YAXPB_W0I@Z:near
UNDEF:00009ED4                                         ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+16p
UNDEF:00009ED4                                         ; std::_Debug_pointer<tTbData *>(tTbData * *,wchar_t const *,uint)+16p ...
UNDEF:00009ED8 ; void __cdecl std::_Xbad_alloc()
UNDEF:00009ED8                 extrn ?_Xbad_alloc@std@@YAXXZ:near
UNDEF:00009ED8                                         ; CODE XREF: std::_Allocate<char>(uint,char *):loc_34C6p
UNDEF:00009ED8                                         ; std::_Allocate<tTbData *>(uint,tTbData * *):loc_3508p ...
UNDEF:00009EDC ; void __cdecl std::_Xlength_error(const char *)
UNDEF:00009EDC                 extrn ?_Xlength_error@std@@YAXPBD@Z:near
UNDEF:00009EDC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+Cp
UNDEF:00009EDC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+Cp ...
UNDEF:00009EE0 ; void __cdecl std::_Xout_of_range(const char *)
UNDEF:00009EE0                 extrn ?_Xout_of_range@std@@YAXPBD@Z:near
UNDEF:00009EE0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+Cp
UNDEF:00009EE0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+Cp
UNDEF:00009EE4 ; public: virtual void * __thiscall Window::`vector deleting destructor'(unsigned int)
UNDEF:00009EE4                 extrn ??_EWindow@@UAEPAXI@Z:near ; weak
UNDEF:00009EE4                                         ; DATA XREF: .rdata:const Window::`vftable'o
UNDEF:00009EE8 ; public: virtual void __thiscall StaticDialog::create(int, bool, bool)
UNDEF:00009EE8                 extrn ?create@StaticDialog@@UAEXH_N0@Z:near
UNDEF:00009EE8                                         ; DATA XREF: .rdata:000092F0o
UNDEF:00009EE8                                         ; .rdata:000093FCo
UNDEF:00009EEC ; public: virtual void __thiscall StaticDialog::display(bool)const
UNDEF:00009EEC                 extrn ?display@StaticDialog@@UBEX_N@Z:near
UNDEF:00009EEC                                         ; DATA XREF: .rdata:000092CCo
UNDEF:00009EEC                                         ; .rdata:000093D8o
UNDEF:00009EF0 ; public: virtual void * __thiscall StaticDialog::`vector deleting destructor'(unsigned int)
UNDEF:00009EF0                 extrn ??_EStaticDialog@@UAEPAXI@Z:near ; weak
UNDEF:00009EF0                                         ; DATA XREF: .rdata:const StaticDialog::`vftable'o
UNDEF:00009EF4 ; public: virtual void * __thiscall std::error_category::`vector deleting destructor'(unsigned int)
UNDEF:00009EF4                 extrn ??_Eerror_category@std@@UAEPAXI@Z:near ; weak
UNDEF:00009EF4                                         ; DATA XREF: .rdata:const std::error_category::`vftable'o
UNDEF:00009EF8 ; const char *__cdecl std::_Syserror_map(int)
UNDEF:00009EF8                 extrn ?_Syserror_map@std@@YAPBDH@Z:near
UNDEF:00009EF8                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+Bp
UNDEF:00009EF8                                         ; std::_Generic_error_category::message(int)+33p
UNDEF:00009EFC ; const char *__cdecl std::_Winerror_map(int)
UNDEF:00009EFC                 extrn ?_Winerror_map@std@@YAPBDH@Z:near
UNDEF:00009EFC                                         ; CODE XREF: std::_System_error_category::message(int)+33p
UNDEF:00009F00 ; public: virtual void * __thiscall std::_Generic_error_category::`vector deleting destructor'(unsigned int)
UNDEF:00009F00                 extrn ??_E_Generic_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:00009F00                                         ; DATA XREF: .rdata:const std::_Generic_error_category::`vftable'o
UNDEF:00009F04 ; public: virtual void * __thiscall std::_Iostream_error_category::`vector deleting destructor'(unsigned int)
UNDEF:00009F04                 extrn ??_E_Iostream_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:00009F04                                         ; DATA XREF: .rdata:const std::_Iostream_error_category::`vftable'o
UNDEF:00009F08 ; public: virtual void * __thiscall std::_System_error_category::`vector deleting destructor'(unsigned int)
UNDEF:00009F08                 extrn ??_E_System_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:00009F08                                         ; DATA XREF: .rdata:const std::_System_error_category::`vftable'o
UNDEF:00009F0C ; void __cdecl ClientRectToScreenRect(HWND, struct tagRECT *)
UNDEF:00009F0C                 extrn ?ClientRectToScreenRect@@YAXPAUHWND__@@PAUtagRECT@@@Z:near
UNDEF:00009F0C                                         ; CODE XREF: DockingCont::run_dlgProc(uint,uint,long)+216p
UNDEF:00009F10 ; void __cdecl ScreenRectToClientRect(HWND, struct tagRECT *)
UNDEF:00009F10                 extrn ?ScreenRectToClientRect@@YAXPAUHWND__@@PAUtagRECT@@@Z:near
UNDEF:00009F10                                         ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+645p
UNDEF:00009F10                                         ; DockingCont::isInRect(HWND__ *,int,int)+30p
UNDEF:00009F14 ; public: virtual void * __thiscall DockingCont::`vector deleting destructor'(unsigned int)
UNDEF:00009F14                 extrn ??_EDockingCont@@UAEPAXI@Z:near ; weak
UNDEF:00009F14                                         ; DATA XREF: .rdata:const DockingCont::`vftable'o
UNDEF:00009F18 ; BOOL __stdcall ImageList_Draw(HIMAGELIST himl, int i, HDC hdcDst, int x, int y, UINT fStyle)
UNDEF:00009F18                 extrn __imp__ImageList_Draw@24:near
UNDEF:00009F18                                         ; CODE XREF: DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+254p
UNDEF:00009F18                                         ; DATA XREF: DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+254r
UNDEF:00009F1C ; BOOL __stdcall ImageList_GetImageInfo(HIMAGELIST himl, int i, IMAGEINFO *pImageInfo)
UNDEF:00009F1C                 extrn __imp__ImageList_GetImageInfo@12:near
UNDEF:00009F1C                                         ; CODE XREF: DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+21Bp
UNDEF:00009F1C                                         ; DATA XREF: DockingCont::drawTabItem(tagDRAWITEMSTRUCT *)+21Br
UNDEF:00009F20 ; BOOL __stdcall _TrackMouseEvent(LPTRACKMOUSEEVENT lpEventTrack)
UNDEF:00009F20                 extrn __imp___TrackMouseEvent@4:near
UNDEF:00009F20                                         ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+478p
UNDEF:00009F20                                         ; DockingCont::runProcTab(HWND__ *,uint,uint,long)+361p
UNDEF:00009F20                                         ; DATA XREF: ...
UNDEF:00009F24 ; void __thiscall ToolTip::init(ToolTip *__hidden this, HINSTANCE, HWND)
UNDEF:00009F24                 extrn ?init@ToolTip@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z:near
UNDEF:00009F24                                         ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+548p
UNDEF:00009F24                                         ; DockingCont::runProcTab(HWND__ *,uint,uint,long)+44Cp ...
UNDEF:00009F28 ; void __thiscall ToolTip::Show(ToolTip *__hidden this, struct tagRECT, const wchar_t *, int, int)
UNDEF:00009F28                 extrn ?Show@ToolTip@@QAEXUtagRECT@@PB_WHH@Z:near
UNDEF:00009F28                                         ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+5A9p
UNDEF:00009F28                                         ; DockingCont::runProcCaption(HWND__ *,uint,uint,long)+5F3p ...
UNDEF:00009F2C ; public: virtual void * __thiscall ToolTip::`vector deleting destructor'(unsigned int)
UNDEF:00009F2C                 extrn ??_EToolTip@@UAEPAXI@Z:near ; weak
UNDEF:00009F2C                                         ; DATA XREF: .rdata:const ToolTip::`vftable'o
UNDEF:00009F30 ; __fastcall __security_check_cookie(x)
UNDEF:00009F30                 extrn @__security_check_cookie@4:near
UNDEF:00009F30                                         ; CODE XREF: DockingCont::runProcCaption(HWND__ *,uint,uint,long)+696p
UNDEF:00009F30                                         ; DockingCont::runProcTab(HWND__ *,uint,uint,long)+6BEp ...
UNDEF:00009F34 ; __stdcall _CxxThrowException(x, x)
UNDEF:00009F34                 extrn __CxxThrowException@8:near
UNDEF:00009F34                                         ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1+10p
UNDEF:00009F34                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1+10p ...
UNDEF:00009F38                 extrn ___CxxFrameHandler3:near
UNDEF:00009F38                                         ; CODE XREF: __ehhandler$??0DockingCont@@QAE@XZ+16j
UNDEF:00009F38                                         ; __ehhandler$??1DockingCont@@UAE@XZ+16j ...
UNDEF:00009F3C ; const type_info::`vftable'
UNDEF:00009F3C                 extrn ??_7type_info@@6B@:near
UNDEF:00009F3C                                         ; DATA XREF: .data$r:Window `RTTI Type Descriptor'o
UNDEF:00009F3C                                         ; .data$r:StaticDialog `RTTI Type Descriptor'o ...
UNDEF:00009F40 ; private: static class NppParameters * NppParameters::_pSelf
UNDEF:00009F40                 extrn ?_pSelf@NppParameters@@0PAV1@A:near
UNDEF:00009F40                                         ; DATA XREF: NppParameters::getInstance(void)+3r
UNDEF:00009F44                 extrn ___security_cookie:near
UNDEF:00009F44                                         ; DATA XREF: DockingCont::DockingCont(void)+12r
UNDEF:00009F44                                         ; DockingCont::~DockingCont(void)+12r ...
UNDEF:00009F48                 extrn __fltused:near
UNDEF:00009F48
UNDEF:00009F48
UNDEF:00009F48                 end