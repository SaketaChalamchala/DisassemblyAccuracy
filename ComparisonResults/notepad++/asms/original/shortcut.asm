; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\src\WinControls\shortcut\shortcut.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?namedKeyArray@@3PAUKeyIDNAME@@A		; namedKeyArray
CONST	SEGMENT
$SG143414 DB	'12 12 56 1', 00H
	ORG $+1
$SG143415 DB	' ', 09H, 'c #FFFFFF', 00H
$SG143416 DB	'.', 09H, 'c #8AB2E9', 00H
$SG143417 DB	'+', 09H, 'c #CCDCF6', 00H
$SG143418 DB	'@', 09H, 'c #80ABEA', 00H
$SG143419 DB	'#', 09H, 'c #7DA9E8', 00H
$SG143420 DB	'$', 09H, 'c #C7DAF3', 00H
$SG143421 DB	'%', 09H, 'c #79A7E6', 00H
$SG143422 DB	'&', 09H, 'c #ADC8EF', 00H
$SG143423 DB	'*', 09H, 'c #87B0E8', 00H
$SG143424 DB	'=', 09H, 'c #BBD2F0', 00H
$SG143425 DB	'-', 09H, 'c #6EA0E2', 00H
$SG143426 DB	';', 09H, 'c #A8C7EE', 00H
$SG143427 DB	'>', 09H, 'c #A3C2ED', 00H
$SG143428 DB	',', 09H, 'c #75A4E3', 00H
$SG143429 DB	'''', 09H, 'c #A7C4EB', 00H
$SG143430 DB	')', 09H, 'c #6297E1', 00H
$SG143431 DB	'!', 09H, 'c #A1C1EC', 00H
$SG143432 DB	'~', 09H, 'c #92B7E8', 00H
$SG143433 DB	'{', 09H, 'c #99BBE9', 00H
$SG143434 DB	']', 09H, 'c #6197DD', 00H
$SG143435 DB	'^', 09H, 'c #96B9E6', 00H
$SG143436 DB	'/', 09H, 'c #538EDB', 00H
$SG143437 DB	'(', 09H, 'c #99BBEA', 00H
$SG143438 DB	'_', 09H, 'c #80AAE3', 00H
$SG143439 DB	':', 09H, 'c #81ABE3', 00H
$SG143440 DB	'<', 09H, 'c #8AB1E4', 00H
$SG143441 DB	'[', 09H, 'c #4B88D6', 00H
$SG143442 DB	'}', 09H, 'c #4882D1', 00H
$SG143443 DB	'|', 09H, 'c #4384D6', 00H
$SG143444 DB	'1', 09H, 'c #90B5E7', 00H
$SG143445 DB	'2', 09H, 'c #74A3E0', 00H
$SG143446 DB	'3', 09H, 'c #77A4E0', 00H
$SG143447 DB	'4', 09H, 'c #81ABE2', 00H
$SG143448 DB	'5', 09H, 'c #437FD3', 00H
$SG143449 DB	'6', 09H, 'c #7FA2DF', 00H
$SG143450 DB	'7', 09H, 'c #3577D2', 00H
$SG143451 DB	'8', 09H, 'c #87AFE4', 00H
$SG143452 DB	'9', 09H, 'c #72A1DF', 00H
$SG143453 DB	'0', 09H, 'c #7CA9E1', 00H
$SG143454 DB	'a', 09H, 'c #3F7AD0', 00H
$SG143455 DB	'b', 09H, 'c #85A4DE', 00H
$SG143456 DB	'c', 09H, 'c #FBFCFE', 00H
$SG143457 DB	'd', 09H, 'c #236ECD', 00H
$SG143458 DB	'e', 09H, 'c #7EA8E1', 00H
$SG143459 DB	'f', 09H, 'c #79A6E0', 00H
$SG143460 DB	'g', 09H, 'c #3D77D0', 00H
$SG143461 DB	'h', 09H, 'c #87A4DC', 00H
$SG143462 DB	'i', 09H, 'c #1A62C9', 00H
$SG143463 DB	'j', 09H, 'c #75A3DF', 00H
$SG143464 DB	'k', 09H, 'c #3C74CF', 00H
$SG143465 DB	'l', 09H, 'c #8DA6DE', 00H
$SG143466 DB	'm', 09H, 'c #1859C4', 00H
$SG143467 DB	'n', 09H, 'c #3B71CC', 00H
$SG143468 DB	'o', 09H, 'c #8EA5DD', 00H
$SG143469 DB	'p', 09H, 'c #164EC0', 00H
$SG143470 DB	'q', 09H, 'c #92A7DD', 00H
$SG143471 DB	'    .+      ', 00H
	ORG $+3
$SG143472 DB	'    @#$     ', 00H
	ORG $+3
$SG143473 DB	'    %&*=    ', 00H
	ORG $+3
$SG143474 DB	'    -;>,''   ', 00H
	ORG $+3
$SG143475 DB	'    )!~{]^  ', 00H
	ORG $+3
$SG143476 DB	'    /(_:<[} ', 00H
	ORG $+3
$SG143477 DB	'    |123456 ', 00H
	ORG $+3
$SG143478 DB	'    7890abc ', 00H
	ORG $+3
$SG143479 DB	'    defgh   ', 00H
	ORG $+3
$SG143480 DB	'    ijkl    ', 00H
	ORG $+3
$SG143481 DB	'    mno     ', 00H
	ORG $+3
$SG143482 DB	'    pq      ', 00H
	ORG $+3
$SG143484 DB	'12 12 54 1', 00H
	ORG $+1
$SG143485 DB	' ', 09H, 'c #FFFFFF', 00H
$SG143486 DB	'.', 09H, 'c #C4D7F3', 00H
$SG143487 DB	'+', 09H, 'c #72A1E3', 00H
$SG143488 DB	'@', 09H, 'c #C1D6F2', 00H
$SG143489 DB	'#', 09H, 'c #6397E1', 00H
$SG143490 DB	'$', 09H, 'c #5990DD', 00H
$SG143491 DB	'%', 09H, 'c #BBD2F0', 00H
$SG143492 DB	'&', 09H, 'c #7AA6E5', 00H
$SG143493 DB	'*', 09H, 'c #9ABDEA', 00H
$SG143494 DB	'=', 09H, 'c #4A87D9', 00H
$SG143495 DB	'-', 09H, 'c #B1CAEE', 00H
$SG143496 DB	';', 09H, 'c #75A4E3', 00H
$SG143497 DB	'>', 09H, 'c #99BBE9', 00H
$SG143498 DB	',', 09H, 'c #95B9E8', 00H
$SG143499 DB	'''', 09H, 'c #3A7CD4', 00H
$SG143500 DB	')', 09H, 'c #A9C6EC', 00H
$SG143501 DB	'!', 09H, 'c #71A0E0', 00H
$SG143502 DB	'~', 09H, 'c #86AFE5', 00H
$SG143503 DB	'{', 09H, 'c #8DB2E6', 00H
$SG143504 DB	']', 09H, 'c #2A72CF', 00H
$SG143505 DB	'^', 09H, 'c #73A0E0', 00H
$SG143506 DB	'/', 09H, 'c #6B9DE0', 00H
$SG143507 DB	'(', 09H, 'c #95B8E8', 00H
$SG143508 DB	'_', 09H, 'c #81ABE3', 00H
$SG143509 DB	':', 09H, 'c #72A1DF', 00H
$SG143510 DB	'<', 09H, 'c #83ADE3', 00H
$SG143511 DB	'[', 09H, 'c #1B65C9', 00H
$SG143512 DB	'}', 09H, 'c #5F95DC', 00H
$SG143513 DB	'|', 09H, 'c #8BB3E5', 00H
$SG143514 DB	'1', 09H, 'c #77A4E0', 00H
$SG143515 DB	'2', 09H, 'c #679ADC', 00H
$SG143516 DB	'3', 09H, 'c #7AA6E1', 00H
$SG143517 DB	'4', 09H, 'c #195CC6', 00H
$SG143518 DB	'5', 09H, 'c #FCFDFE', 00H
$SG143519 DB	'6', 09H, 'c #8DB2E4', 00H
$SG143520 DB	'7', 09H, 'c #4885D6', 00H
$SG143521 DB	'8', 09H, 'c #7CA9E1', 00H
$SG143522 DB	'9', 09H, 'c #6698DB', 00H
$SG143523 DB	'0', 09H, 'c #71A1DE', 00H
$SG143524 DB	'a', 09H, 'c #1752C0', 00H
$SG143525 DB	'b', 09H, 'c #88ABE0', 00H
$SG143526 DB	'c', 09H, 'c #3D77D0', 00H
$SG143527 DB	'd', 09H, 'c #6E9FDD', 00H
$SG143528 DB	'e', 09H, 'c #699BDC', 00H
$SG143529 DB	'f', 09H, 'c #1547BD', 00H
$SG143530 DB	'g', 09H, 'c #8DA6DE', 00H
$SG143531 DB	'h', 09H, 'c #376BC9', 00H
$SG143532 DB	'i', 09H, 'c #6295DA', 00H
$SG143533 DB	'j', 09H, 'c #1440B9', 00H
$SG143534 DB	'k', 09H, 'c #8DA0DB', 00H
$SG143535 DB	'l', 09H, 'c #315FC4', 00H
$SG143536 DB	'm', 09H, 'c #1339B7', 00H
$SG143537 DB	'n', 09H, 'c #909FDA', 00H
$SG143538 DB	'o', 09H, 'c #1233B4', 00H
$SG143539 DB	'         .+ ', 00H
	ORG $+3
$SG143540 DB	'        @#$ ', 00H
	ORG $+3
$SG143541 DB	'       %&*= L', 00H
	ORG $+2
$SG143542 DB	'      -;>,'' ', 00H
	ORG $+3
$SG143543 DB	'     )!>~{] ', 00H
	ORG $+3
$SG143544 DB	'    ^/(_:<[ ', 00H
	ORG $+3
$SG143545 DB	'    (}|1234 ', 00H
	ORG $+3
$SG143546 DB	'    567890a ', 00H
	ORG $+3
$SG143547 DB	'      bcdef ', 00H
	ORG $+3
$SG143548 DB	'       ghij ', 00H
	ORG $+3
$SG143549 DB	'        klm ', 00H
	ORG $+3
$SG143550 DB	'         no ', 00H
	ORG $+3
$SG143552 DB	'13 14 54 1', 00H
	ORG $+1
$SG143553 DB	' ', 09H, 'c None', 00H
	ORG $+3
$SG143554 DB	'.', 09H, 'c #545254', 00H
$SG143555 DB	'+', 09H, 'c #3C3E3C', 00H
$SG143556 DB	'@', 09H, 'c #646464', 00H
$SG143557 DB	'#', 09H, 'c #A4A4A4', 00H
$SG143558 DB	'$', 09H, 'c #B7B8B7', 00H
$SG143559 DB	'%', 09H, 'c #747284', 00H
$SG143560 DB	'&', 09H, 'c #B4B2C4', 00H
$SG143561 DB	'*', 09H, 'c #DCD7E4', 00H
$SG143562 DB	'=', 09H, 'c #1C1A1C', 00H
$SG143563 DB	'-', 09H, 'c #403E58', 00H
$SG143564 DB	';', 09H, 'c #5C5A8C', 00H
$SG143565 DB	'>', 09H, 'c #7C7EAC', 00H
$SG143566 DB	',', 09H, 'c #7C8EBC', 00H
$SG143567 DB	'''', 09H, 'c #242644', 00H
$SG143568 DB	')', 09H, 'c #282668', 00H
$SG143569 DB	'!', 09H, 'c #24367C', 00H
$SG143570 DB	'~', 09H, 'c #244A84', 00H
$SG143571 DB	'{', 09H, 'c #2C5098', 00H
$SG143572 DB	']', 09H, 'c #14162C', 00H
$SG143573 DB	'^', 09H, 'c #142E7C', 00H
$SG143574 DB	'/', 09H, 'c #143789', 00H
$SG143575 DB	'(', 09H, 'c #204990', 00H
$SG143576 DB	'_', 09H, 'c #174091', 00H
$SG143577 DB	':', 09H, 'c #0C0630', 00H
$SG143578 DB	'<', 09H, 'c #24327C', 00H
$SG143579 DB	'[', 09H, 'c #2450A0', 00H
$SG143580 DB	'}', 09H, 'c #345DB4', 00H
$SG143581 DB	'|', 09H, 'c #3C68B8', 00H
$SG143582 DB	'1', 09H, 'c #141244', 00H
$SG169183 DB	'N', 00H, 'o', 00H, 'n', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG143583 DB	'2', 09H, 'c #24428C', 00H
$SG169184 DB	'B', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 's', 00H, 'p', 00H
	DB	'a', 00H, 'c', 00H, 'e', 00H, 00H, 00H
$SG143584 DB	'3', 09H, 'c #3462B9', 00H
$SG169185 DB	'T', 00H, 'a', 00H, 'b', 00H, 00H, 00H
$SG143585 DB	'4', 09H, 'c #4470C4', 00H
$SG169186 DB	'E', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 00H, 00H
$SG143586 DB	'5', 09H, 'c #4C7FD6', 00H
$SG169187 DB	'E', 00H, 's', 00H, 'c', 00H, 00H, 00H
$SG143587 DB	'6', 09H, 'c #4472CC', 00H
$SG169188 DB	'S', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'e', 00H, 'b', 00H
	DB	'a', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG143588 DB	'7', 09H, 'c #24224C', 00H
$SG169189 DB	'P', 00H, 'a', 00H, 'g', 00H, 'e', 00H, ' ', 00H, 'u', 00H
	DB	'p', 00H, 00H, 00H
$SG143589 DB	'8', 09H, 'c #5C8DEC', 00H
$SG169190 DB	'P', 00H, 'a', 00H, 'g', 00H, 'e', 00H, ' ', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, 'n', 00H, 00H, 00H
$SG143590 DB	'9', 09H, 'c #5C94F6', 00H
$SG169191 DB	'E', 00H, 'n', 00H, 'd', 00H, 00H, 00H
$SG143591 DB	'0', 09H, 'c #5482DF', 00H
$SG169192 DB	'H', 00H, 'o', 00H, 'm', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG143592 DB	'a', 09H, 'c #619DF7', 00H
$SG169193 DB	'L', 00H, 'e', 00H, 'f', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG143593 DB	'b', 09H, 'c #6CA6FC', 00H
$SG169194 DB	'U', 00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG143594 DB	'c', 09H, 'c #64A2FC', 00H
$SG169195 DB	'R', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 00H, 00H
$SG143595 DB	'd', 09H, 'c #1C2E5C', 00H
$SG169196 DB	'D', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG143596 DB	'e', 09H, 'c #6CA2FC', 00H
$SG169197 DB	'I', 00H, 'N', 00H, 'S', 00H, 00H, 00H
$SG143597 DB	'f', 09H, 'c #74B2FC', 00H
$SG169198 DB	'D', 00H, 'E', 00H, 'L', 00H, 00H, 00H
$SG143598 DB	'g', 09H, 'c #7CB8FC', 00H
$SG169199 DB	'0', 00H, 00H, 00H
$SG143599 DB	'h', 09H, 'c #1C3264', 00H
$SG169200 DB	'1', 00H, 00H, 00H
$SG143600 DB	'i', 09H, 'c #346AD4', 00H
$SG169201 DB	'2', 00H, 00H, 00H
$SG143601 DB	'j', 09H, 'c #7CBEFC', 00H
$SG169202 DB	'3', 00H, 00H, 00H
$SG143602 DB	'k', 09H, 'c #3C72DC', 00H
$SG169203 DB	'4', 00H, 00H, 00H
$SG143603 DB	'l', 09H, 'c #243250', 00H
$SG169204 DB	'5', 00H, 00H, 00H
$SG143604 DB	'm', 09H, 'c #346AB4', 00H
$SG169205 DB	'6', 00H, 00H, 00H
$SG143605 DB	'n', 09H, 'c #3C82DC', 00H
$SG169206 DB	'7', 00H, 00H, 00H
$SG143606 DB	'o', 09H, 'c #6C6A6C', 00H
$SG169207 DB	'8', 00H, 00H, 00H
$SG143607 DB	'     .+.     ', 00H
	ORG $+2
$SG169208 DB	'9', 00H, 00H, 00H
$SG143608 DB	'   @##$##@   ', 00H
	ORG $+2
$SG169209 DB	'A', 00H, 00H, 00H
$SG143609 DB	'  @%&***&%@  ', 00H
	ORG $+2
$SG169210 DB	'B', 00H, 00H, 00H
$SG143610 DB	' =-;>,,,>;-= ', 00H
	ORG $+2
$SG169211 DB	'C', 00H, 00H, 00H
$SG143611 DB	' '')!~{{{~!)'' ', 00H
	ORG $+2
$SG169212 DB	'D', 00H, 00H, 00H
$SG143612 DB	'])^/({{{(_^)]', 00H
	ORG $+2
$SG169213 DB	'E', 00H, 00H, 00H
$SG143613 DB	':<_[}|||}[_<:', 00H
	ORG $+2
$SG169214 DB	'F', 00H, 00H, 00H
$SG143614 DB	'12[3455563[21', 00H
	ORG $+2
$SG169215 DB	'G', 00H, 00H, 00H
$SG143615 DB	'7_365899063_7', 00H
	ORG $+2
$SG169216 DB	'H', 00H, 00H, 00H
$SG143616 DB	' /|09abc904/ ', 00H
	ORG $+2
$SG169217 DB	'I', 00H, 00H, 00H
$SG143617 DB	' d}8efgfb83d ', 00H
	ORG $+2
$SG169218 DB	'J', 00H, 00H, 00H
$SG143618 DB	'  hiafjgakh  ', 00H
	ORG $+2
$SG169219 DB	'K', 00H, 00H, 00H
$SG143619 DB	'   l~mnm~l   ', 00H
	ORG $+2
$SG169220 DB	'L', 00H, 00H, 00H
$SG143620 DB	'     o@o     ', 00H
	ORG $+2
$SG169221 DB	'M', 00H, 00H, 00H
$SG169222 DB	'N', 00H, 00H, 00H
$SG169223 DB	'O', 00H, 00H, 00H
$SG169224 DB	'P', 00H, 00H, 00H
$SG169225 DB	'Q', 00H, 00H, 00H
$SG169226 DB	'R', 00H, 00H, 00H
$SG169227 DB	'S', 00H, 00H, 00H
$SG169228 DB	'T', 00H, 00H, 00H
$SG169229 DB	'U', 00H, 00H, 00H
$SG169230 DB	'V', 00H, 00H, 00H
$SG169231 DB	'W', 00H, 00H, 00H
$SG169232 DB	'X', 00H, 00H, 00H
$SG169233 DB	'Y', 00H, 00H, 00H
$SG169234 DB	'Z', 00H, 00H, 00H
$SG169235 DB	'N', 00H, 'u', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG169236 DB	'N', 00H, 'u', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, '1', 00H, 00H, 00H
	ORG $+2
$SG169237 DB	'N', 00H, 'u', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, '2', 00H, 00H, 00H
	ORG $+2
$SG169238 DB	'N', 00H, 'u', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, '3', 00H, 00H, 00H
	ORG $+2
$SG169239 DB	'N', 00H, 'u', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG169240 DB	'N', 00H, 'u', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, '5', 00H, 00H, 00H
	ORG $+2
$SG169241 DB	'N', 00H, 'u', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, '6', 00H, 00H, 00H
	ORG $+2
$SG169242 DB	'N', 00H, 'u', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, '7', 00H, 00H, 00H
	ORG $+2
$SG169243 DB	'N', 00H, 'u', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, '8', 00H, 00H, 00H
	ORG $+2
$SG169244 DB	'N', 00H, 'u', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, '9', 00H, 00H, 00H
	ORG $+2
$SG169245 DB	'N', 00H, 'u', 00H, 'm', 00H, ' ', 00H, '*', 00H, 00H, 00H
$SG169246 DB	'N', 00H, 'u', 00H, 'm', 00H, ' ', 00H, '+', 00H, 00H, 00H
$SG169247 DB	'N', 00H, 'u', 00H, 'm', 00H, ' ', 00H, '-', 00H, 00H, 00H
$SG169248 DB	'N', 00H, 'u', 00H, 'm', 00H, ' ', 00H, '.', 00H, 00H, 00H
$SG169249 DB	'N', 00H, 'u', 00H, 'm', 00H, ' ', 00H, '/', 00H, 00H, 00H
$SG169250 DB	'F', 00H, '1', 00H, 00H, 00H
	ORG $+2
$SG169251 DB	'F', 00H, '2', 00H, 00H, 00H
	ORG $+2
$SG169252 DB	'F', 00H, '3', 00H, 00H, 00H
	ORG $+2
$SG169253 DB	'F', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG169254 DB	'F', 00H, '5', 00H, 00H, 00H
	ORG $+2
$SG169255 DB	'F', 00H, '6', 00H, 00H, 00H
	ORG $+2
$SG169256 DB	'F', 00H, '7', 00H, 00H, 00H
	ORG $+2
$SG169257 DB	'F', 00H, '8', 00H, 00H, 00H
	ORG $+2
$SG169258 DB	'F', 00H, '9', 00H, 00H, 00H
	ORG $+2
$SG169259 DB	'F', 00H, '1', 00H, '0', 00H, 00H, 00H
$SG169260 DB	'F', 00H, '1', 00H, '1', 00H, 00H, 00H
$SG169261 DB	'F', 00H, '1', 00H, '2', 00H, 00H, 00H
$SG169262 DB	'~', 00H, 00H, 00H
$SG169263 DB	'-', 00H, 00H, 00H
$SG169264 DB	'=', 00H, 00H, 00H
$SG169265 DB	'[', 00H, 00H, 00H
$SG169266 DB	']', 00H, 00H, 00H
$SG169267 DB	';', 00H, 00H, 00H
$SG169268 DB	'''', 00H, 00H, 00H
$SG169269 DB	'\', 00H, 00H, 00H
$SG169270 DB	',', 00H, 00H, 00H
$SG169271 DB	'.', 00H, 00H, 00H
$SG169272 DB	'/', 00H, 00H, 00H
$SG169273 DB	'<', 00H, '>', 00H, 00H, 00H
	ORG $+2
$SG169279 DB	00H, 00H
	ORG $+2
$SG169282 DB	'C', 00H, 't', 00H, 'r', 00H, 'l', 00H, '+', 00H, 00H, 00H
$SG169284 DB	'A', 00H, 'l', 00H, 't', 00H, '+', 00H, 00H, 00H
	ORG $+2
$SG169286 DB	'S', 00H, 'h', 00H, 'i', 00H, 'f', 00H, 't', 00H, '+', 00H
	DB	00H, 00H
	ORG $+2
$SG169311 DB	00H, 00H
	ORG $+2
$SG169315 DB	'C', 00H, 't', 00H, 'r', 00H, 'l', 00H, '+', 00H, 00H, 00H
$SG169317 DB	'A', 00H, 'l', 00H, 't', 00H, '+', 00H, 00H, 00H
	ORG $+2
$SG169319 DB	'S', 00H, 'h', 00H, 'i', 00H, 'f', 00H, 't', 00H, '+', 00H
	DB	00H, 00H
	ORG $+2
$SG169367 DB	00H, 00H
	ORG $+2
$SG169377 DB	'U', 00H, 'n', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H
	DB	'e', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG170805 DB	09H, 00H, 00H, 00H
CONST	ENDS
_DATA	SEGMENT
_acTop_xpm DD	FLAT:$SG143414
	DD	FLAT:$SG143415
	DD	FLAT:$SG143416
	DD	FLAT:$SG143417
	DD	FLAT:$SG143418
	DD	FLAT:$SG143419
	DD	FLAT:$SG143420
	DD	FLAT:$SG143421
	DD	FLAT:$SG143422
	DD	FLAT:$SG143423
	DD	FLAT:$SG143424
	DD	FLAT:$SG143425
	DD	FLAT:$SG143426
	DD	FLAT:$SG143427
	DD	FLAT:$SG143428
	DD	FLAT:$SG143429
	DD	FLAT:$SG143430
	DD	FLAT:$SG143431
	DD	FLAT:$SG143432
	DD	FLAT:$SG143433
	DD	FLAT:$SG143434
	DD	FLAT:$SG143435
	DD	FLAT:$SG143436
	DD	FLAT:$SG143437
	DD	FLAT:$SG143438
	DD	FLAT:$SG143439
	DD	FLAT:$SG143440
	DD	FLAT:$SG143441
	DD	FLAT:$SG143442
	DD	FLAT:$SG143443
	DD	FLAT:$SG143444
	DD	FLAT:$SG143445
	DD	FLAT:$SG143446
	DD	FLAT:$SG143447
	DD	FLAT:$SG143448
	DD	FLAT:$SG143449
	DD	FLAT:$SG143450
	DD	FLAT:$SG143451
	DD	FLAT:$SG143452
	DD	FLAT:$SG143453
	DD	FLAT:$SG143454
	DD	FLAT:$SG143455
	DD	FLAT:$SG143456
	DD	FLAT:$SG143457
	DD	FLAT:$SG143458
	DD	FLAT:$SG143459
	DD	FLAT:$SG143460
	DD	FLAT:$SG143461
	DD	FLAT:$SG143462
	DD	FLAT:$SG143463
	DD	FLAT:$SG143464
	DD	FLAT:$SG143465
	DD	FLAT:$SG143466
	DD	FLAT:$SG143467
	DD	FLAT:$SG143468
	DD	FLAT:$SG143469
	DD	FLAT:$SG143470
	DD	FLAT:$SG143471
	DD	FLAT:$SG143472
	DD	FLAT:$SG143473
	DD	FLAT:$SG143474
	DD	FLAT:$SG143475
	DD	FLAT:$SG143476
	DD	FLAT:$SG143477
	DD	FLAT:$SG143478
	DD	FLAT:$SG143479
	DD	FLAT:$SG143480
	DD	FLAT:$SG143481
	DD	FLAT:$SG143482
	ORG $+4
_acBottom_xpm DD FLAT:$SG143484
	DD	FLAT:$SG143485
	DD	FLAT:$SG143486
	DD	FLAT:$SG143487
	DD	FLAT:$SG143488
	DD	FLAT:$SG143489
	DD	FLAT:$SG143490
	DD	FLAT:$SG143491
	DD	FLAT:$SG143492
	DD	FLAT:$SG143493
	DD	FLAT:$SG143494
	DD	FLAT:$SG143495
	DD	FLAT:$SG143496
	DD	FLAT:$SG143497
	DD	FLAT:$SG143498
	DD	FLAT:$SG143499
	DD	FLAT:$SG143500
	DD	FLAT:$SG143501
	DD	FLAT:$SG143502
	DD	FLAT:$SG143503
	DD	FLAT:$SG143504
	DD	FLAT:$SG143505
	DD	FLAT:$SG143506
	DD	FLAT:$SG143507
	DD	FLAT:$SG143508
	DD	FLAT:$SG143509
	DD	FLAT:$SG143510
	DD	FLAT:$SG143511
	DD	FLAT:$SG143512
	DD	FLAT:$SG143513
	DD	FLAT:$SG143514
	DD	FLAT:$SG143515
	DD	FLAT:$SG143516
	DD	FLAT:$SG143517
	DD	FLAT:$SG143518
	DD	FLAT:$SG143519
	DD	FLAT:$SG143520
	DD	FLAT:$SG143521
	DD	FLAT:$SG143522
	DD	FLAT:$SG143523
	DD	FLAT:$SG143524
	DD	FLAT:$SG143525
	DD	FLAT:$SG143526
	DD	FLAT:$SG143527
	DD	FLAT:$SG143528
	DD	FLAT:$SG143529
	DD	FLAT:$SG143530
	DD	FLAT:$SG143531
	DD	FLAT:$SG143532
	DD	FLAT:$SG143533
	DD	FLAT:$SG143534
	DD	FLAT:$SG143535
	DD	FLAT:$SG143536
	DD	FLAT:$SG143537
	DD	FLAT:$SG143538
	DD	FLAT:$SG143539
	DD	FLAT:$SG143540
	DD	FLAT:$SG143541
	DD	FLAT:$SG143542
	DD	FLAT:$SG143543
	DD	FLAT:$SG143544
	DD	FLAT:$SG143545
	DD	FLAT:$SG143546
	DD	FLAT:$SG143547
	DD	FLAT:$SG143548
	DD	FLAT:$SG143549
	DD	FLAT:$SG143550
	ORG $+4
_bookmark_xpm DD FLAT:$SG143552
	DD	FLAT:$SG143553
	DD	FLAT:$SG143554
	DD	FLAT:$SG143555
	DD	FLAT:$SG143556
	DD	FLAT:$SG143557
	DD	FLAT:$SG143558
	DD	FLAT:$SG143559
	DD	FLAT:$SG143560
	DD	FLAT:$SG143561
	DD	FLAT:$SG143562
	DD	FLAT:$SG143563
	DD	FLAT:$SG143564
	DD	FLAT:$SG143565
	DD	FLAT:$SG143566
	DD	FLAT:$SG143567
	DD	FLAT:$SG143568
	DD	FLAT:$SG143569
	DD	FLAT:$SG143570
	DD	FLAT:$SG143571
	DD	FLAT:$SG143572
	DD	FLAT:$SG143573
	DD	FLAT:$SG143574
	DD	FLAT:$SG143575
	DD	FLAT:$SG143576
	DD	FLAT:$SG143577
	DD	FLAT:$SG143578
	DD	FLAT:$SG143579
	DD	FLAT:$SG143580
	DD	FLAT:$SG143581
	DD	FLAT:$SG143582
	DD	FLAT:$SG143583
	DD	FLAT:$SG143584
	DD	FLAT:$SG143585
	DD	FLAT:$SG143586
	DD	FLAT:$SG143587
	DD	FLAT:$SG143588
	DD	FLAT:$SG143589
	DD	FLAT:$SG143590
	DD	FLAT:$SG143591
	DD	FLAT:$SG143592
	DD	FLAT:$SG143593
	DD	FLAT:$SG143594
	DD	FLAT:$SG143595
	DD	FLAT:$SG143596
	DD	FLAT:$SG143597
	DD	FLAT:$SG143598
	DD	FLAT:$SG143599
	DD	FLAT:$SG143600
	DD	FLAT:$SG143601
	DD	FLAT:$SG143602
	DD	FLAT:$SG143603
	DD	FLAT:$SG143604
	DD	FLAT:$SG143605
	DD	FLAT:$SG143606
	DD	FLAT:$SG143607
	DD	FLAT:$SG143608
	DD	FLAT:$SG143609
	DD	FLAT:$SG143610
	DD	FLAT:$SG143611
	DD	FLAT:$SG143612
	DD	FLAT:$SG143613
	DD	FLAT:$SG143614
	DD	FLAT:$SG143615
	DD	FLAT:$SG143616
	DD	FLAT:$SG143617
	DD	FLAT:$SG143618
	DD	FLAT:$SG143619
	DD	FLAT:$SG143620
	ORG $+4
?namedKeyArray@@3PAUKeyIDNAME@@A DD FLAT:$SG169183	; namedKeyArray
	DB	00H
	ORG $+3
	DD	FLAT:$SG169184
	DB	08H
	ORG $+3
	DD	FLAT:$SG169185
	DB	09H
	ORG $+3
	DD	FLAT:$SG169186
	DB	0dH
	ORG $+3
	DD	FLAT:$SG169187
	DB	01bH
	ORG $+3
	DD	FLAT:$SG169188
	DB	020H
	ORG $+3
	DD	FLAT:$SG169189
	DB	021H
	ORG $+3
	DD	FLAT:$SG169190
	DB	022H
	ORG $+3
	DD	FLAT:$SG169191
	DB	023H
	ORG $+3
	DD	FLAT:$SG169192
	DB	024H
	ORG $+3
	DD	FLAT:$SG169193
	DB	025H
	ORG $+3
	DD	FLAT:$SG169194
	DB	026H
	ORG $+3
	DD	FLAT:$SG169195
	DB	027H
	ORG $+3
	DD	FLAT:$SG169196
	DB	028H
	ORG $+3
	DD	FLAT:$SG169197
	DB	02dH
	ORG $+3
	DD	FLAT:$SG169198
	DB	02eH
	ORG $+3
	DD	FLAT:$SG169199
	DB	030H
	ORG $+3
	DD	FLAT:$SG169200
	DB	031H
	ORG $+3
	DD	FLAT:$SG169201
	DB	032H
	ORG $+3
	DD	FLAT:$SG169202
	DB	033H
	ORG $+3
	DD	FLAT:$SG169203
	DB	034H
	ORG $+3
	DD	FLAT:$SG169204
	DB	035H
	ORG $+3
	DD	FLAT:$SG169205
	DB	036H
	ORG $+3
	DD	FLAT:$SG169206
	DB	037H
	ORG $+3
	DD	FLAT:$SG169207
	DB	038H
	ORG $+3
	DD	FLAT:$SG169208
	DB	039H
	ORG $+3
	DD	FLAT:$SG169209
	DB	041H
	ORG $+3
	DD	FLAT:$SG169210
	DB	042H
	ORG $+3
	DD	FLAT:$SG169211
	DB	043H
	ORG $+3
	DD	FLAT:$SG169212
	DB	044H
	ORG $+3
	DD	FLAT:$SG169213
	DB	045H
	ORG $+3
	DD	FLAT:$SG169214
	DB	046H
	ORG $+3
	DD	FLAT:$SG169215
	DB	047H
	ORG $+3
	DD	FLAT:$SG169216
	DB	048H
	ORG $+3
	DD	FLAT:$SG169217
	DB	049H
	ORG $+3
	DD	FLAT:$SG169218
	DB	04aH
	ORG $+3
	DD	FLAT:$SG169219
	DB	04bH
	ORG $+3
	DD	FLAT:$SG169220
	DB	04cH
	ORG $+3
	DD	FLAT:$SG169221
	DB	04dH
	ORG $+3
	DD	FLAT:$SG169222
	DB	04eH
	ORG $+3
	DD	FLAT:$SG169223
	DB	04fH
	ORG $+3
	DD	FLAT:$SG169224
	DB	050H
	ORG $+3
	DD	FLAT:$SG169225
	DB	051H
	ORG $+3
	DD	FLAT:$SG169226
	DB	052H
	ORG $+3
	DD	FLAT:$SG169227
	DB	053H
	ORG $+3
	DD	FLAT:$SG169228
	DB	054H
	ORG $+3
	DD	FLAT:$SG169229
	DB	055H
	ORG $+3
	DD	FLAT:$SG169230
	DB	056H
	ORG $+3
	DD	FLAT:$SG169231
	DB	057H
	ORG $+3
	DD	FLAT:$SG169232
	DB	058H
	ORG $+3
	DD	FLAT:$SG169233
	DB	059H
	ORG $+3
	DD	FLAT:$SG169234
	DB	05aH
	ORG $+3
	DD	FLAT:$SG169235
	DB	060H
	ORG $+3
	DD	FLAT:$SG169236
	DB	061H
	ORG $+3
	DD	FLAT:$SG169237
	DB	062H
	ORG $+3
	DD	FLAT:$SG169238
	DB	063H
	ORG $+3
	DD	FLAT:$SG169239
	DB	064H
	ORG $+3
	DD	FLAT:$SG169240
	DB	065H
	ORG $+3
	DD	FLAT:$SG169241
	DB	066H
	ORG $+3
	DD	FLAT:$SG169242
	DB	067H
	ORG $+3
	DD	FLAT:$SG169243
	DB	068H
	ORG $+3
	DD	FLAT:$SG169244
	DB	069H
	ORG $+3
	DD	FLAT:$SG169245
	DB	06aH
	ORG $+3
	DD	FLAT:$SG169246
	DB	06bH
	ORG $+3
	DD	FLAT:$SG169247
	DB	06dH
	ORG $+3
	DD	FLAT:$SG169248
	DB	06eH
	ORG $+3
	DD	FLAT:$SG169249
	DB	06fH
	ORG $+3
	DD	FLAT:$SG169250
	DB	070H
	ORG $+3
	DD	FLAT:$SG169251
	DB	071H
	ORG $+3
	DD	FLAT:$SG169252
	DB	072H
	ORG $+3
	DD	FLAT:$SG169253
	DB	073H
	ORG $+3
	DD	FLAT:$SG169254
	DB	074H
	ORG $+3
	DD	FLAT:$SG169255
	DB	075H
	ORG $+3
	DD	FLAT:$SG169256
	DB	076H
	ORG $+3
	DD	FLAT:$SG169257
	DB	077H
	ORG $+3
	DD	FLAT:$SG169258
	DB	078H
	ORG $+3
	DD	FLAT:$SG169259
	DB	079H
	ORG $+3
	DD	FLAT:$SG169260
	DB	07aH
	ORG $+3
	DD	FLAT:$SG169261
	DB	07bH
	ORG $+3
	DD	FLAT:$SG169262
	DB	0c0H
	ORG $+3
	DD	FLAT:$SG169263
	DB	0bdH
	ORG $+3
	DD	FLAT:$SG169264
	DB	0bbH
	ORG $+3
	DD	FLAT:$SG169265
	DB	0dbH
	ORG $+3
	DD	FLAT:$SG169266
	DB	0ddH
	ORG $+3
	DD	FLAT:$SG169267
	DB	0baH
	ORG $+3
	DD	FLAT:$SG169268
	DB	0deH
	ORG $+3
	DD	FLAT:$SG169269
	DB	0dcH
	ORG $+3
	DD	FLAT:$SG169270
	DB	0bcH
	ORG $+3
	DD	FLAT:$SG169271
	DB	0beH
	ORG $+3
	DD	FLAT:$SG169272
	DB	0bfH
	ORG $+3
	DD	FLAT:$SG169273
	DB	0e2H
	ORG $+3
_DATA	ENDS
PUBLIC	_wmemcpy
PUBLIC	_wmemmove
PUBLIC	_wmemset
PUBLIC	??0Window@@QAE@XZ				; Window::Window
PUBLIC	??1Window@@UAE@XZ				; Window::~Window
PUBLIC	?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z	; Window::init
PUBLIC	?display@Window@@UBEX_N@Z			; Window::display
PUBLIC	?reSizeTo@Window@@UAEXAAUtagRECT@@@Z		; Window::reSizeTo
PUBLIC	?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z		; Window::reSizeToWH
PUBLIC	?redraw@Window@@UBEX_N@Z			; Window::redraw
PUBLIC	?getClientRect@Window@@UBEXAAUtagRECT@@@Z	; Window::getClientRect
PUBLIC	?getWindowRect@Window@@UBEXAAUtagRECT@@@Z	; Window::getWindowRect
PUBLIC	?getWidth@Window@@UBEHXZ			; Window::getWidth
PUBLIC	?getHeight@Window@@UBEHXZ			; Window::getHeight
PUBLIC	?isVisible@Window@@UBE_NXZ			; Window::isVisible
PUBLIC	?getHSelf@Window@@QBEPAUHWND__@@XZ		; Window::getHSelf
PUBLIC	??_GWindow@@UAEPAXI@Z				; Window::`scalar deleting destructor'
PUBLIC	??0StaticDialog@@QAE@XZ				; StaticDialog::StaticDialog
PUBLIC	??1StaticDialog@@UAE@XZ				; StaticDialog::~StaticDialog
PUBLIC	?isCreated@StaticDialog@@UBE_NXZ		; StaticDialog::isCreated
PUBLIC	?destroy@StaticDialog@@UAEXXZ			; StaticDialog::destroy
PUBLIC	??_GStaticDialog@@UAEPAXI@Z			; StaticDialog::`scalar deleting destructor'
PUBLIC	_hypot
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@_W@std@@SAIPB_W@Z		; std::char_traits<wchar_t>::length
PUBLIC	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z	; std::char_traits<wchar_t>::copy
PUBLIC	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z	; std::char_traits<wchar_t>::move
PUBLIC	?assign@?$char_traits@_W@std@@SAPA_WPA_WI_W@Z	; std::char_traits<wchar_t>::assign
PUBLIC	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z	; std::char_traits<wchar_t>::assign
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	??1_Container_base12@std@@QAE@XZ		; std::_Container_base12::~_Container_base12
PUBLIC	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Clrcont@_Iterator_base12@std@@QAEXXZ		; std::_Iterator_base12::_Clrcont
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ	; std::_Iterator_base12::_Getpnext
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z		; std::_Debug_pointer<char>
PUBLIC	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z		; std::_Debug_pointer<wchar_t>
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ ; std::allocator<wchar_t>::select_on_container_copy_construction
PUBLIC	??0?$allocator@_W@std@@QAE@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
PUBLIC	??0?$allocator@_W@std@@QAE@ABV01@@Z		; std::allocator<wchar_t>::allocator<wchar_t>
PUBLIC	?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z	; std::allocator<wchar_t>::deallocate
PUBLIC	?allocate@?$allocator@_W@std@@QAEPA_WI@Z	; std::allocator<wchar_t>::allocate
PUBLIC	?max_size@?$allocator@_W@std@@QBEIXZ		; std::allocator<wchar_t>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t> >::max_size
PUBLIC	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ; std::allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction
PUBLIC	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<wchar_t> >::select_on_container_copy_construction
PUBLIC	??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
PUBLIC	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
PUBLIC	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
PUBLIC	?at@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::at
PUBLIC	??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator[]
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
PUBLIC	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
PUBLIC	?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty
PUBLIC	?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Chassign
PUBLIC	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
PUBLIC	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
PUBLIC	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
PUBLIC	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
PUBLIC	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
PUBLIC	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
PUBLIC	?getKeyStrFromVal@@YAXEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; getKeyStrFromVal
PUBLIC	?getNameStrFromCmd@@YAXKAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; getNameStrFromCmd
PUBLIC	??0Shortcut@@QAE@ABV0@@Z			; Shortcut::Shortcut
PUBLIC	?getAcceleratorModifiers@Shortcut@@QAEEXZ	; Shortcut::getAcceleratorModifiers
PUBLIC	?doDialog@Shortcut@@UAEHXZ			; Shortcut::doDialog
PUBLIC	?isValid@Shortcut@@UBE_NXZ			; Shortcut::isValid
PUBLIC	?isEnabled@Shortcut@@UBE_NXZ			; Shortcut::isEnabled
PUBLIC	?toString@Shortcut@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; Shortcut::toString
PUBLIC	?toMenuItemString@Shortcut@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; Shortcut::toMenuItemString
PUBLIC	?getKeyCombo@Shortcut@@QBEABUKeyCombo@@XZ	; Shortcut::getKeyCombo
PUBLIC	?getName@Shortcut@@QBEPB_WXZ			; Shortcut::getName
PUBLIC	?getMenuName@Shortcut@@QBEPB_WXZ		; Shortcut::getMenuName
PUBLIC	?setName@Shortcut@@QAEXPB_W@Z			; Shortcut::setName
PUBLIC	?run_dlgProc@Shortcut@@MAGHIIJ@Z		; Shortcut::run_dlgProc
PUBLIC	??1Shortcut@@UAE@XZ				; Shortcut::~Shortcut
PUBLIC	??_GShortcut@@UAEPAXI@Z				; Shortcut::`scalar deleting destructor'
PUBLIC	?getID@CommandShortcut@@QBEKXZ			; CommandShortcut::getID
PUBLIC	??1CommandShortcut@@UAE@XZ			; CommandShortcut::~CommandShortcut
PUBLIC	??0CommandShortcut@@QAE@ABV0@@Z			; CommandShortcut::CommandShortcut
PUBLIC	??_GCommandShortcut@@UAEPAXI@Z			; CommandShortcut::`scalar deleting destructor'
PUBLIC	?getScintillaKeyID@ScintillaKeyMap@@QBEKXZ	; ScintillaKeyMap::getScintillaKeyID
PUBLIC	?getMenuCmdID@ScintillaKeyMap@@QBEHXZ		; ScintillaKeyMap::getMenuCmdID
PUBLIC	?toKeyDef@ScintillaKeyMap@@QBEHH@Z		; ScintillaKeyMap::toKeyDef
PUBLIC	?getKeyComboByIndex@ScintillaKeyMap@@QBE?AUKeyCombo@@H@Z ; ScintillaKeyMap::getKeyComboByIndex
PUBLIC	?setKeyComboByIndex@ScintillaKeyMap@@QAEXHUKeyCombo@@@Z ; ScintillaKeyMap::setKeyComboByIndex
PUBLIC	?removeKeyComboByIndex@ScintillaKeyMap@@QAEXH@Z	; ScintillaKeyMap::removeKeyComboByIndex
PUBLIC	?addKeyCombo@ScintillaKeyMap@@QAEHUKeyCombo@@@Z	; ScintillaKeyMap::addKeyCombo
PUBLIC	?isEnabled@ScintillaKeyMap@@UBE_NXZ		; ScintillaKeyMap::isEnabled
PUBLIC	?getSize@ScintillaKeyMap@@QBEIXZ		; ScintillaKeyMap::getSize
PUBLIC	?toString@ScintillaKeyMap@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; ScintillaKeyMap::toString
PUBLIC	?toString@ScintillaKeyMap@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z ; ScintillaKeyMap::toString
PUBLIC	?doDialog@ScintillaKeyMap@@UAEHXZ		; ScintillaKeyMap::doDialog
PUBLIC	?select_on_container_copy_construction@?$allocator@UKeyCombo@@@std@@QBE?AV12@XZ ; std::allocator<KeyCombo>::select_on_container_copy_construction
PUBLIC	??0?$allocator@UKeyCombo@@@std@@QAE@XZ		; std::allocator<KeyCombo>::allocator<KeyCombo>
PUBLIC	??0?$allocator@UKeyCombo@@@std@@QAE@ABV01@@Z	; std::allocator<KeyCombo>::allocator<KeyCombo>
PUBLIC	?deallocate@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@I@Z ; std::allocator<KeyCombo>::deallocate
PUBLIC	?allocate@?$allocator@UKeyCombo@@@std@@QAEPAUKeyCombo@@I@Z ; std::allocator<KeyCombo>::allocate
PUBLIC	?construct@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@ABU3@@Z ; std::allocator<KeyCombo>::construct
PUBLIC	?max_size@?$allocator@UKeyCombo@@@std@@QBEIXZ	; std::allocator<KeyCombo>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAIABV?$allocator@UKeyCombo@@@2@@Z ; std::allocator_traits<std::allocator<KeyCombo> >::max_size
PUBLIC	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SA?AV?$allocator@UKeyCombo@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<KeyCombo> >::select_on_container_copy_construction
PUBLIC	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<KeyCombo> >::select_on_container_copy_construction
PUBLIC	??0?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<KeyCombo> >::_Wrap_alloc<std::allocator<KeyCombo> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV?$allocator@UKeyCombo@@@1@@Z ; std::_Wrap_alloc<std::allocator<KeyCombo> >::_Wrap_alloc<std::allocator<KeyCombo> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEPAUKeyCombo@@I@Z ; std::_Wrap_alloc<std::allocator<KeyCombo> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@I@Z ; std::_Wrap_alloc<std::allocator<KeyCombo> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<KeyCombo> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<KeyCombo> >::_Vector_val<std::_Simple_types<KeyCombo> >
PUBLIC	??1?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<KeyCombo> >::~_Vector_val<std::_Simple_types<KeyCombo> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@ABV?$allocator@UKeyCombo@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >
PUBLIC	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::~_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Free_proxy
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Getal
PUBLIC	??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::vector<KeyCombo,std::allocator<KeyCombo> >
PUBLIC	??1?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@XZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::~vector<KeyCombo,std::allocator<KeyCombo> >
PUBLIC	?capacity@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::capacity
PUBLIC	?_Unused_capacity@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Unused_capacity
PUBLIC	?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::begin
PUBLIC	?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::begin
PUBLIC	?end@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::end
PUBLIC	?_Make_iter@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Make_iter
PUBLIC	?size@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::size
PUBLIC	?max_size@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::max_size
PUBLIC	??A?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEABUKeyCombo@@I@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::operator[]
PUBLIC	??A?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAEAAUKeyCombo@@I@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::operator[]
PUBLIC	?push_back@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAEXABUKeyCombo@@@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::push_back
PUBLIC	?erase@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::erase
PUBLIC	?_Buy@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAE_NI@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Buy
PUBLIC	?_Destroy@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXPAUKeyCombo@@0@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Destroy
PUBLIC	?_Grow_to@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEII@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Grow_to
PUBLIC	?_Inside@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBE_NPBUKeyCombo@@@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Inside
PUBLIC	?_Reallocate@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Reallocate
PUBLIC	?_Reserve@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Reserve
PUBLIC	?_Tidy@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Tidy
PUBLIC	?_Xlen@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXPAUKeyCombo@@0@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Orphan_range
PUBLIC	?applyToCurrentIndex@ScintillaKeyMap@@AAEXXZ	; ScintillaKeyMap::applyToCurrentIndex
PUBLIC	?validateDialog@ScintillaKeyMap@@AAEXXZ		; ScintillaKeyMap::validateDialog
PUBLIC	?showCurrentSettings@ScintillaKeyMap@@AAEXXZ	; ScintillaKeyMap::showCurrentSettings
PUBLIC	?updateListItem@ScintillaKeyMap@@AAEXH@Z	; ScintillaKeyMap::updateListItem
PUBLIC	?run_dlgProc@ScintillaKeyMap@@MAGHIIJ@Z		; ScintillaKeyMap::run_dlgProc
PUBLIC	??1ScintillaKeyMap@@UAE@XZ			; ScintillaKeyMap::~ScintillaKeyMap
PUBLIC	??0ScintillaKeyMap@@QAE@ABV0@@Z			; ScintillaKeyMap::ScintillaKeyMap
PUBLIC	??_GScintillaKeyMap@@UAEPAXI@Z			; ScintillaKeyMap::`scalar deleting destructor'
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,KeyCombo,int,KeyCombo const *,KeyCombo const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,KeyCombo,int,KeyCombo const *,KeyCombo const &,std::_Iterator_base12>
PUBLIC	??1?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,KeyCombo,int,KeyCombo const *,KeyCombo const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,KeyCombo,int,KeyCombo const *,KeyCombo const &,std::_Iterator_base12>
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,KeyCombo,int,KeyCombo const *,KeyCombo const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,KeyCombo,int,KeyCombo const *,KeyCombo const &,std::_Iterator_base12>
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >
PUBLIC	?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBEPBUKeyCombo@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Unchecked
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::operator+=
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::operator+=
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::operator+
PUBLIC	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >
PUBLIC	??0recordedMacroStep@@QAE@HJJH@Z		; recordedMacroStep::recordedMacroStep
PUBLIC	?PlayBack@recordedMacroStep@@QAEXPAVWindow@@PAVScintillaEditView@@@Z ; recordedMacroStep::PlayBack
PUBLIC	??1recordedMacroStep@@QAE@XZ			; recordedMacroStep::~recordedMacroStep
PUBLIC	??0recordedMacroStep@@QAE@ABU0@@Z		; recordedMacroStep::recordedMacroStep
PUBLIC	??_GrecordedMacroStep@@QAEPAXI@Z		; recordedMacroStep::`scalar deleting destructor'
PUBLIC	?select_on_container_copy_construction@?$allocator@UrecordedMacroStep@@@std@@QBE?AV12@XZ ; std::allocator<recordedMacroStep>::select_on_container_copy_construction
PUBLIC	??0?$allocator@UrecordedMacroStep@@@std@@QAE@XZ	; std::allocator<recordedMacroStep>::allocator<recordedMacroStep>
PUBLIC	??0?$allocator@UrecordedMacroStep@@@std@@QAE@ABV01@@Z ; std::allocator<recordedMacroStep>::allocator<recordedMacroStep>
PUBLIC	?deallocate@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@I@Z ; std::allocator<recordedMacroStep>::deallocate
PUBLIC	?allocate@?$allocator@UrecordedMacroStep@@@std@@QAEPAUrecordedMacroStep@@I@Z ; std::allocator<recordedMacroStep>::allocate
PUBLIC	?construct@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@ABU3@@Z ; std::allocator<recordedMacroStep>::construct
PUBLIC	?max_size@?$allocator@UrecordedMacroStep@@@std@@QBEIXZ ; std::allocator<recordedMacroStep>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@UrecordedMacroStep@@@std@@@std@@SAIABV?$allocator@UrecordedMacroStep@@@2@@Z ; std::allocator_traits<std::allocator<recordedMacroStep> >::max_size
PUBLIC	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@UrecordedMacroStep@@@std@@@std@@SA?AV?$allocator@UrecordedMacroStep@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<recordedMacroStep> >::select_on_container_copy_construction
PUBLIC	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::select_on_container_copy_construction
PUBLIC	??0?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::_Wrap_alloc<std::allocator<recordedMacroStep> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV?$allocator@UrecordedMacroStep@@@1@@Z ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::_Wrap_alloc<std::allocator<recordedMacroStep> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEPAUrecordedMacroStep@@I@Z ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEXPAUrecordedMacroStep@@I@Z ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<recordedMacroStep> >::_Vector_val<std::_Simple_types<recordedMacroStep> >
PUBLIC	??1?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<recordedMacroStep> >::~_Vector_val<std::_Simple_types<recordedMacroStep> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV?$allocator@UrecordedMacroStep@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >
PUBLIC	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::~_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Free_proxy
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Getal
PUBLIC	??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::vector<recordedMacroStep,std::allocator<recordedMacroStep> >
PUBLIC	??1?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@XZ ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::~vector<recordedMacroStep,std::allocator<recordedMacroStep> >
PUBLIC	?begin@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::begin
PUBLIC	?end@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::end
PUBLIC	?size@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBEIXZ ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::size
PUBLIC	?max_size@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBEIXZ ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::max_size
PUBLIC	?_Buy@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAE_NI@Z ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Buy
PUBLIC	?_Destroy@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEXPAUrecordedMacroStep@@0@Z ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Destroy
PUBLIC	?_Tidy@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEXXZ ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Tidy
PUBLIC	?_Xlen@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IBEXXZ ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Xlen
PUBLIC	??1MacroShortcut@@UAE@XZ			; MacroShortcut::~MacroShortcut
PUBLIC	??0MacroShortcut@@QAE@ABV0@@Z			; MacroShortcut::MacroShortcut
PUBLIC	??_GMacroShortcut@@UAEPAXI@Z			; MacroShortcut::`scalar deleting destructor'
PUBLIC	??1UserCommand@@UAE@XZ				; UserCommand::~UserCommand
PUBLIC	??0UserCommand@@QAE@ABV0@@Z			; UserCommand::UserCommand
PUBLIC	??_GUserCommand@@UAEPAXI@Z			; UserCommand::`scalar deleting destructor'
PUBLIC	?isValid@PluginCmdShortcut@@UBE_NXZ		; PluginCmdShortcut::isValid
PUBLIC	?getID@PluginCmdShortcut@@QBEKXZ		; PluginCmdShortcut::getID
PUBLIC	??1PluginCmdShortcut@@UAE@XZ			; PluginCmdShortcut::~PluginCmdShortcut
PUBLIC	??0PluginCmdShortcut@@QAE@ABV0@@Z		; PluginCmdShortcut::PluginCmdShortcut
PUBLIC	??_GPluginCmdShortcut@@UAEPAXI@Z		; PluginCmdShortcut::`scalar deleting destructor'
PUBLIC	?updateShortcuts@Accelerator@@QAEXXZ		; Accelerator::updateShortcuts
PUBLIC	?updateFullMenu@Accelerator@@QAEXXZ		; Accelerator::updateFullMenu
PUBLIC	?updateMenuItemByCommand@Accelerator@@AAEXVCommandShortcut@@@Z ; Accelerator::updateMenuItemByCommand
PUBLIC	?init@ScintillaAccelerator@@QAEXPAV?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@PAUHMENU__@@PAUHWND__@@@Z ; ScintillaAccelerator::init
PUBLIC	?updateKeys@ScintillaAccelerator@@QAEXXZ	; ScintillaAccelerator::updateKeys
PUBLIC	??0?$allocator@PAUHWND__@@@std@@QAE@XZ		; std::allocator<HWND__ *>::allocator<HWND__ *>
PUBLIC	?deallocate@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@I@Z ; std::allocator<HWND__ *>::deallocate
PUBLIC	?allocate@?$allocator@PAUHWND__@@@std@@QAEPAPAUHWND__@@I@Z ; std::allocator<HWND__ *>::allocate
PUBLIC	?construct@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@ABQAU3@@Z ; std::allocator<HWND__ *>::construct
PUBLIC	?max_size@?$allocator@PAUHWND__@@@std@@QBEIXZ	; std::allocator<HWND__ *>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@PAUHWND__@@@std@@@std@@SAIABV?$allocator@PAUHWND__@@@2@@Z ; std::allocator_traits<std::allocator<HWND__ *> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<HWND__ *> >::_Wrap_alloc<std::allocator<HWND__ *> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEPAPAUHWND__@@I@Z ; std::_Wrap_alloc<std::allocator<HWND__ *> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEXPAPAUHWND__@@I@Z ; std::_Wrap_alloc<std::allocator<HWND__ *> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<HWND__ *> >::max_size
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<HWND__ *,std::allocator<HWND__ *> > >::_Getal
PUBLIC	?capacity@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ; std::vector<HWND__ *,std::allocator<HWND__ *> >::capacity
PUBLIC	?_Unused_capacity@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Unused_capacity
PUBLIC	?size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ; std::vector<HWND__ *,std::allocator<HWND__ *> >::size
PUBLIC	?max_size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ; std::vector<HWND__ *,std::allocator<HWND__ *> >::max_size
PUBLIC	?at@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QAEAAPAUHWND__@@I@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::at
PUBLIC	??A?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QAEAAPAUHWND__@@I@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::operator[]
PUBLIC	?push_back@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QAEXABQAUHWND__@@@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::push_back
PUBLIC	?_Destroy@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXPAPAUHWND__@@0@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Destroy
PUBLIC	?_Grow_to@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEII@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Grow_to
PUBLIC	?_Inside@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBE_NPBQAUHWND__@@@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Inside
PUBLIC	?_Reallocate@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Reallocate
PUBLIC	?_Reserve@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Reserve
PUBLIC	?_Xlen@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXXZ ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Xlen
PUBLIC	?_Xran@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXXZ ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Xran
PUBLIC	?_Orphan_range@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXPAPAUHWND__@@0@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Orphan_range
PUBLIC	?updateMenuItemByID@ScintillaAccelerator@@AAEXVScintillaKeyMap@@H@Z ; ScintillaAccelerator::updateMenuItemByID
PUBLIC	??0?$allocator@H@std@@QAE@XZ			; std::allocator<int>::allocator<int>
PUBLIC	?deallocate@?$allocator@H@std@@QAEXPAHI@Z	; std::allocator<int>::deallocate
PUBLIC	?allocate@?$allocator@H@std@@QAEPAHI@Z		; std::allocator<int>::allocate
PUBLIC	?max_size@?$allocator@H@std@@QBEIXZ		; std::allocator<int>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z ; std::allocator_traits<std::allocator<int> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<int> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
PUBLIC	??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<int> >::~_Vector_val<std::_Simple_types<int> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
PUBLIC	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::~_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Free_proxy
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
PUBLIC	?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::_Unused_capacity
PUBLIC	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
PUBLIC	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
PUBLIC	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
PUBLIC	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
PUBLIC	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
PUBLIC	?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ; std::vector<int,std::allocator<int> >::_Grow_to
PUBLIC	?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ; std::vector<int,std::allocator<int> >::_Inside
PUBLIC	?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reallocate
PUBLIC	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
PUBLIC	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ; std::vector<int,std::allocator<int> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
PUBLIC	?getInstance@NppParameters@@SAPAV1@XZ		; NppParameters::getInstance
PUBLIC	?getUserShortcuts@NppParameters@@QAEAAV?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@XZ ; NppParameters::getUserShortcuts
PUBLIC	?getMacroList@NppParameters@@QAEAAV?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@XZ ; NppParameters::getMacroList
PUBLIC	?getUserCommandList@NppParameters@@QAEAAV?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@XZ ; NppParameters::getUserCommandList
PUBLIC	?getPluginCommandList@NppParameters@@QAEAAV?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@XZ ; NppParameters::getPluginCommandList
PUBLIC	?getScintillaKeyList@NppParameters@@QAEAAV?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@XZ ; NppParameters::getScintillaKeyList
PUBLIC	?select_on_container_copy_construction@?$allocator@VCommandShortcut@@@std@@QBE?AV12@XZ ; std::allocator<CommandShortcut>::select_on_container_copy_construction
PUBLIC	??0?$allocator@VCommandShortcut@@@std@@QAE@XZ	; std::allocator<CommandShortcut>::allocator<CommandShortcut>
PUBLIC	??0?$allocator@VCommandShortcut@@@std@@QAE@ABV01@@Z ; std::allocator<CommandShortcut>::allocator<CommandShortcut>
PUBLIC	?deallocate@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@I@Z ; std::allocator<CommandShortcut>::deallocate
PUBLIC	?allocate@?$allocator@VCommandShortcut@@@std@@QAEPAVCommandShortcut@@I@Z ; std::allocator<CommandShortcut>::allocate
PUBLIC	?construct@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@ABV3@@Z ; std::allocator<CommandShortcut>::construct
PUBLIC	?max_size@?$allocator@VCommandShortcut@@@std@@QBEIXZ ; std::allocator<CommandShortcut>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@VCommandShortcut@@@std@@@std@@SAIABV?$allocator@VCommandShortcut@@@2@@Z ; std::allocator_traits<std::allocator<CommandShortcut> >::max_size
PUBLIC	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VCommandShortcut@@@std@@@std@@SA?AV?$allocator@VCommandShortcut@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<CommandShortcut> >::select_on_container_copy_construction
PUBLIC	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::select_on_container_copy_construction
PUBLIC	??0?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::_Wrap_alloc<std::allocator<CommandShortcut> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV?$allocator@VCommandShortcut@@@1@@Z ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::_Wrap_alloc<std::allocator<CommandShortcut> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEPAVCommandShortcut@@I@Z ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEXPAVCommandShortcut@@I@Z ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CommandShortcut> >::_Vector_val<std::_Simple_types<CommandShortcut> >
PUBLIC	??1?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CommandShortcut> >::~_Vector_val<std::_Simple_types<CommandShortcut> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VCommandShortcut@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >
PUBLIC	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::~_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Free_proxy
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Getal
PUBLIC	??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::vector<CommandShortcut,std::allocator<CommandShortcut> >
PUBLIC	??1?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@XZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::~vector<CommandShortcut,std::allocator<CommandShortcut> >
PUBLIC	?begin@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::begin
PUBLIC	?end@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::end
PUBLIC	?size@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::size
PUBLIC	?max_size@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::max_size
PUBLIC	??A?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAEAAVCommandShortcut@@I@Z ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::operator[]
PUBLIC	?_Buy@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAE_NI@Z ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Buy
PUBLIC	?_Destroy@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEXPAVCommandShortcut@@0@Z ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Destroy
PUBLIC	?_Tidy@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEXXZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Tidy
PUBLIC	?_Xlen@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IBEXXZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Xlen
PUBLIC	?select_on_container_copy_construction@?$allocator@VMacroShortcut@@@std@@QBE?AV12@XZ ; std::allocator<MacroShortcut>::select_on_container_copy_construction
PUBLIC	??0?$allocator@VMacroShortcut@@@std@@QAE@XZ	; std::allocator<MacroShortcut>::allocator<MacroShortcut>
PUBLIC	??0?$allocator@VMacroShortcut@@@std@@QAE@ABV01@@Z ; std::allocator<MacroShortcut>::allocator<MacroShortcut>
PUBLIC	?deallocate@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@I@Z ; std::allocator<MacroShortcut>::deallocate
PUBLIC	?allocate@?$allocator@VMacroShortcut@@@std@@QAEPAVMacroShortcut@@I@Z ; std::allocator<MacroShortcut>::allocate
PUBLIC	?construct@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@ABV3@@Z ; std::allocator<MacroShortcut>::construct
PUBLIC	?max_size@?$allocator@VMacroShortcut@@@std@@QBEIXZ ; std::allocator<MacroShortcut>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@VMacroShortcut@@@std@@@std@@SAIABV?$allocator@VMacroShortcut@@@2@@Z ; std::allocator_traits<std::allocator<MacroShortcut> >::max_size
PUBLIC	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VMacroShortcut@@@std@@@std@@SA?AV?$allocator@VMacroShortcut@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<MacroShortcut> >::select_on_container_copy_construction
PUBLIC	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::select_on_container_copy_construction
PUBLIC	??0?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::_Wrap_alloc<std::allocator<MacroShortcut> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV?$allocator@VMacroShortcut@@@1@@Z ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::_Wrap_alloc<std::allocator<MacroShortcut> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEPAVMacroShortcut@@I@Z ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEXPAVMacroShortcut@@I@Z ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<MacroShortcut> >::_Vector_val<std::_Simple_types<MacroShortcut> >
PUBLIC	??1?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<MacroShortcut> >::~_Vector_val<std::_Simple_types<MacroShortcut> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VMacroShortcut@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >
PUBLIC	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::~_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Free_proxy
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Getal
PUBLIC	??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::vector<MacroShortcut,std::allocator<MacroShortcut> >
PUBLIC	??1?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@XZ ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::~vector<MacroShortcut,std::allocator<MacroShortcut> >
PUBLIC	?begin@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::begin
PUBLIC	?end@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::end
PUBLIC	?size@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBEIXZ ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::size
PUBLIC	?max_size@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBEIXZ ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::max_size
PUBLIC	??A?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAEAAVMacroShortcut@@I@Z ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::operator[]
PUBLIC	?_Buy@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAE_NI@Z ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Buy
PUBLIC	?_Destroy@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEXPAVMacroShortcut@@0@Z ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Destroy
PUBLIC	?_Tidy@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEXXZ ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Tidy
PUBLIC	?_Xlen@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IBEXXZ ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Xlen
PUBLIC	?select_on_container_copy_construction@?$allocator@VUserCommand@@@std@@QBE?AV12@XZ ; std::allocator<UserCommand>::select_on_container_copy_construction
PUBLIC	??0?$allocator@VUserCommand@@@std@@QAE@XZ	; std::allocator<UserCommand>::allocator<UserCommand>
PUBLIC	??0?$allocator@VUserCommand@@@std@@QAE@ABV01@@Z	; std::allocator<UserCommand>::allocator<UserCommand>
PUBLIC	?deallocate@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@I@Z ; std::allocator<UserCommand>::deallocate
PUBLIC	?allocate@?$allocator@VUserCommand@@@std@@QAEPAVUserCommand@@I@Z ; std::allocator<UserCommand>::allocate
PUBLIC	?construct@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@ABV3@@Z ; std::allocator<UserCommand>::construct
PUBLIC	?max_size@?$allocator@VUserCommand@@@std@@QBEIXZ ; std::allocator<UserCommand>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@VUserCommand@@@std@@@std@@SAIABV?$allocator@VUserCommand@@@2@@Z ; std::allocator_traits<std::allocator<UserCommand> >::max_size
PUBLIC	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VUserCommand@@@std@@@std@@SA?AV?$allocator@VUserCommand@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<UserCommand> >::select_on_container_copy_construction
PUBLIC	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<UserCommand> >::select_on_container_copy_construction
PUBLIC	??0?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<UserCommand> >::_Wrap_alloc<std::allocator<UserCommand> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV?$allocator@VUserCommand@@@1@@Z ; std::_Wrap_alloc<std::allocator<UserCommand> >::_Wrap_alloc<std::allocator<UserCommand> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEPAVUserCommand@@I@Z ; std::_Wrap_alloc<std::allocator<UserCommand> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEXPAVUserCommand@@I@Z ; std::_Wrap_alloc<std::allocator<UserCommand> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<UserCommand> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<UserCommand> >::_Vector_val<std::_Simple_types<UserCommand> >
PUBLIC	??1?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<UserCommand> >::~_Vector_val<std::_Simple_types<UserCommand> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@ABV?$allocator@VUserCommand@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >
PUBLIC	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::~_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Free_proxy
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Getal
PUBLIC	??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z ; std::vector<UserCommand,std::allocator<UserCommand> >::vector<UserCommand,std::allocator<UserCommand> >
PUBLIC	??1?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@XZ ; std::vector<UserCommand,std::allocator<UserCommand> >::~vector<UserCommand,std::allocator<UserCommand> >
PUBLIC	?begin@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ ; std::vector<UserCommand,std::allocator<UserCommand> >::begin
PUBLIC	?end@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ ; std::vector<UserCommand,std::allocator<UserCommand> >::end
PUBLIC	?size@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBEIXZ ; std::vector<UserCommand,std::allocator<UserCommand> >::size
PUBLIC	?max_size@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBEIXZ ; std::vector<UserCommand,std::allocator<UserCommand> >::max_size
PUBLIC	??A?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAEAAVUserCommand@@I@Z ; std::vector<UserCommand,std::allocator<UserCommand> >::operator[]
PUBLIC	?_Buy@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAE_NI@Z ; std::vector<UserCommand,std::allocator<UserCommand> >::_Buy
PUBLIC	?_Destroy@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEXPAVUserCommand@@0@Z ; std::vector<UserCommand,std::allocator<UserCommand> >::_Destroy
PUBLIC	?_Tidy@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEXXZ ; std::vector<UserCommand,std::allocator<UserCommand> >::_Tidy
PUBLIC	?_Xlen@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IBEXXZ ; std::vector<UserCommand,std::allocator<UserCommand> >::_Xlen
PUBLIC	?select_on_container_copy_construction@?$allocator@VPluginCmdShortcut@@@std@@QBE?AV12@XZ ; std::allocator<PluginCmdShortcut>::select_on_container_copy_construction
PUBLIC	??0?$allocator@VPluginCmdShortcut@@@std@@QAE@XZ	; std::allocator<PluginCmdShortcut>::allocator<PluginCmdShortcut>
PUBLIC	??0?$allocator@VPluginCmdShortcut@@@std@@QAE@ABV01@@Z ; std::allocator<PluginCmdShortcut>::allocator<PluginCmdShortcut>
PUBLIC	?deallocate@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@I@Z ; std::allocator<PluginCmdShortcut>::deallocate
PUBLIC	?allocate@?$allocator@VPluginCmdShortcut@@@std@@QAEPAVPluginCmdShortcut@@I@Z ; std::allocator<PluginCmdShortcut>::allocate
PUBLIC	?construct@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@ABV3@@Z ; std::allocator<PluginCmdShortcut>::construct
PUBLIC	?max_size@?$allocator@VPluginCmdShortcut@@@std@@QBEIXZ ; std::allocator<PluginCmdShortcut>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@VPluginCmdShortcut@@@std@@@std@@SAIABV?$allocator@VPluginCmdShortcut@@@2@@Z ; std::allocator_traits<std::allocator<PluginCmdShortcut> >::max_size
PUBLIC	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VPluginCmdShortcut@@@std@@@std@@SA?AV?$allocator@VPluginCmdShortcut@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<PluginCmdShortcut> >::select_on_container_copy_construction
PUBLIC	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::select_on_container_copy_construction
PUBLIC	??0?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::_Wrap_alloc<std::allocator<PluginCmdShortcut> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV?$allocator@VPluginCmdShortcut@@@1@@Z ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::_Wrap_alloc<std::allocator<PluginCmdShortcut> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEPAVPluginCmdShortcut@@I@Z ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEXPAVPluginCmdShortcut@@I@Z ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<PluginCmdShortcut> >::_Vector_val<std::_Simple_types<PluginCmdShortcut> >
PUBLIC	??1?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<PluginCmdShortcut> >::~_Vector_val<std::_Simple_types<PluginCmdShortcut> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VPluginCmdShortcut@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >
PUBLIC	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::~_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Free_proxy
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Getal
PUBLIC	??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >
PUBLIC	??1?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@XZ ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::~vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >
PUBLIC	?begin@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::begin
PUBLIC	?end@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::end
PUBLIC	?size@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBEIXZ ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::size
PUBLIC	?max_size@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBEIXZ ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::max_size
PUBLIC	??A?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEAAVPluginCmdShortcut@@I@Z ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::operator[]
PUBLIC	?_Buy@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAE_NI@Z ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Buy
PUBLIC	?_Destroy@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEXPAVPluginCmdShortcut@@0@Z ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Destroy
PUBLIC	?_Tidy@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEXXZ ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Tidy
PUBLIC	?_Xlen@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IBEXXZ ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Xlen
PUBLIC	?size@?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@QBEIXZ ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap> >::size
PUBLIC	??A?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@QAEAAVScintillaKeyMap@@I@Z ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap> >::operator[]
PUBLIC	??0_Ignore@std@@QAE@XZ				; std::_Ignore::_Ignore
PUBLIC	?execute@ScintillaEditView@@QBEJIIJ@Z		; ScintillaEditView::execute
PUBLIC	?getClassName@Notepad_plus_Window@@SAPB_WXZ	; Notepad_plus_Window::getClassName
PUBLIC	??0?$allocator@UtagACCEL@@@std@@QAE@XZ		; std::allocator<tagACCEL>::allocator<tagACCEL>
PUBLIC	?deallocate@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@I@Z ; std::allocator<tagACCEL>::deallocate
PUBLIC	?allocate@?$allocator@UtagACCEL@@@std@@QAEPAUtagACCEL@@I@Z ; std::allocator<tagACCEL>::allocate
PUBLIC	?construct@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@ABU3@@Z ; std::allocator<tagACCEL>::construct
PUBLIC	?max_size@?$allocator@UtagACCEL@@@std@@QBEIXZ	; std::allocator<tagACCEL>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAIABV?$allocator@UtagACCEL@@@2@@Z ; std::allocator_traits<std::allocator<tagACCEL> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<tagACCEL> >::_Wrap_alloc<std::allocator<tagACCEL> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEPAUtagACCEL@@I@Z ; std::_Wrap_alloc<std::allocator<tagACCEL> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@I@Z ; std::_Wrap_alloc<std::allocator<tagACCEL> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<tagACCEL> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<tagACCEL> >::_Vector_val<std::_Simple_types<tagACCEL> >
PUBLIC	??1?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<tagACCEL> >::~_Vector_val<std::_Simple_types<tagACCEL> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@ABV?$allocator@UtagACCEL@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >
PUBLIC	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::~_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Free_proxy
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Getal
PUBLIC	??0?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::vector<tagACCEL,std::allocator<tagACCEL> >
PUBLIC	??1?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::~vector<tagACCEL,std::allocator<tagACCEL> >
PUBLIC	?capacity@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::capacity
PUBLIC	?_Unused_capacity@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Unused_capacity
PUBLIC	?size@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::size
PUBLIC	?max_size@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::max_size
PUBLIC	??A?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAEAAUtagACCEL@@I@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::operator[]
PUBLIC	?push_back@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAEXABUtagACCEL@@@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::push_back
PUBLIC	?_Destroy@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXPAUtagACCEL@@0@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Destroy
PUBLIC	?_Grow_to@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEII@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Grow_to
PUBLIC	?_Inside@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBE_NPBUtagACCEL@@@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Inside
PUBLIC	?_Reallocate@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Reallocate
PUBLIC	?_Reserve@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Reserve
PUBLIC	?_Tidy@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXXZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Tidy
PUBLIC	?_Xlen@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEXXZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEXPAUtagACCEL@@0@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Orphan_range
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
PUBLIC	??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator!=
PUBLIC	??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator<
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Compat
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	?_Rechecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV12@PAH@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Rechecked
PUBLIC	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEPAHXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Unchecked
PUBLIC	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z ; std::find<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,unsigned long>
PUBLIC	??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@1@0PAU2@@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > > >
PUBLIC	??$addressof@$$CBUKeyCombo@@@std@@YAPBUKeyCombo@@ABU1@@Z ; std::addressof<KeyCombo const >
PUBLIC	??$construct@UKeyCombo@@AAU1@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@AAU2@@Z ; std::_Wrap_alloc<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo &>
PUBLIC	??$construct@UKeyCombo@@ABU1@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@ABU2@@Z ; std::_Wrap_alloc<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo const &>
PUBLIC	??$_Move@PAUKeyCombo@@PAU1@@std@@YAPAUKeyCombo@@PAU1@00@Z ; std::_Move<KeyCombo *,KeyCombo *>
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,recordedMacroStep,int,recordedMacroStep const *,recordedMacroStep const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,recordedMacroStep,int,recordedMacroStep const *,recordedMacroStep const &,std::_Iterator_base12>
PUBLIC	??1?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,recordedMacroStep,int,recordedMacroStep const *,recordedMacroStep const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,recordedMacroStep,int,recordedMacroStep const *,recordedMacroStep const &,std::_Iterator_base12>
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,recordedMacroStep,int,recordedMacroStep const *,recordedMacroStep const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,recordedMacroStep,int,recordedMacroStep const *,recordedMacroStep const &,std::_Iterator_base12>
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@PAUrecordedMacroStep@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >
PUBLIC	?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QBEPBUrecordedMacroStep@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >::_Unchecked
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@1@0PAU2@@Z ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > > >
PUBLIC	??$addressof@QAUHWND__@@@std@@YAPBQAUHWND__@@ABQAU1@@Z ; std::addressof<HWND__ * const>
PUBLIC	??$construct@PAUHWND__@@AAPAU1@@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEXPAPAUHWND__@@AAPAU2@@Z ; std::_Wrap_alloc<std::allocator<HWND__ *> >::construct<HWND__ *,HWND__ * &>
PUBLIC	??$construct@PAUHWND__@@ABQAU1@@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEXPAPAUHWND__@@ABQAU2@@Z ; std::_Wrap_alloc<std::allocator<HWND__ *> >::construct<HWND__ *,HWND__ * const &>
PUBLIC	??$addressof@H@std@@YAPAHAAH@Z			; std::addressof<int>
PUBLIC	??$forward@H@std@@YA$$QAHAAH@Z			; std::forward<int>
PUBLIC	??$construct@HH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAH$$QAH@Z ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int>
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,CommandShortcut,int,CommandShortcut const *,CommandShortcut const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,CommandShortcut,int,CommandShortcut const *,CommandShortcut const &,std::_Iterator_base12>
PUBLIC	??1?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,CommandShortcut,int,CommandShortcut const *,CommandShortcut const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,CommandShortcut,int,CommandShortcut const *,CommandShortcut const &,std::_Iterator_base12>
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,CommandShortcut,int,CommandShortcut const *,CommandShortcut const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,CommandShortcut,int,CommandShortcut const *,CommandShortcut const &,std::_Iterator_base12>
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@PAVCommandShortcut@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >
PUBLIC	?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QBEPBVCommandShortcut@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >::_Unchecked
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@1@0PAV2@@Z ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > > >
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,MacroShortcut,int,MacroShortcut const *,MacroShortcut const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,MacroShortcut,int,MacroShortcut const *,MacroShortcut const &,std::_Iterator_base12>
PUBLIC	??1?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,MacroShortcut,int,MacroShortcut const *,MacroShortcut const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,MacroShortcut,int,MacroShortcut const *,MacroShortcut const &,std::_Iterator_base12>
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,MacroShortcut,int,MacroShortcut const *,MacroShortcut const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,MacroShortcut,int,MacroShortcut const *,MacroShortcut const &,std::_Iterator_base12>
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@PAVMacroShortcut@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >
PUBLIC	?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QBEPBVMacroShortcut@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >::_Unchecked
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@1@0PAV2@@Z ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > > >
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,UserCommand,int,UserCommand const *,UserCommand const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,UserCommand,int,UserCommand const *,UserCommand const &,std::_Iterator_base12>
PUBLIC	??1?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,UserCommand,int,UserCommand const *,UserCommand const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,UserCommand,int,UserCommand const *,UserCommand const &,std::_Iterator_base12>
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,UserCommand,int,UserCommand const *,UserCommand const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,UserCommand,int,UserCommand const *,UserCommand const &,std::_Iterator_base12>
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@PAVUserCommand@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >
PUBLIC	?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QBEPBVUserCommand@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >::_Unchecked
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@1@0PAV2@@Z ; std::vector<UserCommand,std::allocator<UserCommand> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > > >
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,PluginCmdShortcut,int,PluginCmdShortcut const *,PluginCmdShortcut const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,PluginCmdShortcut,int,PluginCmdShortcut const *,PluginCmdShortcut const &,std::_Iterator_base12>
PUBLIC	??1?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,PluginCmdShortcut,int,PluginCmdShortcut const *,PluginCmdShortcut const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,PluginCmdShortcut,int,PluginCmdShortcut const *,PluginCmdShortcut const &,std::_Iterator_base12>
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,PluginCmdShortcut,int,PluginCmdShortcut const *,PluginCmdShortcut const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,PluginCmdShortcut,int,PluginCmdShortcut const *,PluginCmdShortcut const &,std::_Iterator_base12>
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@PAVPluginCmdShortcut@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >
PUBLIC	?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QBEPBVPluginCmdShortcut@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >::_Unchecked
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@1@0PAV2@@Z ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > > >
PUBLIC	??$addressof@$$CBUtagACCEL@@@std@@YAPBUtagACCEL@@ABU1@@Z ; std::addressof<tagACCEL const >
PUBLIC	??$construct@UtagACCEL@@AAU1@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@AAU2@@Z ; std::_Wrap_alloc<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL &>
PUBLIC	??$construct@UtagACCEL@@ABU1@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@ABU2@@Z ; std::_Wrap_alloc<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL const &>
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
PUBLIC	??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>
PUBLIC	??$addressof@_W@std@@YAPA_WAA_W@Z		; std::addressof<wchar_t>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAXPAUKeyCombo@@0AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<KeyCombo> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
PUBLIC	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
PUBLIC	??$_Umove@PAUKeyCombo@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@PAU2@00@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Umove<KeyCombo *>
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@YAXPAUrecordedMacroStep@@0AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<recordedMacroStep> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@@std@@YAXPAPAUHWND__@@0AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<HWND__ *> > >
PUBLIC	??$_Umove@PAPAUHWND__@@@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEPAPAUHWND__@@PAPAU2@00@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Umove<HWND__ * *>
PUBLIC	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@YAXPAVCommandShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CommandShortcut> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@YAXPAVMacroShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MacroShortcut> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@@std@@YAXPAVUserCommand@@0AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<UserCommand> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@YAXPAVPluginCmdShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<PluginCmdShortcut> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@@std@@YAXPAUtagACCEL@@0AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<tagACCEL> > >
PUBLIC	??$_Umove@PAUtagACCEL@@@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEPAUtagACCEL@@PAU2@00@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Umove<tagACCEL *>
PUBLIC	??$_Allocate@UKeyCombo@@@std@@YAPAUKeyCombo@@IPAU1@@Z ; std::_Allocate<KeyCombo>
PUBLIC	??$_Allocate@UrecordedMacroStep@@@std@@YAPAUrecordedMacroStep@@IPAU1@@Z ; std::_Allocate<recordedMacroStep>
PUBLIC	??$_Allocate@VCommandShortcut@@@std@@YAPAVCommandShortcut@@IPAV1@@Z ; std::_Allocate<CommandShortcut>
PUBLIC	??$_Allocate@VMacroShortcut@@@std@@YAPAVMacroShortcut@@IPAV1@@Z ; std::_Allocate<MacroShortcut>
PUBLIC	??$_Allocate@VUserCommand@@@std@@YAPAVUserCommand@@IPAV1@@Z ; std::_Allocate<UserCommand>
PUBLIC	??$_Allocate@VPluginCmdShortcut@@@std@@YAPAVPluginCmdShortcut@@IPAV1@@Z ; std::_Allocate<PluginCmdShortcut>
PUBLIC	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
PUBLIC	??$_Allocate@PAUHWND__@@@std@@YAPAPAUHWND__@@IPAPAU1@@Z ; std::_Allocate<HWND__ *>
PUBLIC	??$_Allocate@H@std@@YAPAHIPAH@Z			; std::_Allocate<int>
PUBLIC	??$_Allocate@UtagACCEL@@@std@@YAPAUtagACCEL@@IPAU1@@Z ; std::_Allocate<tagACCEL>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$_Allocate@_W@std@@YAPA_WIPA_W@Z		; std::_Allocate<wchar_t>
PUBLIC	??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z ; std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
PUBLIC	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??$_Find@PAHK@std@@YAPAHPAH0ABK@Z		; std::_Find<int *,unsigned long>
PUBLIC	??$_Rechecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@AAV10@PAH@Z ; std::_Rechecked<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@PAUKeyCombo@@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@@std@@YAPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >,KeyCombo *,std::_Wrap_alloc<std::allocator<KeyCombo> > >
PUBLIC	??$forward@AAUKeyCombo@@@std@@YAAAUKeyCombo@@AAU1@@Z ; std::forward<KeyCombo &>
PUBLIC	??$construct@UKeyCombo@@AAU1@@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAXAAV?$allocator@UKeyCombo@@@1@PAUKeyCombo@@AAU3@@Z ; std::allocator_traits<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo &>
PUBLIC	??$forward@ABUKeyCombo@@@std@@YAABUKeyCombo@@ABU1@@Z ; std::forward<KeyCombo const &>
PUBLIC	??$construct@UKeyCombo@@ABU1@@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAXAAV?$allocator@UKeyCombo@@@1@PAUKeyCombo@@ABU3@@Z ; std::allocator_traits<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo const &>
PUBLIC	??$_Ptr_cat@UKeyCombo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBUKeyCombo@@PAU2@@Z ; std::_Ptr_cat<KeyCombo,KeyCombo>
PUBLIC	??$_Ptr_cat@UKeyCombo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUKeyCombo@@0@Z ; std::_Ptr_cat<KeyCombo,KeyCombo>
PUBLIC	??$_Move@PAUKeyCombo@@PAU1@@std@@YAPAUKeyCombo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<KeyCombo *,KeyCombo *>
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@PAUrecordedMacroStep@@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@@std@@YAPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >,recordedMacroStep *,std::_Wrap_alloc<std::allocator<recordedMacroStep> > >
PUBLIC	??$forward@AAPAUHWND__@@@std@@YAAAPAUHWND__@@AAPAU1@@Z ; std::forward<HWND__ * &>
PUBLIC	??$construct@PAUHWND__@@AAPAU1@@?$allocator_traits@V?$allocator@PAUHWND__@@@std@@@std@@SAXAAV?$allocator@PAUHWND__@@@1@PAPAUHWND__@@AAPAU3@@Z ; std::allocator_traits<std::allocator<HWND__ *> >::construct<HWND__ *,HWND__ * &>
PUBLIC	??$forward@ABQAUHWND__@@@std@@YAABQAUHWND__@@ABQAU1@@Z ; std::forward<HWND__ * const &>
PUBLIC	??$construct@PAUHWND__@@ABQAU1@@?$allocator_traits@V?$allocator@PAUHWND__@@@std@@@std@@SAXAAV?$allocator@PAUHWND__@@@1@PAPAUHWND__@@ABQAU3@@Z ; std::allocator_traits<std::allocator<HWND__ *> >::construct<HWND__ *,HWND__ * const &>
PUBLIC	??$construct@HH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAH$$QAH@Z ; std::allocator_traits<std::allocator<int> >::construct<int,int>
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@PAVCommandShortcut@@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@@std@@YAPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >,CommandShortcut *,std::_Wrap_alloc<std::allocator<CommandShortcut> > >
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@PAVMacroShortcut@@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@@std@@YAPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >,MacroShortcut *,std::_Wrap_alloc<std::allocator<MacroShortcut> > >
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@PAVUserCommand@@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@@std@@YAPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >,UserCommand *,std::_Wrap_alloc<std::allocator<UserCommand> > >
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@PAVPluginCmdShortcut@@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@@std@@YAPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >,PluginCmdShortcut *,std::_Wrap_alloc<std::allocator<PluginCmdShortcut> > >
PUBLIC	??$forward@AAUtagACCEL@@@std@@YAAAUtagACCEL@@AAU1@@Z ; std::forward<tagACCEL &>
PUBLIC	??$construct@UtagACCEL@@AAU1@@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAXAAV?$allocator@UtagACCEL@@@1@PAUtagACCEL@@AAU3@@Z ; std::allocator_traits<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL &>
PUBLIC	??$forward@ABUtagACCEL@@@std@@YAABUtagACCEL@@ABU1@@Z ; std::forward<tagACCEL const &>
PUBLIC	??$construct@UtagACCEL@@ABU1@@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAXAAV?$allocator@UtagACCEL@@@1@PAUtagACCEL@@ABU3@@Z ; std::allocator_traits<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL const &>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z		; std::forward<wchar_t * &>
PUBLIC	??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
PUBLIC	??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAXPAUKeyCombo@@0AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<KeyCombo> > >
PUBLIC	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$_Uninitialized_move@PAUKeyCombo@@PAU1@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z ; std::_Uninitialized_move<KeyCombo *,KeyCombo *,std::_Wrap_alloc<std::allocator<KeyCombo> > >
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Ptr_cat@UrecordedMacroStep@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBUrecordedMacroStep@@PAU2@@Z ; std::_Ptr_cat<recordedMacroStep,recordedMacroStep>
PUBLIC	??$_Ptr_cat@UrecordedMacroStep@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUrecordedMacroStep@@0@Z ; std::_Ptr_cat<recordedMacroStep,recordedMacroStep>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@YAXPAUrecordedMacroStep@@0AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<recordedMacroStep> > >
PUBLIC	??$_Ptr_cat@PAUHWND__@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUHWND__@@0@Z ; std::_Ptr_cat<HWND__ *,HWND__ *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@@std@@YAXPAPAUHWND__@@0AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<HWND__ *> > >
PUBLIC	??$_Uninitialized_move@PAPAUHWND__@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@@std@@YAPAPAUHWND__@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@@Z ; std::_Uninitialized_move<HWND__ * *,HWND__ * *,std::_Wrap_alloc<std::allocator<HWND__ *> > >
PUBLIC	??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
PUBLIC	??$_Ptr_cat@VCommandShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBVCommandShortcut@@PAV2@@Z ; std::_Ptr_cat<CommandShortcut,CommandShortcut>
PUBLIC	??$_Ptr_cat@VCommandShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVCommandShortcut@@0@Z ; std::_Ptr_cat<CommandShortcut,CommandShortcut>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@YAXPAVCommandShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CommandShortcut> > >
PUBLIC	??$_Ptr_cat@VMacroShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBVMacroShortcut@@PAV2@@Z ; std::_Ptr_cat<MacroShortcut,MacroShortcut>
PUBLIC	??$_Ptr_cat@VMacroShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVMacroShortcut@@0@Z ; std::_Ptr_cat<MacroShortcut,MacroShortcut>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@YAXPAVMacroShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MacroShortcut> > >
PUBLIC	??$_Ptr_cat@VUserCommand@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBVUserCommand@@PAV2@@Z ; std::_Ptr_cat<UserCommand,UserCommand>
PUBLIC	??$_Ptr_cat@VUserCommand@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVUserCommand@@0@Z ; std::_Ptr_cat<UserCommand,UserCommand>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@@std@@YAXPAVUserCommand@@0AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<UserCommand> > >
PUBLIC	??$_Ptr_cat@VPluginCmdShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBVPluginCmdShortcut@@PAV2@@Z ; std::_Ptr_cat<PluginCmdShortcut,PluginCmdShortcut>
PUBLIC	??$_Ptr_cat@VPluginCmdShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVPluginCmdShortcut@@0@Z ; std::_Ptr_cat<PluginCmdShortcut,PluginCmdShortcut>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@YAXPAVPluginCmdShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<PluginCmdShortcut> > >
PUBLIC	??$_Ptr_cat@UtagACCEL@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagACCEL@@0@Z ; std::_Ptr_cat<tagACCEL,tagACCEL>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@@std@@YAXPAUtagACCEL@@0AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<tagACCEL> > >
PUBLIC	??$_Uninitialized_move@PAUtagACCEL@@PAU1@U?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@@Z ; std::_Uninitialized_move<tagACCEL *,tagACCEL *,std::_Wrap_alloc<std::allocator<tagACCEL> > >
PUBLIC	??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ; std::_Iter_cat<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
PUBLIC	??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
PUBLIC	??$_Find@PAHK@std@@YAPAHPAH0ABKU?$integral_constant@_N$0A@@0@@Z ; std::_Find<int *,unsigned long>
PUBLIC	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@YAPBUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<KeyCombo> > >
PUBLIC	??$_Unchecked@PAUKeyCombo@@@std@@YAPAUKeyCombo@@PAU1@@Z ; std::_Unchecked<KeyCombo *>
PUBLIC	??$_Uninit_copy@PBUKeyCombo@@PAU1@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z ; std::_Uninit_copy<KeyCombo const *,KeyCombo *,std::_Wrap_alloc<std::allocator<KeyCombo> > >
PUBLIC	??$_Rechecked@PAUKeyCombo@@PAU1@@std@@YAAAPAUKeyCombo@@AAPAU1@PAU1@@Z ; std::_Rechecked<KeyCombo *,KeyCombo *>
PUBLIC	??$construct@UKeyCombo@@AAU1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@AAU2@@Z ; std::allocator<KeyCombo>::construct<KeyCombo,KeyCombo &>
PUBLIC	??$move@AAUKeyCombo@@@std@@YA$$QAUKeyCombo@@AAU1@@Z ; std::move<KeyCombo &>
PUBLIC	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@YAPBUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >
PUBLIC	??$_Unchecked@PAUrecordedMacroStep@@@std@@YAPAUrecordedMacroStep@@PAU1@@Z ; std::_Unchecked<recordedMacroStep *>
PUBLIC	??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z ; std::_Uninit_copy<recordedMacroStep const *,recordedMacroStep *,std::_Wrap_alloc<std::allocator<recordedMacroStep> > >
PUBLIC	??$_Rechecked@PAUrecordedMacroStep@@PAU1@@std@@YAAAPAUrecordedMacroStep@@AAPAU1@PAU1@@Z ; std::_Rechecked<recordedMacroStep *,recordedMacroStep *>
PUBLIC	??$construct@PAUHWND__@@AAPAU1@@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@AAPAU2@@Z ; std::allocator<HWND__ *>::construct<HWND__ *,HWND__ * &>
PUBLIC	??$construct@HH@?$allocator@H@std@@QAEXPAH$$QAH@Z ; std::allocator<int>::construct<int,int>
PUBLIC	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@YAPBVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<CommandShortcut> > >
PUBLIC	??$_Unchecked@PAVCommandShortcut@@@std@@YAPAVCommandShortcut@@PAV1@@Z ; std::_Unchecked<CommandShortcut *>
PUBLIC	??$_Uninit_copy@PBVCommandShortcut@@PAV1@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z ; std::_Uninit_copy<CommandShortcut const *,CommandShortcut *,std::_Wrap_alloc<std::allocator<CommandShortcut> > >
PUBLIC	??$_Rechecked@PAVCommandShortcut@@PAV1@@std@@YAAAPAVCommandShortcut@@AAPAV1@PAV1@@Z ; std::_Rechecked<CommandShortcut *,CommandShortcut *>
PUBLIC	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@YAPBVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<MacroShortcut> > >
PUBLIC	??$_Unchecked@PAVMacroShortcut@@@std@@YAPAVMacroShortcut@@PAV1@@Z ; std::_Unchecked<MacroShortcut *>
PUBLIC	??$_Uninit_copy@PBVMacroShortcut@@PAV1@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z ; std::_Uninit_copy<MacroShortcut const *,MacroShortcut *,std::_Wrap_alloc<std::allocator<MacroShortcut> > >
PUBLIC	??$_Rechecked@PAVMacroShortcut@@PAV1@@std@@YAAAPAVMacroShortcut@@AAPAV1@PAV1@@Z ; std::_Rechecked<MacroShortcut *,MacroShortcut *>
PUBLIC	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@YAPBVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<UserCommand> > >
PUBLIC	??$_Unchecked@PAVUserCommand@@@std@@YAPAVUserCommand@@PAV1@@Z ; std::_Unchecked<UserCommand *>
PUBLIC	??$_Uninit_copy@PBVUserCommand@@PAV1@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z ; std::_Uninit_copy<UserCommand const *,UserCommand *,std::_Wrap_alloc<std::allocator<UserCommand> > >
PUBLIC	??$_Rechecked@PAVUserCommand@@PAV1@@std@@YAAAPAVUserCommand@@AAPAV1@PAV1@@Z ; std::_Rechecked<UserCommand *,UserCommand *>
PUBLIC	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@YAPBVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >
PUBLIC	??$_Unchecked@PAVPluginCmdShortcut@@@std@@YAPAVPluginCmdShortcut@@PAV1@@Z ; std::_Unchecked<PluginCmdShortcut *>
PUBLIC	??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z ; std::_Uninit_copy<PluginCmdShortcut const *,PluginCmdShortcut *,std::_Wrap_alloc<std::allocator<PluginCmdShortcut> > >
PUBLIC	??$_Rechecked@PAVPluginCmdShortcut@@PAV1@@std@@YAAAPAVPluginCmdShortcut@@AAPAV1@PAV1@@Z ; std::_Rechecked<PluginCmdShortcut *,PluginCmdShortcut *>
PUBLIC	??$construct@UtagACCEL@@AAU1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@AAU2@@Z ; std::allocator<tagACCEL>::construct<tagACCEL,tagACCEL &>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>
PUBLIC	??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>
PUBLIC	??$destroy@UKeyCombo@@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@@Z ; std::_Wrap_alloc<std::allocator<KeyCombo> >::destroy<KeyCombo>
PUBLIC	??$_Uninit_move@PAUKeyCombo@@PAU1@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z ; std::_Uninit_move<KeyCombo *,KeyCombo *,std::_Wrap_alloc<std::allocator<KeyCombo> > >
PUBLIC	??$destroy@UrecordedMacroStep@@@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEXPAUrecordedMacroStep@@@Z ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::destroy<recordedMacroStep>
PUBLIC	??$_Unchecked@PAPAUHWND__@@@std@@YAPAPAUHWND__@@PAPAU1@@Z ; std::_Unchecked<HWND__ * *>
PUBLIC	??$_Uninit_move@PAPAUHWND__@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@@std@@YAPAPAUHWND__@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@@Z ; std::_Uninit_move<HWND__ * *,HWND__ * *,std::_Wrap_alloc<std::allocator<HWND__ *> > >
PUBLIC	??$_Rechecked@PAPAUHWND__@@PAPAU1@@std@@YAAAPAPAUHWND__@@AAPAPAU1@PAPAU1@@Z ; std::_Rechecked<HWND__ * *,HWND__ * *>
PUBLIC	??$_Unchecked@PAH@std@@YAPAHPAH@Z		; std::_Unchecked<int *>
PUBLIC	??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
PUBLIC	??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z	; std::_Rechecked<int *,int *>
PUBLIC	??$destroy@VCommandShortcut@@@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEXPAVCommandShortcut@@@Z ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::destroy<CommandShortcut>
PUBLIC	??$destroy@VMacroShortcut@@@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEXPAVMacroShortcut@@@Z ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::destroy<MacroShortcut>
PUBLIC	??$destroy@VUserCommand@@@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEXPAVUserCommand@@@Z ; std::_Wrap_alloc<std::allocator<UserCommand> >::destroy<UserCommand>
PUBLIC	??$destroy@VPluginCmdShortcut@@@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEXPAVPluginCmdShortcut@@@Z ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::destroy<PluginCmdShortcut>
PUBLIC	??$destroy@UtagACCEL@@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@@Z ; std::_Wrap_alloc<std::allocator<tagACCEL> >::destroy<tagACCEL>
PUBLIC	??$_Unchecked@PAUtagACCEL@@@std@@YAPAUtagACCEL@@PAU1@@Z ; std::_Unchecked<tagACCEL *>
PUBLIC	??$_Uninit_move@PAUtagACCEL@@PAU1@U?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@@Z ; std::_Uninit_move<tagACCEL *,tagACCEL *,std::_Wrap_alloc<std::allocator<tagACCEL> > >
PUBLIC	??$_Rechecked@PAUtagACCEL@@PAU1@@std@@YAAAPAUtagACCEL@@AAPAU1@PAU1@@Z ; std::_Rechecked<tagACCEL *,tagACCEL *>
PUBLIC	??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
PUBLIC	??$_Uninit_copy@PBUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<KeyCombo const *,KeyCombo *,std::allocator<KeyCombo> >
PUBLIC	??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@V?$allocator@UrecordedMacroStep@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<recordedMacroStep const *,recordedMacroStep *,std::allocator<recordedMacroStep> >
PUBLIC	??$_Uninit_copy@PBVCommandShortcut@@PAV1@V?$allocator@VCommandShortcut@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CommandShortcut const *,CommandShortcut *,std::allocator<CommandShortcut> >
PUBLIC	??$_Uninit_copy@PBVMacroShortcut@@PAV1@V?$allocator@VMacroShortcut@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<MacroShortcut const *,MacroShortcut *,std::allocator<MacroShortcut> >
PUBLIC	??$_Uninit_copy@PBVUserCommand@@PAV1@V?$allocator@VUserCommand@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<UserCommand const *,UserCommand *,std::allocator<UserCommand> >
PUBLIC	??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@V?$allocator@VPluginCmdShortcut@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<PluginCmdShortcut const *,PluginCmdShortcut *,std::allocator<PluginCmdShortcut> >
PUBLIC	??$destroy@UKeyCombo@@@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAXAAV?$allocator@UKeyCombo@@@1@PAUKeyCombo@@@Z ; std::allocator_traits<std::allocator<KeyCombo> >::destroy<KeyCombo>
PUBLIC	??$_Val_type@PAUKeyCombo@@@std@@YAPAUKeyCombo@@PAU1@@Z ; std::_Val_type<KeyCombo *>
PUBLIC	??$_Uninit_move@PAUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@U1@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<KeyCombo *,KeyCombo *,std::allocator<KeyCombo>,KeyCombo>
PUBLIC	??$destroy@UrecordedMacroStep@@@?$allocator_traits@V?$allocator@UrecordedMacroStep@@@std@@@std@@SAXAAV?$allocator@UrecordedMacroStep@@@1@PAUrecordedMacroStep@@@Z ; std::allocator_traits<std::allocator<recordedMacroStep> >::destroy<recordedMacroStep>
PUBLIC	??$_Val_type@PAPAUHWND__@@@std@@YAPAPAUHWND__@@PAPAU1@@Z ; std::_Val_type<HWND__ * *>
PUBLIC	??$_Uninit_move@PAUHWND__@@PAU1@PAU1@@std@@YAPAPAUHWND__@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<HWND__ *,HWND__ *,HWND__ *>
PUBLIC	??$_Val_type@PAH@std@@YAPAHPAH@Z		; std::_Val_type<int *>
PUBLIC	??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<int,int,int>
PUBLIC	??$destroy@VCommandShortcut@@@?$allocator_traits@V?$allocator@VCommandShortcut@@@std@@@std@@SAXAAV?$allocator@VCommandShortcut@@@1@PAVCommandShortcut@@@Z ; std::allocator_traits<std::allocator<CommandShortcut> >::destroy<CommandShortcut>
PUBLIC	??$destroy@VMacroShortcut@@@?$allocator_traits@V?$allocator@VMacroShortcut@@@std@@@std@@SAXAAV?$allocator@VMacroShortcut@@@1@PAVMacroShortcut@@@Z ; std::allocator_traits<std::allocator<MacroShortcut> >::destroy<MacroShortcut>
PUBLIC	??$destroy@VUserCommand@@@?$allocator_traits@V?$allocator@VUserCommand@@@std@@@std@@SAXAAV?$allocator@VUserCommand@@@1@PAVUserCommand@@@Z ; std::allocator_traits<std::allocator<UserCommand> >::destroy<UserCommand>
PUBLIC	??$destroy@VPluginCmdShortcut@@@?$allocator_traits@V?$allocator@VPluginCmdShortcut@@@std@@@std@@SAXAAV?$allocator@VPluginCmdShortcut@@@1@PAVPluginCmdShortcut@@@Z ; std::allocator_traits<std::allocator<PluginCmdShortcut> >::destroy<PluginCmdShortcut>
PUBLIC	??$destroy@UtagACCEL@@@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAXAAV?$allocator@UtagACCEL@@@1@PAUtagACCEL@@@Z ; std::allocator_traits<std::allocator<tagACCEL> >::destroy<tagACCEL>
PUBLIC	??$_Val_type@PAUtagACCEL@@@std@@YAPAUtagACCEL@@PAU1@@Z ; std::_Val_type<tagACCEL *>
PUBLIC	??$_Uninit_move@PAUtagACCEL@@PAU1@V?$allocator@UtagACCEL@@@std@@U1@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<tagACCEL *,tagACCEL *,std::allocator<tagACCEL>,tagACCEL>
PUBLIC	??$_Debug_range@PBUKeyCombo@@@std@@YAXPBUKeyCombo@@0PB_WI@Z ; std::_Debug_range<KeyCombo const *>
PUBLIC	??$_Debug_pointer@UKeyCombo@@@std@@YAXPAUKeyCombo@@PB_WI@Z ; std::_Debug_pointer<KeyCombo>
PUBLIC	??$_Debug_pointer@UKeyCombo@@@std@@YAXPBUKeyCombo@@PB_WI@Z ; std::_Debug_pointer<KeyCombo>
PUBLIC	??$_Debug_range@PBUrecordedMacroStep@@@std@@YAXPBUrecordedMacroStep@@0PB_WI@Z ; std::_Debug_range<recordedMacroStep const *>
PUBLIC	??$_Debug_pointer@UrecordedMacroStep@@@std@@YAXPAUrecordedMacroStep@@PB_WI@Z ; std::_Debug_pointer<recordedMacroStep>
PUBLIC	??$_Debug_pointer@UrecordedMacroStep@@@std@@YAXPBUrecordedMacroStep@@PB_WI@Z ; std::_Debug_pointer<recordedMacroStep>
PUBLIC	??$construct@UrecordedMacroStep@@ABU1@@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEXPAUrecordedMacroStep@@ABU2@@Z ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::construct<recordedMacroStep,recordedMacroStep const &>
PUBLIC	??$_Debug_range@PBVCommandShortcut@@@std@@YAXPBVCommandShortcut@@0PB_WI@Z ; std::_Debug_range<CommandShortcut const *>
PUBLIC	??$_Debug_pointer@VCommandShortcut@@@std@@YAXPAVCommandShortcut@@PB_WI@Z ; std::_Debug_pointer<CommandShortcut>
PUBLIC	??$_Debug_pointer@VCommandShortcut@@@std@@YAXPBVCommandShortcut@@PB_WI@Z ; std::_Debug_pointer<CommandShortcut>
PUBLIC	??$construct@VCommandShortcut@@ABV1@@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEXPAVCommandShortcut@@ABV2@@Z ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::construct<CommandShortcut,CommandShortcut const &>
PUBLIC	??$_Debug_range@PBVMacroShortcut@@@std@@YAXPBVMacroShortcut@@0PB_WI@Z ; std::_Debug_range<MacroShortcut const *>
PUBLIC	??$_Debug_pointer@VMacroShortcut@@@std@@YAXPAVMacroShortcut@@PB_WI@Z ; std::_Debug_pointer<MacroShortcut>
PUBLIC	??$_Debug_pointer@VMacroShortcut@@@std@@YAXPBVMacroShortcut@@PB_WI@Z ; std::_Debug_pointer<MacroShortcut>
PUBLIC	??$construct@VMacroShortcut@@ABV1@@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEXPAVMacroShortcut@@ABV2@@Z ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::construct<MacroShortcut,MacroShortcut const &>
PUBLIC	??$_Debug_range@PBVUserCommand@@@std@@YAXPBVUserCommand@@0PB_WI@Z ; std::_Debug_range<UserCommand const *>
PUBLIC	??$_Debug_pointer@VUserCommand@@@std@@YAXPAVUserCommand@@PB_WI@Z ; std::_Debug_pointer<UserCommand>
PUBLIC	??$_Debug_pointer@VUserCommand@@@std@@YAXPBVUserCommand@@PB_WI@Z ; std::_Debug_pointer<UserCommand>
PUBLIC	??$construct@VUserCommand@@ABV1@@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEXPAVUserCommand@@ABV2@@Z ; std::_Wrap_alloc<std::allocator<UserCommand> >::construct<UserCommand,UserCommand const &>
PUBLIC	??$_Debug_range@PBVPluginCmdShortcut@@@std@@YAXPBVPluginCmdShortcut@@0PB_WI@Z ; std::_Debug_range<PluginCmdShortcut const *>
PUBLIC	??$_Debug_pointer@VPluginCmdShortcut@@@std@@YAXPAVPluginCmdShortcut@@PB_WI@Z ; std::_Debug_pointer<PluginCmdShortcut>
PUBLIC	??$_Debug_pointer@VPluginCmdShortcut@@@std@@YAXPBVPluginCmdShortcut@@PB_WI@Z ; std::_Debug_pointer<PluginCmdShortcut>
PUBLIC	??$construct@VPluginCmdShortcut@@ABV1@@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEXPAVPluginCmdShortcut@@ABV2@@Z ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::construct<PluginCmdShortcut,PluginCmdShortcut const &>
PUBLIC	??$destroy@UKeyCombo@@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@@Z ; std::allocator<KeyCombo>::destroy<KeyCombo>
PUBLIC	??$_Debug_range@PAUKeyCombo@@@std@@YAXPAUKeyCombo@@0PB_WI@Z ; std::_Debug_range<KeyCombo *>
PUBLIC	??$construct@UKeyCombo@@U1@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@$$QAU2@@Z ; std::_Wrap_alloc<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo>
PUBLIC	??$destroy@UrecordedMacroStep@@@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@@Z ; std::allocator<recordedMacroStep>::destroy<recordedMacroStep>
PUBLIC	??$_Debug_range@PAPAUHWND__@@@std@@YAXPAPAUHWND__@@0PB_WI@Z ; std::_Debug_range<HWND__ * *>
PUBLIC	??$_Debug_pointer@PAUHWND__@@@std@@YAXPAPAUHWND__@@PB_WI@Z ; std::_Debug_pointer<HWND__ *>
PUBLIC	??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z		; std::_Debug_range<int *>
PUBLIC	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z		; std::_Debug_pointer<int>
PUBLIC	??$destroy@VCommandShortcut@@@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@@Z ; std::allocator<CommandShortcut>::destroy<CommandShortcut>
PUBLIC	??$destroy@VMacroShortcut@@@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@@Z ; std::allocator<MacroShortcut>::destroy<MacroShortcut>
PUBLIC	??$destroy@VUserCommand@@@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@@Z ; std::allocator<UserCommand>::destroy<UserCommand>
PUBLIC	??$destroy@VPluginCmdShortcut@@@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@@Z ; std::allocator<PluginCmdShortcut>::destroy<PluginCmdShortcut>
PUBLIC	??$destroy@UtagACCEL@@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@@Z ; std::allocator<tagACCEL>::destroy<tagACCEL>
PUBLIC	??$_Debug_range@PAUtagACCEL@@@std@@YAXPAUtagACCEL@@0PB_WI@Z ; std::_Debug_range<tagACCEL *>
PUBLIC	??$_Debug_pointer@UtagACCEL@@@std@@YAXPAUtagACCEL@@PB_WI@Z ; std::_Debug_pointer<tagACCEL>
PUBLIC	??$construct@UtagACCEL@@U1@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@$$QAU2@@Z ; std::_Wrap_alloc<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL>
PUBLIC	??$_Iter_cat@PBUKeyCombo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBUKeyCombo@@@Z ; std::_Iter_cat<KeyCombo const *>
PUBLIC	??$_Debug_range2@PBUKeyCombo@@@std@@YAXPBUKeyCombo@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<KeyCombo const *>
PUBLIC	??$_Iter_cat@PBUrecordedMacroStep@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBUrecordedMacroStep@@@Z ; std::_Iter_cat<recordedMacroStep const *>
PUBLIC	??$_Debug_range2@PBUrecordedMacroStep@@@std@@YAXPBUrecordedMacroStep@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<recordedMacroStep const *>
PUBLIC	??$forward@ABUrecordedMacroStep@@@std@@YAABUrecordedMacroStep@@ABU1@@Z ; std::forward<recordedMacroStep const &>
PUBLIC	??$construct@UrecordedMacroStep@@ABU1@@?$allocator_traits@V?$allocator@UrecordedMacroStep@@@std@@@std@@SAXAAV?$allocator@UrecordedMacroStep@@@1@PAUrecordedMacroStep@@ABU3@@Z ; std::allocator_traits<std::allocator<recordedMacroStep> >::construct<recordedMacroStep,recordedMacroStep const &>
PUBLIC	??$_Iter_cat@PBVCommandShortcut@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBVCommandShortcut@@@Z ; std::_Iter_cat<CommandShortcut const *>
PUBLIC	??$_Debug_range2@PBVCommandShortcut@@@std@@YAXPBVCommandShortcut@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<CommandShortcut const *>
PUBLIC	??$forward@ABVCommandShortcut@@@std@@YAABVCommandShortcut@@ABV1@@Z ; std::forward<CommandShortcut const &>
PUBLIC	??$construct@VCommandShortcut@@ABV1@@?$allocator_traits@V?$allocator@VCommandShortcut@@@std@@@std@@SAXAAV?$allocator@VCommandShortcut@@@1@PAVCommandShortcut@@ABV3@@Z ; std::allocator_traits<std::allocator<CommandShortcut> >::construct<CommandShortcut,CommandShortcut const &>
PUBLIC	??$_Iter_cat@PBVMacroShortcut@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBVMacroShortcut@@@Z ; std::_Iter_cat<MacroShortcut const *>
PUBLIC	??$_Debug_range2@PBVMacroShortcut@@@std@@YAXPBVMacroShortcut@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<MacroShortcut const *>
PUBLIC	??$forward@ABVMacroShortcut@@@std@@YAABVMacroShortcut@@ABV1@@Z ; std::forward<MacroShortcut const &>
PUBLIC	??$construct@VMacroShortcut@@ABV1@@?$allocator_traits@V?$allocator@VMacroShortcut@@@std@@@std@@SAXAAV?$allocator@VMacroShortcut@@@1@PAVMacroShortcut@@ABV3@@Z ; std::allocator_traits<std::allocator<MacroShortcut> >::construct<MacroShortcut,MacroShortcut const &>
PUBLIC	??$_Iter_cat@PBVUserCommand@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBVUserCommand@@@Z ; std::_Iter_cat<UserCommand const *>
PUBLIC	??$_Debug_range2@PBVUserCommand@@@std@@YAXPBVUserCommand@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<UserCommand const *>
PUBLIC	??$forward@ABVUserCommand@@@std@@YAABVUserCommand@@ABV1@@Z ; std::forward<UserCommand const &>
PUBLIC	??$construct@VUserCommand@@ABV1@@?$allocator_traits@V?$allocator@VUserCommand@@@std@@@std@@SAXAAV?$allocator@VUserCommand@@@1@PAVUserCommand@@ABV3@@Z ; std::allocator_traits<std::allocator<UserCommand> >::construct<UserCommand,UserCommand const &>
PUBLIC	??$_Iter_cat@PBVPluginCmdShortcut@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBVPluginCmdShortcut@@@Z ; std::_Iter_cat<PluginCmdShortcut const *>
PUBLIC	??$_Debug_range2@PBVPluginCmdShortcut@@@std@@YAXPBVPluginCmdShortcut@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<PluginCmdShortcut const *>
PUBLIC	??$forward@ABVPluginCmdShortcut@@@std@@YAABVPluginCmdShortcut@@ABV1@@Z ; std::forward<PluginCmdShortcut const &>
PUBLIC	??$construct@VPluginCmdShortcut@@ABV1@@?$allocator_traits@V?$allocator@VPluginCmdShortcut@@@std@@@std@@SAXAAV?$allocator@VPluginCmdShortcut@@@1@PAVPluginCmdShortcut@@ABV3@@Z ; std::allocator_traits<std::allocator<PluginCmdShortcut> >::construct<PluginCmdShortcut,PluginCmdShortcut const &>
PUBLIC	??$_Iter_cat@PAUKeyCombo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKeyCombo@@@Z ; std::_Iter_cat<KeyCombo *>
PUBLIC	??$_Debug_range2@PAUKeyCombo@@@std@@YAXPAUKeyCombo@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<KeyCombo *>
PUBLIC	??$forward@UKeyCombo@@@std@@YA$$QAUKeyCombo@@AAU1@@Z ; std::forward<KeyCombo>
PUBLIC	??$construct@UKeyCombo@@U1@@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAXAAV?$allocator@UKeyCombo@@@1@PAUKeyCombo@@$$QAU3@@Z ; std::allocator_traits<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo>
PUBLIC	??$_Iter_cat@PAPAUHWND__@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAUHWND__@@@Z ; std::_Iter_cat<HWND__ * *>
PUBLIC	??$_Debug_range2@PAPAUHWND__@@@std@@YAXPAPAUHWND__@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<HWND__ * *>
PUBLIC	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
PUBLIC	??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<int *>
PUBLIC	??$_Iter_cat@PAUtagACCEL@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUtagACCEL@@@Z ; std::_Iter_cat<tagACCEL *>
PUBLIC	??$_Debug_range2@PAUtagACCEL@@@std@@YAXPAUtagACCEL@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<tagACCEL *>
PUBLIC	??$forward@UtagACCEL@@@std@@YA$$QAUtagACCEL@@AAU1@@Z ; std::forward<tagACCEL>
PUBLIC	??$construct@UtagACCEL@@U1@@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAXAAV?$allocator@UtagACCEL@@@1@PAUtagACCEL@@$$QAU3@@Z ; std::allocator_traits<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL>
PUBLIC	??$construct@UKeyCombo@@U1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@$$QAU2@@Z ; std::allocator<KeyCombo>::construct<KeyCombo,KeyCombo>
PUBLIC	??$construct@UtagACCEL@@U1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@$$QAU2@@Z ; std::allocator<tagACCEL>::construct<tagACCEL,tagACCEL>
PUBLIC	??_7Window@@6B@					; Window::`vftable'
PUBLIC	??_7StaticDialog@@6B@				; StaticDialog::`vftable'
PUBLIC	??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; `string'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::npos
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_7Shortcut@@6B@				; Shortcut::`vftable'
PUBLIC	??_C@_13KDLDGPGJ@?$AA?7?$AA?$AA@		; `string'
PUBLIC	??_7CommandShortcut@@6B@			; CommandShortcut::`vftable'
PUBLIC	??_7ScintillaKeyMap@@6B@			; ScintillaKeyMap::`vftable'
PUBLIC	??_7MacroShortcut@@6B@				; MacroShortcut::`vftable'
PUBLIC	??_7UserCommand@@6B@				; UserCommand::`vftable'
PUBLIC	??_7PluginCmdShortcut@@6B@			; PluginCmdShortcut::`vftable'
PUBLIC	??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; `string'
PUBLIC	??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; `string'
PUBLIC	??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@		; `string'
PUBLIC	??_C@_1KC@KHKGAADA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAK?$AAe?$AAy?$AAC?$AAo?$AAm?$AAb?$AAo?$AA?0?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_1KC@CCKJJADN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAH?$AAW?$AAN?$AAD?$AA_?$AA_?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1LK@BFNMKIGH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAS?$AAh?$AAo?$AAr?$AAt?$AAc?$AAu@ ; `string'
PUBLIC	??_C@_1LC@OPANGMDH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAM?$AAa?$AAc?$AAr?$AAo?$AAS?$AAh?$AAo?$AAr?$AAt?$AAc?$AAu?$AAt?$AA?0@ ; `string'
PUBLIC	??_C@_1KK@IAHNKIAK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAU?$AAs?$AAe?$AAr?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?0?$AAc?$AAl@ ; `string'
PUBLIC	??_C@_1MC@MGKONNEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAP?$AAl?$AAu?$AAg?$AAi?$AAn?$AAC?$AAm?$AAd?$AAS?$AAh?$AAo?$AAr?$AAt@ ; `string'
PUBLIC	??_C@_1LK@EFECNNFA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAS?$AAc?$AAi?$AAn?$AAt?$AAi?$AAl?$AAl?$AAa?$AAK?$AAe?$AAy?$AAM?$AAa@ ; `string'
PUBLIC	??_C@_1KC@NGOMINHO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAt?$AAa?$AAg?$AAA?$AAC?$AAC?$AAE?$AAL?$AA?0?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@ ; `string'
PUBLIC	??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ ; `string'
PUBLIC	??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@ ; `string'
PUBLIC	??_C@_1NO@IKGOHLOG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1LO@MGELDLOO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_R4Window@@6B@				; Window::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVWindow@@@8				; Window `RTTI Type Descriptor'
PUBLIC	??_R3Window@@8					; Window::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Window@@8					; Window::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Window@@8				; Window::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4StaticDialog@@6B@				; StaticDialog::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStaticDialog@@@8			; StaticDialog `RTTI Type Descriptor'
PUBLIC	??_R3StaticDialog@@8				; StaticDialog::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StaticDialog@@8				; StaticDialog::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StaticDialog@@8			; StaticDialog::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Shortcut@@6B@				; Shortcut::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVShortcut@@@8				; Shortcut `RTTI Type Descriptor'
PUBLIC	??_R3Shortcut@@8				; Shortcut::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Shortcut@@8				; Shortcut::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Shortcut@@8			; Shortcut::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CommandShortcut@@6B@			; CommandShortcut::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCommandShortcut@@@8			; CommandShortcut `RTTI Type Descriptor'
PUBLIC	??_R3CommandShortcut@@8				; CommandShortcut::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CommandShortcut@@8				; CommandShortcut::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CommandShortcut@@8		; CommandShortcut::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ScintillaKeyMap@@6B@			; ScintillaKeyMap::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVScintillaKeyMap@@@8			; ScintillaKeyMap `RTTI Type Descriptor'
PUBLIC	??_R3ScintillaKeyMap@@8				; ScintillaKeyMap::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ScintillaKeyMap@@8				; ScintillaKeyMap::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ScintillaKeyMap@@8		; ScintillaKeyMap::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4MacroShortcut@@6B@				; MacroShortcut::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMacroShortcut@@@8			; MacroShortcut `RTTI Type Descriptor'
PUBLIC	??_R3MacroShortcut@@8				; MacroShortcut::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MacroShortcut@@8				; MacroShortcut::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MacroShortcut@@8			; MacroShortcut::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4UserCommand@@6B@				; UserCommand::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVUserCommand@@@8				; UserCommand `RTTI Type Descriptor'
PUBLIC	??_R3UserCommand@@8				; UserCommand::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UserCommand@@8				; UserCommand::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UserCommand@@8			; UserCommand::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4PluginCmdShortcut@@6B@			; PluginCmdShortcut::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPluginCmdShortcut@@@8			; PluginCmdShortcut `RTTI Type Descriptor'
PUBLIC	??_R3PluginCmdShortcut@@8			; PluginCmdShortcut::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PluginCmdShortcut@@8			; PluginCmdShortcut::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PluginCmdShortcut@@8		; PluginCmdShortcut::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__invalid_parameter:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_wcslen:PROC
EXTRN	__imp__lstrcpynW@12:PROC
EXTRN	__imp__lstrlenW@4:PROC
EXTRN	__imp__SendMessageW@16:PROC
EXTRN	__imp__DestroyWindow@4:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__MoveWindow@24:PROC
EXTRN	__imp__IsWindowVisible@4:PROC
EXTRN	__imp__DialogBoxParamW@20:PROC
EXTRN	__imp__EndDialog@8:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	__imp__SetDlgItemTextW@12:PROC
EXTRN	__imp__SendDlgItemMessageW@20:PROC
EXTRN	__imp__EnableWindow@8:PROC
EXTRN	__imp__CreateAcceleratorTableW@8:PROC
EXTRN	__imp__DestroyAcceleratorTable@4:PROC
EXTRN	__imp__GetMenuStringW@20:PROC
EXTRN	__imp__GetMenuState@12:PROC
EXTRN	__imp__DrawMenuBar@4:PROC
EXTRN	__imp__ModifyMenuW@20:PROC
EXTRN	__imp__UpdateWindow@4:PROC
EXTRN	__imp__InvalidateRect@12:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__GetWindowRect@8:PROC
EXTRN	__imp__SetWindowLongW@12:PROC
EXTRN	__imp__FindWindowW@8:PROC
EXTRN	__imp__MultiByteToWideChar@24:PROC
EXTRN	__imp__WideCharToMultiByte@32:PROC
EXTRN	??_EWindow@@UAEPAXI@Z:PROC			; Window::`vector deleting destructor'
EXTRN	?create@StaticDialog@@UAEXH_N0@Z:PROC		; StaticDialog::create
EXTRN	?goToCenter@StaticDialog@@QAEXXZ:PROC		; StaticDialog::goToCenter
EXTRN	?display@StaticDialog@@UBEX_N@Z:PROC		; StaticDialog::display
EXTRN	?dlgProc@StaticDialog@@KGHPAUHWND__@@IIJ@Z:PROC	; StaticDialog::dlgProc
EXTRN	??_EStaticDialog@@UAEPAXI@Z:PROC		; StaticDialog::`vector deleting destructor'
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	__hypot:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__CrtDbgReportW:PROC
EXTRN	?_Debug_message@std@@YAXPB_W0I@Z:PROC		; std::_Debug_message
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	??_EShortcut@@UAEPAXI@Z:PROC			; Shortcut::`vector deleting destructor'
EXTRN	??_ECommandShortcut@@UAEPAXI@Z:PROC		; CommandShortcut::`vector deleting destructor'
EXTRN	??_EScintillaKeyMap@@UAEPAXI@Z:PROC		; ScintillaKeyMap::`vector deleting destructor'
EXTRN	??_EMacroShortcut@@UAEPAXI@Z:PROC		; MacroShortcut::`vector deleting destructor'
EXTRN	??_EUserCommand@@UAEPAXI@Z:PROC			; UserCommand::`vector deleting destructor'
EXTRN	??_EPluginCmdShortcut@@UAEPAXI@Z:PROC		; PluginCmdShortcut::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?_pSelf@NppParameters@@0PAV1@A:DWORD		; NppParameters::_pSelf
EXTRN	?_className@Notepad_plus_Window@@0QB_WB:BYTE	; Notepad_plus_Window::_className
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
_ignore	DB	01H DUP (?)
__Tuple_alloc DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@PluginCmdShortcut@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PluginCmdShortcut@@8 DD FLAT:??_R0?AVPluginCmdShortcut@@@8 ; PluginCmdShortcut::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PluginCmdShortcut@@8
rdata$r	ENDS
;	COMDAT ??_R2PluginCmdShortcut@@8
rdata$r	SEGMENT
??_R2PluginCmdShortcut@@8 DD FLAT:??_R1A@?0A@EA@PluginCmdShortcut@@8 ; PluginCmdShortcut::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CommandShortcut@@8
	DD	FLAT:??_R1A@?0A@EA@Shortcut@@8
	DD	FLAT:??_R1A@?0A@EA@StaticDialog@@8
	DD	FLAT:??_R1A@?0A@EA@Window@@8
rdata$r	ENDS
;	COMDAT ??_R3PluginCmdShortcut@@8
rdata$r	SEGMENT
??_R3PluginCmdShortcut@@8 DD 00H			; PluginCmdShortcut::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2PluginCmdShortcut@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPluginCmdShortcut@@@8
data$r	SEGMENT
??_R0?AVPluginCmdShortcut@@@8 DD FLAT:??_7type_info@@6B@ ; PluginCmdShortcut `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPluginCmdShortcut@@', 00H
data$r	ENDS
;	COMDAT ??_R4PluginCmdShortcut@@6B@
rdata$r	SEGMENT
??_R4PluginCmdShortcut@@6B@ DD 00H			; PluginCmdShortcut::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPluginCmdShortcut@@@8
	DD	FLAT:??_R3PluginCmdShortcut@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@UserCommand@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UserCommand@@8 DD FLAT:??_R0?AVUserCommand@@@8 ; UserCommand::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UserCommand@@8
rdata$r	ENDS
;	COMDAT ??_R2UserCommand@@8
rdata$r	SEGMENT
??_R2UserCommand@@8 DD FLAT:??_R1A@?0A@EA@UserCommand@@8 ; UserCommand::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CommandShortcut@@8
	DD	FLAT:??_R1A@?0A@EA@Shortcut@@8
	DD	FLAT:??_R1A@?0A@EA@StaticDialog@@8
	DD	FLAT:??_R1A@?0A@EA@Window@@8
rdata$r	ENDS
;	COMDAT ??_R3UserCommand@@8
rdata$r	SEGMENT
??_R3UserCommand@@8 DD 00H				; UserCommand::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2UserCommand@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUserCommand@@@8
data$r	SEGMENT
??_R0?AVUserCommand@@@8 DD FLAT:??_7type_info@@6B@	; UserCommand `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUserCommand@@', 00H
data$r	ENDS
;	COMDAT ??_R4UserCommand@@6B@
rdata$r	SEGMENT
??_R4UserCommand@@6B@ DD 00H				; UserCommand::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVUserCommand@@@8
	DD	FLAT:??_R3UserCommand@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MacroShortcut@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MacroShortcut@@8 DD FLAT:??_R0?AVMacroShortcut@@@8 ; MacroShortcut::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MacroShortcut@@8
rdata$r	ENDS
;	COMDAT ??_R2MacroShortcut@@8
rdata$r	SEGMENT
??_R2MacroShortcut@@8 DD FLAT:??_R1A@?0A@EA@MacroShortcut@@8 ; MacroShortcut::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CommandShortcut@@8
	DD	FLAT:??_R1A@?0A@EA@Shortcut@@8
	DD	FLAT:??_R1A@?0A@EA@StaticDialog@@8
	DD	FLAT:??_R1A@?0A@EA@Window@@8
rdata$r	ENDS
;	COMDAT ??_R3MacroShortcut@@8
rdata$r	SEGMENT
??_R3MacroShortcut@@8 DD 00H				; MacroShortcut::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2MacroShortcut@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMacroShortcut@@@8
data$r	SEGMENT
??_R0?AVMacroShortcut@@@8 DD FLAT:??_7type_info@@6B@	; MacroShortcut `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMacroShortcut@@', 00H
data$r	ENDS
;	COMDAT ??_R4MacroShortcut@@6B@
rdata$r	SEGMENT
??_R4MacroShortcut@@6B@ DD 00H				; MacroShortcut::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMacroShortcut@@@8
	DD	FLAT:??_R3MacroShortcut@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ScintillaKeyMap@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ScintillaKeyMap@@8 DD FLAT:??_R0?AVScintillaKeyMap@@@8 ; ScintillaKeyMap::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ScintillaKeyMap@@8
rdata$r	ENDS
;	COMDAT ??_R2ScintillaKeyMap@@8
rdata$r	SEGMENT
??_R2ScintillaKeyMap@@8 DD FLAT:??_R1A@?0A@EA@ScintillaKeyMap@@8 ; ScintillaKeyMap::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Shortcut@@8
	DD	FLAT:??_R1A@?0A@EA@StaticDialog@@8
	DD	FLAT:??_R1A@?0A@EA@Window@@8
rdata$r	ENDS
;	COMDAT ??_R3ScintillaKeyMap@@8
rdata$r	SEGMENT
??_R3ScintillaKeyMap@@8 DD 00H				; ScintillaKeyMap::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2ScintillaKeyMap@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVScintillaKeyMap@@@8
data$r	SEGMENT
??_R0?AVScintillaKeyMap@@@8 DD FLAT:??_7type_info@@6B@	; ScintillaKeyMap `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVScintillaKeyMap@@', 00H
data$r	ENDS
;	COMDAT ??_R4ScintillaKeyMap@@6B@
rdata$r	SEGMENT
??_R4ScintillaKeyMap@@6B@ DD 00H			; ScintillaKeyMap::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVScintillaKeyMap@@@8
	DD	FLAT:??_R3ScintillaKeyMap@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CommandShortcut@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CommandShortcut@@8 DD FLAT:??_R0?AVCommandShortcut@@@8 ; CommandShortcut::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CommandShortcut@@8
rdata$r	ENDS
;	COMDAT ??_R2CommandShortcut@@8
rdata$r	SEGMENT
??_R2CommandShortcut@@8 DD FLAT:??_R1A@?0A@EA@CommandShortcut@@8 ; CommandShortcut::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Shortcut@@8
	DD	FLAT:??_R1A@?0A@EA@StaticDialog@@8
	DD	FLAT:??_R1A@?0A@EA@Window@@8
rdata$r	ENDS
;	COMDAT ??_R3CommandShortcut@@8
rdata$r	SEGMENT
??_R3CommandShortcut@@8 DD 00H				; CommandShortcut::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CommandShortcut@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCommandShortcut@@@8
data$r	SEGMENT
??_R0?AVCommandShortcut@@@8 DD FLAT:??_7type_info@@6B@	; CommandShortcut `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCommandShortcut@@', 00H
data$r	ENDS
;	COMDAT ??_R4CommandShortcut@@6B@
rdata$r	SEGMENT
??_R4CommandShortcut@@6B@ DD 00H			; CommandShortcut::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCommandShortcut@@@8
	DD	FLAT:??_R3CommandShortcut@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Shortcut@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Shortcut@@8 DD FLAT:??_R0?AVShortcut@@@8	; Shortcut::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Shortcut@@8
rdata$r	ENDS
;	COMDAT ??_R2Shortcut@@8
rdata$r	SEGMENT
??_R2Shortcut@@8 DD FLAT:??_R1A@?0A@EA@Shortcut@@8	; Shortcut::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@StaticDialog@@8
	DD	FLAT:??_R1A@?0A@EA@Window@@8
rdata$r	ENDS
;	COMDAT ??_R3Shortcut@@8
rdata$r	SEGMENT
??_R3Shortcut@@8 DD 00H					; Shortcut::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2Shortcut@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVShortcut@@@8
data$r	SEGMENT
??_R0?AVShortcut@@@8 DD FLAT:??_7type_info@@6B@		; Shortcut `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVShortcut@@', 00H
data$r	ENDS
;	COMDAT ??_R4Shortcut@@6B@
rdata$r	SEGMENT
??_R4Shortcut@@6B@ DD 00H				; Shortcut::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVShortcut@@@8
	DD	FLAT:??_R3Shortcut@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
data$r	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StaticDialog@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StaticDialog@@8 DD FLAT:??_R0?AVStaticDialog@@@8 ; StaticDialog::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StaticDialog@@8
rdata$r	ENDS
;	COMDAT ??_R2StaticDialog@@8
rdata$r	SEGMENT
??_R2StaticDialog@@8 DD FLAT:??_R1A@?0A@EA@StaticDialog@@8 ; StaticDialog::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Window@@8
rdata$r	ENDS
;	COMDAT ??_R3StaticDialog@@8
rdata$r	SEGMENT
??_R3StaticDialog@@8 DD 00H				; StaticDialog::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2StaticDialog@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStaticDialog@@@8
data$r	SEGMENT
??_R0?AVStaticDialog@@@8 DD FLAT:??_7type_info@@6B@	; StaticDialog `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStaticDialog@@', 00H
data$r	ENDS
;	COMDAT ??_R4StaticDialog@@6B@
rdata$r	SEGMENT
??_R4StaticDialog@@6B@ DD 00H				; StaticDialog::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStaticDialog@@@8
	DD	FLAT:??_R3StaticDialog@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Window@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Window@@8 DD FLAT:??_R0?AVWindow@@@8	; Window::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Window@@8
rdata$r	ENDS
;	COMDAT ??_R2Window@@8
rdata$r	SEGMENT
??_R2Window@@8 DD FLAT:??_R1A@?0A@EA@Window@@8		; Window::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Window@@8
rdata$r	SEGMENT
??_R3Window@@8 DD 00H					; Window::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Window@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVWindow@@@8
data$r	SEGMENT
??_R0?AVWindow@@@8 DD FLAT:??_7type_info@@6B@		; Window `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVWindow@@', 00H
data$r	ENDS
;	COMDAT ??_R4Window@@6B@
rdata$r	SEGMENT
??_R4Window@@6B@ DD 00H					; Window::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVWindow@@@8
	DD	FLAT:??_R3Window@@8
rdata$r	ENDS
;	COMDAT ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '2', 00H, '.', 00H, '0', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H, 'e'
	DB	00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1LO@MGELDLOO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1LO@MGELDLOO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'i', 00H, 'n'
	DB	00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, '_', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'p'
	DB	00H, 'a', 00H, 't', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1NO@IKGOHLOG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1NO@IKGOHLOG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'K', 00H
	DB	'e', 00H, 'y', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'b', 00H, 'o'
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H
	DB	':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, '+', 00H, '=', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
CONST	SEGMENT
??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'o', 00H, 'f', 00H
	DB	'f', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u'
	DB	00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H
	DB	'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
CONST	SEGMENT
??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ DB '"'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'a', 00H
	DB	'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+', 00H, ' '
	DB	00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H
	DB	'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'A', 00H
	DB	'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, '"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
CONST	SEGMENT
??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ DB 'Standa'
	DB	'rd C++ Libraries Invalid Argument', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
CONST	SEGMENT
??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@ DB 'invalid v'
	DB	'ector<T> subscript', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1KC@NGOMINHO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAt?$AAa?$AAg?$AAA?$AAC?$AAC?$AAE?$AAL?$AA?0?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1KC@NGOMINHO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAt?$AAa?$AAg?$AAA?$AAC?$AAC?$AAE?$AAL?$AA?0?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 't', 00H
	DB	'a', 00H, 'g', 00H, 'A', 00H, 'C', 00H, 'C', 00H, 'E', 00H, 'L'
	DB	00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a'
	DB	00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'g', 00H
	DB	'A', 00H, 'C', 00H, 'C', 00H, 'E', 00H, 'L', 00H, '>', 00H, ' '
	DB	00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '['
	DB	00H, ']', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@EFECNNFA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAS?$AAc?$AAi?$AAn?$AAt?$AAi?$AAl?$AAl?$AAa?$AAK?$AAe?$AAy?$AAM?$AAa@
CONST	SEGMENT
??_C@_1LK@EFECNNFA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAS?$AAc?$AAi?$AAn?$AAt?$AAi?$AAl?$AAl?$AAa?$AAK?$AAe?$AAy?$AAM?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'S', 00H, 'c', 00H
	DB	'i', 00H, 'n', 00H, 't', 00H, 'i', 00H, 'l', 00H, 'l', 00H, 'a'
	DB	00H, 'K', 00H, 'e', 00H, 'y', 00H, 'M', 00H, 'a', 00H, 'p', 00H
	DB	',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, ' ', 00H, 'S', 00H, 'c', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'i', 00H, 'l', 00H, 'l', 00H, 'a', 00H, 'K', 00H, 'e', 00H
	DB	'y', 00H, 'M', 00H, 'a', 00H, 'p', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '[', 00H, ']'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1MC@MGKONNEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAP?$AAl?$AAu?$AAg?$AAi?$AAn?$AAC?$AAm?$AAd?$AAS?$AAh?$AAo?$AAr?$AAt@
CONST	SEGMENT
??_C@_1MC@MGKONNEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAP?$AAl?$AAu?$AAg?$AAi?$AAn?$AAC?$AAm?$AAd?$AAS?$AAh?$AAo?$AAr?$AAt@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'P', 00H, 'l', 00H
	DB	'u', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'm', 00H, 'd'
	DB	00H, 'S', 00H, 'h', 00H, 'o', 00H, 'r', 00H, 't', 00H, 'c', 00H
	DB	'u', 00H, 't', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's'
	DB	00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H
	DB	':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l', 00H
	DB	'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'P', 00H, 'l', 00H, 'u'
	DB	00H, 'g', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'm', 00H, 'd', 00H
	DB	'S', 00H, 'h', 00H, 'o', 00H, 'r', 00H, 't', 00H, 'c', 00H, 'u'
	DB	00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H
	DB	'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, '[', 00H, ']', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1KK@IAHNKIAK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAU?$AAs?$AAe?$AAr?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?0?$AAc?$AAl@
CONST	SEGMENT
??_C@_1KK@IAHNKIAK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAU?$AAs?$AAe?$AAr?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?0?$AAc?$AAl@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'U', 00H, 's', 00H
	DB	'e', 00H, 'r', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'a'
	DB	00H, 'n', 00H, 'd', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':'
	DB	00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'U', 00H, 's', 00H
	DB	'e', 00H, 'r', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'a'
	DB	00H, 'n', 00H, 'd', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H
	DB	':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, '[', 00H, ']', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LC@OPANGMDH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAM?$AAa?$AAc?$AAr?$AAo?$AAS?$AAh?$AAo?$AAr?$AAt?$AAc?$AAu?$AAt?$AA?0@
CONST	SEGMENT
??_C@_1LC@OPANGMDH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAM?$AAa?$AAc?$AAr?$AAo?$AAS?$AAh?$AAo?$AAr?$AAt?$AAc?$AAu?$AAt?$AA?0@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'M', 00H, 'a', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'r'
	DB	00H, 't', 00H, 'c', 00H, 'u', 00H, 't', 00H, ',', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<'
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H
	DB	'M', 00H, 'a', 00H, 'c', 00H, 'r', 00H, 'o', 00H, 'S', 00H, 'h'
	DB	00H, 'o', 00H, 'r', 00H, 't', 00H, 'c', 00H, 'u', 00H, 't', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p'
	DB	00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, '[', 00H, ']', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@BFNMKIGH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAS?$AAh?$AAo?$AAr?$AAt?$AAc?$AAu@
CONST	SEGMENT
??_C@_1LK@BFNMKIGH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAS?$AAh?$AAo?$AAr?$AAt?$AAc?$AAu@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'C', 00H, 'o', 00H
	DB	'm', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'S', 00H, 'h'
	DB	00H, 'o', 00H, 'r', 00H, 't', 00H, 'c', 00H, 'u', 00H, 't', 00H
	DB	',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, ' ', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'a'
	DB	00H, 'n', 00H, 'd', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'r', 00H
	DB	't', 00H, 'c', 00H, 'u', 00H, 't', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '[', 00H, ']'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1KC@CCKJJADN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAH?$AAW?$AAN?$AAD?$AA_?$AA_?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1KC@CCKJJADN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAH?$AAW?$AAN?$AAD?$AA_?$AA_?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'H', 00H
	DB	'W', 00H, 'N', 00H, 'D', 00H, '_', 00H, '_', 00H, ' ', 00H, '*'
	DB	00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a'
	DB	00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 'H', 00H, 'W', 00H, 'N', 00H
	DB	'D', 00H, '_', 00H, '_', 00H, ' ', 00H, '*', 00H, '>', 00H, ' '
	DB	00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '['
	DB	00H, ']', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
CONST	SEGMENT
??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, 's', 00H, 'i'
	DB	00H, 'd', 00H, 'e', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H
	DB	' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1KC@KHKGAADA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAK?$AAe?$AAy?$AAC?$AAo?$AAm?$AAb?$AAo?$AA?0?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1KC@KHKGAADA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAK?$AAe?$AAy?$AAC?$AAo?$AAm?$AAb?$AAo?$AA?0?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'K', 00H
	DB	'e', 00H, 'y', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'b', 00H, 'o'
	DB	00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a'
	DB	00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 'K', 00H, 'e', 00H, 'y', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'b', 00H, 'o', 00H, '>', 00H, ' '
	DB	00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '['
	DB	00H, ']', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ DB '%', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
CONST	SEGMENT
??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ DB '"'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'a', 00H
	DB	'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+', 00H, ' '
	DB	00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H
	DB	'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'O', 00H, 'u', 00H, 't'
	DB	00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'R', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
CONST	SEGMENT
??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ DB 'Stand'
	DB	'ard C++ Libraries Out of Range', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i'
	DB	00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 'g', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '2', 00H, '.', 00H, '0', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H
	DB	's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i'
	DB	00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 'g', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '2', 00H, '.', 00H, '0', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_7PluginCmdShortcut@@6B@
CONST	SEGMENT
??_7PluginCmdShortcut@@6B@ DD FLAT:??_R4PluginCmdShortcut@@6B@ ; PluginCmdShortcut::`vftable'
	DD	FLAT:??_EPluginCmdShortcut@@UAEPAXI@Z
	DD	FLAT:?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
	DD	FLAT:?destroy@StaticDialog@@UAEXXZ
	DD	FLAT:?display@StaticDialog@@UBEX_N@Z
	DD	FLAT:?reSizeTo@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?redraw@Window@@UBEX_N@Z
	DD	FLAT:?getClientRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWindowRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWidth@Window@@UBEHXZ
	DD	FLAT:?getHeight@Window@@UBEHXZ
	DD	FLAT:?isVisible@Window@@UBE_NXZ
	DD	FLAT:?create@StaticDialog@@UAEXH_N0@Z
	DD	FLAT:?isCreated@StaticDialog@@UBE_NXZ
	DD	FLAT:?run_dlgProc@Shortcut@@MAGHIIJ@Z
	DD	FLAT:?doDialog@Shortcut@@UAEHXZ
	DD	FLAT:?isValid@PluginCmdShortcut@@UBE_NXZ
	DD	FLAT:?isEnabled@Shortcut@@UBE_NXZ
	DD	FLAT:?toString@Shortcut@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
CONST	ENDS
;	COMDAT ??_7UserCommand@@6B@
CONST	SEGMENT
??_7UserCommand@@6B@ DD FLAT:??_R4UserCommand@@6B@	; UserCommand::`vftable'
	DD	FLAT:??_EUserCommand@@UAEPAXI@Z
	DD	FLAT:?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
	DD	FLAT:?destroy@StaticDialog@@UAEXXZ
	DD	FLAT:?display@StaticDialog@@UBEX_N@Z
	DD	FLAT:?reSizeTo@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?redraw@Window@@UBEX_N@Z
	DD	FLAT:?getClientRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWindowRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWidth@Window@@UBEHXZ
	DD	FLAT:?getHeight@Window@@UBEHXZ
	DD	FLAT:?isVisible@Window@@UBE_NXZ
	DD	FLAT:?create@StaticDialog@@UAEXH_N0@Z
	DD	FLAT:?isCreated@StaticDialog@@UBE_NXZ
	DD	FLAT:?run_dlgProc@Shortcut@@MAGHIIJ@Z
	DD	FLAT:?doDialog@Shortcut@@UAEHXZ
	DD	FLAT:?isValid@Shortcut@@UBE_NXZ
	DD	FLAT:?isEnabled@Shortcut@@UBE_NXZ
	DD	FLAT:?toString@Shortcut@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
CONST	ENDS
;	COMDAT ??_7MacroShortcut@@6B@
CONST	SEGMENT
??_7MacroShortcut@@6B@ DD FLAT:??_R4MacroShortcut@@6B@	; MacroShortcut::`vftable'
	DD	FLAT:??_EMacroShortcut@@UAEPAXI@Z
	DD	FLAT:?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
	DD	FLAT:?destroy@StaticDialog@@UAEXXZ
	DD	FLAT:?display@StaticDialog@@UBEX_N@Z
	DD	FLAT:?reSizeTo@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?redraw@Window@@UBEX_N@Z
	DD	FLAT:?getClientRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWindowRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWidth@Window@@UBEHXZ
	DD	FLAT:?getHeight@Window@@UBEHXZ
	DD	FLAT:?isVisible@Window@@UBE_NXZ
	DD	FLAT:?create@StaticDialog@@UAEXH_N0@Z
	DD	FLAT:?isCreated@StaticDialog@@UBE_NXZ
	DD	FLAT:?run_dlgProc@Shortcut@@MAGHIIJ@Z
	DD	FLAT:?doDialog@Shortcut@@UAEHXZ
	DD	FLAT:?isValid@Shortcut@@UBE_NXZ
	DD	FLAT:?isEnabled@Shortcut@@UBE_NXZ
	DD	FLAT:?toString@Shortcut@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
CONST	ENDS
;	COMDAT ??_7ScintillaKeyMap@@6B@
CONST	SEGMENT
??_7ScintillaKeyMap@@6B@ DD FLAT:??_R4ScintillaKeyMap@@6B@ ; ScintillaKeyMap::`vftable'
	DD	FLAT:??_EScintillaKeyMap@@UAEPAXI@Z
	DD	FLAT:?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
	DD	FLAT:?destroy@StaticDialog@@UAEXXZ
	DD	FLAT:?display@StaticDialog@@UBEX_N@Z
	DD	FLAT:?reSizeTo@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?redraw@Window@@UBEX_N@Z
	DD	FLAT:?getClientRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWindowRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWidth@Window@@UBEHXZ
	DD	FLAT:?getHeight@Window@@UBEHXZ
	DD	FLAT:?isVisible@Window@@UBE_NXZ
	DD	FLAT:?create@StaticDialog@@UAEXH_N0@Z
	DD	FLAT:?isCreated@StaticDialog@@UBE_NXZ
	DD	FLAT:?run_dlgProc@ScintillaKeyMap@@MAGHIIJ@Z
	DD	FLAT:?doDialog@ScintillaKeyMap@@UAEHXZ
	DD	FLAT:?isValid@Shortcut@@UBE_NXZ
	DD	FLAT:?isEnabled@ScintillaKeyMap@@UBE_NXZ
	DD	FLAT:?toString@ScintillaKeyMap@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
CONST	ENDS
;	COMDAT ??_7CommandShortcut@@6B@
CONST	SEGMENT
??_7CommandShortcut@@6B@ DD FLAT:??_R4CommandShortcut@@6B@ ; CommandShortcut::`vftable'
	DD	FLAT:??_ECommandShortcut@@UAEPAXI@Z
	DD	FLAT:?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
	DD	FLAT:?destroy@StaticDialog@@UAEXXZ
	DD	FLAT:?display@StaticDialog@@UBEX_N@Z
	DD	FLAT:?reSizeTo@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?redraw@Window@@UBEX_N@Z
	DD	FLAT:?getClientRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWindowRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWidth@Window@@UBEHXZ
	DD	FLAT:?getHeight@Window@@UBEHXZ
	DD	FLAT:?isVisible@Window@@UBE_NXZ
	DD	FLAT:?create@StaticDialog@@UAEXH_N0@Z
	DD	FLAT:?isCreated@StaticDialog@@UBE_NXZ
	DD	FLAT:?run_dlgProc@Shortcut@@MAGHIIJ@Z
	DD	FLAT:?doDialog@Shortcut@@UAEHXZ
	DD	FLAT:?isValid@Shortcut@@UBE_NXZ
	DD	FLAT:?isEnabled@Shortcut@@UBE_NXZ
	DD	FLAT:?toString@Shortcut@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
CONST	ENDS
;	COMDAT ??_C@_13KDLDGPGJ@?$AA?7?$AA?$AA@
CONST	SEGMENT
??_C@_13KDLDGPGJ@?$AA?7?$AA?$AA@ DB 09H, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_7Shortcut@@6B@
CONST	SEGMENT
??_7Shortcut@@6B@ DD FLAT:??_R4Shortcut@@6B@		; Shortcut::`vftable'
	DD	FLAT:??_EShortcut@@UAEPAXI@Z
	DD	FLAT:?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
	DD	FLAT:?destroy@StaticDialog@@UAEXXZ
	DD	FLAT:?display@StaticDialog@@UBEX_N@Z
	DD	FLAT:?reSizeTo@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?redraw@Window@@UBEX_N@Z
	DD	FLAT:?getClientRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWindowRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWidth@Window@@UBEHXZ
	DD	FLAT:?getHeight@Window@@UBEHXZ
	DD	FLAT:?isVisible@Window@@UBE_NXZ
	DD	FLAT:?create@StaticDialog@@UAEXH_N0@Z
	DD	FLAT:?isCreated@StaticDialog@@UBE_NXZ
	DD	FLAT:?run_dlgProc@Shortcut@@MAGHIIJ@Z
	DD	FLAT:?doDialog@Shortcut@@UAEHXZ
	DD	FLAT:?isValid@Shortcut@@UBE_NXZ
	DD	FLAT:?isEnabled@Shortcut@@UBE_NXZ
	DD	FLAT:?toString@Shortcut@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
CONST	ENDS
;	COMDAT ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
CONST	SEGMENT
?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB DD 0ffffffffH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::npos
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ DB 'I'
	DB	00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'O', 00H
	DB	'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, ' '
	DB	00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H, 'P', 00H
	DB	'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '2', 00H, '.', 00H, '0', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H, 't'
	DB	00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_7StaticDialog@@6B@
CONST	SEGMENT
??_7StaticDialog@@6B@ DD FLAT:??_R4StaticDialog@@6B@	; StaticDialog::`vftable'
	DD	FLAT:??_EStaticDialog@@UAEPAXI@Z
	DD	FLAT:?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
	DD	FLAT:?destroy@StaticDialog@@UAEXXZ
	DD	FLAT:?display@StaticDialog@@UBEX_N@Z
	DD	FLAT:?reSizeTo@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?redraw@Window@@UBEX_N@Z
	DD	FLAT:?getClientRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWindowRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWidth@Window@@UBEHXZ
	DD	FLAT:?getHeight@Window@@UBEHXZ
	DD	FLAT:?isVisible@Window@@UBE_NXZ
	DD	FLAT:?create@StaticDialog@@UAEXH_N0@Z
	DD	FLAT:?isCreated@StaticDialog@@UBE_NXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7Window@@6B@
CONST	SEGMENT
??_7Window@@6B@ DD FLAT:??_R4Window@@6B@		; Window::`vftable'
	DD	FLAT:??_EWindow@@UAEPAXI@Z
	DD	FLAT:?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
	DD	FLAT:__purecall
	DD	FLAT:?display@Window@@UBEX_N@Z
	DD	FLAT:?reSizeTo@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?redraw@Window@@UBEX_N@Z
	DD	FLAT:?getClientRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWindowRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWidth@Window@@UBEHXZ
	DD	FLAT:?getHeight@Window@@UBEHXZ
	DD	FLAT:?isVisible@Window@@UBE_NXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@UtagACCEL@@U1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@$$QAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@UtagACCEL@@U1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@$$QAU2@@Z$0
__ehfuncinfo$??$construct@UtagACCEL@@U1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@$$QAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@UtagACCEL@@U1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@$$QAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@UKeyCombo@@U1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@$$QAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@UKeyCombo@@U1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@$$QAU2@@Z$0
__ehfuncinfo$??$construct@UKeyCombo@@U1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@$$QAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@UKeyCombo@@U1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@$$QAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUtagACCEL@@PAU1@V?$allocator@UtagACCEL@@@std@@U1@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUtagACCEL@@PAU1@V?$allocator@UtagACCEL@@@std@@U1@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUtagACCEL@@PAU1@V?$allocator@UtagACCEL@@@std@@U1@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUtagACCEL@@PAU1@V?$allocator@UtagACCEL@@@std@@U1@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUtagACCEL@@PAU1@V?$allocator@UtagACCEL@@@std@@U1@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUtagACCEL@@PAU1@V?$allocator@UtagACCEL@@@std@@U1@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUtagACCEL@@PAU1@V?$allocator@UtagACCEL@@@std@@U1@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUtagACCEL@@PAU1@V?$allocator@UtagACCEL@@@std@@U1@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@U1@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@U1@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@U1@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@U1@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@U1@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@U1@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@U1@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@U1@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@V?$allocator@VPluginCmdShortcut@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@V?$allocator@VPluginCmdShortcut@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@V?$allocator@VPluginCmdShortcut@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@V?$allocator@VPluginCmdShortcut@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@V?$allocator@VPluginCmdShortcut@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@V?$allocator@VPluginCmdShortcut@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@V?$allocator@VPluginCmdShortcut@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@V?$allocator@VPluginCmdShortcut@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBVUserCommand@@PAV1@V?$allocator@VUserCommand@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBVUserCommand@@PAV1@V?$allocator@VUserCommand@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBVUserCommand@@PAV1@V?$allocator@VUserCommand@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBVUserCommand@@PAV1@V?$allocator@VUserCommand@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBVUserCommand@@PAV1@V?$allocator@VUserCommand@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBVUserCommand@@PAV1@V?$allocator@VUserCommand@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBVUserCommand@@PAV1@V?$allocator@VUserCommand@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBVUserCommand@@PAV1@V?$allocator@VUserCommand@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBVMacroShortcut@@PAV1@V?$allocator@VMacroShortcut@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBVMacroShortcut@@PAV1@V?$allocator@VMacroShortcut@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBVMacroShortcut@@PAV1@V?$allocator@VMacroShortcut@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBVMacroShortcut@@PAV1@V?$allocator@VMacroShortcut@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBVMacroShortcut@@PAV1@V?$allocator@VMacroShortcut@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBVMacroShortcut@@PAV1@V?$allocator@VMacroShortcut@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBVMacroShortcut@@PAV1@V?$allocator@VMacroShortcut@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBVMacroShortcut@@PAV1@V?$allocator@VMacroShortcut@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBVCommandShortcut@@PAV1@V?$allocator@VCommandShortcut@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBVCommandShortcut@@PAV1@V?$allocator@VCommandShortcut@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBVCommandShortcut@@PAV1@V?$allocator@VCommandShortcut@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBVCommandShortcut@@PAV1@V?$allocator@VCommandShortcut@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBVCommandShortcut@@PAV1@V?$allocator@VCommandShortcut@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBVCommandShortcut@@PAV1@V?$allocator@VCommandShortcut@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBVCommandShortcut@@PAV1@V?$allocator@VCommandShortcut@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBVCommandShortcut@@PAV1@V?$allocator@VCommandShortcut@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@V?$allocator@UrecordedMacroStep@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@V?$allocator@UrecordedMacroStep@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@V?$allocator@UrecordedMacroStep@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@V?$allocator@UrecordedMacroStep@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@V?$allocator@UrecordedMacroStep@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@V?$allocator@UrecordedMacroStep@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@V?$allocator@UrecordedMacroStep@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@V?$allocator@UrecordedMacroStep@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0
__ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@UtagACCEL@@AAU1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@UtagACCEL@@AAU1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@AAU2@@Z$0
__ehfuncinfo$??$construct@UtagACCEL@@AAU1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@UtagACCEL@@AAU1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@YAPBVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@YAPBVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@YAPBVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@YAPBVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@YAPBVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@YAPBVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@YAPBVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@YAPBVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@YAPBVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@YAPBVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@YAPBVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@YAPBVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@YAPBVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@YAPBVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@YAPBVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@YAPBVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@HH@?$allocator@H@std@@QAEXPAH$$QAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@HH@?$allocator@H@std@@QAEXPAH$$QAH@Z$0
__ehfuncinfo$??$construct@HH@?$allocator@H@std@@QAEXPAH$$QAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@HH@?$allocator@H@std@@QAEXPAH$$QAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PAUHWND__@@AAPAU1@@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@AAPAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAUHWND__@@AAPAU1@@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@AAPAU2@@Z$0
__ehfuncinfo$??$construct@PAUHWND__@@AAPAU1@@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@AAPAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAUHWND__@@AAPAU1@@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@AAPAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@YAPBUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@YAPBUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@YAPBUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@YAPBUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@UKeyCombo@@AAU1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@UKeyCombo@@AAU1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@AAU2@@Z$0
__ehfuncinfo$??$construct@UKeyCombo@@AAU1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@UKeyCombo@@AAU1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@YAPBUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@YAPBUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@YAPBUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@YAPBUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$1
__ehfuncinfo$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@PAVPluginCmdShortcut@@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@@std@@YAPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@PAVPluginCmdShortcut@@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@@std@@YAPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@PAVPluginCmdShortcut@@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@@std@@YAPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@PAVPluginCmdShortcut@@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@@std@@YAPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@PAVPluginCmdShortcut@@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@@std@@YAPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z$3
__ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@PAVPluginCmdShortcut@@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@@std@@YAPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@PAVPluginCmdShortcut@@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@@std@@YAPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@PAVUserCommand@@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@@std@@YAPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@PAVUserCommand@@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@@std@@YAPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@PAVUserCommand@@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@@std@@YAPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@PAVUserCommand@@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@@std@@YAPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@PAVUserCommand@@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@@std@@YAPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z$3
__ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@PAVUserCommand@@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@@std@@YAPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@PAVUserCommand@@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@@std@@YAPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@PAVMacroShortcut@@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@@std@@YAPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@PAVMacroShortcut@@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@@std@@YAPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@PAVMacroShortcut@@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@@std@@YAPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@PAVMacroShortcut@@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@@std@@YAPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@PAVMacroShortcut@@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@@std@@YAPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z$3
__ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@PAVMacroShortcut@@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@@std@@YAPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@PAVMacroShortcut@@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@@std@@YAPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@PAVCommandShortcut@@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@@std@@YAPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@PAVCommandShortcut@@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@@std@@YAPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@PAVCommandShortcut@@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@@std@@YAPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@PAVCommandShortcut@@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@@std@@YAPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@PAVCommandShortcut@@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@@std@@YAPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z$3
__ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@PAVCommandShortcut@@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@@std@@YAPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@PAVCommandShortcut@@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@@std@@YAPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@PAUrecordedMacroStep@@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@@std@@YAPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@PAUrecordedMacroStep@@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@@std@@YAPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@PAUrecordedMacroStep@@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@@std@@YAPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@PAUrecordedMacroStep@@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@@std@@YAPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@PAUrecordedMacroStep@@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@@std@@YAPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z$3
__ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@PAUrecordedMacroStep@@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@@std@@YAPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@PAUrecordedMacroStep@@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@@std@@YAPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@PAUKeyCombo@@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@@std@@YAPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@PAUKeyCombo@@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@@std@@YAPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@PAUKeyCombo@@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@@std@@YAPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@PAUKeyCombo@@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@@std@@YAPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@PAUKeyCombo@@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@@std@@YAPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z$3
__ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@PAUKeyCombo@@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@@std@@YAPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@PAUKeyCombo@@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@@std@@YAPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z$3
__ehfuncinfo$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
__ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@1@0PAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@1@0PAV2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@1@0PAV2@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@1@0PAV2@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@1@0PAV2@@Z$3
__ehfuncinfo$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@1@0PAV2@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@1@0PAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@PAVPluginCmdShortcut@@PBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@PAVPluginCmdShortcut@@PBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@PAVPluginCmdShortcut@@PBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@PAVPluginCmdShortcut@@PBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@1@0PAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@1@0PAV2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@1@0PAV2@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@1@0PAV2@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@1@0PAV2@@Z$3
__ehfuncinfo$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@1@0PAV2@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@1@0PAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@PAVUserCommand@@PBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@PAVUserCommand@@PBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@PAVUserCommand@@PBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@PAVUserCommand@@PBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@1@0PAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@1@0PAV2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@1@0PAV2@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@1@0PAV2@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@1@0PAV2@@Z$3
__ehfuncinfo$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@1@0PAV2@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@1@0PAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@PAVMacroShortcut@@PBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@PAVMacroShortcut@@PBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@PAVMacroShortcut@@PBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@PAVMacroShortcut@@PBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@1@0PAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@1@0PAV2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@1@0PAV2@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@1@0PAV2@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@1@0PAV2@@Z$3
__ehfuncinfo$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@1@0PAV2@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@1@0PAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@PAVCommandShortcut@@PBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@PAVCommandShortcut@@PBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@PAVCommandShortcut@@PBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@PAVCommandShortcut@@PBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@1@0PAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@1@0PAU2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@1@0PAU2@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@1@0PAU2@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@1@0PAU2@@Z$3
__ehfuncinfo$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@1@0PAU2@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@1@0PAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@PAUrecordedMacroStep@@PBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@PAUrecordedMacroStep@@PBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@PAUrecordedMacroStep@@PBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@PAUrecordedMacroStep@@PBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@1@0PAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@1@0PAU2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@1@0PAU2@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@1@0PAU2@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@1@0PAU2@@Z$3
__ehfuncinfo$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@1@0PAU2@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@1@0PAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEXPAUtagACCEL@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEXPAUtagACCEL@@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEXPAUtagACCEL@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEXPAUtagACCEL@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@ABV?$allocator@UtagACCEL@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@ABV?$allocator@UtagACCEL@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@ABV?$allocator@UtagACCEL@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@ABV?$allocator@UtagACCEL@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?end@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?end@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ$0
__ehfuncinfo$?end@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?end@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?begin@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?begin@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ$0
__ehfuncinfo$?begin@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?begin@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z$5
__ehfuncinfo$??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z$4
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VPluginCmdShortcut@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VPluginCmdShortcut@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VPluginCmdShortcut@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VPluginCmdShortcut@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@ABV3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@ABV3@@Z$0
__ehfuncinfo$?construct@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@ABV3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@ABV3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?end@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?end@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ$0
__ehfuncinfo$?end@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?end@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?begin@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?begin@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ$0
__ehfuncinfo$?begin@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?begin@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z$5
__ehfuncinfo$??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z$4
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@ABV?$allocator@VUserCommand@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@ABV?$allocator@VUserCommand@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@ABV?$allocator@VUserCommand@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@ABV?$allocator@VUserCommand@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@ABV3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@ABV3@@Z$0
__ehfuncinfo$?construct@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@ABV3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@ABV3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?end@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?end@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ$0
__ehfuncinfo$?end@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?end@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?begin@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?begin@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ$0
__ehfuncinfo$?begin@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?begin@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z$5
__ehfuncinfo$??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z$4
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VMacroShortcut@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VMacroShortcut@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VMacroShortcut@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VMacroShortcut@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@ABV3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@ABV3@@Z$0
__ehfuncinfo$?construct@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@ABV3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@ABV3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?end@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?end@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ$0
__ehfuncinfo$?end@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?end@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?begin@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?begin@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ$0
__ehfuncinfo$?begin@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?begin@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z$5
__ehfuncinfo$??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z$4
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VCommandShortcut@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VCommandShortcut@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VCommandShortcut@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VCommandShortcut@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@ABV3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@ABV3@@Z$0
__ehfuncinfo$?construct@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@ABV3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@ABV3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ$0
__ehfuncinfo$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ$0
__ehfuncinfo$?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z$0
__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXPAPAUHWND__@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXPAPAUHWND__@@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXPAPAUHWND__@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXPAPAUHWND__@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0PluginCmdShortcut@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0PluginCmdShortcut@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0PluginCmdShortcut@@QAE@ABV0@@Z$1
__ehfuncinfo$??0PluginCmdShortcut@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0PluginCmdShortcut@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1PluginCmdShortcut@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1PluginCmdShortcut@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1PluginCmdShortcut@@UAE@XZ$1
__ehfuncinfo$??1PluginCmdShortcut@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1PluginCmdShortcut@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0UserCommand@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0UserCommand@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0UserCommand@@QAE@ABV0@@Z$1
__ehfuncinfo$??0UserCommand@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0UserCommand@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1UserCommand@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1UserCommand@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1UserCommand@@UAE@XZ$1
__ehfuncinfo$??1UserCommand@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1UserCommand@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0MacroShortcut@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MacroShortcut@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0MacroShortcut@@QAE@ABV0@@Z$1
__ehfuncinfo$??0MacroShortcut@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0MacroShortcut@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1MacroShortcut@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1MacroShortcut@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1MacroShortcut@@UAE@XZ$1
__ehfuncinfo$??1MacroShortcut@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1MacroShortcut@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?end@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?end@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ$0
__ehfuncinfo$?end@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?end@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?begin@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?begin@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ$0
__ehfuncinfo$?begin@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?begin@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z$5
__ehfuncinfo$??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z$4
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV?$allocator@UrecordedMacroStep@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV?$allocator@UrecordedMacroStep@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV?$allocator@UrecordedMacroStep@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV?$allocator@UrecordedMacroStep@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@ABU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@ABU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@ABU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@ABU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0recordedMacroStep@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0recordedMacroStep@@QAE@ABU0@@Z$0
__ehfuncinfo$??0recordedMacroStep@@QAE@ABU0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0recordedMacroStep@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1recordedMacroStep@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1recordedMacroStep@@QAE@XZ$0
__ehfuncinfo$??1recordedMacroStep@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1recordedMacroStep@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBE?AV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBE?AV01@H@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBE?AV01@H@Z$0
__ehfuncinfo$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBE?AV01@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBE?AV01@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ScintillaKeyMap@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ScintillaKeyMap@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ScintillaKeyMap@@QAE@ABV0@@Z$1
__ehfuncinfo$??0ScintillaKeyMap@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ScintillaKeyMap@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ScintillaKeyMap@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ScintillaKeyMap@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ScintillaKeyMap@@UAE@XZ$1
__ehfuncinfo$??1ScintillaKeyMap@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ScintillaKeyMap@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXPAUKeyCombo@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXPAUKeyCombo@@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXPAUKeyCombo@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXPAUKeyCombo@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?erase@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?erase@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z$1
__ehfuncinfo$?erase@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?erase@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Make_iter@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Make_iter@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?_Make_iter@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z$0
__ehfuncinfo$?_Make_iter@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Make_iter@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?end@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?end@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ$0
__ehfuncinfo$?end@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?end@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ$0
__ehfuncinfo$?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ$0
__ehfuncinfo$?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z$5
__ehfuncinfo$??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z$4
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@ABV?$allocator@UKeyCombo@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@ABV?$allocator@UKeyCombo@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@ABV?$allocator@UKeyCombo@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@ABV?$allocator@UKeyCombo@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CommandShortcut@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CommandShortcut@@QAE@ABV0@@Z$0
__ehfuncinfo$??0CommandShortcut@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CommandShortcut@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CommandShortcut@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CommandShortcut@@UAE@XZ$0
__ehfuncinfo$??1CommandShortcut@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CommandShortcut@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Shortcut@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Shortcut@@UAE@XZ$0
__ehfuncinfo$??1Shortcut@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Shortcut@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?toMenuItemString@Shortcut@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?toMenuItemString@Shortcut@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?toMenuItemString@Shortcut@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0
	DD	01H
	DD	FLAT:__unwindfunclet$?toMenuItemString@Shortcut@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1
__ehfuncinfo$?toMenuItemString@Shortcut@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?toMenuItemString@Shortcut@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$??0recordedMacroStep@@QAE@HJJH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0recordedMacroStep@@QAE@HJJH@Z$0
__unwindtable$?updateListItem@ScintillaKeyMap@@AAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?updateListItem@ScintillaKeyMap@@AAEXH@Z$0
__unwindtable$?toString@ScintillaKeyMap@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?toString@ScintillaKeyMap@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0
__unwindtable$?updateKeys@ScintillaAccelerator@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?updateKeys@ScintillaAccelerator@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?updateKeys@ScintillaAccelerator@@QAEXXZ$1
__unwindtable$?updateMenuItemByCommand@Accelerator@@AAEXVCommandShortcut@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?updateMenuItemByCommand@Accelerator@@AAEXVCommandShortcut@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?updateMenuItemByCommand@Accelerator@@AAEXVCommandShortcut@@@Z$1
__unwindtable$?run_dlgProc@ScintillaKeyMap@@MAGHIIJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?run_dlgProc@ScintillaKeyMap@@MAGHIIJ@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?run_dlgProc@ScintillaKeyMap@@MAGHIIJ@Z$1
__unwindtable$?updateMenuItemByID@ScintillaAccelerator@@AAEXVScintillaKeyMap@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?updateMenuItemByID@ScintillaAccelerator@@AAEXVScintillaKeyMap@@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?updateMenuItemByID@ScintillaAccelerator@@AAEXVScintillaKeyMap@@H@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?updateMenuItemByID@ScintillaAccelerator@@AAEXVScintillaKeyMap@@H@Z$2
__unwindtable$?toString@ScintillaKeyMap@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?toString@ScintillaKeyMap@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?toString@ScintillaKeyMap@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?toString@ScintillaKeyMap@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z$2
__unwindtable$?removeKeyComboByIndex@ScintillaKeyMap@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?removeKeyComboByIndex@ScintillaKeyMap@@QAEXH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?removeKeyComboByIndex@ScintillaKeyMap@@QAEXH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?removeKeyComboByIndex@ScintillaKeyMap@@QAEXH@Z$2
__unwindtable$?setKeyComboByIndex@ScintillaKeyMap@@QAEXHUKeyCombo@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?setKeyComboByIndex@ScintillaKeyMap@@QAEXHUKeyCombo@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?setKeyComboByIndex@ScintillaKeyMap@@QAEXHUKeyCombo@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?setKeyComboByIndex@ScintillaKeyMap@@QAEXHUKeyCombo@@@Z$2
__unwindtable$?toString@Shortcut@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?toString@Shortcut@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?toString@Shortcut@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0
	DD	01H
	DD	FLAT:__unwindfunclet$?toString@Shortcut@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$2
__ehfuncinfo$?updateMenuItemByID@ScintillaAccelerator@@AAEXVScintillaKeyMap@@H@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?updateMenuItemByID@ScintillaAccelerator@@AAEXVScintillaKeyMap@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?updateKeys@ScintillaAccelerator@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?updateKeys@ScintillaAccelerator@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?updateMenuItemByCommand@Accelerator@@AAEXVCommandShortcut@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?updateMenuItemByCommand@Accelerator@@AAEXVCommandShortcut@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?updateFullMenu@Accelerator@@QAEXXZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?updateFullMenu@Accelerator@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?updateShortcuts@Accelerator@@QAEXXZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?updateShortcuts@Accelerator@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$??0recordedMacroStep@@QAE@HJJH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0recordedMacroStep@@QAE@HJJH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?run_dlgProc@ScintillaKeyMap@@MAGHIIJ@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?run_dlgProc@ScintillaKeyMap@@MAGHIIJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?updateListItem@ScintillaKeyMap@@AAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?updateListItem@ScintillaKeyMap@@AAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?toString@ScintillaKeyMap@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?toString@ScintillaKeyMap@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?toString@ScintillaKeyMap@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?toString@ScintillaKeyMap@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?removeKeyComboByIndex@ScintillaKeyMap@@QAEXH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?removeKeyComboByIndex@ScintillaKeyMap@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?setKeyComboByIndex@ScintillaKeyMap@@QAEXHUKeyCombo@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?setKeyComboByIndex@ScintillaKeyMap@@QAEXHUKeyCombo@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?toString@Shortcut@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?toString@Shortcut@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?updateShortcuts@Accelerator@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?updateShortcuts@Accelerator@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?updateShortcuts@Accelerator@@QAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?updateShortcuts@Accelerator@@QAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?updateShortcuts@Accelerator@@QAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?updateShortcuts@Accelerator@@QAEXXZ$4
	DD	02H
	DD	FLAT:__unwindfunclet$?updateShortcuts@Accelerator@@QAEXXZ$5
__unwindtable$?updateFullMenu@Accelerator@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?updateFullMenu@Accelerator@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?updateFullMenu@Accelerator@@QAEXXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?updateFullMenu@Accelerator@@QAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?updateFullMenu@Accelerator@@QAEXXZ$3
	DD	02H
	DD	FLAT:__unwindfunclet$?updateFullMenu@Accelerator@@QAEXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?updateFullMenu@Accelerator@@QAEXXZ$5
	DD	04H
	DD	FLAT:__unwindfunclet$?updateFullMenu@Accelerator@@QAEXXZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$?updateFullMenu@Accelerator@@QAEXXZ$7
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Shortcut@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Shortcut@@QAE@ABV0@@Z$0
__ehfuncinfo$??0Shortcut@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Shortcut@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0
__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0
__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0
__ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1_System_error_category@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_System_error_category@std@@UAE@XZ$0
__ehfuncinfo$??1_System_error_category@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_System_error_category@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
__ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0_System_error_category@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_System_error_category@std@@QAE@XZ$0
__ehfuncinfo$??0_System_error_category@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0_System_error_category@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1_Iostream_error_category@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0
__ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Iostream_error_category@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
__ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0_Iostream_error_category@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0
__ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0_Iostream_error_category@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1_Generic_error_category@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0
__ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Generic_error_category@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
__ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0_Generic_error_category@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0
__ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0_Generic_error_category@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
__ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1
__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1_Iterator_base12@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0
__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Iterator_base12@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0
__ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1StaticDialog@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1StaticDialog@@UAE@XZ$0
__ehfuncinfo$??1StaticDialog@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1StaticDialog@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0StaticDialog@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0StaticDialog@@QAE@XZ$0
__ehfuncinfo$??0StaticDialog@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0StaticDialog@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@UtagACCEL@@U1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@$$QAU2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv74 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UtagACCEL@@U1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@$$QAU2@@Z PROC ; std::allocator<tagACCEL>::construct<tagACCEL,tagACCEL>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 598
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@UtagACCEL@@U1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@$$QAU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 600
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	6
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@UtagACCEL@@@std@@YA$$QAUtagACCEL@@AAU1@@Z ; std::forward<tagACCEL>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [edx+4], ax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv74[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 601
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@UtagACCEL@@U1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@$$QAU2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@UtagACCEL@@U1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@$$QAU2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@UtagACCEL@@U1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@$$QAU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@UtagACCEL@@U1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@$$QAU2@@Z ENDP ; std::allocator<tagACCEL>::construct<tagACCEL,tagACCEL>
; Function compile flags: /Odtp
;	COMDAT ??$construct@UKeyCombo@@U1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@$$QAU2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv74 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UKeyCombo@@U1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@$$QAU2@@Z PROC ; std::allocator<KeyCombo>::construct<KeyCombo,KeyCombo>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 598
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@UKeyCombo@@U1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@$$QAU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 600
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@UKeyCombo@@@std@@YA$$QAUKeyCombo@@AAU1@@Z ; std::forward<KeyCombo>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv74[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 601
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@UKeyCombo@@U1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@$$QAU2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@UKeyCombo@@U1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@$$QAU2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@UKeyCombo@@U1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@$$QAU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@UKeyCombo@@U1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@$$QAU2@@Z ENDP ; std::allocator<KeyCombo>::construct<KeyCombo,KeyCombo>
; Function compile flags: /Odtp
;	COMDAT ??$construct@UtagACCEL@@U1@@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAXAAV?$allocator@UtagACCEL@@@1@PAUtagACCEL@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UtagACCEL@@U1@@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAXAAV?$allocator@UtagACCEL@@@1@PAUtagACCEL@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@UtagACCEL@@@std@@YA$$QAUtagACCEL@@AAU1@@Z ; std::forward<tagACCEL>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@UtagACCEL@@U1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@$$QAU2@@Z ; std::allocator<tagACCEL>::construct<tagACCEL,tagACCEL>
; Line 724
	pop	ebp
	ret	0
??$construct@UtagACCEL@@U1@@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAXAAV?$allocator@UtagACCEL@@@1@PAUtagACCEL@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@UtagACCEL@@@std@@YA$$QAUtagACCEL@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UtagACCEL@@@std@@YA$$QAUtagACCEL@@AAU1@@Z PROC ; std::forward<tagACCEL>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@UtagACCEL@@@std@@YA$$QAUtagACCEL@@AAU1@@Z ENDP ; std::forward<tagACCEL>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range2@PAUtagACCEL@@@std@@YAXPAUtagACCEL@@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAUtagACCEL@@@std@@YAXPAUtagACCEL@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<tagACCEL *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 570
	push	ebp
	mov	ebp, esp
; Line 571
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang
; Line 573
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_pointer@UtagACCEL@@@std@@YAXPAUtagACCEL@@PB_WI@Z ; std::_Debug_pointer<tagACCEL>
	add	esp, 12					; 0000000cH
; Line 574
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Debug_pointer@UtagACCEL@@@std@@YAXPAUtagACCEL@@PB_WI@Z ; std::_Debug_pointer<tagACCEL>
	add	esp, 12					; 0000000cH
; Line 575
	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang
; Line 576
	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN3@Debug_rang:
; Line 578
	pop	ebp
	ret	0
??$_Debug_range2@PAUtagACCEL@@@std@@YAXPAUtagACCEL@@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<tagACCEL *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Iter_cat@PAUtagACCEL@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUtagACCEL@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAUtagACCEL@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUtagACCEL@@@Z PROC ; std::_Iter_cat<tagACCEL *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 405
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 407
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 408
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PAUtagACCEL@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUtagACCEL@@@Z ENDP ; std::_Iter_cat<tagACCEL *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 570
	push	ebp
	mov	ebp, esp
; Line 571
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang
; Line 573
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z	; std::_Debug_pointer<int>
	add	esp, 12					; 0000000cH
; Line 574
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z	; std::_Debug_pointer<int>
	add	esp, 12					; 0000000cH
; Line 575
	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang
; Line 576
	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN3@Debug_rang:
; Line 578
	pop	ebp
	ret	0
??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z PROC ; std::_Iter_cat<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 405
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 407
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 408
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ENDP ; std::_Iter_cat<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range2@PAPAUHWND__@@@std@@YAXPAPAUHWND__@@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAPAUHWND__@@@std@@YAXPAPAUHWND__@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<HWND__ * *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 570
	push	ebp
	mov	ebp, esp
; Line 571
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang
; Line 573
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_pointer@PAUHWND__@@@std@@YAXPAPAUHWND__@@PB_WI@Z ; std::_Debug_pointer<HWND__ *>
	add	esp, 12					; 0000000cH
; Line 574
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Debug_pointer@PAUHWND__@@@std@@YAXPAPAUHWND__@@PB_WI@Z ; std::_Debug_pointer<HWND__ *>
	add	esp, 12					; 0000000cH
; Line 575
	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang
; Line 576
	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN3@Debug_rang:
; Line 578
	pop	ebp
	ret	0
??$_Debug_range2@PAPAUHWND__@@@std@@YAXPAPAUHWND__@@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<HWND__ * *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Iter_cat@PAPAUHWND__@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAUHWND__@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAPAUHWND__@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAUHWND__@@@Z PROC ; std::_Iter_cat<HWND__ * *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 405
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 407
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 408
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PAPAUHWND__@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAUHWND__@@@Z ENDP ; std::_Iter_cat<HWND__ * *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@UKeyCombo@@U1@@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAXAAV?$allocator@UKeyCombo@@@1@PAUKeyCombo@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UKeyCombo@@U1@@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAXAAV?$allocator@UKeyCombo@@@1@PAUKeyCombo@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@UKeyCombo@@@std@@YA$$QAUKeyCombo@@AAU1@@Z ; std::forward<KeyCombo>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@UKeyCombo@@U1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@$$QAU2@@Z ; std::allocator<KeyCombo>::construct<KeyCombo,KeyCombo>
; Line 724
	pop	ebp
	ret	0
??$construct@UKeyCombo@@U1@@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAXAAV?$allocator@UKeyCombo@@@1@PAUKeyCombo@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@UKeyCombo@@@std@@YA$$QAUKeyCombo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UKeyCombo@@@std@@YA$$QAUKeyCombo@@AAU1@@Z PROC ; std::forward<KeyCombo>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@UKeyCombo@@@std@@YA$$QAUKeyCombo@@AAU1@@Z ENDP ; std::forward<KeyCombo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range2@PAUKeyCombo@@@std@@YAXPAUKeyCombo@@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAUKeyCombo@@@std@@YAXPAUKeyCombo@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<KeyCombo *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 570
	push	ebp
	mov	ebp, esp
; Line 571
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang
; Line 573
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_pointer@UKeyCombo@@@std@@YAXPAUKeyCombo@@PB_WI@Z ; std::_Debug_pointer<KeyCombo>
	add	esp, 12					; 0000000cH
; Line 574
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Debug_pointer@UKeyCombo@@@std@@YAXPAUKeyCombo@@PB_WI@Z ; std::_Debug_pointer<KeyCombo>
	add	esp, 12					; 0000000cH
; Line 575
	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang
; Line 576
	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN3@Debug_rang:
; Line 578
	pop	ebp
	ret	0
??$_Debug_range2@PAUKeyCombo@@@std@@YAXPAUKeyCombo@@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<KeyCombo *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Iter_cat@PAUKeyCombo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKeyCombo@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAUKeyCombo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKeyCombo@@@Z PROC ; std::_Iter_cat<KeyCombo *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 405
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 407
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 408
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PAUKeyCombo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKeyCombo@@@Z ENDP ; std::_Iter_cat<KeyCombo *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@VPluginCmdShortcut@@ABV1@@?$allocator_traits@V?$allocator@VPluginCmdShortcut@@@std@@@std@@SAXAAV?$allocator@VPluginCmdShortcut@@@1@PAVPluginCmdShortcut@@ABV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@VPluginCmdShortcut@@ABV1@@?$allocator_traits@V?$allocator@VPluginCmdShortcut@@@std@@@std@@SAXAAV?$allocator@VPluginCmdShortcut@@@1@PAVPluginCmdShortcut@@ABV3@@Z PROC ; std::allocator_traits<std::allocator<PluginCmdShortcut> >::construct<PluginCmdShortcut,PluginCmdShortcut const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABVPluginCmdShortcut@@@std@@YAABVPluginCmdShortcut@@ABV1@@Z ; std::forward<PluginCmdShortcut const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@ABV3@@Z ; std::allocator<PluginCmdShortcut>::construct
; Line 724
	pop	ebp
	ret	0
??$construct@VPluginCmdShortcut@@ABV1@@?$allocator_traits@V?$allocator@VPluginCmdShortcut@@@std@@@std@@SAXAAV?$allocator@VPluginCmdShortcut@@@1@PAVPluginCmdShortcut@@ABV3@@Z ENDP ; std::allocator_traits<std::allocator<PluginCmdShortcut> >::construct<PluginCmdShortcut,PluginCmdShortcut const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@ABVPluginCmdShortcut@@@std@@YAABVPluginCmdShortcut@@ABV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVPluginCmdShortcut@@@std@@YAABVPluginCmdShortcut@@ABV1@@Z PROC ; std::forward<PluginCmdShortcut const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@ABVPluginCmdShortcut@@@std@@YAABVPluginCmdShortcut@@ABV1@@Z ENDP ; std::forward<PluginCmdShortcut const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range2@PBVPluginCmdShortcut@@@std@@YAXPBVPluginCmdShortcut@@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PBVPluginCmdShortcut@@@std@@YAXPBVPluginCmdShortcut@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<PluginCmdShortcut const *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 570
	push	ebp
	mov	ebp, esp
; Line 571
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang
; Line 573
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_pointer@VPluginCmdShortcut@@@std@@YAXPBVPluginCmdShortcut@@PB_WI@Z ; std::_Debug_pointer<PluginCmdShortcut>
	add	esp, 12					; 0000000cH
; Line 574
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Debug_pointer@VPluginCmdShortcut@@@std@@YAXPBVPluginCmdShortcut@@PB_WI@Z ; std::_Debug_pointer<PluginCmdShortcut>
	add	esp, 12					; 0000000cH
; Line 575
	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang
; Line 576
	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN3@Debug_rang:
; Line 578
	pop	ebp
	ret	0
??$_Debug_range2@PBVPluginCmdShortcut@@@std@@YAXPBVPluginCmdShortcut@@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<PluginCmdShortcut const *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Iter_cat@PBVPluginCmdShortcut@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBVPluginCmdShortcut@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PBVPluginCmdShortcut@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBVPluginCmdShortcut@@@Z PROC ; std::_Iter_cat<PluginCmdShortcut const *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 405
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 407
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 408
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PBVPluginCmdShortcut@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBVPluginCmdShortcut@@@Z ENDP ; std::_Iter_cat<PluginCmdShortcut const *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@VUserCommand@@ABV1@@?$allocator_traits@V?$allocator@VUserCommand@@@std@@@std@@SAXAAV?$allocator@VUserCommand@@@1@PAVUserCommand@@ABV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@VUserCommand@@ABV1@@?$allocator_traits@V?$allocator@VUserCommand@@@std@@@std@@SAXAAV?$allocator@VUserCommand@@@1@PAVUserCommand@@ABV3@@Z PROC ; std::allocator_traits<std::allocator<UserCommand> >::construct<UserCommand,UserCommand const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABVUserCommand@@@std@@YAABVUserCommand@@ABV1@@Z ; std::forward<UserCommand const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@ABV3@@Z ; std::allocator<UserCommand>::construct
; Line 724
	pop	ebp
	ret	0
??$construct@VUserCommand@@ABV1@@?$allocator_traits@V?$allocator@VUserCommand@@@std@@@std@@SAXAAV?$allocator@VUserCommand@@@1@PAVUserCommand@@ABV3@@Z ENDP ; std::allocator_traits<std::allocator<UserCommand> >::construct<UserCommand,UserCommand const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@ABVUserCommand@@@std@@YAABVUserCommand@@ABV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVUserCommand@@@std@@YAABVUserCommand@@ABV1@@Z PROC ; std::forward<UserCommand const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@ABVUserCommand@@@std@@YAABVUserCommand@@ABV1@@Z ENDP ; std::forward<UserCommand const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range2@PBVUserCommand@@@std@@YAXPBVUserCommand@@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PBVUserCommand@@@std@@YAXPBVUserCommand@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<UserCommand const *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 570
	push	ebp
	mov	ebp, esp
; Line 571
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang
; Line 573
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_pointer@VUserCommand@@@std@@YAXPBVUserCommand@@PB_WI@Z ; std::_Debug_pointer<UserCommand>
	add	esp, 12					; 0000000cH
; Line 574
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Debug_pointer@VUserCommand@@@std@@YAXPBVUserCommand@@PB_WI@Z ; std::_Debug_pointer<UserCommand>
	add	esp, 12					; 0000000cH
; Line 575
	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang
; Line 576
	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN3@Debug_rang:
; Line 578
	pop	ebp
	ret	0
??$_Debug_range2@PBVUserCommand@@@std@@YAXPBVUserCommand@@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<UserCommand const *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Iter_cat@PBVUserCommand@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBVUserCommand@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PBVUserCommand@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBVUserCommand@@@Z PROC ; std::_Iter_cat<UserCommand const *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 405
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 407
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 408
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PBVUserCommand@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBVUserCommand@@@Z ENDP ; std::_Iter_cat<UserCommand const *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@VMacroShortcut@@ABV1@@?$allocator_traits@V?$allocator@VMacroShortcut@@@std@@@std@@SAXAAV?$allocator@VMacroShortcut@@@1@PAVMacroShortcut@@ABV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@VMacroShortcut@@ABV1@@?$allocator_traits@V?$allocator@VMacroShortcut@@@std@@@std@@SAXAAV?$allocator@VMacroShortcut@@@1@PAVMacroShortcut@@ABV3@@Z PROC ; std::allocator_traits<std::allocator<MacroShortcut> >::construct<MacroShortcut,MacroShortcut const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABVMacroShortcut@@@std@@YAABVMacroShortcut@@ABV1@@Z ; std::forward<MacroShortcut const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@ABV3@@Z ; std::allocator<MacroShortcut>::construct
; Line 724
	pop	ebp
	ret	0
??$construct@VMacroShortcut@@ABV1@@?$allocator_traits@V?$allocator@VMacroShortcut@@@std@@@std@@SAXAAV?$allocator@VMacroShortcut@@@1@PAVMacroShortcut@@ABV3@@Z ENDP ; std::allocator_traits<std::allocator<MacroShortcut> >::construct<MacroShortcut,MacroShortcut const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@ABVMacroShortcut@@@std@@YAABVMacroShortcut@@ABV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVMacroShortcut@@@std@@YAABVMacroShortcut@@ABV1@@Z PROC ; std::forward<MacroShortcut const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@ABVMacroShortcut@@@std@@YAABVMacroShortcut@@ABV1@@Z ENDP ; std::forward<MacroShortcut const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range2@PBVMacroShortcut@@@std@@YAXPBVMacroShortcut@@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PBVMacroShortcut@@@std@@YAXPBVMacroShortcut@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<MacroShortcut const *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 570
	push	ebp
	mov	ebp, esp
; Line 571
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang
; Line 573
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_pointer@VMacroShortcut@@@std@@YAXPBVMacroShortcut@@PB_WI@Z ; std::_Debug_pointer<MacroShortcut>
	add	esp, 12					; 0000000cH
; Line 574
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Debug_pointer@VMacroShortcut@@@std@@YAXPBVMacroShortcut@@PB_WI@Z ; std::_Debug_pointer<MacroShortcut>
	add	esp, 12					; 0000000cH
; Line 575
	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang
; Line 576
	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN3@Debug_rang:
; Line 578
	pop	ebp
	ret	0
??$_Debug_range2@PBVMacroShortcut@@@std@@YAXPBVMacroShortcut@@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<MacroShortcut const *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Iter_cat@PBVMacroShortcut@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBVMacroShortcut@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PBVMacroShortcut@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBVMacroShortcut@@@Z PROC ; std::_Iter_cat<MacroShortcut const *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 405
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 407
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 408
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PBVMacroShortcut@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBVMacroShortcut@@@Z ENDP ; std::_Iter_cat<MacroShortcut const *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@VCommandShortcut@@ABV1@@?$allocator_traits@V?$allocator@VCommandShortcut@@@std@@@std@@SAXAAV?$allocator@VCommandShortcut@@@1@PAVCommandShortcut@@ABV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@VCommandShortcut@@ABV1@@?$allocator_traits@V?$allocator@VCommandShortcut@@@std@@@std@@SAXAAV?$allocator@VCommandShortcut@@@1@PAVCommandShortcut@@ABV3@@Z PROC ; std::allocator_traits<std::allocator<CommandShortcut> >::construct<CommandShortcut,CommandShortcut const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABVCommandShortcut@@@std@@YAABVCommandShortcut@@ABV1@@Z ; std::forward<CommandShortcut const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@ABV3@@Z ; std::allocator<CommandShortcut>::construct
; Line 724
	pop	ebp
	ret	0
??$construct@VCommandShortcut@@ABV1@@?$allocator_traits@V?$allocator@VCommandShortcut@@@std@@@std@@SAXAAV?$allocator@VCommandShortcut@@@1@PAVCommandShortcut@@ABV3@@Z ENDP ; std::allocator_traits<std::allocator<CommandShortcut> >::construct<CommandShortcut,CommandShortcut const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@ABVCommandShortcut@@@std@@YAABVCommandShortcut@@ABV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVCommandShortcut@@@std@@YAABVCommandShortcut@@ABV1@@Z PROC ; std::forward<CommandShortcut const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@ABVCommandShortcut@@@std@@YAABVCommandShortcut@@ABV1@@Z ENDP ; std::forward<CommandShortcut const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range2@PBVCommandShortcut@@@std@@YAXPBVCommandShortcut@@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PBVCommandShortcut@@@std@@YAXPBVCommandShortcut@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<CommandShortcut const *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 570
	push	ebp
	mov	ebp, esp
; Line 571
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang
; Line 573
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_pointer@VCommandShortcut@@@std@@YAXPBVCommandShortcut@@PB_WI@Z ; std::_Debug_pointer<CommandShortcut>
	add	esp, 12					; 0000000cH
; Line 574
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Debug_pointer@VCommandShortcut@@@std@@YAXPBVCommandShortcut@@PB_WI@Z ; std::_Debug_pointer<CommandShortcut>
	add	esp, 12					; 0000000cH
; Line 575
	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang
; Line 576
	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN3@Debug_rang:
; Line 578
	pop	ebp
	ret	0
??$_Debug_range2@PBVCommandShortcut@@@std@@YAXPBVCommandShortcut@@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<CommandShortcut const *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Iter_cat@PBVCommandShortcut@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBVCommandShortcut@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PBVCommandShortcut@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBVCommandShortcut@@@Z PROC ; std::_Iter_cat<CommandShortcut const *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 405
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 407
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 408
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PBVCommandShortcut@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBVCommandShortcut@@@Z ENDP ; std::_Iter_cat<CommandShortcut const *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@UrecordedMacroStep@@ABU1@@?$allocator_traits@V?$allocator@UrecordedMacroStep@@@std@@@std@@SAXAAV?$allocator@UrecordedMacroStep@@@1@PAUrecordedMacroStep@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UrecordedMacroStep@@ABU1@@?$allocator_traits@V?$allocator@UrecordedMacroStep@@@std@@@std@@SAXAAV?$allocator@UrecordedMacroStep@@@1@PAUrecordedMacroStep@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<recordedMacroStep> >::construct<recordedMacroStep,recordedMacroStep const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABUrecordedMacroStep@@@std@@YAABUrecordedMacroStep@@ABU1@@Z ; std::forward<recordedMacroStep const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@ABU3@@Z ; std::allocator<recordedMacroStep>::construct
; Line 724
	pop	ebp
	ret	0
??$construct@UrecordedMacroStep@@ABU1@@?$allocator_traits@V?$allocator@UrecordedMacroStep@@@std@@@std@@SAXAAV?$allocator@UrecordedMacroStep@@@1@PAUrecordedMacroStep@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<recordedMacroStep> >::construct<recordedMacroStep,recordedMacroStep const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@ABUrecordedMacroStep@@@std@@YAABUrecordedMacroStep@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUrecordedMacroStep@@@std@@YAABUrecordedMacroStep@@ABU1@@Z PROC ; std::forward<recordedMacroStep const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@ABUrecordedMacroStep@@@std@@YAABUrecordedMacroStep@@ABU1@@Z ENDP ; std::forward<recordedMacroStep const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range2@PBUrecordedMacroStep@@@std@@YAXPBUrecordedMacroStep@@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PBUrecordedMacroStep@@@std@@YAXPBUrecordedMacroStep@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<recordedMacroStep const *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 570
	push	ebp
	mov	ebp, esp
; Line 571
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang
; Line 573
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_pointer@UrecordedMacroStep@@@std@@YAXPBUrecordedMacroStep@@PB_WI@Z ; std::_Debug_pointer<recordedMacroStep>
	add	esp, 12					; 0000000cH
; Line 574
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Debug_pointer@UrecordedMacroStep@@@std@@YAXPBUrecordedMacroStep@@PB_WI@Z ; std::_Debug_pointer<recordedMacroStep>
	add	esp, 12					; 0000000cH
; Line 575
	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang
; Line 576
	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN3@Debug_rang:
; Line 578
	pop	ebp
	ret	0
??$_Debug_range2@PBUrecordedMacroStep@@@std@@YAXPBUrecordedMacroStep@@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<recordedMacroStep const *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Iter_cat@PBUrecordedMacroStep@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBUrecordedMacroStep@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PBUrecordedMacroStep@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBUrecordedMacroStep@@@Z PROC ; std::_Iter_cat<recordedMacroStep const *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 405
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 407
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 408
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PBUrecordedMacroStep@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBUrecordedMacroStep@@@Z ENDP ; std::_Iter_cat<recordedMacroStep const *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range2@PBUKeyCombo@@@std@@YAXPBUKeyCombo@@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PBUKeyCombo@@@std@@YAXPBUKeyCombo@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<KeyCombo const *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 570
	push	ebp
	mov	ebp, esp
; Line 571
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang
; Line 573
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_pointer@UKeyCombo@@@std@@YAXPBUKeyCombo@@PB_WI@Z ; std::_Debug_pointer<KeyCombo>
	add	esp, 12					; 0000000cH
; Line 574
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Debug_pointer@UKeyCombo@@@std@@YAXPBUKeyCombo@@PB_WI@Z ; std::_Debug_pointer<KeyCombo>
	add	esp, 12					; 0000000cH
; Line 575
	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang
; Line 576
	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN3@Debug_rang:
; Line 578
	pop	ebp
	ret	0
??$_Debug_range2@PBUKeyCombo@@@std@@YAXPBUKeyCombo@@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<KeyCombo const *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Iter_cat@PBUKeyCombo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBUKeyCombo@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PBUKeyCombo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBUKeyCombo@@@Z PROC ; std::_Iter_cat<KeyCombo const *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 405
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 407
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 408
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PBUKeyCombo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBUKeyCombo@@@Z ENDP ; std::_Iter_cat<KeyCombo const *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@UtagACCEL@@U1@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@$$QAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UtagACCEL@@U1@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@UtagACCEL@@@std@@YA$$QAUtagACCEL@@AAU1@@Z ; std::forward<tagACCEL>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@UtagACCEL@@U1@@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAXAAV?$allocator@UtagACCEL@@@1@PAUtagACCEL@@$$QAU3@@Z ; std::allocator_traits<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@UtagACCEL@@U1@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@UtagACCEL@@@std@@YAXPAUtagACCEL@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@UtagACCEL@@@std@@YAXPAUtagACCEL@@PB_WI@Z PROC ; std::_Debug_pointer<tagACCEL>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 552
	push	ebp
	mov	ebp, esp
; Line 553
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 554
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 555
	pop	ebp
	ret	0
??$_Debug_pointer@UtagACCEL@@@std@@YAXPAUtagACCEL@@PB_WI@Z ENDP ; std::_Debug_pointer<tagACCEL>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range@PAUtagACCEL@@@std@@YAXPAUtagACCEL@@0PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAUtagACCEL@@@std@@YAXPAUtagACCEL@@0PB_WI@Z PROC ; std::_Debug_range<tagACCEL *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 583
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 584
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PAUtagACCEL@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUtagACCEL@@@Z ; std::_Iter_cat<tagACCEL *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range2@PAUtagACCEL@@@std@@YAXPAUtagACCEL@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<tagACCEL *>
	add	esp, 20					; 00000014H
; Line 585
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAUtagACCEL@@@std@@YAXPAUtagACCEL@@0PB_WI@Z ENDP ; std::_Debug_range<tagACCEL *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@UtagACCEL@@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@UtagACCEL@@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@@Z PROC ; std::allocator<tagACCEL>::destroy<tagACCEL>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 605
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 608
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@UtagACCEL@@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@@Z ENDP ; std::allocator<tagACCEL>::destroy<tagACCEL>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@VPluginCmdShortcut@@@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@VPluginCmdShortcut@@@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@@Z PROC ; std::allocator<PluginCmdShortcut>::destroy<PluginCmdShortcut>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 605
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 607
	push	0
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
; Line 608
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@VPluginCmdShortcut@@@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@@Z ENDP ; std::allocator<PluginCmdShortcut>::destroy<PluginCmdShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@VUserCommand@@@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@VUserCommand@@@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@@Z PROC ; std::allocator<UserCommand>::destroy<UserCommand>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 605
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 607
	push	0
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
; Line 608
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@VUserCommand@@@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@@Z ENDP ; std::allocator<UserCommand>::destroy<UserCommand>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@VMacroShortcut@@@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@VMacroShortcut@@@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@@Z PROC ; std::allocator<MacroShortcut>::destroy<MacroShortcut>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 605
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 607
	push	0
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
; Line 608
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@VMacroShortcut@@@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@@Z ENDP ; std::allocator<MacroShortcut>::destroy<MacroShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@VCommandShortcut@@@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@VCommandShortcut@@@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@@Z PROC ; std::allocator<CommandShortcut>::destroy<CommandShortcut>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 605
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 607
	push	0
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
; Line 608
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@VCommandShortcut@@@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@@Z ENDP ; std::allocator<CommandShortcut>::destroy<CommandShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z PROC		; std::_Debug_pointer<int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 552
	push	ebp
	mov	ebp, esp
; Line 553
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 554
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 555
	pop	ebp
	ret	0
??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z ENDP		; std::_Debug_pointer<int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z PROC		; std::_Debug_range<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 583
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 584
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<int *>
	add	esp, 20					; 00000014H
; Line 585
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z ENDP		; std::_Debug_range<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@PAUHWND__@@@std@@YAXPAPAUHWND__@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@PAUHWND__@@@std@@YAXPAPAUHWND__@@PB_WI@Z PROC ; std::_Debug_pointer<HWND__ *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 552
	push	ebp
	mov	ebp, esp
; Line 553
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 554
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 555
	pop	ebp
	ret	0
??$_Debug_pointer@PAUHWND__@@@std@@YAXPAPAUHWND__@@PB_WI@Z ENDP ; std::_Debug_pointer<HWND__ *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range@PAPAUHWND__@@@std@@YAXPAPAUHWND__@@0PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAPAUHWND__@@@std@@YAXPAPAUHWND__@@0PB_WI@Z PROC ; std::_Debug_range<HWND__ * *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 583
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 584
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PAPAUHWND__@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAUHWND__@@@Z ; std::_Iter_cat<HWND__ * *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range2@PAPAUHWND__@@@std@@YAXPAPAUHWND__@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<HWND__ * *>
	add	esp, 20					; 00000014H
; Line 585
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAPAUHWND__@@@std@@YAXPAPAUHWND__@@0PB_WI@Z ENDP ; std::_Debug_range<HWND__ * *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@UrecordedMacroStep@@@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@UrecordedMacroStep@@@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@@Z PROC ; std::allocator<recordedMacroStep>::destroy<recordedMacroStep>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 605
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 607
	push	0
	mov	ecx, DWORD PTR __Ptr$[ebp]
	call	??_GrecordedMacroStep@@QAEPAXI@Z
; Line 608
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@UrecordedMacroStep@@@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@@Z ENDP ; std::allocator<recordedMacroStep>::destroy<recordedMacroStep>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@UKeyCombo@@U1@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@$$QAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UKeyCombo@@U1@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@UKeyCombo@@@std@@YA$$QAUKeyCombo@@AAU1@@Z ; std::forward<KeyCombo>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@UKeyCombo@@U1@@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAXAAV?$allocator@UKeyCombo@@@1@PAUKeyCombo@@$$QAU3@@Z ; std::allocator_traits<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@UKeyCombo@@U1@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range@PAUKeyCombo@@@std@@YAXPAUKeyCombo@@0PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAUKeyCombo@@@std@@YAXPAUKeyCombo@@0PB_WI@Z PROC ; std::_Debug_range<KeyCombo *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 583
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 584
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PAUKeyCombo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKeyCombo@@@Z ; std::_Iter_cat<KeyCombo *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range2@PAUKeyCombo@@@std@@YAXPAUKeyCombo@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<KeyCombo *>
	add	esp, 20					; 00000014H
; Line 585
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAUKeyCombo@@@std@@YAXPAUKeyCombo@@0PB_WI@Z ENDP ; std::_Debug_range<KeyCombo *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@UKeyCombo@@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@UKeyCombo@@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@@Z PROC ; std::allocator<KeyCombo>::destroy<KeyCombo>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 605
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 608
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@UKeyCombo@@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@@Z ENDP ; std::allocator<KeyCombo>::destroy<KeyCombo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@VPluginCmdShortcut@@ABV1@@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEXPAVPluginCmdShortcut@@ABV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@VPluginCmdShortcut@@ABV1@@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEXPAVPluginCmdShortcut@@ABV2@@Z PROC ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::construct<PluginCmdShortcut,PluginCmdShortcut const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABVPluginCmdShortcut@@@std@@YAABVPluginCmdShortcut@@ABV1@@Z ; std::forward<PluginCmdShortcut const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@VPluginCmdShortcut@@ABV1@@?$allocator_traits@V?$allocator@VPluginCmdShortcut@@@std@@@std@@SAXAAV?$allocator@VPluginCmdShortcut@@@1@PAVPluginCmdShortcut@@ABV3@@Z ; std::allocator_traits<std::allocator<PluginCmdShortcut> >::construct<PluginCmdShortcut,PluginCmdShortcut const &>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@VPluginCmdShortcut@@ABV1@@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEXPAVPluginCmdShortcut@@ABV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::construct<PluginCmdShortcut,PluginCmdShortcut const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@VPluginCmdShortcut@@@std@@YAXPBVPluginCmdShortcut@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@VPluginCmdShortcut@@@std@@YAXPBVPluginCmdShortcut@@PB_WI@Z PROC ; std::_Debug_pointer<PluginCmdShortcut>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 545
	push	ebp
	mov	ebp, esp
; Line 546
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 547
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 548
	pop	ebp
	ret	0
??$_Debug_pointer@VPluginCmdShortcut@@@std@@YAXPBVPluginCmdShortcut@@PB_WI@Z ENDP ; std::_Debug_pointer<PluginCmdShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@VPluginCmdShortcut@@@std@@YAXPAVPluginCmdShortcut@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@VPluginCmdShortcut@@@std@@YAXPAVPluginCmdShortcut@@PB_WI@Z PROC ; std::_Debug_pointer<PluginCmdShortcut>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 552
	push	ebp
	mov	ebp, esp
; Line 553
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 554
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 555
	pop	ebp
	ret	0
??$_Debug_pointer@VPluginCmdShortcut@@@std@@YAXPAVPluginCmdShortcut@@PB_WI@Z ENDP ; std::_Debug_pointer<PluginCmdShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range@PBVPluginCmdShortcut@@@std@@YAXPBVPluginCmdShortcut@@0PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PBVPluginCmdShortcut@@@std@@YAXPBVPluginCmdShortcut@@0PB_WI@Z PROC ; std::_Debug_range<PluginCmdShortcut const *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 583
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 584
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PBVPluginCmdShortcut@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBVPluginCmdShortcut@@@Z ; std::_Iter_cat<PluginCmdShortcut const *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range2@PBVPluginCmdShortcut@@@std@@YAXPBVPluginCmdShortcut@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<PluginCmdShortcut const *>
	add	esp, 20					; 00000014H
; Line 585
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PBVPluginCmdShortcut@@@std@@YAXPBVPluginCmdShortcut@@0PB_WI@Z ENDP ; std::_Debug_range<PluginCmdShortcut const *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@VUserCommand@@ABV1@@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEXPAVUserCommand@@ABV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@VUserCommand@@ABV1@@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEXPAVUserCommand@@ABV2@@Z PROC ; std::_Wrap_alloc<std::allocator<UserCommand> >::construct<UserCommand,UserCommand const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABVUserCommand@@@std@@YAABVUserCommand@@ABV1@@Z ; std::forward<UserCommand const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@VUserCommand@@ABV1@@?$allocator_traits@V?$allocator@VUserCommand@@@std@@@std@@SAXAAV?$allocator@VUserCommand@@@1@PAVUserCommand@@ABV3@@Z ; std::allocator_traits<std::allocator<UserCommand> >::construct<UserCommand,UserCommand const &>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@VUserCommand@@ABV1@@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEXPAVUserCommand@@ABV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<UserCommand> >::construct<UserCommand,UserCommand const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@VUserCommand@@@std@@YAXPBVUserCommand@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@VUserCommand@@@std@@YAXPBVUserCommand@@PB_WI@Z PROC ; std::_Debug_pointer<UserCommand>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 545
	push	ebp
	mov	ebp, esp
; Line 546
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 547
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 548
	pop	ebp
	ret	0
??$_Debug_pointer@VUserCommand@@@std@@YAXPBVUserCommand@@PB_WI@Z ENDP ; std::_Debug_pointer<UserCommand>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@VUserCommand@@@std@@YAXPAVUserCommand@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@VUserCommand@@@std@@YAXPAVUserCommand@@PB_WI@Z PROC ; std::_Debug_pointer<UserCommand>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 552
	push	ebp
	mov	ebp, esp
; Line 553
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 554
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 555
	pop	ebp
	ret	0
??$_Debug_pointer@VUserCommand@@@std@@YAXPAVUserCommand@@PB_WI@Z ENDP ; std::_Debug_pointer<UserCommand>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range@PBVUserCommand@@@std@@YAXPBVUserCommand@@0PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PBVUserCommand@@@std@@YAXPBVUserCommand@@0PB_WI@Z PROC ; std::_Debug_range<UserCommand const *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 583
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 584
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PBVUserCommand@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBVUserCommand@@@Z ; std::_Iter_cat<UserCommand const *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range2@PBVUserCommand@@@std@@YAXPBVUserCommand@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<UserCommand const *>
	add	esp, 20					; 00000014H
; Line 585
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PBVUserCommand@@@std@@YAXPBVUserCommand@@0PB_WI@Z ENDP ; std::_Debug_range<UserCommand const *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@VMacroShortcut@@ABV1@@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEXPAVMacroShortcut@@ABV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@VMacroShortcut@@ABV1@@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEXPAVMacroShortcut@@ABV2@@Z PROC ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::construct<MacroShortcut,MacroShortcut const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABVMacroShortcut@@@std@@YAABVMacroShortcut@@ABV1@@Z ; std::forward<MacroShortcut const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@VMacroShortcut@@ABV1@@?$allocator_traits@V?$allocator@VMacroShortcut@@@std@@@std@@SAXAAV?$allocator@VMacroShortcut@@@1@PAVMacroShortcut@@ABV3@@Z ; std::allocator_traits<std::allocator<MacroShortcut> >::construct<MacroShortcut,MacroShortcut const &>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@VMacroShortcut@@ABV1@@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEXPAVMacroShortcut@@ABV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::construct<MacroShortcut,MacroShortcut const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@VMacroShortcut@@@std@@YAXPBVMacroShortcut@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@VMacroShortcut@@@std@@YAXPBVMacroShortcut@@PB_WI@Z PROC ; std::_Debug_pointer<MacroShortcut>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 545
	push	ebp
	mov	ebp, esp
; Line 546
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 547
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 548
	pop	ebp
	ret	0
??$_Debug_pointer@VMacroShortcut@@@std@@YAXPBVMacroShortcut@@PB_WI@Z ENDP ; std::_Debug_pointer<MacroShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@VMacroShortcut@@@std@@YAXPAVMacroShortcut@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@VMacroShortcut@@@std@@YAXPAVMacroShortcut@@PB_WI@Z PROC ; std::_Debug_pointer<MacroShortcut>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 552
	push	ebp
	mov	ebp, esp
; Line 553
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 554
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 555
	pop	ebp
	ret	0
??$_Debug_pointer@VMacroShortcut@@@std@@YAXPAVMacroShortcut@@PB_WI@Z ENDP ; std::_Debug_pointer<MacroShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range@PBVMacroShortcut@@@std@@YAXPBVMacroShortcut@@0PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PBVMacroShortcut@@@std@@YAXPBVMacroShortcut@@0PB_WI@Z PROC ; std::_Debug_range<MacroShortcut const *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 583
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 584
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PBVMacroShortcut@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBVMacroShortcut@@@Z ; std::_Iter_cat<MacroShortcut const *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range2@PBVMacroShortcut@@@std@@YAXPBVMacroShortcut@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<MacroShortcut const *>
	add	esp, 20					; 00000014H
; Line 585
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PBVMacroShortcut@@@std@@YAXPBVMacroShortcut@@0PB_WI@Z ENDP ; std::_Debug_range<MacroShortcut const *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@VCommandShortcut@@ABV1@@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEXPAVCommandShortcut@@ABV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@VCommandShortcut@@ABV1@@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEXPAVCommandShortcut@@ABV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::construct<CommandShortcut,CommandShortcut const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABVCommandShortcut@@@std@@YAABVCommandShortcut@@ABV1@@Z ; std::forward<CommandShortcut const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@VCommandShortcut@@ABV1@@?$allocator_traits@V?$allocator@VCommandShortcut@@@std@@@std@@SAXAAV?$allocator@VCommandShortcut@@@1@PAVCommandShortcut@@ABV3@@Z ; std::allocator_traits<std::allocator<CommandShortcut> >::construct<CommandShortcut,CommandShortcut const &>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@VCommandShortcut@@ABV1@@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEXPAVCommandShortcut@@ABV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::construct<CommandShortcut,CommandShortcut const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@VCommandShortcut@@@std@@YAXPBVCommandShortcut@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@VCommandShortcut@@@std@@YAXPBVCommandShortcut@@PB_WI@Z PROC ; std::_Debug_pointer<CommandShortcut>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 545
	push	ebp
	mov	ebp, esp
; Line 546
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 547
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 548
	pop	ebp
	ret	0
??$_Debug_pointer@VCommandShortcut@@@std@@YAXPBVCommandShortcut@@PB_WI@Z ENDP ; std::_Debug_pointer<CommandShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@VCommandShortcut@@@std@@YAXPAVCommandShortcut@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@VCommandShortcut@@@std@@YAXPAVCommandShortcut@@PB_WI@Z PROC ; std::_Debug_pointer<CommandShortcut>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 552
	push	ebp
	mov	ebp, esp
; Line 553
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 554
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 555
	pop	ebp
	ret	0
??$_Debug_pointer@VCommandShortcut@@@std@@YAXPAVCommandShortcut@@PB_WI@Z ENDP ; std::_Debug_pointer<CommandShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range@PBVCommandShortcut@@@std@@YAXPBVCommandShortcut@@0PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PBVCommandShortcut@@@std@@YAXPBVCommandShortcut@@0PB_WI@Z PROC ; std::_Debug_range<CommandShortcut const *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 583
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 584
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PBVCommandShortcut@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBVCommandShortcut@@@Z ; std::_Iter_cat<CommandShortcut const *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range2@PBVCommandShortcut@@@std@@YAXPBVCommandShortcut@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<CommandShortcut const *>
	add	esp, 20					; 00000014H
; Line 585
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PBVCommandShortcut@@@std@@YAXPBVCommandShortcut@@0PB_WI@Z ENDP ; std::_Debug_range<CommandShortcut const *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@UrecordedMacroStep@@ABU1@@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEXPAUrecordedMacroStep@@ABU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UrecordedMacroStep@@ABU1@@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEXPAUrecordedMacroStep@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::construct<recordedMacroStep,recordedMacroStep const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABUrecordedMacroStep@@@std@@YAABUrecordedMacroStep@@ABU1@@Z ; std::forward<recordedMacroStep const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@UrecordedMacroStep@@ABU1@@?$allocator_traits@V?$allocator@UrecordedMacroStep@@@std@@@std@@SAXAAV?$allocator@UrecordedMacroStep@@@1@PAUrecordedMacroStep@@ABU3@@Z ; std::allocator_traits<std::allocator<recordedMacroStep> >::construct<recordedMacroStep,recordedMacroStep const &>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@UrecordedMacroStep@@ABU1@@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEXPAUrecordedMacroStep@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::construct<recordedMacroStep,recordedMacroStep const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@UrecordedMacroStep@@@std@@YAXPBUrecordedMacroStep@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@UrecordedMacroStep@@@std@@YAXPBUrecordedMacroStep@@PB_WI@Z PROC ; std::_Debug_pointer<recordedMacroStep>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 545
	push	ebp
	mov	ebp, esp
; Line 546
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 547
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 548
	pop	ebp
	ret	0
??$_Debug_pointer@UrecordedMacroStep@@@std@@YAXPBUrecordedMacroStep@@PB_WI@Z ENDP ; std::_Debug_pointer<recordedMacroStep>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@UrecordedMacroStep@@@std@@YAXPAUrecordedMacroStep@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@UrecordedMacroStep@@@std@@YAXPAUrecordedMacroStep@@PB_WI@Z PROC ; std::_Debug_pointer<recordedMacroStep>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 552
	push	ebp
	mov	ebp, esp
; Line 553
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 554
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 555
	pop	ebp
	ret	0
??$_Debug_pointer@UrecordedMacroStep@@@std@@YAXPAUrecordedMacroStep@@PB_WI@Z ENDP ; std::_Debug_pointer<recordedMacroStep>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range@PBUrecordedMacroStep@@@std@@YAXPBUrecordedMacroStep@@0PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PBUrecordedMacroStep@@@std@@YAXPBUrecordedMacroStep@@0PB_WI@Z PROC ; std::_Debug_range<recordedMacroStep const *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 583
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 584
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PBUrecordedMacroStep@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBUrecordedMacroStep@@@Z ; std::_Iter_cat<recordedMacroStep const *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range2@PBUrecordedMacroStep@@@std@@YAXPBUrecordedMacroStep@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<recordedMacroStep const *>
	add	esp, 20					; 00000014H
; Line 585
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PBUrecordedMacroStep@@@std@@YAXPBUrecordedMacroStep@@0PB_WI@Z ENDP ; std::_Debug_range<recordedMacroStep const *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@UKeyCombo@@@std@@YAXPBUKeyCombo@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@UKeyCombo@@@std@@YAXPBUKeyCombo@@PB_WI@Z PROC ; std::_Debug_pointer<KeyCombo>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 545
	push	ebp
	mov	ebp, esp
; Line 546
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 547
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 548
	pop	ebp
	ret	0
??$_Debug_pointer@UKeyCombo@@@std@@YAXPBUKeyCombo@@PB_WI@Z ENDP ; std::_Debug_pointer<KeyCombo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@UKeyCombo@@@std@@YAXPAUKeyCombo@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@UKeyCombo@@@std@@YAXPAUKeyCombo@@PB_WI@Z PROC ; std::_Debug_pointer<KeyCombo>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 552
	push	ebp
	mov	ebp, esp
; Line 553
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 554
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 555
	pop	ebp
	ret	0
??$_Debug_pointer@UKeyCombo@@@std@@YAXPAUKeyCombo@@PB_WI@Z ENDP ; std::_Debug_pointer<KeyCombo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range@PBUKeyCombo@@@std@@YAXPBUKeyCombo@@0PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PBUKeyCombo@@@std@@YAXPBUKeyCombo@@0PB_WI@Z PROC ; std::_Debug_range<KeyCombo const *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 583
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 584
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PBUKeyCombo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBUKeyCombo@@@Z ; std::_Iter_cat<KeyCombo const *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range2@PBUKeyCombo@@@std@@YAXPBUKeyCombo@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<KeyCombo const *>
	add	esp, 20					; 00000014H
; Line 585
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PBUKeyCombo@@@std@@YAXPBUKeyCombo@@0PB_WI@Z ENDP ; std::_Debug_range<KeyCombo const *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_move@PAUtagACCEL@@PAU1@V?$allocator@UtagACCEL@@@std@@U1@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUtagACCEL@@PAU1@V?$allocator@UtagACCEL@@@std@@U1@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<tagACCEL *,tagACCEL *,std::allocator<tagACCEL>,tagACCEL>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 437
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_move@PAUtagACCEL@@PAU1@V?$allocator@UtagACCEL@@@std@@U1@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 438
	push	438					; 000001b6H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAUtagACCEL@@@std@@YAXPAUtagACCEL@@0PB_WI@Z ; std::_Debug_range<tagACCEL *>
	add	esp, 16					; 00000010H
; Line 439
	push	439					; 000001b7H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Debug_pointer@UtagACCEL@@@std@@YAXPAUtagACCEL@@PB_WI@Z ; std::_Debug_pointer<tagACCEL>
	add	esp, 12					; 0000000cH
; Line 440
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax
; Line 442
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 443
	jmp	SHORT $LN6@Uninit_mov
$LN5@Uninit_mov:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 6
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 6
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_mov:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_mov
; Line 444
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@UtagACCEL@@U1@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@$$QAU2@@Z ; std::_Wrap_alloc<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL>
	jmp	SHORT $LN5@Uninit_mov
$LN4@Uninit_mov:
	jmp	SHORT $LN10@Uninit_mov
__catch$??$_Uninit_move@PAUtagACCEL@@PAU1@V?$allocator@UtagACCEL@@@std@@U1@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:
; Line 446
	jmp	SHORT $LN3@Uninit_mov
$LN2@Uninit_mov:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 6
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_mov
; Line 447
	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@UtagACCEL@@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@@Z ; std::_Wrap_alloc<std::allocator<tagACCEL> >::destroy<tagACCEL>
	jmp	SHORT $LN2@Uninit_mov
$LN1@Uninit_mov:
; Line 448
	push	0
	push	0
	call	__CxxThrowException@8
; Line 449
	mov	eax, $LN13@Uninit_mov
	ret	0
$LN10@Uninit_mov:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Uninit_move@PAUtagACCEL@@PAU1@V?$allocator@UtagACCEL@@@std@@U1@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
$LN13@Uninit_mov:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAUtagACCEL@@PAU1@V?$allocator@UtagACCEL@@@std@@U1@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:
; Line 450
	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov:
; Line 451
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUtagACCEL@@PAU1@V?$allocator@UtagACCEL@@@std@@U1@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUtagACCEL@@PAU1@V?$allocator@UtagACCEL@@@std@@U1@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUtagACCEL@@PAU1@V?$allocator@UtagACCEL@@@std@@U1@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<tagACCEL *,tagACCEL *,std::allocator<tagACCEL>,tagACCEL>
; Function compile flags: /Odtp
;	COMDAT ??$_Val_type@PAUtagACCEL@@@std@@YAPAUtagACCEL@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUtagACCEL@@@std@@YAPAUtagACCEL@@PAU1@@Z PROC ; std::_Val_type<tagACCEL *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 645
	push	ebp
	mov	ebp, esp
; Line 646
	xor	eax, eax
; Line 647
	pop	ebp
	ret	0
??$_Val_type@PAUtagACCEL@@@std@@YAPAUtagACCEL@@PAU1@@Z ENDP ; std::_Val_type<tagACCEL *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@UtagACCEL@@@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAXAAV?$allocator@UtagACCEL@@@1@PAUtagACCEL@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UtagACCEL@@@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAXAAV?$allocator@UtagACCEL@@@1@PAUtagACCEL@@@Z PROC ; std::allocator_traits<std::allocator<tagACCEL> >::destroy<tagACCEL>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 728
	push	ebp
	mov	ebp, esp
; Line 730
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@UtagACCEL@@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@@Z ; std::allocator<tagACCEL>::destroy<tagACCEL>
; Line 731
	pop	ebp
	ret	0
??$destroy@UtagACCEL@@@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAXAAV?$allocator@UtagACCEL@@@1@PAUtagACCEL@@@Z ENDP ; std::allocator_traits<std::allocator<tagACCEL> >::destroy<tagACCEL>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@VPluginCmdShortcut@@@?$allocator_traits@V?$allocator@VPluginCmdShortcut@@@std@@@std@@SAXAAV?$allocator@VPluginCmdShortcut@@@1@PAVPluginCmdShortcut@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@VPluginCmdShortcut@@@?$allocator_traits@V?$allocator@VPluginCmdShortcut@@@std@@@std@@SAXAAV?$allocator@VPluginCmdShortcut@@@1@PAVPluginCmdShortcut@@@Z PROC ; std::allocator_traits<std::allocator<PluginCmdShortcut> >::destroy<PluginCmdShortcut>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 728
	push	ebp
	mov	ebp, esp
; Line 730
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@VPluginCmdShortcut@@@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@@Z ; std::allocator<PluginCmdShortcut>::destroy<PluginCmdShortcut>
; Line 731
	pop	ebp
	ret	0
??$destroy@VPluginCmdShortcut@@@?$allocator_traits@V?$allocator@VPluginCmdShortcut@@@std@@@std@@SAXAAV?$allocator@VPluginCmdShortcut@@@1@PAVPluginCmdShortcut@@@Z ENDP ; std::allocator_traits<std::allocator<PluginCmdShortcut> >::destroy<PluginCmdShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@VUserCommand@@@?$allocator_traits@V?$allocator@VUserCommand@@@std@@@std@@SAXAAV?$allocator@VUserCommand@@@1@PAVUserCommand@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@VUserCommand@@@?$allocator_traits@V?$allocator@VUserCommand@@@std@@@std@@SAXAAV?$allocator@VUserCommand@@@1@PAVUserCommand@@@Z PROC ; std::allocator_traits<std::allocator<UserCommand> >::destroy<UserCommand>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 728
	push	ebp
	mov	ebp, esp
; Line 730
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@VUserCommand@@@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@@Z ; std::allocator<UserCommand>::destroy<UserCommand>
; Line 731
	pop	ebp
	ret	0
??$destroy@VUserCommand@@@?$allocator_traits@V?$allocator@VUserCommand@@@std@@@std@@SAXAAV?$allocator@VUserCommand@@@1@PAVUserCommand@@@Z ENDP ; std::allocator_traits<std::allocator<UserCommand> >::destroy<UserCommand>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@VMacroShortcut@@@?$allocator_traits@V?$allocator@VMacroShortcut@@@std@@@std@@SAXAAV?$allocator@VMacroShortcut@@@1@PAVMacroShortcut@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@VMacroShortcut@@@?$allocator_traits@V?$allocator@VMacroShortcut@@@std@@@std@@SAXAAV?$allocator@VMacroShortcut@@@1@PAVMacroShortcut@@@Z PROC ; std::allocator_traits<std::allocator<MacroShortcut> >::destroy<MacroShortcut>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 728
	push	ebp
	mov	ebp, esp
; Line 730
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@VMacroShortcut@@@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@@Z ; std::allocator<MacroShortcut>::destroy<MacroShortcut>
; Line 731
	pop	ebp
	ret	0
??$destroy@VMacroShortcut@@@?$allocator_traits@V?$allocator@VMacroShortcut@@@std@@@std@@SAXAAV?$allocator@VMacroShortcut@@@1@PAVMacroShortcut@@@Z ENDP ; std::allocator_traits<std::allocator<MacroShortcut> >::destroy<MacroShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@VCommandShortcut@@@?$allocator_traits@V?$allocator@VCommandShortcut@@@std@@@std@@SAXAAV?$allocator@VCommandShortcut@@@1@PAVCommandShortcut@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@VCommandShortcut@@@?$allocator_traits@V?$allocator@VCommandShortcut@@@std@@@std@@SAXAAV?$allocator@VCommandShortcut@@@1@PAVCommandShortcut@@@Z PROC ; std::allocator_traits<std::allocator<CommandShortcut> >::destroy<CommandShortcut>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 728
	push	ebp
	mov	ebp, esp
; Line 730
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@VCommandShortcut@@@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@@Z ; std::allocator<CommandShortcut>::destroy<CommandShortcut>
; Line 731
	pop	ebp
	ret	0
??$destroy@VCommandShortcut@@@?$allocator_traits@V?$allocator@VCommandShortcut@@@std@@@std@@SAXAAV?$allocator@VCommandShortcut@@@1@PAVCommandShortcut@@@Z ENDP ; std::allocator_traits<std::allocator<CommandShortcut> >::destroy<CommandShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<int,int,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 469
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 470
	push	470					; 000001d6H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z	; std::_Debug_range<int *>
	add	esp, 16					; 00000010H
; Line 471
	push	471					; 000001d7H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z	; std::_Debug_pointer<int>
	add	esp, 12					; 0000000cH
; Line 472
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax
; Line 474
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
; Line 475
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Val_type@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAH@std@@YAPAHPAH@Z PROC			; std::_Val_type<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 645
	push	ebp
	mov	ebp, esp
; Line 646
	xor	eax, eax
; Line 647
	pop	ebp
	ret	0
??$_Val_type@PAH@std@@YAPAHPAH@Z ENDP			; std::_Val_type<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_move@PAUHWND__@@PAU1@PAU1@@std@@YAPAPAUHWND__@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUHWND__@@PAU1@PAU1@@std@@YAPAPAUHWND__@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<HWND__ *,HWND__ *,HWND__ *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 469
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 470
	push	470					; 000001d6H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAPAUHWND__@@@std@@YAXPAPAUHWND__@@0PB_WI@Z ; std::_Debug_range<HWND__ * *>
	add	esp, 16					; 00000010H
; Line 471
	push	471					; 000001d7H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Debug_pointer@PAUHWND__@@@std@@YAXPAPAUHWND__@@PB_WI@Z ; std::_Debug_pointer<HWND__ *>
	add	esp, 12					; 0000000cH
; Line 472
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax
; Line 474
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
; Line 475
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAUHWND__@@PAU1@PAU1@@std@@YAPAPAUHWND__@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<HWND__ *,HWND__ *,HWND__ *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Val_type@PAPAUHWND__@@@std@@YAPAPAUHWND__@@PAPAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAUHWND__@@@std@@YAPAPAUHWND__@@PAPAU1@@Z PROC ; std::_Val_type<HWND__ * *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 645
	push	ebp
	mov	ebp, esp
; Line 646
	xor	eax, eax
; Line 647
	pop	ebp
	ret	0
??$_Val_type@PAPAUHWND__@@@std@@YAPAPAUHWND__@@PAPAU1@@Z ENDP ; std::_Val_type<HWND__ * *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@UrecordedMacroStep@@@?$allocator_traits@V?$allocator@UrecordedMacroStep@@@std@@@std@@SAXAAV?$allocator@UrecordedMacroStep@@@1@PAUrecordedMacroStep@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UrecordedMacroStep@@@?$allocator_traits@V?$allocator@UrecordedMacroStep@@@std@@@std@@SAXAAV?$allocator@UrecordedMacroStep@@@1@PAUrecordedMacroStep@@@Z PROC ; std::allocator_traits<std::allocator<recordedMacroStep> >::destroy<recordedMacroStep>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 728
	push	ebp
	mov	ebp, esp
; Line 730
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@UrecordedMacroStep@@@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@@Z ; std::allocator<recordedMacroStep>::destroy<recordedMacroStep>
; Line 731
	pop	ebp
	ret	0
??$destroy@UrecordedMacroStep@@@?$allocator_traits@V?$allocator@UrecordedMacroStep@@@std@@@std@@SAXAAV?$allocator@UrecordedMacroStep@@@1@PAUrecordedMacroStep@@@Z ENDP ; std::allocator_traits<std::allocator<recordedMacroStep> >::destroy<recordedMacroStep>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_move@PAUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@U1@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@U1@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<KeyCombo *,KeyCombo *,std::allocator<KeyCombo>,KeyCombo>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 437
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_move@PAUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@U1@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 438
	push	438					; 000001b6H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAUKeyCombo@@@std@@YAXPAUKeyCombo@@0PB_WI@Z ; std::_Debug_range<KeyCombo *>
	add	esp, 16					; 00000010H
; Line 439
	push	439					; 000001b7H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Debug_pointer@UKeyCombo@@@std@@YAXPAUKeyCombo@@PB_WI@Z ; std::_Debug_pointer<KeyCombo>
	add	esp, 12					; 0000000cH
; Line 440
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax
; Line 442
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 443
	jmp	SHORT $LN6@Uninit_mov
$LN5@Uninit_mov:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 4
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_mov:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_mov
; Line 444
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@UKeyCombo@@U1@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@$$QAU2@@Z ; std::_Wrap_alloc<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo>
	jmp	SHORT $LN5@Uninit_mov
$LN4@Uninit_mov:
	jmp	SHORT $LN10@Uninit_mov
__catch$??$_Uninit_move@PAUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@U1@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:
; Line 446
	jmp	SHORT $LN3@Uninit_mov
$LN2@Uninit_mov:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 4
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_mov
; Line 447
	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@UKeyCombo@@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@@Z ; std::_Wrap_alloc<std::allocator<KeyCombo> >::destroy<KeyCombo>
	jmp	SHORT $LN2@Uninit_mov
$LN1@Uninit_mov:
; Line 448
	push	0
	push	0
	call	__CxxThrowException@8
; Line 449
	mov	eax, $LN13@Uninit_mov
	ret	0
$LN10@Uninit_mov:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Uninit_move@PAUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@U1@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
$LN13@Uninit_mov:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@U1@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:
; Line 450
	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov:
; Line 451
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@U1@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@U1@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@U1@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<KeyCombo *,KeyCombo *,std::allocator<KeyCombo>,KeyCombo>
; Function compile flags: /Odtp
;	COMDAT ??$_Val_type@PAUKeyCombo@@@std@@YAPAUKeyCombo@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUKeyCombo@@@std@@YAPAUKeyCombo@@PAU1@@Z PROC ; std::_Val_type<KeyCombo *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 645
	push	ebp
	mov	ebp, esp
; Line 646
	xor	eax, eax
; Line 647
	pop	ebp
	ret	0
??$_Val_type@PAUKeyCombo@@@std@@YAPAUKeyCombo@@PAU1@@Z ENDP ; std::_Val_type<KeyCombo *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@UKeyCombo@@@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAXAAV?$allocator@UKeyCombo@@@1@PAUKeyCombo@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UKeyCombo@@@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAXAAV?$allocator@UKeyCombo@@@1@PAUKeyCombo@@@Z PROC ; std::allocator_traits<std::allocator<KeyCombo> >::destroy<KeyCombo>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 728
	push	ebp
	mov	ebp, esp
; Line 730
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@UKeyCombo@@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@@Z ; std::allocator<KeyCombo>::destroy<KeyCombo>
; Line 731
	pop	ebp
	ret	0
??$destroy@UKeyCombo@@@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAXAAV?$allocator@UKeyCombo@@@1@PAUKeyCombo@@@Z ENDP ; std::allocator_traits<std::allocator<KeyCombo> >::destroy<KeyCombo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@V?$allocator@VPluginCmdShortcut@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@V?$allocator@VPluginCmdShortcut@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<PluginCmdShortcut const *,PluginCmdShortcut *,std::allocator<PluginCmdShortcut> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 371
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@V?$allocator@VPluginCmdShortcut@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 372
	push	372					; 00000174H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PBVPluginCmdShortcut@@@std@@YAXPBVPluginCmdShortcut@@0PB_WI@Z ; std::_Debug_range<PluginCmdShortcut const *>
	add	esp, 16					; 00000010H
; Line 373
	push	373					; 00000175H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Debug_pointer@VPluginCmdShortcut@@@std@@YAXPAVPluginCmdShortcut@@PB_WI@Z ; std::_Debug_pointer<PluginCmdShortcut>
	add	esp, 12					; 0000000cH
; Line 374
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax
; Line 376
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 377
	jmp	SHORT $LN6@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 336				; 00000150H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 336				; 00000150H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop
; Line 378
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@VPluginCmdShortcut@@ABV1@@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEXPAVPluginCmdShortcut@@ABV2@@Z ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::construct<PluginCmdShortcut,PluginCmdShortcut const &>
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@V?$allocator@VPluginCmdShortcut@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:
; Line 380
	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 336				; 00000150H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop
; Line 381
	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@VPluginCmdShortcut@@@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEXPAVPluginCmdShortcut@@@Z ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::destroy<PluginCmdShortcut>
	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:
; Line 382
	push	0
	push	0
	call	__CxxThrowException@8
; Line 383
	mov	eax, $LN13@Uninit_cop
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@V?$allocator@VPluginCmdShortcut@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1
$LN13@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@V?$allocator@VPluginCmdShortcut@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1:
; Line 384
	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:
; Line 385
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@V?$allocator@VPluginCmdShortcut@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@V?$allocator@VPluginCmdShortcut@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@V?$allocator@VPluginCmdShortcut@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<PluginCmdShortcut const *,PluginCmdShortcut *,std::allocator<PluginCmdShortcut> >
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_copy@PBVUserCommand@@PAV1@V?$allocator@VUserCommand@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PBVUserCommand@@PAV1@V?$allocator@VUserCommand@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<UserCommand const *,UserCommand *,std::allocator<UserCommand> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 371
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBVUserCommand@@PAV1@V?$allocator@VUserCommand@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 372
	push	372					; 00000174H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PBVUserCommand@@@std@@YAXPBVUserCommand@@0PB_WI@Z ; std::_Debug_range<UserCommand const *>
	add	esp, 16					; 00000010H
; Line 373
	push	373					; 00000175H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Debug_pointer@VUserCommand@@@std@@YAXPAVUserCommand@@PB_WI@Z ; std::_Debug_pointer<UserCommand>
	add	esp, 12					; 0000000cH
; Line 374
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax
; Line 376
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 377
	jmp	SHORT $LN6@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 328				; 00000148H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 328				; 00000148H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop
; Line 378
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@VUserCommand@@ABV1@@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEXPAVUserCommand@@ABV2@@Z ; std::_Wrap_alloc<std::allocator<UserCommand> >::construct<UserCommand,UserCommand const &>
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@PBVUserCommand@@PAV1@V?$allocator@VUserCommand@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:
; Line 380
	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 328				; 00000148H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop
; Line 381
	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@VUserCommand@@@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEXPAVUserCommand@@@Z ; std::_Wrap_alloc<std::allocator<UserCommand> >::destroy<UserCommand>
	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:
; Line 382
	push	0
	push	0
	call	__CxxThrowException@8
; Line 383
	mov	eax, $LN13@Uninit_cop
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Uninit_copy@PBVUserCommand@@PAV1@V?$allocator@VUserCommand@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1
$LN13@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBVUserCommand@@PAV1@V?$allocator@VUserCommand@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1:
; Line 384
	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:
; Line 385
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBVUserCommand@@PAV1@V?$allocator@VUserCommand@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBVUserCommand@@PAV1@V?$allocator@VUserCommand@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBVUserCommand@@PAV1@V?$allocator@VUserCommand@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<UserCommand const *,UserCommand *,std::allocator<UserCommand> >
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_copy@PBVMacroShortcut@@PAV1@V?$allocator@VMacroShortcut@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PBVMacroShortcut@@PAV1@V?$allocator@VMacroShortcut@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<MacroShortcut const *,MacroShortcut *,std::allocator<MacroShortcut> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 371
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBVMacroShortcut@@PAV1@V?$allocator@VMacroShortcut@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 372
	push	372					; 00000174H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PBVMacroShortcut@@@std@@YAXPBVMacroShortcut@@0PB_WI@Z ; std::_Debug_range<MacroShortcut const *>
	add	esp, 16					; 00000010H
; Line 373
	push	373					; 00000175H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Debug_pointer@VMacroShortcut@@@std@@YAXPAVMacroShortcut@@PB_WI@Z ; std::_Debug_pointer<MacroShortcut>
	add	esp, 12					; 0000000cH
; Line 374
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax
; Line 376
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 377
	jmp	SHORT $LN6@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 316				; 0000013cH
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 316				; 0000013cH
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop
; Line 378
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@VMacroShortcut@@ABV1@@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEXPAVMacroShortcut@@ABV2@@Z ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::construct<MacroShortcut,MacroShortcut const &>
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@PBVMacroShortcut@@PAV1@V?$allocator@VMacroShortcut@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:
; Line 380
	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 316				; 0000013cH
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop
; Line 381
	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@VMacroShortcut@@@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEXPAVMacroShortcut@@@Z ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::destroy<MacroShortcut>
	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:
; Line 382
	push	0
	push	0
	call	__CxxThrowException@8
; Line 383
	mov	eax, $LN13@Uninit_cop
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Uninit_copy@PBVMacroShortcut@@PAV1@V?$allocator@VMacroShortcut@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1
$LN13@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBVMacroShortcut@@PAV1@V?$allocator@VMacroShortcut@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1:
; Line 384
	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:
; Line 385
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBVMacroShortcut@@PAV1@V?$allocator@VMacroShortcut@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBVMacroShortcut@@PAV1@V?$allocator@VMacroShortcut@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBVMacroShortcut@@PAV1@V?$allocator@VMacroShortcut@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<MacroShortcut const *,MacroShortcut *,std::allocator<MacroShortcut> >
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_copy@PBVCommandShortcut@@PAV1@V?$allocator@VCommandShortcut@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PBVCommandShortcut@@PAV1@V?$allocator@VCommandShortcut@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CommandShortcut const *,CommandShortcut *,std::allocator<CommandShortcut> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 371
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBVCommandShortcut@@PAV1@V?$allocator@VCommandShortcut@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 372
	push	372					; 00000174H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PBVCommandShortcut@@@std@@YAXPBVCommandShortcut@@0PB_WI@Z ; std::_Debug_range<CommandShortcut const *>
	add	esp, 16					; 00000010H
; Line 373
	push	373					; 00000175H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Debug_pointer@VCommandShortcut@@@std@@YAXPAVCommandShortcut@@PB_WI@Z ; std::_Debug_pointer<CommandShortcut>
	add	esp, 12					; 0000000cH
; Line 374
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax
; Line 376
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 377
	jmp	SHORT $LN6@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 300				; 0000012cH
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 300				; 0000012cH
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop
; Line 378
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@VCommandShortcut@@ABV1@@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEXPAVCommandShortcut@@ABV2@@Z ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::construct<CommandShortcut,CommandShortcut const &>
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@PBVCommandShortcut@@PAV1@V?$allocator@VCommandShortcut@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:
; Line 380
	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 300				; 0000012cH
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop
; Line 381
	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@VCommandShortcut@@@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEXPAVCommandShortcut@@@Z ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::destroy<CommandShortcut>
	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:
; Line 382
	push	0
	push	0
	call	__CxxThrowException@8
; Line 383
	mov	eax, $LN13@Uninit_cop
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Uninit_copy@PBVCommandShortcut@@PAV1@V?$allocator@VCommandShortcut@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1
$LN13@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBVCommandShortcut@@PAV1@V?$allocator@VCommandShortcut@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1:
; Line 384
	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:
; Line 385
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBVCommandShortcut@@PAV1@V?$allocator@VCommandShortcut@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBVCommandShortcut@@PAV1@V?$allocator@VCommandShortcut@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBVCommandShortcut@@PAV1@V?$allocator@VCommandShortcut@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CommandShortcut const *,CommandShortcut *,std::allocator<CommandShortcut> >
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@V?$allocator@UrecordedMacroStep@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@V?$allocator@UrecordedMacroStep@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<recordedMacroStep const *,recordedMacroStep *,std::allocator<recordedMacroStep> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 371
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@V?$allocator@UrecordedMacroStep@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 372
	push	372					; 00000174H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PBUrecordedMacroStep@@@std@@YAXPBUrecordedMacroStep@@0PB_WI@Z ; std::_Debug_range<recordedMacroStep const *>
	add	esp, 16					; 00000010H
; Line 373
	push	373					; 00000175H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Debug_pointer@UrecordedMacroStep@@@std@@YAXPAUrecordedMacroStep@@PB_WI@Z ; std::_Debug_pointer<recordedMacroStep>
	add	esp, 12					; 0000000cH
; Line 374
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax
; Line 376
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 377
	jmp	SHORT $LN6@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 44					; 0000002cH
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop
; Line 378
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@UrecordedMacroStep@@ABU1@@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEXPAUrecordedMacroStep@@ABU2@@Z ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::construct<recordedMacroStep,recordedMacroStep const &>
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@V?$allocator@UrecordedMacroStep@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:
; Line 380
	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop
; Line 381
	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@UrecordedMacroStep@@@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEXPAUrecordedMacroStep@@@Z ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::destroy<recordedMacroStep>
	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:
; Line 382
	push	0
	push	0
	call	__CxxThrowException@8
; Line 383
	mov	eax, $LN13@Uninit_cop
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@V?$allocator@UrecordedMacroStep@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1
$LN13@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@V?$allocator@UrecordedMacroStep@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1:
; Line 384
	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:
; Line 385
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@V?$allocator@UrecordedMacroStep@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@V?$allocator@UrecordedMacroStep@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@V?$allocator@UrecordedMacroStep@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<recordedMacroStep const *,recordedMacroStep *,std::allocator<recordedMacroStep> >
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_copy@PBUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PBUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<KeyCombo const *,KeyCombo *,std::allocator<KeyCombo> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 371
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 372
	push	372					; 00000174H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PBUKeyCombo@@@std@@YAXPBUKeyCombo@@0PB_WI@Z ; std::_Debug_range<KeyCombo const *>
	add	esp, 16					; 00000010H
; Line 373
	push	373					; 00000175H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Debug_pointer@UKeyCombo@@@std@@YAXPAUKeyCombo@@PB_WI@Z ; std::_Debug_pointer<KeyCombo>
	add	esp, 12					; 0000000cH
; Line 374
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax
; Line 376
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 377
	jmp	SHORT $LN6@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 4
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop
; Line 378
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@UKeyCombo@@ABU1@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@ABU2@@Z ; std::_Wrap_alloc<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo const &>
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@PBUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:
; Line 380
	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 4
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop
; Line 381
	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@UKeyCombo@@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@@Z ; std::_Wrap_alloc<std::allocator<KeyCombo> >::destroy<KeyCombo>
	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:
; Line 382
	push	0
	push	0
	call	__CxxThrowException@8
; Line 383
	mov	eax, $LN13@Uninit_cop
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Uninit_copy@PBUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1
$LN13@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1:
; Line 384
	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:
; Line 385
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<KeyCombo const *,KeyCombo *,std::allocator<KeyCombo> >
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@PB_WI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@PB_WI@Z PROC ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 540
	push	ebp
	mov	ebp, esp
; Line 541
	pop	ebp
	ret	0
??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@PB_WI@Z ENDP ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Rechecked@PAUtagACCEL@@PAU1@@std@@YAAAPAUtagACCEL@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUtagACCEL@@PAU1@@std@@YAAAPAUtagACCEL@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<tagACCEL *,tagACCEL *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 288
	push	ebp
	mov	ebp, esp
; Line 289
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 290
	mov	eax, DWORD PTR __Dest$[ebp]
; Line 291
	pop	ebp
	ret	0
??$_Rechecked@PAUtagACCEL@@PAU1@@std@@YAAAPAUtagACCEL@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<tagACCEL *,tagACCEL *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_move@PAUtagACCEL@@PAU1@U?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAUtagACCEL@@PAU1@U?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@@Z PROC ; std::_Uninit_move<tagACCEL *,tagACCEL *,std::_Wrap_alloc<std::allocator<tagACCEL> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 482
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 484
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@UtagACCEL@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagACCEL@@0@Z ; std::_Ptr_cat<tagACCEL,tagACCEL>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAUtagACCEL@@@std@@YAPAUtagACCEL@@PAU1@@Z ; std::_Val_type<tagACCEL *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAUtagACCEL@@PAU1@V?$allocator@UtagACCEL@@@std@@U1@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<tagACCEL *,tagACCEL *,std::allocator<tagACCEL>,tagACCEL>
	add	esp, 24					; 00000018H
; Line 485
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAUtagACCEL@@PAU1@U?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@@Z ENDP ; std::_Uninit_move<tagACCEL *,tagACCEL *,std::_Wrap_alloc<std::allocator<tagACCEL> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@PAUtagACCEL@@@std@@YAPAUtagACCEL@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUtagACCEL@@@std@@YAPAUtagACCEL@@PAU1@@Z PROC ; std::_Unchecked<tagACCEL *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 280
	push	ebp
	mov	ebp, esp
; Line 281
	mov	eax, DWORD PTR __Src$[ebp]
; Line 282
	pop	ebp
	ret	0
??$_Unchecked@PAUtagACCEL@@@std@@YAPAUtagACCEL@@PAU1@@Z ENDP ; std::_Unchecked<tagACCEL *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@UtagACCEL@@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@UtagACCEL@@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@@Z PROC ; std::_Wrap_alloc<std::allocator<tagACCEL> >::destroy<tagACCEL>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 877
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 879
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@UtagACCEL@@@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAXAAV?$allocator@UtagACCEL@@@1@PAUtagACCEL@@@Z ; std::allocator_traits<std::allocator<tagACCEL> >::destroy<tagACCEL>
	add	esp, 8
; Line 880
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@UtagACCEL@@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@@Z ENDP ; std::_Wrap_alloc<std::allocator<tagACCEL> >::destroy<tagACCEL>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@VPluginCmdShortcut@@@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEXPAVPluginCmdShortcut@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@VPluginCmdShortcut@@@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEXPAVPluginCmdShortcut@@@Z PROC ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::destroy<PluginCmdShortcut>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 877
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 879
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@VPluginCmdShortcut@@@?$allocator_traits@V?$allocator@VPluginCmdShortcut@@@std@@@std@@SAXAAV?$allocator@VPluginCmdShortcut@@@1@PAVPluginCmdShortcut@@@Z ; std::allocator_traits<std::allocator<PluginCmdShortcut> >::destroy<PluginCmdShortcut>
	add	esp, 8
; Line 880
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@VPluginCmdShortcut@@@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEXPAVPluginCmdShortcut@@@Z ENDP ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::destroy<PluginCmdShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@VUserCommand@@@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEXPAVUserCommand@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@VUserCommand@@@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEXPAVUserCommand@@@Z PROC ; std::_Wrap_alloc<std::allocator<UserCommand> >::destroy<UserCommand>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 877
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 879
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@VUserCommand@@@?$allocator_traits@V?$allocator@VUserCommand@@@std@@@std@@SAXAAV?$allocator@VUserCommand@@@1@PAVUserCommand@@@Z ; std::allocator_traits<std::allocator<UserCommand> >::destroy<UserCommand>
	add	esp, 8
; Line 880
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@VUserCommand@@@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEXPAVUserCommand@@@Z ENDP ; std::_Wrap_alloc<std::allocator<UserCommand> >::destroy<UserCommand>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@VMacroShortcut@@@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEXPAVMacroShortcut@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@VMacroShortcut@@@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEXPAVMacroShortcut@@@Z PROC ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::destroy<MacroShortcut>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 877
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 879
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@VMacroShortcut@@@?$allocator_traits@V?$allocator@VMacroShortcut@@@std@@@std@@SAXAAV?$allocator@VMacroShortcut@@@1@PAVMacroShortcut@@@Z ; std::allocator_traits<std::allocator<MacroShortcut> >::destroy<MacroShortcut>
	add	esp, 8
; Line 880
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@VMacroShortcut@@@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEXPAVMacroShortcut@@@Z ENDP ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::destroy<MacroShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@VCommandShortcut@@@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEXPAVCommandShortcut@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@VCommandShortcut@@@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEXPAVCommandShortcut@@@Z PROC ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::destroy<CommandShortcut>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 877
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 879
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@VCommandShortcut@@@?$allocator_traits@V?$allocator@VCommandShortcut@@@std@@@std@@SAXAAV?$allocator@VCommandShortcut@@@1@PAVCommandShortcut@@@Z ; std::allocator_traits<std::allocator<CommandShortcut> >::destroy<CommandShortcut>
	add	esp, 8
; Line 880
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@VCommandShortcut@@@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEXPAVCommandShortcut@@@Z ENDP ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::destroy<CommandShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z PROC	; std::_Rechecked<int *,int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 288
	push	ebp
	mov	ebp, esp
; Line 289
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 290
	mov	eax, DWORD PTR __Dest$[ebp]
; Line 291
	pop	ebp
	ret	0
??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z ENDP	; std::_Rechecked<int *,int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 482
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 484
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAH@std@@YAPAHPAH@Z	; std::_Val_type<int *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<int,int,int>
	add	esp, 24					; 00000018H
; Line 485
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAH@std@@YAPAHPAH@Z PROC			; std::_Unchecked<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 280
	push	ebp
	mov	ebp, esp
; Line 281
	mov	eax, DWORD PTR __Src$[ebp]
; Line 282
	pop	ebp
	ret	0
??$_Unchecked@PAH@std@@YAPAHPAH@Z ENDP			; std::_Unchecked<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Rechecked@PAPAUHWND__@@PAPAU1@@std@@YAAAPAPAUHWND__@@AAPAPAU1@PAPAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAPAUHWND__@@PAPAU1@@std@@YAAAPAPAUHWND__@@AAPAPAU1@PAPAU1@@Z PROC ; std::_Rechecked<HWND__ * *,HWND__ * *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 288
	push	ebp
	mov	ebp, esp
; Line 289
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 290
	mov	eax, DWORD PTR __Dest$[ebp]
; Line 291
	pop	ebp
	ret	0
??$_Rechecked@PAPAUHWND__@@PAPAU1@@std@@YAAAPAPAUHWND__@@AAPAPAU1@PAPAU1@@Z ENDP ; std::_Rechecked<HWND__ * *,HWND__ * *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_move@PAPAUHWND__@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@@std@@YAPAPAUHWND__@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAPAUHWND__@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@@std@@YAPAPAUHWND__@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@@Z PROC ; std::_Uninit_move<HWND__ * *,HWND__ * *,std::_Wrap_alloc<std::allocator<HWND__ *> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 482
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 484
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAUHWND__@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUHWND__@@0@Z ; std::_Ptr_cat<HWND__ *,HWND__ *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAPAUHWND__@@@std@@YAPAPAUHWND__@@PAPAU1@@Z ; std::_Val_type<HWND__ * *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAUHWND__@@PAU1@PAU1@@std@@YAPAPAUHWND__@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<HWND__ *,HWND__ *,HWND__ *>
	add	esp, 24					; 00000018H
; Line 485
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAPAUHWND__@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@@std@@YAPAPAUHWND__@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@@Z ENDP ; std::_Uninit_move<HWND__ * *,HWND__ * *,std::_Wrap_alloc<std::allocator<HWND__ *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@PAPAUHWND__@@@std@@YAPAPAUHWND__@@PAPAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAPAUHWND__@@@std@@YAPAPAUHWND__@@PAPAU1@@Z PROC ; std::_Unchecked<HWND__ * *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 280
	push	ebp
	mov	ebp, esp
; Line 281
	mov	eax, DWORD PTR __Src$[ebp]
; Line 282
	pop	ebp
	ret	0
??$_Unchecked@PAPAUHWND__@@@std@@YAPAPAUHWND__@@PAPAU1@@Z ENDP ; std::_Unchecked<HWND__ * *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@UrecordedMacroStep@@@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEXPAUrecordedMacroStep@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@UrecordedMacroStep@@@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEXPAUrecordedMacroStep@@@Z PROC ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::destroy<recordedMacroStep>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 877
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 879
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@UrecordedMacroStep@@@?$allocator_traits@V?$allocator@UrecordedMacroStep@@@std@@@std@@SAXAAV?$allocator@UrecordedMacroStep@@@1@PAUrecordedMacroStep@@@Z ; std::allocator_traits<std::allocator<recordedMacroStep> >::destroy<recordedMacroStep>
	add	esp, 8
; Line 880
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@UrecordedMacroStep@@@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEXPAUrecordedMacroStep@@@Z ENDP ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::destroy<recordedMacroStep>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_move@PAUKeyCombo@@PAU1@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAUKeyCombo@@PAU1@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z PROC ; std::_Uninit_move<KeyCombo *,KeyCombo *,std::_Wrap_alloc<std::allocator<KeyCombo> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 482
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 484
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@UKeyCombo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUKeyCombo@@0@Z ; std::_Ptr_cat<KeyCombo,KeyCombo>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAUKeyCombo@@@std@@YAPAUKeyCombo@@PAU1@@Z ; std::_Val_type<KeyCombo *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@U1@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<KeyCombo *,KeyCombo *,std::allocator<KeyCombo>,KeyCombo>
	add	esp, 24					; 00000018H
; Line 485
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAUKeyCombo@@PAU1@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z ENDP ; std::_Uninit_move<KeyCombo *,KeyCombo *,std::_Wrap_alloc<std::allocator<KeyCombo> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@UKeyCombo@@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@UKeyCombo@@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@@Z PROC ; std::_Wrap_alloc<std::allocator<KeyCombo> >::destroy<KeyCombo>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 877
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 879
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@UKeyCombo@@@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAXAAV?$allocator@UKeyCombo@@@1@PAUKeyCombo@@@Z ; std::allocator_traits<std::allocator<KeyCombo> >::destroy<KeyCombo>
	add	esp, 8
; Line 880
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@UKeyCombo@@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@@Z ENDP ; std::_Wrap_alloc<std::allocator<KeyCombo> >::destroy<KeyCombo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z PROC	; std::allocator<wchar_t>::destroy<wchar_t *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 605
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 608
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ENDP	; std::allocator<wchar_t>::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z PROC ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 598
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 600
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z	; std::forward<wchar_t * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 601
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ENDP ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>
; Function compile flags: /Odtp
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 605
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 608
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 598
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 600
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 601
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
;	COMDAT ??$construct@UtagACCEL@@AAU1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@AAU2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv74 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UtagACCEL@@AAU1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@AAU2@@Z PROC ; std::allocator<tagACCEL>::construct<tagACCEL,tagACCEL &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 598
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@UtagACCEL@@AAU1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@AAU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 600
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	6
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAUtagACCEL@@@std@@YAAAUtagACCEL@@AAU1@@Z ; std::forward<tagACCEL &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [edx+4], ax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv74[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 601
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@UtagACCEL@@AAU1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@AAU2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@UtagACCEL@@AAU1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@AAU2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@UtagACCEL@@AAU1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@AAU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@UtagACCEL@@AAU1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@AAU2@@Z ENDP ; std::allocator<tagACCEL>::construct<tagACCEL,tagACCEL &>
; Function compile flags: /Odtp
;	COMDAT ??$_Rechecked@PAVPluginCmdShortcut@@PAV1@@std@@YAAAPAVPluginCmdShortcut@@AAPAV1@PAV1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAVPluginCmdShortcut@@PAV1@@std@@YAAAPAVPluginCmdShortcut@@AAPAV1@PAV1@@Z PROC ; std::_Rechecked<PluginCmdShortcut *,PluginCmdShortcut *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 288
	push	ebp
	mov	ebp, esp
; Line 289
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 290
	mov	eax, DWORD PTR __Dest$[ebp]
; Line 291
	pop	ebp
	ret	0
??$_Rechecked@PAVPluginCmdShortcut@@PAV1@@std@@YAAAPAVPluginCmdShortcut@@AAPAV1@PAV1@@Z ENDP ; std::_Rechecked<PluginCmdShortcut *,PluginCmdShortcut *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z PROC ; std::_Uninit_copy<PluginCmdShortcut const *,PluginCmdShortcut *,std::_Wrap_alloc<std::allocator<PluginCmdShortcut> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 414
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 416
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@VPluginCmdShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBVPluginCmdShortcut@@PAV2@@Z ; std::_Ptr_cat<PluginCmdShortcut,PluginCmdShortcut>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@V?$allocator@VPluginCmdShortcut@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<PluginCmdShortcut const *,PluginCmdShortcut *,std::allocator<PluginCmdShortcut> >
	add	esp, 20					; 00000014H
; Line 417
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z ENDP ; std::_Uninit_copy<PluginCmdShortcut const *,PluginCmdShortcut *,std::_Wrap_alloc<std::allocator<PluginCmdShortcut> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@PAVPluginCmdShortcut@@@std@@YAPAVPluginCmdShortcut@@PAV1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAVPluginCmdShortcut@@@std@@YAPAVPluginCmdShortcut@@PAV1@@Z PROC ; std::_Unchecked<PluginCmdShortcut *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 280
	push	ebp
	mov	ebp, esp
; Line 281
	mov	eax, DWORD PTR __Src$[ebp]
; Line 282
	pop	ebp
	ret	0
??$_Unchecked@PAVPluginCmdShortcut@@@std@@YAPAVPluginCmdShortcut@@PAV1@@Z ENDP ; std::_Unchecked<PluginCmdShortcut *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@YAPBVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Iter$ = 8						; size = 12
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@YAPBVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 264
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@YAPBVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 265
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QBEPBVPluginCmdShortcut@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >::_Unchecked
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T2[ebp]
; Line 266
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@YAPBVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Iter$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@YAPBVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@YAPBVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@YAPBVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ??$_Rechecked@PAVUserCommand@@PAV1@@std@@YAAAPAVUserCommand@@AAPAV1@PAV1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAVUserCommand@@PAV1@@std@@YAAAPAVUserCommand@@AAPAV1@PAV1@@Z PROC ; std::_Rechecked<UserCommand *,UserCommand *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 288
	push	ebp
	mov	ebp, esp
; Line 289
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 290
	mov	eax, DWORD PTR __Dest$[ebp]
; Line 291
	pop	ebp
	ret	0
??$_Rechecked@PAVUserCommand@@PAV1@@std@@YAAAPAVUserCommand@@AAPAV1@PAV1@@Z ENDP ; std::_Rechecked<UserCommand *,UserCommand *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_copy@PBVUserCommand@@PAV1@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_copy@PBVUserCommand@@PAV1@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z PROC ; std::_Uninit_copy<UserCommand const *,UserCommand *,std::_Wrap_alloc<std::allocator<UserCommand> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 414
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 416
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@VUserCommand@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBVUserCommand@@PAV2@@Z ; std::_Ptr_cat<UserCommand,UserCommand>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Uninit_copy@PBVUserCommand@@PAV1@V?$allocator@VUserCommand@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<UserCommand const *,UserCommand *,std::allocator<UserCommand> >
	add	esp, 20					; 00000014H
; Line 417
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PBVUserCommand@@PAV1@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z ENDP ; std::_Uninit_copy<UserCommand const *,UserCommand *,std::_Wrap_alloc<std::allocator<UserCommand> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@PAVUserCommand@@@std@@YAPAVUserCommand@@PAV1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAVUserCommand@@@std@@YAPAVUserCommand@@PAV1@@Z PROC ; std::_Unchecked<UserCommand *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 280
	push	ebp
	mov	ebp, esp
; Line 281
	mov	eax, DWORD PTR __Src$[ebp]
; Line 282
	pop	ebp
	ret	0
??$_Unchecked@PAVUserCommand@@@std@@YAPAVUserCommand@@PAV1@@Z ENDP ; std::_Unchecked<UserCommand *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@YAPBVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Iter$ = 8						; size = 12
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@YAPBVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<std::_Simple_types<UserCommand> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 264
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@YAPBVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 265
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QBEPBVUserCommand@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >::_Unchecked
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T2[ebp]
; Line 266
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@YAPBVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Iter$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@YAPBVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@YAPBVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@YAPBVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<std::_Simple_types<UserCommand> > >
; Function compile flags: /Odtp
;	COMDAT ??$_Rechecked@PAVMacroShortcut@@PAV1@@std@@YAAAPAVMacroShortcut@@AAPAV1@PAV1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAVMacroShortcut@@PAV1@@std@@YAAAPAVMacroShortcut@@AAPAV1@PAV1@@Z PROC ; std::_Rechecked<MacroShortcut *,MacroShortcut *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 288
	push	ebp
	mov	ebp, esp
; Line 289
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 290
	mov	eax, DWORD PTR __Dest$[ebp]
; Line 291
	pop	ebp
	ret	0
??$_Rechecked@PAVMacroShortcut@@PAV1@@std@@YAAAPAVMacroShortcut@@AAPAV1@PAV1@@Z ENDP ; std::_Rechecked<MacroShortcut *,MacroShortcut *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_copy@PBVMacroShortcut@@PAV1@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_copy@PBVMacroShortcut@@PAV1@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z PROC ; std::_Uninit_copy<MacroShortcut const *,MacroShortcut *,std::_Wrap_alloc<std::allocator<MacroShortcut> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 414
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 416
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@VMacroShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBVMacroShortcut@@PAV2@@Z ; std::_Ptr_cat<MacroShortcut,MacroShortcut>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Uninit_copy@PBVMacroShortcut@@PAV1@V?$allocator@VMacroShortcut@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<MacroShortcut const *,MacroShortcut *,std::allocator<MacroShortcut> >
	add	esp, 20					; 00000014H
; Line 417
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PBVMacroShortcut@@PAV1@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z ENDP ; std::_Uninit_copy<MacroShortcut const *,MacroShortcut *,std::_Wrap_alloc<std::allocator<MacroShortcut> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@PAVMacroShortcut@@@std@@YAPAVMacroShortcut@@PAV1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAVMacroShortcut@@@std@@YAPAVMacroShortcut@@PAV1@@Z PROC ; std::_Unchecked<MacroShortcut *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 280
	push	ebp
	mov	ebp, esp
; Line 281
	mov	eax, DWORD PTR __Src$[ebp]
; Line 282
	pop	ebp
	ret	0
??$_Unchecked@PAVMacroShortcut@@@std@@YAPAVMacroShortcut@@PAV1@@Z ENDP ; std::_Unchecked<MacroShortcut *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@YAPBVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Iter$ = 8						; size = 12
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@YAPBVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<std::_Simple_types<MacroShortcut> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 264
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@YAPBVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 265
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QBEPBVMacroShortcut@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >::_Unchecked
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T2[ebp]
; Line 266
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@YAPBVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Iter$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@YAPBVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@YAPBVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@YAPBVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<std::_Simple_types<MacroShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ??$_Rechecked@PAVCommandShortcut@@PAV1@@std@@YAAAPAVCommandShortcut@@AAPAV1@PAV1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAVCommandShortcut@@PAV1@@std@@YAAAPAVCommandShortcut@@AAPAV1@PAV1@@Z PROC ; std::_Rechecked<CommandShortcut *,CommandShortcut *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 288
	push	ebp
	mov	ebp, esp
; Line 289
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 290
	mov	eax, DWORD PTR __Dest$[ebp]
; Line 291
	pop	ebp
	ret	0
??$_Rechecked@PAVCommandShortcut@@PAV1@@std@@YAAAPAVCommandShortcut@@AAPAV1@PAV1@@Z ENDP ; std::_Rechecked<CommandShortcut *,CommandShortcut *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_copy@PBVCommandShortcut@@PAV1@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_copy@PBVCommandShortcut@@PAV1@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z PROC ; std::_Uninit_copy<CommandShortcut const *,CommandShortcut *,std::_Wrap_alloc<std::allocator<CommandShortcut> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 414
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 416
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@VCommandShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBVCommandShortcut@@PAV2@@Z ; std::_Ptr_cat<CommandShortcut,CommandShortcut>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Uninit_copy@PBVCommandShortcut@@PAV1@V?$allocator@VCommandShortcut@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CommandShortcut const *,CommandShortcut *,std::allocator<CommandShortcut> >
	add	esp, 20					; 00000014H
; Line 417
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PBVCommandShortcut@@PAV1@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z ENDP ; std::_Uninit_copy<CommandShortcut const *,CommandShortcut *,std::_Wrap_alloc<std::allocator<CommandShortcut> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@PAVCommandShortcut@@@std@@YAPAVCommandShortcut@@PAV1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAVCommandShortcut@@@std@@YAPAVCommandShortcut@@PAV1@@Z PROC ; std::_Unchecked<CommandShortcut *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 280
	push	ebp
	mov	ebp, esp
; Line 281
	mov	eax, DWORD PTR __Src$[ebp]
; Line 282
	pop	ebp
	ret	0
??$_Unchecked@PAVCommandShortcut@@@std@@YAPAVCommandShortcut@@PAV1@@Z ENDP ; std::_Unchecked<CommandShortcut *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@YAPBVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Iter$ = 8						; size = 12
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@YAPBVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<std::_Simple_types<CommandShortcut> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 264
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@YAPBVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 265
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QBEPBVCommandShortcut@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >::_Unchecked
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T2[ebp]
; Line 266
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@YAPBVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Iter$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@YAPBVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@YAPBVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@YAPBVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<std::_Simple_types<CommandShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ??$construct@HH@?$allocator@H@std@@QAEXPAH$$QAH@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@HH@?$allocator@H@std@@QAEXPAH$$QAH@Z PROC	; std::allocator<int>::construct<int,int>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 598
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@HH@?$allocator@H@std@@QAEXPAH$$QAH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 600
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@H@std@@YA$$QAHAAH@Z		; std::forward<int>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 601
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@HH@?$allocator@H@std@@QAEXPAH$$QAH@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@HH@?$allocator@H@std@@QAEXPAH$$QAH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@HH@?$allocator@H@std@@QAEXPAH$$QAH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@HH@?$allocator@H@std@@QAEXPAH$$QAH@Z ENDP	; std::allocator<int>::construct<int,int>
; Function compile flags: /Odtp
;	COMDAT ??$construct@PAUHWND__@@AAPAU1@@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@AAPAU2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAUHWND__@@AAPAU1@@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@AAPAU2@@Z PROC ; std::allocator<HWND__ *>::construct<HWND__ *,HWND__ * &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 598
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PAUHWND__@@AAPAU1@@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@AAPAU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 600
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAPAUHWND__@@@std@@YAAAPAUHWND__@@AAPAU1@@Z ; std::forward<HWND__ * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 601
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAUHWND__@@AAPAU1@@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@AAPAU2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PAUHWND__@@AAPAU1@@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@AAPAU2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PAUHWND__@@AAPAU1@@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@AAPAU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PAUHWND__@@AAPAU1@@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@AAPAU2@@Z ENDP ; std::allocator<HWND__ *>::construct<HWND__ *,HWND__ * &>
; Function compile flags: /Odtp
;	COMDAT ??$_Rechecked@PAUrecordedMacroStep@@PAU1@@std@@YAAAPAUrecordedMacroStep@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUrecordedMacroStep@@PAU1@@std@@YAAAPAUrecordedMacroStep@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<recordedMacroStep *,recordedMacroStep *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 288
	push	ebp
	mov	ebp, esp
; Line 289
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 290
	mov	eax, DWORD PTR __Dest$[ebp]
; Line 291
	pop	ebp
	ret	0
??$_Rechecked@PAUrecordedMacroStep@@PAU1@@std@@YAAAPAUrecordedMacroStep@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<recordedMacroStep *,recordedMacroStep *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z PROC ; std::_Uninit_copy<recordedMacroStep const *,recordedMacroStep *,std::_Wrap_alloc<std::allocator<recordedMacroStep> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 414
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 416
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@UrecordedMacroStep@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBUrecordedMacroStep@@PAU2@@Z ; std::_Ptr_cat<recordedMacroStep,recordedMacroStep>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@V?$allocator@UrecordedMacroStep@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<recordedMacroStep const *,recordedMacroStep *,std::allocator<recordedMacroStep> >
	add	esp, 20					; 00000014H
; Line 417
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z ENDP ; std::_Uninit_copy<recordedMacroStep const *,recordedMacroStep *,std::_Wrap_alloc<std::allocator<recordedMacroStep> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@PAUrecordedMacroStep@@@std@@YAPAUrecordedMacroStep@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUrecordedMacroStep@@@std@@YAPAUrecordedMacroStep@@PAU1@@Z PROC ; std::_Unchecked<recordedMacroStep *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 280
	push	ebp
	mov	ebp, esp
; Line 281
	mov	eax, DWORD PTR __Src$[ebp]
; Line 282
	pop	ebp
	ret	0
??$_Unchecked@PAUrecordedMacroStep@@@std@@YAPAUrecordedMacroStep@@PAU1@@Z ENDP ; std::_Unchecked<recordedMacroStep *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@YAPBUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Iter$ = 8						; size = 12
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@YAPBUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 264
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@YAPBUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 265
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QBEPBUrecordedMacroStep@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >::_Unchecked
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T2[ebp]
; Line 266
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@YAPBUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Iter$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@YAPBUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@YAPBUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@YAPBUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >
; Function compile flags: /Odtp
;	COMDAT ??$move@AAUKeyCombo@@@std@@YA$$QAUKeyCombo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUKeyCombo@@@std@@YA$$QAUKeyCombo@@AAU1@@Z PROC ; std::move<KeyCombo &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1519
	push	ebp
	mov	ebp, esp
; Line 1520
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1521
	pop	ebp
	ret	0
??$move@AAUKeyCombo@@@std@@YA$$QAUKeyCombo@@AAU1@@Z ENDP ; std::move<KeyCombo &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@UKeyCombo@@AAU1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@AAU2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv74 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UKeyCombo@@AAU1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@AAU2@@Z PROC ; std::allocator<KeyCombo>::construct<KeyCombo,KeyCombo &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 598
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@UKeyCombo@@AAU1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@AAU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 600
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAUKeyCombo@@@std@@YAAAUKeyCombo@@AAU1@@Z ; std::forward<KeyCombo &>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv74[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 601
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@UKeyCombo@@AAU1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@AAU2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@UKeyCombo@@AAU1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@AAU2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@UKeyCombo@@AAU1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@AAU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@UKeyCombo@@AAU1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@AAU2@@Z ENDP ; std::allocator<KeyCombo>::construct<KeyCombo,KeyCombo &>
; Function compile flags: /Odtp
;	COMDAT ??$_Rechecked@PAUKeyCombo@@PAU1@@std@@YAAAPAUKeyCombo@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUKeyCombo@@PAU1@@std@@YAAAPAUKeyCombo@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<KeyCombo *,KeyCombo *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 288
	push	ebp
	mov	ebp, esp
; Line 289
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 290
	mov	eax, DWORD PTR __Dest$[ebp]
; Line 291
	pop	ebp
	ret	0
??$_Rechecked@PAUKeyCombo@@PAU1@@std@@YAAAPAUKeyCombo@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<KeyCombo *,KeyCombo *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_copy@PBUKeyCombo@@PAU1@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_copy@PBUKeyCombo@@PAU1@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z PROC ; std::_Uninit_copy<KeyCombo const *,KeyCombo *,std::_Wrap_alloc<std::allocator<KeyCombo> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 414
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 416
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@UKeyCombo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBUKeyCombo@@PAU2@@Z ; std::_Ptr_cat<KeyCombo,KeyCombo>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Uninit_copy@PBUKeyCombo@@PAU1@V?$allocator@UKeyCombo@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<KeyCombo const *,KeyCombo *,std::allocator<KeyCombo> >
	add	esp, 20					; 00000014H
; Line 417
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PBUKeyCombo@@PAU1@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z ENDP ; std::_Uninit_copy<KeyCombo const *,KeyCombo *,std::_Wrap_alloc<std::allocator<KeyCombo> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@PAUKeyCombo@@@std@@YAPAUKeyCombo@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUKeyCombo@@@std@@YAPAUKeyCombo@@PAU1@@Z PROC ; std::_Unchecked<KeyCombo *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 280
	push	ebp
	mov	ebp, esp
; Line 281
	mov	eax, DWORD PTR __Src$[ebp]
; Line 282
	pop	ebp
	ret	0
??$_Unchecked@PAUKeyCombo@@@std@@YAPAUKeyCombo@@PAU1@@Z ENDP ; std::_Unchecked<KeyCombo *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@YAPBUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Iter$ = 8						; size = 12
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@YAPBUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<std::_Simple_types<KeyCombo> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 264
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@YAPBUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 265
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBEPBUKeyCombo@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Unchecked
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T2[ebp]
; Line 266
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@YAPBUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Iter$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@YAPBUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@YAPBUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@YAPBUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<std::_Simple_types<KeyCombo> > >
; Function compile flags: /Odtp
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xlocnum
; Line 155
	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xlocnum
; Line 155
	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Find@PAHK@std@@YAPAHPAH0ABKU?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Find@PAHK@std@@YAPAHPAH0ABKU?$integral_constant@_N$0A@@0@@Z PROC ; std::_Find<int *,unsigned long>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 3024
	push	ebp
	mov	ebp, esp
; Line 3025
	jmp	SHORT $LN4@Find
$LN3@Find:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 4
	mov	DWORD PTR __First$[ebp], eax
$LN4@Find:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN2@Find
; Line 3026
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN1@Find
; Line 3027
	jmp	SHORT $LN2@Find
$LN1@Find:
; Line 3028
	jmp	SHORT $LN3@Find
$LN2@Find:
	mov	eax, DWORD PTR __First$[ebp]
; Line 3029
	pop	ebp
	ret	0
??$_Find@PAHK@std@@YAPAHPAH0ABKU?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Find<int *,unsigned long>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__File$ = 32						; size = 4
__Line$ = 36						; size = 4
___formal$ = 40						; size = 1
??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 570
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 571
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Debug_rang
; Line 573
	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
	add	esp, 12					; 0000000cH
; Line 574
	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
	add	esp, 12					; 0000000cH
; Line 575
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator<
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Debug_rang
; Line 576
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_rang:
; Line 578
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
; Function compile flags: /Odtp
;	COMDAT ??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z PROC ; std::_Iter_cat<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 405
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 407
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 408
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ENDP ; std::_Iter_cat<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xlocnum
; Line 155
	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xlocnum
; Line 155
	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninitialized_move@PAUtagACCEL@@PAU1@U?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUtagACCEL@@PAU1@U?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@@Z PROC ; std::_Uninitialized_move<tagACCEL *,tagACCEL *,std::_Wrap_alloc<std::allocator<tagACCEL> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 492
	push	ebp
	mov	ebp, esp
; Line 495
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Unchecked@PAUtagACCEL@@@std@@YAPAUtagACCEL@@PAU1@@Z ; std::_Unchecked<tagACCEL *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Unchecked@PAUtagACCEL@@@std@@YAPAUtagACCEL@@PAU1@@Z ; std::_Unchecked<tagACCEL *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked@PAUtagACCEL@@@std@@YAPAUtagACCEL@@PAU1@@Z ; std::_Unchecked<tagACCEL *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAUtagACCEL@@PAU1@U?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@@Z ; std::_Uninit_move<tagACCEL *,tagACCEL *,std::_Wrap_alloc<std::allocator<tagACCEL> > >
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Rechecked@PAUtagACCEL@@PAU1@@std@@YAAAPAUtagACCEL@@AAPAU1@PAU1@@Z ; std::_Rechecked<tagACCEL *,tagACCEL *>
	add	esp, 8
	mov	eax, DWORD PTR [eax]
; Line 496
	pop	ebp
	ret	0
??$_Uninitialized_move@PAUtagACCEL@@PAU1@U?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<tagACCEL *,tagACCEL *,std::_Wrap_alloc<std::allocator<tagACCEL> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@@std@@YAXPAUtagACCEL@@0AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@@std@@YAXPAUtagACCEL@@0AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<tagACCEL> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 80
	push	ebp
	mov	ebp, esp
; Line 81
	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 6
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra
; Line 82
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@UtagACCEL@@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@@Z ; std::_Wrap_alloc<std::allocator<tagACCEL> >::destroy<tagACCEL>
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:
; Line 83
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@@std@@YAXPAUtagACCEL@@0AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<tagACCEL> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ptr_cat@UtagACCEL@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagACCEL@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UtagACCEL@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagACCEL@@0@Z PROC ; std::_Ptr_cat<tagACCEL,tagACCEL>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 444
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 446
	mov	al, BYTE PTR __Cat$[ebp]
; Line 447
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@UtagACCEL@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagACCEL@@0@Z ENDP ; std::_Ptr_cat<tagACCEL,tagACCEL>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@YAXPAVPluginCmdShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@YAXPAVPluginCmdShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<PluginCmdShortcut> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 80
	push	ebp
	mov	ebp, esp
; Line 81
	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 336				; 00000150H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra
; Line 82
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@VPluginCmdShortcut@@@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEXPAVPluginCmdShortcut@@@Z ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::destroy<PluginCmdShortcut>
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:
; Line 83
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@YAXPAVPluginCmdShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<PluginCmdShortcut> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ptr_cat@VPluginCmdShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVPluginCmdShortcut@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VPluginCmdShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVPluginCmdShortcut@@0@Z PROC ; std::_Ptr_cat<PluginCmdShortcut,PluginCmdShortcut>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 444
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 446
	mov	al, BYTE PTR __Cat$[ebp]
; Line 447
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@VPluginCmdShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVPluginCmdShortcut@@0@Z ENDP ; std::_Ptr_cat<PluginCmdShortcut,PluginCmdShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ptr_cat@VPluginCmdShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBVPluginCmdShortcut@@PAV2@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VPluginCmdShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBVPluginCmdShortcut@@PAV2@@Z PROC ; std::_Ptr_cat<PluginCmdShortcut,PluginCmdShortcut>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 453
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 455
	mov	al, BYTE PTR __Cat$[ebp]
; Line 456
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@VPluginCmdShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBVPluginCmdShortcut@@PAV2@@Z ENDP ; std::_Ptr_cat<PluginCmdShortcut,PluginCmdShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@@std@@YAXPAVUserCommand@@0AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@@std@@YAXPAVUserCommand@@0AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<UserCommand> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 80
	push	ebp
	mov	ebp, esp
; Line 81
	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 328				; 00000148H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra
; Line 82
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@VUserCommand@@@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEXPAVUserCommand@@@Z ; std::_Wrap_alloc<std::allocator<UserCommand> >::destroy<UserCommand>
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:
; Line 83
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@@std@@YAXPAVUserCommand@@0AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<UserCommand> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ptr_cat@VUserCommand@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVUserCommand@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VUserCommand@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVUserCommand@@0@Z PROC ; std::_Ptr_cat<UserCommand,UserCommand>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 444
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 446
	mov	al, BYTE PTR __Cat$[ebp]
; Line 447
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@VUserCommand@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVUserCommand@@0@Z ENDP ; std::_Ptr_cat<UserCommand,UserCommand>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ptr_cat@VUserCommand@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBVUserCommand@@PAV2@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VUserCommand@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBVUserCommand@@PAV2@@Z PROC ; std::_Ptr_cat<UserCommand,UserCommand>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 453
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 455
	mov	al, BYTE PTR __Cat$[ebp]
; Line 456
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@VUserCommand@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBVUserCommand@@PAV2@@Z ENDP ; std::_Ptr_cat<UserCommand,UserCommand>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@YAXPAVMacroShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@YAXPAVMacroShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MacroShortcut> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 80
	push	ebp
	mov	ebp, esp
; Line 81
	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 316				; 0000013cH
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra
; Line 82
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@VMacroShortcut@@@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEXPAVMacroShortcut@@@Z ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::destroy<MacroShortcut>
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:
; Line 83
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@YAXPAVMacroShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MacroShortcut> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ptr_cat@VMacroShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVMacroShortcut@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VMacroShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVMacroShortcut@@0@Z PROC ; std::_Ptr_cat<MacroShortcut,MacroShortcut>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 444
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 446
	mov	al, BYTE PTR __Cat$[ebp]
; Line 447
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@VMacroShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVMacroShortcut@@0@Z ENDP ; std::_Ptr_cat<MacroShortcut,MacroShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ptr_cat@VMacroShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBVMacroShortcut@@PAV2@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VMacroShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBVMacroShortcut@@PAV2@@Z PROC ; std::_Ptr_cat<MacroShortcut,MacroShortcut>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 453
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 455
	mov	al, BYTE PTR __Cat$[ebp]
; Line 456
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@VMacroShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBVMacroShortcut@@PAV2@@Z ENDP ; std::_Ptr_cat<MacroShortcut,MacroShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@YAXPAVCommandShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@YAXPAVCommandShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CommandShortcut> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 80
	push	ebp
	mov	ebp, esp
; Line 81
	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 300				; 0000012cH
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra
; Line 82
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@VCommandShortcut@@@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEXPAVCommandShortcut@@@Z ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::destroy<CommandShortcut>
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:
; Line 83
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@YAXPAVCommandShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CommandShortcut> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ptr_cat@VCommandShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVCommandShortcut@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VCommandShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVCommandShortcut@@0@Z PROC ; std::_Ptr_cat<CommandShortcut,CommandShortcut>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 444
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 446
	mov	al, BYTE PTR __Cat$[ebp]
; Line 447
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@VCommandShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVCommandShortcut@@0@Z ENDP ; std::_Ptr_cat<CommandShortcut,CommandShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ptr_cat@VCommandShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBVCommandShortcut@@PAV2@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VCommandShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBVCommandShortcut@@PAV2@@Z PROC ; std::_Ptr_cat<CommandShortcut,CommandShortcut>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 453
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 455
	mov	al, BYTE PTR __Cat$[ebp]
; Line 456
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@VCommandShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBVCommandShortcut@@PAV2@@Z ENDP ; std::_Ptr_cat<CommandShortcut,CommandShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 492
	push	ebp
	mov	ebp, esp
; Line 495
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z ; std::_Rechecked<int *,int *>
	add	esp, 8
	mov	eax, DWORD PTR [eax]
; Line 496
	pop	ebp
	ret	0
??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninitialized_move@PAPAUHWND__@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@@std@@YAPAPAUHWND__@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAUHWND__@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@@std@@YAPAPAUHWND__@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@@Z PROC ; std::_Uninitialized_move<HWND__ * *,HWND__ * *,std::_Wrap_alloc<std::allocator<HWND__ *> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 492
	push	ebp
	mov	ebp, esp
; Line 495
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Unchecked@PAPAUHWND__@@@std@@YAPAPAUHWND__@@PAPAU1@@Z ; std::_Unchecked<HWND__ * *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Unchecked@PAPAUHWND__@@@std@@YAPAPAUHWND__@@PAPAU1@@Z ; std::_Unchecked<HWND__ * *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked@PAPAUHWND__@@@std@@YAPAPAUHWND__@@PAPAU1@@Z ; std::_Unchecked<HWND__ * *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAPAUHWND__@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@@std@@YAPAPAUHWND__@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@@Z ; std::_Uninit_move<HWND__ * *,HWND__ * *,std::_Wrap_alloc<std::allocator<HWND__ *> > >
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Rechecked@PAPAUHWND__@@PAPAU1@@std@@YAAAPAPAUHWND__@@AAPAPAU1@PAPAU1@@Z ; std::_Rechecked<HWND__ * *,HWND__ * *>
	add	esp, 8
	mov	eax, DWORD PTR [eax]
; Line 496
	pop	ebp
	ret	0
??$_Uninitialized_move@PAPAUHWND__@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@@std@@YAPAPAUHWND__@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<HWND__ * *,HWND__ * *,std::_Wrap_alloc<std::allocator<HWND__ *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@@std@@YAXPAPAUHWND__@@0AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@@std@@YAXPAPAUHWND__@@0AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<HWND__ *> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 89
	push	ebp
	mov	ebp, esp
; Line 90
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@@std@@YAXPAPAUHWND__@@0AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<HWND__ *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ptr_cat@PAUHWND__@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUHWND__@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUHWND__@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUHWND__@@0@Z PROC ; std::_Ptr_cat<HWND__ *,HWND__ *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 444
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 446
	mov	al, BYTE PTR __Cat$[ebp]
; Line 447
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAUHWND__@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUHWND__@@0@Z ENDP ; std::_Ptr_cat<HWND__ *,HWND__ *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@YAXPAUrecordedMacroStep@@0AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@YAXPAUrecordedMacroStep@@0AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<recordedMacroStep> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 80
	push	ebp
	mov	ebp, esp
; Line 81
	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra
; Line 82
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@UrecordedMacroStep@@@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEXPAUrecordedMacroStep@@@Z ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::destroy<recordedMacroStep>
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:
; Line 83
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@YAXPAUrecordedMacroStep@@0AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<recordedMacroStep> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ptr_cat@UrecordedMacroStep@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUrecordedMacroStep@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UrecordedMacroStep@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUrecordedMacroStep@@0@Z PROC ; std::_Ptr_cat<recordedMacroStep,recordedMacroStep>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 444
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 446
	mov	al, BYTE PTR __Cat$[ebp]
; Line 447
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@UrecordedMacroStep@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUrecordedMacroStep@@0@Z ENDP ; std::_Ptr_cat<recordedMacroStep,recordedMacroStep>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ptr_cat@UrecordedMacroStep@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBUrecordedMacroStep@@PAU2@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UrecordedMacroStep@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBUrecordedMacroStep@@PAU2@@Z PROC ; std::_Ptr_cat<recordedMacroStep,recordedMacroStep>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 453
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 455
	mov	al, BYTE PTR __Cat$[ebp]
; Line 456
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@UrecordedMacroStep@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBUrecordedMacroStep@@PAU2@@Z ENDP ; std::_Ptr_cat<recordedMacroStep,recordedMacroStep>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 728
	push	ebp
	mov	ebp, esp
; Line 730
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
; Line 731
	pop	ebp
	ret	0
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
; Line 724
	pop	ebp
	ret	0
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninitialized_move@PAUKeyCombo@@PAU1@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUKeyCombo@@PAU1@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z PROC ; std::_Uninitialized_move<KeyCombo *,KeyCombo *,std::_Wrap_alloc<std::allocator<KeyCombo> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 492
	push	ebp
	mov	ebp, esp
; Line 495
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Unchecked@PAUKeyCombo@@@std@@YAPAUKeyCombo@@PAU1@@Z ; std::_Unchecked<KeyCombo *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Unchecked@PAUKeyCombo@@@std@@YAPAUKeyCombo@@PAU1@@Z ; std::_Unchecked<KeyCombo *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked@PAUKeyCombo@@@std@@YAPAUKeyCombo@@PAU1@@Z ; std::_Unchecked<KeyCombo *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAUKeyCombo@@PAU1@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z ; std::_Uninit_move<KeyCombo *,KeyCombo *,std::_Wrap_alloc<std::allocator<KeyCombo> > >
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Rechecked@PAUKeyCombo@@PAU1@@std@@YAAAPAUKeyCombo@@AAPAU1@PAU1@@Z ; std::_Rechecked<KeyCombo *,KeyCombo *>
	add	esp, 8
	mov	eax, DWORD PTR [eax]
; Line 496
	pop	ebp
	ret	0
??$_Uninitialized_move@PAUKeyCombo@@PAU1@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<KeyCombo *,KeyCombo *,std::_Wrap_alloc<std::allocator<KeyCombo> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 89
	push	ebp
	mov	ebp, esp
; Line 90
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z PROC ; std::_Ptr_cat<int,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 444
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 446
	mov	al, BYTE PTR __Cat$[ebp]
; Line 447
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ENDP ; std::_Ptr_cat<int,int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAXPAUKeyCombo@@0AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAXPAUKeyCombo@@0AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<KeyCombo> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 80
	push	ebp
	mov	ebp, esp
; Line 81
	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 4
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra
; Line 82
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@UKeyCombo@@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@@Z ; std::_Wrap_alloc<std::allocator<KeyCombo> >::destroy<KeyCombo>
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:
; Line 83
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAXPAUKeyCombo@@0AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<KeyCombo> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 728
	push	ebp
	mov	ebp, esp
; Line 730
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>
; Line 731
	pop	ebp
	ret	0
??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z	; std::forward<wchar_t * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>
; Line 724
	pop	ebp
	ret	0
??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z PROC		; std::forward<wchar_t * &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ENDP		; std::forward<wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 728
	push	ebp
	mov	ebp, esp
; Line 730
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>
; Line 731
	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
; Line 724
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@UtagACCEL@@ABU1@@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAXAAV?$allocator@UtagACCEL@@@1@PAUtagACCEL@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UtagACCEL@@ABU1@@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAXAAV?$allocator@UtagACCEL@@@1@PAUtagACCEL@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABUtagACCEL@@@std@@YAABUtagACCEL@@ABU1@@Z ; std::forward<tagACCEL const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@ABU3@@Z ; std::allocator<tagACCEL>::construct
; Line 724
	pop	ebp
	ret	0
??$construct@UtagACCEL@@ABU1@@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAXAAV?$allocator@UtagACCEL@@@1@PAUtagACCEL@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@ABUtagACCEL@@@std@@YAABUtagACCEL@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUtagACCEL@@@std@@YAABUtagACCEL@@ABU1@@Z PROC ; std::forward<tagACCEL const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@ABUtagACCEL@@@std@@YAABUtagACCEL@@ABU1@@Z ENDP ; std::forward<tagACCEL const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@UtagACCEL@@AAU1@@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAXAAV?$allocator@UtagACCEL@@@1@PAUtagACCEL@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UtagACCEL@@AAU1@@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAXAAV?$allocator@UtagACCEL@@@1@PAUtagACCEL@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAUtagACCEL@@@std@@YAAAUtagACCEL@@AAU1@@Z ; std::forward<tagACCEL &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@UtagACCEL@@AAU1@@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@AAU2@@Z ; std::allocator<tagACCEL>::construct<tagACCEL,tagACCEL &>
; Line 724
	pop	ebp
	ret	0
??$construct@UtagACCEL@@AAU1@@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAXAAV?$allocator@UtagACCEL@@@1@PAUtagACCEL@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@AAUtagACCEL@@@std@@YAAAUtagACCEL@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUtagACCEL@@@std@@YAAAUtagACCEL@@AAU1@@Z PROC ; std::forward<tagACCEL &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@AAUtagACCEL@@@std@@YAAAUtagACCEL@@AAU1@@Z ENDP ; std::forward<tagACCEL &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@PAVPluginCmdShortcut@@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@@std@@YAPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z
_TEXT	SEGMENT
tv147 = -52						; size = 4
$T2 = -48						; size = 4
tv143 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
tv67 = -32						; size = 4
tv148 = -28						; size = 4
tv153 = -24						; size = 4
tv144 = -20						; size = 4
tv151 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Dest$ = 32						; size = 4
__Al$ = 36						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@PAVPluginCmdShortcut@@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@@std@@YAPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >,PluginCmdShortcut *,std::_Wrap_alloc<std::allocator<PluginCmdShortcut> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 424
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@PAVPluginCmdShortcut@@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@@std@@YAPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 427
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Unchecked@PAVPluginCmdShortcut@@@std@@YAPAVPluginCmdShortcut@@PAV1@@Z ; std::_Unchecked<PluginCmdShortcut *>
	add	esp, 4
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv151[ebp], eax
	mov	eax, DWORD PTR tv151[ebp]
	mov	DWORD PTR tv143[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@YAPBVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv144[ebp], eax
	mov	ecx, DWORD PTR tv144[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv153[ebp], eax
	mov	eax, DWORD PTR tv153[ebp]
	mov	DWORD PTR tv147[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@YAPBVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv148[ebp], eax
	mov	ecx, DWORD PTR tv148[ebp]
	push	ecx
	call	??$_Uninit_copy@PBVPluginCmdShortcut@@PAV1@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@YAPAVPluginCmdShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z ; std::_Uninit_copy<PluginCmdShortcut const *,PluginCmdShortcut *,std::_Wrap_alloc<std::allocator<PluginCmdShortcut> > >
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv67[ebp], eax
	mov	edx, DWORD PTR tv67[ebp]
	push	edx
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Rechecked@PAVPluginCmdShortcut@@PAV1@@std@@YAAAPAVPluginCmdShortcut@@AAPAV1@PAV1@@Z ; std::_Rechecked<PluginCmdShortcut *,PluginCmdShortcut *>
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T4[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T4[ebp]
; Line 428
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@PAVPluginCmdShortcut@@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@@std@@YAPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@PAVPluginCmdShortcut@@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@@std@@YAPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@PAVPluginCmdShortcut@@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@@std@@YAPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@PAVPluginCmdShortcut@@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@@std@@YAPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@PAVPluginCmdShortcut@@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@@std@@YAPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@PAVPluginCmdShortcut@@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@@std@@YAPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@PAVPluginCmdShortcut@@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@@std@@YAPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >,PluginCmdShortcut *,std::_Wrap_alloc<std::allocator<PluginCmdShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@PAVUserCommand@@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@@std@@YAPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z
_TEXT	SEGMENT
tv147 = -52						; size = 4
$T2 = -48						; size = 4
tv143 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
tv67 = -32						; size = 4
tv148 = -28						; size = 4
tv153 = -24						; size = 4
tv144 = -20						; size = 4
tv151 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Dest$ = 32						; size = 4
__Al$ = 36						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@PAVUserCommand@@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@@std@@YAPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >,UserCommand *,std::_Wrap_alloc<std::allocator<UserCommand> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 424
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@PAVUserCommand@@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@@std@@YAPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 427
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Unchecked@PAVUserCommand@@@std@@YAPAVUserCommand@@PAV1@@Z ; std::_Unchecked<UserCommand *>
	add	esp, 4
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv151[ebp], eax
	mov	eax, DWORD PTR tv151[ebp]
	mov	DWORD PTR tv143[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@YAPBVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<UserCommand> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv144[ebp], eax
	mov	ecx, DWORD PTR tv144[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv153[ebp], eax
	mov	eax, DWORD PTR tv153[ebp]
	mov	DWORD PTR tv147[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@YAPBVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<UserCommand> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv148[ebp], eax
	mov	ecx, DWORD PTR tv148[ebp]
	push	ecx
	call	??$_Uninit_copy@PBVUserCommand@@PAV1@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@@std@@YAPAVUserCommand@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z ; std::_Uninit_copy<UserCommand const *,UserCommand *,std::_Wrap_alloc<std::allocator<UserCommand> > >
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv67[ebp], eax
	mov	edx, DWORD PTR tv67[ebp]
	push	edx
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Rechecked@PAVUserCommand@@PAV1@@std@@YAAAPAVUserCommand@@AAPAV1@PAV1@@Z ; std::_Rechecked<UserCommand *,UserCommand *>
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T4[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T4[ebp]
; Line 428
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@PAVUserCommand@@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@@std@@YAPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@PAVUserCommand@@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@@std@@YAPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@PAVUserCommand@@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@@std@@YAPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@PAVUserCommand@@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@@std@@YAPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@PAVUserCommand@@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@@std@@YAPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@PAVUserCommand@@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@@std@@YAPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@PAVUserCommand@@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@@std@@YAPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >,UserCommand *,std::_Wrap_alloc<std::allocator<UserCommand> > >
; Function compile flags: /Odtp
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@PAVMacroShortcut@@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@@std@@YAPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z
_TEXT	SEGMENT
tv147 = -52						; size = 4
$T2 = -48						; size = 4
tv143 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
tv67 = -32						; size = 4
tv148 = -28						; size = 4
tv153 = -24						; size = 4
tv144 = -20						; size = 4
tv151 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Dest$ = 32						; size = 4
__Al$ = 36						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@PAVMacroShortcut@@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@@std@@YAPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >,MacroShortcut *,std::_Wrap_alloc<std::allocator<MacroShortcut> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 424
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@PAVMacroShortcut@@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@@std@@YAPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 427
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Unchecked@PAVMacroShortcut@@@std@@YAPAVMacroShortcut@@PAV1@@Z ; std::_Unchecked<MacroShortcut *>
	add	esp, 4
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv151[ebp], eax
	mov	eax, DWORD PTR tv151[ebp]
	mov	DWORD PTR tv143[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@YAPBVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<MacroShortcut> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv144[ebp], eax
	mov	ecx, DWORD PTR tv144[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv153[ebp], eax
	mov	eax, DWORD PTR tv153[ebp]
	mov	DWORD PTR tv147[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@YAPBVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<MacroShortcut> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv148[ebp], eax
	mov	ecx, DWORD PTR tv148[ebp]
	push	ecx
	call	??$_Uninit_copy@PBVMacroShortcut@@PAV1@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@YAPAVMacroShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z ; std::_Uninit_copy<MacroShortcut const *,MacroShortcut *,std::_Wrap_alloc<std::allocator<MacroShortcut> > >
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv67[ebp], eax
	mov	edx, DWORD PTR tv67[ebp]
	push	edx
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Rechecked@PAVMacroShortcut@@PAV1@@std@@YAAAPAVMacroShortcut@@AAPAV1@PAV1@@Z ; std::_Rechecked<MacroShortcut *,MacroShortcut *>
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T4[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T4[ebp]
; Line 428
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@PAVMacroShortcut@@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@@std@@YAPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@PAVMacroShortcut@@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@@std@@YAPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@PAVMacroShortcut@@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@@std@@YAPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@PAVMacroShortcut@@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@@std@@YAPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@PAVMacroShortcut@@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@@std@@YAPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@PAVMacroShortcut@@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@@std@@YAPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@PAVMacroShortcut@@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@@std@@YAPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >,MacroShortcut *,std::_Wrap_alloc<std::allocator<MacroShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@PAVCommandShortcut@@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@@std@@YAPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z
_TEXT	SEGMENT
tv147 = -52						; size = 4
$T2 = -48						; size = 4
tv143 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
tv67 = -32						; size = 4
tv148 = -28						; size = 4
tv153 = -24						; size = 4
tv144 = -20						; size = 4
tv151 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Dest$ = 32						; size = 4
__Al$ = 36						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@PAVCommandShortcut@@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@@std@@YAPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >,CommandShortcut *,std::_Wrap_alloc<std::allocator<CommandShortcut> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 424
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@PAVCommandShortcut@@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@@std@@YAPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 427
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Unchecked@PAVCommandShortcut@@@std@@YAPAVCommandShortcut@@PAV1@@Z ; std::_Unchecked<CommandShortcut *>
	add	esp, 4
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv151[ebp], eax
	mov	eax, DWORD PTR tv151[ebp]
	mov	DWORD PTR tv143[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@YAPBVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<CommandShortcut> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv144[ebp], eax
	mov	ecx, DWORD PTR tv144[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv153[ebp], eax
	mov	eax, DWORD PTR tv153[ebp]
	mov	DWORD PTR tv147[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@YAPBVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<CommandShortcut> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv148[ebp], eax
	mov	ecx, DWORD PTR tv148[ebp]
	push	ecx
	call	??$_Uninit_copy@PBVCommandShortcut@@PAV1@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@YAPAVCommandShortcut@@PBV1@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z ; std::_Uninit_copy<CommandShortcut const *,CommandShortcut *,std::_Wrap_alloc<std::allocator<CommandShortcut> > >
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv67[ebp], eax
	mov	edx, DWORD PTR tv67[ebp]
	push	edx
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Rechecked@PAVCommandShortcut@@PAV1@@std@@YAAAPAVCommandShortcut@@AAPAV1@PAV1@@Z ; std::_Rechecked<CommandShortcut *,CommandShortcut *>
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T4[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T4[ebp]
; Line 428
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@PAVCommandShortcut@@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@@std@@YAPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@PAVCommandShortcut@@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@@std@@YAPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@PAVCommandShortcut@@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@@std@@YAPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@PAVCommandShortcut@@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@@std@@YAPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@PAVCommandShortcut@@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@@std@@YAPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@PAVCommandShortcut@@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@@std@@YAPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@PAVCommandShortcut@@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@@std@@YAPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >,CommandShortcut *,std::_Wrap_alloc<std::allocator<CommandShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ??$construct@HH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAH$$QAH@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@HH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAH$$QAH@Z PROC ; std::allocator_traits<std::allocator<int> >::construct<int,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@H@std@@YA$$QAHAAH@Z		; std::forward<int>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@HH@?$allocator@H@std@@QAEXPAH$$QAH@Z ; std::allocator<int>::construct<int,int>
; Line 724
	pop	ebp
	ret	0
??$construct@HH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAH$$QAH@Z ENDP ; std::allocator_traits<std::allocator<int> >::construct<int,int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PAUHWND__@@ABQAU1@@?$allocator_traits@V?$allocator@PAUHWND__@@@std@@@std@@SAXAAV?$allocator@PAUHWND__@@@1@PAPAUHWND__@@ABQAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAUHWND__@@ABQAU1@@?$allocator_traits@V?$allocator@PAUHWND__@@@std@@@std@@SAXAAV?$allocator@PAUHWND__@@@1@PAPAUHWND__@@ABQAU3@@Z PROC ; std::allocator_traits<std::allocator<HWND__ *> >::construct<HWND__ *,HWND__ * const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABQAUHWND__@@@std@@YAABQAUHWND__@@ABQAU1@@Z ; std::forward<HWND__ * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@ABQAU3@@Z ; std::allocator<HWND__ *>::construct
; Line 724
	pop	ebp
	ret	0
??$construct@PAUHWND__@@ABQAU1@@?$allocator_traits@V?$allocator@PAUHWND__@@@std@@@std@@SAXAAV?$allocator@PAUHWND__@@@1@PAPAUHWND__@@ABQAU3@@Z ENDP ; std::allocator_traits<std::allocator<HWND__ *> >::construct<HWND__ *,HWND__ * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@ABQAUHWND__@@@std@@YAABQAUHWND__@@ABQAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAUHWND__@@@std@@YAABQAUHWND__@@ABQAU1@@Z PROC ; std::forward<HWND__ * const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@ABQAUHWND__@@@std@@YAABQAUHWND__@@ABQAU1@@Z ENDP ; std::forward<HWND__ * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PAUHWND__@@AAPAU1@@?$allocator_traits@V?$allocator@PAUHWND__@@@std@@@std@@SAXAAV?$allocator@PAUHWND__@@@1@PAPAUHWND__@@AAPAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAUHWND__@@AAPAU1@@?$allocator_traits@V?$allocator@PAUHWND__@@@std@@@std@@SAXAAV?$allocator@PAUHWND__@@@1@PAPAUHWND__@@AAPAU3@@Z PROC ; std::allocator_traits<std::allocator<HWND__ *> >::construct<HWND__ *,HWND__ * &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAPAUHWND__@@@std@@YAAAPAUHWND__@@AAPAU1@@Z ; std::forward<HWND__ * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAUHWND__@@AAPAU1@@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@AAPAU2@@Z ; std::allocator<HWND__ *>::construct<HWND__ *,HWND__ * &>
; Line 724
	pop	ebp
	ret	0
??$construct@PAUHWND__@@AAPAU1@@?$allocator_traits@V?$allocator@PAUHWND__@@@std@@@std@@SAXAAV?$allocator@PAUHWND__@@@1@PAPAUHWND__@@AAPAU3@@Z ENDP ; std::allocator_traits<std::allocator<HWND__ *> >::construct<HWND__ *,HWND__ * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@AAPAUHWND__@@@std@@YAAAPAUHWND__@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAUHWND__@@@std@@YAAAPAUHWND__@@AAPAU1@@Z PROC ; std::forward<HWND__ * &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@AAPAUHWND__@@@std@@YAAAPAUHWND__@@AAPAU1@@Z ENDP ; std::forward<HWND__ * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@PAUrecordedMacroStep@@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@@std@@YAPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z
_TEXT	SEGMENT
tv147 = -52						; size = 4
$T2 = -48						; size = 4
tv143 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
tv67 = -32						; size = 4
tv148 = -28						; size = 4
tv153 = -24						; size = 4
tv144 = -20						; size = 4
tv151 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Dest$ = 32						; size = 4
__Al$ = 36						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@PAUrecordedMacroStep@@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@@std@@YAPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >,recordedMacroStep *,std::_Wrap_alloc<std::allocator<recordedMacroStep> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 424
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@PAUrecordedMacroStep@@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@@std@@YAPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 427
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Unchecked@PAUrecordedMacroStep@@@std@@YAPAUrecordedMacroStep@@PAU1@@Z ; std::_Unchecked<recordedMacroStep *>
	add	esp, 4
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv151[ebp], eax
	mov	eax, DWORD PTR tv151[ebp]
	mov	DWORD PTR tv143[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@YAPBUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv144[ebp], eax
	mov	ecx, DWORD PTR tv144[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv153[ebp], eax
	mov	eax, DWORD PTR tv153[ebp]
	mov	DWORD PTR tv147[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@YAPBUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv148[ebp], eax
	mov	ecx, DWORD PTR tv148[ebp]
	push	ecx
	call	??$_Uninit_copy@PBUrecordedMacroStep@@PAU1@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@YAPAUrecordedMacroStep@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z ; std::_Uninit_copy<recordedMacroStep const *,recordedMacroStep *,std::_Wrap_alloc<std::allocator<recordedMacroStep> > >
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv67[ebp], eax
	mov	edx, DWORD PTR tv67[ebp]
	push	edx
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Rechecked@PAUrecordedMacroStep@@PAU1@@std@@YAAAPAUrecordedMacroStep@@AAPAU1@PAU1@@Z ; std::_Rechecked<recordedMacroStep *,recordedMacroStep *>
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T4[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T4[ebp]
; Line 428
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@PAUrecordedMacroStep@@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@@std@@YAPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@PAUrecordedMacroStep@@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@@std@@YAPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@PAUrecordedMacroStep@@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@@std@@YAPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@PAUrecordedMacroStep@@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@@std@@YAPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@PAUrecordedMacroStep@@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@@std@@YAPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@PAUrecordedMacroStep@@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@@std@@YAPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@PAUrecordedMacroStep@@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@@std@@YAPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >,recordedMacroStep *,std::_Wrap_alloc<std::allocator<recordedMacroStep> > >
; Function compile flags: /Odtp
;	COMDAT ??$_Move@PAUKeyCombo@@PAU1@@std@@YAPAUKeyCombo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUKeyCombo@@PAU1@@std@@YAPAUKeyCombo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<KeyCombo *,KeyCombo *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 2418
	push	ebp
	mov	ebp, esp
; Line 2419
	jmp	SHORT $LN3@Move
$LN2@Move:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 4
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 4
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Move:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Move
; Line 2420
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$move@AAUKeyCombo@@@std@@YA$$QAUKeyCombo@@AAU1@@Z ; std::move<KeyCombo &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@Move
$LN1@Move:
; Line 2421
	mov	eax, DWORD PTR __Dest$[ebp]
; Line 2422
	pop	ebp
	ret	0
??$_Move@PAUKeyCombo@@PAU1@@std@@YAPAUKeyCombo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<KeyCombo *,KeyCombo *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ptr_cat@UKeyCombo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUKeyCombo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UKeyCombo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUKeyCombo@@0@Z PROC ; std::_Ptr_cat<KeyCombo,KeyCombo>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 444
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 446
	mov	al, BYTE PTR __Cat$[ebp]
; Line 447
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@UKeyCombo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUKeyCombo@@0@Z ENDP ; std::_Ptr_cat<KeyCombo,KeyCombo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ptr_cat@UKeyCombo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBUKeyCombo@@PAU2@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UKeyCombo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBUKeyCombo@@PAU2@@Z PROC ; std::_Ptr_cat<KeyCombo,KeyCombo>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 453
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 455
	mov	al, BYTE PTR __Cat$[ebp]
; Line 456
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@UKeyCombo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBUKeyCombo@@PAU2@@Z ENDP ; std::_Ptr_cat<KeyCombo,KeyCombo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@UKeyCombo@@ABU1@@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAXAAV?$allocator@UKeyCombo@@@1@PAUKeyCombo@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UKeyCombo@@ABU1@@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAXAAV?$allocator@UKeyCombo@@@1@PAUKeyCombo@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABUKeyCombo@@@std@@YAABUKeyCombo@@ABU1@@Z ; std::forward<KeyCombo const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@ABU3@@Z ; std::allocator<KeyCombo>::construct
; Line 724
	pop	ebp
	ret	0
??$construct@UKeyCombo@@ABU1@@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAXAAV?$allocator@UKeyCombo@@@1@PAUKeyCombo@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@ABUKeyCombo@@@std@@YAABUKeyCombo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUKeyCombo@@@std@@YAABUKeyCombo@@ABU1@@Z PROC ; std::forward<KeyCombo const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@ABUKeyCombo@@@std@@YAABUKeyCombo@@ABU1@@Z ENDP ; std::forward<KeyCombo const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@UKeyCombo@@AAU1@@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAXAAV?$allocator@UKeyCombo@@@1@PAUKeyCombo@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UKeyCombo@@AAU1@@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAXAAV?$allocator@UKeyCombo@@@1@PAUKeyCombo@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAUKeyCombo@@@std@@YAAAUKeyCombo@@AAU1@@Z ; std::forward<KeyCombo &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@UKeyCombo@@AAU1@@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@AAU2@@Z ; std::allocator<KeyCombo>::construct<KeyCombo,KeyCombo &>
; Line 724
	pop	ebp
	ret	0
??$construct@UKeyCombo@@AAU1@@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAXAAV?$allocator@UKeyCombo@@@1@PAUKeyCombo@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@AAUKeyCombo@@@std@@YAAAUKeyCombo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUKeyCombo@@@std@@YAAAUKeyCombo@@AAU1@@Z PROC ; std::forward<KeyCombo &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@AAUKeyCombo@@@std@@YAAAUKeyCombo@@AAU1@@Z ENDP ; std::forward<KeyCombo &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@PAUKeyCombo@@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@@std@@YAPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z
_TEXT	SEGMENT
tv147 = -52						; size = 4
$T2 = -48						; size = 4
tv143 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
tv67 = -32						; size = 4
tv148 = -28						; size = 4
tv153 = -24						; size = 4
tv144 = -20						; size = 4
tv151 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Dest$ = 32						; size = 4
__Al$ = 36						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@PAUKeyCombo@@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@@std@@YAPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >,KeyCombo *,std::_Wrap_alloc<std::allocator<KeyCombo> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 424
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@PAUKeyCombo@@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@@std@@YAPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 427
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Unchecked@PAUKeyCombo@@@std@@YAPAUKeyCombo@@PAU1@@Z ; std::_Unchecked<KeyCombo *>
	add	esp, 4
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv151[ebp], eax
	mov	eax, DWORD PTR tv151[ebp]
	mov	DWORD PTR tv143[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@YAPBUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<KeyCombo> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv144[ebp], eax
	mov	ecx, DWORD PTR tv144[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv153[ebp], eax
	mov	eax, DWORD PTR tv153[ebp]
	mov	DWORD PTR tv147[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@YAPBUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<KeyCombo> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv148[ebp], eax
	mov	ecx, DWORD PTR tv148[ebp]
	push	ecx
	call	??$_Uninit_copy@PBUKeyCombo@@PAU1@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAPAUKeyCombo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z ; std::_Uninit_copy<KeyCombo const *,KeyCombo *,std::_Wrap_alloc<std::allocator<KeyCombo> > >
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv67[ebp], eax
	mov	edx, DWORD PTR tv67[ebp]
	push	edx
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Rechecked@PAUKeyCombo@@PAU1@@std@@YAAAPAUKeyCombo@@AAPAU1@PAU1@@Z ; std::_Rechecked<KeyCombo *,KeyCombo *>
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T4[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T4[ebp]
; Line 428
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@PAUKeyCombo@@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@@std@@YAPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@PAUKeyCombo@@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@@std@@YAPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@PAUKeyCombo@@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@@std@@YAPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@PAUKeyCombo@@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@@std@@YAPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@PAUKeyCombo@@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@@std@@YAPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@PAUKeyCombo@@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@@std@@YAPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@PAUKeyCombo@@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@@std@@YAPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >,KeyCombo *,std::_Wrap_alloc<std::allocator<KeyCombo> > >
; Function compile flags: /Odtp
;	COMDAT ??$_Rechecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@AAV10@PAH@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Rechecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@AAV10@PAH@Z PROC ; std::_Rechecked<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 404
	push	ebp
	mov	ebp, esp
; Line 405
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Iter$[ebp]
	call	?_Rechecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV12@PAH@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Rechecked
; Line 406
	pop	ebp
	ret	0
??$_Rechecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@AAV10@PAH@Z ENDP ; std::_Rechecked<std::_Vector_val<std::_Simple_types<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Find@PAHK@std@@YAPAHPAH0ABK@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Find@PAHK@std@@YAPAHPAH0ABK@Z PROC			; std::_Find<int *,unsigned long>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 3034
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 3045
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Find@PAHK@std@@YAPAHPAH0ABKU?$integral_constant@_N$0A@@0@@Z ; std::_Find<int *,unsigned long>
	add	esp, 16					; 00000010H
; Line 3046
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Find@PAHK@std@@YAPAHPAH0ABK@Z ENDP			; std::_Find<int *,unsigned long>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Iter$ = 8						; size = 12
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 395
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 396
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEPAHXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Unchecked
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T2[ebp]
; Line 397
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Iter$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<std::_Simple_types<int> > >
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z
_TEXT	SEGMENT
tv140 = -40						; size = 4
$T2 = -36						; size = 4
tv137 = -32						; size = 4
$T3 = -28						; size = 4
tv144 = -24						; size = 4
tv143 = -20						; size = 4
$T4 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__File$ = 32						; size = 4
__Line$ = 36						; size = 4
??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z PROC ; std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 583
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 584
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ; std::_Iter_cat<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv143[ebp], eax
	mov	ecx, DWORD PTR tv143[ebp]
	mov	DWORD PTR tv137[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv144[ebp], eax
	mov	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR tv140[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
	add	esp, 36					; 00000024H
; Line 585
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z ENDP ; std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$di	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$di	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$di	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@_W@std@@YAPA_WIPA_W@Z PROC			; std::_Allocate<wchar_t>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], 2147483647	; 7fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 1
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@_W@std@@YAPA_WIPA_W@Z ENDP			; std::_Allocate<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Allocate@UtagACCEL@@@std@@YAPAUtagACCEL@@IPAU1@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UtagACCEL@@@std@@YAPAUtagACCEL@@IPAU1@@Z PROC ; std::_Allocate<tagACCEL>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], 715827882	; 2aaaaaaaH
	ja	SHORT $LN1@Allocate
	imul	eax, DWORD PTR __Count$[ebp], 6
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UtagACCEL@@@std@@YAPAUtagACCEL@@IPAU1@@Z ENDP ; std::_Allocate<tagACCEL>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Allocate@H@std@@YAPAHIPAH@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@H@std@@YAPAHIPAH@Z PROC			; std::_Allocate<int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@H@std@@YAPAHIPAH@Z ENDP			; std::_Allocate<int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Allocate@PAUHWND__@@@std@@YAPAPAUHWND__@@IPAPAU1@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAUHWND__@@@std@@YAPAPAUHWND__@@IPAPAU1@@Z PROC ; std::_Allocate<HWND__ *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAUHWND__@@@std@@YAPAPAUHWND__@@IPAPAU1@@Z ENDP ; std::_Allocate<HWND__ *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z PROC ; std::_Allocate<std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Allocate@VPluginCmdShortcut@@@std@@YAPAVPluginCmdShortcut@@IPAV1@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VPluginCmdShortcut@@@std@@YAPAVPluginCmdShortcut@@IPAV1@@Z PROC ; std::_Allocate<PluginCmdShortcut>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], 12782640	; 00c30c30H
	ja	SHORT $LN1@Allocate
	imul	eax, DWORD PTR __Count$[ebp], 336
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@VPluginCmdShortcut@@@std@@YAPAVPluginCmdShortcut@@IPAV1@@Z ENDP ; std::_Allocate<PluginCmdShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Allocate@VUserCommand@@@std@@YAPAVUserCommand@@IPAV1@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VUserCommand@@@std@@YAPAVUserCommand@@IPAV1@@Z PROC ; std::_Allocate<UserCommand>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], 13094412	; 00c7ce0cH
	ja	SHORT $LN1@Allocate
	imul	eax, DWORD PTR __Count$[ebp], 328
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@VUserCommand@@@std@@YAPAVUserCommand@@IPAV1@@Z ENDP ; std::_Allocate<UserCommand>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Allocate@VMacroShortcut@@@std@@YAPAVMacroShortcut@@IPAV1@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VMacroShortcut@@@std@@YAPAVMacroShortcut@@IPAV1@@Z PROC ; std::_Allocate<MacroShortcut>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], 13591668	; 00cf6474H
	ja	SHORT $LN1@Allocate
	imul	eax, DWORD PTR __Count$[ebp], 316
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@VMacroShortcut@@@std@@YAPAVMacroShortcut@@IPAV1@@Z ENDP ; std::_Allocate<MacroShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Allocate@VCommandShortcut@@@std@@YAPAVCommandShortcut@@IPAV1@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VCommandShortcut@@@std@@YAPAVCommandShortcut@@IPAV1@@Z PROC ; std::_Allocate<CommandShortcut>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], 14316557	; 00da740dH
	ja	SHORT $LN1@Allocate
	imul	eax, DWORD PTR __Count$[ebp], 300
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@VCommandShortcut@@@std@@YAPAVCommandShortcut@@IPAV1@@Z ENDP ; std::_Allocate<CommandShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Allocate@UrecordedMacroStep@@@std@@YAPAUrecordedMacroStep@@IPAU1@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UrecordedMacroStep@@@std@@YAPAUrecordedMacroStep@@IPAU1@@Z PROC ; std::_Allocate<recordedMacroStep>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], 97612893	; 05d1745dH
	ja	SHORT $LN1@Allocate
	imul	eax, DWORD PTR __Count$[ebp], 44
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UrecordedMacroStep@@@std@@YAPAUrecordedMacroStep@@IPAU1@@Z ENDP ; std::_Allocate<recordedMacroStep>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Allocate@UKeyCombo@@@std@@YAPAUKeyCombo@@IPAU1@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UKeyCombo@@@std@@YAPAUKeyCombo@@IPAU1@@Z PROC ; std::_Allocate<KeyCombo>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UKeyCombo@@@std@@YAPAUKeyCombo@@IPAU1@@Z ENDP ; std::_Allocate<KeyCombo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Umove@PAUtagACCEL@@@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEPAUtagACCEL@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUtagACCEL@@@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEPAUtagACCEL@@PAU2@00@Z PROC ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Umove<tagACCEL *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1644
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1646
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Getal
; Line 1648
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PAUtagACCEL@@PAU1@U?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@@std@@YAPAUtagACCEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@@Z ; std::_Uninitialized_move<tagACCEL *,tagACCEL *,std::_Wrap_alloc<std::allocator<tagACCEL> > >
	add	esp, 16					; 00000010H
; Line 1649
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAUtagACCEL@@@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEPAUtagACCEL@@PAU2@00@Z ENDP ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Umove<tagACCEL *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@@std@@YAXPAUtagACCEL@@0AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@@std@@YAXPAUtagACCEL@@0AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<tagACCEL> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 95
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 96
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@UtagACCEL@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagACCEL@@0@Z ; std::_Ptr_cat<tagACCEL,tagACCEL>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@@std@@YAXPAUtagACCEL@@0AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<tagACCEL> > >
	add	esp, 16					; 00000010H
; Line 97
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@@std@@YAXPAUtagACCEL@@0AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<tagACCEL> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@YAXPAVPluginCmdShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@YAXPAVPluginCmdShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<PluginCmdShortcut> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 95
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 96
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@VPluginCmdShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVPluginCmdShortcut@@0@Z ; std::_Ptr_cat<PluginCmdShortcut,PluginCmdShortcut>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@YAXPAVPluginCmdShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<PluginCmdShortcut> > >
	add	esp, 16					; 00000010H
; Line 97
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@YAXPAVPluginCmdShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<PluginCmdShortcut> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@@std@@YAXPAVUserCommand@@0AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@@std@@YAXPAVUserCommand@@0AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<UserCommand> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 95
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 96
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@VUserCommand@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVUserCommand@@0@Z ; std::_Ptr_cat<UserCommand,UserCommand>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@@std@@YAXPAVUserCommand@@0AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<UserCommand> > >
	add	esp, 16					; 00000010H
; Line 97
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@@std@@YAXPAVUserCommand@@0AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<UserCommand> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@YAXPAVMacroShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@YAXPAVMacroShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MacroShortcut> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 95
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 96
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@VMacroShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVMacroShortcut@@0@Z ; std::_Ptr_cat<MacroShortcut,MacroShortcut>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@YAXPAVMacroShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MacroShortcut> > >
	add	esp, 16					; 00000010H
; Line 97
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@YAXPAVMacroShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MacroShortcut> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@YAXPAVCommandShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@YAXPAVCommandShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CommandShortcut> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 95
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 96
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@VCommandShortcut@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVCommandShortcut@@0@Z ; std::_Ptr_cat<CommandShortcut,CommandShortcut>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@YAXPAVCommandShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CommandShortcut> > >
	add	esp, 16					; 00000010H
; Line 97
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@YAXPAVCommandShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CommandShortcut> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Umove<int *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1644
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1646
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
; Line 1648
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
	add	esp, 16					; 00000010H
; Line 1649
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Umove<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Umove@PAPAUHWND__@@@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEPAPAUHWND__@@PAPAU2@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAUHWND__@@@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEPAPAUHWND__@@PAPAU2@00@Z PROC ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Umove<HWND__ * *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1644
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1646
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<HWND__ *,std::allocator<HWND__ *> > >::_Getal
; Line 1648
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PAPAUHWND__@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@@std@@YAPAPAUHWND__@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@@Z ; std::_Uninitialized_move<HWND__ * *,HWND__ * *,std::_Wrap_alloc<std::allocator<HWND__ *> > >
	add	esp, 16					; 00000010H
; Line 1649
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAPAUHWND__@@@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEPAPAUHWND__@@PAPAU2@00@Z ENDP ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Umove<HWND__ * *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@@std@@YAXPAPAUHWND__@@0AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@@std@@YAXPAPAUHWND__@@0AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<HWND__ *> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 95
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 96
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAUHWND__@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUHWND__@@0@Z ; std::_Ptr_cat<HWND__ *,HWND__ *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@@std@@YAXPAPAUHWND__@@0AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<HWND__ *> > >
	add	esp, 16					; 00000010H
; Line 97
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@@std@@YAXPAPAUHWND__@@0AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<HWND__ *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@YAXPAUrecordedMacroStep@@0AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@YAXPAUrecordedMacroStep@@0AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<recordedMacroStep> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 95
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 96
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@UrecordedMacroStep@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUrecordedMacroStep@@0@Z ; std::_Ptr_cat<recordedMacroStep,recordedMacroStep>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@YAXPAUrecordedMacroStep@@0AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<recordedMacroStep> > >
	add	esp, 16					; 00000010H
; Line 97
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@YAXPAUrecordedMacroStep@@0AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<recordedMacroStep> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 877
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 879
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
	add	esp, 8
; Line 880
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Umove@PAUKeyCombo@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUKeyCombo@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@PAU2@00@Z PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Umove<KeyCombo *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1644
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1646
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Getal
; Line 1648
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PAUKeyCombo@@PAU1@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAPAUKeyCombo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z ; std::_Uninitialized_move<KeyCombo *,KeyCombo *,std::_Wrap_alloc<std::allocator<KeyCombo> > >
	add	esp, 16					; 00000010H
; Line 1649
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAUKeyCombo@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@PAU2@00@Z ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Umove<KeyCombo *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 605
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 608
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv74 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 598
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 600
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 601
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
	add	esp, 8
; Line 579
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ PROC	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ENDP	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 95
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 96
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
	add	esp, 16					; 00000010H
; Line 97
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAXPAUKeyCombo@@0AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAXPAUKeyCombo@@0AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<KeyCombo> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 95
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 96
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@UKeyCombo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUKeyCombo@@0@Z ; std::_Ptr_cat<KeyCombo,KeyCombo>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAXPAUKeyCombo@@0AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<KeyCombo> > >
	add	esp, 16					; 00000010H
; Line 97
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAXPAUKeyCombo@@0AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<KeyCombo> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$addressof@_W@std@@YAPA_WAA_W@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@_W@std@@YAPA_WAA_W@Z PROC			; std::addressof<wchar_t>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; Line 92
	push	ebp
	mov	ebp, esp
; Line 95
	mov	eax, DWORD PTR __Val$[ebp]
; Line 96
	pop	ebp
	ret	0
??$addressof@_W@std@@YAPA_WAA_W@Z ENDP			; std::addressof<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 877
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 879
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>
	add	esp, 8
; Line 880
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z	; std::forward<wchar_t * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; Line 92
	push	ebp
	mov	ebp, esp
; Line 95
	mov	eax, DWORD PTR __Val$[ebp]
; Line 96
	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 877
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 879
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8
; Line 880
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@UtagACCEL@@ABU1@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@ABU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UtagACCEL@@ABU1@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABUtagACCEL@@@std@@YAABUtagACCEL@@ABU1@@Z ; std::forward<tagACCEL const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@UtagACCEL@@ABU1@@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAXAAV?$allocator@UtagACCEL@@@1@PAUtagACCEL@@ABU3@@Z ; std::allocator_traits<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL const &>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@UtagACCEL@@ABU1@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@UtagACCEL@@AAU1@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@AAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UtagACCEL@@AAU1@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAUtagACCEL@@@std@@YAAAUtagACCEL@@AAU1@@Z ; std::forward<tagACCEL &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@UtagACCEL@@AAU1@@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAXAAV?$allocator@UtagACCEL@@@1@PAUtagACCEL@@AAU3@@Z ; std::allocator_traits<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL &>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@UtagACCEL@@AAU1@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$addressof@$$CBUtagACCEL@@@std@@YAPBUtagACCEL@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUtagACCEL@@@std@@YAPBUtagACCEL@@ABU1@@Z PROC ; std::addressof<tagACCEL const >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; Line 92
	push	ebp
	mov	ebp, esp
; Line 95
	mov	eax, DWORD PTR __Val$[ebp]
; Line 96
	pop	ebp
	ret	0
??$addressof@$$CBUtagACCEL@@@std@@YAPBUtagACCEL@@ABU1@@Z ENDP ; std::addressof<tagACCEL const >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@1@0PAV2@@Z
_TEXT	SEGMENT
tv142 = -52						; size = 4
$T2 = -48						; size = 4
tv139 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
tv71 = -32						; size = 4
tv146 = -28						; size = 4
tv145 = -24						; size = 4
_this$ = -20						; size = 4
__Alval$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Ptr$ = 32						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@1@0PAV2@@Z PROC ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1636
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@1@0PAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 1638
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Getal
; Line 1640
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv145[ebp], eax
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR tv139[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv146[ebp], eax
	mov	eax, DWORD PTR tv146[ebp]
	mov	DWORD PTR tv142[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@PAVPluginCmdShortcut@@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@@std@@YAPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >,PluginCmdShortcut *,std::_Wrap_alloc<std::allocator<PluginCmdShortcut> > >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T4[ebp]
; Line 1641
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@1@0PAV2@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@1@0PAV2@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@1@0PAV2@@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@1@0PAV2@@Z$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@1@0PAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@1@0PAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@1@0PAV2@@Z ENDP ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QBEPBVPluginCmdShortcut@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QBEPBVPluginCmdShortcut@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >::_Unchecked, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 60
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 61
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 62
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QBEPBVPluginCmdShortcut@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@PAVPluginCmdShortcut@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@PAVPluginCmdShortcut@@PBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 47
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@PAVPluginCmdShortcut@@PBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 48
	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
; Line 49
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@PAVPluginCmdShortcut@@PBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@PAVPluginCmdShortcut@@PBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@PAVPluginCmdShortcut@@PBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@PAVPluginCmdShortcut@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC ; std::_Iterator012<std::random_access_iterator_tag,PluginCmdShortcut,int,PluginCmdShortcut const *,PluginCmdShortcut const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,PluginCmdShortcut,int,PluginCmdShortcut const *,PluginCmdShortcut const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ENDP ; std::_Iterator012<std::random_access_iterator_tag,PluginCmdShortcut,int,PluginCmdShortcut const *,PluginCmdShortcut const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,PluginCmdShortcut,int,PluginCmdShortcut const *,PluginCmdShortcut const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??1?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,PluginCmdShortcut,int,PluginCmdShortcut const *,PluginCmdShortcut const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,PluginCmdShortcut,int,PluginCmdShortcut const *,PluginCmdShortcut const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,PluginCmdShortcut,int,PluginCmdShortcut const *,PluginCmdShortcut const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,PluginCmdShortcut,int,PluginCmdShortcut const *,PluginCmdShortcut const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,PluginCmdShortcut,int,PluginCmdShortcut const *,PluginCmdShortcut const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,PluginCmdShortcut,int,PluginCmdShortcut const *,PluginCmdShortcut const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@VPluginCmdShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,PluginCmdShortcut,int,PluginCmdShortcut const *,PluginCmdShortcut const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,PluginCmdShortcut,int,PluginCmdShortcut const *,PluginCmdShortcut const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@1@0PAV2@@Z
_TEXT	SEGMENT
tv142 = -52						; size = 4
$T2 = -48						; size = 4
tv139 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
tv71 = -32						; size = 4
tv146 = -28						; size = 4
tv145 = -24						; size = 4
_this$ = -20						; size = 4
__Alval$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Ptr$ = 32						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@1@0PAV2@@Z PROC ; std::vector<UserCommand,std::allocator<UserCommand> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1636
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@1@0PAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 1638
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Getal
; Line 1640
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv145[ebp], eax
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR tv139[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv146[ebp], eax
	mov	eax, DWORD PTR tv146[ebp]
	mov	DWORD PTR tv142[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@PAVUserCommand@@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@@std@@YAPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >,UserCommand *,std::_Wrap_alloc<std::allocator<UserCommand> > >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T4[ebp]
; Line 1641
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@1@0PAV2@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@1@0PAV2@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@1@0PAV2@@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@1@0PAV2@@Z$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@1@0PAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@1@0PAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@1@0PAV2@@Z ENDP ; std::vector<UserCommand,std::allocator<UserCommand> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >
; Function compile flags: /Odtp
;	COMDAT ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QBEPBVUserCommand@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QBEPBVUserCommand@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >::_Unchecked, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 60
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 61
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 62
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QBEPBVUserCommand@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@PAVUserCommand@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@PAVUserCommand@@PBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 47
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@PAVUserCommand@@PBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 48
	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
; Line 49
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@PAVUserCommand@@PBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@PAVUserCommand@@PBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@PAVUserCommand@@PBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@PAVUserCommand@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC ; std::_Iterator012<std::random_access_iterator_tag,UserCommand,int,UserCommand const *,UserCommand const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,UserCommand,int,UserCommand const *,UserCommand const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ENDP ; std::_Iterator012<std::random_access_iterator_tag,UserCommand,int,UserCommand const *,UserCommand const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,UserCommand,int,UserCommand const *,UserCommand const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??1?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,UserCommand,int,UserCommand const *,UserCommand const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,UserCommand,int,UserCommand const *,UserCommand const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,UserCommand,int,UserCommand const *,UserCommand const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,UserCommand,int,UserCommand const *,UserCommand const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,UserCommand,int,UserCommand const *,UserCommand const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,UserCommand,int,UserCommand const *,UserCommand const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@VUserCommand@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,UserCommand,int,UserCommand const *,UserCommand const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,UserCommand,int,UserCommand const *,UserCommand const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@1@0PAV2@@Z
_TEXT	SEGMENT
tv142 = -52						; size = 4
$T2 = -48						; size = 4
tv139 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
tv71 = -32						; size = 4
tv146 = -28						; size = 4
tv145 = -24						; size = 4
_this$ = -20						; size = 4
__Alval$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Ptr$ = 32						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@1@0PAV2@@Z PROC ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1636
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@1@0PAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 1638
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Getal
; Line 1640
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv145[ebp], eax
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR tv139[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv146[ebp], eax
	mov	eax, DWORD PTR tv146[ebp]
	mov	DWORD PTR tv142[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@PAVMacroShortcut@@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@@std@@YAPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >,MacroShortcut *,std::_Wrap_alloc<std::allocator<MacroShortcut> > >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T4[ebp]
; Line 1641
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@1@0PAV2@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@1@0PAV2@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@1@0PAV2@@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@1@0PAV2@@Z$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@1@0PAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@1@0PAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@1@0PAV2@@Z ENDP ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QBEPBVMacroShortcut@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QBEPBVMacroShortcut@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >::_Unchecked, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 60
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 61
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 62
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QBEPBVMacroShortcut@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@PAVMacroShortcut@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@PAVMacroShortcut@@PBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 47
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@PAVMacroShortcut@@PBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 48
	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
; Line 49
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@PAVMacroShortcut@@PBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@PAVMacroShortcut@@PBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@PAVMacroShortcut@@PBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@PAVMacroShortcut@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC ; std::_Iterator012<std::random_access_iterator_tag,MacroShortcut,int,MacroShortcut const *,MacroShortcut const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,MacroShortcut,int,MacroShortcut const *,MacroShortcut const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ENDP ; std::_Iterator012<std::random_access_iterator_tag,MacroShortcut,int,MacroShortcut const *,MacroShortcut const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,MacroShortcut,int,MacroShortcut const *,MacroShortcut const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??1?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,MacroShortcut,int,MacroShortcut const *,MacroShortcut const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,MacroShortcut,int,MacroShortcut const *,MacroShortcut const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,MacroShortcut,int,MacroShortcut const *,MacroShortcut const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,MacroShortcut,int,MacroShortcut const *,MacroShortcut const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,MacroShortcut,int,MacroShortcut const *,MacroShortcut const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,MacroShortcut,int,MacroShortcut const *,MacroShortcut const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@VMacroShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,MacroShortcut,int,MacroShortcut const *,MacroShortcut const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,MacroShortcut,int,MacroShortcut const *,MacroShortcut const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@1@0PAV2@@Z
_TEXT	SEGMENT
tv142 = -52						; size = 4
$T2 = -48						; size = 4
tv139 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
tv71 = -32						; size = 4
tv146 = -28						; size = 4
tv145 = -24						; size = 4
_this$ = -20						; size = 4
__Alval$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Ptr$ = 32						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@1@0PAV2@@Z PROC ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1636
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@1@0PAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 1638
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Getal
; Line 1640
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv145[ebp], eax
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR tv139[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv146[ebp], eax
	mov	eax, DWORD PTR tv146[ebp]
	mov	DWORD PTR tv142[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@PAVCommandShortcut@@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@@std@@YAPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@0@0PAV1@AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >,CommandShortcut *,std::_Wrap_alloc<std::allocator<CommandShortcut> > >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T4[ebp]
; Line 1641
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@1@0PAV2@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@1@0PAV2@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@1@0PAV2@@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@1@0PAV2@@Z$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@1@0PAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@1@0PAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@1@0PAV2@@Z ENDP ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QBEPBVCommandShortcut@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QBEPBVCommandShortcut@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >::_Unchecked, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 60
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 61
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 62
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QBEPBVCommandShortcut@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@PAVCommandShortcut@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@PAVCommandShortcut@@PBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 47
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@PAVCommandShortcut@@PBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 48
	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
; Line 49
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@PAVCommandShortcut@@PBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@PAVCommandShortcut@@PBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@PAVCommandShortcut@@PBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@PAVCommandShortcut@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC ; std::_Iterator012<std::random_access_iterator_tag,CommandShortcut,int,CommandShortcut const *,CommandShortcut const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,CommandShortcut,int,CommandShortcut const *,CommandShortcut const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ENDP ; std::_Iterator012<std::random_access_iterator_tag,CommandShortcut,int,CommandShortcut const *,CommandShortcut const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,CommandShortcut,int,CommandShortcut const *,CommandShortcut const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??1?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,CommandShortcut,int,CommandShortcut const *,CommandShortcut const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,CommandShortcut,int,CommandShortcut const *,CommandShortcut const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,CommandShortcut,int,CommandShortcut const *,CommandShortcut const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,CommandShortcut,int,CommandShortcut const *,CommandShortcut const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,CommandShortcut,int,CommandShortcut const *,CommandShortcut const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,CommandShortcut,int,CommandShortcut const *,CommandShortcut const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@VCommandShortcut@@HPBV3@ABV3@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,CommandShortcut,int,CommandShortcut const *,CommandShortcut const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,CommandShortcut,int,CommandShortcut const *,CommandShortcut const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??$construct@HH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAH$$QAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@HH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAH$$QAH@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@H@std@@YA$$QAHAAH@Z		; std::forward<int>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@HH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAH$$QAH@Z ; std::allocator_traits<std::allocator<int> >::construct<int,int>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@HH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAH$$QAH@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@H@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@H@std@@YA$$QAHAAH@Z PROC			; std::forward<int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@H@std@@YA$$QAHAAH@Z ENDP			; std::forward<int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$addressof@H@std@@YAPAHAAH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@H@std@@YAPAHAAH@Z PROC			; std::addressof<int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; Line 92
	push	ebp
	mov	ebp, esp
; Line 95
	mov	eax, DWORD PTR __Val$[ebp]
; Line 96
	pop	ebp
	ret	0
??$addressof@H@std@@YAPAHAAH@Z ENDP			; std::addressof<int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PAUHWND__@@ABQAU1@@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEXPAPAUHWND__@@ABQAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAUHWND__@@ABQAU1@@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEXPAPAUHWND__@@ABQAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<HWND__ *> >::construct<HWND__ *,HWND__ * const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABQAUHWND__@@@std@@YAABQAUHWND__@@ABQAU1@@Z ; std::forward<HWND__ * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAUHWND__@@ABQAU1@@?$allocator_traits@V?$allocator@PAUHWND__@@@std@@@std@@SAXAAV?$allocator@PAUHWND__@@@1@PAPAUHWND__@@ABQAU3@@Z ; std::allocator_traits<std::allocator<HWND__ *> >::construct<HWND__ *,HWND__ * const &>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAUHWND__@@ABQAU1@@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEXPAPAUHWND__@@ABQAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<HWND__ *> >::construct<HWND__ *,HWND__ * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PAUHWND__@@AAPAU1@@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEXPAPAUHWND__@@AAPAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAUHWND__@@AAPAU1@@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEXPAPAUHWND__@@AAPAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<HWND__ *> >::construct<HWND__ *,HWND__ * &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAPAUHWND__@@@std@@YAAAPAUHWND__@@AAPAU1@@Z ; std::forward<HWND__ * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAUHWND__@@AAPAU1@@?$allocator_traits@V?$allocator@PAUHWND__@@@std@@@std@@SAXAAV?$allocator@PAUHWND__@@@1@PAPAUHWND__@@AAPAU3@@Z ; std::allocator_traits<std::allocator<HWND__ *> >::construct<HWND__ *,HWND__ * &>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAUHWND__@@AAPAU1@@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEXPAPAUHWND__@@AAPAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<HWND__ *> >::construct<HWND__ *,HWND__ * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$addressof@QAUHWND__@@@std@@YAPBQAUHWND__@@ABQAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAUHWND__@@@std@@YAPBQAUHWND__@@ABQAU1@@Z PROC ; std::addressof<HWND__ * const>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; Line 92
	push	ebp
	mov	ebp, esp
; Line 95
	mov	eax, DWORD PTR __Val$[ebp]
; Line 96
	pop	ebp
	ret	0
??$addressof@QAUHWND__@@@std@@YAPBQAUHWND__@@ABQAU1@@Z ENDP ; std::addressof<HWND__ * const>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
tv142 = -52						; size = 4
$T2 = -48						; size = 4
tv139 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
tv71 = -32						; size = 4
tv146 = -28						; size = 4
tv145 = -24						; size = 4
_this$ = -20						; size = 4
__Alval$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Ptr$ = 32						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1636
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@1@0PAU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 1638
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Getal
; Line 1640
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv145[ebp], eax
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR tv139[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv146[ebp], eax
	mov	eax, DWORD PTR tv146[ebp]
	mov	DWORD PTR tv142[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@PAUrecordedMacroStep@@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@@std@@YAPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >,recordedMacroStep *,std::_Wrap_alloc<std::allocator<recordedMacroStep> > >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T4[ebp]
; Line 1641
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@1@0PAU2@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@1@0PAU2@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@1@0PAU2@@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@1@0PAU2@@Z$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@1@0PAU2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@1@0PAU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >
; Function compile flags: /Odtp
;	COMDAT ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QBEPBUrecordedMacroStep@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QBEPBUrecordedMacroStep@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >::_Unchecked, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 60
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 61
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 62
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QBEPBUrecordedMacroStep@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@PAUrecordedMacroStep@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@PAUrecordedMacroStep@@PBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 47
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@PAUrecordedMacroStep@@PBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 48
	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
; Line 49
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@PAUrecordedMacroStep@@PBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@PAUrecordedMacroStep@@PBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@PAUrecordedMacroStep@@PBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@PAUrecordedMacroStep@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC ; std::_Iterator012<std::random_access_iterator_tag,recordedMacroStep,int,recordedMacroStep const *,recordedMacroStep const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,recordedMacroStep,int,recordedMacroStep const *,recordedMacroStep const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ENDP ; std::_Iterator012<std::random_access_iterator_tag,recordedMacroStep,int,recordedMacroStep const *,recordedMacroStep const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,recordedMacroStep,int,recordedMacroStep const *,recordedMacroStep const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??1?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,recordedMacroStep,int,recordedMacroStep const *,recordedMacroStep const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,recordedMacroStep,int,recordedMacroStep const *,recordedMacroStep const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,recordedMacroStep,int,recordedMacroStep const *,recordedMacroStep const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,recordedMacroStep,int,recordedMacroStep const *,recordedMacroStep const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,recordedMacroStep,int,recordedMacroStep const *,recordedMacroStep const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,recordedMacroStep,int,recordedMacroStep const *,recordedMacroStep const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@UrecordedMacroStep@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,recordedMacroStep,int,recordedMacroStep const *,recordedMacroStep const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,recordedMacroStep,int,recordedMacroStep const *,recordedMacroStep const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??$_Move@PAUKeyCombo@@PAU1@@std@@YAPAUKeyCombo@@PAU1@00@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUKeyCombo@@PAU1@@std@@YAPAUKeyCombo@@PAU1@00@Z PROC ; std::_Move<KeyCombo *,KeyCombo *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 2439
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2441
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@UKeyCombo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUKeyCombo@@0@Z ; std::_Ptr_cat<KeyCombo,KeyCombo>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Move@PAUKeyCombo@@PAU1@@std@@YAPAUKeyCombo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<KeyCombo *,KeyCombo *>
	add	esp, 16					; 00000010H
; Line 2442
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move@PAUKeyCombo@@PAU1@@std@@YAPAUKeyCombo@@PAU1@00@Z ENDP ; std::_Move<KeyCombo *,KeyCombo *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@UKeyCombo@@ABU1@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@ABU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UKeyCombo@@ABU1@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABUKeyCombo@@@std@@YAABUKeyCombo@@ABU1@@Z ; std::forward<KeyCombo const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@UKeyCombo@@ABU1@@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAXAAV?$allocator@UKeyCombo@@@1@PAUKeyCombo@@ABU3@@Z ; std::allocator_traits<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo const &>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@UKeyCombo@@ABU1@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@UKeyCombo@@AAU1@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@AAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UKeyCombo@@AAU1@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAUKeyCombo@@@std@@YAAAUKeyCombo@@AAU1@@Z ; std::forward<KeyCombo &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@UKeyCombo@@AAU1@@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAXAAV?$allocator@UKeyCombo@@@1@PAUKeyCombo@@AAU3@@Z ; std::allocator_traits<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo &>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@UKeyCombo@@AAU1@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$addressof@$$CBUKeyCombo@@@std@@YAPBUKeyCombo@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUKeyCombo@@@std@@YAPBUKeyCombo@@ABU1@@Z PROC ; std::addressof<KeyCombo const >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; Line 92
	push	ebp
	mov	ebp, esp
; Line 95
	mov	eax, DWORD PTR __Val$[ebp]
; Line 96
	pop	ebp
	ret	0
??$addressof@$$CBUKeyCombo@@@std@@YAPBUKeyCombo@@ABU1@@Z ENDP ; std::addressof<KeyCombo const >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
tv142 = -52						; size = 4
$T2 = -48						; size = 4
tv139 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
tv71 = -32						; size = 4
tv146 = -28						; size = 4
tv145 = -24						; size = 4
_this$ = -20						; size = 4
__Alval$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Ptr$ = 32						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1636
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@1@0PAU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 1638
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Getal
; Line 1640
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv145[ebp], eax
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR tv139[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv146[ebp], eax
	mov	eax, DWORD PTR tv146[ebp]
	mov	DWORD PTR tv142[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@PAUKeyCombo@@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@@std@@YAPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >,KeyCombo *,std::_Wrap_alloc<std::allocator<KeyCombo> > >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T4[ebp]
; Line 1641
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@1@0PAU2@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@1@0PAU2@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@1@0PAU2@@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@1@0PAU2@@Z$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@1@0PAU2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@1@0PAU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > > >
; Function compile flags: /Odtp
;	COMDAT ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z
_TEXT	SEGMENT
tv183 = -76						; size = 4
$T2 = -72						; size = 4
tv179 = -68						; size = 4
$T3 = -64						; size = 4
tv176 = -60						; size = 4
$T4 = -56						; size = 4
tv173 = -52						; size = 4
$T5 = -48						; size = 4
tv130 = -44						; size = 4
tv184 = -40						; size = 4
tv196 = -36						; size = 4
tv180 = -32						; size = 4
tv194 = -28						; size = 4
tv192 = -24						; size = 4
tv191 = -20						; size = 4
$T6 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
__Val$ = 36						; size = 4
??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z PROC ; std::find<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,unsigned long>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 3051
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T6[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 2
; Line 3052
	push	3052					; 00000becH
	push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T5[ebp], esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv191[ebp], eax
	mov	ecx, DWORD PTR tv191[ebp]
	mov	DWORD PTR tv173[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T4[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv192[ebp], eax
	mov	eax, DWORD PTR tv192[ebp]
	mov	DWORD PTR tv176[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	call	??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z ; std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
	add	esp, 32					; 00000020H
; Line 3054
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv194[ebp], eax
	mov	eax, DWORD PTR tv194[ebp]
	mov	DWORD PTR tv179[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<int> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv180[ebp], eax
	mov	ecx, DWORD PTR tv180[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv196[ebp], eax
	mov	eax, DWORD PTR tv196[ebp]
	mov	DWORD PTR tv183[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<int> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv184[ebp], eax
	mov	ecx, DWORD PTR tv184[ebp]
	push	ecx
	call	??$_Find@PAHK@std@@YAPAHPAH0ABK@Z	; std::_Find<int *,unsigned long>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv130[ebp], eax
	mov	edx, DWORD PTR tv130[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Rechecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@AAV10@PAH@Z ; std::_Rechecked<std::_Vector_val<std::_Simple_types<int> > >
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T6[ebp]
	or	ecx, 1
	mov	DWORD PTR $T6[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 3055
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z$2:
	mov	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z$3:
	mov	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z$4:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z$5:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z$6:
	mov	eax, DWORD PTR $T6[ebp]
	and	eax, 1
	je	$LN10@find
	and	DWORD PTR $T6[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
$LN10@find:
	ret	0
__ehhandler$??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z ENDP ; std::find<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,unsigned long>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
; Function compile flags: /Odtp
;	COMDAT ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEPAHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEPAHXZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Unchecked, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 318
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 319
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 320
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEPAHXZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Rechecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV12@PAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Rechecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV12@PAH@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Rechecked, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 312
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 313
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 314
	mov	eax, DWORD PTR _this$[ebp]
; Line 315
	mov	esp, ebp
	pop	ebp
	ret	4
?_Rechecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV12@PAH@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Rechecked
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 306
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 307
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
; Function compile flags: /Odtp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Compat, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
; Line 238
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN1@Compat
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	je	SHORT $LN3@Compat
$LN1@Compat:
; Line 240
	push	240					; 000000f0H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
; Line 241
	mov	eax, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
	test	eax, eax
	je	SHORT $LN5@Compat
	xor	ecx, ecx
	jne	SHORT $LN6@Compat
$LN5@Compat:
	push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	241					; 000000f1H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN6@Compat
	int	3
$LN6@Compat:
	push	0
	push	241					; 000000f1H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1LO@MGELDLOO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN3@Compat:
; Line 243
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator<, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 214
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 215
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Compat
; Line 216
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]
; Line 217
	mov	esp, ebp
	pop	ebp
	ret	4
??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator<
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator!=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 209
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 210
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]
; Line 211
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator==, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 204
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Compat
; Line 205
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]
; Line 206
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 47
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 48
	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
; Line 49
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z ENDP ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ?_Orphan_range@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEXPAUtagACCEL@@0@Z
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -20						; size = 4
__Pnext$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEXPAUtagACCEL@@0@Z PROC ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Orphan_range, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1764
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEXPAUtagACCEL@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1765
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1766
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
	mov	DWORD PTR __Pnext$[ebp], eax
; Line 1767
	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:
; Line 1768
	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_ran
; Line 1769
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN3@Orphan_ran
$LN2@Orphan_ran:
; Line 1770
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax
; Line 1771
	jmp	SHORT $LN1@Orphan_ran
$LN3@Orphan_ran:
; Line 1773
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont
; Line 1774
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN1@Orphan_ran:
; Line 1775
	jmp	SHORT $LN5@Orphan_ran
$LN6@Orphan_ran:
; Line 1776
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEXPAUtagACCEL@@0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_range@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEXPAUtagACCEL@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEXPAUtagACCEL@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEXPAUtagACCEL@@0@Z ENDP ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Orphan_range
; Function compile flags: /Odtp
;	COMDAT ?_Xlen@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEXXZ PROC ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1753
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1754
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:
; Line 1755
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEXXZ ENDP ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXXZ PROC ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1622
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1623
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Tidy
; Line 1625
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 1626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXPAUtagACCEL@@0@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Destroy
; Line 1628
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 6
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@I@Z ; std::_Wrap_alloc<std::allocator<tagACCEL> >::deallocate
; Line 1629
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 1630
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 1631
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN2@Tidy:
; Line 1633
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXXZ ENDP ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Reserve@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z PROC ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Reserve, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1612
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
; Line 1613
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unused_capacity@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Unused_capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Reserve
; Line 1615
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Reserve
; Line 1616
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEXXZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Xlen
$LN1@Reserve:
; Line 1617
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::size
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEII@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reallocate@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Reallocate
$LN4@Reserve:
; Line 1619
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z ENDP ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Reallocate@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -32						; size = 4
__Ptr$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z PROC ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Reallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1587
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 1588
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEPAUtagACCEL@@I@Z ; std::_Wrap_alloc<std::allocator<tagACCEL> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
; Line 1590
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 1591
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUtagACCEL@@@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEPAUtagACCEL@@PAU2@00@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Umove<tagACCEL *>
	jmp	SHORT $LN5@Reallocate
__catch$?_Reallocate@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z$0:
; Line 1593
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@I@Z ; std::_Wrap_alloc<std::allocator<tagACCEL> >::deallocate
; Line 1594
	push	0
	push	0
	call	__CxxThrowException@8
; Line 1595
	mov	eax, $LN8@Reallocate
	ret	0
$LN5@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Reallocate@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z$1
$LN8@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z$1:
; Line 1597
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::size
	mov	DWORD PTR __Size$[ebp], eax
; Line 1598
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Reallocate
; Line 1600
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXPAUtagACCEL@@0@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Destroy
; Line 1602
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 6
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@I@Z ; std::_Wrap_alloc<std::allocator<tagACCEL> >::deallocate
$LN1@Reallocate:
; Line 1605
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 1606
	imul	edx, DWORD PTR __Count$[ebp], 6
	add	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 1607
	imul	ecx, DWORD PTR __Size$[ebp], 6
	add	ecx, DWORD PTR __Ptr$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 1608
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN4@Reallocate:
; Line 1609
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z ENDP ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Reallocate
; Function compile flags: /Odtp
;	COMDAT ?_Inside@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBE_NPBUtagACCEL@@@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBE_NPBUtagACCEL@@@Z PROC ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1582
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1583
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]
; Line 1584
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBE_NPBUtagACCEL@@@Z ENDP ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Grow_to@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEII@Z PROC ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Grow_to, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1571
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1572
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax
; Line 1575
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
; Line 1576
	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to
; Line 1577
	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to:
; Line 1578
	mov	eax, DWORD PTR __Capacity$[ebp]
; Line 1579
	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEII@Z ENDP ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXPAUtagACCEL@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXPAUtagACCEL@@0@Z PROC ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1565
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1566
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Getal
; Line 1567
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@@std@@YAXPAUtagACCEL@@0AAU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<tagACCEL> > >
	add	esp, 12					; 0000000cH
; Line 1568
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXPAUtagACCEL@@0@Z ENDP ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAEXABUtagACCEL@@@Z
_TEXT	SEGMENT
__Idx$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAEXABUtagACCEL@@@Z PROC ; std::vector<tagACCEL,std::allocator<tagACCEL> >::push_back, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1243
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1244
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@$$CBUtagACCEL@@@std@@YAPBUtagACCEL@@ABU1@@Z ; std::addressof<tagACCEL const >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBE_NPBUtagACCEL@@@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@push_back
; Line 1246
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$addressof@$$CBUtagACCEL@@@std@@YAPBUtagACCEL@@ABU1@@Z ; std::addressof<tagACCEL const >
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	DWORD PTR __Idx$1[ebp], eax
; Line 1247
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+12]
	jne	SHORT $LN3@push_back
; Line 1248
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Reserve
$LN3@push_back:
; Line 1249
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEXPAUtagACCEL@@0@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Orphan_range
; Line 1251
	imul	eax, DWORD PTR __Idx$1[ebp], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Getal
	mov	ecx, eax
	call	??$construct@UtagACCEL@@AAU1@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@AAU2@@Z ; std::_Wrap_alloc<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL &>
; Line 1252
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1254
	jmp	SHORT $LN5@push_back
$LN4@push_back:
; Line 1256
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+12]
	jne	SHORT $LN1@push_back
; Line 1257
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXI@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Reserve
$LN1@push_back:
; Line 1258
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IBEXPAUtagACCEL@@0@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Orphan_range
; Line 1260
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Getal
	mov	ecx, eax
	call	??$construct@UtagACCEL@@ABU1@@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@ABU2@@Z ; std::_Wrap_alloc<std::allocator<tagACCEL> >::construct<tagACCEL,tagACCEL const &>
; Line 1261
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN5@push_back:
; Line 1263
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAEXABUtagACCEL@@@Z ENDP ; std::vector<tagACCEL,std::allocator<tagACCEL> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??A?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAEAAUtagACCEL@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAEAAUtagACCEL@@I@Z PROC ; std::vector<tagACCEL,std::allocator<tagACCEL> >::operator[], COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1197
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN1@operator
; Line 1201
	push	1201					; 000004b1H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
; Line 1202
	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN4@operator
	xor	ecx, ecx
	jne	SHORT $LN5@operator
$LN4@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	1202					; 000004b2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN5@operator
	int	3
$LN5@operator:
	push	0
	push	1202					; 000004b2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1KC@NGOMINHO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAt?$AAa?$AAg?$AAA?$AAC?$AAC?$AAE?$AAL?$AA?0?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN1@operator:
; Line 1209
	imul	eax, DWORD PTR __Pos$[ebp], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
; Line 1210
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAEAAUtagACCEL@@I@Z ENDP ; std::vector<tagACCEL,std::allocator<tagACCEL> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ PROC ; std::vector<tagACCEL,std::allocator<tagACCEL> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1152
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1153
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<tagACCEL> >::max_size
; Line 1154
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagACCEL,std::allocator<tagACCEL> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?size@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ PROC ; std::vector<tagACCEL,std::allocator<tagACCEL> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1148
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 6
	idiv	ecx
; Line 1149
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagACCEL,std::allocator<tagACCEL> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Unused_capacity@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unused_capacity@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ PROC ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Unused_capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1014
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1015
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+8]
	cdq
	mov	ecx, 6
	idiv	ecx
; Line 1016
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unused_capacity@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?capacity@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ PROC ; std::vector<tagACCEL,std::allocator<tagACCEL> >::capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1009
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1010
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 6
	idiv	ecx
; Line 1011
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagACCEL,std::allocator<tagACCEL> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ PROC ; std::vector<tagACCEL,std::allocator<tagACCEL> >::~vector<tagACCEL,std::allocator<tagACCEL> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 944
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 945
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@IAEXXZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::_Tidy
; Line 946
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::~_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::~_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >
__ehhandler$??1?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagACCEL,std::allocator<tagACCEL> >::~vector<tagACCEL,std::allocator<tagACCEL> >
; Function compile flags: /Odtp
;	COMDAT ??0?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
??0?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ PROC ; std::vector<tagACCEL,std::allocator<tagACCEL> >::vector<tagACCEL,std::allocator<tagACCEL> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 680
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@UtagACCEL@@@std@@QAE@XZ	; std::allocator<tagACCEL>::allocator<tagACCEL>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@ABV?$allocator@UtagACCEL@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 681
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::~_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >
__ehhandler$??0?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagACCEL,std::allocator<tagACCEL> >::vector<tagACCEL,std::allocator<tagACCEL> >
; Function compile flags: /Odtp
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 641
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 642
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<tagACCEL> >::_Wrap_alloc<std::allocator<tagACCEL> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 643
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Free_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 630
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 632
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 633
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 634
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
; Line 635
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
; Line 636
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 637
	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Alloc_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 623
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 624
	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 625
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
; Line 626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 627
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::~_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 607
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 608
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Free_proxy
; Line 609
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::~_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@ABV?$allocator@UtagACCEL@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@ABV?$allocator@UtagACCEL@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 601
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@ABV?$allocator@UtagACCEL@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<tagACCEL> >::_Vector_val<std::_Simple_types<tagACCEL> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 603
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Alloc_proxy
; Line 604
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@ABV?$allocator@UtagACCEL@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@ABV?$allocator@UtagACCEL@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@ABV?$allocator@UtagACCEL@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@@std@@QAE@ABV?$allocator@UtagACCEL@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >::_Vector_alloc<0,std::_Vec_base_types<tagACCEL,std::allocator<tagACCEL> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<tagACCEL> >::~_Vector_val<std::_Simple_types<tagACCEL> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??1?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<tagACCEL> >::~_Vector_val<std::_Simple_types<tagACCEL> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<tagACCEL> >::_Vector_val<std::_Simple_types<tagACCEL> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 480
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 482
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 483
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 484
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 485
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@U?$_Simple_types@UtagACCEL@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<tagACCEL> >::_Vector_val<std::_Simple_types<tagACCEL> >
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<tagACCEL> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 883
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAIABV?$allocator@UtagACCEL@@@2@@Z ; std::allocator_traits<std::allocator<tagACCEL> >::max_size
	add	esp, 4
; Line 885
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<tagACCEL> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@I@Z PROC ; std::_Wrap_alloc<std::allocator<tagACCEL> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@I@Z ; std::allocator<tagACCEL>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEXPAUtagACCEL@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<tagACCEL> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEPAUtagACCEL@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEPAUtagACCEL@@I@Z PROC ; std::_Wrap_alloc<std::allocator<tagACCEL> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@UtagACCEL@@@std@@QAEPAUtagACCEL@@I@Z ; std::allocator<tagACCEL>::allocate
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAEPAUtagACCEL@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<tagACCEL> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<tagACCEL> >::_Wrap_alloc<std::allocator<tagACCEL> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@UtagACCEL@@@std@@QAE@XZ	; std::allocator<tagACCEL>::allocator<tagACCEL>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<tagACCEL> >::_Wrap_alloc<std::allocator<tagACCEL> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAIABV?$allocator@UtagACCEL@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAIABV?$allocator@UtagACCEL@@@2@@Z PROC ; std::allocator_traits<std::allocator<tagACCEL> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 734
	push	ebp
	mov	ebp, esp
; Line 735
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@UtagACCEL@@@std@@QBEIXZ ; std::allocator<tagACCEL>::max_size
; Line 736
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@UtagACCEL@@@std@@@std@@SAIABV?$allocator@UtagACCEL@@@2@@Z ENDP ; std::allocator_traits<std::allocator<tagACCEL> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator@UtagACCEL@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@UtagACCEL@@@std@@QBEIXZ PROC	; std::allocator<tagACCEL>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 611
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 612
	mov	eax, 715827882				; 2aaaaaaaH
; Line 613
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@UtagACCEL@@@std@@QBEIXZ ENDP	; std::allocator<tagACCEL>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv69 = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@ABU3@@Z PROC ; std::allocator<tagACCEL>::construct, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 592
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 593
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	6
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], cx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv69[ebp], edx
	jmp	SHORT $LN1@construct
$LN3@construct:
	mov	DWORD PTR tv69[ebp], 0
$LN1@construct:
; Line 594
	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@ABU3@@Z ENDP ; std::allocator<tagACCEL>::construct
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@UtagACCEL@@@std@@QAEPAUtagACCEL@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UtagACCEL@@@std@@QAEPAUtagACCEL@@I@Z PROC ; std::allocator<tagACCEL>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@UtagACCEL@@@std@@YAPAUtagACCEL@@IPAU1@@Z ; std::_Allocate<tagACCEL>
	add	esp, 8
; Line 579
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@UtagACCEL@@@std@@QAEPAUtagACCEL@@I@Z ENDP ; std::allocator<tagACCEL>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@I@Z PROC ; std::allocator<tagACCEL>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UtagACCEL@@@std@@QAEXPAUtagACCEL@@I@Z ENDP ; std::allocator<tagACCEL>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@UtagACCEL@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UtagACCEL@@@std@@QAE@XZ PROC		; std::allocator<tagACCEL>::allocator<tagACCEL>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UtagACCEL@@@std@@QAE@XZ ENDP		; std::allocator<tagACCEL>::allocator<tagACCEL>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getClassName@Notepad_plus_Window@@SAPB_WXZ
_TEXT	SEGMENT
?getClassName@Notepad_plus_Window@@SAPB_WXZ PROC	; Notepad_plus_Window::getClassName, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\notepad_plus_window.h
; Line 89
	push	ebp
	mov	ebp, esp
; Line 90
	mov	eax, OFFSET ?_className@Notepad_plus_Window@@0QB_WB ; Notepad_plus_Window::_className
; Line 91
	pop	ebp
	ret	0
?getClassName@Notepad_plus_Window@@SAPB_WXZ ENDP	; Notepad_plus_Window::getClassName
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?execute@ScintillaEditView@@QBEJIIJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Msg$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?execute@ScintillaEditView@@QBEJIIJ@Z PROC		; ScintillaEditView::execute, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\scitillacomponent\scintillaeditview.h
; Line 240
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 241
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Msg$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 16					; 00000010H
; Line 242
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?execute@ScintillaEditView@@QBEJIIJ@Z ENDP		; ScintillaEditView::execute
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
; Line 66
	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
; Line 59
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Ignore@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Ignore@std@@QAE@XZ PROC				; std::_Ignore::_Ignore, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 51
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Ignore@std@@QAE@XZ ENDP				; std::_Ignore::_Ignore
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??A?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@QAEAAVScintillaKeyMap@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@QAEAAVScintillaKeyMap@@I@Z PROC ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap> >::operator[], COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1197
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@QBEIXZ ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN1@operator
; Line 1201
	push	1201					; 000004b1H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
; Line 1202
	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN4@operator
	xor	ecx, ecx
	jne	SHORT $LN5@operator
$LN4@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	1202					; 000004b2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN5@operator
	int	3
$LN5@operator:
	push	0
	push	1202					; 000004b2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1LK@EFECNNFA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAS?$AAc?$AAi?$AAn?$AAt?$AAi?$AAl?$AAl?$AAa?$AAK?$AAe?$AAy?$AAM?$AAa@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN1@operator:
; Line 1209
	imul	eax, DWORD PTR __Pos$[ebp], 324
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
; Line 1210
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@QAEAAVScintillaKeyMap@@I@Z ENDP ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?size@?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@QBEIXZ PROC ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1148
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 324				; 00000144H
	idiv	ecx
; Line 1149
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@QBEIXZ ENDP ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Xlen@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IBEXXZ PROC ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1753
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1754
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:
; Line 1755
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IBEXXZ ENDP ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEXXZ PROC ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1622
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1623
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Tidy
; Line 1625
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 1626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEXPAVPluginCmdShortcut@@0@Z ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Destroy
; Line 1628
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 336				; 00000150H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEXPAVPluginCmdShortcut@@I@Z ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::deallocate
; Line 1629
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 1630
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 1631
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN2@Tidy:
; Line 1633
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEXXZ ENDP ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEXPAVPluginCmdShortcut@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEXPAVPluginCmdShortcut@@0@Z PROC ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1565
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1566
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Getal
; Line 1567
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@YAXPAVPluginCmdShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<PluginCmdShortcut> > >
	add	esp, 12					; 0000000cH
; Line 1568
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEXPAVPluginCmdShortcut@@0@Z ENDP ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Capacity$ = 8						; size = 4
?_Buy@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAE_NI@Z PROC ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Buy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1546
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1547
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 1548
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 1549
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 1551
	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy
; Line 1552
	xor	al, al
	jmp	SHORT $LN6@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:
; Line 1553
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBEIXZ ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy
; Line 1554
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IBEXXZ ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Xlen
; Line 1555
	jmp	SHORT $LN3@Buy
$LN2@Buy:
; Line 1557
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEPAVPluginCmdShortcut@@I@Z ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::allocate
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1558
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
; Line 1559
	imul	eax, DWORD PTR __Capacity$[ebp], 336
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN3@Buy:
; Line 1561
	mov	al, 1
$LN6@Buy:
; Line 1562
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Buy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??A?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEAAVPluginCmdShortcut@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEAAVPluginCmdShortcut@@I@Z PROC ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::operator[], COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1197
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBEIXZ ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN1@operator
; Line 1201
	push	1201					; 000004b1H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
; Line 1202
	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN4@operator
	xor	ecx, ecx
	jne	SHORT $LN5@operator
$LN4@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	1202					; 000004b2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN5@operator
	int	3
$LN5@operator:
	push	0
	push	1202					; 000004b2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1MC@MGKONNEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAP?$AAl?$AAu?$AAg?$AAi?$AAn?$AAC?$AAm?$AAd?$AAS?$AAh?$AAo?$AAr?$AAt@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN1@operator:
; Line 1209
	imul	eax, DWORD PTR __Pos$[ebp], 336
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
; Line 1210
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEAAVPluginCmdShortcut@@I@Z ENDP ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBEIXZ PROC ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1152
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1153
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::max_size
; Line 1154
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBEIXZ ENDP ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?size@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBEIXZ PROC ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1148
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 336				; 00000150H
	idiv	ecx
; Line 1149
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBEIXZ ENDP ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?end@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ PROC ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::end, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1039
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?end@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1040
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@PAVPluginCmdShortcut@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1041
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?end@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@end
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
$LN4@end:
	ret	0
__ehhandler$?end@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?end@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?end@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ ENDP ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::end
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ PROC ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::begin, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1029
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?begin@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1030
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@PAVPluginCmdShortcut@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1031
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?begin@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@begin
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
$LN4@begin:
	ret	0
__ehhandler$?begin@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?begin@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ ENDP ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::begin
; Function compile flags: /Odtp
;	COMDAT ??1?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@XZ PROC ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::~vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 944
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 945
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEXXZ ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Tidy
; Line 946
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::~_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::~_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >
__ehhandler$??1?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@XZ ENDP ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::~vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >
; Function compile flags: /Odtp
;	COMDAT ??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv178 = -52						; size = 4
$T2 = -48						; size = 4
tv175 = -44						; size = 4
$T3 = -40						; size = 4
tv135 = -36						; size = 4
tv180 = -32						; size = 4
tv69 = -28						; size = 4
_this$ = -24						; size = 4
$T4 = -18						; size = 1
$T5 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 721
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Getal
	mov	ecx, eax
	call	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::select_on_container_copy_construction
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VPluginCmdShortcut@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 722
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBEIXZ ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAE_NI@Z ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Buy
	movzx	edx, al
	test	edx, edx
	je	$LN3@vector
; Line 723
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 725
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T3[ebp], esp
	push	edx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::end
	mov	DWORD PTR tv69[ebp], eax
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv175[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@2@XZ ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::begin
	mov	DWORD PTR tv180[ebp], eax
	mov	edx, DWORD PTR tv180[ebp]
	mov	DWORD PTR tv178[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEPAVPluginCmdShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@1@0PAV2@@Z ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PluginCmdShortcut> > > >
	mov	DWORD PTR tv135[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN5@vector
__catch$??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z$0:
; Line 727
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@IAEXXZ ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::_Tidy
; Line 728
	push	0
	push	0
	call	__CxxThrowException@8
; Line 729
	mov	eax, $LN11@vector
	ret	0
$LN5@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN3@vector
$LN11@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector:
; Line 730
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::~_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >
__unwindfunclet$??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z$3:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z$4:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >
; Function compile flags: /Odtp
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 641
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 642
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::_Wrap_alloc<std::allocator<PluginCmdShortcut> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 643
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Free_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 630
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 632
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 633
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 634
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
; Line 635
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
; Line 636
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 637
	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Alloc_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 623
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 624
	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 625
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
; Line 626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 627
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::~_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 607
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 608
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Free_proxy
; Line 609
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::~_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VPluginCmdShortcut@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VPluginCmdShortcut@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 601
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VPluginCmdShortcut@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<PluginCmdShortcut> >::_Vector_val<std::_Simple_types<PluginCmdShortcut> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 603
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Alloc_proxy
; Line 604
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VPluginCmdShortcut@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VPluginCmdShortcut@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VPluginCmdShortcut@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VPluginCmdShortcut@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >::_Vector_alloc<0,std::_Vec_base_types<PluginCmdShortcut,std::allocator<PluginCmdShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<PluginCmdShortcut> >::~_Vector_val<std::_Simple_types<PluginCmdShortcut> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??1?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<PluginCmdShortcut> >::~_Vector_val<std::_Simple_types<PluginCmdShortcut> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<PluginCmdShortcut> >::_Vector_val<std::_Simple_types<PluginCmdShortcut> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 480
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 482
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 483
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 484
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 485
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@U?$_Simple_types@VPluginCmdShortcut@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<PluginCmdShortcut> >::_Vector_val<std::_Simple_types<PluginCmdShortcut> >
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 883
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@VPluginCmdShortcut@@@std@@@std@@SAIABV?$allocator@VPluginCmdShortcut@@@2@@Z ; std::allocator_traits<std::allocator<PluginCmdShortcut> >::max_size
	add	esp, 4
; Line 885
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEXPAVPluginCmdShortcut@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEXPAVPluginCmdShortcut@@I@Z PROC ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@I@Z ; std::allocator<PluginCmdShortcut>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEXPAVPluginCmdShortcut@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEPAVPluginCmdShortcut@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEPAVPluginCmdShortcut@@I@Z PROC ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@VPluginCmdShortcut@@@std@@QAEPAVPluginCmdShortcut@@I@Z ; std::allocator<PluginCmdShortcut>::allocate
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEPAVPluginCmdShortcut@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV?$allocator@VPluginCmdShortcut@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV?$allocator@VPluginCmdShortcut@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::_Wrap_alloc<std::allocator<PluginCmdShortcut> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 806
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@VPluginCmdShortcut@@@std@@QAE@ABV01@@Z ; std::allocator<PluginCmdShortcut>::allocator<PluginCmdShortcut>
; Line 807
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV?$allocator@VPluginCmdShortcut@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::_Wrap_alloc<std::allocator<PluginCmdShortcut> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::_Wrap_alloc<std::allocator<PluginCmdShortcut> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@VPluginCmdShortcut@@@std@@QAE@XZ ; std::allocator<PluginCmdShortcut>::allocator<PluginCmdShortcut>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::_Wrap_alloc<std::allocator<PluginCmdShortcut> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AU12@XZ PROC ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 778
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 779
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VPluginCmdShortcut@@@std@@@std@@SA?AV?$allocator@VPluginCmdShortcut@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<PluginCmdShortcut> >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV?$allocator@VPluginCmdShortcut@@@1@@Z ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::_Wrap_alloc<std::allocator<PluginCmdShortcut> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 780
	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBE?AU12@XZ ENDP ; std::_Wrap_alloc<std::allocator<PluginCmdShortcut> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VPluginCmdShortcut@@@std@@@std@@SA?AV?$allocator@VPluginCmdShortcut@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VPluginCmdShortcut@@@std@@@std@@SA?AV?$allocator@VPluginCmdShortcut@@@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<PluginCmdShortcut> >::select_on_container_copy_construction, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 740
	push	ebp
	mov	ebp, esp
; Line 741
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?select_on_container_copy_construction@?$allocator@VPluginCmdShortcut@@@std@@QBE?AV12@XZ ; std::allocator<PluginCmdShortcut>::select_on_container_copy_construction
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 742
	pop	ebp
	ret	0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VPluginCmdShortcut@@@std@@@std@@SA?AV?$allocator@VPluginCmdShortcut@@@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<PluginCmdShortcut> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@VPluginCmdShortcut@@@std@@@std@@SAIABV?$allocator@VPluginCmdShortcut@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@VPluginCmdShortcut@@@std@@@std@@SAIABV?$allocator@VPluginCmdShortcut@@@2@@Z PROC ; std::allocator_traits<std::allocator<PluginCmdShortcut> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 734
	push	ebp
	mov	ebp, esp
; Line 735
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@VPluginCmdShortcut@@@std@@QBEIXZ ; std::allocator<PluginCmdShortcut>::max_size
; Line 736
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@VPluginCmdShortcut@@@std@@@std@@SAIABV?$allocator@VPluginCmdShortcut@@@2@@Z ENDP ; std::allocator_traits<std::allocator<PluginCmdShortcut> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator@VPluginCmdShortcut@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@VPluginCmdShortcut@@@std@@QBEIXZ PROC ; std::allocator<PluginCmdShortcut>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 611
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 612
	mov	eax, 12782640				; 00c30c30H
; Line 613
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@VPluginCmdShortcut@@@std@@QBEIXZ ENDP ; std::allocator<PluginCmdShortcut>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@ABV3@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv74 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@ABV3@@Z PROC ; std::allocator<PluginCmdShortcut>::construct, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 592
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?construct@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@ABV3@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 593
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	336					; 00000150H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0PluginCmdShortcut@@QAE@ABV0@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 594
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@ABV3@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?construct@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@ABV3@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?construct@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@ABV3@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@ABV3@@Z ENDP ; std::allocator<PluginCmdShortcut>::construct
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@VPluginCmdShortcut@@@std@@QAEPAVPluginCmdShortcut@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@VPluginCmdShortcut@@@std@@QAEPAVPluginCmdShortcut@@I@Z PROC ; std::allocator<PluginCmdShortcut>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@VPluginCmdShortcut@@@std@@YAPAVPluginCmdShortcut@@IPAV1@@Z ; std::_Allocate<PluginCmdShortcut>
	add	esp, 8
; Line 579
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@VPluginCmdShortcut@@@std@@QAEPAVPluginCmdShortcut@@I@Z ENDP ; std::allocator<PluginCmdShortcut>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@I@Z PROC ; std::allocator<PluginCmdShortcut>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@VPluginCmdShortcut@@@std@@QAEXPAVPluginCmdShortcut@@I@Z ENDP ; std::allocator<PluginCmdShortcut>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@VPluginCmdShortcut@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@VPluginCmdShortcut@@@std@@QAE@ABV01@@Z PROC ; std::allocator<PluginCmdShortcut>::allocator<PluginCmdShortcut>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 556
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 558
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@VPluginCmdShortcut@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<PluginCmdShortcut>::allocator<PluginCmdShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@VPluginCmdShortcut@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@VPluginCmdShortcut@@@std@@QAE@XZ PROC	; std::allocator<PluginCmdShortcut>::allocator<PluginCmdShortcut>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@VPluginCmdShortcut@@@std@@QAE@XZ ENDP	; std::allocator<PluginCmdShortcut>::allocator<PluginCmdShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$allocator@VPluginCmdShortcut@@@std@@QBE?AV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$allocator@VPluginCmdShortcut@@@std@@QBE?AV12@XZ PROC ; std::allocator<PluginCmdShortcut>::select_on_container_copy_construction, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 532
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 533
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$allocator@VPluginCmdShortcut@@@std@@QAE@ABV01@@Z ; std::allocator<PluginCmdShortcut>::allocator<PluginCmdShortcut>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 534
	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$allocator@VPluginCmdShortcut@@@std@@QBE?AV12@XZ ENDP ; std::allocator<PluginCmdShortcut>::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Xlen@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IBEXXZ PROC ; std::vector<UserCommand,std::allocator<UserCommand> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1753
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1754
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:
; Line 1755
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IBEXXZ ENDP ; std::vector<UserCommand,std::allocator<UserCommand> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEXXZ PROC ; std::vector<UserCommand,std::allocator<UserCommand> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1622
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1623
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Tidy
; Line 1625
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 1626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEXPAVUserCommand@@0@Z ; std::vector<UserCommand,std::allocator<UserCommand> >::_Destroy
; Line 1628
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 328				; 00000148H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEXPAVUserCommand@@I@Z ; std::_Wrap_alloc<std::allocator<UserCommand> >::deallocate
; Line 1629
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 1630
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 1631
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN2@Tidy:
; Line 1633
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEXXZ ENDP ; std::vector<UserCommand,std::allocator<UserCommand> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEXPAVUserCommand@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEXPAVUserCommand@@0@Z PROC ; std::vector<UserCommand,std::allocator<UserCommand> >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1565
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1566
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Getal
; Line 1567
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@@std@@YAXPAVUserCommand@@0AAU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<UserCommand> > >
	add	esp, 12					; 0000000cH
; Line 1568
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEXPAVUserCommand@@0@Z ENDP ; std::vector<UserCommand,std::allocator<UserCommand> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Capacity$ = 8						; size = 4
?_Buy@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAE_NI@Z PROC ; std::vector<UserCommand,std::allocator<UserCommand> >::_Buy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1546
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1547
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 1548
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 1549
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 1551
	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy
; Line 1552
	xor	al, al
	jmp	SHORT $LN6@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:
; Line 1553
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBEIXZ ; std::vector<UserCommand,std::allocator<UserCommand> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy
; Line 1554
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IBEXXZ ; std::vector<UserCommand,std::allocator<UserCommand> >::_Xlen
; Line 1555
	jmp	SHORT $LN3@Buy
$LN2@Buy:
; Line 1557
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEPAVUserCommand@@I@Z ; std::_Wrap_alloc<std::allocator<UserCommand> >::allocate
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1558
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
; Line 1559
	imul	eax, DWORD PTR __Capacity$[ebp], 328
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN3@Buy:
; Line 1561
	mov	al, 1
$LN6@Buy:
; Line 1562
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<UserCommand,std::allocator<UserCommand> >::_Buy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??A?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAEAAVUserCommand@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAEAAVUserCommand@@I@Z PROC ; std::vector<UserCommand,std::allocator<UserCommand> >::operator[], COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1197
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBEIXZ ; std::vector<UserCommand,std::allocator<UserCommand> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN1@operator
; Line 1201
	push	1201					; 000004b1H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
; Line 1202
	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN4@operator
	xor	ecx, ecx
	jne	SHORT $LN5@operator
$LN4@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	1202					; 000004b2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN5@operator
	int	3
$LN5@operator:
	push	0
	push	1202					; 000004b2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1KK@IAHNKIAK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAU?$AAs?$AAe?$AAr?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?0?$AAc?$AAl@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN1@operator:
; Line 1209
	imul	eax, DWORD PTR __Pos$[ebp], 328
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
; Line 1210
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAEAAVUserCommand@@I@Z ENDP ; std::vector<UserCommand,std::allocator<UserCommand> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBEIXZ PROC ; std::vector<UserCommand,std::allocator<UserCommand> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1152
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1153
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<UserCommand> >::max_size
; Line 1154
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBEIXZ ENDP ; std::vector<UserCommand,std::allocator<UserCommand> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?size@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBEIXZ PROC ; std::vector<UserCommand,std::allocator<UserCommand> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1148
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 328				; 00000148H
	idiv	ecx
; Line 1149
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBEIXZ ENDP ; std::vector<UserCommand,std::allocator<UserCommand> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?end@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ PROC ; std::vector<UserCommand,std::allocator<UserCommand> >::end, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1039
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?end@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1040
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@PAVUserCommand@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1041
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?end@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@end
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
$LN4@end:
	ret	0
__ehhandler$?end@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?end@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?end@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ ENDP ; std::vector<UserCommand,std::allocator<UserCommand> >::end
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ PROC ; std::vector<UserCommand,std::allocator<UserCommand> >::begin, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1029
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?begin@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1030
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@PAVUserCommand@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1031
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?begin@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@begin
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
$LN4@begin:
	ret	0
__ehhandler$?begin@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?begin@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ ENDP ; std::vector<UserCommand,std::allocator<UserCommand> >::begin
; Function compile flags: /Odtp
;	COMDAT ??1?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@XZ PROC ; std::vector<UserCommand,std::allocator<UserCommand> >::~vector<UserCommand,std::allocator<UserCommand> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 944
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 945
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEXXZ ; std::vector<UserCommand,std::allocator<UserCommand> >::_Tidy
; Line 946
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::~_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::~_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >
__ehhandler$??1?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@XZ ENDP ; std::vector<UserCommand,std::allocator<UserCommand> >::~vector<UserCommand,std::allocator<UserCommand> >
; Function compile flags: /Odtp
;	COMDAT ??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv178 = -52						; size = 4
$T2 = -48						; size = 4
tv175 = -44						; size = 4
$T3 = -40						; size = 4
tv135 = -36						; size = 4
tv180 = -32						; size = 4
tv69 = -28						; size = 4
_this$ = -24						; size = 4
$T4 = -18						; size = 1
$T5 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<UserCommand,std::allocator<UserCommand> >::vector<UserCommand,std::allocator<UserCommand> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 721
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Getal
	mov	ecx, eax
	call	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<UserCommand> >::select_on_container_copy_construction
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@ABV?$allocator@VUserCommand@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 722
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBEIXZ ; std::vector<UserCommand,std::allocator<UserCommand> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAE_NI@Z ; std::vector<UserCommand,std::allocator<UserCommand> >::_Buy
	movzx	edx, al
	test	edx, edx
	je	$LN3@vector
; Line 723
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 725
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T3[ebp], esp
	push	edx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ ; std::vector<UserCommand,std::allocator<UserCommand> >::end
	mov	DWORD PTR tv69[ebp], eax
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv175[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@2@XZ ; std::vector<UserCommand,std::allocator<UserCommand> >::begin
	mov	DWORD PTR tv180[ebp], eax
	mov	edx, DWORD PTR tv180[ebp]
	mov	DWORD PTR tv178[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEPAVUserCommand@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@1@0PAV2@@Z ; std::vector<UserCommand,std::allocator<UserCommand> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<UserCommand> > > >
	mov	DWORD PTR tv135[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN5@vector
__catch$??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z$0:
; Line 727
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@IAEXXZ ; std::vector<UserCommand,std::allocator<UserCommand> >::_Tidy
; Line 728
	push	0
	push	0
	call	__CxxThrowException@8
; Line 729
	mov	eax, $LN11@vector
	ret	0
$LN5@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN3@vector
$LN11@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector:
; Line 730
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::~_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >
__unwindfunclet$??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z$3:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z$4:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<UserCommand,std::allocator<UserCommand> >::vector<UserCommand,std::allocator<UserCommand> >
; Function compile flags: /Odtp
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 641
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 642
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<UserCommand> >::_Wrap_alloc<std::allocator<UserCommand> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 643
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Free_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 630
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 632
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 633
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 634
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
; Line 635
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
; Line 636
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 637
	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Alloc_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 623
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 624
	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 625
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
; Line 626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 627
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::~_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 607
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 608
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Free_proxy
; Line 609
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::~_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@ABV?$allocator@VUserCommand@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@ABV?$allocator@VUserCommand@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 601
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@ABV?$allocator@VUserCommand@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<UserCommand> >::_Vector_val<std::_Simple_types<UserCommand> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 603
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Alloc_proxy
; Line 604
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@ABV?$allocator@VUserCommand@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@ABV?$allocator@VUserCommand@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@ABV?$allocator@VUserCommand@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@@std@@QAE@ABV?$allocator@VUserCommand@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >::_Vector_alloc<0,std::_Vec_base_types<UserCommand,std::allocator<UserCommand> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<UserCommand> >::~_Vector_val<std::_Simple_types<UserCommand> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??1?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<UserCommand> >::~_Vector_val<std::_Simple_types<UserCommand> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<UserCommand> >::_Vector_val<std::_Simple_types<UserCommand> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 480
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 482
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 483
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 484
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 485
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@U?$_Simple_types@VUserCommand@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<UserCommand> >::_Vector_val<std::_Simple_types<UserCommand> >
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<UserCommand> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 883
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@VUserCommand@@@std@@@std@@SAIABV?$allocator@VUserCommand@@@2@@Z ; std::allocator_traits<std::allocator<UserCommand> >::max_size
	add	esp, 4
; Line 885
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<UserCommand> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEXPAVUserCommand@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEXPAVUserCommand@@I@Z PROC ; std::_Wrap_alloc<std::allocator<UserCommand> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@I@Z ; std::allocator<UserCommand>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEXPAVUserCommand@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<UserCommand> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEPAVUserCommand@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEPAVUserCommand@@I@Z PROC ; std::_Wrap_alloc<std::allocator<UserCommand> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@VUserCommand@@@std@@QAEPAVUserCommand@@I@Z ; std::allocator<UserCommand>::allocate
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAEPAVUserCommand@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<UserCommand> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV?$allocator@VUserCommand@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV?$allocator@VUserCommand@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<UserCommand> >::_Wrap_alloc<std::allocator<UserCommand> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 806
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@VUserCommand@@@std@@QAE@ABV01@@Z ; std::allocator<UserCommand>::allocator<UserCommand>
; Line 807
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV?$allocator@VUserCommand@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<UserCommand> >::_Wrap_alloc<std::allocator<UserCommand> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<UserCommand> >::_Wrap_alloc<std::allocator<UserCommand> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@VUserCommand@@@std@@QAE@XZ ; std::allocator<UserCommand>::allocator<UserCommand>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<UserCommand> >::_Wrap_alloc<std::allocator<UserCommand> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QBE?AU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QBE?AU12@XZ PROC ; std::_Wrap_alloc<std::allocator<UserCommand> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 778
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 779
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VUserCommand@@@std@@@std@@SA?AV?$allocator@VUserCommand@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<UserCommand> >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV?$allocator@VUserCommand@@@1@@Z ; std::_Wrap_alloc<std::allocator<UserCommand> >::_Wrap_alloc<std::allocator<UserCommand> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 780
	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VUserCommand@@@std@@@std@@QBE?AU12@XZ ENDP ; std::_Wrap_alloc<std::allocator<UserCommand> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VUserCommand@@@std@@@std@@SA?AV?$allocator@VUserCommand@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VUserCommand@@@std@@@std@@SA?AV?$allocator@VUserCommand@@@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<UserCommand> >::select_on_container_copy_construction, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 740
	push	ebp
	mov	ebp, esp
; Line 741
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?select_on_container_copy_construction@?$allocator@VUserCommand@@@std@@QBE?AV12@XZ ; std::allocator<UserCommand>::select_on_container_copy_construction
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 742
	pop	ebp
	ret	0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VUserCommand@@@std@@@std@@SA?AV?$allocator@VUserCommand@@@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<UserCommand> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@VUserCommand@@@std@@@std@@SAIABV?$allocator@VUserCommand@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@VUserCommand@@@std@@@std@@SAIABV?$allocator@VUserCommand@@@2@@Z PROC ; std::allocator_traits<std::allocator<UserCommand> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 734
	push	ebp
	mov	ebp, esp
; Line 735
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@VUserCommand@@@std@@QBEIXZ ; std::allocator<UserCommand>::max_size
; Line 736
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@VUserCommand@@@std@@@std@@SAIABV?$allocator@VUserCommand@@@2@@Z ENDP ; std::allocator_traits<std::allocator<UserCommand> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator@VUserCommand@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@VUserCommand@@@std@@QBEIXZ PROC	; std::allocator<UserCommand>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 611
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 612
	mov	eax, 13094412				; 00c7ce0cH
; Line 613
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@VUserCommand@@@std@@QBEIXZ ENDP	; std::allocator<UserCommand>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@ABV3@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv74 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@ABV3@@Z PROC ; std::allocator<UserCommand>::construct, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 592
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?construct@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@ABV3@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 593
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	328					; 00000148H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0UserCommand@@QAE@ABV0@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 594
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@ABV3@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?construct@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@ABV3@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?construct@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@ABV3@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@ABV3@@Z ENDP ; std::allocator<UserCommand>::construct
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@VUserCommand@@@std@@QAEPAVUserCommand@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@VUserCommand@@@std@@QAEPAVUserCommand@@I@Z PROC ; std::allocator<UserCommand>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@VUserCommand@@@std@@YAPAVUserCommand@@IPAV1@@Z ; std::_Allocate<UserCommand>
	add	esp, 8
; Line 579
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@VUserCommand@@@std@@QAEPAVUserCommand@@I@Z ENDP ; std::allocator<UserCommand>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@I@Z PROC ; std::allocator<UserCommand>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@VUserCommand@@@std@@QAEXPAVUserCommand@@I@Z ENDP ; std::allocator<UserCommand>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@VUserCommand@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@VUserCommand@@@std@@QAE@ABV01@@Z PROC	; std::allocator<UserCommand>::allocator<UserCommand>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 556
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 558
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@VUserCommand@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<UserCommand>::allocator<UserCommand>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@VUserCommand@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@VUserCommand@@@std@@QAE@XZ PROC		; std::allocator<UserCommand>::allocator<UserCommand>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@VUserCommand@@@std@@QAE@XZ ENDP		; std::allocator<UserCommand>::allocator<UserCommand>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$allocator@VUserCommand@@@std@@QBE?AV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$allocator@VUserCommand@@@std@@QBE?AV12@XZ PROC ; std::allocator<UserCommand>::select_on_container_copy_construction, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 532
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 533
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$allocator@VUserCommand@@@std@@QAE@ABV01@@Z ; std::allocator<UserCommand>::allocator<UserCommand>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 534
	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$allocator@VUserCommand@@@std@@QBE?AV12@XZ ENDP ; std::allocator<UserCommand>::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Xlen@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IBEXXZ PROC ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1753
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1754
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:
; Line 1755
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IBEXXZ ENDP ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEXXZ PROC ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1622
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1623
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Tidy
; Line 1625
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 1626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEXPAVMacroShortcut@@0@Z ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Destroy
; Line 1628
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 316				; 0000013cH
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEXPAVMacroShortcut@@I@Z ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::deallocate
; Line 1629
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 1630
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 1631
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN2@Tidy:
; Line 1633
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEXXZ ENDP ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEXPAVMacroShortcut@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEXPAVMacroShortcut@@0@Z PROC ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1565
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1566
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Getal
; Line 1567
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@YAXPAVMacroShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MacroShortcut> > >
	add	esp, 12					; 0000000cH
; Line 1568
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEXPAVMacroShortcut@@0@Z ENDP ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Capacity$ = 8						; size = 4
?_Buy@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAE_NI@Z PROC ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Buy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1546
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1547
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 1548
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 1549
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 1551
	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy
; Line 1552
	xor	al, al
	jmp	SHORT $LN6@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:
; Line 1553
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBEIXZ ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy
; Line 1554
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IBEXXZ ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Xlen
; Line 1555
	jmp	SHORT $LN3@Buy
$LN2@Buy:
; Line 1557
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEPAVMacroShortcut@@I@Z ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::allocate
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1558
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
; Line 1559
	imul	eax, DWORD PTR __Capacity$[ebp], 316
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN3@Buy:
; Line 1561
	mov	al, 1
$LN6@Buy:
; Line 1562
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Buy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??A?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAEAAVMacroShortcut@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAEAAVMacroShortcut@@I@Z PROC ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::operator[], COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1197
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBEIXZ ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN1@operator
; Line 1201
	push	1201					; 000004b1H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
; Line 1202
	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN4@operator
	xor	ecx, ecx
	jne	SHORT $LN5@operator
$LN4@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	1202					; 000004b2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN5@operator
	int	3
$LN5@operator:
	push	0
	push	1202					; 000004b2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1LC@OPANGMDH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAM?$AAa?$AAc?$AAr?$AAo?$AAS?$AAh?$AAo?$AAr?$AAt?$AAc?$AAu?$AAt?$AA?0@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN1@operator:
; Line 1209
	imul	eax, DWORD PTR __Pos$[ebp], 316
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
; Line 1210
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAEAAVMacroShortcut@@I@Z ENDP ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBEIXZ PROC ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1152
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1153
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::max_size
; Line 1154
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBEIXZ ENDP ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?size@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBEIXZ PROC ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1148
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 316				; 0000013cH
	idiv	ecx
; Line 1149
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBEIXZ ENDP ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?end@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ PROC ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::end, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1039
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?end@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1040
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@PAVMacroShortcut@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1041
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?end@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@end
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
$LN4@end:
	ret	0
__ehhandler$?end@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?end@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?end@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ ENDP ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::end
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ PROC ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::begin, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1029
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?begin@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1030
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@PAVMacroShortcut@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1031
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?begin@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@begin
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
$LN4@begin:
	ret	0
__ehhandler$?begin@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?begin@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ ENDP ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::begin
; Function compile flags: /Odtp
;	COMDAT ??1?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@XZ PROC ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::~vector<MacroShortcut,std::allocator<MacroShortcut> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 944
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 945
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEXXZ ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Tidy
; Line 946
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::~_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::~_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >
__ehhandler$??1?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@XZ ENDP ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::~vector<MacroShortcut,std::allocator<MacroShortcut> >
; Function compile flags: /Odtp
;	COMDAT ??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv178 = -52						; size = 4
$T2 = -48						; size = 4
tv175 = -44						; size = 4
$T3 = -40						; size = 4
tv135 = -36						; size = 4
tv180 = -32						; size = 4
tv69 = -28						; size = 4
_this$ = -24						; size = 4
$T4 = -18						; size = 1
$T5 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::vector<MacroShortcut,std::allocator<MacroShortcut> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 721
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Getal
	mov	ecx, eax
	call	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::select_on_container_copy_construction
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VMacroShortcut@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 722
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBEIXZ ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAE_NI@Z ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Buy
	movzx	edx, al
	test	edx, edx
	je	$LN3@vector
; Line 723
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 725
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T3[ebp], esp
	push	edx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::end
	mov	DWORD PTR tv69[ebp], eax
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv175[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@2@XZ ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::begin
	mov	DWORD PTR tv180[ebp], eax
	mov	edx, DWORD PTR tv180[ebp]
	mov	DWORD PTR tv178[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEPAVMacroShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@1@0PAV2@@Z ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MacroShortcut> > > >
	mov	DWORD PTR tv135[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN5@vector
__catch$??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z$0:
; Line 727
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@IAEXXZ ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::_Tidy
; Line 728
	push	0
	push	0
	call	__CxxThrowException@8
; Line 729
	mov	eax, $LN11@vector
	ret	0
$LN5@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN3@vector
$LN11@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector:
; Line 730
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::~_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >
__unwindfunclet$??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z$3:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z$4:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::vector<MacroShortcut,std::allocator<MacroShortcut> >
; Function compile flags: /Odtp
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 641
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 642
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::_Wrap_alloc<std::allocator<MacroShortcut> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 643
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Free_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 630
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 632
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 633
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 634
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
; Line 635
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
; Line 636
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 637
	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Alloc_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 623
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 624
	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 625
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
; Line 626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 627
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::~_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 607
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 608
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Free_proxy
; Line 609
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::~_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VMacroShortcut@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VMacroShortcut@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 601
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VMacroShortcut@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<MacroShortcut> >::_Vector_val<std::_Simple_types<MacroShortcut> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 603
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Alloc_proxy
; Line 604
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VMacroShortcut@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VMacroShortcut@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VMacroShortcut@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VMacroShortcut@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >::_Vector_alloc<0,std::_Vec_base_types<MacroShortcut,std::allocator<MacroShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<MacroShortcut> >::~_Vector_val<std::_Simple_types<MacroShortcut> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??1?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<MacroShortcut> >::~_Vector_val<std::_Simple_types<MacroShortcut> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<MacroShortcut> >::_Vector_val<std::_Simple_types<MacroShortcut> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 480
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 482
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 483
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 484
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 485
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@U?$_Simple_types@VMacroShortcut@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<MacroShortcut> >::_Vector_val<std::_Simple_types<MacroShortcut> >
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 883
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@VMacroShortcut@@@std@@@std@@SAIABV?$allocator@VMacroShortcut@@@2@@Z ; std::allocator_traits<std::allocator<MacroShortcut> >::max_size
	add	esp, 4
; Line 885
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEXPAVMacroShortcut@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEXPAVMacroShortcut@@I@Z PROC ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@I@Z ; std::allocator<MacroShortcut>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEXPAVMacroShortcut@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEPAVMacroShortcut@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEPAVMacroShortcut@@I@Z PROC ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@VMacroShortcut@@@std@@QAEPAVMacroShortcut@@I@Z ; std::allocator<MacroShortcut>::allocate
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAEPAVMacroShortcut@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV?$allocator@VMacroShortcut@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV?$allocator@VMacroShortcut@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::_Wrap_alloc<std::allocator<MacroShortcut> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 806
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@VMacroShortcut@@@std@@QAE@ABV01@@Z ; std::allocator<MacroShortcut>::allocator<MacroShortcut>
; Line 807
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV?$allocator@VMacroShortcut@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::_Wrap_alloc<std::allocator<MacroShortcut> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::_Wrap_alloc<std::allocator<MacroShortcut> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@VMacroShortcut@@@std@@QAE@XZ ; std::allocator<MacroShortcut>::allocator<MacroShortcut>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::_Wrap_alloc<std::allocator<MacroShortcut> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AU12@XZ PROC ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 778
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 779
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VMacroShortcut@@@std@@@std@@SA?AV?$allocator@VMacroShortcut@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<MacroShortcut> >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV?$allocator@VMacroShortcut@@@1@@Z ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::_Wrap_alloc<std::allocator<MacroShortcut> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 780
	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VMacroShortcut@@@std@@@std@@QBE?AU12@XZ ENDP ; std::_Wrap_alloc<std::allocator<MacroShortcut> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VMacroShortcut@@@std@@@std@@SA?AV?$allocator@VMacroShortcut@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VMacroShortcut@@@std@@@std@@SA?AV?$allocator@VMacroShortcut@@@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<MacroShortcut> >::select_on_container_copy_construction, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 740
	push	ebp
	mov	ebp, esp
; Line 741
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?select_on_container_copy_construction@?$allocator@VMacroShortcut@@@std@@QBE?AV12@XZ ; std::allocator<MacroShortcut>::select_on_container_copy_construction
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 742
	pop	ebp
	ret	0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VMacroShortcut@@@std@@@std@@SA?AV?$allocator@VMacroShortcut@@@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<MacroShortcut> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@VMacroShortcut@@@std@@@std@@SAIABV?$allocator@VMacroShortcut@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@VMacroShortcut@@@std@@@std@@SAIABV?$allocator@VMacroShortcut@@@2@@Z PROC ; std::allocator_traits<std::allocator<MacroShortcut> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 734
	push	ebp
	mov	ebp, esp
; Line 735
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@VMacroShortcut@@@std@@QBEIXZ ; std::allocator<MacroShortcut>::max_size
; Line 736
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@VMacroShortcut@@@std@@@std@@SAIABV?$allocator@VMacroShortcut@@@2@@Z ENDP ; std::allocator_traits<std::allocator<MacroShortcut> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator@VMacroShortcut@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@VMacroShortcut@@@std@@QBEIXZ PROC	; std::allocator<MacroShortcut>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 611
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 612
	mov	eax, 13591668				; 00cf6474H
; Line 613
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@VMacroShortcut@@@std@@QBEIXZ ENDP	; std::allocator<MacroShortcut>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@ABV3@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv74 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@ABV3@@Z PROC ; std::allocator<MacroShortcut>::construct, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 592
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?construct@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@ABV3@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 593
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	316					; 0000013cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0MacroShortcut@@QAE@ABV0@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 594
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@ABV3@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?construct@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@ABV3@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?construct@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@ABV3@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@ABV3@@Z ENDP ; std::allocator<MacroShortcut>::construct
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@VMacroShortcut@@@std@@QAEPAVMacroShortcut@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@VMacroShortcut@@@std@@QAEPAVMacroShortcut@@I@Z PROC ; std::allocator<MacroShortcut>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@VMacroShortcut@@@std@@YAPAVMacroShortcut@@IPAV1@@Z ; std::_Allocate<MacroShortcut>
	add	esp, 8
; Line 579
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@VMacroShortcut@@@std@@QAEPAVMacroShortcut@@I@Z ENDP ; std::allocator<MacroShortcut>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@I@Z PROC ; std::allocator<MacroShortcut>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@VMacroShortcut@@@std@@QAEXPAVMacroShortcut@@I@Z ENDP ; std::allocator<MacroShortcut>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@VMacroShortcut@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@VMacroShortcut@@@std@@QAE@ABV01@@Z PROC	; std::allocator<MacroShortcut>::allocator<MacroShortcut>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 556
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 558
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@VMacroShortcut@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<MacroShortcut>::allocator<MacroShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@VMacroShortcut@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@VMacroShortcut@@@std@@QAE@XZ PROC	; std::allocator<MacroShortcut>::allocator<MacroShortcut>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@VMacroShortcut@@@std@@QAE@XZ ENDP	; std::allocator<MacroShortcut>::allocator<MacroShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$allocator@VMacroShortcut@@@std@@QBE?AV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$allocator@VMacroShortcut@@@std@@QBE?AV12@XZ PROC ; std::allocator<MacroShortcut>::select_on_container_copy_construction, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 532
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 533
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$allocator@VMacroShortcut@@@std@@QAE@ABV01@@Z ; std::allocator<MacroShortcut>::allocator<MacroShortcut>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 534
	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$allocator@VMacroShortcut@@@std@@QBE?AV12@XZ ENDP ; std::allocator<MacroShortcut>::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Xlen@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IBEXXZ PROC ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1753
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1754
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:
; Line 1755
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IBEXXZ ENDP ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEXXZ PROC ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1622
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1623
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Tidy
; Line 1625
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 1626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEXPAVCommandShortcut@@0@Z ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Destroy
; Line 1628
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 300				; 0000012cH
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEXPAVCommandShortcut@@I@Z ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::deallocate
; Line 1629
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 1630
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 1631
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN2@Tidy:
; Line 1633
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEXXZ ENDP ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEXPAVCommandShortcut@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEXPAVCommandShortcut@@0@Z PROC ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1565
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1566
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Getal
; Line 1567
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@YAXPAVCommandShortcut@@0AAU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CommandShortcut> > >
	add	esp, 12					; 0000000cH
; Line 1568
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEXPAVCommandShortcut@@0@Z ENDP ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Capacity$ = 8						; size = 4
?_Buy@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Buy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1546
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1547
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 1548
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 1549
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 1551
	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy
; Line 1552
	xor	al, al
	jmp	SHORT $LN6@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:
; Line 1553
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy
; Line 1554
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IBEXXZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Xlen
; Line 1555
	jmp	SHORT $LN3@Buy
$LN2@Buy:
; Line 1557
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEPAVCommandShortcut@@I@Z ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::allocate
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1558
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
; Line 1559
	imul	eax, DWORD PTR __Capacity$[ebp], 300
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN3@Buy:
; Line 1561
	mov	al, 1
$LN6@Buy:
; Line 1562
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Buy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??A?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAEAAVCommandShortcut@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAEAAVCommandShortcut@@I@Z PROC ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::operator[], COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1197
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN1@operator
; Line 1201
	push	1201					; 000004b1H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
; Line 1202
	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN4@operator
	xor	ecx, ecx
	jne	SHORT $LN5@operator
$LN4@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	1202					; 000004b2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN5@operator
	int	3
$LN5@operator:
	push	0
	push	1202					; 000004b2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1LK@BFNMKIGH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAS?$AAh?$AAo?$AAr?$AAt?$AAc?$AAu@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN1@operator:
; Line 1209
	imul	eax, DWORD PTR __Pos$[ebp], 300
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
; Line 1210
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAEAAVCommandShortcut@@I@Z ENDP ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ PROC ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1152
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1153
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::max_size
; Line 1154
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ ENDP ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?size@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ PROC ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1148
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 300				; 0000012cH
	idiv	ecx
; Line 1149
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ ENDP ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?end@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ PROC ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::end, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1039
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?end@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1040
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@PAVCommandShortcut@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1041
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?end@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@end
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
$LN4@end:
	ret	0
__ehhandler$?end@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?end@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?end@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ ENDP ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::end
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ PROC ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::begin, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1029
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?begin@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1030
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@PAVCommandShortcut@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1031
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?begin@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@begin
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
$LN4@begin:
	ret	0
__ehhandler$?begin@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?begin@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ ENDP ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::begin
; Function compile flags: /Odtp
;	COMDAT ??1?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@XZ PROC ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::~vector<CommandShortcut,std::allocator<CommandShortcut> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 944
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 945
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEXXZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Tidy
; Line 946
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::~_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::~_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >
__ehhandler$??1?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@XZ ENDP ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::~vector<CommandShortcut,std::allocator<CommandShortcut> >
; Function compile flags: /Odtp
;	COMDAT ??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv178 = -52						; size = 4
$T2 = -48						; size = 4
tv175 = -44						; size = 4
$T3 = -40						; size = 4
tv135 = -36						; size = 4
tv180 = -32						; size = 4
tv69 = -28						; size = 4
_this$ = -24						; size = 4
$T4 = -18						; size = 1
$T5 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::vector<CommandShortcut,std::allocator<CommandShortcut> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 721
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Getal
	mov	ecx, eax
	call	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::select_on_container_copy_construction
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VCommandShortcut@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 722
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAE_NI@Z ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Buy
	movzx	edx, al
	test	edx, edx
	je	$LN3@vector
; Line 723
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 725
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T3[ebp], esp
	push	edx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::end
	mov	DWORD PTR tv69[ebp], eax
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv175[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@2@XZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::begin
	mov	DWORD PTR tv180[ebp], eax
	mov	edx, DWORD PTR tv180[ebp]
	mov	DWORD PTR tv178[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEPAVCommandShortcut@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@1@0PAV2@@Z ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CommandShortcut> > > >
	mov	DWORD PTR tv135[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN5@vector
__catch$??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z$0:
; Line 727
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@IAEXXZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::_Tidy
; Line 728
	push	0
	push	0
	call	__CxxThrowException@8
; Line 729
	mov	eax, $LN11@vector
	ret	0
$LN5@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN3@vector
$LN11@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector:
; Line 730
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::~_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >
__unwindfunclet$??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z$3:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z$4:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::vector<CommandShortcut,std::allocator<CommandShortcut> >
; Function compile flags: /Odtp
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 641
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 642
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::_Wrap_alloc<std::allocator<CommandShortcut> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 643
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Free_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 630
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 632
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 633
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 634
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
; Line 635
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
; Line 636
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 637
	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Alloc_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 623
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 624
	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 625
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
; Line 626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 627
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::~_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 607
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 608
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Free_proxy
; Line 609
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::~_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VCommandShortcut@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VCommandShortcut@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 601
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VCommandShortcut@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CommandShortcut> >::_Vector_val<std::_Simple_types<CommandShortcut> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 603
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Alloc_proxy
; Line 604
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VCommandShortcut@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VCommandShortcut@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VCommandShortcut@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@@std@@QAE@ABV?$allocator@VCommandShortcut@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >::_Vector_alloc<0,std::_Vec_base_types<CommandShortcut,std::allocator<CommandShortcut> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CommandShortcut> >::~_Vector_val<std::_Simple_types<CommandShortcut> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??1?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CommandShortcut> >::~_Vector_val<std::_Simple_types<CommandShortcut> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CommandShortcut> >::_Vector_val<std::_Simple_types<CommandShortcut> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 480
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 482
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 483
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 484
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 485
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@U?$_Simple_types@VCommandShortcut@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CommandShortcut> >::_Vector_val<std::_Simple_types<CommandShortcut> >
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 883
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@VCommandShortcut@@@std@@@std@@SAIABV?$allocator@VCommandShortcut@@@2@@Z ; std::allocator_traits<std::allocator<CommandShortcut> >::max_size
	add	esp, 4
; Line 885
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEXPAVCommandShortcut@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEXPAVCommandShortcut@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@I@Z ; std::allocator<CommandShortcut>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEXPAVCommandShortcut@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEPAVCommandShortcut@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEPAVCommandShortcut@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@VCommandShortcut@@@std@@QAEPAVCommandShortcut@@I@Z ; std::allocator<CommandShortcut>::allocate
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAEPAVCommandShortcut@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV?$allocator@VCommandShortcut@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV?$allocator@VCommandShortcut@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::_Wrap_alloc<std::allocator<CommandShortcut> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 806
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@VCommandShortcut@@@std@@QAE@ABV01@@Z ; std::allocator<CommandShortcut>::allocator<CommandShortcut>
; Line 807
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV?$allocator@VCommandShortcut@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::_Wrap_alloc<std::allocator<CommandShortcut> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::_Wrap_alloc<std::allocator<CommandShortcut> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@VCommandShortcut@@@std@@QAE@XZ ; std::allocator<CommandShortcut>::allocator<CommandShortcut>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::_Wrap_alloc<std::allocator<CommandShortcut> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AU12@XZ PROC ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 778
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 779
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VCommandShortcut@@@std@@@std@@SA?AV?$allocator@VCommandShortcut@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<CommandShortcut> >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV?$allocator@VCommandShortcut@@@1@@Z ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::_Wrap_alloc<std::allocator<CommandShortcut> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 780
	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VCommandShortcut@@@std@@@std@@QBE?AU12@XZ ENDP ; std::_Wrap_alloc<std::allocator<CommandShortcut> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VCommandShortcut@@@std@@@std@@SA?AV?$allocator@VCommandShortcut@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VCommandShortcut@@@std@@@std@@SA?AV?$allocator@VCommandShortcut@@@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<CommandShortcut> >::select_on_container_copy_construction, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 740
	push	ebp
	mov	ebp, esp
; Line 741
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?select_on_container_copy_construction@?$allocator@VCommandShortcut@@@std@@QBE?AV12@XZ ; std::allocator<CommandShortcut>::select_on_container_copy_construction
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 742
	pop	ebp
	ret	0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VCommandShortcut@@@std@@@std@@SA?AV?$allocator@VCommandShortcut@@@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<CommandShortcut> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@VCommandShortcut@@@std@@@std@@SAIABV?$allocator@VCommandShortcut@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@VCommandShortcut@@@std@@@std@@SAIABV?$allocator@VCommandShortcut@@@2@@Z PROC ; std::allocator_traits<std::allocator<CommandShortcut> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 734
	push	ebp
	mov	ebp, esp
; Line 735
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@VCommandShortcut@@@std@@QBEIXZ ; std::allocator<CommandShortcut>::max_size
; Line 736
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@VCommandShortcut@@@std@@@std@@SAIABV?$allocator@VCommandShortcut@@@2@@Z ENDP ; std::allocator_traits<std::allocator<CommandShortcut> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator@VCommandShortcut@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@VCommandShortcut@@@std@@QBEIXZ PROC ; std::allocator<CommandShortcut>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 611
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 612
	mov	eax, 14316557				; 00da740dH
; Line 613
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@VCommandShortcut@@@std@@QBEIXZ ENDP ; std::allocator<CommandShortcut>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@ABV3@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv74 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@ABV3@@Z PROC ; std::allocator<CommandShortcut>::construct, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 592
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?construct@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@ABV3@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 593
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	300					; 0000012cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CommandShortcut@@QAE@ABV0@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 594
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@ABV3@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?construct@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@ABV3@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?construct@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@ABV3@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@ABV3@@Z ENDP ; std::allocator<CommandShortcut>::construct
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@VCommandShortcut@@@std@@QAEPAVCommandShortcut@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@VCommandShortcut@@@std@@QAEPAVCommandShortcut@@I@Z PROC ; std::allocator<CommandShortcut>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@VCommandShortcut@@@std@@YAPAVCommandShortcut@@IPAV1@@Z ; std::_Allocate<CommandShortcut>
	add	esp, 8
; Line 579
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@VCommandShortcut@@@std@@QAEPAVCommandShortcut@@I@Z ENDP ; std::allocator<CommandShortcut>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@I@Z PROC ; std::allocator<CommandShortcut>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@VCommandShortcut@@@std@@QAEXPAVCommandShortcut@@I@Z ENDP ; std::allocator<CommandShortcut>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@VCommandShortcut@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@VCommandShortcut@@@std@@QAE@ABV01@@Z PROC ; std::allocator<CommandShortcut>::allocator<CommandShortcut>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 556
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 558
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@VCommandShortcut@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CommandShortcut>::allocator<CommandShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@VCommandShortcut@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@VCommandShortcut@@@std@@QAE@XZ PROC	; std::allocator<CommandShortcut>::allocator<CommandShortcut>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@VCommandShortcut@@@std@@QAE@XZ ENDP	; std::allocator<CommandShortcut>::allocator<CommandShortcut>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$allocator@VCommandShortcut@@@std@@QBE?AV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$allocator@VCommandShortcut@@@std@@QBE?AV12@XZ PROC ; std::allocator<CommandShortcut>::select_on_container_copy_construction, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 532
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 533
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$allocator@VCommandShortcut@@@std@@QAE@ABV01@@Z ; std::allocator<CommandShortcut>::allocator<CommandShortcut>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 534
	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$allocator@VCommandShortcut@@@std@@QBE?AV12@XZ ENDP ; std::allocator<CommandShortcut>::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getScintillaKeyList@NppParameters@@QAEAAV?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getScintillaKeyList@NppParameters@@QAEAAV?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@XZ PROC ; NppParameters::getScintillaKeyList, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\parameters.h
; Line 1400
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 117092				; 0001c964H
	mov	esp, ebp
	pop	ebp
	ret	0
?getScintillaKeyList@NppParameters@@QAEAAV?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@XZ ENDP ; NppParameters::getScintillaKeyList
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getPluginCommandList@NppParameters@@QAEAAV?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPluginCommandList@NppParameters@@QAEAAV?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@XZ PROC ; NppParameters::getPluginCommandList, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\parameters.h
; Line 1396
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 117060				; 0001c944H
	mov	esp, ebp
	pop	ebp
	ret	0
?getPluginCommandList@NppParameters@@QAEAAV?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@XZ ENDP ; NppParameters::getPluginCommandList
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getUserCommandList@NppParameters@@QAEAAV?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUserCommandList@NppParameters@@QAEAAV?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@XZ PROC ; NppParameters::getUserCommandList, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\parameters.h
; Line 1395
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 117044				; 0001c934H
	mov	esp, ebp
	pop	ebp
	ret	0
?getUserCommandList@NppParameters@@QAEAAV?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@XZ ENDP ; NppParameters::getUserCommandList
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getMacroList@NppParameters@@QAEAAV?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMacroList@NppParameters@@QAEAAV?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@XZ PROC ; NppParameters::getMacroList, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\parameters.h
; Line 1394
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 117028				; 0001c924H
	mov	esp, ebp
	pop	ebp
	ret	0
?getMacroList@NppParameters@@QAEAAV?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@XZ ENDP ; NppParameters::getMacroList
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getUserShortcuts@NppParameters@@QAEAAV?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUserShortcuts@NppParameters@@QAEAAV?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@XZ PROC ; NppParameters::getUserShortcuts, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\parameters.h
; Line 1390
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 116996				; 0001c904H
	mov	esp, ebp
	pop	ebp
	ret	0
?getUserShortcuts@NppParameters@@QAEAAV?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@XZ ENDP ; NppParameters::getUserShortcuts
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getInstance@NppParameters@@SAPAV1@XZ
_TEXT	SEGMENT
?getInstance@NppParameters@@SAPAV1@XZ PROC		; NppParameters::getInstance, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\parameters.h
; Line 1155
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?_pSelf@NppParameters@@0PAV1@A ; NppParameters::_pSelf
	pop	ebp
	ret	0
?getInstance@NppParameters@@SAPAV1@XZ ENDP		; NppParameters::getInstance
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -20						; size = 4
__Pnext$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1764
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1765
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1766
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
	mov	DWORD PTR __Pnext$[ebp], eax
; Line 1767
	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:
; Line 1768
	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_ran
; Line 1769
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN3@Orphan_ran
$LN2@Orphan_ran:
; Line 1770
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax
; Line 1771
	jmp	SHORT $LN1@Orphan_ran
$LN3@Orphan_ran:
; Line 1773
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont
; Line 1774
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN1@Orphan_ran:
; Line 1775
	jmp	SHORT $LN5@Orphan_ran
$LN6@Orphan_ran:
; Line 1776
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range
; Function compile flags: /Odtp
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1753
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1754
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:
; Line 1755
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1622
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1623
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Tidy
; Line 1625
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 1626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
; Line 1628
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate
; Line 1629
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 1630
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 1631
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN2@Tidy:
; Line 1633
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Reserve, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1612
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
; Line 1613
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::_Unused_capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Reserve
; Line 1615
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Reserve
; Line 1616
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ; std::vector<int,std::allocator<int> >::_Xlen
$LN1@Reserve:
; Line 1617
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ; std::vector<int,std::allocator<int> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reallocate
$LN4@Reserve:
; Line 1619
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -32						; size = 4
__Ptr$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Reallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1587
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 1588
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
; Line 1590
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 1591
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
	jmp	SHORT $LN5@Reallocate
__catch$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$0:
; Line 1593
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate
; Line 1594
	push	0
	push	0
	call	__CxxThrowException@8
; Line 1595
	mov	eax, $LN8@Reallocate
	ret	0
$LN5@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$1
$LN8@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$1:
; Line 1597
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	DWORD PTR __Size$[ebp], eax
; Line 1598
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Reallocate
; Line 1600
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
; Line 1602
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate
$LN1@Reallocate:
; Line 1605
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 1606
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 1607
	mov	ecx, DWORD PTR __Size$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1608
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN4@Reallocate:
; Line 1609
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Reallocate
; Function compile flags: /Odtp
;	COMDAT ?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z PROC ; std::vector<int,std::allocator<int> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1582
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1583
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]
; Line 1584
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ENDP ; std::vector<int,std::allocator<int> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z PROC ; std::vector<int,std::allocator<int> >::_Grow_to, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1571
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1572
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax
; Line 1575
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
; Line 1576
	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to
; Line 1577
	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to:
; Line 1578
	mov	eax, DWORD PTR __Capacity$[ebp]
; Line 1579
	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ENDP ; std::vector<int,std::allocator<int> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1565
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1566
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
; Line 1567
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
	add	esp, 12					; 0000000cH
; Line 1568
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1152
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1153
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<int> >::max_size
; Line 1154
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC	; std::vector<int,std::allocator<int> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1148
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
; Line 1149
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP	; std::vector<int,std::allocator<int> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::end, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1034
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1035
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1036
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@end
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
$LN4@end:
	ret	0
__ehhandler$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::end
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::begin, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1024
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1025
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1026
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@begin
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
$LN4@begin:
	ret	0
__ehhandler$?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::begin
; Function compile flags: /Odtp
;	COMDAT ?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::_Unused_capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1014
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1015
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+8]
	sar	eax, 2
; Line 1016
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1009
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1010
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
; Line 1011
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 944
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 945
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
; Line 946
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::~_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::~_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z
_TEXT	SEGMENT
__Idx$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 865
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 866
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@H@std@@YAPAHAAH@Z		; std::addressof<int>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ; std::vector<int,std::allocator<int> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@push_back
; Line 868
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$addressof@H@std@@YAPAHAAH@Z		; std::addressof<int>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
	mov	DWORD PTR __Idx$1[ebp], eax
; Line 869
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+12]
	jne	SHORT $LN3@push_back
; Line 870
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN3@push_back:
; Line 871
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
; Line 873
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Idx$1[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$forward@H@std@@YA$$QAHAAH@Z		; std::forward<int>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	mov	ecx, eax
	call	??$construct@HH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAH$$QAH@Z ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int>
; Line 874
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 876
	jmp	SHORT $LN5@push_back
$LN4@push_back:
; Line 878
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+12]
	jne	SHORT $LN1@push_back
; Line 879
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN1@push_back:
; Line 880
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
; Line 882
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$forward@H@std@@YA$$QAHAAH@Z		; std::forward<int>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	mov	ecx, eax
	call	??$construct@HH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAH$$QAH@Z ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int>
; Line 883
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN5@push_back:
; Line 885
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 680
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@H@std@@QAE@XZ		; std::allocator<int>::allocator<int>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 681
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::~_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; Function compile flags: /Odtp
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 641
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 642
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 643
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Free_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 630
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 632
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 633
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 634
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
; Line 635
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
; Line 636
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 637
	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Alloc_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 623
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 624
	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 625
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
; Line 626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 627
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::~_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 607
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 608
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Free_proxy
; Line 609
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::~_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 601
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 603
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Alloc_proxy
; Line 604
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<int> >::~_Vector_val<std::_Simple_types<int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<int> >::~_Vector_val<std::_Simple_types<int> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 480
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 482
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 483
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 484
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 485
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<int> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 883
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z ; std::allocator_traits<std::allocator<int> >::max_size
	add	esp, 4
; Line 885
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@H@std@@QAEXPAHI@Z ; std::allocator<int>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@H@std@@QAEPAHI@Z	; std::allocator<int>::allocate
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@H@std@@QAE@XZ		; std::allocator<int>::allocator<int>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z PROC ; std::allocator_traits<std::allocator<int> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 734
	push	ebp
	mov	ebp, esp
; Line 735
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@H@std@@QBEIXZ	; std::allocator<int>::max_size
; Line 736
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z ENDP ; std::allocator_traits<std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator@H@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@H@std@@QBEIXZ PROC		; std::allocator<int>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 611
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 612
	mov	eax, 1073741823				; 3fffffffH
; Line 613
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@H@std@@QBEIXZ ENDP		; std::allocator<int>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@H@std@@QAEPAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@H@std@@QAEPAHI@Z PROC		; std::allocator<int>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@H@std@@YAPAHIPAH@Z		; std::_Allocate<int>
	add	esp, 8
; Line 579
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@H@std@@QAEPAHI@Z ENDP		; std::allocator<int>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@H@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@H@std@@QAE@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@H@std@@QAE@XZ ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_commandSize$ = -224					; size = 4
tv84 = -220						; size = 4
tv145 = -216						; size = 4
$T2 = -212						; size = 4
_this$ = -208						; size = 4
_i$ = -204						; size = 4
$T3 = -200						; size = 28
_menuItem$ = -172					; size = 28
_cmdName$ = -144					; size = 128
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_skm$ = 8						; size = 324
_id$ = 332						; size = 4
?updateMenuItemByID@ScintillaAccelerator@@AAEXVScintillaKeyMap@@H@Z PROC ; ScintillaAccelerator::updateMenuItemByID
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 704
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?updateMenuItemByID@ScintillaAccelerator@@AAEXVScintillaKeyMap@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 212				; 000000d4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 705
	mov	DWORD PTR _commandSize$[ebp], 64	; 00000040H
; Line 707
	push	0
	push	64					; 00000040H
	lea	eax, DWORD PTR _cmdName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__GetMenuStringW@20
; Line 708
	mov	DWORD PTR _i$[ebp], 0
$LN4@updateMenu:
; Line 709
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, WORD PTR _cmdName$[ebp+ecx*2]
	test	edx, edx
	je	SHORT $LN3@updateMenu
; Line 711
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _cmdName$[ebp+eax*2]
	cmp	ecx, 9
	jne	SHORT $LN2@updateMenu
; Line 713
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 128			; 00000080H
	jae	SHORT $LN7@updateMenu
	jmp	SHORT $LN8@updateMenu
$LN7@updateMenu:
	call	___report_rangecheckfailure
$LN8@updateMenu:
	xor	eax, eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	WORD PTR _cmdName$[ebp+ecx], ax
; Line 714
	jmp	SHORT $LN3@updateMenu
$LN2@updateMenu:
; Line 716
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 717
	jmp	SHORT $LN4@updateMenu
$LN3@updateMenu:
; Line 718
	lea	eax, DWORD PTR _cmdName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _menuItem$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 719
	lea	ecx, DWORD PTR _skm$[ebp]
	call	?isEnabled@ScintillaKeyMap@@UBE_NXZ	; ScintillaKeyMap::isEnabled
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@updateMenu
; Line 721
	push	OFFSET $SG170805
	lea	ecx, DWORD PTR _menuItem$[ebp]
	call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
; Line 723
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	lea	ecx, DWORD PTR _skm$[ebp]
	call	?toString@ScintillaKeyMap@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; ScintillaKeyMap::toString
	mov	DWORD PTR tv84[ebp], eax
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR tv145[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv145[ebp]
	push	ecx
	lea	ecx, DWORD PTR _menuItem$[ebp]
	call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN1@updateMenu:
; Line 725
	lea	ecx, DWORD PTR _menuItem$[ebp]
	call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
	push	eax
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__ModifyMenuW@20
; Line 726
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__DrawMenuBar@4
; Line 727
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _menuItem$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _skm$[ebp]
	call	??1ScintillaKeyMap@@UAE@XZ
$LN6@updateMenu:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	328					; 00000148H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?updateMenuItemByID@ScintillaAccelerator@@AAEXVScintillaKeyMap@@H@Z$0:
	lea	ecx, DWORD PTR _skm$[ebp]
	jmp	??1ScintillaKeyMap@@UAE@XZ
__unwindfunclet$?updateMenuItemByID@ScintillaAccelerator@@AAEXVScintillaKeyMap@@H@Z$1:
	lea	ecx, DWORD PTR _menuItem$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?updateMenuItemByID@ScintillaAccelerator@@AAEXVScintillaKeyMap@@H@Z$2:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?updateMenuItemByID@ScintillaAccelerator@@AAEXVScintillaKeyMap@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-216]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?updateMenuItemByID@ScintillaAccelerator@@AAEXVScintillaKeyMap@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?updateMenuItemByID@ScintillaAccelerator@@AAEXVScintillaKeyMap@@H@Z ENDP ; ScintillaAccelerator::updateMenuItemByID
; Function compile flags: /Odtp
;	COMDAT ?_Orphan_range@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXPAPAUHWND__@@0@Z
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -20						; size = 4
__Pnext$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXPAPAUHWND__@@0@Z PROC ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Orphan_range, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1764
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXPAPAUHWND__@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1765
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1766
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
	mov	DWORD PTR __Pnext$[ebp], eax
; Line 1767
	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:
; Line 1768
	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_ran
; Line 1769
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN3@Orphan_ran
$LN2@Orphan_ran:
; Line 1770
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax
; Line 1771
	jmp	SHORT $LN1@Orphan_ran
$LN3@Orphan_ran:
; Line 1773
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont
; Line 1774
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN1@Orphan_ran:
; Line 1775
	jmp	SHORT $LN5@Orphan_ran
$LN6@Orphan_ran:
; Line 1776
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXPAPAUHWND__@@0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_range@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXPAPAUHWND__@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXPAPAUHWND__@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXPAPAUHWND__@@0@Z ENDP ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Orphan_range
; Function compile flags: /Odtp
;	COMDAT ?_Xran@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXXZ PROC ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Xran, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1758
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1759
	push	OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:
; Line 1760
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXXZ ENDP ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Xlen@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXXZ PROC ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1753
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1754
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:
; Line 1755
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXXZ ENDP ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Reserve@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z PROC ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Reserve, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1612
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
; Line 1613
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unused_capacity@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Unused_capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Reserve
; Line 1615
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ; std::vector<HWND__ *,std::allocator<HWND__ *> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ; std::vector<HWND__ *,std::allocator<HWND__ *> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Reserve
; Line 1616
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXXZ ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Xlen
$LN1@Reserve:
; Line 1617
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ; std::vector<HWND__ *,std::allocator<HWND__ *> >::size
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEII@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reallocate@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Reallocate
$LN4@Reserve:
; Line 1619
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z ENDP ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Reallocate@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -32						; size = 4
__Ptr$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z PROC ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Reallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1587
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 1588
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<HWND__ *,std::allocator<HWND__ *> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEPAPAUHWND__@@I@Z ; std::_Wrap_alloc<std::allocator<HWND__ *> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
; Line 1590
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 1591
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAUHWND__@@@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEPAPAUHWND__@@PAPAU2@00@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Umove<HWND__ * *>
	jmp	SHORT $LN5@Reallocate
__catch$?_Reallocate@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z$0:
; Line 1593
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<HWND__ *,std::allocator<HWND__ *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEXPAPAUHWND__@@I@Z ; std::_Wrap_alloc<std::allocator<HWND__ *> >::deallocate
; Line 1594
	push	0
	push	0
	call	__CxxThrowException@8
; Line 1595
	mov	eax, $LN8@Reallocate
	ret	0
$LN5@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Reallocate@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z$1
$LN8@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z$1:
; Line 1597
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ; std::vector<HWND__ *,std::allocator<HWND__ *> >::size
	mov	DWORD PTR __Size$[ebp], eax
; Line 1598
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Reallocate
; Line 1600
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXPAPAUHWND__@@0@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Destroy
; Line 1602
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<HWND__ *,std::allocator<HWND__ *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEXPAPAUHWND__@@I@Z ; std::_Wrap_alloc<std::allocator<HWND__ *> >::deallocate
$LN1@Reallocate:
; Line 1605
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 1606
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 1607
	mov	ecx, DWORD PTR __Size$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1608
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN4@Reallocate:
; Line 1609
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z ENDP ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Reallocate
; Function compile flags: /Odtp
;	COMDAT ?_Inside@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBE_NPBQAUHWND__@@@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBE_NPBQAUHWND__@@@Z PROC ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1582
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1583
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]
; Line 1584
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBE_NPBQAUHWND__@@@Z ENDP ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Grow_to@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEII@Z PROC ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Grow_to, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1571
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1572
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ; std::vector<HWND__ *,std::allocator<HWND__ *> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax
; Line 1575
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ; std::vector<HWND__ *,std::allocator<HWND__ *> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
; Line 1576
	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to
; Line 1577
	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to:
; Line 1578
	mov	eax, DWORD PTR __Capacity$[ebp]
; Line 1579
	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEII@Z ENDP ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXPAPAUHWND__@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXPAPAUHWND__@@0@Z PROC ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1565
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1566
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<HWND__ *,std::allocator<HWND__ *> > >::_Getal
; Line 1567
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@@std@@YAXPAPAUHWND__@@0AAU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<HWND__ *> > >
	add	esp, 12					; 0000000cH
; Line 1568
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXPAPAUHWND__@@0@Z ENDP ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QAEXABQAUHWND__@@@Z
_TEXT	SEGMENT
__Idx$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QAEXABQAUHWND__@@@Z PROC ; std::vector<HWND__ *,std::allocator<HWND__ *> >::push_back, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1243
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1244
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@QAUHWND__@@@std@@YAPBQAUHWND__@@ABQAU1@@Z ; std::addressof<HWND__ * const>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBE_NPBQAUHWND__@@@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@push_back
; Line 1246
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$addressof@QAUHWND__@@@std@@YAPBQAUHWND__@@ABQAU1@@Z ; std::addressof<HWND__ * const>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
	mov	DWORD PTR __Idx$1[ebp], eax
; Line 1247
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+12]
	jne	SHORT $LN3@push_back
; Line 1248
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Reserve
$LN3@push_back:
; Line 1249
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXPAPAUHWND__@@0@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Orphan_range
; Line 1251
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Idx$1[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<HWND__ *,std::allocator<HWND__ *> > >::_Getal
	mov	ecx, eax
	call	??$construct@PAUHWND__@@AAPAU1@@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEXPAPAUHWND__@@AAPAU2@@Z ; std::_Wrap_alloc<std::allocator<HWND__ *> >::construct<HWND__ *,HWND__ * &>
; Line 1252
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 1254
	jmp	SHORT $LN5@push_back
$LN4@push_back:
; Line 1256
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+12]
	jne	SHORT $LN1@push_back
; Line 1257
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IAEXI@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Reserve
$LN1@push_back:
; Line 1258
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXPAPAUHWND__@@0@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Orphan_range
; Line 1260
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<HWND__ *,std::allocator<HWND__ *> > >::_Getal
	mov	ecx, eax
	call	??$construct@PAUHWND__@@ABQAU1@@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEXPAPAUHWND__@@ABQAU2@@Z ; std::_Wrap_alloc<std::allocator<HWND__ *> >::construct<HWND__ *,HWND__ * const &>
; Line 1261
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN5@push_back:
; Line 1263
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QAEXABQAUHWND__@@@Z ENDP ; std::vector<HWND__ *,std::allocator<HWND__ *> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??A?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QAEAAPAUHWND__@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QAEAAPAUHWND__@@I@Z PROC ; std::vector<HWND__ *,std::allocator<HWND__ *> >::operator[], COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1197
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ; std::vector<HWND__ *,std::allocator<HWND__ *> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN1@operator
; Line 1201
	push	1201					; 000004b1H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
; Line 1202
	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN4@operator
	xor	ecx, ecx
	jne	SHORT $LN5@operator
$LN4@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	1202					; 000004b2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN5@operator
	int	3
$LN5@operator:
	push	0
	push	1202					; 000004b2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1KC@CCKJJADN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAH?$AAW?$AAN?$AAD?$AA_?$AA_?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN1@operator:
; Line 1209
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 1210
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QAEAAPAUHWND__@@I@Z ENDP ; std::vector<HWND__ *,std::allocator<HWND__ *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?at@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QAEAAPAUHWND__@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
?at@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QAEAAPAUHWND__@@I@Z PROC ; std::vector<HWND__ *,std::allocator<HWND__ *> >::at, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1174
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1175
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ; std::vector<HWND__ *,std::allocator<HWND__ *> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN1@at
; Line 1176
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@IBEXXZ ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Xran
$LN1@at:
; Line 1177
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
$LN3@at:
; Line 1178
	mov	esp, ebp
	pop	ebp
	ret	4
?at@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QAEAAPAUHWND__@@I@Z ENDP ; std::vector<HWND__ *,std::allocator<HWND__ *> >::at
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ PROC ; std::vector<HWND__ *,std::allocator<HWND__ *> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1152
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1153
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<HWND__ *,std::allocator<HWND__ *> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<HWND__ *> >::max_size
; Line 1154
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ENDP ; std::vector<HWND__ *,std::allocator<HWND__ *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ PROC ; std::vector<HWND__ *,std::allocator<HWND__ *> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1148
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
; Line 1149
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ENDP ; std::vector<HWND__ *,std::allocator<HWND__ *> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Unused_capacity@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unused_capacity@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ PROC ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Unused_capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1014
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1015
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+8]
	sar	eax, 2
; Line 1016
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unused_capacity@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ENDP ; std::vector<HWND__ *,std::allocator<HWND__ *> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?capacity@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ PROC ; std::vector<HWND__ *,std::allocator<HWND__ *> >::capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1009
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1010
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
; Line 1011
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ENDP ; std::vector<HWND__ *,std::allocator<HWND__ *> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<HWND__ *,std::allocator<HWND__ *> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 641
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 642
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<HWND__ *> >::_Wrap_alloc<std::allocator<HWND__ *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 643
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<HWND__ *,std::allocator<HWND__ *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<HWND__ *> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 883
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@PAUHWND__@@@std@@@std@@SAIABV?$allocator@PAUHWND__@@@2@@Z ; std::allocator_traits<std::allocator<HWND__ *> >::max_size
	add	esp, 4
; Line 885
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<HWND__ *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEXPAPAUHWND__@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEXPAPAUHWND__@@I@Z PROC ; std::_Wrap_alloc<std::allocator<HWND__ *> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@I@Z ; std::allocator<HWND__ *>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEXPAPAUHWND__@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<HWND__ *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEPAPAUHWND__@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEPAPAUHWND__@@I@Z PROC ; std::_Wrap_alloc<std::allocator<HWND__ *> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@PAUHWND__@@@std@@QAEPAPAUHWND__@@I@Z ; std::allocator<HWND__ *>::allocate
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAEPAPAUHWND__@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<HWND__ *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<HWND__ *> >::_Wrap_alloc<std::allocator<HWND__ *> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@PAUHWND__@@@std@@QAE@XZ	; std::allocator<HWND__ *>::allocator<HWND__ *>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@PAUHWND__@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<HWND__ *> >::_Wrap_alloc<std::allocator<HWND__ *> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@PAUHWND__@@@std@@@std@@SAIABV?$allocator@PAUHWND__@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@PAUHWND__@@@std@@@std@@SAIABV?$allocator@PAUHWND__@@@2@@Z PROC ; std::allocator_traits<std::allocator<HWND__ *> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 734
	push	ebp
	mov	ebp, esp
; Line 735
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@PAUHWND__@@@std@@QBEIXZ ; std::allocator<HWND__ *>::max_size
; Line 736
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@PAUHWND__@@@std@@@std@@SAIABV?$allocator@PAUHWND__@@@2@@Z ENDP ; std::allocator_traits<std::allocator<HWND__ *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator@PAUHWND__@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@PAUHWND__@@@std@@QBEIXZ PROC	; std::allocator<HWND__ *>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 611
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 612
	mov	eax, 1073741823				; 3fffffffH
; Line 613
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAUHWND__@@@std@@QBEIXZ ENDP	; std::allocator<HWND__ *>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@ABQAU3@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv68 = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@ABQAU3@@Z PROC ; std::allocator<HWND__ *>::construct, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 592
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 593
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN1@construct
$LN3@construct:
	mov	DWORD PTR tv68[ebp], 0
$LN1@construct:
; Line 594
	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@ABQAU3@@Z ENDP ; std::allocator<HWND__ *>::construct
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@PAUHWND__@@@std@@QAEPAPAUHWND__@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAUHWND__@@@std@@QAEPAPAUHWND__@@I@Z PROC ; std::allocator<HWND__ *>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAUHWND__@@@std@@YAPAPAUHWND__@@IPAPAU1@@Z ; std::_Allocate<HWND__ *>
	add	esp, 8
; Line 579
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAUHWND__@@@std@@QAEPAPAUHWND__@@I@Z ENDP ; std::allocator<HWND__ *>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@I@Z PROC ; std::allocator<HWND__ *>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAUHWND__@@@std@@QAEXPAPAUHWND__@@I@Z ENDP ; std::allocator<HWND__ *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@PAUHWND__@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAUHWND__@@@std@@QAE@XZ PROC		; std::allocator<HWND__ *>::allocator<HWND__ *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAUHWND__@@@std@@QAE@XZ ENDP		; std::allocator<HWND__ *>::allocator<HWND__ *>
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv168 = -384						; size = 4
$T2 = -380						; size = 4
_size$3 = -376						; size = 4
_mapSize$ = -372					; size = 4
tv84 = -368						; size = 4
_pNppParam$ = -364					; size = 4
_map$ = -360						; size = 4
_this$ = -356						; size = 4
_index$ = -352						; size = 4
_i$4 = -348						; size = 4
_j$5 = -344						; size = 4
_skm$6 = -340						; size = 324
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?updateKeys@ScintillaAccelerator@@QAEXXZ PROC		; ScintillaAccelerator::updateKeys
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 675
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?updateKeys@ScintillaAccelerator@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 372				; 00000174H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 676
	call	?getInstance@NppParameters@@SAPAV1@XZ	; NppParameters::getInstance
	mov	DWORD PTR _pNppParam$[ebp], eax
; Line 677
	mov	ecx, DWORD PTR _pNppParam$[ebp]
	call	?getScintillaKeyList@NppParameters@@QAEAAV?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@XZ ; NppParameters::getScintillaKeyList
	mov	DWORD PTR _map$[ebp], eax
; Line 678
	mov	ecx, DWORD PTR _map$[ebp]
	call	?size@?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@QBEIXZ ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap> >::size
	mov	DWORD PTR _mapSize$[ebp], eax
; Line 681
	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN12@updateKeys
$LN11@updateKeys:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN12@updateKeys:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$4[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	jge	$LN13@updateKeys
; Line 683
	push	0
	push	0
	push	2072					; 00000818H
	mov	eax, DWORD PTR _i$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QAEAAPAUHWND__@@I@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
; Line 684
	mov	edx, DWORD PTR _mapSize$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$5[ebp], edx
	jmp	SHORT $LN9@updateKeys
$LN8@updateKeys:
	mov	eax, DWORD PTR _j$5[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$5[ebp], eax
$LN9@updateKeys:
	cmp	DWORD PTR _j$5[ebp], 0
	jb	$LN7@updateKeys
; Line 686
	mov	ecx, DWORD PTR _j$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _map$[ebp]
	call	??A?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@QAEAAVScintillaKeyMap@@I@Z ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap> >::operator[]
	push	eax
	lea	ecx, DWORD PTR _skm$6[ebp]
	call	??0ScintillaKeyMap@@QAE@ABV0@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 687
	lea	ecx, DWORD PTR _skm$6[ebp]
	call	?isEnabled@ScintillaKeyMap@@UBE_NXZ	; ScintillaKeyMap::isEnabled
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN6@updateKeys
; Line 689
	lea	ecx, DWORD PTR _skm$6[ebp]
	call	?getSize@ScintillaKeyMap@@QBEIXZ	; ScintillaKeyMap::getSize
	mov	DWORD PTR _size$3[ebp], eax
; Line 690
	mov	DWORD PTR _index$[ebp], 0
	jmp	SHORT $LN5@updateKeys
$LN4@updateKeys:
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax
$LN5@updateKeys:
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR _size$3[ebp]
	jae	SHORT $LN6@updateKeys
; Line 691
	lea	ecx, DWORD PTR _skm$6[ebp]
	call	?getScintillaKeyID@ScintillaKeyMap@@QBEKXZ ; ScintillaKeyMap::getScintillaKeyID
	push	eax
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	lea	ecx, DWORD PTR _skm$6[ebp]
	call	?toKeyDef@ScintillaKeyMap@@QBEHH@Z	; ScintillaKeyMap::toKeyDef
	push	eax
	push	2070					; 00000816H
	mov	eax, DWORD PTR _i$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QAEAAPAUHWND__@@I@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
	jmp	SHORT $LN4@updateKeys
$LN6@updateKeys:
; Line 693
	lea	ecx, DWORD PTR _skm$6[ebp]
	call	?getMenuCmdID@ScintillaKeyMap@@QBEHXZ	; ScintillaKeyMap::getMenuCmdID
	test	eax, eax
	je	SHORT $LN2@updateKeys
; Line 695
	lea	ecx, DWORD PTR _skm$6[ebp]
	call	?getMenuCmdID@ScintillaKeyMap@@QBEHXZ	; ScintillaKeyMap::getMenuCmdID
	push	eax
	sub	esp, 324				; 00000144H
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR _skm$6[ebp]
	push	edx
	call	??0ScintillaKeyMap@@QAE@ABV0@@Z
	mov	DWORD PTR tv84[ebp], eax
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR tv168[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateMenuItemByID@ScintillaAccelerator@@AAEXVScintillaKeyMap@@H@Z ; ScintillaAccelerator::updateMenuItemByID
$LN2@updateKeys:
; Line 697
	cmp	DWORD PTR _j$5[ebp], 0
	jne	SHORT $LN1@updateKeys
; Line 698
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _skm$6[ebp]
	call	??1ScintillaKeyMap@@UAE@XZ
	jmp	SHORT $LN7@updateKeys
$LN1@updateKeys:
; Line 699
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _skm$6[ebp]
	call	??1ScintillaKeyMap@@UAE@XZ
	jmp	$LN8@updateKeys
$LN7@updateKeys:
; Line 700
	jmp	$LN11@updateKeys
$LN13@updateKeys:
; Line 701
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?updateKeys@ScintillaAccelerator@@QAEXXZ$0:
	lea	ecx, DWORD PTR _skm$6[ebp]
	jmp	??1ScintillaKeyMap@@UAE@XZ
__unwindfunclet$?updateKeys@ScintillaAccelerator@@QAEXXZ$1:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1ScintillaKeyMap@@UAE@XZ
__ehhandler$?updateKeys@ScintillaAccelerator@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-376]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?updateKeys@ScintillaAccelerator@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?updateKeys@ScintillaAccelerator@@QAEXXZ ENDP		; ScintillaAccelerator::updateKeys
; Function compile flags: /Odtp
_TEXT	SEGMENT
_nr$ = -12						; size = 4
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
_vScintillas$ = 8					; size = 4
_hMenu$ = 12						; size = 4
_menuParent$ = 16					; size = 4
?init@ScintillaAccelerator@@QAEXPAV?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@PAUHMENU__@@PAUHWND__@@@Z PROC ; ScintillaAccelerator::init
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 664
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 665
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _hMenu$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 666
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _menuParent$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 667
	mov	ecx, DWORD PTR _vScintillas$[ebp]
	call	?size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ; std::vector<HWND__ *,std::allocator<HWND__ *> >::size
	mov	DWORD PTR _nr$[ebp], eax
; Line 668
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@init
$LN2@init:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN3@init:
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR _nr$[ebp]
	jae	SHORT $LN1@init
; Line 669
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _vScintillas$[ebp]
	call	?at@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QAEAAPAUHWND__@@I@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::at
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?push_back@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QAEXABQAUHWND__@@@Z ; std::vector<HWND__ *,std::allocator<HWND__ *> >::push_back
; Line 670
	jmp	SHORT $LN2@init
$LN1@init:
; Line 671
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _nr$[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 672
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?init@ScintillaAccelerator@@QAEXPAV?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@PAUHMENU__@@PAUHWND__@@@Z ENDP ; ScintillaAccelerator::init
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv128 = -68						; size = 4
tv94 = -64						; size = 4
tv74 = -60						; size = 4
_this$ = -56						; size = 4
_cmdFlags$ = -52					; size = 4
_cmdID$ = -48						; size = 4
$T2 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_csc$ = 8						; size = 300
?updateMenuItemByCommand@Accelerator@@AAEXVCommandShortcut@@@Z PROC ; Accelerator::updateMenuItemByCommand
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 578
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?updateMenuItemByCommand@Accelerator@@AAEXVCommandShortcut@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 579
	lea	ecx, DWORD PTR _csc$[ebp]
	call	?getID@CommandShortcut@@QBEKXZ		; CommandShortcut::getID
	mov	DWORD PTR _cmdID$[ebp], eax
; Line 582
	push	0
	mov	eax, DWORD PTR _cmdID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__GetMenuState@12
	mov	DWORD PTR _cmdFlags$[ebp], eax
; Line 583
	mov	eax, DWORD PTR _cmdFlags$[ebp]
	and	eax, 8
	je	SHORT $LN3@updateMenu
	mov	DWORD PTR tv74[ebp], 8
	jmp	SHORT $LN4@updateMenu
$LN3@updateMenu:
	mov	DWORD PTR tv74[ebp], 0
$LN4@updateMenu:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR _cmdFlags$[ebp], ecx
; Line 584
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	lea	ecx, DWORD PTR _csc$[ebp]
	call	?toMenuItemString@Shortcut@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; Shortcut::toMenuItemString
	mov	DWORD PTR tv128[ebp], eax
	mov	eax, DWORD PTR tv128[ebp]
	mov	DWORD PTR tv94[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv94[ebp]
	call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
	push	eax
	mov	ecx, DWORD PTR _cmdID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cmdFlags$[ebp]
	push	edx
	mov	eax, DWORD PTR _cmdID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__ModifyMenuW@20
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Line 585
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _csc$[ebp]
	call	??1CommandShortcut@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	300					; 0000012cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?updateMenuItemByCommand@Accelerator@@AAEXVCommandShortcut@@@Z$0:
	lea	ecx, DWORD PTR _csc$[ebp]
	jmp	??1CommandShortcut@@UAE@XZ
__unwindfunclet$?updateMenuItemByCommand@Accelerator@@AAEXVCommandShortcut@@@Z$1:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?updateMenuItemByCommand@Accelerator@@AAEXVCommandShortcut@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?updateMenuItemByCommand@Accelerator@@AAEXVCommandShortcut@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?updateMenuItemByCommand@Accelerator@@AAEXVCommandShortcut@@@Z ENDP ; Accelerator::updateMenuItemByCommand
; Function compile flags: /Odtp
_TEXT	SEGMENT
_commands$ = -148					; size = 16
$T2 = -132						; size = 4
_mcommands$ = -128					; size = 16
$T3 = -112						; size = 4
_ucommands$ = -108					; size = 16
tv231 = -92						; size = 4
_pcommands$ = -88					; size = 16
tv228 = -72						; size = 4
tv234 = -68						; size = 4
tv225 = -64						; size = 4
$T4 = -60						; size = 4
$T5 = -56						; size = 4
tv190 = -52						; size = 4
tv94 = -48						; size = 4
tv158 = -44						; size = 4
tv66 = -40						; size = 4
_i$6 = -36						; size = 4
_i$7 = -32						; size = 4
_i$8 = -28						; size = 4
_i$9 = -24						; size = 4
_pNppParam$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?updateFullMenu@Accelerator@@QAEXXZ PROC		; Accelerator::updateFullMenu
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 553
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?updateFullMenu@Accelerator@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 136				; 00000088H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	call	?getInstance@NppParameters@@SAPAV1@XZ	; NppParameters::getInstance
	mov	DWORD PTR _pNppParam$[ebp], eax
; Line 555
	mov	ecx, DWORD PTR _pNppParam$[ebp]
	call	?getUserShortcuts@NppParameters@@QAEAAV?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@XZ ; NppParameters::getUserShortcuts
	push	eax
	lea	ecx, DWORD PTR _commands$[ebp]
	call	??0?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@ABV01@@Z ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::vector<CommandShortcut,std::allocator<CommandShortcut> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 556
	mov	DWORD PTR _i$8[ebp], 0
	jmp	SHORT $LN12@updateFull
$LN11@updateFull:
	mov	eax, DWORD PTR _i$8[ebp]
	add	eax, 1
	mov	DWORD PTR _i$8[ebp], eax
$LN12@updateFull:
	lea	ecx, DWORD PTR _commands$[ebp]
	call	?size@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::size
	cmp	DWORD PTR _i$8[ebp], eax
	jae	SHORT $LN10@updateFull
; Line 557
	mov	ecx, DWORD PTR _i$8[ebp]
	push	ecx
	lea	ecx, DWORD PTR _commands$[ebp]
	call	??A?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAEAAVCommandShortcut@@I@Z ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::operator[]
	sub	esp, 300				; 0000012cH
	mov	ecx, esp
	mov	DWORD PTR $T5[ebp], esp
	push	eax
	call	??0CommandShortcut@@QAE@ABV0@@Z
	mov	DWORD PTR tv66[ebp], eax
	mov	edx, DWORD PTR tv66[ebp]
	mov	DWORD PTR tv225[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateMenuItemByCommand@Accelerator@@AAEXVCommandShortcut@@@Z ; Accelerator::updateMenuItemByCommand
; Line 558
	jmp	SHORT $LN11@updateFull
$LN10@updateFull:
; Line 560
	mov	ecx, DWORD PTR _pNppParam$[ebp]
	call	?getMacroList@NppParameters@@QAEAAV?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@XZ ; NppParameters::getMacroList
	push	eax
	lea	ecx, DWORD PTR _mcommands$[ebp]
	call	??0?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@ABV01@@Z ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::vector<MacroShortcut,std::allocator<MacroShortcut> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 561
	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN9@updateFull
$LN8@updateFull:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN9@updateFull:
	lea	ecx, DWORD PTR _mcommands$[ebp]
	call	?size@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBEIXZ ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::size
	cmp	DWORD PTR _i$6[ebp], eax
	jae	SHORT $LN7@updateFull
; Line 562
	mov	ecx, DWORD PTR _i$6[ebp]
	push	ecx
	lea	ecx, DWORD PTR _mcommands$[ebp]
	call	??A?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAEAAVMacroShortcut@@I@Z ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::operator[]
	sub	esp, 300				; 0000012cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	push	eax
	call	??0CommandShortcut@@QAE@ABV0@@Z
	mov	DWORD PTR tv94[ebp], eax
	mov	edx, DWORD PTR tv94[ebp]
	mov	DWORD PTR tv228[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateMenuItemByCommand@Accelerator@@AAEXVCommandShortcut@@@Z ; Accelerator::updateMenuItemByCommand
; Line 563
	jmp	SHORT $LN8@updateFull
$LN7@updateFull:
; Line 565
	mov	ecx, DWORD PTR _pNppParam$[ebp]
	call	?getUserCommandList@NppParameters@@QAEAAV?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@XZ ; NppParameters::getUserCommandList
	push	eax
	lea	ecx, DWORD PTR _ucommands$[ebp]
	call	??0?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@ABV01@@Z ; std::vector<UserCommand,std::allocator<UserCommand> >::vector<UserCommand,std::allocator<UserCommand> >
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 566
	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN6@updateFull
$LN5@updateFull:
	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7[ebp], eax
$LN6@updateFull:
	lea	ecx, DWORD PTR _ucommands$[ebp]
	call	?size@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBEIXZ ; std::vector<UserCommand,std::allocator<UserCommand> >::size
	cmp	DWORD PTR _i$7[ebp], eax
	jae	SHORT $LN4@updateFull
; Line 567
	mov	ecx, DWORD PTR _i$7[ebp]
	push	ecx
	lea	ecx, DWORD PTR _ucommands$[ebp]
	call	??A?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAEAAVUserCommand@@I@Z ; std::vector<UserCommand,std::allocator<UserCommand> >::operator[]
	sub	esp, 300				; 0000012cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	push	eax
	call	??0CommandShortcut@@QAE@ABV0@@Z
	mov	DWORD PTR tv158[ebp], eax
	mov	edx, DWORD PTR tv158[ebp]
	mov	DWORD PTR tv231[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateMenuItemByCommand@Accelerator@@AAEXVCommandShortcut@@@Z ; Accelerator::updateMenuItemByCommand
; Line 568
	jmp	SHORT $LN5@updateFull
$LN4@updateFull:
; Line 570
	mov	ecx, DWORD PTR _pNppParam$[ebp]
	call	?getPluginCommandList@NppParameters@@QAEAAV?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@XZ ; NppParameters::getPluginCommandList
	push	eax
	lea	ecx, DWORD PTR _pcommands$[ebp]
	call	??0?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@ABV01@@Z ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 571
	mov	DWORD PTR _i$9[ebp], 0
	jmp	SHORT $LN3@updateFull
$LN2@updateFull:
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax
$LN3@updateFull:
	lea	ecx, DWORD PTR _pcommands$[ebp]
	call	?size@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBEIXZ ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::size
	cmp	DWORD PTR _i$9[ebp], eax
	jae	SHORT $LN1@updateFull
; Line 572
	mov	ecx, DWORD PTR _i$9[ebp]
	push	ecx
	lea	ecx, DWORD PTR _pcommands$[ebp]
	call	??A?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEAAVPluginCmdShortcut@@I@Z ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::operator[]
	sub	esp, 300				; 0000012cH
	mov	ecx, esp
	mov	DWORD PTR $T4[ebp], esp
	push	eax
	call	??0CommandShortcut@@QAE@ABV0@@Z
	mov	DWORD PTR tv190[ebp], eax
	mov	edx, DWORD PTR tv190[ebp]
	mov	DWORD PTR tv234[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateMenuItemByCommand@Accelerator@@AAEXVCommandShortcut@@@Z ; Accelerator::updateMenuItemByCommand
; Line 573
	jmp	SHORT $LN2@updateFull
$LN1@updateFull:
; Line 575
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__DrawMenuBar@4
; Line 576
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _pcommands$[ebp]
	call	??1?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@XZ ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::~vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _ucommands$[ebp]
	call	??1?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@XZ ; std::vector<UserCommand,std::allocator<UserCommand> >::~vector<UserCommand,std::allocator<UserCommand> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _mcommands$[ebp]
	call	??1?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@XZ ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::~vector<MacroShortcut,std::allocator<MacroShortcut> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _commands$[ebp]
	call	??1?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@XZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::~vector<CommandShortcut,std::allocator<CommandShortcut> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?updateFullMenu@Accelerator@@QAEXXZ$0:
	lea	ecx, DWORD PTR _commands$[ebp]
	jmp	??1?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAE@XZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::~vector<CommandShortcut,std::allocator<CommandShortcut> >
__unwindfunclet$?updateFullMenu@Accelerator@@QAEXXZ$1:
	mov	ecx, DWORD PTR $T5[ebp]
	jmp	??1CommandShortcut@@UAE@XZ
__unwindfunclet$?updateFullMenu@Accelerator@@QAEXXZ$2:
	lea	ecx, DWORD PTR _mcommands$[ebp]
	jmp	??1?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAE@XZ ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::~vector<MacroShortcut,std::allocator<MacroShortcut> >
__unwindfunclet$?updateFullMenu@Accelerator@@QAEXXZ$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1CommandShortcut@@UAE@XZ
__unwindfunclet$?updateFullMenu@Accelerator@@QAEXXZ$4:
	lea	ecx, DWORD PTR _ucommands$[ebp]
	jmp	??1?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAE@XZ ; std::vector<UserCommand,std::allocator<UserCommand> >::~vector<UserCommand,std::allocator<UserCommand> >
__unwindfunclet$?updateFullMenu@Accelerator@@QAEXXZ$5:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1CommandShortcut@@UAE@XZ
__unwindfunclet$?updateFullMenu@Accelerator@@QAEXXZ$6:
	lea	ecx, DWORD PTR _pcommands$[ebp]
	jmp	??1?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAE@XZ ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::~vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >
__unwindfunclet$?updateFullMenu@Accelerator@@QAEXXZ$7:
	mov	ecx, DWORD PTR $T4[ebp]
	jmp	??1CommandShortcut@@UAE@XZ
__ehhandler$?updateFullMenu@Accelerator@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-140]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?updateFullMenu@Accelerator@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?updateFullMenu@Accelerator@@QAEXXZ ENDP		; Accelerator::updateFullMenu
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T2 = -216						; size = 12
$T3 = -204						; size = 12
tv473 = -192						; size = 4
$T4 = -188						; size = 4
tv476 = -184						; size = 4
$T5 = -180						; size = 4
_IFAcc$ = -176						; size = 16
$T6 = -160						; size = 4
tv481 = -156						; size = 4
tv469 = -152						; size = 4
tv197 = -148						; size = 4
$T7 = -144						; size = 4
_IFAccIds$ = -140					; size = 16
tv65 = -124						; size = 4
$T8 = -120						; size = 4
tv138 = -116						; size = 4
$T9 = -112						; size = 4
$T10 = -108						; size = 4
$T11 = -104						; size = 4
$T12 = -100						; size = 4
tv478 = -96						; size = 4
$T13 = -92						; size = 4
tv383 = -88						; size = 4
_nbMenu$ = -84						; size = 4
_nbPluginCmd$ = -80					; size = 4
tv265 = -76						; size = 4
tv324 = -72						; size = 4
tv150 = -68						; size = 4
_nbUserCmd$ = -64					; size = 4
_nbMacro$ = -60						; size = 4
_tmpAccelArray$ = -56					; size = 4
_nb$ = -52						; size = 4
_pNppParam$ = -48					; size = 4
_pluginCommands$ = -44					; size = 4
_macros$ = -40						; size = 4
_userCommands$ = -36					; size = 4
_shortcuts$ = -32					; size = 4
tv236 = -26						; size = 1
$T14 = -25						; size = 1
_offset$ = -24						; size = 4
_this$ = -20						; size = 4
_i$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?updateShortcuts@Accelerator@@QAEXXZ PROC		; Accelerator::updateShortcuts
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 454
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?updateShortcuts@Accelerator@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 455
	lea	ecx, DWORD PTR _IFAccIds$[ebp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 456
	mov	DWORD PTR $T13[ebp], 43002		; 0000a7faH
	lea	eax, DWORD PTR $T13[ebp]
	push	eax
	lea	ecx, DWORD PTR _IFAccIds$[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
; Line 457
	mov	DWORD PTR $T12[ebp], 43010		; 0000a802H
	lea	ecx, DWORD PTR $T12[ebp]
	push	ecx
	lea	ecx, DWORD PTR _IFAccIds$[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
; Line 458
	mov	DWORD PTR $T8[ebp], 43011		; 0000a803H
	lea	edx, DWORD PTR $T8[ebp]
	push	edx
	lea	ecx, DWORD PTR _IFAccIds$[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
; Line 460
	call	?getInstance@NppParameters@@SAPAV1@XZ	; NppParameters::getInstance
	mov	DWORD PTR _pNppParam$[ebp], eax
; Line 462
	mov	ecx, DWORD PTR _pNppParam$[ebp]
	call	?getUserShortcuts@NppParameters@@QAEAAV?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@XZ ; NppParameters::getUserShortcuts
	mov	DWORD PTR _shortcuts$[ebp], eax
; Line 463
	mov	ecx, DWORD PTR _pNppParam$[ebp]
	call	?getMacroList@NppParameters@@QAEAAV?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@XZ ; NppParameters::getMacroList
	mov	DWORD PTR _macros$[ebp], eax
; Line 464
	mov	ecx, DWORD PTR _pNppParam$[ebp]
	call	?getUserCommandList@NppParameters@@QAEAAV?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@XZ ; NppParameters::getUserCommandList
	mov	DWORD PTR _userCommands$[ebp], eax
; Line 465
	mov	ecx, DWORD PTR _pNppParam$[ebp]
	call	?getPluginCommandList@NppParameters@@QAEAAV?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@XZ ; NppParameters::getPluginCommandList
	mov	DWORD PTR _pluginCommands$[ebp], eax
; Line 467
	mov	ecx, DWORD PTR _shortcuts$[ebp]
	call	?size@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::size
	mov	DWORD PTR _nbMenu$[ebp], eax
; Line 468
	mov	ecx, DWORD PTR _macros$[ebp]
	call	?size@?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QBEIXZ ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::size
	mov	DWORD PTR _nbMacro$[ebp], eax
; Line 469
	mov	ecx, DWORD PTR _userCommands$[ebp]
	call	?size@?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QBEIXZ ; std::vector<UserCommand,std::allocator<UserCommand> >::size
	mov	DWORD PTR _nbUserCmd$[ebp], eax
; Line 470
	mov	ecx, DWORD PTR _pluginCommands$[ebp]
	call	?size@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBEIXZ ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::size
	mov	DWORD PTR _nbPluginCmd$[ebp], eax
; Line 472
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN23@updateShor
; Line 473
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR $T10[ebp], edx
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN23@updateShor:
; Line 474
	mov	eax, DWORD PTR _nbMenu$[ebp]
	add	eax, DWORD PTR _nbMacro$[ebp]
	add	eax, DWORD PTR _nbUserCmd$[ebp]
	add	eax, DWORD PTR _nbPluginCmd$[ebp]
	xor	ecx, ecx
	mov	edx, 6
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 475
	lea	ecx, DWORD PTR _IFAcc$[ebp]
	call	??0?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::vector<tagACCEL,std::allocator<tagACCEL> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 477
	mov	DWORD PTR _offset$[ebp], 0
; Line 478
	mov	DWORD PTR _i$[ebp], 0
; Line 480
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN22@updateShor
$LN21@updateShor:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN22@updateShor:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nbMenu$[ebp]
	jae	$LN20@updateShor
; Line 482
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _shortcuts$[ebp]
	call	??A?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAEAAVCommandShortcut@@I@Z ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::operator[]
	mov	DWORD PTR tv150[ebp], eax
	mov	edx, DWORD PTR tv150[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv150[ebp]
	mov	edx, DWORD PTR [eax+68]
	call	edx
	movzx	eax, al
	test	eax, eax
	je	$LN19@updateShor
; Line 484
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _shortcuts$[ebp]
	call	??A?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAEAAVCommandShortcut@@I@Z ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::operator[]
	mov	ecx, eax
	call	?getID@CommandShortcut@@QBEKXZ		; CommandShortcut::getID
	imul	edx, DWORD PTR _offset$[ebp], 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	mov	WORD PTR [ecx+edx+4], ax
; Line 485
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _shortcuts$[ebp]
	call	??A?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAEAAVCommandShortcut@@I@Z ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::operator[]
	mov	ecx, eax
	call	?getAcceleratorModifiers@Shortcut@@QAEEXZ ; Shortcut::getAcceleratorModifiers
	imul	ecx, DWORD PTR _offset$[ebp], 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+16]
	mov	BYTE PTR [edx+ecx], al
; Line 486
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _shortcuts$[ebp]
	call	??A?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAEAAVCommandShortcut@@I@Z ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::operator[]
	mov	ecx, eax
	call	?getKeyCombo@Shortcut@@QBEABUKeyCombo@@XZ ; Shortcut::getKeyCombo
	movzx	cx, BYTE PTR [eax+3]
	imul	edx, DWORD PTR _offset$[ebp], 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	WORD PTR [eax+edx+2], cx
; Line 489
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _shortcuts$[ebp]
	call	??A?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAEAAVCommandShortcut@@I@Z ; std::vector<CommandShortcut,std::allocator<CommandShortcut> >::operator[]
	mov	ecx, eax
	call	?getID@CommandShortcut@@QBEKXZ		; CommandShortcut::getID
	mov	DWORD PTR $T6[ebp], eax
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	lea	ecx, DWORD PTR _IFAccIds$[ebp]
	call	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
	mov	DWORD PTR tv138[ebp], eax
	mov	eax, DWORD PTR tv138[ebp]
	mov	DWORD PTR tv469[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv469[ebp]
	push	ecx
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T5[ebp], esp
	push	eax
	lea	ecx, DWORD PTR _IFAccIds$[ebp]
	call	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv473[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T4[ebp], esp
	push	edx
	lea	ecx, DWORD PTR _IFAccIds$[ebp]
	call	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
	mov	DWORD PTR tv481[ebp], eax
	mov	eax, DWORD PTR tv481[ebp]
	mov	DWORD PTR tv476[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	call	??$find@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@K@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0ABK@Z ; std::find<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,unsigned long>
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv197[ebp], eax
	mov	edx, DWORD PTR tv197[ebp]
	mov	DWORD PTR tv478[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR tv478[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator!=
	mov	BYTE PTR tv236[ebp], al
	mov	al, BYTE PTR tv236[ebp]
	mov	BYTE PTR $T14[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	movzx	ecx, BYTE PTR $T14[ebp]
	test	ecx, ecx
	je	SHORT $LN18@updateShor
; Line 490
	imul	edx, DWORD PTR _offset$[ebp], 6
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+16]
	push	edx
	lea	ecx, DWORD PTR _IFAcc$[ebp]
	call	?push_back@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAEXABUtagACCEL@@@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::push_back
$LN18@updateShor:
; Line 492
	mov	ecx, DWORD PTR _offset$[ebp]
	add	ecx, 1
	mov	DWORD PTR _offset$[ebp], ecx
$LN19@updateShor:
; Line 494
	jmp	$LN21@updateShor
$LN20@updateShor:
; Line 496
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN17@updateShor
$LN16@updateShor:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN17@updateShor:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nbMacro$[ebp]
	jae	$LN15@updateShor
; Line 498
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _macros$[ebp]
	call	??A?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAEAAVMacroShortcut@@I@Z ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::operator[]
	mov	DWORD PTR tv265[ebp], eax
	mov	edx, DWORD PTR tv265[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv265[ebp]
	mov	edx, DWORD PTR [eax+68]
	call	edx
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN14@updateShor
; Line 500
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _macros$[ebp]
	call	??A?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAEAAVMacroShortcut@@I@Z ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::operator[]
	mov	ecx, eax
	call	?getID@CommandShortcut@@QBEKXZ		; CommandShortcut::getID
	imul	edx, DWORD PTR _offset$[ebp], 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	mov	WORD PTR [ecx+edx+4], ax
; Line 501
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _macros$[ebp]
	call	??A?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAEAAVMacroShortcut@@I@Z ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::operator[]
	mov	ecx, eax
	call	?getAcceleratorModifiers@Shortcut@@QAEEXZ ; Shortcut::getAcceleratorModifiers
	imul	ecx, DWORD PTR _offset$[ebp], 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+16]
	mov	BYTE PTR [edx+ecx], al
; Line 502
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _macros$[ebp]
	call	??A?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAEAAVMacroShortcut@@I@Z ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::operator[]
	mov	ecx, eax
	call	?getKeyCombo@Shortcut@@QBEABUKeyCombo@@XZ ; Shortcut::getKeyCombo
	movzx	cx, BYTE PTR [eax+3]
	imul	edx, DWORD PTR _offset$[ebp], 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	WORD PTR [eax+edx+2], cx
; Line 503
	mov	ecx, DWORD PTR _offset$[ebp]
	add	ecx, 1
	mov	DWORD PTR _offset$[ebp], ecx
$LN14@updateShor:
; Line 505
	jmp	$LN16@updateShor
$LN15@updateShor:
; Line 507
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@updateShor
$LN12@updateShor:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN13@updateShor:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nbUserCmd$[ebp]
	jae	$LN11@updateShor
; Line 509
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _userCommands$[ebp]
	call	??A?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAEAAVUserCommand@@I@Z ; std::vector<UserCommand,std::allocator<UserCommand> >::operator[]
	mov	DWORD PTR tv324[ebp], eax
	mov	edx, DWORD PTR tv324[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv324[ebp]
	mov	edx, DWORD PTR [eax+68]
	call	edx
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@updateShor
; Line 511
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _userCommands$[ebp]
	call	??A?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAEAAVUserCommand@@I@Z ; std::vector<UserCommand,std::allocator<UserCommand> >::operator[]
	mov	ecx, eax
	call	?getID@CommandShortcut@@QBEKXZ		; CommandShortcut::getID
	imul	edx, DWORD PTR _offset$[ebp], 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	mov	WORD PTR [ecx+edx+4], ax
; Line 512
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _userCommands$[ebp]
	call	??A?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAEAAVUserCommand@@I@Z ; std::vector<UserCommand,std::allocator<UserCommand> >::operator[]
	mov	ecx, eax
	call	?getAcceleratorModifiers@Shortcut@@QAEEXZ ; Shortcut::getAcceleratorModifiers
	imul	ecx, DWORD PTR _offset$[ebp], 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+16]
	mov	BYTE PTR [edx+ecx], al
; Line 513
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _userCommands$[ebp]
	call	??A?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAEAAVUserCommand@@I@Z ; std::vector<UserCommand,std::allocator<UserCommand> >::operator[]
	mov	ecx, eax
	call	?getKeyCombo@Shortcut@@QBEABUKeyCombo@@XZ ; Shortcut::getKeyCombo
	movzx	cx, BYTE PTR [eax+3]
	imul	edx, DWORD PTR _offset$[ebp], 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	WORD PTR [eax+edx+2], cx
; Line 514
	mov	ecx, DWORD PTR _offset$[ebp]
	add	ecx, 1
	mov	DWORD PTR _offset$[ebp], ecx
$LN10@updateShor:
; Line 516
	jmp	$LN12@updateShor
$LN11@updateShor:
; Line 518
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@updateShor
$LN8@updateShor:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN9@updateShor:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nbPluginCmd$[ebp]
	jae	$LN7@updateShor
; Line 520
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pluginCommands$[ebp]
	call	??A?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEAAVPluginCmdShortcut@@I@Z ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::operator[]
	mov	DWORD PTR tv383[ebp], eax
	mov	edx, DWORD PTR tv383[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv383[ebp]
	mov	edx, DWORD PTR [eax+68]
	call	edx
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@updateShor
; Line 522
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pluginCommands$[ebp]
	call	??A?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEAAVPluginCmdShortcut@@I@Z ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::operator[]
	mov	ecx, eax
	call	?getID@PluginCmdShortcut@@QBEKXZ	; PluginCmdShortcut::getID
	imul	edx, DWORD PTR _offset$[ebp], 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	mov	WORD PTR [ecx+edx+4], ax
; Line 523
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pluginCommands$[ebp]
	call	??A?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEAAVPluginCmdShortcut@@I@Z ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::operator[]
	mov	ecx, eax
	call	?getAcceleratorModifiers@Shortcut@@QAEEXZ ; Shortcut::getAcceleratorModifiers
	imul	ecx, DWORD PTR _offset$[ebp], 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+16]
	mov	BYTE PTR [edx+ecx], al
; Line 524
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pluginCommands$[ebp]
	call	??A?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEAAVPluginCmdShortcut@@I@Z ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::operator[]
	mov	ecx, eax
	call	?getKeyCombo@Shortcut@@QBEABUKeyCombo@@XZ ; Shortcut::getKeyCombo
	movzx	cx, BYTE PTR [eax+3]
	imul	edx, DWORD PTR _offset$[ebp], 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	WORD PTR [eax+edx+2], cx
; Line 525
	mov	ecx, DWORD PTR _offset$[ebp]
	add	ecx, 1
	mov	DWORD PTR _offset$[ebp], ecx
$LN6@updateShor:
; Line 527
	jmp	$LN8@updateShor
$LN7@updateShor:
; Line 529
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 531
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateFullMenu@Accelerator@@QAEXXZ	; Accelerator::updateFullMenu
; Line 534
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN5@updateShor
; Line 535
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR __imp__DestroyAcceleratorTable@4
$LN5@updateShor:
; Line 536
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	DWORD PTR __imp__CreateAcceleratorTableW@8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 538
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN4@updateShor
; Line 539
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__DestroyAcceleratorTable@4
$LN4@updateShor:
; Line 541
	lea	ecx, DWORD PTR _IFAcc$[ebp]
	call	?size@?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QBEIXZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::size
	mov	DWORD PTR _nb$[ebp], eax
; Line 542
	xor	ecx, ecx
	mov	eax, DWORD PTR _nb$[ebp]
	mov	edx, 6
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T11[ebp], eax
	mov	eax, DWORD PTR $T11[ebp]
	mov	DWORD PTR _tmpAccelArray$[ebp], eax
; Line 543
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@updateShor
$LN2@updateShor:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@updateShor:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _nb$[ebp]
	jae	SHORT $LN1@updateShor
; Line 545
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _IFAcc$[ebp]
	call	??A?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAEAAUtagACCEL@@I@Z ; std::vector<tagACCEL,std::allocator<tagACCEL> >::operator[]
	imul	ecx, DWORD PTR _i$[ebp], 6
	add	ecx, DWORD PTR _tmpAccelArray$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
; Line 546
	jmp	SHORT $LN2@updateShor
$LN1@updateShor:
; Line 547
	mov	ecx, DWORD PTR _nb$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tmpAccelArray$[ebp]
	push	edx
	call	DWORD PTR __imp__CreateAcceleratorTableW@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 548
	mov	edx, DWORD PTR _tmpAccelArray$[ebp]
	mov	DWORD PTR $T9[ebp], edx
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
; Line 550
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _IFAcc$[ebp]
	call	??1?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::~vector<tagACCEL,std::allocator<tagACCEL> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _IFAccIds$[ebp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
; Line 551
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?updateShortcuts@Accelerator@@QAEXXZ$0:
	lea	ecx, DWORD PTR _IFAccIds$[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$?updateShortcuts@Accelerator@@QAEXXZ$1:
	lea	ecx, DWORD PTR _IFAcc$[ebp]
	jmp	??1?$vector@UtagACCEL@@V?$allocator@UtagACCEL@@@std@@@std@@QAE@XZ ; std::vector<tagACCEL,std::allocator<tagACCEL> >::~vector<tagACCEL,std::allocator<tagACCEL> >
__unwindfunclet$?updateShortcuts@Accelerator@@QAEXXZ$2:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?updateShortcuts@Accelerator@@QAEXXZ$3:
	mov	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?updateShortcuts@Accelerator@@QAEXXZ$4:
	mov	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?updateShortcuts@Accelerator@@QAEXXZ$5:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$?updateShortcuts@Accelerator@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?updateShortcuts@Accelerator@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?updateShortcuts@Accelerator@@QAEXXZ ENDP		; Accelerator::updateShortcuts
; Function compile flags: /Odtp
;	COMDAT ??_GPluginCmdShortcut@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GPluginCmdShortcut@@UAEPAXI@Z PROC			; PluginCmdShortcut::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PluginCmdShortcut@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPluginCmdShortcut@@UAEPAXI@Z ENDP			; PluginCmdShortcut::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0PluginCmdShortcut@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0PluginCmdShortcut@@QAE@ABV0@@Z PROC			; PluginCmdShortcut::PluginCmdShortcut, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0PluginCmdShortcut@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CommandShortcut@@QAE@ABV0@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7PluginCmdShortcut@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	mov	DWORD PTR [edx+300], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 304				; 00000130H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+332]
	mov	DWORD PTR [eax+332], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0PluginCmdShortcut@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CommandShortcut@@UAE@XZ
__unwindfunclet$??0PluginCmdShortcut@@QAE@ABV0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??0PluginCmdShortcut@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0PluginCmdShortcut@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0PluginCmdShortcut@@QAE@ABV0@@Z ENDP			; PluginCmdShortcut::PluginCmdShortcut
; Function compile flags: /Odtp
;	COMDAT ??1PluginCmdShortcut@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1PluginCmdShortcut@@UAE@XZ PROC			; PluginCmdShortcut::~PluginCmdShortcut, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1PluginCmdShortcut@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CommandShortcut@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1PluginCmdShortcut@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CommandShortcut@@UAE@XZ
__unwindfunclet$??1PluginCmdShortcut@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??1PluginCmdShortcut@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1PluginCmdShortcut@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1PluginCmdShortcut@@UAE@XZ ENDP			; PluginCmdShortcut::~PluginCmdShortcut
; Function compile flags: /Odtp
;	COMDAT ?getID@PluginCmdShortcut@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getID@PluginCmdShortcut@@QBEKXZ PROC			; PluginCmdShortcut::getID, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.h
; Line 335
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+300]
	mov	esp, ebp
	pop	ebp
	ret	0
?getID@PluginCmdShortcut@@QBEKXZ ENDP			; PluginCmdShortcut::getID
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?isValid@PluginCmdShortcut@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isValid@PluginCmdShortcut@@UBE_NXZ PROC		; PluginCmdShortcut::isValid, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.h
; Line 326
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 327
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isValid@Shortcut@@UBE_NXZ		; Shortcut::isValid
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@isValid
; Line 328
	xor	al, al
	jmp	SHORT $LN4@isValid
$LN3@isValid:
; Line 329
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator[]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@isValid
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+332], -1
	jne	SHORT $LN2@isValid
$LN1@isValid:
; Line 330
	xor	al, al
	jmp	SHORT $LN4@isValid
$LN2@isValid:
; Line 331
	mov	al, 1
$LN4@isValid:
; Line 332
	mov	esp, ebp
	pop	ebp
	ret	0
?isValid@PluginCmdShortcut@@UBE_NXZ ENDP		; PluginCmdShortcut::isValid
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GUserCommand@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GUserCommand@@UAEPAXI@Z PROC				; UserCommand::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UserCommand@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUserCommand@@UAEPAXI@Z ENDP				; UserCommand::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0UserCommand@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0UserCommand@@QAE@ABV0@@Z PROC			; UserCommand::UserCommand, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0UserCommand@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CommandShortcut@@QAE@ABV0@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7UserCommand@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 300				; 0000012cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 300				; 0000012cH
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0UserCommand@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CommandShortcut@@UAE@XZ
__unwindfunclet$??0UserCommand@@QAE@ABV0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 300				; 0000012cH
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??0UserCommand@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0UserCommand@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0UserCommand@@QAE@ABV0@@Z ENDP			; UserCommand::UserCommand
; Function compile flags: /Odtp
;	COMDAT ??1UserCommand@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1UserCommand@@UAE@XZ PROC				; UserCommand::~UserCommand, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1UserCommand@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 300				; 0000012cH
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CommandShortcut@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1UserCommand@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CommandShortcut@@UAE@XZ
__unwindfunclet$??1UserCommand@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 300				; 0000012cH
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??1UserCommand@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1UserCommand@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1UserCommand@@UAE@XZ ENDP				; UserCommand::~UserCommand
; Function compile flags: /Odtp
;	COMDAT ??_GMacroShortcut@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMacroShortcut@@UAEPAXI@Z PROC			; MacroShortcut::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MacroShortcut@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMacroShortcut@@UAEPAXI@Z ENDP			; MacroShortcut::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0MacroShortcut@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0MacroShortcut@@QAE@ABV0@@Z PROC			; MacroShortcut::MacroShortcut, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MacroShortcut@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CommandShortcut@@QAE@ABV0@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7MacroShortcut@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 300				; 0000012cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 300				; 0000012cH
	call	??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::vector<recordedMacroStep,std::allocator<recordedMacroStep> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MacroShortcut@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CommandShortcut@@UAE@XZ
__unwindfunclet$??0MacroShortcut@@QAE@ABV0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 300				; 0000012cH
	jmp	??1?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@XZ ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::~vector<recordedMacroStep,std::allocator<recordedMacroStep> >
__ehhandler$??0MacroShortcut@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0MacroShortcut@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MacroShortcut@@QAE@ABV0@@Z ENDP			; MacroShortcut::MacroShortcut
; Function compile flags: /Odtp
;	COMDAT ??1MacroShortcut@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1MacroShortcut@@UAE@XZ PROC				; MacroShortcut::~MacroShortcut, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1MacroShortcut@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 300				; 0000012cH
	call	??1?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@XZ ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::~vector<recordedMacroStep,std::allocator<recordedMacroStep> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CommandShortcut@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1MacroShortcut@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CommandShortcut@@UAE@XZ
__unwindfunclet$??1MacroShortcut@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 300				; 0000012cH
	jmp	??1?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@XZ ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::~vector<recordedMacroStep,std::allocator<recordedMacroStep> >
__ehhandler$??1MacroShortcut@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1MacroShortcut@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1MacroShortcut@@UAE@XZ ENDP				; MacroShortcut::~MacroShortcut
; Function compile flags: /Odtp
;	COMDAT ?_Xlen@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IBEXXZ PROC ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1753
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1754
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:
; Line 1755
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IBEXXZ ENDP ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEXXZ PROC ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1622
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1623
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Tidy
; Line 1625
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 1626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEXPAUrecordedMacroStep@@0@Z ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Destroy
; Line 1628
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEXPAUrecordedMacroStep@@I@Z ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::deallocate
; Line 1629
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 1630
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 1631
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN2@Tidy:
; Line 1633
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEXXZ ENDP ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEXPAUrecordedMacroStep@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEXPAUrecordedMacroStep@@0@Z PROC ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1565
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1566
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Getal
; Line 1567
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@YAXPAUrecordedMacroStep@@0AAU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<recordedMacroStep> > >
	add	esp, 12					; 0000000cH
; Line 1568
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEXPAUrecordedMacroStep@@0@Z ENDP ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAE_NI@Z PROC ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Buy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1546
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1547
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 1548
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 1549
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 1551
	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy
; Line 1552
	xor	al, al
	jmp	SHORT $LN6@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:
; Line 1553
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBEIXZ ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy
; Line 1554
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IBEXXZ ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Xlen
; Line 1555
	jmp	SHORT $LN3@Buy
$LN2@Buy:
; Line 1557
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEPAUrecordedMacroStep@@I@Z ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::allocate
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1558
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
; Line 1559
	imul	eax, DWORD PTR __Capacity$[ebp], 44
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN3@Buy:
; Line 1561
	mov	al, 1
$LN6@Buy:
; Line 1562
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Buy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBEIXZ PROC ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1152
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1153
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::max_size
; Line 1154
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBEIXZ ENDP ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?size@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBEIXZ PROC ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1148
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
; Line 1149
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBEIXZ ENDP ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?end@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ PROC ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::end, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1039
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?end@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1040
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@PAUrecordedMacroStep@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1041
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?end@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@end
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
$LN4@end:
	ret	0
__ehhandler$?end@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?end@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?end@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ ENDP ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::end
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ PROC ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::begin, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1029
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?begin@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1030
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@PAUrecordedMacroStep@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1031
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?begin@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@begin
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
$LN4@begin:
	ret	0
__ehhandler$?begin@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?begin@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ ENDP ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::begin
; Function compile flags: /Odtp
;	COMDAT ??1?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@XZ PROC ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::~vector<recordedMacroStep,std::allocator<recordedMacroStep> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 944
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 945
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEXXZ ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Tidy
; Line 946
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::~_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::~_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >
__ehhandler$??1?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@XZ ENDP ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::~vector<recordedMacroStep,std::allocator<recordedMacroStep> >
; Function compile flags: /Odtp
;	COMDAT ??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv178 = -52						; size = 4
$T2 = -48						; size = 4
tv175 = -44						; size = 4
$T3 = -40						; size = 4
tv135 = -36						; size = 4
tv180 = -32						; size = 4
tv69 = -28						; size = 4
_this$ = -24						; size = 4
$T4 = -18						; size = 1
$T5 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::vector<recordedMacroStep,std::allocator<recordedMacroStep> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 721
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Getal
	mov	ecx, eax
	call	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::select_on_container_copy_construction
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV?$allocator@UrecordedMacroStep@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 722
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBEIXZ ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAE_NI@Z ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Buy
	movzx	edx, al
	test	edx, edx
	je	$LN3@vector
; Line 723
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 725
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T3[ebp], esp
	push	edx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::end
	mov	DWORD PTR tv69[ebp], eax
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv175[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@2@XZ ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::begin
	mov	DWORD PTR tv180[ebp], eax
	mov	edx, DWORD PTR tv180[ebp]
	mov	DWORD PTR tv178[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEPAUrecordedMacroStep@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@1@0PAU2@@Z ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<recordedMacroStep> > > >
	mov	DWORD PTR tv135[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN5@vector
__catch$??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z$0:
; Line 727
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@IAEXXZ ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::_Tidy
; Line 728
	push	0
	push	0
	call	__CxxThrowException@8
; Line 729
	mov	eax, $LN11@vector
	ret	0
$LN5@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN3@vector
$LN11@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector:
; Line 730
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::~_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >
__unwindfunclet$??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z$3:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z$4:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<recordedMacroStep,std::allocator<recordedMacroStep> >::vector<recordedMacroStep,std::allocator<recordedMacroStep> >
; Function compile flags: /Odtp
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 641
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 642
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::_Wrap_alloc<std::allocator<recordedMacroStep> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 643
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Free_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 630
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 632
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 633
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 634
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
; Line 635
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
; Line 636
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 637
	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Alloc_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 623
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 624
	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 625
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
; Line 626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 627
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::~_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 607
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 608
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Free_proxy
; Line 609
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::~_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV?$allocator@UrecordedMacroStep@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV?$allocator@UrecordedMacroStep@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 601
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV?$allocator@UrecordedMacroStep@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<recordedMacroStep> >::_Vector_val<std::_Simple_types<recordedMacroStep> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 603
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Alloc_proxy
; Line 604
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV?$allocator@UrecordedMacroStep@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV?$allocator@UrecordedMacroStep@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV?$allocator@UrecordedMacroStep@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UrecordedMacroStep@@V?$allocator@UrecordedMacroStep@@@std@@@std@@@std@@QAE@ABV?$allocator@UrecordedMacroStep@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >::_Vector_alloc<0,std::_Vec_base_types<recordedMacroStep,std::allocator<recordedMacroStep> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<recordedMacroStep> >::~_Vector_val<std::_Simple_types<recordedMacroStep> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??1?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<recordedMacroStep> >::~_Vector_val<std::_Simple_types<recordedMacroStep> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<recordedMacroStep> >::_Vector_val<std::_Simple_types<recordedMacroStep> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 480
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 482
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 483
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 484
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 485
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@U?$_Simple_types@UrecordedMacroStep@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<recordedMacroStep> >::_Vector_val<std::_Simple_types<recordedMacroStep> >
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 883
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@UrecordedMacroStep@@@std@@@std@@SAIABV?$allocator@UrecordedMacroStep@@@2@@Z ; std::allocator_traits<std::allocator<recordedMacroStep> >::max_size
	add	esp, 4
; Line 885
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEXPAUrecordedMacroStep@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEXPAUrecordedMacroStep@@I@Z PROC ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@I@Z ; std::allocator<recordedMacroStep>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEXPAUrecordedMacroStep@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEPAUrecordedMacroStep@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEPAUrecordedMacroStep@@I@Z PROC ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@UrecordedMacroStep@@@std@@QAEPAUrecordedMacroStep@@I@Z ; std::allocator<recordedMacroStep>::allocate
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAEPAUrecordedMacroStep@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV?$allocator@UrecordedMacroStep@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV?$allocator@UrecordedMacroStep@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::_Wrap_alloc<std::allocator<recordedMacroStep> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 806
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@UrecordedMacroStep@@@std@@QAE@ABV01@@Z ; std::allocator<recordedMacroStep>::allocator<recordedMacroStep>
; Line 807
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV?$allocator@UrecordedMacroStep@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::_Wrap_alloc<std::allocator<recordedMacroStep> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::_Wrap_alloc<std::allocator<recordedMacroStep> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@UrecordedMacroStep@@@std@@QAE@XZ ; std::allocator<recordedMacroStep>::allocator<recordedMacroStep>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::_Wrap_alloc<std::allocator<recordedMacroStep> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AU12@XZ PROC ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 778
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 779
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@UrecordedMacroStep@@@std@@@std@@SA?AV?$allocator@UrecordedMacroStep@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<recordedMacroStep> >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QAE@ABV?$allocator@UrecordedMacroStep@@@1@@Z ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::_Wrap_alloc<std::allocator<recordedMacroStep> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 780
	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@UrecordedMacroStep@@@std@@@std@@QBE?AU12@XZ ENDP ; std::_Wrap_alloc<std::allocator<recordedMacroStep> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@UrecordedMacroStep@@@std@@@std@@SA?AV?$allocator@UrecordedMacroStep@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@UrecordedMacroStep@@@std@@@std@@SA?AV?$allocator@UrecordedMacroStep@@@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<recordedMacroStep> >::select_on_container_copy_construction, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 740
	push	ebp
	mov	ebp, esp
; Line 741
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?select_on_container_copy_construction@?$allocator@UrecordedMacroStep@@@std@@QBE?AV12@XZ ; std::allocator<recordedMacroStep>::select_on_container_copy_construction
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 742
	pop	ebp
	ret	0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@UrecordedMacroStep@@@std@@@std@@SA?AV?$allocator@UrecordedMacroStep@@@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<recordedMacroStep> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@UrecordedMacroStep@@@std@@@std@@SAIABV?$allocator@UrecordedMacroStep@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@UrecordedMacroStep@@@std@@@std@@SAIABV?$allocator@UrecordedMacroStep@@@2@@Z PROC ; std::allocator_traits<std::allocator<recordedMacroStep> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 734
	push	ebp
	mov	ebp, esp
; Line 735
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@UrecordedMacroStep@@@std@@QBEIXZ ; std::allocator<recordedMacroStep>::max_size
; Line 736
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@UrecordedMacroStep@@@std@@@std@@SAIABV?$allocator@UrecordedMacroStep@@@2@@Z ENDP ; std::allocator_traits<std::allocator<recordedMacroStep> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator@UrecordedMacroStep@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@UrecordedMacroStep@@@std@@QBEIXZ PROC ; std::allocator<recordedMacroStep>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 611
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 612
	mov	eax, 97612893				; 05d1745dH
; Line 613
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@UrecordedMacroStep@@@std@@QBEIXZ ENDP ; std::allocator<recordedMacroStep>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@ABU3@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv74 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@ABU3@@Z PROC ; std::allocator<recordedMacroStep>::construct, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 592
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?construct@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@ABU3@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 593
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	44					; 0000002cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0recordedMacroStep@@QAE@ABU0@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 594
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@ABU3@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?construct@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@ABU3@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?construct@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@ABU3@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@ABU3@@Z ENDP ; std::allocator<recordedMacroStep>::construct
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@UrecordedMacroStep@@@std@@QAEPAUrecordedMacroStep@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UrecordedMacroStep@@@std@@QAEPAUrecordedMacroStep@@I@Z PROC ; std::allocator<recordedMacroStep>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@UrecordedMacroStep@@@std@@YAPAUrecordedMacroStep@@IPAU1@@Z ; std::_Allocate<recordedMacroStep>
	add	esp, 8
; Line 579
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@UrecordedMacroStep@@@std@@QAEPAUrecordedMacroStep@@I@Z ENDP ; std::allocator<recordedMacroStep>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@I@Z PROC ; std::allocator<recordedMacroStep>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UrecordedMacroStep@@@std@@QAEXPAUrecordedMacroStep@@I@Z ENDP ; std::allocator<recordedMacroStep>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@UrecordedMacroStep@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UrecordedMacroStep@@@std@@QAE@ABV01@@Z PROC ; std::allocator<recordedMacroStep>::allocator<recordedMacroStep>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 556
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 558
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@UrecordedMacroStep@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<recordedMacroStep>::allocator<recordedMacroStep>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@UrecordedMacroStep@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UrecordedMacroStep@@@std@@QAE@XZ PROC	; std::allocator<recordedMacroStep>::allocator<recordedMacroStep>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UrecordedMacroStep@@@std@@QAE@XZ ENDP	; std::allocator<recordedMacroStep>::allocator<recordedMacroStep>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$allocator@UrecordedMacroStep@@@std@@QBE?AV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$allocator@UrecordedMacroStep@@@std@@QBE?AV12@XZ PROC ; std::allocator<recordedMacroStep>::select_on_container_copy_construction, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 532
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 533
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$allocator@UrecordedMacroStep@@@std@@QAE@ABV01@@Z ; std::allocator<recordedMacroStep>::allocator<recordedMacroStep>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 534
	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$allocator@UrecordedMacroStep@@@std@@QBE?AV12@XZ ENDP ; std::allocator<recordedMacroStep>::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GrecordedMacroStep@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GrecordedMacroStep@@QAEPAXI@Z PROC			; recordedMacroStep::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1recordedMacroStep@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GrecordedMacroStep@@QAEPAXI@Z ENDP			; recordedMacroStep::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0recordedMacroStep@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0recordedMacroStep@@QAE@ABU0@@Z PROC			; recordedMacroStep::recordedMacroStep, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0recordedMacroStep@@QAE@ABU0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0recordedMacroStep@@QAE@ABU0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??0recordedMacroStep@@QAE@ABU0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0recordedMacroStep@@QAE@ABU0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0recordedMacroStep@@QAE@ABU0@@Z ENDP			; recordedMacroStep::recordedMacroStep
; Function compile flags: /Odtp
;	COMDAT ??1recordedMacroStep@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1recordedMacroStep@@QAE@XZ PROC			; recordedMacroStep::~recordedMacroStep, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1recordedMacroStep@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1recordedMacroStep@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??1recordedMacroStep@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1recordedMacroStep@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1recordedMacroStep@@QAE@XZ ENDP			; recordedMacroStep::~recordedMacroStep
; Function compile flags: /Odtp
_TEXT	SEGMENT
_scnN$1 = -104						; size = 92
_lParam$2 = -12						; size = 4
_this$ = -8						; size = 4
_ansiBuffer$3 = -4					; size = 3
_pNotepad$ = 8						; size = 4
_pEditView$ = 12					; size = 4
?PlayBack@recordedMacroStep@@QAEXPAVWindow@@PAVScintillaEditView@@@Z PROC ; recordedMacroStep::PlayBack
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 630
	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	mov	DWORD PTR _this$[ebp], ecx
; Line 631
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 2
	jne	SHORT $LN7@PlayBack
; Line 632
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	273					; 00000111H
	mov	ecx, DWORD PTR _pNotepad$[ebp]
	call	?getHSelf@Window@@QBEPAUHWND__@@XZ	; Window::getHSelf
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
; Line 634
	jmp	$LN8@PlayBack
$LN7@PlayBack:
; Line 636
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _lParam$2[ebp], ecx
; Line 638
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+40], 1
	jne	SHORT $LN5@PlayBack
; Line 640
	push	0
	push	0
	push	3
	lea	eax, DWORD PTR _ansiBuffer$3[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
	push	eax
	push	0
	push	0
	push	0
	push	2137					; 00000859H
	mov	ecx, DWORD PTR _pEditView$[ebp]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	push	eax
	call	DWORD PTR __imp__WideCharToMultiByte@32
; Line 641
	lea	ecx, DWORD PTR _ansiBuffer$3[ebp]
	mov	DWORD PTR _lParam$2[ebp], ecx
$LN5@PlayBack:
; Line 644
	mov	edx, DWORD PTR _lParam$2[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pEditView$[ebp]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
; Line 650
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 2181			; 00000885H
	je	SHORT $LN3@PlayBack
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 2170			; 0000087aH
	je	SHORT $LN3@PlayBack
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 2001			; 000007d1H
	je	SHORT $LN3@PlayBack
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 2002			; 000007d2H
	je	SHORT $LN3@PlayBack
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 2003			; 000007d3H
	je	SHORT $LN3@PlayBack
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 2282			; 000008eaH
	jne	SHORT $LN8@PlayBack
$LN3@PlayBack:
; Line 652
	mov	DWORD PTR _scnN$1[ebp+8], 2001		; 000007d1H
; Line 653
	mov	ecx, DWORD PTR _pEditView$[ebp]
	call	?getHSelf@Window@@QBEPAUHWND__@@XZ	; Window::getHSelf
	mov	DWORD PTR _scnN$1[ebp], eax
; Line 654
	mov	DWORD PTR _scnN$1[ebp+4], 0
; Line 655
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PlayBack
; Line 656
	mov	DWORD PTR _scnN$1[ebp+16], 0
; Line 657
	jmp	SHORT $LN1@PlayBack
$LN2@PlayBack:
; Line 658
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?at@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::at
	movzx	edx, WORD PTR [eax]
	mov	DWORD PTR _scnN$1[ebp+16], edx
$LN1@PlayBack:
; Line 659
	lea	eax, DWORD PTR _scnN$1[ebp]
	push	eax
	push	0
	push	78					; 0000004eH
	mov	ecx, DWORD PTR _pNotepad$[ebp]
	call	?getHSelf@Window@@QBEPAUHWND__@@XZ	; Window::getHSelf
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
$LN8@PlayBack:
; Line 662
	mov	esp, ebp
	pop	ebp
	ret	8
?PlayBack@recordedMacroStep@@QAEXPAVWindow@@PAVScintillaEditView@@@Z ENDP ; recordedMacroStep::PlayBack
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_tch$2 = -28						; size = 4
_ch$3 = -24						; size = 4
_this$ = -20						; size = 4
tv76 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_iMessage$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
_codepage$ = 20						; size = 4
??0recordedMacroStep@@QAE@HJJH@Z PROC			; recordedMacroStep::recordedMacroStep
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 589
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0recordedMacroStep@@QAE@HJJH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iMessage$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0
; Line 590
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	$LN6@recordedMa
; Line 591
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv76[ebp], eax
	cmp	DWORD PTR tv76[ebp], 2181		; 00000885H
	jg	$LN8@recordedMa
	cmp	DWORD PTR tv76[ebp], 2181		; 00000885H
	je	$LN2@recordedMa
	cmp	DWORD PTR tv76[ebp], 2056		; 00000808H
	jg	SHORT $LN9@recordedMa
	cmp	DWORD PTR tv76[ebp], 2056		; 00000808H
	je	$LN2@recordedMa
	cmp	DWORD PTR tv76[ebp], 1653		; 00000675H
	jg	SHORT $LN10@recordedMa
	cmp	DWORD PTR tv76[ebp], 1652		; 00000674H
	jge	SHORT $LN2@recordedMa
	cmp	DWORD PTR tv76[ebp], 1601		; 00000641H
	jl	$LN6@recordedMa
	cmp	DWORD PTR tv76[ebp], 1602		; 00000642H
	jle	SHORT $LN2@recordedMa
	jmp	$LN6@recordedMa
$LN10@recordedMa:
	cmp	DWORD PTR tv76[ebp], 2001		; 000007d1H
	jl	$LN6@recordedMa
	cmp	DWORD PTR tv76[ebp], 2003		; 000007d3H
	jle	SHORT $LN2@recordedMa
	jmp	$LN6@recordedMa
$LN9@recordedMa:
	cmp	DWORD PTR tv76[ebp], 2073		; 00000819H
	je	SHORT $LN2@recordedMa
	cmp	DWORD PTR tv76[ebp], 2077		; 0000081dH
	je	SHORT $LN2@recordedMa
	cmp	DWORD PTR tv76[ebp], 2170		; 0000087aH
	je	SHORT $LN2@recordedMa
	jmp	SHORT $LN6@recordedMa
$LN8@recordedMa:
	mov	ecx, DWORD PTR tv76[ebp]
	sub	ecx, 2194				; 00000892H
	mov	DWORD PTR tv76[ebp], ecx
	cmp	DWORD PTR tv76[ebp], 249		; 000000f9H
	ja	SHORT $LN6@recordedMa
	mov	edx, DWORD PTR tv76[ebp]
	movzx	eax, BYTE PTR $LN12@recordedMa[edx]
	jmp	DWORD PTR $LN14@recordedMa[eax*4]
$LN2@recordedMa:
; Line 613
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _ch$3[ebp], edx
; Line 615
	push	2
	lea	eax, DWORD PTR _tch$2[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _ch$3[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _codepage$[ebp]
	push	edx
	call	DWORD PTR __imp__MultiByteToWideChar@24
; Line 616
	mov	eax, 2
	imul	ecx, eax, 0
	movzx	edx, WORD PTR _tch$2[ebp+ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
; Line 617
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 1
; Line 618
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
$LN6@recordedMa:
; Line 627
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN14@recordedMa:
	DD	$LN2@recordedMa
	DD	$LN6@recordedMa
$LN12@recordedMa:
	DB	0
	DB	0
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0recordedMacroStep@@QAE@HJJH@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??0recordedMacroStep@@QAE@HJJH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0recordedMacroStep@@QAE@HJJH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0recordedMacroStep@@QAE@HJJH@Z ENDP			; recordedMacroStep::recordedMacroStep
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >
; Function compile flags: /Odtp
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
__Tmp$ = -32						; size = 12
_this$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::operator+, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 365
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBE?AV01@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 366
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 367
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::operator+=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 368
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBE?AV01@H@Z$0:
	lea	ecx, DWORD PTR __Tmp$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBE?AV01@H@Z$1:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN5@operator
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
$LN5@operator:
	ret	0
__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBE?AV01@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBE?AV01@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::operator+
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::operator+=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 359
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 360
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::operator+=
; Line 361
	mov	eax, DWORD PTR _this$[ebp]
; Line 362
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 306
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 307
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::operator+=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 153
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
; Line 157
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN1@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, DWORD PTR [eax+4]
	jb	SHORT $LN1@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR __Off$[ebp]
	lea	edx, DWORD PTR [edx+ecx*4]
	cmp	DWORD PTR [eax+8], edx
	jae	SHORT $LN2@operator
$LN1@operator:
; Line 159
	push	159					; 0000009fH
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
; Line 160
	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN5@operator
	xor	ecx, ecx
	jne	SHORT $LN6@operator
$LN5@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	160					; 000000a0H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN6@operator
	int	3
$LN6@operator:
	push	0
	push	160					; 000000a0H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1NO@IKGOHLOG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 171
	mov	eax, DWORD PTR _this$[ebp]
; Line 172
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBEPBUKeyCombo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBEPBUKeyCombo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Unchecked, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 60
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 61
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 62
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBEPBUKeyCombo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 47
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 48
	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
; Line 49
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC ; std::_Iterator012<std::random_access_iterator_tag,KeyCombo,int,KeyCombo const *,KeyCombo const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,KeyCombo,int,KeyCombo const *,KeyCombo const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ENDP ; std::_Iterator012<std::random_access_iterator_tag,KeyCombo,int,KeyCombo const *,KeyCombo const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,KeyCombo,int,KeyCombo const *,KeyCombo const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??1?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,KeyCombo,int,KeyCombo const *,KeyCombo const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,KeyCombo,int,KeyCombo const *,KeyCombo const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,KeyCombo,int,KeyCombo const *,KeyCombo const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,KeyCombo,int,KeyCombo const *,KeyCombo const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,KeyCombo,int,KeyCombo const *,KeyCombo const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,KeyCombo,int,KeyCombo const *,KeyCombo const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@UKeyCombo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,KeyCombo,int,KeyCombo const *,KeyCombo const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,KeyCombo,int,KeyCombo const *,KeyCombo const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??_GScintillaKeyMap@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GScintillaKeyMap@@UAEPAXI@Z PROC			; ScintillaKeyMap::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ScintillaKeyMap@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GScintillaKeyMap@@UAEPAXI@Z ENDP			; ScintillaKeyMap::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0ScintillaKeyMap@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0ScintillaKeyMap@@QAE@ABV0@@Z PROC			; ScintillaKeyMap::ScintillaKeyMap, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0ScintillaKeyMap@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Shortcut@@QAE@ABV0@@Z		; Shortcut::Shortcut
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ScintillaKeyMap@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	mov	DWORD PTR [edx+296], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	mov	DWORD PTR [edx+300], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 304				; 00000130H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::vector<KeyCombo,std::allocator<KeyCombo> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+320]
	mov	DWORD PTR [eax+320], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ScintillaKeyMap@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Shortcut@@UAE@XZ
__unwindfunclet$??0ScintillaKeyMap@@QAE@ABV0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	jmp	??1?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@XZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::~vector<KeyCombo,std::allocator<KeyCombo> >
__ehhandler$??0ScintillaKeyMap@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0ScintillaKeyMap@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0ScintillaKeyMap@@QAE@ABV0@@Z ENDP			; ScintillaKeyMap::ScintillaKeyMap
; Function compile flags: /Odtp
;	COMDAT ??1ScintillaKeyMap@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ScintillaKeyMap@@UAE@XZ PROC				; ScintillaKeyMap::~ScintillaKeyMap, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1ScintillaKeyMap@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	??1?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@XZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::~vector<KeyCombo,std::allocator<KeyCombo> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Shortcut@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ScintillaKeyMap@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Shortcut@@UAE@XZ
__unwindfunclet$??1ScintillaKeyMap@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	jmp	??1?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@XZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::~vector<KeyCombo,std::allocator<KeyCombo> >
__ehhandler$??1ScintillaKeyMap@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1ScintillaKeyMap@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1ScintillaKeyMap@@UAE@XZ ENDP				; ScintillaKeyMap::~ScintillaKeyMap
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv410 = -136						; size = 4
tv409 = -132						; size = 4
tv407 = -128						; size = 4
tv411 = -124						; size = 4
_i$2 = -120						; size = 4
_oldsize$3 = -116					; size = 4
tv192 = -112						; size = 4
tv213 = -108						; size = 4
tv64 = -104						; size = 4
tv373 = -100						; size = 4
tv234 = -96						; size = 4
_i$4 = -92						; size = 4
_i$5 = -88						; size = 4
_res$6 = -84						; size = 4
_i$7 = -80						; size = 4
tv173 = -76						; size = 4
$T8 = -72						; size = 28
$T9 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_Message$ = 12						; size = 4
_wParam$ = 16						; size = 4
___formal$ = 20						; size = 4
?run_dlgProc@ScintillaKeyMap@@MAGHIIJ@Z PROC		; ScintillaKeyMap::run_dlgProc
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 773
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?run_dlgProc@ScintillaKeyMap@@MAGHIIJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 775
	mov	eax, DWORD PTR _Message$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 272		; 00000110H
	je	SHORT $LN31@run_dlgPro
	cmp	DWORD PTR tv64[ebp], 273		; 00000111H
	je	$LN24@run_dlgPro
	jmp	$LN1@run_dlgPro
$LN31@run_dlgPro:
; Line 779
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 38					; 00000026H
	push	ecx
	push	5005					; 0000138dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SetDlgItemTextW@12
; Line 780
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	??A?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAEAAUKeyCombo@@I@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], ecx
; Line 782
	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN30@run_dlgPro
$LN29@run_dlgPro:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN30@run_dlgPro:
	cmp	DWORD PTR _i$5[ebp], 91			; 0000005bH
	jae	SHORT $LN28@run_dlgPro
; Line 784
	mov	ecx, DWORD PTR _i$5[ebp]
	mov	edx, DWORD PTR ?namedKeyArray@@3PAUKeyIDNAME@@A[ecx*8]
	push	edx
	push	0
	push	323					; 00000143H
	push	5004					; 0000138cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
; Line 785
	jmp	SHORT $LN29@run_dlgPro
$LN28@run_dlgPro:
; Line 787
	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN27@run_dlgPro
$LN26@run_dlgPro:
	mov	edx, DWORD PTR _i$4[ebp]
	add	edx, 1
	mov	DWORD PTR _i$4[ebp], edx
$LN27@run_dlgPro:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$4[ebp]
	cmp	ecx, DWORD PTR [eax+320]
	jae	SHORT $LN25@run_dlgPro
; Line 788
	mov	edx, DWORD PTR _i$4[ebp]
	push	edx
	lea	eax, DWORD PTR $T9[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?toString@ScintillaKeyMap@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z ; ScintillaKeyMap::toString
	mov	DWORD PTR tv410[ebp], eax
	mov	ecx, DWORD PTR tv410[ebp]
	mov	DWORD PTR tv407[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv407[ebp]
	call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
	push	eax
	push	0
	push	384					; 00000180H
	push	5011					; 00001393H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T9[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Line 789
	jmp	SHORT $LN26@run_dlgPro
$LN25@run_dlgPro:
; Line 790
	push	0
	push	0
	push	390					; 00000186H
	push	5011					; 00001393H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
; Line 792
	mov	ecx, DWORD PTR _this$[ebp]
	call	?showCurrentSettings@ScintillaKeyMap@@AAEXXZ ; ScintillaKeyMap::showCurrentSettings
; Line 793
	mov	ecx, DWORD PTR _this$[ebp]
	call	?validateDialog@ScintillaKeyMap@@AAEXXZ	; ScintillaKeyMap::validateDialog
; Line 795
	mov	ecx, DWORD PTR _this$[ebp]
	call	?goToCenter@StaticDialog@@QAEXXZ	; StaticDialog::goToCenter
; Line 796
	mov	eax, 1
	jmp	$LN34@run_dlgPro
$LN24@run_dlgPro:
; Line 801
	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv173[ebp], eax
	cmp	DWORD PTR tv173[ebp], 5001		; 00001389H
	ja	SHORT $LN42@run_dlgPro
	cmp	DWORD PTR tv173[ebp], 5001		; 00001389H
	je	SHORT $LN21@run_dlgPro
	cmp	DWORD PTR tv173[ebp], 1
	je	$LN18@run_dlgPro
	cmp	DWORD PTR tv173[ebp], 2
	je	$LN17@run_dlgPro
	jmp	$LN8@run_dlgPro
$LN42@run_dlgPro:
	mov	ecx, DWORD PTR tv173[ebp]
	sub	ecx, 5002				; 0000138aH
	mov	DWORD PTR tv173[ebp], ecx
	cmp	DWORD PTR tv173[ebp], 8
	ja	$LN8@run_dlgPro
	mov	edx, DWORD PTR tv173[ebp]
	jmp	DWORD PTR $LN46@run_dlgPro[edx*4]
$LN21@run_dlgPro:
; Line 804
	push	0
	push	0
	push	240					; 000000f0H
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	cmp	eax, 1
	jne	SHORT $LN36@run_dlgPro
	mov	DWORD PTR tv192[ebp], 1
	jmp	SHORT $LN37@run_dlgPro
$LN36@run_dlgPro:
	mov	DWORD PTR tv192[ebp], 0
$LN37@run_dlgPro:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv192[ebp]
	mov	BYTE PTR [eax+32], cl
; Line 806
	mov	ecx, DWORD PTR _this$[ebp]
	call	?validateDialog@ScintillaKeyMap@@AAEXXZ	; ScintillaKeyMap::validateDialog
; Line 807
	mov	eax, 1
	jmp	$LN34@run_dlgPro
$LN20@run_dlgPro:
; Line 810
	push	0
	push	0
	push	240					; 000000f0H
	mov	edx, DWORD PTR _wParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	cmp	eax, 1
	jne	SHORT $LN38@run_dlgPro
	mov	DWORD PTR tv213[ebp], 1
	jmp	SHORT $LN39@run_dlgPro
$LN38@run_dlgPro:
	mov	DWORD PTR tv213[ebp], 0
$LN39@run_dlgPro:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv213[ebp]
	mov	BYTE PTR [edx+33], al
; Line 812
	mov	ecx, DWORD PTR _this$[ebp]
	call	?validateDialog@ScintillaKeyMap@@AAEXXZ	; ScintillaKeyMap::validateDialog
; Line 813
	mov	eax, 1
	jmp	$LN34@run_dlgPro
$LN19@run_dlgPro:
; Line 816
	push	0
	push	0
	push	240					; 000000f0H
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	cmp	eax, 1
	jne	SHORT $LN40@run_dlgPro
	mov	DWORD PTR tv234[ebp], 1
	jmp	SHORT $LN41@run_dlgPro
$LN40@run_dlgPro:
	mov	DWORD PTR tv234[ebp], 0
$LN41@run_dlgPro:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv234[ebp]
	mov	BYTE PTR [ecx+34], dl
; Line 818
	mov	eax, 1
	jmp	$LN34@run_dlgPro
$LN18@run_dlgPro:
; Line 822
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+35], 0
; Line 823
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+34], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+33], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+32], 0
; Line 824
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__EndDialog@8
; Line 825
	mov	eax, 1
	jmp	$LN34@run_dlgPro
$LN17@run_dlgPro:
; Line 828
	push	-1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__EndDialog@8
; Line 829
	mov	eax, 1
	jmp	$LN34@run_dlgPro
$LN16@run_dlgPro:
; Line 832
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+320]
	mov	DWORD PTR _oldsize$3[ebp], eax
; Line 833
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addKeyCombo@ScintillaKeyMap@@QAEHUKeyCombo@@@Z ; ScintillaKeyMap::addKeyCombo
	mov	DWORD PTR _res$6[ebp], eax
; Line 834
	cmp	DWORD PTR _res$6[ebp], -1
	jle	$LN15@run_dlgPro
; Line 835
	mov	eax, DWORD PTR _res$6[ebp]
	cmp	eax, DWORD PTR _oldsize$3[ebp]
	jne	SHORT $LN14@run_dlgPro
; Line 836
	mov	ecx, DWORD PTR _res$6[ebp]
	push	ecx
	lea	edx, DWORD PTR $T8[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?toString@ScintillaKeyMap@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z ; ScintillaKeyMap::toString
	mov	DWORD PTR tv411[ebp], eax
	mov	eax, DWORD PTR tv411[ebp]
	mov	DWORD PTR tv409[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv409[ebp]
	call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
	push	eax
	push	-1
	push	385					; 00000181H
	push	5011					; 00001393H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T8[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Line 837
	jmp	SHORT $LN13@run_dlgPro
$LN14@run_dlgPro:
; Line 838
	mov	eax, DWORD PTR _res$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateListItem@ScintillaKeyMap@@AAEXH@Z ; ScintillaKeyMap::updateListItem
$LN13@run_dlgPro:
; Line 840
	push	0
	mov	ecx, DWORD PTR _res$6[ebp]
	push	ecx
	push	390					; 00000186H
	push	5011					; 00001393H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageW@20
$LN15@run_dlgPro:
; Line 842
	mov	ecx, DWORD PTR _this$[ebp]
	call	?showCurrentSettings@ScintillaKeyMap@@AAEXXZ ; ScintillaKeyMap::showCurrentSettings
; Line 843
	mov	ecx, DWORD PTR _this$[ebp]
	call	?validateDialog@ScintillaKeyMap@@AAEXXZ	; ScintillaKeyMap::validateDialog
; Line 844
	mov	eax, 1
	jmp	$LN34@run_dlgPro
$LN12@run_dlgPro:
; Line 847
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+320], 1
	jne	SHORT $LN11@run_dlgPro
; Line 848
	mov	eax, 1
	jmp	$LN34@run_dlgPro
$LN11@run_dlgPro:
; Line 849
	push	0
	push	0
	push	392					; 00000188H
	push	5011					; 00001393H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	mov	DWORD PTR _i$7[ebp], eax
; Line 850
	mov	ecx, DWORD PTR _i$7[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?removeKeyComboByIndex@ScintillaKeyMap@@QAEXH@Z ; ScintillaKeyMap::removeKeyComboByIndex
; Line 851
	push	0
	mov	edx, DWORD PTR _i$7[ebp]
	push	edx
	push	386					; 00000182H
	push	5011					; 00001393H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
; Line 852
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$7[ebp]
	cmp	eax, DWORD PTR [edx+320]
	jne	SHORT $LN10@run_dlgPro
; Line 853
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+320]
	sub	edx, 1
	mov	DWORD PTR _i$7[ebp], edx
$LN10@run_dlgPro:
; Line 854
	push	0
	mov	eax, DWORD PTR _i$7[ebp]
	push	eax
	push	390					; 00000186H
	push	5011					; 00001393H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
; Line 855
	mov	ecx, DWORD PTR _this$[ebp]
	call	?showCurrentSettings@ScintillaKeyMap@@AAEXXZ ; ScintillaKeyMap::showCurrentSettings
; Line 856
	mov	ecx, DWORD PTR _this$[ebp]
	call	?validateDialog@ScintillaKeyMap@@AAEXXZ	; ScintillaKeyMap::validateDialog
; Line 857
	mov	eax, 1
	jmp	$LN34@run_dlgPro
$LN9@run_dlgPro:
; Line 860
	mov	ecx, DWORD PTR _this$[ebp]
	call	?applyToCurrentIndex@ScintillaKeyMap@@AAEXXZ ; ScintillaKeyMap::applyToCurrentIndex
; Line 861
	mov	ecx, DWORD PTR _this$[ebp]
	call	?validateDialog@ScintillaKeyMap@@AAEXXZ	; ScintillaKeyMap::validateDialog
; Line 862
	mov	eax, 1
	jmp	$LN34@run_dlgPro
$LN8@run_dlgPro:
; Line 865
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	cmp	ecx, 1
	je	SHORT $LN6@run_dlgPro
	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	cmp	eax, 1
	jne	SHORT $LN7@run_dlgPro
$LN6@run_dlgPro:
; Line 867
	mov	ecx, DWORD PTR _wParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	mov	DWORD PTR tv373[ebp], edx
	cmp	DWORD PTR tv373[ebp], 5004		; 0000138cH
	je	SHORT $LN3@run_dlgPro
	cmp	DWORD PTR tv373[ebp], 5011		; 00001393H
	je	SHORT $LN2@run_dlgPro
	jmp	SHORT $LN7@run_dlgPro
$LN3@run_dlgPro:
; Line 870
	push	0
	push	0
	push	327					; 00000147H
	push	5004					; 0000138cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	mov	DWORD PTR _i$2[ebp], eax
; Line 871
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	cl, BYTE PTR ?namedKeyArray@@3PAUKeyIDNAME@@A[eax*8+4]
	mov	BYTE PTR [edx+35], cl
; Line 873
	mov	ecx, DWORD PTR _this$[ebp]
	call	?validateDialog@ScintillaKeyMap@@AAEXXZ	; ScintillaKeyMap::validateDialog
; Line 874
	mov	eax, 1
	jmp	SHORT $LN34@run_dlgPro
$LN2@run_dlgPro:
; Line 878
	mov	ecx, DWORD PTR _this$[ebp]
	call	?showCurrentSettings@ScintillaKeyMap@@AAEXXZ ; ScintillaKeyMap::showCurrentSettings
; Line 879
	mov	eax, 1
	jmp	SHORT $LN34@run_dlgPro
$LN7@run_dlgPro:
; Line 883
	xor	eax, eax
	jmp	SHORT $LN34@run_dlgPro
$LN1@run_dlgPro:
; Line 887
	xor	eax, eax
$LN34@run_dlgPro:
; Line 891
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN46@run_dlgPro:
	DD	$LN20@run_dlgPro
	DD	$LN19@run_dlgPro
	DD	$LN8@run_dlgPro
	DD	$LN8@run_dlgPro
	DD	$LN8@run_dlgPro
	DD	$LN8@run_dlgPro
	DD	$LN16@run_dlgPro
	DD	$LN12@run_dlgPro
	DD	$LN9@run_dlgPro
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?run_dlgProc@ScintillaKeyMap@@MAGHIIJ@Z$0:
	lea	ecx, DWORD PTR $T9[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?run_dlgProc@ScintillaKeyMap@@MAGHIIJ@Z$1:
	lea	ecx, DWORD PTR $T8[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?run_dlgProc@ScintillaKeyMap@@MAGHIIJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?run_dlgProc@ScintillaKeyMap@@MAGHIIJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?run_dlgProc@ScintillaKeyMap@@MAGHIIJ@Z ENDP		; ScintillaKeyMap::run_dlgProc
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv94 = -56						; size = 4
tv95 = -52						; size = 4
_this$ = -48						; size = 4
$T2 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
?updateListItem@ScintillaKeyMap@@AAEXH@Z PROC		; ScintillaKeyMap::updateListItem
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 767
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?updateListItem@ScintillaKeyMap@@AAEXH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 768
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?toString@ScintillaKeyMap@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z ; ScintillaKeyMap::toString
	mov	DWORD PTR tv95[ebp], eax
	mov	edx, DWORD PTR tv95[ebp]
	mov	DWORD PTR tv94[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv94[ebp]
	call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
	push	eax
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	push	385					; 00000181H
	push	5011					; 00001393H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Line 769
	push	0
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	push	eax
	push	386					; 00000182H
	push	5011					; 00001393H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
; Line 770
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?updateListItem@ScintillaKeyMap@@AAEXH@Z$0:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?updateListItem@ScintillaKeyMap@@AAEXH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?updateListItem@ScintillaKeyMap@@AAEXH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?updateListItem@ScintillaKeyMap@@AAEXH@Z ENDP		; ScintillaKeyMap::updateListItem
; Function compile flags: /Odtp
_TEXT	SEGMENT
_keyIndex$ = -24					; size = 4
tv165 = -20						; size = 4
tv146 = -16						; size = 4
tv95 = -12						; size = 4
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
?showCurrentSettings@ScintillaKeyMap@@AAEXXZ PROC	; ScintillaKeyMap::showCurrentSettings
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 751
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx
; Line 752
	push	0
	push	0
	push	392					; 00000188H
	push	5011					; 00001393H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	mov	DWORD PTR _keyIndex$[ebp], eax
; Line 753
	mov	edx, DWORD PTR _keyIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	??A?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAEAAUKeyCombo@@I@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax
; Line 754
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+32]
	test	eax, eax
	je	SHORT $LN7@showCurren
	mov	DWORD PTR tv95[ebp], 1
	jmp	SHORT $LN8@showCurren
$LN7@showCurren:
	mov	DWORD PTR tv95[ebp], 0
$LN8@showCurren:
	push	0
	mov	ecx, DWORD PTR tv95[ebp]
	push	ecx
	push	241					; 000000f1H
	push	5001					; 00001389H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageW@20
; Line 755
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+33]
	test	edx, edx
	je	SHORT $LN9@showCurren
	mov	DWORD PTR tv146[ebp], 1
	jmp	SHORT $LN10@showCurren
$LN9@showCurren:
	mov	DWORD PTR tv146[ebp], 0
$LN10@showCurren:
	push	0
	mov	eax, DWORD PTR tv146[ebp]
	push	eax
	push	241					; 000000f1H
	push	5002					; 0000138aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
; Line 756
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+34]
	test	ecx, ecx
	je	SHORT $LN11@showCurren
	mov	DWORD PTR tv165[ebp], 1
	jmp	SHORT $LN12@showCurren
$LN11@showCurren:
	mov	DWORD PTR tv165[ebp], 0
$LN12@showCurren:
	push	0
	mov	edx, DWORD PTR tv165[ebp]
	push	edx
	push	241					; 000000f1H
	push	5003					; 0000138bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
; Line 757
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@showCurren
$LN3@showCurren:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN4@showCurren:
	cmp	DWORD PTR _i$1[ebp], 91			; 0000005bH
	jae	SHORT $LN5@showCurren
; Line 759
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+35]
	mov	edx, DWORD PTR _i$1[ebp]
	movzx	eax, BYTE PTR ?namedKeyArray@@3PAUKeyIDNAME@@A[edx*8+4]
	cmp	ecx, eax
	jne	SHORT $LN1@showCurren
; Line 761
	push	0
	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	push	334					; 0000014eH
	push	5004					; 0000138cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageW@20
; Line 762
	jmp	SHORT $LN5@showCurren
$LN1@showCurren:
; Line 764
	jmp	SHORT $LN3@showCurren
$LN5@showCurren:
; Line 765
	mov	esp, ebp
	pop	ebp
	ret	0
?showCurrentSettings@ScintillaKeyMap@@AAEXXZ ENDP	; ScintillaKeyMap::showCurrentSettings
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv174 = -32						; size = 4
tv161 = -28						; size = 4
tv148 = -24						; size = 4
tv131 = -20						; size = 4
tv92 = -16						; size = 4
tv80 = -12						; size = 4
_this$ = -8						; size = 4
_isDisabled$ = -3					; size = 1
_isDisabling$ = -2					; size = 1
_valid$ = -1						; size = 1
?validateDialog@ScintillaKeyMap@@AAEXXZ PROC		; ScintillaKeyMap::validateDialog
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 740
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx
; Line 741
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	mov	BYTE PTR _valid$[ebp], al
; Line 742
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+35]
	test	edx, edx
	jne	SHORT $LN3@validateDi
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN4@validateDi
$LN3@validateDi:
	mov	DWORD PTR tv80[ebp], 0
$LN4@validateDi:
	mov	al, BYTE PTR tv80[ebp]
	mov	BYTE PTR _isDisabling$[ebp], al
; Line 743
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN5@validateDi
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN6@validateDi
$LN5@validateDi:
	mov	DWORD PTR tv92[ebp], 0
$LN6@validateDi:
	mov	dl, BYTE PTR tv92[ebp]
	mov	BYTE PTR _isDisabled$[ebp], dl
; Line 745
	movzx	eax, BYTE PTR _valid$[ebp]
	test	eax, eax
	je	SHORT $LN7@validateDi
	movzx	ecx, BYTE PTR _isDisabling$[ebp]
	test	ecx, ecx
	jne	SHORT $LN7@validateDi
	mov	DWORD PTR tv131[ebp], 1
	jmp	SHORT $LN8@validateDi
$LN7@validateDi:
	mov	DWORD PTR tv131[ebp], 0
$LN8@validateDi:
	mov	edx, DWORD PTR tv131[ebp]
	push	edx
	push	5008					; 00001390H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 746
	movzx	edx, BYTE PTR _valid$[ebp]
	test	edx, edx
	je	SHORT $LN10@validateDi
	movzx	eax, BYTE PTR _isDisabling$[ebp]
	test	eax, eax
	je	SHORT $LN9@validateDi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+320], 1
	jne	SHORT $LN10@validateDi
$LN9@validateDi:
	mov	DWORD PTR tv148[ebp], 1
	jmp	SHORT $LN11@validateDi
$LN10@validateDi:
	mov	DWORD PTR tv148[ebp], 0
$LN11@validateDi:
	mov	edx, DWORD PTR tv148[ebp]
	push	edx
	push	5010					; 00001392H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 747
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+320], 1
	jbe	SHORT $LN12@validateDi
	mov	DWORD PTR tv161[ebp], 1
	jmp	SHORT $LN13@validateDi
$LN12@validateDi:
	mov	DWORD PTR tv161[ebp], 0
$LN13@validateDi:
	mov	eax, DWORD PTR tv161[ebp]
	push	eax
	push	5009					; 00001391H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 748
	movzx	eax, BYTE PTR _isDisabled$[ebp]
	test	eax, eax
	je	SHORT $LN14@validateDi
	mov	DWORD PTR tv174[ebp], 5
	jmp	SHORT $LN15@validateDi
$LN14@validateDi:
	mov	DWORD PTR tv174[ebp], 0
$LN15@validateDi:
	mov	ecx, DWORD PTR tv174[ebp]
	push	ecx
	push	5007					; 0000138fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__ShowWindow@8
; Line 749
	mov	esp, ebp
	pop	ebp
	ret	0
?validateDialog@ScintillaKeyMap@@AAEXXZ ENDP		; ScintillaKeyMap::validateDialog
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_index$ = -8						; size = 4
_this$ = -4						; size = 4
?applyToCurrentIndex@ScintillaKeyMap@@AAEXXZ PROC	; ScintillaKeyMap::applyToCurrentIndex
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 730
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 731
	push	0
	push	0
	push	392					; 00000188H
	push	5011					; 00001393H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	mov	DWORD PTR _index$[ebp], eax
; Line 732
	cmp	DWORD PTR _index$[ebp], -1
	jne	SHORT $LN1@applyToCur
; Line 733
	jmp	SHORT $LN2@applyToCur
$LN1@applyToCur:
; Line 734
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setKeyComboByIndex@ScintillaKeyMap@@QAEXHUKeyCombo@@@Z ; ScintillaKeyMap::setKeyComboByIndex
; Line 735
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateListItem@ScintillaKeyMap@@AAEXH@Z ; ScintillaKeyMap::updateListItem
; Line 736
	push	0
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	push	390					; 00000186H
	push	5011					; 00001393H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
$LN2@applyToCur:
; Line 738
	mov	esp, ebp
	pop	ebp
	ret	0
?applyToCurrentIndex@ScintillaKeyMap@@AAEXXZ ENDP	; ScintillaKeyMap::applyToCurrentIndex
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Orphan_range@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXPAUKeyCombo@@0@Z
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -20						; size = 4
__Pnext$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXPAUKeyCombo@@0@Z PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Orphan_range, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1764
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXPAUKeyCombo@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1765
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1766
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
	mov	DWORD PTR __Pnext$[ebp], eax
; Line 1767
	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:
; Line 1768
	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_ran
; Line 1769
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN3@Orphan_ran
$LN2@Orphan_ran:
; Line 1770
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax
; Line 1771
	jmp	SHORT $LN1@Orphan_ran
$LN3@Orphan_ran:
; Line 1773
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont
; Line 1774
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN1@Orphan_ran:
; Line 1775
	jmp	SHORT $LN5@Orphan_ran
$LN6@Orphan_ran:
; Line 1776
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXPAUKeyCombo@@0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_range@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXPAUKeyCombo@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXPAUKeyCombo@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXPAUKeyCombo@@0@Z ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Orphan_range
; Function compile flags: /Odtp
;	COMDAT ?_Xlen@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXXZ PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1753
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1754
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:
; Line 1755
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXXZ ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXXZ PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1622
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1623
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Tidy
; Line 1625
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 1626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXPAUKeyCombo@@0@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Destroy
; Line 1628
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@I@Z ; std::_Wrap_alloc<std::allocator<KeyCombo> >::deallocate
; Line 1629
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 1630
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 1631
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN2@Tidy:
; Line 1633
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXXZ ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Reserve@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Reserve, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1612
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
; Line 1613
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unused_capacity@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Unused_capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Reserve
; Line 1615
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Reserve
; Line 1616
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Xlen
$LN1@Reserve:
; Line 1617
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::size
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEII@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reallocate@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Reallocate
$LN4@Reserve:
; Line 1619
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Reallocate@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -32						; size = 4
__Ptr$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Reallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1587
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 1588
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEPAUKeyCombo@@I@Z ; std::_Wrap_alloc<std::allocator<KeyCombo> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
; Line 1590
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 1591
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUKeyCombo@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@PAU2@00@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Umove<KeyCombo *>
	jmp	SHORT $LN5@Reallocate
__catch$?_Reallocate@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z$0:
; Line 1593
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@I@Z ; std::_Wrap_alloc<std::allocator<KeyCombo> >::deallocate
; Line 1594
	push	0
	push	0
	call	__CxxThrowException@8
; Line 1595
	mov	eax, $LN8@Reallocate
	ret	0
$LN5@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Reallocate@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z$1
$LN8@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z$1:
; Line 1597
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::size
	mov	DWORD PTR __Size$[ebp], eax
; Line 1598
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Reallocate
; Line 1600
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXPAUKeyCombo@@0@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Destroy
; Line 1602
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@I@Z ; std::_Wrap_alloc<std::allocator<KeyCombo> >::deallocate
$LN1@Reallocate:
; Line 1605
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 1606
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 1607
	mov	ecx, DWORD PTR __Size$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1608
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN4@Reallocate:
; Line 1609
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Reallocate
; Function compile flags: /Odtp
;	COMDAT ?_Inside@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBE_NPBUKeyCombo@@@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBE_NPBUKeyCombo@@@Z PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1582
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1583
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]
; Line 1584
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBE_NPBUKeyCombo@@@Z ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Grow_to@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEII@Z PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Grow_to, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1571
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1572
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax
; Line 1575
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
; Line 1576
	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to
; Line 1577
	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to:
; Line 1578
	mov	eax, DWORD PTR __Capacity$[ebp]
; Line 1579
	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEII@Z ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXPAUKeyCombo@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXPAUKeyCombo@@0@Z PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1565
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1566
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Getal
; Line 1567
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@@std@@YAXPAUKeyCombo@@0AAU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<KeyCombo> > >
	add	esp, 12					; 0000000cH
; Line 1568
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXPAUKeyCombo@@0@Z ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Buy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1546
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1547
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 1548
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 1549
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 1551
	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy
; Line 1552
	xor	al, al
	jmp	SHORT $LN6@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:
; Line 1553
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy
; Line 1554
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Xlen
; Line 1555
	jmp	SHORT $LN3@Buy
$LN2@Buy:
; Line 1557
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEPAUKeyCombo@@I@Z ; std::_Wrap_alloc<std::allocator<KeyCombo> >::allocate
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1558
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
; Line 1559
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Capacity$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN3@Buy:
; Line 1561
	mov	al, 1
$LN6@Buy:
; Line 1562
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Buy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv182 = -36						; size = 4
tv181 = -32						; size = 4
$T2 = -28						; size = 4
tv188 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
?erase@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::erase, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1438
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T3[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 1441
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN1@erase
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+8]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@erase
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR __Where$[ebp+8]
	ja	SHORT $LN2@erase
$LN1@erase:
; Line 1442
	push	1442					; 000005a2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@erase:
; Line 1443
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	add	ecx, 4
	push	ecx
	call	??$_Move@PAUKeyCombo@@PAU1@@std@@YAPAUKeyCombo@@PAU1@00@Z ; std::_Move<KeyCombo *,KeyCombo *>
	add	esp, 12					; 0000000cH
; Line 1444
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 4
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXPAUKeyCombo@@0@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Destroy
; Line 1445
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXPAUKeyCombo@@0@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Orphan_range
; Line 1446
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 1447
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv188[ebp], eax
	mov	ecx, DWORD PTR tv188[ebp]
	mov	DWORD PTR tv181[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Make_iter
	mov	DWORD PTR tv182[ebp], eax
	mov	eax, DWORD PTR $T3[ebp]
	or	eax, 1
	mov	DWORD PTR $T3[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1448
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z$0:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z$1:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z$2:
	mov	eax, DWORD PTR $T3[ebp]
	and	eax, 1
	je	$LN8@erase
	and	DWORD PTR $T3[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
$LN8@erase:
	ret	0
__ehhandler$?erase@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::erase
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAEXABUKeyCombo@@@Z
_TEXT	SEGMENT
__Idx$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAEXABUKeyCombo@@@Z PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::push_back, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1243
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1244
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@$$CBUKeyCombo@@@std@@YAPBUKeyCombo@@ABU1@@Z ; std::addressof<KeyCombo const >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBE_NPBUKeyCombo@@@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@push_back
; Line 1246
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$addressof@$$CBUKeyCombo@@@std@@YAPBUKeyCombo@@ABU1@@Z ; std::addressof<KeyCombo const >
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
	mov	DWORD PTR __Idx$1[ebp], eax
; Line 1247
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+12]
	jne	SHORT $LN3@push_back
; Line 1248
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Reserve
$LN3@push_back:
; Line 1249
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXPAUKeyCombo@@0@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Orphan_range
; Line 1251
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Idx$1[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Getal
	mov	ecx, eax
	call	??$construct@UKeyCombo@@AAU1@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@AAU2@@Z ; std::_Wrap_alloc<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo &>
; Line 1252
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 1254
	jmp	SHORT $LN5@push_back
$LN4@push_back:
; Line 1256
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+12]
	jne	SHORT $LN1@push_back
; Line 1257
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXI@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Reserve
$LN1@push_back:
; Line 1258
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IBEXPAUKeyCombo@@0@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Orphan_range
; Line 1260
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Getal
	mov	ecx, eax
	call	??$construct@UKeyCombo@@ABU1@@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@ABU2@@Z ; std::_Wrap_alloc<std::allocator<KeyCombo> >::construct<KeyCombo,KeyCombo const &>
; Line 1261
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN5@push_back:
; Line 1263
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAEXABUKeyCombo@@@Z ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??A?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAEAAUKeyCombo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAEAAUKeyCombo@@I@Z PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::operator[], COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1197
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN1@operator
; Line 1201
	push	1201					; 000004b1H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
; Line 1202
	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN4@operator
	xor	ecx, ecx
	jne	SHORT $LN5@operator
$LN4@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	1202					; 000004b2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN5@operator
	int	3
$LN5@operator:
	push	0
	push	1202					; 000004b2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1KC@KHKGAADA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAK?$AAe?$AAy?$AAC?$AAo?$AAm?$AAb?$AAo?$AA?0?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN1@operator:
; Line 1209
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 1210
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAEAAUKeyCombo@@I@Z ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??A?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEABUKeyCombo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEABUKeyCombo@@I@Z PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::operator[], COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1181
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1183
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN1@operator
; Line 1185
	push	1185					; 000004a1H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
; Line 1186
	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN4@operator
	xor	ecx, ecx
	jne	SHORT $LN5@operator
$LN4@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	1186					; 000004a2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN5@operator
	int	3
$LN5@operator:
	push	0
	push	1186					; 000004a2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1KC@KHKGAADA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAK?$AAe?$AAy?$AAC?$AAo?$AAm?$AAb?$AAo?$AA?0?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN1@operator:
; Line 1193
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 1194
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEABUKeyCombo@@I@Z ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1152
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1153
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<KeyCombo> >::max_size
; Line 1154
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?size@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1148
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
; Line 1149
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Make_iter@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
?_Make_iter@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Make_iter, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1044
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Make_iter@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 1045
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1046
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Make_iter@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z$0:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?_Make_iter@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z$1:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN5@Make_iter
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
$LN5@Make_iter:
	ret	0
__ehhandler$?_Make_iter@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Make_iter@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Make_iter@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?end@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::end, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1039
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?end@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1040
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1041
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?end@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@end
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
$LN4@end:
	ret	0
__ehhandler$?end@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?end@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?end@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::end
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::begin, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1029
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1030
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1031
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@begin
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
$LN4@begin:
	ret	0
__ehhandler$?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::begin
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::begin, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1024
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1025
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@PAUKeyCombo@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1026
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@begin
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
$LN4@begin:
	ret	0
__ehhandler$?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::begin
; Function compile flags: /Odtp
;	COMDAT ?_Unused_capacity@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unused_capacity@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Unused_capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1014
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1015
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+8]
	sar	eax, 2
; Line 1016
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unused_capacity@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?capacity@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1009
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1010
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
; Line 1011
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@XZ PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::~vector<KeyCombo,std::allocator<KeyCombo> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 944
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 945
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Tidy
; Line 946
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::~_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::~_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >
__ehhandler$??1?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@XZ ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::~vector<KeyCombo,std::allocator<KeyCombo> >
; Function compile flags: /Odtp
;	COMDAT ??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv178 = -52						; size = 4
$T2 = -48						; size = 4
tv175 = -44						; size = 4
$T3 = -40						; size = 4
tv135 = -36						; size = 4
tv180 = -32						; size = 4
tv69 = -28						; size = 4
_this$ = -24						; size = 4
$T4 = -18						; size = 1
$T5 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<KeyCombo,std::allocator<KeyCombo> >::vector<KeyCombo,std::allocator<KeyCombo> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 721
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Getal
	mov	ecx, eax
	call	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<KeyCombo> >::select_on_container_copy_construction
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@ABV?$allocator@UKeyCombo@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 722
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAE_NI@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Buy
	movzx	edx, al
	test	edx, edx
	je	$LN3@vector
; Line 723
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 725
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T3[ebp], esp
	push	edx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::end
	mov	DWORD PTR tv69[ebp], eax
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv175[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::begin
	mov	DWORD PTR tv180[ebp], eax
	mov	edx, DWORD PTR tv180[ebp]
	mov	DWORD PTR tv178[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEPAUKeyCombo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@1@0PAU2@@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > > >
	mov	DWORD PTR tv135[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN5@vector
__catch$??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z$0:
; Line 727
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@IAEXXZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::_Tidy
; Line 728
	push	0
	push	0
	call	__CxxThrowException@8
; Line 729
	mov	eax, $LN11@vector
	ret	0
$LN5@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN3@vector
$LN11@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector:
; Line 730
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::~_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >
__unwindfunclet$??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z$3:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z$4:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<KeyCombo,std::allocator<KeyCombo> >::vector<KeyCombo,std::allocator<KeyCombo> >
; Function compile flags: /Odtp
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 641
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 642
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<KeyCombo> >::_Wrap_alloc<std::allocator<KeyCombo> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 643
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Free_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 630
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 632
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 633
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 634
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
; Line 635
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
; Line 636
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 637
	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Alloc_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 623
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 624
	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 625
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
; Line 626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 627
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::~_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 607
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 608
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Free_proxy
; Line 609
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::~_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@ABV?$allocator@UKeyCombo@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@ABV?$allocator@UKeyCombo@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 601
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@ABV?$allocator@UKeyCombo@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<KeyCombo> >::_Vector_val<std::_Simple_types<KeyCombo> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 603
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Alloc_proxy
; Line 604
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@ABV?$allocator@UKeyCombo@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@ABV?$allocator@UKeyCombo@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@ABV?$allocator@UKeyCombo@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@@std@@QAE@ABV?$allocator@UKeyCombo@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >::_Vector_alloc<0,std::_Vec_base_types<KeyCombo,std::allocator<KeyCombo> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<KeyCombo> >::~_Vector_val<std::_Simple_types<KeyCombo> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??1?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<KeyCombo> >::~_Vector_val<std::_Simple_types<KeyCombo> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<KeyCombo> >::_Vector_val<std::_Simple_types<KeyCombo> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 480
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 482
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 483
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 484
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 485
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<KeyCombo> >::_Vector_val<std::_Simple_types<KeyCombo> >
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<KeyCombo> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 883
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAIABV?$allocator@UKeyCombo@@@2@@Z ; std::allocator_traits<std::allocator<KeyCombo> >::max_size
	add	esp, 4
; Line 885
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<KeyCombo> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<KeyCombo> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@I@Z ; std::allocator<KeyCombo>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEXPAUKeyCombo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<KeyCombo> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEPAUKeyCombo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEPAUKeyCombo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<KeyCombo> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@UKeyCombo@@@std@@QAEPAUKeyCombo@@I@Z ; std::allocator<KeyCombo>::allocate
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAEPAUKeyCombo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<KeyCombo> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV?$allocator@UKeyCombo@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV?$allocator@UKeyCombo@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<KeyCombo> >::_Wrap_alloc<std::allocator<KeyCombo> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 806
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@UKeyCombo@@@std@@QAE@ABV01@@Z ; std::allocator<KeyCombo>::allocator<KeyCombo>
; Line 807
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV?$allocator@UKeyCombo@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<KeyCombo> >::_Wrap_alloc<std::allocator<KeyCombo> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<KeyCombo> >::_Wrap_alloc<std::allocator<KeyCombo> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@UKeyCombo@@@std@@QAE@XZ	; std::allocator<KeyCombo>::allocator<KeyCombo>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<KeyCombo> >::_Wrap_alloc<std::allocator<KeyCombo> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AU12@XZ PROC ; std::_Wrap_alloc<std::allocator<KeyCombo> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 778
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 779
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SA?AV?$allocator@UKeyCombo@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<KeyCombo> >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QAE@ABV?$allocator@UKeyCombo@@@1@@Z ; std::_Wrap_alloc<std::allocator<KeyCombo> >::_Wrap_alloc<std::allocator<KeyCombo> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 780
	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@UKeyCombo@@@std@@@std@@QBE?AU12@XZ ENDP ; std::_Wrap_alloc<std::allocator<KeyCombo> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SA?AV?$allocator@UKeyCombo@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SA?AV?$allocator@UKeyCombo@@@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<KeyCombo> >::select_on_container_copy_construction, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 740
	push	ebp
	mov	ebp, esp
; Line 741
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?select_on_container_copy_construction@?$allocator@UKeyCombo@@@std@@QBE?AV12@XZ ; std::allocator<KeyCombo>::select_on_container_copy_construction
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 742
	pop	ebp
	ret	0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SA?AV?$allocator@UKeyCombo@@@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<KeyCombo> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAIABV?$allocator@UKeyCombo@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAIABV?$allocator@UKeyCombo@@@2@@Z PROC ; std::allocator_traits<std::allocator<KeyCombo> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 734
	push	ebp
	mov	ebp, esp
; Line 735
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@UKeyCombo@@@std@@QBEIXZ ; std::allocator<KeyCombo>::max_size
; Line 736
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@UKeyCombo@@@std@@@std@@SAIABV?$allocator@UKeyCombo@@@2@@Z ENDP ; std::allocator_traits<std::allocator<KeyCombo> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator@UKeyCombo@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@UKeyCombo@@@std@@QBEIXZ PROC	; std::allocator<KeyCombo>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 611
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 612
	mov	eax, 1073741823				; 3fffffffH
; Line 613
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@UKeyCombo@@@std@@QBEIXZ ENDP	; std::allocator<KeyCombo>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv69 = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@ABU3@@Z PROC ; std::allocator<KeyCombo>::construct, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 592
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 593
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN1@construct
$LN3@construct:
	mov	DWORD PTR tv69[ebp], 0
$LN1@construct:
; Line 594
	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@ABU3@@Z ENDP ; std::allocator<KeyCombo>::construct
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@UKeyCombo@@@std@@QAEPAUKeyCombo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UKeyCombo@@@std@@QAEPAUKeyCombo@@I@Z PROC ; std::allocator<KeyCombo>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@UKeyCombo@@@std@@YAPAUKeyCombo@@IPAU1@@Z ; std::_Allocate<KeyCombo>
	add	esp, 8
; Line 579
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@UKeyCombo@@@std@@QAEPAUKeyCombo@@I@Z ENDP ; std::allocator<KeyCombo>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@I@Z PROC ; std::allocator<KeyCombo>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UKeyCombo@@@std@@QAEXPAUKeyCombo@@I@Z ENDP ; std::allocator<KeyCombo>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@UKeyCombo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UKeyCombo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<KeyCombo>::allocator<KeyCombo>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 556
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 558
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@UKeyCombo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<KeyCombo>::allocator<KeyCombo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@UKeyCombo@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UKeyCombo@@@std@@QAE@XZ PROC		; std::allocator<KeyCombo>::allocator<KeyCombo>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UKeyCombo@@@std@@QAE@XZ ENDP		; std::allocator<KeyCombo>::allocator<KeyCombo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$allocator@UKeyCombo@@@std@@QBE?AV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$allocator@UKeyCombo@@@std@@QBE?AV12@XZ PROC ; std::allocator<KeyCombo>::select_on_container_copy_construction, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 532
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 533
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$allocator@UKeyCombo@@@std@@QAE@ABV01@@Z ; std::allocator<KeyCombo>::allocator<KeyCombo>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 534
	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$allocator@UKeyCombo@@@std@@QBE?AV12@XZ ENDP ; std::allocator<KeyCombo>::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?doDialog@ScintillaKeyMap@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?doDialog@ScintillaKeyMap@@UAEHXZ PROC			; ScintillaKeyMap::doDialog, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.h
; Line 233
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 234
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	OFFSET ?dlgProc@StaticDialog@@KGHPAUHWND__@@IIJ@Z ; StaticDialog::dlgProc
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	5001					; 00001389H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__DialogBoxParamW@20
; Line 235
	mov	esp, ebp
	pop	ebp
	ret	0
?doDialog@ScintillaKeyMap@@UAEHXZ ENDP			; ScintillaKeyMap::doDialog
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -84						; size = 4
_kc$ = -80						; size = 4
$T2 = -76						; size = 4
_keyString$ = -72					; size = 28
_sc$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_index$ = 12						; size = 4
?toString@ScintillaKeyMap@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z PROC ; ScintillaKeyMap::toString
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 215
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?toString@ScintillaKeyMap@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 216
	push	OFFSET $SG169311
	lea	ecx, DWORD PTR _sc$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 217
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@toString
; Line 218
	lea	edx, DWORD PTR _sc$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _sc$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN5@toString
$LN4@toString:
; Line 220
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	??A?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEABUKeyCombo@@I@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _kc$[ebp], edx
; Line 221
	movzx	eax, BYTE PTR _kc$[ebp]
	test	eax, eax
	je	SHORT $LN3@toString
; Line 222
	push	OFFSET $SG169315
	lea	ecx, DWORD PTR _sc$[ebp]
	call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
$LN3@toString:
; Line 223
	movzx	ecx, BYTE PTR _kc$[ebp+1]
	test	ecx, ecx
	je	SHORT $LN2@toString
; Line 224
	push	OFFSET $SG169317
	lea	ecx, DWORD PTR _sc$[ebp]
	call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
$LN2@toString:
; Line 225
	movzx	edx, BYTE PTR _kc$[ebp+2]
	test	edx, edx
	je	SHORT $LN1@toString
; Line 226
	push	OFFSET $SG169319
	lea	ecx, DWORD PTR _sc$[ebp]
	call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
$LN1@toString:
; Line 228
	lea	ecx, DWORD PTR _keyString$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 229
	lea	eax, DWORD PTR _keyString$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _kc$[ebp+3]
	push	ecx
	call	?getKeyStrFromVal@@YAXEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; getKeyStrFromVal
	add	esp, 8
; Line 230
	lea	edx, DWORD PTR _keyString$[ebp]
	push	edx
	lea	ecx, DWORD PTR _sc$[ebp]
	call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
; Line 231
	lea	eax, DWORD PTR _sc$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 1
	mov	DWORD PTR $T2[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _keyString$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _sc$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN5@toString:
; Line 232
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?toString@ScintillaKeyMap@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z$0:
	lea	ecx, DWORD PTR _sc$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?toString@ScintillaKeyMap@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z$1:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN9@toString
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN9@toString:
	ret	0
__unwindfunclet$?toString@ScintillaKeyMap@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z$2:
	lea	ecx, DWORD PTR _keyString$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?toString@ScintillaKeyMap@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?toString@ScintillaKeyMap@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?toString@ScintillaKeyMap@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z ENDP ; ScintillaKeyMap::toString
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?toString@ScintillaKeyMap@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ PROC ; ScintillaKeyMap::toString
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 211
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?toString@ScintillaKeyMap@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 212
	push	0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?toString@ScintillaKeyMap@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z ; ScintillaKeyMap::toString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 1
	mov	DWORD PTR $T2[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 213
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?toString@ScintillaKeyMap@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	SHORT $LN4@toString
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN4@toString:
	ret	0
__ehhandler$?toString@ScintillaKeyMap@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?toString@ScintillaKeyMap@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?toString@ScintillaKeyMap@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ENDP ; ScintillaKeyMap::toString
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSize@ScintillaKeyMap@@QBEIXZ PROC			; ScintillaKeyMap::getSize
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 273
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 274
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+320]
; Line 275
	mov	esp, ebp
	pop	ebp
	ret	0
?getSize@ScintillaKeyMap@@QBEIXZ ENDP			; ScintillaKeyMap::getSize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv71 = -4						; size = 4
?isEnabled@ScintillaKeyMap@@UBE_NXZ PROC		; ScintillaKeyMap::isEnabled
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 269
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 270
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	??A?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEABUKeyCombo@@I@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::operator[]
	movzx	eax, BYTE PTR [eax+3]
	test	eax, eax
	je	SHORT $LN3@isEnabled
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN4@isEnabled
$LN3@isEnabled:
	mov	DWORD PTR tv71[ebp], 0
$LN4@isEnabled:
	mov	al, BYTE PTR tv71[ebp]
; Line 271
	mov	esp, ebp
	pop	ebp
	ret	0
?isEnabled@ScintillaKeyMap@@UBE_NXZ ENDP		; ScintillaKeyMap::isEnabled
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_kc$1 = -12						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
_combo$ = 8						; size = 4
?addKeyCombo@ScintillaKeyMap@@QAEHUKeyCombo@@@Z PROC	; ScintillaKeyMap::addKeyCombo
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 252
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 253
	movzx	eax, BYTE PTR _combo$[ebp+3]
	test	eax, eax
	jne	SHORT $LN6@addKeyComb
; Line 254
	or	eax, -1
	jmp	$LN7@addKeyComb
$LN6@addKeyComb:
; Line 255
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN5@addKeyComb
; Line 256
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	??A?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAEAAUKeyCombo@@I@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::operator[]
	mov	edx, DWORD PTR _combo$[ebp]
	mov	DWORD PTR [eax], edx
; Line 257
	xor	eax, eax
	jmp	$LN7@addKeyComb
$LN5@addKeyComb:
; Line 259
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@addKeyComb
$LN3@addKeyComb:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@addKeyComb:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$2[ebp]
	cmp	edx, DWORD PTR [ecx+320]
	jae	SHORT $LN2@addKeyComb
; Line 260
	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	??A?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAEAAUKeyCombo@@I@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::operator[]
	mov	DWORD PTR _kc$1[ebp], eax
; Line 261
	movzx	ecx, BYTE PTR _combo$[ebp+3]
	mov	edx, DWORD PTR _kc$1[ebp]
	movzx	eax, BYTE PTR [edx+3]
	cmp	ecx, eax
	jne	SHORT $LN1@addKeyComb
	movzx	ecx, BYTE PTR _combo$[ebp]
	mov	edx, DWORD PTR _kc$1[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jne	SHORT $LN1@addKeyComb
	movzx	ecx, BYTE PTR _combo$[ebp+1]
	mov	edx, DWORD PTR _kc$1[ebp]
	movzx	eax, BYTE PTR [edx+1]
	cmp	ecx, eax
	jne	SHORT $LN1@addKeyComb
	movzx	ecx, BYTE PTR _combo$[ebp+2]
	mov	edx, DWORD PTR _kc$1[ebp]
	movzx	eax, BYTE PTR [edx+2]
	cmp	ecx, eax
	jne	SHORT $LN1@addKeyComb
; Line 262
	mov	eax, DWORD PTR _i$2[ebp]
	jmp	SHORT $LN7@addKeyComb
$LN1@addKeyComb:
; Line 263
	jmp	SHORT $LN3@addKeyComb
$LN2@addKeyComb:
; Line 264
	lea	ecx, DWORD PTR _combo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	?push_back@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAEXABUKeyCombo@@@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::push_back
; Line 265
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+320]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+320], eax
; Line 266
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+320]
	sub	eax, 1
$LN7@addKeyComb:
; Line 267
	mov	esp, ebp
	pop	ebp
	ret	4
?addKeyCombo@ScintillaKeyMap@@QAEHUKeyCombo@@@Z ENDP	; ScintillaKeyMap::addKeyCombo
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T2 = -84						; size = 12
$T3 = -72						; size = 12
$T4 = -60						; size = 12
tv146 = -48						; size = 4
tv145 = -44						; size = 4
$T5 = -40						; size = 4
tv150 = -36						; size = 4
tv143 = -32						; size = 4
tv149 = -28						; size = 4
tv141 = -24						; size = 4
tv148 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
?removeKeyComboByIndex@ScintillaKeyMap@@QAEXH@Z PROC	; ScintillaKeyMap::removeKeyComboByIndex
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 245
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?removeKeyComboByIndex@ScintillaKeyMap@@QAEXH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 246
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+320], 1
	jbe	$LN2@removeKeyC
	cmp	DWORD PTR _index$[ebp], -1
	jle	$LN2@removeKeyC
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _index$[ebp]
	cmp	edx, DWORD PTR [ecx+320]
	jge	$LN2@removeKeyC
; Line 247
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::begin
	mov	DWORD PTR tv148[ebp], eax
	mov	eax, DWORD PTR tv148[ebp]
	mov	DWORD PTR tv141[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv141[ebp]
	call	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::operator+
	mov	DWORD PTR tv149[ebp], eax
	mov	ecx, DWORD PTR tv149[ebp]
	mov	DWORD PTR tv143[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T5[ebp], esp
	mov	edx, DWORD PTR tv143[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv150[ebp], eax
	mov	eax, DWORD PTR tv150[ebp]
	mov	DWORD PTR tv145[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	?erase@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::erase
	mov	DWORD PTR tv146[ebp], eax
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
; Line 248
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+320]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+320], eax
$LN2@removeKeyC:
; Line 250
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?removeKeyComboByIndex@ScintillaKeyMap@@QAEXH@Z$0:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?removeKeyComboByIndex@ScintillaKeyMap@@QAEXH@Z$1:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?removeKeyComboByIndex@ScintillaKeyMap@@QAEXH@Z$2:
	mov	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?removeKeyComboByIndex@ScintillaKeyMap@@QAEXH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?removeKeyComboByIndex@ScintillaKeyMap@@QAEXH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?removeKeyComboByIndex@ScintillaKeyMap@@QAEXH@Z ENDP	; ScintillaKeyMap::removeKeyComboByIndex
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T2 = -84						; size = 12
$T3 = -72						; size = 12
$T4 = -60						; size = 12
tv145 = -48						; size = 4
tv144 = -44						; size = 4
$T5 = -40						; size = 4
tv149 = -36						; size = 4
tv142 = -32						; size = 4
tv148 = -28						; size = 4
tv140 = -24						; size = 4
tv147 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
_combo$ = 12						; size = 4
?setKeyComboByIndex@ScintillaKeyMap@@QAEXHUKeyCombo@@@Z PROC ; ScintillaKeyMap::setKeyComboByIndex
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 238
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?setKeyComboByIndex@ScintillaKeyMap@@QAEXHUKeyCombo@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 239
	movzx	eax, BYTE PTR _combo$[ebp+3]
	test	eax, eax
	jne	$LN1@setKeyComb
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+320], 1
	jbe	$LN1@setKeyComb
; Line 240
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	?begin@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@XZ ; std::vector<KeyCombo,std::allocator<KeyCombo> >::begin
	mov	DWORD PTR tv147[ebp], eax
	mov	edx, DWORD PTR tv147[ebp]
	mov	DWORD PTR tv140[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv140[ebp]
	call	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<KeyCombo> > >::operator+
	mov	DWORD PTR tv148[ebp], eax
	mov	eax, DWORD PTR tv148[ebp]
	mov	DWORD PTR tv142[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T5[ebp], esp
	mov	edx, DWORD PTR tv142[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv149[ebp], eax
	mov	eax, DWORD PTR tv149[ebp]
	mov	DWORD PTR tv144[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	?erase@?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@2@@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::erase
	mov	DWORD PTR tv145[ebp], eax
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
$LN1@setKeyComb:
; Line 242
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	??A?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QAEAAUKeyCombo@@I@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::operator[]
	mov	ecx, DWORD PTR _combo$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 243
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?setKeyComboByIndex@ScintillaKeyMap@@QAEXHUKeyCombo@@@Z$0:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?setKeyComboByIndex@ScintillaKeyMap@@QAEXHUKeyCombo@@@Z$1:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?setKeyComboByIndex@ScintillaKeyMap@@QAEXHUKeyCombo@@@Z$2:
	mov	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UKeyCombo@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?setKeyComboByIndex@ScintillaKeyMap@@QAEXHUKeyCombo@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?setKeyComboByIndex@ScintillaKeyMap@@QAEXHUKeyCombo@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?setKeyComboByIndex@ScintillaKeyMap@@QAEXHUKeyCombo@@@Z ENDP ; ScintillaKeyMap::setKeyComboByIndex
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_index$ = 12						; size = 4
?getKeyComboByIndex@ScintillaKeyMap@@QBE?AUKeyCombo@@H@Z PROC ; ScintillaKeyMap::getKeyComboByIndex
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 234
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 235
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	??A?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEABUKeyCombo@@I@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 236
	mov	esp, ebp
	pop	ebp
	ret	8
?getKeyComboByIndex@ScintillaKeyMap@@QBE?AUKeyCombo@@H@Z ENDP ; ScintillaKeyMap::getKeyComboByIndex
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?toKeyDef@ScintillaKeyMap@@QBEHH@Z
_TEXT	SEGMENT
_keymod$ = -24						; size = 4
_this$ = -20						; size = 4
tv78 = -16						; size = 4
tv74 = -12						; size = 4
tv71 = -8						; size = 4
_kc$ = -4						; size = 4
_index$ = 8						; size = 4
?toKeyDef@ScintillaKeyMap@@QBEHH@Z PROC			; ScintillaKeyMap::toKeyDef, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.h
; Line 212
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx
; Line 213
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	??A?$vector@UKeyCombo@@V?$allocator@UKeyCombo@@@std@@@std@@QBEABUKeyCombo@@I@Z ; std::vector<KeyCombo,std::allocator<KeyCombo> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _kc$[ebp], ecx
; Line 214
	movzx	edx, BYTE PTR _kc$[ebp]
	test	edx, edx
	je	SHORT $LN3@toKeyDef
	mov	DWORD PTR tv71[ebp], 2
	jmp	SHORT $LN4@toKeyDef
$LN3@toKeyDef:
	mov	DWORD PTR tv71[ebp], 0
$LN4@toKeyDef:
	movzx	eax, BYTE PTR _kc$[ebp+1]
	test	eax, eax
	je	SHORT $LN5@toKeyDef
	mov	DWORD PTR tv74[ebp], 4
	jmp	SHORT $LN6@toKeyDef
$LN5@toKeyDef:
	mov	DWORD PTR tv74[ebp], 0
$LN6@toKeyDef:
	movzx	ecx, BYTE PTR _kc$[ebp+2]
	test	ecx, ecx
	je	SHORT $LN7@toKeyDef
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN8@toKeyDef
$LN7@toKeyDef:
	mov	DWORD PTR tv78[ebp], 0
$LN8@toKeyDef:
	mov	edx, DWORD PTR tv71[ebp]
	or	edx, DWORD PTR tv74[ebp]
	or	edx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _keymod$[ebp], edx
; Line 215
	movzx	eax, BYTE PTR _kc$[ebp+3]
	push	eax
	call	?keyTranslate@@YAHH@Z			; keyTranslate
	add	esp, 4
	mov	ecx, DWORD PTR _keymod$[ebp]
	shl	ecx, 16					; 00000010H
	add	eax, ecx
; Line 216
	mov	esp, ebp
	pop	ebp
	ret	4
?toKeyDef@ScintillaKeyMap@@QBEHH@Z ENDP			; ScintillaKeyMap::toKeyDef
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getMenuCmdID@ScintillaKeyMap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMenuCmdID@ScintillaKeyMap@@QBEHXZ PROC		; ScintillaKeyMap::getMenuCmdID, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.h
; Line 211
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+300]
	mov	esp, ebp
	pop	ebp
	ret	0
?getMenuCmdID@ScintillaKeyMap@@QBEHXZ ENDP		; ScintillaKeyMap::getMenuCmdID
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getScintillaKeyID@ScintillaKeyMap@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getScintillaKeyID@ScintillaKeyMap@@QBEKXZ PROC		; ScintillaKeyMap::getScintillaKeyID, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.h
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+296]
	mov	esp, ebp
	pop	ebp
	ret	0
?getScintillaKeyID@ScintillaKeyMap@@QBEKXZ ENDP		; ScintillaKeyMap::getScintillaKeyID
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCommandShortcut@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCommandShortcut@@UAEPAXI@Z PROC			; CommandShortcut::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CommandShortcut@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCommandShortcut@@UAEPAXI@Z ENDP			; CommandShortcut::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0CommandShortcut@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CommandShortcut@@QAE@ABV0@@Z PROC			; CommandShortcut::CommandShortcut, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CommandShortcut@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Shortcut@@QAE@ABV0@@Z		; Shortcut::Shortcut
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7CommandShortcut@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	mov	DWORD PTR [edx+296], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CommandShortcut@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Shortcut@@UAE@XZ
__ehhandler$??0CommandShortcut@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CommandShortcut@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CommandShortcut@@QAE@ABV0@@Z ENDP			; CommandShortcut::CommandShortcut
; Function compile flags: /Odtp
;	COMDAT ??1CommandShortcut@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CommandShortcut@@UAE@XZ PROC				; CommandShortcut::~CommandShortcut, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CommandShortcut@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Shortcut@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CommandShortcut@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Shortcut@@UAE@XZ
__ehhandler$??1CommandShortcut@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CommandShortcut@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CommandShortcut@@UAE@XZ ENDP				; CommandShortcut::~CommandShortcut
; Function compile flags: /Odtp
;	COMDAT ?getID@CommandShortcut@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getID@CommandShortcut@@QBEKXZ PROC			; CommandShortcut::getID, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.h
; Line 194
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+296]
	mov	esp, ebp
	pop	ebp
	ret	0
?getID@CommandShortcut@@QBEKXZ ENDP			; CommandShortcut::getID
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GShortcut@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GShortcut@@UAEPAXI@Z PROC				; Shortcut::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Shortcut@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GShortcut@@UAEPAXI@Z ENDP				; Shortcut::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1Shortcut@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Shortcut@@UAE@XZ PROC				; Shortcut::~Shortcut, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1Shortcut@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1StaticDialog@@UAE@XZ			; StaticDialog::~StaticDialog
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Shortcut@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1StaticDialog@@UAE@XZ			; StaticDialog::~StaticDialog
__ehhandler$??1Shortcut@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1Shortcut@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1Shortcut@@UAE@XZ ENDP				; Shortcut::~Shortcut
; Function compile flags: /Odtp
_TEXT	SEGMENT
_i$1 = -212						; size = 4
_textlen$2 = -208					; size = 4
tv167 = -204						; size = 4
tv137 = -200						; size = 4
tv292 = -196						; size = 4
tv238 = -192						; size = 4
tv482 = -188						; size = 4
tv316 = -184						; size = 4
tv465 = -180						; size = 4
tv64 = -176						; size = 4
tv416 = -172						; size = 4
tv187 = -168						; size = 4
tv353 = -164						; size = 4
tv152 = -160						; size = 4
tv329 = -156						; size = 4
tv279 = -152						; size = 4
_iFound$3 = -148					; size = 4
_textlen$4 = -144					; size = 4
_i$5 = -140						; size = 4
tv264 = -136						; size = 4
_editName$6 = -132					; size = 128
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_Message$ = 12						; size = 4
_wParam$ = 16						; size = 4
___formal$ = 20						; size = 4
?run_dlgProc@Shortcut@@MAGHIIJ@Z PROC			; Shortcut::run_dlgProc
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 358
	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 359
	mov	eax, DWORD PTR _Message$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 272		; 00000110H
	je	SHORT $LN24@run_dlgPro
	cmp	DWORD PTR tv64[ebp], 273		; 00000111H
	je	$LN17@run_dlgPro
	jmp	$LN1@run_dlgPro
$LN24@run_dlgPro:
; Line 363
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getMenuName@Shortcut@@QBEPB_WXZ	; Shortcut::getMenuName
	push	eax
	push	5005					; 0000138dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__SetDlgItemTextW@12
; Line 364
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+36]
	test	ecx, ecx
	jne	SHORT $LN23@run_dlgPro
; Line 365
	push	0
	push	1
	push	207					; 000000cfH
	push	5005					; 0000138dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageW@20
$LN23@run_dlgPro:
; Line 366
	push	0
	push	0
	push	14					; 0000000eH
	push	5005					; 0000138dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	mov	DWORD PTR _textlen$2[ebp], eax
; Line 368
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	je	SHORT $LN29@run_dlgPro
	mov	DWORD PTR tv137[ebp], 1
	jmp	SHORT $LN30@run_dlgPro
$LN29@run_dlgPro:
	mov	DWORD PTR tv137[ebp], 0
$LN30@run_dlgPro:
	push	0
	mov	edx, DWORD PTR tv137[ebp]
	push	edx
	push	241					; 000000f1H
	push	5001					; 00001389H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
; Line 369
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+33]
	test	eax, eax
	je	SHORT $LN31@run_dlgPro
	mov	DWORD PTR tv152[ebp], 1
	jmp	SHORT $LN32@run_dlgPro
$LN31@run_dlgPro:
	mov	DWORD PTR tv152[ebp], 0
$LN32@run_dlgPro:
	push	0
	mov	ecx, DWORD PTR tv152[ebp]
	push	ecx
	push	241					; 000000f1H
	push	5002					; 0000138aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageW@20
; Line 370
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+34]
	test	edx, edx
	je	SHORT $LN33@run_dlgPro
	mov	DWORD PTR tv167[ebp], 1
	jmp	SHORT $LN34@run_dlgPro
$LN33@run_dlgPro:
	mov	DWORD PTR tv167[ebp], 0
$LN34@run_dlgPro:
	push	0
	mov	eax, DWORD PTR tv167[ebp]
	push	eax
	push	241					; 000000f1H
	push	5003					; 0000138bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
; Line 371
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN36@run_dlgPro
	cmp	DWORD PTR _textlen$2[ebp], 0
	jg	SHORT $LN35@run_dlgPro
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+36]
	test	eax, eax
	jne	SHORT $LN36@run_dlgPro
$LN35@run_dlgPro:
	mov	DWORD PTR tv187[ebp], 1
	jmp	SHORT $LN37@run_dlgPro
$LN36@run_dlgPro:
	mov	DWORD PTR tv187[ebp], 0
$LN37@run_dlgPro:
	mov	ecx, DWORD PTR tv187[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 372
	mov	DWORD PTR _iFound$3[ebp], -1
; Line 373
	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN22@run_dlgPro
$LN21@run_dlgPro:
	mov	ecx, DWORD PTR _i$5[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$5[ebp], ecx
$LN22@run_dlgPro:
	cmp	DWORD PTR _i$5[ebp], 91			; 0000005bH
	jae	SHORT $LN20@run_dlgPro
; Line 375
	mov	edx, DWORD PTR _i$5[ebp]
	mov	eax, DWORD PTR ?namedKeyArray@@3PAUKeyIDNAME@@A[edx*8]
	push	eax
	push	0
	push	323					; 00000143H
	push	5004					; 0000138cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
; Line 377
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+35]
	mov	edx, DWORD PTR _i$5[ebp]
	movzx	eax, BYTE PTR ?namedKeyArray@@3PAUKeyIDNAME@@A[edx*8+4]
	cmp	ecx, eax
	jne	SHORT $LN19@run_dlgPro
; Line 378
	mov	ecx, DWORD PTR _i$5[ebp]
	mov	DWORD PTR _iFound$3[ebp], ecx
$LN19@run_dlgPro:
; Line 379
	jmp	SHORT $LN21@run_dlgPro
$LN20@run_dlgPro:
; Line 381
	cmp	DWORD PTR _iFound$3[ebp], -1
	je	SHORT $LN18@run_dlgPro
; Line 382
	push	0
	mov	edx, DWORD PTR _iFound$3[ebp]
	push	edx
	push	334					; 0000014eH
	push	5004					; 0000138cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
$LN18@run_dlgPro:
; Line 383
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+68]
	call	edx
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN38@run_dlgPro
	mov	DWORD PTR tv238[ebp], 0
	jmp	SHORT $LN39@run_dlgPro
$LN38@run_dlgPro:
	mov	DWORD PTR tv238[ebp], 5
$LN39@run_dlgPro:
	mov	ecx, DWORD PTR tv238[ebp]
	push	ecx
	push	5007					; 0000138fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__ShowWindow@8
; Line 385
	mov	ecx, DWORD PTR _this$[ebp]
	call	?goToCenter@StaticDialog@@QAEXXZ	; StaticDialog::goToCenter
; Line 386
	mov	eax, 1
	jmp	$LN27@run_dlgPro
$LN17@run_dlgPro:
; Line 391
	push	0
	push	0
	push	14					; 0000000eH
	push	5005					; 0000138dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	mov	DWORD PTR _textlen$4[ebp], eax
; Line 392
	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv264[ebp], eax
	cmp	DWORD PTR tv264[ebp], 5001		; 00001389H
	ja	SHORT $LN60@run_dlgPro
	cmp	DWORD PTR tv264[ebp], 5001		; 00001389H
	je	SHORT $LN14@run_dlgPro
	cmp	DWORD PTR tv264[ebp], 1
	je	$LN11@run_dlgPro
	cmp	DWORD PTR tv264[ebp], 2
	je	$LN8@run_dlgPro
	jmp	$LN7@run_dlgPro
$LN60@run_dlgPro:
	cmp	DWORD PTR tv264[ebp], 5002		; 0000138aH
	je	$LN13@run_dlgPro
	cmp	DWORD PTR tv264[ebp], 5003		; 0000138bH
	je	$LN12@run_dlgPro
	jmp	$LN7@run_dlgPro
$LN14@run_dlgPro:
; Line 395
	push	0
	push	0
	push	240					; 000000f0H
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	cmp	eax, 1
	jne	SHORT $LN40@run_dlgPro
	mov	DWORD PTR tv279[ebp], 1
	jmp	SHORT $LN41@run_dlgPro
$LN40@run_dlgPro:
	mov	DWORD PTR tv279[ebp], 0
$LN41@run_dlgPro:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv279[ebp]
	mov	BYTE PTR [ecx+32], dl
; Line 396
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN43@run_dlgPro
	cmp	DWORD PTR _textlen$4[ebp], 0
	jg	SHORT $LN42@run_dlgPro
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+36]
	test	eax, eax
	jne	SHORT $LN43@run_dlgPro
$LN42@run_dlgPro:
	mov	DWORD PTR tv292[ebp], 1
	jmp	SHORT $LN44@run_dlgPro
$LN43@run_dlgPro:
	mov	DWORD PTR tv292[ebp], 0
$LN44@run_dlgPro:
	mov	ecx, DWORD PTR tv292[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 397
	mov	eax, 1
	jmp	$LN27@run_dlgPro
$LN13@run_dlgPro:
; Line 400
	push	0
	push	0
	push	240					; 000000f0H
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	cmp	eax, 1
	jne	SHORT $LN45@run_dlgPro
	mov	DWORD PTR tv316[ebp], 1
	jmp	SHORT $LN46@run_dlgPro
$LN45@run_dlgPro:
	mov	DWORD PTR tv316[ebp], 0
$LN46@run_dlgPro:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv316[ebp]
	mov	BYTE PTR [ecx+33], dl
; Line 401
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN48@run_dlgPro
	cmp	DWORD PTR _textlen$4[ebp], 0
	jg	SHORT $LN47@run_dlgPro
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+36]
	test	eax, eax
	jne	SHORT $LN48@run_dlgPro
$LN47@run_dlgPro:
	mov	DWORD PTR tv329[ebp], 1
	jmp	SHORT $LN49@run_dlgPro
$LN48@run_dlgPro:
	mov	DWORD PTR tv329[ebp], 0
$LN49@run_dlgPro:
	mov	ecx, DWORD PTR tv329[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 402
	mov	eax, 1
	jmp	$LN27@run_dlgPro
$LN12@run_dlgPro:
; Line 405
	push	0
	push	0
	push	240					; 000000f0H
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	cmp	eax, 1
	jne	SHORT $LN50@run_dlgPro
	mov	DWORD PTR tv353[ebp], 1
	jmp	SHORT $LN51@run_dlgPro
$LN50@run_dlgPro:
	mov	DWORD PTR tv353[ebp], 0
$LN51@run_dlgPro:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv353[ebp]
	mov	BYTE PTR [ecx+34], dl
; Line 406
	mov	eax, 1
	jmp	$LN27@run_dlgPro
$LN11@run_dlgPro:
; Line 409
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN10@run_dlgPro
; Line 410
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+34], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+33], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+32], 0
$LN10@run_dlgPro:
; Line 412
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+36]
	test	eax, eax
	je	SHORT $LN9@run_dlgPro
; Line 414
	lea	ecx, DWORD PTR _editName$6[ebp]
	push	ecx
	push	64					; 00000040H
	push	13					; 0000000dH
	push	5005					; 0000138dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageW@20
; Line 415
	lea	ecx, DWORD PTR _editName$6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setName@Shortcut@@QAEXPB_W@Z		; Shortcut::setName
$LN9@run_dlgPro:
; Line 417
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__EndDialog@8
; Line 418
	mov	eax, 1
	jmp	$LN27@run_dlgPro
$LN8@run_dlgPro:
; Line 421
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__EndDialog@8
; Line 422
	mov	eax, 1
	jmp	$LN27@run_dlgPro
$LN7@run_dlgPro:
; Line 425
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	cmp	ecx, 768				; 00000300H
	jne	SHORT $LN6@run_dlgPro
; Line 427
	mov	edx, DWORD PTR _wParam$[ebp]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	cmp	eax, 5005				; 0000138dH
	jne	SHORT $LN5@run_dlgPro
; Line 429
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN53@run_dlgPro
	cmp	DWORD PTR _textlen$4[ebp], 0
	jg	SHORT $LN52@run_dlgPro
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+36]
	test	eax, eax
	jne	SHORT $LN53@run_dlgPro
$LN52@run_dlgPro:
	mov	DWORD PTR tv416[ebp], 1
	jmp	SHORT $LN54@run_dlgPro
$LN53@run_dlgPro:
	mov	DWORD PTR tv416[ebp], 0
$LN54@run_dlgPro:
	mov	ecx, DWORD PTR tv416[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 430
	mov	eax, 1
	jmp	$LN27@run_dlgPro
$LN5@run_dlgPro:
; Line 432
	jmp	$LN4@run_dlgPro
$LN6@run_dlgPro:
; Line 433
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 1
	jne	$LN4@run_dlgPro
; Line 435
	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	cmp	ecx, 5004				; 0000138cH
	jne	$LN4@run_dlgPro
; Line 437
	push	0
	push	0
	push	327					; 00000147H
	mov	edx, DWORD PTR _wParam$[ebp]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	mov	DWORD PTR _i$1[ebp], eax
; Line 438
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	dl, BYTE PTR ?namedKeyArray@@3PAUKeyIDNAME@@A[ecx*8+4]
	mov	BYTE PTR [eax+35], dl
; Line 439
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN56@run_dlgPro
	cmp	DWORD PTR _textlen$4[ebp], 0
	jg	SHORT $LN55@run_dlgPro
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+36]
	test	eax, eax
	jne	SHORT $LN56@run_dlgPro
$LN55@run_dlgPro:
	mov	DWORD PTR tv465[ebp], 1
	jmp	SHORT $LN57@run_dlgPro
$LN56@run_dlgPro:
	mov	DWORD PTR tv465[ebp], 0
$LN57@run_dlgPro:
	mov	ecx, DWORD PTR tv465[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 440
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN58@run_dlgPro
	mov	DWORD PTR tv482[ebp], 0
	jmp	SHORT $LN59@run_dlgPro
$LN58@run_dlgPro:
	mov	DWORD PTR tv482[ebp], 5
$LN59@run_dlgPro:
	mov	edx, DWORD PTR tv482[ebp]
	push	edx
	push	5007					; 0000138fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__ShowWindow@8
; Line 441
	mov	eax, 1
	jmp	SHORT $LN27@run_dlgPro
$LN4@run_dlgPro:
; Line 444
	xor	eax, eax
	jmp	SHORT $LN27@run_dlgPro
$LN1@run_dlgPro:
; Line 448
	xor	eax, eax
$LN27@run_dlgPro:
; Line 450
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?run_dlgProc@Shortcut@@MAGHIIJ@Z ENDP			; Shortcut::run_dlgProc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_i$ = -8						; size = 4
_j$ = -4						; size = 4
_name$ = 8						; size = 4
?setName@Shortcut@@QAEXPB_W@Z PROC			; Shortcut::setName
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 191
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
; Line 192
	push	64					; 00000040H
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 166				; 000000a6H
	push	ecx
	call	DWORD PTR __imp__lstrcpynW@12
; Line 193
	push	64					; 00000040H
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 38					; 00000026H
	push	eax
	call	DWORD PTR __imp__lstrcpynW@12
; Line 194
	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0
$LN5@setName:
; Line 195
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _name$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	test	eax, eax
	je	SHORT $LN4@setName
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jae	SHORT $LN4@setName
; Line 196
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _name$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 38					; 00000026H
	je	SHORT $LN3@setName
; Line 197
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _name$[ebp]
	mov	ax, WORD PTR [esi+eax*2]
	mov	WORD PTR [edx+ecx*2+38], ax
; Line 198
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
; Line 199
	jmp	SHORT $LN2@setName
$LN3@setName:
; Line 200
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _name$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2+2]
	cmp	ecx, 38					; 00000026H
	jne	SHORT $LN2@setName
; Line 201
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _name$[ebp]
	mov	cx, WORD PTR [esi+ecx*2]
	mov	WORD PTR [eax+edx*2+38], cx
; Line 202
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 203
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN2@setName:
; Line 206
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
; Line 207
	jmp	$LN5@setName
$LN4@setName:
; Line 208
	xor	edx, edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax*2+38], dx
; Line 209
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?setName@Shortcut@@QAEXPB_W@Z ENDP			; Shortcut::setName
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getMenuName@Shortcut@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMenuName@Shortcut@@QBEPB_WXZ PROC			; Shortcut::getMenuName, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.h
; Line 177
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 178
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 166				; 000000a6H
; Line 179
	mov	esp, ebp
	pop	ebp
	ret	0
?getMenuName@Shortcut@@QBEPB_WXZ ENDP			; Shortcut::getMenuName
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getName@Shortcut@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getName@Shortcut@@QBEPB_WXZ PROC			; Shortcut::getName, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.h
; Line 173
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 38					; 00000026H
; Line 175
	mov	esp, ebp
	pop	ebp
	ret	0
?getName@Shortcut@@QBEPB_WXZ ENDP			; Shortcut::getName
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getKeyCombo@Shortcut@@QBEABUKeyCombo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getKeyCombo@Shortcut@@QBEABUKeyCombo@@XZ PROC		; Shortcut::getKeyCombo, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.h
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
; Line 171
	mov	esp, ebp
	pop	ebp
	ret	0
?getKeyCombo@Shortcut@@QBEABUKeyCombo@@XZ ENDP		; Shortcut::getKeyCombo
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?toMenuItemString@Shortcut@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
_TEXT	SEGMENT
tv92 = -88						; size = 4
tv65 = -84						; size = 4
$T2 = -80						; size = 4
_this$ = -76						; size = 4
$T3 = -72						; size = 28
_str$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?toMenuItemString@Shortcut@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ PROC ; Shortcut::toMenuItemString, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.h
; Line 160
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?toMenuItemString@Shortcut@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 161
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 166				; 000000a6H
	push	eax
	lea	ecx, DWORD PTR _str$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 162
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@toMenuItem
; Line 164
	push	OFFSET ??_C@_13KDLDGPGJ@?$AA?7?$AA?$AA@
	lea	ecx, DWORD PTR _str$[ebp]
	call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
; Line 165
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv92[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR tv92[ebp]
	push	edx
	lea	ecx, DWORD PTR _str$[ebp]
	call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN1@toMenuItem:
; Line 167
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 1
	mov	DWORD PTR $T2[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _str$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 168
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?toMenuItemString@Shortcut@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?toMenuItemString@Shortcut@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?toMenuItemString@Shortcut@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$2:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN7@toMenuItem
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN7@toMenuItem:
	ret	0
__ehhandler$?toMenuItemString@Shortcut@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?toMenuItemString@Shortcut@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?toMenuItemString@Shortcut@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ENDP ; Shortcut::toMenuItemString
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T2 = -80						; size = 4
_this$ = -76						; size = 4
_keyString$ = -72					; size = 28
_sc$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?toString@Shortcut@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ PROC ; Shortcut::toString
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 173
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?toString@Shortcut@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 174
	push	OFFSET $SG169279
	lea	ecx, DWORD PTR _sc$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@toString
; Line 176
	lea	edx, DWORD PTR _sc$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _sc$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN5@toString
$LN4@toString:
; Line 178
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+32]
	test	edx, edx
	je	SHORT $LN3@toString
; Line 179
	push	OFFSET $SG169282
	lea	ecx, DWORD PTR _sc$[ebp]
	call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
$LN3@toString:
; Line 180
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+33]
	test	ecx, ecx
	je	SHORT $LN2@toString
; Line 181
	push	OFFSET $SG169284
	lea	ecx, DWORD PTR _sc$[ebp]
	call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
$LN2@toString:
; Line 182
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+34]
	test	eax, eax
	je	SHORT $LN1@toString
; Line 183
	push	OFFSET $SG169286
	lea	ecx, DWORD PTR _sc$[ebp]
	call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
$LN1@toString:
; Line 185
	lea	ecx, DWORD PTR _keyString$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 186
	lea	ecx, DWORD PTR _keyString$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+35]
	push	eax
	call	?getKeyStrFromVal@@YAXEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; getKeyStrFromVal
	add	esp, 8
; Line 187
	lea	ecx, DWORD PTR _keyString$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sc$[ebp]
	call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
; Line 188
	lea	edx, DWORD PTR _sc$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _keyString$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _sc$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN5@toString:
; Line 189
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?toString@Shortcut@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0:
	lea	ecx, DWORD PTR _sc$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?toString@Shortcut@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN9@toString
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN9@toString:
	ret	0
__unwindfunclet$?toString@Shortcut@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$2:
	lea	ecx, DWORD PTR _keyString$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?toString@Shortcut@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?toString@Shortcut@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?toString@Shortcut@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ENDP ; Shortcut::toString
; Function compile flags: /Odtp
;	COMDAT ?isEnabled@Shortcut@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?isEnabled@Shortcut@@UBE_NXZ PROC			; Shortcut::isEnabled, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.h
; Line 155
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 156
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+35]
	test	ecx, ecx
	je	SHORT $LN3@isEnabled
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@isEnabled
$LN3@isEnabled:
	mov	DWORD PTR tv68[ebp], 0
$LN4@isEnabled:
	mov	al, BYTE PTR tv68[ebp]
; Line 157
	mov	esp, ebp
	pop	ebp
	ret	0
?isEnabled@Shortcut@@UBE_NXZ ENDP			; Shortcut::isEnabled
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?isValid@Shortcut@@UBE_NXZ
_TEXT	SEGMENT
tv140 = -8						; size = 4
_this$ = -4						; size = 4
?isValid@Shortcut@@UBE_NXZ PROC				; Shortcut::isValid, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.h
; Line 144
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 145
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+35]
	test	ecx, ecx
	jne	SHORT $LN5@isValid
; Line 146
	mov	al, 1
	jmp	$LN6@isValid
$LN5@isValid:
; Line 149
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+35]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN2@isValid
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+35]
	cmp	edx, 90					; 0000005aH
	jle	SHORT $LN3@isValid
$LN2@isValid:
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+35]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN1@isValid
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+35]
	cmp	eax, 57					; 00000039H
	jle	SHORT $LN3@isValid
$LN1@isValid:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+35]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN3@isValid
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+35]
	cmp	ecx, 20					; 00000014H
	je	SHORT $LN3@isValid
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+35]
	cmp	eax, 8
	je	SHORT $LN3@isValid
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+35]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN4@isValid
$LN3@isValid:
; Line 150
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	jne	SHORT $LN8@isValid
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+33]
	test	eax, eax
	jne	SHORT $LN8@isValid
	mov	DWORD PTR tv140[ebp], 0
	jmp	SHORT $LN9@isValid
$LN8@isValid:
	mov	DWORD PTR tv140[ebp], 1
$LN9@isValid:
	mov	al, BYTE PTR tv140[ebp]
	jmp	SHORT $LN6@isValid
$LN4@isValid:
; Line 153
	mov	al, 1
$LN6@isValid:
; Line 154
	mov	esp, ebp
	pop	ebp
	ret	0
?isValid@Shortcut@@UBE_NXZ ENDP				; Shortcut::isValid
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?doDialog@Shortcut@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?doDialog@Shortcut@@UAEHXZ PROC				; Shortcut::doDialog, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.h
; Line 140
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 141
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	OFFSET ?dlgProc@StaticDialog@@KGHPAUHWND__@@IIJ@Z ; StaticDialog::dlgProc
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	5000					; 00001388H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__DialogBoxParamW@20
; Line 142
	mov	esp, ebp
	pop	ebp
	ret	0
?doDialog@Shortcut@@UAEHXZ ENDP				; Shortcut::doDialog
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getAcceleratorModifiers@Shortcut@@QAEEXZ
_TEXT	SEGMENT
tv80 = -16						; size = 4
tv74 = -12						; size = 4
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?getAcceleratorModifiers@Shortcut@@QAEEXZ PROC		; Shortcut::getAcceleratorModifiers, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.h
; Line 113
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 114
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	je	SHORT $LN3@getAcceler
	mov	DWORD PTR tv68[ebp], 8
	jmp	SHORT $LN4@getAcceler
$LN3@getAcceler:
	mov	DWORD PTR tv68[ebp], 0
$LN4@getAcceler:
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+33]
	test	eax, eax
	je	SHORT $LN5@getAcceler
	mov	DWORD PTR tv74[ebp], 16			; 00000010H
	jmp	SHORT $LN6@getAcceler
$LN5@getAcceler:
	mov	DWORD PTR tv74[ebp], 0
$LN6@getAcceler:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+34]
	test	edx, edx
	je	SHORT $LN7@getAcceler
	mov	DWORD PTR tv80[ebp], 4
	jmp	SHORT $LN8@getAcceler
$LN7@getAcceler:
	mov	DWORD PTR tv80[ebp], 0
$LN8@getAcceler:
	mov	eax, DWORD PTR tv68[ebp]
	or	eax, 1
	or	eax, DWORD PTR tv74[ebp]
	or	eax, DWORD PTR tv80[ebp]
; Line 115
	mov	esp, ebp
	pop	ebp
	ret	0
?getAcceleratorModifiers@Shortcut@@QAEEXZ ENDP		; Shortcut::getAcceleratorModifiers
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0Shortcut@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_sc$ = 8						; size = 4
??0Shortcut@@QAE@ABV0@@Z PROC				; Shortcut::Shortcut, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.h
; Line 107
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Shortcut@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0StaticDialog@@QAE@XZ			; StaticDialog::StaticDialog
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Shortcut@@6B@
; Line 108
	mov	ecx, DWORD PTR _sc$[ebp]
	call	?getMenuName@Shortcut@@QBEPB_WXZ	; Shortcut::getMenuName
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setName@Shortcut@@QAEXPB_W@Z		; Shortcut::setName
; Line 109
	mov	ecx, DWORD PTR _sc$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], edx
; Line 110
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _sc$[ebp]
	mov	al, BYTE PTR [edx+36]
	mov	BYTE PTR [ecx+36], al
; Line 111
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Shortcut@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1StaticDialog@@UAE@XZ			; StaticDialog::~StaticDialog
__ehhandler$??0Shortcut@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Shortcut@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Shortcut@@QAE@ABV0@@Z ENDP				; Shortcut::Shortcut
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = -4						; size = 4
_keyIn$ = 8						; size = 4
?keyTranslate@@YAHH@Z PROC				; keyTranslate
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.h
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 50
	mov	eax, DWORD PTR _keyIn$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 8
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 213		; 000000d5H
	ja	$LN1@keyTransla
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN28@keyTransla[edx]
	jmp	DWORD PTR $LN29@keyTransla[eax*4]
$LN23@keyTransla:
; Line 51
	mov	eax, 300				; 0000012cH
	jmp	$LN26@keyTransla
$LN22@keyTransla:
; Line 52
	mov	eax, 301				; 0000012dH
	jmp	$LN26@keyTransla
$LN21@keyTransla:
; Line 53
	mov	eax, 302				; 0000012eH
	jmp	$LN26@keyTransla
$LN20@keyTransla:
; Line 54
	mov	eax, 303				; 0000012fH
	jmp	$LN26@keyTransla
$LN19@keyTransla:
; Line 55
	mov	eax, 304				; 00000130H
	jmp	SHORT $LN26@keyTransla
$LN18@keyTransla:
; Line 56
	mov	eax, 305				; 00000131H
	jmp	SHORT $LN26@keyTransla
$LN17@keyTransla:
; Line 57
	mov	eax, 306				; 00000132H
	jmp	SHORT $LN26@keyTransla
$LN16@keyTransla:
; Line 58
	mov	eax, 307				; 00000133H
	jmp	SHORT $LN26@keyTransla
$LN15@keyTransla:
; Line 59
	mov	eax, 308				; 00000134H
	jmp	SHORT $LN26@keyTransla
$LN14@keyTransla:
; Line 60
	mov	eax, 309				; 00000135H
	jmp	SHORT $LN26@keyTransla
$LN13@keyTransla:
; Line 61
	mov	eax, 7
	jmp	SHORT $LN26@keyTransla
$LN12@keyTransla:
; Line 62
	mov	eax, 8
	jmp	SHORT $LN26@keyTransla
$LN11@keyTransla:
; Line 63
	mov	eax, 9
	jmp	SHORT $LN26@keyTransla
$LN10@keyTransla:
; Line 64
	mov	eax, 13					; 0000000dH
	jmp	SHORT $LN26@keyTransla
$LN9@keyTransla:
; Line 65
	mov	eax, 310				; 00000136H
	jmp	SHORT $LN26@keyTransla
$LN8@keyTransla:
; Line 66
	mov	eax, 311				; 00000137H
	jmp	SHORT $LN26@keyTransla
$LN7@keyTransla:
; Line 67
	mov	eax, 312				; 00000138H
	jmp	SHORT $LN26@keyTransla
$LN6@keyTransla:
; Line 68
	mov	eax, 47					; 0000002fH
	jmp	SHORT $LN26@keyTransla
$LN5@keyTransla:
; Line 69
	mov	eax, 96					; 00000060H
	jmp	SHORT $LN26@keyTransla
$LN4@keyTransla:
; Line 70
	mov	eax, 91					; 0000005bH
	jmp	SHORT $LN26@keyTransla
$LN3@keyTransla:
; Line 71
	mov	eax, 92					; 0000005cH
	jmp	SHORT $LN26@keyTransla
$LN2@keyTransla:
; Line 72
	mov	eax, 93					; 0000005dH
	jmp	SHORT $LN26@keyTransla
$LN1@keyTransla:
; Line 73
	mov	eax, DWORD PTR _keyIn$[ebp]
$LN26@keyTransla:
; Line 75
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN29@keyTransla:
	DD	$LN12@keyTransla
	DD	$LN11@keyTransla
	DD	$LN10@keyTransla
	DD	$LN13@keyTransla
	DD	$LN17@keyTransla
	DD	$LN16@keyTransla
	DD	$LN18@keyTransla
	DD	$LN19@keyTransla
	DD	$LN21@keyTransla
	DD	$LN22@keyTransla
	DD	$LN20@keyTransla
	DD	$LN23@keyTransla
	DD	$LN14@keyTransla
	DD	$LN15@keyTransla
	DD	$LN9@keyTransla
	DD	$LN8@keyTransla
	DD	$LN7@keyTransla
	DD	$LN6@keyTransla
	DD	$LN5@keyTransla
	DD	$LN4@keyTransla
	DD	$LN3@keyTransla
	DD	$LN2@keyTransla
	DD	$LN1@keyTransla
$LN28@keyTransla:
	DB	0
	DB	1
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	2
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	3
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	14					; 0000000eH
	DB	22					; 00000016H
	DB	15					; 0000000fH
	DB	22					; 00000016H
	DB	16					; 00000010H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	21					; 00000015H
?keyTranslate@@YAHH@Z ENDP				; keyTranslate
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_commandSize$1 = -204					; size = 4
_len$2 = -200						; size = 4
_theMacros$3 = -196					; size = 4
_i$4 = -192						; size = 4
_len$5 = -188						; size = 4
_userCommands$6 = -184					; size = 4
_nbChar$7 = -180					; size = 4
_hNotepad_plus$8 = -176					; size = 4
_i$9 = -172						; size = 4
_i$10 = -168						; size = 4
tv179 = -164						; size = 4
$T11 = -160						; size = 4
$T12 = -156						; size = 4
_pluginCmds$13 = -152					; size = 4
_j$14 = -148						; size = 4
_j$15 = -144						; size = 4
_i$16 = -140						; size = 4
_fin$17 = -133						; size = 1
_cmdName$18 = -132					; size = 128
__$ArrayPad$ = -4					; size = 4
_cmd$ = 8						; size = 4
_str$ = 12						; size = 4
?getNameStrFromCmd@@YAXKAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC ; getNameStrFromCmd
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 295
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 296
	cmp	DWORD PTR _cmd$[ebp], 20000		; 00004e20H
	jb	SHORT $LN20@getNameStr
	cmp	DWORD PTR _cmd$[ebp], 20200		; 00004ee8H
	jae	SHORT $LN20@getNameStr
; Line 298
	call	?getInstance@NppParameters@@SAPAV1@XZ	; NppParameters::getInstance
	mov	ecx, eax
	call	?getMacroList@NppParameters@@QAEAAV?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@XZ ; NppParameters::getMacroList
	mov	DWORD PTR _theMacros$3[ebp], eax
; Line 299
	mov	eax, DWORD PTR _cmd$[ebp]
	sub	eax, 20000				; 00004e20H
	mov	DWORD PTR _i$9[ebp], eax
; Line 300
	mov	ecx, DWORD PTR _i$9[ebp]
	push	ecx
	mov	ecx, DWORD PTR _theMacros$3[ebp]
	call	??A?$vector@VMacroShortcut@@V?$allocator@VMacroShortcut@@@std@@@std@@QAEAAVMacroShortcut@@I@Z ; std::vector<MacroShortcut,std::allocator<MacroShortcut> >::operator[]
	mov	ecx, eax
	call	?getName@Shortcut@@QBEPB_WXZ		; Shortcut::getName
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
	jmp	$LN22@getNameStr
$LN20@getNameStr:
; Line 302
	cmp	DWORD PTR _cmd$[ebp], 21000		; 00005208H
	jb	SHORT $LN18@getNameStr
	cmp	DWORD PTR _cmd$[ebp], 21200		; 000052d0H
	jae	SHORT $LN18@getNameStr
; Line 304
	call	?getInstance@NppParameters@@SAPAV1@XZ	; NppParameters::getInstance
	mov	ecx, eax
	call	?getUserCommandList@NppParameters@@QAEAAV?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@XZ ; NppParameters::getUserCommandList
	mov	DWORD PTR _userCommands$6[ebp], eax
; Line 305
	mov	edx, DWORD PTR _cmd$[ebp]
	sub	edx, 21000				; 00005208H
	mov	DWORD PTR _i$4[ebp], edx
; Line 306
	mov	eax, DWORD PTR _i$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _userCommands$6[ebp]
	call	??A?$vector@VUserCommand@@V?$allocator@VUserCommand@@@std@@@std@@QAEAAVUserCommand@@I@Z ; std::vector<UserCommand,std::allocator<UserCommand> >::operator[]
	mov	ecx, eax
	call	?getName@Shortcut@@QBEPB_WXZ		; Shortcut::getName
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
	jmp	$LN22@getNameStr
$LN18@getNameStr:
; Line 308
	cmp	DWORD PTR _cmd$[ebp], 22000		; 000055f0H
	jb	$LN16@getNameStr
	cmp	DWORD PTR _cmd$[ebp], 22500		; 000057e4H
	jae	$LN16@getNameStr
; Line 310
	call	?getInstance@NppParameters@@SAPAV1@XZ	; NppParameters::getInstance
	mov	ecx, eax
	call	?getPluginCommandList@NppParameters@@QAEAAV?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@XZ ; NppParameters::getPluginCommandList
	mov	DWORD PTR _pluginCmds$13[ebp], eax
; Line 311
	mov	DWORD PTR _i$10[ebp], 0
; Line 312
	mov	DWORD PTR _j$14[ebp], 0
	mov	ecx, DWORD PTR _pluginCmds$13[ebp]
	call	?size@?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QBEIXZ ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::size
	mov	DWORD PTR _len$2[ebp], eax
	jmp	SHORT $LN15@getNameStr
$LN14@getNameStr:
	mov	ecx, DWORD PTR _j$14[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$14[ebp], ecx
$LN15@getNameStr:
	mov	edx, DWORD PTR _j$14[ebp]
	cmp	edx, DWORD PTR _len$2[ebp]
	jae	SHORT $LN13@getNameStr
; Line 314
	mov	eax, DWORD PTR _j$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _pluginCmds$13[ebp]
	call	??A?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEAAVPluginCmdShortcut@@I@Z ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::operator[]
	mov	ecx, eax
	call	?getID@PluginCmdShortcut@@QBEKXZ	; PluginCmdShortcut::getID
	cmp	eax, DWORD PTR _cmd$[ebp]
	jne	SHORT $LN12@getNameStr
; Line 316
	mov	ecx, DWORD PTR _j$14[ebp]
	mov	DWORD PTR _i$10[ebp], ecx
; Line 317
	jmp	SHORT $LN13@getNameStr
$LN12@getNameStr:
; Line 319
	jmp	SHORT $LN14@getNameStr
$LN13@getNameStr:
; Line 320
	mov	edx, DWORD PTR _i$10[ebp]
	push	edx
	mov	ecx, DWORD PTR _pluginCmds$13[ebp]
	call	??A?$vector@VPluginCmdShortcut@@V?$allocator@VPluginCmdShortcut@@@std@@@std@@QAEAAVPluginCmdShortcut@@I@Z ; std::vector<PluginCmdShortcut,std::allocator<PluginCmdShortcut> >::operator[]
	mov	ecx, eax
	call	?getName@Shortcut@@QBEPB_WXZ		; Shortcut::getName
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
; Line 322
	jmp	$LN22@getNameStr
$LN16@getNameStr:
; Line 324
	push	0
	call	?getClassName@Notepad_plus_Window@@SAPB_WXZ ; Notepad_plus_Window::getClassName
	push	eax
	call	DWORD PTR __imp__FindWindowW@8
	mov	DWORD PTR _hNotepad_plus$8[ebp], eax
; Line 325
	mov	DWORD PTR _commandSize$1[ebp], 64	; 00000040H
; Line 327
	push	0
	push	64					; 00000040H
	lea	eax, DWORD PTR _cmdName$18[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmd$[ebp]
	push	ecx
	push	0
	push	0
	push	1038					; 0000040eH
	mov	edx, DWORD PTR _hNotepad_plus$8[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
	push	eax
	call	DWORD PTR __imp__GetMenuStringW@20
	mov	DWORD PTR _nbChar$7[ebp], eax
; Line 328
	cmp	DWORD PTR _nbChar$7[ebp], 0
	jne	SHORT $LN10@getNameStr
; Line 329
	jmp	$LN22@getNameStr
$LN10@getNameStr:
; Line 330
	mov	BYTE PTR _fin$17[ebp], 0
; Line 331
	mov	DWORD PTR _j$15[ebp], 0
; Line 332
	lea	eax, DWORD PTR _cmdName$18[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenW@4
	mov	DWORD PTR _len$5[ebp], eax
; Line 333
	mov	DWORD PTR _i$16[ebp], 0
	jmp	SHORT $LN9@getNameStr
$LN8@getNameStr:
	mov	ecx, DWORD PTR _i$16[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$16[ebp], ecx
$LN9@getNameStr:
	mov	edx, DWORD PTR _i$16[ebp]
	cmp	edx, DWORD PTR _len$5[ebp]
	jae	$LN7@getNameStr
; Line 335
	mov	eax, DWORD PTR _i$16[ebp]
	movzx	ecx, WORD PTR _cmdName$18[ebp+eax*2]
	mov	DWORD PTR tv179[ebp], ecx
	cmp	DWORD PTR tv179[ebp], 9
	je	SHORT $LN4@getNameStr
	cmp	DWORD PTR tv179[ebp], 38		; 00000026H
	je	SHORT $LN3@getNameStr
	jmp	SHORT $LN2@getNameStr
$LN4@getNameStr:
; Line 338
	mov	edx, DWORD PTR _j$15[ebp]
	shl	edx, 1
	mov	DWORD PTR $T12[ebp], edx
	cmp	DWORD PTR $T12[ebp], 128		; 00000080H
	jae	SHORT $LN23@getNameStr
	jmp	SHORT $LN24@getNameStr
$LN23@getNameStr:
	call	___report_rangecheckfailure
$LN24@getNameStr:
	xor	eax, eax
	mov	ecx, DWORD PTR $T12[ebp]
	mov	WORD PTR _cmdName$18[ebp+ecx], ax
; Line 339
	mov	BYTE PTR _fin$17[ebp], 1
; Line 340
	jmp	SHORT $LN5@getNameStr
$LN3@getNameStr:
; Line 343
	jmp	SHORT $LN5@getNameStr
$LN2@getNameStr:
; Line 346
	mov	edx, DWORD PTR _j$15[ebp]
	mov	eax, DWORD PTR _i$16[ebp]
	mov	cx, WORD PTR _cmdName$18[ebp+eax*2]
	mov	WORD PTR _cmdName$18[ebp+edx*2], cx
	mov	edx, DWORD PTR _j$15[ebp]
	add	edx, 1
	mov	DWORD PTR _j$15[ebp], edx
$LN5@getNameStr:
; Line 348
	movzx	eax, BYTE PTR _fin$17[ebp]
	test	eax, eax
	je	SHORT $LN1@getNameStr
; Line 349
	jmp	SHORT $LN7@getNameStr
$LN1@getNameStr:
; Line 350
	jmp	$LN8@getNameStr
$LN7@getNameStr:
; Line 351
	mov	ecx, DWORD PTR _j$15[ebp]
	shl	ecx, 1
	mov	DWORD PTR $T11[ebp], ecx
	cmp	DWORD PTR $T11[ebp], 128		; 00000080H
	jae	SHORT $LN25@getNameStr
	jmp	SHORT $LN26@getNameStr
$LN25@getNameStr:
	call	___report_rangecheckfailure
$LN26@getNameStr:
	xor	edx, edx
	mov	eax, DWORD PTR $T11[ebp]
	mov	WORD PTR _cmdName$18[ebp+eax], dx
; Line 352
	lea	ecx, DWORD PTR _cmdName$18[ebp]
	push	ecx
	mov	ecx, DWORD PTR _str$[ebp]
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
$LN22@getNameStr:
; Line 355
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?getNameStrFromCmd@@YAXKAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ENDP ; getNameStrFromCmd
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_i$ = -8						; size = 4
_found$ = -1						; size = 1
_keyVal$ = 8						; size = 1
_str$ = 12						; size = 4
?getKeyStrFromVal@@YAXEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC ; getKeyStrFromVal
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\shortcut\shortcut.cpp
; Line 278
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 279
	push	OFFSET $SG169367
	mov	ecx, DWORD PTR _str$[ebp]
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
; Line 280
	mov	BYTE PTR _found$[ebp], 0
; Line 282
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@getKeyStrF
$LN5@getKeyStrF:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@getKeyStrF:
	cmp	DWORD PTR _i$[ebp], 91			; 0000005bH
	jae	SHORT $LN4@getKeyStrF
; Line 283
	movzx	ecx, BYTE PTR _keyVal$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR ?namedKeyArray@@3PAUKeyIDNAME@@A[edx*8+4]
	cmp	ecx, eax
	jne	SHORT $LN3@getKeyStrF
; Line 284
	mov	BYTE PTR _found$[ebp], 1
; Line 285
	jmp	SHORT $LN4@getKeyStrF
$LN3@getKeyStrF:
; Line 287
	jmp	SHORT $LN5@getKeyStrF
$LN4@getKeyStrF:
; Line 288
	movzx	ecx, BYTE PTR _found$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@getKeyStrF
; Line 289
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?namedKeyArray@@3PAUKeyIDNAME@@A[edx*8]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
; Line 290
	jmp	SHORT $LN7@getKeyStrF
$LN2@getKeyStrF:
; Line 291
	push	OFFSET $SG169377
	mov	ecx, DWORD PTR _str$[ebp]
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
$LN7@getKeyStrF:
; Line 292
	mov	esp, ebp
	pop	ebp
	ret	0
?getKeyStrFromVal@@YAXEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ENDP ; getKeyStrFromVal
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2294
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2295
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:
; Line 2296
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2289
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2290
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:
; Line 2291
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2272
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2273
	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:
; Line 2275
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 8
	jb	SHORT $LN3@Tidy
; Line 2277
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Ptr$1[ebp], eax
; Line 2278
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>
; Line 2279
	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy
; Line 2281
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@_W@std@@YAPA_WAA_W@Z	; std::addressof<wchar_t>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:
; Line 2282
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN3@Tidy:
; Line 2284
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 7
; Line 2285
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
; Line 2286
	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2256
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2258
	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	lea	eax, DWORD PTR [eax+edx*2]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:
; Line 2259
	xor	al, al
	jmp	SHORT $LN4@Inside
; Line 2260
	jmp	SHORT $LN4@Inside
$LN3@Inside:
; Line 2261
	mov	al, 1
$LN4@Inside:
; Line 2262
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2242
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2243
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow
; Line 2244
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN6@Grow:
; Line 2245
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow
; Line 2246
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:
; Line 2247
	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 8
	jae	SHORT $LN3@Grow
; Line 2249
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:
; Line 2250
	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow
; Line 2251
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN4@Grow:
; Line 2252
	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:
; Line 2253
	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -2						; size = 2
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2236
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 2237
	xor	eax, eax
	mov	WORD PTR $T1[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [ecx+20], edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Newsize$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign
	add	esp, 8
; Line 2238
	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
_TEXT	SEGMENT
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2201
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 2202
	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 7
	mov	DWORD PTR __Newres$[ebp], eax
; Line 2203
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy
; Line 2204
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:
; Line 2205
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	shr	ecx, 1
	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	esi, 3
	div	esi
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:
; Line 2207
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	shr	ecx, 1
	sub	eax, ecx
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], eax
	ja	SHORT $LN5@Copy
; Line 2209
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR __Newres$[ebp], ecx
; Line 2210
	jmp	SHORT $LN8@Copy
$LN5@Copy:
; Line 2211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:
; Line 2214
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 2215
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0:
; Line 2216
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 2217
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx
; Line 2218
	mov	BYTE PTR __$EHRec$[ebp+12], 2
; Line 2219
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1:
; Line 2221
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Line 2222
	push	0
	push	0
	call	__CxxThrowException@8
; Line 2223
	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$2:
; Line 2224
	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$3:
; Line 2226
	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy
; Line 2228
	mov	edx, DWORD PTR __Oldlen$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	push	eax
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:
; Line 2229
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Line 2230
	lea	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
; Line 2231
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 2232
	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN11@Copy:
; Line 2233
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
; Function compile flags: /Odtp
;	COMDAT ?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 2
?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Chassign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2193
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2194
	cmp	DWORD PTR __Count$[ebp], 1
	jne	SHORT $LN2@Chassign
; Line 2195
	lea	eax, DWORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Off$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign
	add	esp, 8
; Line 2196
	jmp	SHORT $LN3@Chassign
$LN2@Chassign:
; Line 2197
	movzx	eax, WORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [eax+edx*2]
	push	eax
	call	?assign@?$char_traits@_W@std@@SAPA_WPA_WI_W@Z ; std::char_traits<wchar_t>::assign
	add	esp, 12					; 0000000cH
$LN3@Chassign:
; Line 2198
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Chassign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv70 = -4						; size = 4
?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1792
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1793
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN3@empty
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@empty
$LN3@empty:
	mov	DWORD PTR tv70[ebp], 0
$LN4@empty:
	mov	al, BYTE PTR tv70[ebp]
; Line 1794
	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1758
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 1759
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size
	mov	DWORD PTR __Num$[ebp], eax
; Line 1760
	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]
; Line 1761
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1753
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1754
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
; Line 1755
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1738
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1739
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
; Line 1740
	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator[], COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1695
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1697
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@operator
; Line 1698
	push	1698					; 000006a2H
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN1@operator:
; Line 1704
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [eax+edx*2]
; Line 1705
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?at@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?at@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::at, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1668
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1669
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	ja	SHORT $LN1@at
; Line 1670
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN1@at:
; Line 1671
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [eax+edx*2]
$LN3@at:
; Line 1672
	mov	esp, ebp
	pop	ebp
	ret	4
?at@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::at
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1342
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1343
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase
; Line 1344
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN4@erase:
; Line 1345
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase
; Line 1346
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:
; Line 1347
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase
; Line 1349
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [eax+edx*2]
	mov	DWORD PTR __Ptr$2[ebp], eax
; Line 1350
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], edx
; Line 1351
	mov	eax, DWORD PTR __Newsize$1[ebp]
	sub	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Ptr$2[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR __Ptr$2[ebp]
	push	ecx
	call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move
	add	esp, 12					; 0000000cH
; Line 1352
	mov	edx, DWORD PTR __Newsize$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN2@erase:
; Line 1354
	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:
; Line 1355
	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1334
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1335
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase
; Line 1336
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN1@erase:
; Line 1337
	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
; Line 1338
	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:
; Line 1339
	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 2
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1173
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1174
	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::npos
	jne	SHORT $LN2@assign
; Line 1175
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN2@assign:
; Line 1177
	push	0
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@assign
; Line 1179
	movzx	eax, WORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Chassign
; Line 1180
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN1@assign:
; Line 1182
	mov	eax, DWORD PTR _this$[ebp]
$LN4@assign:
; Line 1183
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1168
	push	1168					; 00000490H
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH
; Line 1169
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?length@?$char_traits@_W@std@@SAIPB_W@Z	; std::char_traits<wchar_t>::length
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Line 1170
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1148
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1150
	cmp	DWORD PTR __Count$[ebp], 0
	je	SHORT $LN3@assign
; Line 1151
	push	1151					; 0000047fH
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH
$LN3@assign:
; Line 1154
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@assign
; Line 1156
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	sar	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
	jmp	SHORT $LN4@assign
$LN2@assign:
; Line 1158
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign
; Line 1160
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	push	eax
	call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy
	add	esp, 12					; 0000000cH
; Line 1161
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN1@assign:
; Line 1163
	mov	eax, DWORD PTR _this$[ebp]
$LN4@assign:
; Line 1164
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1129
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1130
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign
; Line 1131
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN5@assign:
; Line 1132
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
; Line 1133
	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign
; Line 1134
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:
; Line 1136
	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign
; Line 1137
	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:
; Line 1138
	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign
; Line 1141
	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	edx, DWORD PTR __Roff$[ebp]
	lea	eax, DWORD PTR [eax+edx*2]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	push	eax
	call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy
	add	esp, 12					; 0000000cH
; Line 1142
	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN2@assign:
; Line 1144
	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:
; Line 1145
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1085
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1086
	push	1086					; 0000043eH
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH
; Line 1087
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?length@?$char_traits@_W@std@@SAIPB_W@Z	; std::char_traits<wchar_t>::length
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Line 1088
	mov	esp, ebp
	pop	ebp
	ret	4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1063
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1065
	cmp	DWORD PTR __Count$[ebp], 0
	je	SHORT $LN4@append
; Line 1066
	push	1066					; 0000042aH
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH
$LN4@append:
; Line 1069
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@append
; Line 1071
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	sar	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
	jmp	SHORT $LN6@append
$LN3@append:
; Line 1072
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::npos
	sub	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Count$[ebp]
	ja	SHORT $LN2@append
; Line 1073
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN2@append:
; Line 1076
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@append
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
	push	0
	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@append
; Line 1078
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy
	add	esp, 12					; 0000000cH
; Line 1079
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN1@append:
; Line 1081
	mov	eax, DWORD PTR _this$[ebp]
$LN6@append:
; Line 1082
	mov	esp, ebp
	pop	ebp
	ret	8
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1044
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1045
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN4@append
; Line 1046
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN4@append:
; Line 1047
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
; Line 1048
	mov	eax, DWORD PTR __Num$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN3@append
; Line 1049
	mov	ecx, DWORD PTR __Num$[ebp]
	mov	DWORD PTR __Count$[ebp], ecx
$LN3@append:
; Line 1050
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::npos
	sub	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN2@append
; Line 1051
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN2@append:
; Line 1053
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@append
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], edx
	push	0
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@append
; Line 1056
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Roff$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	lea	eax, DWORD PTR [eax+edx*2]
	push	eax
	call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy
	add	esp, 12					; 0000000cH
; Line 1057
	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN1@append:
; Line 1059
	mov	eax, DWORD PTR _this$[ebp]
$LN6@append:
; Line 1060
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1038
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1039
	mov	eax, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::npos
	push	eax
	push	0
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Line 1040
	mov	esp, ebp
	pop	ebp
	ret	4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1028
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1029
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Line 1030
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1023
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1024
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Line 1025
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 2
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1018
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1019
	movzx	eax, WORD PTR __Ch$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Line 1020
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1013
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1014
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Line 1015
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 990
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 991
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Line 992
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
__ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Odtp
;	COMDAT ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Right$ = 8						; size = 4
?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 935
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 936
	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax+24], 8
	jae	SHORT $LN2@Assign_rv
; Line 938
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move
	add	esp, 12					; 0000000cH
; Line 939
	jmp	SHORT $LN1@Assign_rv
$LN2@Assign_rv:
; Line 941
	mov	edx, DWORD PTR __Right$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
; Line 942
	mov	edx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [edx+4], 0
$LN1@Assign_rv:
; Line 944
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
; Line 945
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
; Line 946
	push	0
	push	0
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Line 947
	mov	esp, ebp
	pop	ebp
	ret	4
?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 887
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 888
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Line 889
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	call	??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv
; Line 890
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Odtp
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 780
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@_W@std@@QAE@XZ		; std::allocator<wchar_t>::allocator<wchar_t>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 781
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Line 782
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Line 783
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Odtp
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 738
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@_W@std@@QAE@XZ		; std::allocator<wchar_t>::allocator<wchar_t>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 739
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Line 740
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Odtp
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -14						; size = 1
$T3 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 724
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<wchar_t> >::select_on_container_copy_construction
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 725
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Line 726
	mov	edx, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::npos
	push	edx
	push	0
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Line 727
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Odtp
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 683
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 684
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 685
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 672
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 674
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
; Line 675
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 676
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
; Line 677
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
; Line 678
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 679
	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 663
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 665
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
; Line 666
	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 667
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
; Line 668
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 669
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 649
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 650
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy
; Line 651
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 643
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 645
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy
; Line 646
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
; Function compile flags: /Odtp
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 517
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 520
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 8
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$addressof@_W@std@@YAPA_WAA_W@Z	; std::addressof<wchar_t>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]
; Line 521
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 510
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 513
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 8
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$addressof@_W@std@@YAPA_WAA_W@Z	; std::addressof<wchar_t>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]
; Line 514
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 492
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 494
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 495
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 496
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 883
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t> >::max_size
	add	esp, 4
; Line 885
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 806
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@_W@std@@QAE@ABV01@@Z	; std::allocator<wchar_t>::allocator<wchar_t>
; Line 807
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@_W@std@@QAE@XZ		; std::allocator<wchar_t>::allocator<wchar_t>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 778
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 779
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ; std::allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 780
	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 740
	push	ebp
	mov	ebp, esp
; Line 741
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ ; std::allocator<wchar_t>::select_on_container_copy_construction
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 742
	pop	ebp
	ret	0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 734
	push	ebp
	mov	ebp, esp
; Line 735
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@_W@std@@QBEIXZ	; std::allocator<wchar_t>::max_size
; Line 736
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@_W@std@@QBEIXZ PROC		; std::allocator<wchar_t>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 611
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 612
	mov	eax, 2147483647				; 7fffffffH
; Line 613
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@_W@std@@QBEIXZ ENDP		; std::allocator<wchar_t>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		; std::allocator<wchar_t>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@_W@std@@YAPA_WIPA_W@Z	; std::_Allocate<wchar_t>
	add	esp, 8
; Line 579
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z ENDP		; std::allocator<wchar_t>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@_W@std@@QAE@ABV01@@Z PROC		; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 556
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 558
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@_W@std@@QAE@ABV01@@Z ENDP		; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@_W@std@@QAE@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@_W@std@@QAE@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ PROC ; std::allocator<wchar_t>::select_on_container_copy_construction, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 532
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 533
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$allocator@_W@std@@QAE@ABV01@@Z	; std::allocator<wchar_t>::allocator<wchar_t>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 534
	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ ENDP ; std::allocator<wchar_t>::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_System_error_category@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Generic_error_category@std@@UAE@XZ
__ehhandler$??1_System_error_category@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_System_error_category@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
; Function compile flags: /Odtp
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 614
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 615
	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er
; Line 616
	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er
; Line 617
	jmp	SHORT $LN3@default_er
$LN2@default_er:
; Line 618
	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:
; Line 619
	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T2 = -24						; size = 4
tv69 = -20						; size = 4
__Name$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 607
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 608
	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax
; Line 609
	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 610
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN6@message
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN6@message:
	ret	0
__ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
; Function compile flags: /Odtp
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 602
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 603
	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@
; Line 604
	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 597
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0_System_error_category@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@
; Line 599
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_System_error_category@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Generic_error_category@std@@UAE@XZ
__ehhandler$??0_System_error_category@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0_System_error_category@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Generic_error_category@std@@UAE@XZ
__ehhandler$??1_Iostream_error_category@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
; Function compile flags: /Odtp
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 584
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 585
	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message
; Line 586
	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message
; Line 587
	jmp	SHORT $LN3@message
$LN2@message:
; Line 588
	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:
; Line 589
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN6@message
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN6@message:
	ret	0
__ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
; Function compile flags: /Odtp
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 579
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 580
	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@
; Line 581
	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 574
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0_Iostream_error_category@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@
; Line 576
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Generic_error_category@std@@UAE@XZ
__ehhandler$??0_Iostream_error_category@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
__ehhandler$??1_Generic_error_category@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
; Function compile flags: /Odtp
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T2 = -24						; size = 4
tv69 = -20						; size = 4
__Name$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 563
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 564
	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax
; Line 565
	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 566
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN6@message
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN6@message:
	ret	0
__ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
; Function compile flags: /Odtp
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 558
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 559
	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@
; Line 560
	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 553
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0_Generic_error_category@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@
; Line 555
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
__ehhandler$??0_Generic_error_category@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
; Function compile flags: /Odtp
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 352
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
; Line 354
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]
; Line 355
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 337
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 338
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 339
	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 332
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 333
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 334
	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 299
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 300
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 246
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 247
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 248
	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 241
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 242
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 243
	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 176
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]
; Line 178
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 391
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 392
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]
; Line 393
	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 384
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 385
	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==
; Line 386
	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 377
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 378
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 379
	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 159
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@
; Line 160
	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 154
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@
; Line 156
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 652
	push	ebp
	mov	ebp, esp
; Line 653
	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
; Line 654
	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 642
	push	ebp
	mov	ebp, esp
; Line 643
	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
; Line 644
	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@_W@std@@YAXPB_W0I@Z PROC		; std::_Debug_pointer<wchar_t>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 545
	push	ebp
	mov	ebp, esp
; Line 546
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 547
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 548
	pop	ebp
	ret	0
??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ENDP		; std::_Debug_pointer<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z PROC		; std::_Debug_pointer<char>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 545
	push	ebp
	mov	ebp, esp
; Line 546
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 547
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 548
	pop	ebp
	ret	0
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ENDP		; std::_Debug_pointer<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xlocale
; Line 74
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 75
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2294
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2295
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:
; Line 2296
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2289
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2290
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:
; Line 2291
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2272
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2273
	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:
; Line 2275
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 16			; 00000010H
	jb	SHORT $LN3@Tidy
; Line 2277
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Ptr$1[ebp], eax
; Line 2278
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
; Line 2279
	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy
; Line 2281
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:
; Line 2282
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:
; Line 2284
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 15			; 0000000fH
; Line 2285
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Line 2286
	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2256
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2258
	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:
; Line 2259
	xor	al, al
	jmp	SHORT $LN4@Inside
; Line 2260
	jmp	SHORT $LN4@Inside
$LN3@Inside:
; Line 2261
	mov	al, 1
$LN4@Inside:
; Line 2262
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2242
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2243
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow
; Line 2244
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:
; Line 2245
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow
; Line 2246
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:
; Line 2247
	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow
; Line 2249
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:
; Line 2250
	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow
; Line 2251
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:
; Line 2252
	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:
; Line 2253
	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2236
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 2237
	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+20], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8
; Line 2238
	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2201
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 2202
	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax
; Line 2203
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy
; Line 2204
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:
; Line 2205
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	shr	ecx, 1
	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	esi, 3
	div	esi
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:
; Line 2207
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	shr	ecx, 1
	sub	eax, ecx
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], eax
	ja	SHORT $LN5@Copy
; Line 2209
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR __Newres$[ebp], ecx
; Line 2210
	jmp	SHORT $LN8@Copy
$LN5@Copy:
; Line 2211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:
; Line 2214
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 2215
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:
; Line 2216
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 2217
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx
; Line 2218
	mov	BYTE PTR __$EHRec$[ebp+12], 2
; Line 2219
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:
; Line 2221
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Line 2222
	push	0
	push	0
	call	__CxxThrowException@8
; Line 2223
	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:
; Line 2224
	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:
; Line 2226
	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy
; Line 2228
	mov	edx, DWORD PTR __Oldlen$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:
; Line 2229
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Line 2230
	lea	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
; Line 2231
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 2232
	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:
; Line 2233
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1758
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 1759
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax
; Line 1760
	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]
; Line 1761
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1753
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1754
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
; Line 1755
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1342
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1343
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase
; Line 1344
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:
; Line 1345
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase
; Line 1346
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:
; Line 1347
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase
; Line 1349
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax
; Line 1350
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax
; Line 1351
	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH
; Line 1352
	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:
; Line 1354
	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:
; Line 1355
	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1334
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1335
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase
; Line 1336
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:
; Line 1337
	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Line 1338
	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:
; Line 1339
	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1168
	push	1168					; 00000490H
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	; std::_Debug_pointer<char>
	add	esp, 12					; 0000000cH
; Line 1169
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Line 1170
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1148
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1150
	cmp	DWORD PTR __Count$[ebp], 0
	je	SHORT $LN3@assign
; Line 1151
	push	1151					; 0000047fH
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	; std::_Debug_pointer<char>
	add	esp, 12					; 0000000cH
$LN3@assign:
; Line 1154
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@assign
; Line 1156
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN4@assign
$LN2@assign:
; Line 1158
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign
; Line 1160
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
; Line 1161
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:
; Line 1163
	mov	eax, DWORD PTR _this$[ebp]
$LN4@assign:
; Line 1164
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1129
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1130
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign
; Line 1131
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:
; Line 1132
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
; Line 1133
	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign
; Line 1134
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:
; Line 1136
	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign
; Line 1137
	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:
; Line 1138
	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign
; Line 1141
	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
; Line 1142
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:
; Line 1144
	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:
; Line 1145
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 990
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 991
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Line 992
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 780
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 781
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Line 782
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Line 783
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 683
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 684
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 685
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 672
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 674
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
; Line 675
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 676
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
; Line 677
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
; Line 678
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 679
	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 663
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 665
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
; Line 666
	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 667
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
; Line 668
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 669
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 649
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 650
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
; Line 651
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 643
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 645
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
; Line 646
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
; Function compile flags: /Odtp
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 517
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 520
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]
; Line 521
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 510
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 513
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]
; Line 514
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 492
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 494
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 495
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 496
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 883
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4
; Line 885
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 734
	push	ebp
	mov	ebp, esp
; Line 735
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size
; Line 736
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 611
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 612
	or	eax, -1
; Line 613
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8
; Line 579
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 3451
	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnext$1 = -4						; size = 4
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 192
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 194
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Orphan_me
; Line 196
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$1[ebp], edx
$LN3@Orphan_me:
; Line 197
	mov	eax, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Orphan_me
	mov	ecx, DWORD PTR __Pnext$1[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _this$[ebp]
	je	SHORT $LN2@Orphan_me
; Line 198
	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$1[ebp], ecx
	jmp	SHORT $LN3@Orphan_me
$LN2@Orphan_me:
; Line 200
	mov	edx, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN1@Orphan_me
; Line 201
	push	201					; 000000c9H
	push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN1@Orphan_me:
; Line 202
	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
; Line 203
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@Orphan_me:
; Line 206
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ PROC	; std::_Iterator_base12::_Getpnext, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 187
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 188
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
; Line 189
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ENDP	; std::_Iterator_base12::_Getpnext
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 182
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 183
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getcont
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Getcont
$LN3@Getcont:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv68[ebp], eax
$LN4@Getcont:
	mov	eax, DWORD PTR tv68[ebp]
; Line 184
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Clrcont@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Clrcont@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Clrcont, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 177
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 178
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 179
	mov	esp, ebp
	pop	ebp
	ret	0
?_Clrcont@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Clrcont
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$2 = -28						; size = 4
__Lock$3 = -24						; size = 4
__Parent_proxy$4 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 148
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 149
	cmp	DWORD PTR __Parent$[ebp], 0
	jne	SHORT $LN3@Adopt
; Line 152
	push	3
	lea	ecx, DWORD PTR __Lock$3[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 153
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me
; Line 155
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$3[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
; Line 156
	jmp	SHORT $LN4@Adopt
$LN3@Adopt:
; Line 158
	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Parent_proxy$4[ebp], ecx
; Line 161
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Parent_proxy$4[ebp]
	je	SHORT $LN4@Adopt
; Line 163
	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 164
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me
; Line 165
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Parent_proxy$4[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
; Line 166
	mov	ecx, DWORD PTR __Parent_proxy$4[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 167
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent_proxy$4[ebp]
	mov	DWORD PTR [eax], ecx
; Line 168
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN4@Adopt:
; Line 174
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0:
	lea	ecx, DWORD PTR __Lock$3[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1:
	lea	ecx, DWORD PTR __Lock$2[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
; Function compile flags: /Odtp
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 140
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Iterator_base12@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 142
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 143
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me
; Line 145
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$??1_Iterator_base12@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
; Function compile flags: /Odtp
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Lock$2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 124
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 125
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN4@operator
	jmp	SHORT $LN3@operator
$LN4@operator:
; Line 127
	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@operator
; Line 128
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
; Line 129
	jmp	SHORT $LN3@operator
$LN2@operator:
; Line 132
	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me
; Line 135
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN3@operator:
; Line 136
	mov	eax, DWORD PTR _this$[ebp]
; Line 137
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0:
	lea	ecx, DWORD PTR __Lock$2[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
; Function compile flags: /Odtp
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 119
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 120
	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=
; Line 121
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 114
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Lock$2 = -24						; size = 4
_this$ = -20						; size = 4
__Pnext$3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 214
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 216
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Orphan_all
; Line 218
	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 220
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$3[ebp], edx
; Line 221
	jmp	SHORT $LN3@Orphan_all
$LN2@Orphan_all:
	mov	eax, DWORD PTR __Pnext$3[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$3[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN3@Orphan_all:
	mov	ecx, DWORD PTR __Pnext$3[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@Orphan_all
; Line 222
	mov	edx, DWORD PTR __Pnext$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN2@Orphan_all
$LN1@Orphan_all:
; Line 223
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], 0
; Line 224
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN5@Orphan_all:
; Line 226
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0:
	lea	ecx, DWORD PTR __Lock$2[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp
;	COMDAT ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Container_base12::_Getpfirst, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 99
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 100
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getpfirst
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Getpfirst
$LN3@Getpfirst:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR tv68[ebp], edx
$LN4@Getpfirst:
	mov	eax, DWORD PTR tv68[ebp]
; Line 101
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Container_base12::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::~_Container_base12, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 94
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 95
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 96
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::~_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 80
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 81
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 563
	push	ebp
	mov	ebp, esp
; Line 564
	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
; Line 565
	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 551
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 553
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]
; Line 554
	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 528
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 530
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]
; Line 531
	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 521
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 523
	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]
; Line 524
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 346
	push	ebp
	mov	ebp, esp
; Line 347
	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
; Line 348
	pop	ebp
	ret	0
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$char_traits@_W@std@@SAPA_WPA_WI_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 2
?assign@?$char_traits@_W@std@@SAPA_WPA_WI_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 341
	push	ebp
	mov	ebp, esp
; Line 342
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	movzx	ecx, WORD PTR __Ch$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_wmemset
	add	esp, 12					; 0000000cH
; Line 343
	pop	ebp
	ret	0
?assign@?$char_traits@_W@std@@SAPA_WPA_WI_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z PROC	; std::char_traits<wchar_t>::move, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 334
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 336
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_wmemmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]
; Line 337
	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ENDP	; std::char_traits<wchar_t>::move
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z PROC	; std::char_traits<wchar_t>::copy, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 311
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 313
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_wmemcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]
; Line 314
	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ENDP	; std::char_traits<wchar_t>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?length@?$char_traits@_W@std@@SAIPB_W@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@_W@std@@SAIPB_W@Z PROC		; std::char_traits<wchar_t>::length, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 304
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 306
	mov	eax, DWORD PTR __First$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_wcslen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]
; Line 307
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@_W@std@@SAIPB_W@Z ENDP		; std::char_traits<wchar_t>::length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new
; Line 64
	push	ebp
	mov	ebp, esp
; Line 65
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new
; Line 59
	push	ebp
	mov	ebp, esp
; Line 60
	mov	eax, DWORD PTR __Where$[ebp]
; Line 61
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _hypot
_TEXT	SEGMENT
__X$ = 8						; size = 8
__Y$ = 16						; size = 8
_hypot	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 556
	push	ebp
	mov	ebp, esp
; Line 557
	sub	esp, 8
	movsd	xmm0, QWORD PTR __Y$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __X$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	__hypot
	add	esp, 16					; 00000010H
; Line 558
	pop	ebp
	ret	0
_hypot	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GStaticDialog@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GStaticDialog@@UAEPAXI@Z PROC			; StaticDialog::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1StaticDialog@@UAE@XZ			; StaticDialog::~StaticDialog
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GStaticDialog@@UAEPAXI@Z ENDP			; StaticDialog::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?destroy@StaticDialog@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?destroy@StaticDialog@@UAEXXZ PROC			; StaticDialog::destroy, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\staticdialog\staticdialog.h
; Line 90
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	1
	push	2036					; 000007f4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
; Line 92
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__DestroyWindow@4
; Line 93
	mov	esp, ebp
	pop	ebp
	ret	0
?destroy@StaticDialog@@UAEXXZ ENDP			; StaticDialog::destroy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?isCreated@StaticDialog@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv70 = -4						; size = 4
?isCreated@StaticDialog@@UBE_NXZ PROC			; StaticDialog::isCreated, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\staticdialog\staticdialog.h
; Line 65
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 66
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@isCreated
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@isCreated
$LN3@isCreated:
	mov	DWORD PTR tv70[ebp], 0
$LN4@isCreated:
	mov	al, BYTE PTR tv70[ebp]
; Line 67
	mov	esp, ebp
	pop	ebp
	ret	0
?isCreated@StaticDialog@@UBE_NXZ ENDP			; StaticDialog::isCreated
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1StaticDialog@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1StaticDialog@@UAE@XZ PROC				; StaticDialog::~StaticDialog, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\staticdialog\staticdialog.h
; Line 57
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1StaticDialog@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7StaticDialog@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 58
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isCreated@StaticDialog@@UBE_NXZ	; StaticDialog::isCreated
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@StaticDial
; Line 59
	push	0
	push	-21					; ffffffebH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SetWindowLongW@12
; Line 60
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@StaticDialog@@UAEXXZ		; StaticDialog::destroy
$LN2@StaticDial:
; Line 62
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Window@@UAE@XZ			; Window::~Window
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1StaticDialog@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Window@@UAE@XZ			; Window::~Window
__ehhandler$??1StaticDialog@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1StaticDialog@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1StaticDialog@@UAE@XZ ENDP				; StaticDialog::~StaticDialog
; Function compile flags: /Odtp
;	COMDAT ??0StaticDialog@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0StaticDialog@@QAE@XZ PROC				; StaticDialog::StaticDialog, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\staticdialog\staticdialog.h
; Line 56
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0StaticDialog@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Window@@QAE@XZ			; Window::Window
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7StaticDialog@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0StaticDialog@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Window@@UAE@XZ			; Window::~Window
__ehhandler$??0StaticDialog@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0StaticDialog@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0StaticDialog@@QAE@XZ ENDP				; StaticDialog::StaticDialog
; Function compile flags: /Odtp
;	COMDAT ??_GWindow@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GWindow@@UAEPAXI@Z PROC				; Window::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Window@@UAE@XZ			; Window::~Window
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GWindow@@UAEPAXI@Z ENDP				; Window::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getHSelf@Window@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHSelf@Window@@QBEPAUHWND__@@XZ PROC			; Window::getHSelf, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 96
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 98
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
; Line 99
	mov	esp, ebp
	pop	ebp
	ret	0
?getHSelf@Window@@QBEPAUHWND__@@XZ ENDP			; Window::getHSelf
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?isVisible@Window@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -1						; size = 1
?isVisible@Window@@UBE_NXZ PROC				; Window::isVisible, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 92
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 93
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__IsWindowVisible@4
	test	eax, eax
	je	SHORT $LN3@isVisible
	mov	BYTE PTR tv68[ebp], 1
	jmp	SHORT $LN4@isVisible
$LN3@isVisible:
	mov	BYTE PTR tv68[ebp], 0
$LN4@isVisible:
	mov	al, BYTE PTR tv68[ebp]
; Line 94
	mov	esp, ebp
	pop	ebp
	ret	0
?isVisible@Window@@UBE_NXZ ENDP				; Window::isVisible
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getHeight@Window@@UBEHXZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
_rc$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?getHeight@Window@@UBEHXZ PROC				; Window::getHeight, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 84
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__GetClientRect@8
; Line 87
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__IsWindowVisible@4
	cmp	eax, 1
	jne	SHORT $LN1@getHeight
; Line 88
	mov	eax, DWORD PTR _rc$[ebp+12]
	sub	eax, DWORD PTR _rc$[ebp+4]
	jmp	SHORT $LN2@getHeight
$LN1@getHeight:
; Line 89
	xor	eax, eax
$LN2@getHeight:
; Line 90
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?getHeight@Window@@UBEHXZ ENDP				; Window::getHeight
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getWidth@Window@@UBEHXZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
_rc$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?getWidth@Window@@UBEHXZ PROC				; Window::getWidth, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 78
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 80
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__GetClientRect@8
; Line 81
	mov	eax, DWORD PTR _rc$[ebp+8]
	sub	eax, DWORD PTR _rc$[ebp]
; Line 82
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?getWidth@Window@@UBEHXZ ENDP				; Window::getWidth
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rc$ = 8						; size = 4
?getWindowRect@Window@@UBEXAAUtagRECT@@@Z PROC		; Window::getWindowRect, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 74
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__GetWindowRect@8
; Line 76
	mov	esp, ebp
	pop	ebp
	ret	4
?getWindowRect@Window@@UBEXAAUtagRECT@@@Z ENDP		; Window::getWindowRect
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getClientRect@Window@@UBEXAAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rc$ = 8						; size = 4
?getClientRect@Window@@UBEXAAUtagRECT@@@Z PROC		; Window::getClientRect, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 71
	mov	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__GetClientRect@8
; Line 72
	mov	esp, ebp
	pop	ebp
	ret	4
?getClientRect@Window@@UBEXAAUtagRECT@@@Z ENDP		; Window::getClientRect
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?redraw@Window@@UBEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_forceUpdate$ = 8					; size = 1
?redraw@Window@@UBEX_N@Z PROC				; Window::redraw, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 64
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 65
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__InvalidateRect@12
; Line 66
	movzx	edx, BYTE PTR _forceUpdate$[ebp]
	test	edx, edx
	je	SHORT $LN2@redraw
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__UpdateWindow@4
$LN2@redraw:
; Line 68
	mov	esp, ebp
	pop	ebp
	ret	4
?redraw@Window@@UBEX_N@Z ENDP				; Window::redraw
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rc$ = 8						; size = 4
?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z PROC		; Window::reSizeToWH, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 59
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 60
	push	1
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _rc$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__MoveWindow@24
; Line 61
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
; Line 62
	mov	esp, ebp
	pop	ebp
	ret	4
?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z ENDP		; Window::reSizeToWH
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rc$ = 8						; size = 4
?reSizeTo@Window@@UAEXAAUtagRECT@@@Z PROC		; Window::reSizeTo, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 53
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 54
	push	1
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _rc$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__MoveWindow@24
; Line 55
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
; Line 56
	mov	esp, ebp
	pop	ebp
	ret	4
?reSizeTo@Window@@UAEXAAUtagRECT@@@Z ENDP		; Window::reSizeTo
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?display@Window@@UBEX_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_toShow$ = 8						; size = 1
?display@Window@@UBEX_N@Z PROC				; Window::display, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	movzx	eax, BYTE PTR _toShow$[ebp]
	test	eax, eax
	je	SHORT $LN3@display
	mov	DWORD PTR tv67[ebp], 5
	jmp	SHORT $LN4@display
$LN3@display:
	mov	DWORD PTR tv67[ebp], 0
$LN4@display:
	mov	ecx, DWORD PTR tv67[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__ShowWindow@8
; Line 50
	mov	esp, ebp
	pop	ebp
	ret	4
?display@Window@@UBEX_N@Z ENDP				; Window::display
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hInst$ = 8						; size = 4
_parent$ = 12						; size = 4
?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z PROC	; Window::init, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 42
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _hInst$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 43
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _parent$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 44
	mov	esp, ebp
	pop	ebp
	ret	8
?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ENDP	; Window::init
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1Window@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Window@@UAE@XZ PROC					; Window::~Window, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 38
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Window@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1Window@@UAE@XZ ENDP					; Window::~Window
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0Window@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Window@@QAE@XZ PROC					; Window::Window, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Window@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Window@@QAE@XZ ENDP					; Window::Window
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _wmemset
_TEXT	SEGMENT
__Su$ = -4						; size = 4
__S$ = 8						; size = 4
__C$ = 12						; size = 2
__N$ = 16						; size = 4
_wmemset PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\wchar.h
; Line 1296
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1297
	mov	eax, DWORD PTR __S$[ebp]
	mov	DWORD PTR __Su$[ebp], eax
; Line 1298
	jmp	SHORT $LN3@wmemset
$LN2@wmemset:
	mov	ecx, DWORD PTR __Su$[ebp]
	add	ecx, 2
	mov	DWORD PTR __Su$[ebp], ecx
	mov	edx, DWORD PTR __N$[ebp]
	sub	edx, 1
	mov	DWORD PTR __N$[ebp], edx
$LN3@wmemset:
	cmp	DWORD PTR __N$[ebp], 0
	jbe	SHORT $LN1@wmemset
; Line 1300
	mov	eax, DWORD PTR __Su$[ebp]
	mov	cx, WORD PTR __C$[ebp]
	mov	WORD PTR [eax], cx
; Line 1301
	jmp	SHORT $LN2@wmemset
$LN1@wmemset:
; Line 1302
	mov	eax, DWORD PTR __S$[ebp]
; Line 1303
	mov	esp, ebp
	pop	ebp
	ret	0
_wmemset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _wmemmove
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemmove PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\wchar.h
; Line 1279
	push	ebp
	mov	ebp, esp
; Line 1284
	mov	eax, DWORD PTR __N$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR __S2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __S1$[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH
; Line 1286
	pop	ebp
	ret	0
_wmemmove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\wchar.h
; Line 1271
	push	ebp
	mov	ebp, esp
; Line 1274
	mov	eax, DWORD PTR __N$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR __S2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __S1$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1276
	pop	ebp
	ret	0
_wmemcpy ENDP
_TEXT	ENDS
END
