; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\src\uchardet\nsSBCharSetProber.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?GetCharSetName@nsSingleByteCharSetProber@@UAEPBDXZ ; nsSingleByteCharSetProber::GetCharSetName
PUBLIC	?HandleData@nsSingleByteCharSetProber@@UAE?AW4nsProbingState@@PBDI@Z ; nsSingleByteCharSetProber::HandleData
PUBLIC	?Reset@nsSingleByteCharSetProber@@UAEXXZ	; nsSingleByteCharSetProber::Reset
PUBLIC	?GetConfidence@nsSingleByteCharSetProber@@UAEMXZ ; nsSingleByteCharSetProber::GetConfidence
PUBLIC	__real@3c23d70a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3f733333
PUBLIC	__real@3f7d70a4
PUBLIC	__real@3f800000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	__fltused:DWORD
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7d70a4
CONST	SEGMENT
__real@3f7d70a4 DD 03f7d70a4r			; 0.99
CONST	ENDS
;	COMDAT __real@3f733333
CONST	SEGMENT
__real@3f733333 DD 03f733333r			; 0.95
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv157 = -56						; size = 8
tv146 = -48						; size = 8
tv135 = -40						; size = 8
tv92 = -32						; size = 8
tv153 = -24						; size = 4
tv142 = -20						; size = 4
tv131 = -16						; size = 4
tv88 = -12						; size = 4
_r$ = -8						; size = 4
_this$ = -4						; size = 4
?GetConfidence@nsSingleByteCharSetProber@@UAEMXZ PROC	; nsSingleByteCharSetProber::GetConfidence
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\uchardet\nssbcharsetprober.cpp
; Line 95
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jbe	$LN2@GetConfide
; Line 105
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+20]
	mov	DWORD PTR tv88[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv88[ebp]
	mov	edx, DWORD PTR tv88[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv92[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv92[ebp]
	mulss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv131[ebp], ecx
	cvtsi2sd xmm1, DWORD PTR tv131[ebp]
	mov	edx, DWORD PTR tv131[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv135[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv135[ebp]
	divss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	divss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR _r$[ebp], xmm0
; Line 106
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR tv142[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv142[ebp]
	mov	ecx, DWORD PTR tv142[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv146[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv146[ebp]
	mulss	xmm0, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR tv153[ebp], eax
	cvtsi2sd xmm1, DWORD PTR tv153[ebp]
	mov	ecx, DWORD PTR tv153[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv157[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv157[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _r$[ebp], xmm0
; Line 107
	movss	xmm0, DWORD PTR _r$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN1@GetConfide
; Line 108
	movss	xmm0, DWORD PTR __real@3f7d70a4
	movss	DWORD PTR _r$[ebp], xmm0
$LN1@GetConfide:
; Line 109
	fld	DWORD PTR _r$[ebp]
	jmp	SHORT $LN3@GetConfide
$LN2@GetConfide:
; Line 111
	fld	DWORD PTR __real@3c23d70a
$LN3@GetConfide:
; Line 113
	mov	esp, ebp
	pop	ebp
	ret	0
?GetConfidence@nsSingleByteCharSetProber@@UAEMXZ ENDP	; nsSingleByteCharSetProber::GetConfidence
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
?Reset@nsSingleByteCharSetProber@@UAEXXZ PROC		; nsSingleByteCharSetProber::Reset
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\uchardet\nssbcharsetprober.cpp
; Line 82
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 83
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 84
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+13], 255			; 000000ffH
; Line 85
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@Reset
$LN2@Reset:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN3@Reset:
	cmp	DWORD PTR _i$1[ebp], 4
	jae	SHORT $LN1@Reset
; Line 86
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+20], 0
	jmp	SHORT $LN2@Reset
$LN1@Reset:
; Line 87
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 0
; Line 90
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@nsSingleByteCharSetProber@@UAEXXZ ENDP		; nsSingleByteCharSetProber::Reset
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_cf$1 = -16						; size = 4
_i$2 = -12						; size = 4
_this$ = -8						; size = 4
_order$ = -1						; size = 1
_aBuf$ = 8						; size = 4
_aLen$ = 12						; size = 4
?HandleData@nsSingleByteCharSetProber@@UAE?AW4nsProbingState@@PBDI@Z PROC ; nsSingleByteCharSetProber::HandleData
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\uchardet\nssbcharsetprober.cpp
; Line 43
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
; Line 46
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN13@HandleData
$LN12@HandleData:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN13@HandleData:
	mov	ecx, DWORD PTR _i$2[ebp]
	cmp	ecx, DWORD PTR _aLen$[ebp]
	jae	$LN11@HandleData
; Line 48
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _aBuf$[ebp]
	add	ecx, DWORD PTR _i$2[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	cl, BYTE PTR [eax+edx]
	mov	BYTE PTR _order$[ebp], cl
; Line 50
	movzx	edx, BYTE PTR _order$[ebp]
	cmp	edx, 250				; 000000faH
	jge	SHORT $LN10@HandleData
; Line 51
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], ecx
$LN10@HandleData:
; Line 52
	movzx	eax, BYTE PTR _order$[ebp]
	cmp	eax, 64					; 00000040H
	jge	$LN6@HandleData
; Line 54
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], edx
; Line 56
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+13]
	cmp	edx, 64					; 00000040H
	jge	$LN6@HandleData
; Line 58
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 59
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN7@HandleData
; Line 60
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+13]
	shl	edx, 6
	movzx	ecx, BYTE PTR _order$[ebp]
	add	edx, ecx
	mov	eax, DWORD PTR [eax+4]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+20]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movzx	ecx, BYTE PTR _order$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [esi+13]
	shl	esi, 6
	add	esi, ecx
	mov	edx, DWORD PTR [edx+4]
	movzx	ecx, BYTE PTR [edx+esi]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+20], eax
; Line 61
	jmp	SHORT $LN6@HandleData
$LN7@HandleData:
; Line 62
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, BYTE PTR _order$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+13]
	add	edx, eax
	mov	ecx, DWORD PTR [ecx+4]
	movzx	edx, BYTE PTR [ecx+edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+20]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [edx+13]
	movzx	esi, BYTE PTR _order$[ebp]
	shl	esi, 6
	add	esi, edx
	mov	eax, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [eax+esi]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx*4+20], ecx
$LN6@HandleData:
; Line 65
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _order$[ebp]
	mov	BYTE PTR [ecx+13], dl
; Line 66
	jmp	$LN12@HandleData
$LN11@HandleData:
; Line 68
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@HandleData
; Line 69
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], 1024		; 00000400H
	jbe	SHORT $LN1@HandleData
; Line 71
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	fstp	DWORD PTR _cf$1[ebp]
; Line 72
	movss	xmm0, DWORD PTR _cf$1[ebp]
	comiss	xmm0, DWORD PTR __real@3f733333
	jbe	SHORT $LN3@HandleData
; Line 73
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 1
	jmp	SHORT $LN1@HandleData
$LN3@HandleData:
; Line 74
	movss	xmm0, DWORD PTR __real@3d4ccccd
	comiss	xmm0, DWORD PTR _cf$1[ebp]
	jbe	SHORT $LN1@HandleData
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 2
$LN1@HandleData:
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
; Line 79
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?HandleData@nsSingleByteCharSetProber@@UAE?AW4nsProbingState@@PBDI@Z ENDP ; nsSingleByteCharSetProber::HandleData
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCharSetName@nsSingleByteCharSetProber@@UAEPBDXZ PROC ; nsSingleByteCharSetProber::GetCharSetName
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\uchardet\nssbcharsetprober.cpp
; Line 116
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 117
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN1@GetCharSet
; Line 118
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+16]
	jmp	SHORT $LN2@GetCharSet
$LN1@GetCharSet:
; Line 119
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+44]
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN2@GetCharSet:
; Line 120
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCharSetName@nsSingleByteCharSetProber@@UAEPBDXZ ENDP ; nsSingleByteCharSetProber::GetCharSetName
_TEXT	ENDS
END
