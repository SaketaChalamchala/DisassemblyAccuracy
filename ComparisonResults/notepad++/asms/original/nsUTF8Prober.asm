; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\src\uchardet\nsUTF8Prober.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?NextState@nsCodingStateMachine@@QAE?AW4nsSMState@@D@Z ; nsCodingStateMachine::NextState
PUBLIC	?GetCurrentCharLen@nsCodingStateMachine@@QAEIXZ	; nsCodingStateMachine::GetCurrentCharLen
PUBLIC	?Reset@nsCodingStateMachine@@QAEXXZ		; nsCodingStateMachine::Reset
PUBLIC	?HandleData@nsUTF8Prober@@UAE?AW4nsProbingState@@PBDI@Z ; nsUTF8Prober::HandleData
PUBLIC	?Reset@nsUTF8Prober@@UAEXXZ			; nsUTF8Prober::Reset
PUBLIC	?GetConfidence@nsUTF8Prober@@UAEMXZ		; nsUTF8Prober::GetConfidence
PUBLIC	__real@3f000000
PUBLIC	__real@3f733333
PUBLIC	__real@3f7d70a4
PUBLIC	__real@3f800000
EXTRN	__fltused:DWORD
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7d70a4
CONST	SEGMENT
__real@3f7d70a4 DD 03f7d70a4r			; 0.99
CONST	ENDS
;	COMDAT __real@3f733333
CONST	SEGMENT
__real@3f733333 DD 03f733333r			; 0.95
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv79 = -16						; size = 4
_this$ = -12						; size = 4
_unlike$ = -8						; size = 4
_i$1 = -4						; size = 4
?GetConfidence@nsUTF8Prober@@UAEMXZ PROC		; nsUTF8Prober::GetConfidence
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\uchardet\nsutf8prober.cpp
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 76
	movss	xmm0, DWORD PTR __real@3f7d70a4
	movss	DWORD PTR _unlike$[ebp], xmm0
; Line 78
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 6
	jae	SHORT $LN5@GetConfide
; Line 80
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@GetConfide
$LN3@GetConfide:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN4@GetConfide:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR [edx+12]
	jae	SHORT $LN2@GetConfide
; Line 81
	movss	xmm0, DWORD PTR _unlike$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _unlike$[ebp], xmm0
	jmp	SHORT $LN3@GetConfide
$LN2@GetConfide:
; Line 82
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _unlike$[ebp]
	movss	DWORD PTR tv79[ebp], xmm0
	fld	DWORD PTR tv79[ebp]
	jmp	SHORT $LN1@GetConfide
; Line 84
	jmp	SHORT $LN1@GetConfide
$LN5@GetConfide:
; Line 85
	fld	DWORD PTR __real@3f7d70a4
$LN1@GetConfide:
; Line 86
	mov	esp, ebp
	pop	ebp
	ret	0
?GetConfidence@nsUTF8Prober@@UAEMXZ ENDP		; nsUTF8Prober::GetConfidence
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@nsUTF8Prober@@UAEXXZ PROC			; nsUTF8Prober::Reset
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\uchardet\nsutf8prober.cpp
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 42
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Reset@nsCodingStateMachine@@QAEXXZ	; nsCodingStateMachine::Reset
; Line 43
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 44
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 45
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@nsUTF8Prober@@UAEXXZ ENDP			; nsUTF8Prober::Reset
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv148 = -16						; size = 4
_codingState$ = -12					; size = 4
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_aBuf$ = 8						; size = 4
_aLen$ = 12						; size = 4
?HandleData@nsUTF8Prober@@UAE?AW4nsProbingState@@PBDI@Z PROC ; nsUTF8Prober::HandleData
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\uchardet\nsutf8prober.cpp
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 51
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN8@HandleData
$LN7@HandleData:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN8@HandleData:
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR _aLen$[ebp]
	jae	SHORT $LN6@HandleData
; Line 53
	mov	edx, DWORD PTR _aBuf$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?NextState@nsCodingStateMachine@@QAE?AW4nsSMState@@D@Z ; nsCodingStateMachine::NextState
	mov	DWORD PTR _codingState$[ebp], eax
; Line 54
	cmp	DWORD PTR _codingState$[ebp], 2
	jne	SHORT $LN5@HandleData
; Line 56
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 1
; Line 57
	jmp	SHORT $LN6@HandleData
$LN5@HandleData:
; Line 59
	cmp	DWORD PTR _codingState$[ebp], 0
	jne	SHORT $LN3@HandleData
; Line 61
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?GetCurrentCharLen@nsCodingStateMachine@@QAEIXZ ; nsCodingStateMachine::GetCurrentCharLen
	cmp	eax, 2
	jb	SHORT $LN3@HandleData
; Line 62
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@HandleData:
; Line 64
	jmp	SHORT $LN7@HandleData
$LN6@HandleData:
; Line 66
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN1@HandleData
; Line 67
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	fstp	DWORD PTR tv148[ebp]
	movss	xmm0, DWORD PTR tv148[ebp]
	comiss	xmm0, DWORD PTR __real@3f733333
	jbe	SHORT $LN1@HandleData
; Line 68
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 1
$LN1@HandleData:
; Line 69
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
; Line 70
	mov	esp, ebp
	pop	ebp
	ret	8
?HandleData@nsUTF8Prober@@UAE?AW4nsProbingState@@PBDI@Z ENDP ; nsUTF8Prober::HandleData
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?Reset@nsCodingStateMachine@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@nsCodingStateMachine@@QAEXXZ PROC		; nsCodingStateMachine::Reset, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\uchardet\nscodingstatemachine.h
; Line 81
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@nsCodingStateMachine@@QAEXXZ ENDP		; nsCodingStateMachine::Reset
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?GetCurrentCharLen@nsCodingStateMachine@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurrentCharLen@nsCodingStateMachine@@QAEIXZ PROC	; nsCodingStateMachine::GetCurrentCharLen, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\uchardet\nscodingstatemachine.h
; Line 80
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentCharLen@nsCodingStateMachine@@QAEIXZ ENDP	; nsCodingStateMachine::GetCurrentCharLen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?NextState@nsCodingStateMachine@@QAE?AW4nsSMState@@D@Z
_TEXT	SEGMENT
_byteCls$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 1
?NextState@nsCodingStateMachine@@QAE?AW4nsSMState@@D@Z PROC ; nsCodingStateMachine::NextState, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\uchardet\nscodingstatemachine.h
; Line 66
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
; Line 68
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	movzx	eax, BYTE PTR _c$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [ecx]
	sar	eax, cl
	mov	edx, DWORD PTR [edx+16]
	movzx	esi, BYTE PTR _c$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	and	esi, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [ecx+8]
	shl	esi, cl
	mov	edx, DWORD PTR [edx+eax*4]
	mov	ecx, esi
	shr	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _byteCls$[ebp], edx
; Line 69
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN1@NextState
; Line 71
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 72
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _byteCls$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+4], eax
$LN1@NextState:
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	imul	eax, DWORD PTR [ecx+20]
	add	eax, DWORD PTR _byteCls$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [ecx+24]
	shr	eax, cl
	mov	edx, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	mov	esi, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [esi]
	imul	esi, DWORD PTR [ecx+20]
	add	esi, DWORD PTR _byteCls$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	and	esi, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [ecx+32]
	shl	esi, cl
	mov	edx, DWORD PTR [edx+eax*4]
	mov	ecx, esi
	shr	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx
; Line 77
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 78
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
; Line 79
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?NextState@nsCodingStateMachine@@QAE?AW4nsSMState@@D@Z ENDP ; nsCodingStateMachine::NextState
_TEXT	ENDS
END
