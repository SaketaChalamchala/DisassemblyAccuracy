; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\src\ScitillaComponent\columnEditor.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_acTop_xpm DD	FLAT:$SG160408
	DD	FLAT:$SG160409
	DD	FLAT:$SG160410
	DD	FLAT:$SG160411
	DD	FLAT:$SG160412
	DD	FLAT:$SG160413
	DD	FLAT:$SG160414
	DD	FLAT:$SG160415
	DD	FLAT:$SG160416
	DD	FLAT:$SG160417
	DD	FLAT:$SG160418
	DD	FLAT:$SG160419
	DD	FLAT:$SG160420
	DD	FLAT:$SG160421
	DD	FLAT:$SG160422
	DD	FLAT:$SG160423
	DD	FLAT:$SG160424
	DD	FLAT:$SG160425
	DD	FLAT:$SG160426
	DD	FLAT:$SG160427
	DD	FLAT:$SG160428
	DD	FLAT:$SG160429
	DD	FLAT:$SG160430
	DD	FLAT:$SG160431
	DD	FLAT:$SG160432
	DD	FLAT:$SG160433
	DD	FLAT:$SG160434
	DD	FLAT:$SG160435
	DD	FLAT:$SG160436
	DD	FLAT:$SG160437
	DD	FLAT:$SG160438
	DD	FLAT:$SG160439
	DD	FLAT:$SG160440
	DD	FLAT:$SG160441
	DD	FLAT:$SG160442
	DD	FLAT:$SG160443
	DD	FLAT:$SG160444
	DD	FLAT:$SG160445
	DD	FLAT:$SG160446
	DD	FLAT:$SG160447
	DD	FLAT:$SG160448
	DD	FLAT:$SG160449
	DD	FLAT:$SG160450
	DD	FLAT:$SG160451
	DD	FLAT:$SG160452
	DD	FLAT:$SG160453
	DD	FLAT:$SG160454
	DD	FLAT:$SG160455
	DD	FLAT:$SG160456
	DD	FLAT:$SG160457
	DD	FLAT:$SG160458
	DD	FLAT:$SG160459
	DD	FLAT:$SG160460
	DD	FLAT:$SG160461
	DD	FLAT:$SG160462
	DD	FLAT:$SG160463
	DD	FLAT:$SG160464
	DD	FLAT:$SG160465
	DD	FLAT:$SG160466
	DD	FLAT:$SG160467
	DD	FLAT:$SG160468
	DD	FLAT:$SG160469
	DD	FLAT:$SG160470
	DD	FLAT:$SG160471
	DD	FLAT:$SG160472
	DD	FLAT:$SG160473
	DD	FLAT:$SG160474
	DD	FLAT:$SG160475
	DD	FLAT:$SG160476
	ORG $+4
_acBottom_xpm DD FLAT:$SG160478
	DD	FLAT:$SG160479
	DD	FLAT:$SG160480
	DD	FLAT:$SG160481
	DD	FLAT:$SG160482
	DD	FLAT:$SG160483
	DD	FLAT:$SG160484
	DD	FLAT:$SG160485
	DD	FLAT:$SG160486
	DD	FLAT:$SG160487
	DD	FLAT:$SG160488
	DD	FLAT:$SG160489
	DD	FLAT:$SG160490
	DD	FLAT:$SG160491
	DD	FLAT:$SG160492
	DD	FLAT:$SG160493
	DD	FLAT:$SG160494
	DD	FLAT:$SG160495
	DD	FLAT:$SG160496
	DD	FLAT:$SG160497
	DD	FLAT:$SG160498
	DD	FLAT:$SG160499
	DD	FLAT:$SG160500
	DD	FLAT:$SG160501
	DD	FLAT:$SG160502
	DD	FLAT:$SG160503
	DD	FLAT:$SG160504
	DD	FLAT:$SG160505
	DD	FLAT:$SG160506
	DD	FLAT:$SG160507
	DD	FLAT:$SG160508
	DD	FLAT:$SG160509
	DD	FLAT:$SG160510
	DD	FLAT:$SG160511
	DD	FLAT:$SG160512
	DD	FLAT:$SG160513
	DD	FLAT:$SG160514
	DD	FLAT:$SG160515
	DD	FLAT:$SG160516
	DD	FLAT:$SG160517
	DD	FLAT:$SG160518
	DD	FLAT:$SG160519
	DD	FLAT:$SG160520
	DD	FLAT:$SG160521
	DD	FLAT:$SG160522
	DD	FLAT:$SG160523
	DD	FLAT:$SG160524
	DD	FLAT:$SG160525
	DD	FLAT:$SG160526
	DD	FLAT:$SG160527
	DD	FLAT:$SG160528
	DD	FLAT:$SG160529
	DD	FLAT:$SG160530
	DD	FLAT:$SG160531
	DD	FLAT:$SG160532
	DD	FLAT:$SG160533
	DD	FLAT:$SG160534
	DD	FLAT:$SG160535
	DD	FLAT:$SG160536
	DD	FLAT:$SG160537
	DD	FLAT:$SG160538
	DD	FLAT:$SG160539
	DD	FLAT:$SG160540
	DD	FLAT:$SG160541
	DD	FLAT:$SG160542
	DD	FLAT:$SG160543
	DD	FLAT:$SG160544
	ORG $+4
_bookmark_xpm DD FLAT:$SG160546
	DD	FLAT:$SG160547
	DD	FLAT:$SG160548
	DD	FLAT:$SG160549
	DD	FLAT:$SG160550
	DD	FLAT:$SG160551
	DD	FLAT:$SG160552
	DD	FLAT:$SG160553
	DD	FLAT:$SG160554
	DD	FLAT:$SG160555
	DD	FLAT:$SG160556
	DD	FLAT:$SG160557
	DD	FLAT:$SG160558
	DD	FLAT:$SG160559
	DD	FLAT:$SG160560
	DD	FLAT:$SG160561
	DD	FLAT:$SG160562
	DD	FLAT:$SG160563
	DD	FLAT:$SG160564
	DD	FLAT:$SG160565
	DD	FLAT:$SG160566
	DD	FLAT:$SG160567
	DD	FLAT:$SG160568
	DD	FLAT:$SG160569
	DD	FLAT:$SG160570
	DD	FLAT:$SG160571
	DD	FLAT:$SG160572
	DD	FLAT:$SG160573
	DD	FLAT:$SG160574
	DD	FLAT:$SG160575
	DD	FLAT:$SG160576
	DD	FLAT:$SG160577
	DD	FLAT:$SG160578
	DD	FLAT:$SG160579
	DD	FLAT:$SG160580
	DD	FLAT:$SG160581
	DD	FLAT:$SG160582
	DD	FLAT:$SG160583
	DD	FLAT:$SG160584
	DD	FLAT:$SG160585
	DD	FLAT:$SG160586
	DD	FLAT:$SG160587
	DD	FLAT:$SG160588
	DD	FLAT:$SG160589
	DD	FLAT:$SG160590
	DD	FLAT:$SG160591
	DD	FLAT:$SG160592
	DD	FLAT:$SG160593
	DD	FLAT:$SG160594
	DD	FLAT:$SG160595
	DD	FLAT:$SG160596
	DD	FLAT:$SG160597
	DD	FLAT:$SG160598
	DD	FLAT:$SG160599
	DD	FLAT:$SG160600
	DD	FLAT:$SG160601
	DD	FLAT:$SG160602
	DD	FLAT:$SG160603
	DD	FLAT:$SG160604
	DD	FLAT:$SG160605
	DD	FLAT:$SG160606
	DD	FLAT:$SG160607
	DD	FLAT:$SG160608
	DD	FLAT:$SG160609
	DD	FLAT:$SG160610
	DD	FLAT:$SG160611
	DD	FLAT:$SG160612
	DD	FLAT:$SG160613
	DD	FLAT:$SG160614
_DATA	ENDS
CONST	SEGMENT
$SG168125 DB	'StaticDialog::init : ppEditView is null.', 00H
	ORG $+7
$SG169245 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'S', 00H, 'c', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'l'
	DB	00H, 'l', 00H, 'a', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'p', 00H
	DB	'o', 00H, 'n', 00H, 'e', 00H, 'n', 00H, 't', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, 'E', 00H
	DB	'd', 00H, 'i', 00H, 't', 00H, 'o', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG169246 DB	'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '.', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '('
	DB	00H, ')', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG160408 DB	'12 12 56 1', 00H
	ORG $+1
$SG160409 DB	' ', 09H, 'c #FFFFFF', 00H
$SG160410 DB	'.', 09H, 'c #8AB2E9', 00H
$SG160411 DB	'+', 09H, 'c #CCDCF6', 00H
$SG160412 DB	'@', 09H, 'c #80ABEA', 00H
$SG160413 DB	'#', 09H, 'c #7DA9E8', 00H
$SG160414 DB	'$', 09H, 'c #C7DAF3', 00H
$SG160415 DB	'%', 09H, 'c #79A7E6', 00H
$SG160416 DB	'&', 09H, 'c #ADC8EF', 00H
$SG160417 DB	'*', 09H, 'c #87B0E8', 00H
$SG160418 DB	'=', 09H, 'c #BBD2F0', 00H
$SG160419 DB	'-', 09H, 'c #6EA0E2', 00H
$SG160420 DB	';', 09H, 'c #A8C7EE', 00H
$SG160421 DB	'>', 09H, 'c #A3C2ED', 00H
$SG160422 DB	',', 09H, 'c #75A4E3', 00H
$SG160423 DB	'''', 09H, 'c #A7C4EB', 00H
$SG160424 DB	')', 09H, 'c #6297E1', 00H
$SG160425 DB	'!', 09H, 'c #A1C1EC', 00H
$SG160426 DB	'~', 09H, 'c #92B7E8', 00H
$SG160427 DB	'{', 09H, 'c #99BBE9', 00H
$SG160428 DB	']', 09H, 'c #6197DD', 00H
$SG160429 DB	'^', 09H, 'c #96B9E6', 00H
$SG160430 DB	'/', 09H, 'c #538EDB', 00H
$SG160431 DB	'(', 09H, 'c #99BBEA', 00H
$SG160432 DB	'_', 09H, 'c #80AAE3', 00H
$SG160433 DB	':', 09H, 'c #81ABE3', 00H
$SG160434 DB	'<', 09H, 'c #8AB1E4', 00H
$SG160435 DB	'[', 09H, 'c #4B88D6', 00H
$SG160436 DB	'}', 09H, 'c #4882D1', 00H
$SG160437 DB	'|', 09H, 'c #4384D6', 00H
$SG160438 DB	'1', 09H, 'c #90B5E7', 00H
$SG160439 DB	'2', 09H, 'c #74A3E0', 00H
$SG160440 DB	'3', 09H, 'c #77A4E0', 00H
$SG160441 DB	'4', 09H, 'c #81ABE2', 00H
$SG160442 DB	'5', 09H, 'c #437FD3', 00H
$SG160443 DB	'6', 09H, 'c #7FA2DF', 00H
$SG160444 DB	'7', 09H, 'c #3577D2', 00H
$SG160445 DB	'8', 09H, 'c #87AFE4', 00H
$SG160446 DB	'9', 09H, 'c #72A1DF', 00H
$SG160447 DB	'0', 09H, 'c #7CA9E1', 00H
$SG160448 DB	'a', 09H, 'c #3F7AD0', 00H
$SG160449 DB	'b', 09H, 'c #85A4DE', 00H
$SG160450 DB	'c', 09H, 'c #FBFCFE', 00H
$SG160451 DB	'd', 09H, 'c #236ECD', 00H
$SG160452 DB	'e', 09H, 'c #7EA8E1', 00H
$SG160453 DB	'f', 09H, 'c #79A6E0', 00H
$SG160454 DB	'g', 09H, 'c #3D77D0', 00H
$SG160455 DB	'h', 09H, 'c #87A4DC', 00H
$SG160456 DB	'i', 09H, 'c #1A62C9', 00H
$SG160457 DB	'j', 09H, 'c #75A3DF', 00H
$SG160458 DB	'k', 09H, 'c #3C74CF', 00H
$SG160459 DB	'l', 09H, 'c #8DA6DE', 00H
$SG160460 DB	'm', 09H, 'c #1859C4', 00H
$SG160461 DB	'n', 09H, 'c #3B71CC', 00H
$SG160462 DB	'o', 09H, 'c #8EA5DD', 00H
$SG160463 DB	'p', 09H, 'c #164EC0', 00H
$SG160464 DB	'q', 09H, 'c #92A7DD', 00H
$SG160465 DB	'    .+      ', 00H
	ORG $+3
$SG160466 DB	'    @#$     ', 00H
	ORG $+3
$SG160467 DB	'    %&*=    ', 00H
	ORG $+3
$SG160468 DB	'    -;>,''   ', 00H
	ORG $+3
$SG160469 DB	'    )!~{]^  ', 00H
	ORG $+3
$SG160470 DB	'    /(_:<[} ', 00H
	ORG $+3
$SG160471 DB	'    |123456 ', 00H
	ORG $+3
$SG160472 DB	'    7890abc ', 00H
	ORG $+3
$SG160473 DB	'    defgh   ', 00H
	ORG $+3
$SG160474 DB	'    ijkl    ', 00H
	ORG $+3
$SG160475 DB	'    mno     ', 00H
	ORG $+3
$SG160476 DB	'    pq      ', 00H
	ORG $+3
$SG160478 DB	'12 12 54 1', 00H
	ORG $+1
$SG160479 DB	' ', 09H, 'c #FFFFFF', 00H
$SG160480 DB	'.', 09H, 'c #C4D7F3', 00H
$SG160481 DB	'+', 09H, 'c #72A1E3', 00H
$SG160482 DB	'@', 09H, 'c #C1D6F2', 00H
$SG160483 DB	'#', 09H, 'c #6397E1', 00H
$SG160484 DB	'$', 09H, 'c #5990DD', 00H
$SG160485 DB	'%', 09H, 'c #BBD2F0', 00H
$SG160486 DB	'&', 09H, 'c #7AA6E5', 00H
$SG160487 DB	'*', 09H, 'c #9ABDEA', 00H
$SG160488 DB	'=', 09H, 'c #4A87D9', 00H
$SG160489 DB	'-', 09H, 'c #B1CAEE', 00H
$SG160490 DB	';', 09H, 'c #75A4E3', 00H
$SG160491 DB	'>', 09H, 'c #99BBE9', 00H
$SG160492 DB	',', 09H, 'c #95B9E8', 00H
$SG160493 DB	'''', 09H, 'c #3A7CD4', 00H
$SG160494 DB	')', 09H, 'c #A9C6EC', 00H
$SG160495 DB	'!', 09H, 'c #71A0E0', 00H
$SG160496 DB	'~', 09H, 'c #86AFE5', 00H
$SG160497 DB	'{', 09H, 'c #8DB2E6', 00H
$SG160498 DB	']', 09H, 'c #2A72CF', 00H
$SG160499 DB	'^', 09H, 'c #73A0E0', 00H
$SG160500 DB	'/', 09H, 'c #6B9DE0', 00H
$SG160501 DB	'(', 09H, 'c #95B8E8', 00H
$SG160502 DB	'_', 09H, 'c #81ABE3', 00H
$SG160503 DB	':', 09H, 'c #72A1DF', 00H
$SG160504 DB	'<', 09H, 'c #83ADE3', 00H
$SG160505 DB	'[', 09H, 'c #1B65C9', 00H
$SG160506 DB	'}', 09H, 'c #5F95DC', 00H
$SG160507 DB	'|', 09H, 'c #8BB3E5', 00H
$SG160508 DB	'1', 09H, 'c #77A4E0', 00H
$SG160509 DB	'2', 09H, 'c #679ADC', 00H
$SG160510 DB	'3', 09H, 'c #7AA6E1', 00H
$SG160511 DB	'4', 09H, 'c #195CC6', 00H
$SG160512 DB	'5', 09H, 'c #FCFDFE', 00H
$SG160513 DB	'6', 09H, 'c #8DB2E4', 00H
$SG160514 DB	'7', 09H, 'c #4885D6', 00H
$SG160515 DB	'8', 09H, 'c #7CA9E1', 00H
$SG160516 DB	'9', 09H, 'c #6698DB', 00H
$SG160517 DB	'0', 09H, 'c #71A1DE', 00H
$SG160518 DB	'a', 09H, 'c #1752C0', 00H
$SG160519 DB	'b', 09H, 'c #88ABE0', 00H
$SG160520 DB	'c', 09H, 'c #3D77D0', 00H
$SG160521 DB	'd', 09H, 'c #6E9FDD', 00H
$SG160522 DB	'e', 09H, 'c #699BDC', 00H
$SG160523 DB	'f', 09H, 'c #1547BD', 00H
$SG160524 DB	'g', 09H, 'c #8DA6DE', 00H
$SG160525 DB	'h', 09H, 'c #376BC9', 00H
$SG160526 DB	'i', 09H, 'c #6295DA', 00H
$SG160527 DB	'j', 09H, 'c #1440B9', 00H
$SG160528 DB	'k', 09H, 'c #8DA0DB', 00H
$SG160529 DB	'l', 09H, 'c #315FC4', 00H
$SG160530 DB	'm', 09H, 'c #1339B7', 00H
$SG160531 DB	'n', 09H, 'c #909FDA', 00H
$SG160532 DB	'o', 09H, 'c #1233B4', 00H
$SG160533 DB	'         .+ ', 00H
	ORG $+3
$SG160534 DB	'        @#$ ', 00H
	ORG $+3
$SG160535 DB	'       %&*= L', 00H
	ORG $+2
$SG160536 DB	'      -;>,'' ', 00H
	ORG $+3
$SG160537 DB	'     )!>~{] ', 00H
	ORG $+3
$SG160538 DB	'    ^/(_:<[ ', 00H
	ORG $+3
$SG160539 DB	'    (}|1234 ', 00H
	ORG $+3
$SG160540 DB	'    567890a ', 00H
	ORG $+3
$SG160541 DB	'      bcdef ', 00H
	ORG $+3
$SG160542 DB	'       ghij ', 00H
	ORG $+3
$SG160543 DB	'        klm ', 00H
	ORG $+3
$SG160544 DB	'         no ', 00H
	ORG $+3
$SG160546 DB	'13 14 54 1', 00H
	ORG $+1
$SG160547 DB	' ', 09H, 'c None', 00H
	ORG $+3
$SG160548 DB	'.', 09H, 'c #545254', 00H
$SG160549 DB	'+', 09H, 'c #3C3E3C', 00H
$SG160550 DB	'@', 09H, 'c #646464', 00H
$SG160551 DB	'#', 09H, 'c #A4A4A4', 00H
$SG160552 DB	'$', 09H, 'c #B7B8B7', 00H
$SG160553 DB	'%', 09H, 'c #747284', 00H
$SG160554 DB	'&', 09H, 'c #B4B2C4', 00H
$SG160555 DB	'*', 09H, 'c #DCD7E4', 00H
$SG160556 DB	'=', 09H, 'c #1C1A1C', 00H
$SG160557 DB	'-', 09H, 'c #403E58', 00H
$SG160558 DB	';', 09H, 'c #5C5A8C', 00H
$SG160559 DB	'>', 09H, 'c #7C7EAC', 00H
$SG160560 DB	',', 09H, 'c #7C8EBC', 00H
$SG160561 DB	'''', 09H, 'c #242644', 00H
$SG160562 DB	')', 09H, 'c #282668', 00H
$SG160563 DB	'!', 09H, 'c #24367C', 00H
$SG160564 DB	'~', 09H, 'c #244A84', 00H
$SG160565 DB	'{', 09H, 'c #2C5098', 00H
$SG160566 DB	']', 09H, 'c #14162C', 00H
$SG160567 DB	'^', 09H, 'c #142E7C', 00H
$SG160568 DB	'/', 09H, 'c #143789', 00H
$SG160569 DB	'(', 09H, 'c #204990', 00H
$SG160570 DB	'_', 09H, 'c #174091', 00H
$SG160571 DB	':', 09H, 'c #0C0630', 00H
$SG160572 DB	'<', 09H, 'c #24327C', 00H
$SG160573 DB	'[', 09H, 'c #2450A0', 00H
$SG160574 DB	'}', 09H, 'c #345DB4', 00H
$SG160575 DB	'|', 09H, 'c #3C68B8', 00H
$SG160576 DB	'1', 09H, 'c #141244', 00H
$SG160577 DB	'2', 09H, 'c #24428C', 00H
$SG160578 DB	'3', 09H, 'c #3462B9', 00H
$SG160579 DB	'4', 09H, 'c #4470C4', 00H
$SG160580 DB	'5', 09H, 'c #4C7FD6', 00H
$SG160581 DB	'6', 09H, 'c #4472CC', 00H
$SG160582 DB	'7', 09H, 'c #24224C', 00H
$SG160583 DB	'8', 09H, 'c #5C8DEC', 00H
$SG160584 DB	'9', 09H, 'c #5C94F6', 00H
$SG160585 DB	'0', 09H, 'c #5482DF', 00H
$SG160586 DB	'a', 09H, 'c #619DF7', 00H
$SG160587 DB	'b', 09H, 'c #6CA6FC', 00H
$SG160588 DB	'c', 09H, 'c #64A2FC', 00H
$SG160589 DB	'd', 09H, 'c #1C2E5C', 00H
$SG160590 DB	'e', 09H, 'c #6CA2FC', 00H
$SG160591 DB	'f', 09H, 'c #74B2FC', 00H
$SG160592 DB	'g', 09H, 'c #7CB8FC', 00H
$SG160593 DB	'h', 09H, 'c #1C3264', 00H
$SG160594 DB	'i', 09H, 'c #346AD4', 00H
$SG160595 DB	'j', 09H, 'c #7CBEFC', 00H
$SG160596 DB	'k', 09H, 'c #3C72DC', 00H
$SG160597 DB	'l', 09H, 'c #243250', 00H
$SG160598 DB	'm', 09H, 'c #346AB4', 00H
$SG160599 DB	'n', 09H, 'c #3C82DC', 00H
$SG160600 DB	'o', 09H, 'c #6C6A6C', 00H
$SG160601 DB	'     .+.     ', 00H
	ORG $+2
$SG160602 DB	'   @##$##@   ', 00H
	ORG $+2
$SG160603 DB	'  @%&***&%@  ', 00H
	ORG $+2
$SG160604 DB	' =-;>,,,>;-= ', 00H
	ORG $+2
$SG160605 DB	' '')!~{{{~!)'' ', 00H
	ORG $+2
$SG160606 DB	'])^/({{{(_^)]', 00H
	ORG $+2
$SG160607 DB	':<_[}|||}[_<:', 00H
	ORG $+2
$SG160608 DB	'12[3455563[21', 00H
	ORG $+2
$SG160609 DB	'7_365899063_7', 00H
	ORG $+2
$SG160610 DB	' /|09abc904/ ', 00H
	ORG $+2
$SG160611 DB	' d}8efgfb83d ', 00H
	ORG $+2
$SG160612 DB	'  hiafjgakh  ', 00H
	ORG $+2
$SG160613 DB	'   l~mnm~l   ', 00H
	ORG $+2
$SG160614 DB	'     o@o     ', 00H
CONST	ENDS
PUBLIC	_hypot
PUBLIC	_wmemcpy
PUBLIC	_wmemmove
PUBLIC	_wmemset
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@_W@std@@SAIPB_W@Z		; std::char_traits<wchar_t>::length
PUBLIC	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z	; std::char_traits<wchar_t>::copy
PUBLIC	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z	; std::char_traits<wchar_t>::move
PUBLIC	?assign@?$char_traits@_W@std@@SAPA_WPA_WI_W@Z	; std::char_traits<wchar_t>::assign
PUBLIC	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z	; std::char_traits<wchar_t>::assign
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	??1_Container_base12@std@@QAE@XZ		; std::_Container_base12::~_Container_base12
PUBLIC	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Clrcont@_Iterator_base12@std@@QAEXXZ		; std::_Iterator_base12::_Clrcont
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ	; std::_Iterator_base12::_Getpnext
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0runtime_error@std@@QAE@PBD@Z			; std::runtime_error::runtime_error
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	??_Gruntime_error@std@@UAEPAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z	; Window::init
PUBLIC	?display@Window@@UBEX_N@Z			; Window::display
PUBLIC	?getFocus@Window@@QBEXXZ			; Window::getFocus
PUBLIC	?init@ColumnEditorDlg@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z ; ColumnEditorDlg::init
PUBLIC	?display@ColumnEditorDlg@@UBEX_N@Z		; ColumnEditorDlg::display
PUBLIC	?switchTo@ColumnEditorDlg@@QAEX_N@Z		; ColumnEditorDlg::switchTo
PUBLIC	?getFormat@ColumnEditorDlg@@QAEEXZ		; ColumnEditorDlg::getFormat
PUBLIC	?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z		; ColumnEditorDlg::run_dlgProc
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z		; std::_Debug_pointer<char>
PUBLIC	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z		; std::_Debug_pointer<wchar_t>
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	??0?$allocator@_W@std@@QAE@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
PUBLIC	?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z	; std::allocator<wchar_t>::deallocate
PUBLIC	?allocate@?$allocator@_W@std@@QAEPA_WI@Z	; std::allocator<wchar_t>::allocate
PUBLIC	?max_size@?$allocator@_W@std@@QBEIXZ		; std::allocator<wchar_t>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
PUBLIC	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
PUBLIC	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::insert
PUBLIC	?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::insert
PUBLIC	?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::insert
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
PUBLIC	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
PUBLIC	?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Chassign
PUBLIC	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
PUBLIC	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
PUBLIC	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
PUBLIC	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
PUBLIC	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
PUBLIC	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
PUBLIC	??0?$allocator@H@std@@QAE@XZ			; std::allocator<int>::allocator<int>
PUBLIC	?deallocate@?$allocator@H@std@@QAEXPAHI@Z	; std::allocator<int>::deallocate
PUBLIC	?allocate@?$allocator@H@std@@QAEPAHI@Z		; std::allocator<int>::allocate
PUBLIC	?construct@?$allocator@H@std@@QAEXPAHABH@Z	; std::allocator<int>::construct
PUBLIC	?max_size@?$allocator@H@std@@QBEIXZ		; std::allocator<int>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z ; std::allocator_traits<std::allocator<int> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<int> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
PUBLIC	??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<int> >::~_Vector_val<std::_Simple_types<int> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
PUBLIC	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::~_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Free_proxy
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
PUBLIC	?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::_Unused_capacity
PUBLIC	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
PUBLIC	?rbegin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::rbegin
PUBLIC	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
PUBLIC	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
PUBLIC	?at@?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::at
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
PUBLIC	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
PUBLIC	?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ; std::vector<int,std::allocator<int> >::_Grow_to
PUBLIC	?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ; std::vector<int,std::allocator<int> >::_Inside
PUBLIC	?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reallocate
PUBLIC	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
PUBLIC	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ; std::vector<int,std::allocator<int> >::_Xlen
PUBLIC	?_Xran@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ; std::vector<int,std::allocator<int> >::_Xran
PUBLIC	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
PUBLIC	?getInstance@NppParameters@@SAPAV1@XZ		; NppParameters::getInstance
PUBLIC	?getEnableThemeDlgTexture@NppParameters@@QBEP6GJPAUHWND__@@IIJ@ZXZ ; NppParameters::getEnableThemeDlgTexture
PUBLIC	??0_Ignore@std@@QAE@XZ				; std::_Ignore::_Ignore
PUBLIC	??RSortInSelectOrder@@QAE_NAAUColumnModeInfo@@0@Z ; SortInSelectOrder::operator()
PUBLIC	??RSortInPositionOrder@@QAE_NAAUColumnModeInfo@@0@Z ; SortInPositionOrder::operator()
PUBLIC	?execute@ScintillaEditView@@QBEJIIJ@Z		; ScintillaEditView::execute
PUBLIC	??0?$allocator@UColumnModeInfo@@@std@@QAE@XZ	; std::allocator<ColumnModeInfo>::allocator<ColumnModeInfo>
PUBLIC	?deallocate@?$allocator@UColumnModeInfo@@@std@@QAEXPAUColumnModeInfo@@I@Z ; std::allocator<ColumnModeInfo>::deallocate
PUBLIC	??0?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<ColumnModeInfo> >::_Wrap_alloc<std::allocator<ColumnModeInfo> >
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@QAEXPAUColumnModeInfo@@I@Z ; std::_Wrap_alloc<std::allocator<ColumnModeInfo> >::deallocate
PUBLIC	??1?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<ColumnModeInfo> >::~_Vector_val<std::_Simple_types<ColumnModeInfo> >
PUBLIC	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<ColumnModeInfo,std::allocator<ColumnModeInfo> > >::~_Vector_alloc<0,std::_Vec_base_types<ColumnModeInfo,std::allocator<ColumnModeInfo> > >
PUBLIC	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<ColumnModeInfo,std::allocator<ColumnModeInfo> > >::_Free_proxy
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<ColumnModeInfo,std::allocator<ColumnModeInfo> > >::_Getal
PUBLIC	??1?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::~vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >
PUBLIC	?begin@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::begin
PUBLIC	?end@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::end
PUBLIC	?_Destroy@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@IAEXPAUColumnModeInfo@@0@Z ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::_Destroy
PUBLIC	?_Tidy@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@IAEXXZ ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::_Tidy
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,ColumnModeInfo,int,ColumnModeInfo const *,ColumnModeInfo const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,ColumnModeInfo,int,ColumnModeInfo const *,ColumnModeInfo const &,std::_Iterator_base12>
PUBLIC	??1?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,ColumnModeInfo,int,ColumnModeInfo const *,ColumnModeInfo const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,ColumnModeInfo,int,ColumnModeInfo const *,ColumnModeInfo const &,std::_Iterator_base12>
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,ColumnModeInfo,int,ColumnModeInfo const *,ColumnModeInfo const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,ColumnModeInfo,int,ColumnModeInfo const *,ColumnModeInfo const &,std::_Iterator_base12>
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
PUBLIC	??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator-
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator!=
PUBLIC	??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator<
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Compat
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
PUBLIC	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEPAUColumnModeInfo@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Unchecked
PUBLIC	??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator-
PUBLIC	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >,SortInPositionOrder>
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >,SortInSelectOrder>
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
PUBLIC	??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEABHXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*
PUBLIC	??F?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator--
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*
PUBLIC	??F?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator--
PUBLIC	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >
PUBLIC	??D?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QBEAAHXZ ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >::operator*
PUBLIC	??1?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@XZ ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >::~_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >
PUBLIC	??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@ABV01@@Z ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >
PUBLIC	??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
PUBLIC	??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@XZ ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >::~reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
PUBLIC	??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
PUBLIC	??$addressof@$$CBH@std@@YAPBHABH@Z		; std::addressof<int const >
PUBLIC	??$construct@HAAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHAAH@Z ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int &>
PUBLIC	??$construct@HABH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHABH@Z ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int const &>
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
PUBLIC	??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>
PUBLIC	??$addressof@_W@std@@YAPA_WAA_W@Z		; std::addressof<wchar_t>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
PUBLIC	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@YAXPAUColumnModeInfo@@0AAU?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<ColumnModeInfo> > >
PUBLIC	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
PUBLIC	??$_Allocate@H@std@@YAPAHIPAH@Z			; std::_Allocate<int>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$_Allocate@_W@std@@YAPA_WIPA_W@Z		; std::_Allocate<wchar_t>
PUBLIC	??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WI@Z ; std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > > >
PUBLIC	??$_Debug_pointer@USortInPositionOrder@@@std@@YAXAAUSortInPositionOrder@@PB_WI@Z ; std::_Debug_pointer<SortInPositionOrder>
PUBLIC	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@YAPAUColumnModeInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
PUBLIC	??$_Sort@PAUColumnModeInfo@@HUSortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0HUSortInPositionOrder@@@Z ; std::_Sort<ColumnModeInfo *,int,SortInPositionOrder>
PUBLIC	??$_Debug_pointer@USortInSelectOrder@@@std@@YAXAAUSortInSelectOrder@@PB_WI@Z ; std::_Debug_pointer<SortInSelectOrder>
PUBLIC	??$_Sort@PAUColumnModeInfo@@HUSortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0HUSortInSelectOrder@@@Z ; std::_Sort<ColumnModeInfo *,int,SortInSelectOrder>
PUBLIC	??$forward@AAH@std@@YAAAHAAH@Z			; std::forward<int &>
PUBLIC	??$construct@HAAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHAAH@Z ; std::allocator_traits<std::allocator<int> >::construct<int,int &>
PUBLIC	??$forward@ABH@std@@YAABHABH@Z			; std::forward<int const &>
PUBLIC	??$construct@HABH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHABH@Z ; std::allocator_traits<std::allocator<int> >::construct<int,int const &>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z		; std::forward<wchar_t * &>
PUBLIC	??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
PUBLIC	??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>
PUBLIC	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
PUBLIC	??$_Ptr_cat@UColumnModeInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUColumnModeInfo@@0@Z ; std::_Ptr_cat<ColumnModeInfo,ColumnModeInfo>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@YAXPAUColumnModeInfo@@0AAU?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<ColumnModeInfo> > >
PUBLIC	??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z ; std::_Iter_cat<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > > >
PUBLIC	??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > > >
PUBLIC	??$_Unguarded_partition@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YA?AU?$pair@PAUColumnModeInfo@@PAU1@@0@PAUColumnModeInfo@@0USortInPositionOrder@@@Z ; std::_Unguarded_partition<ColumnModeInfo *,SortInPositionOrder>
PUBLIC	??$make_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z ; std::make_heap<ColumnModeInfo *,SortInPositionOrder>
PUBLIC	??$sort_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z ; std::sort_heap<ColumnModeInfo *,SortInPositionOrder>
PUBLIC	??$_Insertion_sort@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z ; std::_Insertion_sort<ColumnModeInfo *,SortInPositionOrder>
PUBLIC	??$_Unguarded_partition@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YA?AU?$pair@PAUColumnModeInfo@@PAU1@@0@PAUColumnModeInfo@@0USortInSelectOrder@@@Z ; std::_Unguarded_partition<ColumnModeInfo *,SortInSelectOrder>
PUBLIC	??$make_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z ; std::make_heap<ColumnModeInfo *,SortInSelectOrder>
PUBLIC	??$sort_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z ; std::sort_heap<ColumnModeInfo *,SortInSelectOrder>
PUBLIC	??$_Insertion_sort@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z ; std::_Insertion_sort<ColumnModeInfo *,SortInSelectOrder>
PUBLIC	??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z ; std::allocator<int>::construct<int,int &>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>
PUBLIC	??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>
PUBLIC	??$_Unchecked@PAH@std@@YAPAHPAH@Z		; std::_Unchecked<int *>
PUBLIC	??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
PUBLIC	??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z	; std::_Rechecked<int *,int *>
PUBLIC	??$destroy@UColumnModeInfo@@@?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@QAEXPAUColumnModeInfo@@@Z ; std::_Wrap_alloc<std::allocator<ColumnModeInfo> >::destroy<ColumnModeInfo>
PUBLIC	??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > > >
PUBLIC	??$_Median@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@00USortInPositionOrder@@@Z ; std::_Median<ColumnModeInfo *,SortInPositionOrder>
PUBLIC	??$_Debug_lt_pred@USortInPositionOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInPositionOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInPositionOrder,ColumnModeInfo &,ColumnModeInfo &>
PUBLIC	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
PUBLIC	??$?0AAPAUColumnModeInfo@@AAPAU0@X@?$pair@PAUColumnModeInfo@@PAU1@@std@@QAE@AAPAUColumnModeInfo@@0@Z ; std::pair<ColumnModeInfo *,ColumnModeInfo *>::pair<ColumnModeInfo *,ColumnModeInfo *><ColumnModeInfo * &,ColumnModeInfo * &,void>
PUBLIC	??$_Debug_range@PAUColumnModeInfo@@@std@@YAXPAUColumnModeInfo@@0PB_WI@Z ; std::_Debug_range<ColumnModeInfo *>
PUBLIC	??$_Unchecked@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Unchecked<ColumnModeInfo *>
PUBLIC	??$_Dist_type@PAUColumnModeInfo@@@std@@YAPAHPAUColumnModeInfo@@@Z ; std::_Dist_type<ColumnModeInfo *>
PUBLIC	??$_Val_type@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Val_type<ColumnModeInfo *>
PUBLIC	??$_Make_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@PAH0@Z ; std::_Make_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInPositionOrder>
PUBLIC	??$_Debug_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z ; std::_Debug_heap<ColumnModeInfo *,SortInPositionOrder>
PUBLIC	??$_Sort_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z ; std::_Sort_heap<ColumnModeInfo *,SortInPositionOrder>
PUBLIC	??$_Insertion_sort1@PAUColumnModeInfo@@USortInPositionOrder@@U1@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@0@Z ; std::_Insertion_sort1<ColumnModeInfo *,SortInPositionOrder,ColumnModeInfo>
PUBLIC	??$_Median@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@00USortInSelectOrder@@@Z ; std::_Median<ColumnModeInfo *,SortInSelectOrder>
PUBLIC	??$_Debug_lt_pred@USortInSelectOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInSelectOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInSelectOrder,ColumnModeInfo &,ColumnModeInfo &>
PUBLIC	??$_Make_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@PAH0@Z ; std::_Make_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInSelectOrder>
PUBLIC	??$_Debug_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z ; std::_Debug_heap<ColumnModeInfo *,SortInSelectOrder>
PUBLIC	??$_Sort_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z ; std::_Sort_heap<ColumnModeInfo *,SortInSelectOrder>
PUBLIC	??$_Insertion_sort1@PAUColumnModeInfo@@USortInSelectOrder@@U1@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@0@Z ; std::_Insertion_sort1<ColumnModeInfo *,SortInSelectOrder,ColumnModeInfo>
PUBLIC	??$_Val_type@PAH@std@@YAPAHPAH@Z		; std::_Val_type<int *>
PUBLIC	??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<int,int,int>
PUBLIC	??$destroy@UColumnModeInfo@@@?$allocator_traits@V?$allocator@UColumnModeInfo@@@std@@@std@@SAXAAV?$allocator@UColumnModeInfo@@@1@PAUColumnModeInfo@@@Z ; std::allocator_traits<std::allocator<ColumnModeInfo> >::destroy<ColumnModeInfo>
PUBLIC	??$_Med3@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@00USortInPositionOrder@@@Z ; std::_Med3<ColumnModeInfo *,SortInPositionOrder>
PUBLIC	??$forward@AAUColumnModeInfo@@@std@@YAAAUColumnModeInfo@@AAU1@@Z ; std::forward<ColumnModeInfo &>
PUBLIC	??$swap@UColumnModeInfo@@@std@@YAXAAUColumnModeInfo@@0@Z ; std::swap<ColumnModeInfo>
PUBLIC	??$forward@AAPAUColumnModeInfo@@@std@@YAAAPAUColumnModeInfo@@AAPAU1@@Z ; std::forward<ColumnModeInfo * &>
PUBLIC	??$_Iter_cat@PAUColumnModeInfo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUColumnModeInfo@@@Z ; std::_Iter_cat<ColumnModeInfo *>
PUBLIC	??$_Debug_range2@PAUColumnModeInfo@@@std@@YAXPAUColumnModeInfo@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<ColumnModeInfo *>
PUBLIC	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
PUBLIC	??$_Adjust_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInPositionOrder@@@Z ; std::_Adjust_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInPositionOrder>
PUBLIC	??$_Pop_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z ; std::_Pop_heap<ColumnModeInfo *,SortInPositionOrder>
PUBLIC	??$_Move_backward@PAUColumnModeInfo@@PAU1@@std@@YAPAUColumnModeInfo@@PAU1@00@Z ; std::_Move_backward<ColumnModeInfo *,ColumnModeInfo *>
PUBLIC	??$_Med3@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@00USortInSelectOrder@@@Z ; std::_Med3<ColumnModeInfo *,SortInSelectOrder>
PUBLIC	??$_Adjust_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInSelectOrder@@@Z ; std::_Adjust_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInSelectOrder>
PUBLIC	??$_Pop_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z ; std::_Pop_heap<ColumnModeInfo *,SortInSelectOrder>
PUBLIC	??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z		; std::_Debug_range<int *>
PUBLIC	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z		; std::_Debug_pointer<int>
PUBLIC	??$destroy@UColumnModeInfo@@@?$allocator@UColumnModeInfo@@@std@@QAEXPAUColumnModeInfo@@@Z ; std::allocator<ColumnModeInfo>::destroy<ColumnModeInfo>
PUBLIC	??$_Debug_pointer@UColumnModeInfo@@@std@@YAXPAUColumnModeInfo@@PB_WI@Z ; std::_Debug_pointer<ColumnModeInfo>
PUBLIC	??$_Push_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInPositionOrder@@@Z ; std::_Push_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInPositionOrder>
PUBLIC	??$_Pop_heap_0@PAUColumnModeInfo@@U1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@0@Z ; std::_Pop_heap_0<ColumnModeInfo *,ColumnModeInfo,SortInPositionOrder>
PUBLIC	??$_Move_backward@PAUColumnModeInfo@@PAU1@@std@@YAPAUColumnModeInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<ColumnModeInfo *,ColumnModeInfo *>
PUBLIC	??$_Push_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInSelectOrder@@@Z ; std::_Push_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInSelectOrder>
PUBLIC	??$_Pop_heap_0@PAUColumnModeInfo@@U1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@0@Z ; std::_Pop_heap_0<ColumnModeInfo *,ColumnModeInfo,SortInSelectOrder>
PUBLIC	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
PUBLIC	??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<int *>
PUBLIC	??$_Pop_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@00$$QAU1@USortInPositionOrder@@PAH@Z ; std::_Pop_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInPositionOrder>
PUBLIC	??$move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::move<ColumnModeInfo &>
PUBLIC	??$_Pop_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@00$$QAU1@USortInSelectOrder@@PAH@Z ; std::_Pop_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInSelectOrder>
PUBLIC	??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; `string'
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	__TI2?AVruntime_error@std@@
PUBLIC	__CTA2?AVruntime_error@std@@
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::npos
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; `string'
PUBLIC	??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; `string'
PUBLIC	??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@		; `string'
PUBLIC	??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@ ; `string'
PUBLIC	??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ ; `string'
PUBLIC	??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ ; `string'
PUBLIC	??_C@_1ME@LLCFNFIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1EE@OEIJAKGE@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@ ; `string'
PUBLIC	??_C@_1MG@BMOEGPOA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1OC@LDKFIGAP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@KAECGCDK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?$AA@ ; `string'
PUBLIC	??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	__hypot:PROC
EXTRN	_wcslen:PROC
EXTRN	_memmove:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__CrtDbgReportW:PROC
EXTRN	?_Debug_message@std@@YAXPB_W0I@Z:PROC		; std::_Debug_message
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	__imp__GetDlgItemInt@16:PROC
EXTRN	__imp__SendDlgItemMessageW@20:PROC
EXTRN	__imp__SetFocus@4:PROC
EXTRN	__imp__EnableWindow@8:PROC
EXTRN	?goToCenter@StaticDialog@@QAEXXZ:PROC		; StaticDialog::goToCenter
EXTRN	__wassert:PROC
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?getNbDigits@@YAHHH@Z:PROC			; getNbDigits
EXTRN	?int2str@@YAPA_WPA_WHHHH_N@Z:PROC		; int2str
EXTRN	?getGenericText@ScintillaEditView@@QBEXPA_WIHH@Z:PROC ; ScintillaEditView::getGenericText
EXTRN	?replaceTarget@ScintillaEditView@@QBEHPB_WHH@Z:PROC ; ScintillaEditView::replaceTarget
EXTRN	?setMultiSelections@ScintillaEditView@@QAEXABV?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@Z:PROC ; ScintillaEditView::setMultiSelections
EXTRN	?getColumnModeSelectInfo@ScintillaEditView@@QAE?AV?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@XZ:PROC ; ScintillaEditView::getColumnModeSelectInfo
EXTRN	?columnReplace@ScintillaEditView@@QAEXAAV?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@PB_W@Z:PROC ; ScintillaEditView::columnReplace
EXTRN	?columnReplace@ScintillaEditView@@QAEXAAV?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@HHHE@Z:PROC ; ScintillaEditView::columnReplace
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?_pSelf@NppParameters@@0PAV1@A:DWORD		; NppParameters::_pSelf
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
_ignore	DB	01H DUP (?)
__Tuple_alloc DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
data$r	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '2', 00H, '.', 00H, '0', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H, 'e'
	DB	00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@KAECGCDK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@KAECGCDK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1OC@LDKFIGAP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1OC@LDKFIGAP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'C', 00H
	DB	'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, 'M', 00H, 'o'
	DB	00H, 'd', 00H, 'e', 00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':'
	DB	00H, '_', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '2', 00H, '.', 00H, '0', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H, 'g'
	DB	00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1MG@BMOEGPOA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1MG@BMOEGPOA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'i', 00H, 'n'
	DB	00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '-', 00H, '-', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@OEIJAKGE@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@
CONST	SEGMENT
??_C@_1EE@OEIJAKGE@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@LLCFNFIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1ME@LLCFNFIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'i', 00H, 'n'
	DB	00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
CONST	SEGMENT
??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
CONST	SEGMENT
??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ DB '"'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'a', 00H
	DB	'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+', 00H, ' '
	DB	00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H
	DB	'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'A', 00H
	DB	'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, '"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
CONST	SEGMENT
??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ DB 'Standa'
	DB	'rd C++ Libraries Invalid Argument', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
CONST	SEGMENT
??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@ DB 'invalid v'
	DB	'ector<T> subscript', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H
	DB	' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ DB '%', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
CONST	SEGMENT
??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ DB '"'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'a', 00H
	DB	'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+', 00H, ' '
	DB	00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H
	DB	'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'O', 00H, 'u', 00H, 't'
	DB	00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'R', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
CONST	SEGMENT
??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ DB 'Stand'
	DB	'ard C++ Libraries Out of Range', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '2', 00H, '.', 00H, '0', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '2', 00H, '.', 00H, '0', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
CONST	SEGMENT
?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB DD 0ffffffffH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::npos
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
data$r	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT
__CTA2?AVruntime_error@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT
__TI2?AVruntime_error@std@@ DD 00H
	DD	FLAT:??1runtime_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVruntime_error@std@@
xdata$x	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ DB 'I'
	DB	00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'O', 00H
	DB	'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, ' '
	DB	00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H, 'P', 00H
	DB	'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '2', 00H, '.', 00H, '0', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H, 't'
	DB	00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0
__ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z$0
__ehfuncinfo$??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$1
__ehfuncinfo$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@YAPAUColumnModeInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@YAPAUColumnModeInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@YAPAUColumnModeInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@YAPAUColumnModeInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WI@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WI@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WI@Z$3
__ehfuncinfo$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WI@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
__ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z$2
__ehfuncinfo$??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??D?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QBEAAHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??D?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QBEAAHXZ$0
__ehfuncinfo$??D?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QBEAAHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??D?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QBEAAHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z$1
__ehfuncinfo$??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?end@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?end@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ$0
__ehfuncinfo$?end@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?end@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?begin@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?begin@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ$0
__ehfuncinfo$?begin@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?begin@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?rbegin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?rbegin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@2@XZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?rbegin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@2@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?rbegin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@2@XZ$1
__ehfuncinfo$?rbegin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@2@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?rbegin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ$0
__ehfuncinfo$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z$0
__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z$0
__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0
__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0
__ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1_System_error_category@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_System_error_category@std@@UAE@XZ$0
__ehfuncinfo$??1_System_error_category@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_System_error_category@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
__ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0_System_error_category@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_System_error_category@std@@QAE@XZ$0
__ehfuncinfo$??0_System_error_category@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0_System_error_category@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1_Iostream_error_category@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0
__ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Iostream_error_category@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
__ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0_Iostream_error_category@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0
__ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0_Iostream_error_category@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1_Generic_error_category@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0
__ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Generic_error_category@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
__ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0_Generic_error_category@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0
__ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0_Generic_error_category@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
xdata$x	SEGMENT
__ehfuncinfo$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z DD 019930522H
	DD	010H
	DD	FLAT:__unwindtable$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$9
	DD	07H
	DD	FLAT:__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$11
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$13
	DD	0cH
	DD	FLAT:__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$14
	DD	0eH
	DD	FLAT:__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$15
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1runtime_error@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1runtime_error@std@@UAE@XZ$0
__ehfuncinfo$??1runtime_error@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1runtime_error@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0runtime_error@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0
__ehfuncinfo$??0runtime_error@std@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
__ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1
__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1_Iterator_base12@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0
__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Iterator_base12@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0
__ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Pop_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@00$$QAU1@USortInSelectOrder@@PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
___formal$ = 28						; size = 4
??$_Pop_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@00$$QAU1@USortInSelectOrder@@PAH@Z PROC ; std::_Pop_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInSelectOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2394
	push	ebp
	mov	ebp, esp
; Line 2395
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
; Line 2397
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	push	eax
	push	0
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Adjust_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInSelectOrder@@@Z ; std::_Adjust_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInSelectOrder>
	add	esp, 20					; 00000014H
; Line 2398
	pop	ebp
	ret	0
??$_Pop_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@00$$QAU1@USortInSelectOrder@@PAH@Z ENDP ; std::_Pop_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInSelectOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z PROC ; std::move<ColumnModeInfo &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1519
	push	ebp
	mov	ebp, esp
; Line 1520
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1521
	pop	ebp
	ret	0
??$move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ENDP ; std::move<ColumnModeInfo &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Pop_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@00$$QAU1@USortInPositionOrder@@PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
___formal$ = 28						; size = 4
??$_Pop_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@00$$QAU1@USortInPositionOrder@@PAH@Z PROC ; std::_Pop_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInPositionOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2394
	push	ebp
	mov	ebp, esp
; Line 2395
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
; Line 2397
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	push	eax
	push	0
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Adjust_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInPositionOrder@@@Z ; std::_Adjust_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInPositionOrder>
	add	esp, 20					; 00000014H
; Line 2398
	pop	ebp
	ret	0
??$_Pop_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@00$$QAU1@USortInPositionOrder@@PAH@Z ENDP ; std::_Pop_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInPositionOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 570
	push	ebp
	mov	ebp, esp
; Line 571
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang
; Line 573
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z	; std::_Debug_pointer<int>
	add	esp, 12					; 0000000cH
; Line 574
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z	; std::_Debug_pointer<int>
	add	esp, 12					; 0000000cH
; Line 575
	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang
; Line 576
	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN3@Debug_rang:
; Line 578
	pop	ebp
	ret	0
??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z PROC ; std::_Iter_cat<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 405
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 407
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 408
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ENDP ; std::_Iter_cat<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Pop_heap_0@PAUColumnModeInfo@@U1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@0@Z
_TEXT	SEGMENT
__Val$ = -24						; size = 24
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Pop_heap_0@PAUColumnModeInfo@@U1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@0@Z PROC ; std::_Pop_heap_0<ColumnModeInfo *,ColumnModeInfo,SortInSelectOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2404
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 2405
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 24					; 00000018H
	push	eax
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Val$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Val$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Val$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR __Val$[ebp+12], edx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR __Val$[ebp+16], ecx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR __Val$[ebp+20], edx
; Line 2407
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Dist_type@PAUColumnModeInfo@@@std@@YAPAHPAUColumnModeInfo@@@Z ; std::_Dist_type<ColumnModeInfo *>
	add	esp, 4
	push	eax
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Pop_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@00$$QAU1@USortInSelectOrder@@PAH@Z ; std::_Pop_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInSelectOrder>
	add	esp, 24					; 00000018H
; Line 2408
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Pop_heap_0@PAUColumnModeInfo@@U1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@0@Z ENDP ; std::_Pop_heap_0<ColumnModeInfo *,ColumnModeInfo,SortInSelectOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Push_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInSelectOrder@@@Z
_TEXT	SEGMENT
__Idx$1 = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Push_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInSelectOrder@@@Z PROC ; std::_Push_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInSelectOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2313
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2314
	mov	eax, DWORD PTR __Hole$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$1[ebp], eax
; Line 2316
	jmp	SHORT $LN3@Push_heap
$LN2@Push_heap:
	mov	eax, DWORD PTR __Hole$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$1[ebp], eax
$LN3@Push_heap:
	mov	eax, DWORD PTR __Top$[ebp]
	cmp	eax, DWORD PTR __Hole$[ebp]
	jge	SHORT $LN1@Push_heap
	push	2315					; 0000090bH
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	imul	edx, DWORD PTR __Idx$1[ebp], 24
	add	edx, DWORD PTR __First$[ebp]
	push	edx
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	call	??$_Debug_lt_pred@USortInSelectOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInSelectOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInSelectOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Push_heap
; Line 2318
	imul	edx, DWORD PTR __Idx$1[ebp], 24
	add	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	imul	ecx, DWORD PTR __Hole$[ebp], 24
	add	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
; Line 2319
	mov	ecx, DWORD PTR __Idx$1[ebp]
	mov	DWORD PTR __Hole$[ebp], ecx
; Line 2320
	jmp	$LN2@Push_heap
$LN1@Push_heap:
; Line 2322
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	imul	ecx, DWORD PTR __Hole$[ebp], 24
	add	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
; Line 2323
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Push_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInSelectOrder@@@Z ENDP ; std::_Push_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInSelectOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Move_backward@PAUColumnModeInfo@@PAU1@@std@@YAPAUColumnModeInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move_backward@PAUColumnModeInfo@@PAU1@@std@@YAPAUColumnModeInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move_backward<ColumnModeInfo *,ColumnModeInfo *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 2525
	push	ebp
	mov	ebp, esp
$LN2@Move_backw:
; Line 2526
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Move_backw
; Line 2527
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 24					; 00000018H
	mov	DWORD PTR __Last$[ebp], ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, 24					; 00000018H
	mov	DWORD PTR __Dest$[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::move<ColumnModeInfo &>
	add	esp, 4
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
	jmp	SHORT $LN2@Move_backw
$LN1@Move_backw:
; Line 2528
	mov	eax, DWORD PTR __Dest$[ebp]
; Line 2529
	pop	ebp
	ret	0
??$_Move_backward@PAUColumnModeInfo@@PAU1@@std@@YAPAUColumnModeInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move_backward<ColumnModeInfo *,ColumnModeInfo *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Pop_heap_0@PAUColumnModeInfo@@U1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@0@Z
_TEXT	SEGMENT
__Val$ = -24						; size = 24
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Pop_heap_0@PAUColumnModeInfo@@U1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@0@Z PROC ; std::_Pop_heap_0<ColumnModeInfo *,ColumnModeInfo,SortInPositionOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2404
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 2405
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 24					; 00000018H
	push	eax
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Val$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Val$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Val$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR __Val$[ebp+12], edx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR __Val$[ebp+16], ecx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR __Val$[ebp+20], edx
; Line 2407
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Dist_type@PAUColumnModeInfo@@@std@@YAPAHPAUColumnModeInfo@@@Z ; std::_Dist_type<ColumnModeInfo *>
	add	esp, 4
	push	eax
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Pop_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@00$$QAU1@USortInPositionOrder@@PAH@Z ; std::_Pop_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInPositionOrder>
	add	esp, 24					; 00000018H
; Line 2408
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Pop_heap_0@PAUColumnModeInfo@@U1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@0@Z ENDP ; std::_Pop_heap_0<ColumnModeInfo *,ColumnModeInfo,SortInPositionOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Push_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInPositionOrder@@@Z
_TEXT	SEGMENT
__Idx$1 = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Push_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInPositionOrder@@@Z PROC ; std::_Push_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInPositionOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2313
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2314
	mov	eax, DWORD PTR __Hole$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$1[ebp], eax
; Line 2316
	jmp	SHORT $LN3@Push_heap
$LN2@Push_heap:
	mov	eax, DWORD PTR __Hole$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$1[ebp], eax
$LN3@Push_heap:
	mov	eax, DWORD PTR __Top$[ebp]
	cmp	eax, DWORD PTR __Hole$[ebp]
	jge	SHORT $LN1@Push_heap
	push	2315					; 0000090bH
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	imul	edx, DWORD PTR __Idx$1[ebp], 24
	add	edx, DWORD PTR __First$[ebp]
	push	edx
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	call	??$_Debug_lt_pred@USortInPositionOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInPositionOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInPositionOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Push_heap
; Line 2318
	imul	edx, DWORD PTR __Idx$1[ebp], 24
	add	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	imul	ecx, DWORD PTR __Hole$[ebp], 24
	add	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
; Line 2319
	mov	ecx, DWORD PTR __Idx$1[ebp]
	mov	DWORD PTR __Hole$[ebp], ecx
; Line 2320
	jmp	$LN2@Push_heap
$LN1@Push_heap:
; Line 2322
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	imul	ecx, DWORD PTR __Hole$[ebp], 24
	add	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
; Line 2323
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Push_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInPositionOrder@@@Z ENDP ; std::_Push_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInPositionOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@UColumnModeInfo@@@std@@YAXPAUColumnModeInfo@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@UColumnModeInfo@@@std@@YAXPAUColumnModeInfo@@PB_WI@Z PROC ; std::_Debug_pointer<ColumnModeInfo>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 552
	push	ebp
	mov	ebp, esp
; Line 553
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 554
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 555
	pop	ebp
	ret	0
??$_Debug_pointer@UColumnModeInfo@@@std@@YAXPAUColumnModeInfo@@PB_WI@Z ENDP ; std::_Debug_pointer<ColumnModeInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@UColumnModeInfo@@@?$allocator@UColumnModeInfo@@@std@@QAEXPAUColumnModeInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@UColumnModeInfo@@@?$allocator@UColumnModeInfo@@@std@@QAEXPAUColumnModeInfo@@@Z PROC ; std::allocator<ColumnModeInfo>::destroy<ColumnModeInfo>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 605
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 608
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@UColumnModeInfo@@@?$allocator@UColumnModeInfo@@@std@@QAEXPAUColumnModeInfo@@@Z ENDP ; std::allocator<ColumnModeInfo>::destroy<ColumnModeInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z PROC		; std::_Debug_pointer<int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 552
	push	ebp
	mov	ebp, esp
; Line 553
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 554
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 555
	pop	ebp
	ret	0
??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z ENDP		; std::_Debug_pointer<int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z PROC		; std::_Debug_range<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 583
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 584
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<int *>
	add	esp, 20					; 00000014H
; Line 585
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z ENDP		; std::_Debug_range<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Pop_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Pop_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z PROC ; std::_Pop_heap<ColumnModeInfo *,SortInSelectOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2413
	push	ebp
	mov	ebp, esp
; Line 2415
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Val_type<ColumnModeInfo *>
	add	esp, 4
	push	eax
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Unchecked@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Unchecked<ColumnModeInfo *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Unchecked<ColumnModeInfo *>
	add	esp, 4
	push	eax
	call	??$_Pop_heap_0@PAUColumnModeInfo@@U1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@0@Z ; std::_Pop_heap_0<ColumnModeInfo *,ColumnModeInfo,SortInSelectOrder>
	add	esp, 16					; 00000010H
; Line 2416
	pop	ebp
	ret	0
??$_Pop_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z ENDP ; std::_Pop_heap<ColumnModeInfo *,SortInSelectOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Adjust_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInSelectOrder@@@Z
_TEXT	SEGMENT
__Top$ = -8						; size = 4
__Idx$ = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Adjust_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInSelectOrder@@@Z PROC ; std::_Adjust_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInSelectOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2368
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 2369
	mov	eax, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR __Top$[ebp], eax
; Line 2370
	mov	ecx, DWORD PTR __Hole$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	DWORD PTR __Idx$[ebp], edx
; Line 2372
	jmp	SHORT $LN5@Adjust_hea
$LN4@Adjust_hea:
	mov	eax, DWORD PTR __Idx$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __Idx$[ebp], ecx
$LN5@Adjust_hea:
	mov	edx, DWORD PTR __Idx$[ebp]
	cmp	edx, DWORD PTR __Bottom$[ebp]
	jge	$LN3@Adjust_hea
; Line 2374
	push	2374					; 00000946H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Idx$[ebp]
	sub	eax, 1
	imul	ecx, eax, 24
	add	ecx, DWORD PTR __First$[ebp]
	push	ecx
	imul	edx, DWORD PTR __Idx$[ebp], 24
	add	edx, DWORD PTR __First$[ebp]
	push	edx
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	call	??$_Debug_lt_pred@USortInSelectOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInSelectOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInSelectOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Adjust_hea
; Line 2375
	mov	edx, DWORD PTR __Idx$[ebp]
	sub	edx, 1
	mov	DWORD PTR __Idx$[ebp], edx
$LN2@Adjust_hea:
; Line 2376
	imul	eax, DWORD PTR __Idx$[ebp], 24
	add	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	imul	ecx, DWORD PTR __Hole$[ebp], 24
	add	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
; Line 2377
	mov	ecx, DWORD PTR __Idx$[ebp]
	mov	DWORD PTR __Hole$[ebp], ecx
; Line 2378
	jmp	$LN4@Adjust_hea
$LN3@Adjust_hea:
; Line 2380
	mov	edx, DWORD PTR __Idx$[ebp]
	cmp	edx, DWORD PTR __Bottom$[ebp]
	jne	SHORT $LN1@Adjust_hea
; Line 2382
	mov	eax, DWORD PTR __Bottom$[ebp]
	sub	eax, 1
	imul	ecx, eax, 24
	add	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	imul	edx, DWORD PTR __Hole$[ebp], 24
	add	edx, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax
; Line 2383
	mov	ecx, DWORD PTR __Bottom$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Hole$[ebp], ecx
$LN1@Adjust_hea:
; Line 2385
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Top$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Hole$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Push_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInSelectOrder@@@Z ; std::_Push_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInSelectOrder>
	add	esp, 20					; 00000014H
; Line 2386
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Adjust_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInSelectOrder@@@Z ENDP ; std::_Adjust_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInSelectOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Med3@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@00USortInSelectOrder@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@00USortInSelectOrder@@@Z PROC ; std::_Med3<ColumnModeInfo *,SortInSelectOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 3032
	push	ebp
	mov	ebp, esp
; Line 3033
	push	3033					; 00000bd9H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	call	??$_Debug_lt_pred@USortInSelectOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInSelectOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInSelectOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Med3
; Line 3034
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	call	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 8
$LN3@Med3:
; Line 3035
	push	3035					; 00000bdbH
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	call	??$_Debug_lt_pred@USortInSelectOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInSelectOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInSelectOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@Med3
; Line 3037
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 8
; Line 3038
	push	3038					; 00000bdeH
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	call	??$_Debug_lt_pred@USortInSelectOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInSelectOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInSelectOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@Med3
; Line 3039
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	call	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 8
$LN4@Med3:
; Line 3041
	pop	ebp
	ret	0
??$_Med3@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@00USortInSelectOrder@@@Z ENDP ; std::_Med3<ColumnModeInfo *,SortInSelectOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Move_backward@PAUColumnModeInfo@@PAU1@@std@@YAPAUColumnModeInfo@@PAU1@00@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move_backward@PAUColumnModeInfo@@PAU1@@std@@YAPAUColumnModeInfo@@PAU1@00@Z PROC ; std::_Move_backward<ColumnModeInfo *,ColumnModeInfo *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 2546
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2548
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@UColumnModeInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUColumnModeInfo@@0@Z ; std::_Ptr_cat<ColumnModeInfo,ColumnModeInfo>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Move_backward@PAUColumnModeInfo@@PAU1@@std@@YAPAUColumnModeInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 16					; 00000010H
; Line 2549
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward@PAUColumnModeInfo@@PAU1@@std@@YAPAUColumnModeInfo@@PAU1@00@Z ENDP ; std::_Move_backward<ColumnModeInfo *,ColumnModeInfo *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Pop_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Pop_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z PROC ; std::_Pop_heap<ColumnModeInfo *,SortInPositionOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2413
	push	ebp
	mov	ebp, esp
; Line 2415
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Val_type<ColumnModeInfo *>
	add	esp, 4
	push	eax
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Unchecked@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Unchecked<ColumnModeInfo *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Unchecked<ColumnModeInfo *>
	add	esp, 4
	push	eax
	call	??$_Pop_heap_0@PAUColumnModeInfo@@U1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@0@Z ; std::_Pop_heap_0<ColumnModeInfo *,ColumnModeInfo,SortInPositionOrder>
	add	esp, 16					; 00000010H
; Line 2416
	pop	ebp
	ret	0
??$_Pop_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z ENDP ; std::_Pop_heap<ColumnModeInfo *,SortInPositionOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Adjust_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInPositionOrder@@@Z
_TEXT	SEGMENT
__Top$ = -8						; size = 4
__Idx$ = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Adjust_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInPositionOrder@@@Z PROC ; std::_Adjust_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInPositionOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2368
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 2369
	mov	eax, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR __Top$[ebp], eax
; Line 2370
	mov	ecx, DWORD PTR __Hole$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	DWORD PTR __Idx$[ebp], edx
; Line 2372
	jmp	SHORT $LN5@Adjust_hea
$LN4@Adjust_hea:
	mov	eax, DWORD PTR __Idx$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __Idx$[ebp], ecx
$LN5@Adjust_hea:
	mov	edx, DWORD PTR __Idx$[ebp]
	cmp	edx, DWORD PTR __Bottom$[ebp]
	jge	$LN3@Adjust_hea
; Line 2374
	push	2374					; 00000946H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Idx$[ebp]
	sub	eax, 1
	imul	ecx, eax, 24
	add	ecx, DWORD PTR __First$[ebp]
	push	ecx
	imul	edx, DWORD PTR __Idx$[ebp], 24
	add	edx, DWORD PTR __First$[ebp]
	push	edx
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	call	??$_Debug_lt_pred@USortInPositionOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInPositionOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInPositionOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Adjust_hea
; Line 2375
	mov	edx, DWORD PTR __Idx$[ebp]
	sub	edx, 1
	mov	DWORD PTR __Idx$[ebp], edx
$LN2@Adjust_hea:
; Line 2376
	imul	eax, DWORD PTR __Idx$[ebp], 24
	add	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	imul	ecx, DWORD PTR __Hole$[ebp], 24
	add	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
; Line 2377
	mov	ecx, DWORD PTR __Idx$[ebp]
	mov	DWORD PTR __Hole$[ebp], ecx
; Line 2378
	jmp	$LN4@Adjust_hea
$LN3@Adjust_hea:
; Line 2380
	mov	edx, DWORD PTR __Idx$[ebp]
	cmp	edx, DWORD PTR __Bottom$[ebp]
	jne	SHORT $LN1@Adjust_hea
; Line 2382
	mov	eax, DWORD PTR __Bottom$[ebp]
	sub	eax, 1
	imul	ecx, eax, 24
	add	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	imul	edx, DWORD PTR __Hole$[ebp], 24
	add	edx, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax
; Line 2383
	mov	ecx, DWORD PTR __Bottom$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Hole$[ebp], ecx
$LN1@Adjust_hea:
; Line 2385
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Top$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Hole$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Push_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInPositionOrder@@@Z ; std::_Push_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInPositionOrder>
	add	esp, 20					; 00000014H
; Line 2386
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Adjust_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInPositionOrder@@@Z ENDP ; std::_Adjust_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInPositionOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z PROC ; std::_Move<ColumnModeInfo &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1527
	push	ebp
	mov	ebp, esp
; Line 1528
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1529
	pop	ebp
	ret	0
??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ENDP ; std::_Move<ColumnModeInfo &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range2@PAUColumnModeInfo@@@std@@YAXPAUColumnModeInfo@@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAUColumnModeInfo@@@std@@YAXPAUColumnModeInfo@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<ColumnModeInfo *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 570
	push	ebp
	mov	ebp, esp
; Line 571
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang
; Line 573
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_pointer@UColumnModeInfo@@@std@@YAXPAUColumnModeInfo@@PB_WI@Z ; std::_Debug_pointer<ColumnModeInfo>
	add	esp, 12					; 0000000cH
; Line 574
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Debug_pointer@UColumnModeInfo@@@std@@YAXPAUColumnModeInfo@@PB_WI@Z ; std::_Debug_pointer<ColumnModeInfo>
	add	esp, 12					; 0000000cH
; Line 575
	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang
; Line 576
	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN3@Debug_rang:
; Line 578
	pop	ebp
	ret	0
??$_Debug_range2@PAUColumnModeInfo@@@std@@YAXPAUColumnModeInfo@@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<ColumnModeInfo *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Iter_cat@PAUColumnModeInfo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUColumnModeInfo@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAUColumnModeInfo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUColumnModeInfo@@@Z PROC ; std::_Iter_cat<ColumnModeInfo *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 405
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 407
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 408
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PAUColumnModeInfo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUColumnModeInfo@@@Z ENDP ; std::_Iter_cat<ColumnModeInfo *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@AAPAUColumnModeInfo@@@std@@YAAAPAUColumnModeInfo@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAUColumnModeInfo@@@std@@YAAAPAUColumnModeInfo@@AAPAU1@@Z PROC ; std::forward<ColumnModeInfo * &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@AAPAUColumnModeInfo@@@std@@YAAAPAUColumnModeInfo@@AAPAU1@@Z ENDP ; std::forward<ColumnModeInfo * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$swap@UColumnModeInfo@@@std@@YAXAAUColumnModeInfo@@0@Z
_TEXT	SEGMENT
__Tmp$ = -24						; size = 24
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@UColumnModeInfo@@@std@@YAXAAUColumnModeInfo@@0@Z PROC ; std::swap<ColumnModeInfo>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; Line 51
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 52
	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Tmp$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR __Tmp$[ebp+12], edx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR __Tmp$[ebp+16], ecx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR __Tmp$[ebp+20], edx
; Line 53
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
; Line 54
	lea	ecx, DWORD PTR __Tmp$[ebp]
	push	ecx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax
; Line 55
	mov	esp, ebp
	pop	ebp
	ret	0
??$swap@UColumnModeInfo@@@std@@YAXAAUColumnModeInfo@@0@Z ENDP ; std::swap<ColumnModeInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@AAUColumnModeInfo@@@std@@YAAAUColumnModeInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUColumnModeInfo@@@std@@YAAAUColumnModeInfo@@AAU1@@Z PROC ; std::forward<ColumnModeInfo &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@AAUColumnModeInfo@@@std@@YAAAUColumnModeInfo@@AAU1@@Z ENDP ; std::forward<ColumnModeInfo &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Med3@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@00USortInPositionOrder@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@00USortInPositionOrder@@@Z PROC ; std::_Med3<ColumnModeInfo *,SortInPositionOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 3032
	push	ebp
	mov	ebp, esp
; Line 3033
	push	3033					; 00000bd9H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	call	??$_Debug_lt_pred@USortInPositionOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInPositionOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInPositionOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Med3
; Line 3034
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	call	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 8
$LN3@Med3:
; Line 3035
	push	3035					; 00000bdbH
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	call	??$_Debug_lt_pred@USortInPositionOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInPositionOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInPositionOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@Med3
; Line 3037
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 8
; Line 3038
	push	3038					; 00000bdeH
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	call	??$_Debug_lt_pred@USortInPositionOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInPositionOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInPositionOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@Med3
; Line 3039
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	call	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 8
$LN4@Med3:
; Line 3041
	pop	ebp
	ret	0
??$_Med3@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@00USortInPositionOrder@@@Z ENDP ; std::_Med3<ColumnModeInfo *,SortInPositionOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@UColumnModeInfo@@@?$allocator_traits@V?$allocator@UColumnModeInfo@@@std@@@std@@SAXAAV?$allocator@UColumnModeInfo@@@1@PAUColumnModeInfo@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UColumnModeInfo@@@?$allocator_traits@V?$allocator@UColumnModeInfo@@@std@@@std@@SAXAAV?$allocator@UColumnModeInfo@@@1@PAUColumnModeInfo@@@Z PROC ; std::allocator_traits<std::allocator<ColumnModeInfo> >::destroy<ColumnModeInfo>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 728
	push	ebp
	mov	ebp, esp
; Line 730
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@UColumnModeInfo@@@?$allocator@UColumnModeInfo@@@std@@QAEXPAUColumnModeInfo@@@Z ; std::allocator<ColumnModeInfo>::destroy<ColumnModeInfo>
; Line 731
	pop	ebp
	ret	0
??$destroy@UColumnModeInfo@@@?$allocator_traits@V?$allocator@UColumnModeInfo@@@std@@@std@@SAXAAV?$allocator@UColumnModeInfo@@@1@PAUColumnModeInfo@@@Z ENDP ; std::allocator_traits<std::allocator<ColumnModeInfo> >::destroy<ColumnModeInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<int,int,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 469
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 470
	push	470					; 000001d6H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z	; std::_Debug_range<int *>
	add	esp, 16					; 00000010H
; Line 471
	push	471					; 000001d7H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z	; std::_Debug_pointer<int>
	add	esp, 12					; 0000000cH
; Line 472
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax
; Line 474
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
; Line 475
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Val_type@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAH@std@@YAPAHPAH@Z PROC			; std::_Val_type<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 645
	push	ebp
	mov	ebp, esp
; Line 646
	xor	eax, eax
; Line 647
	pop	ebp
	ret	0
??$_Val_type@PAH@std@@YAPAHPAH@Z ENDP			; std::_Val_type<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Insertion_sort1@PAUColumnModeInfo@@USortInSelectOrder@@U1@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@0@Z
_TEXT	SEGMENT
__Val$1 = -36						; size = 24
__First1$2 = -12					; size = 4
__Next$3 = -8						; size = 4
__Next1$4 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Insertion_sort1@PAUColumnModeInfo@@USortInSelectOrder@@U1@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@0@Z PROC ; std::_Insertion_sort1<ColumnModeInfo *,SortInSelectOrder,ColumnModeInfo>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2999
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 3000
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_
; Line 3001
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$3[ebp], ecx
$LN7@Insertion_:
	mov	edx, DWORD PTR __Next$3[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __Next$3[ebp], edx
	mov	eax, DWORD PTR __Next$3[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_
; Line 3003
	mov	ecx, DWORD PTR __Next$3[ebp]
	mov	DWORD PTR __Next1$4[ebp], ecx
; Line 3004
	mov	edx, DWORD PTR __Next$3[ebp]
	push	edx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Val$1[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Val$1[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Val$1[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR __Val$1[ebp+12], edx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR __Val$1[ebp+16], ecx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR __Val$1[ebp+20], edx
; Line 3006
	push	3006					; 00000bbeH
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Val$1[ebp]
	push	ecx
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	call	??$_Debug_lt_pred@USortInSelectOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInSelectOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInSelectOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@Insertion_
; Line 3008
	mov	ecx, DWORD PTR __Next1$4[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR __Next1$4[ebp], ecx
	mov	edx, DWORD PTR __Next1$4[ebp]
	push	edx
	mov	eax, DWORD PTR __Next$3[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Move_backward@PAUColumnModeInfo@@PAU1@@std@@YAPAUColumnModeInfo@@PAU1@00@Z ; std::_Move_backward<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 12					; 0000000cH
; Line 3009
	lea	edx, DWORD PTR __Val$1[ebp]
	push	edx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
; Line 3011
	jmp	$LN4@Insertion_
$LN5@Insertion_:
; Line 3013
	mov	ecx, DWORD PTR __Next1$4[ebp]
	mov	DWORD PTR __First1$2[ebp], ecx
; Line 3015
	jmp	SHORT $LN3@Insertion_
$LN2@Insertion_:
	mov	edx, DWORD PTR __First1$2[ebp]
	mov	DWORD PTR __Next1$4[ebp], edx
$LN3@Insertion_:
	mov	eax, DWORD PTR __First1$2[ebp]
	sub	eax, 24					; 00000018H
	mov	DWORD PTR __First1$2[ebp], eax
	push	3014					; 00000bc6H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	ecx, DWORD PTR __First1$2[ebp]
	push	ecx
	lea	edx, DWORD PTR __Val$1[ebp]
	push	edx
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	call	??$_Debug_lt_pred@USortInSelectOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInSelectOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInSelectOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Insertion_
; Line 3016
	mov	edx, DWORD PTR __First1$2[ebp]
	push	edx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	mov	ecx, DWORD PTR __Next1$4[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
	jmp	SHORT $LN2@Insertion_
$LN1@Insertion_:
; Line 3017
	lea	ecx, DWORD PTR __Val$1[ebp]
	push	ecx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	mov	edx, DWORD PTR __Next1$4[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax
$LN4@Insertion_:
; Line 3019
	jmp	$LN7@Insertion_
$LN9@Insertion_:
; Line 3020
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Insertion_sort1@PAUColumnModeInfo@@USortInSelectOrder@@U1@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@0@Z ENDP ; std::_Insertion_sort1<ColumnModeInfo *,SortInSelectOrder,ColumnModeInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Sort_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Sort_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z PROC ; std::_Sort_heap<ColumnModeInfo *,SortInSelectOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2475
	push	ebp
	mov	ebp, esp
; Line 2476
	jmp	SHORT $LN3@Sort_heap
$LN2@Sort_heap:
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 24					; 00000018H
	mov	DWORD PTR __Last$[ebp], eax
$LN3@Sort_heap:
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	cmp	eax, 1
	jle	SHORT $LN4@Sort_heap
; Line 2477
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Pop_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z ; std::_Pop_heap<ColumnModeInfo *,SortInSelectOrder>
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN2@Sort_heap
$LN4@Sort_heap:
; Line 2478
	pop	ebp
	ret	0
??$_Sort_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z ENDP ; std::_Sort_heap<ColumnModeInfo *,SortInSelectOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z
_TEXT	SEGMENT
__Root$1 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Debug_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z PROC ; std::_Debug_heap<ColumnModeInfo *,SortInSelectOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2285
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2286
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN10@Debug_heap
; Line 2287
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Root$1[ebp], ecx
	jmp	SHORT $LN8@Debug_heap
$LN7@Debug_heap:
	mov	edx, DWORD PTR __Root$1[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __Root$1[ebp], edx
$LN8@Debug_heap:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR __First$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	$LN10@Debug_heap
; Line 2288
	push	2288					; 000008f0H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Root$1[ebp]
	push	eax
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	call	??$_Debug_lt_pred@USortInSelectOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInSelectOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInSelectOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@Debug_heap
; Line 2289
	push	2289					; 000008f1H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1BK@KAECGCDK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN4@Debug_heap
$LN5@Debug_heap:
; Line 2290
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR __First$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	jne	SHORT $LN3@Debug_heap
; Line 2291
	jmp	SHORT $LN10@Debug_heap
	jmp	SHORT $LN4@Debug_heap
$LN3@Debug_heap:
; Line 2292
	push	2292					; 000008f4H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Root$1[ebp]
	push	eax
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	call	??$_Debug_lt_pred@USortInSelectOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInSelectOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInSelectOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@Debug_heap
; Line 2293
	push	2293					; 000008f5H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1BK@KAECGCDK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN4@Debug_heap:
; Line 2294
	jmp	$LN7@Debug_heap
$LN10@Debug_heap:
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z ENDP ; std::_Debug_heap<ColumnModeInfo *,SortInSelectOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Make_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@PAH0@Z
_TEXT	SEGMENT
__Val$1 = -32						; size = 24
__Bottom$ = -8						; size = 4
__Hole$2 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Make_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@PAH0@Z PROC ; std::_Make_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInSelectOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2442
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 2443
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR __Bottom$[ebp], eax
; Line 2444
	mov	eax, DWORD PTR __Bottom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Hole$2[ebp], eax
$LN2@Make_heap:
	cmp	DWORD PTR __Hole$2[ebp], 0
	jle	SHORT $LN3@Make_heap
; Line 2446
	mov	edx, DWORD PTR __Hole$2[ebp]
	sub	edx, 1
	mov	DWORD PTR __Hole$2[ebp], edx
; Line 2447
	imul	eax, DWORD PTR __Hole$2[ebp], 24
	add	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Val$1[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Val$1[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Val$1[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR __Val$1[ebp+12], edx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR __Val$1[ebp+16], ecx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR __Val$1[ebp+20], edx
; Line 2449
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Val$1[ebp]
	push	ecx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Bottom$[ebp]
	push	edx
	mov	eax, DWORD PTR __Hole$2[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Adjust_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInSelectOrder@@@Z ; std::_Adjust_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInSelectOrder>
	add	esp, 20					; 00000014H
; Line 2450
	jmp	SHORT $LN2@Make_heap
$LN3@Make_heap:
; Line 2451
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Make_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@PAH0@Z ENDP ; std::_Make_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInSelectOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_lt_pred@USortInSelectOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInSelectOrder@@AAUColumnModeInfo@@1PB_WI@Z
_TEXT	SEGMENT
__Pred$ = 8						; size = 1
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
__File$ = 20						; size = 4
__Line$ = 24						; size = 4
??$_Debug_lt_pred@USortInSelectOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInSelectOrder@@AAUColumnModeInfo@@1PB_WI@Z PROC ; std::_Debug_lt_pred<SortInSelectOrder,ColumnModeInfo &,ColumnModeInfo &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 520
	push	ebp
	mov	ebp, esp
; Line 521
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$forward@AAUColumnModeInfo@@@std@@YAAAUColumnModeInfo@@AAU1@@Z ; std::forward<ColumnModeInfo &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$forward@AAUColumnModeInfo@@@std@@YAAAUColumnModeInfo@@AAU1@@Z ; std::forward<ColumnModeInfo &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??RSortInSelectOrder@@QAE_NAAUColumnModeInfo@@0@Z ; SortInSelectOrder::operator()
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@Debug_lt_p
; Line 522
	xor	al, al
	jmp	SHORT $LN4@Debug_lt_p
	jmp	SHORT $LN2@Debug_lt_p
$LN3@Debug_lt_p:
; Line 523
	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$forward@AAUColumnModeInfo@@@std@@YAAAUColumnModeInfo@@AAU1@@Z ; std::forward<ColumnModeInfo &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	call	??$forward@AAUColumnModeInfo@@@std@@YAAAUColumnModeInfo@@AAU1@@Z ; std::forward<ColumnModeInfo &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??RSortInSelectOrder@@QAE_NAAUColumnModeInfo@@0@Z ; SortInSelectOrder::operator()
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Debug_lt_p
; Line 524
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_lt_p:
; Line 525
	mov	al, 1
$LN4@Debug_lt_p:
; Line 526
	pop	ebp
	ret	0
??$_Debug_lt_pred@USortInSelectOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInSelectOrder@@AAUColumnModeInfo@@1PB_WI@Z ENDP ; std::_Debug_lt_pred<SortInSelectOrder,ColumnModeInfo &,ColumnModeInfo &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Median@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@00USortInSelectOrder@@@Z
_TEXT	SEGMENT
__Step$1 = -4						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Median@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@00USortInSelectOrder@@@Z PROC ; std::_Median<ColumnModeInfo *,SortInSelectOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 3046
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 3047
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	cmp	eax, 40					; 00000028H
	jle	$LN2@Median
; Line 3049
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	add	eax, 1
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR __Step$1[ebp], eax
; Line 3050
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$1[ebp]
	shl	eax, 1
	imul	ecx, eax, 24
	add	ecx, DWORD PTR __First$[ebp]
	push	ecx
	imul	edx, DWORD PTR __Step$1[ebp], 24
	add	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Med3@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@00USortInSelectOrder@@@Z ; std::_Med3<ColumnModeInfo *,SortInSelectOrder>
	add	esp, 16					; 00000010H
; Line 3051
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	imul	edx, DWORD PTR __Step$1[ebp], 24
	add	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	imul	ecx, DWORD PTR __Step$1[ebp], 24
	mov	edx, DWORD PTR __Mid$[ebp]
	sub	edx, ecx
	push	edx
	call	??$_Med3@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@00USortInSelectOrder@@@Z ; std::_Med3<ColumnModeInfo *,SortInSelectOrder>
	add	esp, 16					; 00000010H
; Line 3052
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	imul	edx, DWORD PTR __Step$1[ebp], 24
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR __Step$1[ebp]
	shl	ecx, 1
	imul	edx, ecx, 24
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, edx
	push	eax
	call	??$_Med3@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@00USortInSelectOrder@@@Z ; std::_Med3<ColumnModeInfo *,SortInSelectOrder>
	add	esp, 16					; 00000010H
; Line 3053
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	imul	edx, DWORD PTR __Step$1[ebp], 24
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	imul	edx, DWORD PTR __Step$1[ebp], 24
	add	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Med3@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@00USortInSelectOrder@@@Z ; std::_Med3<ColumnModeInfo *,SortInSelectOrder>
	add	esp, 16					; 00000010H
; Line 3055
	jmp	SHORT $LN3@Median
$LN2@Median:
; Line 3056
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Med3@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@00USortInSelectOrder@@@Z ; std::_Med3<ColumnModeInfo *,SortInSelectOrder>
	add	esp, 16					; 00000010H
$LN3@Median:
; Line 3057
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Median@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@00USortInSelectOrder@@@Z ENDP ; std::_Median<ColumnModeInfo *,SortInSelectOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Insertion_sort1@PAUColumnModeInfo@@USortInPositionOrder@@U1@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@0@Z
_TEXT	SEGMENT
__Val$1 = -36						; size = 24
__First1$2 = -12					; size = 4
__Next$3 = -8						; size = 4
__Next1$4 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Insertion_sort1@PAUColumnModeInfo@@USortInPositionOrder@@U1@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@0@Z PROC ; std::_Insertion_sort1<ColumnModeInfo *,SortInPositionOrder,ColumnModeInfo>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2999
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 3000
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_
; Line 3001
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$3[ebp], ecx
$LN7@Insertion_:
	mov	edx, DWORD PTR __Next$3[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __Next$3[ebp], edx
	mov	eax, DWORD PTR __Next$3[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_
; Line 3003
	mov	ecx, DWORD PTR __Next$3[ebp]
	mov	DWORD PTR __Next1$4[ebp], ecx
; Line 3004
	mov	edx, DWORD PTR __Next$3[ebp]
	push	edx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Val$1[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Val$1[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Val$1[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR __Val$1[ebp+12], edx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR __Val$1[ebp+16], ecx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR __Val$1[ebp+20], edx
; Line 3006
	push	3006					; 00000bbeH
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Val$1[ebp]
	push	ecx
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	call	??$_Debug_lt_pred@USortInPositionOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInPositionOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInPositionOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@Insertion_
; Line 3008
	mov	ecx, DWORD PTR __Next1$4[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR __Next1$4[ebp], ecx
	mov	edx, DWORD PTR __Next1$4[ebp]
	push	edx
	mov	eax, DWORD PTR __Next$3[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Move_backward@PAUColumnModeInfo@@PAU1@@std@@YAPAUColumnModeInfo@@PAU1@00@Z ; std::_Move_backward<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 12					; 0000000cH
; Line 3009
	lea	edx, DWORD PTR __Val$1[ebp]
	push	edx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
; Line 3011
	jmp	$LN4@Insertion_
$LN5@Insertion_:
; Line 3013
	mov	ecx, DWORD PTR __Next1$4[ebp]
	mov	DWORD PTR __First1$2[ebp], ecx
; Line 3015
	jmp	SHORT $LN3@Insertion_
$LN2@Insertion_:
	mov	edx, DWORD PTR __First1$2[ebp]
	mov	DWORD PTR __Next1$4[ebp], edx
$LN3@Insertion_:
	mov	eax, DWORD PTR __First1$2[ebp]
	sub	eax, 24					; 00000018H
	mov	DWORD PTR __First1$2[ebp], eax
	push	3014					; 00000bc6H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	ecx, DWORD PTR __First1$2[ebp]
	push	ecx
	lea	edx, DWORD PTR __Val$1[ebp]
	push	edx
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	call	??$_Debug_lt_pred@USortInPositionOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInPositionOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInPositionOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Insertion_
; Line 3016
	mov	edx, DWORD PTR __First1$2[ebp]
	push	edx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	mov	ecx, DWORD PTR __Next1$4[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
	jmp	SHORT $LN2@Insertion_
$LN1@Insertion_:
; Line 3017
	lea	ecx, DWORD PTR __Val$1[ebp]
	push	ecx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	mov	edx, DWORD PTR __Next1$4[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax
$LN4@Insertion_:
; Line 3019
	jmp	$LN7@Insertion_
$LN9@Insertion_:
; Line 3020
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Insertion_sort1@PAUColumnModeInfo@@USortInPositionOrder@@U1@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@0@Z ENDP ; std::_Insertion_sort1<ColumnModeInfo *,SortInPositionOrder,ColumnModeInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Sort_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Sort_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z PROC ; std::_Sort_heap<ColumnModeInfo *,SortInPositionOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2475
	push	ebp
	mov	ebp, esp
; Line 2476
	jmp	SHORT $LN3@Sort_heap
$LN2@Sort_heap:
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 24					; 00000018H
	mov	DWORD PTR __Last$[ebp], eax
$LN3@Sort_heap:
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	cmp	eax, 1
	jle	SHORT $LN4@Sort_heap
; Line 2477
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Pop_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z ; std::_Pop_heap<ColumnModeInfo *,SortInPositionOrder>
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN2@Sort_heap
$LN4@Sort_heap:
; Line 2478
	pop	ebp
	ret	0
??$_Sort_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z ENDP ; std::_Sort_heap<ColumnModeInfo *,SortInPositionOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z
_TEXT	SEGMENT
__Root$1 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Debug_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z PROC ; std::_Debug_heap<ColumnModeInfo *,SortInPositionOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2285
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2286
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN10@Debug_heap
; Line 2287
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Root$1[ebp], ecx
	jmp	SHORT $LN8@Debug_heap
$LN7@Debug_heap:
	mov	edx, DWORD PTR __Root$1[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __Root$1[ebp], edx
$LN8@Debug_heap:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR __First$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	$LN10@Debug_heap
; Line 2288
	push	2288					; 000008f0H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Root$1[ebp]
	push	eax
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	call	??$_Debug_lt_pred@USortInPositionOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInPositionOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInPositionOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@Debug_heap
; Line 2289
	push	2289					; 000008f1H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1BK@KAECGCDK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN4@Debug_heap
$LN5@Debug_heap:
; Line 2290
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR __First$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	jne	SHORT $LN3@Debug_heap
; Line 2291
	jmp	SHORT $LN10@Debug_heap
	jmp	SHORT $LN4@Debug_heap
$LN3@Debug_heap:
; Line 2292
	push	2292					; 000008f4H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Root$1[ebp]
	push	eax
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	call	??$_Debug_lt_pred@USortInPositionOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInPositionOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInPositionOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@Debug_heap
; Line 2293
	push	2293					; 000008f5H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1BK@KAECGCDK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN4@Debug_heap:
; Line 2294
	jmp	$LN7@Debug_heap
$LN10@Debug_heap:
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z ENDP ; std::_Debug_heap<ColumnModeInfo *,SortInPositionOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Make_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@PAH0@Z
_TEXT	SEGMENT
__Val$1 = -32						; size = 24
__Bottom$ = -8						; size = 4
__Hole$2 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Make_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@PAH0@Z PROC ; std::_Make_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInPositionOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2442
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 2443
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR __Bottom$[ebp], eax
; Line 2444
	mov	eax, DWORD PTR __Bottom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Hole$2[ebp], eax
$LN2@Make_heap:
	cmp	DWORD PTR __Hole$2[ebp], 0
	jle	SHORT $LN3@Make_heap
; Line 2446
	mov	edx, DWORD PTR __Hole$2[ebp]
	sub	edx, 1
	mov	DWORD PTR __Hole$2[ebp], edx
; Line 2447
	imul	eax, DWORD PTR __Hole$2[ebp], 24
	add	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Val$1[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Val$1[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Val$1[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR __Val$1[ebp+12], edx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR __Val$1[ebp+16], ecx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR __Val$1[ebp+20], edx
; Line 2449
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Val$1[ebp]
	push	ecx
	call	??$_Move@AAUColumnModeInfo@@@std@@YA$$QAUColumnModeInfo@@AAU1@@Z ; std::_Move<ColumnModeInfo &>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Bottom$[ebp]
	push	edx
	mov	eax, DWORD PTR __Hole$2[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Adjust_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@HH$$QAU1@USortInPositionOrder@@@Z ; std::_Adjust_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInPositionOrder>
	add	esp, 20					; 00000014H
; Line 2450
	jmp	SHORT $LN2@Make_heap
$LN3@Make_heap:
; Line 2451
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Make_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@PAH0@Z ENDP ; std::_Make_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInPositionOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Val_type@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z PROC ; std::_Val_type<ColumnModeInfo *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 645
	push	ebp
	mov	ebp, esp
; Line 646
	xor	eax, eax
; Line 647
	pop	ebp
	ret	0
??$_Val_type@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ENDP ; std::_Val_type<ColumnModeInfo *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Dist_type@PAUColumnModeInfo@@@std@@YAPAHPAUColumnModeInfo@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAUColumnModeInfo@@@std@@YAPAHPAUColumnModeInfo@@@Z PROC ; std::_Dist_type<ColumnModeInfo *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 705
	push	ebp
	mov	ebp, esp
; Line 706
	xor	eax, eax
; Line 707
	pop	ebp
	ret	0
??$_Dist_type@PAUColumnModeInfo@@@std@@YAPAHPAUColumnModeInfo@@@Z ENDP ; std::_Dist_type<ColumnModeInfo *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z PROC ; std::_Unchecked<ColumnModeInfo *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 280
	push	ebp
	mov	ebp, esp
; Line 281
	mov	eax, DWORD PTR __Src$[ebp]
; Line 282
	pop	ebp
	ret	0
??$_Unchecked@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ENDP ; std::_Unchecked<ColumnModeInfo *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range@PAUColumnModeInfo@@@std@@YAXPAUColumnModeInfo@@0PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAUColumnModeInfo@@@std@@YAXPAUColumnModeInfo@@0PB_WI@Z PROC ; std::_Debug_range<ColumnModeInfo *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 583
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 584
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PAUColumnModeInfo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUColumnModeInfo@@@Z ; std::_Iter_cat<ColumnModeInfo *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range2@PAUColumnModeInfo@@@std@@YAXPAUColumnModeInfo@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<ColumnModeInfo *>
	add	esp, 20					; 00000014H
; Line 585
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAUColumnModeInfo@@@std@@YAXPAUColumnModeInfo@@0PB_WI@Z ENDP ; std::_Debug_range<ColumnModeInfo *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$?0AAPAUColumnModeInfo@@AAPAU0@X@?$pair@PAUColumnModeInfo@@PAU1@@std@@QAE@AAPAUColumnModeInfo@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAUColumnModeInfo@@AAPAU0@X@?$pair@PAUColumnModeInfo@@PAU1@@std@@QAE@AAPAUColumnModeInfo@@0@Z PROC ; std::pair<ColumnModeInfo *,ColumnModeInfo *>::pair<ColumnModeInfo *,ColumnModeInfo *><ColumnModeInfo * &,ColumnModeInfo * &,void>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@AAPAUColumnModeInfo@@@std@@YAAAPAUColumnModeInfo@@AAPAU1@@Z ; std::forward<ColumnModeInfo * &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@AAPAUColumnModeInfo@@@std@@YAAAPAUColumnModeInfo@@AAPAU1@@Z ; std::forward<ColumnModeInfo * &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx
; Line 145
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0AAPAUColumnModeInfo@@AAPAU0@X@?$pair@PAUColumnModeInfo@@PAU1@@std@@QAE@AAPAUColumnModeInfo@@0@Z ENDP ; std::pair<ColumnModeInfo *,ColumnModeInfo *>::pair<ColumnModeInfo *,ColumnModeInfo *><ColumnModeInfo * &,ColumnModeInfo * &,void>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z PROC ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; Line 27
	push	ebp
	mov	ebp, esp
; Line 28
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$swap@UColumnModeInfo@@@std@@YAXAAUColumnModeInfo@@0@Z ; std::swap<ColumnModeInfo>
	add	esp, 8
; Line 29
	pop	ebp
	ret	0
??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ENDP ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_lt_pred@USortInPositionOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInPositionOrder@@AAUColumnModeInfo@@1PB_WI@Z
_TEXT	SEGMENT
__Pred$ = 8						; size = 1
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
__File$ = 20						; size = 4
__Line$ = 24						; size = 4
??$_Debug_lt_pred@USortInPositionOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInPositionOrder@@AAUColumnModeInfo@@1PB_WI@Z PROC ; std::_Debug_lt_pred<SortInPositionOrder,ColumnModeInfo &,ColumnModeInfo &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 520
	push	ebp
	mov	ebp, esp
; Line 521
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$forward@AAUColumnModeInfo@@@std@@YAAAUColumnModeInfo@@AAU1@@Z ; std::forward<ColumnModeInfo &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$forward@AAUColumnModeInfo@@@std@@YAAAUColumnModeInfo@@AAU1@@Z ; std::forward<ColumnModeInfo &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??RSortInPositionOrder@@QAE_NAAUColumnModeInfo@@0@Z ; SortInPositionOrder::operator()
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@Debug_lt_p
; Line 522
	xor	al, al
	jmp	SHORT $LN4@Debug_lt_p
	jmp	SHORT $LN2@Debug_lt_p
$LN3@Debug_lt_p:
; Line 523
	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$forward@AAUColumnModeInfo@@@std@@YAAAUColumnModeInfo@@AAU1@@Z ; std::forward<ColumnModeInfo &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	call	??$forward@AAUColumnModeInfo@@@std@@YAAAUColumnModeInfo@@AAU1@@Z ; std::forward<ColumnModeInfo &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??RSortInPositionOrder@@QAE_NAAUColumnModeInfo@@0@Z ; SortInPositionOrder::operator()
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Debug_lt_p
; Line 524
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_lt_p:
; Line 525
	mov	al, 1
$LN4@Debug_lt_p:
; Line 526
	pop	ebp
	ret	0
??$_Debug_lt_pred@USortInPositionOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInPositionOrder@@AAUColumnModeInfo@@1PB_WI@Z ENDP ; std::_Debug_lt_pred<SortInPositionOrder,ColumnModeInfo &,ColumnModeInfo &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Median@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@00USortInPositionOrder@@@Z
_TEXT	SEGMENT
__Step$1 = -4						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Median@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@00USortInPositionOrder@@@Z PROC ; std::_Median<ColumnModeInfo *,SortInPositionOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 3046
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 3047
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	cmp	eax, 40					; 00000028H
	jle	$LN2@Median
; Line 3049
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	add	eax, 1
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR __Step$1[ebp], eax
; Line 3050
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$1[ebp]
	shl	eax, 1
	imul	ecx, eax, 24
	add	ecx, DWORD PTR __First$[ebp]
	push	ecx
	imul	edx, DWORD PTR __Step$1[ebp], 24
	add	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Med3@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@00USortInPositionOrder@@@Z ; std::_Med3<ColumnModeInfo *,SortInPositionOrder>
	add	esp, 16					; 00000010H
; Line 3051
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	imul	edx, DWORD PTR __Step$1[ebp], 24
	add	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	imul	ecx, DWORD PTR __Step$1[ebp], 24
	mov	edx, DWORD PTR __Mid$[ebp]
	sub	edx, ecx
	push	edx
	call	??$_Med3@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@00USortInPositionOrder@@@Z ; std::_Med3<ColumnModeInfo *,SortInPositionOrder>
	add	esp, 16					; 00000010H
; Line 3052
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	imul	edx, DWORD PTR __Step$1[ebp], 24
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR __Step$1[ebp]
	shl	ecx, 1
	imul	edx, ecx, 24
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, edx
	push	eax
	call	??$_Med3@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@00USortInPositionOrder@@@Z ; std::_Med3<ColumnModeInfo *,SortInPositionOrder>
	add	esp, 16					; 00000010H
; Line 3053
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	imul	edx, DWORD PTR __Step$1[ebp], 24
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	imul	edx, DWORD PTR __Step$1[ebp], 24
	add	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Med3@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@00USortInPositionOrder@@@Z ; std::_Med3<ColumnModeInfo *,SortInPositionOrder>
	add	esp, 16					; 00000010H
; Line 3055
	jmp	SHORT $LN3@Median
$LN2@Median:
; Line 3056
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Med3@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@00USortInPositionOrder@@@Z ; std::_Med3<ColumnModeInfo *,SortInPositionOrder>
	add	esp, 16					; 00000010H
$LN3@Median:
; Line 3057
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Median@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@00USortInPositionOrder@@@Z ENDP ; std::_Median<ColumnModeInfo *,SortInPositionOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@PB_WI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@PB_WI@Z PROC ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 540
	push	ebp
	mov	ebp, esp
; Line 541
	pop	ebp
	ret	0
??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@PB_WI@Z ENDP ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@UColumnModeInfo@@@?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@QAEXPAUColumnModeInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@UColumnModeInfo@@@?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@QAEXPAUColumnModeInfo@@@Z PROC ; std::_Wrap_alloc<std::allocator<ColumnModeInfo> >::destroy<ColumnModeInfo>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 877
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 879
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@UColumnModeInfo@@@?$allocator_traits@V?$allocator@UColumnModeInfo@@@std@@@std@@SAXAAV?$allocator@UColumnModeInfo@@@1@PAUColumnModeInfo@@@Z ; std::allocator_traits<std::allocator<ColumnModeInfo> >::destroy<ColumnModeInfo>
	add	esp, 8
; Line 880
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@UColumnModeInfo@@@?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@QAEXPAUColumnModeInfo@@@Z ENDP ; std::_Wrap_alloc<std::allocator<ColumnModeInfo> >::destroy<ColumnModeInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z PROC	; std::_Rechecked<int *,int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 288
	push	ebp
	mov	ebp, esp
; Line 289
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 290
	mov	eax, DWORD PTR __Dest$[ebp]
; Line 291
	pop	ebp
	ret	0
??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z ENDP	; std::_Rechecked<int *,int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 482
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 484
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAH@std@@YAPAHPAH@Z	; std::_Val_type<int *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<int,int,int>
	add	esp, 24					; 00000018H
; Line 485
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAH@std@@YAPAHPAH@Z PROC			; std::_Unchecked<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 280
	push	ebp
	mov	ebp, esp
; Line 281
	mov	eax, DWORD PTR __Src$[ebp]
; Line 282
	pop	ebp
	ret	0
??$_Unchecked@PAH@std@@YAPAHPAH@Z ENDP			; std::_Unchecked<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z PROC	; std::allocator<wchar_t>::destroy<wchar_t *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 605
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 608
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ENDP	; std::allocator<wchar_t>::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z PROC ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 598
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 600
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z	; std::forward<wchar_t * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 601
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ENDP ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>
; Function compile flags: /Odtp
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 605
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 608
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 598
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 600
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 601
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
;	COMDAT ??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z PROC	; std::allocator<int>::construct<int,int &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 598
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 600
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAH@std@@YAAAHAAH@Z		; std::forward<int &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 601
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z ENDP	; std::allocator<int>::construct<int,int &>
; Function compile flags: /Odtp
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xlocnum
; Line 155
	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xlocnum
; Line 155
	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Insertion_sort@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Insertion_sort@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z PROC ; std::_Insertion_sort<ColumnModeInfo *,SortInSelectOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 3025
	push	ebp
	mov	ebp, esp
; Line 3026
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Val_type<ColumnModeInfo *>
	add	esp, 4
	push	eax
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Insertion_sort1@PAUColumnModeInfo@@USortInSelectOrder@@U1@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@0@Z ; std::_Insertion_sort1<ColumnModeInfo *,SortInSelectOrder,ColumnModeInfo>
	add	esp, 16					; 00000010H
; Line 3027
	pop	ebp
	ret	0
??$_Insertion_sort@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z ENDP ; std::_Insertion_sort<ColumnModeInfo *,SortInSelectOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$sort_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z PROC ; std::sort_heap<ColumnModeInfo *,SortInSelectOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2483
	push	ebp
	mov	ebp, esp
; Line 2484
	push	2484					; 000009b4H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAUColumnModeInfo@@@std@@YAXPAUColumnModeInfo@@0PB_WI@Z ; std::_Debug_range<ColumnModeInfo *>
	add	esp, 16					; 00000010H
; Line 2485
	push	2485					; 000009b5H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	lea	edx, DWORD PTR __Pred$[ebp]
	push	edx
	call	??$_Debug_pointer@USortInSelectOrder@@@std@@YAXAAUSortInSelectOrder@@PB_WI@Z ; std::_Debug_pointer<SortInSelectOrder>
	add	esp, 12					; 0000000cH
; Line 2486
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Unchecked@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Unchecked<ColumnModeInfo *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Unchecked@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Unchecked<ColumnModeInfo *>
	add	esp, 4
	push	eax
	call	??$_Debug_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z ; std::_Debug_heap<ColumnModeInfo *,SortInSelectOrder>
	add	esp, 12					; 0000000cH
; Line 2487
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Unchecked@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Unchecked<ColumnModeInfo *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Unchecked@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Unchecked<ColumnModeInfo *>
	add	esp, 4
	push	eax
	call	??$_Sort_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z ; std::_Sort_heap<ColumnModeInfo *,SortInSelectOrder>
	add	esp, 12					; 0000000cH
; Line 2488
	pop	ebp
	ret	0
??$sort_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z ENDP ; std::sort_heap<ColumnModeInfo *,SortInSelectOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$make_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$make_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z PROC ; std::make_heap<ColumnModeInfo *,SortInSelectOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2456
	push	ebp
	mov	ebp, esp
; Line 2457
	push	2457					; 00000999H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAUColumnModeInfo@@@std@@YAXPAUColumnModeInfo@@0PB_WI@Z ; std::_Debug_range<ColumnModeInfo *>
	add	esp, 16					; 00000010H
; Line 2458
	push	2458					; 0000099aH
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	lea	edx, DWORD PTR __Pred$[ebp]
	push	edx
	call	??$_Debug_pointer@USortInSelectOrder@@@std@@YAXAAUSortInSelectOrder@@PB_WI@Z ; std::_Debug_pointer<SortInSelectOrder>
	add	esp, 12					; 0000000cH
; Line 2459
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	cmp	eax, 1
	jle	SHORT $LN2@make_heap
; Line 2461
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Val_type@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Val_type<ColumnModeInfo *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Dist_type@PAUColumnModeInfo@@@std@@YAPAHPAUColumnModeInfo@@@Z ; std::_Dist_type<ColumnModeInfo *>
	add	esp, 4
	push	eax
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Unchecked@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Unchecked<ColumnModeInfo *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Unchecked<ColumnModeInfo *>
	add	esp, 4
	push	eax
	call	??$_Make_heap@PAUColumnModeInfo@@HU1@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@PAH0@Z ; std::_Make_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInSelectOrder>
	add	esp, 20					; 00000014H
$LN2@make_heap:
; Line 2462
	pop	ebp
	ret	0
??$make_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z ENDP ; std::make_heap<ColumnModeInfo *,SortInSelectOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unguarded_partition@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YA?AU?$pair@PAUColumnModeInfo@@PAU1@@0@PAUColumnModeInfo@@0USortInSelectOrder@@@Z
_TEXT	SEGMENT
tv216 = -40						; size = 4
tv202 = -36						; size = 4
tv199 = -32						; size = 4
tv160 = -28						; size = 4
tv159 = -24						; size = 4
__Mid$ = -20						; size = 4
__Gfirst$ = -16						; size = 4
__Glast$ = -12						; size = 4
__Plast$ = -8						; size = 4
__Pfirst$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Unguarded_partition@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YA?AU?$pair@PAUColumnModeInfo@@PAU1@@0@PAUColumnModeInfo@@0USortInSelectOrder@@@Z PROC ; std::_Unguarded_partition<ColumnModeInfo *,SortInSelectOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 3063
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
; Line 3064
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	imul	edx, eax, 24
	add	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid$[ebp], edx
; Line 3065
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Median@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@00USortInSelectOrder@@@Z ; std::_Median<ColumnModeInfo *,SortInSelectOrder>
	add	esp, 16					; 00000010H
; Line 3066
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Pfirst$[ebp], ecx
; Line 3067
	mov	edx, DWORD PTR __Pfirst$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __Plast$[ebp], edx
$LN29@Unguarded_:
; Line 3071
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Pfirst$[ebp]
	jae	SHORT $LN27@Unguarded_
	push	3070					; 00000bfeH
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 24					; 00000018H
	push	edx
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	call	??$_Debug_lt_pred@USortInSelectOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInSelectOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInSelectOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN27@Unguarded_
	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??RSortInSelectOrder@@QAE_NAAUColumnModeInfo@@0@Z ; SortInSelectOrder::operator()
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN27@Unguarded_
; Line 3072
	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 24					; 00000018H
	mov	DWORD PTR __Pfirst$[ebp], edx
	jmp	SHORT $LN29@Unguarded_
$LN27@Unguarded_:
; Line 3075
	mov	eax, DWORD PTR __Plast$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	jae	SHORT $LN26@Unguarded_
	push	3074					; 00000c02H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Plast$[ebp]
	push	edx
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	call	??$_Debug_lt_pred@USortInSelectOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInSelectOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInSelectOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN26@Unguarded_
	mov	edx, DWORD PTR __Plast$[ebp]
	push	edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??RSortInSelectOrder@@QAE_NAAUColumnModeInfo@@0@Z ; SortInSelectOrder::operator()
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN26@Unguarded_
; Line 3076
	mov	edx, DWORD PTR __Plast$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __Plast$[ebp], edx
	jmp	SHORT $LN27@Unguarded_
$LN26@Unguarded_:
; Line 3078
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR __Gfirst$[ebp], eax
; Line 3079
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR __Glast$[ebp], ecx
$LN25@Unguarded_:
; Line 3083
	jmp	SHORT $LN23@Unguarded_
$LN22@Unguarded_:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __Gfirst$[ebp], edx
$LN23@Unguarded_:
	mov	eax, DWORD PTR __Gfirst$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	jae	SHORT $LN21@Unguarded_
; Line 3084
	push	3084					; 00000c0cH
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	push	edx
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	call	??$_Debug_lt_pred@USortInSelectOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInSelectOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInSelectOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN20@Unguarded_
	jmp	SHORT $LN19@Unguarded_
$LN20@Unguarded_:
; Line 3086
	mov	edx, DWORD PTR __Pfirst$[ebp]
	push	edx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??RSortInSelectOrder@@QAE_NAAUColumnModeInfo@@0@Z ; SortInSelectOrder::operator()
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN18@Unguarded_
; Line 3087
	jmp	SHORT $LN21@Unguarded_
	jmp	SHORT $LN19@Unguarded_
$LN18@Unguarded_:
; Line 3088
	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR tv159[ebp], edx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR tv160[ebp], eax
	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR __Plast$[ebp], ecx
	mov	edx, DWORD PTR tv159[ebp]
	cmp	edx, DWORD PTR tv160[ebp]
	je	SHORT $LN19@Unguarded_
; Line 3089
	mov	eax, DWORD PTR __Gfirst$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Plast$[ebp]
	sub	ecx, 24					; 00000018H
	push	ecx
	call	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 8
$LN19@Unguarded_:
; Line 3090
	jmp	$LN22@Unguarded_
$LN21@Unguarded_:
	jmp	SHORT $LN15@Unguarded_
$LN14@Unguarded_:
	mov	edx, DWORD PTR __Glast$[ebp]
	sub	edx, 24					; 00000018H
	mov	DWORD PTR __Glast$[ebp], edx
$LN15@Unguarded_:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Glast$[ebp]
	jae	SHORT $LN13@Unguarded_
; Line 3091
	push	3091					; 00000c13H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	sub	edx, 24					; 00000018H
	push	edx
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	call	??$_Debug_lt_pred@USortInSelectOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInSelectOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInSelectOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@Unguarded_
	jmp	SHORT $LN11@Unguarded_
$LN12@Unguarded_:
; Line 3093
	mov	edx, DWORD PTR __Glast$[ebp]
	sub	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??RSortInSelectOrder@@QAE_NAAUColumnModeInfo@@0@Z ; SortInSelectOrder::operator()
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN10@Unguarded_
; Line 3094
	jmp	SHORT $LN13@Unguarded_
	jmp	SHORT $LN11@Unguarded_
$LN10@Unguarded_:
; Line 3095
	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 24					; 00000018H
	mov	DWORD PTR __Pfirst$[ebp], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	sub	eax, 24					; 00000018H
	cmp	DWORD PTR __Pfirst$[ebp], eax
	je	SHORT $LN11@Unguarded_
; Line 3096
	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	push	edx
	call	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 8
$LN11@Unguarded_:
; Line 3097
	jmp	$LN14@Unguarded_
$LN13@Unguarded_:
	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jne	SHORT $LN7@Unguarded_
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	jne	SHORT $LN7@Unguarded_
; Line 3098
	lea	edx, DWORD PTR __Plast$[ebp]
	push	edx
	lea	eax, DWORD PTR __Pfirst$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0AAPAUColumnModeInfo@@AAPAU0@X@?$pair@PAUColumnModeInfo@@PAU1@@std@@QAE@AAPAUColumnModeInfo@@0@Z ; std::pair<ColumnModeInfo *,ColumnModeInfo *>::pair<ColumnModeInfo *,ColumnModeInfo *><ColumnModeInfo * &,ColumnModeInfo * &,void>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN30@Unguarded_
$LN7@Unguarded_:
; Line 3100
	mov	ecx, DWORD PTR __Glast$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jne	SHORT $LN6@Unguarded_
; Line 3102
	mov	edx, DWORD PTR __Plast$[ebp]
	cmp	edx, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN5@Unguarded_
; Line 3103
	mov	eax, DWORD PTR __Plast$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	push	ecx
	call	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 8
$LN5@Unguarded_:
; Line 3104
	mov	edx, DWORD PTR __Plast$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __Plast$[ebp], edx
; Line 3105
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR tv199[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR tv202[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __Pfirst$[ebp], edx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR __Gfirst$[ebp], eax
	mov	ecx, DWORD PTR tv199[ebp]
	push	ecx
	mov	edx, DWORD PTR tv202[ebp]
	push	edx
	call	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 8
	jmp	SHORT $LN4@Unguarded_
$LN6@Unguarded_:
; Line 3107
	mov	eax, DWORD PTR __Gfirst$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	jne	SHORT $LN3@Unguarded_
; Line 3109
	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 24					; 00000018H
	mov	DWORD PTR __Glast$[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 24					; 00000018H
	mov	DWORD PTR __Pfirst$[ebp], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __Pfirst$[ebp]
	je	SHORT $LN2@Unguarded_
; Line 3110
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	push	edx
	call	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 8
$LN2@Unguarded_:
; Line 3111
	mov	eax, DWORD PTR __Plast$[ebp]
	sub	eax, 24					; 00000018H
	mov	DWORD PTR __Plast$[ebp], eax
	mov	ecx, DWORD PTR __Plast$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	push	edx
	call	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 8
; Line 3113
	jmp	SHORT $LN4@Unguarded_
$LN3@Unguarded_:
; Line 3114
	mov	eax, DWORD PTR __Glast$[ebp]
	sub	eax, 24					; 00000018H
	mov	DWORD PTR __Glast$[ebp], eax
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR tv216[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	push	edx
	mov	eax, DWORD PTR tv216[ebp]
	push	eax
	call	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR __Gfirst$[ebp], ecx
$LN4@Unguarded_:
; Line 3115
	jmp	$LN25@Unguarded_
$LN30@Unguarded_:
; Line 3116
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unguarded_partition@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YA?AU?$pair@PAUColumnModeInfo@@PAU1@@0@PAUColumnModeInfo@@0USortInSelectOrder@@@Z ENDP ; std::_Unguarded_partition<ColumnModeInfo *,SortInSelectOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Insertion_sort@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Insertion_sort@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z PROC ; std::_Insertion_sort<ColumnModeInfo *,SortInPositionOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 3025
	push	ebp
	mov	ebp, esp
; Line 3026
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Val_type<ColumnModeInfo *>
	add	esp, 4
	push	eax
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Insertion_sort1@PAUColumnModeInfo@@USortInPositionOrder@@U1@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@0@Z ; std::_Insertion_sort1<ColumnModeInfo *,SortInPositionOrder,ColumnModeInfo>
	add	esp, 16					; 00000010H
; Line 3027
	pop	ebp
	ret	0
??$_Insertion_sort@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z ENDP ; std::_Insertion_sort<ColumnModeInfo *,SortInPositionOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$sort_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z PROC ; std::sort_heap<ColumnModeInfo *,SortInPositionOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2483
	push	ebp
	mov	ebp, esp
; Line 2484
	push	2484					; 000009b4H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAUColumnModeInfo@@@std@@YAXPAUColumnModeInfo@@0PB_WI@Z ; std::_Debug_range<ColumnModeInfo *>
	add	esp, 16					; 00000010H
; Line 2485
	push	2485					; 000009b5H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	lea	edx, DWORD PTR __Pred$[ebp]
	push	edx
	call	??$_Debug_pointer@USortInPositionOrder@@@std@@YAXAAUSortInPositionOrder@@PB_WI@Z ; std::_Debug_pointer<SortInPositionOrder>
	add	esp, 12					; 0000000cH
; Line 2486
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Unchecked@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Unchecked<ColumnModeInfo *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Unchecked@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Unchecked<ColumnModeInfo *>
	add	esp, 4
	push	eax
	call	??$_Debug_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z ; std::_Debug_heap<ColumnModeInfo *,SortInPositionOrder>
	add	esp, 12					; 0000000cH
; Line 2487
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Unchecked@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Unchecked<ColumnModeInfo *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Unchecked@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Unchecked<ColumnModeInfo *>
	add	esp, 4
	push	eax
	call	??$_Sort_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z ; std::_Sort_heap<ColumnModeInfo *,SortInPositionOrder>
	add	esp, 12					; 0000000cH
; Line 2488
	pop	ebp
	ret	0
??$sort_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z ENDP ; std::sort_heap<ColumnModeInfo *,SortInPositionOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$make_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$make_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z PROC ; std::make_heap<ColumnModeInfo *,SortInPositionOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2456
	push	ebp
	mov	ebp, esp
; Line 2457
	push	2457					; 00000999H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAUColumnModeInfo@@@std@@YAXPAUColumnModeInfo@@0PB_WI@Z ; std::_Debug_range<ColumnModeInfo *>
	add	esp, 16					; 00000010H
; Line 2458
	push	2458					; 0000099aH
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	lea	edx, DWORD PTR __Pred$[ebp]
	push	edx
	call	??$_Debug_pointer@USortInPositionOrder@@@std@@YAXAAUSortInPositionOrder@@PB_WI@Z ; std::_Debug_pointer<SortInPositionOrder>
	add	esp, 12					; 0000000cH
; Line 2459
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	cmp	eax, 1
	jle	SHORT $LN2@make_heap
; Line 2461
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Val_type@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Val_type<ColumnModeInfo *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Dist_type@PAUColumnModeInfo@@@std@@YAPAHPAUColumnModeInfo@@@Z ; std::_Dist_type<ColumnModeInfo *>
	add	esp, 4
	push	eax
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Unchecked@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Unchecked<ColumnModeInfo *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked@PAUColumnModeInfo@@@std@@YAPAUColumnModeInfo@@PAU1@@Z ; std::_Unchecked<ColumnModeInfo *>
	add	esp, 4
	push	eax
	call	??$_Make_heap@PAUColumnModeInfo@@HU1@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@PAH0@Z ; std::_Make_heap<ColumnModeInfo *,int,ColumnModeInfo,SortInPositionOrder>
	add	esp, 20					; 00000014H
$LN2@make_heap:
; Line 2462
	pop	ebp
	ret	0
??$make_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z ENDP ; std::make_heap<ColumnModeInfo *,SortInPositionOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unguarded_partition@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YA?AU?$pair@PAUColumnModeInfo@@PAU1@@0@PAUColumnModeInfo@@0USortInPositionOrder@@@Z
_TEXT	SEGMENT
tv216 = -40						; size = 4
tv202 = -36						; size = 4
tv199 = -32						; size = 4
tv160 = -28						; size = 4
tv159 = -24						; size = 4
__Mid$ = -20						; size = 4
__Gfirst$ = -16						; size = 4
__Glast$ = -12						; size = 4
__Plast$ = -8						; size = 4
__Pfirst$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Unguarded_partition@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YA?AU?$pair@PAUColumnModeInfo@@PAU1@@0@PAUColumnModeInfo@@0USortInPositionOrder@@@Z PROC ; std::_Unguarded_partition<ColumnModeInfo *,SortInPositionOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 3063
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
; Line 3064
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	imul	edx, eax, 24
	add	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid$[ebp], edx
; Line 3065
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Median@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@00USortInPositionOrder@@@Z ; std::_Median<ColumnModeInfo *,SortInPositionOrder>
	add	esp, 16					; 00000010H
; Line 3066
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Pfirst$[ebp], ecx
; Line 3067
	mov	edx, DWORD PTR __Pfirst$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __Plast$[ebp], edx
$LN29@Unguarded_:
; Line 3071
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Pfirst$[ebp]
	jae	SHORT $LN27@Unguarded_
	push	3070					; 00000bfeH
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 24					; 00000018H
	push	edx
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	call	??$_Debug_lt_pred@USortInPositionOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInPositionOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInPositionOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN27@Unguarded_
	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??RSortInPositionOrder@@QAE_NAAUColumnModeInfo@@0@Z ; SortInPositionOrder::operator()
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN27@Unguarded_
; Line 3072
	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 24					; 00000018H
	mov	DWORD PTR __Pfirst$[ebp], edx
	jmp	SHORT $LN29@Unguarded_
$LN27@Unguarded_:
; Line 3075
	mov	eax, DWORD PTR __Plast$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	jae	SHORT $LN26@Unguarded_
	push	3074					; 00000c02H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Plast$[ebp]
	push	edx
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	call	??$_Debug_lt_pred@USortInPositionOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInPositionOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInPositionOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN26@Unguarded_
	mov	edx, DWORD PTR __Plast$[ebp]
	push	edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??RSortInPositionOrder@@QAE_NAAUColumnModeInfo@@0@Z ; SortInPositionOrder::operator()
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN26@Unguarded_
; Line 3076
	mov	edx, DWORD PTR __Plast$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __Plast$[ebp], edx
	jmp	SHORT $LN27@Unguarded_
$LN26@Unguarded_:
; Line 3078
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR __Gfirst$[ebp], eax
; Line 3079
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR __Glast$[ebp], ecx
$LN25@Unguarded_:
; Line 3083
	jmp	SHORT $LN23@Unguarded_
$LN22@Unguarded_:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __Gfirst$[ebp], edx
$LN23@Unguarded_:
	mov	eax, DWORD PTR __Gfirst$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	jae	SHORT $LN21@Unguarded_
; Line 3084
	push	3084					; 00000c0cH
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	push	edx
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	call	??$_Debug_lt_pred@USortInPositionOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInPositionOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInPositionOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN20@Unguarded_
	jmp	SHORT $LN19@Unguarded_
$LN20@Unguarded_:
; Line 3086
	mov	edx, DWORD PTR __Pfirst$[ebp]
	push	edx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??RSortInPositionOrder@@QAE_NAAUColumnModeInfo@@0@Z ; SortInPositionOrder::operator()
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN18@Unguarded_
; Line 3087
	jmp	SHORT $LN21@Unguarded_
	jmp	SHORT $LN19@Unguarded_
$LN18@Unguarded_:
; Line 3088
	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR tv159[ebp], edx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR tv160[ebp], eax
	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR __Plast$[ebp], ecx
	mov	edx, DWORD PTR tv159[ebp]
	cmp	edx, DWORD PTR tv160[ebp]
	je	SHORT $LN19@Unguarded_
; Line 3089
	mov	eax, DWORD PTR __Gfirst$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Plast$[ebp]
	sub	ecx, 24					; 00000018H
	push	ecx
	call	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 8
$LN19@Unguarded_:
; Line 3090
	jmp	$LN22@Unguarded_
$LN21@Unguarded_:
	jmp	SHORT $LN15@Unguarded_
$LN14@Unguarded_:
	mov	edx, DWORD PTR __Glast$[ebp]
	sub	edx, 24					; 00000018H
	mov	DWORD PTR __Glast$[ebp], edx
$LN15@Unguarded_:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Glast$[ebp]
	jae	SHORT $LN13@Unguarded_
; Line 3091
	push	3091					; 00000c13H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	sub	edx, 24					; 00000018H
	push	edx
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	call	??$_Debug_lt_pred@USortInPositionOrder@@AAUColumnModeInfo@@AAU2@@std@@YA_NUSortInPositionOrder@@AAUColumnModeInfo@@1PB_WI@Z ; std::_Debug_lt_pred<SortInPositionOrder,ColumnModeInfo &,ColumnModeInfo &>
	add	esp, 20					; 00000014H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@Unguarded_
	jmp	SHORT $LN11@Unguarded_
$LN12@Unguarded_:
; Line 3093
	mov	edx, DWORD PTR __Glast$[ebp]
	sub	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??RSortInPositionOrder@@QAE_NAAUColumnModeInfo@@0@Z ; SortInPositionOrder::operator()
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN10@Unguarded_
; Line 3094
	jmp	SHORT $LN13@Unguarded_
	jmp	SHORT $LN11@Unguarded_
$LN10@Unguarded_:
; Line 3095
	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 24					; 00000018H
	mov	DWORD PTR __Pfirst$[ebp], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	sub	eax, 24					; 00000018H
	cmp	DWORD PTR __Pfirst$[ebp], eax
	je	SHORT $LN11@Unguarded_
; Line 3096
	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	push	edx
	call	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 8
$LN11@Unguarded_:
; Line 3097
	jmp	$LN14@Unguarded_
$LN13@Unguarded_:
	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jne	SHORT $LN7@Unguarded_
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	jne	SHORT $LN7@Unguarded_
; Line 3098
	lea	edx, DWORD PTR __Plast$[ebp]
	push	edx
	lea	eax, DWORD PTR __Pfirst$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0AAPAUColumnModeInfo@@AAPAU0@X@?$pair@PAUColumnModeInfo@@PAU1@@std@@QAE@AAPAUColumnModeInfo@@0@Z ; std::pair<ColumnModeInfo *,ColumnModeInfo *>::pair<ColumnModeInfo *,ColumnModeInfo *><ColumnModeInfo * &,ColumnModeInfo * &,void>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN30@Unguarded_
$LN7@Unguarded_:
; Line 3100
	mov	ecx, DWORD PTR __Glast$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jne	SHORT $LN6@Unguarded_
; Line 3102
	mov	edx, DWORD PTR __Plast$[ebp]
	cmp	edx, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN5@Unguarded_
; Line 3103
	mov	eax, DWORD PTR __Plast$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	push	ecx
	call	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 8
$LN5@Unguarded_:
; Line 3104
	mov	edx, DWORD PTR __Plast$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __Plast$[ebp], edx
; Line 3105
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR tv199[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR tv202[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __Pfirst$[ebp], edx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR __Gfirst$[ebp], eax
	mov	ecx, DWORD PTR tv199[ebp]
	push	ecx
	mov	edx, DWORD PTR tv202[ebp]
	push	edx
	call	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 8
	jmp	SHORT $LN4@Unguarded_
$LN6@Unguarded_:
; Line 3107
	mov	eax, DWORD PTR __Gfirst$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	jne	SHORT $LN3@Unguarded_
; Line 3109
	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 24					; 00000018H
	mov	DWORD PTR __Glast$[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 24					; 00000018H
	mov	DWORD PTR __Pfirst$[ebp], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __Pfirst$[ebp]
	je	SHORT $LN2@Unguarded_
; Line 3110
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	push	edx
	call	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 8
$LN2@Unguarded_:
; Line 3111
	mov	eax, DWORD PTR __Plast$[ebp]
	sub	eax, 24					; 00000018H
	mov	DWORD PTR __Plast$[ebp], eax
	mov	ecx, DWORD PTR __Plast$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	push	edx
	call	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 8
; Line 3113
	jmp	SHORT $LN4@Unguarded_
$LN3@Unguarded_:
; Line 3114
	mov	eax, DWORD PTR __Glast$[ebp]
	sub	eax, 24					; 00000018H
	mov	DWORD PTR __Glast$[ebp], eax
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR tv216[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	push	edx
	mov	eax, DWORD PTR tv216[ebp]
	push	eax
	call	??$iter_swap@PAUColumnModeInfo@@PAU1@@std@@YAXPAUColumnModeInfo@@0@Z ; std::iter_swap<ColumnModeInfo *,ColumnModeInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR __Gfirst$[ebp], ecx
$LN4@Unguarded_:
; Line 3115
	jmp	$LN25@Unguarded_
$LN30@Unguarded_:
; Line 3116
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unguarded_partition@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YA?AU?$pair@PAUColumnModeInfo@@PAU1@@0@PAUColumnModeInfo@@0USortInPositionOrder@@@Z ENDP ; std::_Unguarded_partition<ColumnModeInfo *,SortInPositionOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__File$ = 32						; size = 4
__Line$ = 36						; size = 4
___formal$ = 40						; size = 1
??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 570
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 571
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Debug_rang
; Line 573
	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > > >
	add	esp, 12					; 0000000cH
; Line 574
	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > > >
	add	esp, 12					; 0000000cH
; Line 575
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator<
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Debug_rang
; Line 576
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_rang:
; Line 578
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > > >
; Function compile flags: /Odtp
;	COMDAT ??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z PROC ; std::_Iter_cat<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 405
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 407
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 408
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z ENDP ; std::_Iter_cat<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xlocnum
; Line 155
	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xlocnum
; Line 155
	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@YAXPAUColumnModeInfo@@0AAU?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@YAXPAUColumnModeInfo@@0AAU?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<ColumnModeInfo> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 80
	push	ebp
	mov	ebp, esp
; Line 81
	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra
; Line 82
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@UColumnModeInfo@@@?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@QAEXPAUColumnModeInfo@@@Z ; std::_Wrap_alloc<std::allocator<ColumnModeInfo> >::destroy<ColumnModeInfo>
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:
; Line 83
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@YAXPAUColumnModeInfo@@0AAU?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<ColumnModeInfo> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ptr_cat@UColumnModeInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUColumnModeInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UColumnModeInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUColumnModeInfo@@0@Z PROC ; std::_Ptr_cat<ColumnModeInfo,ColumnModeInfo>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 444
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 446
	mov	al, BYTE PTR __Cat$[ebp]
; Line 447
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@UColumnModeInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUColumnModeInfo@@0@Z ENDP ; std::_Ptr_cat<ColumnModeInfo,ColumnModeInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 492
	push	ebp
	mov	ebp, esp
; Line 495
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z ; std::_Rechecked<int *,int *>
	add	esp, 8
	mov	eax, DWORD PTR [eax]
; Line 496
	pop	ebp
	ret	0
??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 728
	push	ebp
	mov	ebp, esp
; Line 730
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
; Line 731
	pop	ebp
	ret	0
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
; Line 724
	pop	ebp
	ret	0
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 89
	push	ebp
	mov	ebp, esp
; Line 90
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z PROC ; std::_Ptr_cat<int,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 444
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 446
	mov	al, BYTE PTR __Cat$[ebp]
; Line 447
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ENDP ; std::_Ptr_cat<int,int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 728
	push	ebp
	mov	ebp, esp
; Line 730
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>
; Line 731
	pop	ebp
	ret	0
??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z	; std::forward<wchar_t * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>
; Line 724
	pop	ebp
	ret	0
??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z PROC		; std::forward<wchar_t * &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ENDP		; std::forward<wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 728
	push	ebp
	mov	ebp, esp
; Line 730
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>
; Line 731
	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
; Line 724
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@HABH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHABH@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@HABH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHABH@Z PROC ; std::allocator_traits<std::allocator<int> >::construct<int,int const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABH@std@@YAABHABH@Z		; std::forward<int const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@H@std@@QAEXPAHABH@Z ; std::allocator<int>::construct
; Line 724
	pop	ebp
	ret	0
??$construct@HABH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHABH@Z ENDP ; std::allocator_traits<std::allocator<int> >::construct<int,int const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@ABH@std@@YAABHABH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABH@std@@YAABHABH@Z PROC			; std::forward<int const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@ABH@std@@YAABHABH@Z ENDP			; std::forward<int const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@HAAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHAAH@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@HAAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHAAH@Z PROC ; std::allocator_traits<std::allocator<int> >::construct<int,int &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAH@std@@YAAAHAAH@Z		; std::forward<int &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z ; std::allocator<int>::construct<int,int &>
; Line 724
	pop	ebp
	ret	0
??$construct@HAAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHAAH@Z ENDP ; std::allocator_traits<std::allocator<int> >::construct<int,int &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@AAH@std@@YAAAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAH@std@@YAAAHAAH@Z PROC			; std::forward<int &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@AAH@std@@YAAAHAAH@Z ENDP			; std::forward<int &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Sort@PAUColumnModeInfo@@HUSortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0HUSortInSelectOrder@@@Z
_TEXT	SEGMENT
__Mid$1 = -12						; size = 8
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort@PAUColumnModeInfo@@HUSortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0HUSortInSelectOrder@@@Z PROC ; std::_Sort<ColumnModeInfo *,int,SortInSelectOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 3122
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
$LN7@Sort:
; Line 3124
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR __Count$[ebp], eax
	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	$LN6@Sort
	cmp	DWORD PTR __Ideal$[ebp], 0
	jle	$LN6@Sort
; Line 3127
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Mid$1[ebp]
	push	edx
	call	??$_Unguarded_partition@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YA?AU?$pair@PAUColumnModeInfo@@PAU1@@0@PAUColumnModeInfo@@0USortInSelectOrder@@@Z ; std::_Unguarded_partition<ColumnModeInfo *,SortInSelectOrder>
	add	esp, 16					; 00000010H
; Line 3128
	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Ideal$[ebp], eax
	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR __Ideal$[ebp]
	mov	DWORD PTR __Ideal$[ebp], eax
; Line 3130
	mov	eax, DWORD PTR __Mid$1[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	ecx, eax
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __Mid$1[ebp+4]
	cdq
	mov	esi, 24					; 00000018H
	idiv	esi
	cmp	ecx, eax
	jge	SHORT $LN5@Sort
; Line 3132
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ideal$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$1[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Sort@PAUColumnModeInfo@@HUSortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0HUSortInSelectOrder@@@Z ; std::_Sort<ColumnModeInfo *,int,SortInSelectOrder>
	add	esp, 16					; 00000010H
; Line 3133
	mov	eax, DWORD PTR __Mid$1[ebp+4]
	mov	DWORD PTR __First$[ebp], eax
; Line 3135
	jmp	SHORT $LN4@Sort
$LN5@Sort:
; Line 3137
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ideal$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$1[ebp+4]
	push	ecx
	call	??$_Sort@PAUColumnModeInfo@@HUSortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0HUSortInSelectOrder@@@Z ; std::_Sort<ColumnModeInfo *,int,SortInSelectOrder>
	add	esp, 16					; 00000010H
; Line 3138
	mov	edx, DWORD PTR __Mid$1[ebp]
	mov	DWORD PTR __Last$[ebp], edx
$LN4@Sort:
; Line 3140
	jmp	$LN7@Sort
$LN6@Sort:
; Line 3142
	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	SHORT $LN3@Sort
; Line 3144
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$make_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z ; std::make_heap<ColumnModeInfo *,SortInSelectOrder>
	add	esp, 12					; 0000000cH
; Line 3145
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$sort_heap@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z ; std::sort_heap<ColumnModeInfo *,SortInSelectOrder>
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN8@Sort
$LN3@Sort:
; Line 3147
	cmp	DWORD PTR __Count$[ebp], 1
	jle	SHORT $LN8@Sort
; Line 3148
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Insertion_sort@PAUColumnModeInfo@@USortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0USortInSelectOrder@@@Z ; std::_Insertion_sort<ColumnModeInfo *,SortInSelectOrder>
	add	esp, 12					; 0000000cH
$LN8@Sort:
; Line 3149
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort@PAUColumnModeInfo@@HUSortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0HUSortInSelectOrder@@@Z ENDP ; std::_Sort<ColumnModeInfo *,int,SortInSelectOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@USortInSelectOrder@@@std@@YAXAAUSortInSelectOrder@@PB_WI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Debug_pointer@USortInSelectOrder@@@std@@YAXAAUSortInSelectOrder@@PB_WI@Z PROC ; std::_Debug_pointer<SortInSelectOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 540
	push	ebp
	mov	ebp, esp
; Line 541
	pop	ebp
	ret	0
??$_Debug_pointer@USortInSelectOrder@@@std@@YAXAAUSortInSelectOrder@@PB_WI@Z ENDP ; std::_Debug_pointer<SortInSelectOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Sort@PAUColumnModeInfo@@HUSortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0HUSortInPositionOrder@@@Z
_TEXT	SEGMENT
__Mid$1 = -12						; size = 8
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort@PAUColumnModeInfo@@HUSortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0HUSortInPositionOrder@@@Z PROC ; std::_Sort<ColumnModeInfo *,int,SortInPositionOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 3122
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
$LN7@Sort:
; Line 3124
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR __Count$[ebp], eax
	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	$LN6@Sort
	cmp	DWORD PTR __Ideal$[ebp], 0
	jle	$LN6@Sort
; Line 3127
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Mid$1[ebp]
	push	edx
	call	??$_Unguarded_partition@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YA?AU?$pair@PAUColumnModeInfo@@PAU1@@0@PAUColumnModeInfo@@0USortInPositionOrder@@@Z ; std::_Unguarded_partition<ColumnModeInfo *,SortInPositionOrder>
	add	esp, 16					; 00000010H
; Line 3128
	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Ideal$[ebp], eax
	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR __Ideal$[ebp]
	mov	DWORD PTR __Ideal$[ebp], eax
; Line 3130
	mov	eax, DWORD PTR __Mid$1[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	ecx, eax
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __Mid$1[ebp+4]
	cdq
	mov	esi, 24					; 00000018H
	idiv	esi
	cmp	ecx, eax
	jge	SHORT $LN5@Sort
; Line 3132
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ideal$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$1[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Sort@PAUColumnModeInfo@@HUSortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0HUSortInPositionOrder@@@Z ; std::_Sort<ColumnModeInfo *,int,SortInPositionOrder>
	add	esp, 16					; 00000010H
; Line 3133
	mov	eax, DWORD PTR __Mid$1[ebp+4]
	mov	DWORD PTR __First$[ebp], eax
; Line 3135
	jmp	SHORT $LN4@Sort
$LN5@Sort:
; Line 3137
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ideal$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$1[ebp+4]
	push	ecx
	call	??$_Sort@PAUColumnModeInfo@@HUSortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0HUSortInPositionOrder@@@Z ; std::_Sort<ColumnModeInfo *,int,SortInPositionOrder>
	add	esp, 16					; 00000010H
; Line 3138
	mov	edx, DWORD PTR __Mid$1[ebp]
	mov	DWORD PTR __Last$[ebp], edx
$LN4@Sort:
; Line 3140
	jmp	$LN7@Sort
$LN6@Sort:
; Line 3142
	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	SHORT $LN3@Sort
; Line 3144
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$make_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z ; std::make_heap<ColumnModeInfo *,SortInPositionOrder>
	add	esp, 12					; 0000000cH
; Line 3145
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$sort_heap@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z ; std::sort_heap<ColumnModeInfo *,SortInPositionOrder>
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN8@Sort
$LN3@Sort:
; Line 3147
	cmp	DWORD PTR __Count$[ebp], 1
	jle	SHORT $LN8@Sort
; Line 3148
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Insertion_sort@PAUColumnModeInfo@@USortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0USortInPositionOrder@@@Z ; std::_Insertion_sort<ColumnModeInfo *,SortInPositionOrder>
	add	esp, 12					; 0000000cH
$LN8@Sort:
; Line 3149
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort@PAUColumnModeInfo@@HUSortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0HUSortInPositionOrder@@@Z ENDP ; std::_Sort<ColumnModeInfo *,int,SortInPositionOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@YAPAUColumnModeInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Iter$ = 8						; size = 12
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@YAPAUColumnModeInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 395
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@YAPAUColumnModeInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 396
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEPAUColumnModeInfo@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Unchecked
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T2[ebp]
; Line 397
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@YAPAUColumnModeInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Iter$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@YAPAUColumnModeInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@YAPAUColumnModeInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@YAPAUColumnModeInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@USortInPositionOrder@@@std@@YAXAAUSortInPositionOrder@@PB_WI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Debug_pointer@USortInPositionOrder@@@std@@YAXAAUSortInPositionOrder@@PB_WI@Z PROC ; std::_Debug_pointer<SortInPositionOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 540
	push	ebp
	mov	ebp, esp
; Line 541
	pop	ebp
	ret	0
??$_Debug_pointer@USortInPositionOrder@@@std@@YAXAAUSortInPositionOrder@@PB_WI@Z ENDP ; std::_Debug_pointer<SortInPositionOrder>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WI@Z
_TEXT	SEGMENT
tv140 = -40						; size = 4
$T2 = -36						; size = 4
tv137 = -32						; size = 4
$T3 = -28						; size = 4
tv144 = -24						; size = 4
tv143 = -20						; size = 4
$T4 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__File$ = 32						; size = 4
__Line$ = 36						; size = 4
??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WI@Z PROC ; std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 583
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 584
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z ; std::_Iter_cat<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > > >
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv143[ebp], eax
	mov	ecx, DWORD PTR tv143[ebp]
	mov	DWORD PTR tv137[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv144[ebp], eax
	mov	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR tv140[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > > >
	add	esp, 36					; 00000024H
; Line 585
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WI@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WI@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WI@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WI@Z$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WI@Z ENDP ; std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > > >
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$di	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$di	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$di	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@_W@std@@YAPA_WIPA_W@Z PROC			; std::_Allocate<wchar_t>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], 2147483647	; 7fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 1
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@_W@std@@YAPA_WIPA_W@Z ENDP			; std::_Allocate<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Allocate@H@std@@YAPAHIPAH@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@H@std@@YAPAHIPAH@Z PROC			; std::_Allocate<int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@H@std@@YAPAHIPAH@Z ENDP			; std::_Allocate<int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z PROC ; std::_Allocate<std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@YAXPAUColumnModeInfo@@0AAU?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@YAXPAUColumnModeInfo@@0AAU?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<ColumnModeInfo> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 95
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 96
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@UColumnModeInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUColumnModeInfo@@0@Z ; std::_Ptr_cat<ColumnModeInfo,ColumnModeInfo>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@YAXPAUColumnModeInfo@@0AAU?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<ColumnModeInfo> > >
	add	esp, 16					; 00000010H
; Line 97
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@YAXPAUColumnModeInfo@@0AAU?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<ColumnModeInfo> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Umove<int *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1644
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1646
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
; Line 1648
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
	add	esp, 16					; 00000010H
; Line 1649
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Umove<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 877
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 879
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
	add	esp, 8
; Line 880
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 605
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 608
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv74 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 598
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 600
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 601
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
	add	esp, 8
; Line 579
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ PROC	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ENDP	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 95
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 96
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
	add	esp, 16					; 00000010H
; Line 97
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$addressof@_W@std@@YAPA_WAA_W@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@_W@std@@YAPA_WAA_W@Z PROC			; std::addressof<wchar_t>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; Line 92
	push	ebp
	mov	ebp, esp
; Line 95
	mov	eax, DWORD PTR __Val$[ebp]
; Line 96
	pop	ebp
	ret	0
??$addressof@_W@std@@YAPA_WAA_W@Z ENDP			; std::addressof<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 877
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 879
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>
	add	esp, 8
; Line 880
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z	; std::forward<wchar_t * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; Line 92
	push	ebp
	mov	ebp, esp
; Line 95
	mov	eax, DWORD PTR __Val$[ebp]
; Line 96
	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 877
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 879
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8
; Line 880
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@HABH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHABH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@HABH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHABH@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABH@std@@YAABHABH@Z		; std::forward<int const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@HABH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHABH@Z ; std::allocator_traits<std::allocator<int> >::construct<int,int const &>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@HABH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHABH@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int const &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@HAAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHAAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@HAAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHAAH@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAH@std@@YAAAHAAH@Z		; std::forward<int &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@HAAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHAAH@Z ; std::allocator_traits<std::allocator<int> >::construct<int,int &>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@HAAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHAAH@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$addressof@$$CBH@std@@YAPBHABH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBH@std@@YAPBHABH@Z PROC			; std::addressof<int const >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; Line 92
	push	ebp
	mov	ebp, esp
; Line 95
	mov	eax, DWORD PTR __Val$[ebp]
; Line 96
	pop	ebp
	ret	0
??$addressof@$$CBH@std@@YAPBHABH@Z ENDP			; std::addressof<int const >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@XZ
__ehhandler$??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
; Function compile flags: /Odtp
;	COMDAT ??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >::~reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@XZ
__ehhandler$??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >::~reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
; Function compile flags: /Odtp
;	COMDAT ??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z
_TEXT	SEGMENT
tv93 = -32						; size = 4
tv92 = -28						; size = 4
$T2 = -24						; size = 4
tv95 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 12
??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z PROC ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 1041
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv95[ebp], eax
	mov	ecx, DWORD PTR tv95[ebp]
	mov	DWORD PTR tv92[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >
	mov	DWORD PTR tv93[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 1042
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Right$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z$0:
	lea	ecx, DWORD PTR __Right$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z$1:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@XZ
__ehhandler$??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z ENDP ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@ABV01@@Z PROC ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@ABV01@@Z ENDP ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@XZ PROC ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >::~_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@XZ ENDP ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >::~_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >
; Function compile flags: /Odtp
;	COMDAT ??D?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QBEAAHXZ
_TEXT	SEGMENT
__Tmp$ = -32						; size = 12
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??D?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QBEAAHXZ PROC ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >::operator*, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 834
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??D?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QBEAAHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 835
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 836
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??F?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator--
	mov	ecx, eax
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T2[ebp]
; Line 837
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??D?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QBEAAHXZ$0:
	lea	ecx, DWORD PTR __Tmp$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??D?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QBEAAHXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??D?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QBEAAHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??D?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QBEAAHXZ ENDP ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >::operator*
; Function compile flags: /Odtp
;	COMDAT ??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 12
??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z PROC ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 818
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 819
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Right$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z$0:
	lea	ecx, DWORD PTR __Right$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z ENDP ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
; Function compile flags: /Odtp
;	COMDAT ??F?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??F?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator--, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 346
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 347
	mov	ecx, DWORD PTR _this$[ebp]
	call	??F?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator--
; Line 348
	mov	eax, DWORD PTR _this$[ebp]
; Line 349
	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator--
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 323
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 324
	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEABHXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*
; Line 325
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 306
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 307
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
; Function compile flags: /Odtp
;	COMDAT ??F?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??F?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator--, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 124
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN1@operator
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR [eax+4]
	ja	SHORT $LN2@operator
$LN1@operator:
; Line 130
	push	130					; 00000082H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EE@OEIJAKGE@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
; Line 131
	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN5@operator
	xor	ecx, ecx
	jne	SHORT $LN6@operator
$LN5@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	131					; 00000083H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN6@operator
	int	3
$LN6@operator:
	push	0
	push	131					; 00000083H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1MG@BMOEGPOA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:
; Line 141
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 142
	mov	eax, DWORD PTR _this$[ebp]
; Line 143
	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator--
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEABHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEABHXZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 65
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN1@operator
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR [eax+4]
	jb	SHORT $LN1@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	ja	SHORT $LN2@operator
$LN1@operator:
; Line 72
	push	72					; 00000048H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
; Line 73
	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN5@operator
	xor	ecx, ecx
	jne	SHORT $LN6@operator
$LN5@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	73					; 00000049H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN6@operator
	int	3
$LN6@operator:
	push	0
	push	73					; 00000049H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1ME@LLCFNFIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:
; Line 86
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 87
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEABHXZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 47
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 48
	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
; Line 49
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z ENDP ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z
_TEXT	SEGMENT
tv187 = -68						; size = 4
$T2 = -64						; size = 4
tv183 = -60						; size = 4
$T3 = -56						; size = 4
tv179 = -52						; size = 4
$T4 = -48						; size = 4
tv176 = -44						; size = 4
$T5 = -40						; size = 4
tv188 = -36						; size = 4
tv196 = -32						; size = 4
tv184 = -28						; size = 4
tv194 = -24						; size = 4
tv192 = -20						; size = 4
tv191 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Pred$ = 32						; size = 1
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >,SortInSelectOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 3154
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 3155
	push	3155					; 00000c53H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T5[ebp], esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv191[ebp], eax
	mov	ecx, DWORD PTR tv191[ebp]
	mov	DWORD PTR tv176[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T4[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv192[ebp], eax
	mov	eax, DWORD PTR tv192[ebp]
	mov	DWORD PTR tv179[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WI@Z ; std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > > >
	add	esp, 32					; 00000020H
; Line 3156
	push	3156					; 00000c54H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	lea	ecx, DWORD PTR __Pred$[ebp]
	push	ecx
	call	??$_Debug_pointer@USortInSelectOrder@@@std@@YAXAAUSortInSelectOrder@@PB_WI@Z ; std::_Debug_pointer<SortInSelectOrder>
	add	esp, 12					; 0000000cH
; Line 3157
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator-
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv194[ebp], eax
	mov	eax, DWORD PTR tv194[ebp]
	mov	DWORD PTR tv183[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@YAPAUColumnModeInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv184[ebp], eax
	mov	ecx, DWORD PTR tv184[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv196[ebp], eax
	mov	eax, DWORD PTR tv196[ebp]
	mov	DWORD PTR tv187[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@YAPAUColumnModeInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv188[ebp], eax
	mov	ecx, DWORD PTR tv188[ebp]
	push	ecx
	call	??$_Sort@PAUColumnModeInfo@@HUSortInSelectOrder@@@std@@YAXPAUColumnModeInfo@@0HUSortInSelectOrder@@@Z ; std::_Sort<ColumnModeInfo *,int,SortInSelectOrder>
	add	esp, 16					; 00000010H
; Line 3158
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z$2:
	mov	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z$3:
	mov	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z$4:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z$5:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >,SortInSelectOrder>
; Function compile flags: /Odtp
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z
_TEXT	SEGMENT
tv187 = -68						; size = 4
$T2 = -64						; size = 4
tv183 = -60						; size = 4
$T3 = -56						; size = 4
tv179 = -52						; size = 4
$T4 = -48						; size = 4
tv176 = -44						; size = 4
$T5 = -40						; size = 4
tv188 = -36						; size = 4
tv196 = -32						; size = 4
tv184 = -28						; size = 4
tv194 = -24						; size = 4
tv192 = -20						; size = 4
tv191 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Pred$ = 32						; size = 1
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >,SortInPositionOrder>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 3154
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 3155
	push	3155					; 00000c53H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T5[ebp], esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv191[ebp], eax
	mov	ecx, DWORD PTR tv191[ebp]
	mov	DWORD PTR tv176[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T4[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv192[ebp], eax
	mov	eax, DWORD PTR tv192[ebp]
	mov	DWORD PTR tv179[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0PB_WI@Z ; std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > > >
	add	esp, 32					; 00000020H
; Line 3156
	push	3156					; 00000c54H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	lea	ecx, DWORD PTR __Pred$[ebp]
	push	ecx
	call	??$_Debug_pointer@USortInPositionOrder@@@std@@YAXAAUSortInPositionOrder@@PB_WI@Z ; std::_Debug_pointer<SortInPositionOrder>
	add	esp, 12					; 0000000cH
; Line 3157
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator-
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv194[ebp], eax
	mov	eax, DWORD PTR tv194[ebp]
	mov	DWORD PTR tv183[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@YAPAUColumnModeInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv184[ebp], eax
	mov	ecx, DWORD PTR tv184[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv196[ebp], eax
	mov	eax, DWORD PTR tv196[ebp]
	mov	DWORD PTR tv187[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@YAPAUColumnModeInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv188[ebp], eax
	mov	ecx, DWORD PTR tv188[ebp]
	push	ecx
	call	??$_Sort@PAUColumnModeInfo@@HUSortInPositionOrder@@@std@@YAXPAUColumnModeInfo@@0HUSortInPositionOrder@@@Z ; std::_Sort<ColumnModeInfo *,int,SortInPositionOrder>
	add	esp, 16					; 00000010H
; Line 3158
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z$2:
	mov	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z$3:
	mov	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z$4:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z$5:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >,SortInPositionOrder>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
; Function compile flags: /Odtp
;	COMDAT ??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator-, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 382
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 383
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator-
; Line 384
	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator-
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEPAUColumnModeInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEPAUColumnModeInfo@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Unchecked, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 318
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 319
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 320
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEPAUColumnModeInfo@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 306
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 307
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
; Function compile flags: /Odtp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Compat, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
; Line 238
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN1@Compat
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	je	SHORT $LN3@Compat
$LN1@Compat:
; Line 240
	push	240					; 000000f0H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
; Line 241
	mov	eax, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
	test	eax, eax
	je	SHORT $LN5@Compat
	xor	ecx, ecx
	jne	SHORT $LN6@Compat
$LN5@Compat:
	push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	241					; 000000f1H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN6@Compat
	int	3
$LN6@Compat:
	push	0
	push	241					; 000000f1H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1OC@LDKFIGAP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN3@Compat:
; Line 243
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator<, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 214
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 215
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Compat
; Line 216
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]
; Line 217
	mov	esp, ebp
	pop	ebp
	ret	4
??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator<
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator!=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 209
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 210
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]
; Line 211
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator==, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 204
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Compat
; Line 205
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]
; Line 206
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator-, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 192
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 193
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Compat
; Line 194
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+8]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
; Line 195
	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::operator-
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 47
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 48
	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
; Line 49
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC ; std::_Iterator012<std::random_access_iterator_tag,ColumnModeInfo,int,ColumnModeInfo const *,ColumnModeInfo const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,ColumnModeInfo,int,ColumnModeInfo const *,ColumnModeInfo const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ENDP ; std::_Iterator012<std::random_access_iterator_tag,ColumnModeInfo,int,ColumnModeInfo const *,ColumnModeInfo const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,ColumnModeInfo,int,ColumnModeInfo const *,ColumnModeInfo const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??1?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,ColumnModeInfo,int,ColumnModeInfo const *,ColumnModeInfo const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,ColumnModeInfo,int,ColumnModeInfo const *,ColumnModeInfo const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,ColumnModeInfo,int,ColumnModeInfo const *,ColumnModeInfo const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,ColumnModeInfo,int,ColumnModeInfo const *,ColumnModeInfo const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,ColumnModeInfo,int,ColumnModeInfo const *,ColumnModeInfo const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,ColumnModeInfo,int,ColumnModeInfo const *,ColumnModeInfo const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@UColumnModeInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,ColumnModeInfo,int,ColumnModeInfo const *,ColumnModeInfo const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,ColumnModeInfo,int,ColumnModeInfo const *,ColumnModeInfo const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1622
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1623
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Tidy
; Line 1625
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 1626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@IAEXPAUColumnModeInfo@@0@Z ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::_Destroy
; Line 1628
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<ColumnModeInfo,std::allocator<ColumnModeInfo> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@QAEXPAUColumnModeInfo@@I@Z ; std::_Wrap_alloc<std::allocator<ColumnModeInfo> >::deallocate
; Line 1629
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 1630
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 1631
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN2@Tidy:
; Line 1633
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@IAEXPAUColumnModeInfo@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@IAEXPAUColumnModeInfo@@0@Z PROC ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1565
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1566
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<ColumnModeInfo,std::allocator<ColumnModeInfo> > >::_Getal
; Line 1567
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@YAXPAUColumnModeInfo@@0AAU?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<ColumnModeInfo> > >
	add	esp, 12					; 0000000cH
; Line 1568
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@IAEXPAUColumnModeInfo@@0@Z ENDP ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?end@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::end, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1034
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?end@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1035
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1036
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?end@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@end
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
$LN4@end:
	ret	0
__ehhandler$?end@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?end@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?end@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::end
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::begin, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1024
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?begin@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1025
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@PAUColumnModeInfo@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1026
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?begin@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@begin
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
$LN4@begin:
	ret	0
__ehhandler$?begin@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?begin@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::begin
; Function compile flags: /Odtp
;	COMDAT ??1?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::~vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 944
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 945
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@IAEXXZ ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::_Tidy
; Line 946
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<ColumnModeInfo,std::allocator<ColumnModeInfo> > >::~_Vector_alloc<0,std::_Vec_base_types<ColumnModeInfo,std::allocator<ColumnModeInfo> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<ColumnModeInfo,std::allocator<ColumnModeInfo> > >::~_Vector_alloc<0,std::_Vec_base_types<ColumnModeInfo,std::allocator<ColumnModeInfo> > >
__ehhandler$??1?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::~vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >
; Function compile flags: /Odtp
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<ColumnModeInfo,std::allocator<ColumnModeInfo> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 641
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 642
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<ColumnModeInfo> >::_Wrap_alloc<std::allocator<ColumnModeInfo> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 643
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<ColumnModeInfo,std::allocator<ColumnModeInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<ColumnModeInfo,std::allocator<ColumnModeInfo> > >::_Free_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 630
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 632
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 633
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 634
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
; Line 635
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
; Line 636
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 637
	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<ColumnModeInfo,std::allocator<ColumnModeInfo> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<ColumnModeInfo,std::allocator<ColumnModeInfo> > >::~_Vector_alloc<0,std::_Vec_base_types<ColumnModeInfo,std::allocator<ColumnModeInfo> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 607
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 608
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<ColumnModeInfo,std::allocator<ColumnModeInfo> > >::_Free_proxy
; Line 609
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<ColumnModeInfo,std::allocator<ColumnModeInfo> > >::~_Vector_alloc<0,std::_Vec_base_types<ColumnModeInfo,std::allocator<ColumnModeInfo> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<ColumnModeInfo> >::~_Vector_val<std::_Simple_types<ColumnModeInfo> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??1?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<ColumnModeInfo> >::~_Vector_val<std::_Simple_types<ColumnModeInfo> >
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@QAEXPAUColumnModeInfo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@QAEXPAUColumnModeInfo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<ColumnModeInfo> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@UColumnModeInfo@@@std@@QAEXPAUColumnModeInfo@@I@Z ; std::allocator<ColumnModeInfo>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@QAEXPAUColumnModeInfo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<ColumnModeInfo> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<ColumnModeInfo> >::_Wrap_alloc<std::allocator<ColumnModeInfo> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@UColumnModeInfo@@@std@@QAE@XZ ; std::allocator<ColumnModeInfo>::allocator<ColumnModeInfo>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<ColumnModeInfo> >::_Wrap_alloc<std::allocator<ColumnModeInfo> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@UColumnModeInfo@@@std@@QAEXPAUColumnModeInfo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UColumnModeInfo@@@std@@QAEXPAUColumnModeInfo@@I@Z PROC ; std::allocator<ColumnModeInfo>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UColumnModeInfo@@@std@@QAEXPAUColumnModeInfo@@I@Z ENDP ; std::allocator<ColumnModeInfo>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@UColumnModeInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UColumnModeInfo@@@std@@QAE@XZ PROC	; std::allocator<ColumnModeInfo>::allocator<ColumnModeInfo>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UColumnModeInfo@@@std@@QAE@XZ ENDP	; std::allocator<ColumnModeInfo>::allocator<ColumnModeInfo>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?execute@ScintillaEditView@@QBEJIIJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Msg$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?execute@ScintillaEditView@@QBEJIIJ@Z PROC		; ScintillaEditView::execute, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\scitillacomponent\scintillaeditview.h
; Line 240
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 241
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Msg$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 16					; 00000010H
; Line 242
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?execute@ScintillaEditView@@QBEJIIJ@Z ENDP		; ScintillaEditView::execute
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??RSortInPositionOrder@@QAE_NAAUColumnModeInfo@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_l$ = 8							; size = 4
_r$ = 12						; size = 4
??RSortInPositionOrder@@QAE_NAAUColumnModeInfo@@0@Z PROC ; SortInPositionOrder::operator(), COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\scitillacomponent\scintillaeditview.h
; Line 185
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv67[ebp]
; Line 187
	mov	esp, ebp
	pop	ebp
	ret	8
??RSortInPositionOrder@@QAE_NAAUColumnModeInfo@@0@Z ENDP ; SortInPositionOrder::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??RSortInSelectOrder@@QAE_NAAUColumnModeInfo@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_l$ = 8							; size = 4
_r$ = 12						; size = 4
??RSortInSelectOrder@@QAE_NAAUColumnModeInfo@@0@Z PROC	; SortInSelectOrder::operator(), COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\scitillacomponent\scintillaeditview.h
; Line 176
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv67[ebp]
; Line 178
	mov	esp, ebp
	pop	ebp
	ret	8
??RSortInSelectOrder@@QAE_NAAUColumnModeInfo@@0@Z ENDP	; SortInSelectOrder::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
; Line 66
	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
; Line 59
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Ignore@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Ignore@std@@QAE@XZ PROC				; std::_Ignore::_Ignore, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 51
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Ignore@std@@QAE@XZ ENDP				; std::_Ignore::_Ignore
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getEnableThemeDlgTexture@NppParameters@@QBEP6GJPAUHWND__@@IIJ@ZXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getEnableThemeDlgTexture@NppParameters@@QBEP6GJPAUHWND__@@IIJ@ZXZ PROC ; NppParameters::getEnableThemeDlgTexture, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\parameters.h
; Line 1436
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+116988]
	mov	esp, ebp
	pop	ebp
	ret	0
?getEnableThemeDlgTexture@NppParameters@@QBEP6GJPAUHWND__@@IIJ@ZXZ ENDP ; NppParameters::getEnableThemeDlgTexture
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getInstance@NppParameters@@SAPAV1@XZ
_TEXT	SEGMENT
?getInstance@NppParameters@@SAPAV1@XZ PROC		; NppParameters::getInstance, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\parameters.h
; Line 1155
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?_pSelf@NppParameters@@0PAV1@A ; NppParameters::_pSelf
	pop	ebp
	ret	0
?getInstance@NppParameters@@SAPAV1@XZ ENDP		; NppParameters::getInstance
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -20						; size = 4
__Pnext$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1764
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1765
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1766
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
	mov	DWORD PTR __Pnext$[ebp], eax
; Line 1767
	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:
; Line 1768
	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_ran
; Line 1769
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN3@Orphan_ran
$LN2@Orphan_ran:
; Line 1770
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax
; Line 1771
	jmp	SHORT $LN1@Orphan_ran
$LN3@Orphan_ran:
; Line 1773
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont
; Line 1774
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN1@Orphan_ran:
; Line 1775
	jmp	SHORT $LN5@Orphan_ran
$LN6@Orphan_ran:
; Line 1776
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range
; Function compile flags: /Odtp
;	COMDAT ?_Xran@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ PROC	; std::vector<int,std::allocator<int> >::_Xran, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1758
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1759
	push	OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:
; Line 1760
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1753
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1754
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:
; Line 1755
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1622
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1623
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Tidy
; Line 1625
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 1626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
; Line 1628
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate
; Line 1629
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 1630
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 1631
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN2@Tidy:
; Line 1633
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Reserve, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1612
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
; Line 1613
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::_Unused_capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Reserve
; Line 1615
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Reserve
; Line 1616
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ; std::vector<int,std::allocator<int> >::_Xlen
$LN1@Reserve:
; Line 1617
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ; std::vector<int,std::allocator<int> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reallocate
$LN4@Reserve:
; Line 1619
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -32						; size = 4
__Ptr$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Reallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1587
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 1588
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
; Line 1590
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 1591
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
	jmp	SHORT $LN5@Reallocate
__catch$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$0:
; Line 1593
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate
; Line 1594
	push	0
	push	0
	call	__CxxThrowException@8
; Line 1595
	mov	eax, $LN8@Reallocate
	ret	0
$LN5@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$1
$LN8@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$1:
; Line 1597
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	DWORD PTR __Size$[ebp], eax
; Line 1598
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Reallocate
; Line 1600
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
; Line 1602
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate
$LN1@Reallocate:
; Line 1605
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 1606
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 1607
	mov	ecx, DWORD PTR __Size$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1608
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN4@Reallocate:
; Line 1609
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Reallocate
; Function compile flags: /Odtp
;	COMDAT ?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z PROC ; std::vector<int,std::allocator<int> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1582
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1583
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]
; Line 1584
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ENDP ; std::vector<int,std::allocator<int> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z PROC ; std::vector<int,std::allocator<int> >::_Grow_to, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1571
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1572
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax
; Line 1575
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
; Line 1576
	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to
; Line 1577
	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to:
; Line 1578
	mov	eax, DWORD PTR __Capacity$[ebp]
; Line 1579
	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ENDP ; std::vector<int,std::allocator<int> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1565
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1566
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
; Line 1567
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
	add	esp, 12					; 0000000cH
; Line 1568
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
_TEXT	SEGMENT
__Idx$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1243
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1244
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@$$CBH@std@@YAPBHABH@Z	; std::addressof<int const >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ; std::vector<int,std::allocator<int> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@push_back
; Line 1246
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$addressof@$$CBH@std@@YAPBHABH@Z	; std::addressof<int const >
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
	mov	DWORD PTR __Idx$1[ebp], eax
; Line 1247
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+12]
	jne	SHORT $LN3@push_back
; Line 1248
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN3@push_back:
; Line 1249
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
; Line 1251
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Idx$1[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	mov	ecx, eax
	call	??$construct@HAAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHAAH@Z ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int &>
; Line 1252
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 1254
	jmp	SHORT $LN5@push_back
$LN4@push_back:
; Line 1256
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+12]
	jne	SHORT $LN1@push_back
; Line 1257
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN1@push_back:
; Line 1258
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
; Line 1260
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	mov	ecx, eax
	call	??$construct@HABH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHABH@Z ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int const &>
; Line 1261
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN5@push_back:
; Line 1263
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?at@?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
?at@?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z PROC	; std::vector<int,std::allocator<int> >::at, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1174
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1175
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN1@at
; Line 1176
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ; std::vector<int,std::allocator<int> >::_Xran
$LN1@at:
; Line 1177
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
$LN3@at:
; Line 1178
	mov	esp, ebp
	pop	ebp
	ret	4
?at@?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ENDP	; std::vector<int,std::allocator<int> >::at
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1152
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1153
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<int> >::max_size
; Line 1154
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC	; std::vector<int,std::allocator<int> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1148
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
; Line 1149
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP	; std::vector<int,std::allocator<int> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?rbegin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -52						; size = 12
tv87 = -40						; size = 4
$T3 = -36						; size = 4
tv90 = -32						; size = 4
tv88 = -28						; size = 4
tv95 = -24						; size = 4
_this$ = -20						; size = 4
$T4 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?rbegin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::rbegin, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1049
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?rbegin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4[ebp], 0
; Line 1050
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T3[ebp], esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
	mov	DWORD PTR tv95[ebp], eax
	mov	ecx, DWORD PTR tv95[ebp]
	mov	DWORD PTR tv87[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@@Z ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
	mov	DWORD PTR tv88[ebp], eax
	mov	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR tv90[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv90[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T4[ebp]
	or	ecx, 1
	mov	DWORD PTR $T4[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1051
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?rbegin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@2@XZ$0:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?rbegin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@2@XZ$1:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?rbegin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@2@XZ$2:
	mov	eax, DWORD PTR $T4[ebp]
	and	eax, 1
	je	$LN6@rbegin
	and	DWORD PTR $T4[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@XZ
$LN6@rbegin:
	ret	0
__ehhandler$?rbegin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?rbegin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?rbegin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::rbegin
; Function compile flags: /Odtp
;	COMDAT ?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::end, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1034
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1035
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1036
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@end
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
$LN4@end:
	ret	0
__ehhandler$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::end
; Function compile flags: /Odtp
;	COMDAT ?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::_Unused_capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1014
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1015
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+8]
	sar	eax, 2
; Line 1016
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1009
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1010
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
; Line 1011
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 944
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 945
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
; Line 946
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::~_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::~_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
; Function compile flags: /Odtp
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 680
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@H@std@@QAE@XZ		; std::allocator<int>::allocator<int>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 681
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::~_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; Function compile flags: /Odtp
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 641
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 642
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 643
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Free_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 630
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 632
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 633
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 634
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
; Line 635
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
; Line 636
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 637
	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Alloc_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 623
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 624
	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 625
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
; Line 626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 627
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::~_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 607
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 608
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Free_proxy
; Line 609
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::~_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 601
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 603
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Alloc_proxy
; Line 604
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<int> >::~_Vector_val<std::_Simple_types<int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<int> >::~_Vector_val<std::_Simple_types<int> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 480
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 482
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 483
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 484
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 485
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<int> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 883
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z ; std::allocator_traits<std::allocator<int> >::max_size
	add	esp, 4
; Line 885
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@H@std@@QAEXPAHI@Z ; std::allocator<int>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@H@std@@QAEPAHI@Z	; std::allocator<int>::allocate
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@H@std@@QAE@XZ		; std::allocator<int>::allocator<int>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z PROC ; std::allocator_traits<std::allocator<int> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 734
	push	ebp
	mov	ebp, esp
; Line 735
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@H@std@@QBEIXZ	; std::allocator<int>::max_size
; Line 736
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z ENDP ; std::allocator_traits<std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator@H@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@H@std@@QBEIXZ PROC		; std::allocator<int>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 611
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 612
	mov	eax, 1073741823				; 3fffffffH
; Line 613
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@H@std@@QBEIXZ ENDP		; std::allocator<int>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@H@std@@QAEXPAHABH@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv68 = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@H@std@@QAEXPAHABH@Z PROC		; std::allocator<int>::construct, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 592
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 593
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN1@construct
$LN3@construct:
	mov	DWORD PTR tv68[ebp], 0
$LN1@construct:
; Line 594
	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@H@std@@QAEXPAHABH@Z ENDP		; std::allocator<int>::construct
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@H@std@@QAEPAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@H@std@@QAEPAHI@Z PROC		; std::allocator<int>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@H@std@@YAPAHIPAH@Z		; std::_Allocate<int>
	add	esp, 8
; Line 579
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@H@std@@QAEPAHI@Z ENDP		; std::allocator<int>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@H@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@H@std@@QAE@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@H@std@@QAE@XZ ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2294
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2295
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:
; Line 2296
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2289
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2290
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:
; Line 2291
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2272
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2273
	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:
; Line 2275
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 8
	jb	SHORT $LN3@Tidy
; Line 2277
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Ptr$1[ebp], eax
; Line 2278
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>
; Line 2279
	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy
; Line 2281
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@_W@std@@YAPA_WAA_W@Z	; std::addressof<wchar_t>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:
; Line 2282
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN3@Tidy:
; Line 2284
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 7
; Line 2285
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
; Line 2286
	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2256
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2258
	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	lea	eax, DWORD PTR [eax+edx*2]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:
; Line 2259
	xor	al, al
	jmp	SHORT $LN4@Inside
; Line 2260
	jmp	SHORT $LN4@Inside
$LN3@Inside:
; Line 2261
	mov	al, 1
$LN4@Inside:
; Line 2262
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2242
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2243
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow
; Line 2244
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN6@Grow:
; Line 2245
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow
; Line 2246
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:
; Line 2247
	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 8
	jae	SHORT $LN3@Grow
; Line 2249
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:
; Line 2250
	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow
; Line 2251
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN4@Grow:
; Line 2252
	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:
; Line 2253
	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -2						; size = 2
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2236
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 2237
	xor	eax, eax
	mov	WORD PTR $T1[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [ecx+20], edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Newsize$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign
	add	esp, 8
; Line 2238
	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
_TEXT	SEGMENT
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2201
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 2202
	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 7
	mov	DWORD PTR __Newres$[ebp], eax
; Line 2203
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy
; Line 2204
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:
; Line 2205
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	shr	ecx, 1
	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	esi, 3
	div	esi
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:
; Line 2207
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	shr	ecx, 1
	sub	eax, ecx
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], eax
	ja	SHORT $LN5@Copy
; Line 2209
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR __Newres$[ebp], ecx
; Line 2210
	jmp	SHORT $LN8@Copy
$LN5@Copy:
; Line 2211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:
; Line 2214
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 2215
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0:
; Line 2216
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 2217
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx
; Line 2218
	mov	BYTE PTR __$EHRec$[ebp+12], 2
; Line 2219
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1:
; Line 2221
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Line 2222
	push	0
	push	0
	call	__CxxThrowException@8
; Line 2223
	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$2:
; Line 2224
	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$3:
; Line 2226
	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy
; Line 2228
	mov	edx, DWORD PTR __Oldlen$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	push	eax
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:
; Line 2229
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Line 2230
	lea	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
; Line 2231
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 2232
	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN11@Copy:
; Line 2233
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
; Function compile flags: /Odtp
;	COMDAT ?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 2
?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Chassign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2193
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2194
	cmp	DWORD PTR __Count$[ebp], 1
	jne	SHORT $LN2@Chassign
; Line 2195
	lea	eax, DWORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Off$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign
	add	esp, 8
; Line 2196
	jmp	SHORT $LN3@Chassign
$LN2@Chassign:
; Line 2197
	movzx	eax, WORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [eax+edx*2]
	push	eax
	call	?assign@?$char_traits@_W@std@@SAPA_WPA_WI_W@Z ; std::char_traits<wchar_t>::assign
	add	esp, 12					; 0000000cH
$LN3@Chassign:
; Line 2198
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Chassign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1758
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 1759
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size
	mov	DWORD PTR __Num$[ebp], eax
; Line 1760
	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]
; Line 1761
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1753
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1754
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
; Line 1755
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1738
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1739
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
; Line 1740
	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1342
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1343
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase
; Line 1344
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN4@erase:
; Line 1345
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase
; Line 1346
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:
; Line 1347
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase
; Line 1349
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [eax+edx*2]
	mov	DWORD PTR __Ptr$2[ebp], eax
; Line 1350
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], edx
; Line 1351
	mov	eax, DWORD PTR __Newsize$1[ebp]
	sub	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Ptr$2[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR __Ptr$2[ebp]
	push	ecx
	call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move
	add	esp, 12					; 0000000cH
; Line 1352
	mov	edx, DWORD PTR __Newsize$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN2@erase:
; Line 1354
	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:
; Line 1355
	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1334
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1335
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase
; Line 1336
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN1@erase:
; Line 1337
	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
; Line 1338
	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:
; Line 1339
	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IPB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Ptr$ = 12						; size = 4
?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::insert, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1264
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1265
	push	1265					; 000004f1H
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH
; Line 1266
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?length@?$char_traits@_W@std@@SAIPB_W@Z	; std::char_traits<wchar_t>::length
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::insert
; Line 1267
	mov	esp, ebp
	pop	ebp
	ret	8
?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::insert
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IPB_WI@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IPB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::insert, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1238
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1240
	cmp	DWORD PTR __Count$[ebp], 0
	je	SHORT $LN5@insert
; Line 1241
	push	1241					; 000004d9H
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH
$LN5@insert:
; Line 1244
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@insert
; Line 1246
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	sar	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::insert
	jmp	$LN7@insert
$LN4@insert:
; Line 1247
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN3@insert
; Line 1248
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN3@insert:
; Line 1249
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::npos
	sub	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Count$[ebp]
	ja	SHORT $LN2@insert
; Line 1250
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN2@insert:
; Line 1252
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	$LN1@insert
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
	push	0
	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@insert
; Line 1256
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [eax+edx*2]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Off$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	push	ecx
	call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move
	add	esp, 12					; 0000000cH
; Line 1257
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Off$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy
	add	esp, 12					; 0000000cH
; Line 1258
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN1@insert:
; Line 1260
	mov	eax, DWORD PTR _this$[ebp]
$LN7@insert:
; Line 1261
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IPB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::insert
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IABV12@II@Z
_TEXT	SEGMENT
tv169 = -12						; size = 4
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Right$ = 12						; size = 4
__Roff$ = 16						; size = 4
__Count$ = 20						; size = 4
?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::insert, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1210
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1211
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jb	SHORT $LN6@insert
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN7@insert
$LN6@insert:
; Line 1212
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN7@insert:
; Line 1213
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
; Line 1214
	mov	edx, DWORD PTR __Num$[ebp]
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN5@insert
; Line 1215
	mov	eax, DWORD PTR __Num$[ebp]
	mov	DWORD PTR __Count$[ebp], eax
$LN5@insert:
; Line 1216
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::npos
	sub	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR __Count$[ebp]
	ja	SHORT $LN4@insert
; Line 1217
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN4@insert:
; Line 1219
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	$LN3@insert
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	$LN3@insert
; Line 1223
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Off$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Off$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	push	ecx
	call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move
	add	esp, 12					; 0000000cH
; Line 1224
	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN2@insert
; Line 1227
	mov	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN10@insert
	mov	ecx, DWORD PTR __Roff$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv169[ebp], ecx
	jmp	SHORT $LN11@insert
$LN10@insert:
	mov	edx, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR tv169[ebp], edx
$LN11@insert:
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR tv169[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Off$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move
	add	esp, 12					; 0000000cH
; Line 1228
	jmp	SHORT $LN1@insert
$LN2@insert:
; Line 1230
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Roff$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Off$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy
	add	esp, 12					; 0000000cH
$LN1@insert:
; Line 1231
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN3@insert:
; Line 1233
	mov	eax, DWORD PTR _this$[ebp]
$LN9@insert:
; Line 1234
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::insert
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 2
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1173
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1174
	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::npos
	jne	SHORT $LN2@assign
; Line 1175
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN2@assign:
; Line 1177
	push	0
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@assign
; Line 1179
	movzx	eax, WORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Chassign
; Line 1180
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN1@assign:
; Line 1182
	mov	eax, DWORD PTR _this$[ebp]
$LN4@assign:
; Line 1183
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1168
	push	1168					; 00000490H
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH
; Line 1169
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?length@?$char_traits@_W@std@@SAIPB_W@Z	; std::char_traits<wchar_t>::length
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Line 1170
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1148
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1150
	cmp	DWORD PTR __Count$[ebp], 0
	je	SHORT $LN3@assign
; Line 1151
	push	1151					; 0000047fH
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH
$LN3@assign:
; Line 1154
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@assign
; Line 1156
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	sar	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
	jmp	SHORT $LN4@assign
$LN2@assign:
; Line 1158
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign
; Line 1160
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	push	eax
	call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy
	add	esp, 12					; 0000000cH
; Line 1161
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN1@assign:
; Line 1163
	mov	eax, DWORD PTR _this$[ebp]
$LN4@assign:
; Line 1164
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1129
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1130
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign
; Line 1131
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN5@assign:
; Line 1132
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
; Line 1133
	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign
; Line 1134
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:
; Line 1136
	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign
; Line 1137
	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:
; Line 1138
	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign
; Line 1141
	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	edx, DWORD PTR __Roff$[ebp]
	lea	eax, DWORD PTR [eax+edx*2]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	push	eax
	call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy
	add	esp, 12					; 0000000cH
; Line 1142
	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN2@assign:
; Line 1144
	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:
; Line 1145
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1085
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1086
	push	1086					; 0000043eH
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH
; Line 1087
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?length@?$char_traits@_W@std@@SAIPB_W@Z	; std::char_traits<wchar_t>::length
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Line 1088
	mov	esp, ebp
	pop	ebp
	ret	4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1063
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1065
	cmp	DWORD PTR __Count$[ebp], 0
	je	SHORT $LN4@append
; Line 1066
	push	1066					; 0000042aH
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH
$LN4@append:
; Line 1069
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@append
; Line 1071
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	sar	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
	jmp	SHORT $LN6@append
$LN3@append:
; Line 1072
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::npos
	sub	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Count$[ebp]
	ja	SHORT $LN2@append
; Line 1073
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN2@append:
; Line 1076
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@append
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
	push	0
	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@append
; Line 1078
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy
	add	esp, 12					; 0000000cH
; Line 1079
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN1@append:
; Line 1081
	mov	eax, DWORD PTR _this$[ebp]
$LN6@append:
; Line 1082
	mov	esp, ebp
	pop	ebp
	ret	8
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1044
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1045
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN4@append
; Line 1046
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN4@append:
; Line 1047
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
; Line 1048
	mov	eax, DWORD PTR __Num$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN3@append
; Line 1049
	mov	ecx, DWORD PTR __Num$[ebp]
	mov	DWORD PTR __Count$[ebp], ecx
$LN3@append:
; Line 1050
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::npos
	sub	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN2@append
; Line 1051
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN2@append:
; Line 1053
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@append
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], edx
	push	0
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@append
; Line 1056
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Roff$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	lea	eax, DWORD PTR [eax+edx*2]
	push	eax
	call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy
	add	esp, 12					; 0000000cH
; Line 1057
	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN1@append:
; Line 1059
	mov	eax, DWORD PTR _this$[ebp]
$LN6@append:
; Line 1060
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1038
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1039
	mov	eax, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::npos
	push	eax
	push	0
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Line 1040
	mov	esp, ebp
	pop	ebp
	ret	4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 990
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 991
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Line 992
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
__ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Odtp
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 2
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 794
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@_W@std@@QAE@XZ		; std::allocator<wchar_t>::allocator<wchar_t>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 795
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Line 796
	movzx	eax, WORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Line 797
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Odtp
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 780
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@_W@std@@QAE@XZ		; std::allocator<wchar_t>::allocator<wchar_t>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 781
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Line 782
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Line 783
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Odtp
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 683
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 684
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 685
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 672
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 674
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
; Line 675
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 676
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
; Line 677
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
; Line 678
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 679
	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 663
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 665
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
; Line 666
	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 667
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
; Line 668
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 669
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 649
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 650
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy
; Line 651
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 643
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 645
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy
; Line 646
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
; Function compile flags: /Odtp
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 517
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 520
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 8
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$addressof@_W@std@@YAPA_WAA_W@Z	; std::addressof<wchar_t>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]
; Line 521
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 510
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 513
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 8
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$addressof@_W@std@@YAPA_WAA_W@Z	; std::addressof<wchar_t>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]
; Line 514
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 492
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 494
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 495
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 496
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 883
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t> >::max_size
	add	esp, 4
; Line 885
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@_W@std@@QAE@XZ		; std::allocator<wchar_t>::allocator<wchar_t>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 734
	push	ebp
	mov	ebp, esp
; Line 735
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@_W@std@@QBEIXZ	; std::allocator<wchar_t>::max_size
; Line 736
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@_W@std@@QBEIXZ PROC		; std::allocator<wchar_t>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 611
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 612
	mov	eax, 2147483647				; 7fffffffH
; Line 613
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@_W@std@@QBEIXZ ENDP		; std::allocator<wchar_t>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		; std::allocator<wchar_t>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@_W@std@@YAPA_WIPA_W@Z	; std::_Allocate<wchar_t>
	add	esp, 8
; Line 579
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z ENDP		; std::allocator<wchar_t>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@_W@std@@QAE@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@_W@std@@QAE@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_System_error_category@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Generic_error_category@std@@UAE@XZ
__ehhandler$??1_System_error_category@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_System_error_category@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
; Function compile flags: /Odtp
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 614
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 615
	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er
; Line 616
	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er
; Line 617
	jmp	SHORT $LN3@default_er
$LN2@default_er:
; Line 618
	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:
; Line 619
	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T2 = -24						; size = 4
tv69 = -20						; size = 4
__Name$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 607
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 608
	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax
; Line 609
	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 610
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN6@message
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN6@message:
	ret	0
__ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
; Function compile flags: /Odtp
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 602
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 603
	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@
; Line 604
	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 597
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0_System_error_category@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@
; Line 599
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_System_error_category@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Generic_error_category@std@@UAE@XZ
__ehhandler$??0_System_error_category@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0_System_error_category@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Generic_error_category@std@@UAE@XZ
__ehhandler$??1_Iostream_error_category@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
; Function compile flags: /Odtp
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 584
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 585
	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message
; Line 586
	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message
; Line 587
	jmp	SHORT $LN3@message
$LN2@message:
; Line 588
	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:
; Line 589
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN6@message
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN6@message:
	ret	0
__ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
; Function compile flags: /Odtp
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 579
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 580
	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@
; Line 581
	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 574
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0_Iostream_error_category@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@
; Line 576
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Generic_error_category@std@@UAE@XZ
__ehhandler$??0_Iostream_error_category@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
__ehhandler$??1_Generic_error_category@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
; Function compile flags: /Odtp
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T2 = -24						; size = 4
tv69 = -20						; size = 4
__Name$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 563
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 564
	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax
; Line 565
	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 566
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN6@message
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN6@message:
	ret	0
__ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
; Function compile flags: /Odtp
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 558
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 559
	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@
; Line 560
	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 553
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0_Generic_error_category@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@
; Line 555
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
__ehhandler$??0_Generic_error_category@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
; Function compile flags: /Odtp
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 352
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
; Line 354
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]
; Line 355
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 337
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 338
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 339
	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 332
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 333
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 334
	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 299
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 300
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 246
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 247
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 248
	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 241
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 242
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 243
	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 176
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]
; Line 178
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 391
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 392
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]
; Line 393
	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 384
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 385
	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==
; Line 386
	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 377
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 378
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 379
	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 159
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@
; Line 160
	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 154
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@
; Line 156
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 652
	push	ebp
	mov	ebp, esp
; Line 653
	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
; Line 654
	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 642
	push	ebp
	mov	ebp, esp
; Line 643
	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
; Line 644
	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@_W@std@@YAXPB_W0I@Z PROC		; std::_Debug_pointer<wchar_t>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 545
	push	ebp
	mov	ebp, esp
; Line 546
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 547
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 548
	pop	ebp
	ret	0
??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ENDP		; std::_Debug_pointer<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z PROC		; std::_Debug_pointer<char>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 545
	push	ebp
	mov	ebp, esp
; Line 546
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 547
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 548
	pop	ebp
	ret	0
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ENDP		; std::_Debug_pointer<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xlocale
; Line 74
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 75
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T2 = -2576						; size = 12
$T3 = -2564						; size = 4
$T4 = -2560						; size = 4
tv818 = -2556						; size = 4
$T5 = -2552						; size = 4
$T6 = -2548						; size = 4
$T7 = -2544						; size = 4
tv815 = -2540						; size = 4
tv821 = -2536						; size = 4
$T8 = -2532						; size = 4
tv833 = -2528						; size = 4
tv812 = -2524						; size = 4
tv830 = -2520						; size = 4
_stringSize$9 = -2516					; size = 4
tv827 = -2512						; size = 4
$T10 = -2508						; size = 4
tv836 = -2504						; size = 4
$T11 = -2500						; size = 4
_pNppParam$12 = -2496					; size = 4
$T13 = -2492						; size = 4
tv844 = -2488						; size = 4
_posAbs2Start$14 = -2484				; size = 4
tv842 = -2480						; size = 4
tv396 = -2476						; size = 4
tv201 = -2472						; size = 4
_cursorLine$15 = -2468					; size = 4
_numbers$16 = -2464					; size = 16
tv848 = -2448						; size = 4
_colInfos$17 = -2444					; size = 16
$T18 = -2428						; size = 4
_colInfos$19 = -2424					; size = 16
$T20 = -2408						; size = 4
$T21 = -2404						; size = 4
tv598 = -2400						; size = 4
$T22 = -2396						; size = 4
_endPos$23 = -2392					; size = 4
_posRelative2Start$24 = -2388				; size = 4
tv847 = -2384						; size = 4
_posAbs2Start$25 = -2380				; size = 4
tv485 = -2376						; size = 4
_nb$26 = -2372						; size = 4
_posRelative2Start$27 = -2368				; size = 4
$T28 = -2364						; size = 4
$T29 = -2360						; size = 4
$T30 = -2356						; size = 4
_endLine$31 = -2352					; size = 4
_endNumber$32 = -2348					; size = 4
_endPos$33 = -2344					; size = 4
tv839 = -2340						; size = 4
tv845 = -2336						; size = 4
_lineEndCol$34 = -2332					; size = 4
tv659 = -2328						; size = 4
_lineAllocatedLen$35 = -2324				; size = 4
_increaseNumber$36 = -2320				; size = 4
_cursorPos$37 = -2316					; size = 4
_nbInit$38 = -2312					; size = 4
tv160 = -2308						; size = 4
_cursorPos$39 = -2304					; size = 4
_enableDlgTheme$40 = -2300				; size = 4
_nbEnd$41 = -2296					; size = 4
tv799 = -2292						; size = 4
tv64 = -2288						; size = 4
_lineEndCol$42 = -2284					; size = 4
_kiMaxSize$43 = -2280					; size = 4
_lineAllocatedLen$44 = -2276				; size = 4
_endLine$45 = -2272					; size = 4
tv633 = -2268						; size = 4
_lineLen$46 = -2264					; size = 4
_cursorCol$47 = -2260					; size = 4
_curNumber$48 = -2256					; size = 4
_cursorLine$49 = -2252					; size = 4
_i$50 = -2248						; size = 4
_lineLen$51 = -2244					; size = 4
_cursorCol$52 = -2240					; size = 4
_initialNumber$53 = -2236				; size = 4
_repeat$54 = -2232					; size = 4
_lineBegin$55 = -2228					; size = 4
_lineBegin$56 = -2224					; size = 4
_lineEnd$57 = -2220					; size = 4
_lineEnd$58 = -2216					; size = 4
_line$59 = -2212					; size = 4
_line$60 = -2208					; size = 4
tv133 = -2204						; size = 4
_base$61 = -2200					; size = 4
_i$62 = -2196						; size = 4
$T63 = -2191						; size = 1
_isTextMode$64 = -2190					; size = 1
$T65 = -2189						; size = 1
_i$66 = -2188						; size = 4
$T67 = -2182						; size = 1
$T68 = -2181						; size = 1
_isZeroLeading$69 = -2180				; size = 1
tv793 = -2179						; size = 1
_format$70 = -2178					; size = 1
_f$71 = -2177						; size = 1
_s_space$72 = -2176					; size = 28
_s_space$73 = -2148					; size = 28
_s2r$74 = -2120						; size = 28
_s2r$75 = -2092						; size = 28
_str$76 = -2064						; size = 2048
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
___formal$ = 20						; size = 4
?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z PROC		; ColumnEditorDlg::run_dlgProc
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\scitillacomponent\columneditor.cpp
; Line 53
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2564				; 00000a04H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 54
	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 272		; 00000110H
	je	SHORT $LN46@run_dlgPro
	cmp	DWORD PTR tv64[ebp], 273		; 00000111H
	je	SHORT $LN44@run_dlgPro
	jmp	$LN1@run_dlgPro
$LN46@run_dlgPro:
; Line 58
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?switchTo@ColumnEditorDlg@@QAEX_N@Z	; ColumnEditorDlg::switchTo
; Line 59
	push	0
	push	1
	push	241					; 000000f1H
	push	2024					; 000007e8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
; Line 60
	mov	ecx, DWORD PTR _this$[ebp]
	call	?goToCenter@StaticDialog@@QAEXXZ	; StaticDialog::goToCenter
; Line 62
	call	?getInstance@NppParameters@@SAPAV1@XZ	; NppParameters::getInstance
	mov	DWORD PTR _pNppParam$12[ebp], eax
; Line 63
	mov	ecx, DWORD PTR _pNppParam$12[ebp]
	call	?getEnableThemeDlgTexture@NppParameters@@QBEP6GJPAUHWND__@@IIJ@ZXZ ; NppParameters::getEnableThemeDlgTexture
	mov	DWORD PTR _enableDlgTheme$40[ebp], eax
; Line 64
	cmp	DWORD PTR _enableDlgTheme$40[ebp], 0
	je	SHORT $LN45@run_dlgPro
; Line 66
	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR _enableDlgTheme$40[ebp]
; Line 67
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
$LN45@run_dlgPro:
; Line 69
	mov	eax, 1
	jmp	$LN49@run_dlgPro
$LN44@run_dlgPro:
; Line 73
	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv133[ebp], eax
	cmp	DWORD PTR tv133[ebp], 2
	ja	SHORT $LN60@run_dlgPro
	cmp	DWORD PTR tv133[ebp], 2
	je	SHORT $LN41@run_dlgPro
	cmp	DWORD PTR tv133[ebp], 1
	je	SHORT $LN40@run_dlgPro
	jmp	$LN6@run_dlgPro
$LN60@run_dlgPro:
	cmp	DWORD PTR tv133[ebp], 2028		; 000007ecH
	jb	$LN6@run_dlgPro
	cmp	DWORD PTR tv133[ebp], 2029		; 000007edH
	jbe	$LN7@run_dlgPro
	jmp	$LN6@run_dlgPro
$LN41@run_dlgPro:
; Line 76
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
; Line 77
	mov	eax, 1
	jmp	$LN49@run_dlgPro
$LN40@run_dlgPro:
; Line 81
	push	0
	push	0
	push	2078					; 0000081eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR [edx]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
; Line 83
	mov	DWORD PTR _stringSize$9[ebp], 1024	; 00000400H
; Line 86
	push	0
	push	0
	push	240					; 000000f0H
	push	2028					; 000007ecH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	cmp	eax, 1
	jne	SHORT $LN51@run_dlgPro
	mov	DWORD PTR tv160[ebp], 1
	jmp	SHORT $LN52@run_dlgPro
$LN51@run_dlgPro:
	mov	DWORD PTR tv160[ebp], 0
$LN52@run_dlgPro:
	mov	dl, BYTE PTR tv160[ebp]
	mov	BYTE PTR _isTextMode$64[ebp], dl
; Line 88
	movzx	eax, BYTE PTR _isTextMode$64[ebp]
	test	eax, eax
	je	$LN39@run_dlgPro
; Line 90
	lea	ecx, DWORD PTR _str$76[ebp]
	push	ecx
	push	1024					; 00000400H
	push	13					; 0000000dH
	push	2034					; 000007f2H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageW@20
; Line 92
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
; Line 94
	push	0
	push	0
	push	2372					; 00000944H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR [edx]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	test	eax, eax
	jne	SHORT $LN37@run_dlgPro
	push	0
	push	0
	push	2570					; 00000a0aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR [ecx]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	cmp	eax, 1
	jle	$LN38@run_dlgPro
$LN37@run_dlgPro:
; Line 96
	lea	edx, DWORD PTR _colInfos$19[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR [ecx]
	call	?getColumnModeSelectInfo@ScintillaEditView@@QAE?AV?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@XZ ; ScintillaEditView::getColumnModeSelectInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 97
	xor	edx, edx
	mov	BYTE PTR $T68[ebp], dl
	movzx	eax, BYTE PTR $T68[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T11[ebp], esp
	push	ecx
	lea	ecx, DWORD PTR _colInfos$19[ebp]
	call	?end@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::end
	mov	DWORD PTR tv201[ebp], eax
	mov	edx, DWORD PTR tv201[ebp]
	mov	DWORD PTR tv812[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T8[ebp], esp
	push	eax
	lea	ecx, DWORD PTR _colInfos$19[ebp]
	call	?begin@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::begin
	mov	DWORD PTR tv842[ebp], eax
	mov	ecx, DWORD PTR tv842[ebp]
	mov	DWORD PTR tv815[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	call	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >,SortInPositionOrder>
	add	esp, 28					; 0000001cH
; Line 98
	lea	edx, DWORD PTR _str$76[ebp]
	push	edx
	lea	eax, DWORD PTR _colInfos$19[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR [edx]
	call	?columnReplace@ScintillaEditView@@QAEXAAV?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@PB_W@Z ; ScintillaEditView::columnReplace
; Line 99
	xor	eax, eax
	mov	BYTE PTR $T67[ebp], al
	movzx	ecx, BYTE PTR $T67[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T6[ebp], esp
	push	edx
	lea	ecx, DWORD PTR _colInfos$19[ebp]
	call	?end@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::end
	mov	DWORD PTR tv844[ebp], eax
	mov	eax, DWORD PTR tv844[ebp]
	mov	DWORD PTR tv818[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	push	ecx
	lea	ecx, DWORD PTR _colInfos$19[ebp]
	call	?begin@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::begin
	mov	DWORD PTR tv845[ebp], eax
	mov	edx, DWORD PTR tv845[ebp]
	mov	DWORD PTR tv821[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	call	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >,SortInSelectOrder>
	add	esp, 28					; 0000001cH
; Line 100
	lea	eax, DWORD PTR _colInfos$19[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR [edx]
	call	?setMultiSelections@ScintillaEditView@@QAEXABV?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@Z ; ScintillaEditView::setMultiSelections
; Line 101
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _colInfos$19[ebp]
	call	??1?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::~vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >
; Line 102
	jmp	$LN36@run_dlgPro
$LN38@run_dlgPro:
; Line 104
	push	0
	push	0
	push	2008					; 000007d8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR [ecx]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	mov	DWORD PTR _cursorPos$37[ebp], eax
; Line 105
	push	0
	mov	edx, DWORD PTR _cursorPos$37[ebp]
	push	edx
	push	2129					; 00000851H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR [ecx]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	mov	DWORD PTR _cursorCol$52[ebp], eax
; Line 106
	push	0
	mov	edx, DWORD PTR _cursorPos$37[ebp]
	push	edx
	push	2166					; 00000876H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR [ecx]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	mov	DWORD PTR _cursorLine$15[ebp], eax
; Line 107
	push	0
	push	0
	push	2006					; 000007d6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	mov	DWORD PTR _endPos$33[ebp], eax
; Line 108
	push	0
	mov	ecx, DWORD PTR _endPos$33[ebp]
	push	ecx
	push	2166					; 00000876H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	mov	DWORD PTR _endLine$31[ebp], eax
; Line 110
	mov	DWORD PTR _lineAllocatedLen$35[ebp], 1024 ; 00000400H
; Line 111
	xor	ecx, ecx
	mov	eax, DWORD PTR _lineAllocatedLen$35[ebp]
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T21[ebp], eax
	mov	eax, DWORD PTR $T21[ebp]
	mov	DWORD PTR _line$59[ebp], eax
; Line 113
	mov	ecx, DWORD PTR _cursorLine$15[ebp]
	mov	DWORD PTR _i$62[ebp], ecx
	jmp	SHORT $LN35@run_dlgPro
$LN34@run_dlgPro:
	mov	edx, DWORD PTR _i$62[ebp]
	add	edx, 1
	mov	DWORD PTR _i$62[ebp], edx
$LN35@run_dlgPro:
	mov	eax, DWORD PTR _i$62[ebp]
	cmp	eax, DWORD PTR _endLine$31[ebp]
	jg	$LN33@run_dlgPro
; Line 115
	push	0
	mov	ecx, DWORD PTR _i$62[ebp]
	push	ecx
	push	2167					; 00000877H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	mov	DWORD PTR _lineBegin$56[ebp], eax
; Line 116
	push	0
	mov	ecx, DWORD PTR _i$62[ebp]
	push	ecx
	push	2136					; 00000858H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	mov	DWORD PTR _lineEnd$57[ebp], eax
; Line 118
	push	0
	mov	ecx, DWORD PTR _lineEnd$57[ebp]
	push	ecx
	push	2129					; 00000851H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	mov	DWORD PTR _lineEndCol$34[ebp], eax
; Line 119
	mov	ecx, DWORD PTR _lineEnd$57[ebp]
	sub	ecx, DWORD PTR _lineBegin$56[ebp]
	add	ecx, 1
	mov	DWORD PTR _lineLen$46[ebp], ecx
; Line 121
	mov	edx, DWORD PTR _lineLen$46[ebp]
	cmp	edx, DWORD PTR _lineAllocatedLen$35[ebp]
	jle	SHORT $LN32@run_dlgPro
; Line 123
	mov	eax, DWORD PTR _line$59[ebp]
	mov	DWORD PTR $T20[ebp], eax
	mov	ecx, DWORD PTR $T20[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
; Line 124
	xor	ecx, ecx
	mov	eax, DWORD PTR _lineLen$46[ebp]
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T29[ebp], eax
	mov	eax, DWORD PTR $T29[ebp]
	mov	DWORD PTR _line$59[ebp], eax
$LN32@run_dlgPro:
; Line 126
	mov	ecx, DWORD PTR _lineEnd$57[ebp]
	push	ecx
	mov	edx, DWORD PTR _lineBegin$56[ebp]
	push	edx
	mov	eax, DWORD PTR _lineLen$46[ebp]
	push	eax
	mov	ecx, DWORD PTR _line$59[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax]
	call	?getGenericText@ScintillaEditView@@QBEXPA_WIHH@Z ; ScintillaEditView::getGenericText
; Line 127
	mov	ecx, DWORD PTR _line$59[ebp]
	push	ecx
	lea	ecx, DWORD PTR _s2r$74[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 5
; Line 129
	mov	edx, DWORD PTR _lineEndCol$34[ebp]
	cmp	edx, DWORD PTR _cursorCol$52[ebp]
	jge	SHORT $LN31@run_dlgPro
; Line 131
	push	32					; 00000020H
	mov	eax, DWORD PTR _cursorCol$52[ebp]
	sub	eax, DWORD PTR _lineEndCol$34[ebp]
	push	eax
	lea	ecx, DWORD PTR _s_space$73[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 132
	lea	ecx, DWORD PTR _s_space$73[ebp]
	push	ecx
	lea	ecx, DWORD PTR _s2r$74[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Line 133
	lea	edx, DWORD PTR _str$76[ebp]
	push	edx
	lea	ecx, DWORD PTR _s2r$74[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Line 134
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _s_space$73[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Line 135
	jmp	SHORT $LN30@run_dlgPro
$LN31@run_dlgPro:
; Line 137
	mov	eax, DWORD PTR _cursorCol$52[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$62[ebp]
	push	ecx
	push	2456					; 00000998H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	mov	DWORD PTR _posAbs2Start$14[ebp], eax
; Line 138
	mov	ecx, DWORD PTR _posAbs2Start$14[ebp]
	sub	ecx, DWORD PTR _lineBegin$56[ebp]
	mov	DWORD PTR _posRelative2Start$27[ebp], ecx
; Line 139
	lea	edx, DWORD PTR _str$76[ebp]
	push	edx
	mov	eax, DWORD PTR _posRelative2Start$27[ebp]
	push	eax
	lea	ecx, DWORD PTR _s2r$74[ebp]
	call	?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::insert
$LN30@run_dlgPro:
; Line 141
	mov	ecx, DWORD PTR _lineEnd$57[ebp]
	push	ecx
	mov	edx, DWORD PTR _lineBegin$56[ebp]
	push	edx
	lea	ecx, DWORD PTR _s2r$74[ebp]
	call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR [ecx]
	call	?replaceTarget@ScintillaEditView@@QBEHPB_WHH@Z ; ScintillaEditView::replaceTarget
; Line 142
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s2r$74[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	jmp	$LN34@run_dlgPro
$LN33@run_dlgPro:
; Line 143
	mov	edx, DWORD PTR _line$59[ebp]
	mov	DWORD PTR $T18[ebp], edx
	mov	eax, DWORD PTR $T18[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN36@run_dlgPro:
; Line 146
	jmp	$LN29@run_dlgPro
$LN39@run_dlgPro:
; Line 148
	push	1
	push	0
	push	2021					; 000007e5H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__GetDlgItemInt@16
	mov	DWORD PTR _initialNumber$53[ebp], eax
; Line 149
	push	1
	push	0
	push	2022					; 000007e6H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__GetDlgItemInt@16
	mov	DWORD PTR _increaseNumber$36[ebp], eax
; Line 150
	push	1
	push	0
	push	2037					; 000007f5H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__GetDlgItemInt@16
	mov	DWORD PTR _repeat$54[ebp], eax
; Line 151
	cmp	DWORD PTR _repeat$54[ebp], 0
	jne	SHORT $LN28@run_dlgPro
; Line 153
	mov	DWORD PTR _repeat$54[ebp], 1
$LN28@run_dlgPro:
; Line 155
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getFormat@ColumnEditorDlg@@QAEEXZ	; ColumnEditorDlg::getFormat
	mov	BYTE PTR _format$70[ebp], al
; Line 156
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
; Line 158
	push	0
	push	0
	push	2372					; 00000944H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR [edx]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	test	eax, eax
	jne	SHORT $LN26@run_dlgPro
	push	0
	push	0
	push	2570					; 00000a0aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR [ecx]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	cmp	eax, 1
	jle	$LN27@run_dlgPro
$LN26@run_dlgPro:
; Line 160
	lea	edx, DWORD PTR _colInfos$17[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR [ecx]
	call	?getColumnModeSelectInfo@ScintillaEditView@@QAE?AV?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@XZ ; ScintillaEditView::getColumnModeSelectInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 7
; Line 161
	xor	edx, edx
	mov	BYTE PTR $T65[ebp], dl
	movzx	eax, BYTE PTR $T65[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T10[ebp], esp
	push	ecx
	lea	ecx, DWORD PTR _colInfos$17[ebp]
	call	?end@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::end
	mov	DWORD PTR tv485[ebp], eax
	mov	edx, DWORD PTR tv485[ebp]
	mov	DWORD PTR tv827[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T5[ebp], esp
	push	eax
	lea	ecx, DWORD PTR _colInfos$17[ebp]
	call	?begin@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::begin
	mov	DWORD PTR tv396[ebp], eax
	mov	ecx, DWORD PTR tv396[ebp]
	mov	DWORD PTR tv830[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	call	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInPositionOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInPositionOrder@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >,SortInPositionOrder>
	add	esp, 28					; 0000001cH
; Line 162
	movzx	edx, BYTE PTR _format$70[ebp]
	push	edx
	mov	eax, DWORD PTR _repeat$54[ebp]
	push	eax
	mov	ecx, DWORD PTR _increaseNumber$36[ebp]
	push	ecx
	mov	edx, DWORD PTR _initialNumber$53[ebp]
	push	edx
	lea	eax, DWORD PTR _colInfos$17[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR [edx]
	call	?columnReplace@ScintillaEditView@@QAEXAAV?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@HHHE@Z ; ScintillaEditView::columnReplace
; Line 163
	xor	eax, eax
	mov	BYTE PTR $T63[ebp], al
	movzx	ecx, BYTE PTR $T63[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T7[ebp], esp
	push	edx
	lea	ecx, DWORD PTR _colInfos$17[ebp]
	call	?end@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::end
	mov	DWORD PTR tv847[ebp], eax
	mov	eax, DWORD PTR tv847[ebp]
	mov	DWORD PTR tv833[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T4[ebp], esp
	push	ecx
	lea	ecx, DWORD PTR _colInfos$17[ebp]
	call	?begin@?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@2@XZ ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::begin
	mov	DWORD PTR tv848[ebp], eax
	mov	edx, DWORD PTR tv848[ebp]
	mov	DWORD PTR tv836[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	call	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@USortInSelectOrder@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@0@0USortInSelectOrder@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ColumnModeInfo> > >,SortInSelectOrder>
	add	esp, 28					; 0000001cH
; Line 164
	lea	eax, DWORD PTR _colInfos$17[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR [edx]
	call	?setMultiSelections@ScintillaEditView@@QAEXABV?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@@Z ; ScintillaEditView::setMultiSelections
; Line 165
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _colInfos$17[ebp]
	call	??1?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::~vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >
; Line 166
	jmp	$LN29@run_dlgPro
$LN27@run_dlgPro:
; Line 168
	push	0
	push	0
	push	2008					; 000007d8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR [ecx]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	mov	DWORD PTR _cursorPos$39[ebp], eax
; Line 169
	push	0
	mov	edx, DWORD PTR _cursorPos$39[ebp]
	push	edx
	push	2129					; 00000851H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR [ecx]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	mov	DWORD PTR _cursorCol$47[ebp], eax
; Line 170
	push	0
	mov	edx, DWORD PTR _cursorPos$39[ebp]
	push	edx
	push	2166					; 00000876H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR [ecx]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	mov	DWORD PTR _cursorLine$49[ebp], eax
; Line 171
	push	0
	push	0
	push	2006					; 000007d6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	mov	DWORD PTR _endPos$23[ebp], eax
; Line 172
	push	0
	mov	ecx, DWORD PTR _endPos$23[ebp]
	push	ecx
	push	2166					; 00000876H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	mov	DWORD PTR _endLine$45[ebp], eax
; Line 175
	lea	ecx, DWORD PTR _numbers$16[ebp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 12		; 0000000cH
; Line 177
	mov	ecx, DWORD PTR _initialNumber$53[ebp]
	mov	DWORD PTR _curNumber$48[ebp], ecx
; Line 178
	mov	edx, DWORD PTR _endLine$45[ebp]
	add	edx, 1
	sub	edx, DWORD PTR _cursorLine$49[ebp]
	mov	DWORD PTR _kiMaxSize$43[ebp], edx
$LN24@run_dlgPro:
; Line 179
	lea	ecx, DWORD PTR _numbers$16[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	cmp	eax, DWORD PTR _kiMaxSize$43[ebp]
	jae	SHORT $LN23@run_dlgPro
; Line 181
	mov	DWORD PTR _i$50[ebp], 0
	jmp	SHORT $LN22@run_dlgPro
$LN21@run_dlgPro:
	mov	eax, DWORD PTR _i$50[ebp]
	add	eax, 1
	mov	DWORD PTR _i$50[ebp], eax
$LN22@run_dlgPro:
	mov	ecx, DWORD PTR _i$50[ebp]
	cmp	ecx, DWORD PTR _repeat$54[ebp]
	jge	SHORT $LN20@run_dlgPro
; Line 183
	lea	edx, DWORD PTR _curNumber$48[ebp]
	push	edx
	lea	ecx, DWORD PTR _numbers$16[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
; Line 184
	lea	ecx, DWORD PTR _numbers$16[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	cmp	eax, DWORD PTR _kiMaxSize$43[ebp]
	jb	SHORT $LN19@run_dlgPro
; Line 186
	jmp	SHORT $LN20@run_dlgPro
$LN19@run_dlgPro:
; Line 188
	jmp	SHORT $LN21@run_dlgPro
$LN20@run_dlgPro:
; Line 189
	mov	eax, DWORD PTR _curNumber$48[ebp]
	add	eax, DWORD PTR _increaseNumber$36[ebp]
	mov	DWORD PTR _curNumber$48[ebp], eax
; Line 190
	jmp	SHORT $LN24@run_dlgPro
$LN23@run_dlgPro:
; Line 192
	lea	ecx, DWORD PTR _numbers$16[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	test	eax, eax
	ja	SHORT $LN53@run_dlgPro
	push	192					; 000000c0H
	push	OFFSET $SG169245
	push	OFFSET $SG169246
	call	__wassert
	add	esp, 12					; 0000000cH
$LN53@run_dlgPro:
; Line 194
	mov	DWORD PTR _lineAllocatedLen$44[ebp], 1024 ; 00000400H
; Line 195
	xor	ecx, ecx
	mov	eax, DWORD PTR _lineAllocatedLen$44[ebp]
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T13[ebp], eax
	mov	eax, DWORD PTR $T13[ebp]
	mov	DWORD PTR _line$60[ebp], eax
; Line 198
	movzx	ecx, BYTE PTR _format$70[ebp]
	and	ecx, 3
	mov	BYTE PTR _f$71[ebp], cl
; Line 199
	movzx	edx, BYTE PTR _format$70[ebp]
	and	edx, 4
	je	SHORT $LN54@run_dlgPro
	mov	DWORD PTR tv633[ebp], 1
	jmp	SHORT $LN55@run_dlgPro
$LN54@run_dlgPro:
	mov	DWORD PTR tv633[ebp], 0
$LN55@run_dlgPro:
	mov	al, BYTE PTR tv633[ebp]
	mov	BYTE PTR _isZeroLeading$69[ebp], al
; Line 201
	mov	DWORD PTR _base$61[ebp], 10		; 0000000aH
; Line 202
	movzx	ecx, BYTE PTR _f$71[ebp]
	cmp	ecx, 1
	jne	SHORT $LN18@run_dlgPro
; Line 203
	mov	DWORD PTR _base$61[ebp], 16		; 00000010H
	jmp	SHORT $LN17@run_dlgPro
$LN18@run_dlgPro:
; Line 204
	movzx	edx, BYTE PTR _f$71[ebp]
	cmp	edx, 2
	jne	SHORT $LN16@run_dlgPro
; Line 205
	mov	DWORD PTR _base$61[ebp], 8
	jmp	SHORT $LN17@run_dlgPro
$LN16@run_dlgPro:
; Line 206
	movzx	eax, BYTE PTR _f$71[ebp]
	cmp	eax, 3
	jne	SHORT $LN17@run_dlgPro
; Line 207
	mov	DWORD PTR _base$61[ebp], 2
$LN17@run_dlgPro:
; Line 209
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	ecx, DWORD PTR _numbers$16[ebp]
	call	?rbegin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::rbegin
	mov	DWORD PTR tv598[ebp], eax
	mov	edx, DWORD PTR tv598[ebp]
	mov	DWORD PTR tv839[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	ecx, DWORD PTR tv839[ebp]
	call	??D?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@HHPAHAAH@2@@std@@QBEAAHXZ ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::iterator<std::random_access_iterator_tag,int,int,int *,int &> >::operator*
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _endNumber$32[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@XZ
; Line 210
	mov	ecx, DWORD PTR _base$61[ebp]
	push	ecx
	mov	edx, DWORD PTR _endNumber$32[ebp]
	push	edx
	call	?getNbDigits@@YAHHH@Z			; getNbDigits
	add	esp, 8
	mov	DWORD PTR _nbEnd$41[ebp], eax
; Line 211
	mov	eax, DWORD PTR _base$61[ebp]
	push	eax
	mov	ecx, DWORD PTR _initialNumber$53[ebp]
	push	ecx
	call	?getNbDigits@@YAHHH@Z			; getNbDigits
	add	esp, 8
	mov	DWORD PTR _nbInit$38[ebp], eax
; Line 212
	mov	edx, DWORD PTR _nbInit$38[ebp]
	cmp	edx, DWORD PTR _nbEnd$41[ebp]
	jle	SHORT $LN56@run_dlgPro
	mov	eax, DWORD PTR _nbInit$38[ebp]
	mov	DWORD PTR tv659[ebp], eax
	jmp	SHORT $LN57@run_dlgPro
$LN56@run_dlgPro:
	mov	ecx, DWORD PTR _nbEnd$41[ebp]
	mov	DWORD PTR tv659[ebp], ecx
$LN57@run_dlgPro:
	mov	edx, DWORD PTR tv659[ebp]
	mov	DWORD PTR _nb$26[ebp], edx
; Line 215
	mov	eax, DWORD PTR _cursorLine$49[ebp]
	mov	DWORD PTR _i$66[ebp], eax
	jmp	SHORT $LN13@run_dlgPro
$LN12@run_dlgPro:
	mov	ecx, DWORD PTR _i$66[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$66[ebp], ecx
$LN13@run_dlgPro:
	mov	edx, DWORD PTR _i$66[ebp]
	cmp	edx, DWORD PTR _endLine$45[ebp]
	jg	$LN11@run_dlgPro
; Line 217
	push	0
	mov	eax, DWORD PTR _i$66[ebp]
	push	eax
	push	2167					; 00000877H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR [edx]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	mov	DWORD PTR _lineBegin$55[ebp], eax
; Line 218
	push	0
	mov	eax, DWORD PTR _i$66[ebp]
	push	eax
	push	2136					; 00000858H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR [edx]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	mov	DWORD PTR _lineEnd$58[ebp], eax
; Line 220
	push	0
	mov	eax, DWORD PTR _lineEnd$58[ebp]
	push	eax
	push	2129					; 00000851H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR [edx]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	mov	DWORD PTR _lineEndCol$42[ebp], eax
; Line 221
	mov	eax, DWORD PTR _lineEnd$58[ebp]
	sub	eax, DWORD PTR _lineBegin$55[ebp]
	add	eax, 1
	mov	DWORD PTR _lineLen$51[ebp], eax
; Line 223
	mov	ecx, DWORD PTR _lineLen$51[ebp]
	cmp	ecx, DWORD PTR _lineAllocatedLen$44[ebp]
	jle	SHORT $LN10@run_dlgPro
; Line 225
	mov	edx, DWORD PTR _line$60[ebp]
	mov	DWORD PTR $T30[ebp], edx
	mov	eax, DWORD PTR $T30[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
; Line 226
	xor	ecx, ecx
	mov	eax, DWORD PTR _lineLen$51[ebp]
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T28[ebp], eax
	mov	eax, DWORD PTR $T28[ebp]
	mov	DWORD PTR _line$60[ebp], eax
$LN10@run_dlgPro:
; Line 228
	mov	ecx, DWORD PTR _lineEnd$58[ebp]
	push	ecx
	mov	edx, DWORD PTR _lineBegin$55[ebp]
	push	edx
	mov	eax, DWORD PTR _lineLen$51[ebp]
	push	eax
	mov	ecx, DWORD PTR _line$60[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax]
	call	?getGenericText@ScintillaEditView@@QBEXPA_WIHH@Z ; ScintillaEditView::getGenericText
; Line 229
	mov	ecx, DWORD PTR _line$60[ebp]
	push	ecx
	lea	ecx, DWORD PTR _s2r$75[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
; Line 234
	movzx	edx, BYTE PTR _isZeroLeading$69[ebp]
	push	edx
	mov	eax, DWORD PTR _nb$26[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$61[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$66[ebp]
	sub	edx, DWORD PTR _cursorLine$49[ebp]
	push	edx
	lea	ecx, DWORD PTR _numbers$16[ebp]
	call	?at@?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::at
	mov	eax, DWORD PTR [eax]
	push	eax
	push	1024					; 00000400H
	lea	ecx, DWORD PTR _str$76[ebp]
	push	ecx
	call	?int2str@@YAPA_WPA_WHHHH_N@Z		; int2str
	add	esp, 24					; 00000018H
; Line 236
	mov	edx, DWORD PTR _lineEndCol$42[ebp]
	cmp	edx, DWORD PTR _cursorCol$47[ebp]
	jge	SHORT $LN9@run_dlgPro
; Line 238
	push	32					; 00000020H
	mov	eax, DWORD PTR _cursorCol$47[ebp]
	sub	eax, DWORD PTR _lineEndCol$42[ebp]
	push	eax
	lea	ecx, DWORD PTR _s_space$72[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
; Line 239
	lea	ecx, DWORD PTR _s_space$72[ebp]
	push	ecx
	lea	ecx, DWORD PTR _s2r$75[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Line 240
	lea	edx, DWORD PTR _str$76[ebp]
	push	edx
	lea	ecx, DWORD PTR _s2r$75[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Line 241
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR _s_space$72[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Line 242
	jmp	SHORT $LN8@run_dlgPro
$LN9@run_dlgPro:
; Line 244
	mov	eax, DWORD PTR _cursorCol$47[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$66[ebp]
	push	ecx
	push	2456					; 00000998H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
	mov	DWORD PTR _posAbs2Start$25[ebp], eax
; Line 245
	mov	ecx, DWORD PTR _posAbs2Start$25[ebp]
	sub	ecx, DWORD PTR _lineBegin$55[ebp]
	mov	DWORD PTR _posRelative2Start$24[ebp], ecx
; Line 246
	lea	edx, DWORD PTR _str$76[ebp]
	push	edx
	mov	eax, DWORD PTR _posRelative2Start$24[ebp]
	push	eax
	lea	ecx, DWORD PTR _s2r$75[ebp]
	call	?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::insert
$LN8@run_dlgPro:
; Line 249
	mov	ecx, DWORD PTR _lineEnd$58[ebp]
	push	ecx
	mov	edx, DWORD PTR _lineBegin$55[ebp]
	push	edx
	lea	ecx, DWORD PTR _s2r$75[ebp]
	call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR [ecx]
	call	?replaceTarget@ScintillaEditView@@QBEHPB_WHH@Z ; ScintillaEditView::replaceTarget
; Line 250
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _s2r$75[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	jmp	$LN12@run_dlgPro
$LN11@run_dlgPro:
; Line 251
	mov	edx, DWORD PTR _line$60[ebp]
	mov	DWORD PTR $T22[ebp], edx
	mov	eax, DWORD PTR $T22[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
; Line 252
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _numbers$16[ebp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
$LN29@run_dlgPro:
; Line 254
	push	0
	push	0
	push	2079					; 0000081fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR [edx]
	call	?execute@ScintillaEditView@@QBEJIIJ@Z	; ScintillaEditView::execute
; Line 255
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR [ecx]
	call	?getFocus@Window@@QBEXXZ		; Window::getFocus
; Line 256
	mov	eax, 1
	jmp	SHORT $LN49@run_dlgPro
$LN7@run_dlgPro:
; Line 261
	cmp	DWORD PTR _wParam$[ebp], 2028		; 000007ecH
	jne	SHORT $LN58@run_dlgPro
	mov	BYTE PTR tv793[ebp], 1
	jmp	SHORT $LN59@run_dlgPro
$LN58@run_dlgPro:
	mov	BYTE PTR tv793[ebp], 0
$LN59@run_dlgPro:
	movzx	edx, BYTE PTR tv793[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?switchTo@ColumnEditorDlg@@QAEX_N@Z	; ColumnEditorDlg::switchTo
; Line 262
	mov	eax, 1
	jmp	SHORT $LN49@run_dlgPro
$LN6@run_dlgPro:
; Line 267
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	mov	DWORD PTR tv799[ebp], ecx
	cmp	DWORD PTR tv799[ebp], 6
	je	SHORT $LN3@run_dlgPro
	cmp	DWORD PTR tv799[ebp], 256		; 00000100H
	je	SHORT $LN3@run_dlgPro
	jmp	SHORT $LN2@run_dlgPro
$LN3@run_dlgPro:
; Line 272
	mov	eax, 1
	jmp	SHORT $LN49@run_dlgPro
$LN2@run_dlgPro:
; Line 274
	mov	eax, 1
	jmp	SHORT $LN49@run_dlgPro
$LN1@run_dlgPro:
; Line 282
	xor	eax, eax
$LN49@run_dlgPro:
; Line 285
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$0:
	lea	ecx, DWORD PTR _colInfos$19[ebp]
	jmp	??1?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::~vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >
__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$1:
	mov	ecx, DWORD PTR $T11[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$2:
	mov	ecx, DWORD PTR $T8[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$3:
	mov	ecx, DWORD PTR $T6[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$4:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$5:
	lea	ecx, DWORD PTR _s2r$74[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$6:
	lea	ecx, DWORD PTR _s_space$73[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$7:
	lea	ecx, DWORD PTR _colInfos$17[ebp]
	jmp	??1?$vector@UColumnModeInfo@@V?$allocator@UColumnModeInfo@@@std@@@std@@QAE@XZ ; std::vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >::~vector<ColumnModeInfo,std::allocator<ColumnModeInfo> >
__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$8:
	mov	ecx, DWORD PTR $T10[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$9:
	mov	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$10:
	mov	ecx, DWORD PTR $T7[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$11:
	mov	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UColumnModeInfo@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$12:
	lea	ecx, DWORD PTR _numbers$16[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$13:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$14:
	lea	ecx, DWORD PTR _s2r$75[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z$15:
	lea	ecx, DWORD PTR _s_space$72[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2568]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?run_dlgProc@ColumnEditorDlg@@MAGHIIJ@Z ENDP		; ColumnEditorDlg::run_dlgProc
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv149 = -16						; size = 4
tv76 = -12						; size = 4
_this$ = -8						; size = 4
_isLeadingZeros$ = -2					; size = 1
_f$ = -1						; size = 1
?getFormat@ColumnEditorDlg@@QAEEXZ PROC			; ColumnEditorDlg::getFormat
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\scitillacomponent\columneditor.cpp
; Line 314
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 315
	push	0
	push	0
	push	240					; 000000f0H
	push	2035					; 000007f3H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	cmp	eax, 1
	jne	SHORT $LN8@getFormat
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN9@getFormat
$LN8@getFormat:
	mov	DWORD PTR tv76[ebp], 0
$LN9@getFormat:
	mov	dl, BYTE PTR tv76[ebp]
	mov	BYTE PTR _isLeadingZeros$[ebp], dl
; Line 316
	mov	BYTE PTR _f$[ebp], 0
; Line 317
	push	0
	push	0
	push	240					; 000000f0H
	push	2026					; 000007eaH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	cmp	eax, 1
	jne	SHORT $LN5@getFormat
; Line 318
	mov	BYTE PTR _f$[ebp], 1
	jmp	SHORT $LN4@getFormat
$LN5@getFormat:
; Line 319
	push	0
	push	0
	push	240					; 000000f0H
	push	2025					; 000007e9H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	cmp	eax, 1
	jne	SHORT $LN3@getFormat
; Line 320
	mov	BYTE PTR _f$[ebp], 2
	jmp	SHORT $LN4@getFormat
$LN3@getFormat:
; Line 321
	push	0
	push	0
	push	240					; 000000f0H
	push	2027					; 000007ebH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageW@20
	cmp	eax, 1
	jne	SHORT $LN4@getFormat
; Line 322
	mov	BYTE PTR _f$[ebp], 3
$LN4@getFormat:
; Line 323
	movzx	eax, BYTE PTR _isLeadingZeros$[ebp]
	test	eax, eax
	je	SHORT $LN10@getFormat
	mov	DWORD PTR tv149[ebp], 4
	jmp	SHORT $LN11@getFormat
$LN10@getFormat:
	mov	DWORD PTR tv149[ebp], 0
$LN11@getFormat:
	movzx	eax, BYTE PTR _f$[ebp]
	or	eax, DWORD PTR tv149[ebp]
; Line 324
	mov	esp, ebp
	pop	ebp
	ret	0
?getFormat@ColumnEditorDlg@@QAEEXZ ENDP			; ColumnEditorDlg::getFormat
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv314 = -72						; size = 4
_hNum$ = -68						; size = 4
_hText$ = -64						; size = 4
tv301 = -60						; size = 4
tv288 = -56						; size = 4
tv275 = -52						; size = 4
tv262 = -48						; size = 4
tv249 = -44						; size = 4
tv236 = -40						; size = 4
tv223 = -36						; size = 4
tv210 = -32						; size = 4
tv197 = -28						; size = 4
tv184 = -24						; size = 4
tv179 = -20						; size = 4
tv166 = -16						; size = 4
tv153 = -12						; size = 4
tv141 = -8						; size = 4
_this$ = -4						; size = 4
_toText$ = 8						; size = 1
?switchTo@ColumnEditorDlg@@QAEX_N@Z PROC		; ColumnEditorDlg::switchTo
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\scitillacomponent\columneditor.cpp
; Line 288
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	DWORD PTR _this$[ebp], ecx
; Line 289
	push	2034					; 000007f2H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hText$[ebp], eax
; Line 290
	movzx	edx, BYTE PTR _toText$[ebp]
	push	edx
	mov	eax, DWORD PTR _hText$[ebp]
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 291
	movzx	ecx, BYTE PTR _toText$[ebp]
	push	ecx
	push	2023					; 000007e7H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 292
	push	0
	movzx	ecx, BYTE PTR _toText$[ebp]
	push	ecx
	push	241					; 000000f1H
	push	2028					; 000007ecH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageW@20
; Line 294
	push	2021					; 000007e5H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hNum$[ebp], eax
; Line 295
	movzx	eax, BYTE PTR _toText$[ebp]
	test	eax, eax
	jne	SHORT $LN3@switchTo
	mov	DWORD PTR tv141[ebp], 1
	jmp	SHORT $LN4@switchTo
$LN3@switchTo:
	mov	DWORD PTR tv141[ebp], 0
$LN4@switchTo:
	push	0
	mov	ecx, DWORD PTR tv141[ebp]
	push	ecx
	push	241					; 000000f1H
	push	2029					; 000007edH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageW@20
; Line 296
	movzx	ecx, BYTE PTR _toText$[ebp]
	test	ecx, ecx
	jne	SHORT $LN5@switchTo
	mov	DWORD PTR tv153[ebp], 1
	jmp	SHORT $LN6@switchTo
$LN5@switchTo:
	mov	DWORD PTR tv153[ebp], 0
$LN6@switchTo:
	mov	edx, DWORD PTR tv153[ebp]
	push	edx
	push	2033					; 000007f1H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 297
	movzx	edx, BYTE PTR _toText$[ebp]
	test	edx, edx
	jne	SHORT $LN7@switchTo
	mov	DWORD PTR tv166[ebp], 1
	jmp	SHORT $LN8@switchTo
$LN7@switchTo:
	mov	DWORD PTR tv166[ebp], 0
$LN8@switchTo:
	mov	eax, DWORD PTR tv166[ebp]
	push	eax
	push	2030					; 000007eeH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 298
	movzx	eax, BYTE PTR _toText$[ebp]
	test	eax, eax
	jne	SHORT $LN9@switchTo
	mov	DWORD PTR tv179[ebp], 1
	jmp	SHORT $LN10@switchTo
$LN9@switchTo:
	mov	DWORD PTR tv179[ebp], 0
$LN10@switchTo:
	mov	ecx, DWORD PTR tv179[ebp]
	push	ecx
	mov	edx, DWORD PTR _hNum$[ebp]
	push	edx
	call	DWORD PTR __imp__EnableWindow@8
; Line 299
	movzx	eax, BYTE PTR _toText$[ebp]
	test	eax, eax
	jne	SHORT $LN11@switchTo
	mov	DWORD PTR tv184[ebp], 1
	jmp	SHORT $LN12@switchTo
$LN11@switchTo:
	mov	DWORD PTR tv184[ebp], 0
$LN12@switchTo:
	mov	ecx, DWORD PTR tv184[ebp]
	push	ecx
	push	2031					; 000007efH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 300
	movzx	ecx, BYTE PTR _toText$[ebp]
	test	ecx, ecx
	jne	SHORT $LN13@switchTo
	mov	DWORD PTR tv197[ebp], 1
	jmp	SHORT $LN14@switchTo
$LN13@switchTo:
	mov	DWORD PTR tv197[ebp], 0
$LN14@switchTo:
	mov	edx, DWORD PTR tv197[ebp]
	push	edx
	push	2022					; 000007e6H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 301
	movzx	edx, BYTE PTR _toText$[ebp]
	test	edx, edx
	jne	SHORT $LN15@switchTo
	mov	DWORD PTR tv210[ebp], 1
	jmp	SHORT $LN16@switchTo
$LN15@switchTo:
	mov	DWORD PTR tv210[ebp], 0
$LN16@switchTo:
	mov	eax, DWORD PTR tv210[ebp]
	push	eax
	push	2036					; 000007f4H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 302
	movzx	eax, BYTE PTR _toText$[ebp]
	test	eax, eax
	jne	SHORT $LN17@switchTo
	mov	DWORD PTR tv223[ebp], 1
	jmp	SHORT $LN18@switchTo
$LN17@switchTo:
	mov	DWORD PTR tv223[ebp], 0
$LN18@switchTo:
	mov	ecx, DWORD PTR tv223[ebp]
	push	ecx
	push	2037					; 000007f5H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 303
	movzx	ecx, BYTE PTR _toText$[ebp]
	test	ecx, ecx
	jne	SHORT $LN19@switchTo
	mov	DWORD PTR tv236[ebp], 1
	jmp	SHORT $LN20@switchTo
$LN19@switchTo:
	mov	DWORD PTR tv236[ebp], 0
$LN20@switchTo:
	mov	edx, DWORD PTR tv236[ebp]
	push	edx
	push	2032					; 000007f0H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 304
	movzx	edx, BYTE PTR _toText$[ebp]
	test	edx, edx
	jne	SHORT $LN21@switchTo
	mov	DWORD PTR tv249[ebp], 1
	jmp	SHORT $LN22@switchTo
$LN21@switchTo:
	mov	DWORD PTR tv249[ebp], 0
$LN22@switchTo:
	mov	eax, DWORD PTR tv249[ebp]
	push	eax
	push	2024					; 000007e8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 305
	movzx	eax, BYTE PTR _toText$[ebp]
	test	eax, eax
	jne	SHORT $LN23@switchTo
	mov	DWORD PTR tv262[ebp], 1
	jmp	SHORT $LN24@switchTo
$LN23@switchTo:
	mov	DWORD PTR tv262[ebp], 0
$LN24@switchTo:
	mov	ecx, DWORD PTR tv262[ebp]
	push	ecx
	push	2026					; 000007eaH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 306
	movzx	ecx, BYTE PTR _toText$[ebp]
	test	ecx, ecx
	jne	SHORT $LN25@switchTo
	mov	DWORD PTR tv275[ebp], 1
	jmp	SHORT $LN26@switchTo
$LN25@switchTo:
	mov	DWORD PTR tv275[ebp], 0
$LN26@switchTo:
	mov	edx, DWORD PTR tv275[ebp]
	push	edx
	push	2025					; 000007e9H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 307
	movzx	edx, BYTE PTR _toText$[ebp]
	test	edx, edx
	jne	SHORT $LN27@switchTo
	mov	DWORD PTR tv288[ebp], 1
	jmp	SHORT $LN28@switchTo
$LN27@switchTo:
	mov	DWORD PTR tv288[ebp], 0
$LN28@switchTo:
	mov	eax, DWORD PTR tv288[ebp]
	push	eax
	push	2027					; 000007ebH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 308
	movzx	eax, BYTE PTR _toText$[ebp]
	test	eax, eax
	jne	SHORT $LN29@switchTo
	mov	DWORD PTR tv301[ebp], 1
	jmp	SHORT $LN30@switchTo
$LN29@switchTo:
	mov	DWORD PTR tv301[ebp], 0
$LN30@switchTo:
	mov	ecx, DWORD PTR tv301[ebp]
	push	ecx
	push	2035					; 000007f3H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 310
	movzx	ecx, BYTE PTR _toText$[ebp]
	test	ecx, ecx
	je	SHORT $LN31@switchTo
	mov	edx, DWORD PTR _hText$[ebp]
	mov	DWORD PTR tv314[ebp], edx
	jmp	SHORT $LN32@switchTo
$LN31@switchTo:
	mov	eax, DWORD PTR _hNum$[ebp]
	mov	DWORD PTR tv314[ebp], eax
$LN32@switchTo:
	mov	ecx, DWORD PTR tv314[ebp]
	push	ecx
	call	DWORD PTR __imp__SetFocus@4
; Line 311
	mov	esp, ebp
	pop	ebp
	ret	4
?switchTo@ColumnEditorDlg@@QAEX_N@Z ENDP		; ColumnEditorDlg::switchTo
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_toShow$ = 8						; size = 1
?display@ColumnEditorDlg@@UBEX_N@Z PROC			; ColumnEditorDlg::display
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\scitillacomponent\columneditor.cpp
; Line 46
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 47
	movzx	eax, BYTE PTR _toShow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?display@Window@@UBEX_N@Z		; Window::display
; Line 48
	movzx	ecx, BYTE PTR _toShow$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@display
; Line 49
	push	2001					; 000007d1H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetFocus@4
$LN2@display:
; Line 50
	mov	esp, ebp
	pop	ebp
	ret	4
?display@ColumnEditorDlg@@UBEX_N@Z ENDP			; ColumnEditorDlg::display
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = -16						; size = 12
_this$ = -4						; size = 4
_hInst$ = 8						; size = 4
_hPere$ = 12						; size = 4
_ppEditView$ = 16					; size = 4
?init@ColumnEditorDlg@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z PROC ; ColumnEditorDlg::init
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\scitillacomponent\columneditor.cpp
; Line 38
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 39
	mov	eax, DWORD PTR _hPere$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hInst$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; Window::init
; Line 40
	cmp	DWORD PTR _ppEditView$[ebp], 0
	jne	SHORT $LN1@init
; Line 41
	push	OFFSET $SG168125
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0runtime_error@std@@QAE@PBD@Z		; std::runtime_error::runtime_error
	push	OFFSET __TI2?AVruntime_error@std@@
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	__CxxThrowException@8
$LN1@init:
; Line 42
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ppEditView$[ebp]
	mov	DWORD PTR [eax+32], ecx
$LN3@init:
; Line 43
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?init@ColumnEditorDlg@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z ENDP ; ColumnEditorDlg::init
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getFocus@Window@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFocus@Window@@QBEXXZ PROC				; Window::getFocus, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 105
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 106
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__SetFocus@4
; Line 107
	mov	esp, ebp
	pop	ebp
	ret	0
?getFocus@Window@@QBEXXZ ENDP				; Window::getFocus
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?display@Window@@UBEX_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_toShow$ = 8						; size = 1
?display@Window@@UBEX_N@Z PROC				; Window::display, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	movzx	eax, BYTE PTR _toShow$[ebp]
	test	eax, eax
	je	SHORT $LN3@display
	mov	DWORD PTR tv67[ebp], 5
	jmp	SHORT $LN4@display
$LN3@display:
	mov	DWORD PTR tv67[ebp], 0
$LN4@display:
	mov	ecx, DWORD PTR tv67[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__ShowWindow@8
; Line 50
	mov	esp, ebp
	pop	ebp
	ret	4
?display@Window@@UBEX_N@Z ENDP				; Window::display
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hInst$ = 8						; size = 4
_parent$ = 12						; size = 4
?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z PROC	; Window::init, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 42
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _hInst$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 43
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _parent$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 44
	mov	esp, ebp
	pop	ebp
	ret	8
?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ENDP	; Window::init
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1runtime_error@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7runtime_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1exception@std@@UAE@XZ		; std::exception::~exception
__ehhandler$??0runtime_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
; Function compile flags: /Odtp
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1runtime_error@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1runtime_error@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1exception@std@@UAE@XZ		; std::exception::~exception
__ehhandler$??1runtime_error@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1runtime_error@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
; Function compile flags: /Odtp
;	COMDAT ??0runtime_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@PBD@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\stdexcept
; Line 178
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0runtime_error@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7runtime_error@std@@6B@
; Line 179
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1exception@std@@UAE@XZ		; std::exception::~exception
__ehhandler$??0runtime_error@std@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@PBD@Z ENDP			; std::runtime_error::runtime_error
; Function compile flags: /Odtp
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2294
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2295
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:
; Line 2296
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2289
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2290
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:
; Line 2291
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2272
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2273
	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:
; Line 2275
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 16			; 00000010H
	jb	SHORT $LN3@Tidy
; Line 2277
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Ptr$1[ebp], eax
; Line 2278
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
; Line 2279
	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy
; Line 2281
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:
; Line 2282
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:
; Line 2284
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 15			; 0000000fH
; Line 2285
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Line 2286
	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2256
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2258
	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:
; Line 2259
	xor	al, al
	jmp	SHORT $LN4@Inside
; Line 2260
	jmp	SHORT $LN4@Inside
$LN3@Inside:
; Line 2261
	mov	al, 1
$LN4@Inside:
; Line 2262
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2242
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2243
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow
; Line 2244
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:
; Line 2245
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow
; Line 2246
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:
; Line 2247
	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow
; Line 2249
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:
; Line 2250
	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow
; Line 2251
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:
; Line 2252
	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:
; Line 2253
	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2236
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 2237
	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+20], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8
; Line 2238
	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2201
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 2202
	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax
; Line 2203
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy
; Line 2204
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:
; Line 2205
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	shr	ecx, 1
	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	esi, 3
	div	esi
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:
; Line 2207
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	shr	ecx, 1
	sub	eax, ecx
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], eax
	ja	SHORT $LN5@Copy
; Line 2209
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR __Newres$[ebp], ecx
; Line 2210
	jmp	SHORT $LN8@Copy
$LN5@Copy:
; Line 2211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:
; Line 2214
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 2215
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:
; Line 2216
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 2217
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx
; Line 2218
	mov	BYTE PTR __$EHRec$[ebp+12], 2
; Line 2219
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:
; Line 2221
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Line 2222
	push	0
	push	0
	call	__CxxThrowException@8
; Line 2223
	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:
; Line 2224
	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:
; Line 2226
	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy
; Line 2228
	mov	edx, DWORD PTR __Oldlen$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:
; Line 2229
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Line 2230
	lea	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
; Line 2231
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 2232
	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:
; Line 2233
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1758
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 1759
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax
; Line 1760
	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]
; Line 1761
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1753
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1754
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
; Line 1755
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1342
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1343
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase
; Line 1344
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:
; Line 1345
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase
; Line 1346
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:
; Line 1347
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase
; Line 1349
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax
; Line 1350
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax
; Line 1351
	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH
; Line 1352
	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:
; Line 1354
	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:
; Line 1355
	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1334
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1335
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase
; Line 1336
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:
; Line 1337
	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Line 1338
	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:
; Line 1339
	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1168
	push	1168					; 00000490H
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	; std::_Debug_pointer<char>
	add	esp, 12					; 0000000cH
; Line 1169
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Line 1170
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1148
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1150
	cmp	DWORD PTR __Count$[ebp], 0
	je	SHORT $LN3@assign
; Line 1151
	push	1151					; 0000047fH
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	; std::_Debug_pointer<char>
	add	esp, 12					; 0000000cH
$LN3@assign:
; Line 1154
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@assign
; Line 1156
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN4@assign
$LN2@assign:
; Line 1158
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign
; Line 1160
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
; Line 1161
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:
; Line 1163
	mov	eax, DWORD PTR _this$[ebp]
$LN4@assign:
; Line 1164
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1129
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1130
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign
; Line 1131
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:
; Line 1132
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
; Line 1133
	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign
; Line 1134
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:
; Line 1136
	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign
; Line 1137
	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:
; Line 1138
	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign
; Line 1141
	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
; Line 1142
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:
; Line 1144
	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:
; Line 1145
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 990
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 991
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Line 992
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 780
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 781
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Line 782
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Line 783
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 683
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 684
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 685
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 672
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 674
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
; Line 675
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 676
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
; Line 677
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
; Line 678
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 679
	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 663
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 665
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
; Line 666
	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 667
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
; Line 668
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 669
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 649
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 650
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
; Line 651
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 643
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 645
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
; Line 646
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
; Function compile flags: /Odtp
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 517
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 520
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]
; Line 521
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 510
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 513
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]
; Line 514
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 492
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 494
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 495
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 496
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 883
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4
; Line 885
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 734
	push	ebp
	mov	ebp, esp
; Line 735
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size
; Line 736
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 611
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 612
	or	eax, -1
; Line 613
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8
; Line 579
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 3451
	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnext$1 = -4						; size = 4
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 192
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 194
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Orphan_me
; Line 196
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$1[ebp], edx
$LN3@Orphan_me:
; Line 197
	mov	eax, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Orphan_me
	mov	ecx, DWORD PTR __Pnext$1[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _this$[ebp]
	je	SHORT $LN2@Orphan_me
; Line 198
	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$1[ebp], ecx
	jmp	SHORT $LN3@Orphan_me
$LN2@Orphan_me:
; Line 200
	mov	edx, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN1@Orphan_me
; Line 201
	push	201					; 000000c9H
	push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN1@Orphan_me:
; Line 202
	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
; Line 203
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@Orphan_me:
; Line 206
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ PROC	; std::_Iterator_base12::_Getpnext, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 187
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 188
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
; Line 189
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ENDP	; std::_Iterator_base12::_Getpnext
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 182
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 183
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getcont
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Getcont
$LN3@Getcont:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv68[ebp], eax
$LN4@Getcont:
	mov	eax, DWORD PTR tv68[ebp]
; Line 184
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Clrcont@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Clrcont@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Clrcont, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 177
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 178
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 179
	mov	esp, ebp
	pop	ebp
	ret	0
?_Clrcont@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Clrcont
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$2 = -28						; size = 4
__Lock$3 = -24						; size = 4
__Parent_proxy$4 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 148
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 149
	cmp	DWORD PTR __Parent$[ebp], 0
	jne	SHORT $LN3@Adopt
; Line 152
	push	3
	lea	ecx, DWORD PTR __Lock$3[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 153
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me
; Line 155
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$3[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
; Line 156
	jmp	SHORT $LN4@Adopt
$LN3@Adopt:
; Line 158
	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Parent_proxy$4[ebp], ecx
; Line 161
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Parent_proxy$4[ebp]
	je	SHORT $LN4@Adopt
; Line 163
	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 164
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me
; Line 165
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Parent_proxy$4[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
; Line 166
	mov	ecx, DWORD PTR __Parent_proxy$4[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 167
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent_proxy$4[ebp]
	mov	DWORD PTR [eax], ecx
; Line 168
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN4@Adopt:
; Line 174
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0:
	lea	ecx, DWORD PTR __Lock$3[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1:
	lea	ecx, DWORD PTR __Lock$2[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
; Function compile flags: /Odtp
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 140
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Iterator_base12@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 142
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 143
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me
; Line 145
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$??1_Iterator_base12@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
; Function compile flags: /Odtp
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Lock$2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 124
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 125
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN4@operator
	jmp	SHORT $LN3@operator
$LN4@operator:
; Line 127
	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@operator
; Line 128
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
; Line 129
	jmp	SHORT $LN3@operator
$LN2@operator:
; Line 132
	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me
; Line 135
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN3@operator:
; Line 136
	mov	eax, DWORD PTR _this$[ebp]
; Line 137
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0:
	lea	ecx, DWORD PTR __Lock$2[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
; Function compile flags: /Odtp
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 119
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 120
	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=
; Line 121
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 114
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Lock$2 = -24						; size = 4
_this$ = -20						; size = 4
__Pnext$3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 214
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 216
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Orphan_all
; Line 218
	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 220
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$3[ebp], edx
; Line 221
	jmp	SHORT $LN3@Orphan_all
$LN2@Orphan_all:
	mov	eax, DWORD PTR __Pnext$3[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$3[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN3@Orphan_all:
	mov	ecx, DWORD PTR __Pnext$3[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@Orphan_all
; Line 222
	mov	edx, DWORD PTR __Pnext$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN2@Orphan_all
$LN1@Orphan_all:
; Line 223
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], 0
; Line 224
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN5@Orphan_all:
; Line 226
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0:
	lea	ecx, DWORD PTR __Lock$2[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp
;	COMDAT ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Container_base12::_Getpfirst, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 99
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 100
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getpfirst
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Getpfirst
$LN3@Getpfirst:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR tv68[ebp], edx
$LN4@Getpfirst:
	mov	eax, DWORD PTR tv68[ebp]
; Line 101
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Container_base12::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::~_Container_base12, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 94
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 95
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 96
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::~_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 80
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 81
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 563
	push	ebp
	mov	ebp, esp
; Line 564
	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
; Line 565
	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 551
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 553
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]
; Line 554
	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 528
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 530
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]
; Line 531
	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 521
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 523
	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]
; Line 524
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 346
	push	ebp
	mov	ebp, esp
; Line 347
	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
; Line 348
	pop	ebp
	ret	0
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$char_traits@_W@std@@SAPA_WPA_WI_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 2
?assign@?$char_traits@_W@std@@SAPA_WPA_WI_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 341
	push	ebp
	mov	ebp, esp
; Line 342
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	movzx	ecx, WORD PTR __Ch$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_wmemset
	add	esp, 12					; 0000000cH
; Line 343
	pop	ebp
	ret	0
?assign@?$char_traits@_W@std@@SAPA_WPA_WI_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z PROC	; std::char_traits<wchar_t>::move, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 334
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 336
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_wmemmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]
; Line 337
	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ENDP	; std::char_traits<wchar_t>::move
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z PROC	; std::char_traits<wchar_t>::copy, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 311
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 313
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_wmemcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]
; Line 314
	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ENDP	; std::char_traits<wchar_t>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?length@?$char_traits@_W@std@@SAIPB_W@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@_W@std@@SAIPB_W@Z PROC		; std::char_traits<wchar_t>::length, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 304
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 306
	mov	eax, DWORD PTR __First$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_wcslen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]
; Line 307
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@_W@std@@SAIPB_W@Z ENDP		; std::char_traits<wchar_t>::length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new
; Line 64
	push	ebp
	mov	ebp, esp
; Line 65
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new
; Line 59
	push	ebp
	mov	ebp, esp
; Line 60
	mov	eax, DWORD PTR __Where$[ebp]
; Line 61
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _wmemset
_TEXT	SEGMENT
__Su$ = -4						; size = 4
__S$ = 8						; size = 4
__C$ = 12						; size = 2
__N$ = 16						; size = 4
_wmemset PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\wchar.h
; Line 1296
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1297
	mov	eax, DWORD PTR __S$[ebp]
	mov	DWORD PTR __Su$[ebp], eax
; Line 1298
	jmp	SHORT $LN3@wmemset
$LN2@wmemset:
	mov	ecx, DWORD PTR __Su$[ebp]
	add	ecx, 2
	mov	DWORD PTR __Su$[ebp], ecx
	mov	edx, DWORD PTR __N$[ebp]
	sub	edx, 1
	mov	DWORD PTR __N$[ebp], edx
$LN3@wmemset:
	cmp	DWORD PTR __N$[ebp], 0
	jbe	SHORT $LN1@wmemset
; Line 1300
	mov	eax, DWORD PTR __Su$[ebp]
	mov	cx, WORD PTR __C$[ebp]
	mov	WORD PTR [eax], cx
; Line 1301
	jmp	SHORT $LN2@wmemset
$LN1@wmemset:
; Line 1302
	mov	eax, DWORD PTR __S$[ebp]
; Line 1303
	mov	esp, ebp
	pop	ebp
	ret	0
_wmemset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _wmemmove
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemmove PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\wchar.h
; Line 1279
	push	ebp
	mov	ebp, esp
; Line 1284
	mov	eax, DWORD PTR __N$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR __S2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __S1$[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH
; Line 1286
	pop	ebp
	ret	0
_wmemmove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\wchar.h
; Line 1271
	push	ebp
	mov	ebp, esp
; Line 1274
	mov	eax, DWORD PTR __N$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR __S2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __S1$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1276
	pop	ebp
	ret	0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _hypot
_TEXT	SEGMENT
__X$ = 8						; size = 8
__Y$ = 16						; size = 8
_hypot	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 556
	push	ebp
	mov	ebp, esp
; Line 557
	sub	esp, 8
	movsd	xmm0, QWORD PTR __Y$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __X$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	__hypot
	add	esp, 16					; 00000010H
; Line 558
	pop	ebp
	ret	0
_hypot	ENDP
_TEXT	ENDS
END
