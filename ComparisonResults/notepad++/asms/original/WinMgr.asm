; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\src\WinControls\WindowsDlg\WinMgr.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_SIZEZERO DD	00H
	DD	00H
_SIZEMAX DD	07fffH
	DD	07fffH
$SG63879 DB	'W', 00H, 'M', 00H, '_', 00H, 'W', 00H, 'I', 00H, 'N', 00H
	DB	'M', 00H, 'G', 00H, 'R', 00H, 00H, 00H
$SG63918 DB	'h', 00H, 'W', 00H, 'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG63917 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, 'D', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+6
$SG63920 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, 'D', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG63921 DB	'm', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'p', 00H, 00H, 00H
$SG63933 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, 'D', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG63934 DB	'm', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'p', 00H, 00H, 00H
$SG63936 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, 'D', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG63937 DB	'h', 00H, 'W', 00H, 'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG63961 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, 'D', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG63962 DB	'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, 'n', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG63971 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, 'D', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG63972 DB	'm', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'p', 00H, 00H, 00H
$SG63984 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, 'D', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG63985 DB	'm', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'p', 00H, 00H, 00H
$SG63998 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, 'D', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG63999 DB	'p', 00H, 'G', 00H, 'r', 00H, 'o', 00H, 'u', 00H, 'p', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'p', 00H, 'G', 00H, 'r'
	DB	00H, 'o', 00H, 'u', 00H, 'p', 00H, '-', 00H, '>', 00H, 'I', 00H
	DB	's', 00H, 'G', 00H, 'r', 00H, 'o', 00H, 'u', 00H, 'p', 00H, '('
	DB	00H, ')', 00H, 00H, 00H
	ORG $+4
$SG64001 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, 'D', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG64002 DB	'h', 00H, 'W', 00H, 'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG64017 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, 'D', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG64018 DB	'h', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'm', 00H, 'a', 00H
	DB	'i', 00H, 'n', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '>', 00H, '='
	DB	00H, '0', 00H, 00H, 00H
	ORG $+6
$SG64026 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, 'D', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG64027 DB	'p', 00H, 'R', 00H, 'e', 00H, 's', 00H, 't', 00H, 'R', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, '=', 00H, '=', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+4
$SG64030 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, 'D', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG64031 DB	'h', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'm', 00H, 'a', 00H
	DB	'i', 00H, 'n', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '>', 00H, '='
	DB	00H, '0', 00H, 00H, 00H
	ORG $+6
$SG64034 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, 'D', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG64035 DB	'h', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'm', 00H, 'a', 00H
	DB	'i', 00H, 'n', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '=', 00H, '='
	DB	00H, '0', 00H, 00H, 00H
	ORG $+6
$SG64093 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, 'D', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG64094 DB	'p', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	00H, 00H
	ORG $+6
$SG64111 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, 'D', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG64112 DB	'0', 00H, '<', 00H, 'p', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'p', 00H, 'c', 00H, 't', 00H, '<'
	DB	00H, '1', 00H, '0', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG64124 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, 'D', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG64125 DB	'F', 00H, 'A', 00H, 'L', 00H, 'S', 00H, 'E', 00H, 00H, 00H
$SG64179 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, 'D', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG64180 DB	'p', 00H, 'w', 00H, 'r', 00H, 'c', 00H, 'M', 00H, 'o', 00H
	DB	'v', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG64183 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, 'D', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG64184 DB	'p', 00H, 'r', 00H, 'e', 00H, 'v', 00H, 00H, 00H
	ORG $+2
$SG64187 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, 'D', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG64188 DB	'n', 00H, 'e', 00H, 'x', 00H, 't', 00H, 00H, 00H
CONST	ENDS
PUBLIC	?GetSize@@YA?AUtagSIZE@@JJ@Z			; GetSize
PUBLIC	?GetPoint@@YA?AUtagPOINT@@JJ@Z			; GetPoint
PUBLIC	?RectWidth@@YAJABUtagRECT@@@Z			; RectWidth
PUBLIC	?RectHeight@@YAJABUtagRECT@@@Z			; RectHeight
PUBLIC	?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z	; RectToSize
PUBLIC	?RectToPoint@@YA?AUtagPOINT@@ABUtagRECT@@@Z	; RectToPoint
PUBLIC	?SizeToPoint@@YA?AUtagPOINT@@UtagSIZE@@@Z	; SizeToPoint
PUBLIC	?OffsetRect@@YAAAUtagRECT@@AAU1@UtagPOINT@@@Z	; OffsetRect
PUBLIC	?minsize@@YA?AUtagSIZE@@U1@0@Z			; minsize
PUBLIC	?maxsize@@YA?AUtagSIZE@@U1@0@Z			; maxsize
PUBLIC	?Prev@WINRECT@@QAEPAV1@XZ			; WINRECT::Prev
PUBLIC	?Next@WINRECT@@QAEPAV1@XZ			; WINRECT::Next
PUBLIC	?Children@WINRECT@@QAEPAV1@XZ			; WINRECT::Children
PUBLIC	?GetParam@WINRECT@@QAEJXZ			; WINRECT::GetParam
PUBLIC	?GetID@WINRECT@@QAEIXZ				; WINRECT::GetID
PUBLIC	?GetRect@WINRECT@@QAEAAUtagRECT@@XZ		; WINRECT::GetRect
PUBLIC	?Type@WINRECT@@QBEGXZ				; WINRECT::Type
PUBLIC	?GroupType@WINRECT@@QBEGXZ			; WINRECT::GroupType
PUBLIC	?IsGroup@WINRECT@@QBEHXZ			; WINRECT::IsGroup
PUBLIC	?IsEnd@WINRECT@@QBEHXZ				; WINRECT::IsEnd
PUBLIC	?IsWindow@WINRECT@@QBEHXZ			; WINRECT::IsWindow
PUBLIC	?IsRowGroup@WINRECT@@QBEHXZ			; WINRECT::IsRowGroup
PUBLIC	?SetHeight@WINRECT@@QAEXJ@Z			; WINRECT::SetHeight
PUBLIC	?SetWidth@WINRECT@@QAEXJ@Z			; WINRECT::SetWidth
PUBLIC	?GetHeightOrWidth@WINRECT@@QBEJH@Z		; WINRECT::GetHeightOrWidth
PUBLIC	?SetHeightOrWidth@WINRECT@@QAEXJH@Z		; WINRECT::SetHeightOrWidth
PUBLIC	?HasToFitSize@WINRECT@@QAEHXZ			; WINRECT::HasToFitSize
PUBLIC	?GetToFitSize@WINRECT@@QAE?AUtagSIZE@@XZ	; WINRECT::GetToFitSize
PUBLIC	?SetToFitSize@WINRECT@@QAEXUtagSIZE@@@Z		; WINRECT::SetToFitSize
PUBLIC	??0CWinGroupIterator@@QAE@XZ			; CWinGroupIterator::CWinGroupIterator
PUBLIC	??4CWinGroupIterator@@QAEAAV0@PAVWINRECT@@@Z	; CWinGroupIterator::operator=
PUBLIC	??BCWinGroupIterator@@QAEPAVWINRECT@@XZ		; CWinGroupIterator::operator WINRECT *
PUBLIC	?Next@CWinGroupIterator@@QAEPAVWINRECT@@XZ	; CWinGroupIterator::Next
PUBLIC	??0NMWINMGR@@QAE@XZ				; NMWINMGR::NMWINMGR
PUBLIC	??0CWinMgr@@QAE@PAVWINRECT@@@Z			; CWinMgr::CWinMgr
PUBLIC	??1CWinMgr@@UAE@XZ				; CWinMgr::~CWinMgr
PUBLIC	?GetWindowPositions@CWinMgr@@UAEXPAUHWND__@@@Z	; CWinMgr::GetWindowPositions
PUBLIC	?SetWindowPositions@CWinMgr@@UAEXPAUHWND__@@@Z	; CWinMgr::SetWindowPositions
PUBLIC	?OnGetSizeInfo@CWinMgr@@UAEXAAUSIZEINFO@@PAVWINRECT@@PAUHWND__@@@Z ; CWinMgr::OnGetSizeInfo
PUBLIC	?MoveRect@CWinMgr@@QAEXPAVWINRECT@@UtagPOINT@@PAUHWND__@@@Z ; CWinMgr::MoveRect
PUBLIC	?FindRect@CWinMgr@@QAEPAVWINRECT@@H@Z		; CWinMgr::FindRect
PUBLIC	?GetMinMaxInfo@CWinMgr@@QAEXPAUHWND__@@PAUtagMINMAXINFO@@@Z ; CWinMgr::GetMinMaxInfo
PUBLIC	?GetMinMaxInfo@CWinMgr@@QAEXPAUHWND__@@AAUSIZEINFO@@@Z ; CWinMgr::GetMinMaxInfo
PUBLIC	?InitToFitSizeFromCurrent@CWinMgr@@QAEXPAUHWND__@@@Z ; CWinMgr::InitToFitSizeFromCurrent
PUBLIC	?CountWindows@CWinMgr@@IAEHXZ			; CWinMgr::CountWindows
PUBLIC	?SendGetSizeInfo@CWinMgr@@IAEHAAUSIZEINFO@@PAUHWND__@@I@Z ; CWinMgr::SendGetSizeInfo
PUBLIC	?CalcGroup@CWinMgr@@MAEXPAVWINRECT@@PAUHWND__@@@Z ; CWinMgr::CalcGroup
PUBLIC	?AdjustSize@CWinMgr@@MAEXPAVWINRECT@@HAAHPAUHWND__@@@Z ; CWinMgr::AdjustSize
PUBLIC	?PositionRects@CWinMgr@@MAEXPAVWINRECT@@ABUtagRECT@@H@Z ; CWinMgr::PositionRects
PUBLIC	??_GCWinMgr@@UAEPAXI@Z				; CWinMgr::`scalar deleting destructor'
PUBLIC	??_C@_1KO@LJAFCIDL@?$AAc?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@ ; `string'
PUBLIC	??_C@_1BM@GEOBLKFJ@?$AAp?$AAg?$AA?9?$AA?$DO?$AAI?$AAs?$AAG?$AAr?$AAo?$AAu?$AAp?$AA?$CI?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	?WM_WINMGR@@3IB					; WM_WINMGR
PUBLIC	??_7CWinMgr@@6B@				; CWinMgr::`vftable'
PUBLIC	??_R4CWinMgr@@6B@				; CWinMgr::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWinMgr@@@8				; CWinMgr `RTTI Type Descriptor'
PUBLIC	??_R3CWinMgr@@8					; CWinMgr::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWinMgr@@8					; CWinMgr::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWinMgr@@8			; CWinMgr::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__wassert:PROC
EXTRN	_memset:PROC
EXTRN	__imp__RegisterWindowMessageW@4:PROC
EXTRN	__imp__SendMessageW@16:PROC
EXTRN	__imp__BeginDeferWindowPos@4:PROC
EXTRN	__imp__DeferWindowPos@32:PROC
EXTRN	__imp__EndDeferWindowPos@4:PROC
EXTRN	__imp__IsWindowVisible@4:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	__imp__GetSystemMetrics@4:PROC
EXTRN	__imp__GetMenu@4:PROC
EXTRN	__imp__InvalidateRect@12:PROC
EXTRN	__imp__GetWindowRect@8:PROC
EXTRN	__imp__ScreenToClient@8:PROC
EXTRN	__imp__InflateRect@12:PROC
EXTRN	__imp__GetWindowLongW@8:PROC
EXTRN	_abs:PROC
EXTRN	?InitMap@WINRECT@@SAPAV1@PAV1@0@Z:PROC		; WINRECT::InitMap
EXTRN	?Parent@WINRECT@@QAEPAV1@XZ:PROC		; WINRECT::Parent
EXTRN	?GetMargins@WINRECT@@QAEHAAH0@Z:PROC		; WINRECT::GetMargins
EXTRN	??_ECWinMgr@@UAEPAXI@Z:PROC			; CWinMgr::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?WM_WINMGR@@3IB DD 01H DUP (?)				; WM_WINMGR
_BSS	ENDS
CRT$XCU	SEGMENT
_WM_WINMGR$initializer$ DD FLAT:??__EWM_WINMGR@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CWinMgr@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWinMgr@@8 DD FLAT:??_R0?AVCWinMgr@@@8	; CWinMgr::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWinMgr@@8
rdata$r	ENDS
;	COMDAT ??_R2CWinMgr@@8
rdata$r	SEGMENT
??_R2CWinMgr@@8 DD FLAT:??_R1A@?0A@EA@CWinMgr@@8	; CWinMgr::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWinMgr@@8
rdata$r	SEGMENT
??_R3CWinMgr@@8 DD 00H					; CWinMgr::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWinMgr@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWinMgr@@@8
data$r	SEGMENT
??_R0?AVCWinMgr@@@8 DD FLAT:??_7type_info@@6B@		; CWinMgr `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWinMgr@@', 00H
data$r	ENDS
;	COMDAT ??_R4CWinMgr@@6B@
rdata$r	SEGMENT
??_R4CWinMgr@@6B@ DD 00H				; CWinMgr::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWinMgr@@@8
	DD	FLAT:??_R3CWinMgr@@8
rdata$r	ENDS
;	COMDAT ??_7CWinMgr@@6B@
CONST	SEGMENT
??_7CWinMgr@@6B@ DD FLAT:??_R4CWinMgr@@6B@		; CWinMgr::`vftable'
	DD	FLAT:??_ECWinMgr@@UAEPAXI@Z
	DD	FLAT:?GetWindowPositions@CWinMgr@@UAEXPAUHWND__@@@Z
	DD	FLAT:?SetWindowPositions@CWinMgr@@UAEXPAUHWND__@@@Z
	DD	FLAT:?OnGetSizeInfo@CWinMgr@@UAEXAAUSIZEINFO@@PAVWINRECT@@PAUHWND__@@@Z
	DD	FLAT:?CalcGroup@CWinMgr@@MAEXPAVWINRECT@@PAUHWND__@@@Z
	DD	FLAT:?AdjustSize@CWinMgr@@MAEXPAVWINRECT@@HAAHPAUHWND__@@@Z
	DD	FLAT:?PositionRects@CWinMgr@@MAEXPAVWINRECT@@ABUtagRECT@@H@Z
CONST	ENDS
;	COMDAT ??_C@_1BM@GEOBLKFJ@?$AAp?$AAg?$AA?9?$AA?$DO?$AAI?$AAs?$AAG?$AAr?$AAo?$AAu?$AAp?$AA?$CI?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@GEOBLKFJ@?$AAp?$AAg?$AA?9?$AA?$DO?$AAI?$AAs?$AAG?$AAr?$AAo?$AAu?$AAp?$AA?$CI?$AA?$CJ?$AA?$AA@ DB 'p'
	DB	00H, 'g', 00H, '-', 00H, '>', 00H, 'I', 00H, 's', 00H, 'G', 00H
	DB	'r', 00H, 'o', 00H, 'u', 00H, 'p', 00H, '(', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1KO@LJAFCIDL@?$AAc?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@
CONST	SEGMENT
??_C@_1KO@LJAFCIDL@?$AAc?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'w', 00H, 'o', 00H, 'r', 00H, 'k', 00H
	DB	's', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'e', 00H, '\', 00H, 'n'
	DB	00H, 'o', 00H, 't', 00H, 'e', 00H, 'p', 00H, 'a', 00H, 'd', 00H
	DB	'-', 00H, 'p', 00H, 'l', 00H, 'u', 00H, 's', 00H, '-', 00H, 'p'
	DB	00H, 'l', 00H, 'u', 00H, 's', 00H, '-', 00H, '6', 00H, '.', 00H
	DB	'7', 00H, '.', 00H, '9', 00H, '.', 00H, '2', 00H, '\', 00H, 'p'
	DB	00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'd', 00H
	DB	'i', 00H, 't', 00H, 'o', 00H, 'r', 00H, '\', 00H, 's', 00H, 'r'
	DB	00H, 'c', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's'
	DB	00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'w', 00H, 's', 00H, 'd', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W'
	DB	00H, 'i', 00H, 'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__EWM_WINMGR@@YAXXZ
text$di	SEGMENT
??__EWM_WINMGR@@YAXXZ PROC				; `dynamic initializer for 'WM_WINMGR'', COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.cpp
; Line 23
	push	ebp
	mov	ebp, esp
	push	OFFSET $SG63879
	call	DWORD PTR __imp__RegisterWindowMessageW@4
	mov	DWORD PTR ?WM_WINMGR@@3IB, eax		; WM_WINMGR
	pop	ebp
	ret	0
??__EWM_WINMGR@@YAXXZ ENDP				; `dynamic initializer for 'WM_WINMGR''
text$di	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_hWnd$ = 8						; size = 4
?GetExStyle@@YAKPAUHWND__@@@Z PROC			; GetExStyle
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.cpp
; Line 19
	push	ebp
	mov	ebp, esp
; Line 20
	push	-20					; ffffffecH
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowLongW@8
; Line 21
	pop	ebp
	ret	0
?GetExStyle@@YAKPAUHWND__@@@Z ENDP			; GetExStyle
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_hWnd$ = 8						; size = 4
?GetStyle@@YAKPAUHWND__@@@Z PROC			; GetStyle
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.cpp
; Line 15
	push	ebp
	mov	ebp, esp
; Line 16
	push	-16					; fffffff0H
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowLongW@8
; Line 17
	pop	ebp
	ret	0
?GetStyle@@YAKPAUHWND__@@@Z ENDP			; GetStyle
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCWinMgr@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCWinMgr@@UAEPAXI@Z PROC				; CWinMgr::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CWinMgr@@UAE@XZ			; CWinMgr::~CWinMgr
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCWinMgr@@UAEPAXI@Z ENDP				; CWinMgr::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -32						; size = 4
_wrc$1 = -28						; size = 4
_width$2 = -24						; size = 4
_height$3 = -20						; size = 4
tv67 = -16						; size = 4
_it$ = -12						; size = 4
_xoryPos$ = -8						; size = 4
_rc$4 = -4						; size = 4
_pGroup$ = 8						; size = 4
_rcTotal$ = 12						; size = 4
_bRow$ = 16						; size = 4
?PositionRects@CWinMgr@@MAEXPAVWINRECT@@ABUtagRECT@@H@Z PROC ; CWinMgr::PositionRects
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.cpp
; Line 241
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx
; Line 242
	cmp	DWORD PTR _bRow$[ebp], 0
	je	SHORT $LN8@PositionRe
	mov	eax, DWORD PTR _rcTotal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv67[ebp], ecx
	jmp	SHORT $LN9@PositionRe
$LN8@PositionRe:
	mov	edx, DWORD PTR _rcTotal$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv67[ebp], eax
$LN9@PositionRe:
	mov	ecx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _xoryPos$[ebp], ecx
; Line 244
	lea	ecx, DWORD PTR _it$[ebp]
	call	??0CWinGroupIterator@@QAE@XZ		; CWinGroupIterator::CWinGroupIterator
; Line 245
	mov	edx, DWORD PTR _pGroup$[ebp]
	push	edx
	lea	ecx, DWORD PTR _it$[ebp]
	call	??4CWinGroupIterator@@QAEAAV0@PAVWINRECT@@@Z ; CWinGroupIterator::operator=
	jmp	SHORT $LN5@PositionRe
$LN4@PositionRe:
	lea	ecx, DWORD PTR _it$[ebp]
	call	?Next@CWinGroupIterator@@QAEPAVWINRECT@@XZ ; CWinGroupIterator::Next
$LN5@PositionRe:
	lea	ecx, DWORD PTR _it$[ebp]
	call	??BCWinGroupIterator@@QAEPAVWINRECT@@XZ	; CWinGroupIterator::operator WINRECT *
	test	eax, eax
	je	$LN6@PositionRe
; Line 246
	lea	ecx, DWORD PTR _it$[ebp]
	call	??BCWinGroupIterator@@QAEPAVWINRECT@@XZ	; CWinGroupIterator::operator WINRECT *
	mov	DWORD PTR _wrc$1[ebp], eax
; Line 247
	mov	ecx, DWORD PTR _wrc$1[ebp]
	call	?GetRect@WINRECT@@QAEAAUtagRECT@@XZ	; WINRECT::GetRect
	mov	DWORD PTR _rc$4[ebp], eax
; Line 248
	cmp	DWORD PTR _bRow$[ebp], 0
	je	SHORT $LN2@PositionRe
; Line 249
	mov	eax, DWORD PTR _rc$4[ebp]
	push	eax
	call	?RectHeight@@YAJABUtagRECT@@@Z		; RectHeight
	add	esp, 4
	mov	DWORD PTR _height$3[ebp], eax
; Line 250
	mov	ecx, DWORD PTR _rc$4[ebp]
	mov	edx, DWORD PTR _xoryPos$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 251
	mov	eax, DWORD PTR _rc$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _height$3[ebp]
	mov	edx, DWORD PTR _rc$4[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 252
	mov	eax, DWORD PTR _rc$4[ebp]
	mov	ecx, DWORD PTR _rcTotal$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 253
	mov	eax, DWORD PTR _rc$4[ebp]
	mov	ecx, DWORD PTR _rcTotal$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
; Line 254
	mov	eax, DWORD PTR _xoryPos$[ebp]
	add	eax, DWORD PTR _height$3[ebp]
	mov	DWORD PTR _xoryPos$[ebp], eax
; Line 256
	jmp	SHORT $LN1@PositionRe
$LN2@PositionRe:
; Line 257
	mov	ecx, DWORD PTR _rc$4[ebp]
	push	ecx
	call	?RectWidth@@YAJABUtagRECT@@@Z		; RectWidth
	add	esp, 4
	mov	DWORD PTR _width$2[ebp], eax
; Line 258
	mov	edx, DWORD PTR _rc$4[ebp]
	mov	eax, DWORD PTR _xoryPos$[ebp]
	mov	DWORD PTR [edx], eax
; Line 259
	mov	ecx, DWORD PTR _rc$4[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _width$2[ebp]
	mov	eax, DWORD PTR _rc$4[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 260
	mov	ecx, DWORD PTR _rc$4[ebp]
	mov	edx, DWORD PTR _rcTotal$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
; Line 261
	mov	ecx, DWORD PTR _rc$4[ebp]
	mov	edx, DWORD PTR _rcTotal$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
; Line 262
	mov	ecx, DWORD PTR _xoryPos$[ebp]
	add	ecx, DWORD PTR _width$2[ebp]
	mov	DWORD PTR _xoryPos$[ebp], ecx
$LN1@PositionRe:
; Line 264
	jmp	$LN4@PositionRe
$LN6@PositionRe:
; Line 265
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?PositionRects@CWinMgr@@MAEXPAVWINRECT@@ABUtagRECT@@H@Z ENDP ; CWinMgr::PositionRects
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = -76						; size = 4
_this$ = -72						; size = 4
_hwCurrent$ = -68					; size = 4
tv90 = -64						; size = 4
tv94 = -60						; size = 4
_rc$1 = -56						; size = 4
tv93 = -52						; size = 4
tv83 = -48						; size = 4
_hw$ = -44						; size = 4
_hwExtra$ = -40						; size = 4
_szi$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_wrc$ = 8						; size = 4
_bRow$ = 12						; size = 4
_hwRemaining$ = 16					; size = 4
_hWnd$ = 20						; size = 4
?AdjustSize@CWinMgr@@MAEXPAVWINRECT@@HAAHPAUHWND__@@@Z PROC ; CWinMgr::AdjustSize
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.cpp
; Line 209
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 211
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wrc$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szi$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
; Line 212
	cmp	DWORD PTR _bRow$[ebp], 0
	je	SHORT $LN4@AdjustSize
	mov	ecx, DWORD PTR _szi$[ebp+12]
	mov	DWORD PTR tv71[ebp], ecx
	jmp	SHORT $LN5@AdjustSize
$LN4@AdjustSize:
	mov	edx, DWORD PTR _szi$[ebp+8]
	mov	DWORD PTR tv71[ebp], edx
$LN5@AdjustSize:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _hw$[ebp], eax
; Line 213
	mov	ecx, DWORD PTR _wrc$[ebp]
	call	?Type@WINRECT@@QBEGXZ			; WINRECT::Type
	movzx	ecx, ax
	cmp	ecx, 3
	jne	SHORT $LN1@AdjustSize
; Line 215
	mov	ecx, DWORD PTR _wrc$[ebp]
	call	?GetRect@WINRECT@@QAEAAUtagRECT@@XZ	; WINRECT::GetRect
	mov	DWORD PTR _rc$1[ebp], eax
; Line 216
	cmp	DWORD PTR _bRow$[ebp], 0
	je	SHORT $LN6@AdjustSize
	mov	edx, DWORD PTR _rc$1[ebp]
	push	edx
	call	?RectHeight@@YAJABUtagRECT@@@Z		; RectHeight
	add	esp, 4
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN7@AdjustSize
$LN6@AdjustSize:
	mov	eax, DWORD PTR _rc$1[ebp]
	push	eax
	call	?RectWidth@@YAJABUtagRECT@@@Z		; RectWidth
	add	esp, 4
	mov	DWORD PTR tv83[ebp], eax
$LN7@AdjustSize:
	mov	ecx, DWORD PTR _hwRemaining$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _hw$[ebp], edx
$LN1@AdjustSize:
; Line 224
	mov	eax, DWORD PTR _bRow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wrc$[ebp]
	call	?GetHeightOrWidth@WINRECT@@QBEJH@Z	; WINRECT::GetHeightOrWidth
	mov	DWORD PTR _hwCurrent$[ebp], eax
; Line 225
	mov	ecx, DWORD PTR _hw$[ebp]
	sub	ecx, DWORD PTR _hwCurrent$[ebp]
	mov	DWORD PTR _hwExtra$[ebp], ecx
; Line 226
	cmp	DWORD PTR _hwExtra$[ebp], 0
	jle	SHORT $LN8@AdjustSize
	mov	edx, DWORD PTR _hwExtra$[ebp]
	mov	DWORD PTR tv90[ebp], edx
	jmp	SHORT $LN9@AdjustSize
$LN8@AdjustSize:
	mov	DWORD PTR tv90[ebp], 0
$LN9@AdjustSize:
	mov	eax, DWORD PTR _hwRemaining$[ebp]
	mov	ecx, DWORD PTR tv90[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN12@AdjustSize
	cmp	DWORD PTR _hwExtra$[ebp], 0
	jle	SHORT $LN10@AdjustSize
	mov	edx, DWORD PTR _hwExtra$[ebp]
	mov	DWORD PTR tv93[ebp], edx
	jmp	SHORT $LN11@AdjustSize
$LN10@AdjustSize:
	mov	DWORD PTR tv93[ebp], 0
$LN11@AdjustSize:
	mov	eax, DWORD PTR tv93[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN13@AdjustSize
$LN12@AdjustSize:
	mov	ecx, DWORD PTR _hwRemaining$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv94[ebp], edx
$LN13@AdjustSize:
	mov	eax, DWORD PTR tv94[ebp]
	mov	DWORD PTR _hwExtra$[ebp], eax
; Line 227
	mov	ecx, DWORD PTR _hwCurrent$[ebp]
	add	ecx, DWORD PTR _hwExtra$[ebp]
	mov	DWORD PTR _hw$[ebp], ecx
; Line 228
	mov	edx, DWORD PTR _bRow$[ebp]
	push	edx
	mov	eax, DWORD PTR _hw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wrc$[ebp]
	call	?SetHeightOrWidth@WINRECT@@QAEXJH@Z	; WINRECT::SetHeightOrWidth
; Line 229
	mov	ecx, DWORD PTR _hwRemaining$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _hwExtra$[ebp]
	mov	eax, DWORD PTR _hwRemaining$[ebp]
	mov	DWORD PTR [eax], edx
; Line 230
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?AdjustSize@CWinMgr@@MAEXPAVWINRECT@@HAAHPAUHWND__@@@Z ENDP ; CWinMgr::AdjustSize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv140 = -116						; size = 4
tv170 = -112						; size = 4
tv128 = -108						; size = 4
tv172 = -104						; size = 4
_wrc$1 = -100						; size = 4
tv153 = -96						; size = 4
_wrc$2 = -92						; size = 4
_wrc$3 = -88						; size = 4
_w$ = -84						; size = 4
_pRestRect$ = -80					; size = 4
_h$ = -76						; size = 4
_hwMin$4 = -72						; size = 4
_bRow$ = -68						; size = 4
_hwRemaining$ = -64					; size = 4
_this$ = -60						; size = 4
_it$ = -56						; size = 4
_szi$5 = -52						; size = 32
_rcTotal$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_pGroup$ = 8						; size = 4
_hWnd$ = 12						; size = 4
?CalcGroup@CWinMgr@@MAEXPAVWINRECT@@PAUHWND__@@@Z PROC	; CWinMgr::CalcGroup
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.cpp
; Line 137
	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
; Line 139
	cmp	DWORD PTR _pGroup$[ebp], 0
	je	SHORT $LN17@CalcGroup
	mov	ecx, DWORD PTR _pGroup$[ebp]
	call	?IsGroup@WINRECT@@QBEHXZ		; WINRECT::IsGroup
	test	eax, eax
	jne	SHORT $LN18@CalcGroup
$LN17@CalcGroup:
	push	139					; 0000008bH
	push	OFFSET $SG63998
	push	OFFSET $SG63999
	call	__wassert
	add	esp, 12					; 0000000cH
$LN18@CalcGroup:
; Line 140
	cmp	DWORD PTR _hWnd$[ebp], 0
	jne	SHORT $LN19@CalcGroup
	push	140					; 0000008cH
	push	OFFSET $SG64001
	push	OFFSET $SG64002
	call	__wassert
	add	esp, 12					; 0000000cH
$LN19@CalcGroup:
; Line 143
	mov	ecx, DWORD PTR _pGroup$[ebp]
	call	?GetRect@WINRECT@@QAEAAUtagRECT@@XZ	; WINRECT::GetRect
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _rcTotal$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _rcTotal$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _rcTotal$[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _rcTotal$[ebp+12], eax
; Line 145
	lea	ecx, DWORD PTR _h$[ebp]
	push	ecx
	lea	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pGroup$[ebp]
	call	?GetMargins@WINRECT@@QAEHAAH0@Z		; WINRECT::GetMargins
	test	eax, eax
	je	$LN14@CalcGroup
; Line 146
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	mov	esi, eax
	lea	ecx, DWORD PTR _rcTotal$[ebp]
	push	ecx
	call	?RectWidth@@YAJABUtagRECT@@@Z		; RectWidth
	add	esp, 4
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	esi, eax
	jge	SHORT $LN20@CalcGroup
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_abs
	add	esp, 4
	mov	DWORD PTR tv128[ebp], eax
	jmp	SHORT $LN21@CalcGroup
$LN20@CalcGroup:
	lea	eax, DWORD PTR _rcTotal$[ebp]
	push	eax
	call	?RectWidth@@YAJABUtagRECT@@@Z		; RectWidth
	add	esp, 4
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv128[ebp], eax
$LN21@CalcGroup:
	mov	ecx, DWORD PTR tv128[ebp]
	mov	DWORD PTR _w$[ebp], ecx
; Line 147
	mov	edx, DWORD PTR _h$[ebp]
	push	edx
	call	_abs
	add	esp, 4
	mov	esi, eax
	lea	eax, DWORD PTR _rcTotal$[ebp]
	push	eax
	call	?RectHeight@@YAJABUtagRECT@@@Z		; RectHeight
	add	esp, 4
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	esi, eax
	jge	SHORT $LN22@CalcGroup
	mov	ecx, DWORD PTR _h$[ebp]
	push	ecx
	call	_abs
	add	esp, 4
	mov	DWORD PTR tv140[ebp], eax
	jmp	SHORT $LN23@CalcGroup
$LN22@CalcGroup:
	lea	edx, DWORD PTR _rcTotal$[ebp]
	push	edx
	call	?RectHeight@@YAJABUtagRECT@@@Z		; RectHeight
	add	esp, 4
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv140[ebp], eax
$LN23@CalcGroup:
	mov	eax, DWORD PTR tv140[ebp]
	mov	DWORD PTR _h$[ebp], eax
; Line 148
	mov	ecx, DWORD PTR _h$[ebp]
	neg	ecx
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	neg	edx
	push	edx
	lea	eax, DWORD PTR _rcTotal$[ebp]
	push	eax
	call	DWORD PTR __imp__InflateRect@12
$LN14@CalcGroup:
; Line 151
	mov	ecx, DWORD PTR _pGroup$[ebp]
	call	?IsRowGroup@WINRECT@@QBEHXZ		; WINRECT::IsRowGroup
	mov	DWORD PTR _bRow$[ebp], eax
; Line 154
	cmp	DWORD PTR _bRow$[ebp], 0
	je	SHORT $LN24@CalcGroup
	lea	ecx, DWORD PTR _rcTotal$[ebp]
	push	ecx
	call	?RectHeight@@YAJABUtagRECT@@@Z		; RectHeight
	add	esp, 4
	mov	DWORD PTR tv153[ebp], eax
	jmp	SHORT $LN25@CalcGroup
$LN24@CalcGroup:
	lea	edx, DWORD PTR _rcTotal$[ebp]
	push	edx
	call	?RectWidth@@YAJABUtagRECT@@@Z		; RectWidth
	add	esp, 4
	mov	DWORD PTR tv153[ebp], eax
$LN25@CalcGroup:
	mov	eax, DWORD PTR tv153[ebp]
	mov	DWORD PTR _hwRemaining$[ebp], eax
; Line 158
	lea	ecx, DWORD PTR _it$[ebp]
	call	??0CWinGroupIterator@@QAE@XZ		; CWinGroupIterator::CWinGroupIterator
; Line 159
	mov	ecx, DWORD PTR _pGroup$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _it$[ebp]
	call	??4CWinGroupIterator@@QAEAAV0@PAVWINRECT@@@Z ; CWinGroupIterator::operator=
	jmp	SHORT $LN13@CalcGroup
$LN12@CalcGroup:
	lea	ecx, DWORD PTR _it$[ebp]
	call	?Next@CWinGroupIterator@@QAEPAVWINRECT@@XZ ; CWinGroupIterator::Next
$LN13@CalcGroup:
	lea	ecx, DWORD PTR _it$[ebp]
	call	??BCWinGroupIterator@@QAEPAVWINRECT@@XZ	; CWinGroupIterator::operator WINRECT *
	test	eax, eax
	je	$LN11@CalcGroup
; Line 160
	lea	ecx, DWORD PTR _it$[ebp]
	call	??BCWinGroupIterator@@QAEPAVWINRECT@@XZ	; CWinGroupIterator::operator WINRECT *
	mov	DWORD PTR _wrc$2[ebp], eax
; Line 162
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	mov	eax, DWORD PTR _wrc$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _szi$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
; Line 163
	cmp	DWORD PTR _bRow$[ebp], 0
	je	SHORT $LN26@CalcGroup
	mov	eax, DWORD PTR _szi$5[ebp+20]
	mov	DWORD PTR tv170[ebp], eax
	jmp	SHORT $LN27@CalcGroup
$LN26@CalcGroup:
	mov	ecx, DWORD PTR _szi$5[ebp+16]
	mov	DWORD PTR tv170[ebp], ecx
$LN27@CalcGroup:
	mov	edx, DWORD PTR tv170[ebp]
	mov	DWORD PTR _hwMin$4[ebp], edx
; Line 164
	mov	eax, DWORD PTR _hwMin$4[ebp]
	cmp	eax, DWORD PTR _hwRemaining$[ebp]
	jge	SHORT $LN28@CalcGroup
	mov	ecx, DWORD PTR _hwMin$4[ebp]
	mov	DWORD PTR tv172[ebp], ecx
	jmp	SHORT $LN29@CalcGroup
$LN28@CalcGroup:
	mov	edx, DWORD PTR _hwRemaining$[ebp]
	mov	DWORD PTR tv172[ebp], edx
$LN29@CalcGroup:
	mov	eax, DWORD PTR tv172[ebp]
	mov	DWORD PTR _hwMin$4[ebp], eax
; Line 165
	mov	ecx, DWORD PTR _bRow$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwMin$4[ebp]
	push	edx
	mov	ecx, DWORD PTR _wrc$2[ebp]
	call	?SetHeightOrWidth@WINRECT@@QAEXJH@Z	; WINRECT::SetHeightOrWidth
; Line 166
	mov	eax, DWORD PTR _hwRemaining$[ebp]
	sub	eax, DWORD PTR _hwMin$4[ebp]
	mov	DWORD PTR _hwRemaining$[ebp], eax
; Line 167
	jns	SHORT $LN30@CalcGroup
	push	167					; 000000a7H
	push	OFFSET $SG64017
	push	OFFSET $SG64018
	call	__wassert
	add	esp, 12					; 0000000cH
$LN30@CalcGroup:
; Line 168
	jmp	$LN12@CalcGroup
$LN11@CalcGroup:
; Line 171
	mov	DWORD PTR _pRestRect$[ebp], 0
; Line 172
	mov	edx, DWORD PTR _pGroup$[ebp]
	push	edx
	lea	ecx, DWORD PTR _it$[ebp]
	call	??4CWinGroupIterator@@QAEAAV0@PAVWINRECT@@@Z ; CWinGroupIterator::operator=
	jmp	SHORT $LN10@CalcGroup
$LN9@CalcGroup:
	lea	ecx, DWORD PTR _it$[ebp]
	call	?Next@CWinGroupIterator@@QAEPAVWINRECT@@XZ ; CWinGroupIterator::Next
$LN10@CalcGroup:
	lea	ecx, DWORD PTR _it$[ebp]
	call	??BCWinGroupIterator@@QAEPAVWINRECT@@XZ	; CWinGroupIterator::operator WINRECT *
	test	eax, eax
	je	SHORT $LN8@CalcGroup
; Line 173
	lea	ecx, DWORD PTR _it$[ebp]
	call	??BCWinGroupIterator@@QAEPAVWINRECT@@XZ	; CWinGroupIterator::operator WINRECT *
	mov	DWORD PTR _wrc$3[ebp], eax
; Line 174
	mov	ecx, DWORD PTR _wrc$3[ebp]
	call	?Type@WINRECT@@QBEGXZ			; WINRECT::Type
	movzx	eax, ax
	cmp	eax, 3
	jne	SHORT $LN7@CalcGroup
; Line 175
	cmp	DWORD PTR _pRestRect$[ebp], 0
	je	SHORT $LN31@CalcGroup
	push	175					; 000000afH
	push	OFFSET $SG64026
	push	OFFSET $SG64027
	call	__wassert
	add	esp, 12					; 0000000cH
$LN31@CalcGroup:
; Line 176
	mov	edx, DWORD PTR _wrc$3[ebp]
	mov	DWORD PTR _pRestRect$[ebp], edx
; Line 177
	jmp	SHORT $LN6@CalcGroup
$LN7@CalcGroup:
; Line 178
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	lea	ecx, DWORD PTR _hwRemaining$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bRow$[ebp]
	push	edx
	mov	eax, DWORD PTR _wrc$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
$LN6@CalcGroup:
; Line 180
	jmp	SHORT $LN9@CalcGroup
$LN8@CalcGroup:
; Line 181
	cmp	DWORD PTR _hwRemaining$[ebp], 0
	jge	SHORT $LN32@CalcGroup
	push	181					; 000000b5H
	push	OFFSET $SG64030
	push	OFFSET $SG64031
	call	__wassert
	add	esp, 12					; 0000000cH
$LN32@CalcGroup:
; Line 184
	cmp	DWORD PTR _pRestRect$[ebp], 0
	je	SHORT $LN5@CalcGroup
; Line 185
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	lea	eax, DWORD PTR _hwRemaining$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bRow$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pRestRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
; Line 186
	cmp	DWORD PTR _hwRemaining$[ebp], 0
	je	SHORT $LN5@CalcGroup
	push	186					; 000000baH
	push	OFFSET $SG64034
	push	OFFSET $SG64035
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@CalcGroup:
; Line 192
	mov	edx, DWORD PTR _bRow$[ebp]
	push	edx
	lea	eax, DWORD PTR _rcTotal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pGroup$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
; Line 195
	mov	eax, DWORD PTR _pGroup$[ebp]
	push	eax
	lea	ecx, DWORD PTR _it$[ebp]
	call	??4CWinGroupIterator@@QAEAAV0@PAVWINRECT@@@Z ; CWinGroupIterator::operator=
	jmp	SHORT $LN4@CalcGroup
$LN3@CalcGroup:
	lea	ecx, DWORD PTR _it$[ebp]
	call	?Next@CWinGroupIterator@@QAEPAVWINRECT@@XZ ; CWinGroupIterator::Next
$LN4@CalcGroup:
	lea	ecx, DWORD PTR _it$[ebp]
	call	??BCWinGroupIterator@@QAEPAVWINRECT@@XZ	; CWinGroupIterator::operator WINRECT *
	test	eax, eax
	je	SHORT $LN15@CalcGroup
; Line 196
	lea	ecx, DWORD PTR _it$[ebp]
	call	??BCWinGroupIterator@@QAEPAVWINRECT@@XZ	; CWinGroupIterator::operator WINRECT *
	mov	DWORD PTR _wrc$1[ebp], eax
; Line 197
	mov	ecx, DWORD PTR _wrc$1[ebp]
	call	?IsGroup@WINRECT@@QBEHXZ		; WINRECT::IsGroup
	test	eax, eax
	je	SHORT $LN1@CalcGroup
; Line 198
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wrc$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
$LN1@CalcGroup:
; Line 199
	jmp	SHORT $LN3@CalcGroup
$LN15@CalcGroup:
; Line 200
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?CalcGroup@CWinMgr@@MAEXPAVWINRECT@@PAUHWND__@@@Z ENDP	; CWinMgr::CalcGroup
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_nmw$ = -56						; size = 48
_this$ = -8						; size = 4
_hwndChild$1 = -4					; size = 4
_szi$ = 8						; size = 4
_hWnd$ = 12						; size = 4
_nID$ = 16						; size = 4
?SendGetSizeInfo@CWinMgr@@IAEHAAUSIZEINFO@@PAUHWND__@@I@Z PROC ; CWinMgr::SendGetSizeInfo
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.cpp
; Line 385
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
; Line 386
	lea	ecx, DWORD PTR _nmw$[ebp]
	call	??0NMWINMGR@@QAE@XZ			; NMWINMGR::NMWINMGR
; Line 387
	mov	DWORD PTR _nmw$[ebp+8], 1
; Line 388
	mov	eax, DWORD PTR _nID$[ebp]
	mov	DWORD PTR _nmw$[ebp+4], eax
; Line 389
	mov	ecx, 8
	mov	esi, DWORD PTR _szi$[ebp]
	lea	edi, DWORD PTR _nmw$[ebp+12]
	rep movsd
; Line 391
	lea	ecx, DWORD PTR _nmw$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nID$[ebp]
	push	edx
	mov	eax, DWORD PTR ?WM_WINMGR@@3IB		; WM_WINMGR
	push	eax
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
	test	eax, eax
	jne	SHORT $LN3@SendGetSiz
	cmp	DWORD PTR _nmw$[ebp+44], 0
	jne	SHORT $LN3@SendGetSiz
; Line 392
	mov	edx, DWORD PTR _nID$[ebp]
	push	edx
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndChild$1[ebp], eax
; Line 393
	cmp	DWORD PTR _hwndChild$1[ebp], 0
	je	SHORT $LN1@SendGetSiz
	lea	ecx, DWORD PTR _nmw$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nID$[ebp]
	push	edx
	mov	eax, DWORD PTR ?WM_WINMGR@@3IB		; WM_WINMGR
	push	eax
	mov	ecx, DWORD PTR _hwndChild$1[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
	test	eax, eax
	jne	SHORT $LN3@SendGetSiz
$LN1@SendGetSiz:
; Line 394
	xor	eax, eax
	jmp	SHORT $LN4@SendGetSiz
$LN3@SendGetSiz:
; Line 396
	mov	ecx, 8
	lea	esi, DWORD PTR _nmw$[ebp+12]
	mov	edi, DWORD PTR _szi$[ebp]
	rep movsd
; Line 397
	mov	eax, 1
$LN4@SendGetSiz:
; Line 398
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SendGetSizeInfo@CWinMgr@@IAEHAAUSIZEINFO@@PAUHWND__@@I@Z ENDP ; CWinMgr::SendGetSizeInfo
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_nWin$ = -8						; size = 4
_w$1 = -4						; size = 4
?CountWindows@CWinMgr@@IAEHXZ PROC			; CWinMgr::CountWindows
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.cpp
; Line 107
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 108
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN7@CountWindo
	push	108					; 0000006cH
	push	OFFSET $SG63971
	push	OFFSET $SG63972
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@CountWindo:
; Line 109
	mov	DWORD PTR _nWin$[ebp], 0
; Line 110
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _w$1[ebp], eax
	jmp	SHORT $LN4@CountWindo
$LN3@CountWindo:
	mov	ecx, DWORD PTR _w$1[ebp]
	add	ecx, 36					; 00000024H
	mov	DWORD PTR _w$1[ebp], ecx
$LN4@CountWindo:
	mov	ecx, DWORD PTR _w$1[ebp]
	call	?IsEnd@WINRECT@@QBEHXZ			; WINRECT::IsEnd
	test	eax, eax
	jne	SHORT $LN2@CountWindo
; Line 111
	mov	ecx, DWORD PTR _w$1[ebp]
	call	?IsWindow@WINRECT@@QBEHXZ		; WINRECT::IsWindow
	test	eax, eax
	je	SHORT $LN1@CountWindo
; Line 112
	mov	edx, DWORD PTR _nWin$[ebp]
	add	edx, 1
	mov	DWORD PTR _nWin$[ebp], edx
$LN1@CountWindo:
; Line 113
	jmp	SHORT $LN3@CountWindo
$LN2@CountWindo:
; Line 114
	mov	eax, DWORD PTR _nWin$[ebp]
; Line 115
	mov	esp, ebp
	pop	ebp
	ret	0
?CountWindows@CWinMgr@@IAEHXZ ENDP			; CWinMgr::CountWindows
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
_w$2 = -4						; size = 4
_hWnd$ = 8						; size = 4
?InitToFitSizeFromCurrent@CWinMgr@@QAEXPAUHWND__@@@Z PROC ; CWinMgr::InitToFitSizeFromCurrent
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.cpp
; Line 39
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 40
	cmp	DWORD PTR _hWnd$[ebp], 0
	jne	SHORT $LN7@InitToFitS
	push	40					; 00000028H
	push	OFFSET $SG63917
	push	OFFSET $SG63918
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@InitToFitS:
; Line 41
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN8@InitToFitS
	push	41					; 00000029H
	push	OFFSET $SG63920
	push	OFFSET $SG63921
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@InitToFitS:
; Line 42
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
; Line 43
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _w$2[ebp], edx
	jmp	SHORT $LN4@InitToFitS
$LN3@InitToFitS:
	mov	eax, DWORD PTR _w$2[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR _w$2[ebp], eax
$LN4@InitToFitS:
	mov	ecx, DWORD PTR _w$2[ebp]
	call	?IsEnd@WINRECT@@QBEHXZ			; WINRECT::IsEnd
	test	eax, eax
	jne	SHORT $LN5@InitToFitS
; Line 44
	mov	ecx, DWORD PTR _w$2[ebp]
	call	?Type@WINRECT@@QBEGXZ			; WINRECT::Type
	movzx	ecx, ax
	cmp	ecx, 4
	jne	SHORT $LN1@InitToFitS
	mov	ecx, DWORD PTR _w$2[ebp]
	call	?IsGroup@WINRECT@@QBEHXZ		; WINRECT::IsGroup
	test	eax, eax
	jne	SHORT $LN1@InitToFitS
; Line 45
	mov	ecx, DWORD PTR _w$2[ebp]
	call	?GetRect@WINRECT@@QAEAAUtagRECT@@XZ	; WINRECT::GetRect
	push	eax
	call	?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z ; RectToSize
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	mov	edx, DWORD PTR $T1[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$2[ebp]
	call	?SetToFitSize@WINRECT@@QAEXUtagSIZE@@@Z	; WINRECT::SetToFitSize
$LN1@InitToFitS:
; Line 47
	jmp	SHORT $LN3@InitToFitS
$LN5@InitToFitS:
; Line 48
	mov	esp, ebp
	pop	ebp
	ret	4
?InitToFitSizeFromCurrent@CWinMgr@@QAEXPAUHWND__@@@Z ENDP ; CWinMgr::InitToFitSizeFromCurrent
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_dwExStyle$ = -16					; size = 4
_this$ = -12						; size = 4
_dwStyle$ = -8						; size = 4
_szMin$1 = -4						; size = 4
_hWnd$ = 8						; size = 4
_szi$ = 12						; size = 4
?GetMinMaxInfo@CWinMgr@@QAEXPAUHWND__@@AAUSIZEINFO@@@Z PROC ; CWinMgr::GetMinMaxInfo
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.cpp
; Line 416
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 417
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _szi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
; Line 418
	cmp	DWORD PTR _hWnd$[ebp], 0
	jne	SHORT $LN9@GetMinMaxI
; Line 419
	jmp	$LN10@GetMinMaxI
$LN9@GetMinMaxI:
; Line 422
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	call	?GetStyle@@YAKPAUHWND__@@@Z		; GetStyle
	add	esp, 4
	mov	DWORD PTR _dwStyle$[ebp], eax
; Line 423
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	?GetExStyle@@YAKPAUHWND__@@@Z		; GetExStyle
	add	esp, 4
	mov	DWORD PTR _dwExStyle$[ebp], eax
; Line 424
	mov	eax, DWORD PTR _dwStyle$[ebp]
	and	eax, 268435456				; 10000000H
	je	$LN10@GetMinMaxI
; Line 425
	mov	ecx, DWORD PTR _szi$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _szMin$1[ebp], ecx
; Line 426
	mov	edx, DWORD PTR _dwStyle$[ebp]
	and	edx, 1073741824				; 40000000H
	jne	SHORT $LN7@GetMinMaxI
; Line 427
	mov	eax, DWORD PTR _dwStyle$[ebp]
	and	eax, 12582912				; 00c00000H
	je	SHORT $LN6@GetMinMaxI
; Line 428
	push	4
	call	DWORD PTR __imp__GetSystemMetrics@4
	mov	ecx, DWORD PTR _szMin$1[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _szMin$1[ebp]
	mov	DWORD PTR [edx+4], eax
$LN6@GetMinMaxI:
; Line 429
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetMenu@4
	test	eax, eax
	je	SHORT $LN7@GetMinMaxI
; Line 430
	push	15					; 0000000fH
	call	DWORD PTR __imp__GetSystemMetrics@4
	mov	ecx, DWORD PTR _szMin$1[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _szMin$1[ebp]
	mov	DWORD PTR [edx+4], eax
$LN7@GetMinMaxI:
; Line 432
	mov	eax, DWORD PTR _dwStyle$[ebp]
	and	eax, 262144				; 00040000H
	je	SHORT $LN4@GetMinMaxI
; Line 433
	push	32					; 00000020H
	call	DWORD PTR __imp__GetSystemMetrics@4
	mov	ecx, DWORD PTR _szMin$1[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [edx+eax*2]
	mov	ecx, DWORD PTR _szMin$1[ebp]
	mov	DWORD PTR [ecx], eax
; Line 434
	push	33					; 00000021H
	call	DWORD PTR __imp__GetSystemMetrics@4
	mov	edx, DWORD PTR _szMin$1[ebp]
	mov	ecx, DWORD PTR [edx+4]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _szMin$1[ebp]
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN3@GetMinMaxI
$LN4@GetMinMaxI:
; Line 435
	mov	ecx, DWORD PTR _dwStyle$[ebp]
	and	ecx, 8388608				; 00800000H
	je	SHORT $LN3@GetMinMaxI
; Line 436
	push	5
	call	DWORD PTR __imp__GetSystemMetrics@4
	mov	edx, DWORD PTR _szMin$1[ebp]
	mov	ecx, DWORD PTR [edx]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _szMin$1[ebp]
	mov	DWORD PTR [eax], edx
; Line 437
	push	6
	call	DWORD PTR __imp__GetSystemMetrics@4
	mov	ecx, DWORD PTR _szMin$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+eax*2]
	mov	ecx, DWORD PTR _szMin$1[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@GetMinMaxI:
; Line 439
	mov	edx, DWORD PTR _dwExStyle$[ebp]
	and	edx, 512				; 00000200H
	je	SHORT $LN10@GetMinMaxI
; Line 440
	push	45					; 0000002dH
	call	DWORD PTR __imp__GetSystemMetrics@4
	mov	ecx, DWORD PTR _szMin$1[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [edx+eax*2]
	mov	ecx, DWORD PTR _szMin$1[ebp]
	mov	DWORD PTR [ecx], eax
; Line 441
	push	46					; 0000002eH
	call	DWORD PTR __imp__GetSystemMetrics@4
	mov	edx, DWORD PTR _szMin$1[ebp]
	mov	ecx, DWORD PTR [edx+4]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _szMin$1[ebp]
	mov	DWORD PTR [eax+4], edx
$LN10@GetMinMaxI:
; Line 444
	mov	esp, ebp
	pop	ebp
	ret	8
?GetMinMaxInfo@CWinMgr@@QAEXPAUHWND__@@AAUSIZEINFO@@@Z ENDP ; CWinMgr::GetMinMaxInfo
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T1 = -52						; size = 8
$T2 = -44						; size = 8
_szi$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
_lpMMI$ = 12						; size = 4
?GetMinMaxInfo@CWinMgr@@QAEXPAUHWND__@@PAUtagMINMAXINFO@@@Z PROC ; CWinMgr::GetMinMaxInfo
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.cpp
; Line 405
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 407
	lea	eax, DWORD PTR _szi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMinMaxInfo@CWinMgr@@QAEXPAUHWND__@@AAUSIZEINFO@@@Z ; CWinMgr::GetMinMaxInfo
; Line 408
	mov	edx, DWORD PTR _szi$[ebp+20]
	push	edx
	mov	eax, DWORD PTR _szi$[ebp+16]
	push	eax
	call	?SizeToPoint@@YA?AUtagPOINT@@UtagSIZE@@@Z ; SizeToPoint
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR $T2[ebp+4], edx
	mov	ecx, DWORD PTR _lpMMI$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+24], edx
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+28], eax
; Line 409
	mov	ecx, DWORD PTR _szi$[ebp+28]
	push	ecx
	mov	edx, DWORD PTR _szi$[ebp+24]
	push	edx
	call	?SizeToPoint@@YA?AUtagPOINT@@UtagSIZE@@@Z ; SizeToPoint
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	mov	eax, DWORD PTR _lpMMI$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [eax+36], edx
; Line 410
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?GetMinMaxInfo@CWinMgr@@QAEXPAUHWND__@@PAUtagMINMAXINFO@@@Z ENDP ; CWinMgr::GetMinMaxInfo
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_w$1 = -4						; size = 4
_nID$ = 8						; size = 4
?FindRect@CWinMgr@@QAEPAVWINRECT@@H@Z PROC		; CWinMgr::FindRect
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.cpp
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 122
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN7@FindRect
	push	122					; 0000007aH
	push	OFFSET $SG63984
	push	OFFSET $SG63985
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@FindRect:
; Line 123
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _w$1[ebp], eax
	jmp	SHORT $LN4@FindRect
$LN3@FindRect:
	mov	ecx, DWORD PTR _w$1[ebp]
	add	ecx, 36					; 00000024H
	mov	DWORD PTR _w$1[ebp], ecx
$LN4@FindRect:
	mov	ecx, DWORD PTR _w$1[ebp]
	call	?IsEnd@WINRECT@@QBEHXZ			; WINRECT::IsEnd
	test	eax, eax
	jne	SHORT $LN2@FindRect
; Line 124
	mov	ecx, DWORD PTR _w$1[ebp]
	call	?GetID@WINRECT@@QAEIXZ			; WINRECT::GetID
	cmp	eax, DWORD PTR _nID$[ebp]
	jne	SHORT $LN1@FindRect
; Line 125
	mov	eax, DWORD PTR _w$1[ebp]
	jmp	SHORT $LN5@FindRect
$LN1@FindRect:
; Line 126
	jmp	SHORT $LN3@FindRect
$LN2@FindRect:
; Line 127
	xor	eax, eax
$LN5@FindRect:
; Line 128
	mov	esp, ebp
	pop	ebp
	ret	4
?FindRect@CWinMgr@@QAEPAVWINRECT@@H@Z ENDP		; CWinMgr::FindRect
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_bIsRow$ = -24						; size = 4
_this$ = -20						; size = 4
_next$ = -16						; size = 4
_prev$ = -12						; size = 4
_rcNext$ = -8						; size = 4
_rcPrev$ = -4						; size = 4
_pwrcMove$ = 8						; size = 4
_ptMove$ = 12						; size = 8
_pParentWnd$ = 20					; size = 4
?MoveRect@CWinMgr@@QAEXPAVWINRECT@@UtagPOINT@@PAUHWND__@@@Z PROC ; CWinMgr::MoveRect
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.cpp
; Line 451
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx
; Line 452
	cmp	DWORD PTR _pwrcMove$[ebp], 0
	jne	SHORT $LN7@MoveRect
	push	452					; 000001c4H
	push	OFFSET $SG64179
	push	OFFSET $SG64180
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@MoveRect:
; Line 453
	mov	ecx, DWORD PTR _pwrcMove$[ebp]
	call	?Prev@WINRECT@@QAEPAV1@XZ		; WINRECT::Prev
	mov	DWORD PTR _prev$[ebp], eax
; Line 454
	cmp	DWORD PTR _prev$[ebp], 0
	jne	SHORT $LN8@MoveRect
	push	454					; 000001c6H
	push	OFFSET $SG64183
	push	OFFSET $SG64184
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@MoveRect:
; Line 455
	mov	ecx, DWORD PTR _pwrcMove$[ebp]
	call	?Next@WINRECT@@QAEPAV1@XZ		; WINRECT::Next
	mov	DWORD PTR _next$[ebp], eax
; Line 456
	cmp	DWORD PTR _next$[ebp], 0
	jne	SHORT $LN9@MoveRect
	push	456					; 000001c8H
	push	OFFSET $SG64187
	push	OFFSET $SG64188
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@MoveRect:
; Line 458
	mov	ecx, DWORD PTR _pwrcMove$[ebp]
	call	?Parent@WINRECT@@QAEPAV1@XZ		; WINRECT::Parent
	mov	ecx, eax
	call	?IsRowGroup@WINRECT@@QBEHXZ		; WINRECT::IsRowGroup
	mov	DWORD PTR _bIsRow$[ebp], eax
; Line 460
	mov	ecx, DWORD PTR _next$[ebp]
	call	?GetRect@WINRECT@@QAEAAUtagRECT@@XZ	; WINRECT::GetRect
	mov	DWORD PTR _rcNext$[ebp], eax
; Line 461
	mov	ecx, DWORD PTR _prev$[ebp]
	call	?GetRect@WINRECT@@QAEAAUtagRECT@@XZ	; WINRECT::GetRect
	mov	DWORD PTR _rcPrev$[ebp], eax
; Line 462
	cmp	DWORD PTR _bIsRow$[ebp], 0
	je	SHORT $LN4@MoveRect
; Line 464
	mov	DWORD PTR _ptMove$[ebp], 0
; Line 465
	mov	eax, DWORD PTR _rcPrev$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _ptMove$[ebp+4]
	mov	edx, DWORD PTR _rcPrev$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 466
	mov	eax, DWORD PTR _rcNext$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _ptMove$[ebp+4]
	mov	edx, DWORD PTR _rcNext$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 467
	jmp	SHORT $LN3@MoveRect
$LN4@MoveRect:
; Line 469
	mov	DWORD PTR _ptMove$[ebp+4], 0
; Line 470
	mov	eax, DWORD PTR _rcPrev$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _ptMove$[ebp]
	mov	edx, DWORD PTR _rcPrev$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 471
	mov	eax, DWORD PTR _rcNext$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _ptMove$[ebp]
	mov	edx, DWORD PTR _rcNext$[ebp]
	mov	DWORD PTR [edx], ecx
$LN3@MoveRect:
; Line 473
	mov	eax, DWORD PTR _ptMove$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _ptMove$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pwrcMove$[ebp]
	call	?GetRect@WINRECT@@QAEAAUtagRECT@@XZ	; WINRECT::GetRect
	push	eax
	call	?OffsetRect@@YAAAUtagRECT@@AAU1@UtagPOINT@@@Z ; OffsetRect
	add	esp, 12					; 0000000cH
; Line 474
	mov	ecx, DWORD PTR _prev$[ebp]
	call	?IsGroup@WINRECT@@QBEHXZ		; WINRECT::IsGroup
	test	eax, eax
	je	SHORT $LN2@MoveRect
; Line 475
	mov	edx, DWORD PTR _pParentWnd$[ebp]
	push	edx
	mov	eax, DWORD PTR _prev$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
$LN2@MoveRect:
; Line 476
	mov	ecx, DWORD PTR _next$[ebp]
	call	?IsGroup@WINRECT@@QBEHXZ		; WINRECT::IsGroup
	test	eax, eax
	je	SHORT $LN5@MoveRect
; Line 477
	mov	ecx, DWORD PTR _pParentWnd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _next$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
$LN5@MoveRect:
; Line 478
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?MoveRect@CWinMgr@@QAEXPAVWINRECT@@UtagPOINT@@PAUHWND__@@@Z ENDP ; CWinMgr::MoveRect
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = -220						; size = 8
$T2 = -212						; size = 8
$T3 = -204						; size = 8
_hwTotal$4 = -196					; size = 4
_wrc2$5 = -192						; size = 4
$T6 = -188						; size = 8
$T7 = -180						; size = 8
$T8 = -172						; size = 8
$T9 = -164						; size = 8
$T10 = -156						; size = 4
$T11 = -152						; size = 8
$T12 = -144						; size = 8
_bRow$13 = -136						; size = 4
tv155 = -132						; size = 4
tv181 = -128						; size = 4
_hChild$14 = -124					; size = 4
tv199 = -120						; size = 4
tv306 = -116						; size = 4
tv145 = -112						; size = 4
tv291 = -108						; size = 4
tv191 = -104						; size = 4
tv228 = -100						; size = 4
tv163 = -96						; size = 4
tv221 = -92						; size = 4
tv132 = -88						; size = 4
tv212 = -84						; size = 4
_parent$15 = -80					; size = 4
_bRow$16 = -76						; size = 4
_this$ = -72						; size = 4
_pct$17 = -68						; size = 4
_hwMin$18 = -64						; size = 4
_it$19 = -60						; size = 4
tv260 = -56						; size = 4
_w2$20 = -52						; size = 4
_rcParent$21 = -48					; size = 4
_h2$22 = -44						; size = 4
_hw$23 = -40						; size = 4
_szi2$24 = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_szi$ = 8						; size = 4
_wrc$ = 12						; size = 4
_hWnd$ = 16						; size = 4
?OnGetSizeInfo@CWinMgr@@UAEXAAUSIZEINFO@@PAVWINRECT@@PAUHWND__@@@Z PROC ; CWinMgr::OnGetSizeInfo
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.cpp
; Line 274
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 275
	mov	eax, DWORD PTR _szi$[ebp]
	mov	ecx, DWORD PTR _SIZEZERO
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _SIZEZERO+4
	mov	DWORD PTR [eax+20], edx
; Line 276
	mov	eax, DWORD PTR _szi$[ebp]
	mov	ecx, DWORD PTR _SIZEMAX
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _SIZEMAX+4
	mov	DWORD PTR [eax+28], edx
; Line 277
	mov	ecx, DWORD PTR _wrc$[ebp]
	call	?GetRect@WINRECT@@QAEAAUtagRECT@@XZ	; WINRECT::GetRect
	push	eax
	call	?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z ; RectToSize
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR $T7[ebp+4], edx
	mov	eax, DWORD PTR _szi$[ebp]
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T7[ebp+4]
	mov	DWORD PTR [eax+12], edx
; Line 279
	mov	ecx, DWORD PTR _wrc$[ebp]
	call	?IsGroup@WINRECT@@QBEHXZ		; WINRECT::IsGroup
	test	eax, eax
	je	$LN22@OnGetSizeI
; Line 281
	mov	eax, DWORD PTR _szi$[ebp]
	mov	ecx, DWORD PTR _SIZEZERO
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _SIZEZERO+4
	mov	DWORD PTR [eax+12], edx
; Line 282
	mov	ecx, DWORD PTR _wrc$[ebp]
	call	?IsRowGroup@WINRECT@@QBEHXZ		; WINRECT::IsRowGroup
	mov	DWORD PTR _bRow$13[ebp], eax
; Line 284
	lea	ecx, DWORD PTR _it$19[ebp]
	call	??0CWinGroupIterator@@QAE@XZ		; CWinGroupIterator::CWinGroupIterator
; Line 285
	mov	eax, DWORD PTR _wrc$[ebp]
	push	eax
	lea	ecx, DWORD PTR _it$19[ebp]
	call	??4CWinGroupIterator@@QAEAAV0@PAVWINRECT@@@Z ; CWinGroupIterator::operator=
	jmp	SHORT $LN21@OnGetSizeI
$LN20@OnGetSizeI:
	lea	ecx, DWORD PTR _it$19[ebp]
	call	?Next@CWinGroupIterator@@QAEPAVWINRECT@@XZ ; CWinGroupIterator::Next
$LN21@OnGetSizeI:
	lea	ecx, DWORD PTR _it$19[ebp]
	call	??BCWinGroupIterator@@QAEPAVWINRECT@@XZ	; CWinGroupIterator::operator WINRECT *
	test	eax, eax
	je	$LN19@OnGetSizeI
; Line 286
	lea	ecx, DWORD PTR _it$19[ebp]
	call	??BCWinGroupIterator@@QAEPAVWINRECT@@XZ	; CWinGroupIterator::operator WINRECT *
	mov	DWORD PTR _wrc2$5[ebp], eax
; Line 288
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wrc2$5[ebp]
	push	edx
	lea	eax, DWORD PTR _szi2$24[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
; Line 289
	cmp	DWORD PTR _bRow$13[ebp], 0
	je	$LN18@OnGetSizeI
; Line 290
	mov	ecx, DWORD PTR _szi$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	edx, DWORD PTR _szi2$24[ebp+16]
	jle	SHORT $LN25@OnGetSizeI
	mov	eax, DWORD PTR _szi$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv132[ebp], ecx
	jmp	SHORT $LN26@OnGetSizeI
$LN25@OnGetSizeI:
	mov	edx, DWORD PTR _szi2$24[ebp+16]
	mov	DWORD PTR tv132[ebp], edx
$LN26@OnGetSizeI:
	mov	eax, DWORD PTR _szi$[ebp]
	mov	ecx, DWORD PTR tv132[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 291
	mov	edx, DWORD PTR _szi$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _szi2$24[ebp+20]
	mov	ecx, DWORD PTR _szi$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 292
	mov	edx, DWORD PTR _szi$[ebp]
	mov	eax, DWORD PTR [edx+24]
	cmp	eax, DWORD PTR _szi2$24[ebp+24]
	jge	SHORT $LN27@OnGetSizeI
	mov	ecx, DWORD PTR _szi$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR tv145[ebp], edx
	jmp	SHORT $LN28@OnGetSizeI
$LN27@OnGetSizeI:
	mov	eax, DWORD PTR _szi2$24[ebp+24]
	mov	DWORD PTR tv145[ebp], eax
$LN28@OnGetSizeI:
	mov	ecx, DWORD PTR _szi$[ebp]
	mov	edx, DWORD PTR tv145[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 293
	mov	eax, DWORD PTR _szi$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, DWORD PTR _szi2$24[ebp+28]
	cmp	ecx, 32767				; 00007fffH
	jge	SHORT $LN29@OnGetSizeI
	mov	edx, DWORD PTR _szi$[ebp]
	mov	eax, DWORD PTR [edx+28]
	add	eax, DWORD PTR _szi2$24[ebp+28]
	mov	DWORD PTR tv155[ebp], eax
	jmp	SHORT $LN30@OnGetSizeI
$LN29@OnGetSizeI:
	mov	DWORD PTR tv155[ebp], 32767		; 00007fffH
$LN30@OnGetSizeI:
	mov	ecx, DWORD PTR _szi$[ebp]
	mov	edx, DWORD PTR tv155[ebp]
	mov	DWORD PTR [ecx+28], edx
; Line 294
	mov	eax, DWORD PTR _szi$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _szi2$24[ebp+8]
	jle	SHORT $LN31@OnGetSizeI
	mov	edx, DWORD PTR _szi$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv163[ebp], eax
	jmp	SHORT $LN32@OnGetSizeI
$LN31@OnGetSizeI:
	mov	ecx, DWORD PTR _szi2$24[ebp+8]
	mov	DWORD PTR tv163[ebp], ecx
$LN32@OnGetSizeI:
	mov	edx, DWORD PTR _szi$[ebp]
	mov	eax, DWORD PTR tv163[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 295
	mov	ecx, DWORD PTR _szi$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _szi2$24[ebp+12]
	mov	eax, DWORD PTR _szi$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 297
	jmp	$LN17@OnGetSizeI
$LN18@OnGetSizeI:
; Line 298
	mov	ecx, DWORD PTR _szi$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR _szi2$24[ebp+16]
	mov	eax, DWORD PTR _szi$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 299
	mov	ecx, DWORD PTR _szi$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR _szi2$24[ebp+20]
	jle	SHORT $LN33@OnGetSizeI
	mov	eax, DWORD PTR _szi$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR tv181[ebp], ecx
	jmp	SHORT $LN34@OnGetSizeI
$LN33@OnGetSizeI:
	mov	edx, DWORD PTR _szi2$24[ebp+20]
	mov	DWORD PTR tv181[ebp], edx
$LN34@OnGetSizeI:
	mov	eax, DWORD PTR _szi$[ebp]
	mov	ecx, DWORD PTR tv181[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 300
	mov	edx, DWORD PTR _szi$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, DWORD PTR _szi2$24[ebp+24]
	cmp	eax, 32767				; 00007fffH
	jge	SHORT $LN35@OnGetSizeI
	mov	ecx, DWORD PTR _szi$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, DWORD PTR _szi2$24[ebp+24]
	mov	DWORD PTR tv191[ebp], edx
	jmp	SHORT $LN36@OnGetSizeI
$LN35@OnGetSizeI:
	mov	DWORD PTR tv191[ebp], 32767		; 00007fffH
$LN36@OnGetSizeI:
	mov	eax, DWORD PTR _szi$[ebp]
	mov	ecx, DWORD PTR tv191[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 301
	mov	edx, DWORD PTR _szi$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	eax, DWORD PTR _szi2$24[ebp+28]
	jge	SHORT $LN37@OnGetSizeI
	mov	ecx, DWORD PTR _szi$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR tv199[ebp], edx
	jmp	SHORT $LN38@OnGetSizeI
$LN37@OnGetSizeI:
	mov	eax, DWORD PTR _szi2$24[ebp+28]
	mov	DWORD PTR tv199[ebp], eax
$LN38@OnGetSizeI:
	mov	ecx, DWORD PTR _szi$[ebp]
	mov	edx, DWORD PTR tv199[ebp]
	mov	DWORD PTR [ecx+28], edx
; Line 302
	mov	eax, DWORD PTR _szi$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _szi2$24[ebp+8]
	mov	edx, DWORD PTR _szi$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 303
	mov	eax, DWORD PTR _szi$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _szi2$24[ebp+12]
	jle	SHORT $LN39@OnGetSizeI
	mov	edx, DWORD PTR _szi$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv212[ebp], eax
	jmp	SHORT $LN40@OnGetSizeI
$LN39@OnGetSizeI:
	mov	ecx, DWORD PTR _szi2$24[ebp+12]
	mov	DWORD PTR tv212[ebp], ecx
$LN40@OnGetSizeI:
	mov	edx, DWORD PTR _szi$[ebp]
	mov	eax, DWORD PTR tv212[ebp]
	mov	DWORD PTR [edx+12], eax
$LN17@OnGetSizeI:
; Line 305
	jmp	$LN20@OnGetSizeI
$LN19@OnGetSizeI:
; Line 309
	lea	ecx, DWORD PTR _h2$22[ebp]
	push	ecx
	lea	edx, DWORD PTR _w2$20[ebp]
	push	edx
	mov	ecx, DWORD PTR _wrc$[ebp]
	call	?GetMargins@WINRECT@@QAEHAAH0@Z		; WINRECT::GetMargins
; Line 310
	mov	eax, DWORD PTR _w2$20[ebp]
	shl	eax, 1
	mov	DWORD PTR _w2$20[ebp], eax
	mov	ecx, DWORD PTR _h2$22[ebp]
	shl	ecx, 1
	mov	DWORD PTR _h2$22[ebp], ecx
; Line 311
	cmp	DWORD PTR _w2$20[ebp], 0
	jge	SHORT $LN41@OnGetSizeI
	mov	DWORD PTR tv221[ebp], 0
	jmp	SHORT $LN42@OnGetSizeI
$LN41@OnGetSizeI:
	mov	edx, DWORD PTR _w2$20[ebp]
	mov	DWORD PTR tv221[ebp], edx
$LN42@OnGetSizeI:
	mov	eax, DWORD PTR _szi$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR tv221[ebp]
	mov	edx, DWORD PTR _szi$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 312
	cmp	DWORD PTR _h2$22[ebp], 0
	jge	SHORT $LN43@OnGetSizeI
	mov	DWORD PTR tv228[ebp], 0
	jmp	SHORT $LN44@OnGetSizeI
$LN43@OnGetSizeI:
	mov	eax, DWORD PTR _h2$22[ebp]
	mov	DWORD PTR tv228[ebp], eax
$LN44@OnGetSizeI:
	mov	ecx, DWORD PTR _szi$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, DWORD PTR tv228[ebp]
	mov	eax, DWORD PTR _szi$[ebp]
	mov	DWORD PTR [eax+20], edx
; Line 313
	mov	ecx, DWORD PTR _w2$20[ebp]
	push	ecx
	call	_abs
	add	esp, 4
	mov	edx, DWORD PTR _szi$[ebp]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _szi$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 314
	mov	edx, DWORD PTR _h2$22[ebp]
	push	edx
	call	_abs
	add	esp, 4
	mov	ecx, DWORD PTR _szi$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _szi$[ebp]
	mov	DWORD PTR [edx+12], eax
	jmp	$LN23@OnGetSizeI
$LN22@OnGetSizeI:
; Line 318
	mov	ecx, DWORD PTR _wrc$[ebp]
	call	?Parent@WINRECT@@QAEPAV1@XZ		; WINRECT::Parent
	mov	DWORD PTR _parent$15[ebp], eax
; Line 319
	cmp	DWORD PTR _parent$15[ebp], 0
	jne	SHORT $LN45@OnGetSizeI
	push	319					; 0000013fH
	push	OFFSET $SG64093
	push	OFFSET $SG64094
	call	__wassert
	add	esp, 12					; 0000000cH
$LN45@OnGetSizeI:
; Line 320
	mov	ecx, DWORD PTR _parent$15[ebp]
	call	?GetRect@WINRECT@@QAEAAUtagRECT@@XZ	; WINRECT::GetRect
	mov	DWORD PTR _rcParent$21[ebp], eax
; Line 321
	mov	ecx, DWORD PTR _parent$15[ebp]
	call	?IsRowGroup@WINRECT@@QBEHXZ		; WINRECT::IsRowGroup
	mov	DWORD PTR _bRow$16[ebp], eax
; Line 324
	mov	ecx, DWORD PTR _wrc$[ebp]
	call	?Type@WINRECT@@QBEGXZ			; WINRECT::Type
	movzx	ecx, ax
	mov	DWORD PTR tv260[ebp], ecx
	mov	edx, DWORD PTR tv260[ebp]
	sub	edx, 1
	mov	DWORD PTR tv260[ebp], edx
	cmp	DWORD PTR tv260[ebp], 3
	ja	$LN5@OnGetSizeI
	mov	eax, DWORD PTR tv260[ebp]
	jmp	DWORD PTR $LN53@OnGetSizeI[eax*4]
$LN13@OnGetSizeI:
; Line 326
	mov	ecx, DWORD PTR _wrc$[ebp]
	call	?GetParam@WINRECT@@QAEJXZ		; WINRECT::GetParam
	mov	DWORD PTR _hwMin$18[ebp], eax
	mov	ecx, DWORD PTR _hwMin$18[ebp]
	mov	DWORD PTR _hw$23[ebp], ecx
; Line 327
	cmp	DWORD PTR _hw$23[ebp], 0
	jge	SHORT $LN12@OnGetSizeI
; Line 328
	mov	edx, DWORD PTR _hw$23[ebp]
	neg	edx
	mov	DWORD PTR _hw$23[ebp], edx
; Line 329
	mov	DWORD PTR _hwMin$18[ebp], 0
$LN12@OnGetSizeI:
; Line 331
	cmp	DWORD PTR _bRow$16[ebp], 0
	je	SHORT $LN11@OnGetSizeI
; Line 332
	mov	eax, DWORD PTR _szi$[ebp]
	mov	ecx, DWORD PTR _hw$23[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR _szi$[ebp]
	mov	eax, DWORD PTR _hw$23[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 333
	mov	ecx, DWORD PTR _szi$[ebp]
	mov	edx, DWORD PTR _hwMin$18[ebp]
	mov	DWORD PTR [ecx+20], edx
; Line 334
	jmp	SHORT $LN10@OnGetSizeI
$LN11@OnGetSizeI:
; Line 335
	mov	eax, DWORD PTR _szi$[ebp]
	mov	ecx, DWORD PTR _hw$23[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _szi$[ebp]
	mov	eax, DWORD PTR _hw$23[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 336
	mov	ecx, DWORD PTR _szi$[ebp]
	mov	edx, DWORD PTR _hwMin$18[ebp]
	mov	DWORD PTR [ecx+16], edx
$LN10@OnGetSizeI:
; Line 338
	jmp	$LN14@OnGetSizeI
$LN9@OnGetSizeI:
; Line 341
	mov	ecx, DWORD PTR _wrc$[ebp]
	call	?GetParam@WINRECT@@QAEJXZ		; WINRECT::GetParam
	mov	DWORD PTR _pct$17[ebp], eax
; Line 342
	cmp	DWORD PTR _pct$17[ebp], 0
	jle	SHORT $LN46@OnGetSizeI
	cmp	DWORD PTR _pct$17[ebp], 100		; 00000064H
	jl	SHORT $LN47@OnGetSizeI
$LN46@OnGetSizeI:
	push	342					; 00000156H
	push	OFFSET $SG64111
	push	OFFSET $SG64112
	call	__wassert
	add	esp, 12					; 0000000cH
$LN47@OnGetSizeI:
; Line 343
	cmp	DWORD PTR _bRow$16[ebp], 0
	je	SHORT $LN48@OnGetSizeI
	mov	ecx, DWORD PTR _rcParent$21[ebp]
	push	ecx
	call	?RectHeight@@YAJABUtagRECT@@@Z		; RectHeight
	add	esp, 4
	mov	DWORD PTR tv291[ebp], eax
	jmp	SHORT $LN49@OnGetSizeI
$LN48@OnGetSizeI:
	mov	edx, DWORD PTR _rcParent$21[ebp]
	push	edx
	call	?RectWidth@@YAJABUtagRECT@@@Z		; RectWidth
	add	esp, 4
	mov	DWORD PTR tv291[ebp], eax
$LN49@OnGetSizeI:
	mov	eax, DWORD PTR tv291[ebp]
	mov	DWORD PTR _hwTotal$4[ebp], eax
; Line 344
	mov	eax, DWORD PTR _hwTotal$4[ebp]
	imul	eax, DWORD PTR _pct$17[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _hw$23[ebp], eax
; Line 345
	cmp	DWORD PTR _bRow$16[ebp], 0
	je	SHORT $LN50@OnGetSizeI
	mov	edx, DWORD PTR _hw$23[ebp]
	push	edx
	mov	eax, DWORD PTR _rcParent$21[ebp]
	push	eax
	call	?RectWidth@@YAJABUtagRECT@@@Z		; RectWidth
	add	esp, 4
	push	eax
	call	?GetSize@@YA?AUtagSIZE@@JJ@Z		; GetSize
	add	esp, 8
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR $T8[ebp+4], edx
	mov	ecx, DWORD PTR $T8[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T8[ebp+4]
	mov	DWORD PTR $T3[ebp+4], edx
	lea	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv306[ebp], eax
	jmp	SHORT $LN51@OnGetSizeI
$LN50@OnGetSizeI:
	mov	ecx, DWORD PTR _rcParent$21[ebp]
	push	ecx
	call	?RectHeight@@YAJABUtagRECT@@@Z		; RectHeight
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _hw$23[ebp]
	push	edx
	call	?GetSize@@YA?AUtagSIZE@@JJ@Z		; GetSize
	add	esp, 8
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR $T6[ebp+4], edx
	mov	eax, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T6[ebp+4]
	mov	DWORD PTR $T2[ebp+4], ecx
	lea	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv306[ebp], edx
$LN51@OnGetSizeI:
	mov	eax, DWORD PTR tv306[ebp]
	mov	DWORD PTR $T10[ebp], eax
	mov	ecx, DWORD PTR $T10[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _szi$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax
; Line 346
	jmp	SHORT $LN14@OnGetSizeI
$LN8@OnGetSizeI:
; Line 349
	mov	ecx, DWORD PTR _wrc$[ebp]
	call	?HasToFitSize@WINRECT@@QAEHXZ		; WINRECT::HasToFitSize
	test	eax, eax
	je	SHORT $LN7@OnGetSizeI
; Line 350
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _wrc$[ebp]
	call	?GetToFitSize@WINRECT@@QAE?AUtagSIZE@@XZ ; WINRECT::GetToFitSize
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _szi$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
$LN7@OnGetSizeI:
; Line 352
	jmp	SHORT $LN14@OnGetSizeI
$LN6@OnGetSizeI:
; Line 355
	jmp	SHORT $LN14@OnGetSizeI
$LN5@OnGetSizeI:
; Line 358
	xor	ecx, ecx
	jne	SHORT $LN14@OnGetSizeI
	push	358					; 00000166H
	push	OFFSET $SG64124
	push	OFFSET $SG64125
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@OnGetSizeI:
; Line 364
	mov	ecx, DWORD PTR _wrc$[ebp]
	call	?IsWindow@WINRECT@@QBEHXZ		; WINRECT::IsWindow
	test	eax, eax
	je	$LN4@OnGetSizeI
	cmp	DWORD PTR _hWnd$[ebp], 0
	je	$LN4@OnGetSizeI
; Line 365
	mov	ecx, DWORD PTR _wrc$[ebp]
	call	?GetID@WINRECT@@QAEIXZ			; WINRECT::GetID
	push	eax
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hChild$14[ebp], eax
; Line 366
	cmp	DWORD PTR _hChild$14[ebp], 0
	je	SHORT $LN4@OnGetSizeI
; Line 367
	mov	ecx, DWORD PTR _hChild$14[ebp]
	push	ecx
	call	DWORD PTR __imp__IsWindowVisible@4
	test	eax, eax
	jne	SHORT $LN2@OnGetSizeI
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	DWORD PTR __imp__IsWindowVisible@4
	test	eax, eax
	je	SHORT $LN2@OnGetSizeI
; Line 370
	mov	eax, DWORD PTR _szi$[ebp]
	mov	ecx, DWORD PTR _SIZEZERO
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _SIZEZERO+4
	mov	DWORD PTR [eax+12], edx
; Line 371
	jmp	SHORT $LN4@OnGetSizeI
$LN2@OnGetSizeI:
; Line 372
	mov	eax, DWORD PTR _rcParent$21[ebp]
	push	eax
	call	?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z ; RectToSize
	add	esp, 4
	mov	DWORD PTR $T12[ebp], eax
	mov	DWORD PTR $T12[ebp+4], edx
	mov	ecx, DWORD PTR _szi$[ebp]
	mov	edx, DWORD PTR $T12[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T12[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 373
	mov	ecx, DWORD PTR _wrc$[ebp]
	call	?GetID@WINRECT@@QAEIXZ			; WINRECT::GetID
	push	eax
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _szi$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendGetSizeInfo@CWinMgr@@IAEHAAUSIZEINFO@@PAUHWND__@@I@Z ; CWinMgr::SendGetSizeInfo
$LN4@OnGetSizeI:
; Line 377
	mov	eax, DWORD PTR _szi$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR [eax+24]
	push	edx
	mov	eax, DWORD PTR _szi$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	?minsize@@YA?AUtagSIZE@@U1@0@Z		; minsize
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T11[ebp], eax
	mov	DWORD PTR $T11[ebp+4], edx
	mov	eax, DWORD PTR _szi$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	push	edx
	mov	eax, DWORD PTR $T11[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T11[ebp]
	push	ecx
	call	?maxsize@@YA?AUtagSIZE@@U1@0@Z		; maxsize
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR $T9[ebp+4], edx
	mov	edx, DWORD PTR _szi$[ebp]
	mov	eax, DWORD PTR $T9[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR $T9[ebp+4]
	mov	DWORD PTR [edx+12], ecx
$LN23@OnGetSizeI:
; Line 379
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN53@OnGetSizeI:
	DD	$LN13@OnGetSizeI
	DD	$LN9@OnGetSizeI
	DD	$LN6@OnGetSizeI
	DD	$LN8@OnGetSizeI
?OnGetSizeInfo@CWinMgr@@UAEXAAUSIZEINFO@@PAVWINRECT@@PAUHWND__@@@Z ENDP ; CWinMgr::OnGetSizeInfo
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_hdwp$1 = -28						; size = 4
_count$2 = -24						; size = 4
_hwndChild$3 = -20					; size = 4
_nWindows$ = -16					; size = 4
_this$ = -12						; size = 4
_rc$4 = -8						; size = 4
_wrc$5 = -4						; size = 4
_hWnd$ = 8						; size = 4
?SetWindowPositions@CWinMgr@@UAEXPAUHWND__@@@Z PROC	; CWinMgr::SetWindowPositions
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.cpp
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CountWindows@CWinMgr@@IAEHXZ		; CWinMgr::CountWindows
	mov	DWORD PTR _nWindows$[ebp], eax
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN8@SetWindowP
	cmp	DWORD PTR _hWnd$[ebp], 0
	je	$LN8@SetWindowP
	cmp	DWORD PTR _nWindows$[ebp], 0
	jle	$LN8@SetWindowP
; Line 77
	mov	ecx, DWORD PTR _nWindows$[ebp]
	push	ecx
	call	DWORD PTR __imp__BeginDeferWindowPos@4
	mov	DWORD PTR _hdwp$1[ebp], eax
; Line 78
	mov	DWORD PTR _count$2[ebp], 0
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _wrc$5[ebp], eax
	jmp	SHORT $LN6@SetWindowP
$LN5@SetWindowP:
	mov	ecx, DWORD PTR _wrc$5[ebp]
	add	ecx, 36					; 00000024H
	mov	DWORD PTR _wrc$5[ebp], ecx
$LN6@SetWindowP:
	mov	ecx, DWORD PTR _wrc$5[ebp]
	call	?IsEnd@WINRECT@@QBEHXZ			; WINRECT::IsEnd
	test	eax, eax
	jne	$LN4@SetWindowP
; Line 80
	mov	ecx, DWORD PTR _wrc$5[ebp]
	call	?IsWindow@WINRECT@@QBEHXZ		; WINRECT::IsWindow
	test	eax, eax
	je	$LN3@SetWindowP
; Line 81
	mov	edx, DWORD PTR _count$2[ebp]
	cmp	edx, DWORD PTR _nWindows$[ebp]
	jl	SHORT $LN10@SetWindowP
	push	81					; 00000051H
	push	OFFSET $SG63961
	push	OFFSET $SG63962
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@SetWindowP:
; Line 82
	mov	ecx, DWORD PTR _wrc$5[ebp]
	call	?GetID@WINRECT@@QAEIXZ			; WINRECT::GetID
	push	eax
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndChild$3[ebp], eax
; Line 83
	cmp	DWORD PTR _hwndChild$3[ebp], 0
	je	SHORT $LN2@SetWindowP
; Line 84
	mov	ecx, DWORD PTR _wrc$5[ebp]
	call	?GetRect@WINRECT@@QAEAAUtagRECT@@XZ	; WINRECT::GetRect
	mov	DWORD PTR _rc$4[ebp], eax
; Line 89
	push	4
	mov	edx, DWORD PTR _rc$4[ebp]
	push	edx
	call	?RectHeight@@YAJABUtagRECT@@@Z		; RectHeight
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _rc$4[ebp]
	push	eax
	call	?RectWidth@@YAJABUtagRECT@@@Z		; RectWidth
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _rc$4[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _rc$4[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	0
	mov	edx, DWORD PTR _hwndChild$3[ebp]
	push	edx
	mov	eax, DWORD PTR _hdwp$1[ebp]
	push	eax
	call	DWORD PTR __imp__DeferWindowPos@32
; Line 90
	push	1
	push	0
	mov	ecx, DWORD PTR _hwndChild$3[ebp]
	push	ecx
	call	DWORD PTR __imp__InvalidateRect@12
; Line 91
	mov	edx, DWORD PTR _count$2[ebp]
	add	edx, 1
	mov	DWORD PTR _count$2[ebp], edx
$LN2@SetWindowP:
; Line 93
	jmp	SHORT $LN1@SetWindowP
$LN3@SetWindowP:
; Line 95
	push	1
	mov	ecx, DWORD PTR _wrc$5[ebp]
	call	?GetRect@WINRECT@@QAEAAUtagRECT@@XZ	; WINRECT::GetRect
	push	eax
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__InvalidateRect@12
$LN1@SetWindowP:
; Line 97
	jmp	$LN5@SetWindowP
$LN4@SetWindowP:
; Line 98
	mov	ecx, DWORD PTR _hdwp$1[ebp]
	push	ecx
	call	DWORD PTR __imp__EndDeferWindowPos@4
$LN8@SetWindowP:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWindowPositions@CWinMgr@@UAEXPAUHWND__@@@Z ENDP	; CWinMgr::SetWindowPositions
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_p$1 = -28						; size = 8
$T2 = -20						; size = 8
_HChild$3 = -12						; size = 4
_this$ = -8						; size = 4
_wrc$4 = -4						; size = 4
_hWnd$ = 8						; size = 4
?GetWindowPositions@CWinMgr@@UAEXPAUHWND__@@@Z PROC	; CWinMgr::GetWindowPositions
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.cpp
; Line 54
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 55
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@GetWindowP
	push	55					; 00000037H
	push	OFFSET $SG63933
	push	OFFSET $SG63934
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@GetWindowP:
; Line 56
	cmp	DWORD PTR _hWnd$[ebp], 0
	jne	SHORT $LN9@GetWindowP
	push	56					; 00000038H
	push	OFFSET $SG63936
	push	OFFSET $SG63937
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@GetWindowP:
; Line 57
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _wrc$4[ebp], ecx
	jmp	SHORT $LN5@GetWindowP
$LN4@GetWindowP:
	mov	edx, DWORD PTR _wrc$4[ebp]
	add	edx, 36					; 00000024H
	mov	DWORD PTR _wrc$4[ebp], edx
$LN5@GetWindowP:
	mov	ecx, DWORD PTR _wrc$4[ebp]
	call	?IsEnd@WINRECT@@QBEHXZ			; WINRECT::IsEnd
	test	eax, eax
	jne	SHORT $LN6@GetWindowP
; Line 58
	mov	ecx, DWORD PTR _wrc$4[ebp]
	call	?IsWindow@WINRECT@@QBEHXZ		; WINRECT::IsWindow
	test	eax, eax
	je	SHORT $LN2@GetWindowP
; Line 59
	mov	ecx, DWORD PTR _wrc$4[ebp]
	call	?GetID@WINRECT@@QAEIXZ			; WINRECT::GetID
	push	eax
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _HChild$3[ebp], eax
; Line 60
	cmp	DWORD PTR _HChild$3[ebp], 0
	je	SHORT $LN2@GetWindowP
; Line 61
	mov	ecx, DWORD PTR _wrc$4[ebp]
	call	?GetRect@WINRECT@@QAEAAUtagRECT@@XZ	; WINRECT::GetRect
	push	eax
	mov	ecx, DWORD PTR _HChild$3[ebp]
	push	ecx
	call	DWORD PTR __imp__GetWindowRect@8
; Line 62
	mov	ecx, DWORD PTR _wrc$4[ebp]
	call	?GetRect@WINRECT@@QAEAAUtagRECT@@XZ	; WINRECT::GetRect
	push	eax
	call	?RectToPoint@@YA?AUtagPOINT@@ABUtagRECT@@@Z ; RectToPoint
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR $T2[ebp+4], edx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _p$1[ebp], edx
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR _p$1[ebp+4], eax
; Line 63
	lea	ecx, DWORD PTR _p$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	DWORD PTR __imp__ScreenToClient@8
$LN2@GetWindowP:
; Line 66
	jmp	$LN4@GetWindowP
$LN6@GetWindowP:
; Line 67
	mov	esp, ebp
	pop	ebp
	ret	4
?GetWindowPositions@CWinMgr@@UAEXPAUHWND__@@@Z ENDP	; CWinMgr::GetWindowPositions
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CWinMgr@@UAE@XZ PROC					; CWinMgr::~CWinMgr
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.cpp
; Line 31
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CWinMgr@@6B@
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??1CWinMgr@@UAE@XZ ENDP					; CWinMgr::~CWinMgr
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pWinMap$ = 8						; size = 4
??0CWinMgr@@QAE@PAVWINRECT@@@Z PROC			; CWinMgr::CWinMgr
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.cpp
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CWinMgr@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pWinMap$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 27
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?InitMap@WINRECT@@SAPAV1@PAV1@0@Z	; WINRECT::InitMap
	add	esp, 8
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CWinMgr@@QAE@PAVWINRECT@@@Z ENDP			; CWinMgr::CWinMgr
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0NMWINMGR@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0NMWINMGR@@QAE@XZ PROC				; NMWINMGR::NMWINMGR, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 219
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	48					; 00000030H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0NMWINMGR@@QAE@XZ ENDP				; NMWINMGR::NMWINMGR
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?Next@CWinGroupIterator@@QAEPAVWINRECT@@XZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?Next@CWinGroupIterator@@QAEPAVWINRECT@@XZ PROC		; CWinGroupIterator::Next, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 196
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Next
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?Next@WINRECT@@QAEPAV1@XZ		; WINRECT::Next
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN4@Next
$LN3@Next:
	mov	DWORD PTR tv70[ebp], 0
$LN4@Next:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?Next@CWinGroupIterator@@QAEPAVWINRECT@@XZ ENDP		; CWinGroupIterator::Next
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??BCWinGroupIterator@@QAEPAVWINRECT@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCWinGroupIterator@@QAEPAVWINRECT@@XZ PROC		; CWinGroupIterator::operator WINRECT *, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 194
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BCWinGroupIterator@@QAEPAVWINRECT@@XZ ENDP		; CWinGroupIterator::operator WINRECT *
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??4CWinGroupIterator@@QAEAAV0@PAVWINRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pg$ = 8						; size = 4
??4CWinGroupIterator@@QAEAAV0@PAVWINRECT@@@Z PROC	; CWinGroupIterator::operator=, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 189
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 190
	mov	ecx, DWORD PTR _pg$[ebp]
	call	?IsGroup@WINRECT@@QBEHXZ		; WINRECT::IsGroup
	test	eax, eax
	jne	SHORT $LN3@operator
	push	190					; 000000beH
	push	OFFSET ??_C@_1KO@LJAFCIDL@?$AAc?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@
	push	OFFSET ??_C@_1BM@GEOBLKFJ@?$AAp?$AAg?$AA?9?$AA?$DO?$AAI?$AAs?$AAG?$AAr?$AAo?$AAu?$AAp?$AA?$CI?$AA?$CJ?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@operator:
; Line 191
	mov	ecx, DWORD PTR _pg$[ebp]
	call	?Children@WINRECT@@QAEPAV1@XZ		; WINRECT::Children
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 192
	mov	eax, DWORD PTR _this$[ebp]
; Line 193
	mov	esp, ebp
	pop	ebp
	ret	4
??4CWinGroupIterator@@QAEAAV0@PAVWINRECT@@@Z ENDP	; CWinGroupIterator::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0CWinGroupIterator@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CWinGroupIterator@@QAE@XZ PROC			; CWinGroupIterator::CWinGroupIterator, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 188
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CWinGroupIterator@@QAE@XZ ENDP			; CWinGroupIterator::CWinGroupIterator
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?SetToFitSize@WINRECT@@QAEXUtagSIZE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sz$ = 8						; size = 8
?SetToFitSize@WINRECT@@QAEXUtagSIZE@@@Z PROC		; WINRECT::SetToFitSize, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sz$[ebp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	mov	edx, DWORD PTR _sz$[ebp+4]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetToFitSize@WINRECT@@QAEXUtagSIZE@@@Z ENDP		; WINRECT::SetToFitSize
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?GetToFitSize@WINRECT@@QAE?AUtagSIZE@@XZ
_TEXT	SEGMENT
_sz$ = -12						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetToFitSize@WINRECT@@QAE?AUtagSIZE@@XZ PROC		; WINRECT::GetToFitSize, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 146
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	mov	DWORD PTR _sz$[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	mov	DWORD PTR _sz$[ebp+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _sz$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _sz$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetToFitSize@WINRECT@@QAE?AUtagSIZE@@XZ ENDP		; WINRECT::GetToFitSize
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?HasToFitSize@WINRECT@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?HasToFitSize@WINRECT@@QAEHXZ PROC			; WINRECT::HasToFitSize, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 145
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN3@HasToFitSi
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@HasToFitSi
$LN3@HasToFitSi:
	mov	DWORD PTR tv66[ebp], 0
$LN4@HasToFitSi:
	mov	eax, DWORD PTR tv66[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?HasToFitSize@WINRECT@@QAEHXZ ENDP			; WINRECT::HasToFitSize
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?SetHeightOrWidth@WINRECT@@QAEXJH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_horw$ = 8						; size = 4
_bHeight$ = 12						; size = 4
?SetHeightOrWidth@WINRECT@@QAEXJH@Z PROC		; WINRECT::SetHeightOrWidth, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 138
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 139
	cmp	DWORD PTR _bHeight$[ebp], 0
	je	SHORT $LN3@SetHeightO
	mov	eax, DWORD PTR _horw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetHeight@WINRECT@@QAEXJ@Z		; WINRECT::SetHeight
	mov	DWORD PTR tv69[ebp], 0
	jmp	SHORT $LN1@SetHeightO
$LN3@SetHeightO:
	mov	ecx, DWORD PTR _horw$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWidth@WINRECT@@QAEXJ@Z		; WINRECT::SetWidth
	mov	DWORD PTR tv69[ebp], 0
$LN1@SetHeightO:
; Line 140
	mov	esp, ebp
	pop	ebp
	ret	8
?SetHeightOrWidth@WINRECT@@QAEXJH@Z ENDP		; WINRECT::SetHeightOrWidth
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?GetHeightOrWidth@WINRECT@@QBEJH@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_bHeight$ = 8						; size = 4
?GetHeightOrWidth@WINRECT@@QBEJH@Z PROC			; WINRECT::GetHeightOrWidth, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 135
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 136
	cmp	DWORD PTR _bHeight$[ebp], 0
	je	SHORT $LN3@GetHeightO
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	call	?RectHeight@@YAJABUtagRECT@@@Z		; RectHeight
	add	esp, 4
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@GetHeightO
$LN3@GetHeightO:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	call	?RectWidth@@YAJABUtagRECT@@@Z		; RectWidth
	add	esp, 4
	mov	DWORD PTR tv71[ebp], eax
$LN4@GetHeightO:
	mov	eax, DWORD PTR tv71[ebp]
; Line 137
	mov	esp, ebp
	pop	ebp
	ret	4
?GetHeightOrWidth@WINRECT@@QBEJH@Z ENDP			; WINRECT::GetHeightOrWidth
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?SetWidth@WINRECT@@QAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_w$ = 8							; size = 4
?SetWidth@WINRECT@@QAEXJ@Z PROC				; WINRECT::SetWidth, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 134
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWidth@WINRECT@@QAEXJ@Z ENDP				; WINRECT::SetWidth
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?SetHeight@WINRECT@@QAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_h$ = 8							; size = 4
?SetHeight@WINRECT@@QAEXJ@Z PROC			; WINRECT::SetHeight, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 133
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetHeight@WINRECT@@QAEXJ@Z ENDP			; WINRECT::SetHeight
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?IsRowGroup@WINRECT@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsRowGroup@WINRECT@@QBEHXZ PROC			; WINRECT::IsRowGroup, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 132
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+24]
	and	ecx, 240				; 000000f0H
	cmp	ecx, 16					; 00000010H
	jne	SHORT $LN3@IsRowGroup
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsRowGroup
$LN3@IsRowGroup:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsRowGroup:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsRowGroup@WINRECT@@QBEHXZ ENDP			; WINRECT::IsRowGroup
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?IsWindow@WINRECT@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?IsWindow@WINRECT@@QBEHXZ PROC				; WINRECT::IsWindow, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 131
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jbe	SHORT $LN3@IsWindow
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsWindow
$LN3@IsWindow:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsWindow:
	mov	eax, DWORD PTR tv66[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsWindow@WINRECT@@QBEHXZ ENDP				; WINRECT::IsWindow
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?IsEnd@WINRECT@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsEnd@WINRECT@@QBEHXZ PROC				; WINRECT::IsEnd, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 130
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+24]
	test	ecx, ecx
	jne	SHORT $LN3@IsEnd
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsEnd
$LN3@IsEnd:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsEnd:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEnd@WINRECT@@QBEHXZ ENDP				; WINRECT::IsEnd
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?IsGroup@WINRECT@@QBEHXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?IsGroup@WINRECT@@QBEHXZ PROC				; WINRECT::IsGroup, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 128
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GroupType@WINRECT@@QBEGXZ		; WINRECT::GroupType
	movzx	eax, ax
	test	eax, eax
	je	SHORT $LN3@IsGroup
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GroupType@WINRECT@@QBEGXZ		; WINRECT::GroupType
	movzx	ecx, ax
	cmp	ecx, 240				; 000000f0H
	je	SHORT $LN3@IsGroup
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@IsGroup
$LN3@IsGroup:
	mov	DWORD PTR tv72[ebp], 0
$LN4@IsGroup:
	mov	eax, DWORD PTR tv72[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGroup@WINRECT@@QBEHXZ ENDP				; WINRECT::IsGroup
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?GroupType@WINRECT@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GroupType@WINRECT@@QBEGXZ PROC				; WINRECT::GroupType, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 127
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [eax+24]
	and	eax, 240				; 000000f0H
	mov	esp, ebp
	pop	ebp
	ret	0
?GroupType@WINRECT@@QBEGXZ ENDP				; WINRECT::GroupType
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?Type@WINRECT@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@WINRECT@@QBEGXZ PROC				; WINRECT::Type, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [eax+24]
	and	eax, 15					; 0000000fH
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@WINRECT@@QBEGXZ ENDP				; WINRECT::Type
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?GetRect@WINRECT@@QAEAAUtagRECT@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRect@WINRECT@@QAEAAUtagRECT@@XZ PROC		; WINRECT::GetRect, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 124
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRect@WINRECT@@QAEAAUtagRECT@@XZ ENDP		; WINRECT::GetRect
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?GetID@WINRECT@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetID@WINRECT@@QAEIXZ PROC				; WINRECT::GetID, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 122
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetID@WINRECT@@QAEIXZ ENDP				; WINRECT::GetID
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?GetParam@WINRECT@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetParam@WINRECT@@QAEJXZ PROC				; WINRECT::GetParam, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 120
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetParam@WINRECT@@QAEJXZ ENDP				; WINRECT::GetParam
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?Children@WINRECT@@QAEPAV1@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?Children@WINRECT@@QAEPAV1@XZ PROC			; WINRECT::Children, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 116
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsGroup@WINRECT@@QBEHXZ		; WINRECT::IsGroup
	test	eax, eax
	je	SHORT $LN3@Children
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@Children
$LN3@Children:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Children:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?Children@WINRECT@@QAEPAV1@XZ ENDP			; WINRECT::Children
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?Next@WINRECT@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Next@WINRECT@@QAEPAV1@XZ PROC				; WINRECT::Next, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 115
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Next@WINRECT@@QAEPAV1@XZ ENDP				; WINRECT::Next
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?Prev@WINRECT@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Prev@WINRECT@@QAEPAV1@XZ PROC				; WINRECT::Prev, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 114
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Prev@WINRECT@@QAEPAV1@XZ ENDP				; WINRECT::Prev
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?maxsize@@YA?AUtagSIZE@@U1@0@Z
_TEXT	SEGMENT
$T1 = -16						; size = 8
tv69 = -8						; size = 4
tv66 = -4						; size = 4
_a$ = 8							; size = 8
_b$ = 16						; size = 8
?maxsize@@YA?AUtagSIZE@@U1@0@Z PROC			; maxsize, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 64
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 65
	mov	eax, DWORD PTR _a$[ebp+4]
	cmp	eax, DWORD PTR _b$[ebp+4]
	jbe	SHORT $LN3@maxsize
	mov	ecx, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR tv66[ebp], ecx
	jmp	SHORT $LN4@maxsize
$LN3@maxsize:
	mov	edx, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR tv66[ebp], edx
$LN4@maxsize:
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _b$[ebp]
	jbe	SHORT $LN5@maxsize
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN6@maxsize
$LN5@maxsize:
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv69[ebp], edx
$LN6@maxsize:
	mov	eax, DWORD PTR tv66[ebp]
	push	eax
	mov	ecx, DWORD PTR tv69[ebp]
	push	ecx
	call	?GetSize@@YA?AUtagSIZE@@JJ@Z		; GetSize
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR $T1[ebp+4]
; Line 66
	mov	esp, ebp
	pop	ebp
	ret	0
?maxsize@@YA?AUtagSIZE@@U1@0@Z ENDP			; maxsize
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?minsize@@YA?AUtagSIZE@@U1@0@Z
_TEXT	SEGMENT
$T1 = -16						; size = 8
tv69 = -8						; size = 4
tv66 = -4						; size = 4
_a$ = 8							; size = 8
_b$ = 16						; size = 8
?minsize@@YA?AUtagSIZE@@U1@0@Z PROC			; minsize, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 60
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 61
	mov	eax, DWORD PTR _a$[ebp+4]
	cmp	eax, DWORD PTR _b$[ebp+4]
	jae	SHORT $LN3@minsize
	mov	ecx, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR tv66[ebp], ecx
	jmp	SHORT $LN4@minsize
$LN3@minsize:
	mov	edx, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR tv66[ebp], edx
$LN4@minsize:
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _b$[ebp]
	jae	SHORT $LN5@minsize
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN6@minsize
$LN5@minsize:
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv69[ebp], edx
$LN6@minsize:
	mov	eax, DWORD PTR tv66[ebp]
	push	eax
	mov	ecx, DWORD PTR tv69[ebp]
	push	ecx
	call	?GetSize@@YA?AUtagSIZE@@JJ@Z		; GetSize
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR $T1[ebp+4]
; Line 62
	mov	esp, ebp
	pop	ebp
	ret	0
?minsize@@YA?AUtagSIZE@@U1@0@Z ENDP			; minsize
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?OffsetRect@@YAAAUtagRECT@@AAU1@UtagPOINT@@@Z
_TEXT	SEGMENT
_rc$ = 8						; size = 4
_pt$ = 12						; size = 8
?OffsetRect@@YAAAUtagRECT@@AAU1@UtagPOINT@@@Z PROC	; OffsetRect, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 53
	push	ebp
	mov	ebp, esp
; Line 54
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _pt$[ebp]
	mov	edx, DWORD PTR _rc$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _pt$[ebp]
	mov	edx, DWORD PTR _rc$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 55
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _pt$[ebp+4]
	mov	edx, DWORD PTR _rc$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _pt$[ebp+4]
	mov	edx, DWORD PTR _rc$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 56
	mov	eax, DWORD PTR _rc$[ebp]
; Line 57
	pop	ebp
	ret	0
?OffsetRect@@YAAAUtagRECT@@AAU1@UtagPOINT@@@Z ENDP	; OffsetRect
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?SizeToPoint@@YA?AUtagPOINT@@UtagSIZE@@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
_sz$ = 8						; size = 8
?SizeToPoint@@YA?AUtagPOINT@@UtagSIZE@@@Z PROC		; SizeToPoint, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 49
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 50
	mov	eax, DWORD PTR _sz$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _sz$[ebp]
	push	ecx
	call	?GetPoint@@YA?AUtagPOINT@@JJ@Z		; GetPoint
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR $T1[ebp+4]
; Line 51
	mov	esp, ebp
	pop	ebp
	ret	0
?SizeToPoint@@YA?AUtagPOINT@@UtagSIZE@@@Z ENDP		; SizeToPoint
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?RectToPoint@@YA?AUtagPOINT@@ABUtagRECT@@@Z
_TEXT	SEGMENT
_pt$ = -8						; size = 8
_rc$ = 8						; size = 4
?RectToPoint@@YA?AUtagPOINT@@ABUtagRECT@@@Z PROC	; RectToPoint, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 45
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pt$[ebp], ecx
	mov	edx, DWORD PTR _rc$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _pt$[ebp+4], eax
; Line 46
	mov	eax, DWORD PTR _pt$[ebp]
	mov	edx, DWORD PTR _pt$[ebp+4]
; Line 47
	mov	esp, ebp
	pop	ebp
	ret	0
?RectToPoint@@YA?AUtagPOINT@@ABUtagRECT@@@Z ENDP	; RectToPoint
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
_rc$ = 8						; size = 4
?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z PROC		; RectToSize, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 40
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 41
	mov	eax, DWORD PTR _rc$[ebp]
	push	eax
	call	?RectHeight@@YAJABUtagRECT@@@Z		; RectHeight
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	call	?RectWidth@@YAJABUtagRECT@@@Z		; RectWidth
	add	esp, 4
	push	eax
	call	?GetSize@@YA?AUtagSIZE@@JJ@Z		; GetSize
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR $T1[ebp+4]
; Line 42
	mov	esp, ebp
	pop	ebp
	ret	0
?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z ENDP		; RectToSize
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?RectHeight@@YAJABUtagRECT@@@Z
_TEXT	SEGMENT
_rc$ = 8						; size = 4
?RectHeight@@YAJABUtagRECT@@@Z PROC			; RectHeight, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 36
	push	ebp
	mov	ebp, esp
; Line 37
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
; Line 38
	pop	ebp
	ret	0
?RectHeight@@YAJABUtagRECT@@@Z ENDP			; RectHeight
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?RectWidth@@YAJABUtagRECT@@@Z
_TEXT	SEGMENT
_rc$ = 8						; size = 4
?RectWidth@@YAJABUtagRECT@@@Z PROC			; RectWidth, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 32
	push	ebp
	mov	ebp, esp
; Line 33
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
; Line 34
	pop	ebp
	ret	0
?RectWidth@@YAJABUtagRECT@@@Z ENDP			; RectWidth
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?GetPoint@@YA?AUtagPOINT@@JJ@Z
_TEXT	SEGMENT
_pt$ = -8						; size = 8
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?GetPoint@@YA?AUtagPOINT@@JJ@Z PROC			; GetPoint, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 28
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 29
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pt$[ebp], eax
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _pt$[ebp+4], ecx
	mov	eax, DWORD PTR _pt$[ebp]
	mov	edx, DWORD PTR _pt$[ebp+4]
; Line 30
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPoint@@YA?AUtagPOINT@@JJ@Z ENDP			; GetPoint
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?GetSize@@YA?AUtagSIZE@@JJ@Z
_TEXT	SEGMENT
_sz$ = -8						; size = 8
_w$ = 8							; size = 4
_h$ = 12						; size = 4
?GetSize@@YA?AUtagSIZE@@JJ@Z PROC			; GetSize, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 24
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 25
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR _sz$[ebp], eax
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR _sz$[ebp+4], ecx
	mov	eax, DWORD PTR _sz$[ebp]
	mov	edx, DWORD PTR _sz$[ebp+4]
; Line 26
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@@YA?AUtagSIZE@@JJ@Z ENDP			; GetSize
_TEXT	ENDS
END
