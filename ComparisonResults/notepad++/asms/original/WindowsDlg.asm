; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\src\WinControls\WindowsDlg\WindowsDlg.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A	; WindowsDlg::_lastKnownLocation
_BSS	SEGMENT
?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A DB 010H DUP (?) ; WindowsDlg::_lastKnownLocation
_BSS	ENDS
CONST	SEGMENT
$SG132113 DB	' ', 00H, '[', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, 'O', 00H, 'n', 00H, 'l', 00H, 'y', 00H, ']', 00H, 00H
	DB	00H
	ORG $+2
$SG132116 DB	'W', 00H, 'D', 00H, 'N', 00H, '_', 00H, 'N', 00H, 'O', 00H
	DB	'T', 00H, 'I', 00H, 'F', 00H, 'Y', 00H, 00H, 00H
	ORG $+2
$SG132287 DB	'Call other initialize method', 00H
	ORG $+3
$SG132341 DB	00H, 00H
	ORG $+2
$SG132288 DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, 'D', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's', 00H, 'D', 00H, 'l'
	DB	00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG132597 DB	'id', 00H
	ORG $+1
$SG132289 DB	'!', 00H, '"', 00H, 'C', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	' ', 00H, 'o', 00H, 't', 00H, 'h', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'i', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, 'm', 00H, 'e'
	DB	00H, 't', 00H, 'h', 00H, 'o', 00H, 'd', 00H, '"', 00H, 00H, 00H
$SG132585 DB	'title', 00H
	ORG $+2
$SG132589 DB	'Item', 00H
	ORG $+3
$SG132593 DB	'Item', 00H
	ORG $+3
$SG132599 DB	'name', 00H
	ORG $+3
$SG132617 DB	'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG132618 DB	'P', 00H, 'a', 00H, 't', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG132619 DB	'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H
	ORG $+2
_SIZEZERO DD	00H
	DD	00H
$SG133098 DB	'.', 00H, '.', 00H, '.', 00H, 00H, 00H
CONST	ENDS
_DATA	SEGMENT
_readonlyString DD FLAT:$SG132113
_DATA	ENDS
PUBLIC	_hypot
PUBLIC	_wmemcpy
PUBLIC	_wmemmove
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@_W@std@@SAIPB_W@Z		; std::char_traits<wchar_t>::length
PUBLIC	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z	; std::char_traits<wchar_t>::copy
PUBLIC	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z	; std::char_traits<wchar_t>::move
PUBLIC	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z	; std::char_traits<wchar_t>::assign
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	??1_Container_base12@std@@QAE@XZ		; std::_Container_base12::~_Container_base12
PUBLIC	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Clrcont@_Iterator_base12@std@@QAEXXZ		; std::_Iterator_base12::_Clrcont
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ	; std::_Iterator_base12::_Getpnext
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	??0_Ignore@std@@QAE@XZ				; std::_Ignore::_Ignore
PUBLIC	?GetSize@@YA?AUtagSIZE@@JJ@Z			; GetSize
PUBLIC	?RectWidth@@YAJABUtagRECT@@@Z			; RectWidth
PUBLIC	?RectHeight@@YAJABUtagRECT@@@Z			; RectHeight
PUBLIC	?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z	; RectToSize
PUBLIC	?GetRect@WINRECT@@QAEAAUtagRECT@@XZ		; WINRECT::GetRect
PUBLIC	?SetRect@WINRECT@@QAEXABUtagRECT@@@Z		; WINRECT::SetRect
PUBLIC	?CalcLayout@CWinMgr@@QAEXPAUHWND__@@@Z		; CWinMgr::CalcLayout
PUBLIC	?CalcLayout@CWinMgr@@QAEXUtagRECT@@PAUHWND__@@@Z ; CWinMgr::CalcLayout
PUBLIC	?GetRect@CWinMgr@@QAE?AUtagRECT@@I@Z		; CWinMgr::GetRect
PUBLIC	??1Window@@UAE@XZ				; Window::~Window
PUBLIC	?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z	; Window::init
PUBLIC	?display@Window@@UBEX_N@Z			; Window::display
PUBLIC	?reSizeTo@Window@@UAEXAAUtagRECT@@@Z		; Window::reSizeTo
PUBLIC	?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z		; Window::reSizeToWH
PUBLIC	?redraw@Window@@UBEX_N@Z			; Window::redraw
PUBLIC	?getClientRect@Window@@UBEXAAUtagRECT@@@Z	; Window::getClientRect
PUBLIC	?getWindowRect@Window@@UBEXAAUtagRECT@@@Z	; Window::getWindowRect
PUBLIC	?getWidth@Window@@UBEHXZ			; Window::getWidth
PUBLIC	?getHeight@Window@@UBEHXZ			; Window::getHeight
PUBLIC	?isVisible@Window@@UBE_NXZ			; Window::isVisible
PUBLIC	??_GWindow@@UAEPAXI@Z				; Window::`scalar deleting destructor'
PUBLIC	??1StaticDialog@@UAE@XZ				; StaticDialog::~StaticDialog
PUBLIC	?isCreated@StaticDialog@@UBE_NXZ		; StaticDialog::isCreated
PUBLIC	?destroy@StaticDialog@@UAEXXZ			; StaticDialog::destroy
PUBLIC	??_GStaticDialog@@UAEPAXI@Z			; StaticDialog::`scalar deleting destructor'
PUBLIC	??1SizeableDlg@@UAE@XZ				; SizeableDlg::~SizeableDlg
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	??$_Debug_range@PA_W@std@@YAXPA_W0PB_WI@Z	; std::_Debug_range<wchar_t *>
PUBLIC	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z		; std::_Debug_pointer<char>
PUBLIC	??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z	; std::_Debug_pointer<wchar_t>
PUBLIC	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z		; std::_Debug_pointer<wchar_t>
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	??$swap@H@std@@YAXAAH0@Z			; std::swap<int>
PUBLIC	??0?$allocator@_W@std@@QAE@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
PUBLIC	?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z	; std::allocator<wchar_t>::deallocate
PUBLIC	?allocate@?$allocator@_W@std@@QAEPA_WI@Z	; std::allocator<wchar_t>::allocate
PUBLIC	?max_size@?$allocator@_W@std@@QBEIXZ		; std::allocator<wchar_t>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
PUBLIC	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
PUBLIC	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
PUBLIC	?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::begin
PUBLIC	?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::end
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
PUBLIC	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
PUBLIC	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
PUBLIC	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
PUBLIC	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
PUBLIC	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
PUBLIC	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
PUBLIC	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
PUBLIC	?getInstance@WcharMbcsConvertor@@SAPAV1@XZ	; WcharMbcsConvertor::getInstance
PUBLIC	??0NMWINDLG@@QAE@XZ				; NMWINDLG::NMWINDLG
PUBLIC	??0WindowsDlg@@QAE@XZ				; WindowsDlg::WindowsDlg
PUBLIC	?doDialog@WindowsDlg@@QAEHPAVTiXmlNodeA@@@Z	; WindowsDlg::doDialog
PUBLIC	?init@WindowsDlg@@UAEXPAUHINSTANCE__@@PAUHWND__@@PAVDocTabView@@@Z ; WindowsDlg::init
PUBLIC	?doRefresh@WindowsDlg@@QAEX_N@Z			; WindowsDlg::doRefresh
PUBLIC	?changeDlgLang@WindowsDlg@@QAE_NXZ		; WindowsDlg::changeDlgLang
PUBLIC	?run_dlgProc@WindowsDlg@@MAGHIIJ@Z		; WindowsDlg::run_dlgProc
PUBLIC	?onInitDialog@WindowsDlg@@MAEHXZ		; WindowsDlg::onInitDialog
PUBLIC	?onSize@WindowsDlg@@MAEXIHH@Z			; WindowsDlg::onSize
PUBLIC	?onGetMinMaxInfo@WindowsDlg@@MAEXPAUtagMINMAXINFO@@@Z ; WindowsDlg::onGetMinMaxInfo
PUBLIC	?onWinMgr@WindowsDlg@@MAEJIJ@Z			; WindowsDlg::onWinMgr
PUBLIC	?destroy@WindowsDlg@@MAEXXZ			; WindowsDlg::destroy
PUBLIC	?fitColumnsToSize@WindowsDlg@@IAEXXZ		; WindowsDlg::fitColumnsToSize
PUBLIC	?resetSelection@WindowsDlg@@IAEXXZ		; WindowsDlg::resetSelection
PUBLIC	?doSave@WindowsDlg@@IAEXXZ			; WindowsDlg::doSave
PUBLIC	?doClose@WindowsDlg@@IAEXXZ			; WindowsDlg::doClose
PUBLIC	?doSortToTabs@WindowsDlg@@IAEXXZ		; WindowsDlg::doSortToTabs
PUBLIC	?updateButtonState@WindowsDlg@@IAEXXZ		; WindowsDlg::updateButtonState
PUBLIC	?activateCurrent@WindowsDlg@@IAEXXZ		; WindowsDlg::activateCurrent
PUBLIC	??0?$allocator@H@std@@QAE@XZ			; std::allocator<int>::allocator<int>
PUBLIC	?deallocate@?$allocator@H@std@@QAEXPAHI@Z	; std::allocator<int>::deallocate
PUBLIC	?allocate@?$allocator@H@std@@QAEPAHI@Z		; std::allocator<int>::allocate
PUBLIC	?max_size@?$allocator@H@std@@QBEIXZ		; std::allocator<int>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z ; std::allocator_traits<std::allocator<int> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<int> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
PUBLIC	??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<int> >::~_Vector_val<std::_Simple_types<int> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
PUBLIC	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::~_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Free_proxy
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
PUBLIC	?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::_Unused_capacity
PUBLIC	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
PUBLIC	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
PUBLIC	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter
PUBLIC	?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::resize
PUBLIC	?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z ; std::vector<int,std::allocator<int> >::resize
PUBLIC	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
PUBLIC	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
PUBLIC	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
PUBLIC	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase
PUBLIC	?_Pop_back_n@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::_Pop_back_n
PUBLIC	?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ; std::vector<int,std::allocator<int> >::clear
PUBLIC	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
PUBLIC	?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ; std::vector<int,std::allocator<int> >::_Grow_to
PUBLIC	?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ; std::vector<int,std::allocator<int> >::_Inside
PUBLIC	?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reallocate
PUBLIC	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
PUBLIC	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIPBH@Z ; std::vector<int,std::allocator<int> >::_Ufill
PUBLIC	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ; std::vector<int,std::allocator<int> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
PUBLIC	?init@WindowsDlg@@EAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; WindowsDlg::init
PUBLIC	??1WindowsDlg@@UAE@XZ				; WindowsDlg::~WindowsDlg
PUBLIC	??_GWindowsDlg@@UAEPAXI@Z			; WindowsDlg::`scalar deleting destructor'
PUBLIC	??0WindowsMenu@@QAE@XZ				; WindowsMenu::WindowsMenu
PUBLIC	??1WindowsMenu@@QAE@XZ				; WindowsMenu::~WindowsMenu
PUBLIC	?init@WindowsMenu@@QAEXPAUHINSTANCE__@@PAUHMENU__@@PB_W@Z ; WindowsMenu::init
PUBLIC	?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z ; WindowsMenu::initPopupMenu
PUBLIC	?getCurrentTabIndex@TabBar@@QBEHXZ		; TabBar::getCurrentTabIndex
PUBLIC	?nbItem@TabBar@@QBEHXZ				; TabBar::nbItem
PUBLIC	?FirstChild@TiXmlNodeA@@QBEPAV1@XZ		; TiXmlNodeA::FirstChild
PUBLIC	?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ	; TiXmlNodeA::ToElement
PUBLIC	?ToDeclaration@TiXmlNodeA@@QBEPAVTiXmlDeclarationA@@XZ ; TiXmlNodeA::ToDeclaration
PUBLIC	?Encoding@TiXmlDeclarationA@@QBEPBDXZ		; TiXmlDeclarationA::Encoding
PUBLIC	?getLangName@Lang@@QBEPB_WXZ			; Lang::getLangName
PUBLIC	?getInstance@NppParameters@@SAPAV1@XZ		; NppParameters::getInstance
PUBLIC	?getLangFromID@NppParameters@@QBEPAULang@@W4LangType@@@Z ; NppParameters::getLangFromID
PUBLIC	?getBufferByID@FileManager@@QAEPAVBuffer@@PAV2@@Z ; FileManager::getBufferByID
PUBLIC	?getInstance@FileManager@@SAPAV1@XZ		; FileManager::getInstance
PUBLIC	?getFullPathName@Buffer@@QBEPB_WXZ		; Buffer::getFullPathName
PUBLIC	?getFileName@Buffer@@QBEPB_WXZ			; Buffer::getFileName
PUBLIC	?isDirty@Buffer@@QBE_NXZ			; Buffer::isDirty
PUBLIC	?isReadOnly@Buffer@@QBE_NXZ			; Buffer::isReadOnly
PUBLIC	?getLangType@Buffer@@QBE?AW4LangType@@XZ	; Buffer::getLangType
PUBLIC	?getInstance@EncodingMapper@@SAPAV1@XZ		; EncodingMapper::getInstance
PUBLIC	??RNumericStringEquivalence@@QBE_NPB_W0@Z	; NumericStringEquivalence::operator()
PUBLIC	?numstrcmp@NumericStringEquivalence@@SAHPB_W0@Z	; NumericStringEquivalence::numstrcmp
PUBLIC	??0BufferEquivalent@@QAE@PAVDocTabView@@H_N@Z	; BufferEquivalent::BufferEquivalent
PUBLIC	??RBufferEquivalent@@QBE_NHH@Z			; BufferEquivalent::operator()
PUBLIC	?compare@BufferEquivalent@@QBE_NHH@Z		; BufferEquivalent::compare
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
PUBLIC	??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
PUBLIC	??4?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAEAAU01@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::operator=
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEABHXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator++
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator!=
PUBLIC	??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator<
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Compat
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator=
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	?_Rechecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV12@PAH@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Rechecked
PUBLIC	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEPAHXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Unchecked
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator++
PUBLIC	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator=
PUBLIC	??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z ; std::stable_sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,BufferEquivalent>
PUBLIC	??R?$equal_to@H@std@@QBE_NABH0@Z		; std::equal_to<int>::operator()
PUBLIC	??$bind2nd@U?$equal_to@H@std@@H@std@@YA?AV?$binder2nd@U?$equal_to@H@std@@@0@ABU?$equal_to@H@0@ABH@Z ; std::bind2nd<std::equal_to<int>,int>
PUBLIC	??0?$binder2nd@U?$equal_to@H@std@@@std@@QAE@ABU?$equal_to@H@1@ABH@Z ; std::binder2nd<std::equal_to<int> >::binder2nd<std::equal_to<int> >
PUBLIC	??R?$binder2nd@U?$equal_to@H@std@@@std@@QBE_NAAH@Z ; std::binder2nd<std::equal_to<int> >::operator()
PUBLIC	??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z ; std::remove_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::binder2nd<std::equal_to<int> > >
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>
PUBLIC	??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>
PUBLIC	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
PUBLIC	??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator-
PUBLIC	??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator==
PUBLIC	??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator!=
PUBLIC	?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_Compat
PUBLIC	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
PUBLIC	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
PUBLIC	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
PUBLIC	?_Unchecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEPA_WXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_Unchecked
PUBLIC	??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator-
PUBLIC	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
PUBLIC	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
PUBLIC	??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<wchar_t> >::_Vector_val<std::_Simple_types<wchar_t> >
PUBLIC	??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<wchar_t> >::~_Vector_val<std::_Simple_types<wchar_t> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >
PUBLIC	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::~_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
PUBLIC	?push_back@?$vector@_WV?$allocator@_W@std@@@std@@QAEX$$QA_W@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::push_back
PUBLIC	??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ	; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
PUBLIC	?capacity@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::capacity
PUBLIC	?_Unused_capacity@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Unused_capacity
PUBLIC	?size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::size
PUBLIC	?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::max_size
PUBLIC	??A?$vector@_WV?$allocator@_W@std@@@std@@QAEAA_WI@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::operator[]
PUBLIC	?_Buy@?$vector@_WV?$allocator@_W@std@@@std@@IAE_NI@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Buy
PUBLIC	?_Destroy@?$vector@_WV?$allocator@_W@std@@@std@@IAEXPA_W0@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Destroy
PUBLIC	?_Grow_to@?$vector@_WV?$allocator@_W@std@@@std@@IBEII@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Grow_to
PUBLIC	?_Inside@?$vector@_WV?$allocator@_W@std@@@std@@IBE_NPB_W@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Inside
PUBLIC	?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Reallocate
PUBLIC	?_Reserve@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Reserve
PUBLIC	?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@IAEXXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Tidy
PUBLIC	?_Xlen@?$vector@_WV?$allocator@_W@std@@@std@@IBEXXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Orphan_range
PUBLIC	??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::vector<wchar_t,std::allocator<wchar_t> ><std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >,void>
PUBLIC	??$_Uninitialized_default_fill_n@PAHIU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAHIAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninitialized_default_fill_n<int *,unsigned int,std::_Wrap_alloc<std::allocator<int> > >
PUBLIC	??$addressof@$$CBH@std@@YAPBHABH@Z		; std::addressof<int const >
PUBLIC	??$addressof@H@std@@YAPAHAAH@Z			; std::addressof<int>
PUBLIC	??$_Move@PAHPAH@std@@YAPAHPAH00@Z		; std::_Move<int *,int *>
PUBLIC	??$addressof@_W@std@@YAPA_WAA_W@Z		; std::addressof<wchar_t>
PUBLIC	??$forward@_W@std@@YA$$QA_WAA_W@Z		; std::forward<wchar_t>
PUBLIC	??$construct@_W_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_W$$QA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t,wchar_t>
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
PUBLIC	??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
PUBLIC	??$_Uninitialized_fill_n@PAHIHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAHIPBHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninitialized_fill_n<int *,unsigned int,int,std::_Wrap_alloc<std::allocator<int> > >
PUBLIC	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
PUBLIC	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXPA_W0AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<wchar_t> > >
PUBLIC	??$_Umove@PA_W@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WPA_W00@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Umove<wchar_t *>
PUBLIC	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
PUBLIC	??$_Allocate@_W@std@@YAPA_WIPA_W@Z		; std::_Allocate<wchar_t>
PUBLIC	??$_Allocate@H@std@@YAPAHIPAH@Z			; std::_Allocate<int>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$_Iter_cat@PA_W@std@@YA?AUrandom_access_iterator_tag@0@ABQA_W@Z ; std::_Iter_cat<wchar_t *>
PUBLIC	??$_Debug_range2@PA_W@std@@YAXPA_W0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<wchar_t *>
PUBLIC	??$_Move@AAH@std@@YA$$QAHAAH@Z			; std::_Move<int &>
PUBLIC	??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z ; std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
PUBLIC	??$_Debug_pointer@UBufferEquivalent@@@std@@YAXAAUBufferEquivalent@@PB_WI@Z ; std::_Debug_pointer<BufferEquivalent>
PUBLIC	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??$_Dist_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ; std::_Dist_type<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
PUBLIC	??$_Val_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ; std::_Val_type<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
PUBLIC	??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH000UBufferEquivalent@@@Z ; std::_Stable_sort<int *,int,int,BufferEquivalent>
PUBLIC	??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z ; std::find_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::binder2nd<std::equal_to<int> > >
PUBLIC	??$_Remove_if@PAHV?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAPAHPAH0V?$binder2nd@U?$equal_to@H@std@@@0@@Z ; std::_Remove_if<int *,std::binder2nd<std::equal_to<int> > >
PUBLIC	??$_Rechecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@AAV10@PAH@Z ; std::_Rechecked<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >
PUBLIC	??$_Val_type@PAH@std@@YAPAHPAH@Z		; std::_Val_type<int *>
PUBLIC	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
PUBLIC	??$_Uninit_def_fill_n@HIH@std@@YAXPAHIAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<int,unsigned int,int>
PUBLIC	??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<int *,int *>
PUBLIC	??$construct@_W_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PA_W$$QA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t,wchar_t>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z		; std::forward<wchar_t * &>
PUBLIC	??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
PUBLIC	??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
PUBLIC	??$_Uninit_fill_n@HIHH@std@@YAXPAHIPBHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<int,unsigned int,int,int>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Ptr_cat@_W_W@std@@YA?AU_Scalar_ptr_iterator_tag@0@PA_W0@Z ; std::_Ptr_cat<wchar_t,wchar_t>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXPA_W0AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<wchar_t> > >
PUBLIC	??$_Uninitialized_move@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z ; std::_Uninitialized_move<wchar_t *,wchar_t *,std::_Wrap_alloc<std::allocator<wchar_t> > >
PUBLIC	??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ; std::_Iter_cat<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
PUBLIC	??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
PUBLIC	??$_Distance@PAHH@std@@YAXPAH0AAH@Z		; std::_Distance<int *,int>
PUBLIC	??0?$_Temp_iterator@H@std@@QAE@H@Z		; std::_Temp_iterator<int>::_Temp_iterator<int>
PUBLIC	??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z		; std::_Temp_iterator<int>::_Temp_iterator<int>
PUBLIC	??1?$_Temp_iterator@H@std@@QAE@XZ		; std::_Temp_iterator<int>::~_Temp_iterator<int>
PUBLIC	??4?$_Temp_iterator@H@std@@QAEAAV01@ABV01@@Z	; std::_Temp_iterator<int>::operator=
PUBLIC	??4?$_Temp_iterator@H@std@@QAEAAV01@$$QAH@Z	; std::_Temp_iterator<int>::operator=
PUBLIC	??D?$_Temp_iterator@H@std@@QAEAAV01@XZ		; std::_Temp_iterator<int>::operator*
PUBLIC	??E?$_Temp_iterator@H@std@@QAEAAV01@XZ		; std::_Temp_iterator<int>::operator++
PUBLIC	??E?$_Temp_iterator@H@std@@QAEAAV01@H@Z		; std::_Temp_iterator<int>::operator++
PUBLIC	?_Init@?$_Temp_iterator@H@std@@QAEAAV12@XZ	; std::_Temp_iterator<int>::_Init
PUBLIC	?_First@?$_Temp_iterator@H@std@@QBEPAHXZ	; std::_Temp_iterator<int>::_First
PUBLIC	?_Last@?$_Temp_iterator@H@std@@QBEPAHXZ		; std::_Temp_iterator<int>::_Last
PUBLIC	?_Maxlen@?$_Temp_iterator@H@std@@QAEHXZ		; std::_Temp_iterator<int>::_Maxlen
PUBLIC	??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z ; std::_Stable_sort<int *,int,int,BufferEquivalent>
PUBLIC	??$_Debug_pointer@V?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAXAAV?$binder2nd@U?$equal_to@H@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::binder2nd<std::equal_to<int> > >
PUBLIC	??$_Find_if@PAHV?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAPAHPAH0V?$binder2nd@U?$equal_to@H@std@@@0@@Z ; std::_Find_if<int *,std::binder2nd<std::equal_to<int> > >
PUBLIC	??$_Iter_cat@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z ; std::_Iter_cat<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >
PUBLIC	??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >
PUBLIC	??$_Fill_n@PAHIH@std@@YAPAHPAHIABH@Z		; std::_Fill_n<int *,unsigned int,int>
PUBLIC	??$construct@_W_W@?$allocator@_W@std@@QAEXPA_W$$QA_W@Z ; std::allocator<wchar_t>::construct<wchar_t,wchar_t>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>
PUBLIC	??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>
PUBLIC	??$_Unchecked@PAH@std@@YAPAHPAH@Z		; std::_Unchecked<int *>
PUBLIC	??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
PUBLIC	??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z	; std::_Rechecked<int *,int *>
PUBLIC	??$_Unchecked@PA_W@std@@YAPA_WPA_W@Z		; std::_Unchecked<wchar_t *>
PUBLIC	??$_Uninit_move@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z ; std::_Uninit_move<wchar_t *,wchar_t *,std::_Wrap_alloc<std::allocator<wchar_t> > >
PUBLIC	??$_Rechecked@PA_WPA_W@std@@YAAAPA_WAAPA_WPA_W@Z ; std::_Rechecked<wchar_t *,wchar_t *>
PUBLIC	??$_Destroy@H@std@@YAXPAH@Z			; std::_Destroy<int>
PUBLIC	??$return_temporary_buffer@H@std@@YAXPAH@Z	; std::return_temporary_buffer<int>
PUBLIC	??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
PUBLIC	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
PUBLIC	??$_Distance2@PAHH@std@@YAXPAH0AAHUrandom_access_iterator_tag@0@@Z ; std::_Distance2<int *,int>
PUBLIC	??$_Insertion_sort@PAHUBufferEquivalent@@@std@@YAXPAH0UBufferEquivalent@@@Z ; std::_Insertion_sort<int *,BufferEquivalent>
PUBLIC	??$advance@PAHH@std@@YAXAAPAHH@Z		; std::advance<int *,int>
PUBLIC	??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z ; std::_Buffered_merge_sort<int *,int,int,BufferEquivalent>
PUBLIC	??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z ; std::_Buffered_merge<int *,int,int,BufferEquivalent>
PUBLIC	??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z ; std::distance<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >
PUBLIC	??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Ucopy<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >
PUBLIC	??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<int,int,int>
PUBLIC	??$_Val_type@PA_W@std@@YAPA_WPA_W@Z		; std::_Val_type<wchar_t *>
PUBLIC	??$_Uninit_move@_W_W_W@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<wchar_t,wchar_t,wchar_t>
PUBLIC	??$get_temporary_buffer@H@std@@YA?AU?$pair@PAHH@0@H@Z ; std::get_temporary_buffer<int>
PUBLIC	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z		; std::_Debug_pointer<int>
PUBLIC	??$_Insertion_sort1@PAHUBufferEquivalent@@H@std@@YAXPAH0UBufferEquivalent@@0@Z ; std::_Insertion_sort1<int *,BufferEquivalent,int>
PUBLIC	??$_Advance@PAHH@std@@YAXAAPAHHUrandom_access_iterator_tag@0@@Z ; std::_Advance<int *,int>
PUBLIC	??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z ; std::_Chunked_merge<int *,std::_Temp_iterator<int>,int,BufferEquivalent>
PUBLIC	??$_Chunked_merge@PAHPAHHUBufferEquivalent@@@std@@YAXPAH00HHUBufferEquivalent@@@Z ; std::_Chunked_merge<int *,int *,int,BufferEquivalent>
PUBLIC	??$_Debug_lt_pred@UBufferEquivalent@@AAHAAH@std@@YA_NUBufferEquivalent@@AAH1PB_WI@Z ; std::_Debug_lt_pred<BufferEquivalent,int &,int &>
PUBLIC	??$iter_swap@PAHPAH@std@@YAXPAH0@Z		; std::iter_swap<int *,int *>
PUBLIC	??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z ; std::_Move<int *,std::_Temp_iterator<int> >
PUBLIC	??$_Merge@PAHPAHPAHUBufferEquivalent@@@std@@YAPAHPAH0000UBufferEquivalent@@@Z ; std::_Merge<int *,int *,int *,BufferEquivalent>
PUBLIC	??$_Merge_backward@PAHPAHPAHUBufferEquivalent@@@std@@YAPAHPAH0000UBufferEquivalent@@@Z ; std::_Merge_backward<int *,int *,int *,BufferEquivalent>
PUBLIC	??$lower_bound@PAHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@@Z ; std::lower_bound<int *,int,BufferEquivalent>
PUBLIC	??$upper_bound@PAHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@@Z ; std::upper_bound<int *,int,BufferEquivalent>
PUBLIC	??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z ; std::_Buffered_rotate<int *,int,int>
PUBLIC	??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z ; std::_Distance2<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >,int>
PUBLIC	??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z ; std::_Uninitialized_copy<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >,wchar_t *,std::_Wrap_alloc<std::allocator<wchar_t> > >
PUBLIC	??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z		; std::_Debug_range<int *>
PUBLIC	??$?0AAPAHAAHX@?$pair@PAHH@std@@QAE@AAPAHAAH@Z	; std::pair<int *,int>::pair<int *,int><int * &,int &,void>
PUBLIC	??$_Move_backward@PAHPAH@std@@YAPAHPAH00@Z	; std::_Move_backward<int *,int *>
PUBLIC	??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z ; std::_Merge<int *,int *,std::_Temp_iterator<int>,BufferEquivalent>
PUBLIC	??$forward@AAH@std@@YAAAHAAH@Z			; std::forward<int &>
PUBLIC	??$_Ptr_cat@PAHV?$_Temp_iterator@H@std@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAHAAV?$_Temp_iterator@H@0@@Z ; std::_Ptr_cat<int *,std::_Temp_iterator<int> >
PUBLIC	??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<int *,std::_Temp_iterator<int> >
PUBLIC	??$_Dist_type@PAH@std@@YAPAHPAH@Z		; std::_Dist_type<int *>
PUBLIC	??$_Lower_bound@PAHHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@0@Z ; std::_Lower_bound<int *,int,int,BufferEquivalent>
PUBLIC	??$_Upper_bound@PAHHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@0@Z ; std::_Upper_bound<int *,int,int,BufferEquivalent>
PUBLIC	??$rotate@PAH@std@@YAPAHPAH00@Z			; std::rotate<int *>
PUBLIC	??$_Debug_pointer@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAXAAV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >
PUBLIC	??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z ; std::_Unchecked<std::_String_val<std::_Simple_types<wchar_t> > >
PUBLIC	??$_Uninit_copy@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z ; std::_Uninit_copy<wchar_t *,wchar_t *,std::_Wrap_alloc<std::allocator<wchar_t> > >
PUBLIC	??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<int *>
PUBLIC	??$forward@AAPAH@std@@YAAAPAHAAPAH@Z		; std::forward<int * &>
PUBLIC	??$_Move_backward@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<int *,int *>
PUBLIC	??$move@AAH@std@@YA$$QAHAAH@Z			; std::move<int &>
PUBLIC	??$_Rotate@PAH@std@@YAXPAH00Urandom_access_iterator_tag@0@@Z ; std::_Rotate<int *>
PUBLIC	??$distance@PAH@std@@YAHPAH0@Z			; std::distance<int *>
PUBLIC	??$_Uninit_copy@_W_W@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<wchar_t,wchar_t>
PUBLIC	??$forward@H@std@@YA$$QAHAAH@Z			; std::forward<int>
PUBLIC	??$_Construct@HH@std@@YAXPAH$$QAH@Z		; std::_Construct<int,int>
PUBLIC	??$_Rotate@PAHHH@std@@YAXPAH0000@Z		; std::_Rotate<int *,int,int>
PUBLIC	??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; `string'
PUBLIC	??_C@_1KO@LJAFCIDL@?$AAc?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@ ; `string'
PUBLIC	??_C@_19HBMCHKM@?$AAh?$AAW?$AAn?$AAd?$AA?$AA@	; `string'
PUBLIC	??_C@_1M@JJLBEALK@?$AAm?$AA_?$AAm?$AAa?$AAp?$AA?$AA@ ; `string'
PUBLIC	??_7Window@@6B@					; Window::`vftable'
PUBLIC	??_7StaticDialog@@6B@				; StaticDialog::`vftable'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::npos
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?WDN_NOTIFY@@3IB				; WDN_NOTIFY
PUBLIC	??_7WindowsDlg@@6B@				; WindowsDlg::`vftable'
PUBLIC	?WindowsDlgMap@@3PAVWINRECT@@A			; WindowsDlgMap
PUBLIC	??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; `string'
PUBLIC	??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; `string'
PUBLIC	??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@		; `string'
PUBLIC	??_C@_1HC@HBCEAHKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAl?$AAl?$AAo?$AAc@ ; `string'
PUBLIC	??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_1IC@MBIJKJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa?$AAr?$AA_?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa@ ; `string'
PUBLIC	??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ ; `string'
PUBLIC	??_C@_1ME@LLCFNFIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@ ; `string'
PUBLIC	??_C@_1MG@OPNGNDCB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ ; `string'
PUBLIC	??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1LO@MGELDLOO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@ ; `string'
PUBLIC	??_R4Window@@6B@				; Window::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVWindow@@@8				; Window `RTTI Type Descriptor'
PUBLIC	??_R3Window@@8					; Window::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Window@@8					; Window::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Window@@8				; Window::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4StaticDialog@@6B@				; StaticDialog::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStaticDialog@@@8			; StaticDialog `RTTI Type Descriptor'
PUBLIC	??_R3StaticDialog@@8				; StaticDialog::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StaticDialog@@8				; StaticDialog::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StaticDialog@@8			; StaticDialog::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4WindowsDlg@@6B@				; WindowsDlg::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVWindowsDlg@@@8				; WindowsDlg `RTTI Type Descriptor'
PUBLIC	??_R3WindowsDlg@@8				; WindowsDlg::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2WindowsDlg@@8				; WindowsDlg::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@WindowsDlg@@8			; WindowsDlg::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@SizeableDlg@@8			; SizeableDlg::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSizeableDlg@@@8				; SizeableDlg `RTTI Type Descriptor'
PUBLIC	??_R3SizeableDlg@@8				; SizeableDlg::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SizeableDlg@@8				; SizeableDlg::`RTTI Base Class Array'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	_wcstol:PROC
EXTRN	__hypot:PROC
EXTRN	_iswupper:PROC
EXTRN	_iswdigit:PROC
EXTRN	_iswascii:PROC
EXTRN	_towlower:PROC
EXTRN	_wcslen:PROC
EXTRN	_wcsncpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??2@YAPAXIABUnothrow_t@std@@@Z:PROC		; operator new
EXTRN	__CrtDbgReportW:PROC
EXTRN	?_Debug_message@std@@YAXPB_W0I@Z:PROC		; std::_Debug_message
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	__wassert:PROC
EXTRN	__imp__LoadStringW@16:PROC
EXTRN	__imp__lstrcatW@8:PROC
EXTRN	__imp__lstrlenW@4:PROC
EXTRN	__imp__RegisterWindowMessageW@4:PROC
EXTRN	__imp__SendMessageW@16:PROC
EXTRN	__imp__PostMessageW@16:PROC
EXTRN	__imp__DestroyWindow@4:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__MoveWindow@24:PROC
EXTRN	__imp__SetWindowPos@28:PROC
EXTRN	__imp__IsWindowVisible@4:PROC
EXTRN	__imp__DialogBoxParamW@20:PROC
EXTRN	__imp__EndDialog@8:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	__imp__GetKeyState@4:PROC
EXTRN	__imp__EnableWindow@8:PROC
EXTRN	__imp__GetSystemMetrics@4:PROC
EXTRN	__imp__LoadMenuW@8:PROC
EXTRN	__imp__GetMenuState@12:PROC
EXTRN	__imp__DestroyMenu@4:PROC
EXTRN	__imp__GetMenuItemCount@4:PROC
EXTRN	__imp__ModifyMenuW@20:PROC
EXTRN	__imp__DeleteMenu@12:PROC
EXTRN	__imp__InsertMenuItemW@16:PROC
EXTRN	__imp__SetMenuItemInfoW@16:PROC
EXTRN	__imp__UpdateWindow@4:PROC
EXTRN	__imp__InvalidateRect@12:PROC
EXTRN	__imp__SetWindowTextW@8:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__GetWindowRect@8:PROC
EXTRN	__imp__SetWindowLongW@12:PROC
EXTRN	??0WINRECT@@QAE@GHJ@Z:PROC			; WINRECT::WINRECT
EXTRN	??1CWinMgr@@UAE@XZ:PROC				; CWinMgr::~CWinMgr
EXTRN	?FindRect@CWinMgr@@QAEPAVWINRECT@@H@Z:PROC	; CWinMgr::FindRect
EXTRN	?InitToFitSizeFromCurrent@CWinMgr@@QAEXPAUHWND__@@@Z:PROC ; CWinMgr::InitToFitSizeFromCurrent
EXTRN	??_EWindow@@UAEPAXI@Z:PROC			; Window::`vector deleting destructor'
EXTRN	?create@StaticDialog@@UAEXH_N0@Z:PROC		; StaticDialog::create
EXTRN	?goToCenter@StaticDialog@@QAEXXZ:PROC		; StaticDialog::goToCenter
EXTRN	?display@StaticDialog@@UBEX_N@Z:PROC		; StaticDialog::display
EXTRN	?dlgProc@StaticDialog@@KGHPAUHWND__@@IIJ@Z:PROC	; StaticDialog::dlgProc
EXTRN	??_EStaticDialog@@UAEPAXI@Z:PROC		; StaticDialog::`vector deleting destructor'
EXTRN	??0SizeableDlg@@QAE@PAVWINRECT@@@Z:PROC		; SizeableDlg::SizeableDlg
EXTRN	?run_dlgProc@SizeableDlg@@MAGHIIJ@Z:PROC	; SizeableDlg::run_dlgProc
EXTRN	?onSize@SizeableDlg@@MAEXIHH@Z:PROC		; SizeableDlg::onSize
EXTRN	?onGetMinMaxInfo@SizeableDlg@@MAEXPAUtagMINMAXINFO@@@Z:PROC ; SizeableDlg::onGetMinMaxInfo
EXTRN	?onWinMgr@SizeableDlg@@MAEJIJ@Z:PROC		; SizeableDlg::onWinMgr
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?BuildMenuFileName@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HIABV12@@Z:PROC ; BuildMenuFileName
EXTRN	?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z:PROC ; WcharMbcsConvertor::char2wchar
EXTRN	??_EWindowsDlg@@UAEPAXI@Z:PROC			; WindowsDlg::`vector deleting destructor'
EXTRN	?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z:PROC	; TiXmlNodeA::NextSibling
EXTRN	?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z:PROC ; TiXmlNodeA::FirstChildElement
EXTRN	?GetDocument@TiXmlNodeA@@QBEPAVTiXmlDocumentA@@XZ:PROC ; TiXmlNodeA::GetDocument
EXTRN	?Attribute@TiXmlElementA@@QBEPBDPBD@Z:PROC	; TiXmlElementA::Attribute
EXTRN	?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z:PROC	; TiXmlElementA::Attribute
EXTRN	?getBufferByIndex@DocTabView@@QAEPAVBuffer@@H@Z:PROC ; DocTabView::getBufferByIndex
EXTRN	?getEncodingFromString@EncodingMapper@@QBEHPBD@Z:PROC ; EncodingMapper::getEncodingFromString
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?nothrow@std@@3Unothrow_t@1@B:BYTE		; std::nothrow
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?_pSelf@WcharMbcsConvertor@@1PAV1@A:DWORD	; WcharMbcsConvertor::_pSelf
EXTRN	?_pSelf@NppParameters@@0PAV1@A:DWORD		; NppParameters::_pSelf
EXTRN	?_pSelf@FileManager@@0PAV1@A:DWORD		; FileManager::_pSelf
EXTRN	?_pSelf@EncodingMapper@@0PAV1@A:DWORD		; EncodingMapper::_pSelf
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?WDN_NOTIFY@@3IB DD 01H DUP (?)				; WDN_NOTIFY
?WindowsDlgMap@@3PAVWINRECT@@A DB 0318H DUP (?)		; WindowsDlgMap
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R2SizeableDlg@@8
rdata$r	SEGMENT
??_R2SizeableDlg@@8 DD FLAT:??_R1A@?0A@EA@SizeableDlg@@8 ; SizeableDlg::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@StaticDialog@@8
	DD	FLAT:??_R1A@?0A@EA@Window@@8
rdata$r	ENDS
;	COMDAT ??_R3SizeableDlg@@8
rdata$r	SEGMENT
??_R3SizeableDlg@@8 DD 00H				; SizeableDlg::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2SizeableDlg@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSizeableDlg@@@8
data$r	SEGMENT
??_R0?AVSizeableDlg@@@8 DD FLAT:??_7type_info@@6B@	; SizeableDlg `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSizeableDlg@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SizeableDlg@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SizeableDlg@@8 DD FLAT:??_R0?AVSizeableDlg@@@8 ; SizeableDlg::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SizeableDlg@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@WindowsDlg@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@WindowsDlg@@8 DD FLAT:??_R0?AVWindowsDlg@@@8 ; WindowsDlg::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3WindowsDlg@@8
rdata$r	ENDS
;	COMDAT ??_R2WindowsDlg@@8
rdata$r	SEGMENT
??_R2WindowsDlg@@8 DD FLAT:??_R1A@?0A@EA@WindowsDlg@@8	; WindowsDlg::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SizeableDlg@@8
	DD	FLAT:??_R1A@?0A@EA@StaticDialog@@8
	DD	FLAT:??_R1A@?0A@EA@Window@@8
rdata$r	ENDS
;	COMDAT ??_R3WindowsDlg@@8
rdata$r	SEGMENT
??_R3WindowsDlg@@8 DD 00H				; WindowsDlg::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2WindowsDlg@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVWindowsDlg@@@8
data$r	SEGMENT
??_R0?AVWindowsDlg@@@8 DD FLAT:??_7type_info@@6B@	; WindowsDlg `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVWindowsDlg@@', 00H
data$r	ENDS
;	COMDAT ??_R4WindowsDlg@@6B@
rdata$r	SEGMENT
??_R4WindowsDlg@@6B@ DD 00H				; WindowsDlg::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVWindowsDlg@@@8
	DD	FLAT:??_R3WindowsDlg@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
data$r	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StaticDialog@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StaticDialog@@8 DD FLAT:??_R0?AVStaticDialog@@@8 ; StaticDialog::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StaticDialog@@8
rdata$r	ENDS
;	COMDAT ??_R2StaticDialog@@8
rdata$r	SEGMENT
??_R2StaticDialog@@8 DD FLAT:??_R1A@?0A@EA@StaticDialog@@8 ; StaticDialog::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Window@@8
rdata$r	ENDS
;	COMDAT ??_R3StaticDialog@@8
rdata$r	SEGMENT
??_R3StaticDialog@@8 DD 00H				; StaticDialog::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2StaticDialog@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStaticDialog@@@8
data$r	SEGMENT
??_R0?AVStaticDialog@@@8 DD FLAT:??_7type_info@@6B@	; StaticDialog `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStaticDialog@@', 00H
data$r	ENDS
;	COMDAT ??_R4StaticDialog@@6B@
rdata$r	SEGMENT
??_R4StaticDialog@@6B@ DD 00H				; StaticDialog::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStaticDialog@@@8
	DD	FLAT:??_R3StaticDialog@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Window@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Window@@8 DD FLAT:??_R0?AVWindow@@@8	; Window::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Window@@8
rdata$r	ENDS
;	COMDAT ??_R2Window@@8
rdata$r	SEGMENT
??_R2Window@@8 DD FLAT:??_R1A@?0A@EA@Window@@8		; Window::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Window@@8
rdata$r	SEGMENT
??_R3Window@@8 DD 00H					; Window::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Window@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVWindow@@@8
data$r	SEGMENT
??_R0?AVWindow@@@8 DD FLAT:??_7type_info@@6B@		; Window `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVWindow@@', 00H
data$r	ENDS
;	COMDAT ??_R4Window@@6B@
rdata$r	SEGMENT
??_R4Window@@6B@ DD 00H					; Window::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVWindow@@@8
	DD	FLAT:??_R3Window@@8
rdata$r	ENDS
;	COMDAT ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '2', 00H, '.', 00H, '0', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H, 'e'
	DB	00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '2', 00H, '.', 00H, '0', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H, 'g'
	DB	00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'w', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, '>', 00H
	DB	' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1LO@MGELDLOO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1LO@MGELDLOO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'i', 00H, 'n'
	DB	00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, '_', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'p'
	DB	00H, 'a', 00H, 't', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
CONST	SEGMENT
??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ DB '"'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'a', 00H
	DB	'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+', 00H, ' '
	DB	00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H
	DB	'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'A', 00H
	DB	'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, '"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
CONST	SEGMENT
??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ DB 'Standa'
	DB	'rd C++ Libraries Invalid Argument', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MG@OPNGNDCB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1MG@OPNGNDCB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'i', 00H, 'n'
	DB	00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '+', 00H, '+', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@
CONST	SEGMENT
??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@LLCFNFIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1ME@LLCFNFIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'i', 00H, 'n'
	DB	00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
CONST	SEGMENT
??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1IC@MBIJKJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa?$AAr?$AA_?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa@
CONST	SEGMENT
??_C@_1IC@MBIJKJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa?$AAr?$AA_?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'w', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, ',', 00H
	DB	'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H
	DB	'_', 00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':'
	DB	00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, '[', 00H, ']', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
CONST	SEGMENT
??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, 's', 00H, 'i'
	DB	00H, 'd', 00H, 'e', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H
	DB	' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1HC@HBCEAHKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAl?$AAl?$AAo?$AAc@
CONST	SEGMENT
??_C@_1HC@HBCEAHKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAl?$AAl?$AAo?$AAc@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'i', 00H, 'n'
	DB	00H, 't', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H
	DB	'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, '[', 00H, ']', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ DB '%', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
CONST	SEGMENT
??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ DB '"'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'a', 00H
	DB	'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+', 00H, ' '
	DB	00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H
	DB	'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'O', 00H, 'u', 00H, 't'
	DB	00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'R', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
CONST	SEGMENT
??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ DB 'Stand'
	DB	'ard C++ Libraries Out of Range', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i'
	DB	00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 'g', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '2', 00H, '.', 00H, '0', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '2', 00H, '.', 00H, '0', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_7WindowsDlg@@6B@
CONST	SEGMENT
??_7WindowsDlg@@6B@ DD FLAT:??_R4WindowsDlg@@6B@	; WindowsDlg::`vftable'
	DD	FLAT:??_EWindowsDlg@@UAEPAXI@Z
	DD	FLAT:?init@WindowsDlg@@EAEXPAUHINSTANCE__@@PAUHWND__@@@Z
	DD	FLAT:?destroy@WindowsDlg@@MAEXXZ
	DD	FLAT:?display@StaticDialog@@UBEX_N@Z
	DD	FLAT:?reSizeTo@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?redraw@Window@@UBEX_N@Z
	DD	FLAT:?getClientRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWindowRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWidth@Window@@UBEHXZ
	DD	FLAT:?getHeight@Window@@UBEHXZ
	DD	FLAT:?isVisible@Window@@UBE_NXZ
	DD	FLAT:?create@StaticDialog@@UAEXH_N0@Z
	DD	FLAT:?isCreated@StaticDialog@@UBE_NXZ
	DD	FLAT:?run_dlgProc@WindowsDlg@@MAGHIIJ@Z
	DD	FLAT:?onInitDialog@WindowsDlg@@MAEHXZ
	DD	FLAT:?onSize@WindowsDlg@@MAEXIHH@Z
	DD	FLAT:?onGetMinMaxInfo@WindowsDlg@@MAEXPAUtagMINMAXINFO@@@Z
	DD	FLAT:?onWinMgr@WindowsDlg@@MAEJIJ@Z
	DD	FLAT:?init@WindowsDlg@@UAEXPAUHINSTANCE__@@PAUHWND__@@PAVDocTabView@@@Z
CONST	ENDS
;	COMDAT ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
CONST	SEGMENT
?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB DD 0ffffffffH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::npos
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7StaticDialog@@6B@
CONST	SEGMENT
??_7StaticDialog@@6B@ DD FLAT:??_R4StaticDialog@@6B@	; StaticDialog::`vftable'
	DD	FLAT:??_EStaticDialog@@UAEPAXI@Z
	DD	FLAT:?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
	DD	FLAT:?destroy@StaticDialog@@UAEXXZ
	DD	FLAT:?display@StaticDialog@@UBEX_N@Z
	DD	FLAT:?reSizeTo@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?redraw@Window@@UBEX_N@Z
	DD	FLAT:?getClientRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWindowRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWidth@Window@@UBEHXZ
	DD	FLAT:?getHeight@Window@@UBEHXZ
	DD	FLAT:?isVisible@Window@@UBE_NXZ
	DD	FLAT:?create@StaticDialog@@UAEXH_N0@Z
	DD	FLAT:?isCreated@StaticDialog@@UBE_NXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7Window@@6B@
CONST	SEGMENT
??_7Window@@6B@ DD FLAT:??_R4Window@@6B@		; Window::`vftable'
	DD	FLAT:??_EWindow@@UAEPAXI@Z
	DD	FLAT:?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
	DD	FLAT:__purecall
	DD	FLAT:?display@Window@@UBEX_N@Z
	DD	FLAT:?reSizeTo@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?redraw@Window@@UBEX_N@Z
	DD	FLAT:?getClientRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWindowRect@Window@@UBEXAAUtagRECT@@@Z
	DD	FLAT:?getWidth@Window@@UBEHXZ
	DD	FLAT:?getHeight@Window@@UBEHXZ
	DD	FLAT:?isVisible@Window@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_C@_1M@JJLBEALK@?$AAm?$AA_?$AAm?$AAa?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_1M@JJLBEALK@?$AAm?$AA_?$AAm?$AAa?$AAp?$AA?$AA@ DB 'm', 00H, '_', 00H
	DB	'm', 00H, 'a', 00H, 'p', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_19HBMCHKM@?$AAh?$AAW?$AAn?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_19HBMCHKM@?$AAh?$AAW?$AAn?$AAd?$AA?$AA@ DB 'h', 00H, 'W', 00H, 'n', 00H
	DB	'd', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1KO@LJAFCIDL@?$AAc?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@
CONST	SEGMENT
??_C@_1KO@LJAFCIDL@?$AAc?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'w', 00H, 'o', 00H, 'r', 00H, 'k', 00H
	DB	's', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'e', 00H, '\', 00H, 'n'
	DB	00H, 'o', 00H, 't', 00H, 'e', 00H, 'p', 00H, 'a', 00H, 'd', 00H
	DB	'-', 00H, 'p', 00H, 'l', 00H, 'u', 00H, 's', 00H, '-', 00H, 'p'
	DB	00H, 'l', 00H, 'u', 00H, 's', 00H, '-', 00H, '6', 00H, '.', 00H
	DB	'7', 00H, '.', 00H, '9', 00H, '.', 00H, '2', 00H, '\', 00H, 'p'
	DB	00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'd', 00H
	DB	'i', 00H, 't', 00H, 'o', 00H, 'r', 00H, '\', 00H, 's', 00H, 'r'
	DB	00H, 'c', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 's'
	DB	00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'w', 00H, 's', 00H, 'd', 00H, 'l', 00H, 'g', 00H, '\', 00H, 'W'
	DB	00H, 'i', 00H, 'n', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ DB 'I'
	DB	00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'O', 00H
	DB	'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, ' '
	DB	00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H, 'P', 00H
	DB	'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '2', 00H, '.', 00H, '0', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H, 't'
	DB	00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@HH@std@@YAXPAH$$QAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@HH@std@@YAXPAH$$QAH@Z$0
__ehfuncinfo$??$_Construct@HH@std@@YAXPAH$$QAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@HH@std@@YAXPAH$$QAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__ehfuncinfo$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z$3
__ehfuncinfo$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z$1
__ehfuncinfo$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z$2
__ehfuncinfo$??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z$1
__ehfuncinfo$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z$3
__ehfuncinfo$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z$3
__ehfuncinfo$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z$2
__ehfuncinfo$??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z$0
__ehfuncinfo$??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0
__ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@_W_W@?$allocator@_W@std@@QAEXPA_W$$QA_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@_W_W@?$allocator@_W@std@@QAEXPA_W$$QA_W@Z$0
__ehfuncinfo$??$construct@_W_W@?$allocator@_W@std@@QAEXPA_W$$QA_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@_W_W@?$allocator@_W@std@@QAEXPA_W$$QA_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$8 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$0
__tryblocktable$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z DD 04H
	DD	06H
	DD	07H
	DD	01H
	DD	FLAT:__catchsym$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$8
__ehfuncinfo$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$5
	DD	01H
	DD	00H
	DD	04H
	DD	FLAT:__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$7
	DD	01H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$1
__ehfuncinfo$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3
__ehfuncinfo$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH000UBufferEquivalent@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH000UBufferEquivalent@@@Z$0
__ehfuncinfo$??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH000UBufferEquivalent@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH000UBufferEquivalent@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Val_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Val_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Val_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Val_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Dist_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Dist_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Dist_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Dist_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z$3
__ehfuncinfo$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
__ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0
__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0
__ehfuncinfo$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$6
	DD	02H
	DD	FLAT:__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$7
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$5
	DD	01H
	DD	FLAT:__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$6
	DD	01H
	DD	FLAT:__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$7
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1WindowsDlg@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1WindowsDlg@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1WindowsDlg@@UAE@XZ$1
__ehfuncinfo$??1WindowsDlg@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1WindowsDlg@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$9
	DD	00H
	DD	FLAT:__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$5
	DD	06H
	DD	FLAT:__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$7
	DD	02H
	DD	FLAT:__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$8
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z$0
__unwindtable$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z$2
__ehfuncinfo$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z$0
__unwindtable$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z$0
__ehfuncinfo$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ$0
__ehfuncinfo$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ$0
__ehfuncinfo$?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z$0
__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?init@WindowsMenu@@QAEXPAUHINSTANCE__@@PAUHMENU__@@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?init@WindowsMenu@@QAEXPAUHINSTANCE__@@PAUHMENU__@@PB_W@Z$0
__unwindtable$?doSortToTabs@WindowsDlg@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?doSortToTabs@WindowsDlg@@IAEXXZ$0
__unwindtable$?resetSelection@WindowsDlg@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resetSelection@WindowsDlg@@IAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?resetSelection@WindowsDlg@@IAEXXZ$1
__unwindtable$??0WindowsDlg@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0WindowsDlg@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0WindowsDlg@@QAE@XZ$1
__unwindtable$?run_dlgProc@WindowsDlg@@MAGHIIJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?run_dlgProc@WindowsDlg@@MAGHIIJ@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?run_dlgProc@WindowsDlg@@MAGHIIJ@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?run_dlgProc@WindowsDlg@@MAGHIIJ@Z$2
__ehfuncinfo$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?init@WindowsMenu@@QAEXPAUHINSTANCE__@@PAUHMENU__@@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?init@WindowsMenu@@QAEXPAUHINSTANCE__@@PAUHMENU__@@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?doSortToTabs@WindowsDlg@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?doSortToTabs@WindowsDlg@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?doClose@WindowsDlg@@IAEXXZ DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?doClose@WindowsDlg@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?resetSelection@WindowsDlg@@IAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?resetSelection@WindowsDlg@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?run_dlgProc@WindowsDlg@@MAGHIIJ@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?run_dlgProc@WindowsDlg@@MAGHIIJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$??0WindowsDlg@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0WindowsDlg@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z$4
__unwindtable$?doClose@WindowsDlg@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$3
	DD	01H
	DD	FLAT:__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$7
	DD	05H
	DD	FLAT:__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$9
	DD	04H
	DD	FLAT:__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$8
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0
__ehfuncinfo$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0
__ehfuncinfo$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0
__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0
__ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1_System_error_category@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_System_error_category@std@@UAE@XZ$0
__ehfuncinfo$??1_System_error_category@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_System_error_category@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
__ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0_System_error_category@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_System_error_category@std@@QAE@XZ$0
__ehfuncinfo$??0_System_error_category@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0_System_error_category@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1_Iostream_error_category@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0
__ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Iostream_error_category@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
__ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0_Iostream_error_category@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0
__ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0_Iostream_error_category@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1_Generic_error_category@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0
__ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Generic_error_category@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
__ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0_Generic_error_category@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0
__ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0_Generic_error_category@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
__ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1SizeableDlg@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1SizeableDlg@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1SizeableDlg@@UAE@XZ$1
__ehfuncinfo$??1SizeableDlg@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1SizeableDlg@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1StaticDialog@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1StaticDialog@@UAE@XZ$0
__ehfuncinfo$??1StaticDialog@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1StaticDialog@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1
__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1_Iterator_base12@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0
__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Iterator_base12@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0
__ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_WDN_NOTIFY$initializer$ DD FLAT:??__EWDN_NOTIFY@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_WindowsDlgMap$initializer$ DD FLAT:??__EWindowsDlgMap@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Rotate@PAHHH@std@@YAXPAH0000@Z
_TEXT	SEGMENT
__Tmp$1 = -36						; size = 4
__Hole$2 = -32						; size = 4
tv95 = -28						; size = 4
tv82 = -24						; size = 4
__Next$3 = -20						; size = 4
__Factor$4 = -16					; size = 4
__Shift$ = -12						; size = 4
__Next1$5 = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Rotate@PAHHH@std@@YAXPAH0000@Z PROC			; std::_Rotate<int *,int,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 3202
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 3203
	mov	eax, DWORD PTR __Mid$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Shift$[ebp], eax
; Line 3204
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 2
	mov	DWORD PTR __Count$[ebp], ecx
; Line 3206
	mov	edx, DWORD PTR __Shift$[ebp]
	mov	DWORD PTR __Factor$4[ebp], edx
$LN9@Rotate:
	cmp	DWORD PTR __Factor$4[ebp], 0
	je	SHORT $LN8@Rotate
; Line 3208
	mov	eax, DWORD PTR __Count$[ebp]
	cdq
	idiv	DWORD PTR __Factor$4[ebp]
	mov	DWORD PTR __Tmp$1[ebp], edx
; Line 3209
	mov	eax, DWORD PTR __Factor$4[ebp]
	mov	DWORD PTR __Count$[ebp], eax
; Line 3210
	mov	ecx, DWORD PTR __Tmp$1[ebp]
	mov	DWORD PTR __Factor$4[ebp], ecx
; Line 3211
	jmp	SHORT $LN9@Rotate
$LN8@Rotate:
; Line 3213
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 2
	cmp	DWORD PTR __Count$[ebp], edx
	jge	$LN10@Rotate
; Line 3214
	jmp	SHORT $LN6@Rotate
$LN5@Rotate:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
$LN6@Rotate:
	cmp	DWORD PTR __Count$[ebp], 0
	jle	$LN10@Rotate
; Line 3216
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Hole$2[ebp], eax
; Line 3217
	mov	ecx, DWORD PTR __Hole$2[ebp]
	mov	DWORD PTR __Next$3[ebp], ecx
; Line 3218
	mov	edx, DWORD PTR __Shift$[ebp]
	mov	eax, DWORD PTR __Next$3[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	cmp	ecx, DWORD PTR __Last$[ebp]
	jne	SHORT $LN12@Rotate
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR tv82[ebp], edx
	jmp	SHORT $LN13@Rotate
$LN12@Rotate:
	mov	eax, DWORD PTR __Shift$[ebp]
	mov	ecx, DWORD PTR __Next$3[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv82[ebp], edx
$LN13@Rotate:
	mov	eax, DWORD PTR tv82[ebp]
	mov	DWORD PTR __Next1$5[ebp], eax
$LN3@Rotate:
; Line 3221
	mov	ecx, DWORD PTR __Next1$5[ebp]
	push	ecx
	mov	edx, DWORD PTR __Next$3[ebp]
	push	edx
	call	??$iter_swap@PAHPAH@std@@YAXPAH0@Z	; std::iter_swap<int *,int *>
	add	esp, 8
; Line 3222
	mov	eax, DWORD PTR __Next1$5[ebp]
	mov	DWORD PTR __Next$3[ebp], eax
; Line 3224
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, DWORD PTR __Next1$5[ebp]
	sar	ecx, 2
	cmp	DWORD PTR __Shift$[ebp], ecx
	jge	SHORT $LN14@Rotate
	mov	edx, DWORD PTR __Shift$[ebp]
	mov	eax, DWORD PTR __Next1$5[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv95[ebp], ecx
	jmp	SHORT $LN15@Rotate
$LN14@Rotate:
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __Next1$5[ebp]
	sar	edx, 2
	mov	eax, DWORD PTR __Shift$[ebp]
	sub	eax, edx
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv95[ebp], edx
$LN15@Rotate:
	mov	eax, DWORD PTR tv95[ebp]
	mov	DWORD PTR __Next1$5[ebp], eax
; Line 3225
	mov	ecx, DWORD PTR __Next1$5[ebp]
	cmp	ecx, DWORD PTR __Hole$2[ebp]
	jne	SHORT $LN1@Rotate
; Line 3226
	jmp	SHORT $LN2@Rotate
$LN1@Rotate:
; Line 3227
	jmp	SHORT $LN3@Rotate
$LN2@Rotate:
; Line 3228
	jmp	$LN5@Rotate
$LN10@Rotate:
; Line 3229
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Rotate@PAHHH@std@@YAXPAH0000@Z ENDP			; std::_Rotate<int *,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Construct@HH@std@@YAXPAH$$QAH@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
__Vptr$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@HH@std@@YAXPAH$$QAH@Z PROC		; std::_Construct<int,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 38
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@HH@std@@YAXPAH$$QAH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 39
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax
; Line 40
	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@Construct
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$forward@H@std@@YA$$QAHAAH@Z		; std::forward<int>
	add	esp, 4
	mov	ecx, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@Construct
$LN3@Construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@Construct:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 41
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@HH@std@@YAXPAH$$QAH@Z$0:
	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Construct@HH@std@@YAXPAH$$QAH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@HH@std@@YAXPAH$$QAH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@HH@std@@YAXPAH$$QAH@Z ENDP		; std::_Construct<int,int>
; Function compile flags: /Odtp
;	COMDAT ??$forward@H@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@H@std@@YA$$QAHAAH@Z PROC			; std::forward<int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@H@std@@YA$$QAHAAH@Z ENDP			; std::forward<int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_copy@_W_W@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@_W_W@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<wchar_t,wchar_t>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 401
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 402
	push	402					; 00000192H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PA_W@std@@YAXPA_W0PB_WI@Z ; std::_Debug_range<wchar_t *>
	add	esp, 16					; 00000010H
; Line 403
	push	403					; 00000193H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z ; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH
; Line 404
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
; Line 406
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [eax+ecx*2]
; Line 407
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@_W_W@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<wchar_t,wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$distance@PAH@std@@YAHPAH0@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$distance@PAH@std@@YAHPAH0@Z PROC			; std::distance<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 756
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 757
	mov	DWORD PTR __Off$[ebp], 0
; Line 758
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	lea	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Distance2@PAHH@std@@YAXPAH0AAHUrandom_access_iterator_tag@0@@Z ; std::_Distance2<int *,int>
	add	esp, 16					; 00000010H
; Line 759
	mov	eax, DWORD PTR __Off$[ebp]
; Line 760
	mov	esp, ebp
	pop	ebp
	ret	0
??$distance@PAH@std@@YAHPAH0@Z ENDP			; std::distance<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Rotate@PAH@std@@YAXPAH00Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Rotate@PAH@std@@YAXPAH00Urandom_access_iterator_tag@0@@Z PROC ; std::_Rotate<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 3234
	push	ebp
	mov	ebp, esp
; Line 3235
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAH@std@@YAPAHPAH@Z	; std::_Val_type<int *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Dist_type@PAH@std@@YAPAHPAH@Z	; std::_Dist_type<int *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Rotate@PAHHH@std@@YAXPAH0000@Z	; std::_Rotate<int *,int,int>
	add	esp, 20					; 00000014H
; Line 3236
	pop	ebp
	ret	0
??$_Rotate@PAH@std@@YAXPAH00Urandom_access_iterator_tag@0@@Z ENDP ; std::_Rotate<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$move@AAH@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAH@std@@YA$$QAHAAH@Z PROC			; std::move<int &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1519
	push	ebp
	mov	ebp, esp
; Line 1520
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1521
	pop	ebp
	ret	0
??$move@AAH@std@@YA$$QAHAAH@Z ENDP			; std::move<int &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Move_backward@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move_backward@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move_backward<int *,int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 2535
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2536
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax
; Line 2538
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	ecx, eax
	push	ecx
	call	_memmove
	add	esp, 12					; 0000000cH
; Line 2539
	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR __Dest$[ebp]
	sub	eax, edx
; Line 2540
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move_backward<int *,int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@AAPAH@std@@YAAAPAHAAPAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAH@std@@YAAAPAHAAPAH@Z PROC		; std::forward<int * &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@AAPAH@std@@YAAAPAHAAPAH@Z ENDP		; std::forward<int * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 570
	push	ebp
	mov	ebp, esp
; Line 571
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang
; Line 573
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z	; std::_Debug_pointer<int>
	add	esp, 12					; 0000000cH
; Line 574
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z	; std::_Debug_pointer<int>
	add	esp, 12					; 0000000cH
; Line 575
	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang
; Line 576
	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN3@Debug_rang:
; Line 578
	pop	ebp
	ret	0
??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_copy@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_copy@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z PROC ; std::_Uninit_copy<wchar_t *,wchar_t *,std::_Wrap_alloc<std::allocator<wchar_t> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 414
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 416
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@_W_W@std@@YA?AU_Scalar_ptr_iterator_tag@0@PA_W0@Z ; std::_Ptr_cat<wchar_t,wchar_t>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Uninit_copy@_W_W@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<wchar_t,wchar_t>
	add	esp, 20					; 00000014H
; Line 417
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z ENDP ; std::_Uninit_copy<wchar_t *,wchar_t *,std::_Wrap_alloc<std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Iter$ = 8						; size = 12
??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_String_val<std::_Simple_types<wchar_t> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 406
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 407
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	?_Unchecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEPA_WXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_Unchecked
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T2[ebp]
; Line 408
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Iter$[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_String_val<std::_Simple_types<wchar_t> > >
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAXAAV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@PB_WI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Debug_pointer@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAXAAV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@PB_WI@Z PROC ; std::_Debug_pointer<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 540
	push	ebp
	mov	ebp, esp
; Line 541
	pop	ebp
	ret	0
??$_Debug_pointer@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAXAAV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@PB_WI@Z ENDP ; std::_Debug_pointer<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$rotate@PAH@std@@YAPAHPAH00@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$rotate@PAH@std@@YAPAHPAH00@Z PROC			; std::rotate<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 3240
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 3241
	push	3241					; 00000ca9H
	push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z	; std::_Debug_range<int *>
	add	esp, 16					; 00000010H
; Line 3242
	push	3242					; 00000caaH
	push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	call	??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z	; std::_Debug_range<int *>
	add	esp, 16					; 00000010H
; Line 3243
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Mid$[ebp]
	je	SHORT $LN1@rotate
	mov	edx, DWORD PTR __Mid$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@rotate
; Line 3245
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	call	??$_Rotate@PAH@std@@YAXPAH00Urandom_access_iterator_tag@0@@Z ; std::_Rotate<int *>
	add	esp, 16					; 00000010H
$LN1@rotate:
; Line 3246
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	call	??$distance@PAH@std@@YAHPAH0@Z		; std::distance<int *>
	add	esp, 8
	push	eax
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$advance@PAHH@std@@YAXAAPAHH@Z	; std::advance<int *,int>
	add	esp, 8
; Line 3247
	mov	eax, DWORD PTR __First$[ebp]
; Line 3248
	mov	esp, ebp
	pop	ebp
	ret	0
??$rotate@PAH@std@@YAPAHPAH00@Z ENDP			; std::rotate<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Upper_bound@PAHHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@0@Z
_TEXT	SEGMENT
__Count2$1 = -12					; size = 4
__Mid$2 = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
__Pred$ = 20						; size = 16
___formal$ = 36						; size = 4
??$_Upper_bound@PAHHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@0@Z PROC ; std::_Upper_bound<int *,int,int,BufferEquivalent>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2553
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 2554
	mov	DWORD PTR __Count$[ebp], 0
; Line 2555
	lea	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Distance@PAHH@std@@YAXPAH0AAH@Z	; std::_Distance<int *,int>
	add	esp, 12					; 0000000cH
$LN4@Upper_boun:
; Line 2557
	cmp	DWORD PTR __Count$[ebp], 0
	jle	SHORT $LN3@Upper_boun
; Line 2559
	mov	eax, DWORD PTR __Count$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Count2$1[ebp], eax
; Line 2560
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid$2[ebp], eax
; Line 2561
	mov	ecx, DWORD PTR __Count2$1[ebp]
	push	ecx
	lea	edx, DWORD PTR __Mid$2[ebp]
	push	edx
	call	??$advance@PAHH@std@@YAXAAPAHH@Z	; std::advance<int *,int>
	add	esp, 8
; Line 2563
	mov	eax, DWORD PTR __Mid$2[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??RBufferEquivalent@@QBE_NHH@Z		; BufferEquivalent::operator()
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@Upper_boun
; Line 2566
	mov	edx, DWORD PTR __Mid$2[ebp]
	add	edx, 4
	mov	DWORD PTR __Mid$2[ebp], edx
	mov	eax, DWORD PTR __Mid$2[ebp]
	mov	DWORD PTR __First$[ebp], eax
; Line 2567
	mov	ecx, DWORD PTR __Count2$1[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, ecx
	mov	DWORD PTR __Count$[ebp], edx
; Line 2569
	jmp	SHORT $LN1@Upper_boun
$LN2@Upper_boun:
; Line 2570
	mov	eax, DWORD PTR __Count2$1[ebp]
	mov	DWORD PTR __Count$[ebp], eax
$LN1@Upper_boun:
; Line 2571
	jmp	SHORT $LN4@Upper_boun
$LN3@Upper_boun:
; Line 2572
	mov	eax, DWORD PTR __First$[ebp]
; Line 2573
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Upper_bound@PAHHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@0@Z ENDP ; std::_Upper_bound<int *,int,int,BufferEquivalent>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Lower_bound@PAHHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@0@Z
_TEXT	SEGMENT
__Count2$1 = -12					; size = 4
__Mid$2 = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
__Pred$ = 20						; size = 16
___formal$ = 36						; size = 4
??$_Lower_bound@PAHHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@0@Z PROC ; std::_Lower_bound<int *,int,int,BufferEquivalent>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2504
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 2505
	mov	DWORD PTR __Count$[ebp], 0
; Line 2506
	lea	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Distance@PAHH@std@@YAXPAH0AAH@Z	; std::_Distance<int *,int>
	add	esp, 12					; 0000000cH
$LN4@Lower_boun:
; Line 2508
	cmp	DWORD PTR __Count$[ebp], 0
	jle	SHORT $LN3@Lower_boun
; Line 2510
	mov	eax, DWORD PTR __Count$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Count2$1[ebp], eax
; Line 2511
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid$2[ebp], eax
; Line 2512
	mov	ecx, DWORD PTR __Count2$1[ebp]
	push	ecx
	lea	edx, DWORD PTR __Mid$2[ebp]
	push	edx
	call	??$advance@PAHH@std@@YAXAAPAHH@Z	; std::advance<int *,int>
	add	esp, 8
; Line 2514
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Mid$2[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??RBufferEquivalent@@QBE_NHH@Z		; BufferEquivalent::operator()
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Lower_boun
; Line 2517
	mov	edx, DWORD PTR __Mid$2[ebp]
	add	edx, 4
	mov	DWORD PTR __Mid$2[ebp], edx
	mov	eax, DWORD PTR __Mid$2[ebp]
	mov	DWORD PTR __First$[ebp], eax
; Line 2518
	mov	ecx, DWORD PTR __Count2$1[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, ecx
	mov	DWORD PTR __Count$[ebp], edx
; Line 2520
	jmp	SHORT $LN1@Lower_boun
$LN2@Lower_boun:
; Line 2521
	mov	eax, DWORD PTR __Count2$1[ebp]
	mov	DWORD PTR __Count$[ebp], eax
$LN1@Lower_boun:
; Line 2522
	jmp	SHORT $LN4@Lower_boun
$LN3@Lower_boun:
; Line 2523
	mov	eax, DWORD PTR __First$[ebp]
; Line 2524
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Lower_bound@PAHHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@0@Z ENDP ; std::_Lower_bound<int *,int,int,BufferEquivalent>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Dist_type@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAH@std@@YAPAHPAH@Z PROC			; std::_Dist_type<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 705
	push	ebp
	mov	ebp, esp
; Line 706
	xor	eax, eax
; Line 707
	pop	ebp
	ret	0
??$_Dist_type@PAH@std@@YAPAHPAH@Z ENDP			; std::_Dist_type<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Dest$ = 20						; size = 20
___formal$ = 40						; size = 1
??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<int *,std::_Temp_iterator<int> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 2418
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 2419
	jmp	SHORT $LN3@Move
$LN2@Move:
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??E?$_Temp_iterator@H@std@@QAEAAV01@XZ	; std::_Temp_iterator<int>::operator++
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 4
	mov	DWORD PTR __First$[ebp], eax
$LN3@Move:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Move
; Line 2420
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$move@AAH@std@@YA$$QAHAAH@Z		; std::move<int &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??D?$_Temp_iterator@H@std@@QAEAAV01@XZ	; std::_Temp_iterator<int>::operator*
	mov	ecx, eax
	call	??4?$_Temp_iterator@H@std@@QAEAAV01@$$QAH@Z ; std::_Temp_iterator<int>::operator=
	jmp	SHORT $LN2@Move
$LN1@Move:
; Line 2421
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z	; std::_Temp_iterator<int>::_Temp_iterator<int>
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 1
	mov	DWORD PTR $T2[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 2422
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z$0:
	lea	ecx, DWORD PTR __Dest$[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
__unwindfunclet$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z$1:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN8@Move
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
$LN8@Move:
	ret	0
__ehhandler$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<int *,std::_Temp_iterator<int> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ptr_cat@PAHV?$_Temp_iterator@H@std@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAHAAV?$_Temp_iterator@H@0@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAHV?$_Temp_iterator@H@std@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAHAAV?$_Temp_iterator@H@0@@Z PROC ; std::_Ptr_cat<int *,std::_Temp_iterator<int> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 414
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 416
	mov	al, BYTE PTR __Cat$[ebp]
; Line 417
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAHV?$_Temp_iterator@H@std@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAHAAV?$_Temp_iterator@H@0@@Z ENDP ; std::_Ptr_cat<int *,std::_Temp_iterator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@AAH@std@@YAAAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAH@std@@YAAAHAAH@Z PROC			; std::forward<int &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@AAH@std@@YAAAHAAH@Z ENDP			; std::forward<int &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z
_TEXT	SEGMENT
$T2 = -88						; size = 20
tv182 = -68						; size = 4
tv181 = -64						; size = 4
$T3 = -60						; size = 4
tv176 = -56						; size = 4
$T4 = -52						; size = 4
tv190 = -48						; size = 4
tv179 = -44						; size = 4
tv177 = -40						; size = 4
tv188 = -36						; size = 4
tv131 = -32						; size = 4
tv129 = -28						; size = 4
tv86 = -24						; size = 4
tv84 = -20						; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 20
__Pred$ = 48						; size = 16
??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z PROC ; std::_Merge<int *,int *,std::_Temp_iterator<int>,BufferEquivalent>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2881
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T5[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 2882
	mov	eax, DWORD PTR __First1$[ebp]
	cmp	eax, DWORD PTR __Last1$[ebp]
	je	$LN7@Merge
	mov	ecx, DWORD PTR __First2$[ebp]
	cmp	ecx, DWORD PTR __Last2$[ebp]
	je	$LN7@Merge
$LN6@Merge:
; Line 2885
	push	2885					; 00000b45H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	mov	eax, DWORD PTR __First2$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	call	??$_Debug_lt_pred@UBufferEquivalent@@AAHAAH@std@@YA_NUBufferEquivalent@@AAH1PB_WI@Z ; std::_Debug_lt_pred<BufferEquivalent,int &,int &>
	add	esp, 32					; 00000020H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@Merge
; Line 2887
	mov	edx, DWORD PTR __First2$[ebp]
	mov	DWORD PTR tv84[ebp], edx
	mov	eax, DWORD PTR tv84[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR tv86[ebp]
	push	ecx
	push	0
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??E?$_Temp_iterator@H@std@@QAEAAV01@H@Z	; std::_Temp_iterator<int>::operator++
	mov	ecx, eax
	call	??D?$_Temp_iterator@H@std@@QAEAAV01@XZ	; std::_Temp_iterator<int>::operator*
	mov	ecx, eax
	call	??4?$_Temp_iterator@H@std@@QAEAAV01@$$QAH@Z ; std::_Temp_iterator<int>::operator=
	mov	edx, DWORD PTR __First2$[ebp]
	add	edx, 4
	mov	DWORD PTR __First2$[ebp], edx
; Line 2888
	mov	eax, DWORD PTR __First2$[ebp]
	cmp	eax, DWORD PTR __Last2$[ebp]
	jne	SHORT $LN3@Merge
; Line 2889
	jmp	SHORT $LN7@Merge
$LN3@Merge:
; Line 2891
	jmp	SHORT $LN2@Merge
$LN4@Merge:
; Line 2893
	mov	ecx, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv129[ebp], ecx
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	DWORD PTR tv131[ebp], eax
	mov	eax, DWORD PTR tv131[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??E?$_Temp_iterator@H@std@@QAEAAV01@H@Z	; std::_Temp_iterator<int>::operator++
	mov	ecx, eax
	call	??D?$_Temp_iterator@H@std@@QAEAAV01@XZ	; std::_Temp_iterator<int>::operator*
	mov	ecx, eax
	call	??4?$_Temp_iterator@H@std@@QAEAAV01@$$QAH@Z ; std::_Temp_iterator<int>::operator=
	mov	ecx, DWORD PTR __First1$[ebp]
	add	ecx, 4
	mov	DWORD PTR __First1$[ebp], ecx
; Line 2894
	mov	edx, DWORD PTR __First1$[ebp]
	cmp	edx, DWORD PTR __Last1$[ebp]
	jne	SHORT $LN2@Merge
; Line 2895
	jmp	SHORT $LN7@Merge
$LN2@Merge:
; Line 2897
	jmp	$LN6@Merge
$LN7@Merge:
; Line 2899
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	DWORD PTR $T4[ebp], esp
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z	; std::_Temp_iterator<int>::_Temp_iterator<int>
	mov	DWORD PTR tv188[ebp], eax
	mov	ecx, DWORD PTR tv188[ebp]
	mov	DWORD PTR tv176[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR __Last1$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z ; std::_Move<int *,std::_Temp_iterator<int> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv177[ebp], eax
	mov	edx, DWORD PTR tv177[ebp]
	mov	DWORD PTR tv179[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR tv179[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??4?$_Temp_iterator@H@std@@QAEAAV01@ABV01@@Z ; std::_Temp_iterator<int>::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
; Line 2900
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z	; std::_Temp_iterator<int>::_Temp_iterator<int>
	mov	DWORD PTR tv190[ebp], eax
	mov	eax, DWORD PTR tv190[ebp]
	mov	DWORD PTR tv181[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR __Last2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z ; std::_Move<int *,std::_Temp_iterator<int> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv182[ebp], eax
	mov	ecx, DWORD PTR $T5[ebp]
	or	ecx, 1
	mov	DWORD PTR $T5[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 2901
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z$0:
	lea	ecx, DWORD PTR __Dest$[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
__unwindfunclet$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z$1:
	mov	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
__unwindfunclet$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z$2:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
__unwindfunclet$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z$3:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
__unwindfunclet$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z$4:
	mov	eax, DWORD PTR $T5[ebp]
	and	eax, 1
	je	$LN15@Merge
	and	DWORD PTR $T5[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
$LN15@Merge:
	ret	0
__ehhandler$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z ENDP ; std::_Merge<int *,int *,std::_Temp_iterator<int>,BufferEquivalent>
; Function compile flags: /Odtp
;	COMDAT ??$_Move_backward@PAHPAH@std@@YAPAHPAH00@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move_backward@PAHPAH@std@@YAPAHPAH00@Z PROC		; std::_Move_backward<int *,int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 2546
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2548
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Move_backward@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<int *,int *>
	add	esp, 16					; 00000010H
; Line 2549
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward@PAHPAH@std@@YAPAHPAH00@Z ENDP		; std::_Move_backward<int *,int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$?0AAPAHAAHX@?$pair@PAHH@std@@QAE@AAPAHAAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAHAAHX@?$pair@PAHH@std@@QAE@AAPAHAAH@Z PROC	; std::pair<int *,int>::pair<int *,int><int * &,int &,void>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@AAPAH@std@@YAAAPAHAAPAH@Z	; std::forward<int * &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@AAH@std@@YAAAHAAH@Z		; std::forward<int &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx
; Line 145
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0AAPAHAAHX@?$pair@PAHH@std@@QAE@AAPAHAAH@Z ENDP	; std::pair<int *,int>::pair<int *,int><int * &,int &,void>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z PROC		; std::_Debug_range<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 583
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 584
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<int *>
	add	esp, 20					; 00000014H
; Line 585
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z ENDP		; std::_Debug_range<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z
_TEXT	SEGMENT
tv147 = -52						; size = 4
$T2 = -48						; size = 4
tv143 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
tv67 = -32						; size = 4
tv148 = -28						; size = 4
tv153 = -24						; size = 4
tv144 = -20						; size = 4
tv151 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Dest$ = 32						; size = 4
__Al$ = 36						; size = 4
??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >,wchar_t *,std::_Wrap_alloc<std::allocator<wchar_t> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 424
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 427
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Unchecked@PA_W@std@@YAPA_WPA_W@Z	; std::_Unchecked<wchar_t *>
	add	esp, 4
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv151[ebp], eax
	mov	eax, DWORD PTR tv151[ebp]
	mov	DWORD PTR tv143[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z ; std::_Unchecked<std::_String_val<std::_Simple_types<wchar_t> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv144[ebp], eax
	mov	ecx, DWORD PTR tv144[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv153[ebp], eax
	mov	eax, DWORD PTR tv153[ebp]
	mov	DWORD PTR tv147[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z ; std::_Unchecked<std::_String_val<std::_Simple_types<wchar_t> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv148[ebp], eax
	mov	ecx, DWORD PTR tv148[ebp]
	push	ecx
	call	??$_Uninit_copy@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z ; std::_Uninit_copy<wchar_t *,wchar_t *,std::_Wrap_alloc<std::allocator<wchar_t> > >
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv67[ebp], eax
	mov	edx, DWORD PTR tv67[ebp]
	push	edx
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Rechecked@PA_WPA_W@std@@YAAAPA_WAAPA_WPA_W@Z ; std::_Rechecked<wchar_t *,wchar_t *>
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T4[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T4[ebp]
; Line 428
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >,wchar_t *,std::_Wrap_alloc<std::allocator<wchar_t> > >
; Function compile flags: /Odtp
;	COMDAT ??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Off$ = 32						; size = 4
___formal$ = 36						; size = 1
??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z PROC ; std::_Distance2<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 741
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 743
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Distance2
; Line 745
	push	745					; 000002e9H
	push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Debug_pointer@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAXAAV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >
	add	esp, 12					; 0000000cH
; Line 746
	push	746					; 000002eaH
	push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Debug_pointer@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAXAAV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >
	add	esp, 12					; 0000000cH
$LN1@Distance2:
; Line 750
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator-
	mov	edx, DWORD PTR __Off$[ebp]
	add	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 751
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z ENDP ; std::_Distance2<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >,int>
; Function compile flags: /Odtp
;	COMDAT ??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z
_TEXT	SEGMENT
$T2 = -84						; size = 20
$T3 = -64						; size = 20
tv181 = -44						; size = 4
tv180 = -40						; size = 4
$T4 = -36						; size = 4
tv177 = -32						; size = 4
tv176 = -28						; size = 4
$T5 = -24						; size = 4
tv184 = -20						; size = 4
tv183 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Count1$ = 20						; size = 4
__Count2$ = 24						; size = 4
__Tempbuf$ = 28						; size = 4
??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z PROC ; std::_Buffered_rotate<int *,int,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2173
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 2174
	cmp	DWORD PTR __Count1$[ebp], 0
	je	SHORT $LN6@Buffered_r
	cmp	DWORD PTR __Count2$[ebp], 0
	jne	SHORT $LN7@Buffered_r
$LN6@Buffered_r:
; Line 2176
	mov	eax, DWORD PTR __Count2$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$advance@PAHH@std@@YAXAAPAHH@Z	; std::advance<int *,int>
	add	esp, 8
; Line 2177
	mov	eax, DWORD PTR __First$[ebp]
	jmp	$LN8@Buffered_r
	jmp	$LN8@Buffered_r
$LN7@Buffered_r:
; Line 2179
	mov	edx, DWORD PTR __Count1$[ebp]
	cmp	edx, DWORD PTR __Count2$[ebp]
	jg	$LN4@Buffered_r
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Maxlen@?$_Temp_iterator@H@std@@QAEHXZ	; std::_Temp_iterator<int>::_Maxlen
	cmp	DWORD PTR __Count1$[ebp], eax
	jg	$LN4@Buffered_r
; Line 2181
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Init@?$_Temp_iterator@H@std@@QAEAAV12@XZ ; std::_Temp_iterator<int>::_Init
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	DWORD PTR $T5[ebp], esp
	push	eax
	call	??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z	; std::_Temp_iterator<int>::_Temp_iterator<int>
	mov	DWORD PTR tv183[ebp], eax
	mov	eax, DWORD PTR tv183[ebp]
	mov	DWORD PTR tv176[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z ; std::_Move<int *,std::_Temp_iterator<int> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv177[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
; Line 2182
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	call	??$_Move@PAHPAH@std@@YAPAHPAH00@Z	; std::_Move<int *,int *>
	add	esp, 12					; 0000000cH
; Line 2184
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Last@?$_Temp_iterator@H@std@@QBEPAHXZ	; std::_Temp_iterator<int>::_Last
	push	eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_First@?$_Temp_iterator@H@std@@QBEPAHXZ ; std::_Temp_iterator<int>::_First
	push	eax
	call	??$_Move_backward@PAHPAH@std@@YAPAHPAH00@Z ; std::_Move_backward<int *,int *>
	add	esp, 12					; 0000000cH
	jmp	$LN8@Buffered_r
	jmp	$LN8@Buffered_r
$LN4@Buffered_r:
; Line 2186
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Maxlen@?$_Temp_iterator@H@std@@QAEHXZ	; std::_Temp_iterator<int>::_Maxlen
	cmp	DWORD PTR __Count2$[ebp], eax
	jg	$LN2@Buffered_r
; Line 2188
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Init@?$_Temp_iterator@H@std@@QAEAAV12@XZ ; std::_Temp_iterator<int>::_Init
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	DWORD PTR $T4[ebp], esp
	push	eax
	call	??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z	; std::_Temp_iterator<int>::_Temp_iterator<int>
	mov	DWORD PTR tv184[ebp], eax
	mov	edx, DWORD PTR tv184[ebp]
	mov	DWORD PTR tv180[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z ; std::_Move<int *,std::_Temp_iterator<int> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv181[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
; Line 2189
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Move_backward@PAHPAH@std@@YAPAHPAH00@Z ; std::_Move_backward<int *,int *>
	add	esp, 12					; 0000000cH
; Line 2190
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Last@?$_Temp_iterator@H@std@@QBEPAHXZ	; std::_Temp_iterator<int>::_Last
	push	eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_First@?$_Temp_iterator@H@std@@QBEPAHXZ ; std::_Temp_iterator<int>::_First
	push	eax
	call	??$_Move@PAHPAH@std@@YAPAHPAH00@Z	; std::_Move<int *,int *>
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN8@Buffered_r
; Line 2192
	jmp	SHORT $LN8@Buffered_r
$LN2@Buffered_r:
; Line 2194
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$rotate@PAH@std@@YAPAHPAH00@Z		; std::rotate<int *>
	add	esp, 12					; 0000000cH
$LN8@Buffered_r:
; Line 2196
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z$0:
	mov	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
__unwindfunclet$??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z$2:
	mov	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
__ehhandler$??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z ENDP ; std::_Buffered_rotate<int *,int,int>
; Function compile flags: /Odtp
;	COMDAT ??$upper_bound@PAHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
__Pred$ = 20						; size = 16
??$upper_bound@PAHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@@Z PROC ; std::upper_bound<int *,int,BufferEquivalent>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2580
	push	ebp
	mov	ebp, esp
; Line 2584
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Dist_type@PAH@std@@YAPAHPAH@Z	; std::_Dist_type<int *>
	add	esp, 4
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	call	??$_Upper_bound@PAHHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@0@Z ; std::_Upper_bound<int *,int,int,BufferEquivalent>
	add	esp, 32					; 00000020H
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z ; std::_Rechecked<int *,int *>
	add	esp, 8
	mov	eax, DWORD PTR [eax]
; Line 2585
	pop	ebp
	ret	0
??$upper_bound@PAHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@@Z ENDP ; std::upper_bound<int *,int,BufferEquivalent>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$lower_bound@PAHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
__Pred$ = 20						; size = 16
??$lower_bound@PAHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@@Z PROC ; std::lower_bound<int *,int,BufferEquivalent>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2531
	push	ebp
	mov	ebp, esp
; Line 2535
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Dist_type@PAH@std@@YAPAHPAH@Z	; std::_Dist_type<int *>
	add	esp, 4
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	call	??$_Lower_bound@PAHHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@0@Z ; std::_Lower_bound<int *,int,int,BufferEquivalent>
	add	esp, 32					; 00000020H
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z ; std::_Rechecked<int *,int *>
	add	esp, 8
	mov	eax, DWORD PTR [eax]
; Line 2536
	pop	ebp
	ret	0
??$lower_bound@PAHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@@Z ENDP ; std::lower_bound<int *,int,BufferEquivalent>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Merge_backward@PAHPAHPAHUBufferEquivalent@@@std@@YAPAHPAH0000UBufferEquivalent@@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last2$ = 20						; size = 4
__Dest$ = 24						; size = 4
__Pred$ = 28						; size = 16
??$_Merge_backward@PAHPAHPAHUBufferEquivalent@@@std@@YAPAHPAH0000UBufferEquivalent@@@Z PROC ; std::_Merge_backward<int *,int *,int *,BufferEquivalent>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2850
	push	ebp
	mov	ebp, esp
; Line 2851
	mov	eax, DWORD PTR __First1$[ebp]
	cmp	eax, DWORD PTR __Last1$[ebp]
	je	$LN7@Merge_back
	mov	ecx, DWORD PTR __First2$[ebp]
	cmp	ecx, DWORD PTR __Last2$[ebp]
	je	$LN7@Merge_back
$LN6@Merge_back:
; Line 2854
	mov	edx, DWORD PTR __Last1$[ebp]
	sub	edx, 4
	mov	DWORD PTR __Last1$[ebp], edx
	mov	eax, DWORD PTR __Last2$[ebp]
	sub	eax, 4
	mov	DWORD PTR __Last2$[ebp], eax
	push	2854					; 00000b26H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	ecx, DWORD PTR __Last1$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last2$[ebp]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	call	??$_Debug_lt_pred@UBufferEquivalent@@AAHAAH@std@@YA_NUBufferEquivalent@@AAH1PB_WI@Z ; std::_Debug_lt_pred<BufferEquivalent,int &,int &>
	add	esp, 32					; 00000020H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@Merge_back
; Line 2856
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	ecx, 4
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __Last1$[ebp]
	push	edx
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
; Line 2857
	mov	eax, DWORD PTR __Last2$[ebp]
	add	eax, 4
	mov	DWORD PTR __Last2$[ebp], eax
; Line 2858
	mov	ecx, DWORD PTR __First1$[ebp]
	cmp	ecx, DWORD PTR __Last1$[ebp]
	jne	SHORT $LN3@Merge_back
; Line 2859
	jmp	SHORT $LN7@Merge_back
$LN3@Merge_back:
; Line 2861
	jmp	SHORT $LN2@Merge_back
$LN4@Merge_back:
; Line 2863
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, 4
	mov	DWORD PTR __Dest$[ebp], edx
	mov	eax, DWORD PTR __Last2$[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
; Line 2864
	mov	eax, DWORD PTR __Last1$[ebp]
	add	eax, 4
	mov	DWORD PTR __Last1$[ebp], eax
; Line 2865
	mov	ecx, DWORD PTR __First2$[ebp]
	cmp	ecx, DWORD PTR __Last2$[ebp]
	jne	SHORT $LN2@Merge_back
; Line 2866
	jmp	SHORT $LN7@Merge_back
$LN2@Merge_back:
; Line 2868
	jmp	$LN6@Merge_back
$LN7@Merge_back:
; Line 2870
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last2$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	call	??$_Move_backward@PAHPAH@std@@YAPAHPAH00@Z ; std::_Move_backward<int *,int *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Dest$[ebp], eax
; Line 2871
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last1$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First1$[ebp]
	push	ecx
	call	??$_Move_backward@PAHPAH@std@@YAPAHPAH00@Z ; std::_Move_backward<int *,int *>
	add	esp, 12					; 0000000cH
; Line 2872
	pop	ebp
	ret	0
??$_Merge_backward@PAHPAHPAHUBufferEquivalent@@@std@@YAPAHPAH0000UBufferEquivalent@@@Z ENDP ; std::_Merge_backward<int *,int *,int *,BufferEquivalent>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Merge@PAHPAHPAHUBufferEquivalent@@@std@@YAPAHPAH0000UBufferEquivalent@@@Z
_TEXT	SEGMENT
tv83 = -8						; size = 4
tv77 = -4						; size = 4
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last2$ = 20						; size = 4
__Dest$ = 24						; size = 4
__Pred$ = 28						; size = 16
??$_Merge@PAHPAHPAHUBufferEquivalent@@@std@@YAPAHPAH0000UBufferEquivalent@@@Z PROC ; std::_Merge<int *,int *,int *,BufferEquivalent>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2881
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 2882
	mov	eax, DWORD PTR __First1$[ebp]
	cmp	eax, DWORD PTR __Last1$[ebp]
	je	$LN7@Merge
	mov	ecx, DWORD PTR __First2$[ebp]
	cmp	ecx, DWORD PTR __Last2$[ebp]
	je	$LN7@Merge
$LN6@Merge:
; Line 2885
	push	2885					; 00000b45H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	mov	eax, DWORD PTR __First2$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	call	??$_Debug_lt_pred@UBufferEquivalent@@AAHAAH@std@@YA_NUBufferEquivalent@@AAH1PB_WI@Z ; std::_Debug_lt_pred<BufferEquivalent,int &,int &>
	add	esp, 32					; 00000020H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@Merge
; Line 2887
	mov	edx, DWORD PTR __First2$[ebp]
	mov	DWORD PTR tv77[ebp], edx
	mov	eax, DWORD PTR tv77[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 4
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First2$[ebp]
	add	ecx, 4
	mov	DWORD PTR __First2$[ebp], ecx
; Line 2888
	mov	edx, DWORD PTR __First2$[ebp]
	cmp	edx, DWORD PTR __Last2$[ebp]
	jne	SHORT $LN3@Merge
; Line 2889
	jmp	SHORT $LN7@Merge
$LN3@Merge:
; Line 2891
	jmp	SHORT $LN2@Merge
$LN4@Merge:
; Line 2893
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR tv83[ebp]
	push	ecx
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	edx, DWORD PTR __Dest$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First1$[ebp]
	add	edx, 4
	mov	DWORD PTR __First1$[ebp], edx
; Line 2894
	mov	eax, DWORD PTR __First1$[ebp]
	cmp	eax, DWORD PTR __Last1$[ebp]
	jne	SHORT $LN2@Merge
; Line 2895
	jmp	SHORT $LN7@Merge
$LN2@Merge:
; Line 2897
	jmp	$LN6@Merge
$LN7@Merge:
; Line 2899
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last1$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	??$_Move@PAHPAH@std@@YAPAHPAH00@Z	; std::_Move<int *,int *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Dest$[ebp], eax
; Line 2900
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First2$[ebp]
	push	eax
	call	??$_Move@PAHPAH@std@@YAPAHPAH00@Z	; std::_Move<int *,int *>
	add	esp, 12					; 0000000cH
; Line 2901
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Merge@PAHPAHPAHUBufferEquivalent@@@std@@YAPAHPAH0000UBufferEquivalent@@@Z ENDP ; std::_Merge<int *,int *,int *,BufferEquivalent>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z
_TEXT	SEGMENT
tv65 = -36						; size = 4
tv91 = -32						; size = 4
$T2 = -28						; size = 4
tv129 = -24						; size = 4
$T3 = -20						; size = 4
$T4 = -13						; size = 1
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Dest$ = 20						; size = 20
??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z PROC ; std::_Move<int *,std::_Temp_iterator<int> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 2439
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T3[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 2441
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAHV?$_Temp_iterator@H@std@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAHAAV?$_Temp_iterator@H@0@@Z ; std::_Ptr_cat<int *,std::_Temp_iterator<int> >
	add	esp, 8
	mov	BYTE PTR $T4[ebp], al
	movzx	edx, BYTE PTR $T4[ebp]
	push	edx
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z	; std::_Temp_iterator<int>::_Temp_iterator<int>
	mov	DWORD PTR tv129[ebp], eax
	mov	ecx, DWORD PTR tv129[ebp]
	mov	DWORD PTR tv91[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<int *,std::_Temp_iterator<int> >
	add	esp, 36					; 00000024H
	mov	DWORD PTR tv65[ebp], eax
	mov	edx, DWORD PTR $T3[ebp]
	or	edx, 1
	mov	DWORD PTR $T3[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 2442
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z$0:
	lea	ecx, DWORD PTR __Dest$[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
__unwindfunclet$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z$1:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
__unwindfunclet$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z$2:
	mov	eax, DWORD PTR $T3[ebp]
	and	eax, 1
	je	$LN6@Move
	and	DWORD PTR $T3[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
$LN6@Move:
	ret	0
__ehhandler$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z ENDP ; std::_Move<int *,std::_Temp_iterator<int> >
; Function compile flags: /Odtp
;	COMDAT ??$iter_swap@PAHPAH@std@@YAXPAH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAHPAH@std@@YAXPAH0@Z PROC			; std::iter_swap<int *,int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; Line 27
	push	ebp
	mov	ebp, esp
; Line 28
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$swap@H@std@@YAXAAH0@Z		; std::swap<int>
	add	esp, 8
; Line 29
	pop	ebp
	ret	0
??$iter_swap@PAHPAH@std@@YAXPAH0@Z ENDP			; std::iter_swap<int *,int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_lt_pred@UBufferEquivalent@@AAHAAH@std@@YA_NUBufferEquivalent@@AAH1PB_WI@Z
_TEXT	SEGMENT
__Pred$ = 8						; size = 16
__Left$ = 24						; size = 4
__Right$ = 28						; size = 4
__File$ = 32						; size = 4
__Line$ = 36						; size = 4
??$_Debug_lt_pred@UBufferEquivalent@@AAHAAH@std@@YA_NUBufferEquivalent@@AAH1PB_WI@Z PROC ; std::_Debug_lt_pred<BufferEquivalent,int &,int &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 520
	push	ebp
	mov	ebp, esp
; Line 521
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$forward@AAH@std@@YAAAHAAH@Z		; std::forward<int &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Left$[ebp]
	push	edx
	call	??$forward@AAH@std@@YAAAHAAH@Z		; std::forward<int &>
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??RBufferEquivalent@@QBE_NHH@Z		; BufferEquivalent::operator()
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@Debug_lt_p
; Line 522
	xor	al, al
	jmp	SHORT $LN4@Debug_lt_p
	jmp	SHORT $LN2@Debug_lt_p
$LN3@Debug_lt_p:
; Line 523
	mov	edx, DWORD PTR __Left$[ebp]
	push	edx
	call	??$forward@AAH@std@@YAAAHAAH@Z		; std::forward<int &>
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	call	??$forward@AAH@std@@YAAAHAAH@Z		; std::forward<int &>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??RBufferEquivalent@@QBE_NHH@Z		; BufferEquivalent::operator()
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Debug_lt_p
; Line 524
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	push	OFFSET ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_lt_p:
; Line 525
	mov	al, 1
$LN4@Debug_lt_p:
; Line 526
	pop	ebp
	ret	0
??$_Debug_lt_pred@UBufferEquivalent@@AAHAAH@std@@YA_NUBufferEquivalent@@AAH1PB_WI@Z ENDP ; std::_Debug_lt_pred<BufferEquivalent,int &,int &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Chunked_merge@PAHPAHHUBufferEquivalent@@@std@@YAXPAH00HHUBufferEquivalent@@@Z
_TEXT	SEGMENT
__Chunk2$1 = -16					; size = 4
__Mid1$2 = -12						; size = 4
__Mid2$3 = -8						; size = 4
__Mid1$4 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Chunk$ = 20						; size = 4
__Count$ = 24						; size = 4
__Pred$ = 28						; size = 16
??$_Chunked_merge@PAHPAHHUBufferEquivalent@@@std@@YAXPAH00HHUBufferEquivalent@@@Z PROC ; std::_Chunked_merge<int *,int *,int,BufferEquivalent>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 3174
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 3175
	mov	eax, DWORD PTR __Chunk$[ebp]
	shl	eax, 1
	mov	DWORD PTR __Chunk2$1[ebp], eax
	jmp	SHORT $LN5@Chunked_me
$LN4@Chunked_me:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, DWORD PTR __Chunk2$1[ebp]
	mov	DWORD PTR __Count$[ebp], ecx
$LN5@Chunked_me:
	mov	edx, DWORD PTR __Chunk2$1[ebp]
	cmp	edx, DWORD PTR __Count$[ebp]
	jg	SHORT $LN3@Chunked_me
; Line 3177
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid1$4[ebp], eax
; Line 3178
	mov	ecx, DWORD PTR __Chunk$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Mid1$4[ebp]
	push	edx
	call	??$advance@PAHH@std@@YAXAAPAHH@Z	; std::advance<int *,int>
	add	esp, 8
; Line 3179
	mov	eax, DWORD PTR __Mid1$4[ebp]
	mov	DWORD PTR __Mid2$3[ebp], eax
; Line 3180
	mov	ecx, DWORD PTR __Chunk$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Mid2$3[ebp]
	push	edx
	call	??$advance@PAHH@std@@YAXAAPAHH@Z	; std::advance<int *,int>
; Line 3182
	add	esp, -8					; fffffff8H
	mov	eax, esp
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid2$3[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid1$4[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid1$4[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Merge@PAHPAHPAHUBufferEquivalent@@@std@@YAPAHPAH0000UBufferEquivalent@@@Z ; std::_Merge<int *,int *,int *,BufferEquivalent>
	add	esp, 36					; 00000024H
	mov	DWORD PTR __Dest$[ebp], eax
; Line 3183
	mov	edx, DWORD PTR __Mid2$3[ebp]
	mov	DWORD PTR __First$[ebp], edx
; Line 3184
	jmp	SHORT $LN4@Chunked_me
$LN3@Chunked_me:
; Line 3186
	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Chunk$[ebp]
	jg	SHORT $LN2@Chunked_me
; Line 3187
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Move@PAHPAH@std@@YAPAHPAH00@Z	; std::_Move<int *,int *>
	add	esp, 12					; 0000000cH
; Line 3188
	jmp	SHORT $LN6@Chunked_me
$LN2@Chunked_me:
; Line 3190
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid1$2[ebp], ecx
; Line 3191
	mov	edx, DWORD PTR __Chunk$[ebp]
	push	edx
	lea	eax, DWORD PTR __Mid1$2[ebp]
	push	eax
	call	??$advance@PAHH@std@@YAXAAPAHH@Z	; std::advance<int *,int>
; Line 3193
	add	esp, -8					; fffffff8H
	mov	ecx, esp
	mov	edx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid1$2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid1$2[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Merge@PAHPAHPAHUBufferEquivalent@@@std@@YAPAHPAH0000UBufferEquivalent@@@Z ; std::_Merge<int *,int *,int *,BufferEquivalent>
	add	esp, 36					; 00000024H
$LN6@Chunked_me:
; Line 3195
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Chunked_merge@PAHPAHHUBufferEquivalent@@@std@@YAXPAH00HHUBufferEquivalent@@@Z ENDP ; std::_Chunked_merge<int *,int *,int,BufferEquivalent>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z
_TEXT	SEGMENT
$T2 = -140						; size = 20
$T3 = -120						; size = 20
$T4 = -100						; size = 20
tv151 = -80						; size = 4
tv185 = -76						; size = 4
$T5 = -72						; size = 4
tv181 = -68						; size = 4
tv180 = -64						; size = 4
$T6 = -60						; size = 4
tv176 = -56						; size = 4
$T7 = -52						; size = 4
tv192 = -48						; size = 4
tv190 = -44						; size = 4
tv178 = -40						; size = 4
tv74 = -36						; size = 4
tv188 = -32						; size = 4
__Chunk2$8 = -28					; size = 4
__Mid1$9 = -24						; size = 4
__Mid2$10 = -20						; size = 4
__Mid1$11 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 20
__Chunk$ = 36						; size = 4
__Count$ = 40						; size = 4
__Pred$ = 44						; size = 16
??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z PROC ; std::_Chunked_merge<int *,std::_Temp_iterator<int>,int,BufferEquivalent>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 3174
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 3175
	mov	eax, DWORD PTR __Chunk$[ebp]
	shl	eax, 1
	mov	DWORD PTR __Chunk2$8[ebp], eax
	jmp	SHORT $LN5@Chunked_me
$LN4@Chunked_me:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, DWORD PTR __Chunk2$8[ebp]
	mov	DWORD PTR __Count$[ebp], ecx
$LN5@Chunked_me:
	mov	edx, DWORD PTR __Chunk2$8[ebp]
	cmp	edx, DWORD PTR __Count$[ebp]
	jg	$LN3@Chunked_me
; Line 3177
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid1$11[ebp], eax
; Line 3178
	mov	ecx, DWORD PTR __Chunk$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Mid1$11[ebp]
	push	edx
	call	??$advance@PAHH@std@@YAXAAPAHH@Z	; std::advance<int *,int>
	add	esp, 8
; Line 3179
	mov	eax, DWORD PTR __Mid1$11[ebp]
	mov	DWORD PTR __Mid2$10[ebp], eax
; Line 3180
	mov	ecx, DWORD PTR __Chunk$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Mid2$10[ebp]
	push	edx
	call	??$advance@PAHH@std@@YAXAAPAHH@Z	; std::advance<int *,int>
	add	esp, 8
; Line 3182
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	DWORD PTR $T7[ebp], esp
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z	; std::_Temp_iterator<int>::_Temp_iterator<int>
	mov	DWORD PTR tv188[ebp], eax
	mov	ecx, DWORD PTR tv188[ebp]
	mov	DWORD PTR tv176[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR __Mid2$10[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid1$11[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid1$11[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	call	??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z ; std::_Merge<int *,int *,std::_Temp_iterator<int>,BufferEquivalent>
	add	esp, 56					; 00000038H
	mov	DWORD PTR tv74[ebp], eax
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR tv178[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR tv178[ebp]
	push	edx
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??4?$_Temp_iterator@H@std@@QAEAAV01@ABV01@@Z ; std::_Temp_iterator<int>::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
; Line 3183
	mov	eax, DWORD PTR __Mid2$10[ebp]
	mov	DWORD PTR __First$[ebp], eax
; Line 3184
	jmp	$LN4@Chunked_me
$LN3@Chunked_me:
; Line 3186
	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	ecx, DWORD PTR __Chunk$[ebp]
	jg	SHORT $LN2@Chunked_me
; Line 3187
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	DWORD PTR $T6[ebp], esp
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z	; std::_Temp_iterator<int>::_Temp_iterator<int>
	mov	DWORD PTR tv190[ebp], eax
	mov	eax, DWORD PTR tv190[ebp]
	mov	DWORD PTR tv180[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	call	??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z ; std::_Move<int *,std::_Temp_iterator<int> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv181[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
; Line 3188
	jmp	$LN1@Chunked_me
$LN2@Chunked_me:
; Line 3190
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid1$9[ebp], ecx
; Line 3191
	mov	edx, DWORD PTR __Chunk$[ebp]
	push	edx
	lea	eax, DWORD PTR __Mid1$9[ebp]
	push	eax
	call	??$advance@PAHH@std@@YAXAAPAHH@Z	; std::advance<int *,int>
	add	esp, 8
; Line 3193
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	DWORD PTR $T5[ebp], esp
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z	; std::_Temp_iterator<int>::_Temp_iterator<int>
	mov	DWORD PTR tv192[ebp], eax
	mov	eax, DWORD PTR tv192[ebp]
	mov	DWORD PTR tv185[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid1$9[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid1$9[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	call	??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z ; std::_Merge<int *,int *,std::_Temp_iterator<int>,BufferEquivalent>
	add	esp, 56					; 00000038H
	mov	DWORD PTR tv151[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
$LN1@Chunked_me:
; Line 3195
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z$0:
	lea	ecx, DWORD PTR __Dest$[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
__unwindfunclet$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z$1:
	mov	ecx, DWORD PTR $T7[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
__unwindfunclet$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z$2:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
__unwindfunclet$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z$3:
	mov	ecx, DWORD PTR $T6[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
__unwindfunclet$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z$5:
	mov	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
__ehhandler$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z ENDP ; std::_Chunked_merge<int *,std::_Temp_iterator<int>,int,BufferEquivalent>
; Function compile flags: /Odtp
;	COMDAT ??$_Advance@PAHH@std@@YAXAAPAHHUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Off$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Advance@PAHH@std@@YAXAAPAHHUrandom_access_iterator_tag@0@@Z PROC ; std::_Advance<int *,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 689
	push	ebp
	mov	ebp, esp
; Line 690
	mov	eax, DWORD PTR __Where$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 691
	pop	ebp
	ret	0
??$_Advance@PAHH@std@@YAXAAPAHHUrandom_access_iterator_tag@0@@Z ENDP ; std::_Advance<int *,int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Insertion_sort1@PAHUBufferEquivalent@@H@std@@YAXPAH0UBufferEquivalent@@0@Z
_TEXT	SEGMENT
__Val$1 = -16						; size = 4
__First1$2 = -12					; size = 4
__Next$3 = -8						; size = 4
__Next1$4 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 16
___formal$ = 32						; size = 4
??$_Insertion_sort1@PAHUBufferEquivalent@@H@std@@YAXPAH0UBufferEquivalent@@0@Z PROC ; std::_Insertion_sort1<int *,BufferEquivalent,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2999
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 3000
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_
; Line 3001
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$3[ebp], ecx
$LN7@Insertion_:
	mov	edx, DWORD PTR __Next$3[ebp]
	add	edx, 4
	mov	DWORD PTR __Next$3[ebp], edx
	mov	eax, DWORD PTR __Next$3[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_
; Line 3003
	mov	ecx, DWORD PTR __Next$3[ebp]
	mov	DWORD PTR __Next1$4[ebp], ecx
; Line 3004
	mov	edx, DWORD PTR __Next$3[ebp]
	push	edx
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Val$1[ebp], eax
; Line 3006
	push	3006					; 00000bbeH
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Val$1[ebp]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	call	??$_Debug_lt_pred@UBufferEquivalent@@AAHAAH@std@@YA_NUBufferEquivalent@@AAH1PB_WI@Z ; std::_Debug_lt_pred<BufferEquivalent,int &,int &>
	add	esp, 32					; 00000020H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@Insertion_
; Line 3008
	mov	ecx, DWORD PTR __Next1$4[ebp]
	add	ecx, 4
	mov	DWORD PTR __Next1$4[ebp], ecx
	mov	edx, DWORD PTR __Next1$4[ebp]
	push	edx
	mov	eax, DWORD PTR __Next$3[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Move_backward@PAHPAH@std@@YAPAHPAH00@Z ; std::_Move_backward<int *,int *>
	add	esp, 12					; 0000000cH
; Line 3009
	lea	edx, DWORD PTR __Val$1[ebp]
	push	edx
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
; Line 3011
	jmp	SHORT $LN4@Insertion_
$LN5@Insertion_:
; Line 3013
	mov	eax, DWORD PTR __Next1$4[ebp]
	mov	DWORD PTR __First1$2[ebp], eax
; Line 3015
	jmp	SHORT $LN3@Insertion_
$LN2@Insertion_:
	mov	ecx, DWORD PTR __First1$2[ebp]
	mov	DWORD PTR __Next1$4[ebp], ecx
$LN3@Insertion_:
	mov	edx, DWORD PTR __First1$2[ebp]
	sub	edx, 4
	mov	DWORD PTR __First1$2[ebp], edx
	push	3014					; 00000bc6H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __First1$2[ebp]
	push	eax
	lea	ecx, DWORD PTR __Val$1[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	call	??$_Debug_lt_pred@UBufferEquivalent@@AAHAAH@std@@YA_NUBufferEquivalent@@AAH1PB_WI@Z ; std::_Debug_lt_pred<BufferEquivalent,int &,int &>
	add	esp, 32					; 00000020H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@Insertion_
; Line 3016
	mov	eax, DWORD PTR __First1$2[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Next1$4[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN2@Insertion_
$LN1@Insertion_:
; Line 3017
	lea	eax, DWORD PTR __Val$1[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Next1$4[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN4@Insertion_:
; Line 3019
	jmp	$LN7@Insertion_
$LN9@Insertion_:
; Line 3020
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Insertion_sort1@PAHUBufferEquivalent@@H@std@@YAXPAH0UBufferEquivalent@@0@Z ENDP ; std::_Insertion_sort1<int *,BufferEquivalent,int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z PROC		; std::_Debug_pointer<int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 552
	push	ebp
	mov	ebp, esp
; Line 553
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 554
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 555
	pop	ebp
	ret	0
??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z ENDP		; std::_Debug_pointer<int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$get_temporary_buffer@H@std@@YA?AU?$pair@PAHH@0@H@Z
_TEXT	SEGMENT
__Pbuf$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Count$ = 12						; size = 4
??$get_temporary_buffer@H@std@@YA?AU?$pair@PAHH@0@H@Z PROC ; std::get_temporary_buffer<int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jge	SHORT $LN7@get_tempor
; Line 26
	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN6@get_tempor
$LN7@get_tempor:
; Line 27
	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	jbe	SHORT $LN6@get_tempor
; Line 28
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN6@get_tempor:
; Line 29
	mov	DWORD PTR __Pbuf$[ebp], 0
	jmp	SHORT $LN4@get_tempor
$LN3@get_tempor:
	mov	eax, DWORD PTR __Count$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
$LN4@get_tempor:
	cmp	DWORD PTR __Count$[ebp], 0
	jle	SHORT $LN2@get_tempor
; Line 31
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXIABUnothrow_t@std@@@Z		; operator new
	add	esp, 8
	mov	DWORD PTR __Pbuf$[ebp], eax
	cmp	DWORD PTR __Pbuf$[ebp], 0
	je	SHORT $LN1@get_tempor
; Line 32
	jmp	SHORT $LN2@get_tempor
$LN1@get_tempor:
; Line 34
	jmp	SHORT $LN3@get_tempor
$LN2@get_tempor:
	lea	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Pbuf$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0AAPAHAAHX@?$pair@PAHH@std@@QAE@AAPAHAAH@Z ; std::pair<int *,int>::pair<int *,int><int * &,int &,void>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN9@get_tempor:
; Line 35
	mov	esp, ebp
	pop	ebp
	ret	0
??$get_temporary_buffer@H@std@@YA?AU?$pair@PAHH@0@H@Z ENDP ; std::get_temporary_buffer<int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_move@_W_W_W@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@_W_W_W@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<wchar_t,wchar_t,wchar_t>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 469
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 470
	push	470					; 000001d6H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PA_W@std@@YAXPA_W0PB_WI@Z ; std::_Debug_range<wchar_t *>
	add	esp, 16					; 00000010H
; Line 471
	push	471					; 000001d7H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z ; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH
; Line 472
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
; Line 474
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [eax+ecx*2]
; Line 475
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@_W_W_W@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<wchar_t,wchar_t,wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Val_type@PA_W@std@@YAPA_WPA_W@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PA_W@std@@YAPA_WPA_W@Z PROC		; std::_Val_type<wchar_t *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 645
	push	ebp
	mov	ebp, esp
; Line 646
	xor	eax, eax
; Line 647
	pop	ebp
	ret	0
??$_Val_type@PA_W@std@@YAPA_WPA_W@Z ENDP		; std::_Val_type<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<int,int,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 469
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 470
	push	470					; 000001d6H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z	; std::_Debug_range<int *>
	add	esp, 16					; 00000010H
; Line 471
	push	471					; 000001d7H
	push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z	; std::_Debug_pointer<int>
	add	esp, 12					; 0000000cH
; Line 472
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax
; Line 474
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
; Line 475
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z
_TEXT	SEGMENT
tv142 = -52						; size = 4
$T2 = -48						; size = 4
tv139 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
tv71 = -32						; size = 4
tv146 = -28						; size = 4
tv145 = -24						; size = 4
_this$ = -20						; size = 4
__Alval$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Ptr$ = 32						; size = 4
??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Ucopy<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1636
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 1638
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
; Line 1640
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv145[ebp], eax
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR tv139[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv146[ebp], eax
	mov	eax, DWORD PTR tv146[ebp]
	mov	DWORD PTR tv142[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z ; std::_Uninitialized_copy<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >,wchar_t *,std::_Wrap_alloc<std::allocator<wchar_t> > >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T4[ebp]
; Line 1641
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Ucopy<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >
; Function compile flags: /Odtp
;	COMDAT ??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z
_TEXT	SEGMENT
tv138 = -48						; size = 4
$T2 = -44						; size = 4
tv135 = -40						; size = 4
$T3 = -36						; size = 4
$T4 = -32						; size = 4
tv142 = -28						; size = 4
tv141 = -24						; size = 4
__Off$ = -20						; size = 4
$T5 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z PROC ; std::distance<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 756
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 757
	mov	DWORD PTR __Off$[ebp], 0
; Line 758
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	??$_Iter_cat@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z ; std::_Iter_cat<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	lea	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv141[ebp], eax
	mov	eax, DWORD PTR tv141[ebp]
	mov	DWORD PTR tv135[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv142[ebp], eax
	mov	eax, DWORD PTR tv142[ebp]
	mov	DWORD PTR tv138[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z ; std::_Distance2<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >,int>
	add	esp, 32					; 00000020H
; Line 759
	mov	ecx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T4[ebp]
; Line 760
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__ehhandler$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z ENDP ; std::distance<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >
; Function compile flags: /Odtp
;	COMDAT ??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z
_TEXT	SEGMENT
$T2 = -104						; size = 20
$T3 = -84						; size = 20
tv232 = -64						; size = 4
tv231 = -60						; size = 4
$T4 = -56						; size = 4
tv228 = -52						; size = 4
tv227 = -48						; size = 4
$T5 = -44						; size = 4
tv235 = -40						; size = 4
tv234 = -36						; size = 4
__Midn$6 = -32						; size = 4
__Lastn$7 = -28						; size = 4
__Count1n$8 = -24					; size = 4
__Count2n$9 = -20					; size = 4
__Firstn$10 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Count1$ = 20						; size = 4
__Count2$ = 24						; size = 4
__Tempbuf$ = 28						; size = 4
__Pred$ = 32						; size = 16
??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z PROC ; std::_Buffered_merge<int *,int,int,BufferEquivalent>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 2910
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 2911
	cmp	DWORD PTR __Count1$[ebp], 0
	je	SHORT $LN11@Buffered_m
	cmp	DWORD PTR __Count2$[ebp], 0
	jne	SHORT $LN12@Buffered_m
$LN11@Buffered_m:
; Line 2913
	jmp	$LN13@Buffered_m
$LN12@Buffered_m:
	mov	eax, DWORD PTR __Count1$[ebp]
	add	eax, DWORD PTR __Count2$[ebp]
	cmp	eax, 2
	jne	SHORT $LN9@Buffered_m
; Line 2915
	push	2915					; 00000b63H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	call	??$_Debug_lt_pred@UBufferEquivalent@@AAHAAH@std@@YA_NUBufferEquivalent@@AAH1PB_WI@Z ; std::_Debug_lt_pred<BufferEquivalent,int &,int &>
	add	esp, 32					; 00000020H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@Buffered_m
; Line 2916
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$iter_swap@PAHPAH@std@@YAXPAH0@Z	; std::iter_swap<int *,int *>
	add	esp, 8
$LN8@Buffered_m:
; Line 2917
	jmp	$LN13@Buffered_m
$LN9@Buffered_m:
; Line 2918
	mov	eax, DWORD PTR __Count1$[ebp]
	cmp	eax, DWORD PTR __Count2$[ebp]
	jg	$LN6@Buffered_m
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Maxlen@?$_Temp_iterator@H@std@@QAEHXZ	; std::_Temp_iterator<int>::_Maxlen
	cmp	DWORD PTR __Count1$[ebp], eax
	jg	$LN6@Buffered_m
; Line 2920
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Init@?$_Temp_iterator@H@std@@QAEAAV12@XZ ; std::_Temp_iterator<int>::_Init
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	DWORD PTR $T5[ebp], esp
	push	eax
	call	??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z	; std::_Temp_iterator<int>::_Temp_iterator<int>
	mov	DWORD PTR tv234[ebp], eax
	mov	ecx, DWORD PTR tv234[ebp]
	mov	DWORD PTR tv227[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z ; std::_Move<int *,std::_Temp_iterator<int> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv228[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
; Line 2922
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Last@?$_Temp_iterator@H@std@@QBEPAHXZ	; std::_Temp_iterator<int>::_Last
	push	eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_First@?$_Temp_iterator@H@std@@QBEPAHXZ ; std::_Temp_iterator<int>::_First
	push	eax
	call	??$_Merge@PAHPAHPAHUBufferEquivalent@@@std@@YAPAHPAH0000UBufferEquivalent@@@Z ; std::_Merge<int *,int *,int *,BufferEquivalent>
	add	esp, 36					; 00000024H
	jmp	$LN13@Buffered_m
$LN6@Buffered_m:
; Line 2924
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Maxlen@?$_Temp_iterator@H@std@@QAEHXZ	; std::_Temp_iterator<int>::_Maxlen
	cmp	DWORD PTR __Count2$[ebp], eax
	jg	$LN4@Buffered_m
; Line 2926
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Init@?$_Temp_iterator@H@std@@QAEAAV12@XZ ; std::_Temp_iterator<int>::_Init
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	DWORD PTR $T4[ebp], esp
	push	eax
	call	??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z	; std::_Temp_iterator<int>::_Temp_iterator<int>
	mov	DWORD PTR tv235[ebp], eax
	mov	edx, DWORD PTR tv235[ebp]
	mov	DWORD PTR tv231[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z ; std::_Move<int *,std::_Temp_iterator<int> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv232[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
; Line 2928
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Last@?$_Temp_iterator@H@std@@QBEPAHXZ	; std::_Temp_iterator<int>::_Last
	push	eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_First@?$_Temp_iterator@H@std@@QBEPAHXZ ; std::_Temp_iterator<int>::_First
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Merge_backward@PAHPAHPAHUBufferEquivalent@@@std@@YAPAHPAH0000UBufferEquivalent@@@Z ; std::_Merge_backward<int *,int *,int *,BufferEquivalent>
	add	esp, 36					; 00000024H
; Line 2930
	jmp	$LN13@Buffered_m
$LN4@Buffered_m:
; Line 2934
	mov	eax, DWORD PTR __Count2$[ebp]
	cmp	eax, DWORD PTR __Count1$[ebp]
	jge	SHORT $LN2@Buffered_m
; Line 2936
	mov	eax, DWORD PTR __Count1$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Count1n$8[ebp], eax
	mov	DWORD PTR __Count2n$9[ebp], 0
; Line 2937
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Firstn$10[ebp], ecx
; Line 2938
	mov	edx, DWORD PTR __Count1n$8[ebp]
	push	edx
	lea	eax, DWORD PTR __Firstn$10[ebp]
	push	eax
	call	??$advance@PAHH@std@@YAXAAPAHH@Z	; std::advance<int *,int>
; Line 2939
	add	esp, -8					; fffffff8H
	mov	ecx, esp
	mov	edx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR __Firstn$10[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	call	??$lower_bound@PAHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@@Z ; std::lower_bound<int *,int,BufferEquivalent>
	add	esp, 28					; 0000001cH
	mov	DWORD PTR __Lastn$7[ebp], eax
; Line 2940
	lea	ecx, DWORD PTR __Count2n$9[ebp]
	push	ecx
	mov	edx, DWORD PTR __Lastn$7[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	call	??$_Distance@PAHH@std@@YAXPAH0AAH@Z	; std::_Distance<int *,int>
	add	esp, 12					; 0000000cH
; Line 2942
	jmp	SHORT $LN1@Buffered_m
$LN2@Buffered_m:
; Line 2944
	mov	DWORD PTR __Count1n$8[ebp], 0
	mov	eax, DWORD PTR __Count2$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Count2n$9[ebp], eax
; Line 2945
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Lastn$7[ebp], ecx
; Line 2946
	mov	edx, DWORD PTR __Count2n$9[ebp]
	push	edx
	lea	eax, DWORD PTR __Lastn$7[ebp]
	push	eax
	call	??$advance@PAHH@std@@YAXAAPAHH@Z	; std::advance<int *,int>
; Line 2947
	add	esp, -8					; fffffff8H
	mov	ecx, esp
	mov	edx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR __Lastn$7[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$upper_bound@PAHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@@Z ; std::upper_bound<int *,int,BufferEquivalent>
	add	esp, 28					; 0000001cH
	mov	DWORD PTR __Firstn$10[ebp], eax
; Line 2948
	lea	ecx, DWORD PTR __Count1n$8[ebp]
	push	ecx
	mov	edx, DWORD PTR __Firstn$10[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Distance@PAHH@std@@YAXPAH0AAH@Z	; std::_Distance<int *,int>
	add	esp, 12					; 0000000cH
$LN1@Buffered_m:
; Line 2951
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count2n$9[ebp]
	push	edx
	mov	eax, DWORD PTR __Count1$[ebp]
	sub	eax, DWORD PTR __Count1n$8[ebp]
	push	eax
	mov	ecx, DWORD PTR __Lastn$7[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __Firstn$10[ebp]
	push	eax
	call	??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z ; std::_Buffered_rotate<int *,int,int>
	add	esp, 24					; 00000018H
	mov	DWORD PTR __Midn$6[ebp], eax
; Line 2953
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count2n$9[ebp]
	push	edx
	mov	eax, DWORD PTR __Count1n$8[ebp]
	push	eax
	mov	ecx, DWORD PTR __Midn$6[ebp]
	push	ecx
	mov	edx, DWORD PTR __Firstn$10[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z ; std::_Buffered_merge<int *,int,int,BufferEquivalent>
; Line 2955
	add	esp, 24					; 00000018H
	mov	ecx, esp
	mov	edx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count2$[ebp]
	sub	edx, DWORD PTR __Count2n$9[ebp]
	push	edx
	mov	eax, DWORD PTR __Count1$[ebp]
	sub	eax, DWORD PTR __Count1n$8[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Lastn$7[ebp]
	push	edx
	mov	eax, DWORD PTR __Midn$6[ebp]
	push	eax
	call	??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z ; std::_Buffered_merge<int *,int,int,BufferEquivalent>
	add	esp, 40					; 00000028H
$LN13@Buffered_m:
; Line 2957
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z$0:
	mov	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
__unwindfunclet$??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z$2:
	mov	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
__ehhandler$??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z ENDP ; std::_Buffered_merge<int *,int,int,BufferEquivalent>
; Function compile flags: /Odtp
;	COMDAT ??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z
_TEXT	SEGMENT
tv144 = -40						; size = 4
$T2 = -36						; size = 4
tv145 = -32						; size = 4
__Midn$3 = -28						; size = 4
__Nleft$4 = -24						; size = 4
__Mid$ = -20						; size = 4
__Chunk$5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Count$ = 16						; size = 4
__Tempbuf$ = 20						; size = 4
__Pred$ = 24						; size = 16
??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z PROC ; std::_Buffered_merge_sort<int *,int,int,BufferEquivalent>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 3203
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 3204
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid$[ebp], eax
; Line 3205
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Nleft$4[ebp], ecx
	jmp	SHORT $LN6@Buffered_m
$LN5@Buffered_m:
	mov	edx, DWORD PTR __Nleft$4[ebp]
	sub	edx, 32					; 00000020H
	mov	DWORD PTR __Nleft$4[ebp], edx
$LN6@Buffered_m:
	cmp	DWORD PTR __Nleft$4[ebp], 32		; 00000020H
	jl	SHORT $LN4@Buffered_m
; Line 3207
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Midn$3[ebp], eax
; Line 3208
	push	32					; 00000020H
	lea	ecx, DWORD PTR __Midn$3[ebp]
	push	ecx
	call	??$advance@PAHH@std@@YAXAAPAHH@Z	; std::advance<int *,int>
; Line 3210
	add	esp, -8					; fffffff8H
	mov	edx, esp
	mov	eax, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR __Midn$3[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	call	??$_Insertion_sort@PAHUBufferEquivalent@@@std@@YAXPAH0UBufferEquivalent@@@Z ; std::_Insertion_sort<int *,BufferEquivalent>
	add	esp, 24					; 00000018H
; Line 3211
	mov	ecx, DWORD PTR __Midn$3[ebp]
	mov	DWORD PTR __Mid$[ebp], ecx
; Line 3212
	jmp	SHORT $LN5@Buffered_m
$LN4@Buffered_m:
; Line 3213
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	call	??$_Insertion_sort@PAHUBufferEquivalent@@@std@@YAXPAH0UBufferEquivalent@@@Z ; std::_Insertion_sort<int *,BufferEquivalent>
	add	esp, 24					; 00000018H
; Line 3215
	mov	DWORD PTR __Chunk$5[ebp], 32		; 00000020H
	jmp	SHORT $LN3@Buffered_m
$LN2@Buffered_m:
	mov	ecx, DWORD PTR __Chunk$5[ebp]
	shl	ecx, 1
	mov	DWORD PTR __Chunk$5[ebp], ecx
$LN3@Buffered_m:
	mov	edx, DWORD PTR __Chunk$5[ebp]
	cmp	edx, DWORD PTR __Count$[ebp]
	jge	$LN7@Buffered_m
; Line 3218
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Chunk$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Init@?$_Temp_iterator@H@std@@QAEAAV12@XZ ; std::_Temp_iterator<int>::_Init
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	push	eax
	call	??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z	; std::_Temp_iterator<int>::_Temp_iterator<int>
	mov	DWORD PTR tv145[ebp], eax
	mov	edx, DWORD PTR tv145[ebp]
	mov	DWORD PTR tv144[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z ; std::_Chunked_merge<int *,std::_Temp_iterator<int>,int,BufferEquivalent>
	add	esp, 52					; 00000034H
; Line 3220
	mov	edx, DWORD PTR __Chunk$5[ebp]
	shl	edx, 1
	mov	DWORD PTR __Chunk$5[ebp], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Chunk$5[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Last@?$_Temp_iterator@H@std@@QBEPAHXZ	; std::_Temp_iterator<int>::_Last
	push	eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_First@?$_Temp_iterator@H@std@@QBEPAHXZ ; std::_Temp_iterator<int>::_First
	push	eax
	call	??$_Chunked_merge@PAHPAHHUBufferEquivalent@@@std@@YAXPAH00HHUBufferEquivalent@@@Z ; std::_Chunked_merge<int *,int *,int,BufferEquivalent>
	add	esp, 36					; 00000024H
; Line 3221
	jmp	$LN2@Buffered_m
$LN7@Buffered_m:
; Line 3222
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z$0:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
__ehhandler$??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z ENDP ; std::_Buffered_merge_sort<int *,int,int,BufferEquivalent>
; Function compile flags: /Odtp
;	COMDAT ??$advance@PAHH@std@@YAXAAPAHH@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__Where$ = 8						; size = 4
__Off$ = 12						; size = 4
??$advance@PAHH@std@@YAXAAPAHH@Z PROC			; std::advance<int *,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 696
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 697
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	call	??$_Advance@PAHH@std@@YAXAAPAHHUrandom_access_iterator_tag@0@@Z ; std::_Advance<int *,int>
	add	esp, 12					; 0000000cH
; Line 698
	mov	esp, ebp
	pop	ebp
	ret	0
??$advance@PAHH@std@@YAXAAPAHH@Z ENDP			; std::advance<int *,int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Insertion_sort@PAHUBufferEquivalent@@@std@@YAXPAH0UBufferEquivalent@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 16
??$_Insertion_sort@PAHUBufferEquivalent@@@std@@YAXPAH0UBufferEquivalent@@@Z PROC ; std::_Insertion_sort<int *,BufferEquivalent>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 3025
	push	ebp
	mov	ebp, esp
; Line 3026
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAH@std@@YAPAHPAH@Z	; std::_Val_type<int *>
	add	esp, 4
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Insertion_sort1@PAHUBufferEquivalent@@H@std@@YAXPAH0UBufferEquivalent@@0@Z ; std::_Insertion_sort1<int *,BufferEquivalent,int>
	add	esp, 28					; 0000001cH
; Line 3027
	pop	ebp
	ret	0
??$_Insertion_sort@PAHUBufferEquivalent@@@std@@YAXPAH0UBufferEquivalent@@@Z ENDP ; std::_Insertion_sort<int *,BufferEquivalent>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Distance2@PAHH@std@@YAXPAH0AAHUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Distance2@PAHH@std@@YAXPAH0AAHUrandom_access_iterator_tag@0@@Z PROC ; std::_Distance2<int *,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 741
	push	ebp
	mov	ebp, esp
; Line 743
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Distance2
; Line 745
	push	745					; 000002e9H
	push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z	; std::_Debug_pointer<int>
	add	esp, 12					; 0000000cH
; Line 746
	push	746					; 000002eaH
	push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z	; std::_Debug_pointer<int>
	add	esp, 12					; 0000000cH
$LN1@Distance2:
; Line 750
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR __Off$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR [edx], eax
; Line 751
	pop	ebp
	ret	0
??$_Distance2@PAHH@std@@YAXPAH0AAHUrandom_access_iterator_tag@0@@Z ENDP ; std::_Distance2<int *,int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z PROC ; std::_Iter_cat<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 405
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 407
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 408
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ENDP ; std::_Iter_cat<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@PB_WI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@PB_WI@Z PROC ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 540
	push	ebp
	mov	ebp, esp
; Line 541
	pop	ebp
	ret	0
??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@PB_WI@Z ENDP ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$return_temporary_buffer@H@std@@YAXPAH@Z
_TEXT	SEGMENT
__Pbuf$ = 8						; size = 4
??$return_temporary_buffer@H@std@@YAXPAH@Z PROC		; std::return_temporary_buffer<int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 40
	push	ebp
	mov	ebp, esp
; Line 41
	mov	eax, DWORD PTR __Pbuf$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 42
	pop	ebp
	ret	0
??$return_temporary_buffer@H@std@@YAXPAH@Z ENDP		; std::return_temporary_buffer<int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy@H@std@@YAXPAH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@H@std@@YAXPAH@Z PROC			; std::_Destroy<int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 54
	push	ebp
	mov	ebp, esp
; Line 56
	pop	ebp
	ret	0
??$_Destroy@H@std@@YAXPAH@Z ENDP			; std::_Destroy<int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Rechecked@PA_WPA_W@std@@YAAAPA_WAAPA_WPA_W@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PA_WPA_W@std@@YAAAPA_WAAPA_WPA_W@Z PROC	; std::_Rechecked<wchar_t *,wchar_t *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 288
	push	ebp
	mov	ebp, esp
; Line 289
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 290
	mov	eax, DWORD PTR __Dest$[ebp]
; Line 291
	pop	ebp
	ret	0
??$_Rechecked@PA_WPA_W@std@@YAAAPA_WAAPA_WPA_W@Z ENDP	; std::_Rechecked<wchar_t *,wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_move@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z PROC ; std::_Uninit_move<wchar_t *,wchar_t *,std::_Wrap_alloc<std::allocator<wchar_t> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 482
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 484
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@_W_W@std@@YA?AU_Scalar_ptr_iterator_tag@0@PA_W0@Z ; std::_Ptr_cat<wchar_t,wchar_t>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PA_W@std@@YAPA_WPA_W@Z	; std::_Val_type<wchar_t *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@_W_W_W@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<wchar_t,wchar_t,wchar_t>
	add	esp, 24					; 00000018H
; Line 485
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z ENDP ; std::_Uninit_move<wchar_t *,wchar_t *,std::_Wrap_alloc<std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@PA_W@std@@YAPA_WPA_W@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PA_W@std@@YAPA_WPA_W@Z PROC		; std::_Unchecked<wchar_t *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 280
	push	ebp
	mov	ebp, esp
; Line 281
	mov	eax, DWORD PTR __Src$[ebp]
; Line 282
	pop	ebp
	ret	0
??$_Unchecked@PA_W@std@@YAPA_WPA_W@Z ENDP		; std::_Unchecked<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z PROC	; std::_Rechecked<int *,int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 288
	push	ebp
	mov	ebp, esp
; Line 289
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 290
	mov	eax, DWORD PTR __Dest$[ebp]
; Line 291
	pop	ebp
	ret	0
??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z ENDP	; std::_Rechecked<int *,int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 482
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 484
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAH@std@@YAPAHPAH@Z	; std::_Val_type<int *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<int,int,int>
	add	esp, 24					; 00000018H
; Line 485
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAH@std@@YAPAHPAH@Z PROC			; std::_Unchecked<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 280
	push	ebp
	mov	ebp, esp
; Line 281
	mov	eax, DWORD PTR __Src$[ebp]
; Line 282
	pop	ebp
	ret	0
??$_Unchecked@PAH@std@@YAPAHPAH@Z ENDP			; std::_Unchecked<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z PROC	; std::allocator<wchar_t>::destroy<wchar_t *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 605
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 608
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ENDP	; std::allocator<wchar_t>::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z PROC ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 598
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 600
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z	; std::forward<wchar_t * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 601
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ENDP ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>
; Function compile flags: /Odtp
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 605
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 608
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 598
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 600
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 601
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
;	COMDAT ??$construct@_W_W@?$allocator@_W@std@@QAEXPA_W$$QA_W@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@_W_W@?$allocator@_W@std@@QAEXPA_W$$QA_W@Z PROC ; std::allocator<wchar_t>::construct<wchar_t,wchar_t>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 598
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@_W_W@?$allocator@_W@std@@QAEXPA_W$$QA_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 600
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	2
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@_W@std@@YA$$QA_WAA_W@Z	; std::forward<wchar_t>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [edx], ax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 601
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@_W_W@?$allocator@_W@std@@QAEXPA_W$$QA_W@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@_W_W@?$allocator@_W@std@@QAEXPA_W$$QA_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@_W_W@?$allocator@_W@std@@QAEXPA_W$$QA_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@_W_W@?$allocator@_W@std@@QAEXPA_W$$QA_W@Z ENDP ; std::allocator<wchar_t>::construct<wchar_t,wchar_t>
; Function compile flags: /Odtp
;	COMDAT ??$_Fill_n@PAHIH@std@@YAPAHPAHIABH@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill_n@PAHIH@std@@YAPAHPAHIABH@Z PROC		; std::_Fill_n<int *,unsigned int,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 2631
	push	ebp
	mov	ebp, esp
; Line 2632
	jmp	SHORT $LN3@Fill_n
$LN2@Fill_n:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Dest$[ebp], ecx
$LN3@Fill_n:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Fill_n
; Line 2633
	mov	edx, DWORD PTR __Dest$[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@Fill_n
$LN1@Fill_n:
; Line 2634
	mov	eax, DWORD PTR __Dest$[ebp]
; Line 2635
	pop	ebp
	ret	0
??$_Fill_n@PAHIH@std@@YAPAHPAHIABH@Z ENDP		; std::_Fill_n<int *,unsigned int,int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xlocnum
; Line 155
	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xlocnum
; Line 155
	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
tv187 = -76						; size = 4
$T2 = -72						; size = 4
tv184 = -68						; size = 4
$T3 = -64						; size = 4
tv181 = -60						; size = 4
$T4 = -56						; size = 4
tv177 = -52						; size = 4
$T5 = -48						; size = 4
tv137 = -44						; size = 4
tv195 = -40						; size = 4
tv194 = -36						; size = 4
tv178 = -32						; size = 4
tv192 = -28						; size = 4
tv191 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
___formal$ = 32						; size = 1
??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 784
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 60					; 0000003cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+12], 1
; Line 786
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T5[ebp], esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv191[ebp], eax
	mov	ecx, DWORD PTR tv191[ebp]
	mov	DWORD PTR tv177[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T4[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv192[ebp], eax
	mov	eax, DWORD PTR tv192[ebp]
	mov	DWORD PTR tv181[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	call	??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z ; std::distance<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv178[ebp], eax
	mov	ecx, DWORD PTR tv178[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@_WV?$allocator@_W@std@@@std@@IAE_NI@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Buy
	movzx	edx, al
	test	edx, edx
	je	$LN2@Construct
; Line 788
	mov	BYTE PTR __$EHRec$[ebp+12], 4
; Line 789
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv194[ebp], eax
	mov	eax, DWORD PTR tv194[ebp]
	mov	DWORD PTR tv184[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv195[ebp], eax
	mov	eax, DWORD PTR tv195[ebp]
	mov	DWORD PTR tv187[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Ucopy<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >
	mov	DWORD PTR tv137[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv137[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN5@Construct
__catch$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$0:
; Line 791
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@IAEXXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Tidy
; Line 792
	push	0
	push	0
	call	__CxxThrowException@8
; Line 793
	mov	eax, $LN14@Construct
	ret	0
$LN5@Construct:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT $LN2@Construct
$LN14@Construct:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
$LN2@Construct:
; Line 795
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
$LN4@Construct:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$2:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$3:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$4:
	mov	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$5:
	mov	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$6:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$7:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >
; Function compile flags: /Odtp
;	COMDAT ??$_Iter_cat@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z PROC ; std::_Iter_cat<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 405
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 407
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 408
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z ENDP ; std::_Iter_cat<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Find_if@PAHV?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAPAHPAH0V?$binder2nd@U?$equal_to@H@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 8
??$_Find_if@PAHV?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAPAHPAH0V?$binder2nd@U?$equal_to@H@std@@@0@@Z PROC ; std::_Find_if<int *,std::binder2nd<std::equal_to<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 42
	push	ebp
	mov	ebp, esp
; Line 43
	jmp	SHORT $LN4@Find_if
$LN3@Find_if:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 4
	mov	DWORD PTR __First$[ebp], eax
$LN4@Find_if:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN2@Find_if
; Line 44
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??R?$binder2nd@U?$equal_to@H@std@@@std@@QBE_NAAH@Z ; std::binder2nd<std::equal_to<int> >::operator()
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@Find_if
; Line 45
	jmp	SHORT $LN2@Find_if
$LN1@Find_if:
; Line 46
	jmp	SHORT $LN3@Find_if
$LN2@Find_if:
	mov	eax, DWORD PTR __First$[ebp]
; Line 47
	pop	ebp
	ret	0
??$_Find_if@PAHV?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAPAHPAH0V?$binder2nd@U?$equal_to@H@std@@@0@@Z ENDP ; std::_Find_if<int *,std::binder2nd<std::equal_to<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@V?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAXAAV?$binder2nd@U?$equal_to@H@std@@@0@PB_WI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Debug_pointer@V?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAXAAV?$binder2nd@U?$equal_to@H@std@@@0@PB_WI@Z PROC ; std::_Debug_pointer<std::binder2nd<std::equal_to<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 540
	push	ebp
	mov	ebp, esp
; Line 541
	pop	ebp
	ret	0
??$_Debug_pointer@V?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAXAAV?$binder2nd@U?$equal_to@H@std@@@0@PB_WI@Z ENDP ; std::_Debug_pointer<std::binder2nd<std::equal_to<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z
_TEXT	SEGMENT
__Mid$1 = -8						; size = 4
__Count2$2 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Count$ = 16						; size = 4
__Tempbuf$ = 20						; size = 4
__Pred$ = 24						; size = 16
??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z PROC ; std::_Stable_sort<int *,int,int,BufferEquivalent>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 3230
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 3231
	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jg	SHORT $LN4@Stable_sor
; Line 3232
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Insertion_sort@PAHUBufferEquivalent@@@std@@YAXPAH0UBufferEquivalent@@@Z ; std::_Insertion_sort<int *,BufferEquivalent>
	add	esp, 24					; 00000018H
; Line 3233
	jmp	$LN5@Stable_sor
$LN4@Stable_sor:
; Line 3235
	mov	eax, DWORD PTR __Count$[ebp]
	add	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Count2$2[ebp], eax
; Line 3236
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid$1[ebp], edx
; Line 3237
	mov	eax, DWORD PTR __Count2$2[ebp]
	push	eax
	lea	ecx, DWORD PTR __Mid$1[ebp]
	push	ecx
	call	??$advance@PAHH@std@@YAXAAPAHH@Z	; std::advance<int *,int>
	add	esp, 8
; Line 3239
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Maxlen@?$_Temp_iterator@H@std@@QAEHXZ	; std::_Temp_iterator<int>::_Maxlen
	cmp	DWORD PTR __Count2$2[ebp], eax
	jg	SHORT $LN2@Stable_sor
; Line 3241
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count2$2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$1[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z ; std::_Buffered_merge_sort<int *,int,int,BufferEquivalent>
; Line 3243
	add	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR __Tempbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, DWORD PTR __Count2$2[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$1[ebp]
	push	eax
	call	??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z ; std::_Buffered_merge_sort<int *,int,int,BufferEquivalent>
	add	esp, 32					; 00000020H
; Line 3245
	jmp	SHORT $LN1@Stable_sor
$LN2@Stable_sor:
; Line 3247
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count2$2[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$1[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z ; std::_Stable_sort<int *,int,int,BufferEquivalent>
; Line 3248
	add	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, DWORD PTR __Count2$2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$1[ebp]
	push	edx
	call	??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z ; std::_Stable_sort<int *,int,int,BufferEquivalent>
	add	esp, 32					; 00000020H
$LN1@Stable_sor:
; Line 3252
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR __Tempbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, DWORD PTR __Count2$2[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count2$2[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$1[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z ; std::_Buffered_merge<int *,int,int,BufferEquivalent>
	add	esp, 40					; 00000028H
$LN5@Stable_sor:
; Line 3254
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z ENDP ; std::_Stable_sort<int *,int,int,BufferEquivalent>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Maxlen@?$_Temp_iterator@H@std@@QAEHXZ
_TEXT	SEGMENT
__Pair$1 = -12						; size = 8
_this$ = -4						; size = 4
?_Maxlen@?$_Temp_iterator@H@std@@QAEHXZ PROC		; std::_Temp_iterator<int>::_Maxlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 841
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 842
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN1@Maxlen
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax+12], 0
	jle	SHORT $LN1@Maxlen
; Line 846
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR __Pair$1[ebp]
	push	ecx
	call	??$get_temporary_buffer@H@std@@YA?AU?$pair@PAHH@0@H@Z ; std::get_temporary_buffer<int>
	add	esp, 8
; Line 848
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR __Pair$1[ebp]
	mov	DWORD PTR [eax], ecx
; Line 849
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR __Pair$1[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 850
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR __Pair$1[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 851
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR __Pair$1[ebp+4]
	mov	DWORD PTR [eax+12], ecx
$LN1@Maxlen:
; Line 853
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+12]
; Line 854
	mov	esp, ebp
	pop	ebp
	ret	0
?_Maxlen@?$_Temp_iterator@H@std@@QAEHXZ ENDP		; std::_Temp_iterator<int>::_Maxlen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Last@?$_Temp_iterator@H@std@@QBEPAHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Last@?$_Temp_iterator@H@std@@QBEPAHXZ PROC		; std::_Temp_iterator<int>::_Last, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 836
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 837
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+4]
; Line 838
	mov	esp, ebp
	pop	ebp
	ret	0
?_Last@?$_Temp_iterator@H@std@@QBEPAHXZ ENDP		; std::_Temp_iterator<int>::_Last
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_First@?$_Temp_iterator@H@std@@QBEPAHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_First@?$_Temp_iterator@H@std@@QBEPAHXZ PROC		; std::_Temp_iterator<int>::_First, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 831
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 832
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx]
; Line 833
	mov	esp, ebp
	pop	ebp
	ret	0
?_First@?$_Temp_iterator@H@std@@QBEPAHXZ ENDP		; std::_Temp_iterator<int>::_First
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Init@?$_Temp_iterator@H@std@@QAEAAV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Init@?$_Temp_iterator@H@std@@QAEAAV12@XZ PROC		; std::_Temp_iterator<int>::_Init, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 825
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 826
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], ecx
; Line 827
	mov	eax, DWORD PTR _this$[ebp]
; Line 828
	mov	esp, ebp
	pop	ebp
	ret	0
?_Init@?$_Temp_iterator@H@std@@QAEAAV12@XZ ENDP		; std::_Temp_iterator<int>::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??E?$_Temp_iterator@H@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??E?$_Temp_iterator@H@std@@QAEAAV01@H@Z PROC		; std::_Temp_iterator<int>::operator++, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 820
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 821
	mov	eax, DWORD PTR _this$[ebp]
; Line 822
	mov	esp, ebp
	pop	ebp
	ret	4
??E?$_Temp_iterator@H@std@@QAEAAV01@H@Z ENDP		; std::_Temp_iterator<int>::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??E?$_Temp_iterator@H@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Temp_iterator@H@std@@QAEAAV01@XZ PROC		; std::_Temp_iterator<int>::operator++, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 815
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 816
	mov	eax, DWORD PTR _this$[ebp]
; Line 817
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Temp_iterator@H@std@@QAEAAV01@XZ ENDP		; std::_Temp_iterator<int>::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??D?$_Temp_iterator@H@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Temp_iterator@H@std@@QAEAAV01@XZ PROC		; std::_Temp_iterator<int>::operator*, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 810
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 811
	mov	eax, DWORD PTR _this$[ebp]
; Line 812
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Temp_iterator@H@std@@QAEAAV01@XZ ENDP		; std::_Temp_iterator<int>::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??4?$_Temp_iterator@H@std@@QAEAAV01@$$QAH@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
tv91 = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??4?$_Temp_iterator@H@std@@QAEAAV01@$$QAH@Z PROC	; std::_Temp_iterator<int>::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 796
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 797
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN2@operator
; Line 799
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$forward@H@std@@YA$$QAHAAH@Z		; std::forward<int>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+4], edx
; Line 800
	jmp	SHORT $LN1@operator
$LN2@operator:
; Line 802
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Ptr$1[ebp], ecx
; Line 803
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$forward@H@std@@YA$$QAHAAH@Z		; std::forward<int>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Ptr$1[ebp]
	push	eax
	call	??$_Construct@HH@std@@YAXPAH$$QAH@Z	; std::_Construct<int,int>
	add	esp, 8
; Line 804
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	DWORD PTR tv91[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR tv91[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR tv91[ebp]
	mov	DWORD PTR [edx+8], eax
$LN1@operator:
; Line 806
	mov	eax, DWORD PTR _this$[ebp]
; Line 807
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_Temp_iterator@H@std@@QAEAAV01@$$QAH@Z ENDP	; std::_Temp_iterator<int>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??4?$_Temp_iterator@H@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??4?$_Temp_iterator@H@std@@QAEAAV01@ABV01@@Z PROC	; std::_Temp_iterator<int>::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 777
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 778
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
; Line 779
	mov	eax, DWORD PTR _this$[ebp]
; Line 780
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_Temp_iterator@H@std@@QAEAAV01@ABV01@@Z ENDP	; std::_Temp_iterator<int>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_Temp_iterator@H@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Next$1 = -4						; size = 4
??1?$_Temp_iterator@H@std@@QAE@XZ PROC			; std::_Temp_iterator<int>::~_Temp_iterator<int>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 766
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 767
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Temp_itera
; Line 769
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Next$1[ebp], edx
; Line 770
	jmp	SHORT $LN3@Temp_itera
$LN2@Temp_itera:
	mov	eax, DWORD PTR __Next$1[ebp]
	add	eax, 4
	mov	DWORD PTR __Next$1[ebp], eax
$LN3@Temp_itera:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Next$1[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN1@Temp_itera
; Line 771
	mov	eax, DWORD PTR __Next$1[ebp]
	push	eax
	call	??$_Destroy@H@std@@YAXPAH@Z		; std::_Destroy<int>
	add	esp, 4
	jmp	SHORT $LN2@Temp_itera
$LN1@Temp_itera:
; Line 772
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$return_temporary_buffer@H@std@@YAXPAH@Z ; std::return_temporary_buffer<int>
	add	esp, 4
$LN5@Temp_itera:
; Line 774
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Temp_iterator@H@std@@QAE@XZ ENDP			; std::_Temp_iterator<int>::~_Temp_iterator<int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z PROC		; std::_Temp_iterator<int>::_Temp_iterator<int>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 756
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 758
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 759
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 760
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 761
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 762
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$_Temp_iterator@H@std@@QAEAAV01@ABV01@@Z ; std::_Temp_iterator<int>::operator=
; Line 763
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z ENDP		; std::_Temp_iterator<int>::_Temp_iterator<int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Temp_iterator@H@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
??0?$_Temp_iterator@H@std@@QAE@H@Z PROC			; std::_Temp_iterator<int>::_Temp_iterator<int>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 747
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 749
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 750
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 751
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 752
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 753
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 754
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Temp_iterator@H@std@@QAE@H@Z ENDP			; std::_Temp_iterator<int>::_Temp_iterator<int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Distance@PAHH@std@@YAXPAH0AAH@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
??$_Distance@PAHH@std@@YAXPAH0AAH@Z PROC		; std::_Distance<int *,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 765
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 766
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Distance2@PAHH@std@@YAXPAH0AAHUrandom_access_iterator_tag@0@@Z ; std::_Distance2<int *,int>
	add	esp, 16					; 00000010H
; Line 767
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Distance@PAHH@std@@YAXPAH0AAH@Z ENDP		; std::_Distance<int *,int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__File$ = 32						; size = 4
__Line$ = 36						; size = 4
___formal$ = 40						; size = 1
??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 570
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 571
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Debug_rang
; Line 573
	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
	add	esp, 12					; 0000000cH
; Line 574
	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
	add	esp, 12					; 0000000cH
; Line 575
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator<
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Debug_rang
; Line 576
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_rang:
; Line 578
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
; Function compile flags: /Odtp
;	COMDAT ??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z PROC ; std::_Iter_cat<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 405
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 407
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 408
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ENDP ; std::_Iter_cat<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xlocnum
; Line 155
	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xlocnum
; Line 155
	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninitialized_move@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z PROC ; std::_Uninitialized_move<wchar_t *,wchar_t *,std::_Wrap_alloc<std::allocator<wchar_t> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 492
	push	ebp
	mov	ebp, esp
; Line 495
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Unchecked@PA_W@std@@YAPA_WPA_W@Z	; std::_Unchecked<wchar_t *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Unchecked@PA_W@std@@YAPA_WPA_W@Z	; std::_Unchecked<wchar_t *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked@PA_W@std@@YAPA_WPA_W@Z	; std::_Unchecked<wchar_t *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z ; std::_Uninit_move<wchar_t *,wchar_t *,std::_Wrap_alloc<std::allocator<wchar_t> > >
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Rechecked@PA_WPA_W@std@@YAAAPA_WAAPA_WPA_W@Z ; std::_Rechecked<wchar_t *,wchar_t *>
	add	esp, 8
	mov	eax, DWORD PTR [eax]
; Line 496
	pop	ebp
	ret	0
??$_Uninitialized_move@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z ENDP ; std::_Uninitialized_move<wchar_t *,wchar_t *,std::_Wrap_alloc<std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXPA_W0AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXPA_W0AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<wchar_t> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 89
	push	ebp
	mov	ebp, esp
; Line 90
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXPA_W0AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ptr_cat@_W_W@std@@YA?AU_Scalar_ptr_iterator_tag@0@PA_W0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@_W_W@std@@YA?AU_Scalar_ptr_iterator_tag@0@PA_W0@Z PROC ; std::_Ptr_cat<wchar_t,wchar_t>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 444
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 446
	mov	al, BYTE PTR __Cat$[ebp]
; Line 447
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@_W_W@std@@YA?AU_Scalar_ptr_iterator_tag@0@PA_W0@Z ENDP ; std::_Ptr_cat<wchar_t,wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 728
	push	ebp
	mov	ebp, esp
; Line 730
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
; Line 731
	pop	ebp
	ret	0
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
; Line 724
	pop	ebp
	ret	0
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 492
	push	ebp
	mov	ebp, esp
; Line 495
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked@PAH@std@@YAPAHPAH@Z	; std::_Unchecked<int *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z ; std::_Rechecked<int *,int *>
	add	esp, 8
	mov	eax, DWORD PTR [eax]
; Line 496
	pop	ebp
	ret	0
??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_fill_n@HIHH@std@@YAXPAHIPBHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Pval$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_fill_n@HIHH@std@@YAXPAHIPBHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<int,unsigned int,int,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 623
	push	ebp
	mov	ebp, esp
; Line 624
	mov	eax, DWORD PTR __Pval$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Fill_n@PAHIH@std@@YAPAHPAHIABH@Z	; std::_Fill_n<int *,unsigned int,int>
	add	esp, 12					; 0000000cH
; Line 625
	pop	ebp
	ret	0
??$_Uninit_fill_n@HIHH@std@@YAXPAHIPBHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<int,unsigned int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 89
	push	ebp
	mov	ebp, esp
; Line 90
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 728
	push	ebp
	mov	ebp, esp
; Line 730
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>
; Line 731
	pop	ebp
	ret	0
??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z	; std::forward<wchar_t * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>
; Line 724
	pop	ebp
	ret	0
??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z PROC		; std::forward<wchar_t * &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ENDP		; std::forward<wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 728
	push	ebp
	mov	ebp, esp
; Line 730
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>
; Line 731
	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
; Line 724
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@_W_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PA_W$$QA_W@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@_W_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PA_W$$QA_W@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t,wchar_t>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@_W@std@@YA$$QA_WAA_W@Z	; std::forward<wchar_t>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@_W_W@?$allocator@_W@std@@QAEXPA_W$$QA_W@Z ; std::allocator<wchar_t>::construct<wchar_t,wchar_t>
; Line 724
	pop	ebp
	ret	0
??$construct@_W_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PA_W$$QA_W@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t,wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<int *,int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 2428
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2429
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax
; Line 2431
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; Line 2432
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
; Line 2433
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<int *,int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_def_fill_n@HIH@std@@YAXPAHIAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_def_fill_n@HIH@std@@YAXPAHIAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_def_fill_n<int,unsigned int,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 681
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 682
	mov	DWORD PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Fill_n@PAHIH@std@@YAPAHPAHIABH@Z	; std::_Fill_n<int *,unsigned int,int>
	add	esp, 12					; 0000000cH
; Line 683
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_def_fill_n@HIH@std@@YAXPAHIAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_def_fill_n<int,unsigned int,int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z PROC ; std::_Ptr_cat<int,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 444
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 446
	mov	al, BYTE PTR __Cat$[ebp]
; Line 447
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ENDP ; std::_Ptr_cat<int,int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Val_type@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAH@std@@YAPAHPAH@Z PROC			; std::_Val_type<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 645
	push	ebp
	mov	ebp, esp
; Line 646
	xor	eax, eax
; Line 647
	pop	ebp
	ret	0
??$_Val_type@PAH@std@@YAPAHPAH@Z ENDP			; std::_Val_type<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
_TEXT	SEGMENT
tv142 = -44						; size = 4
$T2 = -40						; size = 4
tv139 = -36						; size = 4
$T3 = -32						; size = 4
_this$ = -28						; size = 4
tv146 = -24						; size = 4
tv145 = -20						; size = 4
$T4 = -14						; size = 1
$T5 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 764
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 766
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??$_Iter_cat@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z ; std::_Iter_cat<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR $T5[ebp], dl
	movzx	eax, BYTE PTR $T5[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv145[ebp], eax
	mov	eax, DWORD PTR tv145[ebp]
	mov	DWORD PTR tv139[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv146[ebp], eax
	mov	eax, DWORD PTR tv146[ebp]
	mov	DWORD PTR tv142[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >
; Line 767
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >
; Function compile flags: /Odtp
;	COMDAT ??$_Rechecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@AAV10@PAH@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Rechecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@AAV10@PAH@Z PROC ; std::_Rechecked<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 404
	push	ebp
	mov	ebp, esp
; Line 405
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Iter$[ebp]
	call	?_Rechecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV12@PAH@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Rechecked
; Line 406
	pop	ebp
	ret	0
??$_Rechecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@AAV10@PAH@Z ENDP ; std::_Rechecked<std::_Vector_val<std::_Simple_types<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Remove_if@PAHV?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAPAHPAH0V?$binder2nd@U?$equal_to@H@std@@@0@@Z
_TEXT	SEGMENT
__Next$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 8
??$_Remove_if@PAHV?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAPAHPAH0V?$binder2nd@U?$equal_to@H@std@@@0@@Z PROC ; std::_Remove_if<int *,std::binder2nd<std::equal_to<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 1755
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1756
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax
; Line 1757
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 4
	mov	DWORD PTR __First$[ebp], ecx
	jmp	SHORT $LN4@Remove_if
$LN3@Remove_if:
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 4
	mov	DWORD PTR __First$[ebp], edx
$LN4@Remove_if:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN2@Remove_if
; Line 1758
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??R?$binder2nd@U?$equal_to@H@std@@@std@@QBE_NAAH@Z ; std::binder2nd<std::equal_to<int> >::operator()
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@Remove_if
; Line 1759
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Next$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 4
	mov	DWORD PTR __Next$[ebp], eax
$LN1@Remove_if:
; Line 1760
	jmp	SHORT $LN3@Remove_if
$LN2@Remove_if:
	mov	eax, DWORD PTR __Next$[ebp]
; Line 1761
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Remove_if@PAHV?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAPAHPAH0V?$binder2nd@U?$equal_to@H@std@@@0@@Z ENDP ; std::_Remove_if<int *,std::binder2nd<std::equal_to<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z
_TEXT	SEGMENT
tv186 = -76						; size = 4
$T2 = -72						; size = 4
tv182 = -68						; size = 4
$T3 = -64						; size = 4
tv179 = -60						; size = 4
$T4 = -56						; size = 4
tv176 = -52						; size = 4
$T5 = -48						; size = 4
tv133 = -44						; size = 4
tv187 = -40						; size = 4
tv199 = -36						; size = 4
tv183 = -32						; size = 4
tv197 = -28						; size = 4
tv195 = -24						; size = 4
tv194 = -20						; size = 4
$T6 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
__Pred$ = 36						; size = 8
??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z PROC ; std::find_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::binder2nd<std::equal_to<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 52
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T6[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 2
; Line 53
	push	53					; 00000035H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T5[ebp], esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv194[ebp], eax
	mov	ecx, DWORD PTR tv194[ebp]
	mov	DWORD PTR tv176[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T4[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv195[ebp], eax
	mov	eax, DWORD PTR tv195[ebp]
	mov	DWORD PTR tv179[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	call	??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z ; std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
	add	esp, 32					; 00000020H
; Line 54
	push	54					; 00000036H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	lea	ecx, DWORD PTR __Pred$[ebp]
	push	ecx
	call	??$_Debug_pointer@V?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAXAAV?$binder2nd@U?$equal_to@H@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::binder2nd<std::equal_to<int> > >
	add	esp, 12					; 0000000cH
; Line 56
	mov	edx, DWORD PTR __Pred$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Pred$[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv197[ebp], eax
	mov	eax, DWORD PTR tv197[ebp]
	mov	DWORD PTR tv182[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<int> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv183[ebp], eax
	mov	ecx, DWORD PTR tv183[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv199[ebp], eax
	mov	eax, DWORD PTR tv199[ebp]
	mov	DWORD PTR tv186[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<int> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv187[ebp], eax
	mov	ecx, DWORD PTR tv187[ebp]
	push	ecx
	call	??$_Find_if@PAHV?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAPAHPAH0V?$binder2nd@U?$equal_to@H@std@@@0@@Z ; std::_Find_if<int *,std::binder2nd<std::equal_to<int> > >
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv133[ebp], eax
	mov	edx, DWORD PTR tv133[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Rechecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@AAV10@PAH@Z ; std::_Rechecked<std::_Vector_val<std::_Simple_types<int> > >
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T6[ebp]
	or	ecx, 1
	mov	DWORD PTR $T6[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 57
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$2:
	mov	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$3:
	mov	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$4:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$5:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$6:
	mov	eax, DWORD PTR $T6[ebp]
	and	eax, 1
	je	$LN10@find_if
	and	DWORD PTR $T6[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
$LN10@find_if:
	ret	0
__ehhandler$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z ENDP ; std::find_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::binder2nd<std::equal_to<int> > >
; Function compile flags: /Odtp
;	COMDAT ??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH000UBufferEquivalent@@@Z
_TEXT	SEGMENT
__Tempbuf$ = -36					; size = 20
__Count$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
__Pred$ = 24						; size = 16
??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH000UBufferEquivalent@@@Z PROC ; std::_Stable_sort<int *,int,int,BufferEquivalent>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 3261
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH000UBufferEquivalent@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 3262
	mov	DWORD PTR __Count$[ebp], 0
; Line 3263
	lea	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Distance@PAHH@std@@YAXPAH0AAH@Z	; std::_Distance<int *,int>
	add	esp, 12					; 0000000cH
; Line 3264
	mov	eax, DWORD PTR __Count$[ebp]
	add	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	lea	ecx, DWORD PTR __Tempbuf$[ebp]
	call	??0?$_Temp_iterator@H@std@@QAE@H@Z	; std::_Temp_iterator<int>::_Temp_iterator<int>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 3265
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	lea	eax, DWORD PTR __Tempbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z ; std::_Stable_sort<int *,int,int,BufferEquivalent>
	add	esp, 32					; 00000020H
; Line 3266
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Tempbuf$[ebp]
	call	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH000UBufferEquivalent@@@Z$0:
	lea	ecx, DWORD PTR __Tempbuf$[ebp]
	jmp	??1?$_Temp_iterator@H@std@@QAE@XZ	; std::_Temp_iterator<int>::~_Temp_iterator<int>
__ehhandler$??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH000UBufferEquivalent@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH000UBufferEquivalent@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH000UBufferEquivalent@@@Z ENDP ; std::_Stable_sort<int *,int,int,BufferEquivalent>
; Function compile flags: /Odtp
;	COMDAT ??$_Val_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 12
??$_Val_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z PROC ; std::_Val_type<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 645
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Val_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 646
	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR ___formal$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T2[ebp]
; Line 647
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Val_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z$0:
	lea	ecx, DWORD PTR ___formal$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Val_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Val_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Val_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ENDP ; std::_Val_type<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
; Function compile flags: /Odtp
;	COMDAT ??$_Dist_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 12
??$_Dist_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z PROC ; std::_Dist_type<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 705
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Dist_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 706
	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR ___formal$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T2[ebp]
; Line 707
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Dist_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z$0:
	lea	ecx, DWORD PTR ___formal$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Dist_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Dist_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Dist_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ENDP ; std::_Dist_type<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Iter$ = 8						; size = 12
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 395
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 396
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEPAHXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Unchecked
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Iter$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T2[ebp]
; Line 397
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Iter$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<std::_Simple_types<int> > >
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@UBufferEquivalent@@@std@@YAXAAUBufferEquivalent@@PB_WI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Debug_pointer@UBufferEquivalent@@@std@@YAXAAUBufferEquivalent@@PB_WI@Z PROC ; std::_Debug_pointer<BufferEquivalent>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 540
	push	ebp
	mov	ebp, esp
; Line 541
	pop	ebp
	ret	0
??$_Debug_pointer@UBufferEquivalent@@@std@@YAXAAUBufferEquivalent@@PB_WI@Z ENDP ; std::_Debug_pointer<BufferEquivalent>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z
_TEXT	SEGMENT
tv140 = -40						; size = 4
$T2 = -36						; size = 4
tv137 = -32						; size = 4
$T3 = -28						; size = 4
tv144 = -24						; size = 4
tv143 = -20						; size = 4
$T4 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__File$ = 32						; size = 4
__Line$ = 36						; size = 4
??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z PROC ; std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 583
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 584
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ; std::_Iter_cat<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv143[ebp], eax
	mov	ecx, DWORD PTR tv143[ebp]
	mov	DWORD PTR tv137[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv144[ebp], eax
	mov	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR tv140[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
	add	esp, 36					; 00000024H
; Line 585
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z ENDP ; std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
; Function compile flags: /Odtp
;	COMDAT ??$_Move@AAH@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAH@std@@YA$$QAHAAH@Z PROC			; std::_Move<int &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1527
	push	ebp
	mov	ebp, esp
; Line 1528
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1529
	pop	ebp
	ret	0
??$_Move@AAH@std@@YA$$QAHAAH@Z ENDP			; std::_Move<int &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$di	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 160
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$di	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 160
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$di	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 160
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range2@PA_W@std@@YAXPA_W0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PA_W@std@@YAXPA_W0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<wchar_t *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 570
	push	ebp
	mov	ebp, esp
; Line 571
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang
; Line 573
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z ; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH
; Line 574
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z ; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH
; Line 575
	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang
; Line 576
	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN3@Debug_rang:
; Line 578
	pop	ebp
	ret	0
??$_Debug_range2@PA_W@std@@YAXPA_W0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Iter_cat@PA_W@std@@YA?AUrandom_access_iterator_tag@0@ABQA_W@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PA_W@std@@YA?AUrandom_access_iterator_tag@0@ABQA_W@Z PROC ; std::_Iter_cat<wchar_t *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 405
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 407
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 408
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PA_W@std@@YA?AUrandom_access_iterator_tag@0@ABQA_W@Z ENDP ; std::_Iter_cat<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Allocate@H@std@@YAPAHIPAH@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@H@std@@YAPAHIPAH@Z PROC			; std::_Allocate<int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@H@std@@YAPAHIPAH@Z ENDP			; std::_Allocate<int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@_W@std@@YAPA_WIPA_W@Z PROC			; std::_Allocate<wchar_t>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], 2147483647	; 7fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 1
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@_W@std@@YAPA_WIPA_W@Z ENDP			; std::_Allocate<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z PROC ; std::_Allocate<std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Umove@PA_W@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WPA_W00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PA_W@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WPA_W00@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Umove<wchar_t *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1644
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1646
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
; Line 1648
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z ; std::_Uninitialized_move<wchar_t *,wchar_t *,std::_Wrap_alloc<std::allocator<wchar_t> > >
	add	esp, 16					; 00000010H
; Line 1649
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PA_W@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WPA_W00@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Umove<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXPA_W0AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXPA_W0AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<wchar_t> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 95
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 96
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@_W_W@std@@YA?AU_Scalar_ptr_iterator_tag@0@PA_W0@Z ; std::_Ptr_cat<wchar_t,wchar_t>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXPA_W0AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<wchar_t> > >
	add	esp, 16					; 00000010H
; Line 97
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXPA_W0AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 877
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 879
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
	add	esp, 8
; Line 880
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Umove<int *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1644
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1646
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
; Line 1648
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
	add	esp, 16					; 00000010H
; Line 1649
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Umove<int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 605
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 608
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv74 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 598
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 600
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 601
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
	add	esp, 8
; Line 579
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ PROC	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ENDP	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninitialized_fill_n@PAHIHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAHIPBHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Pval$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@PAHIHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAHIPBHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Uninitialized_fill_n<int *,unsigned int,int,std::_Wrap_alloc<std::allocator<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 633
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 635
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAH@std@@YAPAHPAH@Z	; std::_Val_type<int *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Pval$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_fill_n@HIHH@std@@YAXPAHIPBHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<int,unsigned int,int,int>
	add	esp, 24					; 00000018H
; Line 636
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_fill_n@PAHIHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAHIPBHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Uninitialized_fill_n<int *,unsigned int,int,std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 95
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 96
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
	add	esp, 16					; 00000010H
; Line 97
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 877
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 879
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>
	add	esp, 8
; Line 880
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z	; std::forward<wchar_t * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; Line 92
	push	ebp
	mov	ebp, esp
; Line 95
	mov	eax, DWORD PTR __Val$[ebp]
; Line 96
	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 877
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 879
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8
; Line 880
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$construct@_W_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_W$$QA_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@_W_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_W$$QA_W@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t,wchar_t>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@_W@std@@YA$$QA_WAA_W@Z	; std::forward<wchar_t>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@_W_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PA_W$$QA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t,wchar_t>
	add	esp, 12					; 0000000cH
; Line 873
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@_W_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_W$$QA_W@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t,wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$forward@_W@std@@YA$$QA_WAA_W@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_W@std@@YA$$QA_WAA_W@Z PROC			; std::forward<wchar_t>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@_W@std@@YA$$QA_WAA_W@Z ENDP			; std::forward<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$addressof@_W@std@@YAPA_WAA_W@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@_W@std@@YAPA_WAA_W@Z PROC			; std::addressof<wchar_t>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; Line 92
	push	ebp
	mov	ebp, esp
; Line 95
	mov	eax, DWORD PTR __Val$[ebp]
; Line 96
	pop	ebp
	ret	0
??$addressof@_W@std@@YAPA_WAA_W@Z ENDP			; std::addressof<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Move@PAHPAH@std@@YAPAHPAH00@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAHPAH@std@@YAPAHPAH00@Z PROC			; std::_Move<int *,int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 2439
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2441
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<int *,int *>
	add	esp, 16					; 00000010H
; Line 2442
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move@PAHPAH@std@@YAPAHPAH00@Z ENDP			; std::_Move<int *,int *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$addressof@H@std@@YAPAHAAH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@H@std@@YAPAHAAH@Z PROC			; std::addressof<int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; Line 92
	push	ebp
	mov	ebp, esp
; Line 95
	mov	eax, DWORD PTR __Val$[ebp]
; Line 96
	pop	ebp
	ret	0
??$addressof@H@std@@YAPAHAAH@Z ENDP			; std::addressof<int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$addressof@$$CBH@std@@YAPBHABH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBH@std@@YAPBHABH@Z PROC			; std::addressof<int const >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; Line 92
	push	ebp
	mov	ebp, esp
; Line 95
	mov	eax, DWORD PTR __Val$[ebp]
; Line 96
	pop	ebp
	ret	0
??$addressof@$$CBH@std@@YAPBHABH@Z ENDP			; std::addressof<int const >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Uninitialized_default_fill_n@PAHIU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAHIAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_default_fill_n@PAHIU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAHIAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Uninitialized_default_fill_n<int *,unsigned int,std::_Wrap_alloc<std::allocator<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory
; Line 690
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 692
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAH@std@@YAPAHPAH@Z	; std::_Val_type<int *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Uninit_def_fill_n@HIH@std@@YAXPAHIAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<int,unsigned int,int>
	add	esp, 20					; 00000014H
; Line 693
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_default_fill_n@PAHIU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAHIAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Uninitialized_default_fill_n<int *,unsigned int,std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
_TEXT	SEGMENT
tv147 = -44						; size = 4
$T2 = -40						; size = 4
tv144 = -36						; size = 4
$T3 = -32						; size = 4
tv148 = -28						; size = 4
tv71 = -24						; size = 4
_this$ = -20						; size = 4
$T4 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::vector<wchar_t,std::allocator<wchar_t> ><std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >,void>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 750
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0?$allocator@_W@std@@QAE@XZ		; std::allocator<wchar_t>::allocator<wchar_t>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 751
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR tv144[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv148[ebp], eax
	mov	eax, DWORD PTR tv148[ebp]
	mov	DWORD PTR tv147[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > >
; Line 752
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::~_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >
__unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__ehhandler$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::vector<wchar_t,std::allocator<wchar_t> ><std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >,void>
; Function compile flags: /Odtp
;	COMDAT ?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -20						; size = 4
__Pnext$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Orphan_range, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1764
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1765
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1766
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
	mov	DWORD PTR __Pnext$[ebp], eax
; Line 1767
	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:
; Line 1768
	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_ran
; Line 1769
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN3@Orphan_ran
$LN2@Orphan_ran:
; Line 1770
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax
; Line 1771
	jmp	SHORT $LN1@Orphan_ran
$LN3@Orphan_ran:
; Line 1773
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont
; Line 1774
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN1@Orphan_ran:
; Line 1775
	jmp	SHORT $LN5@Orphan_ran
$LN6@Orphan_ran:
; Line 1776
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Orphan_range
; Function compile flags: /Odtp
;	COMDAT ?_Xlen@?$vector@_WV?$allocator@_W@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@_WV?$allocator@_W@std@@@std@@IBEXXZ PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1753
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1754
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:
; Line 1755
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@_WV?$allocator@_W@std@@@std@@IBEXXZ ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@IAEXXZ PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1622
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1623
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Tidy
; Line 1625
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 1626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@_WV?$allocator@_W@std@@@std@@IAEXPA_W0@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Destroy
; Line 1628
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
; Line 1629
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 1630
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 1631
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN2@Tidy:
; Line 1633
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@IAEXXZ ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Reserve@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Reserve, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1612
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
; Line 1613
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unused_capacity@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Unused_capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Reserve
; Line 1615
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Reserve
; Line 1616
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@_WV?$allocator@_W@std@@@std@@IBEXXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Xlen
$LN1@Reserve:
; Line 1617
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::size
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@_WV?$allocator@_W@std@@@std@@IBEII@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Reallocate
$LN4@Reserve:
; Line 1619
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -32						; size = 4
__Ptr$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Reallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1587
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 1588
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
; Line 1590
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 1591
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PA_W@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WPA_W00@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Umove<wchar_t *>
	jmp	SHORT $LN5@Reallocate
__catch$?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z$0:
; Line 1593
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
; Line 1594
	push	0
	push	0
	call	__CxxThrowException@8
; Line 1595
	mov	eax, $LN8@Reallocate
	ret	0
$LN5@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z$1
$LN8@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z$1:
; Line 1597
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::size
	mov	DWORD PTR __Size$[ebp], eax
; Line 1598
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Reallocate
; Line 1600
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@_WV?$allocator@_W@std@@@std@@IAEXPA_W0@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Destroy
; Line 1602
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 1
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN1@Reallocate:
; Line 1605
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 1606
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 1607
	mov	ecx, DWORD PTR __Size$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1608
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN4@Reallocate:
; Line 1609
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Reallocate
; Function compile flags: /Odtp
;	COMDAT ?_Inside@?$vector@_WV?$allocator@_W@std@@@std@@IBE_NPB_W@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@_WV?$allocator@_W@std@@@std@@IBE_NPB_W@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1582
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1583
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]
; Line 1584
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@_WV?$allocator@_W@std@@@std@@IBE_NPB_W@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Grow_to@?$vector@_WV?$allocator@_W@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@_WV?$allocator@_W@std@@@std@@IBEII@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Grow_to, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1571
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1572
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax
; Line 1575
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
; Line 1576
	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to
; Line 1577
	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to:
; Line 1578
	mov	eax, DWORD PTR __Capacity$[ebp]
; Line 1579
	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@_WV?$allocator@_W@std@@@std@@IBEII@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@_WV?$allocator@_W@std@@@std@@IAEXPA_W0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@_WV?$allocator@_W@std@@@std@@IAEXPA_W0@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1565
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1566
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
; Line 1567
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXPA_W0AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<wchar_t> > >
	add	esp, 12					; 0000000cH
; Line 1568
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@_WV?$allocator@_W@std@@@std@@IAEXPA_W0@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@_WV?$allocator@_W@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Capacity$ = 8						; size = 4
?_Buy@?$vector@_WV?$allocator@_W@std@@@std@@IAE_NI@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Buy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1546
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1547
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 1548
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 1549
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 1551
	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy
; Line 1552
	xor	al, al
	jmp	SHORT $LN6@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:
; Line 1553
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy
; Line 1554
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@_WV?$allocator@_W@std@@@std@@IBEXXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Xlen
; Line 1555
	jmp	SHORT $LN3@Buy
$LN2@Buy:
; Line 1557
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1558
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
; Line 1559
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Capacity$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN3@Buy:
; Line 1561
	mov	al, 1
$LN6@Buy:
; Line 1562
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@_WV?$allocator@_W@std@@@std@@IAE_NI@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Buy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??A?$vector@_WV?$allocator@_W@std@@@std@@QAEAA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@_WV?$allocator@_W@std@@@std@@QAEAA_WI@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::operator[], COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1197
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN1@operator
; Line 1201
	push	1201					; 000004b1H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
; Line 1202
	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN4@operator
	xor	ecx, ecx
	jne	SHORT $LN5@operator
$LN4@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	1202					; 000004b2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN5@operator
	int	3
$LN5@operator:
	push	0
	push	1202					; 000004b2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1IC@MBIJKJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa?$AAr?$AA_?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN1@operator:
; Line 1209
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
; Line 1210
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@_WV?$allocator@_W@std@@@std@@QAEAA_WI@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1152
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1153
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size
; Line 1154
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ PROC	; std::vector<wchar_t,std::allocator<wchar_t> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1148
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 1
; Line 1149
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ENDP	; std::vector<wchar_t,std::allocator<wchar_t> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Unused_capacity@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unused_capacity@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Unused_capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1014
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1015
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+8]
	sar	eax, 1
; Line 1016
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unused_capacity@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?capacity@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1009
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1010
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 1
; Line 1011
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ PROC	; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 944
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 945
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@IAEXXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Tidy
; Line 946
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::~_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::~_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >
__ehhandler$??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ ENDP	; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@_WV?$allocator@_W@std@@@std@@QAEX$$QA_W@Z
_TEXT	SEGMENT
__Idx$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@_WV?$allocator@_W@std@@@std@@QAEX$$QA_W@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::push_back, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 865
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 866
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@_W@std@@YAPA_WAA_W@Z	; std::addressof<wchar_t>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@_WV?$allocator@_W@std@@@std@@IBE_NPB_W@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@push_back
; Line 868
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$addressof@_W@std@@YAPA_WAA_W@Z	; std::addressof<wchar_t>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 1
	mov	DWORD PTR __Idx$1[ebp], eax
; Line 869
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+12]
	jne	SHORT $LN3@push_back
; Line 870
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Reserve
$LN3@push_back:
; Line 871
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Orphan_range
; Line 873
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Idx$1[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	push	eax
	call	??$forward@_W@std@@YA$$QA_WAA_W@Z	; std::forward<wchar_t>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	??$construct@_W_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_W$$QA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t,wchar_t>
; Line 874
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 876
	jmp	SHORT $LN5@push_back
$LN4@push_back:
; Line 878
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+12]
	jne	SHORT $LN1@push_back
; Line 879
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Reserve
$LN1@push_back:
; Line 880
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Orphan_range
; Line 882
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$forward@_W@std@@YA$$QA_WAA_W@Z	; std::forward<wchar_t>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	??$construct@_W_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_W$$QA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t,wchar_t>
; Line 883
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN5@push_back:
; Line 885
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@_WV?$allocator@_W@std@@@std@@QAEX$$QA_W@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 641
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 642
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 643
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 630
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 632
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 633
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 634
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
; Line 635
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
; Line 636
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 637
	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 623
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 624
	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 625
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
; Line 626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 627
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::~_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 607
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 608
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy
; Line 609
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::~_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 601
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<wchar_t> >::_Vector_val<std::_Simple_types<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 603
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy
; Line 604
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >::_Vector_alloc<0,std::_Vec_base_types<wchar_t,std::allocator<wchar_t> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<wchar_t> >::~_Vector_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<wchar_t> >::~_Vector_val<std::_Simple_types<wchar_t> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<wchar_t> >::_Vector_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 480
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 482
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 483
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 484
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 485
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<wchar_t> >::_Vector_val<std::_Simple_types<wchar_t> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
; Function compile flags: /Odtp
;	COMDAT ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
_TEXT	SEGMENT
$T2 = -40						; size = 12
$T3 = -28						; size = 4
tv77 = -24						; size = 4
tv78 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator-, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 393
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 394
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv78[ebp], eax
	mov	edx, DWORD PTR tv78[ebp]
	mov	DWORD PTR tv77[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv77[ebp]
	call	??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator-
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T3[ebp]
; Line 395
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator-
; Function compile flags: /Odtp
;	COMDAT ?_Unchecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unchecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEPA_WXZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_Unchecked, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 329
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 330
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 331
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unchecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEPA_WXZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 317
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pstring$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 318
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
; Function compile flags: /Odtp
;	COMDAT ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_Compat, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 246
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
; Line 248
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN1@Compat
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	je	SHORT $LN3@Compat
$LN1@Compat:
; Line 250
	push	250					; 000000faH
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
; Line 251
	mov	eax, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
	test	eax, eax
	je	SHORT $LN5@Compat
	xor	ecx, ecx
	jne	SHORT $LN6@Compat
$LN5@Compat:
	push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	251					; 000000fbH
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN6@Compat
	int	3
$LN6@Compat:
	push	0
	push	251					; 000000fbH
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN3@Compat:
; Line 253
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator!=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 219
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 220
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]
; Line 221
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator==, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 213
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 214
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_Compat
; Line 215
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]
; Line 216
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator-, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 202
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 203
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_Compat
; Line 204
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+8]
	sar	eax, 1
; Line 205
	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator-
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 51
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 53
	mov	eax, DWORD PTR __Pstring$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
; Line 54
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 55
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z ENDP ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z
_TEXT	SEGMENT
$T2 = -96						; size = 12
tv212 = -84						; size = 4
$T3 = -80						; size = 4
tv208 = -76						; size = 4
$T4 = -72						; size = 4
tv197 = -68						; size = 4
$T5 = -64						; size = 4
tv194 = -60						; size = 4
$T6 = -56						; size = 4
tv152 = -52						; size = 4
tv213 = -48						; size = 4
tv224 = -44						; size = 4
tv209 = -40						; size = 4
tv222 = -36						; size = 4
tv199 = -32						; size = 4
tv68 = -28						; size = 4
tv218 = -24						; size = 4
tv217 = -20						; size = 4
$T7 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
__Pred$ = 36						; size = 8
??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z PROC ; std::remove_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::binder2nd<std::equal_to<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 1766
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T7[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 2
; Line 1767
	mov	eax, DWORD PTR __Pred$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Pred$[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T6[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv217[ebp], eax
	mov	eax, DWORD PTR tv217[ebp]
	mov	DWORD PTR tv194[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T5[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv218[ebp], eax
	mov	eax, DWORD PTR tv218[ebp]
	mov	DWORD PTR tv197[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	call	??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z ; std::find_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::binder2nd<std::equal_to<int> > >
	add	esp, 36					; 00000024H
	mov	DWORD PTR tv68[ebp], eax
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv199[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR tv199[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
; Line 1768
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __First$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@remove_if
; Line 1769
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T7[ebp]
	or	ecx, 1
	mov	DWORD PTR $T7[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN3@remove_if
; Line 1770
	jmp	$LN1@remove_if
$LN2@remove_if:
; Line 1772
	mov	edx, DWORD PTR __Pred$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Pred$[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T4[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv222[ebp], eax
	mov	eax, DWORD PTR tv222[ebp]
	mov	DWORD PTR tv208[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<int> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv209[ebp], eax
	mov	ecx, DWORD PTR tv209[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv224[ebp], eax
	mov	eax, DWORD PTR tv224[ebp]
	mov	DWORD PTR tv212[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<int> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv213[ebp], eax
	mov	ecx, DWORD PTR tv213[ebp]
	push	ecx
	call	??$_Remove_if@PAHV?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAPAHPAH0V?$binder2nd@U?$equal_to@H@std@@@0@@Z ; std::_Remove_if<int *,std::binder2nd<std::equal_to<int> > >
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv152[ebp], eax
	mov	edx, DWORD PTR tv152[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Rechecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@AAV10@PAH@Z ; std::_Rechecked<std::_Vector_val<std::_Simple_types<int> > >
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T7[ebp]
	or	ecx, 1
	mov	DWORD PTR $T7[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@remove_if
$LN1@remove_if:
; Line 1773
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
$LN3@remove_if:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$2:
	mov	ecx, DWORD PTR $T6[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$3:
	mov	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$4:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$5:
	mov	eax, DWORD PTR $T7[ebp]
	and	eax, 1
	je	$LN11@remove_if
	and	DWORD PTR $T7[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
$LN11@remove_if:
	ret	0
__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$6:
	mov	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$7:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z ENDP ; std::remove_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::binder2nd<std::equal_to<int> > >
; Function compile flags: /Odtp
;	COMDAT ??R?$binder2nd@U?$equal_to@H@std@@@std@@QBE_NAAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Left$ = 8						; size = 4
??R?$binder2nd@U?$equal_to@H@std@@@std@@QBE_NAAH@Z PROC	; std::binder2nd<std::equal_to<int> >::operator(), COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xfunctional
; Line 507
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 508
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??R?$equal_to@H@std@@QBE_NABH0@Z	; std::equal_to<int>::operator()
; Line 509
	mov	esp, ebp
	pop	ebp
	ret	4
??R?$binder2nd@U?$equal_to@H@std@@@std@@QBE_NAAH@Z ENDP	; std::binder2nd<std::equal_to<int> >::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$binder2nd@U?$equal_to@H@std@@@std@@QAE@ABU?$equal_to@H@1@ABH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Func$ = 8						; size = 4
__Right$ = 12						; size = 4
??0?$binder2nd@U?$equal_to@H@std@@@std@@QAE@ABU?$equal_to@H@1@ABH@Z PROC ; std::binder2nd<std::equal_to<int> >::binder2nd<std::equal_to<int> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xfunctional
; Line 498
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx
; Line 499
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$binder2nd@U?$equal_to@H@std@@@std@@QAE@ABU?$equal_to@H@1@ABH@Z ENDP ; std::binder2nd<std::equal_to<int> >::binder2nd<std::equal_to<int> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$bind2nd@U?$equal_to@H@std@@H@std@@YA?AV?$binder2nd@U?$equal_to@H@std@@@0@ABU?$equal_to@H@0@ABH@Z
_TEXT	SEGMENT
__Val$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Func$ = 12						; size = 4
__Right$ = 16						; size = 4
??$bind2nd@U?$equal_to@H@std@@H@std@@YA?AV?$binder2nd@U?$equal_to@H@std@@@0@ABU?$equal_to@H@0@ABH@Z PROC ; std::bind2nd<std::equal_to<int>,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xfunctional
; Line 520
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 521
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Val$[ebp], ecx
; Line 522
	lea	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Func$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$binder2nd@U?$equal_to@H@std@@@std@@QAE@ABU?$equal_to@H@1@ABH@Z ; std::binder2nd<std::equal_to<int> >::binder2nd<std::equal_to<int> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 523
	mov	esp, ebp
	pop	ebp
	ret	0
??$bind2nd@U?$equal_to@H@std@@H@std@@YA?AV?$binder2nd@U?$equal_to@H@std@@@0@ABU?$equal_to@H@0@ABH@Z ENDP ; std::bind2nd<std::equal_to<int>,int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??R?$equal_to@H@std@@QBE_NABH0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$equal_to@H@std@@QBE_NABH0@Z PROC			; std::equal_to<int>::operator(), COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; Line 181
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 182
	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]
; Line 183
	mov	esp, ebp
	pop	ebp
	ret	8
??R?$equal_to@H@std@@QBE_NABH0@Z ENDP			; std::equal_to<int>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z
_TEXT	SEGMENT
tv231 = -100						; size = 4
$T2 = -96						; size = 4
tv227 = -92						; size = 4
$T3 = -88						; size = 4
tv223 = -84						; size = 4
$T4 = -80						; size = 4
tv219 = -76						; size = 4
$T5 = -72						; size = 4
tv216 = -68						; size = 4
$T6 = -64						; size = 4
tv213 = -60						; size = 4
$T7 = -56						; size = 4
tv232 = -52						; size = 4
tv244 = -48						; size = 4
tv228 = -44						; size = 4
tv242 = -40						; size = 4
tv224 = -36						; size = 4
tv240 = -32						; size = 4
tv220 = -28						; size = 4
tv238 = -24						; size = 4
tv236 = -20						; size = 4
tv235 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Pred$ = 32						; size = 16
??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z PROC ; std::stable_sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,BufferEquivalent>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 3271
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 88					; 00000058H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 3272
	push	3272					; 00000cc8H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T7[ebp], esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv235[ebp], eax
	mov	ecx, DWORD PTR tv235[ebp]
	mov	DWORD PTR tv213[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T6[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv236[ebp], eax
	mov	eax, DWORD PTR tv236[ebp]
	mov	DWORD PTR tv216[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z ; std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
	add	esp, 32					; 00000020H
; Line 3273
	push	3273					; 00000cc9H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	lea	ecx, DWORD PTR __Pred$[ebp]
	push	ecx
	call	??$_Debug_pointer@UBufferEquivalent@@@std@@YAXAAUBufferEquivalent@@PB_WI@Z ; std::_Debug_pointer<BufferEquivalent>
	add	esp, 12					; 0000000cH
; Line 3274
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator!=
	movzx	eax, al
	test	eax, eax
	je	$LN1@stable_sor
; Line 3276
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Pred$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Pred$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Pred$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T5[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv238[ebp], eax
	mov	eax, DWORD PTR tv238[ebp]
	mov	DWORD PTR tv219[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Val_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ; std::_Val_type<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv220[ebp], eax
	mov	ecx, DWORD PTR tv220[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T4[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv240[ebp], eax
	mov	eax, DWORD PTR tv240[ebp]
	mov	DWORD PTR tv223[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Dist_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ; std::_Dist_type<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv224[ebp], eax
	mov	ecx, DWORD PTR tv224[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv242[ebp], eax
	mov	eax, DWORD PTR tv242[ebp]
	mov	DWORD PTR tv227[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<int> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv228[ebp], eax
	mov	ecx, DWORD PTR tv228[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv244[ebp], eax
	mov	eax, DWORD PTR tv244[ebp]
	mov	DWORD PTR tv231[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<int> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv232[ebp], eax
	mov	ecx, DWORD PTR tv232[ebp]
	push	ecx
	call	??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH000UBufferEquivalent@@@Z ; std::_Stable_sort<int *,int,int,BufferEquivalent>
	add	esp, 32					; 00000020H
$LN1@stable_sor:
; Line 3277
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$2:
	mov	ecx, DWORD PTR $T7[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$3:
	mov	ecx, DWORD PTR $T6[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$4:
	mov	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$5:
	mov	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$6:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$7:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-92]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z ENDP ; std::stable_sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,BufferEquivalent>
; Function compile flags: /Odtp
;	COMDAT ??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
; Function compile flags: /Odtp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator++, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 333
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 334
	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator++
; Line 335
	mov	eax, DWORD PTR _this$[ebp]
; Line 336
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 323
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 324
	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEABHXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*
; Line 325
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEPAHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEPAHXZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Unchecked, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 318
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 319
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 320
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEPAHXZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Rechecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV12@PAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Rechecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV12@PAH@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Rechecked, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 312
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 313
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 314
	mov	eax, DWORD PTR _this$[ebp]
; Line 315
	mov	esp, ebp
	pop	ebp
	ret	4
?_Rechecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV12@PAH@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Rechecked
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 306
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 307
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
; Function compile flags: /Odtp
;	COMDAT ??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAEAAU01@ABU01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
; Function compile flags: /Odtp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Compat, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
; Line 238
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN1@Compat
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	je	SHORT $LN3@Compat
$LN1@Compat:
; Line 240
	push	240					; 000000f0H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
; Line 241
	mov	eax, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
	test	eax, eax
	je	SHORT $LN5@Compat
	xor	ecx, ecx
	jne	SHORT $LN6@Compat
$LN5@Compat:
	push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	241					; 000000f1H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN6@Compat
	int	3
$LN6@Compat:
	push	0
	push	241					; 000000f1H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1LO@MGELDLOO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN3@Compat:
; Line 243
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator<, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 214
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 215
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Compat
; Line 216
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]
; Line 217
	mov	esp, ebp
	pop	ebp
	ret	4
??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator<
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator!=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 209
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 210
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]
; Line 211
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator==, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 204
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Compat
; Line 205
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]
; Line 206
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator++, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 95
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 99
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN1@operator
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	ja	SHORT $LN2@operator
$LN1@operator:
; Line 101
	push	101					; 00000065H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
; Line 102
	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN5@operator
	xor	ecx, ecx
	jne	SHORT $LN6@operator
$LN5@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	102					; 00000066H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN6@operator
	int	3
$LN6@operator:
	push	0
	push	102					; 00000066H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1MG@OPNGNDCB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:
; Line 112
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 113
	mov	eax, DWORD PTR _this$[ebp]
; Line 114
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEABHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEABHXZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 65
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN1@operator
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR [eax+4]
	jb	SHORT $LN1@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	ja	SHORT $LN2@operator
$LN1@operator:
; Line 72
	push	72					; 00000048H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
; Line 73
	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN5@operator
	xor	ecx, ecx
	jne	SHORT $LN6@operator
$LN5@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	73					; 00000049H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN6@operator
	int	3
$LN6@operator:
	push	0
	push	73					; 00000049H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1ME@LLCFNFIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:
; Line 86
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 87
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEABHXZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 47
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 48
	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
; Line 49
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
; Function compile flags: /Odtp
;	COMDAT ??4?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAEAAU01@ABU01@@Z PROC ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAEAAU01@ABU01@@Z ENDP ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z ENDP ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base12>
; Function compile flags: /Odtp
;	COMDAT ??__EWindowsDlgMap@@YAXXZ
text$di	SEGMENT
??__EWindowsDlgMap@@YAXXZ PROC				; `dynamic initializer for 'WindowsDlgMap'', COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 198
	push	ebp
	mov	ebp, esp
	push	524296					; 00080008H
	push	0
	push	19					; 00000013H
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A ; WindowsDlgMap
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	0
	push	0
	push	35					; 00000023H
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+36
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	0
	push	0
	push	19					; 00000013H
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+72
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	0
	push	7001					; 00001b59H
	push	3
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+108
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	20					; 00000014H
	push	-1
	push	1
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+144
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	0
	push	-1
	push	240					; 000000f0H
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+180
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	12					; 0000000cH
	push	-1
	push	1
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+216
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	0
	push	0
	push	20					; 00000014H
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+252
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	12					; 0000000cH
	push	-1
	push	1
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+288
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	0
	push	1
	push	4
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+324
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	-12					; fffffff4H
	push	-1
	push	1
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+360
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	0
	push	7002					; 00001b5aH
	push	4
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+396
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	-12					; fffffff4H
	push	-1
	push	1
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+432
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	0
	push	7003					; 00001b5bH
	push	4
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+468
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	-12					; fffffff4H
	push	-1
	push	1
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+504
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	0
	push	7004					; 00001b5cH
	push	4
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+540
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	0
	push	-1
	push	3
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+576
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	0
	push	2
	push	4
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+612
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	0
	push	-1
	push	240					; 000000f0H
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+648
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	0
	push	-1
	push	240					; 000000f0H
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+684
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	0
	push	-1
	push	240					; 000000f0H
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+720
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	push	0
	push	-1
	push	0
	mov	ecx, OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A+756
	call	??0WINRECT@@QAE@GHJ@Z			; WINRECT::WINRECT
	pop	ebp
	ret	0
??__EWindowsDlgMap@@YAXXZ ENDP				; `dynamic initializer for 'WindowsDlgMap''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ?compare@BufferEquivalent@@QBE_NHH@Z
_TEXT	SEGMENT
_t2$1 = -48						; size = 4
_t1$2 = -44						; size = 4
_s1$3 = -40						; size = 4
_s2$4 = -36						; size = 4
_s1$5 = -32						; size = 4
_s2$6 = -28						; size = 4
_bid2$ = -24						; size = 4
_bid1$ = -20						; size = 4
tv141 = -16						; size = 4
_b2$ = -12						; size = 4
_b1$ = -8						; size = 4
_this$ = -4						; size = 4
_i1$ = 8						; size = 4
_i2$ = 12						; size = 4
?compare@BufferEquivalent@@QBE_NHH@Z PROC		; BufferEquivalent::compare, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 146
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx
; Line 147
	mov	eax, DWORD PTR _i1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?getBufferByIndex@DocTabView@@QAEPAVBuffer@@H@Z ; DocTabView::getBufferByIndex
	mov	DWORD PTR _bid1$[ebp], eax
; Line 148
	mov	edx, DWORD PTR _i2$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?getBufferByIndex@DocTabView@@QAEPAVBuffer@@H@Z ; DocTabView::getBufferByIndex
	mov	DWORD PTR _bid2$[ebp], eax
; Line 149
	mov	ecx, DWORD PTR _bid1$[ebp]
	push	ecx
	call	?getInstance@FileManager@@SAPAV1@XZ	; FileManager::getInstance
	mov	ecx, eax
	call	?getBufferByID@FileManager@@QAEPAVBuffer@@PAV2@@Z ; FileManager::getBufferByID
	mov	DWORD PTR _b1$[ebp], eax
; Line 150
	mov	edx, DWORD PTR _bid2$[ebp]
	push	edx
	call	?getInstance@FileManager@@SAPAV1@XZ	; FileManager::getInstance
	mov	ecx, eax
	call	?getBufferByID@FileManager@@QAEPAVBuffer@@PAV2@@Z ; FileManager::getBufferByID
	mov	DWORD PTR _b2$[ebp], eax
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN5@compare
; Line 153
	mov	ecx, DWORD PTR _b1$[ebp]
	call	?getFileName@Buffer@@QBEPB_WXZ		; Buffer::getFileName
	mov	DWORD PTR _s1$5[ebp], eax
; Line 154
	mov	ecx, DWORD PTR _b2$[ebp]
	call	?getFileName@Buffer@@QBEPB_WXZ		; Buffer::getFileName
	mov	DWORD PTR _s2$6[ebp], eax
; Line 155
	mov	ecx, DWORD PTR _s2$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _s1$5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??RNumericStringEquivalence@@QBE_NPB_W0@Z ; NumericStringEquivalence::operator()
	jmp	SHORT $LN6@compare
	jmp	SHORT $LN4@compare
$LN5@compare:
; Line 157
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 1
	jne	SHORT $LN3@compare
; Line 159
	mov	ecx, DWORD PTR _b1$[ebp]
	call	?getFullPathName@Buffer@@QBEPB_WXZ	; Buffer::getFullPathName
	mov	DWORD PTR _s1$3[ebp], eax
; Line 160
	mov	ecx, DWORD PTR _b2$[ebp]
	call	?getFullPathName@Buffer@@QBEPB_WXZ	; Buffer::getFullPathName
	mov	DWORD PTR _s2$4[ebp], eax
; Line 161
	mov	ecx, DWORD PTR _s2$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _s1$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??RNumericStringEquivalence@@QBE_NPB_W0@Z ; NumericStringEquivalence::operator()
	jmp	SHORT $LN6@compare
	jmp	SHORT $LN4@compare
$LN3@compare:
; Line 163
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 2
	jne	SHORT $LN4@compare
; Line 165
	mov	ecx, DWORD PTR _b1$[ebp]
	call	?getLangType@Buffer@@QBE?AW4LangType@@XZ ; Buffer::getLangType
	mov	DWORD PTR _t1$2[ebp], eax
; Line 166
	mov	ecx, DWORD PTR _b2$[ebp]
	call	?getLangType@Buffer@@QBE?AW4LangType@@XZ ; Buffer::getLangType
	mov	DWORD PTR _t2$1[ebp], eax
; Line 167
	mov	ecx, DWORD PTR _t1$2[ebp]
	cmp	ecx, DWORD PTR _t2$1[ebp]
	jge	SHORT $LN8@compare
	mov	DWORD PTR tv141[ebp], 1
	jmp	SHORT $LN9@compare
$LN8@compare:
	mov	DWORD PTR tv141[ebp], 0
$LN9@compare:
	mov	al, BYTE PTR tv141[ebp]
	jmp	SHORT $LN6@compare
$LN4@compare:
; Line 169
	xor	al, al
$LN6@compare:
; Line 170
	mov	esp, ebp
	pop	ebp
	ret	8
?compare@BufferEquivalent@@QBE_NHH@Z ENDP		; BufferEquivalent::compare
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??RBufferEquivalent@@QBE_NHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i1$ = 8						; size = 4
_i2$ = 12						; size = 4
??RBufferEquivalent@@QBE_NHH@Z PROC			; BufferEquivalent::operator(), COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 139
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 140
	mov	eax, DWORD PTR _i1$[ebp]
	cmp	eax, DWORD PTR _i2$[ebp]
	jne	SHORT $LN2@operator
	xor	al, al
	jmp	SHORT $LN3@operator
$LN2@operator:
; Line 141
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	test	edx, edx
	je	SHORT $LN1@operator
	lea	eax, DWORD PTR _i2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _i1$[ebp]
	push	ecx
	call	??$swap@H@std@@YAXAAH0@Z		; std::swap<int>
	add	esp, 8
$LN1@operator:
; Line 142
	mov	edx, DWORD PTR _i2$[ebp]
	push	edx
	mov	eax, DWORD PTR _i1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?compare@BufferEquivalent@@QBE_NHH@Z	; BufferEquivalent::compare
$LN3@operator:
; Line 143
	mov	esp, ebp
	pop	ebp
	ret	8
??RBufferEquivalent@@QBE_NHH@Z ENDP			; BufferEquivalent::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0BufferEquivalent@@QAE@PAVDocTabView@@H_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTab$ = 8						; size = 4
_iColumn$ = 12						; size = 4
_reverse$ = 16						; size = 1
??0BufferEquivalent@@QAE@PAVDocTabView@@H_N@Z PROC	; BufferEquivalent::BufferEquivalent, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 136
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTab$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iColumn$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _reverse$[ebp]
	mov	BYTE PTR [ecx+12], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0BufferEquivalent@@QAE@PAVDocTabView@@H_N@Z ENDP	; BufferEquivalent::BufferEquivalent
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?numstrcmp@NumericStringEquivalence@@SAHPB_W0@Z
_TEXT	SEGMENT
tv155 = -28						; size = 4
tv154 = -24						; size = 4
_c2$ = -20						; size = 4
_c1$ = -16						; size = 4
_p2$ = -12						; size = 4
_p1$ = -8						; size = 4
_lcmp$ = -4						; size = 4
_str1$ = 8						; size = 4
_str2$ = 12						; size = 4
?numstrcmp@NumericStringEquivalence@@SAHPB_W0@Z PROC	; NumericStringEquivalence::numstrcmp, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 89
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
; Line 91
	mov	DWORD PTR _lcmp$[ebp], 0
$LN14@numstrcmp:
; Line 94
	mov	eax, DWORD PTR _str1$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN11@numstrcmp
	mov	edx, DWORD PTR _str2$[ebp]
	movzx	eax, WORD PTR [edx]
	test	eax, eax
	jne	SHORT $LN12@numstrcmp
$LN11@numstrcmp:
; Line 95
	mov	ecx, DWORD PTR _str1$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _str2$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	edx, ecx
	je	SHORT $LN10@numstrcmp
; Line 96
	mov	edx, DWORD PTR _str1$[ebp]
	movzx	eax, WORD PTR [edx]
	mov	ecx, DWORD PTR _str2$[ebp]
	movzx	edx, WORD PTR [ecx]
	sub	eax, edx
	mov	DWORD PTR _lcmp$[ebp], eax
$LN10@numstrcmp:
; Line 97
	jmp	$LN13@numstrcmp
$LN12@numstrcmp:
; Line 99
	mov	eax, DWORD PTR _str1$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	call	_iswdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN9@numstrcmp
	mov	edx, DWORD PTR _str2$[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	call	_iswdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN9@numstrcmp
; Line 101
	push	10					; 0000000aH
	lea	ecx, DWORD PTR _p1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str1$[ebp]
	push	edx
	call	_wcstol
	add	esp, 12					; 0000000cH
	mov	esi, eax
	push	10					; 0000000aH
	lea	eax, DWORD PTR _p2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str2$[ebp]
	push	ecx
	call	_wcstol
	add	esp, 12					; 0000000cH
	sub	esi, eax
	mov	DWORD PTR _lcmp$[ebp], esi
; Line 102
	jne	SHORT $LN8@numstrcmp
; Line 103
	mov	edx, DWORD PTR _p2$[ebp]
	sub	edx, DWORD PTR _str2$[ebp]
	sar	edx, 1
	mov	eax, DWORD PTR _p1$[ebp]
	sub	eax, DWORD PTR _str1$[ebp]
	sar	eax, 1
	sub	edx, eax
	mov	DWORD PTR _lcmp$[ebp], edx
$LN8@numstrcmp:
; Line 104
	cmp	DWORD PTR _lcmp$[ebp], 0
	je	SHORT $LN7@numstrcmp
; Line 105
	jmp	$LN13@numstrcmp
$LN7@numstrcmp:
; Line 106
	mov	ecx, DWORD PTR _p1$[ebp]
	mov	DWORD PTR _str1$[ebp], ecx
	mov	edx, DWORD PTR _p2$[ebp]
	mov	DWORD PTR _str2$[ebp], edx
; Line 108
	jmp	$LN6@numstrcmp
$LN9@numstrcmp:
; Line 110
	mov	eax, DWORD PTR _str1$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	call	_iswascii
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@numstrcmp
	mov	edx, DWORD PTR _str1$[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	call	_iswupper
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@numstrcmp
; Line 111
	mov	ecx, DWORD PTR _str1$[ebp]
	movzx	edx, WORD PTR [ecx]
	push	edx
	call	_towlower
	add	esp, 4
	movzx	eax, ax
	mov	DWORD PTR _c1$[ebp], eax
; Line 112
	jmp	SHORT $LN4@numstrcmp
$LN5@numstrcmp:
; Line 113
	mov	ecx, DWORD PTR _str1$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR _c1$[ebp], edx
$LN4@numstrcmp:
; Line 114
	mov	eax, DWORD PTR _str2$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	call	_iswascii
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@numstrcmp
	mov	edx, DWORD PTR _str2$[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	call	_iswupper
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@numstrcmp
; Line 115
	mov	ecx, DWORD PTR _str2$[ebp]
	movzx	edx, WORD PTR [ecx]
	push	edx
	call	_towlower
	add	esp, 4
	movzx	eax, ax
	mov	DWORD PTR _c2$[ebp], eax
; Line 116
	jmp	SHORT $LN2@numstrcmp
$LN3@numstrcmp:
; Line 117
	mov	ecx, DWORD PTR _str2$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR _c2$[ebp], edx
$LN2@numstrcmp:
; Line 118
	mov	eax, DWORD PTR _c1$[ebp]
	sub	eax, DWORD PTR _c2$[ebp]
	mov	DWORD PTR _lcmp$[ebp], eax
; Line 119
	je	SHORT $LN1@numstrcmp
; Line 120
	jmp	SHORT $LN13@numstrcmp
$LN1@numstrcmp:
; Line 121
	mov	ecx, DWORD PTR _str1$[ebp]
	add	ecx, 2
	mov	DWORD PTR _str1$[ebp], ecx
	mov	edx, DWORD PTR _str2$[ebp]
	add	edx, 2
	mov	DWORD PTR _str2$[ebp], edx
$LN6@numstrcmp:
; Line 123
	jmp	$LN14@numstrcmp
$LN13@numstrcmp:
; Line 124
	cmp	DWORD PTR _lcmp$[ebp], 0
	jge	SHORT $LN19@numstrcmp
	mov	DWORD PTR tv155[ebp], -1
	jmp	SHORT $LN20@numstrcmp
$LN19@numstrcmp:
	cmp	DWORD PTR _lcmp$[ebp], 0
	jle	SHORT $LN17@numstrcmp
	mov	DWORD PTR tv154[ebp], 1
	jmp	SHORT $LN18@numstrcmp
$LN17@numstrcmp:
	mov	DWORD PTR tv154[ebp], 0
$LN18@numstrcmp:
	mov	eax, DWORD PTR tv154[ebp]
	mov	DWORD PTR tv155[ebp], eax
$LN20@numstrcmp:
	mov	eax, DWORD PTR tv155[ebp]
; Line 125
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?numstrcmp@NumericStringEquivalence@@SAHPB_W0@Z ENDP	; NumericStringEquivalence::numstrcmp
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??RNumericStringEquivalence@@QBE_NPB_W0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??RNumericStringEquivalence@@QBE_NPB_W0@Z PROC		; NumericStringEquivalence::operator(), COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 78
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	push	ecx
	call	?numstrcmp@NumericStringEquivalence@@SAHPB_W0@Z ; NumericStringEquivalence::numstrcmp
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN3@operator
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv68[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??RNumericStringEquivalence@@QBE_NPB_W0@Z ENDP		; NumericStringEquivalence::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__EWDN_NOTIFY@@YAXXZ
text$di	SEGMENT
??__EWDN_NOTIFY@@YAXXZ PROC				; `dynamic initializer for 'WDN_NOTIFY'', COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 47
	push	ebp
	mov	ebp, esp
	push	OFFSET $SG132116
	call	DWORD PTR __imp__RegisterWindowMessageW@4
	mov	DWORD PTR ?WDN_NOTIFY@@3IB, eax		; WDN_NOTIFY
	pop	ebp
	ret	0
??__EWDN_NOTIFY@@YAXXZ ENDP				; `dynamic initializer for 'WDN_NOTIFY''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getInstance@EncodingMapper@@SAPAV1@XZ
_TEXT	SEGMENT
?getInstance@EncodingMapper@@SAPAV1@XZ PROC		; EncodingMapper::getInstance, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\encodingmapper.h
; Line 39
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?_pSelf@EncodingMapper@@0PAV1@A ; EncodingMapper::_pSelf
	pop	ebp
	ret	0
?getInstance@EncodingMapper@@SAPAV1@XZ ENDP		; EncodingMapper::getInstance
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getLangType@Buffer@@QBE?AW4LangType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLangType@Buffer@@QBE?AW4LangType@@XZ PROC		; Buffer::getLangType, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\scitillacomponent\buffer.h
; Line 204
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 205
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
; Line 206
	mov	esp, ebp
	pop	ebp
	ret	0
?getLangType@Buffer@@QBE?AW4LangType@@XZ ENDP		; Buffer::getLangType
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?isReadOnly@Buffer@@QBE_NXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?isReadOnly@Buffer@@QBE_NXZ PROC			; Buffer::isReadOnly, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\scitillacomponent\buffer.h
; Line 169
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+68]
	test	ecx, ecx
	jne	SHORT $LN3@isReadOnly
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+136]
	test	eax, eax
	jne	SHORT $LN3@isReadOnly
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@isReadOnly
$LN3@isReadOnly:
	mov	DWORD PTR tv70[ebp], 1
$LN4@isReadOnly:
	mov	al, BYTE PTR tv70[ebp]
; Line 171
	mov	esp, ebp
	pop	ebp
	ret	0
?isReadOnly@Buffer@@QBE_NXZ ENDP			; Buffer::isReadOnly
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?isDirty@Buffer@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isDirty@Buffer@@QBE_NXZ PROC				; Buffer::isDirty, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\scitillacomponent\buffer.h
; Line 165
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 166
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+52]
; Line 167
	mov	esp, ebp
	pop	ebp
	ret	0
?isDirty@Buffer@@QBE_NXZ ENDP				; Buffer::isDirty
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getFileName@Buffer@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFileName@Buffer@@QBEPB_WXZ PROC			; Buffer::getFileName, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\scitillacomponent\buffer.h
; Line 148
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+168]
	mov	esp, ebp
	pop	ebp
	ret	0
?getFileName@Buffer@@QBEPB_WXZ ENDP			; Buffer::getFileName
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getFullPathName@Buffer@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFullPathName@Buffer@@QBEPB_WXZ PROC			; Buffer::getFullPathName, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\scitillacomponent\buffer.h
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 145
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
; Line 146
	mov	esp, ebp
	pop	ebp
	ret	0
?getFullPathName@Buffer@@QBEPB_WXZ ENDP			; Buffer::getFullPathName
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getInstance@FileManager@@SAPAV1@XZ
_TEXT	SEGMENT
?getInstance@FileManager@@SAPAV1@XZ PROC		; FileManager::getInstance, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\scitillacomponent\buffer.h
; Line 101
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?_pSelf@FileManager@@0PAV1@A ; FileManager::_pSelf
	pop	ebp
	ret	0
?getInstance@FileManager@@SAPAV1@XZ ENDP		; FileManager::getInstance
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getBufferByID@FileManager@@QAEPAVBuffer@@PAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?getBufferByID@FileManager@@QAEPAVBuffer@@PAV2@@Z PROC	; FileManager::getBufferByID, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\scitillacomponent\buffer.h
; Line 75
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _id$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?getBufferByID@FileManager@@QAEPAVBuffer@@PAV2@@Z ENDP	; FileManager::getBufferByID
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getLangFromID@NppParameters@@QBEPAULang@@W4LangType@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
_langID$ = 8						; size = 4
?getLangFromID@NppParameters@@QBEPAULang@@W4LangType@@@Z PROC ; NppParameters::getLangFromID, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\parameters.h
; Line 1179
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1180
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN5@getLangFro
$LN4@getLangFro:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN5@getLangFro:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR [ecx+2348]
	jge	SHORT $LN3@getLangFro
; Line 1182
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+2028]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _langID$[ebp]
	je	SHORT $LN1@getLangFro
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+2028], 0
	jne	SHORT $LN2@getLangFro
$LN1@getLangFro:
; Line 1183
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+2028]
	jmp	SHORT $LN6@getLangFro
$LN2@getLangFro:
; Line 1184
	jmp	SHORT $LN4@getLangFro
$LN3@getLangFro:
; Line 1185
	xor	eax, eax
$LN6@getLangFro:
; Line 1186
	mov	esp, ebp
	pop	ebp
	ret	4
?getLangFromID@NppParameters@@QBEPAULang@@W4LangType@@@Z ENDP ; NppParameters::getLangFromID
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getInstance@NppParameters@@SAPAV1@XZ
_TEXT	SEGMENT
?getInstance@NppParameters@@SAPAV1@XZ PROC		; NppParameters::getInstance, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\parameters.h
; Line 1155
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?_pSelf@NppParameters@@0PAV1@A ; NppParameters::_pSelf
	pop	ebp
	ret	0
?getInstance@NppParameters@@SAPAV1@XZ ENDP		; NppParameters::getInstance
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getLangName@Lang@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLangName@Lang@@QBEPB_WXZ PROC			; Lang::getLangName, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\parameters.h
; Line 889
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
	mov	esp, ebp
	pop	ebp
	ret	0
?getLangName@Lang@@QBEPB_WXZ ENDP			; Lang::getLangName
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?Encoding@TiXmlDeclarationA@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Encoding@TiXmlDeclarationA@@QBEPBDXZ PROC		; TiXmlDeclarationA::Encoding, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\tinyxml\tinyxmla\tinyxmla.h
; Line 922
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	esp, ebp
	pop	ebp
	ret	0
?Encoding@TiXmlDeclarationA@@QBEPBDXZ ENDP		; TiXmlDeclarationA::Encoding
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?ToDeclaration@TiXmlNodeA@@QBEPAVTiXmlDeclarationA@@XZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?ToDeclaration@TiXmlNodeA@@QBEPAVTiXmlDeclarationA@@XZ PROC ; TiXmlNodeA::ToDeclaration, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\tinyxml\tinyxmla\tinyxmla.h
; Line 509
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN3@ToDeclarat
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 5
	jne	SHORT $LN3@ToDeclarat
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv67[ebp], ecx
	jmp	SHORT $LN4@ToDeclarat
$LN3@ToDeclarat:
	mov	DWORD PTR tv67[ebp], 0
$LN4@ToDeclarat:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDeclaration@TiXmlNodeA@@QBEPAVTiXmlDeclarationA@@XZ ENDP ; TiXmlNodeA::ToDeclaration
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ PROC	; TiXmlNodeA::ToElement, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\tinyxml\tinyxmla\tinyxmla.h
; Line 505
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN3@ToElement
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 1
	jne	SHORT $LN3@ToElement
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv67[ebp], ecx
	jmp	SHORT $LN4@ToElement
$LN3@ToElement:
	mov	DWORD PTR tv67[ebp], 0
$LN4@ToElement:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ENDP	; TiXmlNodeA::ToElement
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?FirstChild@TiXmlNodeA@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FirstChild@TiXmlNodeA@@QBEPAV1@XZ PROC			; TiXmlNodeA::FirstChild, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\tinyxml\tinyxmla\tinyxmla.h
; Line 376
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?FirstChild@TiXmlNodeA@@QBEPAV1@XZ ENDP			; TiXmlNodeA::FirstChild
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?nbItem@TabBar@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?nbItem@TabBar@@QBEHXZ PROC				; TabBar::nbItem, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\tabbar\tabbar.h
; Line 100
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 101
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
; Line 102
	mov	esp, ebp
	pop	ebp
	ret	0
?nbItem@TabBar@@QBEHXZ ENDP				; TabBar::nbItem
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getCurrentTabIndex@TabBar@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCurrentTabIndex@TabBar@@QBEHXZ PROC			; TabBar::getCurrentTabIndex, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\tabbar\tabbar.h
; Line 80
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 81
	push	0
	push	0
	push	4875					; 0000130bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
; Line 82
	mov	esp, ebp
	pop	ebp
	ret	0
?getCurrentTabIndex@TabBar@@QBEHXZ ENDP			; TabBar::getCurrentTabIndex
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_mii$2 = -208						; size = 48
tv201 = -160						; size = 4
$T3 = -156						; size = 4
tv198 = -152						; size = 4
tv197 = -148						; size = 4
_vBuffer$4 = -144					; size = 16
$T5 = -128						; size = 4
_bufID$6 = -124						; size = 4
_buf$7 = -120						; size = 4
tv91 = -116						; size = 4
_this$ = -112						; size = 4
_state$8 = -108						; size = 4
_curDoc$9 = -104					; size = 4
tv128 = -100						; size = 4
_nMaxDoc$10 = -96					; size = 4
tv79 = -92						; size = 4
$T11 = -86						; size = 2
_nDoc$12 = -84						; size = 4
_pos$13 = -80						; size = 4
_id$14 = -76						; size = 4
$T15 = -72						; size = 28
_strBuffer$16 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_hMenu$ = 8						; size = 4
_pTab$ = 12						; size = 4
?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z PROC ; WindowsMenu::initPopupMenu
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 798
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 196				; 000000c4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 799
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _hMenu$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	$LN11@initPopupM
; Line 801
	mov	ecx, DWORD PTR _pTab$[ebp]
	call	?getCurrentTabIndex@TabBar@@QBEHXZ	; TabBar::getCurrentTabIndex
	mov	DWORD PTR _curDoc$9[ebp], eax
; Line 802
	mov	DWORD PTR _nMaxDoc$10[ebp], 10		; 0000000aH
; Line 803
	mov	ecx, DWORD PTR _pTab$[ebp]
	call	?nbItem@TabBar@@QBEHXZ			; TabBar::nbItem
	mov	DWORD PTR _nDoc$12[ebp], eax
; Line 804
	mov	edx, DWORD PTR _nDoc$12[ebp]
	cmp	edx, DWORD PTR _nMaxDoc$10[ebp]
	jge	SHORT $LN13@initPopupM
	mov	eax, DWORD PTR _nDoc$12[ebp]
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN14@initPopupM
$LN13@initPopupM:
	mov	ecx, DWORD PTR _nMaxDoc$10[ebp]
	mov	DWORD PTR tv79[ebp], ecx
$LN14@initPopupM:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _nDoc$12[ebp], edx
; Line 806
	mov	DWORD PTR _id$14[ebp], 11020		; 00002b0cH
	mov	DWORD PTR _pos$13[ebp], 0
	jmp	SHORT $LN9@initPopupM
$LN8@initPopupM:
	mov	eax, DWORD PTR _id$14[ebp]
	add	eax, 1
	mov	DWORD PTR _id$14[ebp], eax
	mov	ecx, DWORD PTR _pos$13[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$13[ebp], ecx
$LN9@initPopupM:
	mov	edx, DWORD PTR _nDoc$12[ebp]
	add	edx, 11020				; 00002b0cH
	cmp	DWORD PTR _id$14[ebp], edx
	jge	$LN7@initPopupM
; Line 808
	mov	eax, DWORD PTR _pos$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTab$[ebp]
	call	?getBufferByIndex@DocTabView@@QAEPAVBuffer@@H@Z ; DocTabView::getBufferByIndex
	mov	DWORD PTR _bufID$6[ebp], eax
; Line 809
	mov	ecx, DWORD PTR _bufID$6[ebp]
	push	ecx
	call	?getInstance@FileManager@@SAPAV1@XZ	; FileManager::getInstance
	mov	ecx, eax
	call	?getBufferByID@FileManager@@QAEPAVBuffer@@PAV2@@Z ; FileManager::getBufferByID
	mov	DWORD PTR _buf$7[ebp], eax
; Line 812
	push	48					; 00000030H
	push	0
	lea	edx, DWORD PTR _mii$2[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 813
	mov	DWORD PTR _mii$2[ebp], 48		; 00000030H
; Line 814
	mov	DWORD PTR _mii$2[ebp+4], 67		; 00000043H
; Line 815
	mov	ecx, DWORD PTR _buf$7[ebp]
	call	?getFileName@Buffer@@QBEPB_WXZ		; Buffer::getFileName
	push	eax
	lea	ecx, DWORD PTR $T15[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T15[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$13[ebp]
	push	ecx
	push	60					; 0000003cH
	lea	edx, DWORD PTR _strBuffer$16[ebp]
	push	edx
	call	?BuildMenuFileName@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HIABV12@@Z ; BuildMenuFileName
	add	esp, 16					; 00000010H
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T15[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Line 818
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T3[ebp], esp
	push	eax
	lea	ecx, DWORD PTR _strBuffer$16[ebp]
	call	?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::end
	mov	DWORD PTR tv91[ebp], eax
	mov	ecx, DWORD PTR tv91[ebp]
	mov	DWORD PTR tv197[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T5[ebp], esp
	push	edx
	lea	ecx, DWORD PTR _strBuffer$16[ebp]
	call	?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::begin
	mov	DWORD PTR tv128[ebp], eax
	mov	eax, DWORD PTR tv128[ebp]
	mov	DWORD PTR tv201[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _vBuffer$4[ebp]
	call	??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::vector<wchar_t,std::allocator<wchar_t> ><std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >,void>
	mov	DWORD PTR tv198[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 819
	xor	ecx, ecx
	mov	WORD PTR $T11[ebp], cx
	lea	edx, DWORD PTR $T11[ebp]
	push	edx
	lea	ecx, DWORD PTR _vBuffer$4[ebp]
	call	?push_back@?$vector@_WV?$allocator@_W@std@@@std@@QAEX$$QA_W@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::push_back
; Line 820
	push	0
	lea	ecx, DWORD PTR _vBuffer$4[ebp]
	call	??A?$vector@_WV?$allocator@_W@std@@@std@@QAEAA_WI@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::operator[]
	mov	DWORD PTR _mii$2[ebp+36], eax
; Line 821
	mov	eax, DWORD PTR _mii$2[ebp+12]
	and	eax, -12				; fffffff4H
	mov	DWORD PTR _mii$2[ebp+12], eax
; Line 822
	mov	ecx, DWORD PTR _pos$13[ebp]
	cmp	ecx, DWORD PTR _curDoc$9[ebp]
	jne	SHORT $LN6@initPopupM
; Line 823
	mov	edx, DWORD PTR _mii$2[ebp+12]
	or	edx, 8
	mov	DWORD PTR _mii$2[ebp+12], edx
$LN6@initPopupM:
; Line 824
	mov	eax, DWORD PTR _id$14[ebp]
	mov	DWORD PTR _mii$2[ebp+16], eax
; Line 826
	push	0
	mov	ecx, DWORD PTR _id$14[ebp]
	push	ecx
	mov	edx, DWORD PTR _hMenu$[ebp]
	push	edx
	call	DWORD PTR __imp__GetMenuState@12
	mov	DWORD PTR _state$8[ebp], eax
; Line 827
	cmp	DWORD PTR _state$8[ebp], -1
	jne	SHORT $LN5@initPopupM
; Line 828
	lea	eax, DWORD PTR _mii$2[ebp]
	push	eax
	push	0
	push	11001					; 00002af9H
	mov	ecx, DWORD PTR _hMenu$[ebp]
	push	ecx
	call	DWORD PTR __imp__InsertMenuItemW@16
; Line 829
	jmp	SHORT $LN4@initPopupM
$LN5@initPopupM:
; Line 830
	lea	edx, DWORD PTR _mii$2[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _id$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _hMenu$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetMenuItemInfoW@16
$LN4@initPopupM:
; Line 831
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _vBuffer$4[ebp]
	call	??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strBuffer$16[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	jmp	$LN8@initPopupM
$LN7@initPopupM:
; Line 832
	jmp	SHORT $LN3@initPopupM
$LN2@initPopupM:
	mov	edx, DWORD PTR _id$14[ebp]
	add	edx, 1
	mov	DWORD PTR _id$14[ebp], edx
$LN3@initPopupM:
	cmp	DWORD PTR _id$14[ebp], 11029		; 00002b15H
	jg	SHORT $LN11@initPopupM
; Line 834
	push	0
	mov	eax, DWORD PTR _id$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _hMenu$[ebp]
	push	ecx
	call	DWORD PTR __imp__DeleteMenu@12
; Line 835
	jmp	SHORT $LN2@initPopupM
$LN11@initPopupM:
; Line 837
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z$0:
	lea	ecx, DWORD PTR $T15[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z$1:
	lea	ecx, DWORD PTR _strBuffer$16[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z$3:
	mov	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z$4:
	lea	ecx, DWORD PTR _vBuffer$4[ebp]
	jmp	??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
__ehhandler$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-200]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z ENDP ; WindowsMenu::initPopupMenu
; Function compile flags: /Odtp
_TEXT	SEGMENT
_mii$ = -168						; size = 48
tv142 = -120						; size = 4
_this$ = -116						; size = 4
_pos$ = -112						; size = 4
_windowStr$2 = -108					; size = 28
_buffer$ = -80						; size = 64
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_hInst$ = 8						; size = 4
_hMainMenu$ = 12					; size = 4
_translation$ = 16					; size = 4
?init@WindowsMenu@@QAEXPAUHINSTANCE__@@PAUHMENU__@@PB_W@Z PROC ; WindowsMenu::init
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 767
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?init@WindowsMenu@@QAEXPAUHINSTANCE__@@PAUHMENU__@@PB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 156				; 0000009cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 768
	push	11000					; 00002af8H
	mov	eax, DWORD PTR _hInst$[ebp]
	push	eax
	call	DWORD PTR __imp__LoadMenuW@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 770
	cmp	DWORD PTR _translation$[ebp], 0
	je	SHORT $LN5@init
	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _translation$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	test	edx, edx
	je	SHORT $LN5@init
; Line 772
	mov	eax, DWORD PTR _translation$[ebp]
	push	eax
	lea	ecx, DWORD PTR _windowStr$2[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 773
	push	OFFSET $SG133098
	lea	ecx, DWORD PTR _windowStr$2[ebp]
	call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
; Line 774
	lea	ecx, DWORD PTR _windowStr$2[ebp]
	call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
	push	eax
	push	11001					; 00002af9H
	push	0
	push	11001					; 00002af9H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__ModifyMenuW@20
; Line 775
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _windowStr$2[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN5@init:
; Line 777
	mov	DWORD PTR _pos$[ebp], 0
; Line 778
	mov	eax, DWORD PTR _hMainMenu$[ebp]
	push	eax
	call	DWORD PTR __imp__GetMenuItemCount@4
	sub	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	jmp	SHORT $LN4@init
$LN3@init:
	mov	ecx, DWORD PTR _pos$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _pos$[ebp], ecx
$LN4@init:
	cmp	DWORD PTR _pos$[ebp], 0
	jbe	SHORT $LN2@init
; Line 780
	push	1024					; 00000400H
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _hMainMenu$[ebp]
	push	eax
	call	DWORD PTR __imp__GetMenuState@12
	and	eax, 16					; 00000010H
	jne	SHORT $LN1@init
; Line 781
	jmp	SHORT $LN3@init
$LN1@init:
; Line 782
	jmp	SHORT $LN2@init
; Line 783
	jmp	SHORT $LN3@init
$LN2@init:
; Line 786
	push	48					; 00000030H
	push	0
	lea	ecx, DWORD PTR _mii$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 787
	mov	DWORD PTR _mii$[ebp], 48		; 00000030H
; Line 788
	mov	DWORD PTR _mii$[ebp+4], 68		; 00000044H
; Line 791
	push	32					; 00000020H
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	push	11000					; 00002af8H
	mov	eax, DWORD PTR _hInst$[ebp]
	push	eax
	call	DWORD PTR __imp__LoadStringW@16
; Line 792
	cmp	DWORD PTR _translation$[ebp], 0
	je	SHORT $LN8@init
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _translation$[ebp]
	movzx	ecx, WORD PTR [eax+edx]
	test	ecx, ecx
	je	SHORT $LN8@init
	mov	edx, DWORD PTR _translation$[ebp]
	mov	DWORD PTR tv142[ebp], edx
	jmp	SHORT $LN9@init
$LN8@init:
	lea	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR tv142[ebp], eax
$LN9@init:
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR _mii$[ebp+36], ecx
; Line 793
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _mii$[ebp+20], eax
; Line 794
	lea	ecx, DWORD PTR _mii$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _hMainMenu$[ebp]
	push	eax
	call	DWORD PTR __imp__InsertMenuItemW@16
; Line 795
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?init@WindowsMenu@@QAEXPAUHINSTANCE__@@PAUHMENU__@@PB_W@Z$0:
	lea	ecx, DWORD PTR _windowStr$2[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?init@WindowsMenu@@QAEXPAUHINSTANCE__@@PAUHMENU__@@PB_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-160]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?init@WindowsMenu@@QAEXPAUHINSTANCE__@@PAUHMENU__@@PB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?init@WindowsMenu@@QAEXPAUHINSTANCE__@@PAUHMENU__@@PB_W@Z ENDP ; WindowsMenu::init
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1WindowsMenu@@QAE@XZ PROC				; WindowsMenu::~WindowsMenu
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 761
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 762
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@WindowsMen
; Line 763
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__DestroyMenu@4
$LN2@WindowsMen:
; Line 764
	mov	esp, ebp
	pop	ebp
	ret	0
??1WindowsMenu@@QAE@XZ ENDP				; WindowsMenu::~WindowsMenu
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0WindowsMenu@@QAE@XZ PROC				; WindowsMenu::WindowsMenu
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 758
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0WindowsMenu@@QAE@XZ ENDP				; WindowsMenu::WindowsMenu
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GWindowsDlg@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GWindowsDlg@@UAEPAXI@Z PROC				; WindowsDlg::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1WindowsDlg@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GWindowsDlg@@UAEPAXI@Z ENDP				; WindowsDlg::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1WindowsDlg@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1WindowsDlg@@UAE@XZ PROC				; WindowsDlg::~WindowsDlg, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1WindowsDlg@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SizeableDlg@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1WindowsDlg@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1SizeableDlg@@UAE@XZ
__unwindfunclet$??1WindowsDlg@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$??1WindowsDlg@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1WindowsDlg@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1WindowsDlg@@UAE@XZ ENDP				; WindowsDlg::~WindowsDlg
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hInst$ = 8						; size = 4
_parent$ = 12						; size = 4
?init@WindowsDlg@@EAEXPAUHINSTANCE__@@PAUHWND__@@@Z PROC ; WindowsDlg::init
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 215
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 216
	mov	eax, OFFSET $SG132287
	test	eax, eax
	je	SHORT $LN3@init
	push	216					; 000000d8H
	push	OFFSET $SG132288
	push	OFFSET $SG132289
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@init:
; Line 217
	mov	edx, DWORD PTR _parent$[ebp]
	push	edx
	mov	eax, DWORD PTR _hInst$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; Window::init
; Line 218
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0
; Line 219
	mov	esp, ebp
	pop	ebp
	ret	8
?init@WindowsDlg@@EAEXPAUHINSTANCE__@@PAUHWND__@@@Z ENDP ; WindowsDlg::init
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -20						; size = 4
__Pnext$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1764
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1765
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1766
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
	mov	DWORD PTR __Pnext$[ebp], eax
; Line 1767
	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:
; Line 1768
	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_ran
; Line 1769
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN3@Orphan_ran
$LN2@Orphan_ran:
; Line 1770
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax
; Line 1771
	jmp	SHORT $LN1@Orphan_ran
$LN3@Orphan_ran:
; Line 1773
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont
; Line 1774
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN1@Orphan_ran:
; Line 1775
	jmp	SHORT $LN5@Orphan_ran
$LN6@Orphan_ran:
; Line 1776
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range
; Function compile flags: /Odtp
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1753
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1754
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:
; Line 1755
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIPBH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Pval$ = 16						; size = 4
?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIPBH@Z PROC ; std::vector<int,std::allocator<int> >::_Ufill, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1746
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1747
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
; Line 1748
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Pval$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Uninitialized_fill_n@PAHIHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAHIPBHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninitialized_fill_n<int *,unsigned int,int,std::_Wrap_alloc<std::allocator<int> > >
	add	esp, 16					; 00000010H
; Line 1749
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [eax+edx*4]
; Line 1750
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIPBH@Z ENDP ; std::vector<int,std::allocator<int> >::_Ufill
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1622
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1623
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Tidy
; Line 1625
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 1626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
; Line 1628
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate
; Line 1629
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 1630
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 1631
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN2@Tidy:
; Line 1633
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Reserve, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1612
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
; Line 1613
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::_Unused_capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Reserve
; Line 1615
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Reserve
; Line 1616
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ; std::vector<int,std::allocator<int> >::_Xlen
$LN1@Reserve:
; Line 1617
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ; std::vector<int,std::allocator<int> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reallocate
$LN4@Reserve:
; Line 1619
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -32						; size = 4
__Ptr$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Reallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1587
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 1588
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
; Line 1590
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 1591
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
	jmp	SHORT $LN5@Reallocate
__catch$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$0:
; Line 1593
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate
; Line 1594
	push	0
	push	0
	call	__CxxThrowException@8
; Line 1595
	mov	eax, $LN8@Reallocate
	ret	0
$LN5@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$1
$LN8@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$1:
; Line 1597
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	DWORD PTR __Size$[ebp], eax
; Line 1598
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Reallocate
; Line 1600
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
; Line 1602
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate
$LN1@Reallocate:
; Line 1605
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 1606
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 1607
	mov	ecx, DWORD PTR __Size$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1608
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN4@Reallocate:
; Line 1609
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Reallocate
; Function compile flags: /Odtp
;	COMDAT ?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z PROC ; std::vector<int,std::allocator<int> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1582
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1583
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]
; Line 1584
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ENDP ; std::vector<int,std::allocator<int> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z PROC ; std::vector<int,std::allocator<int> >::_Grow_to, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1571
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1572
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax
; Line 1575
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
; Line 1576
	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to
; Line 1577
	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to:
; Line 1578
	mov	eax, DWORD PTR __Capacity$[ebp]
; Line 1579
	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ENDP ; std::vector<int,std::allocator<int> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1565
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1566
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
; Line 1567
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
	add	esp, 12					; 0000000cH
; Line 1568
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ PROC	; std::vector<int,std::allocator<int> >::clear, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1507
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1508
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 1509
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
; Line 1510
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+8], eax
; Line 1511
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ENDP	; std::vector<int,std::allocator<int> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Pop_back_n@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$ = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Pop_back_n@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Pop_back_n, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1495
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1496
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	mov	DWORD PTR __Ptr$[ebp], edx
; Line 1499
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
; Line 1502
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
; Line 1503
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1504
	mov	esp, ebp
	pop	ebp
	ret	4
?_Pop_back_n@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Pop_back_n
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T2 = -144						; size = 12
$T3 = -132						; size = 12
$T4 = -120						; size = 4
tv319 = -116						; size = 4
tv315 = -112						; size = 4
$T5 = -108						; size = 4
tv314 = -104						; size = 4
tv318 = -100						; size = 4
tv323 = -96						; size = 4
tv322 = -92						; size = 4
$T6 = -88						; size = 4
__Last$7 = -84						; size = 12
tv308 = -72						; size = 4
tv330 = -68						; size = 4
tv338 = -64						; size = 4
tv342 = -60						; size = 4
tv334 = -56						; size = 4
tv340 = -52						; size = 4
tv303 = -48						; size = 4
__First$8 = -44						; size = 12
__Ptr$9 = -32						; size = 4
tv94 = -28						; size = 4
$T10 = -21						; size = 1
$T11 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 12
__Last_arg$ = 24					; size = 12
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z PROC ; std::vector<int,std::allocator<int> >::erase, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1463
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 132				; 00000084H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T11[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 2
; Line 1464
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
	mov	DWORD PTR tv330[ebp], eax
	mov	ecx, DWORD PTR tv330[ebp]
	mov	DWORD PTR tv303[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR $T11[ebp]
	or	edx, 1
	mov	DWORD PTR $T11[ebp], edx
	mov	eax, DWORD PTR tv303[ebp]
	push	eax
	lea	ecx, DWORD PTR __First_arg$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@erase
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
	mov	DWORD PTR tv334[ebp], eax
	mov	eax, DWORD PTR tv334[ebp]
	mov	DWORD PTR tv308[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR $T11[ebp]
	or	ecx, 2
	mov	DWORD PTR $T11[ebp], ecx
	mov	edx, DWORD PTR tv308[ebp]
	push	edx
	lea	ecx, DWORD PTR __Last_arg$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@erase
	mov	DWORD PTR tv94[ebp], 1
	jmp	SHORT $LN10@erase
$LN9@erase:
	mov	DWORD PTR tv94[ebp], 0
$LN10@erase:
	mov	cl, BYTE PTR tv94[ebp]
	mov	BYTE PTR $T10[ebp], cl
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR $T11[ebp]
	and	edx, 2
	je	SHORT $LN17@erase
	and	DWORD PTR $T11[ebp], -3			; fffffffdH
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
$LN17@erase:
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR $T11[ebp]
	and	eax, 1
	je	SHORT $LN18@erase
	and	DWORD PTR $T11[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
$LN18@erase:
	movzx	ecx, BYTE PTR $T10[ebp]
	test	ecx, ecx
	je	SHORT $LN6@erase
; Line 1465
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ; std::vector<int,std::allocator<int> >::clear
; Line 1466
	jmp	$LN5@erase
$LN6@erase:
	lea	edx, DWORD PTR __Last_arg$[ebp]
	push	edx
	lea	ecx, DWORD PTR __First_arg$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator!=
	movzx	eax, al
	test	eax, eax
	je	$LN5@erase
; Line 1468
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T6[ebp], esp
	lea	edx, DWORD PTR __First_arg$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv338[ebp], eax
	mov	eax, DWORD PTR tv338[ebp]
	mov	DWORD PTR tv314[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR __First$8[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter
	mov	DWORD PTR tv315[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 1469
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T4[ebp], esp
	lea	edx, DWORD PTR __Last_arg$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv340[ebp], eax
	mov	eax, DWORD PTR tv340[ebp]
	mov	DWORD PTR tv318[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR __Last$7[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter
	mov	DWORD PTR tv319[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
; Line 1471
	lea	edx, DWORD PTR __Last$7[ebp]
	push	edx
	lea	ecx, DWORD PTR __First$8[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator!=
	movzx	eax, al
	test	eax, eax
	je	$LN3@erase
; Line 1476
	lea	ecx, DWORD PTR __First$8[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Last$7[ebp]
	call	??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator<
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@erase
	lea	ecx, DWORD PTR __First$8[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN1@erase
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __First$8[ebp+8]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@erase
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR __Last$7[ebp+8]
	jae	SHORT $LN2@erase
$LN1@erase:
; Line 1477
	push	1477					; 000005c5H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@erase:
; Line 1479
	mov	ecx, DWORD PTR __First$8[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR __Last$7[ebp+8]
	push	ecx
	call	??$_Move@PAHPAH@std@@YAPAHPAH00@Z	; std::_Move<int *,int *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$9[ebp], eax
; Line 1480
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR __First$8[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
; Line 1487
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR __Ptr$9[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
; Line 1488
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$9[ebp]
	mov	DWORD PTR [edx+8], eax
$LN3@erase:
; Line 1490
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR __Last$7[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR __First$8[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
$LN5@erase:
; Line 1491
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T5[ebp], esp
	lea	edx, DWORD PTR __First_arg$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv342[ebp], eax
	mov	eax, DWORD PTR tv342[ebp]
	mov	DWORD PTR tv322[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter
	mov	DWORD PTR tv323[ebp], eax
	mov	edx, DWORD PTR $T11[ebp]
	or	edx, 4
	mov	DWORD PTR $T11[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR __First_arg$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Last_arg$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1492
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$0:
	lea	ecx, DWORD PTR __Last_arg$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$1:
	lea	ecx, DWORD PTR __First_arg$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$2:
	mov	eax, DWORD PTR $T11[ebp]
	and	eax, 1
	je	$LN14@erase
	and	DWORD PTR $T11[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
$LN14@erase:
	ret	0
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$3:
	mov	eax, DWORD PTR $T11[ebp]
	and	eax, 2
	je	$LN16@erase
	and	DWORD PTR $T11[ebp], -3			; fffffffdH
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
$LN16@erase:
	ret	0
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$4:
	mov	ecx, DWORD PTR $T6[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$5:
	lea	ecx, DWORD PTR __First$8[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$6:
	mov	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$7:
	lea	ecx, DWORD PTR __Last$7[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$8:
	mov	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$9:
	mov	eax, DWORD PTR $T11[ebp]
	and	eax, 4
	je	$LN25@erase
	and	DWORD PTR $T11[ebp], -5			; fffffffbH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
$LN25@erase:
	ret	0
__ehhandler$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-136]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z ENDP ; std::vector<int,std::allocator<int> >::erase
; Function compile flags: /Odtp
;	COMDAT ??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z PROC	; std::vector<int,std::allocator<int> >::operator[], COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1197
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN1@operator
; Line 1201
	push	1201					; 000004b1H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
; Line 1202
	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN4@operator
	xor	ecx, ecx
	jne	SHORT $LN5@operator
$LN4@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	1202					; 000004b2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN5@operator
	int	3
$LN5@operator:
	push	0
	push	1202					; 000004b2H
	push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1HC@HBCEAHKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAl?$AAl?$AAo?$AAc@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN1@operator:
; Line 1209
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 1210
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ENDP	; std::vector<int,std::allocator<int> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1152
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1153
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<int> >::max_size
; Line 1154
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC	; std::vector<int,std::allocator<int> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1148
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
; Line 1149
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP	; std::vector<int,std::allocator<int> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z
_TEXT	SEGMENT
__Idx$2 = -28						; size = 4
__Ptr$3 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z PROC ; std::vector<int,std::allocator<int> >::resize, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1119
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 1120
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN6@resize
; Line 1121
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	sub	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Pop_back_n@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::_Pop_back_n
	jmp	$LN8@resize
$LN6@resize:
; Line 1122
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	$LN8@resize
; Line 1124
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@$$CBH@std@@YAPBHABH@Z	; std::addressof<int const >
	add	esp, 4
	mov	DWORD PTR __Ptr$3[ebp], eax
; Line 1126
	mov	ecx, DWORD PTR __Ptr$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ; std::vector<int,std::allocator<int> >::_Inside
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@resize
; Line 1129
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??$addressof@H@std@@YAPAHAAH@Z		; std::addressof<int>
	add	esp, 4
	mov	edx, DWORD PTR __Ptr$3[ebp]
	sub	edx, eax
	sar	edx, 2
	mov	DWORD PTR __Idx$2[ebp], edx
; Line 1130
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
; Line 1131
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	??$addressof@H@std@@YAPAHAAH@Z		; std::addressof<int>
	add	esp, 4
	mov	ecx, DWORD PTR __Idx$2[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR __Ptr$3[ebp], edx
; Line 1133
	jmp	SHORT $LN2@resize
$LN3@resize:
; Line 1134
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN2@resize:
; Line 1136
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 1137
	mov	edx, DWORD PTR __Ptr$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIPBH@Z ; std::vector<int,std::allocator<int> >::_Ufill
	jmp	SHORT $LN9@resize
__catch$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z$0:
; Line 1139
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
; Line 1140
	push	0
	push	0
	call	__CxxThrowException@8
; Line 1141
	mov	eax, $LN12@resize
	ret	0
$LN9@resize:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z$1
$LN12@resize:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z$1:
; Line 1142
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN8@resize:
; Line 1144
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z ENDP ; std::vector<int,std::allocator<int> >::resize
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Alval$2 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z PROC ; std::vector<int,std::allocator<int> >::resize, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1100
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 1101
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN4@resize
; Line 1102
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	sub	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Pop_back_n@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::_Pop_back_n
	jmp	$LN6@resize
$LN4@resize:
; Line 1103
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	$LN6@resize
; Line 1105
	lea	eax, DWORD PTR __Alval$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
; Line 1106
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
; Line 1107
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 1109
	lea	edx, DWORD PTR __Alval$2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	??$_Uninitialized_default_fill_n@PAHIU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAHIAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninitialized_default_fill_n<int *,unsigned int,std::_Wrap_alloc<std::allocator<int> > >
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN7@resize
__catch$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z$0:
; Line 1111
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
; Line 1112
	push	0
	push	0
	call	__CxxThrowException@8
; Line 1113
	mov	eax, $LN10@resize
	ret	0
$LN7@resize:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z$1
$LN10@resize:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z$1:
; Line 1114
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN6@resize:
; Line 1116
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::resize
; Function compile flags: /Odtp
;	COMDAT ?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z PROC ; std::vector<int,std::allocator<int> >::_Make_iter, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1044
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 1045
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1046
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z$0:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z$1:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN5@Make_iter
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
$LN5@Make_iter:
	ret	0
__ehhandler$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z ENDP ; std::vector<int,std::allocator<int> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::end, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1034
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1035
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1036
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@end
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
$LN4@end:
	ret	0
__ehhandler$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::end
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::begin, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1024
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1025
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1026
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@begin
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
$LN4@begin:
	ret	0
__ehhandler$?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::begin
; Function compile flags: /Odtp
;	COMDAT ?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::_Unused_capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1014
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1015
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+8]
	sar	eax, 2
; Line 1016
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1009
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1010
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
; Line 1011
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 944
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 945
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
; Line 946
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::~_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::~_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
; Function compile flags: /Odtp
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 680
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@H@std@@QAE@XZ		; std::allocator<int>::allocator<int>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 681
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::~_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; Function compile flags: /Odtp
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 641
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 642
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 643
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Free_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 630
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 632
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 633
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 634
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
; Line 635
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
; Line 636
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 637
	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Alloc_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 623
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 624
	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 625
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
; Line 626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 627
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::~_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 607
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 608
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Free_proxy
; Line 609
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::~_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 601
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 603
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Alloc_proxy
; Line 604
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<int> >::~_Vector_val<std::_Simple_types<int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<int> >::~_Vector_val<std::_Simple_types<int> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 480
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 482
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 483
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 484
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 485
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<int> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 883
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z ; std::allocator_traits<std::allocator<int> >::max_size
	add	esp, 4
; Line 885
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@H@std@@QAEXPAHI@Z ; std::allocator<int>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@H@std@@QAEPAHI@Z	; std::allocator<int>::allocate
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@H@std@@QAE@XZ		; std::allocator<int>::allocator<int>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z PROC ; std::allocator_traits<std::allocator<int> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 734
	push	ebp
	mov	ebp, esp
; Line 735
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@H@std@@QBEIXZ	; std::allocator<int>::max_size
; Line 736
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z ENDP ; std::allocator_traits<std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator@H@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@H@std@@QBEIXZ PROC		; std::allocator<int>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 611
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 612
	mov	eax, 1073741823				; 3fffffffH
; Line 613
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@H@std@@QBEIXZ ENDP		; std::allocator<int>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@H@std@@QAEPAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@H@std@@QAEPAHI@Z PROC		; std::allocator<int>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@H@std@@YAPAHIPAH@Z		; std::_Allocate<int>
	add	esp, 8
; Line 579
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@H@std@@QAEPAHI@Z ENDP		; std::allocator<int>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@H@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@H@std@@QAE@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@H@std@@QAE@XZ ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_nmdlg$1 = -36						; size = 32
_this$ = -4						; size = 4
?activateCurrent@WindowsDlg@@IAEXXZ PROC		; WindowsDlg::activateCurrent
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 651
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx
; Line 652
	push	0
	push	0
	push	4146					; 00001032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	$LN2@activateCu
; Line 654
	lea	ecx, DWORD PTR _nmdlg$1[ebp]
	call	??0NMWINDLG@@QAE@XZ			; NMWINDLG::NMWINDLG
; Line 655
	mov	DWORD PTR _nmdlg$1[ebp+16], 1
; Line 656
	push	2
	push	-1
	push	4108					; 0000100cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _nmdlg$1[ebp+20], ecx
; Line 657
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _nmdlg$1[ebp], eax
; Line 658
	mov	ecx, DWORD PTR ?WDN_NOTIFY@@3IB		; WDN_NOTIFY
	mov	DWORD PTR _nmdlg$1[ebp+8], ecx
; Line 659
	lea	edx, DWORD PTR _nmdlg$1[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR ?WDN_NOTIFY@@3IB		; WDN_NOTIFY
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
; Line 661
	push	OFFSET ?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A ; WindowsDlg::_lastKnownLocation
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__GetWindowRect@8
; Line 662
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__EndDialog@8
$LN2@activateCu:
; Line 664
	mov	esp, ebp
	pop	ebp
	ret	0
?activateCurrent@WindowsDlg@@IAEXXZ ENDP		; WindowsDlg::activateCurrent
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_nSelection$ = -8					; size = 4
_this$ = -4						; size = 4
?updateButtonState@WindowsDlg@@IAEXXZ PROC		; WindowsDlg::updateButtonState
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 398
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 399
	push	0
	push	0
	push	4146					; 00001032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _nSelection$[ebp], eax
; Line 400
	cmp	DWORD PTR _nSelection$[ebp], 0
	jne	SHORT $LN4@updateButt
; Line 402
	push	0
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 403
	push	0
	push	7002					; 00001b5aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 404
	push	0
	push	7003					; 00001b5bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 406
	jmp	SHORT $LN3@updateButt
$LN4@updateButt:
; Line 408
	push	1
	push	7002					; 00001b5aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 409
	push	1
	push	7003					; 00001b5bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 410
	cmp	DWORD PTR _nSelection$[ebp], 1
	jne	SHORT $LN2@updateButt
; Line 411
	push	1
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 412
	jmp	SHORT $LN3@updateButt
$LN2@updateButt:
; Line 413
	push	0
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
$LN3@updateButt:
; Line 415
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+84]
	push	edx
	push	7004					; 00001b5cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
; Line 416
	mov	esp, ebp
	pop	ebp
	ret	0
?updateButtonState@WindowsDlg@@IAEXXZ ENDP		; WindowsDlg::updateButtonState
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_nmdlg$ = -92						; size = 32
_key$ = -60						; size = 16
$T2 = -44						; size = 4
_n$ = -40						; size = 4
$T3 = -36						; size = 4
$T4 = -32						; size = 4
_curSel$ = -28						; size = 4
_j$5 = -24						; size = 4
_i$6 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?doSortToTabs@WindowsDlg@@IAEXXZ PROC			; WindowsDlg::doSortToTabs
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 723
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?doSortToTabs@WindowsDlg@@IAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 724
	push	2
	push	-1
	push	4108					; 0000100cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _curSel$[ebp], eax
; Line 726
	cmp	DWORD PTR _curSel$[ebp], -1
	jne	SHORT $LN7@doSortToTa
; Line 727
	mov	DWORD PTR _curSel$[ebp], 0
$LN7@doSortToTa:
; Line 729
	lea	ecx, DWORD PTR _nmdlg$[ebp]
	call	??0NMWINDLG@@QAE@XZ			; NMWINDLG::NMWINDLG
; Line 730
	mov	DWORD PTR _nmdlg$[ebp+16], 4
; Line 731
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _nmdlg$[ebp], eax
; Line 733
	mov	ecx, DWORD PTR _curSel$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _nmdlg$[ebp+20], edx
; Line 734
	mov	eax, DWORD PTR ?WDN_NOTIFY@@3IB		; WDN_NOTIFY
	mov	DWORD PTR _nmdlg$[ebp+8], eax
; Line 735
	push	0
	push	0
	push	4100					; 00001004H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _nmdlg$[ebp+24], eax
	mov	eax, DWORD PTR _nmdlg$[ebp+24]
	mov	DWORD PTR _n$[ebp], eax
; Line 736
	xor	ecx, ecx
	mov	eax, DWORD PTR _nmdlg$[ebp+24]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR _nmdlg$[ebp+28], eax
; Line 737
	lea	ecx, DWORD PTR _key$[ebp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 738
	mov	DWORD PTR $T3[ebp], 2147483647		; 7fffffffH
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	lea	ecx, DWORD PTR _key$[ebp]
	call	?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z ; std::vector<int,std::allocator<int> >::resize
; Line 739
	mov	DWORD PTR _i$6[ebp], -1
	mov	DWORD PTR _j$5[ebp], 0
	jmp	SHORT $LN6@doSortToTa
$LN5@doSortToTa:
	mov	eax, DWORD PTR _j$5[ebp]
	add	eax, 1
	mov	DWORD PTR _j$5[ebp], eax
$LN6@doSortToTa:
; Line 740
	push	0
	mov	ecx, DWORD PTR _i$6[ebp]
	push	ecx
	push	4108					; 0000100cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _i$6[ebp], eax
; Line 741
	cmp	DWORD PTR _i$6[ebp], -1
	jne	SHORT $LN3@doSortToTa
	jmp	SHORT $LN4@doSortToTa
$LN3@doSortToTa:
; Line 742
	mov	ecx, DWORD PTR _i$6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	edx, DWORD PTR _j$5[ebp]
	mov	ecx, DWORD PTR _nmdlg$[ebp+28]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 743
	mov	ecx, DWORD PTR _i$6[ebp]
	cmp	ecx, DWORD PTR _curSel$[ebp]
	jne	SHORT $LN2@doSortToTa
; Line 744
	mov	edx, DWORD PTR _j$5[ebp]
	mov	DWORD PTR _nmdlg$[ebp+20], edx
$LN2@doSortToTa:
; Line 745
	mov	eax, DWORD PTR _j$5[ebp]
	push	eax
	lea	ecx, DWORD PTR _key$[ebp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR _i$6[ebp]
	mov	DWORD PTR [eax], ecx
; Line 746
	jmp	SHORT $LN5@doSortToTa
$LN4@doSortToTa:
; Line 748
	lea	edx, DWORD PTR _nmdlg$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR ?WDN_NOTIFY@@3IB		; WDN_NOTIFY
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
; Line 749
	cmp	DWORD PTR _nmdlg$[ebp+12], 0
	je	SHORT $LN1@doSortToTa
; Line 751
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ; std::vector<int,std::allocator<int> >::clear
; Line 752
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doRefresh@WindowsDlg@@QAEX_N@Z		; WindowsDlg::doRefresh
$LN1@doSortToTa:
; Line 754
	mov	eax, DWORD PTR _nmdlg$[ebp+28]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
; Line 755
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _key$[ebp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?doSortToTabs@WindowsDlg@@IAEXXZ$0:
	lea	ecx, DWORD PTR _key$[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$?doSortToTabs@WindowsDlg@@IAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?doSortToTabs@WindowsDlg@@IAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?doSortToTabs@WindowsDlg@@IAEXXZ ENDP			; WindowsDlg::doSortToTabs
; Function compile flags: /Odtp
_TEXT	SEGMENT
__macro_lvi$2 = -364					; size = 52
__macro_lvi$3 = -312					; size = 52
$T4 = -260						; size = 8
$T5 = -252						; size = 12
$T6 = -240						; size = 12
$T7 = -228						; size = 12
$T8 = -216						; size = 4
tv393 = -212						; size = 4
tv404 = -208						; size = 4
tv392 = -204						; size = 4
$T9 = -200						; size = 4
$T10 = -196						; size = 4
$T11 = -192						; size = 4
tv400 = -188						; size = 4
_end$12 = -184						; size = 12
tv397 = -172						; size = 4
_key$ = -168						; size = 16
_kitr$13 = -152						; size = 12
_nmdlg$ = -140						; size = 32
$T14 = -108						; size = 4
tv198 = -104						; size = 4
tv203 = -100						; size = 4
_itr$15 = -96						; size = 12
tv175 = -84						; size = 4
$T16 = -80						; size = 4
$T17 = -76						; size = 4
tv407 = -72						; size = 4
tv390 = -68						; size = 4
tv402 = -64						; size = 4
_oldVal$18 = -60					; size = 4
tv296 = -56						; size = 4
tv137 = -52						; size = 4
$T19 = -48						; size = 4
tv225 = -44						; size = 4
_n$ = -40						; size = 4
$T20 = -33						; size = 1
_j$21 = -32						; size = 4
_i$22 = -28						; size = 4
_i$23 = -24						; size = 4
_index$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?doClose@WindowsDlg@@IAEXXZ PROC			; WindowsDlg::doClose
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 667
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?doClose@WindowsDlg@@IAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 352				; 00000160H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 668
	lea	ecx, DWORD PTR _nmdlg$[ebp]
	call	??0NMWINDLG@@QAE@XZ			; NMWINDLG::NMWINDLG
; Line 669
	mov	DWORD PTR _nmdlg$[ebp+16], 3
; Line 670
	push	2
	push	-1
	push	4108					; 0000100cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _index$[ebp], eax
; Line 671
	cmp	DWORD PTR _index$[ebp], -1
	jne	SHORT $LN18@doClose
	jmp	$LN19@doClose
$LN18@doClose:
; Line 673
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _nmdlg$[ebp+20], eax
; Line 674
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _nmdlg$[ebp], edx
; Line 675
	mov	eax, DWORD PTR ?WDN_NOTIFY@@3IB		; WDN_NOTIFY
	mov	DWORD PTR _nmdlg$[ebp+8], eax
; Line 676
	push	0
	push	0
	push	4146					; 00001032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _nmdlg$[ebp+24], eax
	mov	eax, DWORD PTR _nmdlg$[ebp+24]
	mov	DWORD PTR _n$[ebp], eax
; Line 677
	xor	ecx, ecx
	mov	eax, DWORD PTR _nmdlg$[ebp+24]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T16[ebp], eax
	mov	eax, DWORD PTR $T16[ebp]
	mov	DWORD PTR _nmdlg$[ebp+28], eax
; Line 678
	lea	ecx, DWORD PTR _key$[ebp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 679
	mov	DWORD PTR $T14[ebp], 2147483647		; 7fffffffH
	lea	ecx, DWORD PTR $T14[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	lea	ecx, DWORD PTR _key$[ebp]
	call	?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z ; std::vector<int,std::allocator<int> >::resize
; Line 680
	mov	DWORD PTR _i$23[ebp], -1
	mov	DWORD PTR _j$21[ebp], 0
	jmp	SHORT $LN17@doClose
$LN16@doClose:
	mov	eax, DWORD PTR _j$21[ebp]
	add	eax, 1
	mov	DWORD PTR _j$21[ebp], eax
$LN17@doClose:
; Line 681
	push	2
	mov	ecx, DWORD PTR _i$23[ebp]
	push	ecx
	push	4108					; 0000100cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _i$23[ebp], eax
; Line 682
	cmp	DWORD PTR _i$23[ebp], -1
	jne	SHORT $LN14@doClose
	jmp	SHORT $LN15@doClose
$LN14@doClose:
; Line 683
	mov	DWORD PTR __macro_lvi$3[ebp+16], 2
	mov	DWORD PTR __macro_lvi$3[ebp+12], 0
	lea	ecx, DWORD PTR __macro_lvi$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$23[ebp]
	push	edx
	push	4139					; 0000102bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
; Line 684
	mov	edx, DWORD PTR _i$23[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR _j$21[ebp]
	mov	edx, DWORD PTR _nmdlg$[ebp+28]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 685
	mov	ecx, DWORD PTR _j$21[ebp]
	push	ecx
	lea	ecx, DWORD PTR _key$[ebp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	edx, DWORD PTR _i$23[ebp]
	mov	DWORD PTR [eax], edx
; Line 686
	jmp	$LN16@doClose
$LN15@doClose:
; Line 687
	lea	eax, DWORD PTR _nmdlg$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR ?WDN_NOTIFY@@3IB		; WDN_NOTIFY
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
; Line 688
	cmp	DWORD PTR _nmdlg$[ebp+12], 0
	je	$LN13@doClose
; Line 691
	lea	ecx, DWORD PTR _kitr$13[ebp]
	push	ecx
	lea	ecx, DWORD PTR _key$[ebp]
	call	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 692
	mov	DWORD PTR _i$22[ebp], 0
	jmp	SHORT $LN12@doClose
$LN11@doClose:
	mov	edx, DWORD PTR _i$22[ebp]
	add	edx, 1
	mov	DWORD PTR _i$22[ebp], edx
	lea	ecx, DWORD PTR _kitr$13[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator++
$LN12@doClose:
	mov	eax, DWORD PTR _i$22[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jae	$LN10@doClose
; Line 694
	mov	ecx, DWORD PTR _i$22[ebp]
	mov	edx, DWORD PTR _nmdlg$[ebp+28]
	cmp	DWORD PTR [edx+ecx*4], -1
	jne	$LN9@doClose
; Line 696
	lea	ecx, DWORD PTR _kitr$13[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _oldVal$18[ebp], ecx
; Line 697
	lea	ecx, DWORD PTR _kitr$13[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	DWORD PTR [eax], -1
; Line 698
	lea	eax, DWORD PTR _itr$15[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _end$12[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	jmp	SHORT $LN8@doClose
$LN7@doClose:
	lea	ecx, DWORD PTR _itr$15[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator++
$LN8@doClose:
	lea	edx, DWORD PTR _end$12[ebp]
	push	edx
	lea	ecx, DWORD PTR _itr$15[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator!=
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@doClose
; Line 699
	lea	ecx, DWORD PTR _itr$15[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _oldVal$18[ebp]
	jle	SHORT $LN5@doClose
; Line 700
	lea	ecx, DWORD PTR _itr$15[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*
	mov	DWORD PTR tv225[ebp], eax
	mov	edx, DWORD PTR tv225[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, 1
	mov	ecx, DWORD PTR tv225[ebp]
	mov	DWORD PTR [ecx], eax
$LN5@doClose:
; Line 701
	jmp	SHORT $LN7@doClose
$LN6@doClose:
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _end$12[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _itr$15[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
$LN9@doClose:
; Line 702
	jmp	$LN11@doClose
$LN10@doClose:
; Line 703
	mov	DWORD PTR $T17[ebp], -1
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
	mov	DWORD PTR tv203[ebp], eax
	mov	eax, DWORD PTR tv203[ebp]
	mov	DWORD PTR tv390[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T8[ebp], esp
	mov	edx, DWORD PTR tv390[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv198[ebp], eax
	mov	eax, DWORD PTR tv198[ebp]
	mov	DWORD PTR tv392[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T17[ebp]
	push	ecx
	lea	edx, DWORD PTR $T20[ebp]
	push	edx
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??$bind2nd@U?$equal_to@H@std@@H@std@@YA?AV?$binder2nd@U?$equal_to@H@std@@@0@ABU?$equal_to@H@0@ABH@Z ; std::bind2nd<std::equal_to<int>,int>
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T11[ebp], esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
	mov	DWORD PTR tv175[ebp], eax
	mov	ecx, DWORD PTR tv175[ebp]
	mov	DWORD PTR tv397[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T10[ebp], esp
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
	mov	DWORD PTR tv137[ebp], eax
	mov	eax, DWORD PTR tv137[ebp]
	mov	DWORD PTR tv400[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	call	??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z ; std::remove_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::binder2nd<std::equal_to<int> > >
	add	esp, 36					; 00000024H
	mov	DWORD PTR tv296[ebp], eax
	mov	edx, DWORD PTR tv296[ebp]
	mov	DWORD PTR tv402[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T9[ebp], esp
	mov	eax, DWORD PTR tv402[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv407[ebp], eax
	mov	ecx, DWORD PTR tv407[ebp]
	mov	DWORD PTR tv404[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	edx, DWORD PTR $T7[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	call	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase
	mov	DWORD PTR tv393[ebp], eax
	lea	ecx, DWORD PTR $T7[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
; Line 704
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _kitr$13[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
$LN13@doClose:
; Line 705
	mov	eax, DWORD PTR _nmdlg$[ebp+28]
	mov	DWORD PTR $T19[ebp], eax
	mov	ecx, DWORD PTR $T19[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
; Line 707
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	call	?nbItem@TabBar@@QBEHXZ			; TabBar::nbItem
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	cmp	esi, eax
	je	SHORT $LN4@doClose
; Line 708
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doRefresh@WindowsDlg@@QAEX_N@Z		; WindowsDlg::doRefresh
; Line 709
	jmp	$LN3@doClose
$LN4@doClose:
; Line 712
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	cmp	DWORD PTR _index$[ebp], eax
	jne	SHORT $LN2@doClose
	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _index$[ebp], eax
$LN2@doClose:
; Line 713
	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $LN1@doClose
; Line 715
	mov	DWORD PTR __macro_lvi$2[ebp+16], 2
	mov	DWORD PTR __macro_lvi$2[ebp+12], 2
	lea	ecx, DWORD PTR __macro_lvi$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	push	4139					; 0000102bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
; Line 716
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	sub	eax, 1
	push	eax
	push	0
	push	4117					; 00001015H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
$LN1@doClose:
; Line 718
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	push	eax
	push	4143					; 0000102fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
$LN3@doClose:
; Line 720
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _key$[ebp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
$LN19@doClose:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$0:
	lea	ecx, DWORD PTR _key$[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$1:
	lea	ecx, DWORD PTR _kitr$13[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$2:
	lea	ecx, DWORD PTR _itr$15[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$3:
	lea	ecx, DWORD PTR _end$12[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$4:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$5:
	mov	ecx, DWORD PTR $T8[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$6:
	mov	ecx, DWORD PTR $T11[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$7:
	mov	ecx, DWORD PTR $T10[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$8:
	lea	ecx, DWORD PTR $T6[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$9:
	mov	ecx, DWORD PTR $T9[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$?doClose@WindowsDlg@@IAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-360]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?doClose@WindowsDlg@@IAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?doClose@WindowsDlg@@IAEXXZ ENDP			; WindowsDlg::doClose
; Function compile flags: /Odtp
_TEXT	SEGMENT
_nmdlg$ = -52						; size = 32
$T1 = -20						; size = 4
$T2 = -16						; size = 4
_j$3 = -12						; size = 4
_i$4 = -8						; size = 4
_this$ = -4						; size = 4
?doSave@WindowsDlg@@IAEXXZ PROC				; WindowsDlg::doSave
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx
; Line 622
	lea	ecx, DWORD PTR _nmdlg$[ebp]
	call	??0NMWINDLG@@QAE@XZ			; NMWINDLG::NMWINDLG
; Line 623
	mov	DWORD PTR _nmdlg$[ebp+16], 2
; Line 624
	push	2
	push	-1
	push	4108					; 0000100cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _nmdlg$[ebp+20], eax
; Line 625
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _nmdlg$[ebp], eax
; Line 626
	mov	ecx, DWORD PTR ?WDN_NOTIFY@@3IB		; WDN_NOTIFY
	mov	DWORD PTR _nmdlg$[ebp+8], ecx
; Line 627
	push	0
	push	0
	push	4146					; 00001032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _nmdlg$[ebp+24], eax
; Line 628
	xor	ecx, ecx
	mov	eax, DWORD PTR _nmdlg$[ebp+24]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _nmdlg$[ebp+28], eax
; Line 629
	mov	DWORD PTR _i$4[ebp], -1
	mov	DWORD PTR _j$3[ebp], 0
	jmp	SHORT $LN4@doSave
$LN3@doSave:
	mov	ecx, DWORD PTR _j$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$3[ebp], ecx
$LN4@doSave:
; Line 630
	push	2
	mov	edx, DWORD PTR _i$4[ebp]
	push	edx
	push	4108					; 0000100cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _i$4[ebp], eax
; Line 631
	cmp	DWORD PTR _i$4[ebp], -1
	jne	SHORT $LN1@doSave
	jmp	SHORT $LN2@doSave
$LN1@doSave:
; Line 632
	mov	edx, DWORD PTR _i$4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR _j$3[ebp]
	mov	edx, DWORD PTR _nmdlg$[ebp+28]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 633
	jmp	SHORT $LN3@doSave
$LN2@doSave:
; Line 634
	lea	ecx, DWORD PTR _nmdlg$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR ?WDN_NOTIFY@@3IB		; WDN_NOTIFY
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
; Line 635
	mov	edx, DWORD PTR _nmdlg$[ebp+28]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
; Line 636
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	DWORD PTR __imp__InvalidateRect@12
; Line 637
	push	0
	push	0
	push	4146					; 00001032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
	push	eax
	push	0
	push	4117					; 00001015H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
; Line 638
	mov	esp, ebp
	pop	ebp
	ret	0
?doSave@WindowsDlg@@IAEXXZ ENDP				; WindowsDlg::doSave
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
__macro_lvi$2 = -152					; size = 52
__macro_lvi$3 = -100					; size = 52
_end$4 = -48						; size = 12
_itr$5 = -36						; size = 12
_curSel$ = -24						; size = 4
_pos$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?resetSelection@WindowsDlg@@IAEXXZ PROC			; WindowsDlg::resetSelection
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 604
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?resetSelection@WindowsDlg@@IAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 605
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	call	?getCurrentTabIndex@TabBar@@QBEHXZ	; TabBar::getCurrentTabIndex
	mov	DWORD PTR _curSel$[ebp], eax
; Line 606
	mov	DWORD PTR _pos$[ebp], 0
; Line 607
	lea	ecx, DWORD PTR _itr$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	edx, DWORD PTR _end$4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	jmp	SHORT $LN5@resetSelec
$LN4@resetSelec:
	lea	ecx, DWORD PTR _itr$5[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator++
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
$LN5@resetSelec:
	lea	ecx, DWORD PTR _end$4[ebp]
	push	ecx
	lea	ecx, DWORD PTR _itr$5[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator!=
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@resetSelec
; Line 609
	lea	ecx, DWORD PTR _itr$5[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*
	mov	eax, DWORD PTR [eax]
	cmp	eax, DWORD PTR _curSel$[ebp]
	jne	SHORT $LN2@resetSelec
; Line 611
	mov	DWORD PTR __macro_lvi$3[ebp+16], 3
	mov	DWORD PTR __macro_lvi$3[ebp+12], 3
	lea	ecx, DWORD PTR __macro_lvi$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	push	4139					; 0000102bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
; Line 613
	jmp	SHORT $LN1@resetSelec
$LN2@resetSelec:
; Line 615
	mov	DWORD PTR __macro_lvi$2[ebp+16], 2
	mov	DWORD PTR __macro_lvi$2[ebp+12], 0
	lea	edx, DWORD PTR __macro_lvi$2[ebp]
	push	edx
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	push	4139					; 0000102bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
$LN1@resetSelec:
; Line 616
	jmp	$LN4@resetSelec
$LN3@resetSelec:
; Line 617
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _end$4[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _itr$5[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
; Line 618
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?resetSelection@WindowsDlg@@IAEXXZ$0:
	lea	ecx, DWORD PTR _itr$5[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?resetSelection@WindowsDlg@@IAEXXZ$1:
	lea	ecx, DWORD PTR _end$4[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$?resetSelection@WindowsDlg@@IAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?resetSelection@WindowsDlg@@IAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?resetSelection@WindowsDlg@@IAEXXZ ENDP			; WindowsDlg::resetSelection
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -28						; size = 4
_len$1 = -24						; size = 4
_rc$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?fitColumnsToSize@WindowsDlg@@IAEXXZ PROC		; WindowsDlg::fitColumnsToSize
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 589
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 592
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	DWORD PTR __imp__GetClientRect@8
	test	eax, eax
	je	SHORT $LN2@fitColumns
; Line 594
	mov	eax, DWORD PTR _rc$[ebp+8]
	sub	eax, DWORD PTR _rc$[ebp]
	mov	DWORD PTR _len$1[ebp], eax
; Line 595
	push	0
	push	0
	push	4125					; 0000101dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
	mov	ecx, DWORD PTR _len$1[ebp]
	sub	ecx, eax
	mov	DWORD PTR _len$1[ebp], ecx
; Line 596
	push	0
	push	2
	push	4125					; 0000101dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	ecx, DWORD PTR _len$1[ebp]
	sub	ecx, eax
	mov	DWORD PTR _len$1[ebp], ecx
; Line 597
	push	2
	call	DWORD PTR __imp__GetSystemMetrics@4
	mov	edx, DWORD PTR _len$1[ebp]
	sub	edx, eax
	mov	DWORD PTR _len$1[ebp], edx
; Line 598
	mov	eax, DWORD PTR _len$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _len$1[ebp], eax
; Line 599
	mov	ecx, DWORD PTR _len$1[ebp]
	push	ecx
	push	1
	push	4126					; 0000101eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
$LN2@fitColumns:
; Line 601
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?fitColumnsToSize@WindowsDlg@@IAEXXZ ENDP		; WindowsDlg::fitColumnsToSize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_hSelf$ = -8						; size = 4
_this$ = -4						; size = 4
?destroy@WindowsDlg@@MAEXXZ PROC			; WindowsDlg::destroy
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 641
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 642
	push	OFFSET ?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A ; WindowsDlg::_lastKnownLocation
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__GetWindowRect@8
; Line 644
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _hSelf$[ebp], eax
; Line 645
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 646
	mov	edx, DWORD PTR _hSelf$[ebp]
	push	edx
	call	DWORD PTR __imp__DestroyWindow@4
; Line 648
	mov	esp, ebp
	pop	ebp
	ret	0
?destroy@WindowsDlg@@MAEXXZ ENDP			; WindowsDlg::destroy
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_nmw$ = -8						; size = 4
tv70 = -4						; size = 4
_wp$ = 8						; size = 4
_lp$ = 12						; size = 4
?onWinMgr@WindowsDlg@@MAEJIJ@Z PROC			; WindowsDlg::onWinMgr
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 534
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 535
	mov	eax, DWORD PTR _lp$[ebp]
	mov	DWORD PTR _nmw$[ebp], eax
; Line 536
	mov	ecx, DWORD PTR _nmw$[ebp]
	cmp	DWORD PTR [ecx+8], 1
	jne	$LN5@onWinMgr
; Line 537
	mov	edx, DWORD PTR _wp$[ebp]
	mov	DWORD PTR tv70[ebp], edx
	cmp	DWORD PTR tv70[ebp], 7001		; 00001b59H
	ja	SHORT $LN8@onWinMgr
	cmp	DWORD PTR tv70[ebp], 7001		; 00001b59H
	je	SHORT $LN1@onWinMgr
	cmp	DWORD PTR tv70[ebp], 0
	jbe	SHORT $LN5@onWinMgr
	cmp	DWORD PTR tv70[ebp], 2
	jbe	SHORT $LN2@onWinMgr
	jmp	SHORT $LN5@onWinMgr
$LN8@onWinMgr:
	cmp	DWORD PTR tv70[ebp], 7002		; 00001b5aH
	jb	SHORT $LN5@onWinMgr
	cmp	DWORD PTR tv70[ebp], 7004		; 00001b5cH
	jbe	SHORT $LN2@onWinMgr
	jmp	SHORT $LN5@onWinMgr
$LN2@onWinMgr:
; Line 544
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [eax+48]
	mov	eax, DWORD PTR _nmw$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	DWORD PTR [eax+32], edx
; Line 545
	mov	ecx, DWORD PTR _nmw$[ebp]
	mov	DWORD PTR [ecx+44], 1
; Line 546
	mov	eax, 1
	jmp	SHORT $LN6@onWinMgr
$LN1@onWinMgr:
; Line 549
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR _nmw$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	DWORD PTR [edx+32], ecx
; Line 550
	mov	eax, DWORD PTR _nmw$[ebp]
	mov	DWORD PTR [eax+44], 1
; Line 551
	mov	eax, 1
	jmp	SHORT $LN6@onWinMgr
$LN5@onWinMgr:
; Line 554
	mov	ecx, DWORD PTR _lp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?onWinMgr@SizeableDlg@@MAEJIJ@Z		; SizeableDlg::onWinMgr
$LN6@onWinMgr:
; Line 555
	mov	esp, ebp
	pop	ebp
	ret	8
?onWinMgr@WindowsDlg@@MAEJIJ@Z ENDP			; WindowsDlg::onWinMgr
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpMMI$ = 8						; size = 4
?onGetMinMaxInfo@WindowsDlg@@MAEXPAUtagMINMAXINFO@@@Z PROC ; WindowsDlg::onGetMinMaxInfo
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 529
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 530
	mov	eax, DWORD PTR _lpMMI$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?onGetMinMaxInfo@SizeableDlg@@MAEXPAUtagMINMAXINFO@@@Z ; SizeableDlg::onGetMinMaxInfo
; Line 531
	mov	esp, ebp
	pop	ebp
	ret	4
?onGetMinMaxInfo@WindowsDlg@@MAEXPAUtagMINMAXINFO@@@Z ENDP ; WindowsDlg::onGetMinMaxInfo
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nType$ = 8						; size = 4
_cx$ = 12						; size = 4
_cy$ = 16						; size = 4
?onSize@WindowsDlg@@MAEXIHH@Z PROC			; WindowsDlg::onSize
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 523
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 524
	mov	eax, DWORD PTR _cy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nType$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?onSize@SizeableDlg@@MAEXIHH@Z		; SizeableDlg::onSize
; Line 525
	mov	ecx, DWORD PTR _this$[ebp]
	call	?fitColumnsToSize@WindowsDlg@@IAEXXZ	; WindowsDlg::fitColumnsToSize
; Line 526
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?onSize@WindowsDlg@@MAEXIHH@Z ENDP			; WindowsDlg::onSize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_lvColumn$ = -112					; size = 32
_width$ = -80						; size = 4
$T1 = -76						; size = 8
$T2 = -68						; size = 8
_exStyle$ = -60						; size = 4
_this$ = -56						; size = 4
$T3 = -52						; size = 16
$T4 = -36						; size = 16
_rc$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?onInitDialog@WindowsDlg@@MAEHXZ PROC			; WindowsDlg::onInitDialog
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 469
	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 470
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?InitToFitSizeFromCurrent@CWinMgr@@QAEXPAUHWND__@@@Z ; CWinMgr::InitToFitSizeFromCurrent
; Line 473
	push	1
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetRect@CWinMgr@@QAE?AUtagRECT@@I@Z	; CWinMgr::GetRect
	push	eax
	call	?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z ; RectToSize
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax+44], ecx
	mov	edx, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [eax+48], edx
; Line 474
	push	7001					; 00001b59H
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetRect@CWinMgr@@QAE?AUtagRECT@@I@Z	; CWinMgr::GetRect
	push	eax
	call	?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z ; RectToSize
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR $T2[ebp+4], edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+52], edx
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+56], eax
; Line 475
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+80], -1
; Line 477
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?CalcLayout@CWinMgr@@QAEXPAUHWND__@@@Z	; CWinMgr::CalcLayout
; Line 478
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [edx+8]
	call	eax
; Line 479
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+28]
	call	edx
; Line 481
	push	7001					; 00001b59H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], eax
; Line 482
	push	0
	push	0
	push	4151					; 00001037H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _exStyle$[ebp], eax
; Line 483
	mov	edx, DWORD PTR _exStyle$[ebp]
	or	edx, 65584				; 00010030H
	mov	DWORD PTR _exStyle$[ebp], edx
; Line 484
	mov	eax, DWORD PTR _exStyle$[ebp]
	push	eax
	push	0
	push	4150					; 00001036H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
; Line 486
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	DWORD PTR __imp__GetClientRect@8
; Line 487
	mov	eax, DWORD PTR _rc$[ebp+8]
	sub	eax, DWORD PTR _rc$[ebp]
	mov	DWORD PTR _width$[ebp], eax
; Line 490
	push	32					; 00000020H
	push	0
	lea	ecx, DWORD PTR _lvColumn$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 491
	mov	DWORD PTR _lvColumn$[ebp], 15		; 0000000fH
; Line 492
	mov	DWORD PTR _lvColumn$[ebp+4], 0
; Line 493
	mov	DWORD PTR _lvColumn$[ebp+12], OFFSET $SG132617
; Line 494
	mov	eax, DWORD PTR _width$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _lvColumn$[ebp+8], eax
; Line 495
	lea	edx, DWORD PTR _lvColumn$[ebp]
	push	edx
	push	0
	push	4193					; 00001061H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
; Line 497
	mov	DWORD PTR _lvColumn$[ebp+12], OFFSET $SG132618
; Line 498
	mov	DWORD PTR _lvColumn$[ebp+8], 300	; 0000012cH
; Line 499
	lea	edx, DWORD PTR _lvColumn$[ebp]
	push	edx
	push	1
	push	4193					; 00001061H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
; Line 501
	mov	DWORD PTR _lvColumn$[ebp+4], 2
; Line 502
	mov	DWORD PTR _lvColumn$[ebp+12], OFFSET $SG132619
; Line 503
	mov	DWORD PTR _lvColumn$[ebp+8], 40		; 00000028H
; Line 504
	lea	edx, DWORD PTR _lvColumn$[ebp]
	push	edx
	push	2
	push	4193					; 00001061H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
; Line 506
	mov	ecx, DWORD PTR _this$[ebp]
	call	?fitColumnsToSize@WindowsDlg@@IAEXXZ	; WindowsDlg::fitColumnsToSize
; Line 508
	cmp	DWORD PTR ?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A+12, 0
	jle	SHORT $LN2@onInitDial
	cmp	DWORD PTR ?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A+8, 0
	jle	SHORT $LN2@onInitDial
; Line 511
	push	64					; 00000040H
	mov	edx, DWORD PTR ?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A+12
	sub	edx, DWORD PTR ?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A+4
	push	edx
	mov	eax, DWORD PTR ?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A+8
	sub	eax, DWORD PTR ?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A
	push	eax
	mov	ecx, DWORD PTR ?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A+4
	push	ecx
	mov	edx, DWORD PTR ?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__SetWindowPos@28
; Line 513
	jmp	SHORT $LN1@onInitDial
$LN2@onInitDial:
; Line 515
	mov	ecx, DWORD PTR _this$[ebp]
	call	?goToCenter@StaticDialog@@QAEXXZ	; StaticDialog::goToCenter
$LN1@onInitDial:
; Line 518
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doRefresh@WindowsDlg@@QAEX_N@Z		; WindowsDlg::doRefresh
; Line 519
	mov	eax, 1
; Line 520
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?onInitDialog@WindowsDlg@@MAEHXZ ENDP			; WindowsDlg::onInitDialog
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
__macro_lvi$2 = -280					; size = 52
__macro_lvi$3 = -228					; size = 52
$T4 = -176						; size = 16
$T5 = -160						; size = 4
tv467 = -156						; size = 4
tv464 = -152						; size = 4
$T6 = -148						; size = 4
_sortMap$7 = -144					; size = 16
_fileName$8 = -128					; size = 4
_fileName$9 = -124					; size = 4
_len$10 = -120						; size = 4
_bufID$11 = -116					; size = 4
_pNppParameters$12 = -112				; size = 4
tv468 = -108						; size = 4
tv285 = -104						; size = 4
_n$13 = -100						; size = 4
_lvkd$14 = -96						; size = 4
tv350 = -92						; size = 4
_lang$15 = -88						; size = 4
_pNMLV$16 = -84						; size = 4
_n$17 = -80						; size = 4
_shift$18 = -76						; size = 2
_iColumn$19 = -72					; size = 4
_ctrl$20 = -68						; size = 2
_fullName$21 = -64					; size = 4
_alt$22 = -60						; size = 2
_i$23 = -56						; size = 4
_index$24 = -52						; size = 4
tv64 = -48						; size = 4
_len$25 = -44						; size = 4
_buf$26 = -40						; size = 4
tv75 = -36						; size = 4
_pNMHDR$27 = -32					; size = 4
_reverse$28 = -25					; size = 1
_i$29 = -24						; size = 4
_len$30 = -20						; size = 4
_pLvdi$31 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?run_dlgProc@WindowsDlg@@MAGHIIJ@Z PROC			; WindowsDlg::run_dlgProc
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 222
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?run_dlgProc@WindowsDlg@@MAGHIIJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 268				; 0000010cH
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 223
	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 272		; 00000110H
	ja	SHORT $LN60@run_dlgPro
	cmp	DWORD PTR tv64[ebp], 272		; 00000110H
	je	SHORT $LN52@run_dlgPro
	cmp	DWORD PTR tv64[ebp], 2
	je	$LN42@run_dlgPro
	cmp	DWORD PTR tv64[ebp], 78			; 0000004eH
	je	$LN41@run_dlgPro
	jmp	$LN53@run_dlgPro
$LN60@run_dlgPro:
	cmp	DWORD PTR tv64[ebp], 273		; 00000111H
	je	SHORT $LN51@run_dlgPro
	jmp	$LN53@run_dlgPro
$LN52@run_dlgPro:
; Line 227
	mov	ecx, DWORD PTR _this$[ebp]
	call	?changeDlgLang@WindowsDlg@@QAE_NXZ	; WindowsDlg::changeDlgLang
; Line 228
	mov	ecx, DWORD PTR _lParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?run_dlgProc@SizeableDlg@@MAGHIIJ@Z	; SizeableDlg::run_dlgProc
	jmp	$LN55@run_dlgPro
$LN51@run_dlgPro:
; Line 232
	mov	edx, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv75[ebp], edx
	cmp	DWORD PTR tv75[ebp], 7002		; 00001b5aH
	ja	SHORT $LN57@run_dlgPro
	cmp	DWORD PTR tv75[ebp], 7002		; 00001b5aH
	je	SHORT $LN46@run_dlgPro
	cmp	DWORD PTR tv75[ebp], 1
	je	SHORT $LN48@run_dlgPro
	cmp	DWORD PTR tv75[ebp], 2
	je	SHORT $LN47@run_dlgPro
	jmp	$LN42@run_dlgPro
$LN57@run_dlgPro:
	cmp	DWORD PTR tv75[ebp], 7003		; 00001b5bH
	je	SHORT $LN45@run_dlgPro
	cmp	DWORD PTR tv75[ebp], 7004		; 00001b5cH
	je	SHORT $LN44@run_dlgPro
	jmp	SHORT $LN42@run_dlgPro
$LN48@run_dlgPro:
; Line 235
	mov	ecx, DWORD PTR _this$[ebp]
	call	?activateCurrent@WindowsDlg@@IAEXXZ	; WindowsDlg::activateCurrent
; Line 236
	mov	eax, 1
	jmp	$LN55@run_dlgPro
$LN47@run_dlgPro:
; Line 239
	push	OFFSET ?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A ; WindowsDlg::_lastKnownLocation
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__GetWindowRect@8
; Line 240
	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__EndDialog@8
; Line 241
	mov	eax, 1
	jmp	$LN55@run_dlgPro
$LN46@run_dlgPro:
; Line 244
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doSave@WindowsDlg@@IAEXXZ		; WindowsDlg::doSave
; Line 245
	mov	eax, 1
	jmp	$LN55@run_dlgPro
$LN45@run_dlgPro:
; Line 248
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doClose@WindowsDlg@@IAEXXZ		; WindowsDlg::doClose
; Line 249
	mov	eax, 1
	jmp	$LN55@run_dlgPro
$LN44@run_dlgPro:
; Line 252
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doSortToTabs@WindowsDlg@@IAEXXZ	; WindowsDlg::doSortToTabs
; Line 253
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+84], 0
; Line 254
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateButtonState@WindowsDlg@@IAEXXZ	; WindowsDlg::updateButtonState
$LN42@run_dlgPro:
; Line 264
	mov	eax, 1
	jmp	$LN55@run_dlgPro
$LN41@run_dlgPro:
; Line 268
	cmp	DWORD PTR _wParam$[ebp], 7001		; 00001b59H
	jne	$LN53@run_dlgPro
; Line 270
	mov	edx, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR _pNMHDR$27[ebp], edx
; Line 271
	mov	eax, DWORD PTR _pNMHDR$27[ebp]
	cmp	DWORD PTR [eax+8], -177			; ffffff4fH
	jne	$LN39@run_dlgPro
; Line 273
	mov	ecx, DWORD PTR _pNMHDR$27[ebp]
	mov	DWORD PTR _pLvdi$31[ebp], ecx
; Line 276
	mov	edx, DWORD PTR _pLvdi$31[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 1
	je	$LN38@run_dlgPro
; Line 278
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _pLvdi$31[ebp]
	mov	ecx, DWORD PTR [eax+32]
	xor	eax, eax
	mov	WORD PTR [edx+ecx], ax
; Line 279
	mov	ecx, DWORD PTR _pLvdi$31[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _index$24[ebp], edx
; Line 280
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	call	?nbItem@TabBar@@QBEHXZ			; TabBar::nbItem
	cmp	DWORD PTR _index$24[ebp], eax
	jge	SHORT $LN36@run_dlgPro
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	cmp	DWORD PTR _index$24[ebp], eax
	jl	SHORT $LN37@run_dlgPro
$LN36@run_dlgPro:
; Line 281
	xor	eax, eax
	jmp	$LN55@run_dlgPro
$LN37@run_dlgPro:
; Line 282
	mov	ecx, DWORD PTR _index$24[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _index$24[ebp], edx
; Line 285
	mov	eax, DWORD PTR _index$24[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?getBufferByIndex@DocTabView@@QAEPAVBuffer@@H@Z ; DocTabView::getBufferByIndex
	mov	DWORD PTR _bufID$11[ebp], eax
; Line 286
	mov	edx, DWORD PTR _bufID$11[ebp]
	push	edx
	call	?getInstance@FileManager@@SAPAV1@XZ	; FileManager::getInstance
	mov	ecx, eax
	call	?getBufferByID@FileManager@@QAEPAVBuffer@@PAV2@@Z ; FileManager::getBufferByID
	mov	DWORD PTR _buf$26[ebp], eax
; Line 287
	mov	eax, DWORD PTR _pLvdi$31[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	$LN35@run_dlgPro
; Line 289
	mov	ecx, DWORD PTR _pLvdi$31[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _len$30[ebp], edx
; Line 290
	mov	ecx, DWORD PTR _buf$26[ebp]
	call	?getFileName@Buffer@@QBEPB_WXZ		; Buffer::getFileName
	mov	DWORD PTR _fileName$8[ebp], eax
; Line 291
	mov	eax, DWORD PTR _len$30[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _fileName$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLvdi$31[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_wcsncpy
	add	esp, 12					; 0000000cH
; Line 292
	mov	ecx, DWORD PTR _pLvdi$31[ebp]
	mov	edx, DWORD PTR [ecx+32]
	xor	eax, eax
	mov	ecx, DWORD PTR _len$30[ebp]
	mov	WORD PTR [edx+ecx*2-2], ax
; Line 293
	mov	edx, DWORD PTR _pLvdi$31[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	DWORD PTR __imp__lstrlenW@4
	mov	DWORD PTR _len$30[ebp], eax
; Line 294
	mov	ecx, DWORD PTR _buf$26[ebp]
	call	?isDirty@Buffer@@QBE_NXZ		; Buffer::isDirty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN34@run_dlgPro
; Line 296
	mov	edx, DWORD PTR _pLvdi$31[ebp]
	mov	eax, DWORD PTR _len$30[ebp]
	cmp	eax, DWORD PTR [edx+36]
	jge	SHORT $LN33@run_dlgPro
; Line 298
	mov	ecx, DWORD PTR _pLvdi$31[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, 42					; 0000002aH
	mov	ecx, DWORD PTR _len$30[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	edx, DWORD PTR _len$30[ebp]
	add	edx, 1
	mov	DWORD PTR _len$30[ebp], edx
; Line 299
	mov	eax, DWORD PTR _pLvdi$31[ebp]
	mov	ecx, DWORD PTR [eax+32]
	xor	edx, edx
	mov	eax, DWORD PTR _len$30[ebp]
	mov	WORD PTR [ecx+eax*2], dx
$LN33@run_dlgPro:
; Line 301
	jmp	SHORT $LN32@run_dlgPro
$LN34@run_dlgPro:
; Line 302
	mov	ecx, DWORD PTR _buf$26[ebp]
	call	?isReadOnly@Buffer@@QBE_NXZ		; Buffer::isReadOnly
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN32@run_dlgPro
; Line 304
	mov	edx, DWORD PTR _readonlyString
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	add	eax, DWORD PTR _len$30[ebp]
	mov	DWORD PTR _len$30[ebp], eax
; Line 305
	mov	eax, DWORD PTR _pLvdi$31[ebp]
	mov	ecx, DWORD PTR _len$30[ebp]
	cmp	ecx, DWORD PTR [eax+36]
	jg	SHORT $LN32@run_dlgPro
; Line 306
	mov	edx, DWORD PTR _readonlyString
	push	edx
	mov	eax, DWORD PTR _pLvdi$31[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__lstrcatW@8
$LN32@run_dlgPro:
; Line 308
	jmp	$LN38@run_dlgPro
$LN35@run_dlgPro:
; Line 309
	mov	edx, DWORD PTR _pLvdi$31[ebp]
	cmp	DWORD PTR [edx+20], 1
	jne	$LN28@run_dlgPro
; Line 311
	mov	ecx, DWORD PTR _buf$26[ebp]
	call	?getFullPathName@Buffer@@QBEPB_WXZ	; Buffer::getFullPathName
	mov	DWORD PTR _fullName$21[ebp], eax
; Line 312
	mov	ecx, DWORD PTR _buf$26[ebp]
	call	?getFileName@Buffer@@QBEPB_WXZ		; Buffer::getFileName
	mov	DWORD PTR _fileName$9[ebp], eax
; Line 313
	mov	eax, DWORD PTR _fullName$21[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenW@4
	mov	esi, eax
	mov	ecx, DWORD PTR _fileName$9[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrlenW@4
	sub	esi, eax
	mov	DWORD PTR _len$25[ebp], esi
; Line 314
	jne	SHORT $LN27@run_dlgPro
; Line 315
	mov	DWORD PTR _len$25[ebp], 1
; Line 316
	mov	DWORD PTR _fullName$21[ebp], OFFSET $SG132341
$LN27@run_dlgPro:
; Line 318
	mov	edx, DWORD PTR _pLvdi$31[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	eax, DWORD PTR _len$25[ebp]
	jge	SHORT $LN26@run_dlgPro
; Line 319
	mov	ecx, DWORD PTR _pLvdi$31[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _len$25[ebp], edx
$LN26@run_dlgPro:
; Line 320
	mov	eax, DWORD PTR _len$25[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _fullName$21[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLvdi$31[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_wcsncpy
	add	esp, 12					; 0000000cH
; Line 321
	mov	ecx, DWORD PTR _pLvdi$31[ebp]
	mov	edx, DWORD PTR [ecx+32]
	xor	eax, eax
	mov	ecx, DWORD PTR _len$25[ebp]
	mov	WORD PTR [edx+ecx*2-2], ax
	jmp	SHORT $LN38@run_dlgPro
$LN28@run_dlgPro:
; Line 323
	mov	edx, DWORD PTR _pLvdi$31[ebp]
	cmp	DWORD PTR [edx+20], 2
	jne	SHORT $LN38@run_dlgPro
; Line 325
	mov	eax, DWORD PTR _pLvdi$31[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _len$10[ebp], ecx
; Line 326
	call	?getInstance@NppParameters@@SAPAV1@XZ	; NppParameters::getInstance
	mov	DWORD PTR _pNppParameters$12[ebp], eax
; Line 327
	mov	ecx, DWORD PTR _buf$26[ebp]
	call	?getLangType@Buffer@@QBE?AW4LangType@@XZ ; Buffer::getLangType
	push	eax
	mov	ecx, DWORD PTR _pNppParameters$12[ebp]
	call	?getLangFromID@NppParameters@@QBEPAULang@@W4LangType@@@Z ; NppParameters::getLangFromID
	mov	DWORD PTR _lang$15[ebp], eax
; Line 328
	cmp	DWORD PTR _lang$15[ebp], 0
	je	SHORT $LN38@run_dlgPro
; Line 330
	mov	edx, DWORD PTR _len$10[ebp]
	sub	edx, 1
	push	edx
	mov	ecx, DWORD PTR _lang$15[ebp]
	call	?getLangName@Lang@@QBEPB_WXZ		; Lang::getLangName
	push	eax
	mov	eax, DWORD PTR _pLvdi$31[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_wcsncpy
	add	esp, 12					; 0000000cH
$LN38@run_dlgPro:
; Line 334
	mov	eax, 1
	jmp	$LN55@run_dlgPro
	jmp	$LN53@run_dlgPro
$LN39@run_dlgPro:
; Line 336
	mov	edx, DWORD PTR _pNMHDR$27[ebp]
	cmp	DWORD PTR [edx+8], -108			; ffffff94H
	jne	$LN21@run_dlgPro
; Line 338
	mov	eax, DWORD PTR _pNMHDR$27[ebp]
	mov	DWORD PTR _pNMLV$16[ebp], eax
; Line 339
	mov	ecx, DWORD PTR _pNMLV$16[ebp]
	cmp	DWORD PTR [ecx+12], -1
	jne	$LN20@run_dlgPro
; Line 341
	mov	BYTE PTR _reverse$28[ebp], 0
; Line 342
	mov	edx, DWORD PTR _pNMLV$16[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _iColumn$19[ebp], eax
; Line 343
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	cmp	edx, DWORD PTR _iColumn$19[ebp]
	jne	SHORT $LN19@run_dlgPro
; Line 345
	mov	BYTE PTR _reverse$28[ebp], 1
; Line 346
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], -1
; Line 348
	jmp	SHORT $LN18@run_dlgPro
$LN19@run_dlgPro:
; Line 350
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iColumn$19[ebp]
	mov	DWORD PTR [ecx+80], edx
$LN18@run_dlgPro:
; Line 353
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	DWORD PTR _n$17[ebp], eax
; Line 354
	lea	ecx, DWORD PTR _sortMap$7[ebp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 355
	mov	eax, DWORD PTR _n$17[ebp]
	push	eax
	lea	ecx, DWORD PTR _sortMap$7[ebp]
	call	?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::resize
; Line 356
	mov	DWORD PTR _i$29[ebp], 0
	jmp	SHORT $LN17@run_dlgPro
$LN16@run_dlgPro:
	mov	ecx, DWORD PTR _i$29[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$29[ebp], ecx
$LN17@run_dlgPro:
	mov	edx, DWORD PTR _i$29[ebp]
	cmp	edx, DWORD PTR _n$17[ebp]
	jge	SHORT $LN15@run_dlgPro
	push	2
	mov	eax, DWORD PTR _i$29[ebp]
	push	eax
	push	4140					; 0000102cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
	mov	esi, eax
	mov	eax, DWORD PTR _i$29[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _sortMap$7[ebp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	DWORD PTR [eax], esi
	jmp	SHORT $LN16@run_dlgPro
$LN15@run_dlgPro:
; Line 357
	movzx	edx, BYTE PTR _reverse$28[ebp]
	push	edx
	mov	eax, DWORD PTR _iColumn$19[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0BufferEquivalent@@QAE@PAVDocTabView@@H_N@Z ; BufferEquivalent::BufferEquivalent
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T6[ebp], esp
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
	mov	DWORD PTR tv285[ebp], eax
	mov	edx, DWORD PTR tv285[ebp]
	mov	DWORD PTR tv464[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T5[ebp], esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
	mov	DWORD PTR tv468[ebp], eax
	mov	ecx, DWORD PTR tv468[ebp]
	mov	DWORD PTR tv467[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	call	??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z ; std::stable_sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,BufferEquivalent>
	add	esp, 40					; 00000028H
; Line 358
	mov	DWORD PTR _i$29[ebp], 0
	jmp	SHORT $LN14@run_dlgPro
$LN13@run_dlgPro:
	mov	edx, DWORD PTR _i$29[ebp]
	add	edx, 1
	mov	DWORD PTR _i$29[ebp], edx
$LN14@run_dlgPro:
	mov	eax, DWORD PTR _i$29[ebp]
	cmp	eax, DWORD PTR _n$17[ebp]
	jge	SHORT $LN12@run_dlgPro
	mov	DWORD PTR __macro_lvi$3[ebp+16], 2
	mov	ecx, DWORD PTR _i$29[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	ecx, DWORD PTR _sortMap$7[ebp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN58@run_dlgPro
	mov	DWORD PTR tv350[ebp], 2
	jmp	SHORT $LN59@run_dlgPro
$LN58@run_dlgPro:
	mov	DWORD PTR tv350[ebp], 0
$LN59@run_dlgPro:
	mov	eax, DWORD PTR tv350[ebp]
	mov	DWORD PTR __macro_lvi$3[ebp+12], eax
	lea	ecx, DWORD PTR __macro_lvi$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$29[ebp]
	push	edx
	push	4139					; 0000102bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
	jmp	SHORT $LN13@run_dlgPro
$LN12@run_dlgPro:
; Line 360
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__InvalidateRect@12
; Line 361
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+84], 1
; Line 362
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateButtonState@WindowsDlg@@IAEXXZ	; WindowsDlg::updateButtonState
; Line 363
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sortMap$7[ebp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
$LN20@run_dlgPro:
; Line 364
	mov	eax, 1
	jmp	$LN55@run_dlgPro
	jmp	$LN53@run_dlgPro
$LN21@run_dlgPro:
; Line 366
	mov	eax, DWORD PTR _pNMHDR$27[ebp]
	cmp	DWORD PTR [eax+8], -114			; ffffff8eH
	je	SHORT $LN9@run_dlgPro
	mov	ecx, DWORD PTR _pNMHDR$27[ebp]
	cmp	DWORD PTR [ecx+8], -101			; ffffff9bH
	je	SHORT $LN9@run_dlgPro
	mov	edx, DWORD PTR _pNMHDR$27[ebp]
	cmp	DWORD PTR [edx+8], -115			; ffffff8dH
	jne	SHORT $LN10@run_dlgPro
$LN9@run_dlgPro:
; Line 368
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateButtonState@WindowsDlg@@IAEXXZ	; WindowsDlg::updateButtonState
; Line 369
	mov	eax, 1
	jmp	$LN55@run_dlgPro
	jmp	$LN53@run_dlgPro
$LN10@run_dlgPro:
; Line 371
	mov	eax, DWORD PTR _pNMHDR$27[ebp]
	cmp	DWORD PTR [eax+8], -3			; fffffffdH
	jne	SHORT $LN7@run_dlgPro
; Line 373
	push	0
	push	1
	push	273					; 00000111H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__PostMessageW@16
; Line 374
	mov	eax, 1
	jmp	$LN55@run_dlgPro
	jmp	$LN53@run_dlgPro
$LN7@run_dlgPro:
; Line 376
	mov	eax, DWORD PTR _pNMHDR$27[ebp]
	cmp	DWORD PTR [eax+8], -155			; ffffff65H
	jne	$LN53@run_dlgPro
; Line 378
	mov	ecx, DWORD PTR _pNMHDR$27[ebp]
	mov	DWORD PTR _lvkd$14[ebp], ecx
; Line 380
	push	17					; 00000011H
	call	DWORD PTR __imp__GetKeyState@4
	mov	WORD PTR _ctrl$20[ebp], ax
; Line 381
	push	18					; 00000012H
	call	DWORD PTR __imp__GetKeyState@4
	mov	WORD PTR _alt$22[ebp], ax
; Line 382
	push	16					; 00000010H
	call	DWORD PTR __imp__GetKeyState@4
	mov	WORD PTR _shift$18[ebp], ax
; Line 383
	mov	edx, DWORD PTR _lvkd$14[ebp]
	movzx	eax, WORD PTR [edx+12]
	cmp	eax, 65					; 00000041H
	jne	SHORT $LN4@run_dlgPro
	movsx	ecx, WORD PTR _ctrl$20[ebp]
	test	ecx, ecx
	jge	SHORT $LN4@run_dlgPro
	movsx	edx, WORD PTR _alt$22[ebp]
	test	edx, edx
	jl	SHORT $LN4@run_dlgPro
	movsx	eax, WORD PTR _shift$18[ebp]
	test	eax, eax
	jl	SHORT $LN4@run_dlgPro
; Line 385
	mov	DWORD PTR _i$23[ebp], 0
	push	0
	push	0
	push	4100					; 00001004H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _n$13[ebp], eax
	jmp	SHORT $LN3@run_dlgPro
$LN2@run_dlgPro:
	mov	eax, DWORD PTR _i$23[ebp]
	add	eax, 1
	mov	DWORD PTR _i$23[ebp], eax
$LN3@run_dlgPro:
	mov	ecx, DWORD PTR _i$23[ebp]
	cmp	ecx, DWORD PTR _n$13[ebp]
	jge	SHORT $LN4@run_dlgPro
; Line 386
	mov	DWORD PTR __macro_lvi$2[ebp+16], 2
	mov	DWORD PTR __macro_lvi$2[ebp+12], 2
	lea	edx, DWORD PTR __macro_lvi$2[ebp]
	push	edx
	mov	eax, DWORD PTR _i$23[ebp]
	push	eax
	push	4139					; 0000102bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
	jmp	SHORT $LN2@run_dlgPro
$LN4@run_dlgPro:
; Line 388
	mov	eax, 1
	jmp	SHORT $LN55@run_dlgPro
$LN53@run_dlgPro:
; Line 394
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _message$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?run_dlgProc@SizeableDlg@@MAGHIIJ@Z	; SizeableDlg::run_dlgProc
$LN55@run_dlgPro:
; Line 395
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?run_dlgProc@WindowsDlg@@MAGHIIJ@Z$0:
	lea	ecx, DWORD PTR _sortMap$7[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$?run_dlgProc@WindowsDlg@@MAGHIIJ@Z$1:
	mov	ecx, DWORD PTR $T6[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?run_dlgProc@WindowsDlg@@MAGHIIJ@Z$2:
	mov	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ
__ehhandler$?run_dlgProc@WindowsDlg@@MAGHIIJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-276]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?run_dlgProc@WindowsDlg@@MAGHIIJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?run_dlgProc@WindowsDlg@@MAGHIIJ@Z ENDP			; WindowsDlg::run_dlgProc
; Function compile flags: /Odtp
_TEXT	SEGMENT
_nameW$1 = -60						; size = 4
_id$2 = -56						; size = 4
_sentinel$3 = -52					; size = 4
_nameW$4 = -48						; size = 4
_em$5 = -44						; size = 4
_encodingStr$6 = -40					; size = 4
_hItem$7 = -36						; size = 4
_wmc$ = -32						; size = 4
_element$8 = -28					; size = 4
_declaration$ = -24					; size = 4
_name$9 = -20						; size = 4
_nativeLangEncoding$ = -16				; size = 4
_titre$ = -12						; size = 4
_childNode$10 = -8					; size = 4
_this$ = -4						; size = 4
?changeDlgLang@WindowsDlg@@QAE_NXZ PROC			; WindowsDlg::changeDlgLang
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 425
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 426
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+88], 0
	jne	SHORT $LN8@changeDlgL
	xor	al, al
	jmp	$LN9@changeDlgL
$LN8@changeDlgL:
; Line 428
	call	?getInstance@WcharMbcsConvertor@@SAPAV1@XZ ; WcharMbcsConvertor::getInstance
	mov	DWORD PTR _wmc$[ebp], eax
; Line 429
	mov	DWORD PTR _nativeLangEncoding$[ebp], 0
; Line 430
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+88]
	call	?GetDocument@TiXmlNodeA@@QBEPAVTiXmlDocumentA@@XZ ; TiXmlNodeA::GetDocument
	mov	ecx, eax
	call	?FirstChild@TiXmlNodeA@@QBEPAV1@XZ	; TiXmlNodeA::FirstChild
	mov	ecx, eax
	call	?ToDeclaration@TiXmlNodeA@@QBEPAVTiXmlDeclarationA@@XZ ; TiXmlNodeA::ToDeclaration
	mov	DWORD PTR _declaration$[ebp], eax
; Line 431
	cmp	DWORD PTR _declaration$[ebp], 0
	je	SHORT $LN7@changeDlgL
; Line 433
	mov	ecx, DWORD PTR _declaration$[ebp]
	call	?Encoding@TiXmlDeclarationA@@QBEPBDXZ	; TiXmlDeclarationA::Encoding
	mov	DWORD PTR _encodingStr$6[ebp], eax
; Line 434
	call	?getInstance@EncodingMapper@@SAPAV1@XZ	; EncodingMapper::getInstance
	mov	DWORD PTR _em$5[ebp], eax
; Line 435
	mov	edx, DWORD PTR _encodingStr$6[ebp]
	push	edx
	mov	ecx, DWORD PTR _em$5[ebp]
	call	?getEncodingFromString@EncodingMapper@@QBEHPBD@Z ; EncodingMapper::getEncodingFromString
	mov	DWORD PTR _nativeLangEncoding$[ebp], eax
$LN7@changeDlgL:
; Line 439
	push	OFFSET $SG132585
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	call	?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement
	mov	ecx, eax
	call	?Attribute@TiXmlElementA@@QBEPBDPBD@Z	; TiXmlElementA::Attribute
	mov	DWORD PTR _titre$[ebp], eax
; Line 440
	cmp	DWORD PTR _titre$[ebp], 0
	je	SHORT $LN6@changeDlgL
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _titre$[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	test	ecx, ecx
	je	SHORT $LN6@changeDlgL
; Line 442
	push	0
	push	0
	push	-1
	mov	edx, DWORD PTR _nativeLangEncoding$[ebp]
	push	edx
	mov	eax, DWORD PTR _titre$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wmc$[ebp]
	call	?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar
	mov	DWORD PTR _nameW$4[ebp], eax
; Line 443
	mov	ecx, DWORD PTR _nameW$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
$LN6@changeDlgL:
; Line 447
	push	OFFSET $SG132589
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+88]
	call	?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::FirstChildElement
	mov	DWORD PTR _childNode$10[ebp], eax
; Line 448
	jmp	SHORT $LN5@changeDlgL
$LN4@changeDlgL:
; Line 449
	push	OFFSET $SG132593
	mov	ecx, DWORD PTR _childNode$10[ebp]
	call	?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z	; TiXmlNodeA::NextSibling
	mov	DWORD PTR _childNode$10[ebp], eax
$LN5@changeDlgL:
	cmp	DWORD PTR _childNode$10[ebp], 0
	je	$LN3@changeDlgL
; Line 451
	mov	ecx, DWORD PTR _childNode$10[ebp]
	call	?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement
	mov	DWORD PTR _element$8[ebp], eax
; Line 453
	lea	edx, DWORD PTR _id$2[ebp]
	push	edx
	push	OFFSET $SG132597
	mov	ecx, DWORD PTR _element$8[ebp]
	call	?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z ; TiXmlElementA::Attribute
	mov	DWORD PTR _sentinel$3[ebp], eax
; Line 454
	push	OFFSET $SG132599
	mov	ecx, DWORD PTR _element$8[ebp]
	call	?Attribute@TiXmlElementA@@QBEPBDPBD@Z	; TiXmlElementA::Attribute
	mov	DWORD PTR _name$9[ebp], eax
; Line 455
	cmp	DWORD PTR _sentinel$3[ebp], 0
	je	SHORT $LN2@changeDlgL
	cmp	DWORD PTR _name$9[ebp], 0
	je	SHORT $LN2@changeDlgL
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _name$9[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN2@changeDlgL
; Line 457
	mov	ecx, DWORD PTR _id$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hItem$7[ebp], eax
; Line 458
	cmp	DWORD PTR _hItem$7[ebp], 0
	je	SHORT $LN2@changeDlgL
; Line 460
	push	0
	push	0
	push	-1
	mov	ecx, DWORD PTR _nativeLangEncoding$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$9[ebp]
	push	edx
	mov	ecx, DWORD PTR _wmc$[ebp]
	call	?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar
	mov	DWORD PTR _nameW$1[ebp], eax
; Line 461
	mov	eax, DWORD PTR _nameW$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _hItem$7[ebp]
	push	ecx
	call	DWORD PTR __imp__SetWindowTextW@8
$LN2@changeDlgL:
; Line 464
	jmp	$LN4@changeDlgL
$LN3@changeDlgL:
; Line 465
	mov	al, 1
$LN9@changeDlgL:
; Line 466
	mov	esp, ebp
	pop	ebp
	ret	0
?changeDlgLang@WindowsDlg@@QAE_NXZ ENDP			; WindowsDlg::changeDlgLang
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_lp$1 = -32						; size = 4
tv143 = -28						; size = 4
_lo$2 = -24						; size = 4
tv91 = -20						; size = 4
_oldSize$3 = -16					; size = 4
_i$4 = -12						; size = 4
_count$5 = -8						; size = 4
_this$ = -4						; size = 4
_invalidate$ = 8					; size = 1
?doRefresh@WindowsDlg@@QAEX_N@Z PROC			; WindowsDlg::doRefresh
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 558
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx
; Line 559
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	$LN9@doRefresh
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	$LN9@doRefresh
; Line 561
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+40], 0
	je	$LN9@doRefresh
; Line 563
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN11@doRefresh
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?nbItem@TabBar@@QBEHXZ			; TabBar::nbItem
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN12@doRefresh
$LN11@doRefresh:
	mov	DWORD PTR tv91[ebp], 0
$LN12@doRefresh:
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _count$5[ebp], edx
; Line 564
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	DWORD PTR _oldSize$3[ebp], eax
; Line 565
	movzx	eax, BYTE PTR _invalidate$[ebp]
	test	eax, eax
	jne	SHORT $LN6@doRefresh
	mov	ecx, DWORD PTR _count$5[ebp]
	cmp	ecx, DWORD PTR _oldSize$3[ebp]
	jne	SHORT $LN6@doRefresh
; Line 566
	jmp	$LN9@doRefresh
$LN6@doRefresh:
; Line 568
	mov	edx, DWORD PTR _count$5[ebp]
	cmp	edx, DWORD PTR _oldSize$3[ebp]
	je	SHORT $LN5@doRefresh
; Line 570
	mov	DWORD PTR _lo$2[ebp], 0
; Line 571
	mov	eax, DWORD PTR _count$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::resize
; Line 572
	mov	ecx, DWORD PTR _oldSize$3[ebp]
	cmp	ecx, DWORD PTR _count$5[ebp]
	jae	SHORT $LN4@doRefresh
; Line 573
	mov	edx, DWORD PTR _oldSize$3[ebp]
	mov	DWORD PTR _lo$2[ebp], edx
$LN4@doRefresh:
; Line 574
	mov	eax, DWORD PTR _lo$2[ebp]
	mov	DWORD PTR _i$4[ebp], eax
	jmp	SHORT $LN3@doRefresh
$LN2@doRefresh:
	mov	ecx, DWORD PTR _i$4[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$4[ebp], ecx
$LN3@doRefresh:
	mov	edx, DWORD PTR _i$4[ebp]
	cmp	edx, DWORD PTR _count$5[ebp]
	jae	SHORT $LN5@doRefresh
; Line 575
	mov	eax, DWORD PTR _i$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR _i$4[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN2@doRefresh
$LN5@doRefresh:
; Line 577
	movzx	edx, BYTE PTR _invalidate$[ebp]
	test	edx, edx
	je	SHORT $LN13@doRefresh
	mov	DWORD PTR tv143[ebp], 3
	jmp	SHORT $LN14@doRefresh
$LN13@doRefresh:
	mov	DWORD PTR tv143[ebp], 2
$LN14@doRefresh:
	mov	eax, DWORD PTR tv143[ebp]
	mov	DWORD PTR _lp$1[ebp], eax
; Line 579
	mov	ecx, DWORD PTR _lp$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$5[ebp]
	push	edx
	push	4143					; 0000102fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
; Line 580
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__InvalidateRect@12
; Line 582
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resetSelection@WindowsDlg@@IAEXXZ	; WindowsDlg::resetSelection
; Line 583
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateButtonState@WindowsDlg@@IAEXXZ	; WindowsDlg::updateButtonState
$LN9@doRefresh:
; Line 586
	mov	esp, ebp
	pop	ebp
	ret	4
?doRefresh@WindowsDlg@@QAEX_N@Z ENDP			; WindowsDlg::doRefresh
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hInst$ = 8						; size = 4
_parent$ = 12						; size = 4
_pTab$ = 16						; size = 4
?init@WindowsDlg@@UAEXPAUHINSTANCE__@@PAUHWND__@@PAVDocTabView@@@Z PROC ; WindowsDlg::init
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 209
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 210
	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hInst$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; Window::init
; Line 211
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pTab$[ebp]
	mov	DWORD PTR [edx+60], eax
; Line 212
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?init@WindowsDlg@@UAEXPAUHINSTANCE__@@PAUHWND__@@PAVDocTabView@@@Z ENDP ; WindowsDlg::init
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dlgNode$ = 8						; size = 4
?doDialog@WindowsDlg@@QAEHPAVTiXmlNodeA@@@Z PROC	; WindowsDlg::doDialog
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 419
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 420
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dlgNode$[ebp]
	mov	DWORD PTR [eax+88], ecx
; Line 421
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	push	OFFSET ?dlgProc@StaticDialog@@KGHPAUHWND__@@IIJ@Z ; StaticDialog::dlgProc
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	7000					; 00001b58H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__DialogBoxParamW@20
; Line 422
	mov	esp, ebp
	pop	ebp
	ret	4
?doDialog@WindowsDlg@@QAEHPAVTiXmlNodeA@@@Z ENDP	; WindowsDlg::doDialog
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0WindowsDlg@@QAE@XZ PROC				; WindowsDlg::WindowsDlg
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.cpp
; Line 203
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0WindowsDlg@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ?WindowsDlgMap@@3PAVWINRECT@@A	; WindowsDlgMap
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0SizeableDlg@@QAE@PAVWINRECT@@@Z	; SizeableDlg::SizeableDlg
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7WindowsDlg@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+84], 0
; Line 204
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _SIZEZERO
	mov	DWORD PTR [edx+44], eax
	mov	ecx, DWORD PTR _SIZEZERO+4
	mov	DWORD PTR [edx+48], ecx
; Line 205
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _SIZEZERO
	mov	DWORD PTR [edx+52], eax
	mov	ecx, DWORD PTR _SIZEZERO+4
	mov	DWORD PTR [edx+56], ecx
; Line 206
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0WindowsDlg@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1SizeableDlg@@UAE@XZ
__unwindfunclet$??0WindowsDlg@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$??0WindowsDlg@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0WindowsDlg@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0WindowsDlg@@QAE@XZ ENDP				; WindowsDlg::WindowsDlg
; Function compile flags: /Odtp
;	COMDAT ??0NMWINDLG@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0NMWINDLG@@QAE@XZ PROC				; NMWINDLG::NMWINDLG, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\windowsdlg.h
; Line 55
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	32					; 00000020H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0NMWINDLG@@QAE@XZ ENDP				; NMWINDLG::NMWINDLG
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ
_TEXT	SEGMENT
?getInstance@WcharMbcsConvertor@@SAPAV1@XZ PROC		; WcharMbcsConvertor::getInstance, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\misc\common\common.h
; Line 122
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?_pSelf@WcharMbcsConvertor@@1PAV1@A ; WcharMbcsConvertor::_pSelf
	pop	ebp
	ret	0
?getInstance@WcharMbcsConvertor@@SAPAV1@XZ ENDP		; WcharMbcsConvertor::getInstance
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2294
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2295
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:
; Line 2296
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2289
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2290
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:
; Line 2291
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2272
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2273
	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:
; Line 2275
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 8
	jb	SHORT $LN3@Tidy
; Line 2277
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Ptr$1[ebp], eax
; Line 2278
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>
; Line 2279
	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy
; Line 2281
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@_W@std@@YAPA_WAA_W@Z	; std::addressof<wchar_t>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:
; Line 2282
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN3@Tidy:
; Line 2284
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 7
; Line 2285
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
; Line 2286
	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2256
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2258
	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	lea	eax, DWORD PTR [eax+edx*2]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:
; Line 2259
	xor	al, al
	jmp	SHORT $LN4@Inside
; Line 2260
	jmp	SHORT $LN4@Inside
$LN3@Inside:
; Line 2261
	mov	al, 1
$LN4@Inside:
; Line 2262
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2242
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2243
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow
; Line 2244
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN6@Grow:
; Line 2245
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow
; Line 2246
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:
; Line 2247
	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 8
	jae	SHORT $LN3@Grow
; Line 2249
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:
; Line 2250
	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow
; Line 2251
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN4@Grow:
; Line 2252
	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:
; Line 2253
	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -2						; size = 2
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2236
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 2237
	xor	eax, eax
	mov	WORD PTR $T1[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [ecx+20], edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Newsize$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign
	add	esp, 8
; Line 2238
	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
_TEXT	SEGMENT
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2201
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 2202
	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 7
	mov	DWORD PTR __Newres$[ebp], eax
; Line 2203
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy
; Line 2204
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:
; Line 2205
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	shr	ecx, 1
	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	esi, 3
	div	esi
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:
; Line 2207
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	shr	ecx, 1
	sub	eax, ecx
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], eax
	ja	SHORT $LN5@Copy
; Line 2209
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR __Newres$[ebp], ecx
; Line 2210
	jmp	SHORT $LN8@Copy
$LN5@Copy:
; Line 2211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:
; Line 2214
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 2215
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0:
; Line 2216
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 2217
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx
; Line 2218
	mov	BYTE PTR __$EHRec$[ebp+12], 2
; Line 2219
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1:
; Line 2221
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Line 2222
	push	0
	push	0
	call	__CxxThrowException@8
; Line 2223
	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$2:
; Line 2224
	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$3:
; Line 2226
	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy
; Line 2228
	mov	edx, DWORD PTR __Oldlen$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	push	eax
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:
; Line 2229
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Line 2230
	lea	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
; Line 2231
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 2232
	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN11@Copy:
; Line 2233
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1758
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 1759
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size
	mov	DWORD PTR __Num$[ebp], eax
; Line 1760
	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]
; Line 1761
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1753
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1754
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
; Line 1755
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1738
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1739
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
; Line 1740
	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::end, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1609
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1610
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	lea	eax, DWORD PTR [eax+edx*2]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 1
	mov	DWORD PTR $T2[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1611
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@end
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
$LN4@end:
	ret	0
__ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::end
; Function compile flags: /Odtp
;	COMDAT ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::begin, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1599
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 1600
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 1
	mov	DWORD PTR $T2[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1601
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN4@begin
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
$LN4@begin:
	ret	0
__ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::begin
; Function compile flags: /Odtp
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1342
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1343
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase
; Line 1344
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN4@erase:
; Line 1345
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase
; Line 1346
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:
; Line 1347
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase
; Line 1349
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [eax+edx*2]
	mov	DWORD PTR __Ptr$2[ebp], eax
; Line 1350
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], edx
; Line 1351
	mov	eax, DWORD PTR __Newsize$1[ebp]
	sub	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Ptr$2[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR __Ptr$2[ebp]
	push	ecx
	call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move
	add	esp, 12					; 0000000cH
; Line 1352
	mov	edx, DWORD PTR __Newsize$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN2@erase:
; Line 1354
	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:
; Line 1355
	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1334
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1335
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase
; Line 1336
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN1@erase:
; Line 1337
	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
; Line 1338
	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:
; Line 1339
	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1168
	push	1168					; 00000490H
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH
; Line 1169
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?length@?$char_traits@_W@std@@SAIPB_W@Z	; std::char_traits<wchar_t>::length
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Line 1170
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1148
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1150
	cmp	DWORD PTR __Count$[ebp], 0
	je	SHORT $LN3@assign
; Line 1151
	push	1151					; 0000047fH
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH
$LN3@assign:
; Line 1154
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@assign
; Line 1156
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	sar	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
	jmp	SHORT $LN4@assign
$LN2@assign:
; Line 1158
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign
; Line 1160
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	push	eax
	call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy
	add	esp, 12					; 0000000cH
; Line 1161
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN1@assign:
; Line 1163
	mov	eax, DWORD PTR _this$[ebp]
$LN4@assign:
; Line 1164
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1129
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1130
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign
; Line 1131
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN5@assign:
; Line 1132
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
; Line 1133
	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign
; Line 1134
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:
; Line 1136
	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign
; Line 1137
	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:
; Line 1138
	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign
; Line 1141
	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	edx, DWORD PTR __Roff$[ebp]
	lea	eax, DWORD PTR [eax+edx*2]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	push	eax
	call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy
	add	esp, 12					; 0000000cH
; Line 1142
	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN2@assign:
; Line 1144
	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:
; Line 1145
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1085
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1086
	push	1086					; 0000043eH
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH
; Line 1087
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?length@?$char_traits@_W@std@@SAIPB_W@Z	; std::char_traits<wchar_t>::length
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Line 1088
	mov	esp, ebp
	pop	ebp
	ret	4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1063
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1065
	cmp	DWORD PTR __Count$[ebp], 0
	je	SHORT $LN4@append
; Line 1066
	push	1066					; 0000042aH
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH
$LN4@append:
; Line 1069
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@append
; Line 1071
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	sar	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
	jmp	SHORT $LN6@append
$LN3@append:
; Line 1072
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::npos
	sub	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Count$[ebp]
	ja	SHORT $LN2@append
; Line 1073
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN2@append:
; Line 1076
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@append
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
	push	0
	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@append
; Line 1078
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy
	add	esp, 12					; 0000000cH
; Line 1079
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN1@append:
; Line 1081
	mov	eax, DWORD PTR _this$[ebp]
$LN6@append:
; Line 1082
	mov	esp, ebp
	pop	ebp
	ret	8
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1044
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1045
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN4@append
; Line 1046
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN4@append:
; Line 1047
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
; Line 1048
	mov	eax, DWORD PTR __Num$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN3@append
; Line 1049
	mov	ecx, DWORD PTR __Num$[ebp]
	mov	DWORD PTR __Count$[ebp], ecx
$LN3@append:
; Line 1050
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::npos
	sub	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN2@append
; Line 1051
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN2@append:
; Line 1053
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@append
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], edx
	push	0
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@append
; Line 1056
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Roff$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	lea	eax, DWORD PTR [eax+edx*2]
	push	eax
	call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy
	add	esp, 12					; 0000000cH
; Line 1057
	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN1@append:
; Line 1059
	mov	eax, DWORD PTR _this$[ebp]
$LN6@append:
; Line 1060
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1028
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1029
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Line 1030
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 990
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 991
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Line 992
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
__ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Odtp
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 780
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@_W@std@@QAE@XZ		; std::allocator<wchar_t>::allocator<wchar_t>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 781
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Line 782
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Line 783
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Odtp
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 683
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 684
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 685
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 672
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 674
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
; Line 675
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 676
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
; Line 677
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
; Line 678
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 679
	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 663
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 665
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
; Line 666
	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 667
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
; Line 668
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 669
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 649
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 650
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy
; Line 651
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 643
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 645
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy
; Line 646
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
; Function compile flags: /Odtp
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 517
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 520
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 8
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$addressof@_W@std@@YAPA_WAA_W@Z	; std::addressof<wchar_t>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]
; Line 521
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 510
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 513
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 8
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$addressof@_W@std@@YAPA_WAA_W@Z	; std::addressof<wchar_t>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]
; Line 514
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 492
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 494
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 495
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 496
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 883
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t> >::max_size
	add	esp, 4
; Line 885
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@_W@std@@QAE@XZ		; std::allocator<wchar_t>::allocator<wchar_t>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 734
	push	ebp
	mov	ebp, esp
; Line 735
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@_W@std@@QBEIXZ	; std::allocator<wchar_t>::max_size
; Line 736
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@_W@std@@QBEIXZ PROC		; std::allocator<wchar_t>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 611
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 612
	mov	eax, 2147483647				; 7fffffffH
; Line 613
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@_W@std@@QBEIXZ ENDP		; std::allocator<wchar_t>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		; std::allocator<wchar_t>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@_W@std@@YAPA_WIPA_W@Z	; std::_Allocate<wchar_t>
	add	esp, 8
; Line 579
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z ENDP		; std::allocator<wchar_t>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@_W@std@@QAE@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@_W@std@@QAE@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$swap@H@std@@YAXAAH0@Z
_TEXT	SEGMENT
__Tmp$ = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@H@std@@YAXAAH0@Z PROC				; std::swap<int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; Line 51
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 52
	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx
; Line 53
	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
; Line 54
	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
; Line 55
	mov	esp, ebp
	pop	ebp
	ret	0
??$swap@H@std@@YAXAAH0@Z ENDP				; std::swap<int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_System_error_category@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Generic_error_category@std@@UAE@XZ
__ehhandler$??1_System_error_category@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_System_error_category@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
; Function compile flags: /Odtp
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 614
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 615
	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er
; Line 616
	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er
; Line 617
	jmp	SHORT $LN3@default_er
$LN2@default_er:
; Line 618
	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:
; Line 619
	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T2 = -24						; size = 4
tv69 = -20						; size = 4
__Name$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 607
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 608
	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax
; Line 609
	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 610
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN6@message
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN6@message:
	ret	0
__ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
; Function compile flags: /Odtp
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 602
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 603
	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@
; Line 604
	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 597
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0_System_error_category@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@
; Line 599
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_System_error_category@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Generic_error_category@std@@UAE@XZ
__ehhandler$??0_System_error_category@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0_System_error_category@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Generic_error_category@std@@UAE@XZ
__ehhandler$??1_Iostream_error_category@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
; Function compile flags: /Odtp
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 584
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 585
	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message
; Line 586
	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message
; Line 587
	jmp	SHORT $LN3@message
$LN2@message:
; Line 588
	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:
; Line 589
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN6@message
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN6@message:
	ret	0
__ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
; Function compile flags: /Odtp
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 579
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 580
	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@
; Line 581
	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 574
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0_Iostream_error_category@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@
; Line 576
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Generic_error_category@std@@UAE@XZ
__ehhandler$??0_Iostream_error_category@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
__ehhandler$??1_Generic_error_category@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
; Function compile flags: /Odtp
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T2 = -24						; size = 4
tv69 = -20						; size = 4
__Name$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 563
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
; Line 564
	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax
; Line 565
	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 566
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN6@message
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN6@message:
	ret	0
__ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
; Function compile flags: /Odtp
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 558
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 559
	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@
; Line 560
	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 553
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0_Generic_error_category@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@
; Line 555
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
__ehhandler$??0_Generic_error_category@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
; Function compile flags: /Odtp
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 352
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
; Line 354
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]
; Line 355
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 337
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 338
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 339
	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 332
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 333
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 334
	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 299
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 300
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 246
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 247
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 248
	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 241
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 242
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 243
	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 176
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]
; Line 178
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 391
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 392
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]
; Line 393
	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 384
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 385
	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==
; Line 386
	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 377
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 378
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 379
	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 159
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@
; Line 160
	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 154
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@
; Line 156
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 652
	push	ebp
	mov	ebp, esp
; Line 653
	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
; Line 654
	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
; Line 642
	push	ebp
	mov	ebp, esp
; Line 643
	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
; Line 644
	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@_W@std@@YAXPB_W0I@Z PROC		; std::_Debug_pointer<wchar_t>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 545
	push	ebp
	mov	ebp, esp
; Line 546
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 547
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 548
	pop	ebp
	ret	0
??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ENDP		; std::_Debug_pointer<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z PROC		; std::_Debug_pointer<wchar_t>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 552
	push	ebp
	mov	ebp, esp
; Line 553
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 554
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 555
	pop	ebp
	ret	0
??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z ENDP		; std::_Debug_pointer<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z PROC		; std::_Debug_pointer<char>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 545
	push	ebp
	mov	ebp, esp
; Line 546
	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin
; Line 547
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:
; Line 548
	pop	ebp
	ret	0
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ENDP		; std::_Debug_pointer<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??$_Debug_range@PA_W@std@@YAXPA_W0PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PA_W@std@@YAXPA_W0PB_WI@Z PROC		; std::_Debug_range<wchar_t *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 583
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 584
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PA_W@std@@YA?AUrandom_access_iterator_tag@0@ABQA_W@Z ; std::_Iter_cat<wchar_t *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range2@PA_W@std@@YAXPA_W0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<wchar_t *>
	add	esp, 20					; 00000014H
; Line 585
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PA_W@std@@YAXPA_W0PB_WI@Z ENDP		; std::_Debug_range<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xlocale
; Line 74
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 75
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2294
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2295
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:
; Line 2296
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2289
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2290
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:
; Line 2291
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2272
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2273
	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:
; Line 2275
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 16			; 00000010H
	jb	SHORT $LN3@Tidy
; Line 2277
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Ptr$1[ebp], eax
; Line 2278
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
; Line 2279
	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy
; Line 2281
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:
; Line 2282
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:
; Line 2284
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 15			; 0000000fH
; Line 2285
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Line 2286
	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2256
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2258
	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:
; Line 2259
	xor	al, al
	jmp	SHORT $LN4@Inside
; Line 2260
	jmp	SHORT $LN4@Inside
$LN3@Inside:
; Line 2261
	mov	al, 1
$LN4@Inside:
; Line 2262
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2242
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2243
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow
; Line 2244
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:
; Line 2245
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow
; Line 2246
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:
; Line 2247
	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow
; Line 2249
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:
; Line 2250
	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow
; Line 2251
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:
; Line 2252
	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:
; Line 2253
	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2236
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 2237
	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+20], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8
; Line 2238
	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 2201
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 2202
	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax
; Line 2203
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy
; Line 2204
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:
; Line 2205
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	shr	ecx, 1
	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	esi, 3
	div	esi
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:
; Line 2207
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	shr	ecx, 1
	sub	eax, ecx
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], eax
	ja	SHORT $LN5@Copy
; Line 2209
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR __Newres$[ebp], ecx
; Line 2210
	jmp	SHORT $LN8@Copy
$LN5@Copy:
; Line 2211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:
; Line 2214
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 2215
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:
; Line 2216
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 2217
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx
; Line 2218
	mov	BYTE PTR __$EHRec$[ebp+12], 2
; Line 2219
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:
; Line 2221
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Line 2222
	push	0
	push	0
	call	__CxxThrowException@8
; Line 2223
	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:
; Line 2224
	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:
; Line 2226
	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy
; Line 2228
	mov	edx, DWORD PTR __Oldlen$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:
; Line 2229
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Line 2230
	lea	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
; Line 2231
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 2232
	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:
; Line 2233
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1758
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 1759
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax
; Line 1760
	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]
; Line 1761
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1753
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1754
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
; Line 1755
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1738
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1739
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
; Line 1740
	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1342
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1343
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase
; Line 1344
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:
; Line 1345
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase
; Line 1346
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:
; Line 1347
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase
; Line 1349
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax
; Line 1350
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax
; Line 1351
	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH
; Line 1352
	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:
; Line 1354
	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:
; Line 1355
	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1334
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1335
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase
; Line 1336
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:
; Line 1337
	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Line 1338
	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:
; Line 1339
	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1168
	push	1168					; 00000490H
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	; std::_Debug_pointer<char>
	add	esp, 12					; 0000000cH
; Line 1169
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Line 1170
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1148
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1150
	cmp	DWORD PTR __Count$[ebp], 0
	je	SHORT $LN3@assign
; Line 1151
	push	1151					; 0000047fH
	push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	; std::_Debug_pointer<char>
	add	esp, 12					; 0000000cH
$LN3@assign:
; Line 1154
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@assign
; Line 1156
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN4@assign
$LN2@assign:
; Line 1158
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign
; Line 1160
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
; Line 1161
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:
; Line 1163
	mov	eax, DWORD PTR _this$[ebp]
$LN4@assign:
; Line 1164
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 1129
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1130
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign
; Line 1131
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:
; Line 1132
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
; Line 1133
	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign
; Line 1134
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:
; Line 1136
	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign
; Line 1137
	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:
; Line 1138
	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign
; Line 1141
	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
; Line 1142
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:
; Line 1144
	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:
; Line 1145
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 990
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 991
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Line 992
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 780
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 781
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Line 782
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Line 783
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 683
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 684
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 685
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 672
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 674
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
; Line 675
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 676
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
; Line 677
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
; Line 678
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 679
	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Alproxy$ = -1						; size = 1
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 663
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 665
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
; Line 666
	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 667
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
; Line 668
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 669
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 649
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 650
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
; Line 651
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
; Function compile flags: /Odtp
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 643
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 645
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
; Line 646
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
; Function compile flags: /Odtp
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 517
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 520
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]
; Line 521
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 510
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 513
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]
; Line 514
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
; Line 492
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 494
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 495
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 496
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 883
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4
; Line 885
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate
; Line 859
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 734
	push	ebp
	mov	ebp, esp
; Line 735
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size
; Line 736
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 611
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 612
	or	eax, -1
; Line 613
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8
; Line 579
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1SizeableDlg@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1SizeableDlg@@UAE@XZ PROC				; SizeableDlg::~SizeableDlg, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1SizeableDlg@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1CWinMgr@@UAE@XZ			; CWinMgr::~CWinMgr
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1StaticDialog@@UAE@XZ			; StaticDialog::~StaticDialog
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1SizeableDlg@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1StaticDialog@@UAE@XZ			; StaticDialog::~StaticDialog
__unwindfunclet$??1SizeableDlg@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1CWinMgr@@UAE@XZ			; CWinMgr::~CWinMgr
__ehhandler$??1SizeableDlg@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1SizeableDlg@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1SizeableDlg@@UAE@XZ ENDP				; SizeableDlg::~SizeableDlg
; Function compile flags: /Odtp
;	COMDAT ??_GStaticDialog@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GStaticDialog@@UAEPAXI@Z PROC			; StaticDialog::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1StaticDialog@@UAE@XZ			; StaticDialog::~StaticDialog
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GStaticDialog@@UAEPAXI@Z ENDP			; StaticDialog::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?destroy@StaticDialog@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?destroy@StaticDialog@@UAEXXZ PROC			; StaticDialog::destroy, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\staticdialog\staticdialog.h
; Line 90
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	1
	push	2036					; 000007f4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
; Line 92
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__DestroyWindow@4
; Line 93
	mov	esp, ebp
	pop	ebp
	ret	0
?destroy@StaticDialog@@UAEXXZ ENDP			; StaticDialog::destroy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?isCreated@StaticDialog@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv70 = -4						; size = 4
?isCreated@StaticDialog@@UBE_NXZ PROC			; StaticDialog::isCreated, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\staticdialog\staticdialog.h
; Line 65
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 66
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@isCreated
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@isCreated
$LN3@isCreated:
	mov	DWORD PTR tv70[ebp], 0
$LN4@isCreated:
	mov	al, BYTE PTR tv70[ebp]
; Line 67
	mov	esp, ebp
	pop	ebp
	ret	0
?isCreated@StaticDialog@@UBE_NXZ ENDP			; StaticDialog::isCreated
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1StaticDialog@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1StaticDialog@@UAE@XZ PROC				; StaticDialog::~StaticDialog, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\staticdialog\staticdialog.h
; Line 57
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1StaticDialog@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7StaticDialog@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 58
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isCreated@StaticDialog@@UBE_NXZ	; StaticDialog::isCreated
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@StaticDial
; Line 59
	push	0
	push	-21					; ffffffebH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SetWindowLongW@12
; Line 60
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@StaticDialog@@UAEXXZ		; StaticDialog::destroy
$LN2@StaticDial:
; Line 62
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Window@@UAE@XZ			; Window::~Window
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1StaticDialog@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Window@@UAE@XZ			; Window::~Window
__ehhandler$??1StaticDialog@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1StaticDialog@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1StaticDialog@@UAE@XZ ENDP				; StaticDialog::~StaticDialog
; Function compile flags: /Odtp
;	COMDAT ??_GWindow@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GWindow@@UAEPAXI@Z PROC				; Window::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Window@@UAE@XZ			; Window::~Window
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GWindow@@UAEPAXI@Z ENDP				; Window::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?isVisible@Window@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -1						; size = 1
?isVisible@Window@@UBE_NXZ PROC				; Window::isVisible, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 92
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 93
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__IsWindowVisible@4
	test	eax, eax
	je	SHORT $LN3@isVisible
	mov	BYTE PTR tv68[ebp], 1
	jmp	SHORT $LN4@isVisible
$LN3@isVisible:
	mov	BYTE PTR tv68[ebp], 0
$LN4@isVisible:
	mov	al, BYTE PTR tv68[ebp]
; Line 94
	mov	esp, ebp
	pop	ebp
	ret	0
?isVisible@Window@@UBE_NXZ ENDP				; Window::isVisible
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getHeight@Window@@UBEHXZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
_rc$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?getHeight@Window@@UBEHXZ PROC				; Window::getHeight, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 84
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__GetClientRect@8
; Line 87
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__IsWindowVisible@4
	cmp	eax, 1
	jne	SHORT $LN1@getHeight
; Line 88
	mov	eax, DWORD PTR _rc$[ebp+12]
	sub	eax, DWORD PTR _rc$[ebp+4]
	jmp	SHORT $LN2@getHeight
$LN1@getHeight:
; Line 89
	xor	eax, eax
$LN2@getHeight:
; Line 90
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?getHeight@Window@@UBEHXZ ENDP				; Window::getHeight
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getWidth@Window@@UBEHXZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
_rc$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?getWidth@Window@@UBEHXZ PROC				; Window::getWidth, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 78
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 80
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__GetClientRect@8
; Line 81
	mov	eax, DWORD PTR _rc$[ebp+8]
	sub	eax, DWORD PTR _rc$[ebp]
; Line 82
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?getWidth@Window@@UBEHXZ ENDP				; Window::getWidth
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rc$ = 8						; size = 4
?getWindowRect@Window@@UBEXAAUtagRECT@@@Z PROC		; Window::getWindowRect, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 74
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__GetWindowRect@8
; Line 76
	mov	esp, ebp
	pop	ebp
	ret	4
?getWindowRect@Window@@UBEXAAUtagRECT@@@Z ENDP		; Window::getWindowRect
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?getClientRect@Window@@UBEXAAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rc$ = 8						; size = 4
?getClientRect@Window@@UBEXAAUtagRECT@@@Z PROC		; Window::getClientRect, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 71
	mov	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__GetClientRect@8
; Line 72
	mov	esp, ebp
	pop	ebp
	ret	4
?getClientRect@Window@@UBEXAAUtagRECT@@@Z ENDP		; Window::getClientRect
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?redraw@Window@@UBEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_forceUpdate$ = 8					; size = 1
?redraw@Window@@UBEX_N@Z PROC				; Window::redraw, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 64
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 65
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__InvalidateRect@12
; Line 66
	movzx	edx, BYTE PTR _forceUpdate$[ebp]
	test	edx, edx
	je	SHORT $LN2@redraw
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__UpdateWindow@4
$LN2@redraw:
; Line 68
	mov	esp, ebp
	pop	ebp
	ret	4
?redraw@Window@@UBEX_N@Z ENDP				; Window::redraw
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rc$ = 8						; size = 4
?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z PROC		; Window::reSizeToWH, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 59
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 60
	push	1
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _rc$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__MoveWindow@24
; Line 61
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
; Line 62
	mov	esp, ebp
	pop	ebp
	ret	4
?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z ENDP		; Window::reSizeToWH
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rc$ = 8						; size = 4
?reSizeTo@Window@@UAEXAAUtagRECT@@@Z PROC		; Window::reSizeTo, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 53
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 54
	push	1
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _rc$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__MoveWindow@24
; Line 55
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
; Line 56
	mov	esp, ebp
	pop	ebp
	ret	4
?reSizeTo@Window@@UAEXAAUtagRECT@@@Z ENDP		; Window::reSizeTo
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?display@Window@@UBEX_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_toShow$ = 8						; size = 1
?display@Window@@UBEX_N@Z PROC				; Window::display, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	movzx	eax, BYTE PTR _toShow$[ebp]
	test	eax, eax
	je	SHORT $LN3@display
	mov	DWORD PTR tv67[ebp], 5
	jmp	SHORT $LN4@display
$LN3@display:
	mov	DWORD PTR tv67[ebp], 0
$LN4@display:
	mov	ecx, DWORD PTR tv67[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__ShowWindow@8
; Line 50
	mov	esp, ebp
	pop	ebp
	ret	4
?display@Window@@UBEX_N@Z ENDP				; Window::display
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hInst$ = 8						; size = 4
_parent$ = 12						; size = 4
?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z PROC	; Window::init, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 42
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _hInst$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 43
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _parent$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 44
	mov	esp, ebp
	pop	ebp
	ret	8
?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ENDP	; Window::init
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1Window@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Window@@UAE@XZ PROC					; Window::~Window, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\window.h
; Line 38
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Window@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1Window@@UAE@XZ ENDP					; Window::~Window
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?GetRect@CWinMgr@@QAE?AUtagRECT@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_nID$ = 12						; size = 4
?GetRect@CWinMgr@@QAE?AUtagRECT@@I@Z PROC		; CWinMgr::GetRect, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 264
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _nID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindRect@CWinMgr@@QAEPAVWINRECT@@H@Z	; CWinMgr::FindRect
	mov	ecx, eax
	call	?GetRect@WINRECT@@QAEAAUtagRECT@@XZ	; WINRECT::GetRect
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
?GetRect@CWinMgr@@QAE?AUtagRECT@@I@Z ENDP		; CWinMgr::GetRect
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?CalcLayout@CWinMgr@@QAEXUtagRECT@@PAUHWND__@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rcTotal$ = 8						; size = 16
_hWnd$ = 24						; size = 4
?CalcLayout@CWinMgr@@QAEXUtagRECT@@PAUHWND__@@@Z PROC	; CWinMgr::CalcLayout, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 252
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 253
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@CalcLayout
	push	253					; 000000fdH
	push	OFFSET ??_C@_1KO@LJAFCIDL@?$AAc?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@
	push	OFFSET ??_C@_1M@JJLBEALK@?$AAm?$AA_?$AAm?$AAa?$AAp?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@CalcLayout:
; Line 254
	lea	edx, DWORD PTR _rcTotal$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?SetRect@WINRECT@@QAEXABUtagRECT@@@Z	; WINRECT::SetRect
; Line 255
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
; Line 256
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?CalcLayout@CWinMgr@@QAEXUtagRECT@@PAUHWND__@@@Z ENDP	; CWinMgr::CalcLayout
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?CalcLayout@CWinMgr@@QAEXPAUHWND__@@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
_rcClient$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
?CalcLayout@CWinMgr@@QAEXPAUHWND__@@@Z PROC		; CWinMgr::CalcLayout, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 238
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 239
	cmp	DWORD PTR _hWnd$[ebp], 0
	jne	SHORT $LN3@CalcLayout
	push	239					; 000000efH
	push	OFFSET ??_C@_1KO@LJAFCIDL@?$AAc?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@
	push	OFFSET ??_C@_19HBMCHKM@?$AAh?$AAW?$AAn?$AAd?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@CalcLayout:
; Line 241
	lea	ecx, DWORD PTR _rcClient$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetClientRect@8
; Line 242
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _rcClient$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _rcClient$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _rcClient$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _rcClient$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcLayout@CWinMgr@@QAEXUtagRECT@@PAUHWND__@@@Z ; CWinMgr::CalcLayout
; Line 243
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?CalcLayout@CWinMgr@@QAEXPAUHWND__@@@Z ENDP		; CWinMgr::CalcLayout
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?SetRect@WINRECT@@QAEXABUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_r$ = 8							; size = 4
?SetRect@WINRECT@@QAEXABUtagRECT@@@Z PROC		; WINRECT::SetRect, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 125
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRect@WINRECT@@QAEXABUtagRECT@@@Z ENDP		; WINRECT::SetRect
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?GetRect@WINRECT@@QAEAAUtagRECT@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRect@WINRECT@@QAEAAUtagRECT@@XZ PROC		; WINRECT::GetRect, COMDAT
; _this$ = ecx
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 124
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRect@WINRECT@@QAEAAUtagRECT@@XZ ENDP		; WINRECT::GetRect
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
_rc$ = 8						; size = 4
?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z PROC		; RectToSize, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 40
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 41
	mov	eax, DWORD PTR _rc$[ebp]
	push	eax
	call	?RectHeight@@YAJABUtagRECT@@@Z		; RectHeight
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	call	?RectWidth@@YAJABUtagRECT@@@Z		; RectWidth
	add	esp, 4
	push	eax
	call	?GetSize@@YA?AUtagSIZE@@JJ@Z		; GetSize
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR $T1[ebp+4]
; Line 42
	mov	esp, ebp
	pop	ebp
	ret	0
?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z ENDP		; RectToSize
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?RectHeight@@YAJABUtagRECT@@@Z
_TEXT	SEGMENT
_rc$ = 8						; size = 4
?RectHeight@@YAJABUtagRECT@@@Z PROC			; RectHeight, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 36
	push	ebp
	mov	ebp, esp
; Line 37
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
; Line 38
	pop	ebp
	ret	0
?RectHeight@@YAJABUtagRECT@@@Z ENDP			; RectHeight
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?RectWidth@@YAJABUtagRECT@@@Z
_TEXT	SEGMENT
_rc$ = 8						; size = 4
?RectWidth@@YAJABUtagRECT@@@Z PROC			; RectWidth, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 32
	push	ebp
	mov	ebp, esp
; Line 33
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
; Line 34
	pop	ebp
	ret	0
?RectWidth@@YAJABUtagRECT@@@Z ENDP			; RectWidth
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?GetSize@@YA?AUtagSIZE@@JJ@Z
_TEXT	SEGMENT
_sz$ = -8						; size = 8
_w$ = 8							; size = 4
_h$ = 12						; size = 4
?GetSize@@YA?AUtagSIZE@@JJ@Z PROC			; GetSize, COMDAT
; File c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wincontrols\windowsdlg\winmgr.h
; Line 24
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 25
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR _sz$[ebp], eax
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR _sz$[ebp+4], ecx
	mov	eax, DWORD PTR _sz$[ebp]
	mov	edx, DWORD PTR _sz$[ebp+4]
; Line 26
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@@YA?AUtagSIZE@@JJ@Z ENDP			; GetSize
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
; Line 66
	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
; Line 59
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Ignore@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Ignore@std@@QAE@XZ PROC				; std::_Ignore::_Ignore, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tuple
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 51
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Ignore@std@@QAE@XZ ENDP				; std::_Ignore::_Ignore
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 3451
	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnext$1 = -4						; size = 4
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 192
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 194
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Orphan_me
; Line 196
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$1[ebp], edx
$LN3@Orphan_me:
; Line 197
	mov	eax, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Orphan_me
	mov	ecx, DWORD PTR __Pnext$1[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _this$[ebp]
	je	SHORT $LN2@Orphan_me
; Line 198
	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$1[ebp], ecx
	jmp	SHORT $LN3@Orphan_me
$LN2@Orphan_me:
; Line 200
	mov	edx, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN1@Orphan_me
; Line 201
	push	201					; 000000c9H
	push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN1@Orphan_me:
; Line 202
	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
; Line 203
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@Orphan_me:
; Line 206
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ PROC	; std::_Iterator_base12::_Getpnext, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 187
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 188
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
; Line 189
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ENDP	; std::_Iterator_base12::_Getpnext
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 182
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 183
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getcont
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Getcont
$LN3@Getcont:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv68[ebp], eax
$LN4@Getcont:
	mov	eax, DWORD PTR tv68[ebp]
; Line 184
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Clrcont@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Clrcont@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Clrcont, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 177
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 178
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 179
	mov	esp, ebp
	pop	ebp
	ret	0
?_Clrcont@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Clrcont
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$2 = -28						; size = 4
__Lock$3 = -24						; size = 4
__Parent_proxy$4 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 148
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 149
	cmp	DWORD PTR __Parent$[ebp], 0
	jne	SHORT $LN3@Adopt
; Line 152
	push	3
	lea	ecx, DWORD PTR __Lock$3[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 153
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me
; Line 155
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$3[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
; Line 156
	jmp	SHORT $LN4@Adopt
$LN3@Adopt:
; Line 158
	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Parent_proxy$4[ebp], ecx
; Line 161
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Parent_proxy$4[ebp]
	je	SHORT $LN4@Adopt
; Line 163
	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 164
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me
; Line 165
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Parent_proxy$4[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
; Line 166
	mov	ecx, DWORD PTR __Parent_proxy$4[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 167
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent_proxy$4[ebp]
	mov	DWORD PTR [eax], ecx
; Line 168
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN4@Adopt:
; Line 174
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0:
	lea	ecx, DWORD PTR __Lock$3[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1:
	lea	ecx, DWORD PTR __Lock$2[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
; Function compile flags: /Odtp
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 140
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Iterator_base12@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 142
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 143
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me
; Line 145
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$??1_Iterator_base12@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
; Function compile flags: /Odtp
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Lock$2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 124
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 125
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN4@operator
	jmp	SHORT $LN3@operator
$LN4@operator:
; Line 127
	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@operator
; Line 128
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
; Line 129
	jmp	SHORT $LN3@operator
$LN2@operator:
; Line 132
	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me
; Line 135
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN3@operator:
; Line 136
	mov	eax, DWORD PTR _this$[ebp]
; Line 137
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0:
	lea	ecx, DWORD PTR __Lock$2[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
; Function compile flags: /Odtp
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 119
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 120
	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=
; Line 121
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 114
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Lock$2 = -24						; size = 4
_this$ = -20						; size = 4
__Pnext$3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 214
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 216
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Orphan_all
; Line 218
	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 220
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$3[ebp], edx
; Line 221
	jmp	SHORT $LN3@Orphan_all
$LN2@Orphan_all:
	mov	eax, DWORD PTR __Pnext$3[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$3[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN3@Orphan_all:
	mov	ecx, DWORD PTR __Pnext$3[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@Orphan_all
; Line 222
	mov	edx, DWORD PTR __Pnext$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN2@Orphan_all
$LN1@Orphan_all:
; Line 223
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], 0
; Line 224
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN5@Orphan_all:
; Line 226
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0:
	lea	ecx, DWORD PTR __Lock$2[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp
;	COMDAT ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Container_base12::_Getpfirst, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 99
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 100
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getpfirst
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Getpfirst
$LN3@Getpfirst:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR tv68[ebp], edx
$LN4@Getpfirst:
	mov	eax, DWORD PTR tv68[ebp]
; Line 101
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Container_base12::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::~_Container_base12, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 94
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 95
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; Line 96
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::~_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 80
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 81
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 563
	push	ebp
	mov	ebp, esp
; Line 564
	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
; Line 565
	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 551
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 553
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]
; Line 554
	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 528
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 530
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]
; Line 531
	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 521
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 523
	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]
; Line 524
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 346
	push	ebp
	mov	ebp, esp
; Line 347
	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
; Line 348
	pop	ebp
	ret	0
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z PROC	; std::char_traits<wchar_t>::move, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 334
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 336
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_wmemmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]
; Line 337
	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ENDP	; std::char_traits<wchar_t>::move
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z PROC	; std::char_traits<wchar_t>::copy, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 311
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 313
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_wmemcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]
; Line 314
	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ENDP	; std::char_traits<wchar_t>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?length@?$char_traits@_W@std@@SAIPB_W@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@_W@std@@SAIPB_W@Z PROC		; std::char_traits<wchar_t>::length, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
; Line 304
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 306
	mov	eax, DWORD PTR __First$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_wcslen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]
; Line 307
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@_W@std@@SAIPB_W@Z ENDP		; std::char_traits<wchar_t>::length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new
; Line 64
	push	ebp
	mov	ebp, esp
; Line 65
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new
; Line 59
	push	ebp
	mov	ebp, esp
; Line 60
	mov	eax, DWORD PTR __Where$[ebp]
; Line 61
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _wmemmove
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemmove PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\wchar.h
; Line 1279
	push	ebp
	mov	ebp, esp
; Line 1284
	mov	eax, DWORD PTR __N$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR __S2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __S1$[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH
; Line 1286
	pop	ebp
	ret	0
_wmemmove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\wchar.h
; Line 1271
	push	ebp
	mov	ebp, esp
; Line 1274
	mov	eax, DWORD PTR __N$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR __S2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __S1$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1276
	pop	ebp
	ret	0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _hypot
_TEXT	SEGMENT
__X$ = 8						; size = 8
__Y$ = 16						; size = 8
_hypot	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 556
	push	ebp
	mov	ebp, esp
; Line 557
	sub	esp, 8
	movsd	xmm0, QWORD PTR __Y$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __X$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	__hypot
	add	esp, 16					; 00000010H
; Line 558
	pop	ebp
	ret	0
_hypot	ENDP
_TEXT	ENDS
END
