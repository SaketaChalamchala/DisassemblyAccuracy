;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	328DBAB1A646AAF82E11BA99F5944B11
; Input	CRC32 :	02F550E0

; File Name   :	C:\compspace\Diff\openssl\obj\pcbc_enc.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_pcbc_encrypt
_DES_pcbc_encrypt proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 8
		call	__chkstk
		cmp	[esp+8+arg_14],	0
		mov	eax, [esp+8+arg_10]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+14h+arg_0]
		lea	edx, [eax+1]
		push	edi
		mov	edi, [esp+18h+arg_4]
		jz	loc_1B3
		movzx	ecx, byte ptr [eax]
		movzx	eax, byte ptr [edx]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [edx+1]
		shl	eax, 10h
		or	ecx, eax
		movzx	eax, byte ptr [edx+2]
		shl	eax, 18h
		or	ecx, eax
		movzx	eax, byte ptr [edx+4]
		mov	[esp+18h+arg_0], ecx
		movzx	ecx, byte ptr [edx+3]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [edx+5]
		mov	[esp+18h+arg_10], ecx
		movzx	ecx, byte ptr [edx+6]
		mov	edx, [esp+18h+arg_10]
		shl	ecx, 8
		or	ecx, eax
		shl	ecx, 10h
		or	edx, ecx
		mov	ecx, [esp+18h+arg_8]
		mov	[esp+18h+arg_4], ecx
		test	ecx, ecx
		jle	loc_318

loc_80:					; CODE XREF: _DES_pcbc_encrypt+1A5j
		cmp	ecx, 8
		jl	short loc_C7
		movzx	eax, byte ptr [esi+1]
		movzx	ebp, byte ptr [esi]
		movzx	ebx, byte ptr [esi+4]
		shl	eax, 8
		or	ebp, eax
		movzx	eax, byte ptr [esi+2]
		shl	eax, 10h
		or	ebp, eax
		movzx	eax, byte ptr [esi+3]
		shl	eax, 18h
		or	ebp, eax
		movzx	eax, byte ptr [esi+5]
		shl	eax, 8
		or	ebx, eax
		movzx	eax, byte ptr [esi+6]
		shl	eax, 10h
		or	ebx, eax
		movzx	eax, byte ptr [esi+7]
		shl	eax, 18h
		or	ebx, eax
		add	esi, 8
		jmp	short loc_125
; ---------------------------------------------------------------------------

loc_C7:					; CODE XREF: _DES_pcbc_encrypt+83j
		lea	eax, [ecx-1]
		add	esi, ecx
		xor	ebx, ebx
		xor	ebp, ebp
		cmp	eax, 7
		ja	short loc_125
		lea	eax, [ecx-1]
		jmp	ds:$LN44[eax*4]
; ---------------------------------------------------------------------------

$LN16:					; CODE XREF: _DES_pcbc_encrypt+D8j
					; DATA XREF: .text$mn:0000033Co
		movzx	ebx, byte ptr [esi-1]
		dec	esi
		shl	ebx, 18h

$LN17:					; CODE XREF: _DES_pcbc_encrypt+D8j
					; DATA XREF: .text$mn:00000338o
		movzx	eax, byte ptr [esi-1]
		dec	esi
		shl	eax, 10h
		or	ebx, eax

$LN18:					; CODE XREF: _DES_pcbc_encrypt+D8j
					; DATA XREF: .text$mn:00000334o
		movzx	eax, byte ptr [esi-1]
		dec	esi
		shl	eax, 8
		or	ebx, eax

$LN19:					; CODE XREF: _DES_pcbc_encrypt+D8j
					; DATA XREF: .text$mn:00000330o
		movzx	eax, byte ptr [esi-1]
		dec	esi
		or	ebx, eax

$LN20:					; CODE XREF: _DES_pcbc_encrypt+D8j
					; DATA XREF: .text$mn:0000032Co
		movzx	ebp, byte ptr [esi-1]
		dec	esi
		shl	ebp, 18h

$LN21:					; CODE XREF: _DES_pcbc_encrypt+D8j
					; DATA XREF: .text$mn:00000328o
		movzx	eax, byte ptr [esi-1]
		dec	esi
		shl	eax, 10h
		or	ebp, eax

$LN22:					; CODE XREF: _DES_pcbc_encrypt+D8j
					; DATA XREF: .text$mn:00000324o
		movzx	eax, byte ptr [esi-1]
		dec	esi
		shl	eax, 8
		or	ebp, eax

$LN23:					; CODE XREF: _DES_pcbc_encrypt+D8j
					; DATA XREF: .text$mn:$LN44o
		movzx	eax, byte ptr [esi-1]
		dec	esi
		or	ebp, eax

loc_125:				; CODE XREF: _DES_pcbc_encrypt+C5j
					; _DES_pcbc_encrypt+D3j
		mov	eax, ebp
		xor	eax, [esp+18h+arg_0]
		mov	[esp+18h+var_8], eax
		mov	eax, ebx
		xor	eax, edx
		push	1
		push	[esp+1Ch+arg_C]
		mov	[esp+20h+var_4], eax
		lea	eax, [esp+20h+var_8]
		push	eax
		call	_DES_encrypt1
		mov	ecx, [esp+24h+var_8]
		add	esp, 0Ch
		mov	edx, [esp+18h+var_4]
		mov	eax, ecx
		xor	eax, ebp
		mov	[edi], cl
		mov	[esp+18h+arg_0], eax
		mov	ebp, edx
		mov	eax, ecx
		xor	ebp, ebx
		shr	eax, 8
		mov	[edi+1], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edi+2], al
		mov	eax, edx
		shr	ecx, 18h
		mov	[edi+3], cl
		mov	ecx, [esp+18h+arg_4]
		mov	[edi+4], dl
		sub	ecx, 8
		shr	eax, 8
		mov	[edi+5], al
		mov	eax, edx
		shr	eax, 10h
		shr	edx, 18h
		mov	[edi+6], al
		mov	[edi+7], dl
		add	edi, 8
		mov	[esp+18h+arg_10], ebp
		mov	edx, ebp
		mov	[esp+18h+arg_4], ecx
		test	ecx, ecx
		jg	loc_80
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1B3:				; CODE XREF: _DES_pcbc_encrypt+22j
		movzx	ebx, byte ptr [eax]
		movzx	eax, byte ptr [edx]
		movzx	ebp, byte ptr [edx+3]
		movzx	ecx, byte ptr [edx+6]
		shl	eax, 8
		or	ebx, eax
		shl	ecx, 8
		movzx	eax, byte ptr [edx+1]
		shl	eax, 10h
		or	ebx, eax
		movzx	eax, byte ptr [edx+2]
		shl	eax, 18h
		or	ebx, eax
		movzx	eax, byte ptr [edx+4]
		shl	eax, 8
		or	ebp, eax
		movzx	eax, byte ptr [edx+5]
		or	ecx, eax
		mov	eax, [esp+18h+arg_8]
		shl	ecx, 10h
		or	ebp, ecx
		mov	[esp+18h+arg_10], eax
		test	eax, eax
		jle	loc_318
		nop

loc_200:				; CODE XREF: _DES_pcbc_encrypt+312j
		movzx	eax, byte ptr [esi+1]
		lea	esi, [esi+8]
		movzx	ecx, byte ptr [esi-8]
		movzx	edx, byte ptr [esi-4]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi-6]
		shl	eax, 10h
		or	ecx, eax
		movzx	eax, byte ptr [esi-5]
		shl	eax, 18h
		or	ecx, eax
		movzx	eax, byte ptr [esi-3]
		shl	eax, 8
		or	edx, eax
		mov	[esp+18h+arg_0], ecx
		movzx	eax, byte ptr [esi-2]
		shl	eax, 10h
		or	edx, eax
		mov	[esp+18h+var_8], ecx
		movzx	eax, byte ptr [esi-1]
		shl	eax, 18h
		or	edx, eax
		lea	eax, [esp+18h+var_8]
		push	0
		push	[esp+1Ch+arg_C]
		mov	[esp+20h+arg_4], edx
		push	eax
		mov	[esp+24h+var_4], edx
		call	_DES_encrypt1
		mov	ecx, [esp+24h+var_4]
		add	esp, 0Ch
		xor	ebx, [esp+18h+var_8]
		xor	ecx, ebp
		mov	edx, [esp+18h+arg_10]
		cmp	edx, 8
		jl	short loc_2B1
		mov	[edi], bl
		mov	eax, ebx
		shr	eax, 8
		mov	[edi+1], al
		mov	eax, ebx
		shr	eax, 10h
		mov	[edi+2], al
		mov	eax, ebx
		shr	eax, 18h
		mov	[edi+3], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edi+4], cl
		mov	[edi+5], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edi+6], al
		mov	eax, ecx
		shr	eax, 18h
		mov	[edi+7], al
		add	edi, 8
		jmp	short loc_2FB
; ---------------------------------------------------------------------------

loc_2B1:				; CODE XREF: _DES_pcbc_encrypt+275j
		lea	eax, [edx-1]
		add	edi, edx
		cmp	eax, 7
		ja	short loc_2FB
		lea	eax, [edx-1]
		jmp	ds:$LN45[eax*4]
; ---------------------------------------------------------------------------

$LN26:					; CODE XREF: _DES_pcbc_encrypt+D8j
					; _DES_pcbc_encrypt+2BEj
					; DATA XREF: ...
		dec	edi
		mov	eax, ecx
		shr	eax, 18h
		mov	[edi], al

$LN27:					; CODE XREF: _DES_pcbc_encrypt+D8j
					; _DES_pcbc_encrypt+2BEj
					; DATA XREF: ...
		dec	edi
		mov	eax, ecx
		shr	eax, 10h
		mov	[edi], al

$LN28:					; CODE XREF: _DES_pcbc_encrypt+D8j
					; _DES_pcbc_encrypt+2BEj
					; DATA XREF: ...
		dec	edi
		mov	eax, ecx
		shr	eax, 8
		mov	[edi], al

$LN29:					; CODE XREF: _DES_pcbc_encrypt+D8j
					; _DES_pcbc_encrypt+2BEj
					; DATA XREF: ...
		dec	edi
		mov	[edi], cl

$LN30:					; CODE XREF: _DES_pcbc_encrypt+D8j
					; _DES_pcbc_encrypt+2BEj
					; DATA XREF: ...
		dec	edi
		mov	eax, ebx
		shr	eax, 18h
		mov	[edi], al

$LN31:					; CODE XREF: _DES_pcbc_encrypt+D8j
					; _DES_pcbc_encrypt+2BEj
					; DATA XREF: ...
		dec	edi
		mov	eax, ebx
		shr	eax, 10h
		mov	[edi], al

$LN32:					; CODE XREF: _DES_pcbc_encrypt+D8j
					; _DES_pcbc_encrypt+2BEj
					; DATA XREF: ...
		dec	edi
		mov	eax, ebx
		shr	eax, 8
		mov	[edi], al

$LN33:					; CODE XREF: _DES_pcbc_encrypt+D8j
					; _DES_pcbc_encrypt+2BEj
					; DATA XREF: ...
		dec	edi
		mov	[edi], bl

loc_2FB:				; CODE XREF: _DES_pcbc_encrypt+2AFj
					; _DES_pcbc_encrypt+2B9j
		xor	ecx, [esp+18h+arg_4]
		sub	edx, 8
		xor	ebx, [esp+18h+arg_0]
		mov	ebp, ecx
		mov	[esp+18h+arg_0], ecx
		mov	[esp+18h+arg_10], edx
		test	edx, edx
		jg	loc_200

loc_318:				; CODE XREF: _DES_pcbc_encrypt+7Aj
					; _DES_pcbc_encrypt+1F9j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
_DES_pcbc_encrypt endp

; ---------------------------------------------------------------------------
$LN44		dd offset $LN23		; DATA XREF: _DES_pcbc_encrypt+D8r
		dd offset $LN22
		dd offset $LN21
		dd offset $LN20
		dd offset $LN19
		dd offset $LN18
		dd offset $LN17
		dd offset $LN16
$LN45		dd offset $LN33		; DATA XREF: _DES_pcbc_encrypt+2BEr
		dd offset $LN32
		dd offset $LN31
		dd offset $LN30
		dd offset $LN29
		dd offset $LN28
		dd offset $LN27
		dd offset $LN26
_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _DES_encrypt1:near ; CODE	XREF: _DES_pcbc_encrypt+142p
					; _DES_pcbc_encrypt+25Cp
		extrn __chkstk:near	; CODE XREF: _DES_pcbc_encrypt+5p


		end
