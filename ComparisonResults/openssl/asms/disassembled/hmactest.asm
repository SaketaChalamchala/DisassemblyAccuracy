;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	B73A21283EC2FF5188737F8D643003A0
; Input	CRC32 :	7D178DF9

; File Name   :	C:\compspace\Diff\openssl\obj\hmactest.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
_test		dd 5 dup(0)
aMoreTextTestVe	db 'More text test vectors to stuff up EBCDIC machines :-)',0
					; DATA XREF: _main+1Do
		align 4
		dd 2 dup(0)
		dd offset aMoreTextTestVe+22h ;	" EBCDIC machines :-)"
		dd offset ??_C@_0CB@PKKAKCNN@e9139d1e6ee064ef8cf514fc7dc83e86@ ; "e9139d1e6ee064ef8cf514fc7dc83e86"
		dd 4 dup(0B0B0B0Bh), 10h, 54206948h, 65726568h,	0Eh dup(0)
		dd 8
		dd offset ??_C@_0CB@LIDOCFNA@9294727a3638bb1c13f48ef8158bfc9d@ ; "9294727a3638bb1c13f48ef8158bfc9d"
aJefe		db 'Jefe',0
		align 10h
		dd 2 dup(0)
		dd 4, 74616877h, 206F6420h, 77206179h, 20746E61h, 20726F66h
		dd 68746F6Eh, 3F676E69h, 9 dup(0)
		dd 1Ch
		dd offset ??_C@_0CB@EPOHPAIE@750c783e6ab0b503eaa86e310a5db738@ ; "750c783e6ab0b503eaa86e310a5db738"
		dd 4 dup(0AAAAAAAAh), 10h, 0Ch dup(0DDDDDDDDh),	0DDDDh
		dd 3 dup(0)
		dd offset aMoreTextTestVe+1Eh ;	"f up EBCDIC machines :-)"
		dd offset ??_C@_0CB@OIOGDKDE@56be34521d144c88dbb8c733f0e8b3f6@ ; "56be34521d144c88dbb8c733f0e8b3f6"
dword_170	dd 4 dup(0)		; DATA XREF: _main+1DDo _main+23Fo ...
dword_180	dd 0			; DATA XREF: _main+1D3r _main+26Cr ...
aMyTestData	db 'My test data',0     ; DATA XREF: _main+E7o _main+133o ...
		align 4
		dd 0Ch dup(0)
dword_1C4	dd 0Ch			; DATA XREF: _main:loc_60Dr
					; _main:loc_666r ...
off_1C8		dd offset ??_C@_0CJ@KBDFHGJP@61afdecb95429ef494d61fdee15990ca@
					; DATA XREF: _main+30Cr _main+353r
					; "61afdecb95429ef494d61fdee15990cabf0826f"...
		align 20h
aMyTestData_0	db 'My test data',0     ; DATA XREF: _main+3DEo
		align 10h
		dd 0Ch dup(0)
dword_220	dd 0Ch			; DATA XREF: _main:loc_8B8r
off_224		dd offset ??_C@_0EB@LGILAAGP@2274b195d90ce8e03406f4b526a47e07@
					; DATA XREF: _main+445r _main+485r
					; "2274b195d90ce8e03406f4b526a47e0787a88a6"...
a123456		db '123456',0           ; DATA XREF: _main+4ADo
		align 10h
		dd 2 dup(0)
dword_238	dd 6			; DATA XREF: _main+4A3r
aMyTestData_1	db 'My test data',0     ; DATA XREF: _main+4DCo
		align 4
		dd 0Ch dup(0)
dword_27C	dd 0Ch			; DATA XREF: _main:loc_9B6r
off_280		dd offset ??_C@_0EB@JFNLAJAI@bab53058ae861a7f191abe2d0145cbb1@
					; DATA XREF: _main+540r _main+583r
					; "bab53058ae861a7f191abe2d0145cbb123776a6"...
a12345		db '12345',0            ; DATA XREF: _main+5D0o
		align 4
		dd 2 dup(0)
dword_294	dd 5			; DATA XREF: _main+5C6r
aMyTestDataAgai	db 'My test data again',0 ; DATA XREF: _main+5FFo
		align 4
		dd 0Bh dup(0)
dword_2D8	dd 0Ch			; DATA XREF: _main:loc_AD9r
off_2DC		dd offset ??_C@_0CJ@IKHMAAEM@7dbe8c764c068e3bcd6e6b0fbcd5e6fc@
					; DATA XREF: _main+692r _main+6D3r
_data		ends			; "7dbe8c764c068e3bcd6e6b0fbcd5e6fc197b15b"...

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2E0h
; COMDAT (pick any)
		public ??_C@_0CB@PKKAKCNN@e9139d1e6ee064ef8cf514fc7dc83e86@
; `string'
??_C@_0CB@PKKAKCNN@e9139d1e6ee064ef8cf514fc7dc83e86@ db	'e9139d1e6ee064ef8cf514fc7dc83e86',0
					; DATA XREF: .data:00000058o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 304h
; COMDAT (pick any)
		public ??_C@_0CB@LIDOCFNA@9294727a3638bb1c13f48ef8158bfc9d@
; `string'
??_C@_0CB@LIDOCFNA@9294727a3638bb1c13f48ef8158bfc9d@ db	'9294727a3638bb1c13f48ef8158bfc9d',0
					; DATA XREF: .data:000000B4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 328h
; COMDAT (pick any)
		public ??_C@_0CB@EPOHPAIE@750c783e6ab0b503eaa86e310a5db738@
; `string'
??_C@_0CB@EPOHPAIE@750c783e6ab0b503eaa86e310a5db738@ db	'750c783e6ab0b503eaa86e310a5db738',0
					; DATA XREF: .data:00000110o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 34Ch
; COMDAT (pick any)
		public ??_C@_0CB@OIOGDKDE@56be34521d144c88dbb8c733f0e8b3f6@
; `string'
??_C@_0CB@OIOGDKDE@56be34521d144c88dbb8c733f0e8b3f6@ db	'56be34521d144c88dbb8c733f0e8b3f6',0
					; DATA XREF: .data:0000016Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 370h
; COMDAT (pick any)
		public ??_C@_0CJ@KBDFHGJP@61afdecb95429ef494d61fdee15990ca@
; `string'
??_C@_0CJ@KBDFHGJP@61afdecb95429ef494d61fdee15990ca@ db	'61afdecb95429ef494d61fdee15990cabf0826fc',0
					; DATA XREF: .data:off_1C8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 39Ch
; COMDAT (pick any)
		public ??_C@_0EB@LGILAAGP@2274b195d90ce8e03406f4b526a47e07@
; `string'
??_C@_0EB@LGILAAGP@2274b195d90ce8e03406f4b526a47e07@ db	'2274b195d90ce8e03406f4b526a47e0787a88a65479938f1a5baa3ce0f079776',0
					; DATA XREF: .data:off_224o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 3E0h
; COMDAT (pick any)
		public ??_C@_0EB@JFNLAJAI@bab53058ae861a7f191abe2d0145cbb1@
; `string'
??_C@_0EB@JFNLAJAI@bab53058ae861a7f191abe2d0145cbb1@ db	'bab53058ae861a7f191abe2d0145cbb123776a6369ee3f9d79ce455667e411dd',0
					; DATA XREF: .data:off_280o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 424h
; COMDAT (pick any)
		public ??_C@_0CJ@IKHMAAEM@7dbe8c764c068e3bcd6e6b0fbcd5e6fc@
; `string'
??_C@_0CJ@IKHMAAEM@7dbe8c764c068e3bcd6e6b0fbcd5e6fc@ db	'7dbe8c764c068e3bcd6e6b0fbcd5e6fc197b15bb',0
					; DATA XREF: .data:off_2DCo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 450h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; __vsnprintf_l+14p ...
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 458h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 47Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vsnprintf_l(char	*DstBuf, size_t	MaxCount, const	char *Format, _locale_t	Locale,	va_list	ArgList)
		public __vsnprintf_l
__vsnprintf_l	proc near

DstBuf		= dword	ptr  4
MaxCount	= dword	ptr  8
Format		= dword	ptr  0Ch
Locale		= dword	ptr  10h
ArgList		= dword	ptr  14h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+MaxCount]
		push	[esp+10h+DstBuf]
		call	___local_stdio_printf_options
		mov	ecx, [eax]
		push	dword ptr [eax+4]
		or	ecx, 1
		push	ecx
		call	dword ptr ds:__imp____stdio_common_vsprintf
		or	ecx, 0FFFFFFFFh
		add	esp, 1Ch
		test	eax, eax
		cmovs	eax, ecx
		retn
__vsnprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4B0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vsprintf_l(char *DstBuf,	const char *Format, _locale_t, va_list ArgList)
		public __vsprintf_l
__vsprintf_l	proc near

DstBuf		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+arg_8]
		push	[esp+8+Format]
		push	0FFFFFFFFh
		push	[esp+10h+DstBuf]
		call	___local_stdio_printf_options
		mov	ecx, [eax]
		push	dword ptr [eax+4]
		or	ecx, 1
		push	ecx
		call	dword ptr ds:__imp____stdio_common_vsprintf
		or	ecx, 0FFFFFFFFh
		add	esp, 1Ch
		test	eax, eax
		cmovs	eax, ecx
		retn
__vsprintf_l	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public _main
_main		proc near

var_1F0		= dword	ptr -1F0h
var_1EC		= dword	ptr -1ECh
var_1E8		= dword	ptr -1E8h
var_1E4		= byte ptr -1E4h
var_114		= byte ptr -114h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
argc		= dword	ptr  4
argv		= dword	ptr  8
envp		= dword	ptr  0Ch

		mov	eax, 1F0h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+1F0h+var_4], eax
		push	ebx
		push	ebp
		push	esi
		xor	esi, esi
		mov	ebp, offset aMoreTextTestVe ; "More text test vectors to stuff up EBCD"...
		push	edi
		mov	[esp+200h+var_1E8], esi
		mov	[esp+200h+var_1EC], esi
		nop	dword ptr [eax+eax+00h]

loc_514:				; CODE XREF: _main+EDj
		push	0
		push	0
		push	dword ptr [ebp+40h]
		lea	eax, [ebp-14h]
		push	ebp
		push	dword ptr [ebp-4]
		push	eax
		call	_EVP_md5
		push	eax
		call	_HMAC
		add	esp, 1Ch
		mov	esi, eax
		xor	edi, edi
		mov	ebx, offset ?buf@?1??pt@@9@9 ; `pt'::`2'::buf

loc_53A:				; CODE XREF: _main+70j
		movzx	ecx, byte ptr [edi+esi]
		push	ecx
		push	offset ??_C@_04NOJCDH@?$CF02x?$AA@ ; "%02x"
		push	ebx		; Dest
		call	_sprintf
		inc	edi
		add	esp, 0Ch
		add	ebx, 2
		cmp	edi, 10h
		jb	short loc_53A
		mov	ecx, [ebp+44h]
		mov	eax, offset ?buf@?1??pt@@9@9 ; `pt'::`2'::buf
		mov	esi, [esp+200h+var_1E8]
		xchg	ax, ax

loc_564:				; CODE XREF: _main+9Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_584
		test	dl, dl
		jz	short loc_580
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_584
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_564

loc_580:				; CODE XREF: _main+88j
		xor	eax, eax
		jmp	short loc_589
; ---------------------------------------------------------------------------

loc_584:				; CODE XREF: _main+84j	_main+90j
		sbb	eax, eax
		or	eax, 1

loc_589:				; CODE XREF: _main+9Ej
		push	[esp+200h+var_1EC]
		test	eax, eax
		jz	short loc_5B7
		push	offset ??_C@_0CF@EEGCPCBG@Error?5calculating?5HMAC?5on?5?$CFd?5ent@ ; "Error calculating HMAC on %d entry'\n"
		call	_printf
		push	dword ptr [ebp+44h]
		push	offset ?buf@?1??pt@@9@9	; `pt'::`2'::buf
		push	offset ??_C@_0BG@IMOFIMJK@got?5?$CFs?5instead?5of?5?$CFs?6?$AA@	; "got %s instead of %s\n"
		call	_printf
		add	esp, 14h
		inc	esi
		mov	[esp+200h+var_1E8], esi
		jmp	short loc_5C4
; ---------------------------------------------------------------------------

loc_5B7:				; CODE XREF: _main+ABj
		push	offset ??_C@_0M@NJKLCIBI@test?5?$CFd?5ok?6?$AA@	; "test	%d ok\n"
		call	_printf
		add	esp, 8

loc_5C4:				; CODE XREF: _main+D1j
		inc	[esp+200h+var_1EC]
		add	ebp, 5Ch ; '\'
		cmp	ebp, offset aMyTestData	; "My test data"
		jl	loc_514
		lea	eax, [esp+200h+var_1E4]
		push	eax
		call	_HMAC_CTX_init
		push	0
		push	0
		push	0
		lea	eax, [esp+210h+var_1E4]
		push	0
		push	eax
		call	_HMAC_Init_ex
		add	esp, 18h
		test	eax, eax
		jz	short loc_60D
		push	offset ??_C@_0DP@IPFBNONP@Should?5fail?5to?5initialise?5HMAC?5w@ ; "Should fail	to initialise HMAC with	emp"...
		call	_printf
		add	esp, 4
		inc	esi
		jmp	$test5$70
; ---------------------------------------------------------------------------

loc_60D:				; CODE XREF: _main+114j
		push	dword_1C4
		lea	eax, [esp+204h+var_1E4]
		push	offset aMyTestData ; "My test data"
		push	eax
		call	_HMAC_Update
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_639
		push	offset ??_C@_0DG@HDGHLIHI@Should?5fail?5HMAC_Update?5with?5ctx@	; "Should fail HMAC_Update with	ctx not	se"...
		call	_printf
		add	esp, 4
		inc	esi
		jmp	short $test5$70
; ---------------------------------------------------------------------------

loc_639:				; CODE XREF: _main+143j
		push	0
		call	_EVP_sha1
		push	eax
		push	0
		lea	eax, [esp+20Ch+var_1E4]
		push	0
		push	eax
		call	_HMAC_Init_ex
		add	esp, 14h
		test	eax, eax
		jz	short loc_666
		push	offset ??_C@_0DI@FDKHFEHI@Should?5fail?5to?5initialise?5HMAC?5w@ ; "Should fail	to initialise HMAC with	emp"...
		call	_printf
		add	esp, 4
		inc	esi
		jmp	short $test5$70
; ---------------------------------------------------------------------------

loc_666:				; CODE XREF: _main+170j
		push	dword_1C4
		lea	eax, [esp+204h+var_1E4]
		push	offset aMyTestData ; "My test data"
		push	eax
		call	_HMAC_Update
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_692
		push	offset ??_C@_0DG@HDGHLIHI@Should?5fail?5HMAC_Update?5with?5ctx@	; "Should fail HMAC_Update with	ctx not	se"...
		call	_printf
		add	esp, 4
		inc	esi
		jmp	short $test5$70
; ---------------------------------------------------------------------------

loc_692:				; CODE XREF: _main+19Cj
		push	offset ??_C@_0L@EAMGLIBB@test?54?5ok?6?$AA@ ; "test 4 ok\n"
		call	_printf
		add	esp, 4

$test5$70:				; CODE XREF: _main+124j _main+153j ...
		lea	eax, [esp+200h+var_1E4]
		push	eax
		call	_HMAC_CTX_cleanup
		lea	eax, [esp+204h+var_1E4]
		push	eax
		call	_HMAC_CTX_init
		push	0
		push	0
		push	dword_180
		lea	eax, [esp+214h+var_1E4]
		push	offset dword_170
		push	eax
		call	_HMAC_Init_ex
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_6E6
		push	offset ??_C@_0DH@EJEGJCHJ@Should?5fail?5to?5initialise?5HMAC?5w@ ; "Should fail	to initialise HMAC with	emp"...
		call	_printf
		add	esp, 4
		inc	esi
		jmp	$test6$71
; ---------------------------------------------------------------------------

loc_6E6:				; CODE XREF: _main+1EDj
		push	dword_1C4
		lea	eax, [esp+204h+var_1E4]
		push	offset aMyTestData ; "My test data"
		push	eax
		call	_HMAC_Update
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_715
		push	offset ??_C@_0DG@MLNLNPBN@Should?5fail?5HMAC_Update?5with?5ctx@	; "Should fail HMAC_Update with	ctx not	se"...
		call	_printf
		add	esp, 4
		inc	esi
		jmp	$test6$71
; ---------------------------------------------------------------------------

loc_715:				; CODE XREF: _main+21Cj
		push	0
		call	_EVP_sha1
		push	eax
		push	0FFFFFFFFh
		lea	eax, [esp+20Ch+var_1E4]
		push	offset dword_170
		push	eax
		call	_HMAC_Init_ex
		add	esp, 14h
		test	eax, eax
		jz	short loc_748
		push	offset ??_C@_0DN@HBAOONMJ@Should?5fail?5to?5initialise?5HMAC?5w@ ; "Should fail	to initialise HMAC with	inv"...
		call	_printf
		add	esp, 4
		inc	esi
		jmp	$test6$71
; ---------------------------------------------------------------------------

loc_748:				; CODE XREF: _main+24Fj
		push	0
		call	_EVP_sha1
		push	eax
		push	dword_180
		lea	eax, [esp+20Ch+var_1E4]
		push	offset dword_170
		push	eax
		call	_HMAC_Init_ex
		add	esp, 14h
		test	eax, eax
		jnz	short loc_77F
		push	offset ??_C@_0CE@DOPHIHEJ@Failed?5to?5initialise?5HMAC?5?$CItest?5@ ; "Failed to initialise HMAC (test 5)\n"
		call	_printf
		add	esp, 4
		inc	esi
		jmp	$test6$71
; ---------------------------------------------------------------------------

loc_77F:				; CODE XREF: _main+286j
		push	dword_1C4
		lea	eax, [esp+204h+var_1E4]
		push	offset aMyTestData ; "My test data"
		push	eax
		call	_HMAC_Update
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_7AE
		push	offset ??_C@_0CI@GPIEIALA@Error?5updating?5HMAC?5with?5data?5?$CIt@ ; "Error updating HMAC with	data (test 5)\"...
		call	_printf
		add	esp, 4
		inc	esi
		jmp	$test6$71
; ---------------------------------------------------------------------------

loc_7AE:				; CODE XREF: _main+2B5j
		lea	eax, [esp+200h+var_1F0]
		push	eax
		lea	eax, [esp+204h+var_44]
		push	eax
		lea	eax, [esp+208h+var_1E4]
		push	eax
		call	_HMAC_Final
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_7DF
		push	offset ??_C@_0CA@KCCHPOIC@Error?5finalising?5data?5?$CItest?55?$CJ?6?$AA@ ; "Error finalising data (test 5)\n"
		call	_printf
		add	esp, 4
		inc	esi
		jmp	$test6$71
; ---------------------------------------------------------------------------

loc_7DF:				; CODE XREF: _main+2E6j
		push	[esp+200h+var_1F0]
		lea	eax, [esp+204h+var_44]
		push	eax
		call	_pt
		mov	edx, off_1C8
		mov	edi, eax
		add	esp, 8
		mov	ecx, edi
		nop	dword ptr [eax+00000000h]

loc_804:				; CODE XREF: _main+33Aj
		mov	bl, [ecx]
		cmp	bl, [edx]
		jnz	short loc_824
		test	bl, bl
		jz	short loc_820
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_824
		add	ecx, 2
		add	edx, 2
		test	al, al
		jnz	short loc_804

loc_820:				; CODE XREF: _main+328j
		xor	eax, eax
		jmp	short loc_829
; ---------------------------------------------------------------------------

loc_824:				; CODE XREF: _main+324j _main+330j
		sbb	eax, eax
		or	eax, 1

loc_829:				; CODE XREF: _main+33Ej
		test	eax, eax
		jz	short loc_851
		push	offset ??_C@_0CK@FABJBPNP@Error?5calculating?5interim?5HMAC?5o@	; "Error calculating interim HMAC on test "...
		call	_printf
		push	off_1C8
		push	edi
		push	offset ??_C@_0BG@IMOFIMJK@got?5?$CFs?5instead?5of?5?$CFs?6?$AA@	; "got %s instead of %s\n"
		call	_printf
		add	esp, 10h
		inc	esi
		jmp	$test6$71
; ---------------------------------------------------------------------------

loc_851:				; CODE XREF: _main+347j
		push	0
		call	_EVP_sha256
		push	eax
		push	0
		lea	eax, [esp+20Ch+var_1E4]
		push	0
		push	eax
		call	_HMAC_Init_ex
		add	esp, 14h
		test	eax, eax
		jz	short loc_881
		push	offset ??_C@_0DI@CBIGJOIO@Should?5disallow?5changing?5MD?5with@	; "Should disallow changing MD without a n"...
		call	_printf
		add	esp, 4
		inc	esi
		jmp	$test6$71
; ---------------------------------------------------------------------------

loc_881:				; CODE XREF: _main+388j
		push	0
		call	_EVP_sha256
		push	eax
		push	dword_180
		lea	eax, [esp+20Ch+var_1E4]
		push	offset dword_170
		push	eax
		call	_HMAC_Init_ex
		add	esp, 14h
		test	eax, eax
		jnz	short loc_8B8
		push	offset ??_C@_0CG@NHCABOGA@Failed?5to?5reinitialise?5HMAC?5?$CItes@ ; "Failed to	reinitialise HMAC (test	5)\n"
		call	_printf
		add	esp, 4
		inc	esi
		jmp	$test6$71
; ---------------------------------------------------------------------------

loc_8B8:				; CODE XREF: _main+3BFj
		push	dword_220
		lea	eax, [esp+204h+var_1E4]
		push	offset aMyTestData_0 ; "My test	data"
		push	eax
		call	_HMAC_Update
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_8E7
		push	offset ??_C@_0DB@DAOAIKIA@Error?5updating?5HMAC?5with?5data?5?$CIs@ ; "Error updating HMAC with	data (sha256) "...
		call	_printf
		add	esp, 4
		inc	esi
		jmp	$test6$71
; ---------------------------------------------------------------------------

loc_8E7:				; CODE XREF: _main+3EEj
		lea	eax, [esp+200h+var_1F0]
		push	eax
		lea	eax, [esp+204h+var_44]
		push	eax
		lea	eax, [esp+208h+var_1E4]
		push	eax
		call	_HMAC_Final
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_918
		push	offset ??_C@_0CJ@FCMICFOP@Error?5finalising?5data?5?$CIsha256?$CJ?5?$CI@ ; "Error finalising data (sha256) (test 5)"...
		call	_printf
		add	esp, 4
		inc	esi
		jmp	$test6$71
; ---------------------------------------------------------------------------

loc_918:				; CODE XREF: _main+41Fj
		push	[esp+200h+var_1F0]
		lea	eax, [esp+204h+var_44]
		push	eax
		call	_pt
		mov	edx, off_224
		mov	edi, eax
		add	esp, 8
		mov	ecx, edi

loc_936:				; CODE XREF: _main+46Cj
		mov	bl, [ecx]
		cmp	bl, [edx]
		jnz	short loc_956
		test	bl, bl
		jz	short loc_952
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_956
		add	ecx, 2
		add	edx, 2
		test	al, al
		jnz	short loc_936

loc_952:				; CODE XREF: _main+45Aj
		xor	eax, eax
		jmp	short loc_95B
; ---------------------------------------------------------------------------

loc_956:				; CODE XREF: _main+456j _main+462j
		sbb	eax, eax
		or	eax, 1

loc_95B:				; CODE XREF: _main+470j
		test	eax, eax
		jz	short loc_983
		push	offset ??_C@_0CO@JJPNCBKN@Error?5calculating?52nd?5interim?5HM@	; "Error calculating 2nd interim HMAC on t"...
		call	_printf
		push	off_224
		push	edi
		push	offset ??_C@_0BG@IMOFIMJK@got?5?$CFs?5instead?5of?5?$CFs?6?$AA@	; "got %s instead of %s\n"
		call	_printf
		add	esp, 10h
		inc	esi
		jmp	$test6$71
; ---------------------------------------------------------------------------

loc_983:				; CODE XREF: _main+479j
		push	0
		push	0
		push	dword_238
		lea	eax, [esp+20Ch+var_1E4]
		push	offset a123456	; "123456"
		push	eax
		call	_HMAC_Init_ex
		add	esp, 14h
		test	eax, eax
		jnz	short loc_9B6
		push	offset ??_C@_0CP@KNBOJNOG@Failed?5to?5reinitialise?5HMAC?5with@	; "Failed to reinitialise HMAC with key	(t"...
		call	_printf
		add	esp, 4
		inc	esi
		jmp	$test6$71
; ---------------------------------------------------------------------------

loc_9B6:				; CODE XREF: _main+4BDj
		push	dword_27C
		lea	eax, [esp+204h+var_1E4]
		push	offset aMyTestData_1 ; "My test	data"
		push	eax
		call	_HMAC_Update
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_9E5
		push	offset ??_C@_0DC@HPBMFAIJ@Error?5updating?5HMAC?5with?5data?5?$CIn@ ; "Error updating HMAC with	data (new key)"...
		call	_printf
		add	esp, 4
		inc	esi
		jmp	$test6$71
; ---------------------------------------------------------------------------

loc_9E5:				; CODE XREF: _main+4ECj
		lea	eax, [esp+200h+var_1F0]
		push	eax
		lea	eax, [esp+204h+var_44]
		push	eax
		lea	eax, [esp+208h+var_1E4]
		push	eax
		call	_HMAC_Final
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_A13
		push	offset ??_C@_0CK@KCHDAEOP@Error?5finalising?5data?5?$CInew?5key?$CJ?5@ ; "Error	finalising data	(new key) (test	5"...
		call	_printf
		add	esp, 4
		inc	esi
		jmp	short $test6$71
; ---------------------------------------------------------------------------

loc_A13:				; CODE XREF: _main+51Dj
		push	[esp+200h+var_1F0]
		lea	eax, [esp+204h+var_44]
		push	eax
		call	_pt
		mov	edx, off_280
		mov	edi, eax
		add	esp, 8
		mov	ecx, edi
		nop	dword ptr [eax]

loc_A34:				; CODE XREF: _main+56Aj
		mov	bl, [ecx]
		cmp	bl, [edx]
		jnz	short loc_A54
		test	bl, bl
		jz	short loc_A50
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_A54
		add	ecx, 2
		add	edx, 2
		test	al, al
		jnz	short loc_A34

loc_A50:				; CODE XREF: _main+558j
		xor	eax, eax
		jmp	short loc_A59
; ---------------------------------------------------------------------------

loc_A54:				; CODE XREF: _main+554j _main+560j
		sbb	eax, eax
		or	eax, 1

loc_A59:				; CODE XREF: _main+56Ej
		test	eax, eax
		jz	short loc_A7E
		push	offset ??_C@_0CC@OPFNPBJA@error?5calculating?5HMAC?5on?5test?55@ ; "error calculating HMAC on test 5\n"
		call	_printf
		push	off_280
		push	edi
		push	offset ??_C@_0BG@IMOFIMJK@got?5?$CFs?5instead?5of?5?$CFs?6?$AA@	; "got %s instead of %s\n"
		call	_printf
		add	esp, 10h
		inc	esi
		jmp	short $test6$71
; ---------------------------------------------------------------------------

loc_A7E:				; CODE XREF: _main+577j
		push	offset ??_C@_0L@ILJKGLLE@test?55?5ok?6?$AA@ ; "test 5 ok\n"
		call	_printf
		add	esp, 4

$test6$71:				; CODE XREF: _main+1FDj _main+22Cj ...
		lea	eax, [esp+200h+var_1E4]
		push	eax
		call	_HMAC_CTX_cleanup
		lea	eax, [esp+204h+var_1E4]
		push	eax
		call	_HMAC_CTX_init
		add	esp, 8
		push	0
		call	_EVP_sha1
		push	eax
		push	dword_294
		lea	eax, [esp+20Ch+var_1E4]
		push	offset a12345	; "12345"
		push	eax
		call	_HMAC_Init_ex
		add	esp, 14h
		test	eax, eax
		jnz	short loc_AD9
		push	offset ??_C@_0CE@CMECCIKH@Failed?5to?5initialise?5HMAC?5?$CItest?5@ ; "Failed to initialise HMAC (test 6)\n"
		call	_printf
		add	esp, 4
		inc	esi
		jmp	$end$72
; ---------------------------------------------------------------------------

loc_AD9:				; CODE XREF: _main+5E0j
		push	dword_2D8
		lea	eax, [esp+204h+var_1E4]
		push	offset aMyTestDataAgai ; "My test data again"
		push	eax
		call	_HMAC_Update
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_B08
		push	offset ??_C@_0CI@HNDBCPFO@Error?5updating?5HMAC?5with?5data?5?$CIt@ ; "Error updating HMAC with	data (test 6)\"...
		call	_printf
		add	esp, 4
		inc	esi
		jmp	$end$72
; ---------------------------------------------------------------------------

loc_B08:				; CODE XREF: _main+60Fj
		lea	eax, [esp+200h+var_1E4]
		push	eax
		lea	eax, [esp+204h+var_114]
		push	eax
		call	_HMAC_CTX_copy
		add	esp, 8
		test	eax, eax
		jnz	short loc_B34
		push	offset ??_C@_0CC@OKKAJAMA@Failed?5to?5copy?5HMAC_CTX?5?$CItest?56?$CJ@ ; "Failed to copy HMAC_CTX (test	6)\n"
		call	_printf
		add	esp, 4
		inc	esi
		jmp	$end$72
; ---------------------------------------------------------------------------

loc_B34:				; CODE XREF: _main+63Bj
		lea	eax, [esp+200h+var_1F0]
		push	eax
		lea	eax, [esp+204h+var_44]
		push	eax
		lea	eax, [esp+208h+var_114]
		push	eax
		call	_HMAC_Final
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_B65
		push	offset ??_C@_0CA@LAJCFBGM@Error?5finalising?5data?5?$CItest?56?$CJ?6?$AA@ ; "Error finalising data (test 6)\n"
		call	_printf
		add	esp, 4
		inc	esi
		jmp	short $end$72
; ---------------------------------------------------------------------------

loc_B65:				; CODE XREF: _main+66Fj
		push	[esp+200h+var_1F0]
		lea	eax, [esp+204h+var_44]
		push	eax
		call	_pt
		mov	edx, off_2DC
		mov	edi, eax
		add	esp, 8
		mov	ecx, edi
		nop

loc_B84:				; CODE XREF: _main+6BAj
		mov	bl, [ecx]
		cmp	bl, [edx]
		jnz	short loc_BA4
		test	bl, bl
		jz	short loc_BA0
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_BA4
		add	ecx, 2
		add	edx, 2
		test	al, al
		jnz	short loc_B84

loc_BA0:				; CODE XREF: _main+6A8j
		xor	eax, eax
		jmp	short loc_BA9
; ---------------------------------------------------------------------------

loc_BA4:				; CODE XREF: _main+6A4j _main+6B0j
		sbb	eax, eax
		or	eax, 1

loc_BA9:				; CODE XREF: _main+6BEj
		test	eax, eax
		jz	short loc_BCE
		push	offset ??_C@_0CC@KGHHHMIP@Error?5calculating?5HMAC?5on?5test?56@ ; "Error calculating HMAC on test 6\n"
		call	_printf
		push	off_2DC
		push	edi
		push	offset ??_C@_0BG@IMOFIMJK@got?5?$CFs?5instead?5of?5?$CFs?6?$AA@	; "got %s instead of %s\n"
		call	_printf
		add	esp, 10h
		inc	esi
		jmp	short $end$72
; ---------------------------------------------------------------------------

loc_BCE:				; CODE XREF: _main+6C7j
		push	offset ??_C@_0L@NAOBJBK@test?56?5ok?6?$AA@ ; "test 6 ok\n"
		call	_printf
		add	esp, 4

$end$72:				; CODE XREF: _main+5F0j _main+61Fj ...
		lea	eax, [esp+200h+var_1E4]
		push	eax
		call	_HMAC_CTX_cleanup
		add	esp, 4
		push	esi		; Code
		call	dword ptr ds:__imp__exit
_main		endp

; ---------------------------------------------------------------------------
		db 5Fh
		db 5Eh,	5Dh, 5Bh
$LN69:					; $LN68
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BF4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int printf(const char	*Format, ...)
		public _printf
_printf		proc near		; CODE XREF: _main+B2p	_main+C4p ...

Format		= dword	ptr  4
arg_4		= byte ptr  8

		push	esi
		mov	esi, [esp+4+Format]
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		lea	ecx, [esp+4+arg_4]
		push	ecx
		push	0
		push	esi
		push	eax
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		pop	esi
		retn
_printf		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C24h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pt		proc near		; CODE XREF: _main+307p _main+440p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	esi
		xor	esi, esi
		test	ebx, ebx
		jz	short loc_C61
		push	ebp
		mov	ebp, [esp+0Ch+arg_0]
		push	edi
		mov	edi, offset ?buf@?1??pt@@9@9 ; `pt'::`2'::buf
		nop	word ptr [eax+eax+00000000h]

loc_C44:				; CODE XREF: _pt+39j
		movzx	eax, byte ptr [esi+ebp]
		push	eax
		push	offset ??_C@_04NOJCDH@?$CF02x?$AA@ ; "%02x"
		push	edi		; Dest
		call	_sprintf
		inc	esi
		add	esp, 0Ch
		add	edi, 2
		cmp	esi, ebx
		jb	short loc_C44
		pop	edi
		pop	ebp

loc_C61:				; CODE XREF: _pt+Aj
		pop	esi
		mov	eax, offset ?buf@?1??pt@@9@9 ; `pt'::`2'::buf
		pop	ebx
		retn
_pt		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C6Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int sprintf(char *Dest, const	char *Format, ...)
		public _sprintf
_sprintf	proc near		; CODE XREF: _main+61p	_pt+2Bp

Dest		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= byte ptr  0Ch

		lea	eax, [esp+arg_8]
		push	eax
		push	0
		push	[esp+8+Format]
		push	0FFFFFFFFh
		push	[esp+10h+Dest]
		call	___local_stdio_printf_options
		mov	ecx, [eax]
		push	dword ptr [eax+4]
		or	ecx, 1
		push	ecx
		call	dword ptr ds:__imp____stdio_common_vsprintf
		or	ecx, 0FFFFFFFFh
		add	esp, 1Ch
		test	eax, eax
		cmovs	eax, ecx
		retn
_sprintf	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CA0h
; COMDAT (pick any)
		public ??_C@_0CF@EEGCPCBG@Error?5calculating?5HMAC?5on?5?$CFd?5ent@
; char `string'[]
??_C@_0CF@EEGCPCBG@Error?5calculating?5HMAC?5on?5?$CFd?5ent@ db	'Error calculating HMAC on %d entry',27h,0Ah,0
					; DATA XREF: _main+ADo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CC8h
; COMDAT (pick any)
		public ??_C@_0BG@IMOFIMJK@got?5?$CFs?5instead?5of?5?$CFs?6?$AA@
; char `string'[]
??_C@_0BG@IMOFIMJK@got?5?$CFs?5instead?5of?5?$CFs?6?$AA@ db 'got %s instead of %s',0Ah,0
					; DATA XREF: _main+BFo	_main+35Ao ...
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CE0h
; COMDAT (pick any)
		public ??_C@_0M@NJKLCIBI@test?5?$CFd?5ok?6?$AA@
; char `string'[]
??_C@_0M@NJKLCIBI@test?5?$CFd?5ok?6?$AA@ db 'test %d ok',0Ah,0 ; DATA XREF: _main:loc_5B7o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CECh
; COMDAT (pick any)
		public ??_C@_0DP@IPFBNONP@Should?5fail?5to?5initialise?5HMAC?5w@
; char `string'[]
??_C@_0DP@IPFBNONP@Should?5fail?5to?5initialise?5HMAC?5w@ db 'Should fail to initialise HMAC with empty MD and key (test 4)',0Ah,0
					; DATA XREF: _main+116o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D2Ch
; COMDAT (pick any)
		public ??_C@_0DG@HDGHLIHI@Should?5fail?5HMAC_Update?5with?5ctx@
; char `string'[]
??_C@_0DG@HDGHLIHI@Should?5fail?5HMAC_Update?5with?5ctx@ db 'Should fail HMAC_Update with ctx not set up (test 4)',0Ah,0
					; DATA XREF: _main+145o _main+19Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D64h
; COMDAT (pick any)
		public ??_C@_0DI@FDKHFEHI@Should?5fail?5to?5initialise?5HMAC?5w@
; char `string'[]
??_C@_0DI@FDKHFEHI@Should?5fail?5to?5initialise?5HMAC?5w@ db 'Should fail to initialise HMAC with empty key (test 4)',0Ah,0
					; DATA XREF: _main+172o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D9Ch
; COMDAT (pick any)
		public ??_C@_0L@EAMGLIBB@test?54?5ok?6?$AA@
; char `string'[]
??_C@_0L@EAMGLIBB@test?54?5ok?6?$AA@ db	'test 4 ok',0Ah,0 ; DATA XREF: _main:loc_692o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0DA8h
; COMDAT (pick any)
		public ??_C@_0DH@EJEGJCHJ@Should?5fail?5to?5initialise?5HMAC?5w@
; char `string'[]
??_C@_0DH@EJEGJCHJ@Should?5fail?5to?5initialise?5HMAC?5w@ db 'Should fail to initialise HMAC with empty MD (test 5)',0Ah,0
					; DATA XREF: _main+1EFo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0DE0h
; COMDAT (pick any)
		public ??_C@_0DG@MLNLNPBN@Should?5fail?5HMAC_Update?5with?5ctx@
; char `string'[]
??_C@_0DG@MLNLNPBN@Should?5fail?5HMAC_Update?5with?5ctx@ db 'Should fail HMAC_Update with ctx not set up (test 5)',0Ah,0
					; DATA XREF: _main+21Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E18h
; COMDAT (pick any)
		public ??_C@_0DN@HBAOONMJ@Should?5fail?5to?5initialise?5HMAC?5w@
; char `string'[]
??_C@_0DN@HBAOONMJ@Should?5fail?5to?5initialise?5HMAC?5w@ db 'Should fail to initialise HMAC with invalid key len(test 5)',0Ah,0
					; DATA XREF: _main+251o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E58h
; COMDAT (pick any)
		public ??_C@_0CE@DOPHIHEJ@Failed?5to?5initialise?5HMAC?5?$CItest?5@
; char `string'[]
??_C@_0CE@DOPHIHEJ@Failed?5to?5initialise?5HMAC?5?$CItest?5@ db	'Failed to initialise HMAC (test 5)',0Ah,0
					; DATA XREF: _main+288o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E7Ch
; COMDAT (pick any)
		public ??_C@_0CI@GPIEIALA@Error?5updating?5HMAC?5with?5data?5?$CIt@
; char `string'[]
??_C@_0CI@GPIEIALA@Error?5updating?5HMAC?5with?5data?5?$CIt@ db	'Error updating HMAC with data (test 5)',0Ah,0
					; DATA XREF: _main+2B7o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0EA4h
; COMDAT (pick any)
		public ??_C@_0CA@KCCHPOIC@Error?5finalising?5data?5?$CItest?55?$CJ?6?$AA@
; char `string'[]
??_C@_0CA@KCCHPOIC@Error?5finalising?5data?5?$CItest?55?$CJ?6?$AA@ db 'Error finalising data (test 5)',0Ah,0
					; DATA XREF: _main+2E8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0EC4h
; COMDAT (pick any)
		public ??_C@_0CK@FABJBPNP@Error?5calculating?5interim?5HMAC?5o@
; char `string'[]
??_C@_0CK@FABJBPNP@Error?5calculating?5interim?5HMAC?5o@ db 'Error calculating interim HMAC on test 5',0Ah,0
					; DATA XREF: _main+349o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0EF0h
; COMDAT (pick any)
		public ??_C@_0DI@CBIGJOIO@Should?5disallow?5changing?5MD?5with@
; char `string'[]
??_C@_0DI@CBIGJOIO@Should?5disallow?5changing?5MD?5with@ db 'Should disallow changing MD without a new key (test 5)',0Ah,0
					; DATA XREF: _main+38Ao
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F28h
; COMDAT (pick any)
		public ??_C@_0CG@NHCABOGA@Failed?5to?5reinitialise?5HMAC?5?$CItes@
; char `string'[]
??_C@_0CG@NHCABOGA@Failed?5to?5reinitialise?5HMAC?5?$CItes@ db 'Failed to reinitialise HMAC (test 5)',0Ah,0
					; DATA XREF: _main+3C1o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F50h
; COMDAT (pick any)
		public ??_C@_0DB@DAOAIKIA@Error?5updating?5HMAC?5with?5data?5?$CIs@
; char `string'[]
??_C@_0DB@DAOAIKIA@Error?5updating?5HMAC?5with?5data?5?$CIs@ db	'Error updating HMAC with data (sha256) (test 5)',0Ah,0
					; DATA XREF: _main+3F0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F84h
; COMDAT (pick any)
		public ??_C@_0CJ@FCMICFOP@Error?5finalising?5data?5?$CIsha256?$CJ?5?$CI@
; char `string'[]
??_C@_0CJ@FCMICFOP@Error?5finalising?5data?5?$CIsha256?$CJ?5?$CI@ db 'Error finalising data (sha256) (test 5)',0Ah,0
					; DATA XREF: _main+421o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FB0h
; COMDAT (pick any)
		public ??_C@_0CO@JJPNCBKN@Error?5calculating?52nd?5interim?5HM@
; char `string'[]
??_C@_0CO@JJPNCBKN@Error?5calculating?52nd?5interim?5HM@ db 'Error calculating 2nd interim HMAC on test 5',0Ah,0
					; DATA XREF: _main+47Bo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FE0h
; COMDAT (pick any)
		public ??_C@_0CP@KNBOJNOG@Failed?5to?5reinitialise?5HMAC?5with@
; char `string'[]
??_C@_0CP@KNBOJNOG@Failed?5to?5reinitialise?5HMAC?5with@ db 'Failed to reinitialise HMAC with key (test 5)',0Ah,0
					; DATA XREF: _main+4BFo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1010h
; COMDAT (pick any)
		public ??_C@_0DC@HPBMFAIJ@Error?5updating?5HMAC?5with?5data?5?$CIn@
; char `string'[]
??_C@_0DC@HPBMFAIJ@Error?5updating?5HMAC?5with?5data?5?$CIn@ db	'Error updating HMAC with data (new key) (test 5)',0Ah,0
					; DATA XREF: _main+4EEo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1044h
; COMDAT (pick any)
		public ??_C@_0CK@KCHDAEOP@Error?5finalising?5data?5?$CInew?5key?$CJ?5@
; char `string'[]
??_C@_0CK@KCHDAEOP@Error?5finalising?5data?5?$CInew?5key?$CJ?5@	db 'Error finalising data (new key) (test 5)',0Ah,0
					; DATA XREF: _main+51Fo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1070h
; COMDAT (pick any)
		public ??_C@_0CC@OPFNPBJA@error?5calculating?5HMAC?5on?5test?55@
; char `string'[]
??_C@_0CC@OPFNPBJA@error?5calculating?5HMAC?5on?5test?55@ db 'error calculating HMAC on test 5',0Ah,0
					; DATA XREF: _main+579o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1094h
; COMDAT (pick any)
		public ??_C@_0L@ILJKGLLE@test?55?5ok?6?$AA@
; char `string'[]
??_C@_0L@ILJKGLLE@test?55?5ok?6?$AA@ db	'test 5 ok',0Ah,0 ; DATA XREF: _main:loc_A7Eo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10A0h
; COMDAT (pick any)
		public ??_C@_0CE@CMECCIKH@Failed?5to?5initialise?5HMAC?5?$CItest?5@
; char `string'[]
??_C@_0CE@CMECCIKH@Failed?5to?5initialise?5HMAC?5?$CItest?5@ db	'Failed to initialise HMAC (test 6)',0Ah,0
					; DATA XREF: _main+5E2o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10C4h
; COMDAT (pick any)
		public ??_C@_0CI@HNDBCPFO@Error?5updating?5HMAC?5with?5data?5?$CIt@
; char `string'[]
??_C@_0CI@HNDBCPFO@Error?5updating?5HMAC?5with?5data?5?$CIt@ db	'Error updating HMAC with data (test 6)',0Ah,0
					; DATA XREF: _main+611o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10ECh
; COMDAT (pick any)
		public ??_C@_0CC@OKKAJAMA@Failed?5to?5copy?5HMAC_CTX?5?$CItest?56?$CJ@
; char `string'[]
??_C@_0CC@OKKAJAMA@Failed?5to?5copy?5HMAC_CTX?5?$CItest?56?$CJ@	db 'Failed to copy HMAC_CTX (test 6)',0Ah,0
					; DATA XREF: _main+63Do
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1110h
; COMDAT (pick any)
		public ??_C@_0CA@LAJCFBGM@Error?5finalising?5data?5?$CItest?56?$CJ?6?$AA@
; char `string'[]
??_C@_0CA@LAJCFBGM@Error?5finalising?5data?5?$CItest?56?$CJ?6?$AA@ db 'Error finalising data (test 6)',0Ah,0
					; DATA XREF: _main+671o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1130h
; COMDAT (pick any)
		public ??_C@_0CC@KGHHHMIP@Error?5calculating?5HMAC?5on?5test?56@
; char `string'[]
??_C@_0CC@KGHHHMIP@Error?5calculating?5HMAC?5on?5test?56@ db 'Error calculating HMAC on test 6',0Ah,0
					; DATA XREF: _main+6C9o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1154h
; COMDAT (pick any)
		public ??_C@_0L@NAOBJBK@test?56?5ok?6?$AA@
; char `string'[]
??_C@_0L@NAOBJBK@test?56?5ok?6?$AA@ db 'test 6 ok',0Ah,0 ; DATA XREF: _main:loc_BCEo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 1160h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; char `pt'::`2'::buf[80]
?buf@?1??pt@@9@9 db 50h	dup(?)		; DATA XREF: _main+51o	_main+75o ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11B0h
; COMDAT (pick any)
		public ??_C@_04NOJCDH@?$CF02x?$AA@
; char `string'[]
??_C@_04NOJCDH@?$CF02x?$AA@ db '%02x',0 ; DATA XREF: _main+5Bo _pt+25o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _printf+7p
					; DATA XREF: _printf+7r
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _printf+23p
					; DATA XREF: ...
		extrn __imp____stdio_common_vsprintf:near ; CODE XREF: __vsnprintf_l+22p
					; __vsprintf_l+20p ...
; void __cdecl __noreturn _exit(int Code)
		extrn __imp__exit:near	; CODE XREF: _main+705p
					; DATA XREF: _main+705r
		extrn _EVP_md5:near	; CODE XREF: _main+3Fp
		extrn _EVP_sha1:near	; CODE XREF: _main+157p _main+233p ...
		extrn _EVP_sha256:near	; CODE XREF: _main+36Fp _main+39Fp
		extrn _HMAC_CTX_init:near ; CODE XREF: _main+F8p _main+1CAp ...
		extrn _HMAC_CTX_cleanup:near ; CODE XREF: _main+1C0p
					; _main+5ACp ...
		extrn _HMAC_Init_ex:near ; CODE	XREF: _main+10Ap _main+166p ...
		extrn _HMAC_Update:near	; CODE XREF: _main+139p _main+192p ...
		extrn _HMAC_Final:near	; CODE XREF: _main+2DCp _main+415p ...
		extrn _HMAC:near	; CODE XREF: _main+45p
		extrn _HMAC_CTX_copy:near ; CODE XREF: _main+631p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
		extrn __chkstk:near	; CODE XREF: _main+5p
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso
		extrn ___security_cookie:near ;	DATA XREF: _main+Ar


		end
