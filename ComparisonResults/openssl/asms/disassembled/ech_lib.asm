;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	18664D14CF3D10E5CF49EF2366113143
; Input	CRC32 :	3C987A60

; File Name   :	C:\compspace\Diff\openssl\obj\ech_lib.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		public _ECDH_version
_ECDH_version	db 'ECDH part of OpenSSL 1.0.2h  3 May 2016',0
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 28h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
_default_ECDH_method dd	?		; DATA XREF: _ECDH_DATA_new_method:loc_63r
					; _ECDH_DATA_new_method+4Bw ...
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ECDH_DATA_new_method proc near		; CODE XREF: _ecdh_check+25p
					; _ecdh_data_dup+12j ...

arg_0		= dword	ptr  4

		push	esi
		push	8Ch ; 'Œ'
		push	offset ??_C@_0BI@LFHHMGOE@?4?2crypto?2ecdh?2ech_lib?4c?$AA@ ; ".\\crypto\\ecdh\\ech_lib.c"
		push	18h
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_63
		push	8Eh ; 'Ž'
		push	offset ??_C@_0BI@LFHHMGOE@?4?2crypto?2ecdh?2ech_lib?4c?$AA@ ; ".\\crypto\\ecdh\\ech_lib.c"
		push	41h ; 'A'
		push	65h ; 'e'
		push	2Bh ; '+'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_63:					; CODE XREF: _ECDH_DATA_new_method+19j
		mov	eax, ds:_default_ECDH_method
		mov	dword ptr [esi], 0
		test	eax, eax
		jnz	short loc_7C
		call	_ECDH_OpenSSL
		mov	ds:_default_ECDH_method, eax

loc_7C:					; CODE XREF: _ECDH_DATA_new_method+44j
		mov	[esi+0Ch], eax
		mov	eax, [esp+4+arg_0]
		mov	[esi+4], eax
		test	eax, eax
		jnz	short loc_92
		call	_ENGINE_get_default_ECDH
		mov	[esi+4], eax

loc_92:					; CODE XREF: _ECDH_DATA_new_method+5Cj
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_D3
		push	eax
		call	_ENGINE_get_ECDH
		add	esp, 4
		mov	[esi+0Ch], eax
		test	eax, eax
		jnz	short loc_D3
		push	9Ch ; 'œ'
		push	offset ??_C@_0BI@LFHHMGOE@?4?2crypto?2ecdh?2ech_lib?4c?$AA@ ; ".\\crypto\\ecdh\\ech_lib.c"
		push	26h ; '&'
		push	65h ; 'e'
		push	2Bh ; '+'
		call	_ERR_put_error
		push	dword ptr [esi+4]
		call	_ENGINE_finish
		push	esi
		call	_CRYPTO_free
		add	esp, 1Ch
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_D3:					; CODE XREF: _ECDH_DATA_new_method+6Bj
					; _ECDH_DATA_new_method+7Bj
		mov	eax, [esi+0Ch]
		mov	eax, [eax+8]
		mov	[esi+8], eax
		lea	eax, [esi+10h]
		push	eax
		push	esi
		push	0Dh
		call	_CRYPTO_new_ex_data
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn
_ECDH_DATA_new_method endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ECDH_get_default_method
_ECDH_get_default_method proc near
		mov	eax, ds:_default_ECDH_method
		test	eax, eax
		jnz	short locret_103
		call	_ECDH_OpenSSL
		mov	ds:_default_ECDH_method, eax

locret_103:				; CODE XREF: _ECDH_get_default_method+7j
		retn
_ECDH_get_default_method endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 104h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ECDH_get_ex_data
_ECDH_get_ex_data proc near

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	_ecdh_check
		add	esp, 4
		test	eax, eax
		jnz	short loc_115
		retn
; ---------------------------------------------------------------------------

loc_115:				; CODE XREF: _ECDH_get_ex_data+Ej
		add	eax, 10h
		mov	[esp+arg_0], eax
		jmp	_CRYPTO_get_ex_data
_ECDH_get_ex_data endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 124h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ECDH_get_ex_new_index
_ECDH_get_ex_new_index proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	[esp+arg_10]
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		push	0Dh
		call	_CRYPTO_get_ex_new_index
		add	esp, 18h
		retn
_ECDH_get_ex_new_index endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 144h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ECDH_set_default_method
_ECDH_set_default_method proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	ds:_default_ECDH_method, eax
		retn
_ECDH_set_default_method endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 150h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ECDH_set_ex_data
_ECDH_set_ex_data proc near

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	_ecdh_check
		add	esp, 4
		test	eax, eax
		jnz	short loc_161
		retn
; ---------------------------------------------------------------------------

loc_161:				; CODE XREF: _ECDH_set_ex_data+Ej
		add	eax, 10h
		mov	[esp+arg_0], eax
		jmp	_CRYPTO_set_ex_data
_ECDH_set_ex_data endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 170h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ECDH_set_method
_ECDH_set_method proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+arg_0]
		call	_ecdh_check
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_185
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_185:				; CODE XREF: _ECDH_set_method+11j
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_19C
		push	eax
		call	_ENGINE_finish
		add	esp, 4
		mov	dword ptr [esi+4], 0

loc_19C:				; CODE XREF: _ECDH_set_method+1Aj
		mov	eax, [esp+4+arg_4]
		mov	[esi+0Ch], eax
		mov	eax, 1
		pop	esi
		retn
_ECDH_set_method endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ecdh_check
_ecdh_check	proc near		; CODE XREF: _ECDH_get_ex_data+4p
					; _ECDH_set_ex_data+4p	...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		push	offset _ecdh_data_free
		push	offset _ecdh_data_free
		push	offset _ecdh_data_dup
		push	edi
		call	_EC_KEY_get_key_method_data
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_20C
		push	eax
		call	_ECDH_DATA_new_method
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_1E2
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1E2:				; CODE XREF: _ecdh_check+31j
		push	offset _ecdh_data_free
		push	offset _ecdh_data_free
		push	offset _ecdh_data_dup
		push	esi
		push	edi
		call	_EC_KEY_insert_key_method_data
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jz	short loc_20C
		push	esi
		call	_ecdh_data_free
		add	esp, 4
		mov	esi, edi

loc_20C:				; CODE XREF: _ecdh_check+22j
					; _ecdh_check+53j
		pop	edi
		mov	eax, esi
		pop	esi
		retn
_ecdh_check	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 214h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ecdh_data_dup	proc near		; DATA XREF: _ecdh_check+10o
					; _ecdh_check+40o

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0
		jnz	short loc_21E
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_21E:				; CODE XREF: _ecdh_data_dup+5j
		mov	[esp+arg_0], 0
		jmp	_ECDH_DATA_new_method
_ecdh_data_dup	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 22Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ecdh_data_free	proc near		; CODE XREF: _ecdh_check+56p
					; DATA XREF: _ecdh_check+6o ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_241
		push	eax
		call	_ENGINE_finish
		add	esp, 4

loc_241:				; CODE XREF: _ecdh_data_free+Aj
		lea	eax, [esi+10h]
		push	eax
		push	esi
		push	0Dh
		call	_CRYPTO_free_ex_data
		push	18h
		push	esi
		call	_OPENSSL_cleanse
		push	esi
		call	_CRYPTO_free
		add	esp, 18h
		pop	esi
		retn
_ecdh_data_free	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 260h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ecdh_data_new	proc near
		push	0
		call	_ECDH_DATA_new_method
		add	esp, 4
		retn
_ecdh_data_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 26Ch
; COMDAT (pick any)
		public ??_C@_0BI@LFHHMGOE@?4?2crypto?2ecdh?2ech_lib?4c?$AA@
; `string'
??_C@_0BI@LFHHMGOE@?4?2crypto?2ecdh?2ech_lib?4c?$AA@ db	'.\crypto\ecdh\ech_lib.c',0
					; DATA XREF: _ECDH_DATA_new_method+6o
					; _ECDH_DATA_new_method+20o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_get_ex_new_index:near ; CODE XREF: _ECDH_get_ex_new_index+16p
		extrn _CRYPTO_new_ex_data:near ; CODE XREF: _ECDH_DATA_new_method+B7p
		extrn _CRYPTO_free_ex_data:near	; CODE XREF: _ecdh_data_free+1Cp
		extrn _CRYPTO_set_ex_data:near ; CODE XREF: _ECDH_set_ex_data+18j
		extrn _CRYPTO_get_ex_data:near ; CODE XREF: _ECDH_get_ex_data+18j
		extrn _CRYPTO_malloc:near ; CODE XREF: _ECDH_DATA_new_method+Dp
		extrn _CRYPTO_free:near	; CODE XREF: _ECDH_DATA_new_method+9Bp
					; _ecdh_data_free+2Ap
		extrn _OPENSSL_cleanse:near ; CODE XREF: _ecdh_data_free+24p
		extrn _EC_KEY_get_key_method_data:near ; CODE XREF: _ecdh_check+16p
		extrn _EC_KEY_insert_key_method_data:near ; CODE XREF: _ecdh_check+47p
		extrn _ECDH_OpenSSL:near ; CODE	XREF: _ECDH_DATA_new_method+46p
					; _ECDH_get_default_method+9p
		extrn _ERR_put_error:near ; CODE XREF: _ECDH_DATA_new_method+2Bp
					; _ECDH_DATA_new_method+8Dp
		extrn _ENGINE_get_ECDH:near ; CODE XREF: _ECDH_DATA_new_method+6Ep
		extrn _ENGINE_finish:near ; CODE XREF: _ECDH_DATA_new_method+95p
					; _ECDH_set_method+1Dp	...
		extrn _ENGINE_get_default_ECDH:near ; CODE XREF: _ECDH_DATA_new_method+5Ep


		end
