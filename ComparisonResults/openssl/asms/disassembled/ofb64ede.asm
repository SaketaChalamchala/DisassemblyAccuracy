;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	B1929A59AF76DCE3DFBB3A83BCE43C86
; Input	CRC32 :	C262CADE

; File Name   :	C:\compspace\Diff\openssl\obj\ofb64ede.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_ede3_ofb64_encrypt
_DES_ede3_ofb64_encrypt	proc near

var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
var_7		= byte ptr -7
var_6		= byte ptr -6
var_5		= byte ptr -5
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		mov	eax, 30h ; '0'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+30h+var_4], eax
		mov	eax, [esp+30h+arg_4]
		mov	[esp+30h+var_30], eax
		mov	eax, [esp+30h+arg_C]
		mov	[esp+30h+var_18], eax
		mov	eax, [esp+30h+arg_10]
		mov	[esp+30h+var_1C], eax
		mov	eax, [esp+30h+arg_14]
		mov	[esp+30h+var_20], eax
		mov	eax, [esp+30h+arg_18]
		mov	[esp+30h+var_10], eax
		push	ebx
		push	ebp
		movzx	ebx, byte ptr [eax]
		push	esi
		push	edi
		lea	edi, [eax+1]
		mov	ebp, [esp+40h+arg_1C]
		mov	edx, edi
		mov	[esp+40h+var_2C], ebp
		mov	[esp+40h+var_14], edi
		mov	esi, [ebp+0]
		movzx	eax, byte ptr [edx]
		shl	eax, 8
		or	ebx, eax
		movzx	ecx, byte ptr [edx+3]
		movzx	eax, byte ptr [edx+1]
		shl	eax, 10h
		or	ebx, eax
		movzx	eax, byte ptr [edx+2]
		shl	eax, 18h
		or	ebx, eax
		movzx	eax, byte ptr [edx+4]
		shl	eax, 8
		or	ecx, eax
		mov	[esp+40h+var_28], ebx
		movzx	eax, byte ptr [edx+5]
		mov	[esp+40h+var_C], ecx
		movzx	ecx, byte ptr [edx+6]
		mov	edx, [esp+40h+var_C]
		shl	ecx, 8
		or	ecx, eax
		mov	byte ptr [esp+40h+var_C], bl
		mov	eax, ebx
		shl	ecx, 10h
		shr	eax, 8
		or	edx, ecx
		mov	byte ptr [esp+40h+var_C+1], al
		mov	eax, ebx
		shr	eax, 10h
		mov	byte ptr [esp+40h+var_C+2], al
		mov	eax, ebx
		shr	eax, 18h
		mov	byte ptr [esp+40h+var_C+3], al
		mov	eax, edx
		shr	eax, 8
		mov	[esp+40h+var_7], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esp+40h+var_6], al
		mov	eax, edx
		shr	eax, 18h
		mov	[esp+40h+var_5], al
		mov	eax, [esp+40h+arg_8]
		mov	[esp+40h+var_24], edx
		mov	[esp+40h+var_8], dl
		test	eax, eax
		jz	loc_1DD
		mov	ecx, [esp+40h+var_30]
		mov	ebp, [esp+40h+arg_0]
		sub	ecx, ebp
		mov	[esp+40h+var_30], ecx
		xor	edi, edi
		nop	word ptr [eax+eax+00h]

loc_100:				; CODE XREF: _DES_ede3_ofb64_encrypt+182j
		dec	eax
		mov	[esp+40h+arg_8], eax
		test	esi, esi
		jnz	short loc_16D
		push	[esp+40h+var_20]
		lea	eax, [esp+44h+var_28]
		push	[esp+44h+var_1C]
		push	[esp+48h+var_18]
		push	eax
		call	_DES_encrypt3
		mov	ebx, [esp+50h+var_28]
		add	esp, 10h
		mov	edx, [esp+40h+var_24]
		mov	eax, ebx
		shr	eax, 8
		mov	byte ptr [esp+40h+var_C+1], al
		mov	eax, ebx
		mov	ecx, [esp+40h+var_30]
		shr	eax, 10h
		mov	byte ptr [esp+40h+var_C+2], al
		mov	eax, ebx
		shr	eax, 18h
		mov	byte ptr [esp+40h+var_C+3], al
		mov	eax, edx
		shr	eax, 8
		mov	[esp+40h+var_7], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esp+40h+var_6], al
		mov	eax, edx
		shr	eax, 18h
		inc	edi
		mov	byte ptr [esp+40h+var_C], bl
		mov	[esp+40h+var_8], dl
		mov	[esp+40h+var_5], al

loc_16D:				; CODE XREF: _DES_ede3_ofb64_encrypt+107j
		mov	al, byte ptr [esp+esi+40h+var_C]
		inc	esi
		xor	al, [ebp+0]
		and	esi, 7
		mov	[ecx+ebp], al
		inc	ebp
		mov	eax, [esp+40h+arg_8]
		test	eax, eax
		jnz	loc_100
		test	edi, edi
		mov	edi, [esp+40h+var_14]
		jz	short loc_1C4
		mov	eax, [esp+40h+var_10]
		mov	[eax], bl
		mov	eax, ebx
		shr	eax, 8
		mov	[edi], al
		mov	eax, ebx
		shr	eax, 10h
		mov	[edi+1], al
		mov	eax, edx
		shr	ebx, 18h
		mov	[edi+2], bl
		shr	eax, 8
		mov	[edi+3], dl
		mov	[edi+4], al
		mov	eax, edx
		shr	eax, 10h
		shr	edx, 18h
		mov	[edi+5], al
		mov	[edi+6], dl

loc_1C4:				; CODE XREF: _DES_ede3_ofb64_encrypt+18Ej
		mov	eax, [esp+40h+var_2C]
		pop	edi
		mov	[eax], esi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+30h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1DD:				; CODE XREF: _DES_ede3_ofb64_encrypt+E4j
		mov	ecx, [esp+40h+var_4]
		pop	edi
		mov	[ebp+0], esi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 30h
		retn
_DES_ede3_ofb64_encrypt	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _DES_encrypt3:near ; CODE	XREF: _DES_ede3_ofb64_encrypt+11Ap
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _DES_ede3_ofb64_encrypt+1D4p
					; _DES_ede3_ofb64_encrypt+1EAp
		extrn __chkstk:near	; CODE XREF: _DES_ede3_ofb64_encrypt+5p
		extrn ___security_cookie:near ;	DATA XREF: _DES_ede3_ofb64_encrypt+Ar


		end
