;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	0D3AB7E2A5884879D943860C44C13217
; Input	CRC32 :	A679A95C

; File Name   :	C:\compspace\Diff\openssl\obj\bf-586.obj
; Format      :	COFF (X386MAGIC)

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
; Segment alignment '64byte' can not be represented in assembly
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public L$_BF_encrypt_begin
L$_BF_encrypt_begin proc near		; CODE XREF: L$_BF_cbc_encrypt_begin+58p
					; L$_BF_cbc_encrypt_begin+CFp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	ebx
		mov	ebx, [esp+8+arg_0]
		mov	ebp, [esp+8+arg_4]
		push	esi
		push	edi
		mov	edi, [ebx]
		mov	esi, [ebx+4]
		xor	eax, eax
		mov	ebx, [ebp+0]
		xor	ecx, ecx
		xor	edi, ebx
		mov	edx, [ebp+4]
		mov	ebx, edi
		xor	esi, edx
		shr	ebx, 10h

loc_24:					; DATA XREF: .text:00000A4Co
		mov	edx, edi
		mov	al, bh

loc_28:					; DATA XREF: .text:00000A48o
		and	ebx, 0FFh

loc_2E:					; DATA XREF: .text:00000A44o
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	esi, ebx
		mov	edx, [ebp+8]
		mov	ebx, esi
		xor	edi, edx
		shr	ebx, 10h
		mov	edx, esi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	edi, ebx
		mov	edx, [ebp+0Ch]
		mov	ebx, edi
		xor	esi, edx
		shr	ebx, 10h
		mov	edx, edi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	esi, ebx
		mov	edx, [ebp+10h]
		mov	ebx, esi
		xor	edi, edx
		shr	ebx, 10h
		mov	edx, esi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	edi, ebx
		mov	edx, [ebp+14h]
		mov	ebx, edi
		xor	esi, edx
		shr	ebx, 10h
		mov	edx, edi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	esi, ebx
		mov	edx, [ebp+18h]
		mov	ebx, esi
		xor	edi, edx
		shr	ebx, 10h
		mov	edx, esi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	edi, ebx
		mov	edx, [ebp+1Ch]
		mov	ebx, edi
		xor	esi, edx
		shr	ebx, 10h
		mov	edx, edi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	esi, ebx
		mov	edx, [ebp+20h]
		mov	ebx, esi
		xor	edi, edx
		shr	ebx, 10h
		mov	edx, esi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	edi, ebx
		mov	edx, [ebp+24h]
		mov	ebx, edi
		xor	esi, edx
		shr	ebx, 10h
		mov	edx, edi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	esi, ebx
		mov	edx, [ebp+28h]
		mov	ebx, esi
		xor	edi, edx
		shr	ebx, 10h
		mov	edx, esi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	edi, ebx
		mov	edx, [ebp+2Ch]
		mov	ebx, edi
		xor	esi, edx
		shr	ebx, 10h
		mov	edx, edi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	esi, ebx
		mov	edx, [ebp+30h]
		mov	ebx, esi
		xor	edi, edx
		shr	ebx, 10h
		mov	edx, esi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	edi, ebx
		mov	edx, [ebp+34h]
		mov	ebx, edi
		xor	esi, edx
		shr	ebx, 10h
		mov	edx, edi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	esi, ebx
		mov	edx, [ebp+38h]
		mov	ebx, esi
		xor	edi, edx
		shr	ebx, 10h
		mov	edx, esi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	edi, ebx
		mov	edx, [ebp+3Ch]
		mov	ebx, edi
		xor	esi, edx
		shr	ebx, 10h
		mov	edx, edi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	esi, ebx
		mov	edx, [ebp+40h]
		mov	ebx, esi
		xor	edi, edx
		shr	ebx, 10h
		mov	edx, esi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		mov	eax, [esp+10h+arg_0]
		xor	edi, ebx
		mov	edx, [ebp+44h]
		xor	esi, edx
		mov	[eax+4], edi
		mov	[eax], esi
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_BF_encrypt_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_BF_decrypt_begin
L$_BF_decrypt_begin proc near		; CODE XREF: L$_BF_cbc_encrypt_begin+10Cp
					; L$_BF_cbc_encrypt_begin+168p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	ebx
		mov	ebx, [esp+8+arg_0]
		mov	ebp, [esp+8+arg_4]
		push	esi
		push	edi
		mov	edi, [ebx]
		mov	esi, [ebx+4]
		xor	eax, eax
		mov	ebx, [ebp+44h]
		xor	ecx, ecx
		xor	edi, ebx
		mov	edx, [ebp+40h]
		mov	ebx, edi
		xor	esi, edx
		shr	ebx, 10h
		mov	edx, edi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	esi, ebx
		mov	edx, [ebp+3Ch]
		mov	ebx, esi
		xor	edi, edx
		shr	ebx, 10h
		mov	edx, esi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	edi, ebx
		mov	edx, [ebp+38h]
		mov	ebx, edi
		xor	esi, edx
		shr	ebx, 10h
		mov	edx, edi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	esi, ebx
		mov	edx, [ebp+34h]
		mov	ebx, esi
		xor	edi, edx
		shr	ebx, 10h
		mov	edx, esi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	edi, ebx
		mov	edx, [ebp+30h]
		mov	ebx, edi
		xor	esi, edx
		shr	ebx, 10h
		mov	edx, edi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	esi, ebx
		mov	edx, [ebp+2Ch]
		mov	ebx, esi
		xor	edi, edx
		shr	ebx, 10h
		mov	edx, esi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	edi, ebx
		mov	edx, [ebp+28h]
		mov	ebx, edi
		xor	esi, edx
		shr	ebx, 10h
		mov	edx, edi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	esi, ebx
		mov	edx, [ebp+24h]
		mov	ebx, esi
		xor	edi, edx
		shr	ebx, 10h
		mov	edx, esi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	edi, ebx
		mov	edx, [ebp+20h]
		mov	ebx, edi
		xor	esi, edx
		shr	ebx, 10h
		mov	edx, edi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	esi, ebx
		mov	edx, [ebp+1Ch]
		mov	ebx, esi
		xor	edi, edx
		shr	ebx, 10h
		mov	edx, esi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	edi, ebx
		mov	edx, [ebp+18h]
		mov	ebx, edi
		xor	esi, edx
		shr	ebx, 10h
		mov	edx, edi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	esi, ebx
		mov	edx, [ebp+14h]
		mov	ebx, esi
		xor	edi, edx
		shr	ebx, 10h
		mov	edx, esi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	edi, ebx
		mov	edx, [ebp+10h]
		mov	ebx, edi
		xor	esi, edx
		shr	ebx, 10h
		mov	edx, edi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	esi, ebx
		mov	edx, [ebp+0Ch]
		mov	ebx, esi
		xor	edi, edx
		shr	ebx, 10h
		mov	edx, esi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	edi, ebx
		mov	edx, [ebp+8]
		mov	ebx, edi
		xor	esi, edx
		shr	ebx, 10h
		mov	edx, edi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		xor	eax, eax
		xor	esi, ebx
		mov	edx, [ebp+4]
		mov	ebx, esi
		xor	edi, edx
		shr	ebx, 10h
		mov	edx, esi
		mov	al, bh
		and	ebx, 0FFh
		mov	cl, dh
		and	edx, 0FFh
		mov	eax, [ebp+eax*4+48h]
		mov	ebx, [ebp+ebx*4+448h]
		add	ebx, eax
		mov	eax, [ebp+ecx*4+848h]
		xor	ebx, eax
		mov	edx, [ebp+edx*4+0C48h]
		add	ebx, edx
		mov	eax, [esp+10h+arg_0]
		xor	edi, ebx
		mov	edx, [ebp+0]
		xor	esi, edx
		mov	[eax+4], edi
		mov	[eax], esi
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_BF_decrypt_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_BF_cbc_encrypt_begin
L$_BF_cbc_encrypt_begin	proc near

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	ebx
		push	esi
		push	edi
		mov	ebp, [esp+10h+arg_8]
		mov	ebx, [esp+10h+arg_10]
		mov	esi, [ebx]
		mov	edi, [ebx+4]
		push	edi
		push	esi
		push	edi
		push	esi
		mov	ebx, esp
		mov	esi, [esp+20h+arg_0]
		mov	edi, [esp+20h+arg_4]
		mov	ecx, [esp+20h+arg_14]
		mov	eax, [esp+20h+arg_C]
		push	eax
		push	ebx
		cmp	ecx, 0
		jz	L$000decrypt
		and	ebp, 0FFFFFFF8h
		mov	eax, [esp+28h+var_20]
		mov	ebx, [esp+28h+var_1C]
		jz	L$001encrypt_finish

L$002encrypt_loop:			; CODE XREF: L$_BF_cbc_encrypt_begin+77j
		mov	ecx, [esi]
		mov	edx, [esi+4]
		xor	eax, ecx
		xor	ebx, edx
		bswap	eax
		bswap	ebx
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_1C], ebx
		call	L$_BF_encrypt_begin
		mov	eax, [esp+28h+var_20]
		mov	ebx, [esp+28h+var_1C]
		bswap	eax
		bswap	ebx
		mov	[edi], eax
		mov	[edi+4], ebx
		add	esi, 8
		add	edi, 8
		sub	ebp, 8
		jnz	L$002encrypt_loop

L$001encrypt_finish:			; CODE XREF: L$_BF_cbc_encrypt_begin+3Dj
		mov	ebp, [esp+28h+arg_8]
		and	ebp, 7
		jz	L$003finish
		call	$+5

L$004PIC_point:
		pop	edx
		lea	ecx, (L$005cbc_enc_jmp_table - 8CFh)[edx]
		mov	ebp, [ecx+ebp*4]
		add	ebp, edx
		xor	ecx, ecx
		xor	edx, edx
		jmp	ebp
; ---------------------------------------------------------------------------

L$006ej7:
		mov	dh, [esi+6]
		shl	edx, 8

L$007ej6:
		mov	dh, [esi+5]

L$008ej5:
		mov	dl, [esi+4]

L$009ej4:
		mov	ecx, [esi]
		jmp	L$010ejend
; ---------------------------------------------------------------------------

L$011ej3:
		mov	ch, [esi+2]
		shl	ecx, 8

L$012ej2:
		mov	ch, [esi+1]

L$013ej1:
		mov	cl, [esi]

L$010ejend:				; CODE XREF: L$_BF_cbc_encrypt_begin+AFj
		xor	eax, ecx
		xor	ebx, edx
		bswap	eax
		bswap	ebx
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_1C], ebx
		call	L$_BF_encrypt_begin
		mov	eax, [esp+28h+var_20]
		mov	ebx, [esp+28h+var_1C]
		bswap	eax
		bswap	ebx
		mov	[edi], eax
		mov	[edi+4], ebx
		jmp	L$003finish
; ---------------------------------------------------------------------------

L$000decrypt:				; CODE XREF: L$_BF_cbc_encrypt_begin+2Cj
		and	ebp, 0FFFFFFF8h
		mov	eax, [esp+28h+var_18]
		mov	ebx, [esp+28h+var_14]
		jz	L$014decrypt_finish

L$015decrypt_loop:			; CODE XREF: L$_BF_cbc_encrypt_begin+144j
		mov	eax, [esi]
		mov	ebx, [esi+4]
		bswap	eax
		bswap	ebx
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_1C], ebx
		call	L$_BF_decrypt_begin
		mov	eax, [esp+28h+var_20]
		mov	ebx, [esp+28h+var_1C]
		bswap	eax
		bswap	ebx
		mov	ecx, [esp+28h+var_18]
		mov	edx, [esp+28h+var_14]
		xor	ecx, eax
		xor	edx, ebx
		mov	eax, [esi]
		mov	ebx, [esi+4]
		mov	[edi], ecx
		mov	[edi+4], edx
		mov	[esp+28h+var_18], eax
		mov	[esp+28h+var_14], ebx
		add	esi, 8
		add	edi, 8
		sub	ebp, 8
		jnz	L$015decrypt_loop

L$014decrypt_finish:			; CODE XREF: L$_BF_cbc_encrypt_begin+F5j
		mov	ebp, [esp+28h+arg_8]
		and	ebp, 7
		jz	L$003finish
		mov	eax, [esi]
		mov	ebx, [esi+4]
		bswap	eax
		bswap	ebx
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_1C], ebx
		call	L$_BF_decrypt_begin
		mov	eax, [esp+28h+var_20]
		mov	ebx, [esp+28h+var_1C]
		bswap	eax
		bswap	ebx
		mov	ecx, [esp+28h+var_18]
		mov	edx, [esp+28h+var_14]
		xor	ecx, eax
		xor	edx, ebx
		mov	eax, [esi]
		mov	ebx, [esi+4]

L$016dj7:
		ror	edx, 10h
		mov	[edi+6], dl
		shr	edx, 10h

L$017dj6:
		mov	[edi+5], dh

L$018dj5:
		mov	[edi+4], dl

L$019dj4:
		mov	[edi], ecx
		jmp	L$020djend
; ---------------------------------------------------------------------------

L$021dj3:
		ror	ecx, 10h
		mov	[edi+2], cl
		shl	ecx, 10h

L$022dj2:
		mov	[esi+1], ch

L$023dj1:
		mov	[esi], cl

L$020djend:				; CODE XREF: L$_BF_cbc_encrypt_begin+19Bj
		jmp	$+5
; ---------------------------------------------------------------------------

L$003finish:				; CODE XREF: L$_BF_cbc_encrypt_begin+84j
					; L$_BF_cbc_encrypt_begin+E5j ...
		mov	ecx, [esp+28h+arg_10]
		add	esp, 18h
		mov	[ecx], eax
		mov	[ecx+4], ebx
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_BF_cbc_encrypt_begin	endp

; ---------------------------------------------------------------------------
		align 40h
L$005cbc_enc_jmp_table dd 0		; DATA XREF: L$_BF_cbc_encrypt_begin+90o
		dd offset loc_2E
		dd offset loc_28+3
		dd offset loc_24+1
		dd 1Eh,	1Bh, 18h, 12h, 8 dup(90909090h)
_text		ends


		end
