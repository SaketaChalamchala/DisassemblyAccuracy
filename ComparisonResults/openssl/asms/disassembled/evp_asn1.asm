;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	8D37C0E31E9E01DC2835EA05D8DE9ED5
; Input	CRC32 :	4A58BE3A

; File Name   :	C:\compspace\Diff\openssl\obj\evp_asn1.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl ASN1_TYPE_get_int_octetstring(int, int, void *Dst, int)
		public _ASN1_TYPE_get_int_octetstring
_ASN1_TYPE_get_int_octetstring proc near

var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Dst		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 30h ; '0'
		call	__chkstk
		mov	eax, [esp+30h+arg_0]
		push	ebx
		push	esi
		push	edi
		or	ebx, 0FFFFFFFFh
		xor	edi, edi
		xor	esi, esi
		cmp	dword ptr [eax], 10h
		jnz	short $err$20
		mov	eax, [eax+4]
		test	eax, eax
		jz	short $err$20
		mov	ecx, [eax+8]
		lea	edx, [esp+3Ch+arg_0]
		mov	[esp+3Ch+arg_0], ecx
		mov	eax, [eax]
		mov	[esp+3Ch+var_30], eax
		add	eax, ecx
		mov	[esp+3Ch+var_10], eax
		lea	eax, [esp+3Ch+var_30]
		push	eax
		lea	eax, [esp+40h+var_2C]
		mov	[esp+40h+var_8], edx
		push	eax
		mov	[esp+44h+var_2C], ecx
		mov	[esp+44h+var_24], 6Dh ;	'm'
		call	_asn1_GetSequence
		add	esp, 8
		test	eax, eax
		jnz	short loc_A7
		mov	[esp+3Ch+var_4], 0A3h ;	'£'

$err$20:				; CODE XREF: _ASN1_TYPE_get_int_octetstring+1Bj
					; _ASN1_TYPE_get_int_octetstring+22j ...
		push	0BCh ; '¼'
		push	offset ??_C@_0BJ@IFLEADKK@?4?2crypto?2asn1?2evp_asn1?4c?$AA@ ; ".\\crypto\\asn1\\evp_asn1.c"
		push	6Dh ; 'm'
		push	86h ; '†'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h

loc_84:					; CODE XREF: _ASN1_TYPE_get_int_octetstring+15Aj
					; _ASN1_TYPE_get_int_octetstring+16Dj
		test	esi, esi
		jz	short loc_91
		push	esi
		call	_ASN1_STRING_free
		add	esp, 4

loc_91:					; CODE XREF: _ASN1_TYPE_get_int_octetstring+86j
		test	edi, edi
		jz	short loc_9E
		push	edi
		call	_ASN1_STRING_free
		add	esp, 4

loc_9E:					; CODE XREF: _ASN1_TYPE_get_int_octetstring+93j
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_A7:					; CODE XREF: _ASN1_TYPE_get_int_octetstring+5Fj
		mov	eax, [esp+3Ch+var_2C]
		push	[esp+3Ch+var_14]
		mov	[esp+40h+var_C], eax
		lea	eax, [esp+40h+var_2C]
		push	eax
		push	0
		call	_d2i_ASN1_INTEGER
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short $err$20
		mov	eax, [esp+3Ch+var_C]
		mov	edx, [esp+3Ch+var_2C]
		sub	eax, edx
		mov	ecx, [esp+3Ch+var_14]
		add	ecx, eax
		mov	[esp+3Ch+var_C], edx
		push	ecx
		lea	eax, [esp+40h+var_2C]
		mov	[esp+40h+var_14], ecx
		push	eax
		push	0
		call	_d2i_ASN1_OCTET_STRING
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	$err$20
		mov	eax, [esp+3Ch+var_C]
		sub	eax, [esp+3Ch+var_2C]
		mov	ecx, [esp+3Ch+var_14]
		add	ecx, eax
		test	[esp+3Ch+var_20], 1
		mov	[esp+3Ch+var_14], ecx
		jnz	short loc_11C
		xor	eax, eax
		test	ecx, ecx
		setle	al
		jmp	short loc_12E
; ---------------------------------------------------------------------------

loc_11C:				; CODE XREF: _ASN1_TYPE_get_int_octetstring+111j
		push	ecx
		lea	eax, [esp+40h+var_2C]
		push	eax
		call	_ASN1_const_check_infinite_end
		add	esp, 8
		mov	[esp+3Ch+var_28], eax

loc_12E:				; CODE XREF: _ASN1_TYPE_get_int_octetstring+11Aj
		test	eax, eax
		jz	$err$20
		mov	ebx, [esp+3Ch+arg_4]
		test	ebx, ebx
		jz	short loc_149
		push	edi
		call	_ASN1_INTEGER_get
		add	esp, 4
		mov	[ebx], eax

loc_149:				; CODE XREF: _ASN1_TYPE_get_int_octetstring+13Cj
		mov	ebx, [esi]
		mov	eax, [esp+3Ch+arg_C]
		cmp	eax, ebx
		mov	ecx, [esp+3Ch+Dst]
		cmovg	eax, ebx
		test	ecx, ecx
		jz	loc_84
		push	eax		; Size
		push	dword ptr [esi+8] ; Src
		push	ecx		; Dst
		call	_memcpy
		add	esp, 0Ch
		jmp	loc_84
_ASN1_TYPE_get_int_octetstring endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 174h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl ASN1_TYPE_get_octetstring(int, void *Dst,	int)
		public _ASN1_TYPE_get_octetstring
_ASN1_TYPE_get_octetstring proc	near

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax], 4
		jnz	short loc_1A4
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_1A4
		mov	ecx, [esp+arg_8]
		push	esi
		mov	esi, [eax]
		cmp	esi, ecx
		cmovl	ecx, esi
		push	ecx		; Size
		push	dword ptr [eax+8] ; Src
		push	[esp+0Ch+Dst]	; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1A4:				; CODE XREF: _ASN1_TYPE_get_octetstring+7j
					; _ASN1_TYPE_get_octetstring+Ej
		push	55h ; 'U'
		push	offset ??_C@_0BJ@IFLEADKK@?4?2crypto?2asn1?2evp_asn1?4c?$AA@ ; ".\\crypto\\asn1\\evp_asn1.c"
		push	6Dh ; 'm'
		push	87h ; '‡'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		retn
_ASN1_TYPE_get_octetstring endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_TYPE_set_int_octetstring
_ASN1_TYPE_set_int_octetstring proc near

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_3C		= dword	ptr -3Ch
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_24		= byte ptr -24h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 48h ; 'H'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+48h+var_4], eax
		mov	eax, [esp+48h+arg_8]
		lea	ecx, [esp+48h+var_24]
		push	ebx
		push	ebp
		mov	ebp, [esp+50h+arg_0]
		push	esi
		mov	[esp+54h+var_2C], eax
		mov	eax, [esp+54h+arg_C]
		push	edi
		push	[esp+58h+arg_4]
		mov	[esp+5Ch+var_34], eax
		lea	eax, [esp+5Ch+var_44]
		push	eax
		mov	[esp+60h+var_3C], ecx
		mov	[esp+60h+var_44], 20h ;	' '
		mov	[esp+60h+var_30], 4
		call	_ASN1_INTEGER_set
		lea	eax, [esp+60h+var_44]
		push	0
		push	eax
		call	_i2d_ASN1_INTEGER
		push	0
		push	4
		mov	ebx, eax
		lea	eax, [esp+70h+var_34]
		push	0
		push	eax
		call	_i2d_ASN1_bytes
		add	ebx, eax
		push	10h
		push	ebx
		push	1
		call	_ASN1_object_size
		add	esp, 2Ch
		mov	edi, eax
		call	_ASN1_STRING_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_266
		push	edi
		push	0
		push	esi
		call	_ASN1_STRING_set
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_27B
		push	esi
		call	_ASN1_STRING_free
		add	esp, 4

loc_266:				; CODE XREF: _ASN1_TYPE_set_int_octetstring+8Bj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+48h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
; ---------------------------------------------------------------------------

loc_27B:				; CODE XREF: _ASN1_TYPE_set_int_octetstring+9Bj
		mov	eax, [esi+8]
		push	0
		push	10h
		mov	[esi], edi
		push	ebx
		mov	[esp+64h+var_48], eax
		lea	eax, [esp+64h+var_48]
		push	1
		push	eax
		call	_ASN1_put_object
		lea	eax, [esp+6Ch+var_48]
		push	eax
		lea	eax, [esp+70h+var_44]
		push	eax
		call	_i2d_ASN1_INTEGER
		push	0
		push	4
		lea	eax, [esp+7Ch+var_48]
		push	eax
		lea	eax, [esp+80h+var_34]
		push	eax
		call	_i2d_ASN1_bytes
		push	esi
		push	10h
		push	ebp
		call	_ASN1_TYPE_set
		mov	ecx, [esp+90h+var_4]
		add	esp, 38h
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
_ASN1_TYPE_set_int_octetstring endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_TYPE_set_octetstring
_ASN1_TYPE_set_octetstring proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	4
		call	_ASN1_STRING_type_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_30F
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	esi
		call	_ASN1_STRING_set
		add	esp, 0Ch
		push	esi
		test	eax, eax
		jnz	short loc_313
		call	_ASN1_STRING_free
		add	esp, 4

loc_30F:				; CODE XREF: _ASN1_TYPE_set_octetstring+Fj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_313:				; CODE XREF: _ASN1_TYPE_set_octetstring+25j
		push	4
		push	[esp+0Ch+arg_0]
		call	_ASN1_TYPE_set
		add	esp, 0Ch
		mov	eax, 1
		pop	esi
		retn
_ASN1_TYPE_set_octetstring endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 328h
; COMDAT (pick any)
		public ??_C@_0BJ@IFLEADKK@?4?2crypto?2asn1?2evp_asn1?4c?$AA@
; `string'
??_C@_0BJ@IFLEADKK@?4?2crypto?2asn1?2evp_asn1?4c?$AA@ db '.\crypto\asn1\evp_asn1.c',0
					; DATA XREF: _ASN1_TYPE_get_int_octetstring+6Eo
					; _ASN1_TYPE_get_octetstring+32o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ERR_put_error:near ; CODE XREF: _ASN1_TYPE_get_int_octetstring+7Cp
					; _ASN1_TYPE_get_octetstring+40p
		extrn _ASN1_TYPE_set:near ; CODE XREF: _ASN1_TYPE_set_int_octetstring+FBp
					; _ASN1_TYPE_set_octetstring+39p
		extrn _ASN1_STRING_new:near ; CODE XREF: _ASN1_TYPE_set_int_octetstring+82p
		extrn _ASN1_STRING_free:near ; CODE XREF: _ASN1_TYPE_get_int_octetstring+89p
					; _ASN1_TYPE_get_int_octetstring+96p ...
		extrn _ASN1_STRING_type_new:near ; CODE	XREF: _ASN1_TYPE_set_octetstring+3p
		extrn _ASN1_STRING_set:near ; CODE XREF: _ASN1_TYPE_set_int_octetstring+91p
					; _ASN1_TYPE_set_octetstring+1Ap
		extrn _d2i_ASN1_INTEGER:near ; CODE XREF: _ASN1_TYPE_get_int_octetstring+BAp
		extrn _i2d_ASN1_INTEGER:near ; CODE XREF: _ASN1_TYPE_set_int_octetstring+5Ap
					; _ASN1_TYPE_set_int_octetstring+DFp
		extrn _d2i_ASN1_OCTET_STRING:near
					; CODE XREF: _ASN1_TYPE_get_int_octetstring+E8p
		extrn _ASN1_INTEGER_set:near ; CODE XREF: _ASN1_TYPE_set_int_octetstring+4Ep
		extrn _ASN1_INTEGER_get:near
					; CODE XREF: _ASN1_TYPE_get_int_octetstring+13Fp
		extrn _i2d_ASN1_bytes:near ; CODE XREF:	_ASN1_TYPE_set_int_octetstring+6Cp
					; _ASN1_TYPE_set_int_octetstring+F2p
		extrn _ASN1_const_check_infinite_end:near
					; CODE XREF: _ASN1_TYPE_get_int_octetstring+122p
		extrn _ASN1_put_object:near ; CODE XREF: _ASN1_TYPE_set_int_octetstring+D0p
		extrn _ASN1_object_size:near ; CODE XREF: _ASN1_TYPE_set_int_octetstring+78p
		extrn _asn1_GetSequence:near ; CODE XREF: _ASN1_TYPE_get_int_octetstring+55p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _ASN1_TYPE_set_int_octetstring+B2p
					; _ASN1_TYPE_set_int_octetstring+115p
		extrn __chkstk:near	; CODE XREF: _ASN1_TYPE_get_int_octetstring+5p
					; _ASN1_TYPE_set_int_octetstring+5p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _ASN1_TYPE_get_int_octetstring+165p
					; _ASN1_TYPE_get_octetstring+24p
		extrn ___security_cookie:near ;	DATA XREF: _ASN1_TYPE_set_int_octetstring+Ar


		end
