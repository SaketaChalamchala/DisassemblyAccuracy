;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	6AC61B1BA87E815046497739B53E6204
; Input	CRC32 :	AD5040B0

; File Name   :	C:\compspace\Diff\openssl\obj\casttest.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
_k		dd 67452301h, 78563412h, 89674523h, 9A785634h ;	DATA XREF: _main:loc_F0o
_in		dd 67452301h		; DATA XREF: _main+4Do	_main+10Cr ...
dword_14	dd 0EFCDAB89h		; DATA XREF: _main+119r
_k_len		dd 10h,	0Ah, 5		; DATA XREF: _main+1Eo
_c		dd 0E54F8B23h, 0B2447E84h, 1A716AEBh, 1B27022Ch, 0D116C87Ah
					; DATA XREF: _main+23o
		dd 2E309B6Eh
_in_a		xmmword	9A785634896745237856341267452301h ; DATA XREF: _main+1C3o
					; _main+1FBr
_in_b		xmmword	9A785634896745237856341267452301h ; DATA XREF: _main+214r
_c_a		db 0EEh			; DATA XREF: _main+2FEo _main:loc_460r
		db 0A9h, 0D0h, 0A2h
		dd 0A63BFD49h, 0B86F43B3h, 92CA6D9Dh
_c_b		db 0B2h			; DATA XREF: _main+320o _main:loc_4D0r
		db 0C9h, 5Eh, 0B0h
		dd 71AD310Ch, 0B805AC80h, 6E693DE8h
; `main'::`11'::hex
?hex@?L@??main@@9@9 dd offset ??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@
					; DATA XREF: _main+2C2r
_data		ends			; "0123456789ABCDEF"

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 80h
; COMDAT (pick any)
		public ??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@
; `string'
??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@ db '0123456789ABCDEF',0
					; DATA XREF: .data:`main'::`11'::hexo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 94h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; _printf+19p
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public _main
_main		proc near

var_12C		= byte ptr -12Ch
var_A8		= byte ptr -0A8h
var_24		= xmmword ptr -24h
var_14		= xmmword ptr -14h
var_4		= dword	ptr -4
argc		= dword	ptr  4
argv		= dword	ptr  8
envp		= dword	ptr  0Ch

		mov	eax, 12Ch
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+12Ch+var_4], eax
		push	ebx
		push	ebp
		push	esi
		push	edi
		xor	ebp, ebp
		mov	ebx, offset _k_len
		mov	edi, offset _c
		nop	dword ptr [eax+eax+00000000h]

loc_F0:					; CODE XREF: _main+1C9j
		push	offset _k
		push	dword ptr [ebx]
		lea	eax, [esp+144h+var_12C]
		push	eax
		call	_CAST_set_key
		push	1
		lea	eax, [esp+14Ch+var_12C]
		push	eax
		push	offset _out
		push	offset _in
		call	_CAST_ecb_encrypt
		mov	eax, ds:_out
		add	esp, 1Ch
		cmp	eax, [edi]
		jnz	short loc_131
		mov	eax, ds:dword_538
		cmp	eax, [edi+4]
		jz	loc_1AE

loc_131:				; CODE XREF: _main+61j
		mov	eax, [ebx]
		shl	eax, 3
		push	eax
		push	offset ??_C@_0CK@HLLBFMFJ@ecb?5cast?5error?5encrypting?5for?5ke@ ; "ecb	cast error encrypting for keysize %"...
		call	_printf
		push	offset ??_C@_09DAIIHNJG@got?5?5?5?5?5?3?$AA@ ; "got	:"
		call	_printf
		add	esp, 0Ch
		xor	esi, esi

loc_150:				; CODE XREF: _main+A9j
		movzx	eax, byte ptr ds:_out[esi]
		push	eax
		push	offset ??_C@_05BFHEBJNP@?$CF02X?5?$AA@ ; "%02X "
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 8
		jl	short loc_150
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		push	offset ??_C@_09PBKDEKON@expected?3?$AA@	; "expected:"
		call	_printf
		add	esp, 8
		xor	esi, esi

loc_184:				; CODE XREF: _main+DAj
		movzx	eax, byte ptr [edi+esi]
		push	eax
		push	offset ??_C@_05BFHEBJNP@?$CF02X?5?$AA@ ; "%02X "
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 8
		jl	short loc_184
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		mov	ebp, 14h
		call	_printf
		add	esp, 4

loc_1AE:				; CODE XREF: _main+6Bj
		push	0
		lea	eax, [esp+140h+var_12C]
		push	eax
		push	offset _out
		push	offset _out
		call	_CAST_ecb_encrypt
		mov	eax, ds:_out
		add	esp, 10h
		cmp	eax, _in
		jnz	short loc_1E5
		mov	eax, ds:dword_538
		cmp	eax, dword_14
		jz	loc_27D

loc_1E5:				; CODE XREF: _main+112j
		mov	eax, [ebx]
		shl	eax, 3
		push	eax
		push	offset ??_C@_0CK@LCEDIHFM@ecb?5cast?5error?5decrypting?5for?5ke@ ; "ecb	cast error decrypting for keysize %"...
		call	_printf
		push	offset ??_C@_09DAIIHNJG@got?5?5?5?5?5?3?$AA@ ; "got	:"
		call	_printf
		add	esp, 0Ch
		xor	esi, esi
		nop	dword ptr [eax+00h]
		nop	dword ptr [eax+eax+00000000h]

loc_210:				; CODE XREF: _main+169j
		movzx	eax, byte ptr ds:_out[esi]
		push	eax
		push	offset ??_C@_05BFHEBJNP@?$CF02X?5?$AA@ ; "%02X "
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 8
		jl	short loc_210
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		push	offset ??_C@_09PBKDEKON@expected?3?$AA@	; "expected:"
		call	_printf
		add	esp, 8
		xor	esi, esi
		nop	dword ptr [eax+00h]
		nop	dword ptr [eax+eax+00000000h]

loc_250:				; CODE XREF: _main+1A9j
		movzx	eax, byte ptr _in[esi]
		push	eax
		push	offset ??_C@_05BFHEBJNP@?$CF02X?5?$AA@ ; "%02X "
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 8
		jl	short loc_250
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		add	esp, 4
		mov	ebp, 3

loc_27D:				; CODE XREF: _main+11Fj
		add	edi, 8
		add	ebx, 4
		cmp	edi, offset _in_a
		jl	loc_F0
		test	ebp, ebp
		jnz	short loc_2A0
		push	offset ??_C@_0O@NEJIHGHH@ecb?5cast5?5ok?6?$AA@ ; "ecb cast5 ok\n"
		call	_printf
		add	esp, 4

loc_2A0:				; CODE XREF: _main+1D1j
		push	offset ??_C@_0CC@GBBHNIAA@This?5test?5will?5take?5some?5time?4?4?4@ ; "This test will take some	time...."
		call	_printf
		mov	ebx, dword ptr ds:__imp____acrt_iob_func
		push	1
		call	ebx ; __imp____acrt_iob_func
		push	eax		; File
		call	dword ptr ds:__imp__fflush
		movups	xmm0, _in_a
		add	esp, 0Ch
		mov	edi, 1
		xor	esi, esi
		movups	[esp+13Ch+var_24], xmm0
		movups	xmm0, _in_b
		movups	[esp+13Ch+var_14], xmm0
		nop	dword ptr [eax+00h]
		nop	word ptr [eax+eax+00000000h]

loc_2F0:				; CODE XREF: _main+2F1j
		lea	eax, [esp+13Ch+var_14]
		push	eax
		lea	eax, [esp+140h+var_A8]
		push	10h
		push	eax
		call	_CAST_set_key
		push	1
		lea	eax, [esp+14Ch+var_A8]
		push	eax
		lea	eax, [esp+150h+var_24]
		push	eax
		push	eax
		call	_CAST_ecb_encrypt
		push	1
		lea	eax, [esp+15Ch+var_A8]
		push	eax
		lea	eax, [esp+160h+var_24+8]
		push	eax
		push	eax
		call	_CAST_ecb_encrypt
		lea	eax, [esp+168h+var_24]
		push	eax
		lea	eax, [esp+16Ch+var_12C]
		push	10h
		push	eax
		call	_CAST_set_key
		push	1
		lea	eax, [esp+178h+var_12C]
		push	eax
		lea	eax, [esp+17Ch+var_14]
		push	eax
		push	eax
		call	_CAST_ecb_encrypt
		add	esp, 48h
		lea	eax, [esp+13Ch+var_12C]
		push	1
		push	eax
		lea	eax, [esp+144h+var_14+8]
		push	eax
		push	eax
		call	_CAST_ecb_encrypt
		add	esp, 10h
		cmp	si, 0FFFFh
		jnz	short loc_3AA
		mov	eax, ?hex@?L@??main@@9@9 ; `main'::`11'::hex
		mov	ecx, edi
		and	ecx, 0Fh
		movsx	eax, byte ptr [ecx+eax]
		push	eax
		push	offset ??_C@_02HAOIJKIC@?$CFc?$AA@ ; "%c"
		call	_printf
		push	1
		call	ebx ; __imp____acrt_iob_func
		push	eax		; File
		call	dword ptr ds:__imp__fflush
		add	esp, 10h
		inc	edi

loc_3AA:				; CODE XREF: _main+2C0j
		inc	esi
		cmp	esi, 0F4240h
		jl	loc_2F0
		lea	ecx, [esp+13Ch+var_24]
		mov	edx, offset _c_a
		mov	esi, 0Ch

loc_3C8:				; CODE XREF: _main+317j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_40B
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_3C8
		lea	ecx, [esp+13Ch+var_14]
		mov	edx, offset _c_b
		mov	esi, 0Ch
		nop	word ptr [eax+eax+00h]

loc_3F0:				; CODE XREF: _main+33Fj
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_40B
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_3F0
		push	offset ??_C@_04CFDEAMPI@?5ok?6?$AA@ ; "	ok\n"
		jmp	loc_4F0
; ---------------------------------------------------------------------------

loc_40B:				; CODE XREF: _main+30Cj _main+334j
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		push	offset ??_C@_06HPIHNGNL@Error?6?$AA@ ; "Error\n"
		call	_printf
		push	offset ??_C@_07MODPDANM@A?5out?5?$DN?$AA@ ; "A out ="
		call	_printf
		add	esp, 0Ch
		xor	esi, esi
		xchg	ax, ax

loc_430:				; CODE XREF: _main+38Aj
		movzx	eax, byte ptr [esp+esi+13Ch+var_24]
		push	eax
		push	offset ??_C@_05BFHEBJNP@?$CF02X?5?$AA@ ; "%02X "
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 10h
		jl	short loc_430
		push	offset ??_C@_08CDPJFNGG@?6actual?$DN?$AA@ ; "\nactual="
		call	_printf
		add	esp, 4
		xor	esi, esi
		nop	dword ptr [eax+eax+00h]

loc_460:				; CODE XREF: _main+3B9j
		movzx	eax, _c_a[esi]
		push	eax
		push	offset ??_C@_05BFHEBJNP@?$CF02X?5?$AA@ ; "%02X "
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 10h
		jl	short loc_460
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		push	offset ??_C@_07EALADHDP@B?5out?5?$DN?$AA@ ; "B out ="
		call	_printf
		add	esp, 8
		xor	esi, esi
		nop	dword ptr [eax+00h]
		nop	dword ptr [eax+eax+00000000h]

loc_4A0:				; CODE XREF: _main+3FAj
		movzx	eax, byte ptr [esp+esi+13Ch+var_14]
		push	eax
		push	offset ??_C@_05BFHEBJNP@?$CF02X?5?$AA@ ; "%02X "
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 10h
		jl	short loc_4A0
		push	offset ??_C@_08CDPJFNGG@?6actual?$DN?$AA@ ; "\nactual="
		call	_printf
		add	esp, 4
		xor	esi, esi
		nop	dword ptr [eax+eax+00h]

loc_4D0:				; CODE XREF: _main+429j
		movzx	eax, _c_b[esi]
		push	eax
		push	offset ??_C@_05BFHEBJNP@?$CF02X?5?$AA@ ; "%02X "
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 10h
		jl	short loc_4D0
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"

loc_4F0:				; CODE XREF: _main+346j
		call	_printf
		add	esp, 4
		push	ebp		; Code
		call	dword ptr ds:__imp__exit
_main		endp

; ---------------------------------------------------------------------------
		db 5Fh
		db 5Eh,	5Dh, 5Bh
$LN88:					; $LN86
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 504h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int printf(const char	*Format, ...)
		public _printf
_printf		proc near		; CODE XREF: _main+7Cp	_main+86p ...

Format		= dword	ptr  4
arg_4		= byte ptr  8

		push	esi
		mov	esi, [esp+4+Format]
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		lea	ecx, [esp+4+arg_4]
		push	ecx
		push	0
		push	esi
		push	eax
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		pop	esi
		retn
_printf		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 534h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
_out		dd ?			; DATA XREF: _main+48o	_main+57r ...
dword_538	dd ?			; DATA XREF: _main+63r	_main+114r
		dd 12h dup(?)
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 584h
; COMDAT (pick any)
		public ??_C@_0CK@HLLBFMFJ@ecb?5cast?5error?5encrypting?5for?5ke@
; char `string'[]
??_C@_0CK@HLLBFMFJ@ecb?5cast?5error?5encrypting?5for?5ke@ db 'ecb cast error encrypting for keysize %d',0Ah,0
					; DATA XREF: _main+77o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5B0h
; COMDAT (pick any)
		public ??_C@_09DAIIHNJG@got?5?5?5?5?5?3?$AA@
; char `string'[]
??_C@_09DAIIHNJG@got?5?5?5?5?5?3?$AA@ db 'got     :',0 ; DATA XREF: _main+81o
					; _main+135o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5BCh
; COMDAT (pick any)
		public ??_C@_05BFHEBJNP@?$CF02X?5?$AA@
; char `string'[]
??_C@_05BFHEBJNP@?$CF02X?5?$AA@	db '%02X ',0 ; DATA XREF: _main+98o _main+C9o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5C4h
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; char `string'[2]
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah,0	; DATA XREF: _main+ABo	_main+DCo ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5C8h
; COMDAT (pick any)
		public ??_C@_09PBKDEKON@expected?3?$AA@
; char `string'[]
??_C@_09PBKDEKON@expected?3?$AA@ db 'expected:',0 ; DATA XREF: _main+B5o
					; _main+175o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5D4h
; COMDAT (pick any)
		public ??_C@_0CK@LCEDIHFM@ecb?5cast?5error?5decrypting?5for?5ke@
; char `string'[]
??_C@_0CK@LCEDIHFM@ecb?5cast?5error?5decrypting?5for?5ke@ db 'ecb cast error decrypting for keysize %d',0Ah,0
					; DATA XREF: _main+12Bo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 600h
; COMDAT (pick any)
		public ??_C@_0O@NEJIHGHH@ecb?5cast5?5ok?6?$AA@
; char `string'[]
??_C@_0O@NEJIHGHH@ecb?5cast5?5ok?6?$AA@	db 'ecb cast5 ok',0Ah,0 ; DATA XREF: _main+1D3o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 610h
; COMDAT (pick any)
		public ??_C@_0CC@GBBHNIAA@This?5test?5will?5take?5some?5time?4?4?4@
; char `string'[]
??_C@_0CC@GBBHNIAA@This?5test?5will?5take?5some?5time?4?4?4@ db	'This test will take some time....',0
					; DATA XREF: _main:loc_2A0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 634h
; COMDAT (pick any)
		public ??_C@_02HAOIJKIC@?$CFc?$AA@
; char `string'[3]
??_C@_02HAOIJKIC@?$CFc?$AA@ db '%c',0   ; DATA XREF: _main+2D1o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 638h
; COMDAT (pick any)
		public ??_C@_06HPIHNGNL@Error?6?$AA@
; char `string'[]
??_C@_06HPIHNGNL@Error?6?$AA@ db 'Error',0Ah,0 ; DATA XREF: _main+355o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 640h
; COMDAT (pick any)
		public ??_C@_07MODPDANM@A?5out?5?$DN?$AA@
; char `string'[]
??_C@_07MODPDANM@A?5out?5?$DN?$AA@ db 'A out =',0 ; DATA XREF: _main+35Fo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 648h
; COMDAT (pick any)
		public ??_C@_08CDPJFNGG@?6actual?$DN?$AA@
; char `string'[]
??_C@_08CDPJFNGG@?6actual?$DN?$AA@ db 0Ah ; DATA XREF: _main+38Co _main+3FCo
		db 'actual=',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 654h
; COMDAT (pick any)
		public ??_C@_07EALADHDP@B?5out?5?$DN?$AA@
; char `string'[]
??_C@_07EALADHDP@B?5out?5?$DN?$AA@ db 'B out =',0 ; DATA XREF: _main+3C5o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 65Ch
; COMDAT (pick any)
		public ??_C@_04CFDEAMPI@?5ok?6?$AA@
; `string'
??_C@_04CFDEAMPI@?5ok?6?$AA@ db	' ok',0Ah,0 ; DATA XREF: _main+341o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _main+1F2p
					; _main+2DDp ...
; int __cdecl _fflush(FILE *File)
		extrn __imp__fflush:near ; CODE	XREF: _main+1F5p _main+2E0p
					; DATA XREF: ...
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _printf+23p
					; DATA XREF: ...
; void __cdecl __noreturn _exit(int Code)
		extrn __imp__exit:near	; CODE XREF: _main+439p
					; DATA XREF: _main+439r
		extrn _CAST_set_key:near ; CODE	XREF: _main+3Cp _main+242p ...
		extrn _CAST_ecb_encrypt:near ; CODE XREF: _main+52p _main+FFp	...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
		extrn __chkstk:near	; CODE XREF: _main+5p
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso
		extrn ___security_cookie:near ;	DATA XREF: _main+Ar


		end
