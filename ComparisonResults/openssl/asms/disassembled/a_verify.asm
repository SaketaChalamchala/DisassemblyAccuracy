;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	329007885CE9BAFB9AD95AEDA554A665
; Input	CRC32 :	1356819F

; File Name   :	C:\compspace\Diff\openssl\obj\a_verify.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_item_verify
_ASN1_item_verify proc near

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 20h ; ' '
		call	__chkstk
		push	esi
		push	edi
		mov	edi, [esp+28h+arg_10]
		or	esi, 0FFFFFFFFh
		mov	[esp+28h+var_20], 0
		test	edi, edi
		jnz	short loc_42
		push	92h ; '’'
		push	offset ??_C@_0BJ@HLJJPCLA@?4?2crypto?2asn1?2a_verify?4c?$AA@ ; ".\\crypto\\asn1\\a_verify.c"
		push	43h ; 'C'
		push	0C5h ; 'Å'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		or	eax, esi
		pop	edi
		pop	esi
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_42:					; CODE XREF: _ASN1_item_verify+1Dj
		push	ebx
		mov	ebx, [esp+2Ch+arg_8]
		cmp	dword ptr [ebx+4], 3
		jnz	short loc_7B
		test	byte ptr [ebx+0Ch], 7
		jz	short loc_7B
		push	97h ; '—'
		push	offset ??_C@_0BJ@HLJJPCLA@?4?2crypto?2asn1?2a_verify?4c?$AA@ ; ".\\crypto\\asn1\\a_verify.c"
		push	0DCh ; 'Ü'
		push	0C5h ; 'Å'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_7B:					; CODE XREF: _ASN1_item_verify+4Bj
					; _ASN1_item_verify+51j
		lea	eax, [esp+2Ch+var_18]
		push	ebp
		push	eax
		call	_EVP_MD_CTX_init
		mov	ebp, [esp+34h+arg_4]
		lea	eax, [esp+34h+var_1C]
		add	esp, 4
		push	eax
		lea	eax, [esp+34h+arg_10]
		push	eax
		push	dword ptr [ebp+0]
		call	_OBJ_obj2nid
		add	esp, 4
		push	eax
		call	_OBJ_find_sigid_algs
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_D2
		push	9Fh ; 'Ÿ'

loc_B4:					; CODE XREF: _ASN1_item_verify+153j
		push	offset ??_C@_0BJ@HLJJPCLA@?4?2crypto?2asn1?2a_verify?4c?$AA@ ; ".\\crypto\\asn1\\a_verify.c"
		push	0C7h ; 'Ç'
		push	0C5h ; 'Å'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$22
; ---------------------------------------------------------------------------

loc_D2:					; CODE XREF: _ASN1_item_verify+ADj
		mov	eax, [esp+30h+arg_10]
		test	eax, eax
		jnz	short loc_158
		mov	eax, [edi+0Ch]
		test	eax, eax
		jz	short loc_14E
		mov	eax, [eax+64h]
		test	eax, eax
		jz	short loc_14E
		push	edi
		push	ebx
		push	ebp
		push	[esp+3Ch+arg_C]
		lea	ecx, [esp+40h+var_18]
		push	[esp+40h+arg_0]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 18h
		cmp	esi, 2
		jnz	$err$22
		or	esi, 0FFFFFFFFh

loc_10B:				; CODE XREF: _ASN1_item_verify+1DBj
		push	[esp+30h+arg_0]
		lea	eax, [esp+34h+var_20]
		push	eax
		push	[esp+38h+arg_C]
		call	_ASN1_item_i2d
		mov	edi, eax
		add	esp, 0Ch
		mov	eax, [esp+30h+var_20]
		test	eax, eax
		jnz	loc_200
		push	0CBh ; 'Ë'
		push	offset ??_C@_0BJ@HLJJPCLA@?4?2crypto?2asn1?2a_verify?4c?$AA@ ; ".\\crypto\\asn1\\a_verify.c"
		push	41h ; 'A'
		push	0C5h ; 'Å'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$22
; ---------------------------------------------------------------------------

loc_14E:				; CODE XREF: _ASN1_item_verify+DFj
					; _ASN1_item_verify+E6j
		push	0A5h ; '¥'
		jmp	loc_B4
; ---------------------------------------------------------------------------

loc_158:				; CODE XREF: _ASN1_item_verify+D8j
		push	eax
		call	_OBJ_nid2sn
		push	eax
		call	_EVP_get_digestbyname
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jnz	short loc_190
		push	0B6h ; '¶'
		push	offset ??_C@_0BJ@HLJJPCLA@?4?2crypto?2asn1?2a_verify?4c?$AA@ ; ".\\crypto\\asn1\\a_verify.c"
		push	0A1h ; '¡'
		push	0C5h ; 'Å'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$22
; ---------------------------------------------------------------------------

loc_190:				; CODE XREF: _ASN1_item_verify+16Bj
		push	[esp+30h+var_1C]
		call	_EVP_PKEY_type
		mov	ecx, [edi+0Ch]
		add	esp, 4
		cmp	eax, [ecx]
		jz	short loc_1C6
		push	0BCh ; '¼'
		push	offset ??_C@_0BJ@HLJJPCLA@?4?2crypto?2asn1?2a_verify?4c?$AA@ ; ".\\crypto\\asn1\\a_verify.c"
		push	0C8h ; 'È'
		push	0C5h ; 'Å'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$22
; ---------------------------------------------------------------------------

loc_1C6:				; CODE XREF: _ASN1_item_verify+1A1j
		push	edi
		push	0
		push	ebp
		lea	eax, [esp+3Ch+var_18]
		push	0
		push	eax
		call	_EVP_DigestVerifyInit
		add	esp, 14h
		test	eax, eax
		jnz	loc_10B
		push	0C1h ; 'Á'

loc_1E6:				; CODE XREF: _ASN1_item_verify+218j
					; _ASN1_item_verify+248j
		push	offset ??_C@_0BJ@HLJJPCLA@?4?2crypto?2asn1?2a_verify?4c?$AA@ ; ".\\crypto\\asn1\\a_verify.c"
		push	6
		push	0C5h ; 'Å'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	esi, esi
		jmp	short $err$22
; ---------------------------------------------------------------------------

loc_200:				; CODE XREF: _ASN1_item_verify+128j
		push	edi
		push	eax
		lea	eax, [esp+38h+var_18]
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_21A
		push	0D0h ; 'Ð'
		jmp	short loc_1E6
; ---------------------------------------------------------------------------

loc_21A:				; CODE XREF: _ASN1_item_verify+211j
		push	edi
		push	[esp+34h+var_20]
		call	_OPENSSL_cleanse
		push	[esp+38h+var_20]
		call	_CRYPTO_free
		push	dword ptr [ebx]
		lea	eax, [esp+40h+var_18]
		push	dword ptr [ebx+8]
		push	eax
		call	_EVP_DigestVerifyFinal
		add	esp, 18h
		test	eax, eax
		jg	short loc_24A
		push	0DAh ; 'Ú'
		jmp	short loc_1E6
; ---------------------------------------------------------------------------

loc_24A:				; CODE XREF: _ASN1_item_verify+241j
		mov	esi, 1

$err$22:				; CODE XREF: _ASN1_item_verify+CDj
					; _ASN1_item_verify+102j ...
		lea	eax, [esp+30h+var_18]
		push	eax
		call	_EVP_MD_CTX_cleanup
		add	esp, 4
		mov	eax, esi
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 20h
		retn
_ASN1_item_verify endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 268h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_verify
_ASN1_verify	proc near

var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 1Ch
		call	__chkstk
		push	esi
		lea	eax, [esp+20h+var_18]
		or	esi, 0FFFFFFFFh
		push	eax
		call	_EVP_MD_CTX_init
		mov	eax, [esp+24h+arg_4]
		push	dword ptr [eax]
		call	_OBJ_obj2nid
		push	eax
		call	_OBJ_nid2sn
		push	eax
		call	_EVP_get_digestbyname
		add	esp, 10h
		mov	[esp+20h+arg_4], eax
		test	eax, eax
		jnz	short loc_2D1
		push	59h ; 'Y'
		push	offset ??_C@_0BJ@HLJJPCLA@?4?2crypto?2asn1?2a_verify?4c?$AA@ ; ".\\crypto\\asn1\\a_verify.c"
		push	0A1h ; '¡'
		push	89h ; '‰'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		lea	eax, [esp+20h+var_18]
		push	eax
		call	_EVP_MD_CTX_cleanup
		add	esp, 4
		mov	eax, esi
		pop	esi
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_2D1:				; CODE XREF: _ASN1_verify+38j
		push	edi
		mov	edi, [esp+24h+arg_8]
		cmp	dword ptr [edi+4], 3
		jnz	short loc_312
		test	byte ptr [edi+0Ch], 7
		jz	short loc_312
		push	5Eh ; '^'
		push	offset ??_C@_0BJ@HLJJPCLA@?4?2crypto?2asn1?2a_verify?4c?$AA@ ; ".\\crypto\\asn1\\a_verify.c"
		push	0DCh ; 'Ü'
		push	89h ; '‰'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		lea	eax, [esp+24h+var_18]
		pop	edi
		push	eax
		call	_EVP_MD_CTX_cleanup
		add	esp, 4
		mov	eax, esi
		pop	esi
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_312:				; CODE XREF: _ASN1_verify+72j
					; _ASN1_verify+78j
		push	ebx
		push	ebp
		push	0
		push	[esp+30h+arg_C]
		call	[esp+34h+arg_0]
		push	63h ; 'c'
		mov	ebp, eax
		push	offset ??_C@_0BJ@HLJJPCLA@?4?2crypto?2asn1?2a_verify?4c?$AA@ ; ".\\crypto\\asn1\\a_verify.c"
		push	ebp
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jnz	short loc_353
		push	65h ; 'e'
		push	offset ??_C@_0BJ@HLJJPCLA@?4?2crypto?2asn1?2a_verify?4c?$AA@ ; ".\\crypto\\asn1\\a_verify.c"
		push	41h ; 'A'
		push	89h ; '‰'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_3DA
; ---------------------------------------------------------------------------

loc_353:				; CODE XREF: _ASN1_verify+CCj
		lea	eax, [esp+2Ch+var_1C]
		mov	[esp+2Ch+var_1C], ebx
		push	eax
		push	[esp+30h+arg_C]
		call	[esp+34h+arg_0]
		push	0
		push	[esp+38h+arg_4]
		lea	eax, [esp+3Ch+var_18]
		push	eax
		call	_EVP_DigestInit_ex
		add	esp, 14h
		test	eax, eax
		jz	short loc_3C0
		push	ebp
		lea	eax, [esp+30h+var_18]
		push	ebx
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_3C0
		push	ebp
		push	ebx
		call	_OPENSSL_cleanse
		push	ebx
		call	_CRYPTO_free
		push	[esp+38h+arg_10]
		lea	eax, [esp+3Ch+var_18]
		push	dword ptr [edi]
		push	dword ptr [edi+8]
		push	eax
		call	_EVP_VerifyFinal
		add	esp, 1Ch
		test	eax, eax
		jg	short loc_3B9
		push	77h ; 'w'
		jmp	short loc_3C2
; ---------------------------------------------------------------------------

loc_3B9:				; CODE XREF: _ASN1_verify+14Bj
		mov	esi, 1
		jmp	short loc_3DA
; ---------------------------------------------------------------------------

loc_3C0:				; CODE XREF: _ASN1_verify+111j
					; _ASN1_verify+124j
		push	6Dh ; 'm'

loc_3C2:				; CODE XREF: _ASN1_verify+14Fj
		push	offset ??_C@_0BJ@HLJJPCLA@?4?2crypto?2asn1?2a_verify?4c?$AA@ ; ".\\crypto\\asn1\\a_verify.c"
		push	6
		push	89h ; '‰'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	esi, esi

loc_3DA:				; CODE XREF: _ASN1_verify+E6j
					; _ASN1_verify+156j
		pop	ebp
		pop	ebx
		pop	edi

$err$14:
		lea	eax, [esp+20h+var_18]
		push	eax
		call	_EVP_MD_CTX_cleanup
		add	esp, 4
		mov	eax, esi
		pop	esi
		add	esp, 1Ch
		retn
_ASN1_verify	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3F4h
; COMDAT (pick any)
		public ??_C@_0BJ@HLJJPCLA@?4?2crypto?2asn1?2a_verify?4c?$AA@
; `string'
??_C@_0BJ@HLJJPCLA@?4?2crypto?2asn1?2a_verify?4c?$AA@ db '.\crypto\asn1\a_verify.c',0
					; DATA XREF: _ASN1_item_verify+24o
					; _ASN1_item_verify+58o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _ASN1_verify+C0p
		extrn _CRYPTO_free:near	; CODE XREF: _ASN1_item_verify+228p
					; _ASN1_verify+12Ep
		extrn _OPENSSL_cleanse:near ; CODE XREF: _ASN1_item_verify+21Fp
					; _ASN1_verify+128p
		extrn _ERR_put_error:near ; CODE XREF: _ASN1_item_verify+32p
					; _ASN1_item_verify+69p ...
		extrn _ASN1_item_i2d:near ; CODE XREF: _ASN1_item_verify+118p
		extrn _OBJ_nid2sn:near	; CODE XREF: _ASN1_item_verify+159p
					; _ASN1_verify+24p
		extrn _OBJ_obj2nid:near	; CODE XREF: _ASN1_item_verify+9Ap
					; _ASN1_verify+1Ep
		extrn _OBJ_find_sigid_algs:near	; CODE XREF: _ASN1_item_verify+A3p
		extrn _EVP_MD_CTX_init:near ; CODE XREF: _ASN1_item_verify+81p
					; _ASN1_verify+13p
		extrn _EVP_MD_CTX_cleanup:near ; CODE XREF: _ASN1_item_verify+254p
					; _ASN1_verify+5Ap ...
		extrn _EVP_DigestInit_ex:near ;	CODE XREF: _ASN1_verify+107p
		extrn _EVP_DigestUpdate:near ; CODE XREF: _ASN1_item_verify+207p
					; _ASN1_verify+11Ap
		extrn _EVP_VerifyFinal:near ; CODE XREF: _ASN1_verify+141p
		extrn _EVP_DigestVerifyInit:near ; CODE	XREF: _ASN1_item_verify+1D1p
		extrn _EVP_DigestVerifyFinal:near ; CODE XREF: _ASN1_item_verify+237p
		extrn _EVP_get_digestbyname:near ; CODE	XREF: _ASN1_item_verify+15Fp
					; _ASN1_verify+2Ap
		extrn _EVP_PKEY_type:near ; CODE XREF: _ASN1_item_verify+194p
		extrn __chkstk:near	; CODE XREF: _ASN1_item_verify+5p
					; _ASN1_verify+5p


		end
