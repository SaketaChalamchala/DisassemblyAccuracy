;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	F65E1F7B1A72FD2A27133208B34EBD6E
; Input	CRC32 :	333804D3

; File Name   :	C:\compspace\Diff\openssl\obj\p_seal.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_SealFinal
_EVP_SealFinal	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_EVP_EncryptFinal_ex
		add	esp, 0Ch
		test	eax, eax
		jz	short locret_2C
		push	0
		push	0
		push	0
		push	0
		push	[esp+10h+arg_0]
		call	_EVP_EncryptInit_ex
		add	esp, 14h

locret_2C:				; CODE XREF: _EVP_SealFinal+16j
		retn
_EVP_SealFinal	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 30h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_SealInit
_EVP_SealInit	proc near

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, 50h ; 'P'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+50h+var_4], eax
		mov	eax, [esp+50h+arg_C]
		push	ebx
		mov	ebx, [esp+54h+arg_4]
		mov	[esp+54h+var_50], eax
		mov	eax, [esp+54h+arg_10]
		mov	[esp+54h+var_48], eax
		push	ebp
		mov	ebp, [esp+58h+arg_0]
		push	esi
		mov	esi, [esp+5Ch+arg_8]
		push	edi
		mov	edi, [esp+60h+arg_14]
		mov	[esp+60h+var_4C], edi
		test	ebx, ebx
		jz	short loc_8B
		push	ebp
		call	_EVP_CIPHER_CTX_init
		push	0
		push	0
		push	0
		push	ebx
		push	ebp
		call	_EVP_EncryptInit_ex
		add	esp, 18h
		test	eax, eax
		jz	short loc_D6

loc_8B:					; CODE XREF: _EVP_SealInit+3Fj
		mov	ebx, [esp+60h+arg_18]
		test	ebx, ebx
		jle	loc_17E
		test	edi, edi
		jz	loc_17E
		lea	eax, [esp+60h+var_44]
		push	eax
		push	ebp
		call	_EVP_CIPHER_CTX_rand_key
		add	esp, 8
		test	eax, eax
		jle	short loc_D6
		push	ebp
		call	_EVP_CIPHER_CTX_iv_length
		add	esp, 4
		test	eax, eax
		jz	short loc_EB
		push	ebp
		call	_EVP_CIPHER_CTX_iv_length
		mov	edi, [esp+64h+var_48]
		push	eax
		push	edi
		call	_RAND_bytes
		add	esp, 0Ch
		test	eax, eax
		jg	short loc_EF

loc_D6:					; CODE XREF: _EVP_SealInit+59j
					; _EVP_SealInit+7Fj ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+50h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_EB:					; CODE XREF: _EVP_SealInit+8Cj
		mov	edi, [esp+60h+var_48]

loc_EF:					; CODE XREF: _EVP_SealInit+A4j
		push	edi
		lea	eax, [esp+64h+var_44]
		push	eax
		push	0
		push	0
		push	ebp
		call	_EVP_EncryptInit_ex
		add	esp, 14h
		test	eax, eax
		jz	short loc_D6
		xor	edi, edi
		test	ebx, ebx
		jle	short loc_153
		mov	eax, [esp+60h+var_4C]
		sub	eax, esi
		sub	[esp+60h+var_50], esi
		mov	[esp+60h+var_4C], eax
		nop	word ptr [eax+eax+00h]

loc_120:				; CODE XREF: _EVP_SealInit+121j
		push	dword ptr [eax+esi]
		push	ebp
		call	_EVP_CIPHER_CTX_key_length
		add	esp, 4
		push	eax
		lea	eax, [esp+68h+var_44]
		push	eax
		push	dword ptr [esi]
		call	_EVP_PKEY_encrypt_old
		mov	ecx, [esp+70h+var_50]
		add	esp, 10h
		mov	[ecx+esi], eax
		test	eax, eax
		jle	short loc_168
		mov	eax, [esp+60h+var_4C]
		inc	edi
		add	esi, 4
		cmp	edi, ebx
		jl	short loc_120

loc_153:				; CODE XREF: _EVP_SealInit+DAj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		mov	ecx, [esp+50h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_168:				; CODE XREF: _EVP_SealInit+115j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+50h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_17E:				; CODE XREF: _EVP_SealInit+61j
					; _EVP_SealInit+69j
		mov	ecx, [esp+60h+var_4]
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
_EVP_SealInit	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _RAND_bytes:near	; CODE XREF: _EVP_SealInit+9Ap
		extrn _EVP_CIPHER_CTX_key_length:near ;	CODE XREF: _EVP_SealInit+F4p
		extrn _EVP_CIPHER_CTX_iv_length:near ; CODE XREF: _EVP_SealInit+82p
					; _EVP_SealInit+8Fp
		extrn _EVP_EncryptInit_ex:near ; CODE XREF: _EVP_SealFinal+24p
					; _EVP_SealInit+4Fp ...
		extrn _EVP_EncryptFinal_ex:near	; CODE XREF: _EVP_SealFinal+Cp
		extrn _EVP_CIPHER_CTX_init:near	; CODE XREF: _EVP_SealInit+42p
		extrn _EVP_CIPHER_CTX_rand_key:near ; CODE XREF: _EVP_SealInit+75p
		extrn _EVP_PKEY_encrypt_old:near ; CODE	XREF: _EVP_SealInit+104p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _EVP_SealInit+B2p
					; _EVP_SealInit+12Fp ...
		extrn __chkstk:near	; CODE XREF: _EVP_SealInit+5p
		extrn ___security_cookie:near ;	DATA XREF: _EVP_SealInit+Ar


		end
