;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	17D4BF151B91270D6B5505A8ABE8E550
; Input	CRC32 :	7259CBE7

; File Name   :	C:\compspace\Diff\openssl\obj\igetest.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
_ige_test_vectors dd 3020100h, 7060504h, 0B0A0908h, 0F0E0D0Ch, 3020100h
					; DATA XREF: _run_test_vectors+28o
		dd 7060504h, 0B0A0908h,	0F0E0D0Ch, 13121110h, 17161514h
		dd 1B1A1918h, 1F1E1D1Ch, 10h dup(0)
		dd 0A619851Ah, 52E67B55h, 438EDAE9h, 45F44EDAh,	0B456F43Ch
		dd 0A38A48CAh, 989CC783h, 0CB9747B3h, 8	dup(0)
		dd offset _ige_test_vectors+20h
		dd 1, 73696854h, 20736920h, 69206E61h, 656C706Dh, 746E656Dh
		dd 6F697461h, 666F206Eh, 45474920h, 646F6D20h, 6F662065h
		dd 704F2072h, 53536E65h, 4C202E4Ch, 73277465h, 706F6820h
		dd 65422065h, 6F67206Eh, 74692074h, 67697220h, 0A217468h
		dd 8 dup(0)
		dd 87647099h, 13E6CDA1h, 0B6E06DBCh, 7A1C4BF2h,	0B9C848A4h
		dd 343E40C3h, 0D8CAA867h, 3BF54093h, 8 dup(0)
		dd offset _ige_test_vectors+20h
		align 10h
_bi_ige_test_vectors dd	3020100h, 7060504h, 0B0A0908h, 0F0E0D0Ch, 4 dup(0)
		dd 13121110h, 17161514h, 1B1A1918h, 1F1E1D1Ch, 4 dup(0)
		dd 3020100h, 7060504h, 0B0A0908h, 0F0E0D0Ch, 13121110h
		dd 17161514h, 1B1A1918h, 1F1E1D1Ch, 23222120h, 27262524h
		dd 2B2A2928h, 2F2E2D2Ch, 33323130h, 37363534h, 3B3A3938h
		dd 3F3E3D3Ch, 10h dup(0)
		dd 0AE6F4014h, 56F279A2h, 3BEB861Fh, 0DC53FF7Dh, 30C274Eh
		dd 16E57CDEh, 33209C6Ah, 12FE339Dh, 8 dup(0)
dword_270	dd 10h,	20h, 1,	0E9060A58h, 5C590797h, 0A7D2199Eh, 7A2B40BBh
					; DATA XREF: _run_test_vectors+4A7o
		dd 9E11D8C7h, 7535514Ch, 230F2864h, 37AC74ADh, 31A080D1h
		dd 1311A347h, 6D9E2686h, 7472AFFFh, 8135A25Bh, 213DA6D2h
		dd 0A8587B67h, 0E472F918h, 4CBD3D80h, 0A9067BE6h, 7ED53553h
		dd 7070C171h, 28009A74h, 426CBF0Ch, 65DDA49Bh, 677C7711h
		dd 0F00A76FEh, 6A6EC6D5h, 0F24C5EE7h, 20F99E7Eh, 2D6F540Eh
		dd 0BD7E8D8Ah, 99377948h, 0A39327FFh, 0CA3D54F1h, 1CEFB5FEh
		dd 0F643A64Fh, 0F05748E6h, 0E37F15EEh, 2FD02FE7h, 177A9511h
		dd 0BA7AB00h, 9C0944BEh, 52A8ACCDh, 757B8EA1h, 5A92A4BCh
		dd 3AD346ABh, 1C35D5A0h, 0A8B3A455h, 0BA58140h,	3028E542h
		dd 23A0C231h, 0B34E4968h, 79925924h, 0E6CCA5C1h, 0CFB15376h
		dd 0E8238620h, 92995572h, 5A1C160Dh, 51CBCE2Fh,	10FA67E2h
		dd 673DCDECh, 31F7E6A5h, 760DB026h, 7FDC285Eh, 4CA5C501h
		dd 20h,	40h, 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 388h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; _fprintf+Fp ...
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 390h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3B4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int fprintf(FILE *File, const	char *Format, ...)
		public _fprintf
_fprintf	proc near		; CODE XREF: _hexdump+11p _hexdump+34p ...

File		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= byte ptr  0Ch

		lea	eax, [esp+arg_8]
		push	eax
		push	0
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
_fprintf	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl hexdump(FILE *File, int, int, int)
_hexdump	proc near		; CODE XREF: _main+1BBp _main+1DDp ...

File		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	esi
		mov	esi, [esp+8+File]
		push	edi
		push	[esp+0Ch+arg_4]
		push	offset ??_C@_02DKCKIIND@?$CFs?$AA@ ; "%s"
		push	esi		; File
		call	_fprintf
		mov	edi, [esp+18h+arg_C]
		add	esp, 0Ch
		xor	ebx, ebx
		test	edi, edi
		jle	short loc_42D
		push	ebp
		mov	ebp, [esp+10h+arg_8]

loc_400:				; CODE XREF: _hexdump+52j
		test	bl, 0Fh
		jnz	short loc_414
		push	ebx
		push	offset ??_C@_05NCCIJLFN@?6?$CF04x?$AA@ ; "\n%04x"
		push	esi		; File
		call	_fprintf
		add	esp, 0Ch

loc_414:				; CODE XREF: _hexdump+2Bj
		movzx	eax, byte ptr [ebx+ebp]
		push	eax
		push	offset ??_C@_05HAJCMBLP@?5?$CF02x?$AA@ ; " %02x"
		push	esi		; File
		call	_fprintf
		inc	ebx
		add	esp, 0Ch
		cmp	ebx, edi
		jl	short loc_400
		pop	ebp

loc_42D:				; CODE XREF: _hexdump+21j
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		push	esi		; File
		call	_fprintf
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebx
		retn
_hexdump	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 440h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public _main
_main		proc near

var_7A8C	= xmmword ptr -7A8Ch
var_7A7C	= xmmword ptr -7A7Ch
var_7A6C	= xmmword ptr -7A6Ch
var_7A5C	= xmmword ptr -7A5Ch
var_7A4C	= byte ptr -7A4Ch
var_7958	= byte ptr -7958h
var_7864	= byte ptr -7864h
var_7854	= xmmword ptr -7854h
var_7844	= xmmword ptr -7844h
var_7834	= xmmword ptr -7834h
var_7824	= xmmword ptr -7824h
var_7814	= byte ptr -7814h
var_7804	= dword	ptr -7804h
var_7800	= byte ptr -7800h
var_77C4	= byte ptr -77C4h
var_5004	= dword	ptr -5004h
var_5000	= byte ptr -5000h
var_4FC4	= byte ptr -4FC4h
var_2804	= byte ptr -2804h
var_27C4	= byte ptr -27C4h
var_1404	= byte ptr -1404h
var_5		= byte ptr -5
var_4		= dword	ptr -4
argc		= dword	ptr  4
argv		= dword	ptr  8
envp		= dword	ptr  0Ch

		mov	eax, 7A8Ch
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+7A8Ch+var_4], eax
		push	ebp
		push	esi
		push	edi
		lea	eax, [esp+7A98h+var_7864]
		xor	edi, edi
		push	10h
		push	eax
		call	_RAND_pseudo_bytes
		lea	eax, [esp+7AA0h+var_7804]
		push	2800h
		push	eax
		call	_RAND_pseudo_bytes
		lea	eax, [esp+7AA8h+var_7854]
		push	40h ; '@'
		push	eax
		call	_RAND_pseudo_bytes
		movups	xmm0, [esp+7AB0h+var_7854]
		lea	eax, [esp+7AB0h+var_7A4C]
		push	eax
		movups	[esp+7AB4h+var_7A8C], xmm0
		lea	eax, [esp+7AB4h+var_7864]
		movups	xmm0, [esp+7AB4h+var_7844]
		push	80h ; '€'
		push	eax
		movups	[esp+7ABCh+var_7A7C], xmm0
		movups	xmm0, [esp+7ABCh+var_7834]
		movups	[esp+7ABCh+var_7A6C], xmm0
		movups	xmm0, [esp+7ABCh+var_7824]
		movups	[esp+7ABCh+var_7A5C], xmm0
		call	_AES_set_encrypt_key
		push	1
		lea	eax, [esp+7AC0h+var_7854]
		push	eax
		lea	eax, [esp+7AC4h+var_7A4C]
		push	eax
		push	80h ; '€'
		lea	eax, [esp+7ACCh+var_2804]
		push	eax
		lea	eax, [esp+7AD0h+var_7804]
		push	eax
		call	_AES_ige_encrypt
		lea	eax, [esp+7AD4h+var_7A4C]
		push	eax
		lea	eax, [esp+7AD8h+var_7864]
		push	80h ; '€'
		push	eax
		call	_AES_set_decrypt_key
		movups	xmm0, [esp+7AE0h+var_7A8C]
		add	esp, 48h
		lea	eax, [esp+7A98h+var_7854]
		movups	[esp+7A98h+var_7854], xmm0
		movups	xmm0, [esp+7A98h+var_7A7C]
		push	edi
		push	eax
		movups	[esp+7AA0h+var_7844], xmm0
		lea	eax, [esp+7AA0h+var_7A4C]
		movups	xmm0, [esp+7AA0h+var_7A6C]
		push	eax
		push	80h ; '€'
		lea	eax, [esp+7AA8h+var_5004]
		movups	[esp+7AA8h+var_7834], xmm0
		push	eax
		movups	xmm0, [esp+7AACh+var_7A5C]
		lea	eax, [esp+7AACh+var_2804]
		push	eax
		movups	[esp+7AB0h+var_7824], xmm0
		call	_AES_ige_encrypt
		add	esp, 18h
		lea	ecx, [esp+7A98h+var_5004]
		lea	edx, [esp+7A98h+var_7804]
		lea	esi, [edi+7Ch]
		xchg	ax, ax

loc_590:				; CODE XREF: _main+15Fj
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_5A5
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_590
		xor	eax, eax
		jmp	short loc_5CA
; ---------------------------------------------------------------------------

loc_5A5:				; CODE XREF: _main+154j
		cmp	al, [edx]
		jnz	short loc_5C5
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_5C5
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_5C5
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jnz	short loc_5C5
		xor	eax, eax
		jmp	short loc_5CA
; ---------------------------------------------------------------------------

loc_5C5:				; CODE XREF: _main+167j _main+16Fj ...
		sbb	eax, eax
		or	eax, 1

loc_5CA:				; CODE XREF: _main+163j _main+183j
		mov	ebp, dword ptr ds:__imp____acrt_iob_func
		test	eax, eax
		jz	short loc_62A
		push	offset ??_C@_0BP@BGFLFOMO@Encrypt?$CLdecrypt?5doesn?8t?5match?6?$AA@ ; "Encrypt+decrypt	doesn't match\n"
		call	_printf
		add	esp, 4
		lea	eax, [esp+7A98h+var_7804]
		push	80h ; '€'       ; int
		push	eax		; int
		push	offset ??_C@_09DOLMGAGM@Plaintext?$AA@ ; "Plaintext"
		push	1
		call	ebp ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		lea	eax, [esp+7A98h+var_5004]
		push	80h ; '€'       ; int
		push	eax		; int
		push	offset ??_C@_09NPDOMLIM@Checktext?$AA@ ; "Checktext"
		push	1
		call	ebp ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		mov	edi, 1

loc_62A:				; CODE XREF: _main+192j
		lea	eax, [esp+7A98h+var_7A4C]
		push	eax
		lea	eax, [esp+7A9Ch+var_7864]
		push	80h ; '€'
		push	eax
		call	_AES_set_encrypt_key
		movups	xmm0, [esp+7AA4h+var_7A8C]
		push	1
		lea	eax, [esp+7AA8h+var_7854]
		movups	[esp+7AA8h+var_7854], xmm0
		push	eax
		movups	xmm0, [esp+7AACh+var_7A7C]
		lea	eax, [esp+7AACh+var_7A4C]
		push	eax
		movups	[esp+7AB0h+var_7844], xmm0
		push	40h ; '@'
		movups	xmm0, [esp+7AB4h+var_7A6C]
		lea	eax, [esp+7AB4h+var_2804]
		push	eax
		movups	[esp+7AB8h+var_7834], xmm0
		lea	eax, [esp+7AB8h+var_7804]
		movups	xmm0, [esp+7AB8h+var_7A5C]
		push	eax
		movups	[esp+7ABCh+var_7824], xmm0
		call	_AES_ige_encrypt
		push	1
		lea	eax, [esp+7AC0h+var_7854]
		push	eax
		lea	eax, [esp+7AC4h+var_7A4C]
		push	eax
		push	40h ; '@'
		lea	eax, [esp+7ACCh+var_27C4]
		push	eax
		lea	eax, [esp+7AD0h+var_77C4]
		push	eax
		call	_AES_ige_encrypt
		lea	eax, [esp+7AD4h+var_7A4C]
		push	eax
		lea	eax, [esp+7AD8h+var_7864]
		push	80h ; '€'
		push	eax
		call	_AES_set_decrypt_key
		movups	xmm0, [esp+7AE0h+var_7A8C]
		add	esp, 48h
		lea	eax, [esp+7A98h+var_7854]
		movups	[esp+7A98h+var_7854], xmm0
		movups	xmm0, [esp+7A98h+var_7A7C]
		push	0
		push	eax
		movups	[esp+7AA0h+var_7844], xmm0
		lea	eax, [esp+7AA0h+var_7A4C]
		movups	xmm0, [esp+7AA0h+var_7A6C]
		push	eax
		push	80h ; '€'
		lea	eax, [esp+7AA8h+var_5004]
		movups	[esp+7AA8h+var_7834], xmm0
		push	eax
		movups	xmm0, [esp+7AACh+var_7A5C]
		lea	eax, [esp+7AACh+var_2804]
		push	eax
		movups	[esp+7AB0h+var_7824], xmm0
		call	_AES_ige_encrypt
		add	esp, 18h
		lea	ecx, [esp+7A98h+var_5004]
		lea	edx, [esp+7A98h+var_7804]
		mov	esi, 7Ch ; '|'

loc_751:				; CODE XREF: _main+320j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_766
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_751
		xor	eax, eax
		jmp	short loc_78B
; ---------------------------------------------------------------------------

loc_766:				; CODE XREF: _main+315j
		cmp	al, [edx]
		jnz	short loc_786
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_786
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_786
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jnz	short loc_786
		xor	eax, eax
		jmp	short loc_78B
; ---------------------------------------------------------------------------

loc_786:				; CODE XREF: _main+328j _main+330j ...
		sbb	eax, eax
		or	eax, 1

loc_78B:				; CODE XREF: _main+324j _main+344j
		test	eax, eax
		jz	short loc_7E1
		push	offset ??_C@_0CH@MPBMAGFO@Chained?5encrypt?$CLdecrypt?5doesn?8t?5@ ; "Chained encrypt+decrypt doesn't match\n"
		call	_printf
		add	esp, 4
		lea	eax, [esp+7A98h+var_7804]
		push	80h ; '€'       ; int
		push	eax		; int
		push	offset ??_C@_09DOLMGAGM@Plaintext?$AA@ ; "Plaintext"
		push	1
		call	ebp ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		lea	eax, [esp+7A98h+var_5004]
		push	80h ; '€'       ; int
		push	eax		; int
		push	offset ??_C@_09NPDOMLIM@Checktext?$AA@ ; "Checktext"
		push	1
		call	ebp ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		inc	edi

loc_7E1:				; CODE XREF: _main+34Dj
		lea	eax, [esp+7A98h+var_7A4C]
		push	eax
		lea	eax, [esp+7A9Ch+var_7864]
		push	80h ; '€'
		push	eax
		call	_AES_set_encrypt_key
		movups	xmm0, [esp+7AA4h+var_7A8C]
		push	1
		lea	eax, [esp+7AA8h+var_7854]
		movups	[esp+7AA8h+var_7854], xmm0
		push	eax
		movups	xmm0, [esp+7AACh+var_7A7C]
		lea	eax, [esp+7AACh+var_7A4C]
		push	eax
		movups	[esp+7AB0h+var_7844], xmm0
		push	40h ; '@'
		movups	xmm0, [esp+7AB4h+var_7A6C]
		lea	eax, [esp+7AB4h+var_2804]
		push	eax
		movups	[esp+7AB8h+var_7834], xmm0
		lea	eax, [esp+7AB8h+var_7804]
		movups	xmm0, [esp+7AB8h+var_7A5C]
		push	eax
		movups	[esp+7ABCh+var_7824], xmm0
		call	_AES_ige_encrypt
		push	1
		lea	eax, [esp+7AC0h+var_7854]
		push	eax
		lea	eax, [esp+7AC4h+var_7A4C]
		push	eax
		push	40h ; '@'
		lea	eax, [esp+7ACCh+var_27C4]
		push	eax
		lea	eax, [esp+7AD0h+var_77C4]
		push	eax
		call	_AES_ige_encrypt
		lea	eax, [esp+7AD4h+var_7A4C]
		push	eax
		lea	eax, [esp+7AD8h+var_7864]
		push	80h ; '€'
		push	eax
		call	_AES_set_decrypt_key
		movups	xmm0, [esp+7AE0h+var_7A8C]
		add	esp, 48h
		lea	eax, [esp+7A98h+var_7854]
		movups	[esp+7A98h+var_7854], xmm0
		movups	xmm0, [esp+7A98h+var_7A7C]
		push	0
		push	eax
		movups	[esp+7AA0h+var_7844], xmm0
		lea	eax, [esp+7AA0h+var_7A4C]
		movups	xmm0, [esp+7AA0h+var_7A6C]
		push	eax
		push	40h ; '@'
		lea	eax, [esp+7AA8h+var_5004]
		movups	[esp+7AA8h+var_7834], xmm0
		push	eax
		movups	xmm0, [esp+7AACh+var_7A5C]
		lea	eax, [esp+7AACh+var_2804]
		push	eax
		movups	[esp+7AB0h+var_7824], xmm0
		call	_AES_ige_encrypt
		push	0
		lea	eax, [esp+7AB4h+var_7854]
		push	eax
		lea	eax, [esp+7AB8h+var_7A4C]
		push	eax
		push	40h ; '@'
		lea	eax, [esp+7AC0h+var_4FC4]
		push	eax
		lea	eax, [esp+7AC4h+var_27C4]
		push	eax
		call	_AES_ige_encrypt
		add	esp, 30h
		lea	ecx, [esp+7A98h+var_5004]
		lea	edx, [esp+7A98h+var_7804]
		mov	esi, 7Ch ; '|'
		nop	dword ptr [eax+eax+00h]

loc_930:				; CODE XREF: _main+4FFj
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_945
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_930
		xor	eax, eax
		jmp	short loc_96A
; ---------------------------------------------------------------------------

loc_945:				; CODE XREF: _main+4F4j
		cmp	al, [edx]
		jnz	short loc_965
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_965
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_965
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jnz	short loc_965
		xor	eax, eax
		jmp	short loc_96A
; ---------------------------------------------------------------------------

loc_965:				; CODE XREF: _main+507j _main+50Fj ...
		sbb	eax, eax
		or	eax, 1

loc_96A:				; CODE XREF: _main+503j _main+523j
		test	eax, eax
		jz	short loc_9C0
		push	offset ??_C@_0CP@MGBKBHHG@Chained?5encrypt?$CLchained?5decrypt?5@ ; "Chained encrypt+chained decrypt doesn't"...
		call	_printf
		add	esp, 4
		lea	eax, [esp+7A98h+var_7804]
		push	80h ; '€'       ; int
		push	eax		; int
		push	offset ??_C@_09DOLMGAGM@Plaintext?$AA@ ; "Plaintext"
		push	1
		call	ebp ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		lea	eax, [esp+7A98h+var_5004]
		push	80h ; '€'       ; int
		push	eax		; int
		push	offset ??_C@_09NPDOMLIM@Checktext?$AA@ ; "Checktext"
		push	1
		call	ebp ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		inc	edi

loc_9C0:				; CODE XREF: _main+52Cj
		lea	eax, [esp+7A98h+var_7A4C]
		push	eax
		lea	eax, [esp+7A9Ch+var_7864]
		push	80h ; '€'
		push	eax
		call	_AES_set_encrypt_key
		movups	xmm0, [esp+7AA4h+var_7A8C]
		push	1
		lea	eax, [esp+7AA8h+var_7854]
		movups	[esp+7AA8h+var_7854], xmm0
		push	eax
		movups	xmm0, [esp+7AACh+var_7A7C]
		lea	eax, [esp+7AACh+var_7A4C]
		push	eax
		movups	[esp+7AB0h+var_7844], xmm0
		push	2800h
		movups	xmm0, [esp+7AB4h+var_7A6C]
		lea	eax, [esp+7AB4h+var_2804]
		push	eax
		movups	[esp+7AB8h+var_7834], xmm0
		lea	eax, [esp+7AB8h+var_7804]
		movups	xmm0, [esp+7AB8h+var_7A5C]
		push	eax
		movups	[esp+7ABCh+var_7824], xmm0
		call	_AES_ige_encrypt
		inc	[esp+7ABCh+var_1404]
		lea	eax, [esp+7ABCh+var_7A4C]
		push	eax
		lea	eax, [esp+7AC0h+var_7864]
		push	80h ; '€'
		push	eax
		call	_AES_set_decrypt_key
		movups	xmm0, [esp+7AC8h+var_7A8C]
		push	0
		lea	eax, [esp+7ACCh+var_7854]
		movups	[esp+7ACCh+var_7854], xmm0
		push	eax
		movups	xmm0, [esp+7AD0h+var_7A7C]
		lea	eax, [esp+7AD0h+var_7A4C]
		push	eax
		movups	[esp+7AD4h+var_7844], xmm0
		push	2800h
		movups	xmm0, [esp+7AD8h+var_7A6C]
		lea	eax, [esp+7AD8h+var_5004]
		push	eax
		movups	[esp+7ADCh+var_7834], xmm0
		lea	eax, [esp+7ADCh+var_2804]
		movups	xmm0, [esp+7ADCh+var_7A5C]
		push	eax
		movups	[esp+7AE0h+var_7824], xmm0
		call	_AES_ige_encrypt
		add	esp, 48h
		xor	esi, esi
		xor	ecx, ecx
		nop	dword ptr [eax+00h]

loc_AC0:				; CODE XREF: _main+6DEj
		mov	al, byte ptr [esp+ecx+7A98h+var_5004]
		cmp	al, byte ptr [esp+ecx+7A98h+var_7804]
		jnz	short loc_AD1
		inc	esi

loc_AD1:				; CODE XREF: _main+68Ej
		mov	al, byte ptr [esp+ecx+7A98h+var_5004+1]
		cmp	al, byte ptr [esp+ecx+7A98h+var_7804+1]
		jnz	short loc_AE2
		inc	esi

loc_AE2:				; CODE XREF: _main+69Fj
		mov	al, byte ptr [esp+ecx+7A98h+var_5004+2]
		cmp	al, byte ptr [esp+ecx+7A98h+var_7804+2]
		jnz	short loc_AF3
		inc	esi

loc_AF3:				; CODE XREF: _main+6B0j
		mov	al, byte ptr [esp+ecx+7A98h+var_5004+3]
		cmp	al, byte ptr [esp+ecx+7A98h+var_7804+3]
		jnz	short loc_B04
		inc	esi

loc_B04:				; CODE XREF: _main+6C1j
		mov	al, [esp+ecx+7A98h+var_5000]
		cmp	al, [esp+ecx+7A98h+var_7800]
		jnz	short loc_B15
		inc	esi

loc_B15:				; CODE XREF: _main+6D2j
		add	ecx, 5
		cmp	ecx, 2800h
		jb	short loc_AC0
		cmp	esi, 1466h
		jbe	short loc_B36
		push	offset ??_C@_0CH@EFDNEHKM@More?5than?551?$CF?$CF?5matches?5after?5gar@ ; "More than 51%% matches after garbling\n"
		call	_printf
		add	esp, 4
		inc	edi

loc_B36:				; CODE XREF: _main+6E6j
		cmp	esi, 1400h
		jnb	short loc_B4C
		push	offset ??_C@_0BL@MFACJGC@Garble?5extends?5backwards?$CB?6?$AA@ ; "Garble extends backwards!\n"
		call	_printf
		add	esp, 4
		inc	edi

loc_B4C:				; CODE XREF: _main+6FCj
		lea	eax, [esp+7A98h+var_7814]
		push	10h
		push	eax
		call	_RAND_pseudo_bytes
		lea	eax, [esp+7AA0h+var_7A4C]
		push	eax
		lea	eax, [esp+7AA4h+var_7864]
		push	80h ; '€'
		push	eax
		call	_AES_set_encrypt_key
		lea	eax, [esp+7AACh+var_7958]
		push	eax
		lea	eax, [esp+7AB0h+var_7814]
		push	80h ; '€'
		push	eax
		call	_AES_set_encrypt_key
		push	1
		lea	eax, [esp+7ABCh+var_7854]
		push	eax
		lea	eax, [esp+7AC0h+var_7958]
		push	eax
		lea	eax, [esp+7AC4h+var_7A4C]
		push	eax
		push	80h ; '€'
		lea	eax, [esp+7ACCh+var_2804]
		push	eax
		lea	eax, [esp+7AD0h+var_7804]
		push	eax
		call	_AES_bi_ige_encrypt
		lea	eax, [esp+7AD4h+var_7A4C]
		push	eax
		lea	eax, [esp+7AD8h+var_7864]
		push	80h ; '€'
		push	eax
		call	_AES_set_decrypt_key
		add	esp, 48h
		lea	eax, [esp+7A98h+var_7958]
		push	eax
		lea	eax, [esp+7A9Ch+var_7814]
		push	80h ; '€'
		push	eax
		call	_AES_set_decrypt_key
		push	0
		lea	eax, [esp+7AA8h+var_7854]
		push	eax
		lea	eax, [esp+7AACh+var_7958]
		push	eax
		lea	eax, [esp+7AB0h+var_7A4C]
		push	eax
		push	80h ; '€'
		lea	eax, [esp+7AB8h+var_5004]
		push	eax
		lea	eax, [esp+7ABCh+var_2804]
		push	eax
		call	_AES_bi_ige_encrypt
		add	esp, 28h
		lea	ecx, [esp+7A98h+var_5004]
		lea	edx, [esp+7A98h+var_7804]
		mov	esi, 7Ch ; '|'
		nop	dword ptr [eax+eax+00h]

loc_C40:				; CODE XREF: _main+80Fj
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_C56
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_C40
		jmp	loc_D24
; ---------------------------------------------------------------------------

loc_C56:				; CODE XREF: _main+804j
		push	ebx
		push	offset ??_C@_0BP@BGFLFOMO@Encrypt?$CLdecrypt?5doesn?8t?5match?6?$AA@ ; "Encrypt+decrypt	doesn't match\n"
		call	_printf
		push	1
		call	ebp ; __imp____acrt_iob_func
		push	offset ??_C@_09DOLMGAGM@Plaintext?$AA@ ; "Plaintext"
		mov	esi, eax
		push	offset ??_C@_02DKCKIIND@?$CFs?$AA@ ; "%s"
		push	esi		; File
		call	_fprintf
		add	esp, 14h
		xor	ebx, ebx
		nop	dword ptr [eax+00h]

loc_C80:				; CODE XREF: _main+872j
		test	bl, 0Fh
		jnz	short loc_C94
		push	ebx
		push	offset ??_C@_05NCCIJLFN@?6?$CF04x?$AA@ ; "\n%04x"
		push	esi		; File
		call	_fprintf
		add	esp, 0Ch

loc_C94:				; CODE XREF: _main+843j
		movzx	eax, byte ptr [esp+ebx+7A9Ch+var_7804]
		push	eax
		push	offset ??_C@_05HAJCMBLP@?5?$CF02x?$AA@ ; " %02x"
		push	esi		; File
		call	_fprintf
		inc	ebx
		add	esp, 0Ch
		cmp	ebx, 80h ; '€'
		jl	short loc_C80
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		push	esi		; File
		call	_fprintf
		push	1
		call	ebp ; __imp____acrt_iob_func
		push	offset ??_C@_09NPDOMLIM@Checktext?$AA@ ; "Checktext"
		mov	esi, eax
		push	offset ??_C@_02DKCKIIND@?$CFs?$AA@ ; "%s"
		push	esi		; File
		call	_fprintf
		add	esp, 18h
		xor	ebx, ebx
		nop	word ptr [eax+eax+00h]

loc_CE0:				; CODE XREF: _main+8D2j
		test	bl, 0Fh
		jnz	short loc_CF4
		push	ebx
		push	offset ??_C@_05NCCIJLFN@?6?$CF04x?$AA@ ; "\n%04x"
		push	esi		; File
		call	_fprintf
		add	esp, 0Ch

loc_CF4:				; CODE XREF: _main+8A3j
		movzx	eax, byte ptr [esp+ebx+7A9Ch+var_5004]
		push	eax
		push	offset ??_C@_05HAJCMBLP@?5?$CF02x?$AA@ ; " %02x"
		push	esi		; File
		call	_fprintf
		inc	ebx
		add	esp, 0Ch
		cmp	ebx, 80h ; '€'
		jl	short loc_CE0
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		push	esi		; File
		call	_fprintf
		add	esp, 8
		inc	edi
		pop	ebx

loc_D24:				; CODE XREF: _main+811j
		lea	eax, [esp+7A98h+var_7A4C]
		push	eax
		lea	eax, [esp+7A9Ch+var_7864]
		push	80h ; '€'
		push	eax
		call	_AES_set_encrypt_key
		lea	eax, [esp+7AA4h+var_7958]
		push	eax
		lea	eax, [esp+7AA8h+var_7814]
		push	80h ; '€'
		push	eax
		call	_AES_set_encrypt_key
		push	1
		lea	eax, [esp+7AB4h+var_7854]
		push	eax
		lea	eax, [esp+7AB8h+var_7A4C]
		push	eax
		push	2800h
		lea	eax, [esp+7AC0h+var_2804]
		push	eax
		lea	eax, [esp+7AC4h+var_7804]
		push	eax
		call	_AES_ige_encrypt
		inc	[esp+7AC8h+var_1404]
		lea	eax, [esp+7AC8h+var_7A4C]
		push	eax
		lea	eax, [esp+7ACCh+var_7864]
		push	80h ; '€'
		push	eax
		call	_AES_set_decrypt_key
		lea	eax, [esp+7AD4h+var_7958]
		push	eax
		lea	eax, [esp+7AD8h+var_7814]
		push	80h ; '€'
		push	eax
		call	_AES_set_decrypt_key
		add	esp, 48h
		lea	eax, [esp+7A98h+var_7854]
		push	0
		push	eax
		lea	eax, [esp+7AA0h+var_7A4C]
		push	eax
		push	2800h
		lea	eax, [esp+7AA8h+var_5004]
		push	eax
		lea	eax, [esp+7AACh+var_2804]
		push	eax
		call	_AES_ige_encrypt
		add	esp, 18h
		xor	edx, edx
		xor	ecx, ecx
		nop	dword ptr [eax+00000000h]

loc_DF0:				; CODE XREF: _main+A0Ej
		mov	al, byte ptr [esp+ecx+7A98h+var_5004]
		cmp	al, byte ptr [esp+ecx+7A98h+var_7804]
		jnz	short loc_E01
		inc	edx

loc_E01:				; CODE XREF: _main+9BEj
		mov	al, byte ptr [esp+ecx+7A98h+var_5004+1]
		cmp	al, byte ptr [esp+ecx+7A98h+var_7804+1]
		jnz	short loc_E12
		inc	edx

loc_E12:				; CODE XREF: _main+9CFj
		mov	al, byte ptr [esp+ecx+7A98h+var_5004+2]
		cmp	al, byte ptr [esp+ecx+7A98h+var_7804+2]
		jnz	short loc_E23
		inc	edx

loc_E23:				; CODE XREF: _main+9E0j
		mov	al, byte ptr [esp+ecx+7A98h+var_5004+3]
		cmp	al, byte ptr [esp+ecx+7A98h+var_7804+3]
		jnz	short loc_E34
		inc	edx

loc_E34:				; CODE XREF: _main+9F1j
		mov	al, [esp+ecx+7A98h+var_5000]
		cmp	al, [esp+ecx+7A98h+var_7800]
		jnz	short loc_E45
		inc	edx

loc_E45:				; CODE XREF: _main+A02j
		add	ecx, 5
		cmp	ecx, 2800h
		jb	short loc_DF0
		cmp	edx, 66h ; 'f'
		jbe	short loc_E63
		push	offset ??_C@_0DE@FIANGABF@More?5than?51?$CF?$CF?5matches?5after?5bidi@ ; "More than 1%%	matches	after bidirection"...
		call	_printf
		add	esp, 4
		inc	edi

loc_E63:				; CODE XREF: _main+A13j
		lea	eax, [esp+7A98h+var_7A4C]
		push	eax
		lea	eax, [esp+7A9Ch+var_7864]
		push	80h ; '€'
		push	eax
		call	_AES_set_encrypt_key
		lea	eax, [esp+7AA4h+var_7958]
		push	eax
		lea	eax, [esp+7AA8h+var_7814]
		push	80h ; '€'
		push	eax
		call	_AES_set_encrypt_key
		push	1
		lea	eax, [esp+7AB4h+var_7854]
		push	eax
		lea	eax, [esp+7AB8h+var_7A4C]
		push	eax
		push	2800h
		lea	eax, [esp+7AC0h+var_2804]
		push	eax
		lea	eax, [esp+7AC4h+var_7804]
		push	eax
		call	_AES_ige_encrypt
		inc	[esp+7AC8h+var_5]
		lea	eax, [esp+7AC8h+var_7A4C]
		push	eax
		lea	eax, [esp+7ACCh+var_7864]
		push	80h ; '€'
		push	eax
		call	_AES_set_decrypt_key
		lea	eax, [esp+7AD4h+var_7958]
		push	eax
		lea	eax, [esp+7AD8h+var_7814]
		push	80h ; '€'
		push	eax
		call	_AES_set_decrypt_key
		add	esp, 48h
		lea	eax, [esp+7A98h+var_7854]
		push	0
		push	eax
		lea	eax, [esp+7AA0h+var_7A4C]
		push	eax
		push	2800h
		lea	eax, [esp+7AA8h+var_5004]
		push	eax
		lea	eax, [esp+7AACh+var_2804]
		push	eax
		call	_AES_ige_encrypt
		add	esp, 18h
		xor	edx, edx
		xor	ecx, ecx
		nop	dword ptr [eax+eax+00000000h]

loc_F30:				; CODE XREF: _main+B4Ej
		mov	al, byte ptr [esp+ecx+7A98h+var_5004]
		cmp	al, byte ptr [esp+ecx+7A98h+var_7804]
		jnz	short loc_F41
		inc	edx

loc_F41:				; CODE XREF: _main+AFEj
		mov	al, byte ptr [esp+ecx+7A98h+var_5004+1]
		cmp	al, byte ptr [esp+ecx+7A98h+var_7804+1]
		jnz	short loc_F52
		inc	edx

loc_F52:				; CODE XREF: _main+B0Fj
		mov	al, byte ptr [esp+ecx+7A98h+var_5004+2]
		cmp	al, byte ptr [esp+ecx+7A98h+var_7804+2]
		jnz	short loc_F63
		inc	edx

loc_F63:				; CODE XREF: _main+B20j
		mov	al, byte ptr [esp+ecx+7A98h+var_5004+3]
		cmp	al, byte ptr [esp+ecx+7A98h+var_7804+3]
		jnz	short loc_F74
		inc	edx

loc_F74:				; CODE XREF: _main+B31j
		mov	al, [esp+ecx+7A98h+var_5000]
		cmp	al, [esp+ecx+7A98h+var_7800]
		jnz	short loc_F85
		inc	edx

loc_F85:				; CODE XREF: _main+B42j
		add	ecx, 5
		cmp	ecx, 2800h
		jb	short loc_F30
		cmp	edx, 66h ; 'f'
		jbe	short loc_FA3
		push	offset ??_C@_0DI@DPNJCMFM@More?5than?51?$CF?$CF?5matches?5after?5bidi@ ; "More than 1%%	matches	after bidirection"...
		call	_printf
		add	esp, 4
		inc	edi

loc_FA3:				; CODE XREF: _main+B53j
		lea	eax, [esp+7A98h+var_7A4C]
		push	eax
		lea	eax, [esp+7A9Ch+var_7864]
		push	80h ; '€'
		push	eax
		call	_AES_set_encrypt_key
		lea	eax, [esp+7AA4h+var_7958]
		push	eax
		lea	eax, [esp+7AA8h+var_7814]
		push	80h ; '€'
		push	eax
		call	_AES_set_encrypt_key
		push	1
		lea	eax, [esp+7AB4h+var_7854]
		push	eax
		lea	eax, [esp+7AB8h+var_7A4C]
		push	eax
		push	2800h
		lea	eax, [esp+7AC0h+var_2804]
		push	eax
		lea	eax, [esp+7AC4h+var_7804]
		push	eax
		call	_AES_ige_encrypt
		inc	[esp+7AC8h+var_2804]
		lea	eax, [esp+7AC8h+var_7A4C]
		push	eax
		lea	eax, [esp+7ACCh+var_7864]
		push	80h ; '€'
		push	eax
		call	_AES_set_decrypt_key
		lea	eax, [esp+7AD4h+var_7958]
		push	eax
		lea	eax, [esp+7AD8h+var_7814]
		push	80h ; '€'
		push	eax
		call	_AES_set_decrypt_key
		add	esp, 48h
		lea	eax, [esp+7A98h+var_7854]
		push	0
		push	eax
		lea	eax, [esp+7AA0h+var_7A4C]
		push	eax
		push	2800h
		lea	eax, [esp+7AA8h+var_5004]
		push	eax
		lea	eax, [esp+7AACh+var_2804]
		push	eax
		call	_AES_ige_encrypt
		add	esp, 18h
		xor	edx, edx
		xor	ecx, ecx
		nop	dword ptr [eax+eax+00000000h]

loc_1070:				; CODE XREF: _main+C8Ej
		mov	al, byte ptr [esp+ecx+7A98h+var_5004]
		cmp	al, byte ptr [esp+ecx+7A98h+var_7804]
		jnz	short loc_1081
		inc	edx

loc_1081:				; CODE XREF: _main+C3Ej
		mov	al, byte ptr [esp+ecx+7A98h+var_5004+1]
		cmp	al, byte ptr [esp+ecx+7A98h+var_7804+1]
		jnz	short loc_1092
		inc	edx

loc_1092:				; CODE XREF: _main+C4Fj
		mov	al, byte ptr [esp+ecx+7A98h+var_5004+2]
		cmp	al, byte ptr [esp+ecx+7A98h+var_7804+2]
		jnz	short loc_10A3
		inc	edx

loc_10A3:				; CODE XREF: _main+C60j
		mov	al, byte ptr [esp+ecx+7A98h+var_5004+3]
		cmp	al, byte ptr [esp+ecx+7A98h+var_7804+3]
		jnz	short loc_10B4
		inc	edx

loc_10B4:				; CODE XREF: _main+C71j
		mov	al, [esp+ecx+7A98h+var_5000]
		cmp	al, [esp+ecx+7A98h+var_7800]
		jnz	short loc_10C5
		inc	edx

loc_10C5:				; CODE XREF: _main+C82j
		add	ecx, 5
		cmp	ecx, 2800h
		jb	short loc_1070
		cmp	edx, 66h ; 'f'
		jbe	short loc_10E3
		push	offset ??_C@_0DI@IHGFELDJ@More?5than?51?$CF?$CF?5matches?5after?5bidi@ ; "More than 1%%	matches	after bidirection"...
		call	_printf
		add	esp, 4
		inc	edi

loc_10E3:				; CODE XREF: _main+C93j
		call	_run_test_vectors
		mov	ecx, [esp+7A98h+var_4]
		add	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 7A8Ch
		retn
_main		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1104h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int printf(const char	*Format, ...)
		public _printf
_printf		proc near		; CODE XREF: _main+199p _main+354p ...

Format		= dword	ptr  4
arg_4		= byte ptr  8

		push	esi
		mov	esi, [esp+4+Format]
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		lea	ecx, [esp+4+arg_4]
		push	ecx
		push	0
		push	esi
		push	eax
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		pop	esi
		retn
_printf		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1134h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_run_test_vectors proc near		; CODE XREF: _main:loc_10E3p

var_278		= dword	ptr -278h
var_274		= dword	ptr -274h
var_270		= dword	ptr -270h
var_26C		= dword	ptr -26Ch
var_268		= dword	ptr -268h
var_264		= dword	ptr -264h
var_260		= byte ptr -260h
var_168		= byte ptr -168h
var_70		= xmmword ptr -70h
var_60		= xmmword ptr -60h
Dst		= byte ptr -48h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF0h
		mov	eax, 278h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+278h+var_4], eax
		push	esi
		push	edi
		mov	[esp+280h+var_274], 0
		mov	edi, offset _ige_test_vectors
		mov	[esp+280h+var_270], 0
		mov	[esp+280h+var_26C], 2
		nop	dword ptr [eax]

loc_1174:				; CODE XREF: _run_test_vectors+4A1j
		cmp	dword ptr [edi+0B0h], 40h ; '@'
		jbe	short loc_1195
		push	0C8h ; 'È'      ; Line
		push	offset ??_C@_1CC@KEOKIMGK@?$AA?4?$AA?2?$AAt?$AAe?$AAs?$AAt?$AA?2?$AAi?$AAg?$AAe?$AAt?$AAe?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@	; ".\\test\\igetest.c"
		push	offset ??_C@_1DK@IPENBGIC@?$AAv?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAM?$AAA?$AAX?$AA_?$AAV?$AAE?$AAC?$AAT?$AAO?$AAR?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$AA@ ; "v->length <= MAX_VECTOR_SIZE"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch

loc_1195:				; CODE XREF: _run_test_vectors+47j
		cmp	dword ptr [edi+0B4h], 1
		lea	eax, [esp+280h+var_260]
		push	eax
		push	80h ; '€'
		push	edi
		jnz	short loc_11B0
		call	_AES_set_encrypt_key
		jmp	short loc_11B5
; ---------------------------------------------------------------------------

loc_11B0:				; CODE XREF: _run_test_vectors+73j
		call	_AES_set_decrypt_key

loc_11B5:				; CODE XREF: _run_test_vectors+7Aj
		movups	xmm0, xmmword ptr [edi+10h]
		add	esp, 0Ch
		lea	eax, [esp+280h+var_70]
		movups	[esp+280h+var_70], xmm0
		push	dword ptr [edi+0B4h]
		movups	xmm0, xmmword ptr [edi+20h]
		push	eax
		lea	eax, [esp+288h+var_260]
		push	eax
		push	dword ptr [edi+0B0h]
		lea	eax, [esp+290h+Dst]
		push	eax
		lea	eax, [edi+30h]
		push	eax
		movups	[esp+298h+var_60], xmm0
		call	_AES_ige_encrypt
		mov	esi, [edi+0B0h]
		lea	ecx, [edi+70h]
		add	esp, 18h
		lea	edx, [esp+280h+Dst]
		sub	esi, 4
		jb	short loc_1225
		xchg	ax, ax

loc_1214:				; CODE XREF: _run_test_vectors+EFj
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_122E
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_1214

loc_1225:				; CODE XREF: _run_test_vectors+DCj
		cmp	esi, 0FFFFFFFCh
		jz	loc_13B6

loc_122E:				; CODE XREF: _run_test_vectors+E4j
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_126B
		cmp	esi, 0FFFFFFFDh
		jz	loc_13B6
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_126B
		cmp	esi, 0FFFFFFFEh
		jz	loc_13B6
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_126B
		cmp	esi, 0FFFFFFFFh
		jz	loc_13B6
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jz	loc_13B6

loc_126B:				; CODE XREF: _run_test_vectors+FEj
					; _run_test_vectors+10Fj ...
		push	[esp+280h+var_270]
		push	offset ??_C@_0BL@IPHILNNE@IGE?5test?5vector?5?$CFd?5failed?6?$AA@ ; "IGE test vector %d	failed\n"
		call	_printf
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		push	offset ??_C@_03ICHNJLJF@key?$AA@ ; `string'
		mov	esi, eax
		push	offset ??_C@_02DKCKIIND@?$CFs?$AA@ ; "%s"
		push	esi		; File
		call	_fprintf
		add	esp, 18h
		xor	eax, eax
		mov	[esp+280h+var_278], eax

loc_129C:				; CODE XREF: _run_test_vectors+19Ej
		test	al, 0Fh
		jnz	short loc_12B3
		push	eax
		push	offset ??_C@_05NCCIJLFN@?6?$CF04x?$AA@ ; "\n%04x"
		push	esi		; File
		call	_fprintf
		mov	eax, [esp+28Ch+var_278]
		add	esp, 0Ch

loc_12B3:				; CODE XREF: _run_test_vectors+16Aj
		movzx	eax, byte ptr [edi+eax]
		push	eax
		push	offset ??_C@_05HAJCMBLP@?5?$CF02x?$AA@ ; " %02x"
		push	esi		; File
		call	_fprintf
		mov	eax, [esp+28Ch+var_278]
		add	esp, 0Ch
		inc	eax
		mov	[esp+280h+var_278], eax
		cmp	eax, 10h
		jl	short loc_129C
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		push	esi		; File
		call	_fprintf
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		push	offset ??_C@_02DONNAIDC@iv?$AA@	; `string'
		mov	esi, eax
		push	offset ??_C@_02DKCKIIND@?$CFs?$AA@ ; "%s"
		push	esi		; File
		call	_fprintf
		add	esp, 18h
		xor	eax, eax
		mov	[esp+280h+var_278], eax
		xchg	ax, ax

loc_1304:				; CODE XREF: _run_test_vectors+207j
		test	al, 0Fh
		jnz	short loc_131B
		push	eax
		push	offset ??_C@_05NCCIJLFN@?6?$CF04x?$AA@ ; "\n%04x"
		push	esi		; File
		call	_fprintf
		mov	eax, [esp+28Ch+var_278]
		add	esp, 0Ch

loc_131B:				; CODE XREF: _run_test_vectors+1D2j
		movzx	eax, byte ptr [edi+eax+10h]
		push	eax
		push	offset ??_C@_05HAJCMBLP@?5?$CF02x?$AA@ ; " %02x"
		push	esi		; File
		call	_fprintf
		mov	eax, [esp+28Ch+var_278]
		add	esp, 0Ch
		inc	eax
		mov	[esp+280h+var_278], eax
		cmp	eax, 20h ; ' '
		jl	short loc_1304
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		push	esi		; File
		call	_fprintf
		mov	esi, dword ptr ds:__imp____acrt_iob_func
		lea	eax, [edi+30h]
		add	esp, 8
		push	dword ptr [edi+0B0h] ; int
		push	eax		; int
		push	offset ??_C@_02LMMGJAGL@in?$AA@	; int
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		lea	eax, [edi+70h]
		push	dword ptr [edi+0B0h] ; int
		push	eax		; int
		push	offset ??_C@_08LBKEHGGD@expected?$AA@ ;	"expected"
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		lea	eax, [esp+280h+Dst]
		push	dword ptr [edi+0B0h] ; int
		push	eax		; int
		push	offset ??_C@_03HAJCNPLG@got?$AA@ ; int
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		inc	[esp+280h+var_274]

loc_13B6:				; CODE XREF: _run_test_vectors+F4j
					; _run_test_vectors+103j ...
		movups	xmm0, xmmword ptr [edi+10h]
		mov	esi, [edi+0B0h]
		lea	eax, [edi+30h]
		push	esi		; Size
		movups	[esp+284h+var_70], xmm0
		push	eax		; Src
		movups	xmm0, xmmword ptr [edi+20h]
		lea	eax, [esp+288h+Dst]
		push	eax		; Dst
		movups	[esp+28Ch+var_60], xmm0
		call	_memcpy
		push	dword ptr [edi+0B4h]
		lea	eax, [esp+290h+var_70]
		push	eax
		lea	eax, [esp+294h+var_260]
		push	eax
		lea	eax, [esp+298h+Dst]
		push	esi
		push	eax
		push	eax
		call	_AES_ige_encrypt
		mov	esi, [edi+0B0h]
		lea	ecx, [edi+70h]
		add	esp, 24h
		lea	edx, [esp+280h+Dst]
		sub	esi, 4
		jb	short loc_1435
		nop	dword ptr [eax+00h]

loc_1424:				; CODE XREF: _run_test_vectors+2FFj
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_143E
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_1424

loc_1435:				; CODE XREF: _run_test_vectors+2EAj
		cmp	esi, 0FFFFFFFCh
		jz	loc_15C6

loc_143E:				; CODE XREF: _run_test_vectors+2F4j
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_147B
		cmp	esi, 0FFFFFFFDh
		jz	loc_15C6
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_147B
		cmp	esi, 0FFFFFFFEh
		jz	loc_15C6
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_147B
		cmp	esi, 0FFFFFFFFh
		jz	loc_15C6
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jz	loc_15C6

loc_147B:				; CODE XREF: _run_test_vectors+30Ej
					; _run_test_vectors+31Fj ...
		push	[esp+280h+var_270]
		push	offset ??_C@_0CM@BNPPFIBL@IGE?5test?5vector?5?$CFd?5failed?5?$CIwith?5@	; "IGE test vector %d failed (with in == o"...
		call	_printf
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		push	offset ??_C@_03ICHNJLJF@key?$AA@ ; `string'
		mov	esi, eax
		push	offset ??_C@_02DKCKIIND@?$CFs?$AA@ ; "%s"
		push	esi		; File
		call	_fprintf
		add	esp, 18h
		xor	eax, eax
		mov	[esp+280h+var_278], eax

loc_14AC:				; CODE XREF: _run_test_vectors+3AEj
		test	al, 0Fh
		jnz	short loc_14C3
		push	eax
		push	offset ??_C@_05NCCIJLFN@?6?$CF04x?$AA@ ; "\n%04x"
		push	esi		; File
		call	_fprintf
		mov	eax, [esp+28Ch+var_278]
		add	esp, 0Ch

loc_14C3:				; CODE XREF: _run_test_vectors+37Aj
		movzx	eax, byte ptr [edi+eax]
		push	eax
		push	offset ??_C@_05HAJCMBLP@?5?$CF02x?$AA@ ; " %02x"
		push	esi		; File
		call	_fprintf
		mov	eax, [esp+28Ch+var_278]
		add	esp, 0Ch
		inc	eax
		mov	[esp+280h+var_278], eax
		cmp	eax, 10h
		jl	short loc_14AC
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		push	esi		; File
		call	_fprintf
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		push	offset ??_C@_02DONNAIDC@iv?$AA@	; `string'
		mov	esi, eax
		push	offset ??_C@_02DKCKIIND@?$CFs?$AA@ ; "%s"
		push	esi		; File
		call	_fprintf
		add	esp, 18h
		xor	eax, eax
		mov	[esp+280h+var_278], eax
		xchg	ax, ax

loc_1514:				; CODE XREF: _run_test_vectors+417j
		test	al, 0Fh
		jnz	short loc_152B
		push	eax
		push	offset ??_C@_05NCCIJLFN@?6?$CF04x?$AA@ ; "\n%04x"
		push	esi		; File
		call	_fprintf
		mov	eax, [esp+28Ch+var_278]
		add	esp, 0Ch

loc_152B:				; CODE XREF: _run_test_vectors+3E2j
		movzx	eax, byte ptr [edi+eax+10h]
		push	eax
		push	offset ??_C@_05HAJCMBLP@?5?$CF02x?$AA@ ; " %02x"
		push	esi		; File
		call	_fprintf
		mov	eax, [esp+28Ch+var_278]
		add	esp, 0Ch
		inc	eax
		mov	[esp+280h+var_278], eax
		cmp	eax, 20h ; ' '
		jl	short loc_1514
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		push	esi		; File
		call	_fprintf
		mov	esi, dword ptr ds:__imp____acrt_iob_func
		lea	eax, [edi+30h]
		add	esp, 8
		push	dword ptr [edi+0B0h] ; int
		push	eax		; int
		push	offset ??_C@_02LMMGJAGL@in?$AA@	; int
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		lea	eax, [edi+70h]
		push	dword ptr [edi+0B0h] ; int
		push	eax		; int
		push	offset ??_C@_08LBKEHGGD@expected?$AA@ ;	"expected"
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		lea	eax, [esp+280h+Dst]
		push	dword ptr [edi+0B0h] ; int
		push	eax		; int
		push	offset ??_C@_03HAJCNPLG@got?$AA@ ; int
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		inc	[esp+280h+var_274]

loc_15C6:				; CODE XREF: _run_test_vectors+304j
					; _run_test_vectors+313j ...
		inc	[esp+280h+var_270]
		add	edi, 0B8h ; '¸'
		sub	[esp+280h+var_26C], 1
		jnz	loc_1174
		mov	edi, offset dword_270
		mov	[esp+280h+var_26C], 0
		mov	[esp+280h+var_268], edi
		mov	[esp+280h+var_264], 2

loc_15F4:				; CODE XREF: _run_test_vectors+7C3j
		cmp	dword ptr [edi+4], 40h ; '@'
		jbe	short loc_1612
		push	0F5h ; 'õ'      ; Line
		push	offset ??_C@_1CC@KEOKIMGK@?$AA?4?$AA?2?$AAt?$AAe?$AAs?$AAt?$AA?2?$AAi?$AAg?$AAe?$AAt?$AAe?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@	; ".\\test\\igetest.c"
		push	offset ??_C@_1DK@IPENBGIC@?$AAv?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAM?$AAA?$AAX?$AA_?$AAV?$AAE?$AAC?$AAT?$AAO?$AAR?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$AA@ ; "v->length <= MAX_VECTOR_SIZE"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch

loc_1612:				; CODE XREF: _run_test_vectors+4C4j
		lea	eax, [esp+280h+var_168]
		push	eax
		mov	eax, [edi]
		lea	ecx, [edi-100h]
		shl	eax, 3
		cmp	dword ptr [edi+8], 1
		push	eax
		mov	[esp+288h+var_270], ecx
		push	ecx
		jnz	short loc_164F
		call	_AES_set_encrypt_key
		lea	eax, [esp+28Ch+var_260]
		push	eax
		mov	eax, [edi]
		shl	eax, 3
		push	eax
		lea	eax, [edi-0E0h]
		push	eax
		call	_AES_set_encrypt_key
		jmp	short loc_166B
; ---------------------------------------------------------------------------

loc_164F:				; CODE XREF: _run_test_vectors+4FBj
		call	_AES_set_decrypt_key
		lea	eax, [esp+28Ch+var_260]
		push	eax
		mov	eax, [edi]
		shl	eax, 3
		push	eax
		lea	eax, [edi-0E0h]
		push	eax
		call	_AES_set_decrypt_key

loc_166B:				; CODE XREF: _run_test_vectors+519j
		add	esp, 18h
		lea	eax, [edi-0C0h]
		push	dword ptr [edi+8]
		push	eax
		lea	eax, [esp+288h+var_260]
		push	eax
		lea	eax, [esp+28Ch+var_168]
		push	eax
		push	dword ptr [edi+4]
		lea	eax, [esp+294h+Dst]
		push	eax
		lea	eax, [edi-80h]
		push	eax
		call	_AES_bi_ige_encrypt
		mov	esi, [edi+4]
		lea	ecx, [edi-40h]
		add	esp, 1Ch
		lea	edx, [esp+280h+Dst]
		sub	esi, 4
		jb	short loc_16C5
		nop	word ptr [eax+eax+00h]

loc_16B4:				; CODE XREF: _run_test_vectors+58Fj
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_16CE
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_16B4

loc_16C5:				; CODE XREF: _run_test_vectors+578j
		cmp	esi, 0FFFFFFFCh
		jz	loc_18E0

loc_16CE:				; CODE XREF: _run_test_vectors+584j
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_170B
		cmp	esi, 0FFFFFFFDh
		jz	loc_18E0
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_170B
		cmp	esi, 0FFFFFFFEh
		jz	loc_18E0
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_170B
		cmp	esi, 0FFFFFFFFh
		jz	loc_18E0
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jz	loc_18E0

loc_170B:				; CODE XREF: _run_test_vectors+59Ej
					; _run_test_vectors+5AFj ...
		push	[esp+280h+var_26C]
		push	offset ??_C@_0CJ@INLGIHPL@Bidirectional?5IGE?5test?5vector?5?$CFd@ ; "Bidirectional IGE	test vector %d failed"...
		call	_printf
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		push	offset ??_C@_05JFPLPHLM@key?51?$AA@ ; "key 1"
		mov	esi, eax
		push	offset ??_C@_02DKCKIIND@?$CFs?$AA@ ; "%s"
		push	esi		; File
		call	_fprintf
		mov	edi, [esp+298h+var_270]
		add	esp, 18h
		xor	eax, eax
		mov	[esp+280h+var_278], eax
		nop	dword ptr [eax+00h]

loc_1744:				; CODE XREF: _run_test_vectors+646j
		test	al, 0Fh
		jnz	short loc_175B
		push	eax
		push	offset ??_C@_05NCCIJLFN@?6?$CF04x?$AA@ ; "\n%04x"
		push	esi		; File
		call	_fprintf
		mov	eax, [esp+28Ch+var_278]
		add	esp, 0Ch

loc_175B:				; CODE XREF: _run_test_vectors+612j
		movzx	eax, byte ptr [edi+eax]
		push	eax
		push	offset ??_C@_05HAJCMBLP@?5?$CF02x?$AA@ ; " %02x"
		push	esi		; File
		call	_fprintf
		mov	eax, [esp+28Ch+var_278]
		add	esp, 0Ch
		inc	eax
		mov	[esp+280h+var_278], eax
		cmp	eax, 20h ; ' '
		jl	short loc_1744
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		push	esi		; File
		call	_fprintf
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		push	offset ??_C@_05LONGKEHP@key?52?$AA@ ; "key 2"
		mov	esi, eax
		push	offset ??_C@_02DKCKIIND@?$CFs?$AA@ ; "%s"
		push	esi		; File
		call	_fprintf
		mov	ecx, [esp+298h+var_270]
		xor	eax, eax
		mov	edi, [esp+298h+var_268]
		add	esp, 18h
		add	ecx, 20h ; ' '
		mov	[esp+280h+var_278], eax
		mov	[esp+280h+var_270], ecx

loc_17B9:				; CODE XREF: _run_test_vectors+6C3j
		test	al, 0Fh
		jnz	short loc_17D4
		push	eax
		push	offset ??_C@_05NCCIJLFN@?6?$CF04x?$AA@ ; "\n%04x"
		push	esi		; File
		call	_fprintf
		mov	eax, [esp+28Ch+var_278]
		add	esp, 0Ch
		mov	ecx, [esp+280h+var_270]

loc_17D4:				; CODE XREF: _run_test_vectors+687j
		movzx	eax, byte ptr [ecx+eax]
		push	eax
		push	offset ??_C@_05HAJCMBLP@?5?$CF02x?$AA@ ; " %02x"
		push	esi		; File
		call	_fprintf
		mov	eax, [esp+28Ch+var_278]
		add	esp, 0Ch
		mov	ecx, [esp+280h+var_270]
		inc	eax
		mov	[esp+280h+var_278], eax
		cmp	eax, 20h ; ' '
		jl	short loc_17B9
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		push	esi		; File
		call	_fprintf
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		push	offset ??_C@_02DONNAIDC@iv?$AA@	; `string'
		mov	esi, eax
		push	offset ??_C@_02DKCKIIND@?$CFs?$AA@ ; "%s"
		push	esi		; File
		call	_fprintf
		add	esp, 18h
		xor	eax, eax
		mov	[esp+280h+var_278], eax

loc_1827:				; CODE XREF: _run_test_vectors+72Dj
		test	al, 0Fh
		jnz	short loc_183E
		push	eax
		push	offset ??_C@_05NCCIJLFN@?6?$CF04x?$AA@ ; "\n%04x"
		push	esi		; File
		call	_fprintf
		mov	eax, [esp+28Ch+var_278]
		add	esp, 0Ch

loc_183E:				; CODE XREF: _run_test_vectors+6F5j
		movzx	eax, byte ptr [edi+eax-0C0h]
		push	eax
		push	offset ??_C@_05HAJCMBLP@?5?$CF02x?$AA@ ; " %02x"
		push	esi		; File
		call	_fprintf
		mov	eax, [esp+28Ch+var_278]
		add	esp, 0Ch
		inc	eax
		mov	[esp+280h+var_278], eax
		cmp	eax, 40h ; '@'
		jl	short loc_1827
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		push	esi		; File
		call	_fprintf
		add	esp, 8
		lea	eax, [edi-80h]
		push	dword ptr [edi+4] ; int
		push	eax		; int
		push	offset ??_C@_02LMMGJAGL@in?$AA@	; int
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		lea	eax, [edi-40h]
		push	dword ptr [edi+4] ; int
		push	eax		; int
		push	offset ??_C@_08LBKEHGGD@expected?$AA@ ;	"expected"
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		add	esp, 10h
		lea	eax, [esp+280h+Dst]
		push	dword ptr [edi+4] ; int
		push	eax		; int
		push	offset ??_C@_03HAJCNPLG@got?$AA@ ; int
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_hexdump
		mov	ecx, [esp+290h+var_274]
		add	esp, 10h
		inc	ecx
		mov	[esp+280h+var_274], ecx
		jmp	short loc_18E4
; ---------------------------------------------------------------------------

loc_18E0:				; CODE XREF: _run_test_vectors+594j
					; _run_test_vectors+5A3j ...
		mov	ecx, [esp+280h+var_274]

loc_18E4:				; CODE XREF: _run_test_vectors+7AAj
		inc	[esp+280h+var_26C]
		add	edi, 10Ch
		sub	[esp+280h+var_264], 1
		mov	[esp+280h+var_268], edi
		jnz	loc_15F4
		mov	eax, ecx
		mov	ecx, [esp+280h+var_4]
		pop	edi
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
_run_test_vectors endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1914h
; COMDAT (pick any)
		public ??_C@_02DKCKIIND@?$CFs?$AA@
; char `string'[3]
??_C@_02DKCKIIND@?$CFs?$AA@ db '%s',0   ; DATA XREF: _hexdump+Bo _main+82Co ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1918h
; COMDAT (pick any)
		public ??_C@_05NCCIJLFN@?6?$CF04x?$AA@
; char `string'[]
??_C@_05NCCIJLFN@?6?$CF04x?$AA@	db 0Ah	; DATA XREF: _hexdump+2Eo _main+846o ...
		db '%04x',0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1920h
; COMDAT (pick any)
		public ??_C@_05HAJCMBLP@?5?$CF02x?$AA@
; char `string'[]
??_C@_05HAJCMBLP@?5?$CF02x?$AA@	db ' %02x',0 ; DATA XREF: _hexdump+41o
					; _main+85Do ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1928h
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; char `string'[2]
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah,0	; DATA XREF: _hexdump:loc_42Do
					; _main+874o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 192Ch
; COMDAT (pick any)
		public ??_C@_1CC@KEOKIMGK@?$AA?4?$AA?2?$AAt?$AAe?$AAs?$AAt?$AA?2?$AAi?$AAg?$AAe?$AAt?$AAe?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
; wchar_t `string'
??_C@_1CC@KEOKIMGK@?$AA?4?$AA?2?$AAt?$AAe?$AAs?$AAt?$AA?2?$AAi?$AAg?$AAe?$AAt?$AAe?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@:
					; DATA XREF: _run_test_vectors+4Eo
					; _run_test_vectors+4CBo
		unicode	0, <.\test\igetest.c>,0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1950h
; COMDAT (pick any)
		public ??_C@_1DK@IPENBGIC@?$AAv?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAM?$AAA?$AAX?$AA_?$AAV?$AAE?$AAC?$AAT?$AAO?$AAR?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$AA@
; wchar_t `string'
??_C@_1DK@IPENBGIC@?$AAv?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAM?$AAA?$AAX?$AA_?$AAV?$AAE?$AAC?$AAT?$AAO?$AAR?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$AA@:
					; DATA XREF: _run_test_vectors+53o
					; _run_test_vectors+4D0o
		unicode	0, <v->
		dw 3Eh
		unicode	0, <length >
		dw 3Ch
		unicode	0, <= MAX_VECTOR_SIZE>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 198Ch
; COMDAT (pick any)
		public ??_C@_0BL@IPHILNNE@IGE?5test?5vector?5?$CFd?5failed?6?$AA@
; char `string'[]
??_C@_0BL@IPHILNNE@IGE?5test?5vector?5?$CFd?5failed?6?$AA@ db 'IGE test vector %d failed',0Ah,0
					; DATA XREF: _run_test_vectors+13Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 19A8h
; COMDAT (pick any)
		public ??_C@_03ICHNJLJF@key?$AA@
; `string'
??_C@_03ICHNJLJF@key?$AA@ dd 79656Bh	; DATA XREF: _run_test_vectors+14Do
					; _run_test_vectors+35Do
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 19ACh
; COMDAT (pick any)
		public ??_C@_02DONNAIDC@iv?$AA@
; `string'
??_C@_02DONNAIDC@iv?$AA@ db 69h, 76h, 0	; DATA XREF: _run_test_vectors+1B3o
					; _run_test_vectors+3C3o ...
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 19B0h
; COMDAT (pick any)
		public ??_C@_02LMMGJAGL@in?$AA@
; `string'
??_C@_02LMMGJAGL@in?$AA@ db 69h, 6Eh, 0	; DATA XREF: _run_test_vectors+227o
					; _run_test_vectors+437o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 19B4h
; COMDAT (pick any)
		public ??_C@_08LBKEHGGD@expected?$AA@
; `string'
??_C@_08LBKEHGGD@expected?$AA@ db 'expected',0 ; DATA XREF: _run_test_vectors+246o
					; _run_test_vectors+456o ...
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 19C0h
; COMDAT (pick any)
		public ??_C@_03HAJCNPLG@got?$AA@
; `string'
??_C@_03HAJCNPLG@got?$AA@ dd 746F67h	; DATA XREF: _run_test_vectors+269o
					; _run_test_vectors+479o ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 19C4h
; COMDAT (pick any)
		public ??_C@_0CM@BNPPFIBL@IGE?5test?5vector?5?$CFd?5failed?5?$CIwith?5@
; char `string'[]
??_C@_0CM@BNPPFIBL@IGE?5test?5vector?5?$CFd?5failed?5?$CIwith?5@ db 'IGE test vector %d failed (with in == out)',0Ah,0
					; DATA XREF: _run_test_vectors+34Bo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 19F0h
; COMDAT (pick any)
		public ??_C@_0CJ@INLGIHPL@Bidirectional?5IGE?5test?5vector?5?$CFd@
; char `string'[]
??_C@_0CJ@INLGIHPL@Bidirectional?5IGE?5test?5vector?5?$CFd@ db 'Bidirectional IGE test vector %d failed',0Ah,0
					; DATA XREF: _run_test_vectors+5DBo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A1Ch
; COMDAT (pick any)
		public ??_C@_05JFPLPHLM@key?51?$AA@
; `string'
??_C@_05JFPLPHLM@key?51?$AA@ db	'key 1',0 ; DATA XREF: _run_test_vectors+5EDo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A24h
; COMDAT (pick any)
		public ??_C@_05LONGKEHP@key?52?$AA@
; `string'
??_C@_05LONGKEHP@key?52?$AA@ db	'key 2',0 ; DATA XREF: _run_test_vectors+65Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A2Ch
; COMDAT (pick any)
		public ??_C@_0BP@BGFLFOMO@Encrypt?$CLdecrypt?5doesn?8t?5match?6?$AA@
; char `string'[]
??_C@_0BP@BGFLFOMO@Encrypt?$CLdecrypt?5doesn?8t?5match?6?$AA@ db 'Encrypt+decrypt doesn',27h,'t match',0Ah,0
					; DATA XREF: _main+194o _main+817o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A4Ch
; COMDAT (pick any)
		public ??_C@_09DOLMGAGM@Plaintext?$AA@
; `string'
??_C@_09DOLMGAGM@Plaintext?$AA@	db 'Plaintext',0 ; DATA XREF: _main+1AEo
					; _main+369o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A58h
; COMDAT (pick any)
		public ??_C@_09NPDOMLIM@Checktext?$AA@
; `string'
??_C@_09NPDOMLIM@Checktext?$AA@	db 'Checktext',0 ; DATA XREF: _main+1D0o
					; _main+38Bo ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A64h
; COMDAT (pick any)
		public ??_C@_0CH@MPBMAGFO@Chained?5encrypt?$CLdecrypt?5doesn?8t?5@
; char `string'[]
??_C@_0CH@MPBMAGFO@Chained?5encrypt?$CLdecrypt?5doesn?8t?5@ db 'Chained encrypt+decrypt doesn',27h,'t match',0Ah,0
					; DATA XREF: _main+34Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A8Ch
; COMDAT (pick any)
		public ??_C@_0CP@MGBKBHHG@Chained?5encrypt?$CLchained?5decrypt?5@
; char `string'[]
??_C@_0CP@MGBKBHHG@Chained?5encrypt?$CLchained?5decrypt?5@ db 'Chained encrypt+chained decrypt doesn',27h,'t match',0Ah,0
					; DATA XREF: _main+52Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1ABCh
; COMDAT (pick any)
		public ??_C@_0CH@EFDNEHKM@More?5than?551?$CF?$CF?5matches?5after?5gar@
; char `string'[]
??_C@_0CH@EFDNEHKM@More?5than?551?$CF?$CF?5matches?5after?5gar@	db 'More than 51%% matches after garbling',0Ah,0
					; DATA XREF: _main+6E8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1AE4h
; COMDAT (pick any)
		public ??_C@_0BL@MFACJGC@Garble?5extends?5backwards?$CB?6?$AA@
; char `string'[]
??_C@_0BL@MFACJGC@Garble?5extends?5backwards?$CB?6?$AA@	db 'Garble extends backwards!',0Ah,0
					; DATA XREF: _main+6FEo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B00h
; COMDAT (pick any)
		public ??_C@_0DE@FIANGABF@More?5than?51?$CF?$CF?5matches?5after?5bidi@
; char `string'[]
??_C@_0DE@FIANGABF@More?5than?51?$CF?$CF?5matches?5after?5bidi@	db 'More than 1%% matches after bidirectional garbling',0Ah,0
					; DATA XREF: _main+A15o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B34h
; COMDAT (pick any)
		public ??_C@_0DI@DPNJCMFM@More?5than?51?$CF?$CF?5matches?5after?5bidi@
; char `string'[]
??_C@_0DI@DPNJCMFM@More?5than?51?$CF?$CF?5matches?5after?5bidi@	db 'More than 1%% matches after bidirectional garbling (2)',0Ah,0
					; DATA XREF: _main+B55o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B6Ch
; COMDAT (pick any)
		public ??_C@_0DI@IHGFELDJ@More?5than?51?$CF?$CF?5matches?5after?5bidi@
; char `string'[]
??_C@_0DI@IHGFELDJ@More?5than?51?$CF?$CF?5matches?5after?5bidi@	db 'More than 1%% matches after bidirectional garbling (3)',0Ah,0
					; DATA XREF: _main+C95o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _AES_set_encrypt_key:near	; CODE XREF: _main+93p
					; _main+1FCp ...
		extrn _AES_set_decrypt_key:near	; CODE XREF: _main+D6p
					; _main+296p ...
		extrn _AES_ige_encrypt:near ; CODE XREF: _main+BCp _main+135p	...
		extrn _AES_bi_ige_encrypt:near ; CODE XREF: _main+778p
					; _main+7E0p ...
		extrn _RAND_pseudo_bytes:near ;	CODE XREF: _main+27p _main+39p ...
		extrn __imp____acrt_iob_func:near ; CODE XREF: _main+1B5p
					; _main+1D7p ...
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _fprintf+19p	...
; void __cdecl __wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
		extrn __imp___wassert:near ; CODE XREF:	_run_test_vectors+58p
					; _run_test_vectors+4D5p
					; DATA XREF: ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _main+CB6p
					; _run_test_vectors+7D6p
		extrn __chkstk:near	; CODE XREF: _main+5p
					; _run_test_vectors+Bp
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _run_test_vectors+2ADp
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso
		extrn ___security_cookie:near ;	DATA XREF: _main+Ar
					; _run_test_vectors+10r


		end
