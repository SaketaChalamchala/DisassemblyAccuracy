;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	7EE2ADDBA6602BEC6E3CD78389B3DC39
; Input	CRC32 :	01B8E866

; File Name   :	C:\compspace\Diff\openssl\obj\c_ecb.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		public _CAST_version
_CAST_version	db 'CAST part of OpenSSL 1.0.2h  3 May 2016',0
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 28h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CAST_ecb_encrypt
_CAST_ecb_encrypt proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 8
		call	__chkstk
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		movzx	ecx, byte ptr [esi]
		movzx	eax, byte ptr [esi+1]
		movzx	edx, byte ptr [esi+4]
		shl	eax, 10h
		shl	ecx, 18h
		or	ecx, eax
		shl	edx, 18h
		movzx	eax, byte ptr [esi+2]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+3]
		or	ecx, eax
		movzx	eax, byte ptr [esi+5]
		mov	[esp+0Ch+var_8], ecx
		movzx	ecx, byte ptr [esi+6]
		shl	eax, 10h
		or	edx, eax
		shl	ecx, 8
		movzx	eax, byte ptr [esi+7]
		or	ecx, eax
		lea	eax, [esp+0Ch+var_8]
		pop	esi
		push	[esp+8+arg_8]
		or	ecx, edx
		cmp	[esp+0Ch+arg_C], 0
		mov	[esp+0Ch+var_4], ecx
		push	eax
		jz	short loc_94
		call	_CAST_encrypt
		jmp	short loc_99
; ---------------------------------------------------------------------------

loc_94:					; CODE XREF: _CAST_ecb_encrypt+63j
		call	_CAST_decrypt

loc_99:					; CODE XREF: _CAST_ecb_encrypt+6Aj
		mov	edx, [esp+10h+arg_4]
		add	esp, 8
		mov	ecx, [esp+8+var_8]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+1], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+2], al
		mov	[edx+3], cl
		mov	ecx, [esp+8+var_4]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+4], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+5], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+6], al
		mov	[edx+7], cl
		add	esp, 8
		retn
_CAST_ecb_encrypt endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CAST_encrypt:near ; CODE	XREF: _CAST_ecb_encrypt+65p
		extrn _CAST_decrypt:near ; CODE	XREF: _CAST_ecb_encrypt:loc_94p
		extrn __chkstk:near	; CODE XREF: _CAST_ecb_encrypt+5p


		end
