;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	65804F2D9D5807258DBE78A8FF93AC94
; Input	CRC32 :	B52FCB80

; File Name   :	C:\compspace\Diff\openssl\obj\a_time.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
; `ASN1_TIME_it'::`2'::local_it
?local_it@?1??ASN1_TIME_it@@9@9	dd 5, 0C000h, 3	dup(0) ; DATA XREF: _ASN1_TIME_freeo
					; _ASN1_TIME_ito ...
		dd 10h
		dd offset ??_C@_09DHMKJJNA@ASN1_TIME?$AA@ ; "ASN1_TIME"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1Ch
; COMDAT (pick any)
		public ??_C@_09DHMKJJNA@ASN1_TIME?$AA@
; `string'
??_C@_09DHMKJJNA@ASN1_TIME?$AA@	db 'ASN1_TIME',0 ; DATA XREF: .rdata:00000018o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 28h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_TIME_adj
_ASN1_TIME_adj	proc near		; CODE XREF: _ASN1_TIME_set+10p

var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= byte ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 30h ; '0'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+30h+var_4], eax
		mov	eax, [esp+30h+arg_4]
		push	ebx
		push	ebp
		mov	ebp, [esp+38h+arg_0]
		mov	[esp+38h+var_30], eax
		mov	eax, [esp+38h+arg_8]
		push	esi
		mov	esi, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_2C], eax
		lea	eax, [esp+3Ch+var_28]
		push	edi
		mov	edi, [esp+40h+arg_10]
		push	eax
		lea	eax, [esp+44h+var_30]
		push	eax
		call	_OPENSSL_gmtime
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_A5
		push	73h ; 's'
		push	offset ??_C@_0BH@IBOPBBIO@?4?2crypto?2asn1?2a_time?4c?$AA@ ; ".\\crypto\\asn1\\a_time.c"
		push	0ADh ; '­'
		push	0D9h ; 'Ù'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h

loc_90:					; CODE XREF: _ASN1_TIME_adj+92j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+30h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_A5:					; CODE XREF: _ASN1_TIME_adj+4Bj
		test	esi, esi
		jnz	short loc_AD
		test	edi, edi
		jz	short loc_BC

loc_AD:					; CODE XREF: _ASN1_TIME_adj+7Fj
		push	edi
		push	esi
		push	ebx
		call	_OPENSSL_gmtime_adj
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_90

loc_BC:					; CODE XREF: _ASN1_TIME_adj+83j
		mov	eax, [ebx+14h]
		cmp	eax, 32h ; '2'
		jl	short loc_DD
		cmp	eax, 96h ; '–'
		jge	short loc_DD
		push	edi
		push	esi
		push	[esp+48h+var_2C]
		push	[esp+4Ch+var_30]
		push	ebp
		call	_ASN1_UTCTIME_adj
		jmp	short loc_ED
; ---------------------------------------------------------------------------

loc_DD:					; CODE XREF: _ASN1_TIME_adj+9Aj
					; _ASN1_TIME_adj+A1j
		push	edi
		push	esi
		push	[esp+48h+var_2C]
		push	[esp+4Ch+var_30]
		push	ebp
		call	_ASN1_GENERALIZEDTIME_adj

loc_ED:					; CODE XREF: _ASN1_TIME_adj+B3j
		mov	ecx, [esp+54h+var_4]
		add	esp, 14h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 30h
		retn
_ASN1_TIME_adj	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 104h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_TIME_check
_ASN1_TIME_check proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	ecx, [eax+4]
		cmp	ecx, 18h
		jnz	short loc_119
		mov	[esp+arg_0], eax
		jmp	_ASN1_GENERALIZEDTIME_check
; ---------------------------------------------------------------------------

loc_119:				; CODE XREF: _ASN1_TIME_check+Aj
		cmp	ecx, 17h
		jnz	short loc_127
		mov	[esp+arg_0], eax
		jmp	_ASN1_UTCTIME_check
; ---------------------------------------------------------------------------

loc_127:				; CODE XREF: _ASN1_TIME_check+18j
		xor	eax, eax
		retn
_ASN1_TIME_check endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 12Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_TIME_diff
_ASN1_TIME_diff	proc near

Time		= qword	ptr -54h
var_4C		= byte ptr -4Ch
var_28		= byte ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 54h ; 'T'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+54h+var_4], eax
		mov	eax, [esp+54h+arg_8]
		push	ebx
		mov	ebx, [esp+58h+arg_4]
		push	esi
		mov	esi, [esp+5Ch+arg_C]
		push	edi
		mov	edi, [esp+60h+arg_0]
		test	eax, eax
		jnz	short loc_18D
		lea	eax, [esp+60h+Time]
		push	eax		; Time
		call	dword ptr ds:__imp___time64
		lea	eax, [esp+64h+var_4C]
		push	eax
		lea	eax, [esp+68h+Time]
		push	eax
		call	_OPENSSL_gmtime
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1B9

loc_179:				; CODE XREF: _ASN1_TIME_diff+79j
					; _ASN1_TIME_diff+8Bj ...
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+54h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 54h
		retn
; ---------------------------------------------------------------------------

loc_18D:				; CODE XREF: _ASN1_TIME_diff+2Aj
		mov	ecx, [eax+4]
		cmp	ecx, 17h
		jnz	short loc_1A2
		push	eax
		lea	eax, [esp+64h+var_4C]
		push	eax
		call	_asn1_utctime_to_tm
		jmp	short loc_1B2
; ---------------------------------------------------------------------------

loc_1A2:				; CODE XREF: _ASN1_TIME_diff+67j
		cmp	ecx, 18h
		jnz	short loc_179
		push	eax
		lea	eax, [esp+64h+var_4C]
		push	eax
		call	_asn1_generalizedtime_to_tm

loc_1B2:				; CODE XREF: _ASN1_TIME_diff+74j
		add	esp, 8
		test	eax, eax
		jz	short loc_179

loc_1B9:				; CODE XREF: _ASN1_TIME_diff+4Bj
		lea	eax, [esp+60h+var_28]
		push	esi
		push	eax
		call	_asn1_time_to_tm
		add	esp, 8
		test	eax, eax
		jz	short loc_179
		lea	eax, [esp+60h+var_28]
		push	eax
		lea	eax, [esp+64h+var_4C]
		push	eax
		push	ebx
		push	edi
		call	_OPENSSL_gmtime_diff
		mov	ecx, [esp+70h+var_4]
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 54h
		retn
_ASN1_TIME_diff	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_TIME_free
_ASN1_TIME_free	proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??ASN1_TIME_it@@9@9 ; `ASN1_TIME_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_ASN1_TIME_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 208h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_TIME_it
_ASN1_TIME_it	proc near
		mov	eax, offset ?local_it@?1??ASN1_TIME_it@@9@9 ; `ASN1_TIME_it'::`2'::local_it
		retn
_ASN1_TIME_it	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 210h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_TIME_new
_ASN1_TIME_new	proc near
		push	offset ?local_it@?1??ASN1_TIME_it@@9@9 ; `ASN1_TIME_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_ASN1_TIME_new	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 220h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_TIME_set
_ASN1_TIME_set	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	0
		push	0
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	_ASN1_TIME_adj
		add	esp, 14h
		retn
_ASN1_TIME_set	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 23Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_TIME_set_string
_ASN1_TIME_set_string proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 10h
		call	__chkstk
		mov	edx, [esp+10h+arg_4]
		mov	ecx, edx
		push	esi
		lea	esi, [ecx+1]

loc_250:				; CODE XREF: _ASN1_TIME_set_string+19j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_250
		lea	eax, [esp+14h+var_10]
		mov	[esp+14h+var_8], edx
		sub	ecx, esi
		mov	[esp+14h+var_4], 0
		push	eax
		mov	[esp+18h+var_10], ecx
		mov	[esp+18h+var_C], 17h
		call	_ASN1_UTCTIME_check
		add	esp, 4
		pop	esi
		test	eax, eax
		jnz	short loc_2A1
		lea	eax, [esp+10h+var_10]
		mov	[esp+10h+var_C], 18h
		push	eax
		call	_ASN1_GENERALIZEDTIME_check
		add	esp, 4
		test	eax, eax
		jnz	short loc_2A1

loc_29B:				; CODE XREF: _ASN1_TIME_set_string+7Cj
		xor	eax, eax
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_2A1:				; CODE XREF: _ASN1_TIME_set_string+45j
					; _ASN1_TIME_set_string+5Dj
		mov	eax, [esp+10h+arg_0]
		test	eax, eax
		jz	short loc_2BA
		lea	ecx, [esp+10h+var_10]
		push	ecx
		push	eax
		call	_ASN1_STRING_copy
		add	esp, 8
		test	eax, eax
		jz	short loc_29B

loc_2BA:				; CODE XREF: _ASN1_TIME_set_string+6Bj
		mov	eax, 1
		add	esp, 10h
		retn
_ASN1_TIME_set_string endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_TIME_to_generalizedtime
_ASN1_TIME_to_generalizedtime proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+4]
		cmp	eax, 18h
		jnz	short loc_2D9
		push	esi
		call	_ASN1_GENERALIZEDTIME_check
		jmp	short loc_2E8
; ---------------------------------------------------------------------------

loc_2D9:				; CODE XREF: _ASN1_TIME_to_generalizedtime+Bj
		cmp	eax, 17h
		jnz	loc_388
		push	esi
		call	_ASN1_UTCTIME_check

loc_2E8:				; CODE XREF: _ASN1_TIME_to_generalizedtime+13j
		add	esp, 4
		test	eax, eax
		jz	loc_388
		push	ebx
		mov	ebx, [esp+8+arg_4]
		push	edi
		test	ebx, ebx
		jz	short loc_303
		mov	edi, [ebx]
		test	edi, edi
		jnz	short loc_314

loc_303:				; CODE XREF: _ASN1_TIME_to_generalizedtime+37j
		call	_ASN1_GENERALIZEDTIME_new
		mov	edi, eax
		test	edi, edi
		jz	short loc_347
		test	ebx, ebx
		jz	short loc_314
		mov	[ebx], edi

loc_314:				; CODE XREF: _ASN1_TIME_to_generalizedtime+3Dj
					; _ASN1_TIME_to_generalizedtime+4Cj
		cmp	dword ptr [esi+4], 18h
		jnz	short loc_332
		push	dword ptr [esi]
		push	dword ptr [esi+8]
		push	edi
		call	_ASN1_STRING_set
		add	esp, 0Ch
		neg	eax
		sbb	eax, eax
		and	eax, edi
		pop	edi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_332:				; CODE XREF: _ASN1_TIME_to_generalizedtime+54j
		mov	eax, [esi]
		add	eax, 2
		push	eax
		push	0
		push	edi
		call	_ASN1_STRING_set
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_34D

loc_347:				; CODE XREF: _ASN1_TIME_to_generalizedtime+48j
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_34D:				; CODE XREF: _ASN1_TIME_to_generalizedtime+81j
		mov	eax, [esi+8]
		mov	ebx, [esi]
		push	ebp
		mov	ebp, [edi+8]
		add	ebx, 3
		cmp	byte ptr [eax],	35h ; '5'
		push	ebx
		jb	short loc_366
		push	offset ??_C@_02CLJDCEPA@19?$AA@	; `string'
		jmp	short loc_36B
; ---------------------------------------------------------------------------

loc_366:				; CODE XREF: _ASN1_TIME_to_generalizedtime+99j
		push	offset ??_C@_02PIBHCBOA@20?$AA@	; `string'

loc_36B:				; CODE XREF: _ASN1_TIME_to_generalizedtime+A0j
		push	ebp
		call	_BUF_strlcpy
		add	esp, 0Ch
		push	ebx
		push	dword ptr [esi+8]
		push	ebp
		call	_BUF_strlcat
		add	esp, 0Ch
		mov	eax, edi
		pop	ebp
		pop	edi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_388:				; CODE XREF: _ASN1_TIME_to_generalizedtime+18j
					; _ASN1_TIME_to_generalizedtime+29j
		xor	eax, eax
		pop	esi
		retn
_ASN1_TIME_to_generalizedtime endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 38Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_time_to_tm proc near		; CODE XREF: _ASN1_TIME_diff+93p

var_8		= byte ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 8
		call	__chkstk
		mov	eax, [esp+8+arg_4]
		test	eax, eax
		jnz	short loc_3C3
		lea	eax, [esp+8+var_8]
		push	eax		; Time
		call	dword ptr ds:__imp___time64
		push	[esp+0Ch+arg_0]
		lea	eax, [esp+10h+var_8]
		push	eax
		call	_OPENSSL_gmtime
		add	esp, 0Ch
		neg	eax
		sbb	eax, eax
		neg	eax
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_3C3:				; CODE XREF: _asn1_time_to_tm+10j
		mov	ecx, [eax+4]
		cmp	ecx, 17h
		jnz	short loc_3D7
		add	esp, 8
		mov	[esp+arg_4], eax
		jmp	_asn1_utctime_to_tm
; ---------------------------------------------------------------------------

loc_3D7:				; CODE XREF: _asn1_time_to_tm+3Dj
		cmp	ecx, 18h
		jnz	short loc_3E8
		add	esp, 8
		mov	[esp+arg_4], eax
		jmp	_asn1_generalizedtime_to_tm
; ---------------------------------------------------------------------------

loc_3E8:				; CODE XREF: _asn1_time_to_tm+4Ej
		xor	eax, eax
		add	esp, 8
		retn
_asn1_time_to_tm endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ASN1_TIME
_d2i_ASN1_TIME	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ASN1_TIME_it@@9@9 ; `ASN1_TIME_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ASN1_TIME	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 40Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ASN1_TIME
_i2d_ASN1_TIME	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ASN1_TIME_it@@9@9 ; `ASN1_TIME_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ASN1_TIME	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 424h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; time_t __cdecl static	time(time_t *Time)
_time		proc near
		jmp	dword ptr ds:__imp___time64
_time		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 42Ch
; COMDAT (pick any)
		public ??_C@_0BH@IBOPBBIO@?4?2crypto?2asn1?2a_time?4c?$AA@
; `string'
??_C@_0BH@IBOPBBIO@?4?2crypto?2asn1?2a_time?4c?$AA@ db '.\crypto\asn1\a_time.c',0
					; DATA XREF: _ASN1_TIME_adj+4Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 444h
; COMDAT (pick any)
		public ??_C@_02CLJDCEPA@19?$AA@
; `string'
??_C@_02CLJDCEPA@19?$AA@ db 31h, 39h, 0	; DATA XREF: _ASN1_TIME_to_generalizedtime+9Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 448h
; COMDAT (pick any)
		public ??_C@_02PIBHCBOA@20?$AA@
; `string'
??_C@_02PIBHCBOA@20?$AA@ db 32h, 30h, 0	; DATA XREF: _ASN1_TIME_to_generalizedtime:loc_366o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; __time64_t __cdecl __time64(__time64_t *Time)
		extrn __imp___time64:near ; CODE XREF: _ASN1_TIME_diff+31p
					; _asn1_time_to_tm+16p
					; DATA XREF: ...
		extrn _BUF_strlcpy:near	; CODE XREF: _ASN1_TIME_to_generalizedtime+A8p
		extrn _BUF_strlcat:near	; CODE XREF: _ASN1_TIME_to_generalizedtime+B5p
		extrn _ERR_put_error:near ; CODE XREF: _ASN1_TIME_adj+60p
		extrn _OPENSSL_gmtime:near ; CODE XREF:	_ASN1_TIME_adj+3Fp
					; _ASN1_TIME_diff+41p ...
		extrn _OPENSSL_gmtime_adj:near ; CODE XREF: _ASN1_TIME_adj+88p
		extrn _OPENSSL_gmtime_diff:near	; CODE XREF: _ASN1_TIME_diff+ABp
		extrn _ASN1_STRING_copy:near ; CODE XREF: _ASN1_TIME_set_string+72p
		extrn _ASN1_STRING_set:near ; CODE XREF: _ASN1_TIME_to_generalizedtime+5Cp
					; _ASN1_TIME_to_generalizedtime+77p
		extrn _ASN1_UTCTIME_check:near ; CODE XREF: _ASN1_TIME_check+1Ej
					; _ASN1_TIME_set_string+3Ap ...
		extrn _ASN1_UTCTIME_adj:near ; CODE XREF: _ASN1_TIME_adj+AEp
		extrn _ASN1_GENERALIZEDTIME_check:near ; CODE XREF: _ASN1_TIME_check+10j
					; _ASN1_TIME_set_string+53p ...
		extrn _ASN1_GENERALIZEDTIME_adj:near ; CODE XREF: _ASN1_TIME_adj+C0p
		extrn _ASN1_GENERALIZEDTIME_new:near
					; CODE XREF: _ASN1_TIME_to_generalizedtime:loc_303p
		extrn _ASN1_item_new:near ; CODE XREF: _ASN1_TIME_new+5p
		extrn _ASN1_item_free:near ; CODE XREF:	_ASN1_TIME_free+9p
		extrn _ASN1_item_d2i:near ; CODE XREF: _d2i_ASN1_TIME+11p
		extrn _ASN1_item_i2d:near ; CODE XREF: _i2d_ASN1_TIME+Dp
		extrn _asn1_utctime_to_tm:near ; CODE XREF: _ASN1_TIME_diff+6Fp
					; _asn1_time_to_tm+46j
		extrn _asn1_generalizedtime_to_tm:near ; CODE XREF: _ASN1_TIME_diff+81p
					; _asn1_time_to_tm+57j
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _ASN1_TIME_adj+74p
					; _ASN1_TIME_adj+D2p ...
		extrn __chkstk:near	; CODE XREF: _ASN1_TIME_adj+5p
					; _ASN1_TIME_diff+5p ...
		extrn ___security_cookie:near ;	DATA XREF: _ASN1_TIME_adj+Ar
					; _ASN1_TIME_diff+Ar


		end
