;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	80D7ECFF1659D705614143D0E18F7FE3
; Input	CRC32 :	DDB6D6AE

; File Name   :	C:\compspace\Diff\openssl\obj\ocsp_vfy.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OCSP_basic_verify
_OCSP_basic_verify proc	near

var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= byte ptr -88h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 90h ; 'ê'
		call	__chkstk
		push	ebx
		push	ebp
		mov	ebp, [esp+98h+arg_4]
		push	esi
		push	edi
		mov	edi, [esp+0A0h+arg_0]
		xor	esi, esi
		mov	eax, [edi]
		mov	eax, [eax+4]
		push	eax
		push	ebp
		mov	[esp+0A8h+var_90], eax
		call	_ocsp_find_signer_sk
		mov	ebx, [esp+0A8h+arg_C]
		add	esp, 8
		mov	[esp+0A0h+var_8C], eax
		test	eax, eax
		jz	short loc_50
		lea	edi, [esi+2]
		test	ebx, 200h
		jz	short loc_79
		or	ebx, 10h
		jmp	short loc_79
; ---------------------------------------------------------------------------

loc_50:					; CODE XREF: _OCSP_basic_verify+3Ej
		test	bl, 2
		jnz	loc_27B
		push	[esp+0A0h+var_90]
		push	dword ptr [edi+0Ch]
		call	_ocsp_find_signer_sk
		add	esp, 8
		mov	[esp+0A0h+var_8C], eax
		test	eax, eax
		jz	loc_27B
		mov	edi, 1

loc_79:					; CODE XREF: _OCSP_basic_verify+49j
					; _OCSP_basic_verify+4Ej
		test	bl, 4
		jnz	short loc_CA
		push	eax
		call	_X509_get_pubkey
		add	esp, 4
		mov	[esp+0A0h+var_90], eax
		test	eax, eax
		jz	short loc_BC
		push	eax
		mov	eax, [esp+0A4h+arg_0]
		push	dword ptr [eax]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		call	_OCSP_RESPDATA_it
		push	eax
		call	_ASN1_item_verify
		push	[esp+0B4h+var_90]
		mov	edi, eax
		call	_EVP_PKEY_free
		add	esp, 18h
		test	edi, edi
		jg	short loc_CA

loc_BC:					; CODE XREF: _OCSP_basic_verify+8Dj
		push	69h ; 'i'
		push	offset ??_C@_0BJ@KMLFEEOP@?4?2crypto?2ocsp?2ocsp_vfy?4c?$AA@ ; ".\\crypto\\ocsp\\ocsp_vfy.c"
		push	75h ; 'u'
		jmp	loc_286
; ---------------------------------------------------------------------------

loc_CA:					; CODE XREF: _OCSP_basic_verify+7Cj
					; _OCSP_basic_verify+BAj
		test	bl, 10h
		jnz	loc_292
		test	bl, 8
		jz	short loc_E0
		xor	esi, esi
		mov	[esp+0A0h+var_90], esi
		jmp	short loc_13A
; ---------------------------------------------------------------------------

loc_E0:					; CODE XREF: _OCSP_basic_verify+D6j
		mov	esi, [esp+0A0h+arg_0]
		mov	esi, [esi+0Ch]
		mov	[esp+0A0h+var_90], esi
		test	esi, esi
		jz	short loc_13A
		test	ebp, ebp
		jz	short loc_13A
		push	esi
		call	_sk_dup
		push	ebp
		mov	[esp+0A8h+var_90], eax
		xor	esi, esi
		call	_sk_num
		add	esp, 8
		test	eax, eax
		jle	short loc_136
		nop

loc_110:				; CODE XREF: _OCSP_basic_verify+134j
		push	esi
		push	ebp
		call	_sk_value
		push	eax
		push	[esp+0ACh+var_90]
		call	_sk_push
		add	esp, 10h
		test	eax, eax
		jz	short loc_168
		push	ebp
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_110

loc_136:				; CODE XREF: _OCSP_basic_verify+10Dj
		mov	esi, [esp+0A0h+var_90]

loc_13A:				; CODE XREF: _OCSP_basic_verify+DEj
					; _OCSP_basic_verify+F0j ...
		push	esi
		push	[esp+0A4h+var_8C]
		lea	eax, [esp+0A8h+var_88]
		push	[esp+0A8h+arg_8]
		push	eax
		call	_X509_STORE_CTX_init
		add	esp, 10h
		test	eax, eax
		jnz	short loc_183
		push	7Fh ; ''
		push	offset ??_C@_0BJ@KMLFEEOP@?4?2crypto?2ocsp?2ocsp_vfy?4c?$AA@ ; ".\\crypto\\ocsp\\ocsp_vfy.c"
		or	edi, 0FFFFFFFFh
		push	0Bh
		jmp	loc_286
; ---------------------------------------------------------------------------

loc_168:				; CODE XREF: _OCSP_basic_verify+126j
		push	75h ; 'u'
		push	offset ??_C@_0BJ@KMLFEEOP@?4?2crypto?2ocsp?2ocsp_vfy?4c?$AA@ ; ".\\crypto\\ocsp\\ocsp_vfy.c"
		push	41h ; 'A'
		push	69h ; 'i'
		push	27h ; '''
		call	_ERR_put_error
		mov	esi, [esp+0B4h+var_90]
		jmp	loc_28F
; ---------------------------------------------------------------------------

loc_183:				; CODE XREF: _OCSP_basic_verify+155j
		lea	eax, [esp+0A0h+var_88]
		push	8
		push	eax
		call	_X509_STORE_CTX_set_purpose
		lea	eax, [esp+0A8h+var_88]
		push	eax
		call	_X509_verify_cert
		mov	edi, eax
		lea	eax, [esp+0ACh+var_88]
		push	eax
		call	_X509_STORE_CTX_get1_chain
		mov	[esp+0B0h+var_8C], eax
		lea	eax, [esp+0B0h+var_88]
		push	eax
		call	_X509_STORE_CTX_cleanup
		add	esp, 14h
		test	edi, edi
		jg	short loc_1F7
		lea	eax, [esp+0A0h+var_88]
		push	eax
		call	_X509_STORE_CTX_get_error
		push	8Ah ; 'ä'
		push	offset ??_C@_0BJ@KMLFEEOP@?4?2crypto?2ocsp?2ocsp_vfy?4c?$AA@ ; ".\\crypto\\ocsp\\ocsp_vfy.c"
		push	65h ; 'e'
		push	69h ; 'i'
		push	27h ; '''
		mov	esi, eax
		call	_ERR_put_error
		push	esi
		call	_X509_verify_cert_error_string
		push	eax
		push	offset ??_C@_0O@HFNJECFC@Verify?5error?3?$AA@ ;	"Verify	error:"
		push	2
		call	_ERR_add_error_data
		mov	esi, [esp+0C8h+var_90]
		add	esp, 28h
		jmp	short $end$43
; ---------------------------------------------------------------------------

loc_1F7:				; CODE XREF: _OCSP_basic_verify+1B8j
		test	ebx, 100h
		jnz	short loc_25E
		push	ebx
		push	[esp+0A4h+var_8C]
		push	[esp+0A8h+arg_0]
		call	_ocsp_check_issuer
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short $end$43
		test	bl, 20h
		jnz	short $end$43
		mov	ebx, [esp+0A0h+var_8C]
		push	ebx
		call	_sk_num
		dec	eax
		push	eax
		push	ebx
		call	_sk_value
		push	edi
		push	0B4h ; '¥'
		push	eax
		call	_X509_check_trust
		add	esp, 18h
		cmp	eax, 1
		jz	short loc_25E
		push	0A6h ; '¶'
		push	offset ??_C@_0BJ@KMLFEEOP@?4?2crypto?2ocsp?2ocsp_vfy?4c?$AA@ ; ".\\crypto\\ocsp\\ocsp_vfy.c"
		push	70h ; 'p'
		push	69h ; 'i'
		push	27h ; '''
		call	_ERR_put_error
		add	esp, 14h
		jmp	short $end$43
; ---------------------------------------------------------------------------

loc_25E:				; CODE XREF: _OCSP_basic_verify+1FDj
					; _OCSP_basic_verify+242j
		mov	edi, 1

$end$43:				; CODE XREF: _OCSP_basic_verify+1F5j
					; _OCSP_basic_verify+217j ...
		mov	eax, [esp+0A0h+var_8C]
		test	eax, eax
		jz	short loc_292
		push	offset _X509_free
		push	eax
		call	_sk_pop_free
		add	esp, 8
		jmp	short loc_292
; ---------------------------------------------------------------------------

loc_27B:				; CODE XREF: _OCSP_basic_verify+53j
					; _OCSP_basic_verify+6Ej
		push	5Ch ; '\'
		push	offset ??_C@_0BJ@KMLFEEOP@?4?2crypto?2ocsp?2ocsp_vfy?4c?$AA@ ; ".\\crypto\\ocsp\\ocsp_vfy.c"
		xor	edi, edi
		push	76h ; 'v'

loc_286:				; CODE XREF: _OCSP_basic_verify+C5j
					; _OCSP_basic_verify+163j
		push	69h ; 'i'
		push	27h ; '''
		call	_ERR_put_error

loc_28F:				; CODE XREF: _OCSP_basic_verify+17Ej
		add	esp, 14h

loc_292:				; CODE XREF: _OCSP_basic_verify+CDj
					; _OCSP_basic_verify+269j ...
		mov	eax, [esp+0A0h+arg_0]
		cmp	dword ptr [eax+0Ch], 0
		jz	short loc_2AC
		test	ebp, ebp
		jz	short loc_2AC
		push	esi
		call	_sk_free
		add	esp, 4

loc_2AC:				; CODE XREF: _OCSP_basic_verify+29Dj
					; _OCSP_basic_verify+2A1j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 90h
		retn
_OCSP_basic_verify endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OCSP_request_verify
_OCSP_request_verify proc near

var_8C		= dword	ptr -8Ch
var_88		= byte ptr -88h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 8Ch ; 'å'
		call	__chkstk
		push	ebp
		mov	ebp, [esp+90h+arg_0]
		cmp	dword ptr [ebp+4], 0
		jnz	short loc_2F9
		push	17Bh
		push	offset ??_C@_0BJ@KMLFEEOP@?4?2crypto?2ocsp?2ocsp_vfy?4c?$AA@ ; ".\\crypto\\ocsp\\ocsp_vfy.c"
		push	80h ; 'Ä'
		push	74h ; 't'
		push	27h ; '''
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebp
		add	esp, 8Ch
		retn
; ---------------------------------------------------------------------------

loc_2F9:				; CODE XREF: _OCSP_request_verify+16j
		mov	eax, [ebp+0]
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_48A
		cmp	dword ptr [eax], 4
		jnz	loc_48A
		push	ebx
		mov	ebx, [esp+94h+arg_C]
		push	esi
		mov	esi, [esp+98h+arg_8]
		push	ebx
		push	esi
		push	[esp+0A0h+arg_4]
		push	dword ptr [eax+4]
		lea	eax, [esp+0A8h+var_8C]
		push	ebp
		push	eax
		call	_ocsp_req_find_signer
		add	esp, 18h
		test	eax, eax
		jg	short loc_362
		push	188h
		push	offset ??_C@_0BJ@KMLFEEOP@?4?2crypto?2ocsp?2ocsp_vfy?4c?$AA@ ; ".\\crypto\\ocsp\\ocsp_vfy.c"
		push	76h ; 'v'

loc_34A:				; CODE XREF: _OCSP_request_verify+FEj
					; _OCSP_request_verify+142j
		push	74h ; 't'
		push	27h ; '''
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebx
		pop	ebp
		add	esp, 8Ch
		retn
; ---------------------------------------------------------------------------

loc_362:				; CODE XREF: _OCSP_request_verify+80j
		cmp	eax, 2
		jnz	short loc_372
		test	ebx, 200h
		jz	short loc_372
		or	ebx, 10h

loc_372:				; CODE XREF: _OCSP_request_verify+A9j
					; _OCSP_request_verify+B1j
		mov	ecx, [esp+98h+var_8C]
		test	bl, 4
		jnz	short loc_3C7
		push	edi
		push	ecx
		call	_X509_get_pubkey
		mov	ecx, [ebp+4]
		add	esp, 4
		mov	edi, eax
		push	edi
		push	dword ptr [ebp+0]
		push	dword ptr [ecx+4]
		push	dword ptr [ecx]
		call	_OCSP_REQINFO_it
		push	eax
		call	_ASN1_item_verify
		push	edi
		mov	esi, eax
		call	_EVP_PKEY_free
		add	esp, 18h
		pop	edi
		test	esi, esi
		jg	short loc_3BC
		push	193h
		push	offset ??_C@_0BJ@KMLFEEOP@?4?2crypto?2ocsp?2ocsp_vfy?4c?$AA@ ; ".\\crypto\\ocsp\\ocsp_vfy.c"
		push	75h ; 'u'
		jmp	short loc_34A
; ---------------------------------------------------------------------------

loc_3BC:				; CODE XREF: _OCSP_request_verify+F0j
		mov	ecx, [esp+98h+var_8C]
		mov	esi, [esp+98h+arg_8]

loc_3C7:				; CODE XREF: _OCSP_request_verify+BDj
		test	bl, 10h
		jnz	loc_47B
		test	bl, 8
		jz	short loc_3D9
		push	0
		jmp	short loc_3DF
; ---------------------------------------------------------------------------

loc_3D9:				; CODE XREF: _OCSP_request_verify+117j
		mov	eax, [ebp+4]
		push	dword ptr [eax+8]

loc_3DF:				; CODE XREF: _OCSP_request_verify+11Bj
		push	ecx
		lea	eax, [esp+0A0h+var_88]
		push	esi
		push	eax
		call	_X509_STORE_CTX_init
		add	esp, 10h
		test	eax, eax
		jnz	short loc_403
		push	19Fh
		push	offset ??_C@_0BJ@KMLFEEOP@?4?2crypto?2ocsp?2ocsp_vfy?4c?$AA@ ; ".\\crypto\\ocsp\\ocsp_vfy.c"
		push	0Bh
		jmp	loc_34A
; ---------------------------------------------------------------------------

loc_403:				; CODE XREF: _OCSP_request_verify+134j
		lea	eax, [esp+98h+var_88]
		push	8
		push	eax
		call	_X509_STORE_CTX_set_purpose
		lea	eax, [esp+0A0h+var_88]
		push	7
		push	eax
		call	_X509_STORE_CTX_set_trust
		lea	eax, [esp+0A8h+var_88]
		push	eax
		call	_X509_verify_cert
		mov	esi, eax
		lea	eax, [esp+0ACh+var_88]
		push	eax
		call	_X509_STORE_CTX_cleanup
		add	esp, 18h
		test	esi, esi
		jg	short loc_47B
		lea	eax, [esp+98h+var_88]
		push	eax
		call	_X509_STORE_CTX_get_error
		push	1AAh
		push	offset ??_C@_0BJ@KMLFEEOP@?4?2crypto?2ocsp?2ocsp_vfy?4c?$AA@ ; ".\\crypto\\ocsp\\ocsp_vfy.c"
		push	65h ; 'e'
		push	74h ; 't'
		push	27h ; '''
		mov	esi, eax
		call	_ERR_put_error
		push	esi
		call	_X509_verify_cert_error_string
		push	eax
		push	offset ??_C@_0O@HFNJECFC@Verify?5error?3?$AA@ ;	"Verify	error:"
		push	2
		call	_ERR_add_error_data
		add	esp, 28h
		xor	eax, eax
		pop	esi
		pop	ebx
		pop	ebp
		add	esp, 8Ch
		retn
; ---------------------------------------------------------------------------

loc_47B:				; CODE XREF: _OCSP_request_verify+10Ej
					; _OCSP_request_verify+17Aj
		pop	esi
		pop	ebx
		mov	eax, 1
		pop	ebp
		add	esp, 8Ch
		retn
; ---------------------------------------------------------------------------

loc_48A:				; CODE XREF: _OCSP_request_verify+45j
					; _OCSP_request_verify+4Ej
		push	181h
		push	offset ??_C@_0BJ@KMLFEEOP@?4?2crypto?2ocsp?2ocsp_vfy?4c?$AA@ ; ".\\crypto\\ocsp\\ocsp_vfy.c"
		push	81h ; 'Å'
		push	74h ; 't'
		push	27h ; '''
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebp
		add	esp, 8Ch
		retn
_OCSP_request_verify endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ocsp_check_delegated proc near		; CODE XREF: _ocsp_check_issuer+99p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	0
		push	0FFFFFFFFh
		push	esi
		call	_X509_check_purpose
		add	esp, 0Ch
		test	byte ptr [esi+28h], 4
		jz	short loc_4D5
		test	byte ptr [esi+30h], 20h
		jz	short loc_4D5
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4D5:				; CODE XREF: _ocsp_check_delegated+16j
					; _ocsp_check_delegated+1Cj
		push	168h
		push	offset ??_C@_0BJ@KMLFEEOP@?4?2crypto?2ocsp?2ocsp_vfy?4c?$AA@ ; ".\\crypto\\ocsp\\ocsp_vfy.c"
		push	67h ; 'g'
		push	6Ah ; 'j'
		push	27h ; '''
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
_ocsp_check_delegated endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ocsp_check_ids	proc near		; CODE XREF: _ocsp_check_issuer+53p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 4
		call	__chkstk
		push	ebx
		mov	ebx, [esp+8+arg_0]
		push	edi
		push	ebx
		call	_sk_num
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jg	short loc_532
		push	11Ah
		push	offset ??_C@_0BJ@KMLFEEOP@?4?2crypto?2ocsp?2ocsp_vfy?4c?$AA@ ; ".\\crypto\\ocsp\\ocsp_vfy.c"
		push	6Fh ; 'o'
		push	6Bh ; 'k'
		push	27h ; '''
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_532:				; CODE XREF: _ocsp_check_ids+1Dj
		push	ebp
		push	esi
		push	0
		push	ebx
		call	_sk_value
		mov	ecx, [esp+1Ch+arg_4]
		mov	esi, 1
		add	esp, 8
		mov	eax, [eax]
		mov	[esp+14h+var_4], eax
		mov	dword ptr [ecx], 0
		cmp	edi, esi
		jle	short loc_57F

loc_558:				; CODE XREF: _ocsp_check_ids+81j
		push	esi
		push	ebx
		call	_sk_value
		mov	ebp, [eax]
		push	ebp
		push	[esp+20h+var_4]
		call	_OCSP_id_issuer_cmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_58C
		inc	esi
		cmp	esi, edi
		jl	short loc_558
		mov	eax, [esp+14h+var_4]
		mov	ecx, [esp+14h+arg_4]

loc_57F:				; CODE XREF: _ocsp_check_ids+62j
		pop	esi
		pop	ebp
		pop	edi
		mov	[ecx], eax
		mov	eax, 1
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_58C:				; CODE XREF: _ocsp_check_ids+7Cj
		mov	eax, [esp+14h+var_4]
		mov	eax, [eax]
		push	dword ptr [eax]
		mov	eax, [ebp+0]
		push	dword ptr [eax]
		call	_OBJ_cmp
		add	esp, 8
		neg	eax
		sbb	eax, eax
		and	eax, 2
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		pop	ecx
		retn
_ocsp_check_ids	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ocsp_check_issuer proc	near		; CODE XREF: _OCSP_basic_verify+20Bp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		mov	eax, [esp+4+arg_0]
		push	esi
		mov	esi, [esp+8+arg_4]
		push	edi
		mov	eax, [eax]
		push	esi
		mov	[esp+10h+var_4], 0
		mov	edi, [eax+0Ch]
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jg	short loc_5FD
		push	0EDh ; 'Ì'
		push	offset ??_C@_0BJ@KMLFEEOP@?4?2crypto?2ocsp?2ocsp_vfy?4c?$AA@ ; ".\\crypto\\ocsp\\ocsp_vfy.c"
		push	69h ; 'i'
		push	6Ch ; 'l'
		push	27h ; '''
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_5FD:				; CODE XREF: _ocsp_check_issuer+2Cj
		lea	eax, [esp+0Ch+var_4]
		push	eax
		push	edi
		call	_ocsp_check_ids
		add	esp, 8
		test	eax, eax
		jle	short loc_66B
		push	ebx
		push	0
		push	esi
		call	_sk_value
		push	esi
		mov	ebx, eax
		call	_sk_num
		add	esp, 0Ch
		cmp	eax, 1
		jle	short loc_65C
		push	1
		push	esi
		call	_sk_value
		push	edi
		push	[esp+1Ch+var_4]
		push	eax
		call	_ocsp_match_issuerid
		add	esp, 14h
		test	eax, eax
		js	short loc_66A
		jz	short loc_65C
		push	[esp+10h+arg_8]
		push	ebx
		call	_ocsp_check_delegated
		add	esp, 8
		neg	eax
		sbb	eax, eax
		neg	eax
		pop	ebx
		pop	edi
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_65C:				; CODE XREF: _ocsp_check_issuer+76j
					; _ocsp_check_issuer+92j
		push	edi
		push	[esp+14h+var_4]
		push	ebx
		call	_ocsp_match_issuerid
		add	esp, 0Ch

loc_66A:				; CODE XREF: _ocsp_check_issuer+90j
		pop	ebx

loc_66B:				; CODE XREF: _ocsp_check_issuer+5Dj
		pop	edi
		pop	esi
		pop	ecx
		retn
_ocsp_check_issuer endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 670h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ocsp_find_signer proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_10		= byte ptr  14h

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	eax, [esi]
		mov	edi, [eax+4]
		push	edi
		push	[esp+0Ch+arg_8]
		call	_ocsp_find_signer_sk
		add	esp, 8
		test	eax, eax
		jz	short loc_69A
		mov	ecx, [esp+8+arg_0]
		pop	edi
		pop	esi
		mov	[ecx], eax
		mov	eax, 2
		retn
; ---------------------------------------------------------------------------

loc_69A:				; CODE XREF: _ocsp_find_signer+1Aj
		test	[esp+8+arg_10],	2
		jnz	short loc_6BF
		push	edi
		push	dword ptr [esi+0Ch]
		call	_ocsp_find_signer_sk
		add	esp, 8
		test	eax, eax
		jz	short loc_6BF
		mov	ecx, [esp+8+arg_0]
		pop	edi
		pop	esi
		mov	[ecx], eax
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_6BF:				; CODE XREF: _ocsp_find_signer+2Fj
					; _ocsp_find_signer+3Fj
		mov	eax, [esp+8+arg_0]
		pop	edi
		pop	esi
		mov	dword ptr [eax], 0
		xor	eax, eax
		retn
_ocsp_find_signer endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ocsp_find_signer_sk proc near		; CODE XREF: _OCSP_basic_verify+29p
					; _OCSP_basic_verify+60p ...

var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 1Ch
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+1Ch+var_4], eax
		mov	eax, [esp+1Ch+arg_4]
		push	ebx
		mov	ebx, [esp+20h+arg_0]
		cmp	dword ptr [eax], 0
		jnz	short loc_70F
		push	dword ptr [eax+4]
		push	ebx
		call	_X509_find_by_subject
		add	esp, 8
		pop	ebx
		mov	ecx, [esp+1Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_70F:				; CODE XREF: _ocsp_find_signer_sk+21j
		mov	eax, [eax+4]
		cmp	dword ptr [eax], 14h
		jz	short loc_729
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+1Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_729:				; CODE XREF: _ocsp_find_signer_sk+45j
		push	ebp
		push	esi
		mov	esi, [eax+8]
		push	edi
		push	ebx
		mov	[esp+30h+var_1C], esi
		xor	edi, edi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_7AA

loc_742:				; CODE XREF: _ocsp_find_signer_sk+D8j
		push	edi
		push	ebx
		call	_sk_value
		add	esp, 8
		mov	ebp, eax
		lea	eax, [esp+2Ch+var_18]
		push	0
		push	eax
		call	_EVP_sha1
		push	eax
		push	ebp
		call	_X509_pubkey_digest
		mov	edx, esi
		lea	eax, [esp+3Ch+var_18]
		add	esp, 10h
		mov	esi, 10h
		nop

loc_770:				; CODE XREF: _ocsp_find_signer_sk+AFj
		mov	ecx, [edx]
		cmp	ecx, [eax]
		jnz	short loc_796
		add	edx, 4
		add	eax, 4
		sub	esi, 4
		jnb	short loc_770
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		mov	ecx, [esp+1Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_796:				; CODE XREF: _ocsp_find_signer_sk+A4j
		push	ebx
		inc	edi
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jge	short loc_7AA
		mov	esi, [esp+2Ch+var_1C]
		jmp	short loc_742
; ---------------------------------------------------------------------------

loc_7AA:				; CODE XREF: _ocsp_find_signer_sk+70j
					; _ocsp_find_signer_sk+D2j
		mov	ecx, [esp+2Ch+var_4]
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1Ch
		retn
_ocsp_find_signer_sk endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ocsp_match_issuerid proc near		; CODE XREF: _ocsp_check_issuer+86p
					; _ocsp_check_issuer+B2p ...

var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 48h ; 'H'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+48h+var_4], eax
		push	ebx
		mov	ebx, [esp+4Ch+arg_4]
		push	ebp
		mov	ebp, [esp+50h+arg_0]
		push	esi
		push	edi
		mov	edi, [esp+58h+arg_8]
		test	ebx, ebx
		jz	loc_958
		mov	eax, [ebx]
		push	dword ptr [eax]
		call	_OBJ_obj2nid
		push	eax
		call	_OBJ_nid2sn
		push	eax
		call	_EVP_get_digestbyname
		mov	edi, eax
		add	esp, 0Ch
		mov	[esp+58h+var_48], edi
		test	edi, edi
		jnz	short loc_83D
		push	13Fh
		push	offset ??_C@_0BJ@KMLFEEOP@?4?2crypto?2ocsp?2ocsp_vfy?4c?$AA@ ; ".\\crypto\\ocsp\\ocsp_vfy.c"
		push	77h ; 'w'
		push	6Dh ; 'm'
		push	27h ; '''
		call	_ERR_put_error
		add	esp, 14h

loc_827:				; CODE XREF: _ocsp_match_issuerid+8Aj
					; _ocsp_match_issuerid+BBj
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+48h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
; ---------------------------------------------------------------------------

loc_83D:				; CODE XREF: _ocsp_match_issuerid+4Dj
		push	edi
		call	_EVP_MD_size
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	short loc_827
		mov	eax, [ebx+4]
		cmp	[eax], esi
		jnz	loc_943
		mov	eax, [ebx+8]
		cmp	[eax], esi
		jnz	loc_943
		push	ebp
		call	_X509_get_subject_name
		push	0
		lea	ecx, [esp+60h+var_44]
		push	ecx
		push	edi
		push	eax
		call	_X509_NAME_digest
		add	esp, 14h
		test	eax, eax
		jz	short loc_827
		mov	eax, [ebx+4]
		lea	ecx, [esp+58h+var_44]
		mov	edi, esi
		mov	edx, [eax+8]
		sub	edi, 4
		jb	short loc_8A1
		xchg	ax, ax

loc_890:				; CODE XREF: _ocsp_match_issuerid+DFj
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_8A6
		add	ecx, 4
		add	edx, 4
		sub	edi, 4
		jnb	short loc_890

loc_8A1:				; CODE XREF: _ocsp_match_issuerid+CCj
		cmp	edi, 0FFFFFFFCh
		jz	short loc_8DB

loc_8A6:				; CODE XREF: _ocsp_match_issuerid+D4j
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	loc_943
		cmp	edi, 0FFFFFFFDh
		jz	short loc_8DB
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	loc_943
		cmp	edi, 0FFFFFFFEh
		jz	short loc_8DB
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_943
		cmp	edi, 0FFFFFFFFh
		jz	short loc_8DB
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jnz	short loc_943

loc_8DB:				; CODE XREF: _ocsp_match_issuerid+E4j
					; _ocsp_match_issuerid+F3j ...
		push	0
		lea	eax, [esp+5Ch+var_44]
		push	eax
		push	[esp+60h+var_48]
		push	ebp
		call	_X509_pubkey_digest
		mov	eax, [ebx+8]
		lea	ecx, [esp+68h+var_44]
		add	esp, 10h
		mov	edx, [eax+8]
		sub	esi, 4
		jb	short loc_911
		xchg	ax, ax

loc_900:				; CODE XREF: _ocsp_match_issuerid+14Fj
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_916
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_900

loc_911:				; CODE XREF: _ocsp_match_issuerid+13Cj
		cmp	esi, 0FFFFFFFCh
		jz	short loc_98D

loc_916:				; CODE XREF: _ocsp_match_issuerid+144j
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_943
		cmp	esi, 0FFFFFFFDh
		jz	short loc_98D
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_943
		cmp	esi, 0FFFFFFFEh
		jz	short loc_98D
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_943
		cmp	esi, 0FFFFFFFFh
		jz	short loc_98D
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jz	short loc_98D

loc_943:				; CODE XREF: _ocsp_match_issuerid+91j
					; _ocsp_match_issuerid+9Cj ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+48h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
; ---------------------------------------------------------------------------

loc_958:				; CODE XREF: _ocsp_match_issuerid+27j
		push	edi
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_98D

loc_967:				; CODE XREF: _ocsp_match_issuerid+1CBj
		push	esi
		push	edi
		call	_sk_value
		push	0
		push	dword ptr [eax]
		push	ebp
		call	_ocsp_match_issuerid
		add	esp, 14h
		test	eax, eax
		jle	short loc_992
		push	edi
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_967

loc_98D:				; CODE XREF: _ocsp_match_issuerid+154j
					; _ocsp_match_issuerid+15Fj ...
		mov	eax, 1

loc_992:				; CODE XREF: _ocsp_match_issuerid+1BDj
		mov	ecx, [esp+58h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
_ocsp_match_issuerid endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ocsp_req_find_signer proc near		; CODE XREF: _OCSP_request_verify+76p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_14		= byte ptr  18h

		test	[esp+arg_14], 2
		jnz	short loc_9D5
		mov	eax, [esp+arg_4]
		push	[esp+arg_8]
		mov	eax, [eax+4]
		push	dword ptr [eax+8]
		call	_X509_find_by_subject
		add	esp, 8
		test	eax, eax
		jz	short loc_9D5
		mov	ecx, [esp+arg_0]
		mov	[ecx], eax
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_9D5:				; CODE XREF: _ocsp_req_find_signer+5j
					; _ocsp_req_find_signer+1Fj
		push	[esp+arg_8]
		push	[esp+4+arg_C]
		call	_X509_find_by_subject
		add	esp, 8
		test	eax, eax
		jz	short loc_9F5
		mov	ecx, [esp+arg_0]
		mov	[ecx], eax
		mov	eax, 2
		retn
; ---------------------------------------------------------------------------

loc_9F5:				; CODE XREF: _ocsp_req_find_signer+3Fj
		xor	eax, eax
		retn
_ocsp_req_find_signer endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9F8h
; COMDAT (pick any)
		public ??_C@_0BJ@KMLFEEOP@?4?2crypto?2ocsp?2ocsp_vfy?4c?$AA@
; `string'
??_C@_0BJ@KMLFEEOP@?4?2crypto?2ocsp?2ocsp_vfy?4c?$AA@ db '.\crypto\ocsp\ocsp_vfy.c',0
					; DATA XREF: _OCSP_basic_verify+BEo
					; _OCSP_basic_verify+159o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A14h
; COMDAT (pick any)
		public ??_C@_0O@HFNJECFC@Verify?5error?3?$AA@
; `string'
??_C@_0O@HFNJECFC@Verify?5error?3?$AA@ db 'Verify error:',0
					; DATA XREF: _OCSP_basic_verify+1E2o
					; _OCSP_request_verify+1A4o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _sk_num:near	; CODE XREF: _OCSP_basic_verify+103p
					; _OCSP_basic_verify+12Ap ...
		extrn _sk_value:near	; CODE XREF: _OCSP_basic_verify+112p
					; _OCSP_basic_verify+22Bp ...
		extrn _sk_free:near	; CODE XREF: _OCSP_basic_verify+2A4p
		extrn _sk_pop_free:near	; CODE XREF: _OCSP_basic_verify+271p
		extrn _sk_push:near	; CODE XREF: _OCSP_basic_verify+11Cp
		extrn _sk_dup:near	; CODE XREF: _OCSP_basic_verify+F7p
		extrn _OBJ_nid2sn:near	; CODE XREF: _ocsp_match_issuerid+37p
		extrn _OBJ_obj2nid:near	; CODE XREF: _ocsp_match_issuerid+31p
		extrn _OBJ_cmp:near	; CODE XREF: _ocsp_check_ids+A5p
		extrn _EVP_MD_size:near	; CODE XREF: _ocsp_match_issuerid+7Ep
		extrn _EVP_sha1:near	; CODE XREF: _ocsp_find_signer_sk+85p
		extrn _EVP_get_digestbyname:near ; CODE	XREF: _ocsp_match_issuerid+3Dp
		extrn _EVP_PKEY_free:near ; CODE XREF: _OCSP_basic_verify+B0p
					; _OCSP_request_verify+E5p
		extrn _X509_STORE_CTX_init:near	; CODE XREF: _OCSP_basic_verify+14Bp
					; _OCSP_request_verify+12Ap
		extrn _X509_STORE_CTX_cleanup:near ; CODE XREF:	_OCSP_basic_verify+1AEp
					; _OCSP_request_verify+170p
		extrn _X509_STORE_CTX_get_error:near ; CODE XREF: _OCSP_basic_verify+1BFp
					; _OCSP_request_verify+181p
		extrn _X509_STORE_CTX_get1_chain:near ;	CODE XREF: _OCSP_basic_verify+1A0p
		extrn _X509_STORE_CTX_set_purpose:near ; CODE XREF: _OCSP_basic_verify+18Ap
					; _OCSP_request_verify+14Ep
		extrn _X509_STORE_CTX_set_trust:near ; CODE XREF: _OCSP_request_verify+15Ap
		extrn _X509_verify_cert_error_string:near
					; CODE XREF: _OCSP_basic_verify+1DCp
					; _OCSP_request_verify+19Ep
		extrn _X509_pubkey_digest:near ; CODE XREF: _ocsp_find_signer_sk+8Cp
					; _ocsp_match_issuerid+127p
		extrn _X509_NAME_digest:near ; CODE XREF: _ocsp_match_issuerid+B1p
		extrn _X509_free:near	; DATA XREF: _OCSP_basic_verify+26Bo
		extrn _ASN1_item_verify:near ; CODE XREF: _OCSP_basic_verify+A5p
					; _OCSP_request_verify+DDp
		extrn _X509_get_subject_name:near ; CODE XREF: _ocsp_match_issuerid+A3p
		extrn _X509_get_pubkey:near ; CODE XREF: _OCSP_basic_verify+7Fp
					; _OCSP_request_verify+C1p
		extrn _X509_verify_cert:near ; CODE XREF: _OCSP_basic_verify+194p
					; _OCSP_request_verify+164p
		extrn _X509_find_by_subject:near ; CODE	XREF: _ocsp_find_signer_sk+27p
					; _ocsp_req_find_signer+15p ...
		extrn _X509_check_trust:near ; CODE XREF: _OCSP_basic_verify+237p
		extrn _X509_check_purpose:near ; CODE XREF: _ocsp_check_delegated+Ap
		extrn _OCSP_id_issuer_cmp:near ; CODE XREF: _ocsp_check_ids+72p
		extrn _OCSP_RESPDATA_it:near ; CODE XREF: _OCSP_basic_verify+9Fp
		extrn _OCSP_REQINFO_it:near ; CODE XREF: _OCSP_request_verify+D7p
		extrn _ERR_put_error:near ; CODE XREF: _OCSP_basic_verify+175p
					; _OCSP_basic_verify+1D6p ...
		extrn _ERR_add_error_data:near ; CODE XREF: _OCSP_basic_verify+1E9p
					; _OCSP_request_verify+1ABp
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _ocsp_find_signer_sk+36p
					; _ocsp_find_signer_sk+50p ...
		extrn __chkstk:near	; CODE XREF: _OCSP_basic_verify+5p
					; _OCSP_request_verify+5p ...
		extrn ___security_cookie:near ;	DATA XREF: _ocsp_find_signer_sk+Ar
					; _ocsp_match_issuerid+Ar


		end
