;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	1D1A6E82A8634F938A0D9E0BE6559A41
; Input	CRC32 :	FEA916DB

; File Name   :	C:\compspace\Diff\openssl\obj\x_algor.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_ALGOR_it
_X509_ALGOR_it	proc near		; DATA XREF: .rdata:0000005Co
		mov	eax, offset ?local_it@?1??X509_ALGOR_it@@9@9 ; `X509_ALGOR_it'::`2'::local_it
		retn
_X509_ALGOR_it	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8
_X509_ALGOR_seq_tt dd 3	dup(0)		; DATA XREF: .rdata:00000038o
		dd offset ??_C@_09JPNFBOJG@algorithm?$AA@ ; "algorithm"
		dd offset _ASN1_OBJECT_it
		dd 1, 0
		dd 4
		dd offset ??_C@_09DAGAJHIH@parameter?$AA@ ; "parameter"
		dd offset _ASN1_ANY_it
; `X509_ALGOR_it'::`2'::local_it
?local_it@?1??X509_ALGOR_it@@9@9 dd 1, 10h ; DATA XREF:	_X509_ALGOR_ito
					; _X509_ALGOR_dup+4o ...
		dd offset _X509_ALGOR_seq_tt
		dd 2, 0
		dd 8
		dd offset ??_C@_0L@BFHONDPK@X509_ALGOR?$AA@ ; "X509_ALGOR"
_X509_ALGORS_item_tt dd	4, 2 dup(0)	; DATA XREF: .rdata:00000068o
		dd offset ??_C@_0L@BNOBMJFK@algorithms?$AA@ ; "algorithms"
		dd offset _X509_ALGOR_it
; `X509_ALGORS_it'::`2'::local_it
?local_it@?1??X509_ALGORS_it@@9@9 dd 0	; DATA XREF: _X509_ALGORS_ito
					; _d2i_X509_ALGORSo ...
		dd 0FFFFFFFFh
		dd offset _X509_ALGORS_item_tt
		dd 3 dup(0)
		dd offset ??_C@_0M@MMOLGLEG@X509_ALGORS?$AA@ ; "X509_ALGORS"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7Ch
; COMDAT (pick any)
		public ??_C@_09JPNFBOJG@algorithm?$AA@
; `string'
??_C@_09JPNFBOJG@algorithm?$AA@	db 'algorithm',0 ; DATA XREF: .rdata:00000014o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 88h
; COMDAT (pick any)
		public ??_C@_09DAGAJHIH@parameter?$AA@
; `string'
??_C@_09DAGAJHIH@parameter?$AA@	db 'parameter',0 ; DATA XREF: .rdata:00000028o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 94h
; COMDAT (pick any)
		public ??_C@_0L@BFHONDPK@X509_ALGOR?$AA@
; `string'
??_C@_0L@BFHONDPK@X509_ALGOR?$AA@ db 'X509_ALGOR',0 ; DATA XREF: .rdata:00000048o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A0h
; COMDAT (pick any)
		public ??_C@_0L@BNOBMJFK@algorithms?$AA@
; `string'
??_C@_0L@BNOBMJFK@algorithms?$AA@ db 'algorithms',0 ; DATA XREF: .rdata:00000058o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ACh
; COMDAT (pick any)
		public ??_C@_0M@MMOLGLEG@X509_ALGORS?$AA@
; `string'
??_C@_0M@MMOLGLEG@X509_ALGORS?$AA@ db 'X509_ALGORS',0 ; DATA XREF: .rdata:00000078o
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_ALGORS_it
_X509_ALGORS_it	proc near
		mov	eax, offset ?local_it@?1??X509_ALGORS_it@@9@9 ;	`X509_ALGORS_it'::`2'::local_it
		retn
_X509_ALGORS_it	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_ALGOR_cmp
_X509_ALGOR_cmp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		push	dword ptr [esi]
		push	dword ptr [edi]
		call	_OBJ_cmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_F5
		mov	eax, [edi+4]
		test	eax, eax
		jnz	short loc_E9
		cmp	[esi+4], eax
		jnz	short loc_E9
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_E9:					; CODE XREF: _X509_ALGOR_cmp+1Fj
					; _X509_ALGOR_cmp+24j
		push	dword ptr [esi+4]
		push	eax
		call	_ASN1_TYPE_cmp
		add	esp, 8

loc_F5:					; CODE XREF: _X509_ALGOR_cmp+18j
		pop	edi
		pop	esi
		retn
_X509_ALGOR_cmp	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_ALGOR_dup
_X509_ALGOR_dup	proc near

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		push	offset ?local_it@?1??X509_ALGOR_it@@9@9	; `X509_ALGOR_it'::`2'::local_it
		call	_ASN1_item_dup
		add	esp, 8
		retn
_X509_ALGOR_dup	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_ALGOR_free
_X509_ALGOR_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??X509_ALGOR_it@@9@9	; `X509_ALGOR_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_X509_ALGOR_free endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 120h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_ALGOR_get0
_X509_ALGOR_get0 proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_0]
		mov	edx, [esp+arg_C]
		test	ecx, ecx
		jz	short loc_130
		mov	eax, [edx]
		mov	[ecx], eax

loc_130:				; CODE XREF: _X509_ALGOR_get0+Aj
		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jz	short locret_15A
		mov	eax, [edx+4]
		test	eax, eax
		jnz	short loc_146
		mov	dword ptr [ecx], 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_146:				; CODE XREF: _X509_ALGOR_get0+1Dj
		mov	eax, [eax]
		mov	[ecx], eax
		mov	ecx, [esp+arg_8]
		test	ecx, ecx
		jz	short locret_15A
		mov	eax, [edx+4]
		mov	eax, [eax+4]
		mov	[ecx], eax

locret_15A:				; CODE XREF: _X509_ALGOR_get0+16j
					; _X509_ALGOR_get0+30j
		retn
_X509_ALGOR_get0 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 15Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_ALGOR_new
_X509_ALGOR_new	proc near
		push	offset ?local_it@?1??X509_ALGOR_it@@9@9	; `X509_ALGOR_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_X509_ALGOR_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 16Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_ALGOR_set0
_X509_ALGOR_set0 proc near		; CODE XREF: _X509_ALGOR_set_md+2Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_179
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_179:				; CODE XREF: _X509_ALGOR_set0+7j
		push	edi
		mov	edi, [esp+8+arg_8]
		cmp	edi, 0FFFFFFFFh
		jz	short loc_198
		cmp	dword ptr [esi+4], 0
		jnz	short loc_198
		call	_ASN1_TYPE_new
		mov	[esi+4], eax
		test	eax, eax
		jnz	short loc_198
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_198:				; CODE XREF: _X509_ALGOR_set0+15j
					; _X509_ALGOR_set0+1Bj	...
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1A7
		push	eax
		call	_ASN1_OBJECT_free
		add	esp, 4

loc_1A7:				; CODE XREF: _X509_ALGOR_set0+30j
		mov	eax, [esp+8+arg_4]
		mov	[esi], eax
		test	edi, edi
		jz	short loc_1E3
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_1D3
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_1E3
		push	eax
		call	_ASN1_TYPE_free
		add	esp, 4
		mov	dword ptr [esi+4], 0
		lea	eax, [edi+2]
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1D3:				; CODE XREF: _X509_ALGOR_set0+48j
		push	[esp+8+arg_C]
		push	edi
		push	dword ptr [esi+4]
		call	_ASN1_TYPE_set
		add	esp, 0Ch

loc_1E3:				; CODE XREF: _X509_ALGOR_set0+43j
					; _X509_ALGOR_set0+4Fj
		pop	edi
		mov	eax, 1
		pop	esi
		retn
_X509_ALGOR_set0 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_ALGOR_set_md
_X509_ALGOR_set_md proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		mov	edx, 0FFFFFFFFh
		mov	eax, 5
		push	0
		test	byte ptr [ecx+0Ch], 8
		cmovnz	eax, edx
		push	eax
		push	ecx
		call	_EVP_MD_type
		push	eax
		call	_OBJ_nid2obj
		add	esp, 8
		push	eax
		push	[esp+0Ch+arg_0]
		call	_X509_ALGOR_set0
		add	esp, 10h
		retn
_X509_ALGOR_set_md endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 224h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_X509_ALGOR
_d2i_X509_ALGOR	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??X509_ALGOR_it@@9@9	; `X509_ALGOR_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_X509_ALGOR	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 240h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_X509_ALGORS
_d2i_X509_ALGORS proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??X509_ALGORS_it@@9@9 ; `X509_ALGORS_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_X509_ALGORS endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 25Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_X509_ALGOR
_i2d_X509_ALGOR	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??X509_ALGOR_it@@9@9	; `X509_ALGOR_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_X509_ALGOR	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 274h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_X509_ALGORS
_i2d_X509_ALGORS proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??X509_ALGORS_it@@9@9 ; `X509_ALGORS_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_X509_ALGORS endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ASN1_ANY_it:near	; DATA XREF: .rdata:0000002Co
		extrn _ASN1_OBJECT_it:near ; DATA XREF:	.rdata:00000018o
		extrn _ASN1_TYPE_new:near ; CODE XREF: _X509_ALGOR_set0+1Dp
		extrn _ASN1_TYPE_free:near ; CODE XREF:	_X509_ALGOR_set0+52p
		extrn _ASN1_TYPE_set:near ; CODE XREF: _X509_ALGOR_set0+6Fp
		extrn _ASN1_TYPE_cmp:near ; CODE XREF: _X509_ALGOR_cmp+2Dp
		extrn _ASN1_OBJECT_free:near ; CODE XREF: _X509_ALGOR_set0+33p
		extrn _ASN1_item_dup:near ; CODE XREF: _X509_ALGOR_dup+9p
		extrn _ASN1_item_new:near ; CODE XREF: _X509_ALGOR_new+5p
		extrn _ASN1_item_free:near ; CODE XREF:	_X509_ALGOR_free+9p
		extrn _ASN1_item_d2i:near ; CODE XREF: _d2i_X509_ALGOR+11p
					; _d2i_X509_ALGORS+11p
		extrn _ASN1_item_i2d:near ; CODE XREF: _i2d_X509_ALGOR+Dp
					; _i2d_X509_ALGORS+Dp
		extrn _OBJ_nid2obj:near	; CODE XREF: _X509_ALGOR_set_md+1Fp
		extrn _OBJ_cmp:near	; CODE XREF: _X509_ALGOR_cmp+Ep
		extrn _EVP_MD_type:near	; CODE XREF: _X509_ALGOR_set_md+19p


		end
