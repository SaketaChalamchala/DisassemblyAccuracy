;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	8E281044CE31384B9C9D0E210C695715
; Input	CRC32 :	78EB99BF

; File Name   :	C:\compspace\Diff\openssl\obj\p12_mutl.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS12_gen_mac
_PKCS12_gen_mac	proc near		; CODE XREF: _PKCS12_set_mac+84p
					; _PKCS12_verify_mac+5Bp

var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= byte ptr -114h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 128h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+128h+var_4], eax
		mov	eax, [esp+128h+arg_4]
		mov	[esp+128h+var_120], eax
		mov	eax, [esp+128h+arg_C]
		push	esi
		mov	esi, [esp+12Ch+arg_0]
		mov	[esp+12Ch+var_118], eax
		mov	eax, [esp+12Ch+arg_10]
		mov	[esp+12Ch+var_11C], eax
		mov	eax, [esi+8]
		push	dword ptr [eax+10h]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 15h
		jz	short loc_81
		push	4Fh ; 'O'
		push	offset ??_C@_0BL@PCHEDBDM@?4?2crypto?2pkcs12?2p12_mutl?4c?$AA@ ; ".\\crypto\\pkcs12\\p12_mutl.c"
		push	79h ; 'y'
		push	6Bh ; 'k'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		mov	ecx, [esp+128h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 128h
		retn
; ---------------------------------------------------------------------------

loc_81:					; CODE XREF: _PKCS12_gen_mac+52j
		mov	ecx, [esi+4]
		push	ebp
		mov	eax, [ecx+4]
		mov	edx, [eax+8]
		mov	eax, [eax]
		mov	[esp+130h+var_128], eax
		mov	eax, [ecx+8]
		mov	[esp+130h+var_124], edx
		test	eax, eax
		jnz	short loc_A1
		lea	ebp, [eax+1]
		jmp	short loc_AC
; ---------------------------------------------------------------------------

loc_A1:					; CODE XREF: _PKCS12_gen_mac+9Aj
		push	eax
		call	_ASN1_INTEGER_get
		add	esp, 4
		mov	ebp, eax

loc_AC:					; CODE XREF: _PKCS12_gen_mac+9Fj
		mov	ecx, [esi+4]
		push	ebx
		mov	ecx, [ecx]
		mov	ecx, [ecx]
		push	dword ptr [ecx]
		call	_OBJ_obj2nid
		push	eax
		call	_OBJ_nid2sn
		push	eax
		call	_EVP_get_digestbyname
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_FF
		push	5Ah ; 'Z'
		push	offset ??_C@_0BL@PCHEDBDM@?4?2crypto?2pkcs12?2p12_mutl?4c?$AA@ ; ".\\crypto\\pkcs12\\p12_mutl.c"
		push	76h ; 'v'
		push	6Bh ; 'k'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebx
		pop	ebp
		pop	esi
		mov	ecx, [esp+128h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 128h
		retn
; ---------------------------------------------------------------------------

loc_FF:					; CODE XREF: _PKCS12_gen_mac+CEj
		push	edi
		push	ebx
		call	_EVP_MD_size
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		js	loc_1D3
		push	ebx
		lea	eax, [esp+13Ch+var_44]
		push	eax
		push	edi
		push	ebp
		push	3
		push	[esp+14Ch+var_128]
		push	[esp+150h+var_124]
		push	[esp+154h+arg_8]
		push	[esp+158h+var_120]
		call	_PKCS12_key_gen_asc
		add	esp, 24h
		test	eax, eax
		jnz	short loc_156
		push	62h ; 'b'
		push	offset ??_C@_0BL@PCHEDBDM@?4?2crypto?2pkcs12?2p12_mutl?4c?$AA@ ; ".\\crypto\\pkcs12\\p12_mutl.c"
		push	6Bh ; 'k'
		push	6Bh ; 'k'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h
		jmp	short loc_1D3
; ---------------------------------------------------------------------------

loc_156:				; CODE XREF: _PKCS12_gen_mac+13Dj
		lea	eax, [esp+138h+var_114]
		push	eax
		call	_HMAC_CTX_init
		push	0
		push	ebx
		push	edi
		lea	eax, [esp+148h+var_44]
		push	eax
		lea	eax, [esp+14Ch+var_114]
		push	eax
		call	_HMAC_Init_ex
		add	esp, 18h
		test	eax, eax
		jz	short loc_1C6
		mov	eax, [esi+8]
		mov	eax, [eax+14h]
		push	dword ptr [eax]
		push	dword ptr [eax+8]
		lea	eax, [esp+140h+var_114]
		push	eax
		call	_HMAC_Update
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1C6
		push	[esp+138h+var_11C]
		lea	eax, [esp+13Ch+var_114]
		push	[esp+13Ch+var_118]
		push	eax
		call	_HMAC_Final
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1C6
		lea	eax, [esp+138h+var_114]
		push	eax
		call	_HMAC_CTX_cleanup
		add	esp, 4
		mov	eax, 1
		jmp	short loc_1D5
; ---------------------------------------------------------------------------

loc_1C6:				; CODE XREF: _PKCS12_gen_mac+17Bj
					; _PKCS12_gen_mac+197j	...
		lea	eax, [esp+138h+var_114]
		push	eax
		call	_HMAC_CTX_cleanup
		add	esp, 4

loc_1D3:				; CODE XREF: _PKCS12_gen_mac+10Dj
					; _PKCS12_gen_mac+154j
		xor	eax, eax

loc_1D5:				; CODE XREF: _PKCS12_gen_mac+1C4j
		mov	ecx, [esp+138h+var_4]
		pop	edi
		pop	ebx
		pop	ebp
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 128h
		retn
_PKCS12_gen_mac	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl PKCS12_set_mac(int, int, int, void *Src, int, int, int)
		public _PKCS12_set_mac
_PKCS12_set_mac	proc near

var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
Src		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, 48h ; 'H'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+48h+var_4], eax
		mov	eax, [esp+48h+arg_18]
		push	ebx
		mov	ebx, [esp+4Ch+Src]
		push	esi
		mov	esi, [esp+50h+arg_0]
		push	edi
		mov	edi, [esp+54h+arg_4]
		test	eax, eax
		jnz	short loc_221
		call	_EVP_sha1

loc_221:				; CODE XREF: _PKCS12_set_mac+2Aj
		push	eax		; int
		push	[esp+58h+arg_10] ; int
		push	ebx		; Src
		push	[esp+60h+arg_14] ; int
		push	esi		; int
		call	_PKCS12_setup_mac
		add	esp, 14h
		test	eax, eax
		jnz	short loc_264
		push	90h ; 'ê'
		push	offset ??_C@_0BL@PCHEDBDM@?4?2crypto?2pkcs12?2p12_mutl?4c?$AA@ ; ".\\crypto\\pkcs12\\p12_mutl.c"
		push	6Eh ; 'n'
		push	7Bh ; '{'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+48h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
; ---------------------------------------------------------------------------

loc_264:				; CODE XREF: _PKCS12_set_mac+46j
		lea	eax, [esp+54h+var_48]
		push	eax
		lea	eax, [esp+58h+var_44]
		push	eax
		push	[esp+5Ch+arg_8]
		push	edi
		push	esi
		call	_PKCS12_gen_mac
		add	esp, 14h
		test	eax, eax
		jnz	short loc_2AC
		push	94h ; 'î'
		push	offset ??_C@_0BL@PCHEDBDM@?4?2crypto?2pkcs12?2p12_mutl?4c?$AA@ ; ".\\crypto\\pkcs12\\p12_mutl.c"
		push	6Dh ; 'm'
		push	7Bh ; '{'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+48h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
; ---------------------------------------------------------------------------

loc_2AC:				; CODE XREF: _PKCS12_set_mac+8Ej
		push	[esp+54h+var_48]
		lea	eax, [esp+58h+var_44]
		push	eax
		mov	eax, [esi+4]
		mov	eax, [eax]
		push	dword ptr [eax+4]
		call	_ASN1_STRING_set
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_2F5
		push	98h ; 'ò'
		push	offset ??_C@_0BL@PCHEDBDM@?4?2crypto?2pkcs12?2p12_mutl?4c?$AA@ ; ".\\crypto\\pkcs12\\p12_mutl.c"
		push	6Fh ; 'o'
		push	7Bh ; '{'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+48h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
; ---------------------------------------------------------------------------

loc_2F5:				; CODE XREF: _PKCS12_set_mac+D7j
		mov	ecx, [esp+54h+var_4]
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
_PKCS12_set_mac	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 30Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl PKCS12_setup_mac(int, int, void *Src, int, int)
		public _PKCS12_setup_mac
_PKCS12_setup_mac proc near		; CODE XREF: _PKCS12_set_mac+3Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		call	_PKCS12_MAC_DATA_new
		mov	esi, [esp+4+arg_0]
		mov	[esi+4], eax
		test	eax, eax
		jnz	short loc_31F
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_31F:				; CODE XREF: _PKCS12_setup_mac+Fj
		push	edi
		mov	edi, [esp+8+arg_4]
		cmp	edi, 1
		jle	short loc_364
		push	2
		call	_ASN1_STRING_type_new
		mov	ecx, [esi+4]
		add	esp, 4
		mov	[ecx+8], eax
		test	eax, eax
		jnz	short loc_347
		push	0A6h ; '¶'
		jmp	loc_409
; ---------------------------------------------------------------------------

loc_347:				; CODE XREF: _PKCS12_setup_mac+2Fj
		mov	eax, [esi+4]
		push	edi
		push	dword ptr [eax+8]
		call	_ASN1_INTEGER_set
		add	esp, 8
		test	eax, eax
		jnz	short loc_364
		push	0AAh ; '™'
		jmp	loc_409
; ---------------------------------------------------------------------------

loc_364:				; CODE XREF: _PKCS12_setup_mac+1Bj
					; _PKCS12_setup_mac+4Cj
		mov	edi, [esp+8+arg_C]
		mov	eax, 8
		test	edi, edi
		push	0B0h ; '∞'
		cmovz	edi, eax
		push	offset ??_C@_0BL@PCHEDBDM@?4?2crypto?2pkcs12?2p12_mutl?4c?$AA@ ; ".\\crypto\\pkcs12\\p12_mutl.c"
		push	edi
		call	_CRYPTO_malloc
		mov	ecx, [esi+4]
		add	esp, 0Ch
		mov	ecx, [ecx+4]
		mov	[ecx+8], eax
		test	eax, eax
		jnz	short loc_399
		push	0B1h ; '±'
		jmp	short loc_409
; ---------------------------------------------------------------------------

loc_399:				; CODE XREF: _PKCS12_setup_mac+84j
		mov	eax, [esi+4]
		push	edi		; Size
		mov	eax, [eax+4]
		mov	[eax], edi
		mov	eax, [esp+0Ch+Src]
		test	eax, eax
		jnz	short loc_3C4
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		push	dword ptr [eax+8]
		call	_RAND_pseudo_bytes
		add	esp, 8
		test	eax, eax
		jns	short loc_3D6
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3C4:				; CODE XREF: _PKCS12_setup_mac+9Cj
		push	eax		; Src
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		push	dword ptr [eax+8] ; Dst
		call	_memcpy
		add	esp, 0Ch

loc_3D6:				; CODE XREF: _PKCS12_setup_mac+B1j
		push	[esp+8+arg_10]
		call	_EVP_MD_type
		push	eax
		call	_OBJ_nid2obj
		mov	ecx, [esi+4]
		add	esp, 8
		mov	ecx, [ecx]
		mov	ecx, [ecx]
		mov	[ecx], eax
		call	_ASN1_TYPE_new
		mov	ecx, [esi+4]
		mov	ecx, [ecx]
		mov	ecx, [ecx]
		mov	[ecx+4], eax
		test	eax, eax
		jnz	short loc_421
		push	0BCh ; 'º'

loc_409:				; CODE XREF: _PKCS12_setup_mac+36j
					; _PKCS12_setup_mac+53j ...
		push	offset ??_C@_0BL@PCHEDBDM@?4?2crypto?2pkcs12?2p12_mutl?4c?$AA@ ; ".\\crypto\\pkcs12\\p12_mutl.c"
		push	41h ; 'A'
		push	7Ah ; 'z'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_421:				; CODE XREF: _PKCS12_setup_mac+F6j
		mov	eax, [esi+4]
		pop	edi
		pop	esi
		mov	eax, [eax]
		mov	eax, [eax]
		mov	eax, [eax+4]
		mov	dword ptr [eax], 5
		mov	eax, 1
		retn
_PKCS12_setup_mac endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 43Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS12_verify_mac
_PKCS12_verify_mac proc	near

var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 48h ; 'H'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+48h+var_4], eax
		mov	eax, [esp+48h+arg_4]
		push	esi
		mov	esi, [esp+4Ch+arg_0]
		cmp	dword ptr [esi+4], 0
		jnz	short loc_487
		push	77h ; 'w'
		push	offset ??_C@_0BL@PCHEDBDM@?4?2crypto?2pkcs12?2p12_mutl?4c?$AA@ ; ".\\crypto\\pkcs12\\p12_mutl.c"
		push	6Ch ; 'l'

loc_469:				; CODE XREF: _PKCS12_verify_mac+70j
		push	7Eh ; '~'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h

loc_475:				; CODE XREF: _PKCS12_verify_mac+80j
					; _PKCS12_verify_mac+95j
		xor	eax, eax
		pop	esi
		mov	ecx, [esp+48h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
; ---------------------------------------------------------------------------

loc_487:				; CODE XREF: _PKCS12_verify_mac+22j
		lea	ecx, [esp+4Ch+var_48]
		push	ecx
		lea	ecx, [esp+50h+var_44]
		push	ecx
		push	[esp+54h+arg_8]
		push	eax
		push	esi
		call	_PKCS12_gen_mac
		add	esp, 14h
		test	eax, eax
		jnz	short loc_4AE
		push	7Bh ; '{'
		push	offset ??_C@_0BL@PCHEDBDM@?4?2crypto?2pkcs12?2p12_mutl?4c?$AA@ ; ".\\crypto\\pkcs12\\p12_mutl.c"
		push	6Dh ; 'm'
		jmp	short loc_469
; ---------------------------------------------------------------------------

loc_4AE:				; CODE XREF: _PKCS12_verify_mac+65j
		mov	eax, [esi+4]
		mov	ecx, [esp+4Ch+var_48]
		mov	eax, [eax]
		mov	eax, [eax+4]
		cmp	ecx, [eax]
		jnz	short loc_475
		push	ecx
		push	dword ptr [eax+8]
		lea	eax, [esp+54h+var_44]
		push	eax
		call	_CRYPTO_memcmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_475
		mov	ecx, [esp+4Ch+var_4]
		mov	eax, 1
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
_PKCS12_verify_mac endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4E8h
; COMDAT (pick any)
		public ??_C@_0BL@PCHEDBDM@?4?2crypto?2pkcs12?2p12_mutl?4c?$AA@
; `string'
??_C@_0BL@PCHEDBDM@?4?2crypto?2pkcs12?2p12_mutl?4c?$AA@	db '.\crypto\pkcs12\p12_mutl.c',0
					; DATA XREF: _PKCS12_gen_mac+56o
					; _PKCS12_gen_mac+D2o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _PKCS12_setup_mac+71p
		extrn _CRYPTO_memcmp:near ; CODE XREF: _PKCS12_verify_mac+8Bp
		extrn _ERR_put_error:near ; CODE XREF: _PKCS12_gen_mac+61p
					; _PKCS12_gen_mac+DDp ...
		extrn _ASN1_TYPE_new:near ; CODE XREF: _PKCS12_setup_mac+E5p
		extrn _ASN1_STRING_type_new:near ; CODE	XREF: _PKCS12_setup_mac+1Fp
		extrn _ASN1_STRING_set:near ; CODE XREF: _PKCS12_set_mac+CDp
		extrn _ASN1_INTEGER_set:near ; CODE XREF: _PKCS12_setup_mac+42p
		extrn _ASN1_INTEGER_get:near ; CODE XREF: _PKCS12_gen_mac+A2p
		extrn _OBJ_nid2obj:near	; CODE XREF: _PKCS12_setup_mac+D4p
		extrn _OBJ_nid2sn:near	; CODE XREF: _PKCS12_gen_mac+BCp
		extrn _OBJ_obj2nid:near	; CODE XREF: _PKCS12_gen_mac+47p
					; _PKCS12_gen_mac+B6p
		extrn _EVP_MD_type:near	; CODE XREF: _PKCS12_setup_mac+CEp
		extrn _EVP_MD_size:near	; CODE XREF: _PKCS12_gen_mac+101p
		extrn _EVP_sha1:near	; CODE XREF: _PKCS12_set_mac+2Cp
		extrn _EVP_get_digestbyname:near ; CODE	XREF: _PKCS12_gen_mac+C2p
		extrn _HMAC_CTX_init:near ; CODE XREF: _PKCS12_gen_mac+15Bp
		extrn _HMAC_CTX_cleanup:near ; CODE XREF: _PKCS12_gen_mac+1B7p
					; _PKCS12_gen_mac+1CBp
		extrn _HMAC_Init_ex:near ; CODE	XREF: _PKCS12_gen_mac+171p
		extrn _HMAC_Update:near	; CODE XREF: _PKCS12_gen_mac+18Dp
		extrn _HMAC_Final:near	; CODE XREF: _PKCS12_gen_mac+1A6p
		extrn _RAND_pseudo_bytes:near ;	CODE XREF: _PKCS12_setup_mac+A7p
		extrn _PKCS12_key_gen_asc:near ; CODE XREF: _PKCS12_gen_mac+133p
		extrn _PKCS12_MAC_DATA_new:near	; CODE XREF: _PKCS12_setup_mac+1p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _PKCS12_gen_mac+75p
					; _PKCS12_gen_mac+F3p ...
		extrn __chkstk:near	; CODE XREF: _PKCS12_gen_mac+5p
					; _PKCS12_set_mac+5p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _PKCS12_setup_mac+C2p
		extrn ___security_cookie:near ;	DATA XREF: _PKCS12_gen_mac+Ar
					; _PKCS12_set_mac+Ar ...


		end
