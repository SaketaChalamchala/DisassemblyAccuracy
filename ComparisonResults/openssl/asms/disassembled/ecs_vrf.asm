;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	3E7C2562BA0B172EFEE5CEE7ED03AF71
; Input	CRC32 :	E6A04756

; File Name   :	C:\compspace\Diff\openssl\obj\ecs_vrf.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ECDSA_do_verify
_ECDSA_do_verify proc near

arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		call	_ecdsa_check
		add	esp, 4
		test	eax, eax
		jnz	short loc_11
		retn
; ---------------------------------------------------------------------------

loc_11:					; CODE XREF: _ECDSA_do_verify+Ej
		mov	eax, [eax+0Ch]
		mov	eax, [eax+0Ch]
		jmp	eax
_ECDSA_do_verify endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ECDSA_verify
_ECDSA_verify	proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 8
		call	__chkstk
		push	ebp
		push	esi
		mov	esi, [esp+10h+arg_C]
		or	ebp, 0FFFFFFFFh
		mov	[esp+10h+var_4], esi
		mov	[esp+10h+arg_C], 0
		call	_ECDSA_SIG_new
		mov	[esp+10h+var_8], eax
		test	eax, eax
		jnz	short loc_50
		pop	esi
		or	eax, ebp
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_50:					; CODE XREF: _ECDSA_verify+2Aj
		push	ebx
		mov	ebx, [esp+14h+arg_10]
		lea	eax, [esp+14h+var_4]
		push	ebx
		push	eax
		lea	eax, [esp+1Ch+var_8]
		push	eax
		call	_d2i_ECDSA_SIG
		add	esp, 0Ch
		test	eax, eax
		jz	loc_121
		push	edi
		lea	eax, [esp+18h+arg_C]
		push	eax
		push	[esp+1Ch+var_8]
		call	_i2d_ECDSA_SIG
		mov	edi, eax
		add	esp, 8
		cmp	edi, ebx
		jnz	short $err$18
		mov	ecx, [esp+18h+arg_C]
		mov	edx, edi
		sub	edx, 4
		jb	short loc_A4

loc_93:					; CODE XREF: _ECDSA_verify+86j
		mov	eax, [esi]
		cmp	eax, [ecx]
		jnz	short loc_A9
		add	esi, 4
		add	ecx, 4
		sub	edx, 4
		jnb	short loc_93

loc_A4:					; CODE XREF: _ECDSA_verify+75j
		cmp	edx, 0FFFFFFFCh
		jz	short loc_D6

loc_A9:					; CODE XREF: _ECDSA_verify+7Bj
		mov	al, [esi]
		cmp	al, [ecx]
		jnz	short $err$18
		cmp	edx, 0FFFFFFFDh
		jz	short loc_D6
		mov	al, [esi+1]
		cmp	al, [ecx+1]
		jnz	short $err$18
		cmp	edx, 0FFFFFFFEh
		jz	short loc_D6
		mov	al, [esi+2]
		cmp	al, [ecx+2]
		jnz	short $err$18
		cmp	edx, 0FFFFFFFFh
		jz	short loc_D6
		mov	al, [esi+3]
		cmp	al, [ecx+3]
		jnz	short $err$18

loc_D6:					; CODE XREF: _ECDSA_verify+8Bj
					; _ECDSA_verify+96j ...
		mov	esi, [esp+18h+arg_14]
		mov	ebx, [esp+18h+var_8]
		push	esi
		call	_ecdsa_check
		add	esp, 4
		test	eax, eax
		jnz	short loc_EF
		xor	ebp, ebp
		jmp	short $err$18
; ---------------------------------------------------------------------------

loc_EF:					; CODE XREF: _ECDSA_verify+CDj
		mov	eax, [eax+0Ch]
		push	esi
		push	ebx
		push	[esp+20h+arg_8]
		mov	eax, [eax+0Ch]
		push	[esp+24h+arg_4]
		call	eax
		add	esp, 10h
		mov	ebp, eax

$err$18:				; CODE XREF: _ECDSA_verify+6Aj
					; _ECDSA_verify+91j ...
		test	edi, edi
		jle	short loc_120
		push	edi
		push	[esp+1Ch+arg_C]
		call	_OPENSSL_cleanse
		push	[esp+20h+arg_C]
		call	_CRYPTO_free
		add	esp, 0Ch

loc_120:				; CODE XREF: _ECDSA_verify+ECj
		pop	edi

loc_121:				; CODE XREF: _ECDSA_verify+4Ej
		push	[esp+14h+var_8]
		call	_ECDSA_SIG_free
		add	esp, 4
		mov	eax, ebp
		pop	ebx
		pop	esi
		pop	ebp
		add	esp, 8
		retn
_ECDSA_verify	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_free:near	; CODE XREF: _ECDSA_verify+FCp
		extrn _OPENSSL_cleanse:near ; CODE XREF: _ECDSA_verify+F3p
		extrn _ECDSA_SIG_new:near ; CODE XREF: _ECDSA_verify+1Fp
		extrn _ECDSA_SIG_free:near ; CODE XREF:	_ECDSA_verify+109p
		extrn _i2d_ECDSA_SIG:near ; CODE XREF: _ECDSA_verify+5Ep
		extrn _d2i_ECDSA_SIG:near ; CODE XREF: _ECDSA_verify+44p
		extrn _ecdsa_check:near	; CODE XREF: _ECDSA_do_verify+4p
					; _ECDSA_verify+C3p
		extrn __chkstk:near	; CODE XREF: _ECDSA_verify+5p


		end
