;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	D230D73A158A2DE14B58C7C94EB3C8B5
; Input	CRC32 :	0394F08A

; File Name   :	C:\compspace\Diff\openssl\obj\ech_kdf.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl ECDH_KDF_X9_62(void *Dst,	size_t Size, int, int, int, int, int)
		public _ECDH_KDF_X9_62
_ECDH_KDF_X9_62	proc near

var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
Src		= byte ptr -44h
var_4		= dword	ptr -4
Dst		= dword	ptr  4
Size		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, 70h ; 'p'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+70h+var_4], eax
		cmp	[esp+70h+arg_14], 40000000h
		mov	eax, [esp+70h+arg_8]
		mov	[esp+70h+var_68], eax
		mov	eax, [esp+70h+arg_10]
		push	ebp
		mov	ebp, [esp+74h+Dst]
		mov	[esp+74h+var_60], eax
		mov	eax, [esp+74h+arg_18]
		push	esi
		mov	[esp+78h+var_6C], eax
		mov	[esp+78h+var_64], 0
		ja	loc_1D7
		mov	esi, [esp+78h+Size]
		cmp	esi, 40000000h
		ja	loc_1D7
		cmp	[esp+78h+arg_C], 40000000h
		ja	loc_1D7
		push	ebx
		push	edi
		push	eax
		call	_EVP_MD_size
		mov	edi, eax
		lea	eax, [esp+84h+var_5C]
		push	eax
		call	_EVP_MD_CTX_init
		push	0
		push	[esp+8Ch+var_6C]
		lea	eax, [esp+90h+var_5C]
		mov	ebx, 1
		push	eax
		call	_EVP_DigestInit_ex
		push	[esp+94h+arg_C]
		lea	eax, [esp+98h+var_5C]
		mov	[esp+98h+var_70], 1000000h
		push	[esp+98h+var_68]
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 20h
		test	eax, eax
		jz	$err$26

loc_C7:					; CODE XREF: _ECDH_KDF_X9_62+173j
		push	4
		lea	eax, [esp+84h+var_70]
		push	eax
		lea	eax, [esp+88h+var_5C]
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jz	$err$26
		push	[esp+80h+arg_14]
		lea	eax, [esp+84h+var_5C]
		push	[esp+84h+var_60]
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jz	$err$26
		push	0
		cmp	esi, edi
		jb	short loc_17B
		lea	eax, [esp+84h+var_5C]
		push	ebp
		push	eax
		call	_EVP_DigestFinal
		add	esp, 0Ch
		test	eax, eax
		jz	$err$26
		sub	esi, edi
		jz	loc_1AB
		push	0
		push	[esp+84h+var_6C]
		lea	eax, [esp+88h+var_5C]
		add	ebp, edi
		push	eax
		inc	ebx
		call	_EVP_DigestInit_ex
		push	[esp+8Ch+arg_C]
		mov	eax, ebx
		mov	byte ptr [esp+90h+var_70+3], bl
		push	[esp+90h+var_68]
		shr	eax, 8
		mov	byte ptr [esp+94h+var_70+2], al
		mov	eax, ebx
		shr	eax, 10h
		mov	byte ptr [esp+94h+var_70+1], al
		mov	eax, ebx
		shr	eax, 18h
		mov	byte ptr [esp+94h+var_70], al
		lea	eax, [esp+94h+var_5C]
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 18h
		test	eax, eax
		jnz	loc_C7
		jmp	short $err$26
; ---------------------------------------------------------------------------

loc_17B:				; CODE XREF: _ECDH_KDF_X9_62+107j
		lea	eax, [esp+84h+Src]
		push	eax
		lea	eax, [esp+88h+var_5C]
		push	eax
		call	_EVP_DigestFinal
		add	esp, 0Ch
		test	eax, eax
		jz	short $err$26
		push	esi		; Size
		lea	eax, [esp+84h+Src]
		push	eax		; Src
		push	ebp		; Dst
		call	_memcpy
		lea	eax, [esp+8Ch+Src]
		push	edi
		push	eax
		call	_OPENSSL_cleanse
		add	esp, 14h

loc_1AB:				; CODE XREF: _ECDH_KDF_X9_62+121j
		mov	[esp+80h+var_64], 1

$err$26:				; CODE XREF: _ECDH_KDF_X9_62+C1j
					; _ECDH_KDF_X9_62+DDj ...
		lea	eax, [esp+80h+var_5C]
		push	eax
		call	_EVP_MD_CTX_cleanup
		mov	eax, [esp+84h+var_64]
		add	esp, 4
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		mov	ecx, [esp+70h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 70h
		retn
; ---------------------------------------------------------------------------

loc_1D7:				; CODE XREF: _ECDH_KDF_X9_62+4Cj
					; _ECDH_KDF_X9_62+5Fj ...
		mov	ecx, [esp+78h+var_4]
		xor	eax, eax
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 70h
		retn
_ECDH_KDF_X9_62	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _OPENSSL_cleanse:near ; CODE XREF: _ECDH_KDF_X9_62+1A3p
		extrn _EVP_MD_size:near	; CODE XREF: _ECDH_KDF_X9_62+79p
		extrn _EVP_MD_CTX_init:near ; CODE XREF: _ECDH_KDF_X9_62+85p
		extrn _EVP_MD_CTX_cleanup:near ; CODE XREF: _ECDH_KDF_X9_62+1B8p
		extrn _EVP_DigestInit_ex:near ;	CODE XREF: _ECDH_KDF_X9_62+9Ap
					; _ECDH_KDF_X9_62+135p
		extrn _EVP_DigestUpdate:near ; CODE XREF: _ECDH_KDF_X9_62+B7p
					; _ECDH_KDF_X9_62+D3p ...
		extrn _EVP_DigestFinal:near ; CODE XREF: _ECDH_KDF_X9_62+10Fp
					; _ECDH_KDF_X9_62+185p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _ECDH_KDF_X9_62+1CEp
					; _ECDH_KDF_X9_62+1E1p
		extrn __chkstk:near	; CODE XREF: _ECDH_KDF_X9_62+5p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _ECDH_KDF_X9_62+198p
		extrn ___security_cookie:near ;	DATA XREF: _ECDH_KDF_X9_62+Ar


		end
