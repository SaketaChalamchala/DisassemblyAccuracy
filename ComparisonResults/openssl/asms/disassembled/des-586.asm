;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	529F93F7E96E298881FAB93C8CF1C4C3
; Input	CRC32 :	8C25ADB0

; File Name   :	C:\compspace\Diff\openssl\obj\des-586.obj
; Format      :	COFF (X386MAGIC)

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
; Segment alignment '64byte' can not be represented in assembly
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__x86_DES_encrypt proc near		; CODE XREF: L$_DES_encrypt1_begin+80p
					; L$_DES_encrypt2_begin+32p

var_4		= dword	ptr -4

		push	ecx
		mov	eax, [ecx]
		xor	ebx, ebx
		mov	edx, [ecx+4]
		xor	eax, esi
		xor	ecx, ecx
		xor	edx, esi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	edi, [ebp+ebx+0]

loc_24:					; DATA XREF: .text:000013CCo
					; .text:000015CCo
		mov	bl, dl

loc_26:					; DATA XREF: .text:000013C8o
					; .text:000015C8o
		xor	edi, [ebp+ecx+200h]

loc_2D:					; DATA XREF: .text:000013C4o
					; .text:000015C4o
		mov	cl, dh
		shr	eax, 10h
		xor	edi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	edi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	edi, [ebp+ebx+600h]
		xor	edi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	edi, [ebp+eax+400h]
		xor	edi, [ebp+edx+500h]
		mov	eax, [ecx+8]
		xor	ebx, ebx
		mov	edx, [ecx+0Ch]
		xor	eax, edi
		xor	ecx, ecx
		xor	edx, edi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	esi, [ebp+ebx+0]
		mov	bl, dl
		xor	esi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	esi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	esi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	esi, [ebp+ebx+600h]
		xor	esi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	esi, [ebp+eax+400h]
		xor	esi, [ebp+edx+500h]
		mov	eax, [ecx+10h]
		xor	ebx, ebx
		mov	edx, [ecx+14h]
		xor	eax, esi
		xor	ecx, ecx
		xor	edx, esi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	edi, [ebp+ebx+0]
		mov	bl, dl
		xor	edi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	edi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	edi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	edi, [ebp+ebx+600h]
		xor	edi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	edi, [ebp+eax+400h]
		xor	edi, [ebp+edx+500h]
		mov	eax, [ecx+18h]
		xor	ebx, ebx
		mov	edx, [ecx+1Ch]
		xor	eax, edi
		xor	ecx, ecx
		xor	edx, edi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	esi, [ebp+ebx+0]
		mov	bl, dl
		xor	esi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	esi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	esi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	esi, [ebp+ebx+600h]
		xor	esi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	esi, [ebp+eax+400h]
		xor	esi, [ebp+edx+500h]
		mov	eax, [ecx+20h]
		xor	ebx, ebx
		mov	edx, [ecx+24h]
		xor	eax, esi
		xor	ecx, ecx
		xor	edx, esi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	edi, [ebp+ebx+0]
		mov	bl, dl
		xor	edi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	edi, [ebp+ebx+100h]
		mov	bl, ah

loc_1FF:				; DATA XREF: .text:00001CB0o
		shr	edx, 10h
		xor	edi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	edi, [ebp+ebx+600h]
		xor	edi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	edi, [ebp+eax+400h]
		xor	edi, [ebp+edx+500h]
		mov	eax, [ecx+28h]
		xor	ebx, ebx
		mov	edx, [ecx+2Ch]
		xor	eax, edi
		xor	ecx, ecx
		xor	edx, edi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	esi, [ebp+ebx+0]
		mov	bl, dl
		xor	esi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	esi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	esi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	esi, [ebp+ebx+600h]
		xor	esi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	esi, [ebp+eax+400h]
		xor	esi, [ebp+edx+500h]
		mov	eax, [ecx+30h]
		xor	ebx, ebx
		mov	edx, [ecx+34h]
		xor	eax, esi
		xor	ecx, ecx
		xor	edx, esi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	edi, [ebp+ebx+0]
		mov	bl, dl
		xor	edi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	edi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	edi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	edi, [ebp+ebx+600h]
		xor	edi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	edi, [ebp+eax+400h]
		xor	edi, [ebp+edx+500h]
		mov	eax, [ecx+38h]
		xor	ebx, ebx
		mov	edx, [ecx+3Ch]
		xor	eax, edi
		xor	ecx, ecx
		xor	edx, edi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	esi, [ebp+ebx+0]
		mov	bl, dl
		xor	esi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	esi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	esi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	esi, [ebp+ebx+600h]
		xor	esi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	esi, [ebp+eax+400h]
		xor	esi, [ebp+edx+500h]
		mov	eax, [ecx+40h]
		xor	ebx, ebx
		mov	edx, [ecx+44h]
		xor	eax, esi
		xor	ecx, ecx
		xor	edx, esi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	edi, [ebp+ebx+0]
		mov	bl, dl
		xor	edi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	edi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	edi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	edi, [ebp+ebx+600h]
		xor	edi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	edi, [ebp+eax+400h]
		xor	edi, [ebp+edx+500h]
		mov	eax, [ecx+48h]
		xor	ebx, ebx
		mov	edx, [ecx+4Ch]
		xor	eax, edi
		xor	ecx, ecx
		xor	edx, edi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	esi, [ebp+ebx+0]
		mov	bl, dl
		xor	esi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	esi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	esi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	esi, [ebp+ebx+600h]
		xor	esi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	esi, [ebp+eax+400h]
		xor	esi, [ebp+edx+500h]
		mov	eax, [ecx+50h]
		xor	ebx, ebx
		mov	edx, [ecx+54h]
		xor	eax, esi
		xor	ecx, ecx
		xor	edx, esi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	edi, [ebp+ebx+0]
		mov	bl, dl
		xor	edi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	edi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	edi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	edi, [ebp+ebx+600h]
		xor	edi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	edi, [ebp+eax+400h]
		xor	edi, [ebp+edx+500h]
		mov	eax, [ecx+58h]
		xor	ebx, ebx
		mov	edx, [ecx+5Ch]
		xor	eax, edi
		xor	ecx, ecx
		xor	edx, edi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	esi, [ebp+ebx+0]
		mov	bl, dl
		xor	esi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	esi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	esi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	esi, [ebp+ebx+600h]
		xor	esi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	esi, [ebp+eax+400h]
		xor	esi, [ebp+edx+500h]
		mov	eax, [ecx+60h]
		xor	ebx, ebx
		mov	edx, [ecx+64h]
		xor	eax, esi
		xor	ecx, ecx
		xor	edx, esi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	edi, [ebp+ebx+0]
		mov	bl, dl
		xor	edi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	edi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	edi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	edi, [ebp+ebx+600h]
		xor	edi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	edi, [ebp+eax+400h]
		xor	edi, [ebp+edx+500h]
		mov	eax, [ecx+68h]
		xor	ebx, ebx
		mov	edx, [ecx+6Ch]
		xor	eax, edi
		xor	ecx, ecx
		xor	edx, edi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	esi, [ebp+ebx+0]
		mov	bl, dl
		xor	esi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	esi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	esi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	esi, [ebp+ebx+600h]
		xor	esi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	esi, [ebp+eax+400h]
		xor	esi, [ebp+edx+500h]
		mov	eax, [ecx+70h]
		xor	ebx, ebx
		mov	edx, [ecx+74h]
		xor	eax, esi
		xor	ecx, ecx
		xor	edx, esi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	edi, [ebp+ebx+0]
		mov	bl, dl
		xor	edi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	edi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	edi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	edi, [ebp+ebx+600h]
		xor	edi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	edi, [ebp+eax+400h]
		xor	edi, [ebp+edx+500h]
		mov	eax, [ecx+78h]
		xor	ebx, ebx
		mov	edx, [ecx+7Ch]
		xor	eax, edi
		xor	ecx, ecx
		xor	edx, edi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	esi, [ebp+ebx+0]
		mov	bl, dl
		xor	esi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	esi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	esi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	esi, [ebp+ebx+600h]
		xor	esi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	esi, [ebp+eax+400h]
		xor	esi, [ebp+edx+500h]
		add	esp, 4
		retn
__x86_DES_encrypt endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


__x86_DES_decrypt proc near		; CODE XREF: L$_DES_encrypt1_begin:L$001decryptp
					; L$_DES_encrypt2_begin:L$004decryptp

var_4		= dword	ptr -4

		push	ecx
		mov	eax, [ecx+78h]
		xor	ebx, ebx
		mov	edx, [ecx+7Ch]
		xor	eax, esi
		xor	ecx, ecx
		xor	edx, esi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	edi, [ebp+ebx+0]
		mov	bl, dl
		xor	edi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	edi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	edi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	edi, [ebp+ebx+600h]
		xor	edi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	edi, [ebp+eax+400h]
		xor	edi, [ebp+edx+500h]
		mov	eax, [ecx+70h]
		xor	ebx, ebx
		mov	edx, [ecx+74h]
		xor	eax, edi
		xor	ecx, ecx
		xor	edx, edi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	esi, [ebp+ebx+0]
		mov	bl, dl
		xor	esi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	esi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	esi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	esi, [ebp+ebx+600h]
		xor	esi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	esi, [ebp+eax+400h]
		xor	esi, [ebp+edx+500h]
		mov	eax, [ecx+68h]
		xor	ebx, ebx
		mov	edx, [ecx+6Ch]
		xor	eax, esi
		xor	ecx, ecx
		xor	edx, esi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	edi, [ebp+ebx+0]
		mov	bl, dl
		xor	edi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	edi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	edi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	edi, [ebp+ebx+600h]
		xor	edi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	edi, [ebp+eax+400h]
		xor	edi, [ebp+edx+500h]
		mov	eax, [ecx+60h]
		xor	ebx, ebx
		mov	edx, [ecx+64h]
		xor	eax, edi
		xor	ecx, ecx
		xor	edx, edi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	esi, [ebp+ebx+0]
		mov	bl, dl
		xor	esi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	esi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	esi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	esi, [ebp+ebx+600h]
		xor	esi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	esi, [ebp+eax+400h]
		xor	esi, [ebp+edx+500h]
		mov	eax, [ecx+58h]
		xor	ebx, ebx
		mov	edx, [ecx+5Ch]
		xor	eax, esi
		xor	ecx, ecx
		xor	edx, esi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	edi, [ebp+ebx+0]
		mov	bl, dl
		xor	edi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	edi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	edi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	edi, [ebp+ebx+600h]
		xor	edi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	edi, [ebp+eax+400h]
		xor	edi, [ebp+edx+500h]
		mov	eax, [ecx+50h]
		xor	ebx, ebx
		mov	edx, [ecx+54h]
		xor	eax, edi
		xor	ecx, ecx
		xor	edx, edi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	esi, [ebp+ebx+0]
		mov	bl, dl
		xor	esi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	esi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	esi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	esi, [ebp+ebx+600h]
		xor	esi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	esi, [ebp+eax+400h]
		xor	esi, [ebp+edx+500h]
		mov	eax, [ecx+48h]
		xor	ebx, ebx
		mov	edx, [ecx+4Ch]
		xor	eax, esi
		xor	ecx, ecx
		xor	edx, esi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	edi, [ebp+ebx+0]
		mov	bl, dl
		xor	edi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	edi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	edi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	edi, [ebp+ebx+600h]
		xor	edi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	edi, [ebp+eax+400h]
		xor	edi, [ebp+edx+500h]
		mov	eax, [ecx+40h]
		xor	ebx, ebx
		mov	edx, [ecx+44h]
		xor	eax, edi
		xor	ecx, ecx
		xor	edx, edi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	esi, [ebp+ebx+0]
		mov	bl, dl
		xor	esi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	esi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	esi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	esi, [ebp+ebx+600h]
		xor	esi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	esi, [ebp+eax+400h]
		xor	esi, [ebp+edx+500h]
		mov	eax, [ecx+38h]
		xor	ebx, ebx
		mov	edx, [ecx+3Ch]
		xor	eax, esi
		xor	ecx, ecx
		xor	edx, esi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	edi, [ebp+ebx+0]
		mov	bl, dl
		xor	edi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	edi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	edi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	edi, [ebp+ebx+600h]
		xor	edi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	edi, [ebp+eax+400h]
		xor	edi, [ebp+edx+500h]
		mov	eax, [ecx+30h]
		xor	ebx, ebx
		mov	edx, [ecx+34h]
		xor	eax, edi
		xor	ecx, ecx
		xor	edx, edi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	esi, [ebp+ebx+0]
		mov	bl, dl
		xor	esi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	esi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	esi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	esi, [ebp+ebx+600h]
		xor	esi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	esi, [ebp+eax+400h]
		xor	esi, [ebp+edx+500h]
		mov	eax, [ecx+28h]
		xor	ebx, ebx
		mov	edx, [ecx+2Ch]
		xor	eax, esi
		xor	ecx, ecx
		xor	edx, esi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	edi, [ebp+ebx+0]
		mov	bl, dl
		xor	edi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	edi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	edi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	edi, [ebp+ebx+600h]
		xor	edi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	edi, [ebp+eax+400h]
		xor	edi, [ebp+edx+500h]
		mov	eax, [ecx+20h]
		xor	ebx, ebx
		mov	edx, [ecx+24h]
		xor	eax, edi
		xor	ecx, ecx
		xor	edx, edi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	esi, [ebp+ebx+0]
		mov	bl, dl
		xor	esi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	esi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	esi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	esi, [ebp+ebx+600h]
		xor	esi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	esi, [ebp+eax+400h]
		xor	esi, [ebp+edx+500h]
		mov	eax, [ecx+18h]
		xor	ebx, ebx
		mov	edx, [ecx+1Ch]
		xor	eax, esi
		xor	ecx, ecx
		xor	edx, esi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	edi, [ebp+ebx+0]
		mov	bl, dl
		xor	edi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	edi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	edi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	edi, [ebp+ebx+600h]
		xor	edi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	edi, [ebp+eax+400h]
		xor	edi, [ebp+edx+500h]
		mov	eax, [ecx+10h]
		xor	ebx, ebx
		mov	edx, [ecx+14h]
		xor	eax, edi
		xor	ecx, ecx
		xor	edx, edi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	esi, [ebp+ebx+0]
		mov	bl, dl
		xor	esi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	esi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	esi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	esi, [ebp+ebx+600h]
		xor	esi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	esi, [ebp+eax+400h]
		xor	esi, [ebp+edx+500h]
		mov	eax, [ecx+8]
		xor	ebx, ebx
		mov	edx, [ecx+0Ch]
		xor	eax, esi
		xor	ecx, ecx
		xor	edx, esi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	edi, [ebp+ebx+0]
		mov	bl, dl
		xor	edi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	edi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	edi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	edi, [ebp+ebx+600h]
		xor	edi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	edi, [ebp+eax+400h]
		xor	edi, [ebp+edx+500h]
		mov	eax, [ecx]
		xor	ebx, ebx
		mov	edx, [ecx+4]
		xor	eax, edi
		xor	ecx, ecx
		xor	edx, edi
		and	eax, 0FCFCFCFCh
		and	edx, 0CFCFCFCFh
		mov	bl, al
		mov	cl, ah
		ror	edx, 4
		xor	esi, [ebp+ebx+0]
		mov	bl, dl
		xor	esi, [ebp+ecx+200h]
		mov	cl, dh
		shr	eax, 10h
		xor	esi, [ebp+ebx+100h]
		mov	bl, ah
		shr	edx, 10h
		xor	esi, [ebp+ecx+300h]
		mov	cl, dh
		and	eax, 0FFh
		and	edx, 0FFh
		xor	esi, [ebp+ebx+600h]
		xor	esi, [ebp+ecx+700h]
		mov	ecx, [esp+4+var_4]
		xor	esi, [ebp+eax+400h]
		xor	esi, [ebp+edx+500h]
		add	esp, 4
		retn
__x86_DES_decrypt endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_DES_encrypt1_begin
L$_DES_encrypt1_begin proc near		; CODE XREF: L$_DES_ncbc_encrypt_begin+55p
					; L$_DES_ncbc_encrypt_begin+C4p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	esi, [esp+8+arg_0]
		xor	ecx, ecx
		push	ebx
		push	ebp
		mov	eax, [esi]
		mov	ebx, [esp+10h+arg_8]
		mov	edi, [esi+4]
		rol	eax, 4
		mov	esi, eax
		xor	eax, edi
		and	eax, 0F0F0F0F0h
		xor	esi, eax
		xor	edi, eax
		rol	edi, 14h
		mov	eax, edi
		xor	edi, esi
		and	edi, 0FFF0000Fh
		xor	eax, edi
		xor	esi, edi
		rol	eax, 0Eh
		mov	edi, eax
		xor	eax, esi
		and	eax, 33333333h
		xor	edi, eax
		xor	esi, eax
		rol	esi, 16h
		mov	eax, esi
		xor	esi, edi
		and	esi, 3FC03FCh
		xor	eax, esi
		xor	edi, esi
		rol	eax, 9
		mov	esi, eax
		xor	eax, edi
		and	eax, 0AAAAAAAAh
		xor	esi, eax
		xor	edi, eax
		rol	edi, 1
		call	$+5

L$000pic_point:
		pop	ebp
		lea	ebp, [ebp+754h]
		mov	ecx, [esp+10h+arg_4]
		cmp	ebx, 0
		jz	L$001decrypt
		call	__x86_DES_encrypt
		jmp	L$002done
; ---------------------------------------------------------------------------

L$001decrypt:				; CODE XREF: L$_DES_encrypt1_begin+7Aj
		call	__x86_DES_decrypt

L$002done:				; CODE XREF: L$_DES_encrypt1_begin+85j
		mov	edx, [esp+10h+arg_0]
		ror	esi, 1
		mov	eax, edi
		xor	edi, esi
		and	edi, 0AAAAAAAAh
		xor	eax, edi
		xor	esi, edi
		rol	eax, 17h
		mov	edi, eax
		xor	eax, esi
		and	eax, 3FC03FCh
		xor	edi, eax
		xor	esi, eax
		rol	edi, 0Ah
		mov	eax, edi
		xor	edi, esi
		and	edi, 33333333h
		xor	eax, edi
		xor	esi, edi
		rol	esi, 12h
		mov	edi, esi
		xor	esi, eax
		and	esi, 0FFF0000Fh
		xor	edi, esi
		xor	eax, esi
		rol	edi, 0Ch
		mov	esi, edi
		xor	edi, eax
		and	edi, 0F0F0F0F0h
		xor	esi, edi
		xor	eax, edi
		ror	eax, 4
		mov	[edx], eax
		mov	[edx+4], esi
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		retn
L$_DES_encrypt1_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_DES_encrypt2_begin
L$_DES_encrypt2_begin proc near		; CODE XREF: L$_DES_encrypt3_begin+8Bp
					; L$_DES_encrypt3_begin+9Fp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	eax, [esp+8+arg_0]
		xor	ecx, ecx
		push	ebx
		push	ebp
		mov	esi, [eax]
		mov	ebx, [esp+10h+arg_8]
		rol	esi, 3
		mov	edi, [eax+4]
		rol	edi, 3
		call	$+5

L$003pic_point:
		pop	ebp
		lea	ebp, [ebp+6A2h]
		mov	ecx, [esp+10h+arg_4]
		cmp	ebx, 0
		jz	L$004decrypt
		call	__x86_DES_encrypt
		jmp	L$005done
; ---------------------------------------------------------------------------

L$004decrypt:				; CODE XREF: L$_DES_encrypt2_begin+2Cj
		call	__x86_DES_decrypt

L$005done:				; CODE XREF: L$_DES_encrypt2_begin+37j
		ror	edi, 3
		mov	eax, [esp+10h+arg_0]
		ror	esi, 3
		mov	[eax], edi
		mov	[eax+4], esi
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		retn
L$_DES_encrypt2_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_DES_encrypt3_begin
L$_DES_encrypt3_begin proc near		; CODE XREF: L$_DES_ede3_cbc_encrypt_begin+5Ep
					; L$_DES_ede3_cbc_encrypt_begin+CDp

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	esi
		push	edi
		mov	edi, [ebx]
		mov	esi, [ebx+4]
		sub	esp, 0Ch
		rol	edi, 4
		mov	edx, edi
		xor	edi, esi
		and	edi, 0F0F0F0F0h
		xor	edx, edi
		xor	esi, edi
		rol	esi, 14h
		mov	edi, esi
		xor	esi, edx
		and	esi, 0FFF0000Fh
		xor	edi, esi
		xor	edx, esi
		rol	edi, 0Eh
		mov	esi, edi
		xor	edi, edx
		and	edi, 33333333h
		xor	esi, edi
		xor	edx, edi
		rol	edx, 16h
		mov	edi, edx
		xor	edx, esi
		and	edx, 3FC03FCh
		xor	edi, edx
		xor	esi, edx
		rol	edi, 9
		mov	edx, edi
		xor	edi, esi

loc_FFB:				; DATA XREF: .text:000019A8o
		and	edi, 0AAAAAAAAh
		xor	edx, edi
		xor	esi, edi
		ror	edx, 3
		ror	esi, 2
		mov	[ebx+4], esi
		mov	eax, [esp+1Ch+arg_4]
		mov	[ebx], edx
		mov	edi, [esp+1Ch+arg_8]
		mov	esi, [esp+1Ch+arg_C]
		mov	[esp+1Ch+var_14], 1
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+var_1C], ebx
		call	L$_DES_encrypt2_begin
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], edi
		mov	[esp+1Ch+var_1C], ebx
		call	L$_DES_encrypt2_begin
		mov	[esp+1Ch+var_14], 1
		mov	[esp+1Ch+var_18], esi
		mov	[esp+1Ch+var_1C], ebx
		call	L$_DES_encrypt2_begin
		add	esp, 0Ch
		mov	edi, [ebx]
		mov	esi, [ebx+4]
		rol	esi, 2
		rol	edi, 3
		mov	eax, edi
		xor	edi, esi
		and	edi, 0AAAAAAAAh
		xor	eax, edi
		xor	esi, edi
		rol	eax, 17h
		mov	edi, eax
		xor	eax, esi
		and	eax, 3FC03FCh
		xor	edi, eax
		xor	esi, eax
		rol	edi, 0Ah
		mov	eax, edi
		xor	edi, esi
		and	edi, 33333333h
		xor	eax, edi
		xor	esi, edi
		rol	esi, 12h
		mov	edi, esi
		xor	esi, eax
		and	esi, 0FFF0000Fh
		xor	edi, esi
		xor	eax, esi
		rol	edi, 0Ch
		mov	esi, edi
		xor	edi, eax
		and	edi, 0F0F0F0F0h
		xor	esi, edi
		xor	eax, edi
		ror	eax, 4
		mov	[ebx], eax
		mov	[ebx+4], esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
L$_DES_encrypt3_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_DES_decrypt3_begin
L$_DES_decrypt3_begin proc near		; CODE XREF: L$_DES_ede3_cbc_encrypt_begin+102p
					; L$_DES_ede3_cbc_encrypt_begin+156p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	esi
		push	edi
		mov	edi, [ebx]
		mov	esi, [ebx+4]
		sub	esp, 0Ch
		rol	edi, 4
		mov	edx, edi
		xor	edi, esi
		and	edi, 0F0F0F0F0h
		xor	edx, edi
		xor	esi, edi
		rol	esi, 14h
		mov	edi, esi
		xor	esi, edx
		and	esi, 0FFF0000Fh
		xor	edi, esi
		xor	edx, esi
		rol	edi, 0Eh
		mov	esi, edi
		xor	edi, edx
		and	edi, 33333333h
		xor	esi, edi
		xor	edx, edi
		rol	edx, 16h
		mov	edi, edx
		xor	edx, esi
		and	edx, 3FC03FCh
		xor	edi, edx
		xor	esi, edx
		rol	edi, 9
		mov	edx, edi
		xor	edi, esi
		and	edi, 0AAAAAAAAh
		xor	edx, edi
		xor	esi, edi
		ror	edx, 3
		ror	esi, 2
		mov	[ebx+4], esi
		mov	esi, [esp+1Ch+arg_4]
		mov	[ebx], edx
		mov	edi, [esp+1Ch+arg_8]
		mov	eax, [esp+1Ch+arg_C]
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+var_1C], ebx
		call	L$_DES_encrypt2_begin
		mov	[esp+1Ch+var_14], 1
		mov	[esp+1Ch+var_18], edi
		mov	[esp+1Ch+var_1C], ebx
		call	L$_DES_encrypt2_begin
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], esi
		mov	[esp+1Ch+var_1C], ebx
		call	L$_DES_encrypt2_begin
		add	esp, 0Ch
		mov	edi, [ebx]
		mov	esi, [ebx+4]
		rol	esi, 2
		rol	edi, 3
		mov	eax, edi
		xor	edi, esi
		and	edi, 0AAAAAAAAh
		xor	eax, edi
		xor	esi, edi
		rol	eax, 17h
		mov	edi, eax
		xor	eax, esi
		and	eax, 3FC03FCh
		xor	edi, eax
		xor	esi, eax
		rol	edi, 0Ah
		mov	eax, edi
		xor	edi, esi
		and	edi, 33333333h
		xor	eax, edi
		xor	esi, edi
		rol	esi, 12h
		mov	edi, esi
		xor	esi, eax
		and	esi, 0FFF0000Fh
		xor	edi, esi
		xor	eax, esi
		rol	edi, 0Ch
		mov	esi, edi
		xor	edi, eax
		and	edi, 0F0F0F0F0h
		xor	esi, edi
		xor	eax, edi
		ror	eax, 4
		mov	[ebx], eax
		mov	[ebx+4], esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
L$_DES_decrypt3_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_DES_ncbc_encrypt_begin
L$_DES_ncbc_encrypt_begin proc near

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	ebx
		push	esi
		push	edi
		mov	ebp, [esp+10h+arg_8]
		mov	ebx, [esp+10h+arg_10]
		mov	esi, [ebx]
		mov	edi, [ebx+4]
		push	edi
		push	esi
		push	edi
		push	esi
		mov	ebx, esp
		mov	esi, [esp+20h+arg_0]
		mov	edi, [esp+20h+arg_4]
		mov	ecx, [esp+20h+arg_14]
		push	ecx
		mov	eax, [esp+24h+arg_C]
		push	eax
		push	ebx
		cmp	ecx, 0
		jz	L$006decrypt
		and	ebp, 0FFFFFFF8h
		mov	eax, [esp+2Ch+var_20]
		mov	ebx, [esp+2Ch+var_1C]
		jz	L$007encrypt_finish

L$008encrypt_loop:			; CODE XREF: L$_DES_ncbc_encrypt_begin+70j
		mov	ecx, [esi]
		mov	edx, [esi+4]
		xor	eax, ecx
		xor	ebx, edx
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_1C], ebx
		call	L$_DES_encrypt1_begin
		mov	eax, [esp+2Ch+var_20]
		mov	ebx, [esp+2Ch+var_1C]
		mov	[edi], eax
		mov	[edi+4], ebx
		add	esi, 8
		add	edi, 8
		sub	ebp, 8
		jnz	L$008encrypt_loop

L$007encrypt_finish:			; CODE XREF: L$_DES_ncbc_encrypt_begin+3Ej
		mov	ebp, [esp+2Ch+arg_8]
		and	ebp, 7
		jz	L$009finish
		call	$+5

L$010PIC_point:
		pop	edx
		lea	ecx, (L$011cbc_enc_jmp_table - 1288h)[edx]
		mov	ebp, [ecx+ebp*4]
		add	ebp, edx
		xor	ecx, ecx
		xor	edx, edx
		jmp	ebp
; ---------------------------------------------------------------------------

L$012ej7:
		mov	dh, [esi+6]
		shl	edx, 8

L$013ej6:
		mov	dh, [esi+5]

L$014ej5:
		mov	dl, [esi+4]

L$015ej4:
		mov	ecx, [esi]
		jmp	L$016ejend
; ---------------------------------------------------------------------------

L$017ej3:
		mov	ch, [esi+2]
		shl	ecx, 8

L$018ej2:
		mov	ch, [esi+1]

L$019ej1:
		mov	cl, [esi]

L$016ejend:				; CODE XREF: L$_DES_ncbc_encrypt_begin+A8j
		xor	eax, ecx
		xor	ebx, edx
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_1C], ebx
		call	L$_DES_encrypt1_begin
		mov	eax, [esp+2Ch+var_20]
		mov	ebx, [esp+2Ch+var_1C]
		mov	[edi], eax
		mov	[edi+4], ebx
		jmp	L$009finish
; ---------------------------------------------------------------------------

L$006decrypt:				; CODE XREF: L$_DES_ncbc_encrypt_begin+2Dj
		and	ebp, 0FFFFFFF8h
		mov	eax, [esp+2Ch+var_18]
		mov	ebx, [esp+2Ch+var_14]
		jz	L$020decrypt_finish

L$021decrypt_loop:			; CODE XREF: L$_DES_ncbc_encrypt_begin+12Dj
		mov	eax, [esi]
		mov	ebx, [esi+4]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_1C], ebx
		call	L$_DES_encrypt1_begin
		mov	eax, [esp+2Ch+var_20]
		mov	ebx, [esp+2Ch+var_1C]
		mov	ecx, [esp+2Ch+var_18]
		mov	edx, [esp+2Ch+var_14]
		xor	ecx, eax
		xor	edx, ebx
		mov	eax, [esi]
		mov	ebx, [esi+4]
		mov	[edi], ecx
		mov	[edi+4], edx
		mov	[esp+2Ch+var_18], eax
		mov	[esp+2Ch+var_14], ebx
		add	esi, 8
		add	edi, 8
		sub	ebp, 8
		jnz	L$021decrypt_loop

L$020decrypt_finish:			; CODE XREF: L$_DES_ncbc_encrypt_begin+E6j
		mov	ebp, [esp+2Ch+arg_8]
		and	ebp, 7
		jz	L$009finish
		mov	eax, [esi]
		mov	ebx, [esi+4]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_1C], ebx
		call	L$_DES_encrypt1_begin
		mov	eax, [esp+2Ch+var_20]
		mov	ebx, [esp+2Ch+var_1C]
		mov	ecx, [esp+2Ch+var_18]
		mov	edx, [esp+2Ch+var_14]
		xor	ecx, eax
		xor	edx, ebx
		mov	eax, [esi]
		mov	ebx, [esi+4]

L$022dj7:
		ror	edx, 10h
		mov	[edi+6], dl
		shr	edx, 10h

L$023dj6:
		mov	[edi+5], dh

L$024dj5:
		mov	[edi+4], dl

L$025dj4:
		mov	[edi], ecx
		jmp	L$026djend
; ---------------------------------------------------------------------------

L$027dj3:
		ror	ecx, 10h
		mov	[edi+2], cl
		shl	ecx, 10h

L$028dj2:
		mov	[esi+1], ch

L$029dj1:
		mov	[esi], cl

L$026djend:				; CODE XREF: L$_DES_ncbc_encrypt_begin+17Cj
		jmp	$+5
; ---------------------------------------------------------------------------

L$009finish:				; CODE XREF: L$_DES_ncbc_encrypt_begin+7Dj
					; L$_DES_ncbc_encrypt_begin+D6j ...
		mov	ecx, [esp+2Ch+arg_10]
		add	esp, 1Ch
		mov	[ecx], eax
		mov	[ecx+4], ebx
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_DES_ncbc_encrypt_begin endp

; ---------------------------------------------------------------------------
		align 20h
L$011cbc_enc_jmp_table dd 0		; DATA XREF: L$_DES_ncbc_encrypt_begin+89o
		dd offset loc_2D+1
		dd offset loc_26+5
		dd offset loc_24+1
		dd 1Eh,	1Bh, 18h, 12h, 8 dup(90909090h)

; =============== S U B	R O U T	I N E =======================================


		public L$_DES_ede3_cbc_encrypt_begin
L$_DES_ede3_cbc_encrypt_begin proc near

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		push	ebp
		push	ebx
		push	esi
		push	edi
		mov	ebp, [esp+10h+arg_8]
		mov	ebx, [esp+10h+arg_18]
		mov	esi, [ebx]
		mov	edi, [ebx+4]
		push	edi
		push	esi
		push	edi
		push	esi
		mov	ebx, esp
		mov	esi, [esp+20h+arg_0]
		mov	edi, [esp+20h+arg_4]
		mov	ecx, [esp+20h+arg_1C]
		mov	eax, [esp+20h+arg_14]
		push	eax
		mov	eax, [esp+24h+arg_10]
		push	eax
		mov	eax, [esp+28h+arg_C]
		push	eax
		push	ebx
		cmp	ecx, 0
		jz	L$030decrypt
		and	ebp, 0FFFFFFF8h
		mov	eax, [esp+30h+var_20]
		mov	ebx, [esp+30h+var_1C]
		jz	L$031encrypt_finish

L$032encrypt_loop:			; CODE XREF: L$_DES_ede3_cbc_encrypt_begin+79j
		mov	ecx, [esi]
		mov	edx, [esi+4]
		xor	eax, ecx
		xor	ebx, edx
		mov	[esp+30h+var_20], eax
		mov	[esp+30h+var_1C], ebx
		call	L$_DES_encrypt3_begin
		mov	eax, [esp+30h+var_20]
		mov	ebx, [esp+30h+var_1C]
		mov	[edi], eax
		mov	[edi+4], ebx
		add	esi, 8
		add	edi, 8
		sub	ebp, 8
		jnz	L$032encrypt_loop

L$031encrypt_finish:			; CODE XREF: L$_DES_ede3_cbc_encrypt_begin+47j
		mov	ebp, [esp+30h+arg_8]
		and	ebp, 7
		jz	L$033finish
		call	$+5

L$034PIC_point:
		pop	edx
		lea	ecx, (L$035cbc_enc_jmp_table - 1491h)[edx]
		mov	ebp, [ecx+ebp*4]
		add	ebp, edx
		xor	ecx, ecx
		xor	edx, edx
		jmp	ebp
; ---------------------------------------------------------------------------

L$036ej7:
		mov	dh, [esi+6]
		shl	edx, 8

L$037ej6:
		mov	dh, [esi+5]

L$038ej5:
		mov	dl, [esi+4]

L$039ej4:
		mov	ecx, [esi]
		jmp	L$040ejend
; ---------------------------------------------------------------------------

L$041ej3:
		mov	ch, [esi+2]
		shl	ecx, 8

L$042ej2:
		mov	ch, [esi+1]

L$043ej1:
		mov	cl, [esi]

L$040ejend:				; CODE XREF: L$_DES_ede3_cbc_encrypt_begin+B1j
		xor	eax, ecx
		xor	ebx, edx
		mov	[esp+30h+var_20], eax
		mov	[esp+30h+var_1C], ebx
		call	L$_DES_encrypt3_begin
		mov	eax, [esp+30h+var_20]
		mov	ebx, [esp+30h+var_1C]
		mov	[edi], eax
		mov	[edi+4], ebx
		jmp	L$033finish
; ---------------------------------------------------------------------------

L$030decrypt:				; CODE XREF: L$_DES_ede3_cbc_encrypt_begin+36j
		and	ebp, 0FFFFFFF8h
		mov	eax, [esp+30h+var_18]
		mov	ebx, [esp+30h+var_14]
		jz	L$044decrypt_finish

L$045decrypt_loop:			; CODE XREF: L$_DES_ede3_cbc_encrypt_begin+136j
		mov	eax, [esi]
		mov	ebx, [esi+4]
		mov	[esp+30h+var_20], eax
		mov	[esp+30h+var_1C], ebx
		call	L$_DES_decrypt3_begin
		mov	eax, [esp+30h+var_20]
		mov	ebx, [esp+30h+var_1C]
		mov	ecx, [esp+30h+var_18]
		mov	edx, [esp+30h+var_14]
		xor	ecx, eax
		xor	edx, ebx
		mov	eax, [esi]
		mov	ebx, [esi+4]
		mov	[edi], ecx
		mov	[edi+4], edx
		mov	[esp+30h+var_18], eax
		mov	[esp+30h+var_14], ebx
		add	esi, 8
		add	edi, 8
		sub	ebp, 8
		jnz	L$045decrypt_loop

L$044decrypt_finish:			; CODE XREF: L$_DES_ede3_cbc_encrypt_begin+EFj
		mov	ebp, [esp+30h+arg_8]
		and	ebp, 7
		jz	L$033finish
		mov	eax, [esi]
		mov	ebx, [esi+4]
		mov	[esp+30h+var_20], eax
		mov	[esp+30h+var_1C], ebx
		call	L$_DES_decrypt3_begin
		mov	eax, [esp+30h+var_20]
		mov	ebx, [esp+30h+var_1C]
		mov	ecx, [esp+30h+var_18]
		mov	edx, [esp+30h+var_14]
		xor	ecx, eax
		xor	edx, ebx
		mov	eax, [esi]
		mov	ebx, [esi+4]

L$046dj7:
		ror	edx, 10h
		mov	[edi+6], dl
		shr	edx, 10h

L$047dj6:
		mov	[edi+5], dh

L$048dj5:
		mov	[edi+4], dl

L$049dj4:
		mov	[edi], ecx
		jmp	L$050djend
; ---------------------------------------------------------------------------

L$051dj3:
		ror	ecx, 10h
		mov	[edi+2], cl
		shl	ecx, 10h

L$052dj2:
		mov	[esi+1], ch

L$053dj1:
		mov	[esi], cl

L$050djend:				; CODE XREF: L$_DES_ede3_cbc_encrypt_begin+185j
		jmp	$+5
; ---------------------------------------------------------------------------

L$033finish:				; CODE XREF: L$_DES_ede3_cbc_encrypt_begin+86j
					; L$_DES_ede3_cbc_encrypt_begin+DFj ...
		mov	ecx, [esp+30h+arg_18]
		add	esp, 20h
		mov	[ecx], eax
		mov	[ecx+4], ebx
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_DES_ede3_cbc_encrypt_begin endp

; ---------------------------------------------------------------------------
		align 20h
L$035cbc_enc_jmp_table dd 0		; DATA XREF: L$_DES_ede3_cbc_encrypt_begin+92o
		dd offset loc_2D+1
		dd offset loc_26+5
		dd offset loc_24+1
		dd 1Eh,	1Bh, 18h, 12h, 8 dup(90909090h)
; ---------------------------------------------------------------------------

		public L$des_sptrans
L$des_sptrans:
		add	[eax], cl
		or	[edx], al
; ---------------------------------------------------------------------------
		dd 80000h, 2000002h, 2080802h, 2000000h, 80802h, 80002h
		dd 2000002h, 80802h, 2080800h, 2080000h, 802h, 2000802h
		dd 2000000h, 0
		dd 80002h, 80000h, 2, 2000800h,	80800h,	2080802h, 2080000h
		dd 802h, 2000800h, 2, 800h, 80800h, 2080002h, 800h, 2000802h
		dd 2080002h, 2 dup(0)
		dd 2080802h, 2000800h, 80002h, 2080800h, 80000h, 802h
		dd 2000800h, 2080002h, 800h, 80800h, 2000002h, 80802h
		dd 2, 2000002h,	2080000h, 2080802h, 80800h, 2080000h, 2000802h
		dd 2000000h, 802h, 80002h, 0
		dd 80000h, 2000000h, 2000802h, 2080800h, 2, 2080002h, 800h
		dd 80802h, 40108010h, 0
		dd 108000h, 40100000h, 40000010h, 8010h, 40008000h, 108000h
		dd 8000h, 40100010h, 10h, 40008000h, 100010h, 40108000h
		dd 40100000h, 10h, 100000h, 40008010h, 40100010h, 8000h
		dd 108010h, 40000000h, 0
		dd 100010h, 40008010h, 108010h,	40108000h, 40000010h, 40000000h
		dd 100000h, 8010h, 40108010h, 100010h, 40108000h, 40008000h
		dd 108010h, 40108010h, 100010h,	40000010h, 0
		dd 40000000h, 8010h, 100000h, 40100010h, 8000h,	40000000h
		dd 108010h, 40008010h, 40108000h, 8000h, 0
		dd 40000010h, 10h, 40108010h, 108000h, 40100000h, 40100010h
		dd 100000h, 8010h, 40008000h, 40008010h, 10h, 40100000h
		dd 108000h, 4000001h, 4040100h,	100h, 4000101h,	40001h
		dd 4000000h, 4000101h, 40100h, 4000100h, 40000h, 4040000h
		dd 1, 4040101h,	101h, 1, 4040001h, 0
		dd 40001h, 4040100h, 100h, 101h, 4040101h, 40000h, 4000001h
		dd 4040001h, 4000100h, 40101h, 4040000h, 40100h, 0
		dd 4000000h, 40101h, 4040100h, 100h, 1,	40000h,	101h, 40001h
		dd 4040000h, 4000101h, 0
		dd 4040100h, 40100h, 4040001h, 40001h, 4000000h, 4040101h
		dd 1, 40101h, 4000001h,	4000000h, 4040101h, 40000h, 4000100h
		dd 4000101h, 40100h, 4000100h, 0
		dd 4040001h, 101h, 4000001h, 40101h, 100h, 4040000h, 401008h
		dd 10001000h, 8, 10401008h, 0
		dd 10400000h, 10001008h, 400008h, 10401000h, 10000008h
		dd 10000000h, 1008h, 10000008h,	401008h, 400000h, 10000000h
		dd 10400008h, 401000h, 1000h, 8, 401000h, 10001008h, 10400000h
		dd 1000h, 1008h, 0
		dd 400008h, 10401000h, 10001000h, 10400008h, 10401008h
		dd 400000h, 10400008h, 1008h, 400000h, 10000008h, 401000h
		dd 10001000h, 8, 10400000h, 10001008h, 0
		dd offset loc_FFB+5
a@:
		dw 8
		unicode	0, <@>,0
		align 4
		db 8,0
		dw 1040h
		dd 10401000h, 1000h, 10000000h,	10401008h, 401008h, 400000h
		dd 10401008h, 8, 10001000h, 401008h, 400008h, 401000h
		dd 10400000h, 10001008h, 1008h,	10000000h, 10000008h, 10401000h
		dd 8000000h, 10000h, 400h, 8010420h, 8010020h, 8000400h
		dd 10420h, 8010000h, 10000h, 20h, 8000020h, 10400h, 8000420h
		dd 8010020h, 8010400h, 0
		dd 10400h, 8000000h, 10020h, 420h, 8000400h, 10420h, 0
		dd 8000020h, 20h, 8000420h, 8010420h, 10020h, 8010000h
		dd 400h, 420h, 2 dup(8010400h),	8000420h, 10020h, 8010000h
		dd 10000h, 20h,	8000020h, 8000400h, 8000000h, 10400h, 8010420h
		dd 0
		dd 10420h, 8000000h, 400h, 10020h, 8000420h, 400h, 0
		dd 8010420h, 8010020h, 8010400h, 420h, 10000h, 10400h
		dd 8010020h, 8000400h, 420h, 20h, 10420h, 8010000h, 8000020h
		dd 80000040h, 200040h, 0
		dd 80202000h, 200040h, 2000h, 80002040h, 200000h, 2040h
		dd 80202040h, 202000h, 80000000h, 80002000h, 80000040h
		dd 80200000h, 202040h, 200000h,	80002040h, 80200040h, 0
		dd 2000h, 40h, 80202000h, 80200040h, 80202040h,	80200000h
		dd 80000000h, 2040h, 40h, 202000h, 202040h, 80002000h
		dd 2040h, 80000000h, 80002000h,	202040h, 80202000h, 200040h
		dd 0
		dd 80002000h, 80000000h, 2000h,	80200040h, 200000h, 200040h
		dd 80202040h, 202000h, 40h, 80202040h, 202000h,	200000h
		dd 80002040h, 80000040h, 80200000h, 202040h, 0
		dd 2000h, 80000040h, 80002040h,	80202000h, 80200000h, 2040h
		dd 40h,	80200040h, 4000h, 200h,	1000200h, 1000004h, 1004204h
		dd 4004h, 4200h, 0
		dd 1000000h, 1000204h, 204h, 1004000h, 4, 1004200h, 1004000h
		dd 204h, 1000204h, 4000h, 4004h, 1004204h, 0
		dd 1000200h, 1000004h, 4200h, 1004004h,	4204h, 1004200h
		dd 4, 4204h, 1004004h, 200h, 1000000h, 4204h, 1004000h
		dd 1004004h, 204h, 4000h, 200h,	1000000h, 1004004h, 1000204h
		dd 4204h, 4200h, 0
		dd offset loc_1FF+1
		dd 1000004h, 4,	1000200h, 0
		dd 1000204h, 1000200h, 4200h, 204h, 4000h, 1004204h, 1000000h
		dd 1004200h, 4,	4004h, 1004204h, 1000004h, 1004200h, 1004000h
		dd 4004h, 20800080h, 20820000h,	20080h,	0
		dd 20020000h, 800080h, 20800000h, 20820080h, 80h, 20000000h
		dd 820000h, 20080h, 820080h, 20020080h,	20000080h, 20800000h
		dd 20000h, 820080h, 800080h, 20020000h,	20820080h, 20000080h
		dd 0
		dd 820000h, 20000000h, 800000h,	20020080h, 20800080h, 800000h
		dd 20000h, 20820000h, 80h, 800000h, 20000h, 20000080h
		dd 20820080h, 20080h, 20000000h, 0
		dd 820000h, 20800080h, 20020080h, 20020000h, 800080h, 20820000h
		dd 80h,	800080h, 20020000h, 20820080h, 800000h,	20800000h
		dd 20000080h, 820000h, 20080h, 20020080h, 20800000h, 80h
		dd 20820000h, 820080h, 0
		dd 20000000h, 20800080h, 20000h, 820080h
_text		ends


		end
