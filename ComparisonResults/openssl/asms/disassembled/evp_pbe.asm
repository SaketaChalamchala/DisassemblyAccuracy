;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	93363F39047AF637C3103D59EB75F08D
; Input	CRC32 :	FFAFBAEB

; File Name   :	C:\compspace\Diff\openssl\obj\evp_pbe.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
_builtin_pbe	dd 0			; DATA XREF: _EVP_PBE_find+60o
		dd 9, 1Fh, 3
		dd offset _PKCS5_PBE_keyivgen
		align 8
		dd 0Ah,	1Fh, 4
off_24		dd offset _PKCS5_PBE_keyivgen ;	DATA XREF: .rdata:off_A8o
dword_28	dd 0			; DATA XREF: .rdata:off_94o
off_2C		dd offset byte_44	; DATA XREF: .rdata:00000080o
		dd offset word_A6
		dd offset off_40
off_38		dd offset _PKCS5_PBE_keyivgen ;	DATA XREF: _EVP_PBE_CipherInit+104r
		align 10h
off_40		dd offset byte_45	; DATA XREF: .rdata:00000034o
					; .rdata:00000070o ...
byte_44		db 0FFh			; DATA XREF: .rdata:off_2Co
byte_45		db 3 dup(0FFh)		; DATA XREF: .rdata:off_40o
		dd 0FFFFFFFFh
		dd offset _PKCS5_v2_PBKDF2_keyivgen
		dd 0
		dd offset off_90
		dd 5, 40h
off_60		dd offset _PKCS12_PBE_keyivgen ; DATA XREF: .rdata:0000006Co
					; .rdata:000000BCo
		align 8
		dd offset off_90+1
		dd offset off_60+1
		dd offset off_40
		dd offset _PKCS12_PBE_keyivgen
		dd 0
		dd offset off_90+2
		dd offset off_2C
		dd offset off_40
		dd offset _PKCS12_PBE_keyivgen
		align 10h
off_90		dd offset off_90+3	; DATA XREF: .rdata:00000054o
					; .rdata:00000068o ...
off_94		dd offset dword_28+3	; DATA XREF: .rdata:000000B8o
		dd offset off_40
		dd offset _PKCS12_PBE_keyivgen
dword_A0	dd 0			; DATA XREF: .rdata:000000CCo
		db 94h,	0
word_A6		dw 0			; DATA XREF: .rdata:00000030o
					; .rdata:000000E4o ...
off_A8		dd offset off_24+1	; DATA XREF: .rdata:000000E0o
					; .rdata:000000F4o ...
		dd offset off_40
		dd offset _PKCS12_PBE_keyivgen
		align 8
		dd offset off_94+1
		dd offset off_60+2
		dd offset off_40
		dd offset _PKCS12_PBE_keyivgen
		dd 0
		dd offset dword_A0+1
		dd 2 dup(0FFFFFFFFh)
		dd offset _PKCS5_v2_PBE_keyivgen
		align 10h
		dd offset off_A8
		dd offset word_A6
		dd 3
		dd offset _PKCS5_PBE_keyivgen
		dd 0
		dd offset off_A8+1
		dd offset word_A6
		dd 4
		dd offset _PKCS5_PBE_keyivgen
		align 8
		dd offset off_A8+2
		dd 1Fh,	40h
		dd offset _PKCS5_PBE_keyivgen
		dd 1, 0A3h, 0FFFFFFFFh,	40h, 0
		dd 1, 31Dh, 0FFFFFFFFh,	4, 0
		dd 1, 31Eh, 0FFFFFFFFh,	2A3h, 0
		dd 1, 31Fh, 0FFFFFFFFh,	2A0h, 0
		dd 1, 320h, 0FFFFFFFFh,	2A1h, 0
		dd 1, 321h, 0FFFFFFFFh,	2A2h, 0
		dd 1, 32Ah, 0FFFFFFFFh,	329h, 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PBE_CipherInit
_EVP_PBE_CipherInit proc near

var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= byte ptr -58h
var_54		= byte ptr -54h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 64h ; 'd'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+64h+var_4], eax
		mov	eax, [esp+64h+arg_10]
		push	ebx
		mov	ebx, [esp+68h+arg_4]
		push	ebp
		mov	ebp, [esp+6Ch+arg_C]
		push	esi
		mov	esi, [esp+70h+arg_0]
		mov	[esp+70h+var_5C], eax
		lea	eax, [esp+70h+var_58]
		push	eax
		lea	eax, [esp+74h+var_60]
		push	eax
		lea	eax, [esp+78h+var_64]
		push	eax
		push	esi
		call	_OBJ_obj2nid
		add	esp, 4
		push	eax
		push	0
		call	_EVP_PBE_find
		add	esp, 14h
		test	eax, eax
		jnz	short loc_25A
		push	0A2h ; '¢'
		push	offset ??_C@_0BH@OMCHJHAP@?4?2crypto?2evp?2evp_pbe?4c?$AA@ ; ".\\crypto\\evp\\evp_pbe.c"
		push	79h ; 'y'
		push	74h ; 't'
		push	6
		call	_ERR_put_error
		add	esp, 14h
		lea	eax, [esp+70h+var_54]
		test	esi, esi
		jnz	short loc_226
		push	50h ; 'P'
		push	offset ??_C@_04HIBGFPH@NULL?$AA@ ; "NULL"
		push	eax
		call	_BUF_strlcpy
		jmp	short loc_22F
; ---------------------------------------------------------------------------

loc_226:				; CODE XREF: _EVP_PBE_CipherInit+71j
		push	esi
		push	50h ; 'P'
		push	eax
		call	_i2t_ASN1_OBJECT

loc_22F:				; CODE XREF: _EVP_PBE_CipherInit+80j
		add	esp, 0Ch
		lea	eax, [esp+70h+var_54]
		push	eax
		push	offset ??_C@_05DLJFLBDA@TYPE?$DN?$AA@ ;	"TYPE="
		push	2
		call	_ERR_add_error_data
		add	esp, 0Ch
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+64h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
; ---------------------------------------------------------------------------

loc_25A:				; CODE XREF: _EVP_PBE_CipherInit+51j
		test	ebx, ebx
		jnz	short loc_262
		xor	esi, esi
		jmp	short loc_27D
; ---------------------------------------------------------------------------

loc_262:				; CODE XREF: _EVP_PBE_CipherInit+B8j
		mov	esi, [esp+70h+arg_8]
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_27D
		mov	esi, ebx
		lea	ecx, [esi+1]
		nop	dword ptr [eax+00h]

loc_274:				; CODE XREF: _EVP_PBE_CipherInit+D5j
		mov	al, [esi]
		inc	esi
		test	al, al
		jnz	short loc_274
		sub	esi, ecx

loc_27D:				; CODE XREF: _EVP_PBE_CipherInit+BCj
					; _EVP_PBE_CipherInit+C5j
		mov	eax, [esp+70h+var_64]
		push	edi
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_2E4
		xor	edi, edi

loc_289:				; CODE XREF: _EVP_PBE_CipherInit+153j
		mov	eax, [esp+74h+var_60]
		cmp	eax, 0FFFFFFFFh
		jnz	loc_329
		xor	eax, eax

loc_298:				; CODE XREF: _EVP_PBE_CipherInit+196j
		push	[esp+74h+arg_14]
		push	eax
		push	edi
		push	ebp
		push	esi
		push	ebx
		push	[esp+8Ch+var_5C]
		call	ss:off_38[esp]
		add	esp, 1Ch
		test	eax, eax
		jnz	loc_370
		push	0C5h ; 'Å'
		push	offset ??_C@_0BH@OMCHJHAP@?4?2crypto?2evp?2evp_pbe?4c?$AA@ ; ".\\crypto\\evp\\evp_pbe.c"
		push	78h ; 'x'
		push	74h ; 't'
		push	6
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+64h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
; ---------------------------------------------------------------------------

loc_2E4:				; CODE XREF: _EVP_PBE_CipherInit+E1j
		push	eax
		call	_OBJ_nid2sn
		push	eax
		call	_EVP_get_cipherbyname
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_289
		push	0B5h ; 'µ'
		push	offset ??_C@_0BH@OMCHJHAP@?4?2crypto?2evp?2evp_pbe?4c?$AA@ ; ".\\crypto\\evp\\evp_pbe.c"
		push	0A0h ; ' '
		push	74h ; 't'
		push	6
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+64h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
; ---------------------------------------------------------------------------

loc_329:				; CODE XREF: _EVP_PBE_CipherInit+ECj
		push	eax
		call	_OBJ_nid2sn
		push	eax
		call	_EVP_get_digestbyname
		add	esp, 8
		test	eax, eax
		jnz	loc_298
		push	0BFh ; '¿'
		push	offset ??_C@_0BH@OMCHJHAP@?4?2crypto?2evp?2evp_pbe?4c?$AA@ ; ".\\crypto\\evp\\evp_pbe.c"
		push	0A1h ; '¡'
		push	74h ; 't'
		push	6
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+64h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
; ---------------------------------------------------------------------------

loc_370:				; CODE XREF: _EVP_PBE_CipherInit+10Dj
		mov	ecx, [esp+74h+var_4]
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
_EVP_PBE_CipherInit endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 388h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PBE_alg_add
_EVP_PBE_alg_add proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		push	esi
		test	eax, eax
		jz	short loc_39E
		push	eax
		call	_EVP_CIPHER_nid
		add	esp, 4
		mov	esi, eax
		jmp	short loc_3A1
; ---------------------------------------------------------------------------

loc_39E:				; CODE XREF: _EVP_PBE_alg_add+7j
		or	esi, 0FFFFFFFFh

loc_3A1:				; CODE XREF: _EVP_PBE_alg_add+14j
		mov	eax, [esp+4+arg_8]
		test	eax, eax
		jz	short loc_3C8
		push	eax
		call	_EVP_MD_type
		add	esp, 4
		push	[esp+4+arg_C]
		push	eax
		push	esi
		push	[esp+10h+arg_0]
		push	0
		call	_EVP_PBE_alg_add_type
		add	esp, 14h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3C8:				; CODE XREF: _EVP_PBE_alg_add+1Fj
		push	[esp+4+arg_C]
		or	eax, 0FFFFFFFFh
		push	eax
		push	esi
		push	[esp+10h+arg_0]
		push	0
		call	_EVP_PBE_alg_add_type
		add	esp, 14h
		pop	esi
		retn
_EVP_PBE_alg_add endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PBE_alg_add_type
_EVP_PBE_alg_add_type proc near		; CODE XREF: _EVP_PBE_alg_add+36p
					; _EVP_PBE_alg_add+4Fp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		cmp	ds:_pbe_algs, 0
		jnz	short loc_403
		push	offset _pbe_cmp
		call	_sk_new
		add	esp, 4
		mov	ds:_pbe_algs, eax
		test	eax, eax
		jz	short $err$7

loc_403:				; CODE XREF: _EVP_PBE_alg_add_type+7j
		push	0EEh ; 'î'
		push	offset ??_C@_0BH@OMCHJHAP@?4?2crypto?2evp?2evp_pbe?4c?$AA@ ; ".\\crypto\\evp\\evp_pbe.c"
		push	14h
		call	_CRYPTO_malloc
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jnz	short loc_43B

$err$7:					; CODE XREF: _EVP_PBE_alg_add_type+1Dj
		push	0FBh ; 'û'
		push	offset ??_C@_0BH@OMCHJHAP@?4?2crypto?2evp?2evp_pbe?4c?$AA@ ; ".\\crypto\\evp\\evp_pbe.c"
		push	41h ; 'A'
		push	0A0h ; ' '
		push	6
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_43B:				; CODE XREF: _EVP_PBE_alg_add_type+37j
		mov	eax, [esp+arg_0]
		mov	[ecx], eax
		mov	eax, [esp+arg_4]
		mov	[ecx+4], eax
		mov	eax, [esp+arg_8]
		mov	[ecx+8], eax
		mov	eax, [esp+arg_C]
		push	ecx
		push	ds:_pbe_algs
		mov	[ecx+0Ch], eax
		mov	eax, [esp+8+arg_10]
		mov	[ecx+10h], eax
		call	_sk_push
		add	esp, 8
		mov	eax, 1
		retn
_EVP_PBE_alg_add_type endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 474h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PBE_cleanup
_EVP_PBE_cleanup proc near
		push	offset _free_evp_pbe_ctl
		push	ds:_pbe_algs
		call	_sk_pop_free
		add	esp, 8
		mov	ds:_pbe_algs, 0
		retn
_EVP_PBE_cleanup endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 494h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_PBE_find
_EVP_PBE_find	proc near		; CODE XREF: _EVP_PBE_CipherInit+47p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 14h
		call	__chkstk
		mov	ecx, [esp+14h+arg_4]
		test	ecx, ecx
		jnz	short loc_4AC

loc_4A6:				; CODE XREF: _EVP_PBE_find+72j
		xor	eax, eax
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_4AC:				; CODE XREF: _EVP_PBE_find+10j
		mov	eax, [esp+14h+arg_0]
		mov	[esp+14h+var_14], eax
		mov	eax, ds:_pbe_algs
		mov	[esp+14h+var_10], ecx
		test	eax, eax
		jz	short loc_4E7
		lea	ecx, [esp+14h+var_14]
		push	ecx
		push	eax
		call	_sk_find
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	short loc_4E7
		push	eax
		push	ds:_pbe_algs
		call	_sk_value
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		jnz	short loc_508

loc_4E7:				; CODE XREF: _EVP_PBE_find+2Aj
					; _EVP_PBE_find+3Cj
		push	offset _pbe2_cmp_BSEARCH_CMP_FN
		push	14h
		push	15h
		lea	eax, [esp+20h+var_14]
		push	offset _builtin_pbe
		push	eax
		call	_OBJ_bsearch_
		mov	ecx, eax
		add	esp, 14h
		test	ecx, ecx
		jz	short loc_4A6

loc_508:				; CODE XREF: _EVP_PBE_find+51j
		mov	edx, [esp+14h+arg_8]
		test	edx, edx
		jz	short loc_515
		mov	eax, [ecx+8]
		mov	[edx], eax

loc_515:				; CODE XREF: _EVP_PBE_find+7Aj
		mov	edx, [esp+14h+arg_C]
		test	edx, edx
		jz	short loc_522
		mov	eax, [ecx+0Ch]
		mov	[edx], eax

loc_522:				; CODE XREF: _EVP_PBE_find+87j
		mov	edx, [esp+14h+arg_10]
		test	edx, edx
		jz	short loc_52F
		mov	eax, [ecx+10h]
		mov	[edx], eax

loc_52F:				; CODE XREF: _EVP_PBE_find+94j
		mov	eax, 1
		add	esp, 14h
		retn
_EVP_PBE_find	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 538h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_OBJ_bsearch_pbe2 proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset _pbe2_cmp_BSEARCH_CMP_FN
		push	14h
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	_OBJ_bsearch_
		add	esp, 14h
		retn
_OBJ_bsearch_pbe2 endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 554h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_free_evp_pbe_ctl proc near		; DATA XREF: _EVP_PBE_cleanupo
		jmp	_CRYPTO_free
_free_evp_pbe_ctl endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 55Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pbe2_cmp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	eax, [ecx]
		sub	eax, [edx]
		jnz	short locret_570
		mov	eax, [ecx+4]
		sub	eax, [edx+4]

locret_570:				; CODE XREF: _pbe2_cmp+Cj
		retn
_pbe2_cmp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 574h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pbe2_cmp_BSEARCH_CMP_FN proc near	; DATA XREF: _EVP_PBE_find:loc_4E7o
					; _OBJ_bsearch_pbe2o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	eax, [ecx]
		sub	eax, [edx]
		jnz	short locret_588
		mov	eax, [ecx+4]
		sub	eax, [edx+4]

locret_588:				; CODE XREF: _pbe2_cmp_BSEARCH_CMP_FN+Cj
		retn
_pbe2_cmp_BSEARCH_CMP_FN endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 58Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pbe_cmp	proc near		; DATA XREF: _EVP_PBE_alg_add_type+9o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [eax]
		mov	eax, [esp+arg_4]
		mov	edx, [eax]
		mov	eax, [ecx]
		sub	eax, [edx]
		jnz	short locret_5A4
		mov	eax, [ecx+4]
		sub	eax, [edx+4]

locret_5A4:				; CODE XREF: _pbe_cmp+10j
		retn
_pbe_cmp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 5A8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
_pbe_algs	dd ?			; DATA XREF: _EVP_PBE_alg_add_typer
					; _EVP_PBE_alg_add_type+16w ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5ACh
; COMDAT (pick any)
		public ??_C@_0BH@OMCHJHAP@?4?2crypto?2evp?2evp_pbe?4c?$AA@
; `string'
??_C@_0BH@OMCHJHAP@?4?2crypto?2evp?2evp_pbe?4c?$AA@ db '.\crypto\evp\evp_pbe.c',0
					; DATA XREF: _EVP_PBE_CipherInit+58o
					; _EVP_PBE_CipherInit+118o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5C4h
; COMDAT (pick any)
		public ??_C@_04HIBGFPH@NULL?$AA@
; `string'
??_C@_04HIBGFPH@NULL?$AA@ db 'NULL',0   ; DATA XREF: _EVP_PBE_CipherInit+75o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5CCh
; COMDAT (pick any)
		public ??_C@_05DLJFLBDA@TYPE?$DN?$AA@
; `string'
??_C@_05DLJFLBDA@TYPE?$DN?$AA@ db 'TYPE=',0 ; DATA XREF: _EVP_PBE_CipherInit+93o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _PKCS12_PBE_keyivgen:near	; DATA XREF: .rdata:off_60o
					; .rdata:00000074o ...
		extrn _PKCS5_v2_PBKDF2_keyivgen:near ; DATA XREF: .rdata:0000004Co
		extrn _PKCS5_PBE_keyivgen:near ; CODE XREF: _EVP_PBE_CipherInit+104p
					; DATA XREF: .rdata:00000010o ...
		extrn _PKCS5_v2_PBE_keyivgen:near ; DATA XREF: .rdata:000000D8o
		extrn _sk_value:near	; CODE XREF: _EVP_PBE_find+45p
		extrn _sk_new:near	; CODE XREF: _EVP_PBE_alg_add_type+Ep
		extrn _sk_pop_free:near	; CODE XREF: _EVP_PBE_cleanup+Bp
		extrn _sk_find:near	; CODE XREF: _EVP_PBE_find+31p
		extrn _sk_push:near	; CODE XREF: _EVP_PBE_alg_add_type+80p
		extrn _CRYPTO_malloc:near ; CODE XREF: _EVP_PBE_alg_add_type+2Bp
		extrn _CRYPTO_free:near	; CODE XREF: _free_evp_pbe_ctlj
		extrn _BUF_strlcpy:near	; CODE XREF: _EVP_PBE_CipherInit+7Bp
		extrn _ERR_put_error:near ; CODE XREF: _EVP_PBE_CipherInit+63p
					; _EVP_PBE_CipherInit+123p ...
		extrn _ERR_add_error_data:near ; CODE XREF: _EVP_PBE_CipherInit+9Ap
		extrn _i2t_ASN1_OBJECT:near ; CODE XREF: _EVP_PBE_CipherInit+86p
		extrn _OBJ_nid2sn:near	; CODE XREF: _EVP_PBE_CipherInit+141p
					; _EVP_PBE_CipherInit+186p
		extrn _OBJ_obj2nid:near	; CODE XREF: _EVP_PBE_CipherInit+3Cp
		extrn _OBJ_bsearch_:near ; CODE	XREF: _EVP_PBE_find+66p
					; _OBJ_bsearch_pbe2+13p
		extrn _EVP_MD_type:near	; CODE XREF: _EVP_PBE_alg_add+22p
		extrn _EVP_CIPHER_nid:near ; CODE XREF:	_EVP_PBE_alg_add+Ap
		extrn _EVP_get_cipherbyname:near ; CODE	XREF: _EVP_PBE_CipherInit+147p
		extrn _EVP_get_digestbyname:near ; CODE	XREF: _EVP_PBE_CipherInit+18Cp
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _EVP_PBE_CipherInit+ADp
					; _EVP_PBE_CipherInit+137p ...
		extrn __chkstk:near	; CODE XREF: _EVP_PBE_CipherInit+5p
					; _EVP_PBE_find+5p
		extrn ___security_cookie:near ;	DATA XREF: _EVP_PBE_CipherInit+Ar


		end
