;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	06AEF16A5FF6456B21B5B605B1FF718D
; Input	CRC32 :	021B1F16

; File Name   :	C:\compspace\Diff\openssl\obj\conf_def.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
_CONF_type_default dd 8, 3 dup(0)	; DATA XREF: _def_init_default+Fo
		dd 100000h, 10h, 100000h, 9 dup(0)
		dd 2000010h, 800040h, 2000000h,	400200h, 0
		dd 3 dup(2000200h), 5 dup(10001h), 2000000h, 0
		dd 2000000h, 20200h, 0Ch dup(20002h), 2, 20h, 1000200h
		dd 40040h, 0Ch dup(40004h), 4, 2 dup(200h), 40h	dup(10001000h)
_CONF_type_win32 dd 8, 3 dup(0)		; DATA XREF: _def_init_WIN32+Fo
		dd 100000h, 10h, 100000h, 9 dup(0)
		dd 2000010h, 400h, 2000000h, 200h, 0
		dd 3 dup(2000200h), 5 dup(10001h), 0A000000h, 0
		dd 2000000h, 20200h, 0Ch dup(20002h), 2, 0
		dd 1000200h, 40000h, 0Ch dup(40004h), 4, 2 dup(200h), 40h dup(10001000h)
_default_method	dd offset ??_C@_0BA@EEIGDPJJ@OpenSSL?5default?$AA@
					; DATA XREF: _def_init_default:loc_499o
					; _NCONF_defaulto
					; "OpenSSL default"
		dd offset _def_create
		dd offset _def_init_default
		dd offset _def_destroy
		dd offset _def_destroy_data
		dd offset _def_load_bio
		dd offset _def_dump
		dd offset _def_is_number
		dd offset _def_to_int
		dd offset _def_load
_WIN32_method	dd offset ??_C@_05LKMDHMJN@WIN32?$AA@ ;	DATA XREF: _def_init_WIN32:loc_4BDo
					; _NCONF_WIN32o
					; "WIN32"
		dd offset _def_create
		dd offset _def_init_WIN32
		dd offset _def_destroy
		dd offset _def_destroy_data
		dd offset _def_load_bio
		dd offset _def_dump
		dd offset _def_is_number
		dd offset _def_to_int
		dd offset _def_load
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 450h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_def_create	proc near		; DATA XREF: .data:00000404o
					; .data:0000042Co

arg_0		= dword	ptr  4

		push	esi
		push	85h ; '…'
		push	offset ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@ ; ".\\crypto\\conf\\conf_def.c"
		push	10h
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_48B
		mov	ecx, [esp+4+arg_0]
		push	esi
		mov	ecx, [ecx+8]
		call	ecx
		add	esp, 4
		test	eax, eax
		jnz	short loc_489
		push	esi
		call	_CRYPTO_free
		add	esp, 4
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_489:				; CODE XREF: _def_create+2Aj
		mov	eax, esi

loc_48B:				; CODE XREF: _def_create+19j
		pop	esi
		retn
_def_create	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 490h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_def_init_default proc near		; DATA XREF: .data:00000408o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_499
		retn
; ---------------------------------------------------------------------------

loc_499:				; CODE XREF: _def_init_default+6j
		mov	dword ptr [eax], offset	_default_method
		mov	dword ptr [eax+4], offset _CONF_type_default
		mov	dword ptr [eax+8], 0
		mov	eax, 1
		retn
_def_init_default endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_def_init_WIN32	proc near		; DATA XREF: .data:00000430o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_4BD
		retn
; ---------------------------------------------------------------------------

loc_4BD:				; CODE XREF: _def_init_WIN32+6j
		mov	dword ptr [eax], offset	_WIN32_method
		mov	dword ptr [eax+4], offset _CONF_type_win32
		mov	dword ptr [eax+8], 0
		mov	eax, 1
		retn
_def_init_WIN32	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_def_destroy	proc near		; DATA XREF: .data:0000040Co
					; .data:00000434o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_4F7
		push	esi
		call	__CONF_free_data
		push	esi
		call	_CRYPTO_free
		add	esp, 8
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4F7:				; CODE XREF: _def_destroy+7j
		xor	eax, eax
		pop	esi
		retn
_def_destroy	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_def_destroy_data proc near		; DATA XREF: .data:00000410o
					; .data:00000438o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_505
		retn
; ---------------------------------------------------------------------------

loc_505:				; CODE XREF: _def_destroy_data+6j
		push	eax
		call	__CONF_free_data
		add	esp, 4
		mov	eax, 1
		retn
_def_destroy_data endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 514h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_def_load	proc near		; DATA XREF: .data:00000424o
					; .data:0000044Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	offset ??_C@_02JDPG@rb?$AA@ ; `string'
		push	[esp+8+arg_4]
		call	_BIO_new_file
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_575
		call	_ERR_peek_last_error
		and	eax, 0FFFh
		cmp	eax, 80h ; '€'
		jnz	short loc_559
		push	0C3h ; 'Ã'
		push	offset ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@ ; ".\\crypto\\conf\\conf_def.c"
		push	72h ; 'r'
		push	78h ; 'x'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_559:				; CODE XREF: _def_load+27j
		push	0C5h ; 'Å'
		push	offset ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@ ; ".\\crypto\\conf\\conf_def.c"
		push	2
		push	78h ; 'x'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_575:				; CODE XREF: _def_load+16j
		push	esi
		push	[esp+8+arg_8]
		push	edi
		push	[esp+10h+arg_0]
		call	_def_load_bio
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 10h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_def_load	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 594h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_def_load_bio	proc near		; CODE XREF: _def_load+6Bp
					; DATA XREF: .data:00000414o ...

var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 44h ; 'D'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+44h+var_4], eax
		mov	eax, [esp+44h+arg_4]
		push	ebx
		mov	ebx, [esp+48h+arg_0]
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+54h+arg_8]
		xor	ebp, ebp
		mov	[esp+54h+var_1C], eax
		xor	esi, esi
		mov	eax, [ebx+8]
		mov	[esp+54h+var_40], edi
		mov	[esp+54h+var_2C], ebp
		mov	[esp+54h+var_18], eax
		call	_BUF_MEM_new
		mov	[esp+54h+var_3C], eax
		test	eax, eax
		jnz	short loc_5FA
		push	0E0h ; 'à'
		push	offset ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@ ; ".\\crypto\\conf\\conf_def.c"
		push	7
		push	79h ; 'y'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_AA1
; ---------------------------------------------------------------------------

loc_5FA:				; CODE XREF: _def_load_bio+47j
		push	offset ??_C@_07DLHCIBDH@default?$AA@ ; "default"
		call	_BUF_strdup
		mov	ebp, eax
		add	esp, 4
		mov	[esp+54h+var_38], ebp
		test	ebp, ebp
		jnz	short loc_62E
		push	0E6h ; 'æ'

loc_616:				; CODE XREF: _def_load_bio+ACj
		push	offset ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@ ; ".\\crypto\\conf\\conf_def.c"
		push	41h ; 'A'
		push	79h ; 'y'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$110
; ---------------------------------------------------------------------------

loc_62E:				; CODE XREF: _def_load_bio+7Bj
		push	ebx
		call	__CONF_new_data
		add	esp, 4
		test	eax, eax
		jnz	short loc_642
		push	0EBh ; 'ë'
		jmp	short loc_616
; ---------------------------------------------------------------------------

loc_642:				; CODE XREF: _def_load_bio+A5j
		push	ebp
		push	ebx
		call	__CONF_new_section
		add	esp, 8
		mov	[esp+54h+var_24], eax
		test	eax, eax
		jnz	short loc_671
		push	0F1h ; 'ñ'
		push	offset ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@ ; ".\\crypto\\conf\\conf_def.c"
		push	67h ; 'g'
		push	79h ; 'y'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$110
; ---------------------------------------------------------------------------

loc_671:				; CODE XREF: _def_load_bio+BEj
		push	200h
		push	[esp+58h+var_3C]
		xor	edi, edi
		xor	ebp, ebp
		call	_BUF_MEM_grow
		add	esp, 8
		test	eax, eax
		jz	loc_A11
		nop	word ptr [eax+eax+00h]

loc_694:				; CODE XREF: _def_load_bio+477j
		mov	eax, [esp+54h+var_3C]
		push	1FFh
		mov	esi, [eax+4]
		add	esi, edi
		push	esi
		push	[esp+5Ch+var_1C]
		mov	byte ptr [esi],	0
		call	_BIO_gets
		mov	eax, esi
		mov	byte ptr [esi+1FFh], 0
		add	esp, 0Ch
		lea	edx, [eax+1]
		nop	word ptr [eax+eax+00h]

loc_6C4:				; CODE XREF: _def_load_bio+135j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_6C4
		sub	eax, edx
		mov	edx, eax
		jnz	short loc_6D9
		test	ebp, ebp
		jz	loc_A2B

loc_6D9:				; CODE XREF: _def_load_bio+13Bj
		xor	ebp, ebp
		mov	[esp+54h+var_34], ebp
		test	eax, eax
		jle	short loc_6F7
		nop

loc_6E4:				; CODE XREF: _def_load_bio+161j
		mov	cl, [esi+eax-1]
		cmp	cl, 0Dh
		jz	short loc_6F2
		cmp	cl, 0Ah
		jnz	short loc_6F7

loc_6F2:				; CODE XREF: _def_load_bio+157j
		dec	eax
		test	eax, eax
		jg	short loc_6E4

loc_6F7:				; CODE XREF: _def_load_bio+14Dj
					; _def_load_bio+15Cj
		test	edx, edx
		jz	short loc_70A
		cmp	eax, edx
		jnz	short loc_70A
		mov	ebp, 1
		mov	[esp+54h+var_34], ebp
		jmp	short loc_712
; ---------------------------------------------------------------------------

loc_70A:				; CODE XREF: _def_load_bio+165j
					; _def_load_bio+169j
		inc	[esp+54h+var_2C]
		mov	byte ptr [eax+esi], 0

loc_712:				; CODE XREF: _def_load_bio+174j
		add	edi, eax
		xor	esi, esi
		mov	[esp+54h+var_44], esi
		cmp	edi, 1
		jl	short loc_74F
		mov	eax, [esp+54h+var_3C]
		mov	edx, [ebx+4]
		mov	ecx, [eax+4]
		dec	ecx
		add	ecx, edi
		movzx	eax, byte ptr [ecx]
		test	byte ptr [edx+eax*2], 20h
		jz	short loc_74F
		cmp	edi, 1
		jle	short loc_744
		movzx	eax, byte ptr [ecx-1]
		test	byte ptr [edx+eax*2], 20h
		jnz	short loc_74F

loc_744:				; CODE XREF: _def_load_bio+1A4j
		dec	edi
		mov	ebp, 1
		jmp	loc_9F6
; ---------------------------------------------------------------------------

loc_74F:				; CODE XREF: _def_load_bio+189j
					; _def_load_bio+19Fj ...
		test	ebp, ebp
		jnz	loc_9F6
		mov	eax, [esp+54h+var_3C]
		xor	edi, edi
		mov	esi, [eax+4]
		push	esi
		push	ebx
		call	_clear_comments
		push	esi
		push	ebx
		call	_eat_ws
		mov	ebp, eax
		add	esp, 10h
		mov	eax, [ebx+4]
		mov	[esp+54h+var_28], ebp
		mov	dl, [ebp+0]
		movzx	ecx, dl
		test	byte ptr [eax+ecx*2], 8
		jnz	loc_9F0
		cmp	dl, 5Bh	; '['
		jnz	loc_83E
		lea	eax, [ebp+1]
		push	eax
		push	ebx
		call	_eat_ws
		mov	ebp, eax
		push	ebp
		push	ebx
		mov	edi, ebp
		call	_eat_alpha_numeric
		mov	esi, eax
		push	esi
		push	ebx
		call	_eat_ws
		add	esp, 18h
		mov	cl, [eax]
		cmp	cl, 5Dh	; ']'
		jz	short loc_7E7

$again$111:				; CODE XREF: _def_load_bio+251j
		test	cl, cl
		jz	loc_A60
		cmp	edi, eax
		jz	loc_A60
		push	eax
		push	ebx
		mov	edi, eax
		call	_eat_alpha_numeric
		mov	esi, eax
		push	esi
		push	ebx
		call	_eat_ws
		add	esp, 10h
		mov	cl, [eax]
		cmp	cl, 5Dh	; ']'
		jnz	short $again$111

loc_7E7:				; CODE XREF: _def_load_bio+225j
		push	ebp
		lea	eax, [esp+58h+var_38]
		mov	byte ptr [esi],	0
		push	eax
		push	0
		push	ebx
		call	_str_copy
		add	esp, 10h
		test	eax, eax
		jz	loc_A78
		mov	esi, [esp+54h+var_38]
		push	esi
		push	ebx
		call	__CONF_get_section
		mov	ebp, eax
		add	esp, 8
		mov	[esp+54h+var_24], ebp
		test	ebp, ebp
		jnz	short loc_833
		push	esi
		push	ebx
		call	__CONF_new_section
		mov	ebp, eax
		add	esp, 8
		mov	[esp+54h+var_24], ebp
		test	ebp, ebp
		jz	loc_B2C

loc_833:				; CODE XREF: _def_load_bio+285j
		mov	esi, [esp+54h+var_44]
		mov	edi, esi
		jmp	loc_9F2
; ---------------------------------------------------------------------------

loc_83E:				; CODE XREF: _def_load_bio+1F9j
		xor	eax, eax
		push	ebp
		push	ebx
		mov	[esp+5Ch+var_30], eax
		call	_eat_alpha_numeric
		mov	edi, eax
		add	esp, 8
		cmp	byte ptr [edi],	3Ah ; ':'
		jnz	short loc_877
		cmp	byte ptr [edi+1], 3Ah ;	':'
		jnz	short loc_877
		mov	byte ptr [edi],	0
		add	edi, 2
		mov	[esp+54h+var_30], ebp
		mov	ebp, edi
		push	edi
		push	ebx
		mov	[esp+5Ch+var_28], ebp
		call	_eat_alpha_numeric
		add	esp, 8
		mov	edi, eax

loc_877:				; CODE XREF: _def_load_bio+2BFj
					; _def_load_bio+2C5j
		push	edi
		push	ebx
		call	_eat_ws
		mov	esi, eax
		add	esp, 8
		cmp	byte ptr [esi],	3Dh ; '='
		jnz	loc_B68
		inc	esi
		mov	byte ptr [edi],	0
		push	esi
		push	ebx
		call	_eat_ws
		mov	ecx, [ebx+4]
		mov	edi, eax
		movzx	eax, byte ptr [esi]
		add	esp, 8
		test	byte ptr [ecx+eax*2], 8
		jnz	short loc_8B3

loc_8A8:				; CODE XREF: _def_load_bio+31Dj
		movzx	eax, byte ptr [esi+1]
		inc	esi
		test	byte ptr [ecx+eax*2], 8
		jz	short loc_8A8

loc_8B3:				; CODE XREF: _def_load_bio+312j
		dec	esi
		cmp	esi, edi
		jz	short loc_8C6

loc_8B8:				; CODE XREF: _def_load_bio+330j
		movzx	eax, byte ptr [esi]
		test	byte ptr [ecx+eax*2], 10h
		jz	short loc_8C6
		dec	esi
		cmp	esi, edi
		jnz	short loc_8B8

loc_8C6:				; CODE XREF: _def_load_bio+322j
					; _def_load_bio+32Bj
		push	167h
		push	offset ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@ ; ".\\crypto\\conf\\conf_def.c"
		push	0Ch
		mov	byte ptr [esi+1], 0
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		mov	[esp+54h+var_44], esi
		test	esi, esi
		jz	loc_B61
		mov	eax, [esp+54h+var_30]
		mov	ecx, ebp
		test	eax, eax
		cmovz	eax, [esp+54h+var_38]
		mov	[esp+54h+var_30], eax
		lea	edx, [ecx+1]
		nop	dword ptr [eax+00h]

loc_904:				; CODE XREF: _def_load_bio+375j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_904
		sub	ecx, edx
		push	16Dh
		push	offset ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@ ; ".\\crypto\\conf\\conf_def.c"
		lea	eax, [ecx+1]
		push	eax
		call	_CRYPTO_malloc
		mov	edx, eax
		mov	dword ptr [esi+8], 0
		add	esp, 0Ch
		mov	[esi+4], edx
		lea	ebp, [esi+8]
		test	edx, edx
		jz	loc_B5A
		mov	ecx, [esp+54h+var_28]
		lea	esi, [ecx+1]
		nop	dword ptr [eax]

loc_944:				; CODE XREF: _def_load_bio+3B5j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_944
		sub	ecx, esi
		lea	eax, [ecx+1]
		push	eax
		push	[esp+58h+var_28]
		push	edx
		call	_BUF_strlcpy
		push	edi
		push	ebp
		mov	ebp, [esp+68h+var_30]
		push	ebp
		push	ebx
		call	_str_copy
		add	esp, 1Ch
		test	eax, eax
		jz	loc_A78
		mov	ecx, [esp+54h+var_38]
		mov	eax, ebp

loc_979:				; CODE XREF: _def_load_bio+3FFj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_999
		test	dl, dl
		jz	short loc_995
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_999
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_979

loc_995:				; CODE XREF: _def_load_bio+3EDj
		xor	eax, eax
		jmp	short loc_99E
; ---------------------------------------------------------------------------

loc_999:				; CODE XREF: _def_load_bio+3E9j
					; _def_load_bio+3F5j
		sbb	eax, eax
		or	eax, 1

loc_99E:				; CODE XREF: _def_load_bio+403j
		test	eax, eax
		jz	short loc_9CF
		push	ebp
		push	ebx
		call	__CONF_get_section
		add	esp, 8
		test	eax, eax
		jnz	short loc_9D3
		push	ebp
		push	ebx
		call	__CONF_new_section
		add	esp, 8
		test	eax, eax
		jnz	short loc_9D3
		push	17Dh
		push	offset ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@ ; ".\\crypto\\conf\\conf_def.c"
		push	67h ; 'g'
		jmp	loc_A6C
; ---------------------------------------------------------------------------

loc_9CF:				; CODE XREF: _def_load_bio+40Cj
		mov	eax, [esp+54h+var_24]

loc_9D3:				; CODE XREF: _def_load_bio+41Aj
					; _def_load_bio+428j
		mov	esi, [esp+54h+var_44]
		push	esi
		push	eax
		push	ebx
		call	__CONF_add_string
		add	esp, 0Ch
		test	eax, eax
		jz	loc_B3D
		xor	esi, esi
		mov	edi, esi
		jmp	short loc_9F2
; ---------------------------------------------------------------------------

loc_9F0:				; CODE XREF: _def_load_bio+1F0j
		mov	esi, edi

loc_9F2:				; CODE XREF: _def_load_bio+2A5j
					; _def_load_bio+45Aj
		mov	ebp, [esp+54h+var_34]

loc_9F6:				; CODE XREF: _def_load_bio+1B6j
					; _def_load_bio+1BDj
		lea	eax, [edi+200h]
		push	eax
		push	[esp+58h+var_3C]
		call	_BUF_MEM_grow
		add	esp, 8
		test	eax, eax
		jnz	loc_694

loc_A11:				; CODE XREF: _def_load_bio+F4j
		push	0F9h ; 'ù'
		push	offset ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@ ; ".\\crypto\\conf\\conf_def.c"
		push	7
		push	79h ; 'y'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		jmp	short loc_A7C
; ---------------------------------------------------------------------------

loc_A2B:				; CODE XREF: _def_load_bio+13Fj
		push	[esp+54h+var_3C]
		call	_BUF_MEM_free
		mov	ebp, [esp+58h+var_38]
		add	esp, 4
		test	ebp, ebp
		jz	short loc_A48
		push	ebp
		call	_CRYPTO_free
		add	esp, 4

loc_A48:				; CODE XREF: _def_load_bio+4A9j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		mov	ecx, [esp+44h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_A60:				; CODE XREF: _def_load_bio+229j
					; _def_load_bio+231j
		push	13Eh
		push	offset ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@ ; ".\\crypto\\conf\\conf_def.c"
		push	64h ; 'd'

loc_A6C:				; CODE XREF: _def_load_bio+436j
					; _def_load_bio+5A4j ...
		push	79h ; 'y'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h

loc_A78:				; CODE XREF: _def_load_bio+269j
					; _def_load_bio+3D9j
		mov	esi, [esp+54h+var_44]

loc_A7C:				; CODE XREF: _def_load_bio+495j
					; _def_load_bio+5C1j
		mov	edi, [esp+54h+var_40]

$err$110:				; CODE XREF: _def_load_bio+95j
					; _def_load_bio+D8j
		push	[esp+54h+var_3C]
		call	_BUF_MEM_free
		mov	eax, [esp+58h+var_38]
		add	esp, 4
		test	eax, eax
		jz	short loc_A9D
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_A9D:				; CODE XREF: _def_load_bio+4FEj
		mov	ebp, [esp+54h+var_2C]

loc_AA1:				; CODE XREF: _def_load_bio+61j
		test	edi, edi
		jz	short loc_AA7
		mov	[edi], ebp

loc_AA7:				; CODE XREF: _def_load_bio+50Fj
		push	ebp
		push	offset ??_C@_03JALODAI@?$CFld?$AA@ ; "%ld"
		lea	eax, [esp+5Ch+var_14]
		push	0Dh
		push	eax
		call	_BIO_snprintf
		lea	eax, [esp+64h+var_14]
		push	eax
		push	offset ??_C@_05KFEICJBI@line?5?$AA@ ; "line "
		push	2
		call	_ERR_add_error_data
		mov	eax, [ebx+8]
		add	esp, 1Ch
		cmp	[esp+54h+var_18], eax
		jz	short loc_AEA
		test	eax, eax
		jz	short loc_AEA
		push	eax
		call	_CONF_free
		add	esp, 4
		mov	dword ptr [ebx+8], 0

loc_AEA:				; CODE XREF: _def_load_bio+540j
					; _def_load_bio+544j
		test	esi, esi
		jz	short loc_B17
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_AFE
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_AFE:				; CODE XREF: _def_load_bio+55Fj
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_B0E
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_B0E:				; CODE XREF: _def_load_bio+56Fj
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_B17:				; CODE XREF: _def_load_bio+558j
		mov	ecx, [esp+54h+var_4]
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_B2C:				; CODE XREF: _def_load_bio+299j
		push	148h
		push	offset ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@ ; ".\\crypto\\conf\\conf_def.c"
		push	67h ; 'g'
		jmp	loc_A6C
; ---------------------------------------------------------------------------

loc_B3D:				; CODE XREF: _def_load_bio+450j
		push	184h

loc_B42:				; CODE XREF: _def_load_bio+5CBj
					; _def_load_bio+5D2j
		push	offset ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@ ; ".\\crypto\\conf\\conf_def.c"
		push	41h ; 'A'
		push	79h ; 'y'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_A7C
; ---------------------------------------------------------------------------

loc_B5A:				; CODE XREF: _def_load_bio+3A0j
		push	170h
		jmp	short loc_B42
; ---------------------------------------------------------------------------

loc_B61:				; CODE XREF: _def_load_bio+352j
		push	168h
		jmp	short loc_B42
; ---------------------------------------------------------------------------

loc_B68:				; CODE XREF: _def_load_bio+2F2j
		push	159h
		push	offset ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@ ; ".\\crypto\\conf\\conf_def.c"
		push	65h ; 'e'
		jmp	loc_A6C
_def_load_bio	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B7Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_def_dump	proc near		; DATA XREF: .data:00000418o
					; .data:00000440o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		mov	eax, [esp+4+arg_0]
		push	offset _dump_value_LHASH_DOALL_ARG
		push	dword ptr [eax+8]
		call	_lh_doall_arg
		add	esp, 0Ch
		mov	eax, 1
		retn
_def_dump	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B9Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_def_is_number	proc near		; DATA XREF: .data:0000041Co
					; .data:00000444o

arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		mov	eax, [esp+arg_0]
		movzx	ecx, [esp+arg_4]
		mov	eax, [eax+4]
		movzx	eax, word ptr [eax+ecx*2]
		and	eax, 1
		retn
_def_is_number	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BB0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_def_to_int	proc near		; DATA XREF: .data:00000420o
					; .data:00000448o

arg_4		= byte ptr  8

		movsx	eax, [esp+arg_4]
		sub	eax, 30h ; '0'
		retn
_def_to_int	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BBCh
		public _CONF_def_version
_CONF_def_version db 'CONF_def part of OpenSSL 1.0.2h  3 May 2016',0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BE8h
; COMDAT (pick any)
		public ??_C@_0BA@EEIGDPJJ@OpenSSL?5default?$AA@
; `string'
??_C@_0BA@EEIGDPJJ@OpenSSL?5default?$AA@ db 'OpenSSL default',0
					; DATA XREF: .data:_default_methodo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BF8h
; COMDAT (pick any)
		public ??_C@_05LKMDHMJN@WIN32?$AA@
; `string'
??_C@_05LKMDHMJN@WIN32?$AA@ db 'WIN32',0 ; DATA XREF: .data:_WIN32_methodo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C00h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NCONF_WIN32
_NCONF_WIN32	proc near
		mov	eax, offset _WIN32_method
		retn
_NCONF_WIN32	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C08h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NCONF_default
_NCONF_default	proc near
		mov	eax, offset _default_method
		retn
_NCONF_default	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C10h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_clear_comments	proc near		; CODE XREF: _def_load_bio+1CEp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, 800h
		mov	edx, [eax+4]
		mov	eax, [esp+4+arg_4]
		movzx	ecx, byte ptr [eax]
		test	[edx+ecx*2], si
		jnz	short loc_C44
		nop	word ptr [eax+eax+00h]

loc_C30:				; CODE XREF: _clear_comments+32j
		movzx	ecx, byte ptr [eax]
		test	byte ptr [edx+ecx*2], 10h
		jz	short loc_C49
		movzx	ecx, byte ptr [eax+1]
		inc	eax
		test	[edx+ecx*2], si
		jz	short loc_C30

loc_C44:				; CODE XREF: _clear_comments+18j
		mov	byte ptr [eax],	0
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_C49:				; CODE XREF: _clear_comments+27j
		movzx	ecx, byte ptr [eax]
		push	ebx
		push	edi
		test	byte ptr [edx+ecx*2], 80h
		jnz	loc_D17
		nop	dword ptr [eax+eax+00000000h]

loc_C60:				; CODE XREF: _clear_comments+101j
		mov	bl, [eax]
		movzx	ecx, bl
		movzx	ecx, word ptr [edx+ecx*2]
		test	ecx, 400h
		jz	short loc_CA6
		inc	eax
		movsx	edi, bl
		mov	bl, [eax]
		movzx	ecx, bl
		test	byte ptr [edx+ecx*2], 8
		jnz	short loc_C9D

loc_C80:				; CODE XREF: _clear_comments+8Bj
		movsx	ecx, bl
		cmp	ecx, edi
		jnz	short loc_C90
		movsx	ecx, byte ptr [eax+1]
		cmp	ecx, edi
		jnz	short loc_C9D
		inc	eax

loc_C90:				; CODE XREF: _clear_comments+75j
		mov	bl, [eax+1]
		inc	eax
		movzx	ecx, bl
		test	byte ptr [edx+ecx*2], 8
		jz	short loc_C80

loc_C9D:				; CODE XREF: _clear_comments+6Ej
					; _clear_comments+7Dj
		movsx	ecx, byte ptr [eax]
		cmp	ecx, edi
		jnz	short loc_D0A
		jmp	short loc_D09
; ---------------------------------------------------------------------------

loc_CA6:				; CODE XREF: _clear_comments+5Fj
		test	cl, 40h
		jz	short loc_CF0
		inc	eax
		movsx	edi, bl
		mov	bl, [eax]
		movzx	ecx, bl
		test	byte ptr [edx+ecx*2], 8
		lea	esi, [edx+ecx*2]
		jnz	short loc_CE7
		nop	dword ptr [eax]

loc_CC0:				; CODE XREF: _clear_comments+D5j
		movsx	ecx, bl
		cmp	ecx, edi
		jz	short loc_CE7
		test	byte ptr [esi],	20h
		jz	short loc_CD7
		movzx	ecx, byte ptr [eax+1]
		inc	eax
		test	byte ptr [edx+ecx*2], 8
		jnz	short loc_D0A

loc_CD7:				; CODE XREF: _clear_comments+BAj
		mov	bl, [eax+1]
		inc	eax
		movzx	ecx, bl
		test	byte ptr [edx+ecx*2], 8
		lea	esi, [edx+ecx*2]
		jz	short loc_CC0

loc_CE7:				; CODE XREF: _clear_comments+ABj
					; _clear_comments+B5j
		movsx	ecx, byte ptr [eax]
		cmp	ecx, edi
		jnz	short loc_D0A
		jmp	short loc_D09
; ---------------------------------------------------------------------------

loc_CF0:				; CODE XREF: _clear_comments+99j
		test	cl, 20h
		jz	short loc_D04
		movzx	ecx, byte ptr [eax+1]
		test	byte ptr [edx+ecx*2], 8
		jnz	short loc_D09
		add	eax, 2
		jmp	short loc_D0A
; ---------------------------------------------------------------------------

loc_D04:				; CODE XREF: _clear_comments+E3j
		test	cl, 8
		jnz	short loc_D1A

loc_D09:				; CODE XREF: _clear_comments+94j
					; _clear_comments+DEj ...
		inc	eax

loc_D0A:				; CODE XREF: _clear_comments+92j
					; _clear_comments+C5j ...
		movzx	ecx, byte ptr [eax]
		test	byte ptr [edx+ecx*2], 80h
		jz	loc_C60

loc_D17:				; CODE XREF: _clear_comments+42j
		mov	byte ptr [eax],	0

loc_D1A:				; CODE XREF: _clear_comments+F7j
		pop	edi
		pop	ebx
		pop	esi
		retn
_clear_comments	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D20h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dump_value_LHASH_DOALL_ARG proc near	; DATA XREF: _def_dump+8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [eax+4]
		test	ecx, ecx
		jz	short loc_D43
		push	dword ptr [eax+8]
		push	ecx
		push	dword ptr [eax]
		push	offset ??_C@_0M@CLCLGKAH@?$FL?$CFs?$FN?5?$CFs?$DN?$CFs?6?$AA@ ;	"[%s] %s=%s\n"
		push	[esp+10h+arg_4]
		call	_BIO_printf
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_D43:				; CODE XREF: _dump_value_LHASH_DOALL_ARG+9j
		push	dword ptr [eax]
		push	offset ??_C@_07PNLMPOMH@?$FL?$FL?$CFs?$FN?$FN?6?$AA@ ; "[[%s]]\n"
		push	[esp+8+arg_4]
		call	_BIO_printf
		add	esp, 0Ch
		retn
_dump_value_LHASH_DOALL_ARG endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D58h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dump_value_doall_arg proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [eax+4]
		test	ecx, ecx
		jz	short loc_D7B
		push	dword ptr [eax+8]
		push	ecx
		push	dword ptr [eax]
		push	offset ??_C@_0M@CLCLGKAH@?$FL?$CFs?$FN?5?$CFs?$DN?$CFs?6?$AA@ ;	"[%s] %s=%s\n"
		push	[esp+10h+arg_4]
		call	_BIO_printf
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_D7B:				; CODE XREF: _dump_value_doall_arg+9j
		push	dword ptr [eax]
		push	offset ??_C@_07PNLMPOMH@?$FL?$FL?$CFs?$FN?$FN?6?$AA@ ; "[[%s]]\n"
		push	[esp+8+arg_4]
		call	_BIO_printf
		add	esp, 0Ch
		retn
_dump_value_doall_arg endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D90h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_eat_alpha_numeric proc	near		; CODE XREF: _def_load_bio+20Fp
					; _def_load_bio+23Bp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [eax+4]
		mov	eax, [esp+4+arg_4]
		nop	dword ptr [eax+00h]

loc_DA0:				; CODE XREF: _eat_alpha_numeric+27j
					; _eat_alpha_numeric+2Cj ...
		movzx	ecx, byte ptr [eax]
		movzx	ecx, word ptr [esi+ecx*2]
		test	cl, 20h
		jz	short loc_DBE
		movzx	ecx, byte ptr [eax+1]
		test	byte ptr [esi+ecx*2], 8
		jz	short loc_DB9
		inc	eax
		jmp	short loc_DA0
; ---------------------------------------------------------------------------

loc_DB9:				; CODE XREF: _eat_alpha_numeric+24j
		add	eax, 2
		jmp	short loc_DA0
; ---------------------------------------------------------------------------

loc_DBE:				; CODE XREF: _eat_alpha_numeric+1Aj
		test	ecx, 307h
		jz	short loc_DC9
		inc	eax
		jmp	short loc_DA0
; ---------------------------------------------------------------------------

loc_DC9:				; CODE XREF: _eat_alpha_numeric+34j
		pop	esi
		retn
_eat_alpha_numeric endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0DCCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_eat_ws		proc near		; CODE XREF: _def_load_bio+1D5p
					; _def_load_bio+204p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	edx, [eax+4]
		mov	eax, [esp+arg_4]
		movzx	ecx, byte ptr [eax]
		test	byte ptr [edx+ecx*2], 10h
		lea	ecx, [edx+ecx*2]
		jz	short locret_DF6

loc_DE3:				; CODE XREF: _eat_ws+28j
		test	byte ptr [ecx],	8
		jnz	short locret_DF6
		movzx	ecx, byte ptr [eax+1]
		inc	eax
		test	byte ptr [edx+ecx*2], 10h
		lea	ecx, [edx+ecx*2]
		jnz	short loc_DE3

locret_DF6:				; CODE XREF: _eat_ws+15j _eat_ws+1Aj
		retn
_eat_ws		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0DF8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_scan_dquote	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		push	esi
		push	edi
		movsx	esi, byte ptr [eax]
		inc	eax
		mov	edi, [ecx+4]
		mov	dl, [eax]
		movzx	ecx, dl
		test	byte ptr [edi+ecx*2], 8
		jnz	short loc_E39
		nop	dword ptr [eax+00h]

loc_E18:				; CODE XREF: _scan_dquote+3Fj
		movsx	ecx, dl
		cmp	ecx, esi
		jnz	short loc_E2C
		movsx	ecx, byte ptr [eax+1]
		lea	edx, [eax+1]
		cmp	ecx, esi
		jnz	short loc_E39
		mov	eax, edx

loc_E2C:				; CODE XREF: _scan_dquote+25j
		mov	dl, [eax+1]
		inc	eax
		movzx	ecx, dl
		test	byte ptr [edi+ecx*2], 8
		jz	short loc_E18

loc_E39:				; CODE XREF: _scan_dquote+1Aj
					; _scan_dquote+30j
		movsx	ecx, byte ptr [eax]
		pop	edi
		cmp	ecx, esi
		pop	esi
		jnz	short locret_E43
		inc	eax

locret_E43:				; CODE XREF: _scan_dquote+48j
		retn
_scan_dquote	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E44h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_scan_quote	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		push	ebx
		push	esi
		mov	bl, [eax+1]
		mov	esi, [ecx+4]
		push	edi
		movsx	edi, byte ptr [eax]
		inc	eax
		movzx	ecx, bl
		test	byte ptr [esi+ecx*2], 8
		lea	edx, [esi+ecx*2]
		jnz	short loc_E8C

loc_E65:				; CODE XREF: _scan_quote+46j
		movsx	ecx, bl
		cmp	ecx, edi
		jz	short loc_E8C
		test	byte ptr [edx],	20h
		jz	short loc_E7C
		movzx	ecx, byte ptr [eax+1]
		inc	eax
		test	byte ptr [esi+ecx*2], 8
		jnz	short loc_E94

loc_E7C:				; CODE XREF: _scan_quote+2Bj
		mov	bl, [eax+1]
		inc	eax
		movzx	ecx, bl
		test	byte ptr [esi+ecx*2], 8
		lea	edx, [esi+ecx*2]
		jz	short loc_E65

loc_E8C:				; CODE XREF: _scan_quote+1Fj
					; _scan_quote+26j
		movsx	ecx, byte ptr [eax]
		cmp	ecx, edi
		jnz	short loc_E94
		inc	eax

loc_E94:				; CODE XREF: _scan_quote+36j
					; _scan_quote+4Dj
		pop	edi
		pop	esi
		pop	ebx
		retn
_scan_quote	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E98h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_str_copy	proc near		; CODE XREF: _def_load_bio+25Fp
					; _def_load_bio+3CFp

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 14h
		call	__chkstk
		push	ebx
		push	edi
		mov	[esp+1Ch+var_4], 0
		xor	edi, edi
		call	_BUF_MEM_new
		mov	ebx, eax
		mov	[esp+1Ch+var_14], ebx
		test	ebx, ebx
		jnz	short loc_EC3
		pop	edi
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_EC3:				; CODE XREF: _str_copy+23j
		push	esi
		mov	esi, [esp+20h+arg_C]
		mov	ecx, esi
		lea	edx, [ecx+1]

loc_ECD:				; CODE XREF: _str_copy+3Aj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_ECD
		sub	ecx, edx
		push	ebp
		lea	eax, [ecx+1]
		push	eax
		push	ebx
		call	_BUF_MEM_grow
		add	esp, 8
		test	eax, eax
		jz	loc_127F

loc_EEC:				; CODE XREF: _str_copy+30Ej
		mov	ebp, 9
		nop	dword ptr [eax+00000000h]

loc_EF8:				; CODE XREF: _str_copy+CEj
					; _str_copy+D1j ...
		mov	eax, [esp+24h+arg_0]
		mov	cl, [esi]
		mov	edx, [eax+4]
		movzx	eax, cl
		movzx	eax, word ptr [edx+eax*2]
		test	al, 40h
		jz	short loc_F6B
		inc	esi
		movsx	ebp, cl
		mov	cl, [esi]
		movzx	eax, cl
		movzx	ebx, word ptr [edx+eax*2]
		test	bl, 8
		jnz	short loc_F58

loc_F1E:				; CODE XREF: _str_copy+BEj
		movsx	eax, cl
		cmp	eax, ebp
		jz	short loc_F58
		test	bl, 20h
		jz	short loc_F37
		mov	cl, [esi+1]
		inc	esi
		movzx	eax, cl
		test	byte ptr [edx+eax*2], 8
		jnz	short loc_F58

loc_F37:				; CODE XREF: _str_copy+90j
		mov	eax, [esp+24h+var_14]
		inc	esi
		mov	eax, [eax+4]
		mov	[edi+eax], cl
		inc	edi
		mov	eax, [esp+24h+arg_0]
		mov	cl, [esi]
		mov	edx, [eax+4]
		movzx	eax, cl
		movzx	ebx, word ptr [edx+eax*2]
		test	bl, 8
		jz	short loc_F1E

loc_F58:				; CODE XREF: _str_copy+84j
					; _str_copy+8Bj ...
		movsx	eax, byte ptr [esi]
		mov	ebx, [esp+24h+var_14]
		cmp	eax, ebp
		mov	ebp, 9
		jnz	short loc_EF8
		inc	esi
		jmp	short loc_EF8
; ---------------------------------------------------------------------------

loc_F6B:				; CODE XREF: _str_copy+72j
		test	eax, 400h
		jz	short loc_FD6
		mov	bl, [esi+1]
		inc	esi
		movzx	eax, bl
		movsx	ebp, cl
		test	byte ptr [edx+eax*2], 8
		jnz	short loc_FBC
		nop	word ptr [eax+eax+00h]

loc_F88:				; CODE XREF: _str_copy+122j
		movsx	eax, bl
		cmp	eax, ebp
		jnz	short loc_F9C
		movsx	eax, byte ptr [esi+1]
		lea	ecx, [esi+1]
		cmp	eax, ebp
		jnz	short loc_FBC
		mov	esi, ecx

loc_F9C:				; CODE XREF: _str_copy+F5j
		mov	eax, [esp+24h+var_14]
		mov	ecx, [eax+4]
		mov	al, [esi]
		inc	esi
		mov	[edi+ecx], al
		inc	edi
		mov	eax, [esp+24h+arg_0]
		mov	bl, [esi]
		movzx	ecx, bl
		mov	eax, [eax+4]
		test	byte ptr [eax+ecx*2], 8
		jz	short loc_F88

loc_FBC:				; CODE XREF: _str_copy+E8j
					; _str_copy+100j
		movsx	eax, byte ptr [esi]
		mov	ebx, [esp+24h+var_14]
		cmp	eax, ebp
		mov	ebp, 9
		jnz	loc_EF8
		inc	esi
		jmp	loc_EF8
; ---------------------------------------------------------------------------

loc_FD6:				; CODE XREF: _str_copy+D8j
		test	al, 20h
		jz	short loc_103B
		mov	cl, [esi+1]
		add	esi, 2
		movzx	eax, cl
		test	byte ptr [edx+eax*2], 8
		jnz	loc_124A
		cmp	cl, 72h	; 'r'
		jnz	short loc_1000
		mov	eax, [ebx+4]
		mov	dl, 0Dh
		mov	[edi+eax], dl
		inc	edi
		jmp	loc_EF8
; ---------------------------------------------------------------------------

loc_1000:				; CODE XREF: _str_copy+158j
		cmp	cl, 6Eh	; 'n'
		jnz	short loc_1013
		mov	eax, [ebx+4]
		mov	dl, 0Ah
		mov	[edi+eax], dl
		inc	edi
		jmp	loc_EF8
; ---------------------------------------------------------------------------

loc_1013:				; CODE XREF: _str_copy+16Bj
		cmp	cl, 62h	; 'b'
		jnz	short loc_1026
		mov	eax, [ebx+4]
		mov	dl, 8
		mov	[edi+eax], dl
		inc	edi
		jmp	loc_EF8
; ---------------------------------------------------------------------------

loc_1026:				; CODE XREF: _str_copy+17Ej
		mov	eax, [ebx+4]
		cmp	cl, 74h	; 't'
		movzx	edx, cl
		cmovz	edx, ebp
		mov	[edi+eax], dl
		inc	edi
		jmp	loc_EF8
; ---------------------------------------------------------------------------

loc_103B:				; CODE XREF: _str_copy+140j
		test	al, 8
		jnz	loc_124A
		cmp	cl, 24h	; '$'
		jnz	loc_11B4
		xor	eax, eax
		lea	ebp, [esi+1]
		mov	[esp+24h+var_8], eax
		mov	al, [ebp+0]
		cmp	al, 7Bh	; '{'
		jnz	short loc_1067
		mov	[esp+24h+var_10], 7Dh ;	'}'
		inc	ebp
		jmp	short loc_107C
; ---------------------------------------------------------------------------

loc_1067:				; CODE XREF: _str_copy+1C2j
		cmp	al, 28h	; '('
		jnz	short loc_1076
		mov	[esp+24h+var_10], 29h ;	')'
		inc	ebp
		jmp	short loc_107C
; ---------------------------------------------------------------------------

loc_1076:				; CODE XREF: _str_copy+1D1j
		xor	ecx, ecx
		mov	[esp+24h+var_10], ecx

loc_107C:				; CODE XREF: _str_copy+1CDj
					; _str_copy+1DCj
		mov	eax, [esp+24h+arg_4]
		mov	ecx, 107h
		mov	[esp+24h+var_C], eax
		mov	ebx, ebp
		movzx	eax, byte ptr [ebp+0]
		test	[edx+eax*2], cx
		mov	ecx, [esp+24h+var_10]
		jz	short loc_10AD
		mov	ecx, 107h

loc_109E:				; CODE XREF: _str_copy+20Fj
		movzx	eax, byte ptr [ebx+1]
		inc	ebx
		test	[edx+eax*2], cx
		jnz	short loc_109E
		mov	ecx, [esp+24h+var_10]

loc_10AD:				; CODE XREF: _str_copy+1FFj
		cmp	byte ptr [ebx],	3Ah ; ':'
		jnz	short loc_1107
		cmp	byte ptr [ebx+1], 3Ah ;	':'
		jnz	short loc_1107
		mov	eax, [esp+24h+arg_0]
		mov	edx, 107h
		mov	byte ptr [ebx],	0
		mov	[esp+24h+var_8], ebx
		add	ebx, 2
		mov	[esp+24h+var_C], ebp
		mov	ebp, ebx
		mov	ecx, [eax+4]
		mov	[esp+24h+var_4], 3Ah ; ':'
		movzx	eax, byte ptr [ebx]
		test	[ecx+eax*2], dx
		mov	edx, [esp+24h+var_C]
		jz	loc_11AB
		mov	edx, 107h
		nop	word ptr [eax+eax+00h]

loc_10F8:				; CODE XREF: _str_copy+269j
		movzx	eax, byte ptr [ebx+1]
		inc	ebx
		test	[ecx+eax*2], dx
		jnz	short loc_10F8
		mov	ecx, [esp+24h+var_10]

loc_1107:				; CODE XREF: _str_copy+218j
					; _str_copy+21Ej
		mov	edx, [esp+24h+var_C]

loc_110B:				; CODE XREF: _str_copy+317j
		movsx	eax, byte ptr [ebx]
		mov	[esp+24h+var_C], eax
		mov	byte ptr [ebx],	0
		mov	[esp+24h+var_10], ebx
		test	ecx, ecx
		jz	short loc_1126
		cmp	eax, ecx
		jnz	loc_11C1
		inc	ebx

loc_1126:				; CODE XREF: _str_copy+283j
		push	ebp
		push	edx
		push	[esp+2Ch+arg_0]
		call	__CONF_get_string
		mov	ebp, eax
		add	esp, 0Ch
		mov	eax, [esp+24h+var_8]
		test	eax, eax
		jz	short loc_1144
		mov	ecx, [esp+24h+var_4]
		mov	[eax], cl

loc_1144:				; CODE XREF: _str_copy+2A4j
		mov	ecx, [esp+24h+var_10]
		mov	eax, [esp+24h+var_C]
		mov	[ecx], al
		test	ebp, ebp
		jz	loc_121B
		mov	ecx, ebp
		lea	edx, [ecx+1]

loc_115B:				; CODE XREF: _str_copy+2C8j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_115B
		sub	ecx, edx
		sub	ecx, ebx
		add	ecx, esi
		mov	esi, [esp+24h+var_14]
		add	ecx, [esi]
		push	ecx
		push	esi
		call	_BUF_MEM_grow_clean
		add	esp, 8
		test	eax, eax
		jz	short loc_11F0
		mov	cl, [ebp+0]
		test	cl, cl
		jz	short loc_1196
		sub	ebp, edi
		nop	dword ptr [eax]

loc_1188:				; CODE XREF: _str_copy+2FCj
		mov	eax, [esi+4]
		mov	[edi+eax], cl
		inc	edi
		mov	cl, [edi+ebp]
		test	cl, cl
		jnz	short loc_1188

loc_1196:				; CODE XREF: _str_copy+2E9j
		mov	ecx, [esp+24h+var_10]
		mov	esi, ebx
		mov	eax, [esp+24h+var_C]
		mov	ebx, [esp+24h+var_14]
		mov	[ecx], al
		jmp	loc_EEC
; ---------------------------------------------------------------------------

loc_11AB:				; CODE XREF: _str_copy+24Fj
		mov	ecx, [esp+24h+var_10]
		jmp	loc_110B
; ---------------------------------------------------------------------------

loc_11B4:				; CODE XREF: _str_copy+1AEj
		mov	eax, [ebx+4]
		mov	[edi+eax], cl
		inc	edi
		inc	esi
		jmp	loc_EF8
; ---------------------------------------------------------------------------

loc_11C1:				; CODE XREF: _str_copy+287j
		push	234h
		push	offset ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@ ; ".\\crypto\\conf\\conf_def.c"
		push	66h ; 'f'
		push	65h ; 'e'
		push	0Eh
		call	_ERR_put_error
		mov	esi, [esp+38h+var_14]
		add	esp, 14h
		push	esi
		call	_BUF_MEM_free
		add	esp, 4
		xor	eax, eax
		pop	ebp
		pop	esi
		pop	edi
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_11F0:				; CODE XREF: _str_copy+2E2j
		push	24Dh
		push	offset ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@ ; ".\\crypto\\conf\\conf_def.c"
		push	41h ; 'A'
		push	65h ; 'e'
		push	0Eh
		call	_ERR_put_error
		add	esp, 14h
		push	esi
		call	_BUF_MEM_free
		add	esp, 4
		xor	eax, eax
		pop	ebp
		pop	esi
		pop	edi
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_121B:				; CODE XREF: _str_copy+2B8j
		push	248h
		push	offset ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@ ; ".\\crypto\\conf\\conf_def.c"
		push	68h ; 'h'
		push	65h ; 'e'
		push	0Eh
		call	_ERR_put_error
		mov	esi, [esp+38h+var_14]
		add	esp, 14h
		push	esi
		call	_BUF_MEM_free
		add	esp, 4
		xor	eax, eax
		pop	ebp
		pop	esi
		pop	edi
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_124A:				; CODE XREF: _str_copy+14Fj
					; _str_copy+1A5j
		mov	eax, [ebx+4]
		mov	esi, [esp+24h+arg_8]
		mov	byte ptr [edi+eax], 0
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1264
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_1264:				; CODE XREF: _str_copy+3C1j
		mov	eax, [ebx+4]
		push	ebx
		mov	[esi], eax
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, 1
		pop	ebp
		pop	esi
		pop	edi
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_127F:				; CODE XREF: _str_copy+4Ej
		mov	esi, ebx

$err$100:
		push	esi
		call	_BUF_MEM_free
		add	esp, 4
		xor	eax, eax
		pop	ebp
		pop	esi
		pop	edi
		pop	ebx
		add	esp, 14h
		retn
_str_copy	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1294h
; COMDAT (pick any)
		public ??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@
; `string'
??_C@_0BJ@HNHBHKLJ@?4?2crypto?2conf?2conf_def?4c?$AA@ db '.\crypto\conf\conf_def.c',0
					; DATA XREF: _def_create+6o
					; _def_load+2Eo ...
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 12B0h
; COMDAT (pick any)
		public ??_C@_02JDPG@rb?$AA@
; `string'
??_C@_02JDPG@rb?$AA@ db	72h, 62h, 0	; DATA XREF: _def_load+1o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 12B4h
; COMDAT (pick any)
		public ??_C@_07DLHCIBDH@default?$AA@
; `string'
??_C@_07DLHCIBDH@default?$AA@ db 'default',0 ; DATA XREF: _def_load_bio:loc_5FAo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 12BCh
; COMDAT (pick any)
		public ??_C@_03JALODAI@?$CFld?$AA@
; `string'
??_C@_03JALODAI@?$CFld?$AA@ db '%ld',0  ; DATA XREF: _def_load_bio+514o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 12C0h
; COMDAT (pick any)
		public ??_C@_05KFEICJBI@line?5?$AA@
; `string'
??_C@_05KFEICJBI@line?5?$AA@ db	'line ',0 ; DATA XREF: _def_load_bio+52Ao
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 12C8h
; COMDAT (pick any)
		public ??_C@_0M@CLCLGKAH@?$FL?$CFs?$FN?5?$CFs?$DN?$CFs?6?$AA@
; `string'
??_C@_0M@CLCLGKAH@?$FL?$CFs?$FN?5?$CFs?$DN?$CFs?6?$AA@ db '[%s] %s=%s',0Ah,0
					; DATA XREF: _dump_value_LHASH_DOALL_ARG+11o
					; _dump_value_doall_arg+11o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 12D4h
; COMDAT (pick any)
		public ??_C@_07PNLMPOMH@?$FL?$FL?$CFs?$FN?$FN?6?$AA@
; `string'
??_C@_07PNLMPOMH@?$FL?$FL?$CFs?$FN?$FN?6?$AA@ db '[[%s]]',0Ah,0
					; DATA XREF: _dump_value_LHASH_DOALL_ARG+25o
					; _dump_value_doall_arg+25o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _def_create+Dp
					; _def_load_bio+342p ...
		extrn _CRYPTO_free:near	; CODE XREF: _def_create+2Dp
					; _def_destroy+10p ...
		extrn _BUF_MEM_new:near	; CODE XREF: _def_load_bio+3Cp
					; _str_copy+16p
		extrn _BUF_MEM_free:near ; CODE	XREF: _def_load_bio+49Bp
					; _def_load_bio+4F0p ...
		extrn _BUF_MEM_grow:near ; CODE	XREF: _def_load_bio+EAp
					; _def_load_bio+46Dp ...
		extrn _BUF_MEM_grow_clean:near ; CODE XREF: _str_copy+2D8p
		extrn _BUF_strdup:near	; CODE XREF: _def_load_bio+6Bp
		extrn _BUF_strlcpy:near	; CODE XREF: _def_load_bio+3C2p
		extrn _BIO_new_file:near ; CODE	XREF: _def_load+Ap
		extrn _BIO_free:near	; CODE XREF: _def_load+73p
		extrn _BIO_gets:near	; CODE XREF: _def_load_bio+116p
		extrn _BIO_printf:near	; CODE XREF: _dump_value_LHASH_DOALL_ARG+1Ap
					; _dump_value_LHASH_DOALL_ARG+2Ep ...
		extrn _BIO_snprintf:near ; CODE	XREF: _def_load_bio+520p
		extrn _lh_doall_arg:near ; CODE	XREF: _def_dump+10p
		extrn _ERR_put_error:near ; CODE XREF: _def_load+39p
					; _def_load+55p ...
		extrn _ERR_peek_last_error:near	; CODE XREF: _def_load+18p
		extrn _ERR_add_error_data:near ; CODE XREF: _def_load_bio+531p
		extrn _CONF_free:near	; CODE XREF: _def_load_bio+547p
		extrn __CONF_new_section:near ;	CODE XREF: _def_load_bio+B0p
					; _def_load_bio+289p ...
		extrn __CONF_get_section:near ;	CODE XREF: _def_load_bio+275p
					; _def_load_bio+410p
		extrn __CONF_add_string:near ; CODE XREF: _def_load_bio+446p
		extrn __CONF_get_string:near ; CODE XREF: _str_copy+294p
		extrn __CONF_new_data:near ; CODE XREF:	_def_load_bio+9Bp
		extrn __CONF_free_data:near ; CODE XREF: _def_destroy+Ap
					; _def_destroy_data+Ap
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _def_load_bio+4C3p
					; _def_load_bio+58Fp
		extrn __chkstk:near	; CODE XREF: _def_load_bio+5p
					; _str_copy+5p
		extrn ___security_cookie:near ;	DATA XREF: _def_load_bio+Ar


		end
