;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	16D117FA634D6AEB3D14659EB19655C4
; Input	CRC32 :	4477E0E8

; File Name   :	C:\compspace\Diff\openssl\obj\ts_rsp_verify.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
_TS_status_text	dd offset ??_C@_07HFHOMNEG@granted?$AA@
					; DATA XREF: _TS_check_status_info+69r
					; "granted"
		dd offset ??_C@_0BA@OPNPOKGL@grantedWithMods?$AA@ ; "grantedWithMods"
		dd offset ??_C@_09BMHBJALA@rejection?$AA@ ; "rejection"
		dd offset ??_C@_07BMPLEEBA@waiting?$AA@	; "waiting"
		dd offset ??_C@_0BC@OOACONAH@revocationWarning?$AA@ ; "revocationWarning"
		dd offset ??_C@_0BH@JFJEOLHJ@revocationNotification?$AA@ ; "revocationNotification"
_TS_failure_info dd 0
off_1C		dd offset ??_C@_06JJHJIAED@badAlg?$AA@
					; DATA XREF: _TS_check_status_info+B6o
					; "badAlg"
		dd 2
		dd offset ??_C@_0L@INLHJFOE@badRequest?$AA@ ; "badRequest"
		dd 5
		dd offset ??_C@_0O@MEBNNCJH@badDataFormat?$AA@ ; "badDataFormat"
		dd 0Eh
		dd offset ??_C@_0BB@MDCMIBDP@timeNotAvailable?$AA@ ; "timeNotAvailable"
		dd 0Fh
		dd offset ??_C@_0BB@IAFKBCGA@unacceptedPolicy?$AA@ ; "unacceptedPolicy"
		dd 10h
		dd offset ??_C@_0BE@NCLAFPKF@unacceptedExtension?$AA@ ;	"unacceptedExtension"
		dd 11h
		dd offset ??_C@_0BE@PLIECEFJ@addInfoNotAvailable?$AA@ ;	"addInfoNotAvailable"
		dd 19h
		dd offset ??_C@_0O@KAPCIGOP@systemFailure?$AA@
					; DATA XREF: _TS_check_status_info+12Do
_data		ends			; "systemFailure"

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 58h
; COMDAT (pick any)
		public ??_C@_07HFHOMNEG@granted?$AA@
; `string'
??_C@_07HFHOMNEG@granted?$AA@ db 'granted',0 ; DATA XREF: .data:_TS_status_texto
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 60h
; COMDAT (pick any)
		public ??_C@_0BA@OPNPOKGL@grantedWithMods?$AA@
; `string'
??_C@_0BA@OPNPOKGL@grantedWithMods?$AA@	db 'grantedWithMods',0 ; DATA XREF: .data:00000004o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 70h
; COMDAT (pick any)
		public ??_C@_09BMHBJALA@rejection?$AA@
; `string'
??_C@_09BMHBJALA@rejection?$AA@	db 'rejection',0 ; DATA XREF: .data:00000008o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7Ch
; COMDAT (pick any)
		public ??_C@_07BMPLEEBA@waiting?$AA@
; `string'
??_C@_07BMPLEEBA@waiting?$AA@ db 'waiting',0 ; DATA XREF: .data:0000000Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 84h
; COMDAT (pick any)
		public ??_C@_0BC@OOACONAH@revocationWarning?$AA@
; `string'
??_C@_0BC@OOACONAH@revocationWarning?$AA@ db 'revocationWarning',0
					; DATA XREF: .data:00000010o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 98h
; COMDAT (pick any)
		public ??_C@_0BH@JFJEOLHJ@revocationNotification?$AA@
; `string'
??_C@_0BH@JFJEOLHJ@revocationNotification?$AA@ db 'revocationNotification',0
					; DATA XREF: .data:00000014o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B0h
; COMDAT (pick any)
		public ??_C@_06JJHJIAED@badAlg?$AA@
; `string'
??_C@_06JJHJIAED@badAlg?$AA@ db	'badAlg',0 ; DATA XREF: .data:off_1Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B8h
; COMDAT (pick any)
		public ??_C@_0L@INLHJFOE@badRequest?$AA@
; `string'
??_C@_0L@INLHJFOE@badRequest?$AA@ db 'badRequest',0 ; DATA XREF: .data:00000024o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C4h
; COMDAT (pick any)
		public ??_C@_0O@MEBNNCJH@badDataFormat?$AA@
; `string'
??_C@_0O@MEBNNCJH@badDataFormat?$AA@ db	'badDataFormat',0 ; DATA XREF: .data:0000002Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D4h
; COMDAT (pick any)
		public ??_C@_0BB@MDCMIBDP@timeNotAvailable?$AA@
; `string'
??_C@_0BB@MDCMIBDP@timeNotAvailable?$AA@ db 'timeNotAvailable',0
					; DATA XREF: .data:00000034o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E8h
; COMDAT (pick any)
		public ??_C@_0BB@IAFKBCGA@unacceptedPolicy?$AA@
; `string'
??_C@_0BB@IAFKBCGA@unacceptedPolicy?$AA@ db 'unacceptedPolicy',0
					; DATA XREF: .data:0000003Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FCh
; COMDAT (pick any)
		public ??_C@_0BE@NCLAFPKF@unacceptedExtension?$AA@
; `string'
??_C@_0BE@NCLAFPKF@unacceptedExtension?$AA@ db 'unacceptedExtension',0
					; DATA XREF: .data:00000044o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 110h
; COMDAT (pick any)
		public ??_C@_0BE@PLIECEFJ@addInfoNotAvailable?$AA@
; `string'
??_C@_0BE@PLIECEFJ@addInfoNotAvailable?$AA@ db 'addInfoNotAvailable',0
					; DATA XREF: .data:0000004Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 124h
; COMDAT (pick any)
		public ??_C@_0O@KAPCIGOP@systemFailure?$AA@
; `string'
??_C@_0O@KAPCIGOP@systemFailure?$AA@ db	'systemFailure',0 ; DATA XREF: .data:00000054o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 134h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ESS_get_signing_cert proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 4
		call	__chkstk
		push	0DFh ; 'ß'
		push	[esp+8+arg_0]
		call	_PKCS7_get_signed_attribute
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		jnz	short loc_157
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_157:				; CODE XREF: _ESS_get_signing_cert+1Fj
		mov	eax, [ecx+4]
		mov	eax, [eax+8]
		mov	[esp+4+var_4], eax
		mov	eax, [ecx+4]
		push	dword ptr [eax]
		lea	eax, [esp+8+var_4]
		push	eax
		push	0
		call	_d2i_ESS_SIGNING_CERT
		add	esp, 0Ch
		pop	ecx
		retn
_ESS_get_signing_cert endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 178h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_verify_response
_TS_RESP_verify_response proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		push	edi
		push	esi
		call	_TS_RESP_get_token
		push	esi
		mov	ebx, eax
		call	_TS_RESP_get_tst_info
		push	esi
		mov	ebp, eax
		xor	edi, edi
		call	_TS_check_status_info
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1B7
		push	ebp
		push	ebx
		push	[esp+18h+arg_0]
		call	_int_TS_RESP_verify_token
		add	esp, 0Ch
		mov	ecx, 1
		test	eax, eax
		cmovnz	edi, ecx

loc_1B7:				; CODE XREF: _TS_RESP_verify_response+25j
		mov	eax, edi

$err$7:
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_TS_RESP_verify_response endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_verify_signature
_TS_RESP_verify_signature proc near	; CODE XREF: _int_TS_RESP_verify_token+4Dp

var_1020	= dword	ptr -1020h
var_101C	= dword	ptr -101Ch
var_1018	= dword	ptr -1018h
var_1014	= dword	ptr -1014h
var_1010	= dword	ptr -1010h
var_100C	= dword	ptr -100Ch
var_1008	= dword	ptr -1008h
var_1004	= byte ptr -1004h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 1020h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+1020h+var_4], eax
		mov	eax, [esp+1020h+arg_4]
		push	ebx
		push	esi
		mov	esi, [esp+1028h+arg_0]
		xor	ebx, ebx
		mov	[esp+1028h+var_1018], eax
		mov	eax, [esp+1028h+arg_8]
		push	edi
		mov	[esp+102Ch+var_100C], eax
		xor	edi, edi
		mov	eax, [esp+102Ch+arg_C]
		mov	[esp+102Ch+var_1008], eax
		mov	[esp+102Ch+var_101C], 0
		mov	[esp+102Ch+var_1020], ebx
		mov	[esp+102Ch+var_1010], ebx
		test	esi, esi
		jnz	short loc_238
		push	0ADh ; '­'
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	66h ; 'f'
		push	6Ah ; 'j'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$23
; ---------------------------------------------------------------------------

loc_238:				; CODE XREF: _TS_RESP_verify_signature+59j
		push	dword ptr [esi+10h]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 16h
		jz	short loc_265
		push	0B3h ; '³'
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	72h ; 'r'
		push	6Ah ; 'j'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$23
; ---------------------------------------------------------------------------

loc_265:				; CODE XREF: _TS_RESP_verify_signature+86j
		push	ebp
		push	esi
		call	_PKCS7_get_signer_info
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jz	loc_3A6
		push	ebp
		call	_sk_num
		add	esp, 4
		cmp	eax, 1
		jnz	loc_3A6
		push	0
		push	ebp
		call	_sk_value
		push	0
		push	0
		push	2
		push	esi
		mov	[esp+1048h+var_1014], eax
		call	_PKCS7_ctrl
		add	esp, 18h
		test	eax, eax
		jz	short loc_2BB
		push	0C1h ; 'Á'
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	6Ah ; 'j'
		jmp	loc_3B2
; ---------------------------------------------------------------------------

loc_2BB:				; CODE XREF: _TS_RESP_verify_signature+E8j
		push	0
		push	[esp+1034h+var_1018]
		push	esi
		call	_PKCS7_get0_signers
		add	esp, 0Ch
		mov	[esp+1030h+var_101C], eax
		test	eax, eax
		jz	loc_3BE
		push	eax
		call	_sk_num
		add	esp, 4
		cmp	eax, 1
		jnz	loc_3BE
		push	0
		push	[esp+1034h+var_101C]
		call	_sk_value
		mov	ebp, eax
		lea	eax, [esp+1038h+var_1020]
		push	eax
		push	ebp
		push	[esp+1040h+var_1018]
		push	[esp+1044h+var_100C]
		call	_TS_verify_cert
		mov	ebx, [esp+1048h+var_1020]
		add	esp, 18h
		test	eax, eax
		jz	loc_3BE
		push	ebx
		push	[esp+1034h+var_1014]
		call	_TS_check_signing_certs
		add	esp, 8
		test	eax, eax
		jz	loc_3BE
		push	0
		push	esi
		call	_PKCS7_dataInit
		add	esp, 8
		mov	edi, eax
		nop	dword ptr [eax+00000000h]

loc_340:				; CODE XREF: _TS_RESP_verify_signature+195j
		push	1000h
		lea	eax, [esp+1034h+var_1004]
		push	eax
		push	edi
		call	_BIO_read
		add	esp, 0Ch
		test	eax, eax
		jg	short loc_340
		push	ebp
		push	[esp+1034h+var_1014]
		push	esi
		push	edi
		call	_PKCS7_signatureVerify
		add	esp, 10h
		test	eax, eax
		jg	short loc_378
		push	0E1h ; 'á'
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	6Dh ; 'm'
		jmp	short loc_3B2
; ---------------------------------------------------------------------------

loc_378:				; CODE XREF: _TS_RESP_verify_signature+1A8j
		mov	eax, [esp+1030h+var_1008]
		test	eax, eax
		jz	short loc_39C
		push	0E8h ; 'è'
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	3
		mov	[eax], ebp
		lea	eax, [ebp+10h]
		push	1
		push	eax
		call	_CRYPTO_add_lock
		add	esp, 14h

loc_39C:				; CODE XREF: _TS_RESP_verify_signature+1BEj
		mov	[esp+1030h+var_1010], 1
		jmp	short loc_3BE
; ---------------------------------------------------------------------------

loc_3A6:				; CODE XREF: _TS_RESP_verify_signature+B3j
					; _TS_RESP_verify_signature+C5j
		push	0BAh ; 'º'
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	6Eh ; 'n'

loc_3B2:				; CODE XREF: _TS_RESP_verify_signature+F6j
					; _TS_RESP_verify_signature+1B6j
		push	6Ah ; 'j'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h

loc_3BE:				; CODE XREF: _TS_RESP_verify_signature+110j
					; _TS_RESP_verify_signature+122j ...
		pop	ebp

$err$23:				; CODE XREF: _TS_RESP_verify_signature+73j
					; _TS_RESP_verify_signature+A0j
		push	edi
		call	_BIO_free_all
		push	offset _X509_free
		push	ebx
		call	_sk_pop_free
		push	[esp+1038h+var_101C]
		call	_sk_free
		mov	ecx, [esp+103Ch+var_4]
		add	esp, 10h
		mov	eax, [esp+102Ch+var_1010]
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1020h
		retn
_TS_RESP_verify_signature endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_verify_token
_TS_RESP_verify_token proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		push	esi
		call	_PKCS7_to_TS_TST_INFO
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_428
		push	edi
		push	esi
		push	[esp+10h+arg_0]
		call	_int_TS_RESP_verify_token
		push	edi
		mov	esi, eax
		call	_TS_TST_INFO_free
		add	esp, 10h
		mov	eax, esi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_428:				; CODE XREF: _TS_RESP_verify_token+13j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
_TS_RESP_verify_token endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 430h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_check_imprints proc	near		; CODE XREF: _int_TS_RESP_verify_token+EEp
					; _int_TS_RESP_verify_token+130p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	esi
		push	edi
		push	[esp+0Ch+arg_C]
		call	_TS_TST_INFO_get_msg_imprint
		mov	edi, eax
		push	edi
		call	_TS_MSG_IMPRINT_get_algo
		mov	esi, [esp+14h+arg_0]
		add	esp, 8
		mov	ebx, eax
		test	esi, esi
		jz	short loc_493
		push	dword ptr [ebx]
		push	dword ptr [esi]
		call	_OBJ_cmp
		add	esp, 8
		test	eax, eax
		jnz	loc_50C
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_47E
		push	eax
		call	_ASN1_TYPE_get
		add	esp, 4
		cmp	eax, 5
		jnz	loc_50C

loc_47E:				; CODE XREF: _TS_check_imprints+3Aj
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_493
		push	eax
		call	_ASN1_TYPE_get
		add	esp, 4
		cmp	eax, 5
		jnz	short loc_50C

loc_493:				; CODE XREF: _TS_check_imprints+1Fj
					; _TS_check_imprints+53j
		push	dword ptr [edi+4]
		call	_ASN1_STRING_length
		mov	esi, [esp+10h+arg_8]
		add	esp, 4
		cmp	esi, eax
		jnz	short loc_50C
		push	dword ptr [edi+4]
		call	_ASN1_STRING_data
		mov	edx, [esp+10h+arg_4]
		add	esp, 4
		mov	edi, eax
		sub	esi, 4
		jb	short loc_4D1
		nop	dword ptr [eax+00h]

loc_4C0:				; CODE XREF: _TS_check_imprints+9Fj
		mov	ecx, [edx]
		cmp	ecx, [edi]
		jnz	short loc_4D6
		add	edx, 4
		add	edi, 4
		sub	esi, 4
		jnb	short loc_4C0

loc_4D1:				; CODE XREF: _TS_check_imprints+8Aj
		cmp	esi, 0FFFFFFFCh
		jz	short loc_503

loc_4D6:				; CODE XREF: _TS_check_imprints+94j
		mov	al, [edx]
		cmp	al, [edi]
		jnz	short loc_50C
		cmp	esi, 0FFFFFFFDh
		jz	short loc_503
		mov	al, [edx+1]
		cmp	al, [edi+1]
		jnz	short loc_50C
		cmp	esi, 0FFFFFFFEh
		jz	short loc_503
		mov	al, [edx+2]
		cmp	al, [edi+2]
		jnz	short loc_50C
		cmp	esi, 0FFFFFFFFh
		jz	short loc_503
		mov	al, [edx+3]
		cmp	al, [edi+3]
		jnz	short loc_50C

loc_503:				; CODE XREF: _TS_check_imprints+A4j
					; _TS_check_imprints+AFj ...
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_50C:				; CODE XREF: _TS_check_imprints+2Fj
					; _TS_check_imprints+48j ...
		push	2A0h
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	67h ; 'g'
		push	64h ; 'd'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
_TS_check_imprints endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 52Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_check_nonces proc near		; CODE XREF: _int_TS_RESP_verify_token+14Fp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		call	_TS_TST_INFO_get_nonce
		add	esp, 4
		test	eax, eax
		jnz	short loc_557
		push	2AAh
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	69h ; 'i'
		push	65h ; 'e'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_557:				; CODE XREF: _TS_check_nonces+Ej
		push	eax
		push	[esp+4+arg_0]
		call	_ASN1_INTEGER_cmp
		add	esp, 8
		test	eax, eax
		jz	short loc_583
		push	2B0h
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	68h ; 'h'
		push	65h ; 'e'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_583:				; CODE XREF: _TS_check_nonces+3Aj
		mov	eax, 1
		retn
_TS_check_nonces endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 58Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_check_policy proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		call	_TS_TST_INFO_get_policy_id
		push	eax
		push	[esp+8+arg_0]
		call	_OBJ_cmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_5C1
		push	24Ah
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	6Ch ; 'l'
		push	66h ; 'f'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_5C1:				; CODE XREF: _TS_check_policy+18j
		mov	eax, 1
		retn
_TS_check_policy endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_check_signer_name proc near		; CODE XREF: _int_TS_RESP_verify_token+16Ep
					; _int_TS_RESP_verify_token+1A3p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 4
		call	__chkstk
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		mov	[esp+0Ch+var_4], 0FFFFFFFFh
		cmp	dword ptr [ebp+0], 4
		jnz	short loc_607
		mov	eax, [esi]
		push	dword ptr [eax+14h]
		push	dword ptr [ebp+4]
		call	_X509_NAME_cmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_607
		pop	esi
		mov	eax, 1
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_607:				; CODE XREF: _TS_check_signer_name+20j
					; _TS_check_signer_name+34j
		push	ebx
		push	edi
		lea	eax, [esp+14h+var_4]
		push	eax
		push	0
		push	55h ; 'U'
		push	esi
		call	_X509_get_ext_d2i
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jz	loc_6B4
		nop	dword ptr [eax]

loc_628:				; CODE XREF: _TS_check_signer_name+C9j
		xor	edi, edi
		xor	esi, esi

loc_62C:				; CODE XREF: _TS_check_signer_name+8Cj
		push	ebx
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jge	short loc_659
		push	edi
		push	ebx
		call	_sk_value
		push	ebp
		push	eax
		call	_GENERAL_NAME_cmp
		add	esp, 10h
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		inc	edi
		add	esi, 1
		jz	short loc_62C
		dec	edi
		jmp	short loc_663
; ---------------------------------------------------------------------------

loc_659:				; CODE XREF: _TS_check_signer_name+6Fj
		test	esi, esi
		jz	short loc_660
		dec	edi
		jmp	short loc_663
; ---------------------------------------------------------------------------

loc_660:				; CODE XREF: _TS_check_signer_name+93j
		or	edi, 0FFFFFFFFh

loc_663:				; CODE XREF: _TS_check_signer_name+8Fj
					; _TS_check_signer_name+96j
		xor	eax, eax
		test	edi, edi
		setns	al
		mov	[esp+14h+arg_0], eax
		test	eax, eax
		jnz	short loc_69D
		push	ebx
		call	_GENERAL_NAMES_free
		lea	eax, [esp+18h+var_4]
		push	eax
		push	0
		push	55h ; 'U'
		push	[esp+24h+arg_4]
		call	_X509_get_ext_d2i
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jnz	short loc_628
		mov	eax, [esp+14h+arg_0]
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_69D:				; CODE XREF: _TS_check_signer_name+A8j
		test	ebx, ebx
		jz	short loc_6B6
		push	ebx
		call	_GENERAL_NAMES_free
		mov	eax, [esp+18h+arg_0]
		add	esp, 4
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_6B4:				; CODE XREF: _TS_check_signer_name+57j
		xor	eax, eax

loc_6B6:				; CODE XREF: _TS_check_signer_name+D7j
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		pop	ecx
		retn
_TS_check_signer_name endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_check_signing_certs	proc near	; CODE XREF: _TS_RESP_verify_signature+15Cp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 8
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	edi
		push	0DFh ; 'ß'
		push	[esp+1Ch+arg_0]
		call	_PKCS7_get_signed_attribute
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		jnz	short loc_6EA
		xor	esi, esi
		xor	ebp, ebp
		jmp	loc_790
; ---------------------------------------------------------------------------

loc_6EA:				; CODE XREF: _TS_check_signing_certs+23j
		mov	eax, [ecx+4]
		mov	eax, [eax+8]
		mov	[esp+18h+var_4], eax
		mov	eax, [ecx+4]
		push	dword ptr [eax]
		lea	eax, [esp+1Ch+var_4]
		push	eax
		push	0
		call	_d2i_ESS_SIGNING_CERT
		mov	esi, eax
		add	esp, 0Ch
		xor	ebp, ebp
		mov	[esp+18h+var_8], esi
		test	esi, esi
		jz	short loc_790
		mov	edi, [esp+18h+arg_4]
		mov	ebx, [esi]
		push	ebp
		push	edi
		call	_sk_value
		push	eax
		push	ebx
		call	_TS_find_cert
		add	esp, 10h
		test	eax, eax
		jnz	short loc_790
		push	ebx
		call	_sk_num
		add	esp, 4
		cmp	eax, 1
		jle	short loc_774
		push	edi
		lea	esi, [ebp+1]
		call	_sk_num
		add	esp, 4
		cmp	eax, esi
		jle	short loc_770

loc_74D:				; CODE XREF: _TS_check_signing_certs+B2j
		push	esi
		push	edi
		call	_sk_value
		push	eax
		push	ebx
		call	_TS_find_cert
		add	esp, 10h
		test	eax, eax
		js	short loc_78C
		push	edi
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_74D

loc_770:				; CODE XREF: _TS_check_signing_certs+8Fj
		mov	esi, [esp+18h+var_8]

loc_774:				; CODE XREF: _TS_check_signing_certs+7Fj
		push	esi
		mov	ebp, 1
		call	_ESS_SIGNING_CERT_free
		add	esp, 4
		mov	eax, ebp
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_78C:				; CODE XREF: _TS_check_signing_certs+A4j
		mov	esi, [esp+18h+var_8]

loc_790:				; CODE XREF: _TS_check_signing_certs+29j
					; _TS_check_signing_certs+56j ...
		push	137h
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	65h ; 'e'
		push	67h ; 'g'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		push	esi
		call	_ESS_SIGNING_CERT_free
		add	esp, 4
		mov	eax, ebp
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
_TS_check_signing_certs	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_check_status_info proc near		; CODE XREF: _TS_RESP_verify_response+1Bp

var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
Dst		= qword	ptr -104h
var_FC		= dword	ptr -0FCh
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 110h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+110h+var_4], eax
		mov	eax, [esp+110h+arg_0]
		push	esi
		push	edi
		push	eax
		call	_TS_RESP_get_status_info
		mov	edi, eax
		mov	[esp+11Ch+var_108], edi
		push	dword ptr [edi]
		call	_ASN1_INTEGER_get
		push	100h		; Size
		mov	esi, eax
		mov	[esp+124h+var_110], 0
		lea	eax, [esp+124h+Dst]
		push	0		; Val
		push	eax		; Dst
		call	_memset
		add	esp, 14h
		test	esi, esi
		jz	loc_976
		cmp	esi, 1
		jz	loc_976
		push	ebx
		cmp	esi, 5
		ja	short loc_832
		mov	ebx, _TS_status_text[esi*4]
		mov	[esp+11Ch+var_10C], ebx
		jmp	short loc_83A
; ---------------------------------------------------------------------------

loc_832:				; CODE XREF: _TS_check_status_info+67j
		mov	[esp+11Ch+var_10C], offset ??_C@_0N@DJABBOOH@unknown?5code?$AA@	; "unknown code"

loc_83A:				; CODE XREF: _TS_check_status_info+74j
		push	dword ptr [edi+4]
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_862
		push	dword ptr [edi+4]
		call	_TS_get_status_text
		mov	ebx, eax
		add	esp, 4
		mov	[esp+11Ch+var_110], ebx
		test	ebx, ebx
		jz	loc_95C

loc_862:				; CODE XREF: _TS_check_status_info+8Bj
		cmp	dword ptr [edi+8], 0
		jz	loc_8F2
		push	ebp
		mov	ebp, 1
		mov	ebx, offset off_1C
		nop	dword ptr [eax+eax+00h]

loc_87C:				; CODE XREF: _TS_check_status_info+133j
		push	dword ptr [ebx-4]
		push	dword ptr [edi+8]
		call	_ASN1_BIT_STRING_get_bit
		add	esp, 8
		test	eax, eax
		jz	short loc_8E6
		test	ebp, ebp
		jnz	short loc_8B1
		lea	edi, [esp+120h+Dst]
		dec	edi
		nop	dword ptr [eax+eax+00h]

loc_89C:				; CODE XREF: _TS_check_status_info+E8j
		mov	al, [edi+1]
		lea	edi, [edi+1]
		test	al, al
		jnz	short loc_89C
		mov	ax, ds:??_C@_01IHBHIGKO@?0?$AA@	; `string'
		mov	[edi], ax
		jmp	short loc_8B3
; ---------------------------------------------------------------------------

loc_8B1:				; CODE XREF: _TS_check_status_info+D4j
		xor	ebp, ebp

loc_8B3:				; CODE XREF: _TS_check_status_info+F3j
		mov	edx, [ebx]
		mov	esi, edx
		nop	dword ptr [eax+eax+00h]

loc_8BC:				; CODE XREF: _TS_check_status_info+105j
		mov	al, [edx]
		inc	edx
		test	al, al
		jnz	short loc_8BC
		lea	edi, [esp+120h+Dst]
		sub	edx, esi
		dec	edi
		xchg	ax, ax

loc_8CC:				; CODE XREF: _TS_check_status_info+116j
		mov	al, [edi+1]
		inc	edi
		test	al, al
		jnz	short loc_8CC
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		mov	ecx, edx
		and	ecx, 3
		rep movsb
		mov	edi, [esp+120h+var_108]

loc_8E6:				; CODE XREF: _TS_check_status_info+D0j
		add	ebx, 8
		cmp	ebx, (offset off_54+8)
		jl	short loc_87C
		pop	ebp

loc_8F2:				; CODE XREF: _TS_check_status_info+AAj
		cmp	byte ptr [esp+11Ch+Dst], 0
		jnz	short loc_910
		movq	xmm0, ds:??_C@_0M@MFMDLEDN@unspecified?$AA@ ; `string'
		mov	eax, ds:dword_106C
		movq	[esp+11Ch+Dst],	xmm0
		mov	[esp+11Ch+var_FC], eax

loc_910:				; CODE XREF: _TS_check_status_info+13Bj
		push	219h
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	6Bh ; 'k'
		push	68h ; 'h'
		push	2Fh ; '/'
		call	_ERR_put_error
		mov	ebx, [esp+130h+var_110]
		lea	eax, [esp+130h+Dst]
		push	eax
		push	offset ??_C@_0BC@FLGIJPCE@?0?5failure?5codes?3?5?$AA@ ;	", failure codes: "
		test	ebx, ebx
		mov	eax, offset ??_C@_0M@MFMDLEDN@unspecified?$AA@ ; `string'
		cmovnz	eax, ebx
		push	eax
		push	offset ??_C@_0BA@MLHCMCHB@?0?5status?5text?3?5?$AA@ ; ", status	text: "
		push	[esp+140h+var_10C]
		push	offset ??_C@_0O@IAPNKNJH@status?5code?3?5?$AA@ ; "status code: "
		push	6
		call	_ERR_add_error_data
		push	ebx
		call	_CRYPTO_free
		add	esp, 34h

loc_95C:				; CODE XREF: _TS_check_status_info+A0j
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	esi
		mov	ecx, [esp+110h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 110h
		retn
; ---------------------------------------------------------------------------

loc_976:				; CODE XREF: _TS_check_status_info+54j
					; _TS_check_status_info+5Dj
		mov	ecx, [esp+118h+var_4]
		mov	eax, 1
		pop	edi
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 110h
		retn
_TS_check_status_info endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 994h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_compute_imprint proc near		; CODE XREF: _int_TS_RESP_verify_token+112p

var_1020	= dword	ptr -1020h
var_101C	= byte ptr -101Ch
var_1004	= byte ptr -1004h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 1020h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+1020h+var_4], eax
		mov	eax, [esp+1020h+arg_4]
		mov	ecx, [esp+1020h+arg_10]
		push	ebx
		push	ebp
		mov	ebp, [esp+1028h+arg_8]
		push	esi
		mov	esi, [esp+102Ch+arg_0]
		push	edi
		mov	edi, [esp+1030h+arg_C]
		push	eax
		mov	[esp+1034h+var_1020], ecx
		call	_TS_TST_INFO_get_msg_imprint
		push	eax
		call	_TS_MSG_IMPRINT_get_algo
		mov	dword ptr [ebp+0], 0
		push	eax
		mov	dword ptr [edi], 0
		call	_X509_ALGOR_dup
		add	esp, 0Ch
		mov	[ebp+0], eax
		test	eax, eax
		jz	short $err$18
		push	dword ptr [eax]
		call	_OBJ_obj2nid
		push	eax
		call	_OBJ_nid2sn
		push	eax
		call	_EVP_get_digestbyname
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_A74
		push	265h
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	7Eh ; '~'

loc_A28:				; CODE XREF: _TS_compute_imprint+118j
		push	91h ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h

$err$18:				; CODE XREF: _TS_compute_imprint+6Aj
					; _TS_compute_imprint+EBj ...
		push	dword ptr [ebp+0]
		call	_X509_ALGOR_free
		push	dword ptr [edi]
		call	_CRYPTO_free
		mov	eax, [esp+1038h+var_1020]
		add	esp, 8
		mov	dword ptr [eax], 0
		xor	eax, eax
		mov	dword ptr [edi], 0

loc_A5B:				; CODE XREF: _TS_compute_imprint+1A0j
		mov	ecx, [esp+1030h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1020h
		retn
; ---------------------------------------------------------------------------

loc_A74:				; CODE XREF: _TS_compute_imprint+86j
		push	ebx
		call	_EVP_MD_size
		add	esp, 4
		test	eax, eax
		js	short $err$18
		mov	ecx, [esp+1030h+var_1020]
		push	26Eh
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	eax
		mov	[ecx], eax
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[edi], eax
		test	eax, eax
		jnz	short loc_AB1
		push	26Fh
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	41h ; 'A'
		jmp	loc_A28
; ---------------------------------------------------------------------------

loc_AB1:				; CODE XREF: _TS_compute_imprint+10Aj
		lea	eax, [esp+1030h+var_101C]
		push	ebx
		push	eax
		call	_EVP_DigestInit
		add	esp, 8
		test	eax, eax
		jz	$err$18
		push	1000h
		lea	eax, [esp+1034h+var_1004]
		push	eax
		push	esi
		call	_BIO_read
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_B16
		nop	word ptr [eax+eax+00h]

loc_AE4:				; CODE XREF: _TS_compute_imprint+180j
		push	eax
		lea	eax, [esp+1034h+var_1004]
		push	eax
		lea	eax, [esp+1038h+var_101C]
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jz	$err$18
		push	1000h
		lea	eax, [esp+1034h+var_1004]
		push	eax
		push	esi
		call	_BIO_read
		add	esp, 0Ch
		test	eax, eax
		jg	short loc_AE4

loc_B16:				; CODE XREF: _TS_compute_imprint+148j
		push	0
		push	dword ptr [edi]
		lea	eax, [esp+1038h+var_101C]
		push	eax
		call	_EVP_DigestFinal
		add	esp, 0Ch
		test	eax, eax
		jz	$err$18
		mov	eax, 1
		jmp	loc_A5B
_TS_compute_imprint endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B3Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_find_cert	proc near		; CODE XREF: _TS_check_signing_certs+67p
					; _TS_check_signing_certs+9Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		test	ebx, ebx
		jz	loc_BDC
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jz	loc_BDC
		push	ebp
		push	edi
		push	0
		push	0FFFFFFFFh
		push	esi
		call	_X509_check_purpose
		push	ebx
		xor	edi, edi
		call	_sk_num
		add	esp, 10h
		test	eax, eax
		jle	short loc_BD4

loc_B71:				; CODE XREF: _TS_find_cert+96j
		push	edi
		push	ebx
		call	_sk_value
		mov	ebp, eax
		add	esp, 8
		mov	edx, [ebp+0]
		cmp	dword ptr [edx], 14h
		jnz	short loc_BC6
		mov	edx, [edx+8]
		lea	eax, [esi+50h]
		mov	esi, 10h

loc_B90:				; CODE XREF: _TS_find_cert+63j
		mov	ecx, [edx]
		cmp	ecx, [eax]
		jnz	short loc_BC2
		add	edx, 4
		add	eax, 4
		sub	esi, 4
		jnb	short loc_B90
		mov	eax, [ebp+4]
		test	eax, eax
		jz	short loc_BBB
		mov	esi, [esp+10h+arg_4]
		push	dword ptr [esi]
		push	eax
		call	_TS_issuer_serial_cmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_BC6

loc_BBB:				; CODE XREF: _TS_find_cert+6Aj
		mov	eax, edi
		pop	edi
		pop	ebp
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_BC2:				; CODE XREF: _TS_find_cert+58j
		mov	esi, [esp+10h+arg_4]

loc_BC6:				; CODE XREF: _TS_find_cert+47j
					; _TS_find_cert+7Dj
		push	ebx
		inc	edi
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jl	short loc_B71

loc_BD4:				; CODE XREF: _TS_find_cert+33j
		pop	edi
		pop	ebp
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_BDC:				; CODE XREF: _TS_find_cert+8j
					; _TS_find_cert+14j
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
_TS_find_cert	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BE4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_find_name	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		mov	ebp, [esp+8+arg_4]
		push	esi
		push	edi
		xor	edi, edi
		xor	esi, esi

loc_BF4:				; CODE XREF: _TS_find_name+38j
		push	ebx
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jge	short loc_C26
		push	edi
		push	ebx
		call	_sk_value
		push	ebp
		push	eax
		call	_GENERAL_NAME_cmp
		add	esp, 10h
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		inc	edi
		add	esi, 1
		jz	short loc_BF4
		lea	eax, [edi-1]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_C26:				; CODE XREF: _TS_find_name+1Bj
		test	esi, esi
		jz	short loc_C32
		lea	eax, [edi-1]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_C32:				; CODE XREF: _TS_find_name+44j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
_TS_find_name	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C3Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_get_status_text proc near		; CODE XREF: _TS_check_status_info+90p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 8
		call	__chkstk
		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+14h+arg_0]
		xor	ebx, ebx
		push	edi
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_C7C

loc_C5E:				; CODE XREF: _TS_get_status_text+3Ej
		push	esi
		push	edi
		call	_sk_value
		push	eax
		call	_ASN1_STRING_length
		inc	eax
		inc	esi
		push	edi
		add	ebx, eax
		call	_sk_num
		add	esp, 10h
		cmp	esi, eax
		jl	short loc_C5E

loc_C7C:				; CODE XREF: _TS_get_status_text+20j
		push	232h
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	ebx
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[esp+14h+var_4], eax
		test	eax, eax
		jnz	short loc_CB8
		push	233h
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	41h ; 'A'
		push	69h ; 'i'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_CB8:				; CODE XREF: _TS_get_status_text+59j
		push	edi
		xor	ebx, ebx
		mov	esi, eax
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_D0F
		push	ebp
		xchg	ax, ax

loc_CCC:				; CODE XREF: _TS_get_status_text+D0j
		push	ebx
		push	edi
		call	_sk_value
		mov	ebp, eax
		push	ebp
		call	_ASN1_STRING_length
		add	esp, 0Ch
		mov	[esp+18h+var_8], eax
		test	ebx, ebx
		jle	short loc_CEA
		mov	byte ptr [esi],	2Fh ; '/'
		inc	esi

loc_CEA:				; CODE XREF: _TS_get_status_text+A8j
		push	eax		; Count
		push	ebp
		call	_ASN1_STRING_data
		add	esp, 4
		push	eax		; Source
		push	esi		; Dest
		call	dword ptr ds:__imp__strncpy
		add	esi, [esp+24h+var_8]
		inc	ebx
		push	edi
		call	_sk_num
		add	esp, 10h
		cmp	ebx, eax
		jl	short loc_CCC
		pop	ebp

loc_D0F:				; CODE XREF: _TS_get_status_text+8Bj
		mov	eax, [esp+14h+var_4]
		pop	edi
		mov	byte ptr [esi],	0
		pop	esi
		pop	ebx
		add	esp, 8
		retn
_TS_get_status_text endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D20h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_issuer_serial_cmp proc near		; CODE XREF: _TS_find_cert+73p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		test	esi, esi
		jz	short loc_D79
		mov	edi, [esp+8+arg_4]
		test	edi, edi
		jz	short loc_D79
		push	dword ptr [esi]
		call	_sk_num
		add	esp, 4
		cmp	eax, 1
		jnz	short loc_D79
		push	0
		push	dword ptr [esi]
		call	_sk_value
		add	esp, 8
		cmp	dword ptr [eax], 4
		jnz	short loc_D79
		push	dword ptr [edi+0Ch]
		push	dword ptr [eax+4]
		call	_X509_NAME_cmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_D79
		push	dword ptr [edi+4]
		push	dword ptr [esi+4]
		call	_ASN1_INTEGER_cmp
		add	esp, 8
		neg	eax
		sbb	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_D79:				; CODE XREF: _TS_issuer_serial_cmp+8j
					; _TS_issuer_serial_cmp+10j ...
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
_TS_issuer_serial_cmp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D80h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_verify_cert	proc near		; CODE XREF: _TS_RESP_verify_signature+143p

var_88		= byte ptr -88h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 88h ; ''
		call	__chkstk
		push	esi
		push	edi
		push	[esp+90h+arg_4]
		mov	edi, [esp+94h+arg_C]
		lea	eax, [esp+94h+var_88]
		push	[esp+94h+arg_8]
		mov	esi, 1
		push	[esp+98h+arg_0]
		mov	dword ptr [edi], 0
		push	eax
		call	_X509_STORE_CTX_init
		add	esp, 10h
		test	eax, eax
		jnz	short loc_DCD
		pop	edi
		pop	esi
		add	esp, 88h
		retn
; ---------------------------------------------------------------------------

loc_DCD:				; CODE XREF: _TS_verify_cert+42j
		lea	eax, [esp+90h+var_88]
		push	9
		push	eax
		call	_X509_STORE_CTX_set_purpose
		lea	eax, [esp+98h+var_88]
		push	eax
		call	_X509_verify_cert
		add	esp, 0Ch
		test	eax, eax
		lea	eax, [esp+90h+var_88]
		push	eax
		jg	short loc_E25
		call	_X509_STORE_CTX_get_error
		push	108h
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	64h ; 'd'
		push	6Dh ; 'm'
		push	2Fh ; '/'
		mov	esi, eax
		call	_ERR_put_error
		push	esi
		call	_X509_verify_cert_error_string
		push	eax
		push	offset ??_C@_0O@HFNJECFC@Verify?5error?3?$AA@ ;	"Verify	error:"
		push	2
		call	_ERR_add_error_data
		add	esp, 28h
		xor	esi, esi
		jmp	short loc_E2F
; ---------------------------------------------------------------------------

loc_E25:				; CODE XREF: _TS_verify_cert+6Dj
		call	_X509_STORE_CTX_get1_chain
		add	esp, 4
		mov	[edi], eax

loc_E2F:				; CODE XREF: _TS_verify_cert+A3j
		lea	eax, [esp+90h+var_88]
		push	eax
		call	_X509_STORE_CTX_cleanup
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		add	esp, 88h
		retn
_TS_verify_cert	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E48h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_TS_RESP_verify_token proc near	; CODE XREF: _TS_RESP_verify_response+2Dp
					; _TS_RESP_verify_token+1Bp

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 18h
		call	__chkstk
		push	ebx
		push	ebp
		mov	ebp, [esp+20h+arg_8]
		xor	ebx, ebx
		push	esi
		push	edi
		push	ebp
		mov	[esp+2Ch+var_14], ebx
		call	_TS_TST_INFO_get_tsa
		mov	edi, [esp+2Ch+arg_0]
		add	esp, 4
		mov	[esp+28h+var_4], eax
		mov	[esp+28h+var_18], ebx
		mov	[esp+28h+var_10], ebx
		test	byte ptr [edi],	1
		mov	[esp+28h+var_C], ebx
		mov	[esp+28h+var_8], ebx
		jz	short loc_EA5
		lea	eax, [esp+28h+var_14]
		push	eax
		push	dword ptr [edi+4]
		push	dword ptr [edi+8]
		push	[esp+34h+arg_4]
		call	_TS_RESP_verify_signature
		mov	ebx, [esp+38h+var_14]
		add	esp, 10h
		test	eax, eax
		jz	short loc_ED3

loc_EA5:				; CODE XREF: _int_TS_RESP_verify_token+3Cj
		test	byte ptr [edi],	2
		jz	short loc_EFB
		push	ebp
		call	_TS_TST_INFO_get_version
		add	esp, 4
		cmp	eax, 1
		jz	short loc_EFB
		push	1BEh
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	71h ; 'q'
		push	95h ; ''

loc_EC9:				; CODE XREF: _int_TS_RESP_verify_token+DDj
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h

loc_ED3:				; CODE XREF: _int_TS_RESP_verify_token+5Bj
					; _int_TS_RESP_verify_token+F8j
		mov	esi, [esp+28h+var_18]

$err$21:				; CODE XREF: _int_TS_RESP_verify_token+120j
					; _int_TS_RESP_verify_token+13Aj ...
		push	ebx
		call	_X509_free
		push	esi
		call	_X509_ALGOR_free
		push	[esp+30h+var_10]
		call	_CRYPTO_free
		mov	eax, [esp+34h+var_8]
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_EFB:				; CODE XREF: _int_TS_RESP_verify_token+60j
					; _int_TS_RESP_verify_token+6Ej
		test	byte ptr [edi],	4
		jz	short loc_F27
		mov	esi, [edi+0Ch]
		push	ebp
		call	_TS_TST_INFO_get_policy_id
		push	eax
		push	esi
		call	_OBJ_cmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_F27
		push	24Ah
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	6Ch ; 'l'
		push	66h ; 'f'
		jmp	short loc_EC9
; ---------------------------------------------------------------------------

loc_F27:				; CODE XREF: _int_TS_RESP_verify_token+B6j
					; _int_TS_RESP_verify_token+CDj
		test	byte ptr [edi],	8
		jz	short loc_F42
		push	ebp
		push	dword ptr [edi+18h]
		push	dword ptr [edi+14h]
		push	dword ptr [edi+10h]
		call	_TS_check_imprints
		add	esp, 10h
		test	eax, eax
		jz	short loc_ED3

loc_F42:				; CODE XREF: _int_TS_RESP_verify_token+E2j
		test	byte ptr [edi],	10h
		jz	short loc_F8A
		lea	eax, [esp+28h+var_C]
		push	eax
		lea	eax, [esp+2Ch+var_10]
		push	eax
		lea	eax, [esp+30h+var_18]
		push	eax
		push	ebp
		push	dword ptr [edi+1Ch]
		call	_TS_compute_imprint
		mov	esi, [esp+3Ch+var_18]
		add	esp, 14h
		test	eax, eax
		jz	$err$21
		push	ebp
		push	[esp+2Ch+var_C]
		push	[esp+30h+var_10]
		push	esi
		call	_TS_check_imprints
		add	esp, 10h
		test	eax, eax
		jz	$err$21
		jmp	short loc_F8E
; ---------------------------------------------------------------------------

loc_F8A:				; CODE XREF: _int_TS_RESP_verify_token+FDj
		mov	esi, [esp+28h+var_18]

loc_F8E:				; CODE XREF: _int_TS_RESP_verify_token+140j
		test	byte ptr [edi],	20h
		jz	short loc_FA7
		push	ebp
		push	dword ptr [edi+20h]
		call	_TS_check_nonces
		add	esp, 8
		test	eax, eax
		jz	$err$21

loc_FA7:				; CODE XREF: _int_TS_RESP_verify_token+149j
		test	byte ptr [edi],	40h
		jz	short loc_FE2
		mov	eax, [esp+28h+var_4]
		test	eax, eax
		jz	short loc_FE2
		push	ebx
		push	eax
		call	_TS_check_signer_name
		add	esp, 8
		test	eax, eax
		jnz	short loc_FE2
		push	1DCh
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	6Fh ; 'o'
		push	95h ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$21
; ---------------------------------------------------------------------------

loc_FE2:				; CODE XREF: _int_TS_RESP_verify_token+162j
					; _int_TS_RESP_verify_token+16Aj ...
		test	byte ptr [edi],	80h
		jz	short loc_1017
		push	ebx
		push	dword ptr [edi+24h]
		call	_TS_check_signer_name
		add	esp, 8
		test	eax, eax
		jnz	short loc_1017
		push	1E3h
		push	offset ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@ ; ".\\crypto\\ts\\ts_rsp_verify.c"
		push	70h ; 'p'
		push	95h ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$21
; ---------------------------------------------------------------------------

loc_1017:				; CODE XREF: _int_TS_RESP_verify_token+19Dj
					; _int_TS_RESP_verify_token+1ADj
		mov	[esp+28h+var_8], 1
		jmp	$err$21
_int_TS_RESP_verify_token endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1024h
; COMDAT (pick any)
		public ??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@
; `string'
??_C@_0BM@EKNHHGI@?4?2crypto?2ts?2ts_rsp_verify?4c?$AA@	db '.\crypto\ts\ts_rsp_verify.c',0
					; DATA XREF: _TS_RESP_verify_signature+60o
					; _TS_RESP_verify_signature+8Do ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1040h
; COMDAT (pick any)
		public ??_C@_0O@HFNJECFC@Verify?5error?3?$AA@
; `string'
??_C@_0O@HFNJECFC@Verify?5error?3?$AA@ db 'Verify error:',0 ; DATA XREF: _TS_verify_cert+92o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1050h
; COMDAT (pick any)
		public ??_C@_0N@DJABBOOH@unknown?5code?$AA@
; `string'
??_C@_0N@DJABBOOH@unknown?5code?$AA@ db	'unknown code',0
					; DATA XREF: _TS_check_status_info:loc_832o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1060h
; COMDAT (pick any)
		public ??_C@_01IHBHIGKO@?0?$AA@
; `string'
??_C@_01IHBHIGKO@?0?$AA@ dw 2Ch		; DATA XREF: _TS_check_status_info+EAr
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1064h
; COMDAT (pick any)
		public ??_C@_0M@MFMDLEDN@unspecified?$AA@
; `string'
??_C@_0M@MFMDLEDN@unspecified?$AA@ dq 6669636570736E75h
					; DATA XREF: _TS_check_status_info+13Dr
					; _TS_check_status_info+179o
dword_106C	dd 646569h		; DATA XREF: _TS_check_status_info+145r
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1070h
; COMDAT (pick any)
		public ??_C@_0BC@FLGIJPCE@?0?5failure?5codes?3?5?$AA@
; `string'
??_C@_0BC@FLGIJPCE@?0?5failure?5codes?3?5?$AA@ db ', failure codes: ',0
					; DATA XREF: _TS_check_status_info+172o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1084h
; COMDAT (pick any)
		public ??_C@_0BA@MLHCMCHB@?0?5status?5text?3?5?$AA@
; `string'
??_C@_0BA@MLHCMCHB@?0?5status?5text?3?5?$AA@ db	', status text: ',0
					; DATA XREF: _TS_check_status_info+182o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1094h
; COMDAT (pick any)
		public ??_C@_0O@IAPNKNJH@status?5code?3?5?$AA@
; `string'
??_C@_0O@IAPNKNJH@status?5code?3?5?$AA@	db 'status code: ',0
					; DATA XREF: _TS_check_status_info+18Bo
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; char *__cdecl	_strncpy(char *Dest, const char	*Source, size_t	Count)
		extrn __imp__strncpy:near ; CODE XREF: _TS_get_status_text+BAp
					; DATA XREF: _TS_get_status_text+BAr
		extrn _sk_num:near	; CODE XREF: _TS_RESP_verify_signature+BAp
					; _TS_RESP_verify_signature+117p ...
		extrn _sk_value:near	; CODE XREF: _TS_RESP_verify_signature+CEp
					; _TS_RESP_verify_signature+12Ep ...
		extrn _sk_free:near	; CODE XREF: _TS_RESP_verify_signature+214p
		extrn _sk_pop_free:near	; CODE XREF: _TS_RESP_verify_signature+20Bp
		extrn _CRYPTO_add_lock:near ; CODE XREF: _TS_RESP_verify_signature+1D4p
		extrn _CRYPTO_malloc:near ; CODE XREF: _TS_compute_imprint+FEp
					; _TS_get_status_text+4Bp
		extrn _CRYPTO_free:near	; CODE XREF: _TS_check_status_info+198p
					; _TS_compute_imprint+ADp ...
		extrn _BIO_read:near	; CODE XREF: _TS_RESP_verify_signature+18Bp
					; _TS_compute_imprint+13Ep ...
		extrn _BIO_free_all:near ; CODE	XREF: _TS_RESP_verify_signature+200p
		extrn _ERR_put_error:near ; CODE XREF: _TS_RESP_verify_signature+6Bp
					; _TS_RESP_verify_signature+98p ...
		extrn _ERR_add_error_data:near ; CODE XREF: _TS_check_status_info+192p
					; _TS_verify_cert+99p
		extrn _ASN1_TYPE_get:near ; CODE XREF: _TS_check_imprints+3Dp
					; _TS_check_imprints+56p
		extrn _ASN1_STRING_length:near ; CODE XREF: _TS_check_imprints+66p
					; _TS_get_status_text+2Ap ...
		extrn _ASN1_STRING_data:near ; CODE XREF: _TS_check_imprints+79p
					; _TS_get_status_text+B0p
		extrn _ASN1_BIT_STRING_get_bit:near ; CODE XREF: _TS_check_status_info+C6p
		extrn _ASN1_INTEGER_cmp:near ; CODE XREF: _TS_check_nonces+30p
					; _TS_issuer_serial_cmp+4Ap
		extrn _ASN1_INTEGER_get:near ; CODE XREF: _TS_check_status_info+2Fp
		extrn _OBJ_nid2sn:near	; CODE XREF: _TS_compute_imprint+74p
		extrn _OBJ_obj2nid:near	; CODE XREF: _TS_RESP_verify_signature+7Bp
					; _TS_compute_imprint+6Ep
		extrn _OBJ_cmp:near	; CODE XREF: _TS_check_imprints+25p
					; _TS_check_policy+Ep ...
		extrn _EVP_MD_size:near	; CODE XREF: _TS_compute_imprint+E1p
		extrn _EVP_DigestUpdate:near ; CODE XREF: _TS_compute_imprint+15Bp
		extrn _EVP_DigestInit:near ; CODE XREF:	_TS_compute_imprint+123p
		extrn _EVP_DigestFinal:near ; CODE XREF: _TS_compute_imprint+18Bp
		extrn _EVP_get_digestbyname:near ; CODE	XREF: _TS_compute_imprint+7Ap
		extrn _X509_STORE_CTX_init:near	; CODE XREF: _TS_verify_cert+38p
		extrn _X509_STORE_CTX_cleanup:near ; CODE XREF:	_TS_verify_cert+B4p
		extrn _X509_STORE_CTX_get_error:near ; CODE XREF: _TS_verify_cert+6Fp
		extrn _X509_STORE_CTX_get1_chain:near ;	CODE XREF: _TS_verify_cert:loc_E25p
		extrn _X509_STORE_CTX_set_purpose:near ; CODE XREF: _TS_verify_cert+54p
		extrn _PKCS7_ctrl:near	; CODE XREF: _TS_RESP_verify_signature+DEp
		extrn _PKCS7_signatureVerify:near
					; CODE XREF: _TS_RESP_verify_signature+19Ep
		extrn _PKCS7_dataInit:near ; CODE XREF:	_TS_RESP_verify_signature+16Fp
		extrn _PKCS7_get_signer_info:near ; CODE XREF: _TS_RESP_verify_signature+A7p
		extrn _PKCS7_get_signed_attribute:near
					; CODE XREF: _ESS_get_signing_cert+13p
					; _TS_check_signing_certs+17p
		extrn _PKCS7_get0_signers:near ; CODE XREF: _TS_RESP_verify_signature+102p
		extrn _X509_verify_cert_error_string:near ; CODE XREF: _TS_verify_cert+8Cp
		extrn _X509_ALGOR_dup:near ; CODE XREF:	_TS_compute_imprint+5Dp
		extrn _X509_ALGOR_free:near ; CODE XREF: _TS_compute_imprint+A6p
					; _int_TS_RESP_verify_token+96p
		extrn _X509_free:near	; CODE XREF: _int_TS_RESP_verify_token+90p
					; DATA XREF: _TS_RESP_verify_signature+205o
		extrn _X509_NAME_cmp:near ; CODE XREF: _TS_check_signer_name+2Ap
					; _TS_issuer_serial_cmp+38p
		extrn _X509_get_ext_d2i:near ; CODE XREF: _TS_check_signer_name+4Bp
					; _TS_check_signer_name+BDp
		extrn _X509_verify_cert:near ; CODE XREF: _TS_verify_cert+5Ep
		extrn _GENERAL_NAME_cmp:near ; CODE XREF: _TS_check_signer_name+7Ap
					; _TS_find_name+26p
		extrn _GENERAL_NAMES_free:near ; CODE XREF: _TS_check_signer_name+ABp
					; _TS_check_signer_name+DAp
		extrn _X509_check_purpose:near ; CODE XREF: _TS_find_cert+21p
		extrn _PKCS7_to_TS_TST_INFO:near ; CODE	XREF: _TS_RESP_verify_token+7p
		extrn _TS_TST_INFO_free:near ; CODE XREF: _TS_RESP_verify_token+23p
		extrn _ESS_SIGNING_CERT_free:near ; CODE XREF: _TS_check_signing_certs+BEp
					; _TS_check_signing_certs+EDp
		extrn _d2i_ESS_SIGNING_CERT:near ; CODE	XREF: _ESS_get_signing_cert+38p
					; _TS_check_signing_certs+44p
		extrn _TS_MSG_IMPRINT_get_algo:near ; CODE XREF: _TS_check_imprints+Fp
					; _TS_compute_imprint+4Ap
		extrn _TS_RESP_get_status_info:near ; CODE XREF: _TS_check_status_info+22p
		extrn _TS_RESP_get_token:near ;	CODE XREF: _TS_RESP_verify_response+9p
		extrn _TS_RESP_get_tst_info:near ; CODE	XREF: _TS_RESP_verify_response+11p
		extrn _TS_TST_INFO_get_version:near
					; CODE XREF: _int_TS_RESP_verify_token+63p
		extrn _TS_TST_INFO_get_policy_id:near ;	CODE XREF: _TS_check_policy+4p
					; _int_TS_RESP_verify_token+BCp
		extrn _TS_TST_INFO_get_msg_imprint:near	; CODE XREF: _TS_check_imprints+7p
					; _TS_compute_imprint+44p
		extrn _TS_TST_INFO_get_nonce:near ; CODE XREF: _TS_check_nonces+4p
		extrn _TS_TST_INFO_get_tsa:near	; CODE XREF: _int_TS_RESP_verify_token+19p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _TS_RESP_verify_signature+22Cp
					; _TS_check_status_info+1AEp ...
		extrn __chkstk:near	; CODE XREF: _ESS_get_signing_cert+5p
					; _TS_RESP_verify_signature+5p	...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _TS_check_status_info+4Ap
		extrn ___security_cookie:near ;	DATA XREF: _TS_RESP_verify_signature+Ar
					; _TS_check_status_info+Ar ...


		end
