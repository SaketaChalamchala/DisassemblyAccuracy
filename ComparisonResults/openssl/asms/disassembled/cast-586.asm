;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	DF80633D54985DA6A997D1EEC949179B
; Input	CRC32 :	42E60A43

; File Name   :	C:\compspace\Diff\openssl\obj\cast-586.obj
; Format      :	COFF (X386MAGIC)

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
; Segment alignment '64byte' can not be represented in assembly
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public L$_CAST_encrypt_begin
L$_CAST_encrypt_begin proc near		; CODE XREF: L$_CAST_cbc_encrypt_begin+58p
					; L$_CAST_cbc_encrypt_begin+CFp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	ebx
		mov	ebx, [esp+8+arg_0]
		mov	ebp, [esp+8+arg_4]
		push	esi
		push	edi
		mov	edi, [ebx]
		mov	esi, [ebx+4]
		mov	eax, [ebp+80h]
		push	eax
		xor	eax, eax
		mov	edx, [ebp+0]
		mov	ecx, [ebp+4]
		add	edx, esi
		rol	edx, cl

loc_24:					; DATA XREF: .text:00000B4Co
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh

loc_2A:					; DATA XREF: .text:00000B48o
					; .text:00000B44o
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		add	ecx, ebx
		xor	edi, ecx
		mov	edx, [ebp+8]
		mov	ecx, [ebp+0Ch]
		xor	edx, edi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		add	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		xor	ecx, ebx
		xor	esi, ecx
		mov	edx, [ebp+10h]
		mov	ecx, [ebp+14h]
		sub	edx, esi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		add	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		sub	ecx, ebx
		xor	edi, ecx
		mov	edx, [ebp+18h]
		mov	ecx, [ebp+1Ch]
		add	edx, edi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		add	ecx, ebx
		xor	esi, ecx
		mov	edx, [ebp+20h]
		mov	ecx, [ebp+24h]
		xor	edx, esi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		add	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		xor	ecx, ebx
		xor	edi, ecx
		mov	edx, [ebp+28h]
		mov	ecx, [ebp+2Ch]
		sub	edx, edi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		add	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		sub	ecx, ebx
		xor	esi, ecx
		mov	edx, [ebp+30h]
		mov	ecx, [ebp+34h]
		add	edx, esi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		add	ecx, ebx
		xor	edi, ecx
		mov	edx, [ebp+38h]
		mov	ecx, [ebp+3Ch]
		xor	edx, edi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		add	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		xor	ecx, ebx
		xor	esi, ecx
		mov	edx, [ebp+40h]
		mov	ecx, [ebp+44h]
		sub	edx, esi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		add	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		sub	ecx, ebx
		xor	edi, ecx
		mov	edx, [ebp+48h]
		mov	ecx, [ebp+4Ch]
		add	edx, edi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		add	ecx, ebx
		xor	esi, ecx
		mov	edx, [ebp+50h]
		mov	ecx, [ebp+54h]
		xor	edx, esi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		add	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		xor	ecx, ebx
		xor	edi, ecx
		mov	edx, [ebp+58h]
		mov	ecx, [ebp+5Ch]
		sub	edx, edi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		add	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		sub	ecx, ebx
		xor	esi, ecx
		pop	edx
		or	edx, edx
		jnz	L$000cast_enc_done
		mov	edx, [ebp+60h]
		mov	ecx, [ebp+64h]
		add	edx, esi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		add	ecx, ebx
		xor	edi, ecx
		mov	edx, [ebp+68h]
		mov	ecx, [ebp+6Ch]
		xor	edx, edi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		add	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		xor	ecx, ebx
		xor	esi, ecx
		mov	edx, [ebp+70h]
		mov	ecx, [ebp+74h]
		sub	edx, esi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		add	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		sub	ecx, ebx
		xor	edi, ecx
		mov	edx, [ebp+78h]
		mov	ecx, [ebp+7Ch]
		add	edx, edi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		add	ecx, ebx
		xor	esi, ecx

L$000cast_enc_done:			; CODE XREF: L$_CAST_encrypt_begin+371j
		nop
		mov	eax, [esp+10h+arg_0]
		mov	[eax+4], edi
		mov	[eax], esi
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_CAST_encrypt_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_CAST_decrypt_begin
L$_CAST_decrypt_begin proc near		; CODE XREF: L$_CAST_cbc_encrypt_begin+10Cp
					; L$_CAST_cbc_encrypt_begin+168p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	ebx
		mov	ebx, [esp+8+arg_0]
		mov	ebp, [esp+8+arg_4]
		push	esi
		push	edi
		mov	edi, [ebx]
		mov	esi, [ebx+4]
		mov	eax, [ebp+80h]
		or	eax, eax
		jnz	L$001cast_dec_skip
		xor	eax, eax
		mov	edx, [ebp+78h]
		mov	ecx, [ebp+7Ch]
		add	edx, esi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		add	ecx, ebx
		xor	edi, ecx
		mov	edx, [ebp+70h]
		mov	ecx, [ebp+74h]
		sub	edx, edi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		add	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		sub	ecx, ebx
		xor	esi, ecx
		mov	edx, [ebp+68h]
		mov	ecx, [ebp+6Ch]
		xor	edx, esi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		add	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		xor	ecx, ebx
		xor	edi, ecx
		mov	edx, [ebp+60h]
		mov	ecx, [ebp+64h]
		add	edx, edi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		add	ecx, ebx
		xor	esi, ecx

L$001cast_dec_skip:			; CODE XREF: L$_CAST_decrypt_begin+19j
		mov	edx, [ebp+58h]
		mov	ecx, [ebp+5Ch]
		sub	edx, esi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		add	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		sub	ecx, ebx
		xor	edi, ecx
		mov	edx, [ebp+50h]
		mov	ecx, [ebp+54h]
		xor	edx, edi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		add	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		xor	ecx, ebx
		xor	esi, ecx
		mov	edx, [ebp+48h]
		mov	ecx, [ebp+4Ch]
		add	edx, esi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		add	ecx, ebx
		xor	edi, ecx
		mov	edx, [ebp+40h]
		mov	ecx, [ebp+44h]
		sub	edx, edi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		add	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		sub	ecx, ebx
		xor	esi, ecx
		mov	edx, [ebp+38h]
		mov	ecx, [ebp+3Ch]
		xor	edx, esi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		add	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		xor	ecx, ebx
		xor	edi, ecx
		mov	edx, [ebp+30h]
		mov	ecx, [ebp+34h]
		add	edx, edi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		add	ecx, ebx
		xor	esi, ecx
		mov	edx, [ebp+28h]
		mov	ecx, [ebp+2Ch]
		sub	edx, esi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		add	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		sub	ecx, ebx
		xor	edi, ecx
		mov	edx, [ebp+20h]
		mov	ecx, [ebp+24h]
		xor	edx, edi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		add	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		xor	ecx, ebx
		xor	esi, ecx
		mov	edx, [ebp+18h]
		mov	ecx, [ebp+1Ch]
		add	edx, esi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		add	ecx, ebx
		xor	edi, ecx
		mov	edx, [ebp+10h]
		mov	ecx, [ebp+14h]
		sub	edx, edi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		add	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		sub	ecx, ebx
		xor	esi, ecx
		mov	edx, [ebp+8]
		mov	ecx, [ebp+0Ch]
		xor	edx, esi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		add	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		xor	ecx, ebx
		xor	edi, ecx
		mov	edx, [ebp+0]
		mov	ecx, [ebp+4]
		add	edx, edi
		rol	edx, cl
		mov	ebx, edx
		xor	ecx, ecx
		mov	cl, dh
		and	ebx, 0FFh
		shr	edx, 10h
		xor	eax, eax
		mov	al, dh
		and	edx, 0FFh
		mov	ecx, dword ptr ds:_CAST_S_table0[ecx*4]
		mov	ebx, dword ptr ds:_CAST_S_table1[ebx*4]
		xor	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table2[eax*4]
		sub	ecx, ebx
		mov	ebx, dword ptr ds:_CAST_S_table3[edx*4]
		add	ecx, ebx
		xor	esi, ecx
		nop
		mov	eax, [esp+10h+arg_0]
		mov	[eax+4], edi
		mov	[eax], esi
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_CAST_decrypt_begin endp


; =============== S U B	R O U T	I N E =======================================


		public L$_CAST_cbc_encrypt_begin
L$_CAST_cbc_encrypt_begin proc near

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	ebx
		push	esi
		push	edi
		mov	ebp, [esp+10h+arg_8]
		mov	ebx, [esp+10h+arg_10]
		mov	esi, [ebx]
		mov	edi, [ebx+4]
		push	edi
		push	esi
		push	edi
		push	esi
		mov	ebx, esp
		mov	esi, [esp+20h+arg_0]
		mov	edi, [esp+20h+arg_4]
		mov	ecx, [esp+20h+arg_14]
		mov	eax, [esp+20h+arg_C]
		push	eax
		push	ebx
		cmp	ecx, 0
		jz	L$002decrypt
		and	ebp, 0FFFFFFF8h
		mov	eax, [esp+28h+var_20]
		mov	ebx, [esp+28h+var_1C]
		jz	L$003encrypt_finish

L$004encrypt_loop:			; CODE XREF: L$_CAST_cbc_encrypt_begin+77j
		mov	ecx, [esi]
		mov	edx, [esi+4]
		xor	eax, ecx
		xor	ebx, edx
		bswap	eax
		bswap	ebx
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_1C], ebx
		call	L$_CAST_encrypt_begin
		mov	eax, [esp+28h+var_20]
		mov	ebx, [esp+28h+var_1C]
		bswap	eax
		bswap	ebx
		mov	[edi], eax
		mov	[edi+4], ebx
		add	esi, 8
		add	edi, 8
		sub	ebp, 8
		jnz	L$004encrypt_loop

L$003encrypt_finish:			; CODE XREF: L$_CAST_cbc_encrypt_begin+3Dj
		mov	ebp, [esp+28h+arg_8]
		and	ebp, 7
		jz	L$005finish
		call	$+5

L$006PIC_point:
		pop	edx
		lea	ecx, (L$007cbc_enc_jmp_table - 9DFh)[edx]
		mov	ebp, [ecx+ebp*4]
		add	ebp, edx
		xor	ecx, ecx
		xor	edx, edx
		jmp	ebp
; ---------------------------------------------------------------------------

L$008ej7:
		mov	dh, [esi+6]
		shl	edx, 8

L$009ej6:
		mov	dh, [esi+5]

L$010ej5:
		mov	dl, [esi+4]

L$011ej4:
		mov	ecx, [esi]
		jmp	L$012ejend
; ---------------------------------------------------------------------------

L$013ej3:
		mov	ch, [esi+2]
		shl	ecx, 8

L$014ej2:
		mov	ch, [esi+1]

L$015ej1:
		mov	cl, [esi]

L$012ejend:				; CODE XREF: L$_CAST_cbc_encrypt_begin+AFj
		xor	eax, ecx
		xor	ebx, edx
		bswap	eax
		bswap	ebx
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_1C], ebx
		call	L$_CAST_encrypt_begin
		mov	eax, [esp+28h+var_20]
		mov	ebx, [esp+28h+var_1C]
		bswap	eax
		bswap	ebx
		mov	[edi], eax
		mov	[edi+4], ebx
		jmp	L$005finish
; ---------------------------------------------------------------------------

L$002decrypt:				; CODE XREF: L$_CAST_cbc_encrypt_begin+2Cj
		and	ebp, 0FFFFFFF8h
		mov	eax, [esp+28h+var_18]
		mov	ebx, [esp+28h+var_14]
		jz	L$016decrypt_finish

L$017decrypt_loop:			; CODE XREF: L$_CAST_cbc_encrypt_begin+144j
		mov	eax, [esi]
		mov	ebx, [esi+4]
		bswap	eax
		bswap	ebx
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_1C], ebx
		call	L$_CAST_decrypt_begin
		mov	eax, [esp+28h+var_20]
		mov	ebx, [esp+28h+var_1C]
		bswap	eax
		bswap	ebx
		mov	ecx, [esp+28h+var_18]
		mov	edx, [esp+28h+var_14]
		xor	ecx, eax
		xor	edx, ebx
		mov	eax, [esi]
		mov	ebx, [esi+4]
		mov	[edi], ecx
		mov	[edi+4], edx
		mov	[esp+28h+var_18], eax
		mov	[esp+28h+var_14], ebx
		add	esi, 8
		add	edi, 8
		sub	ebp, 8
		jnz	L$017decrypt_loop

L$016decrypt_finish:			; CODE XREF: L$_CAST_cbc_encrypt_begin+F5j
		mov	ebp, [esp+28h+arg_8]
		and	ebp, 7
		jz	L$005finish
		mov	eax, [esi]
		mov	ebx, [esi+4]
		bswap	eax
		bswap	ebx
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_1C], ebx
		call	L$_CAST_decrypt_begin
		mov	eax, [esp+28h+var_20]
		mov	ebx, [esp+28h+var_1C]
		bswap	eax
		bswap	ebx
		mov	ecx, [esp+28h+var_18]
		mov	edx, [esp+28h+var_14]
		xor	ecx, eax
		xor	edx, ebx
		mov	eax, [esi]
		mov	ebx, [esi+4]

L$018dj7:
		ror	edx, 10h
		mov	[edi+6], dl
		shr	edx, 10h

L$019dj6:
		mov	[edi+5], dh

L$020dj5:
		mov	[edi+4], dl

L$021dj4:
		mov	[edi], ecx
		jmp	L$022djend
; ---------------------------------------------------------------------------

L$023dj3:
		ror	ecx, 10h
		mov	[edi+2], cl
		shl	ecx, 10h

L$024dj2:
		mov	[esi+1], ch

L$025dj1:
		mov	[esi], cl

L$022djend:				; CODE XREF: L$_CAST_cbc_encrypt_begin+19Bj
		jmp	$+5
; ---------------------------------------------------------------------------

L$005finish:				; CODE XREF: L$_CAST_cbc_encrypt_begin+84j
					; L$_CAST_cbc_encrypt_begin+E5j ...
		mov	ecx, [esp+28h+arg_10]
		add	esp, 18h
		mov	[ecx], eax
		mov	[ecx+4], ebx
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_CAST_cbc_encrypt_begin endp

; ---------------------------------------------------------------------------
		align 40h
L$007cbc_enc_jmp_table dd 0		; DATA XREF: L$_CAST_cbc_encrypt_begin+90o
		dd offset loc_2A+4
		dd offset loc_2A+1
		dd offset loc_24+1
		dd 1Eh,	1Bh, 18h, 12h, 8 dup(90909090h)
_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CAST_S_table0:near ; DATA XREF: L$_CAST_encrypt_begin+3Dr
					; L$_CAST_encrypt_begin+84r ...
		extrn _CAST_S_table1:near ; DATA XREF: L$_CAST_encrypt_begin+44r
					; L$_CAST_encrypt_begin+8Br ...
		extrn _CAST_S_table2:near ; DATA XREF: L$_CAST_encrypt_begin+4Dr
					; L$_CAST_encrypt_begin+94r ...
		extrn _CAST_S_table3:near ; DATA XREF: L$_CAST_encrypt_begin+56r
					; L$_CAST_encrypt_begin+9Dr ...


		end
