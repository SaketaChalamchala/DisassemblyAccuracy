;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	4EA9F08B0F7CBA01CEC800733135F97D
; Input	CRC32 :	8A2B16EC

; File Name   :	C:\compspace\Diff\openssl\obj\b_dump.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_dump
_BIO_dump	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	0
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset _write_bio
		call	_BIO_dump_indent_cb
		add	esp, 14h
		retn
_BIO_dump	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_dump_cb
_BIO_dump_cb	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	0
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	_BIO_dump_indent_cb
		add	esp, 14h
		retn
_BIO_dump_cb	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 38h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_dump_fp
_BIO_dump_fp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	0
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset _write_fp
		call	_BIO_dump_indent_cb
		add	esp, 14h
		retn
_BIO_dump_fp	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 54h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_dump_indent
_BIO_dump_indent proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset _write_bio
		call	_BIO_dump_indent_cb
		add	esp, 14h
		retn
_BIO_dump_indent endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 74h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_dump_indent_cb
_BIO_dump_indent_cb proc near		; CODE XREF: _BIO_dump+13p
					; _BIO_dump_cb+12p ...

var_1DC		= dword	ptr -1DCh
var_1D8		= dword	ptr -1D8h
var_1D4		= dword	ptr -1D4h
var_1D0		= dword	ptr -1D0h
var_1CC		= dword	ptr -1CCh
var_1C8		= dword	ptr -1C8h
var_1C4		= dword	ptr -1C4h
var_1C0		= byte ptr -1C0h
var_1AC		= byte ptr -1ACh
Dst		= byte ptr -88h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 1DCh
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+1DCh+var_4], eax
		mov	eax, [esp+1DCh+arg_0]
		push	ebx
		mov	ebx, [esp+1E0h+arg_C]
		mov	[esp+1E0h+var_1C4], eax
		mov	eax, [esp+1E0h+arg_4]
		push	ebp
		xor	ebp, ebp
		mov	[esp+1E4h+var_1C8], eax
		mov	eax, [esp+1E4h+arg_8]
		mov	[esp+1E4h+var_1D8], eax
		mov	[esp+1E4h+var_1D0], 0
		mov	[esp+1E4h+var_1CC], ebp
		push	esi
		test	ebx, ebx
		jle	short loc_E3

loc_C9:					; CODE XREF: _BIO_dump_indent_cb+69j
		mov	al, [eax+ebx-1]
		cmp	al, 20h	; ' '
		jz	short loc_D5
		test	al, al
		jnz	short loc_DF

loc_D5:					; CODE XREF: _BIO_dump_indent_cb+5Bj
		mov	eax, [esp+1E8h+var_1D8]
		dec	ebx
		inc	ebp
		test	ebx, ebx
		jg	short loc_C9

loc_DF:					; CODE XREF: _BIO_dump_indent_cb+5Fj
		mov	[esp+1E8h+var_1CC], ebp

loc_E3:					; CODE XREF: _BIO_dump_indent_cb+53j
		mov	esi, [esp+1E8h+arg_10]
		test	esi, esi
		jns	short loc_F2
		xor	esi, esi
		jmp	short loc_11D
; ---------------------------------------------------------------------------

loc_F2:					; CODE XREF: _BIO_dump_indent_cb+78j
		jz	short loc_111
		mov	eax, 80h ; 'Ä'
		cmp	esi, eax
		cmovg	esi, eax
		lea	eax, [esp+1E8h+Dst]
		push	esi		; Size
		push	20h ; ' '       ; Val
		push	eax		; Dst
		call	_memset
		add	esp, 0Ch

loc_111:				; CODE XREF: _BIO_dump_indent_cb:loc_F2j
		cmp	esi, 81h ; 'Å'
		jnb	loc_35A

loc_11D:				; CODE XREF: _BIO_dump_indent_cb+7Cj
		mov	ecx, 6
		mov	[esp+esi+1E8h+Dst], 0
		cmp	esi, ecx
		mov	eax, esi
		push	edi
		cmovg	eax, ecx
		mov	edi, 10h
		sub	esi, eax
		lea	eax, [esi+3]
		cdq
		and	edx, 3
		add	eax, edx
		sar	eax, 2
		sub	edi, eax
		mov	eax, ebx
		cdq
		idiv	edi
		mov	[esp+1ECh+var_1DC], edi
		mov	ecx, eax
		mov	[esp+1ECh+var_1D4], eax
		imul	eax, edi
		cmp	eax, ebx
		jge	short loc_162
		inc	ecx
		mov	[esp+1ECh+var_1D4], ecx

loc_162:				; CODE XREF: _BIO_dump_indent_cb+E7j
		test	ecx, ecx
		jle	loc_2EE
		xor	ebp, ebp
		nop	dword ptr [eax+eax+00000000h]

loc_174:				; CODE XREF: _BIO_dump_indent_cb+26Ej
		push	121h
		lea	eax, [esp+1F0h+Dst]
		push	eax
		lea	eax, [esp+1F4h+var_1AC]
		push	eax
		call	_BUF_strlcpy
		push	ebp
		push	offset ??_C@_07NAECFJGM@?$CF04x?5?9?5?$AA@ ; "%04x - "
		lea	eax, [esp+200h+var_1C0]
		push	14h
		push	eax
		call	_BIO_snprintf
		push	121h
		lea	eax, [esp+20Ch+var_1C0]
		push	eax
		lea	eax, [esp+210h+var_1AC]
		push	eax
		call	_BUF_strlcat
		add	esp, 28h
		xor	esi, esi
		test	edi, edi
		jle	short loc_229
		mov	edi, ebp

loc_1BC:				; CODE XREF: _BIO_dump_indent_cb+1AFj
		cmp	edi, ebx
		jl	short loc_1D9
		push	121h
		lea	eax, [esp+1F0h+var_1AC]
		push	offset ??_C@_03NDEAONJP@?5?5?5?$AA@ ; "	  "
		push	eax
		call	_BUF_strlcat
		add	esp, 0Ch
		jmp	short loc_21D
; ---------------------------------------------------------------------------

loc_1D9:				; CODE XREF: _BIO_dump_indent_cb+14Aj
		cmp	esi, 7
		mov	ecx, 2Dh ; '-'
		mov	eax, 20h ; ' '
		cmovz	eax, ecx
		push	eax
		mov	eax, [esp+1F0h+var_1D8]
		add	eax, ebp
		movzx	eax, byte ptr [eax+esi]
		push	eax
		push	offset ??_C@_06POFAOOON@?$CF02x?$CFc?$AA@ ; "%02x%c"
		lea	eax, [esp+1F8h+var_1C0]
		push	14h
		push	eax
		call	_BIO_snprintf
		push	121h
		lea	eax, [esp+204h+var_1C0]
		push	eax
		lea	eax, [esp+208h+var_1AC]
		push	eax
		call	_BUF_strlcat
		add	esp, 20h

loc_21D:				; CODE XREF: _BIO_dump_indent_cb+163j
		inc	esi
		inc	edi
		cmp	esi, [esp+1ECh+var_1DC]
		jl	short loc_1BC
		mov	edi, [esp+1ECh+var_1DC]

loc_229:				; CODE XREF: _BIO_dump_indent_cb+144j
		push	121h
		lea	eax, [esp+1F0h+var_1AC]
		push	offset ??_C@_02KNHHEEKP@?5?5?$AA@ ; `string'
		push	eax
		call	_BUF_strlcat
		add	esp, 0Ch
		xor	esi, esi
		test	edi, edi
		jle	short loc_299
		mov	edi, ebp

loc_248:				; CODE XREF: _BIO_dump_indent_cb+21Fj
		cmp	edi, ebx
		jge	short loc_295
		mov	eax, [esp+1ECh+var_1D8]
		add	eax, ebp
		mov	cl, [eax+esi]
		lea	eax, [ecx-20h]
		cmp	al, 5Eh	; '^'
		movzx	eax, cl
		jbe	short loc_264
		mov	eax, 2Eh ; '.'

loc_264:				; CODE XREF: _BIO_dump_indent_cb+1E9j
		push	eax
		push	offset ??_C@_02HAOIJKIC@?$CFc?$AA@ ; `string'
		lea	eax, [esp+1F4h+var_1C0]
		push	14h
		push	eax
		call	_BIO_snprintf
		push	121h
		lea	eax, [esp+200h+var_1C0]
		push	eax
		lea	eax, [esp+204h+var_1AC]
		push	eax
		call	_BUF_strlcat
		inc	esi
		add	esp, 1Ch
		inc	edi
		cmp	esi, [esp+1ECh+var_1DC]
		jl	short loc_248

loc_295:				; CODE XREF: _BIO_dump_indent_cb+1D6j
		mov	edi, [esp+1ECh+var_1DC]

loc_299:				; CODE XREF: _BIO_dump_indent_cb+1D0j
		push	121h
		lea	eax, [esp+1F0h+var_1AC]
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	eax
		call	_BUF_strlcat
		lea	ecx, [esp+1F8h+var_1AC]
		add	esp, 0Ch
		lea	edx, [ecx+1]

loc_2B7:				; CODE XREF: _BIO_dump_indent_cb+248j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_2B7
		push	[esp+1ECh+var_1C8]
		sub	ecx, edx
		lea	eax, [esp+1F0h+var_1AC]
		push	ecx
		push	eax
		call	[esp+1F8h+var_1C4]
		mov	esi, [esp+1F8h+var_1D0]
		add	esp, 0Ch
		add	esi, eax
		add	ebp, edi
		sub	[esp+1ECh+var_1D4], 1
		mov	[esp+1ECh+var_1D0], esi
		jnz	loc_174
		mov	ebp, [esp+1ECh+var_1CC]
		jmp	short loc_2F0
; ---------------------------------------------------------------------------

loc_2EE:				; CODE XREF: _BIO_dump_indent_cb+F0j
		xor	esi, esi

loc_2F0:				; CODE XREF: _BIO_dump_indent_cb+278j
		pop	edi
		test	ebp, ebp
		jle	short loc_340
		lea	eax, [ebx+ebp]
		push	eax
		lea	eax, [esp+1ECh+Dst]
		push	eax
		push	offset ??_C@_0BI@GCIHAAPI@?$CFs?$CF04x?5?9?5?$DMSPACES?1NULS?$DO?6?$AA@	; "%s%04x - <SPACES/NULS>\n"
		lea	eax, [esp+1F4h+var_1AC]
		push	121h
		push	eax
		call	_BIO_snprintf
		lea	ecx, [esp+1FCh+var_1AC]
		add	esp, 14h
		lea	edx, [ecx+1]
		nop	dword ptr [eax+eax+00h]

loc_324:				; CODE XREF: _BIO_dump_indent_cb+2B5j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_324
		push	[esp+1E8h+var_1C8]
		sub	ecx, edx
		lea	eax, [esp+1ECh+var_1AC]
		push	ecx
		push	eax
		call	[esp+1F4h+var_1C4]
		add	esp, 0Ch
		add	esi, eax

loc_340:				; CODE XREF: _BIO_dump_indent_cb+27Fj
		mov	ecx, [esp+1E8h+var_4]
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1DCh
		retn
; ---------------------------------------------------------------------------

loc_35A:				; CODE XREF: _BIO_dump_indent_cb+A3j
		call	___report_rangecheckfailure

$LN54:					; $LN51
		int	3
_BIO_dump_indent_cb endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 360h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_dump_indent_fp
_BIO_dump_indent_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset _write_fp
		call	_BIO_dump_indent_cb
		add	esp, 14h
		retn
_BIO_dump_indent_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 380h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_hex_string
_BIO_hex_string	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_10]
		xor	ebx, ebx
		cmp	ebp, 1
		jl	loc_434
		push	esi
		dec	ebp
		xor	esi, esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		test	ebp, ebp
		jle	short loc_416
		xchg	ax, ax

loc_3A0:				; CODE XREF: _BIO_hex_string+75j
		test	esi, esi
		jz	short loc_3BF
		test	ebx, ebx
		jnz	short loc_3BF
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	[esp+14h+arg_4]
		push	offset ??_C@_03HIJPJGOM@?$CF?$CKs?$AA@ ; `string'
		push	edi
		call	_BIO_printf
		add	esp, 10h

loc_3BF:				; CODE XREF: _BIO_hex_string+22j
					; _BIO_hex_string+26j
		mov	eax, [esp+10h+arg_C]
		movzx	eax, byte ptr [esi+eax]
		push	eax
		push	offset ??_C@_05KFFJODAE@?$CF02X?3?$AA@ ; "%02X:"
		push	edi
		call	_BIO_printf
		lea	eax, [ebx+1]
		add	esp, 0Ch
		cdq
		idiv	[esp+10h+arg_8]
		mov	ebx, edx
		test	ebx, ebx
		jnz	short loc_3F2
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	edi
		call	_BIO_printf
		add	esp, 8

loc_3F2:				; CODE XREF: _BIO_hex_string+62j
		inc	esi
		cmp	esi, ebp
		jl	short loc_3A0
		test	esi, esi
		jz	short loc_416
		test	ebx, ebx
		jnz	short loc_416
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	[esp+14h+arg_4]
		push	offset ??_C@_03HIJPJGOM@?$CF?$CKs?$AA@ ; `string'
		push	edi
		call	_BIO_printf
		add	esp, 10h

loc_416:				; CODE XREF: _BIO_hex_string+1Cj
					; _BIO_hex_string+79j ...
		mov	ecx, [esp+10h+arg_C]
		mov	eax, [esp+10h+arg_10]
		movzx	eax, byte ptr [ecx+eax-1]
		push	eax
		push	offset ??_C@_04JFFKLGJF@?$CF02X?$AA@ ; "%02X"
		push	edi
		call	_BIO_printf
		add	esp, 0Ch
		pop	edi
		pop	esi

loc_434:				; CODE XREF: _BIO_hex_string+Bj
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
_BIO_hex_string	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 43Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_write_bio	proc near		; DATA XREF: _BIO_dump+Eo
					; _BIO_dump_indent+10o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	[esp+8+arg_8]
		call	_BIO_write
		add	esp, 0Ch
		retn
_write_bio	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 454h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_write_fp	proc near		; DATA XREF: _BIO_dump_fp+Eo
					; _BIO_dump_indent_fp+10o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	1
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	dword ptr _OPENSSL_UplinkTable+1Ch
		add	esp, 10h
		retn
_write_fp	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 46Ch
; COMDAT (pick any)
		public ??_C@_07NAECFJGM@?$CF04x?5?9?5?$AA@
; `string'
??_C@_07NAECFJGM@?$CF04x?5?9?5?$AA@ db '%04x - ',0 ; DATA XREF: _BIO_dump_indent_cb+118o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 474h
; COMDAT (pick any)
		public ??_C@_03NDEAONJP@?5?5?5?$AA@
; `string'
??_C@_03NDEAONJP@?5?5?5?$AA@ db	'   ',0 ; DATA XREF: _BIO_dump_indent_cb+155o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 478h
; COMDAT (pick any)
		public ??_C@_06POFAOOON@?$CF02x?$CFc?$AA@
; `string'
??_C@_06POFAOOON@?$CF02x?$CFc?$AA@ db '%02x%c',0 ; DATA XREF: _BIO_dump_indent_cb+181o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 480h
; COMDAT (pick any)
		public ??_C@_02KNHHEEKP@?5?5?$AA@
; `string'
??_C@_02KNHHEEKP@?5?5?$AA@ db 2	dup(20h), 0 ; DATA XREF: _BIO_dump_indent_cb+1BEo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 484h
; COMDAT (pick any)
		public ??_C@_02HAOIJKIC@?$CFc?$AA@
; `string'
??_C@_02HAOIJKIC@?$CFc?$AA@ db 25h, 63h, 0 ; DATA XREF:	_BIO_dump_indent_cb+1F1o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 488h
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; `string'
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah, 0	; DATA XREF: _BIO_dump_indent_cb+22Eo
					; _BIO_hex_string+64o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 48Ch
; COMDAT (pick any)
		public ??_C@_0BI@GCIHAAPI@?$CFs?$CF04x?5?9?5?$DMSPACES?1NULS?$DO?6?$AA@
; `string'
??_C@_0BI@GCIHAAPI@?$CFs?$CF04x?5?9?5?$DMSPACES?1NULS?$DO?6?$AA@ db '%s%04x - <SPACES/NULS>',0Ah,0
					; DATA XREF: _BIO_dump_indent_cb+28Do
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 4A4h
; COMDAT (pick any)
		public ??_C@_00CNPNBAHC@?$AA@
; `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: _BIO_hex_string+28o
					; _BIO_hex_string+7Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4A8h
; COMDAT (pick any)
		public ??_C@_03HIJPJGOM@?$CF?$CKs?$AA@
; `string'
??_C@_03HIJPJGOM@?$CF?$CKs?$AA@	dd 732A25h ; DATA XREF:	_BIO_hex_string+31o
					; _BIO_hex_string+88o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4ACh
; COMDAT (pick any)
		public ??_C@_05KFFJODAE@?$CF02X?3?$AA@
; `string'
??_C@_05KFFJODAE@?$CF02X?3?$AA@	db '%02X:',0 ; DATA XREF: _BIO_hex_string+48o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4B4h
; COMDAT (pick any)
		public ??_C@_04JFFKLGJF@?$CF02X?$AA@
; `string'
??_C@_04JFFKLGJF@?$CF02X?$AA@ db '%02X',0 ; DATA XREF: _BIO_hex_string+A4o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn ___report_rangecheckfailure:near
					; CODE XREF: _BIO_dump_indent_cb:loc_35Ap
		extrn _BUF_strlcpy:near	; CODE XREF: _BIO_dump_indent_cb+112p
		extrn _BUF_strlcat:near	; CODE XREF: _BIO_dump_indent_cb+138p
					; _BIO_dump_indent_cb+15Bp ...
		extrn _BIO_write:near	; CODE XREF: _write_bio+Cp
		extrn _BIO_printf:near	; CODE XREF: _BIO_hex_string+37p
					; _BIO_hex_string+4Ep ...
		extrn _BIO_snprintf:near ; CODE	XREF: _BIO_dump_indent_cb+124p
					; _BIO_dump_indent_cb+18Dp ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _BIO_dump_indent_cb+2DAp
		extrn __chkstk:near	; CODE XREF: _BIO_dump_indent_cb+5p
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _BIO_dump_indent_cb+95p
		extrn _OPENSSL_UplinkTable:near	; DATA XREF: _write_fp+Er
		extrn ___security_cookie:near ;	DATA XREF: _BIO_dump_indent_cb+Ar


		end
