;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	012FBF1629C0A52CB5B48E656B12BB47
; Input	CRC32 :	E78F42D0

; File Name   :	C:\compspace\Diff\openssl\obj\wp_test.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
		public _iso_test_1
_iso_test_1	dd 0D761FA19h, 66A42255h, 9CE3449Bh, 26172E1Dh,	212330C5h
					; DATA XREF: _main+7Bo
		dd 0F807D430h, 96E0FE9Ah, 0A7F79749h, 69BE833Eh, 0EB8F288Bh
		dd 0E0E388CFh, 57074F3Ch, 0E56489EAh, 37D9639Bh, 0CC38B108h
		dd 0B36EA642h
		public _iso_test_2
_iso_test_2	dd 226CA8Ah, 6FEC2A79h,	672A611h, 0D7B71F53h, 94F5DFF0h
					; DATA XREF: _main+D8o
		dd 695E1413h, 150C473h,	427B08D0h, 45C61BD1h, 0F6EF3A41h
		dd 1A39423Ah, 595A1439h, 0D20921Ah, 0E5950156h,	8485473Bh
		dd 1A23AEFDh
		public _iso_test_3
_iso_test_3	dd 0A448244Eh, 0BB86F4C6h, 2C56B616h, 0B02B473h, 3A3E04F3h
					; DATA XREF: _main+12Eo
		dd 72CE1B73h, 3B3E11Ah,	4C6D7ED9h, 0BDEE8171h, 277EC5B6h
		dd 95340E7Dh, 0D6CB1471h, 9DFC97C7h, 82B5D895h,	202925D2h
		dd 0F5EED476h
		public _iso_test_4
_iso_test_4	dd 0A4848C37h, 0C62D6E12h, 74CC6DE5h, 0AC7A3758h, 3008D83h
					; DATA XREF: _main+18Co
		dd 3CF53022h, 0C70F5E1h, 3B4DFB0Fh, 76552184h, 0C155EF59h
		dd 2AB5B406h, 0A6AAA4C5h, 92ED92h, 338F8352h, 0BD6DE862h
		dd 3E90A837h
		public _iso_test_5
_iso_test_5	dd 6654D7F1h, 0E9FF3626h, 0B9EB822Ch, 4A482A21h, 1E63388Dh
					; DATA XREF: _main+1E2o
		dd 0F53842ADh, 3BE12E44h, 1BE45480h, 922ABF08h,	6A0BC351h
		dd 86AE8A0Bh, 0A6B47A17h, 3E678FF6h, 5D860772h,	0A319985Dh
		dd 3BEBA4DBh
		public _iso_test_6
_iso_test_6	dd 8E037DCh, 9BE69ECFh,	0ED001FF1h, 9026BA9Ah, 8CC2D71Dh
					; DATA XREF: _main+23Co
		dd 0CC66C0DEh, 402EF46Ah, 1E3A2FF8h, 66A2EB08h,	8F9D1229h
		dd 2157CBB7h, 0A681921Bh, 87CC1755h, 21967B9Dh,	5A5FC642h
		dd 6714F07Ah
		public _iso_test_7
_iso_test_7	dd 8BF16E46h, 4D15B0ABh, 8AD3B925h, 0C0F51464h,	2B378487h
					; DATA XREF: _main+292o
		dd 0D604B2CCh, 0FA4A9C54h, 291460DBh, 0DFD85B4Dh, 0E5446C2Ah
		dd 7B04CD38h, 1AA58126h, 1E48602Ch, 0BA2C588h, 0CF802A2Ch
		dd 3B089A3Ah
		public _iso_test_8
_iso_test_8	dd 0A47E982Ah, 6170910Fh, 0A0F0D6F5h, 484F64E4h, 525A7A8Ah
					; DATA XREF: _main+2ECo
		dd 6265EEDEh, 0F962C507h, 695CE988h, 3C8BD16h, 1BBEC51Bh
		dd 3976947Bh, 560B05FEh, 0A0AA9B93h, 0E69AFFADh, 187B5B74h
		dd 0FDE33B1Ch
		public _iso_test_9
_iso_test_9	dd 5B00990Ch, 0F5EF57EBh, 5F07C0Ah, 5DDF0D56h, 0D87F0529h
					; DATA XREF: _main+379o
		dd 0D6BF206Bh, 0F1A0EC2Dh, 0F54AEACCh, 9054C11Fh, 0AF47DCEDh
		dd 662BBB32h, 0ADF94FC3h, 0AD08608Ch, 12777F67h, 26B25369h
		dd 18BEDE4h
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 240h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; _fprintf+Fp
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 248h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 26Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int fprintf(FILE *File, const	char *Format, ...)
		public _fprintf
_fprintf	proc near		; CODE XREF: _main+58p	_main+A8p ...

File		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= byte ptr  0Ch

		lea	eax, [esp+arg_8]
		push	eax
		push	0
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
_fprintf	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 290h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public _main
_main		proc near

var_EC		= byte ptr -0ECh
var_44		= byte ptr -44h
var_4		= dword	ptr -4
argc		= dword	ptr  4
argv		= dword	ptr  8
envp		= dword	ptr  0Ch

		mov	eax, 0ECh ; 'ì'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+0ECh+var_4], eax
		push	esi
		push	edi
		push	offset ??_C@_0BA@MIDPHNKH@OPENSSL_ia32cap?$AA@ ; "OPENSSL_ia32cap"
		call	dword ptr ds:__imp__getenv
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_2D5
		call	_OPENSSL_ia32cap_loc
		push	0		; Radix
		push	0		; EndPtr
		push	edi		; Str
		mov	esi, eax
		call	dword ptr ds:__imp__strtoul
		add	esp, 0Ch
		mov	[esi], eax

loc_2D5:				; CODE XREF: _main+2Cj
		mov	esi, dword ptr ds:__imp____acrt_iob_func
		push	offset ??_C@_0BD@NDHMLHBL@Testing?5Whirlpool?5?$AA@ ; "Testing Whirlpool "
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		lea	eax, [esp+0FCh+var_44]
		push	eax
		push	0
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		call	_WHIRLPOOL
		add	esp, 14h
		lea	ecx, [esp+0F4h+var_44]
		mov	edx, offset _iso_test_1
		mov	edi, 3Ch ; '<'

loc_315:				; CODE XREF: _main+98j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	loc_729
		add	ecx, 4
		add	edx, 4
		sub	edi, 4
		jnb	short loc_315
		push	ebx
		push	offset ??_C@_01LFCBOECM@?4?$AA@	; "."
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	1
		call	esi ; __imp____acrt_iob_func
		mov	ebx, dword ptr ds:__imp__fflush
		push	eax		; File
		call	ebx ; __imp__fflush
		lea	eax, [esp+108h+var_44]
		push	eax
		push	1
		push	offset ??_C@_01MCMALHOG@a?$AA@ ; `string'
		call	_WHIRLPOOL
		add	esp, 1Ch
		lea	ecx, [esp+0F8h+var_44]
		mov	edx, offset _iso_test_2
		mov	edi, 3Ch ; '<'

loc_372:				; CODE XREF: _main+F5j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	loc_6ED
		add	ecx, 4
		add	edx, 4
		sub	edi, 4
		jnb	short loc_372
		push	offset ??_C@_01LFCBOECM@?4?$AA@	; "."
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		lea	eax, [esp+108h+var_44]
		push	eax
		push	3
		push	offset ??_C@_03FIKCJHKP@abc?$AA@ ; `string'
		call	_WHIRLPOOL
		add	esp, 1Ch
		lea	ecx, [esp+0F8h+var_44]
		mov	edx, offset _iso_test_3
		mov	edi, 3Ch ; '<'
		nop	dword ptr [eax+eax+00000000h]

loc_3D0:				; CODE XREF: _main+153j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	loc_6DC
		add	ecx, 4
		add	edx, 4
		sub	edi, 4
		jnb	short loc_3D0
		push	offset ??_C@_01LFCBOECM@?4?$AA@	; "."
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		lea	eax, [esp+108h+var_44]
		push	eax
		push	0Eh
		push	offset ??_C@_0P@ONGHGJEC@message?5digest?$AA@ ;	"message digest"
		call	_WHIRLPOOL
		add	esp, 1Ch
		lea	ecx, [esp+0F8h+var_44]
		mov	edx, offset _iso_test_4
		mov	edi, 3Ch ; '<'

loc_426:				; CODE XREF: _main+1A9j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	loc_6CB
		add	ecx, 4
		add	edx, 4
		sub	edi, 4
		jnb	short loc_426
		push	offset ??_C@_01LFCBOECM@?4?$AA@	; "."
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		lea	eax, [esp+108h+var_44]
		push	eax
		push	1Ah
		push	offset ??_C@_0BL@JIGBPIBD@abcdefghijklmnopqrstuvwxyz?$AA@ ; "abcdefghijklmnopqrstuvwxyz"
		call	_WHIRLPOOL
		add	esp, 1Ch
		lea	ecx, [esp+0F8h+var_44]
		mov	edx, offset _iso_test_5
		mov	edi, 3Ch ; '<'
		nop	dword ptr [eax+00h]

loc_480:				; CODE XREF: _main+203j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	loc_6BA
		add	ecx, 4
		add	edx, 4
		sub	edi, 4
		jnb	short loc_480
		push	offset ??_C@_01LFCBOECM@?4?$AA@	; "."
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		lea	eax, [esp+108h+var_44]
		push	eax
		push	3Eh ; '>'
		push	offset ??_C@_0DP@EFDPGBGM@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef@ ; "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm"...
		call	_WHIRLPOOL
		add	esp, 1Ch
		lea	ecx, [esp+0F8h+var_44]
		mov	edx, offset _iso_test_6
		mov	edi, 3Ch ; '<'

loc_4D6:				; CODE XREF: _main+259j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	loc_6A9
		add	ecx, 4
		add	edx, 4
		sub	edi, 4
		jnb	short loc_4D6
		push	offset ??_C@_01LFCBOECM@?4?$AA@	; "."
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		lea	eax, [esp+108h+var_44]
		push	eax
		push	50h ; 'P'
		push	offset ??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@ ; "123456789012345678901234567890123456789"...
		call	_WHIRLPOOL
		add	esp, 1Ch
		lea	ecx, [esp+0F8h+var_44]
		mov	edx, offset _iso_test_7
		mov	edi, 3Ch ; '<'
		nop	dword ptr [eax+00h]

loc_530:				; CODE XREF: _main+2B3j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	loc_698
		add	ecx, 4
		add	edx, 4
		sub	edi, 4
		jnb	short loc_530
		push	offset ??_C@_01LFCBOECM@?4?$AA@	; "."
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		lea	eax, [esp+108h+var_44]
		push	eax
		push	20h ; ' '
		push	offset ??_C@_0CB@BAPJCFDG@abcdbcdecdefdefgefghfghighijhijk@ ; "abcdbcdecdefdefgefghfghighijhijk"
		call	_WHIRLPOOL
		add	esp, 1Ch
		lea	ecx, [esp+0F8h+var_44]
		mov	edx, offset _iso_test_8
		mov	edi, 3Ch ; '<'

loc_586:				; CODE XREF: _main+309j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	loc_687
		add	ecx, 4
		add	edx, 4
		sub	edi, 4
		jnb	short loc_586
		push	offset ??_C@_01LFCBOECM@?4?$AA@	; "."
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		lea	eax, [esp+108h+var_EC]
		push	eax
		call	_WHIRLPOOL_Init
		add	esp, 14h
		mov	edi, 0F4240h

loc_5C6:				; CODE XREF: _main+35Bj
		mov	eax, 120h
		cmp	edi, eax
		cmovl	eax, edi
		push	eax
		lea	eax, [esp+0FCh+var_EC]
		push	offset ??_C@_0BCB@NLPKPNBG@aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@ ; "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"...
		push	eax
		call	_WHIRLPOOL_Update
		sub	edi, 120h
		add	esp, 0Ch
		test	edi, edi
		jg	short loc_5C6
		lea	eax, [esp+0F8h+var_EC]
		push	eax
		lea	eax, [esp+0FCh+var_44]
		push	eax
		call	_WHIRLPOOL_Final
		add	esp, 8
		lea	ecx, [esp+0F8h+var_44]
		mov	edx, offset _iso_test_9
		mov	edi, 3Ch ; '<'

loc_613:				; CODE XREF: _main+392j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_676
		add	ecx, 4
		add	edx, 4
		sub	edi, 4
		jnb	short loc_613
		push	offset ??_C@_01LFCBOECM@?4?$AA@	; "."
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		add	esp, 10h
		push	offset ??_C@_09MCFGFJHJ@?5passed?4?6?$AA@ ; " passed.\n"
		push	1
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		add	esp, 10h
		xor	eax, eax
		pop	ebx
		pop	edi
		pop	esi
		mov	ecx, [esp+0ECh+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0ECh
		retn
; ---------------------------------------------------------------------------

loc_676:				; CODE XREF: _main+387j
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		add	esp, 8
		push	offset ??_C@_0BG@JEEKHBGE@?6TEST?59?5of?59?5failed?4?6?$AA@ ; "\nTEST 9	of 9 failed.\n"
		jmp	short loc_6FC
; ---------------------------------------------------------------------------

loc_687:				; CODE XREF: _main+2FAj
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		add	esp, 8
		push	offset ??_C@_0BG@DKCCOAPF@?6TEST?58?5of?59?5failed?4?6?$AA@ ; "\nTEST 8	of 9 failed.\n"
		jmp	short loc_6FC
; ---------------------------------------------------------------------------

loc_698:				; CODE XREF: _main+2A4j
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		add	esp, 8
		push	offset ??_C@_0BG@LEMIIHMP@?6TEST?57?5of?59?5failed?4?6?$AA@ ; "\nTEST 7	of 9 failed.\n"
		jmp	short loc_6FC
; ---------------------------------------------------------------------------

loc_6A9:				; CODE XREF: _main+24Aj
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		add	esp, 8
		push	offset ??_C@_0BG@BKKABGFO@?6TEST?56?5of?59?5failed?4?6?$AA@ ; "\nTEST 6	of 9 failed.\n"
		jmp	short loc_6FC
; ---------------------------------------------------------------------------

loc_6BA:				; CODE XREF: _main+1F4j
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		add	esp, 8
		push	offset ??_C@_0BG@DDGIKCKM@?6TEST?55?5of?59?5failed?4?6?$AA@ ; "\nTEST 5	of 9 failed.\n"
		jmp	short loc_6FC
; ---------------------------------------------------------------------------

loc_6CB:				; CODE XREF: _main+19Aj
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		add	esp, 8
		push	offset ??_C@_0BG@JNAADDDN@?6TEST?54?5of?59?5failed?4?6?$AA@ ; "\nTEST 4	of 9 failed.\n"
		jmp	short loc_6FC
; ---------------------------------------------------------------------------

loc_6DC:				; CODE XREF: _main+144j
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		add	esp, 8
		push	offset ??_C@_0BG@GAPJMLEI@?6TEST?53?5of?59?5failed?4?6?$AA@ ; "\nTEST 3	of 9 failed.\n"
		jmp	short loc_6FC
; ---------------------------------------------------------------------------

loc_6ED:				; CODE XREF: _main+E6j
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		add	esp, 8
		push	offset ??_C@_0BG@MOJBFKNJ@?6TEST?52?5of?59?5failed?4?6?$AA@ ; "\nTEST 2	of 9 failed.\n"

loc_6FC:				; CODE XREF: _main+3F5j _main+406j ...
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 8
		mov	eax, 1
		pop	ebx
		pop	edi
		pop	esi
		mov	ecx, [esp+0ECh+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0ECh
		retn
; ---------------------------------------------------------------------------

loc_729:				; CODE XREF: _main+89j
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax		; File
		call	dword ptr ds:__imp__fflush
		add	esp, 8
		push	offset ??_C@_0BG@OHFJOOCL@?6TEST?51?5of?59?5failed?4?6?$AA@ ; "\nTEST 1	of 9 failed.\n"
		push	2
		call	esi ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		mov	ecx, [esp+0FCh+var_4]
		add	esp, 8
		mov	eax, 1
		pop	edi
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0ECh
		retn
_main		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 768h
; COMDAT (pick any)
		public ??_C@_0BA@MIDPHNKH@OPENSSL_ia32cap?$AA@
; char `string'[]
??_C@_0BA@MIDPHNKH@OPENSSL_ia32cap?$AA@	db 'OPENSSL_ia32cap',0 ; DATA XREF: _main+1Ao
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 778h
; COMDAT (pick any)
		public ??_C@_0BD@NDHMLHBL@Testing?5Whirlpool?5?$AA@
; char `string'[]
??_C@_0BD@NDHMLHBL@Testing?5Whirlpool?5?$AA@ db	'Testing Whirlpool ',0
					; DATA XREF: _main+4Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 78Ch
; COMDAT (pick any)
		public ??_C@_00CNPNBAHC@?$AA@
; `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: _main+67o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 790h
; COMDAT (pick any)
		public ??_C@_0BG@OHFJOOCL@?6TEST?51?5of?59?5failed?4?6?$AA@
; char `string'[]
??_C@_0BG@OHFJOOCL@?6TEST?51?5of?59?5failed?4?6?$AA@ db	0Ah ; DATA XREF: _main+4A7o
		db 'TEST 1 of 9 failed.',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7A8h
; COMDAT (pick any)
		public ??_C@_01LFCBOECM@?4?$AA@
; char `string'[2]
??_C@_01LFCBOECM@?4?$AA@ db '.',0       ; DATA XREF: _main+9Bo _main+F7o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7ACh
; COMDAT (pick any)
		public ??_C@_01MCMALHOG@a?$AA@
; `string'
??_C@_01MCMALHOG@a?$AA@	db 61h,	0	; DATA XREF: _main+C4o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7B0h
; COMDAT (pick any)
		public ??_C@_0BG@MOJBFKNJ@?6TEST?52?5of?59?5failed?4?6?$AA@
; char `string'[]
??_C@_0BG@MOJBFKNJ@?6TEST?52?5of?59?5failed?4?6?$AA@ db	0Ah ; DATA XREF: _main+467o
		db 'TEST 2 of 9 failed.',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7C8h
; COMDAT (pick any)
		public ??_C@_03FIKCJHKP@abc?$AA@
; `string'
??_C@_03FIKCJHKP@abc?$AA@ dd 636261h	; DATA XREF: _main+11Ao
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7CCh
; COMDAT (pick any)
		public ??_C@_0BG@GAPJMLEI@?6TEST?53?5of?59?5failed?4?6?$AA@
; `string'
??_C@_0BG@GAPJMLEI@?6TEST?53?5of?59?5failed?4?6?$AA@ db	0Ah ; DATA XREF: _main+456o
		db 'TEST 3 of 9 failed.',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7E4h
; COMDAT (pick any)
		public ??_C@_0P@ONGHGJEC@message?5digest?$AA@
; `string'
??_C@_0P@ONGHGJEC@message?5digest?$AA@ db 'message digest',0 ; DATA XREF: _main+178o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7F4h
; COMDAT (pick any)
		public ??_C@_0BG@JNAADDDN@?6TEST?54?5of?59?5failed?4?6?$AA@
; `string'
??_C@_0BG@JNAADDDN@?6TEST?54?5of?59?5failed?4?6?$AA@ db	0Ah ; DATA XREF: _main+445o
		db 'TEST 4 of 9 failed.',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 80Ch
; COMDAT (pick any)
		public ??_C@_0BL@JIGBPIBD@abcdefghijklmnopqrstuvwxyz?$AA@
; `string'
??_C@_0BL@JIGBPIBD@abcdefghijklmnopqrstuvwxyz?$AA@ db 'abcdefghijklmnopqrstuvwxyz',0
					; DATA XREF: _main+1CEo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 828h
; COMDAT (pick any)
		public ??_C@_0BG@DDGIKCKM@?6TEST?55?5of?59?5failed?4?6?$AA@
; `string'
??_C@_0BG@DDGIKCKM@?6TEST?55?5of?59?5failed?4?6?$AA@ db	0Ah ; DATA XREF: _main+434o
		db 'TEST 5 of 9 failed.',0Ah,0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 840h
; COMDAT (pick any)
		public ??_C@_0DP@EFDPGBGM@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef@
; `string'
??_C@_0DP@EFDPGBGM@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef@ db	'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',0
					; DATA XREF: _main+228o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 880h
; COMDAT (pick any)
		public ??_C@_0BG@BKKABGFO@?6TEST?56?5of?59?5failed?4?6?$AA@
; `string'
??_C@_0BG@BKKABGFO@?6TEST?56?5of?59?5failed?4?6?$AA@ db	0Ah ; DATA XREF: _main+423o
		db 'TEST 6 of 9 failed.',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 898h
; COMDAT (pick any)
		public ??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@
; `string'
??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@ db	'12345678901234567890123456789012345678901234567890123456789012345'
					; DATA XREF: _main+27Eo
		db '678901234567890',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8ECh
; COMDAT (pick any)
		public ??_C@_0BG@LEMIIHMP@?6TEST?57?5of?59?5failed?4?6?$AA@
; `string'
??_C@_0BG@LEMIIHMP@?6TEST?57?5of?59?5failed?4?6?$AA@ db	0Ah ; DATA XREF: _main+412o
		db 'TEST 7 of 9 failed.',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 904h
; COMDAT (pick any)
		public ??_C@_0CB@BAPJCFDG@abcdbcdecdefdefgefghfghighijhijk@
; `string'
??_C@_0CB@BAPJCFDG@abcdbcdecdefdefgefghfghighijhijk@ db	'abcdbcdecdefdefgefghfghighijhijk',0
					; DATA XREF: _main+2D8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 928h
; COMDAT (pick any)
		public ??_C@_0BG@DKCCOAPF@?6TEST?58?5of?59?5failed?4?6?$AA@
; `string'
??_C@_0BG@DKCCOAPF@?6TEST?58?5of?59?5failed?4?6?$AA@ db	0Ah ; DATA XREF: _main+401o
		db 'TEST 8 of 9 failed.',0Ah,0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 940h
; COMDAT (pick any)
		public ??_C@_0BCB@NLPKPNBG@aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@
; `string'
??_C@_0BCB@NLPKPNBG@aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@ db 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
					; DATA XREF: _main+345o
		db 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
		db 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
		db 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
		db 'aaaaaaaaaaaaaaaaaaaaaaaaaaaa',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A64h
; COMDAT (pick any)
		public ??_C@_0BG@JEEKHBGE@?6TEST?59?5of?59?5failed?4?6?$AA@
; `string'
??_C@_0BG@JEEKHBGE@?6TEST?59?5of?59?5failed?4?6?$AA@ db	0Ah ; DATA XREF: _main+3F0o
		db 'TEST 9 of 9 failed.',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A7Ch
; COMDAT (pick any)
		public ??_C@_09MCFGFJHJ@?5passed?4?6?$AA@
; char `string'[]
??_C@_09MCFGFJHJ@?5passed?4?6?$AA@ db ' passed.',0Ah,0 ; DATA XREF: _main+3B0o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _main+52p
					; _main+A2p ...
; int __cdecl _fflush(FILE *File)
		extrn __imp__fflush:near ; CODE	XREF: _main+B8p _main+10Ep ...
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _fprintf+19p
					; DATA XREF: ...
; unsigned __int32 __cdecl _strtoul(const char *Str, char **EndPtr, int	Radix)
		extrn __imp__strtoul:near ; CODE XREF: _main+3Ap
					; DATA XREF: _main+3Ar
; char *__cdecl	_getenv(const char *VarName)
		extrn __imp__getenv:near ; CODE	XREF: _main+1Fp
					; DATA XREF: _main+1Fr
		extrn _WHIRLPOOL_Init:near ; CODE XREF:	_main+329p
		extrn _WHIRLPOOL_Update:near ; CODE XREF: _main+34Bp
		extrn _WHIRLPOOL_Final:near ; CODE XREF: _main+36Ap
		extrn _WHIRLPOOL:near	; CODE XREF: _main+6Cp	_main+C9p ...
		extrn _OPENSSL_ia32cap_loc:near	; CODE XREF: _main+2Ep
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _main+3DAp
					; _main+48Dp ...
		extrn __chkstk:near	; CODE XREF: _main+5p
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso
		extrn ___security_cookie:near ;	DATA XREF: _main+Ar


		end
