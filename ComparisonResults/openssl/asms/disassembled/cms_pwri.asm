;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	7A4DF60A1A8A3A6CBA29E8EDD18C28D5
; Input	CRC32 :	338A403E

; File Name   :	C:\compspace\Diff\openssl\obj\cms_pwri.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_RecipientInfo_set0_password
_CMS_RecipientInfo_set0_password proc near ; CODE XREF:	_CMS_add0_recipient_password+277p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax], 3
		jz	short loc_27
		push	47h ; 'G'
		push	offset ??_C@_0BI@JJBFJHOL@?4?2crypto?2cms?2cms_pwri?4c?$AA@ ; ".\\crypto\\cms\\cms_pwri.c"
		push	0B1h ; '±'
		push	0A8h ; '¨'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_27:					; CODE XREF: _CMS_RecipientInfo_set0_password+7j
		mov	edx, [eax+4]
		mov	eax, [esp+arg_4]
		mov	ecx, [esp+arg_8]
		mov	[edx+10h], eax
		test	eax, eax
		jz	short loc_4D
		test	ecx, ecx
		jns	short loc_4D
		mov	ecx, eax
		push	esi
		lea	esi, [ecx+1]

loc_43:					; CODE XREF: _CMS_RecipientInfo_set0_password+48j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_43
		sub	ecx, esi
		pop	esi

loc_4D:					; CODE XREF: _CMS_RecipientInfo_set0_password+37j
					; _CMS_RecipientInfo_set0_password+3Bj
		mov	[edx+14h], ecx
		mov	eax, 1
		retn
_CMS_RecipientInfo_set0_password endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 58h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_add0_recipient_password
_CMS_add0_recipient_password proc near

var_A4		= dword	ptr -0A4h
var_A0		= byte ptr -0A0h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, 0A4h ; '¤'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+0A4h+var_4], eax
		mov	eax, [esp+0A4h+arg_0]
		mov	ecx, [esp+0A4h+arg_4]
		push	ebx
		mov	ebx, [esp+0A8h+arg_18]
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+0B4h+arg_8]
		xor	esi, esi
		push	eax
		mov	[esp+0B8h+var_A4], ecx
		call	_cms_get0_enveloped
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jz	loc_332
		test	edi, edi
		mov	eax, 37Dh
		cmovle	edi, eax
		test	ebx, ebx
		jnz	short loc_DE
		mov	eax, [ebp+0Ch]
		mov	ebx, [eax+0Ch]
		test	ebx, ebx
		jnz	short loc_DE
		push	71h ; 'q'
		push	offset ??_C@_0BI@JJBFJHOL@?4?2crypto?2cms?2cms_pwri?4c?$AA@ ; ".\\crypto\\cms\\cms_pwri.c"
		push	7Eh ; '~'
		push	0A5h ; '¥'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_332
; ---------------------------------------------------------------------------

loc_DE:					; CODE XREF: _CMS_add0_recipient_password+5Dj
					; _CMS_add0_recipient_password+67j
		cmp	edi, 37Dh
		jz	short loc_106
		push	76h ; 'v'
		push	offset ??_C@_0BI@JJBFJHOL@?4?2crypto?2cms?2cms_pwri?4c?$AA@ ; ".\\crypto\\cms\\cms_pwri.c"
		push	0B3h ; '³'
		push	0A5h ; '¥'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_332
; ---------------------------------------------------------------------------

loc_106:				; CODE XREF: _CMS_add0_recipient_password+8Cj
		call	_X509_ALGOR_new
		mov	edi, eax
		test	edi, edi
		jz	$merr$28
		lea	eax, [esp+0B4h+var_A0]
		push	eax
		call	_EVP_CIPHER_CTX_init
		push	0
		push	0
		push	0
		lea	eax, [esp+0C4h+var_A0]
		push	ebx
		push	eax
		call	_EVP_EncryptInit_ex
		add	esp, 18h
		test	eax, eax
		jg	short loc_148
		push	82h ; '‚'
		push	offset ??_C@_0BI@JJBFJHOL@?4?2crypto?2cms?2cms_pwri?4c?$AA@ ; ".\\crypto\\cms\\cms_pwri.c"
		push	6
		jmp	loc_2F6
; ---------------------------------------------------------------------------

loc_148:				; CODE XREF: _CMS_add0_recipient_password+DDj
		lea	eax, [esp+0B4h+var_A0]
		push	eax
		call	_EVP_CIPHER_CTX_iv_length
		add	esp, 4
		test	eax, eax
		jle	loc_1DF
		push	eax
		lea	eax, [esp+0B8h+var_14]
		push	eax
		call	_RAND_pseudo_bytes
		add	esp, 8
		test	eax, eax
		jle	$err$29
		lea	eax, [esp+0B4h+var_14]
		push	eax
		push	0
		push	0
		lea	eax, [esp+0C0h+var_A0]
		push	0
		push	eax
		call	_EVP_EncryptInit_ex
		add	esp, 14h
		test	eax, eax
		jg	short loc_1A6
		push	8Ch ; 'Œ'
		push	offset ??_C@_0BI@JJBFJHOL@?4?2crypto?2cms?2cms_pwri?4c?$AA@ ; ".\\crypto\\cms\\cms_pwri.c"
		push	6
		jmp	loc_2F6
; ---------------------------------------------------------------------------

loc_1A6:				; CODE XREF: _CMS_add0_recipient_password+13Bj
		call	_ASN1_TYPE_new
		mov	[edi+4], eax
		test	eax, eax
		jnz	short loc_1BC
		push	91h ; '‘'
		jmp	loc_2EF
; ---------------------------------------------------------------------------

loc_1BC:				; CODE XREF: _CMS_add0_recipient_password+158j
		push	eax
		lea	eax, [esp+0B8h+var_A0]
		push	eax
		call	_EVP_CIPHER_param_to_asn1
		add	esp, 8
		test	eax, eax
		jg	short loc_1DF
		push	96h ; '–'
		push	offset ??_C@_0BI@JJBFJHOL@?4?2crypto?2cms?2cms_pwri?4c?$AA@ ; ".\\crypto\\cms\\cms_pwri.c"
		push	66h ; 'f'
		jmp	loc_2F6
; ---------------------------------------------------------------------------

loc_1DF:				; CODE XREF: _CMS_add0_recipient_password+FFj
					; _CMS_add0_recipient_password+174j
		lea	eax, [esp+0B4h+var_A0]
		push	eax
		call	_EVP_CIPHER_CTX_cipher
		push	eax
		call	_EVP_CIPHER_type
		push	eax
		call	_OBJ_nid2obj
		mov	[edi], eax
		lea	eax, [esp+0C0h+var_A0]
		push	eax
		call	_EVP_CIPHER_CTX_cleanup
		call	_CMS_RecipientInfo_it
		push	eax
		call	_ASN1_item_new
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jz	$merr$28
		call	_CMS_PasswordRecipientInfo_it
		push	eax
		call	_ASN1_item_new
		mov	ebx, eax
		add	esp, 4
		mov	[esi+4], ebx
		test	ebx, ebx
		jz	$merr$28
		mov	dword ptr [esi], 3
		push	dword ptr [ebx+8]
		call	_X509_ALGOR_free
		add	esp, 4
		call	_X509_ALGOR_new
		mov	[ebx+8], eax
		test	eax, eax
		jz	$merr$28
		push	37Dh
		call	_OBJ_nid2obj
		mov	ecx, [ebx+8]
		add	esp, 4
		mov	[ecx], eax
		call	_ASN1_TYPE_new
		mov	ecx, [ebx+8]
		mov	[ecx+4], eax
		mov	eax, [ebx+8]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short $merr$28
		add	eax, 4
		push	eax
		call	_X509_ALGOR_it
		push	eax
		push	edi
		call	_ASN1_item_pack
		add	esp, 0Ch
		test	eax, eax
		jz	short $merr$28
		mov	eax, [ebx+8]
		push	edi
		mov	eax, [eax+4]
		mov	dword ptr [eax], 10h
		call	_X509_ALGOR_free
		push	0FFFFFFFFh
		push	0FFFFFFFFh
		xor	edi, edi
		push	edi
		push	edi
		push	[esp+0C8h+var_A4]
		call	_PKCS5_pbkdf2_set
		add	esp, 18h
		mov	[ebx+4], eax
		test	eax, eax
		jz	short $err$29
		push	[esp+0B4h+arg_14]
		push	[esp+0B8h+arg_10]
		push	esi
		call	_CMS_RecipientInfo_set0_password
		mov	[ebx], edi
		push	esi
		push	dword ptr [ebp+8]
		call	_sk_push
		add	esp, 14h
		test	eax, eax
		jz	short $merr$28
		mov	eax, esi
		jmp	short loc_334
; ---------------------------------------------------------------------------

$merr$28:				; CODE XREF: _CMS_add0_recipient_password+B7j
					; _CMS_add0_recipient_password+1BBj ...
		push	0CDh ; 'Í'

loc_2EF:				; CODE XREF: _CMS_add0_recipient_password+15Fj
		push	offset ??_C@_0BI@JJBFJHOL@?4?2crypto?2cms?2cms_pwri?4c?$AA@ ; ".\\crypto\\cms\\cms_pwri.c"
		push	41h ; 'A'

loc_2F6:				; CODE XREF: _CMS_add0_recipient_password+EBj
					; _CMS_add0_recipient_password+149j ...
		push	0A5h ; '¥'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h

$err$29:				; CODE XREF: _CMS_add0_recipient_password+118j
					; _CMS_add0_recipient_password+266j
		lea	eax, [esp+0B4h+var_A0]
		push	eax
		call	_EVP_CIPHER_CTX_cleanup
		add	esp, 4
		test	esi, esi
		jz	short loc_325
		call	_CMS_RecipientInfo_it
		push	eax
		push	esi
		call	_ASN1_item_free
		add	esp, 8

loc_325:				; CODE XREF: _CMS_add0_recipient_password+2BCj
		test	edi, edi
		jz	short loc_332
		push	edi
		call	_X509_ALGOR_free
		add	esp, 4

loc_332:				; CODE XREF: _CMS_add0_recipient_password+4Bj
					; _CMS_add0_recipient_password+81j ...
		xor	eax, eax

loc_334:				; CODE XREF: _CMS_add0_recipient_password+290j
		mov	ecx, [esp+0B4h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0A4h
		retn
_CMS_add0_recipient_password endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 350h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _cms_RecipientInfo_pwri_crypt
_cms_RecipientInfo_pwri_crypt proc near

var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 0A0h ; ' '
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+0A0h+var_4], eax
		mov	eax, [esp+0A0h+arg_0]
		mov	ecx, [esp+0A0h+arg_4]
		push	ebp
		push	esi
		mov	eax, [eax+4]
		xor	esi, esi
		mov	[esp+0A8h+var_98], 0
		push	edi
		mov	edi, [ecx+4]
		mov	ebp, [eax+0Ch]
		lea	eax, [esp+0ACh+var_90]
		push	eax
		mov	[esp+0B0h+var_94], 0
		call	_EVP_CIPHER_CTX_init
		add	esp, 4
		cmp	[edi+10h], esi
		jnz	short loc_3DE
		push	152h
		push	offset ??_C@_0BI@JJBFJHOL@?4?2crypto?2cms?2cms_pwri?4c?$AA@ ; ".\\crypto\\cms\\cms_pwri.c"
		push	0B2h ; '²'
		push	0A7h ; '§'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		mov	ecx, [esp+0A0h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0A0h
		retn
; ---------------------------------------------------------------------------

loc_3DE:				; CODE XREF: _cms_RecipientInfo_pwri_crypt+54j
		push	ebx
		mov	ebx, [edi+8]
		test	ebx, ebx
		jz	loc_683
		push	dword ptr [ebx]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 37Dh
		jnz	loc_683
		mov	eax, [ebx+4]
		cmp	dword ptr [eax], 10h
		jnz	loc_672
		mov	eax, [eax+4]
		mov	eax, [eax+8]
		mov	[esp+0B0h+var_98], eax
		mov	eax, [ebx+4]
		mov	eax, [eax+4]
		push	dword ptr [eax]
		lea	eax, [esp+0B4h+var_98]
		push	eax
		push	0
		call	_d2i_X509_ALGOR
		mov	ebx, eax
		add	esp, 0Ch
		mov	[esp+0B0h+var_A0], ebx
		test	ebx, ebx
		jz	loc_672
		push	dword ptr [ebx]
		call	_OBJ_obj2nid
		push	eax
		call	_OBJ_nid2sn
		push	eax
		call	_EVP_get_cipherbyname
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_477
		push	16Bh
		push	offset ??_C@_0BI@JJBFJHOL@?4?2crypto?2cms?2cms_pwri?4c?$AA@ ; ".\\crypto\\cms\\cms_pwri.c"
		push	94h ; '”'
		push	0A7h ; '§'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$36
; ---------------------------------------------------------------------------

loc_477:				; CODE XREF: _cms_RecipientInfo_pwri_crypt+102j
		mov	ebx, [esp+0B0h+arg_8]
		push	ebx
		push	0
		push	0
		push	0
		push	eax
		lea	eax, [esp+0C4h+var_90]
		push	eax
		call	_EVP_CipherInit_ex
		add	esp, 18h
		test	eax, eax
		jz	loc_63F
		lea	eax, [esp+0B0h+var_90]
		push	0
		push	eax
		call	_EVP_CIPHER_CTX_set_padding
		mov	eax, [esp+0B8h+var_A0]
		push	dword ptr [eax+4]
		lea	eax, [esp+0BCh+var_90]
		push	eax
		call	_EVP_CIPHER_asn1_to_param
		add	esp, 10h
		test	eax, eax
		jns	short loc_4DF
		push	175h
		push	offset ??_C@_0BI@JJBFJHOL@?4?2crypto?2cms?2cms_pwri?4c?$AA@ ; ".\\crypto\\cms\\cms_pwri.c"
		push	66h ; 'f'
		push	0A7h ; '§'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_63F
; ---------------------------------------------------------------------------

loc_4DF:				; CODE XREF: _cms_RecipientInfo_pwri_crypt+16Dj
		mov	eax, [edi+4]
		lea	ecx, [esp+0B0h+var_90]
		push	ebx
		push	ecx
		push	dword ptr [eax+4]
		push	dword ptr [edi+14h]
		push	dword ptr [edi+10h]
		push	dword ptr [eax]
		call	_EVP_PBE_CipherInit
		add	esp, 18h
		test	eax, eax
		jns	short loc_51F
		push	180h
		push	offset ??_C@_0BI@JJBFJHOL@?4?2crypto?2cms?2cms_pwri?4c?$AA@ ; ".\\crypto\\cms\\cms_pwri.c"
		push	6
		push	0A7h ; '§'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_63F
; ---------------------------------------------------------------------------

loc_51F:				; CODE XREF: _cms_RecipientInfo_pwri_crypt+1ADj
		test	ebx, ebx
		jz	loc_5B4
		mov	ebx, [ebp+14h]
		lea	eax, [esp+0B0h+var_90]
		push	eax
		call	_EVP_CIPHER_CTX_block_size
		mov	ecx, eax
		xor	edx, edx
		lea	eax, [ebx+3]
		add	esp, 4
		add	eax, ecx
		div	ecx
		mov	edx, eax
		lea	eax, [ecx+ecx]
		imul	edx, ecx
		cmp	edx, eax
		jb	loc_63F
		cmp	ebx, 0FFh
		ja	loc_63F
		push	18Bh
		push	offset ??_C@_0BI@JJBFJHOL@?4?2crypto?2cms?2cms_pwri?4c?$AA@ ; ".\\crypto\\cms\\cms_pwri.c"
		push	edx
		mov	[esp+0BCh+var_9C], edx
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	loc_63F
		lea	eax, [esp+0B0h+var_90]
		push	eax		; int
		push	dword ptr [ebp+14h] ; Size
		lea	eax, [esp+0B8h+var_9C]
		push	dword ptr [ebp+10h] ; Src
		push	eax		; int
		push	esi		; int
		call	_kek_wrap_key
		add	esp, 14h
		test	eax, eax
		jz	loc_63F
		mov	eax, [edi+0Ch]
		mov	[eax+8], esi
		mov	ecx, [edi+0Ch]
		mov	eax, [esp+0B0h+var_9C]
		mov	[ecx], eax
		jmp	loc_637
; ---------------------------------------------------------------------------

loc_5B4:				; CODE XREF: _cms_RecipientInfo_pwri_crypt+1D1j
		mov	eax, [edi+0Ch]
		push	195h
		push	offset ??_C@_0BI@JJBFJHOL@?4?2crypto?2cms?2cms_pwri?4c?$AA@ ; ".\\crypto\\cms\\cms_pwri.c"
		push	dword ptr [eax]
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_5EE
		push	198h
		push	offset ??_C@_0BI@JJBFJHOL@?4?2crypto?2cms?2cms_pwri?4c?$AA@ ; ".\\crypto\\cms\\cms_pwri.c"
		push	41h ; 'A'
		push	0A7h ; '§'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		jmp	short loc_63F
; ---------------------------------------------------------------------------

loc_5EE:				; CODE XREF: _cms_RecipientInfo_pwri_crypt+27Fj
		mov	eax, [edi+0Ch]
		lea	ecx, [esp+0B0h+var_90]
		push	ecx		; int
		push	dword ptr [eax]	; int
		push	dword ptr [eax+8] ; int
		lea	eax, [esp+0BCh+var_9C]
		push	eax		; int
		push	esi		; Dst
		call	_kek_unwrap_key
		add	esp, 14h
		test	eax, eax
		jnz	short loc_62D
		push	19Eh
		push	offset ??_C@_0BI@JJBFJHOL@?4?2crypto?2cms?2cms_pwri?4c?$AA@ ; ".\\crypto\\cms\\cms_pwri.c"
		push	0B4h ; '´'
		push	0A7h ; '§'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		jmp	short loc_63F
; ---------------------------------------------------------------------------

loc_62D:				; CODE XREF: _cms_RecipientInfo_pwri_crypt+2BBj
		mov	eax, [esp+0B0h+var_9C]
		mov	[ebp+10h], esi
		mov	[ebp+14h], eax

loc_637:				; CODE XREF: _cms_RecipientInfo_pwri_crypt+25Fj
		mov	[esp+0B0h+var_94], 1

loc_63F:				; CODE XREF: _cms_RecipientInfo_pwri_crypt+145j
					; _cms_RecipientInfo_pwri_crypt+18Aj ...
		mov	ebx, [esp+0B0h+var_A0]

$err$36:				; CODE XREF: _cms_RecipientInfo_pwri_crypt+122j
		lea	eax, [esp+0B0h+var_90]
		push	eax
		call	_EVP_CIPHER_CTX_cleanup
		mov	edi, [esp+0B4h+var_94]
		add	esp, 4
		test	edi, edi
		jnz	short loc_665
		test	esi, esi
		jz	short loc_665
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_665:				; CODE XREF: _cms_RecipientInfo_pwri_crypt+306j
					; _cms_RecipientInfo_pwri_crypt+30Aj
		push	ebx
		call	_X509_ALGOR_free
		add	esp, 4
		mov	eax, edi
		jmp	short loc_6A3
; ---------------------------------------------------------------------------

loc_672:				; CODE XREF: _cms_RecipientInfo_pwri_crypt+B5j
					; _cms_RecipientInfo_pwri_crypt+E4j
		push	164h
		push	offset ??_C@_0BI@JJBFJHOL@?4?2crypto?2cms?2cms_pwri?4c?$AA@ ; ".\\crypto\\cms\\cms_pwri.c"
		push	0B0h ; '°'
		jmp	short loc_692
; ---------------------------------------------------------------------------

loc_683:				; CODE XREF: _cms_RecipientInfo_pwri_crypt+94j
					; _cms_RecipientInfo_pwri_crypt+A9j
		push	159h
		push	offset ??_C@_0BI@JJBFJHOL@?4?2crypto?2cms?2cms_pwri?4c?$AA@ ; ".\\crypto\\cms\\cms_pwri.c"
		push	0B3h ; '³'

loc_692:				; CODE XREF: _cms_RecipientInfo_pwri_crypt+331j
		push	0A7h ; '§'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax

loc_6A3:				; CODE XREF: _cms_RecipientInfo_pwri_crypt+320j
		mov	ecx, [esp+0B0h+var_4]
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0A0h
		retn
_cms_RecipientInfo_pwri_crypt endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl kek_unwrap_key(void *Dst,	int, int, int, int)
_kek_unwrap_key	proc near		; CODE XREF: _cms_RecipientInfo_pwri_crypt+2B1p

var_8		= byte ptr -8
var_4		= dword	ptr -4
Dst		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 8
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	[esp+14h+arg_10]
		call	_EVP_CIPHER_CTX_block_size
		mov	ebx, [esp+18h+arg_C]
		mov	ebp, eax
		add	esp, 4
		mov	[esp+14h+var_4], 0
		lea	esi, ds:0[ebp*2]
		cmp	ebx, esi
		jnb	short loc_6F7

loc_6EE:				; CODE XREF: _kek_unwrap_key+43j
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_6F7:				; CODE XREF: _kek_unwrap_key+30j
		xor	edx, edx
		mov	eax, ebx
		div	ebp
		test	edx, edx
		jnz	short loc_6EE
		push	edi
		push	0ECh ; 'ì'
		push	offset ??_C@_0BI@JJBFJHOL@?4?2crypto?2cms?2cms_pwri?4c?$AA@ ; ".\\crypto\\cms\\cms_pwri.c"
		push	ebx
		call	_CRYPTO_malloc
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_723
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_723:				; CODE XREF: _kek_unwrap_key+5Dj
		push	esi
		mov	esi, [esp+1Ch+arg_8]
		lea	ecx, ds:0[ebp*2]
		mov	eax, esi
		sub	eax, ecx
		add	eax, ebx
		push	eax
		lea	eax, [esp+20h+var_8]
		push	eax
		mov	eax, edi
		sub	eax, ecx
		add	eax, ebx
		push	eax
		push	[esp+28h+arg_10]
		call	_EVP_DecryptUpdate
		mov	eax, edi
		sub	eax, ebp
		push	ebp
		add	eax, ebx
		push	eax
		lea	eax, [esp+34h+var_8]
		push	eax
		push	edi
		push	[esp+3Ch+arg_10]
		call	_EVP_DecryptUpdate
		mov	eax, ebx
		sub	eax, ebp
		mov	ebp, [esp+40h+arg_10]
		push	eax
		push	esi
		lea	eax, [esp+48h+var_8]
		push	eax
		push	edi
		push	ebp
		call	_EVP_DecryptUpdate
		push	0
		push	0
		push	0
		push	0
		push	ebp
		call	_EVP_DecryptInit_ex
		add	esp, 50h
		lea	eax, [esp+18h+var_8]
		push	ebx
		push	edi
		push	eax
		push	edi
		push	ebp
		call	_EVP_DecryptUpdate
		movzx	eax, byte ptr [edi+5]
		lea	edx, [edi+4]
		xor	al, [edi+2]
		add	esp, 14h
		mov	cl, [edi+6]
		xor	cl, [edi+3]
		and	cl, al
		movzx	eax, byte ptr [edi+1]
		xor	al, [edx]
		and	cl, al
		cmp	cl, 0FFh
		jnz	short $err$11
		movzx	ecx, byte ptr [edi]
		lea	eax, [ecx-4]
		cmp	ebx, eax
		jb	short $err$11
		mov	eax, [esp+18h+arg_4]
		push	ecx		; Size
		push	edx		; Src
		push	[esp+20h+Dst]	; Dst
		mov	[eax], ecx
		call	_memcpy
		add	esp, 0Ch
		mov	[esp+18h+var_4], 1

$err$11:				; CODE XREF: _kek_unwrap_key+FBj
					; _kek_unwrap_key+105j
		push	ebx
		push	edi
		call	_OPENSSL_cleanse
		push	edi
		call	_CRYPTO_free
		mov	eax, [esp+24h+var_4]
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
_kek_unwrap_key	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl kek_wrap_key(int,	int, void *Src,	size_t Size, int)
_kek_wrap_key	proc near		; CODE XREF: _cms_RecipientInfo_pwri_crypt+240p

var_4		= byte ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
Size		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	ebp
		mov	ebp, [esp+0Ch+arg_10]
		push	edi
		push	ebp
		call	_EVP_CIPHER_CTX_block_size
		mov	ebx, [esp+14h+Size]
		mov	ecx, eax
		xor	edx, edx
		add	esp, 4
		lea	eax, [ebx+3]
		add	eax, ecx
		div	ecx
		mov	edi, eax
		imul	edi, ecx
		add	ecx, ecx
		cmp	edi, ecx
		jnb	short loc_837

loc_830:				; CODE XREF: _kek_wrap_key+41j
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_837:				; CODE XREF: _kek_wrap_key+32j
		cmp	ebx, 0FFh
		ja	short loc_830
		push	esi
		mov	esi, [esp+14h+arg_0]
		test	esi, esi
		jz	short loc_8BE
		mov	ecx, [esp+14h+Src]
		mov	[esi], bl
		push	ebx		; Size
		push	ecx		; Src
		movzx	eax, byte ptr [ecx]
		not	al
		mov	[esi+1], al
		movzx	eax, byte ptr [ecx+1]
		not	al
		mov	[esi+2], al
		movzx	eax, byte ptr [ecx+2]
		not	al
		mov	[esi+3], al
		lea	eax, [esi+4]
		push	eax		; Dst
		call	_memcpy
		lea	eax, [ebx+4]
		add	esp, 0Ch
		cmp	edi, eax
		jbe	short loc_89F
		mov	eax, edi
		sub	eax, ebx
		sub	eax, 4
		push	eax
		lea	eax, [ebx+4]
		add	eax, esi
		push	eax
		call	_RAND_pseudo_bytes
		add	esp, 8
		test	eax, eax
		jns	short loc_89F
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_89F:				; CODE XREF: _kek_wrap_key+7Fj
					; _kek_wrap_key+99j
		push	edi
		push	esi
		lea	eax, [esp+1Ch+var_4]
		push	eax
		push	esi
		push	ebp
		call	_EVP_EncryptUpdate
		push	edi
		push	esi
		lea	eax, [esp+30h+var_4]
		push	eax
		push	esi
		push	ebp
		call	_EVP_EncryptUpdate
		add	esp, 28h

loc_8BE:				; CODE XREF: _kek_wrap_key+4Aj
		mov	eax, [esp+14h+arg_4]
		pop	esi
		mov	[eax], edi
		mov	eax, 1
		pop	edi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
_kek_wrap_key	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8D0h
; COMDAT (pick any)
		public ??_C@_0BI@JJBFJHOL@?4?2crypto?2cms?2cms_pwri?4c?$AA@
; `string'
??_C@_0BI@JJBFJHOL@?4?2crypto?2cms?2cms_pwri?4c?$AA@ db	'.\crypto\cms\cms_pwri.c',0
					; DATA XREF: _CMS_RecipientInfo_set0_password+Bo
					; _CMS_add0_recipient_password+6Bo ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _sk_push:near	; CODE XREF: _CMS_add0_recipient_password+282p
		extrn _CRYPTO_malloc:near ; CODE XREF: _cms_RecipientInfo_pwri_crypt+21Dp
					; _cms_RecipientInfo_pwri_crypt+273p ...
		extrn _CRYPTO_free:near	; CODE XREF: _cms_RecipientInfo_pwri_crypt+30Dp
					; _kek_unwrap_key+12Bp
		extrn _OPENSSL_cleanse:near ; CODE XREF: _kek_unwrap_key+125p
		extrn _ERR_put_error:near ; CODE XREF: _CMS_RecipientInfo_set0_password+1Cp
					; _CMS_add0_recipient_password+79p ...
		extrn _ASN1_TYPE_new:near ; CODE XREF: _CMS_add0_recipient_password:loc_1A6p
					; _CMS_add0_recipient_password+20Fp
		extrn _ASN1_item_pack:near ; CODE XREF:	_CMS_add0_recipient_password+22Fp
		extrn _ASN1_item_new:near ; CODE XREF: _CMS_add0_recipient_password+1AFp
					; _CMS_add0_recipient_password+1C7p
		extrn _ASN1_item_free:near ; CODE XREF:	_CMS_add0_recipient_password+2C5p
		extrn _OBJ_nid2obj:near	; CODE XREF: _CMS_add0_recipient_password+198p
					; _CMS_add0_recipient_password+202p
		extrn _OBJ_nid2sn:near	; CODE XREF: _cms_RecipientInfo_pwri_crypt+F2p
		extrn _OBJ_obj2nid:near	; CODE XREF: _cms_RecipientInfo_pwri_crypt+9Cp
					; _cms_RecipientInfo_pwri_crypt+ECp
		extrn _EVP_CIPHER_CTX_cipher:near
					; CODE XREF: _CMS_add0_recipient_password+18Cp
		extrn _EVP_CIPHER_CTX_block_size:near
					; CODE XREF: _cms_RecipientInfo_pwri_crypt+1DFp
					; _kek_unwrap_key+11p ...
		extrn _EVP_CIPHER_CTX_iv_length:near
					; CODE XREF: _CMS_add0_recipient_password+F5p
		extrn _EVP_EncryptInit_ex:near ; CODE XREF: _CMS_add0_recipient_password+D3p
					; _CMS_add0_recipient_password+131p
		extrn _EVP_EncryptUpdate:near ;	CODE XREF: _kek_wrap_key+ACp
					; _kek_wrap_key+BAp
		extrn _EVP_DecryptInit_ex:near ; CODE XREF: _kek_unwrap_key+C5p
		extrn _EVP_DecryptUpdate:near ;	CODE XREF: _kek_unwrap_key+8Ap
					; _kek_unwrap_key+A1p ...
		extrn _EVP_CipherInit_ex:near
					; CODE XREF: _cms_RecipientInfo_pwri_crypt+13Bp
		extrn _EVP_CIPHER_CTX_init:near
					; CODE XREF: _CMS_add0_recipient_password+C2p
					; _cms_RecipientInfo_pwri_crypt+49p
		extrn _EVP_CIPHER_CTX_cleanup:near
					; CODE XREF: _CMS_add0_recipient_password+1A4p
					; _CMS_add0_recipient_password+2B2p ...
		extrn _EVP_CIPHER_CTX_set_padding:near
					; CODE XREF: _cms_RecipientInfo_pwri_crypt+152p
		extrn _EVP_get_cipherbyname:near
					; CODE XREF: _cms_RecipientInfo_pwri_crypt+F8p
		extrn _EVP_CIPHER_type:near ; CODE XREF: _CMS_add0_recipient_password+192p
		extrn _EVP_CIPHER_param_to_asn1:near
					; CODE XREF: _CMS_add0_recipient_password+16Ap
		extrn _EVP_CIPHER_asn1_to_param:near
					; CODE XREF: _cms_RecipientInfo_pwri_crypt+163p
		extrn _EVP_PBE_CipherInit:near
					; CODE XREF: _cms_RecipientInfo_pwri_crypt+1A3p
		extrn _X509_ALGOR_new:near
					; CODE XREF: _CMS_add0_recipient_password:loc_106p
					; _CMS_add0_recipient_password+1EDp
		extrn _X509_ALGOR_free:near ; CODE XREF: _CMS_add0_recipient_password+1E5p
					; _CMS_add0_recipient_password+248p ...
		extrn _d2i_X509_ALGOR:near ; CODE XREF:	_cms_RecipientInfo_pwri_crypt+D4p
		extrn _X509_ALGOR_it:near ; CODE XREF: _CMS_add0_recipient_password+228p
		extrn _PKCS5_pbkdf2_set:near ; CODE XREF: _CMS_add0_recipient_password+259p
		extrn _RAND_pseudo_bytes:near ;	CODE XREF: _CMS_add0_recipient_password+10Ep
					; _kek_wrap_key+8Fp
		extrn _CMS_RecipientInfo_it:near
					; CODE XREF: _CMS_add0_recipient_password+1A9p
					; _CMS_add0_recipient_password+2BEp
		extrn _CMS_PasswordRecipientInfo_it:near
					; CODE XREF: _CMS_add0_recipient_password+1C1p
		extrn _cms_get0_enveloped:near ; CODE XREF: _CMS_add0_recipient_password+3Fp
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _CMS_add0_recipient_password+2E9p
					; _cms_RecipientInfo_pwri_crypt+82p ...
		extrn __chkstk:near	; CODE XREF: _CMS_add0_recipient_password+5p
					; _cms_RecipientInfo_pwri_crypt+5p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _kek_unwrap_key+113p
					; _kek_wrap_key+72p
		extrn ___security_cookie:near ;	DATA XREF: _CMS_add0_recipient_password+Ar
					; _cms_RecipientInfo_pwri_crypt+Ar


		end
