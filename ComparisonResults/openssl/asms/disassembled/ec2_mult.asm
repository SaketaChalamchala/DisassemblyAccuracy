;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	5AB855C5C918A06FD7F88A677AEBA03D
; Input	CRC32 :	C8A2B8E0

; File Name   :	C:\compspace\Diff\openssl\obj\ec2_mult.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ec_GF2m_have_precompute_mult
_ec_GF2m_have_precompute_mult proc near
		jmp	_ec_wNAF_have_precompute_mult
_ec_GF2m_have_precompute_mult endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ec_GF2m_montgomery_point_multiply proc	near ; CODE XREF: _ec_GF2m_simple_mul+BAp
					; _ec_GF2m_simple_mul+128p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 10h
		call	__chkstk
		push	ebx
		mov	ebx, [esp+14h+arg_4]
		push	ebp
		mov	ebp, [esp+18h+arg_C]
		mov	[esp+18h+var_8], 0
		cmp	ebx, ebp
		jnz	short loc_4B
		push	112h
		push	offset ??_C@_0BH@JNIBJIMD@?4?2crypto?2ec?2ec2_mult?4c?$AA@ ; ".\\crypto\\ec\\ec2_mult.c"
		push	70h ; 'p'
		push	0D0h ; 'Ð'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_4B:					; CODE XREF: _ec_GF2m_montgomery_point_multiply+1Ej
		mov	eax, [esp+18h+arg_8]
		push	esi
		mov	esi, [esp+1Ch+arg_0]
		test	eax, eax
		jz	loc_343
		cmp	dword ptr [eax+4], 0
		jz	loc_343
		test	ebp, ebp
		jz	loc_343
		push	ebp
		push	esi
		call	_EC_POINT_is_at_infinity
		add	esp, 8
		test	eax, eax
		jnz	loc_343
		cmp	[ebp+40h], eax
		jnz	short loc_8C
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_8C:					; CODE XREF: _ec_GF2m_montgomery_point_multiply+7Bj
		mov	ebp, [esp+1Ch+arg_10]
		push	edi
		push	ebp
		call	_BN_CTX_start
		push	ebp
		call	_BN_CTX_get
		mov	edi, eax
		push	ebp
		mov	[esp+2Ch+var_10], edi
		call	_BN_CTX_get
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jz	$err$53
		mov	eax, [esi+4Ch]
		add	ebx, 4
		cmp	eax, [edi+8]
		jle	short loc_CB
		push	eax
		push	edi
		call	_bn_expand2
		add	esp, 8

loc_CB:					; CODE XREF: _ec_GF2m_montgomery_point_multiply+B7j
		mov	eax, [esi+4Ch]
		cmp	eax, [ebp+8]
		jle	short loc_DD
		push	eax
		push	ebp
		call	_bn_expand2
		add	esp, 8

loc_DD:					; CODE XREF: _ec_GF2m_montgomery_point_multiply+C9j
		mov	eax, [esi+4Ch]
		cmp	eax, [ebx+8]
		jle	short loc_EF
		push	eax
		push	ebx
		call	_bn_expand2
		add	esp, 8

loc_EF:					; CODE XREF: _ec_GF2m_montgomery_point_multiply+DBj
		mov	eax, [esp+20h+arg_4]
		mov	ecx, [esi+4Ch]
		add	eax, 18h
		cmp	ecx, [eax+8]
		jle	short loc_108
		push	ecx
		push	eax
		call	_bn_expand2
		add	esp, 8

loc_108:				; CODE XREF: _ec_GF2m_montgomery_point_multiply+F4j
		mov	ecx, [esp+20h+arg_C]
		lea	eax, [esi+5Ch]
		push	eax
		add	ecx, 4
		push	ecx
		push	edi
		call	_BN_GF2m_mod_arr
		add	esp, 0Ch
		test	eax, eax
		jz	$err$53
		push	1
		push	ebp
		call	_BN_set_word
		add	esp, 8
		test	eax, eax
		jz	$err$53
		push	[esp+20h+arg_10]
		mov	eax, [esi]
		mov	ecx, [esp+24h+arg_4]
		push	edi
		add	ecx, 18h
		mov	eax, [eax+88h]
		push	ecx
		push	esi
		call	eax
		add	esp, 10h
		test	eax, eax
		jz	$err$53
		push	[esp+20h+arg_10]
		mov	ecx, [esp+24h+arg_4]
		mov	eax, [esi]
		add	ecx, 18h
		push	ecx
		push	ebx
		push	esi
		mov	eax, [eax+88h]
		call	eax
		add	esp, 10h
		test	eax, eax
		jz	$err$53
		lea	eax, [esi+88h]
		push	eax
		push	ebx
		push	ebx
		call	_BN_GF2m_add
		add	esp, 0Ch
		test	eax, eax
		jz	$err$53
		mov	edx, [esp+20h+arg_8]
		mov	ebx, 80000000h
		mov	ecx, [edx+4]
		mov	eax, [edx]
		dec	ecx
		mov	[esp+20h+var_C], ecx
		mov	eax, [eax+ecx*4]
		test	eax, eax
		js	short loc_1BE
		nop	dword ptr [eax+00000000h]

loc_1B8:				; CODE XREF: _ec_GF2m_montgomery_point_multiply+1B4j
		shr	ebx, 1
		test	ebx, eax
		jz	short loc_1B8

loc_1BE:				; CODE XREF: _ec_GF2m_montgomery_point_multiply+1A7j
		shr	ebx, 1
		jnz	short loc_1CC
		dec	ecx
		mov	ebx, 80000000h
		mov	[esp+20h+var_C], ecx

loc_1CC:				; CODE XREF: _ec_GF2m_montgomery_point_multiply+1B8j
		test	ecx, ecx
		js	loc_2B0
		nop	dword ptr [eax+00h]

loc_1D8:				; CODE XREF: _ec_GF2m_montgomery_point_multiply+29Ej
		mov	eax, [edx]
		mov	eax, [eax+ecx*4]
		mov	[esp+20h+var_4], eax
		test	ebx, ebx
		jz	loc_29A

loc_1E9:				; CODE XREF: _ec_GF2m_montgomery_point_multiply+284j
		push	dword ptr [esi+4Ch]
		mov	edi, eax
		mov	eax, [esp+24h+arg_4]
		add	eax, 4
		and	edi, ebx
		push	eax
		push	[esp+28h+var_10]
		push	edi
		call	_BN_consttime_swap
		push	dword ptr [esi+4Ch]
		mov	eax, [esp+34h+arg_4]
		add	eax, 18h
		push	eax
		push	ebp
		push	edi
		call	_BN_consttime_swap
		push	[esp+40h+arg_10]
		mov	ecx, [esp+44h+arg_4]
		push	ebp
		push	[esp+48h+var_10]
		lea	eax, [ecx+18h]
		push	eax
		lea	eax, [ecx+4]
		push	eax
		mov	eax, [esp+54h+arg_C]
		add	eax, 4
		push	eax
		push	esi
		call	_gf2m_Madd
		add	esp, 3Ch
		test	eax, eax
		jz	$err$53
		push	[esp+20h+arg_10]
		push	ebp
		push	[esp+28h+var_10]
		push	esi
		call	_gf2m_Mdouble
		add	esp, 10h
		test	eax, eax
		jz	$err$53
		push	dword ptr [esi+4Ch]
		mov	eax, [esp+24h+arg_4]
		add	eax, 4
		push	eax
		push	[esp+28h+var_10]
		push	edi
		call	_BN_consttime_swap
		push	dword ptr [esi+4Ch]
		mov	eax, [esp+34h+arg_4]
		add	eax, 18h
		push	eax
		push	ebp
		push	edi
		call	_BN_consttime_swap
		mov	eax, [esp+40h+var_4]
		add	esp, 20h
		shr	ebx, 1
		jnz	loc_1E9
		mov	ecx, [esp+20h+var_C]
		mov	edx, [esp+20h+arg_8]

loc_29A:				; CODE XREF: _ec_GF2m_montgomery_point_multiply+1DBj
		sub	ecx, 1
		mov	ebx, 80000000h
		mov	[esp+20h+var_C], ecx
		jns	loc_1D8
		mov	edi, [esp+20h+var_10]

loc_2B0:				; CODE XREF: _ec_GF2m_montgomery_point_multiply+1C6j
		push	[esp+20h+arg_10]
		mov	ecx, [esp+24h+arg_4]
		lea	eax, [ecx+18h]
		push	eax
		lea	ebx, [ecx+4]
		mov	ecx, [esp+28h+arg_C]
		push	ebx
		push	ebp
		push	edi
		lea	eax, [ecx+18h]
		push	eax
		lea	eax, [ecx+4]
		push	eax
		push	esi
		call	_gf2m_Mxy
		add	esp, 20h
		test	eax, eax
		jz	short $err$53
		mov	ebp, [esp+20h+arg_4]
		cmp	eax, 1
		jnz	short loc_2F4
		push	ebp
		push	esi
		call	_EC_POINT_set_to_infinity
		add	esp, 8
		test	eax, eax
		jz	short $err$53
		jmp	short loc_30D
; ---------------------------------------------------------------------------

loc_2F4:				; CODE XREF: _ec_GF2m_montgomery_point_multiply+2DAj
		lea	eax, [ebp+2Ch]
		push	1
		push	eax
		call	_BN_set_word
		add	esp, 8
		test	eax, eax
		jz	short $err$53
		mov	dword ptr [ebp+40h], 1

loc_30D:				; CODE XREF: _ec_GF2m_montgomery_point_multiply+2EAj
		push	0
		push	ebx
		call	_BN_set_negative
		lea	eax, [ebp+18h]
		push	0
		push	eax
		call	_BN_set_negative
		add	esp, 10h
		mov	[esp+20h+var_8], 1

$err$53:				; CODE XREF: _ec_GF2m_montgomery_point_multiply+A8j
					; _ec_GF2m_montgomery_point_multiply+117j ...
		push	[esp+20h+arg_10]
		call	_BN_CTX_end
		mov	eax, [esp+24h+var_8]
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_343:				; CODE XREF: _ec_GF2m_montgomery_point_multiply+4Ej
					; _ec_GF2m_montgomery_point_multiply+58j ...
		push	ebx
		push	esi
		call	_EC_POINT_set_to_infinity
		add	esp, 8
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
_ec_GF2m_montgomery_point_multiply endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 354h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ec_GF2m_precompute_mult
_ec_GF2m_precompute_mult proc near
		jmp	_ec_wNAF_precompute_mult
_ec_GF2m_precompute_mult endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 35Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ec_GF2m_simple_mul
_ec_GF2m_simple_mul proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, 10h
		call	__chkstk
		push	ebx
		mov	ebx, [esp+14h+arg_18]
		xor	eax, eax
		mov	[esp+14h+var_8], 0
		mov	[esp+14h+var_10], eax
		test	ebx, ebx
		jnz	short loc_391
		call	_BN_CTX_new
		mov	[esp+14h+var_8], eax
		mov	ebx, eax
		test	eax, eax
		jnz	short loc_391
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_391:				; CODE XREF: _ec_GF2m_simple_mul+1Fj
					; _ec_GF2m_simple_mul+2Ej
		push	ebp
		mov	ebp, [esp+18h+arg_C]
		push	esi
		mov	esi, [esp+1Ch+arg_0]
		push	edi
		mov	edi, [esp+20h+arg_8]
		test	edi, edi
		jz	short loc_3AD
		cmp	ebp, 1
		ja	loc_52E

loc_3AD:				; CODE XREF: _ec_GF2m_simple_mul+46j
		cmp	ebp, 2
		ja	loc_52E
		test	ebp, ebp
		jnz	short loc_3CB
		push	esi
		call	_EC_GROUP_have_precompute_mult
		add	esp, 4
		test	eax, eax
		jnz	loc_52E

loc_3CB:				; CODE XREF: _ec_GF2m_simple_mul+5Cj
		push	esi
		call	_EC_POINT_new
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jz	loc_54A
		push	esi
		call	_EC_POINT_new
		mov	edi, eax
		add	esp, 4
		mov	[esp+20h+arg_18], edi
		test	edi, edi
		jz	$err$41
		push	edi
		push	esi
		call	_EC_POINT_set_to_infinity
		add	esp, 8
		test	eax, eax
		jz	$err$41
		mov	eax, [esp+20h+arg_8]
		test	eax, eax
		jz	short loc_45C
		push	ebx
		push	dword ptr [esi+4]
		push	eax
		push	ebp
		push	esi
		call	_ec_GF2m_montgomery_point_multiply
		add	esp, 14h
		test	eax, eax
		jz	$err$41
		mov	eax, [esp+20h+arg_8]
		cmp	dword ptr [eax+0Ch], 0
		jz	short loc_445
		mov	eax, [esi]
		push	ebx
		push	ebp
		push	esi
		mov	eax, [eax+60h]
		call	eax
		add	esp, 0Ch
		test	eax, eax
		jz	$err$41

loc_445:				; CODE XREF: _ec_GF2m_simple_mul+D2j
		mov	eax, [esi]
		push	ebx
		push	ebp
		push	edi
		mov	eax, [eax+58h]
		push	edi
		push	esi
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	$err$41

loc_45C:				; CODE XREF: _ec_GF2m_simple_mul+B1j
		cmp	[esp+20h+arg_C], 0
		mov	[esp+20h+var_C], 0
		jbe	short loc_4DA
		mov	eax, [esp+20h+arg_10]
		mov	edi, [esp+20h+arg_14]
		sub	eax, edi
		mov	[esp+20h+var_4], eax
		nop	dword ptr [eax]

loc_47C:				; CODE XREF: _ec_GF2m_simple_mul+178j
		push	ebx
		push	dword ptr [eax+edi]
		push	dword ptr [edi]
		push	ebp
		push	esi
		call	_ec_GF2m_montgomery_point_multiply
		add	esp, 14h
		test	eax, eax
		jz	short loc_4F5
		mov	eax, [edi]
		cmp	dword ptr [eax+0Ch], 0
		jz	short loc_4A9
		mov	eax, [esi]
		push	ebx
		push	ebp
		push	esi
		mov	eax, [eax+60h]
		call	eax
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_4F5

loc_4A9:				; CODE XREF: _ec_GF2m_simple_mul+13Aj
		mov	ecx, [esp+20h+arg_18]
		mov	eax, [esi]
		push	ebx
		push	ebp
		push	ecx
		mov	eax, [eax+58h]
		push	ecx
		push	esi
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	short loc_4F5
		mov	eax, [esp+20h+var_C]
		add	edi, 4
		inc	eax
		cmp	eax, [esp+20h+arg_C]
		mov	[esp+20h+var_C], eax
		mov	eax, [esp+20h+var_4]
		jb	short loc_47C
		mov	edi, [esp+20h+arg_18]

loc_4DA:				; CODE XREF: _ec_GF2m_simple_mul+10Dj
		push	edi
		push	[esp+24h+arg_4]
		call	_EC_POINT_copy
		add	esp, 8
		test	eax, eax
		jz	short $err$41
		mov	[esp+20h+var_10], 1
		jmp	short $err$41
; ---------------------------------------------------------------------------

loc_4F5:				; CODE XREF: _ec_GF2m_simple_mul+132j
					; _ec_GF2m_simple_mul+14Bj ...
		mov	edi, [esp+20h+arg_18]

$err$41:				; CODE XREF: _ec_GF2m_simple_mul+93j
					; _ec_GF2m_simple_mul+A5j ...
		push	ebp
		call	_EC_POINT_free
		add	esp, 4
		test	edi, edi
		jz	short loc_50F
		push	edi
		call	_EC_POINT_free
		add	esp, 4

loc_50F:				; CODE XREF: _ec_GF2m_simple_mul+1A8j
		mov	ebx, [esp+20h+var_10]

loc_513:				; CODE XREF: _ec_GF2m_simple_mul+1ECj
					; _ec_GF2m_simple_mul+1F0j
		mov	eax, [esp+20h+var_8]
		pop	edi
		pop	esi
		pop	ebp
		test	eax, eax
		jz	short loc_527
		push	eax
		call	_BN_CTX_free
		add	esp, 4

loc_527:				; CODE XREF: _ec_GF2m_simple_mul+1C0j
		mov	eax, ebx
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_52E:				; CODE XREF: _ec_GF2m_simple_mul+4Bj
					; _ec_GF2m_simple_mul+54j ...
		push	ebx
		push	[esp+24h+arg_14]
		push	[esp+28h+arg_10]
		push	ebp
		push	edi
		push	[esp+34h+arg_4]
		push	esi
		call	_ec_wNAF_mul
		add	esp, 1Ch
		mov	ebx, eax
		jmp	short loc_513
; ---------------------------------------------------------------------------

loc_54A:				; CODE XREF: _ec_GF2m_simple_mul+7Cj
		xor	ebx, ebx
		jmp	short loc_513
_ec_GF2m_simple_mul endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 550h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_gf2m_Madd	proc near		; CODE XREF: _ec_GF2m_montgomery_point_multiply+22Ap

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, 0Ch
		call	__chkstk
		push	ebx
		push	esi
		mov	esi, [esp+14h+arg_18]
		push	esi
		mov	[esp+18h+var_8], 0
		call	_BN_CTX_start
		push	esi
		call	_BN_CTX_get
		mov	ebx, eax
		push	esi
		mov	[esp+20h+var_4], ebx
		call	_BN_CTX_get
		add	esp, 0Ch
		mov	[esp+14h+var_C], eax
		test	eax, eax
		jz	$err$15
		push	[esp+14h+arg_4]
		push	ebx
		call	_BN_copy
		add	esp, 8
		test	eax, eax
		jz	$err$15
		push	ebp
		mov	ebp, [esp+18h+arg_8]
		push	edi
		mov	edi, [esp+1Ch+arg_0]
		push	esi
		push	[esp+20h+arg_14]
		mov	eax, [edi]
		push	ebp
		push	ebp
		push	edi
		mov	eax, [eax+84h]
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	loc_65C
		mov	eax, [edi]
		mov	ebx, [esp+1Ch+arg_C]
		push	esi
		push	[esp+20h+arg_10]
		mov	eax, [eax+84h]
		push	ebx
		push	ebx
		push	edi
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	short loc_65C
		mov	eax, [edi]
		push	esi
		push	ebx
		push	ebp
		push	[esp+28h+var_C]
		mov	eax, [eax+84h]
		push	edi
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	short loc_65C
		push	ebp
		push	ebx
		push	ebx
		call	_BN_GF2m_add
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_65C
		mov	eax, [edi]
		push	esi
		push	ebx
		push	ebx
		mov	eax, [eax+88h]
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		jz	short loc_65C
		mov	eax, [edi]
		push	esi
		push	[esp+20h+var_4]
		mov	eax, [eax+84h]
		push	ebx
		push	ebp
		push	edi
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	short loc_65C
		push	[esp+1Ch+var_C]
		push	ebp
		push	ebp
		call	_BN_GF2m_add
		xor	ecx, ecx
		add	esp, 0Ch
		test	eax, eax
		mov	edx, 1
		cmovnz	ecx, edx
		mov	[esp+1Ch+var_8], ecx

loc_65C:				; CODE XREF: _gf2m_Madd+75j
					; _gf2m_Madd+96j ...
		pop	edi
		pop	ebp

$err$15:				; CODE XREF: _gf2m_Madd+39j
					; _gf2m_Madd+4Ej
		push	esi
		call	_BN_CTX_end
		mov	eax, [esp+18h+var_8]
		add	esp, 4
		pop	esi
		pop	ebx
		add	esp, 0Ch
		retn
_gf2m_Madd	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 674h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_gf2m_Mdouble	proc near		; CODE XREF: _ec_GF2m_montgomery_point_multiply+244p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	esi
		mov	esi, [esp+0Ch+arg_C]
		push	esi
		mov	[esp+10h+var_4], 0
		call	_BN_CTX_start
		push	esi
		call	_BN_CTX_get
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	$err$14
		push	ebp
		mov	ebp, [esp+10h+arg_4]
		push	edi
		mov	edi, [esp+14h+arg_0]
		push	esi
		push	ebp
		push	ebp
		mov	eax, [edi]
		push	edi
		mov	eax, [eax+88h]
		call	eax
		add	esp, 10h
		test	eax, eax
		jz	loc_75A
		mov	eax, [edi]
		push	esi
		push	[esp+18h+arg_8]
		mov	eax, [eax+88h]
		push	ebx
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		jz	short loc_75A
		mov	eax, [edi]
		push	esi
		push	ebx
		push	ebp
		push	[esp+20h+arg_8]
		mov	eax, [eax+84h]
		push	edi
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	short loc_75A
		mov	eax, [edi]
		push	esi
		push	ebp
		push	ebp
		mov	eax, [eax+88h]
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		jz	short loc_75A
		mov	eax, [edi]
		push	esi
		push	ebx
		push	ebx
		mov	eax, [eax+88h]
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		jz	short loc_75A
		mov	ecx, [edi]
		lea	eax, [edi+88h]
		push	esi
		push	ebx
		push	eax
		mov	eax, [ecx+84h]
		push	ebx
		push	edi
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	short loc_75A
		push	ebx
		push	ebp
		push	ebp
		call	_BN_GF2m_add
		xor	ecx, ecx
		add	esp, 0Ch
		test	eax, eax
		mov	edx, 1
		cmovnz	ecx, edx
		mov	[esp+14h+var_4], ecx

loc_75A:				; CODE XREF: _gf2m_Mdouble+4Ej
					; _gf2m_Mdouble+6Aj ...
		pop	edi
		pop	ebp

$err$14:				; CODE XREF: _gf2m_Mdouble+2Bj
		push	esi
		call	_BN_CTX_end
		mov	eax, [esp+10h+var_4]
		add	esp, 4
		pop	esi
		pop	ebx
		pop	ecx
		retn
_gf2m_Mdouble	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 770h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_gf2m_Mxy	proc near		; CODE XREF: _ec_GF2m_montgomery_point_multiply+2C7p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		mov	eax, 0Ch
		call	__chkstk
		push	ebp
		mov	ebp, [esp+10h+arg_10]
		mov	[esp+10h+var_C], 0
		cmp	dword ptr [ebp+4], 0
		jnz	short loc_7B0
		push	0
		push	[esp+14h+arg_14]
		call	_BN_set_word
		push	0
		push	[esp+1Ch+arg_18]
		call	_BN_set_word
		add	esp, 10h
		mov	eax, 1
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_7B0:				; CODE XREF: _gf2m_Mxy+1Bj
		push	esi
		push	edi
		mov	edi, [esp+18h+arg_18]
		cmp	dword ptr [edi+4], 0
		jnz	short loc_7F4
		mov	esi, [esp+18h+arg_4]
		push	esi
		push	[esp+1Ch+arg_14]
		call	_BN_copy
		add	esp, 8
		test	eax, eax
		jnz	short loc_7D8
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_7D8:				; CODE XREF: _gf2m_Mxy+5Fj
		push	[esp+18h+arg_8]
		push	esi
		push	edi
		call	_BN_GF2m_add
		add	esp, 0Ch
		neg	eax
		sbb	eax, eax
		and	eax, 2
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_7F4:				; CODE XREF: _gf2m_Mxy+4Aj
		push	ebx
		mov	ebx, [esp+1Ch+arg_1C]
		push	ebx
		call	_BN_CTX_start
		push	ebx
		call	_BN_CTX_get
		push	ebx
		mov	[esp+28h+arg_10], eax
		call	_BN_CTX_get
		push	ebx
		mov	[esp+2Ch+var_8], eax
		call	_BN_CTX_get
		add	esp, 10h
		mov	[esp+1Ch+var_4], eax
		test	eax, eax
		jz	$err$30
		push	1
		push	eax
		call	_BN_set_word
		add	esp, 8
		test	eax, eax
		jz	$err$30
		mov	esi, [esp+1Ch+arg_0]
		push	ebx
		push	edi
		push	ebp
		mov	eax, [esi]
		push	[esp+28h+arg_10]
		push	esi
		mov	eax, [eax+84h]
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	$err$30
		mov	eax, [esi]
		push	ebx
		push	[esp+20h+arg_4]
		mov	eax, [eax+84h]
		push	ebp
		push	ebp
		push	esi
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	$err$30
		push	[esp+1Ch+arg_C]
		push	ebp
		push	ebp
		call	_BN_GF2m_add
		add	esp, 0Ch
		test	eax, eax
		jz	$err$30
		mov	eax, [esi]
		push	ebx
		push	[esp+20h+arg_4]
		mov	eax, [eax+84h]
		push	edi
		push	edi
		push	esi
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	$err$30
		mov	ecx, [esp+1Ch+arg_C]
		mov	eax, [esi]
		push	ebx
		push	ecx
		push	edi
		mov	eax, [eax+84h]
		push	ecx
		push	esi
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	$err$30
		push	[esp+1Ch+arg_14]
		push	edi
		push	edi
		call	_BN_GF2m_add
		add	esp, 0Ch
		test	eax, eax
		jz	$err$30
		mov	eax, [esi]
		push	ebx
		push	ebp
		push	edi
		mov	eax, [eax+84h]
		push	edi
		push	esi
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	$err$30
		mov	eax, [esi]
		mov	ebp, [esp+1Ch+var_8]
		push	ebx
		push	[esp+20h+arg_4]
		mov	eax, [eax+88h]
		push	ebp
		push	esi
		call	eax
		add	esp, 10h
		test	eax, eax
		jz	$err$30
		push	[esp+1Ch+arg_8]
		push	ebp
		push	ebp
		call	_BN_GF2m_add
		add	esp, 0Ch
		test	eax, eax
		jz	$err$30
		mov	eax, [esi]
		push	ebx
		push	[esp+20h+arg_10]
		mov	eax, [eax+84h]
		push	ebp
		push	ebp
		push	esi
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	$err$30
		push	edi
		push	ebp
		push	ebp
		call	_BN_GF2m_add
		add	esp, 0Ch
		test	eax, eax
		jz	$err$30
		mov	ecx, [esp+1Ch+arg_10]
		mov	eax, [esi]
		push	ebx
		push	[esp+20h+arg_4]
		mov	eax, [eax+84h]
		push	ecx
		push	ecx
		push	esi
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	$err$30
		mov	ecx, [esp+1Ch+arg_10]
		mov	eax, [esi]
		push	ebx
		push	ecx
		push	[esp+24h+var_4]
		mov	eax, [eax+8Ch]
		push	ecx
		push	esi
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	$err$30
		mov	eax, [esi]
		push	ebx
		push	ebp
		push	[esp+24h+arg_10]
		mov	eax, [eax+84h]
		push	ebp
		push	esi
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	short $err$30
		mov	eax, [esi]
		push	ebx
		push	[esp+20h+arg_10]
		push	[esp+24h+arg_C]
		mov	eax, [eax+84h]
		push	[esp+28h+arg_14]
		push	esi
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	short $err$30
		push	[esp+1Ch+arg_4]
		push	[esp+20h+arg_14]
		push	edi
		call	_BN_GF2m_add
		add	esp, 0Ch
		test	eax, eax
		jz	short $err$30
		mov	eax, [esi]
		push	ebx
		push	ebp
		push	edi
		mov	eax, [eax+84h]
		push	edi
		push	esi
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	short $err$30
		push	[esp+1Ch+arg_8]
		push	edi
		push	edi
		call	_BN_GF2m_add
		xor	ecx, ecx
		add	esp, 0Ch
		test	eax, eax
		mov	edx, 2
		cmovnz	ecx, edx
		mov	[esp+1Ch+var_C], ecx

$err$30:				; CODE XREF: _gf2m_Mxy+B2j
					; _gf2m_Mxy+C5j ...
		push	ebx
		call	_BN_CTX_end
		mov	eax, [esp+20h+var_C]
		add	esp, 4
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 0Ch
		retn
_gf2m_Mxy	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A38h
; COMDAT (pick any)
		public ??_C@_0BH@JNIBJIMD@?4?2crypto?2ec?2ec2_mult?4c?$AA@
; `string'
??_C@_0BH@JNIBJIMD@?4?2crypto?2ec?2ec2_mult?4c?$AA@ db '.\crypto\ec\ec2_mult.c',0
					; DATA XREF: _ec_GF2m_montgomery_point_multiply+25o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ERR_put_error:near
					; CODE XREF: _ec_GF2m_montgomery_point_multiply+33p
		extrn _BN_CTX_new:near	; CODE XREF: _ec_GF2m_simple_mul+21p
		extrn _BN_CTX_free:near	; CODE XREF: _ec_GF2m_simple_mul+1C3p
		extrn _BN_CTX_start:near ; CODE	XREF: _ec_GF2m_montgomery_point_multiply+8Ap
					; _gf2m_Madd+19p ...
		extrn _BN_CTX_get:near	; CODE XREF: _ec_GF2m_montgomery_point_multiply+90p
					; _ec_GF2m_montgomery_point_multiply+9Cp ...
		extrn _BN_CTX_end:near	; CODE XREF: _ec_GF2m_montgomery_point_multiply+327p
					; _gf2m_Madd+10Fp ...
		extrn _BN_copy:near	; CODE XREF: _gf2m_Madd+44p
					; _gf2m_Mxy+55p
		extrn _BN_set_negative:near
					; CODE XREF: _ec_GF2m_montgomery_point_multiply+308p
					; _ec_GF2m_montgomery_point_multiply+313p
		extrn _BN_set_word:near	; CODE XREF: _ec_GF2m_montgomery_point_multiply+120p
					; _ec_GF2m_montgomery_point_multiply+2F2p ...
		extrn _BN_consttime_swap:near
					; CODE XREF: _ec_GF2m_montgomery_point_multiply+1F5p
					; _ec_GF2m_montgomery_point_multiply+207p ...
		extrn _BN_GF2m_add:near	; CODE XREF: _ec_GF2m_montgomery_point_multiply+17Fp
					; _gf2m_Madd+B4p ...
		extrn _BN_GF2m_mod_arr:near
					; CODE XREF: _ec_GF2m_montgomery_point_multiply+10Dp
		extrn _bn_expand2:near	; CODE XREF: _ec_GF2m_montgomery_point_multiply+BBp
					; _ec_GF2m_montgomery_point_multiply+CDp ...
		extrn _EC_POINT_new:near ; CODE	XREF: _ec_GF2m_simple_mul+70p
					; _ec_GF2m_simple_mul+83p
		extrn _EC_POINT_free:near ; CODE XREF: _ec_GF2m_simple_mul+19Ep
					; _ec_GF2m_simple_mul+1ABp
		extrn _EC_POINT_copy:near ; CODE XREF: _ec_GF2m_simple_mul+183p
		extrn _EC_POINT_set_to_infinity:near
					; CODE XREF: _ec_GF2m_montgomery_point_multiply+2DEp
					; _ec_GF2m_montgomery_point_multiply+33Dp ...
		extrn _EC_POINT_is_at_infinity:near
					; CODE XREF: _ec_GF2m_montgomery_point_multiply+68p
		extrn _EC_GROUP_have_precompute_mult:near
					; CODE XREF: _ec_GF2m_simple_mul+5Fp
		extrn _ec_wNAF_mul:near	; CODE XREF: _ec_GF2m_simple_mul+1E2p
		extrn _ec_wNAF_precompute_mult:near ; CODE XREF: _ec_GF2m_precompute_multj
		extrn _ec_wNAF_have_precompute_mult:near
					; CODE XREF: _ec_GF2m_have_precompute_multj
		extrn __chkstk:near	; CODE XREF: _ec_GF2m_montgomery_point_multiply+5p
					; _ec_GF2m_simple_mul+5p ...


		end
