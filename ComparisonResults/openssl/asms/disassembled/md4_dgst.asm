;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	7B33012228C3BB2DA3971F49F54141D0
; Input	CRC32 :	96BE7B6D

; File Name   :	C:\compspace\Diff\openssl\obj\md4_dgst.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		public _MD4_version
_MD4_version	db 'MD4 part of OpenSSL 1.0.2h  3 May 2016',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 28h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _MD4_Final
_MD4_Final	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	esi
		push	edi
		lea	edi, [ebx+18h]
		mov	esi, [ebx+58h]
		mov	byte ptr [esi+edi], 80h	; '€'
		inc	esi
		cmp	esi, 38h ; '8'
		jbe	short loc_60
		mov	eax, 40h ; '@'
		sub	eax, esi
		push	eax		; Size
		lea	eax, [esi+edi]
		push	0		; Val
		push	eax		; Dst
		call	_memset
		push	1
		push	edi
		push	ebx
		xor	esi, esi
		call	_md4_block_data_order
		add	esp, 18h

loc_60:					; CODE XREF: _MD4_Final+15j
		mov	eax, 38h ; '8'
		sub	eax, esi
		push	eax		; Size
		lea	eax, [esi+edi]
		push	0		; Val
		push	eax		; Dst
		call	_memset
		movzx	eax, byte ptr [ebx+10h]
		mov	[edi+38h], al
		movzx	eax, byte ptr [ebx+11h]
		mov	[edi+39h], al
		movzx	eax, byte ptr [ebx+12h]
		mov	[edi+3Ah], al
		movzx	eax, byte ptr [ebx+13h]
		mov	[edi+3Bh], al
		movzx	eax, byte ptr [ebx+14h]
		mov	[edi+3Ch], al
		movzx	eax, byte ptr [ebx+15h]
		mov	[edi+3Dh], al
		movzx	eax, byte ptr [ebx+16h]
		push	1
		mov	[edi+3Eh], al
		movzx	eax, byte ptr [ebx+17h]
		push	edi
		push	ebx
		mov	[edi+3Fh], al
		call	_md4_block_data_order
		push	40h ; '@'       ; Size
		push	0		; Val
		push	edi		; Dst
		mov	dword ptr [ebx+58h], 0
		call	_memset
		mov	ecx, [ebx]
		add	esp, 24h
		mov	edx, [esp+0Ch+arg_0]
		mov	eax, ecx
		shr	eax, 8
		pop	edi
		mov	[edx], cl
		mov	[edx+1], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+2], al
		shr	ecx, 18h
		mov	[edx+3], cl
		mov	ecx, [ebx+4]
		mov	eax, ecx
		mov	[edx+4], cl
		shr	eax, 8
		mov	[edx+5], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+6], al
		shr	ecx, 18h
		mov	[edx+7], cl
		mov	ecx, [ebx+8]
		mov	eax, ecx
		mov	[edx+8], cl
		shr	eax, 8
		mov	[edx+9], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+0Ah], al
		shr	ecx, 18h
		mov	[edx+0Bh], cl
		mov	ecx, [ebx+0Ch]
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+0Ch], cl
		mov	[edx+0Dh], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+0Eh], al
		mov	eax, 1
		shr	ecx, 18h
		pop	esi
		mov	[edx+0Fh], cl
		pop	ebx
		retn
_MD4_Final	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 144h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl MD4_Init(void *Dst)
		public _MD4_Init
_MD4_Init	proc near

Dst		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Dst]
		push	5Ch ; '\'       ; Size
		push	0		; Val
		push	esi		; Dst
		call	_memset
		add	esp, 0Ch
		mov	dword ptr [esi], 67452301h
		mov	dword ptr [esi+4], 0EFCDAB89h
		mov	eax, 1
		mov	dword ptr [esi+8], 98BADCFEh
		mov	dword ptr [esi+0Ch], 10325476h
		pop	esi
		retn
_MD4_Init	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 178h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _MD4_Transform
_MD4_Transform	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	1
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_md4_block_data_order
		add	esp, 0Ch
		retn
_MD4_Transform	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 18Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl MD4_Update(int, void *Src, size_t	Size)
		public _MD4_Update
_MD4_Update	proc near

arg_0		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, [esp+4+Src]
		push	edi
		mov	edi, [esp+8+Size]
		test	edi, edi
		jz	loc_259
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		mov	eax, [ebx+10h]
		lea	ecx, [eax+edi*8]
		cmp	ecx, eax
		jnb	short loc_1B0
		inc	dword ptr [ebx+14h]

loc_1B0:				; CODE XREF: _MD4_Update+1Fj
		mov	eax, edi
		mov	[ebx+10h], ecx
		mov	ecx, [ebx+58h]
		shr	eax, 1Dh
		add	[ebx+14h], eax
		push	esi
		test	ecx, ecx
		jz	short loc_227
		lea	edx, [ebx+18h]
		cmp	edi, 40h ; '@'
		jnb	short loc_1EE
		lea	eax, [ecx+edi]
		cmp	eax, 40h ; '@'
		jnb	short loc_1EE
		push	edi		; Size
		lea	eax, [edx+ecx]
		push	ebp		; Src
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	eax, 1
		add	[ebx+58h], edi
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1EE:				; CODE XREF: _MD4_Update+3Dj
					; _MD4_Update+45j
		mov	esi, 40h ; '@'
		lea	eax, [edx+ecx]
		sub	esi, ecx
		push	esi		; Size
		push	ebp		; Src
		push	eax		; Dst
		call	_memcpy
		push	1
		lea	eax, [ebx+18h]
		push	eax
		push	ebx
		call	_md4_block_data_order
		push	40h ; '@'       ; Size
		lea	eax, [ebx+18h]
		mov	dword ptr [ebx+58h], 0
		push	0		; Val
		push	eax		; Dst
		add	ebp, esi
		sub	edi, esi
		call	_memset
		add	esp, 24h

loc_227:				; CODE XREF: _MD4_Update+35j
		mov	esi, edi
		shr	esi, 6
		test	esi, esi
		jz	short loc_242
		push	esi
		push	ebp
		push	ebx
		call	_md4_block_data_order
		shl	esi, 6
		add	esp, 0Ch
		add	ebp, esi
		sub	edi, esi

loc_242:				; CODE XREF: _MD4_Update+A2j
		test	edi, edi
		jz	short loc_257
		push	edi		; Size
		lea	eax, [ebx+18h]
		mov	[ebx+58h], edi
		push	ebp		; Src
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch

loc_257:				; CODE XREF: _MD4_Update+B8j
		pop	esi
		pop	ebx

loc_259:				; CODE XREF: _MD4_Update+Cj
		pop	edi
		mov	eax, 1
		pop	ebp
		retn
_MD4_Update	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 264h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _md4_block_data_order
_md4_block_data_order proc near		; CODE XREF: _MD4_Final+30p
					; _MD4_Final+87p ...

var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 54h ; 'T'
		call	__chkstk
		mov	ecx, [esp+54h+arg_0]
		mov	eax, [esp+54h+arg_4]
		push	esi
		push	edi
		mov	edx, [ecx]
		mov	edi, [ecx+4]
		mov	esi, [ecx+8]
		mov	[esp+5Ch+var_18], edx
		mov	edx, [ecx+0Ch]
		mov	ecx, [esp+5Ch+arg_8]
		mov	[esp+5Ch+arg_4], edi
		mov	[esp+5Ch+var_2C], esi
		mov	[esp+5Ch+var_30], edx
		test	ecx, ecx
		jz	loc_98A
		push	ebx
		mov	[esp+60h+var_14], edi
		mov	[esp+60h+var_10], esi
		mov	[esp+60h+var_C], edx
		push	ebp
		nop	dword ptr [eax+00000000h]

loc_2B4:				; CODE XREF: _md4_block_data_order+71Ej
		dec	ecx
		movzx	ebx, byte ptr [eax]
		mov	[esp+64h+arg_8], ecx
		xor	edx, esi
		movzx	ecx, byte ptr [eax+1]
		and	edx, edi
		shl	ecx, 8
		xor	esi, edi
		or	ebx, ecx
		movzx	ebp, byte ptr [eax+4]
		movzx	ecx, byte ptr [eax+2]
		shl	ecx, 10h
		or	ebx, ecx
		xor	edx, [esp+64h+var_30]
		movzx	ecx, byte ptr [eax+3]
		shl	ecx, 18h
		or	ebx, ecx
		movzx	ecx, byte ptr [eax+5]
		shl	ecx, 8
		add	edx, ebx
		or	ebp, ecx
		add	edx, [esp+64h+var_18]
		movzx	ecx, byte ptr [eax+6]
		shl	ecx, 10h
		or	ebp, ecx
		mov	[esp+64h+var_24], ebx
		movzx	ecx, byte ptr [eax+7]
		movzx	ebx, byte ptr [eax+8]
		shl	ecx, 18h
		or	ebp, ecx
		rol	edx, 3
		movzx	ecx, byte ptr [eax+9]
		and	esi, edx
		xor	esi, [esp+64h+var_2C]
		xor	edi, edx
		shl	ecx, 8
		add	esi, ebp
		or	ebx, ecx
		add	esi, [esp+64h+var_30]
		movzx	ecx, byte ptr [eax+0Ah]
		shl	ecx, 10h
		or	ebx, ecx
		mov	[esp+64h+var_1C], ebp
		movzx	ecx, byte ptr [eax+0Bh]
		movzx	ebp, byte ptr [eax+0Ch]
		shl	ecx, 18h
		or	ebx, ecx
		rol	esi, 7
		movzx	ecx, byte ptr [eax+0Dh]
		and	edi, esi
		xor	edi, [esp+64h+arg_4]
		shl	ecx, 8
		add	edi, ebx
		or	ebp, ecx
		add	edi, [esp+64h+var_2C]
		movzx	ecx, byte ptr [eax+0Eh]
		shl	ecx, 10h
		or	ebp, ecx
		mov	[esp+64h+var_20], ebx
		movzx	ecx, byte ptr [eax+0Fh]
		movzx	ebx, byte ptr [eax+10h]
		shl	ecx, 18h
		or	ebp, ecx
		rol	edi, 0Bh
		movzx	ecx, byte ptr [eax+11h]
		shl	ecx, 8
		or	ebx, ecx
		mov	[esp+64h+var_18], ebp
		movzx	ecx, byte ptr [eax+12h]
		shl	ecx, 10h
		or	ebx, ecx
		movzx	ecx, byte ptr [eax+13h]
		shl	ecx, 18h
		or	ebx, ecx
		mov	[esp+64h+var_50], ebx
		mov	ebx, esi
		xor	ebx, edx
		and	ebx, edi
		xor	ebx, edx
		add	ebx, ebp
		add	ebx, [esp+64h+arg_4]
		movzx	ecx, byte ptr [eax+15h]
		movzx	ebp, byte ptr [eax+14h]
		shl	ecx, 8
		or	ebp, ecx
		rol	ebx, 13h
		movzx	ecx, byte ptr [eax+16h]
		shl	ecx, 10h
		or	ebp, ecx
		movzx	ecx, byte ptr [eax+17h]
		shl	ecx, 18h
		or	ebp, ecx
		movzx	ecx, byte ptr [eax+19h]
		shl	ecx, 8
		mov	[esp+64h+var_38], ebp
		mov	ebp, esi
		xor	ebp, edi
		and	ebp, ebx
		xor	ebp, esi
		add	ebp, [esp+64h+var_50]
		add	ebp, edx
		movzx	edx, byte ptr [eax+18h]
		or	edx, ecx
		rol	ebp, 3
		movzx	ecx, byte ptr [eax+1Ah]
		shl	ecx, 10h
		or	edx, ecx
		movzx	ecx, byte ptr [eax+1Bh]
		shl	ecx, 18h
		or	edx, ecx
		movzx	ecx, byte ptr [eax+1Dh]
		mov	[esp+64h+var_44], edx
		mov	edx, edi
		xor	edx, ebx
		shl	ecx, 8
		and	edx, ebp
		xor	edx, edi
		add	edx, [esp+64h+var_38]
		add	edx, esi
		movzx	esi, byte ptr [eax+1Ch]
		or	esi, ecx
		rol	edx, 7
		movzx	ecx, byte ptr [eax+1Eh]
		shl	ecx, 10h
		or	esi, ecx
		movzx	ecx, byte ptr [eax+1Fh]
		shl	ecx, 18h
		or	esi, ecx
		movzx	ecx, byte ptr [eax+21h]
		mov	[esp+64h+var_2C], esi
		mov	esi, ebx
		xor	esi, ebp
		shl	ecx, 8
		and	esi, edx
		xor	esi, ebx
		add	esi, [esp+64h+var_44]
		add	esi, edi
		movzx	edi, byte ptr [eax+20h]
		or	edi, ecx
		rol	esi, 0Bh
		movzx	ecx, byte ptr [eax+22h]
		shl	ecx, 10h
		or	edi, ecx
		movzx	ecx, byte ptr [eax+23h]
		shl	ecx, 18h
		or	edi, ecx
		movzx	ecx, byte ptr [eax+25h]
		mov	[esp+64h+var_54], edi
		mov	edi, edx
		xor	edi, ebp
		shl	ecx, 8
		and	edi, esi
		xor	edi, ebp
		add	edi, [esp+64h+var_2C]
		add	edi, ebx
		movzx	ebx, byte ptr [eax+24h]
		or	ebx, ecx
		rol	edi, 13h
		movzx	ecx, byte ptr [eax+26h]
		shl	ecx, 10h
		or	ebx, ecx
		movzx	ecx, byte ptr [eax+27h]
		shl	ecx, 18h
		or	ebx, ecx
		movzx	ecx, byte ptr [eax+29h]
		shl	ecx, 8
		mov	[esp+64h+var_3C], ebx
		mov	ebx, edx
		xor	ebx, esi
		and	ebx, edi
		xor	ebx, edx
		add	ebx, [esp+64h+var_54]
		add	ebx, ebp
		movzx	ebp, byte ptr [eax+28h]
		or	ebp, ecx
		rol	ebx, 3
		movzx	ecx, byte ptr [eax+2Ah]
		shl	ecx, 10h
		or	ebp, ecx
		mov	[esp+64h+var_28], ebx
		movzx	ecx, byte ptr [eax+2Bh]
		shl	ecx, 18h
		or	ebp, ecx
		mov	ecx, esi
		xor	ecx, edi
		mov	[esp+64h+var_48], ebp
		and	ecx, ebx
		mov	ebp, [esp+64h+var_28]
		xor	ecx, esi
		mov	ebx, edi
		add	ecx, [esp+64h+var_3C]
		xor	ebx, ebp
		add	ecx, edx
		movzx	edx, byte ptr [eax+2Ch]
		rol	ecx, 7
		mov	[esp+64h+arg_4], ecx
		movzx	ecx, byte ptr [eax+2Dh]
		shl	ecx, 8
		or	edx, ecx
		and	ebx, [esp+64h+arg_4]
		movzx	ecx, byte ptr [eax+2Eh]
		xor	ebx, edi
		shl	ecx, 10h
		or	edx, ecx
		add	ebx, [esp+64h+var_48]
		movzx	ecx, byte ptr [eax+2Fh]
		add	ebx, esi
		mov	esi, [esp+64h+arg_4]
		shl	ecx, 18h
		or	edx, ecx
		rol	ebx, 0Bh
		movzx	ecx, byte ptr [eax+31h]
		mov	[esp+64h+var_30], edx
		movzx	edx, byte ptr [eax+30h]
		shl	ecx, 8
		or	edx, ecx
		movzx	ecx, byte ptr [eax+32h]
		shl	ecx, 10h
		or	edx, ecx
		movzx	ecx, byte ptr [eax+33h]
		shl	ecx, 18h
		or	edx, ecx
		movzx	ecx, byte ptr [eax+35h]
		mov	[esp+64h+var_4C], edx
		mov	edx, esi
		xor	edx, ebp
		shl	ecx, 8
		and	edx, ebx
		xor	edx, ebp
		add	edx, [esp+64h+var_30]
		add	edx, edi
		movzx	edi, byte ptr [eax+34h]
		or	edi, ecx
		rol	edx, 13h
		movzx	ecx, byte ptr [eax+36h]
		shl	ecx, 10h
		or	edi, ecx
		movzx	ecx, byte ptr [eax+37h]
		shl	ecx, 18h
		or	edi, ecx
		mov	[esp+64h+var_34], edi
		mov	edi, esi
		xor	edi, ebx
		movzx	ecx, byte ptr [eax+39h]
		lea	eax, [eax+40h]
		and	edi, edx
		shl	ecx, 8
		xor	edi, esi
		mov	esi, ebx
		add	edi, [esp+64h+var_4C]
		xor	esi, edx
		add	edi, ebp
		movzx	ebp, byte ptr [eax-8]
		or	ebp, ecx
		rol	edi, 3
		movzx	ecx, byte ptr [eax-6]
		and	esi, edi
		shl	ecx, 10h
		xor	esi, ebx
		or	ebp, ecx
		add	esi, [esp+64h+var_34]
		movzx	ecx, byte ptr [eax-5]
		add	esi, [esp+64h+arg_4]
		shl	ecx, 18h
		or	ebp, ecx
		rol	esi, 7
		movzx	ecx, byte ptr [eax-3]
		mov	[esp+64h+var_40], ebp
		movzx	ebp, byte ptr [eax-4]
		shl	ecx, 8
		or	ebp, ecx
		mov	[esp+64h+var_28], esi
		movzx	ecx, byte ptr [eax-2]
		shl	ecx, 10h
		or	ebp, ecx
		movzx	ecx, byte ptr [eax-1]
		shl	ecx, 18h
		or	ebp, ecx
		mov	[esp+64h+arg_4], ebp
		mov	ebp, edx
		xor	ebp, edi
		and	ebp, esi
		xor	ebp, edx
		add	ebp, [esp+64h+var_40]
		add	ebp, ebx
		mov	ebx, esi
		xor	ebx, edi
		rol	ebp, 0Bh
		and	ebx, ebp
		mov	ecx, ebp
		xor	ebx, edi
		add	ebx, [esp+64h+arg_4]
		add	ebx, edx
		mov	edx, ebp
		rol	ebx, 13h
		or	edx, ebx
		mov	[esp+64h+var_8], ebx
		and	edx, esi
		and	ecx, ebx
		or	edx, ecx
		mov	esi, ebx
		add	edx, 5A827999h
		add	edx, [esp+64h+var_24]
		add	edi, edx
		mov	edx, ebx
		mov	ebx, [esp+64h+var_28]
		rol	edi, 3
		add	ebx, 5A827999h
		or	esi, edi
		and	edx, edi
		mov	ecx, esi
		and	ecx, ebp
		or	ecx, edx
		add	ecx, [esp+64h+var_50]
		add	ebx, ecx
		rol	ebx, 5
		and	esi, ebx
		or	esi, edx
		add	esi, 5A827999h
		add	esi, [esp+64h+var_54]
		add	ebp, esi
		rol	ebp, 9
		mov	edx, ebp
		or	edx, edi
		mov	esi, [esp+64h+var_8]
		and	edx, ebx
		add	esi, 5A827999h
		mov	ecx, ebp
		and	ecx, edi
		or	edx, ecx
		mov	ecx, ebp
		add	edx, [esp+64h+var_4C]
		add	esi, edx
		mov	edx, ebp
		rol	esi, 0Dh
		and	ecx, esi
		mov	[esp+64h+var_8], esi
		or	edx, esi
		and	edx, ebx
		or	edx, ecx
		lea	ecx, [edi+5A827999h]
		add	edx, [esp+64h+var_1C]
		add	ecx, edx
		mov	edi, [esp+64h+var_8]
		rol	ecx, 3
		mov	edx, edi
		and	edx, ecx
		mov	[esp+64h+var_28], ecx
		or	esi, ecx
		add	edi, 5A827999h
		mov	ecx, esi
		and	ecx, ebp
		or	ecx, edx
		add	ecx, 5A827999h
		add	ecx, [esp+64h+var_38]
		add	ebx, ecx
		rol	ebx, 5
		and	esi, ebx
		or	esi, edx
		add	esi, 5A827999h
		add	esi, [esp+64h+var_3C]
		add	ebp, esi
		mov	esi, [esp+64h+var_28]
		rol	ebp, 9
		mov	edx, ebp
		mov	ecx, ebp
		or	edx, esi
		and	ecx, esi
		and	edx, ebx
		or	edx, ecx
		mov	ecx, ebp
		add	edx, [esp+64h+var_34]
		add	edi, edx
		mov	edx, ebp
		rol	edi, 0Dh
		and	ecx, edi
		or	edx, edi
		and	edx, ebx
		or	edx, ecx
		lea	ecx, [esi+5A827999h]
		add	edx, [esp+64h+var_20]
		mov	esi, edi
		add	ecx, edx
		mov	edx, edi
		rol	ecx, 3
		or	esi, ecx
		mov	[esp+64h+var_8], ecx
		and	edx, ecx
		mov	ecx, esi
		and	ecx, ebp
		or	ecx, edx
		add	ecx, 5A827999h
		add	ecx, [esp+64h+var_44]
		add	ebx, ecx
		rol	ebx, 5
		and	esi, ebx
		or	esi, edx
		add	esi, 5A827999h
		add	esi, [esp+64h+var_48]
		add	ebp, esi
		mov	esi, [esp+64h+var_8]
		rol	ebp, 9
		mov	edx, ebp
		mov	[esp+64h+var_28], ebp
		or	edx, esi
		and	edx, ebx
		mov	ecx, ebp
		and	ecx, esi
		or	edx, ecx
		mov	ecx, ebp
		add	edx, 5A827999h
		add	edx, [esp+64h+var_40]
		add	edi, edx
		mov	edx, ebp
		rol	edi, 0Dh
		lea	ebp, [esi+5A827999h]
		and	ecx, edi
		mov	[esp+64h+var_8], edi
		or	edx, edi
		mov	esi, edi
		and	edx, ebx
		or	edx, ecx
		add	edx, [esp+64h+var_18]
		add	ebp, edx
		mov	edx, edi
		rol	ebp, 3
		lea	edi, [ebx+5A827999h]
		mov	ebx, [esp+64h+var_28]
		or	esi, ebp
		and	edx, ebp
		mov	[esp+64h+var_4], ebp
		mov	ecx, esi
		add	ebx, 5A827999h
		and	ecx, [esp+64h+var_28]
		or	ecx, edx
		add	ecx, [esp+64h+var_2C]
		add	edi, ecx
		rol	edi, 5
		and	esi, edi
		or	esi, edx
		add	esi, [esp+64h+var_30]
		add	ebx, esi
		mov	esi, [esp+64h+var_4]
		rol	ebx, 9
		add	esi, 6ED9EBA1h
		mov	edx, ebx
		mov	ecx, ebx
		and	ecx, ebp
		or	edx, ebp
		mov	ebp, [esp+64h+var_8]
		and	edx, edi
		or	edx, ecx
		add	ebp, 5A827999h
		add	edx, [esp+64h+arg_4]
		mov	ecx, edi
		xor	ecx, ebx
		add	ebp, edx
		rol	ebp, 0Dh
		xor	ecx, ebp
		add	ecx, [esp+64h+var_24]
		add	esi, ecx
		mov	ecx, ebx
		xor	ecx, ebp
		rol	esi, 3
		xor	ecx, esi
		add	ecx, 6ED9EBA1h
		add	ecx, [esp+64h+var_54]
		add	edi, ecx
		rol	edi, 9
		mov	ecx, edi
		mov	edx, edi
		xor	ecx, ebp
		xor	ecx, esi
		add	ecx, 6ED9EBA1h
		add	ecx, [esp+64h+var_50]
		add	ebx, ecx
		rol	ebx, 0Bh
		xor	edx, ebx
		mov	ecx, edx
		xor	ecx, esi
		add	ecx, 6ED9EBA1h
		add	ecx, [esp+64h+var_4C]
		add	ebp, ecx
		rol	ebp, 0Fh
		xor	edx, ebp
		add	edx, 6ED9EBA1h
		add	edx, [esp+64h+var_20]
		mov	ecx, ebx
		xor	ecx, ebp
		add	esi, edx
		rol	esi, 3
		xor	ecx, esi
		add	ecx, 6ED9EBA1h
		add	ecx, [esp+64h+var_48]
		add	edi, ecx
		rol	edi, 9
		mov	ecx, edi
		mov	edx, edi
		xor	ecx, ebp
		xor	ecx, esi
		add	ecx, 6ED9EBA1h
		add	ecx, [esp+64h+var_44]
		add	ebx, ecx
		rol	ebx, 0Bh
		xor	edx, ebx
		mov	ecx, edx
		xor	ecx, esi
		add	ecx, 6ED9EBA1h
		add	ecx, [esp+64h+var_40]
		add	ebp, ecx
		mov	ecx, ebx
		rol	ebp, 0Fh
		xor	ecx, ebp
		xor	edx, ebp
		add	edx, 6ED9EBA1h
		add	edx, [esp+64h+var_1C]
		add	esi, edx
		lea	edx, [edi+6ED9EBA1h]
		rol	esi, 3
		lea	edi, [ebp+6ED9EBA1h]
		xor	ecx, esi
		add	ecx, [esp+64h+var_3C]
		add	edx, ecx
		rol	edx, 9
		mov	ecx, edx
		mov	[esp+64h+var_4], edx
		xor	ecx, ebp
		mov	ebp, [esp+64h+var_4]
		xor	ecx, esi
		add	ebp, 6ED9EBA1h
		add	ecx, 6ED9EBA1h
		add	ecx, [esp+64h+var_38]
		add	ebx, ecx
		rol	ebx, 0Bh
		xor	edx, ebx
		mov	ecx, edx
		xor	ecx, esi
		add	ecx, [esp+64h+var_34]
		add	edi, ecx
		mov	ecx, ebx
		rol	edi, 0Fh
		xor	edx, edi
		xor	ecx, edi
		add	edx, 6ED9EBA1h
		add	edx, [esp+64h+var_18]
		add	esi, edx
		lea	edx, [ebx+6ED9EBA1h]
		mov	ebx, [esp+64h+arg_0]
		rol	esi, 3
		xor	ecx, esi
		add	ecx, [esp+64h+var_30]
		add	ebp, ecx
		rol	ebp, 9
		mov	ecx, ebp
		xor	ecx, edi
		add	edi, 6ED9EBA1h
		xor	ecx, esi
		add	ecx, [esp+64h+var_2C]
		add	edx, ecx
		mov	ecx, ebp
		rol	edx, 0Bh
		xor	ecx, edx
		xor	ecx, esi
		add	ecx, [esp+64h+arg_4]
		add	ecx, edi
		rol	ecx, 0Fh
		add	[ebx], esi
		mov	esi, [ebx]
		mov	[esp+64h+var_18], esi
		mov	esi, [esp+64h+var_14]
		add	esi, ecx
		mov	ecx, [esp+64h+var_10]
		add	ecx, edx
		mov	[esp+64h+var_14], esi
		mov	[esp+64h+var_10], ecx
		mov	edi, esi
		mov	[esp+64h+var_2C], ecx
		mov	[ebx+8], ecx
		mov	[esp+64h+arg_4], esi
		mov	[ebx+4], esi
		mov	esi, ecx
		mov	ecx, [esp+64h+var_C]
		add	ecx, ebp
		mov	[esp+64h+var_C], ecx
		mov	edx, ecx
		mov	[esp+64h+var_30], ecx
		mov	[ebx+0Ch], ecx
		mov	ecx, [esp+64h+arg_8]
		test	ecx, ecx
		jnz	loc_2B4
		pop	ebp
		pop	ebx

loc_98A:				; CODE XREF: _md4_block_data_order+35j
		pop	edi
		pop	esi
		add	esp, 54h
		retn
_md4_block_data_order endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __chkstk:near	; CODE XREF: _md4_block_data_order+5p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _MD4_Update+4Dp
					; _MD4_Update+6Fp ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _MD4_Final+25p
					; _MD4_Final+46p ...


		end
