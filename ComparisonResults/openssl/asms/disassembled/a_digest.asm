;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	5BBCC9DBDF298DC52FDC19F4AFAE34A9
; Input	CRC32 :	F78645AB

; File Name   :	C:\compspace\Diff\openssl\obj\a_digest.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_digest
_ASN1_digest	proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 4
		call	__chkstk
		push	ebp
		push	esi
		push	0
		push	[esp+10h+arg_8]
		call	[esp+14h+arg_0]
		push	52h ; 'R'
		mov	ebp, eax
		push	offset ??_C@_0BJ@LGEODODF@?4?2crypto?2asn1?2a_digest?4c?$AA@ ; ".\\crypto\\asn1\\a_digest.c"
		push	ebp
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	short loc_4C
		push	53h ; 'S'
		push	offset ??_C@_0BJ@LGEODODF@?4?2crypto?2asn1?2a_digest?4c?$AA@ ; ".\\crypto\\asn1\\a_digest.c"
		push	41h ; 'A'
		push	0B8h ; '¸'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h

loc_46:					; CODE XREF: _ASN1_digest+77j
		pop	esi
		xor	eax, eax
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_4C:					; CODE XREF: _ASN1_digest+2Cj
		lea	eax, [esp+0Ch+var_4]
		mov	[esp+0Ch+var_4], esi
		push	eax
		push	[esp+10h+arg_8]
		call	[esp+14h+arg_0]
		push	0
		push	[esp+18h+arg_4]
		push	[esp+1Ch+arg_10]
		push	[esp+20h+arg_C]
		push	ebp
		push	esi
		call	_EVP_Digest
		add	esp, 20h
		test	eax, eax
		jz	short loc_46
		push	esi
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, 1
		pop	esi
		pop	ebp
		pop	ecx
		retn
_ASN1_digest	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_item_digest
_ASN1_item_digest proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 4
		call	__chkstk
		push	[esp+4+arg_0]
		lea	eax, [esp+8+var_4]
		mov	[esp+8+var_4], 0
		push	eax
		push	[esp+0Ch+arg_8]
		call	_ASN1_item_i2d
		mov	ecx, [esp+10h+var_4]
		add	esp, 0Ch
		test	ecx, ecx
		jnz	short loc_BF

loc_BB:					; CODE XREF: _ASN1_item_digest+4Dj
		xor	eax, eax
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_BF:					; CODE XREF: _ASN1_item_digest+2Dj
		push	0
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_10]
		push	[esp+10h+arg_C]
		push	eax
		push	ecx
		call	_EVP_Digest
		add	esp, 18h
		test	eax, eax
		jz	short loc_BB
		push	[esp+4+var_4]
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, 1
		pop	ecx
		retn
_ASN1_item_digest endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F0h
; COMDAT (pick any)
		public ??_C@_0BJ@LGEODODF@?4?2crypto?2asn1?2a_digest?4c?$AA@
; `string'
??_C@_0BJ@LGEODODF@?4?2crypto?2asn1?2a_digest?4c?$AA@ db '.\crypto\asn1\a_digest.c',0
					; DATA XREF: _ASN1_digest+1Ao
					; _ASN1_digest+30o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _ASN1_digest+20p
		extrn _CRYPTO_free:near	; CODE XREF: _ASN1_digest+7Ap
					; _ASN1_item_digest+52p
		extrn _ERR_put_error:near ; CODE XREF: _ASN1_digest+3Ep
		extrn _ASN1_item_i2d:near ; CODE XREF: _ASN1_item_digest+1Fp
		extrn _EVP_Digest:near	; CODE XREF: _ASN1_digest+6Dp
					; _ASN1_item_digest+43p
		extrn __chkstk:near	; CODE XREF: _ASN1_digest+5p
					; _ASN1_item_digest+5p


		end
