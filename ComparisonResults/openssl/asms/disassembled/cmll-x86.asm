;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	7902A2DAC7B0310AD83572250C6A2F33
; Input	CRC32 :	A02B6D95

; File Name   :	C:\compspace\Diff\openssl\obj\cmll-x86.obj
; Format      :	COFF (X386MAGIC)

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
; Segment alignment '64byte' can not be represented in assembly
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public L$_Camellia_EncryptBlock_Rounds_begin
L$_Camellia_EncryptBlock_Rounds_begin proc near
					; CODE XREF: L$_Camellia_EncryptBlock_begin+15j

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	ebx
		push	esi
		push	edi
		mov	eax, [esp+10h+arg_0]
		mov	esi, [esp+10h+arg_4]
		mov	edi, [esp+10h+arg_8]
		mov	ebx, esp
		sub	esp, 1Ch
		and	esp, 0FFFFFFC0h
		lea	ecx, [edi-7Fh]
		sub	ecx, esp
		neg	ecx
		and	ecx, 3C0h
		sub	esp, ecx
		add	esp, 4
		shl	eax, 6
		lea	eax, [edi+eax]
		mov	[esp+28h+var_14], ebx
		mov	[esp+28h+var_18], eax
		call	$+5

L$000pic_point:
		pop	ebp
		lea	ebp, [ebp+1243h]
		mov	eax, [esi]
		mov	ebx, [esi+4]
		mov	ecx, [esi+8]
		bswap	eax
		mov	edx, [esi+0Ch]
		bswap	ebx
		bswap	ecx
		bswap	edx
		call	__x86_Camellia_encrypt
		mov	esp, [esp+28h+var_14]
		bswap	eax
		mov	esi, [esp+10h+arg_C]
		bswap	ebx
		bswap	ecx
		bswap	edx
		mov	[esi], eax
		mov	[esi+4], ebx
		mov	[esi+8], ecx
		mov	[esi+0Ch], edx
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_Camellia_EncryptBlock_Rounds_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_Camellia_EncryptBlock_begin
L$_Camellia_EncryptBlock_begin proc near

arg_0		= dword	ptr  4

		mov	eax, 80h ; '€'
		sub	eax, [esp+arg_0]
		mov	eax, 3
		adc	eax, 0
		mov	[esp+arg_0], eax
		jmp	L$_Camellia_EncryptBlock_Rounds_begin
L$_Camellia_EncryptBlock_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_Camellia_encrypt_begin
L$_Camellia_encrypt_begin proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	ebx
		push	esi
		push	edi
		mov	esi, [esp+10h+arg_0]
		mov	edi, [esp+10h+arg_8]
		mov	ebx, esp
		sub	esp, 1Ch
		and	esp, 0FFFFFFC0h
		mov	eax, [edi+110h]
		lea	ecx, [edi-7Fh]
		sub	ecx, esp
		neg	ecx
		and	ecx, 3C0h
		sub	esp, ecx
		add	esp, 4
		shl	eax, 6
		lea	eax, [edi+eax]
		mov	[esp+28h+var_14], ebx
		mov	[esp+28h+var_18], eax
		call	$+5

L$001pic_point:
		pop	ebp
		lea	ebp, [ebp+11A1h]
		mov	eax, [esi]
		mov	ebx, [esi+4]
		mov	ecx, [esi+8]
		bswap	eax
		mov	edx, [esi+0Ch]
		bswap	ebx
		bswap	ecx
		bswap	edx
		call	__x86_Camellia_encrypt
		mov	esp, [esp+28h+var_14]
		bswap	eax
		mov	esi, [esp+10h+arg_4]
		bswap	ebx
		bswap	ecx
		bswap	edx
		mov	[esi], eax
		mov	[esi+4], ebx
		mov	[esi+8], ecx
		mov	[esi+0Ch], edx
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_Camellia_encrypt_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


__x86_Camellia_encrypt proc near	; CODE XREF: L$_Camellia_EncryptBlock_Rounds_begin+57p
					; L$_Camellia_encrypt_begin+59p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		xor	eax, [edi]
		xor	ebx, [edi+4]
		xor	ecx, [edi+8]
		xor	edx, [edi+0Ch]
		mov	esi, [edi+10h]
		mov	[esp+arg_0], eax
		mov	[esp+arg_4], ebx
		mov	[esp+arg_8], ecx
		mov	[esp+arg_C], edx
		nop
		nop

L$002loop:				; CODE XREF: __x86_Camellia_encrypt+2EFj
		xor	eax, esi
		xor	ebx, [edi+14h]
		movzx	esi, ah
		mov	edx, [ebp+esi*8+804h]
		movzx	esi, al
		xor	edx, [ebp+esi*8+4]
		shr	eax, 10h
		movzx	esi, bl
		mov	ecx, [ebp+esi*8+0]
		movzx	esi, ah
		xor	edx, [ebp+esi*8+0]
		movzx	esi, bh
		xor	ecx, [ebp+esi*8+4]
		shr	ebx, 10h
		movzx	eax, al
		xor	edx, [ebp+eax*8+800h]
		movzx	esi, bh
		mov	eax, [esp+arg_C]
		xor	ecx, edx
		ror	edx, 8
		xor	ecx, [ebp+esi*8+800h]
		movzx	esi, bl
		mov	ebx, [esp+arg_8]
		xor	edx, eax
		xor	ecx, [ebp+esi*8+804h]
		mov	esi, [edi+18h]
		xor	edx, ecx
		mov	[esp+arg_C], edx
		xor	ecx, ebx
		mov	[esp+arg_8], ecx
		xor	ecx, esi
		xor	edx, [edi+1Ch]
		movzx	esi, ch
		mov	ebx, [ebp+esi*8+804h]
		movzx	esi, cl
		xor	ebx, [ebp+esi*8+4]
		shr	ecx, 10h
		movzx	esi, dl
		mov	eax, [ebp+esi*8+0]
		movzx	esi, ch
		xor	ebx, [ebp+esi*8+0]
		movzx	esi, dh
		xor	eax, [ebp+esi*8+4]
		shr	edx, 10h
		movzx	ecx, cl
		xor	ebx, [ebp+ecx*8+800h]
		movzx	esi, dh
		mov	ecx, [esp+arg_4]
		xor	eax, ebx
		ror	ebx, 8
		xor	eax, [ebp+esi*8+800h]
		movzx	esi, dl
		mov	edx, [esp+arg_0]
		xor	ebx, ecx
		xor	eax, [ebp+esi*8+804h]
		mov	esi, [edi+20h]
		xor	ebx, eax
		mov	[esp+arg_4], ebx
		xor	eax, edx
		mov	[esp+arg_0], eax
		xor	eax, esi
		xor	ebx, [edi+24h]
		movzx	esi, ah
		mov	edx, [ebp+esi*8+804h]
		movzx	esi, al
		xor	edx, [ebp+esi*8+4]
		shr	eax, 10h
		movzx	esi, bl
		mov	ecx, [ebp+esi*8+0]
		movzx	esi, ah
		xor	edx, [ebp+esi*8+0]
		movzx	esi, bh
		xor	ecx, [ebp+esi*8+4]
		shr	ebx, 10h
		movzx	eax, al
		xor	edx, [ebp+eax*8+800h]
		movzx	esi, bh
		mov	eax, [esp+arg_C]
		xor	ecx, edx
		ror	edx, 8
		xor	ecx, [ebp+esi*8+800h]
		movzx	esi, bl
		mov	ebx, [esp+arg_8]
		xor	edx, eax
		xor	ecx, [ebp+esi*8+804h]
		mov	esi, [edi+28h]
		xor	edx, ecx
		mov	[esp+arg_C], edx
		xor	ecx, ebx
		mov	[esp+arg_8], ecx
		xor	ecx, esi
		xor	edx, [edi+2Ch]
		movzx	esi, ch
		mov	ebx, [ebp+esi*8+804h]
		movzx	esi, cl
		xor	ebx, [ebp+esi*8+4]
		shr	ecx, 10h
		movzx	esi, dl
		mov	eax, [ebp+esi*8+0]
		movzx	esi, ch
		xor	ebx, [ebp+esi*8+0]
		movzx	esi, dh
		xor	eax, [ebp+esi*8+4]
		shr	edx, 10h
		movzx	ecx, cl
		xor	ebx, [ebp+ecx*8+800h]
		movzx	esi, dh
		mov	ecx, [esp+arg_4]
		xor	eax, ebx
		ror	ebx, 8
		xor	eax, [ebp+esi*8+800h]
		movzx	esi, dl
		mov	edx, [esp+arg_0]
		xor	ebx, ecx
		xor	eax, [ebp+esi*8+804h]
		mov	esi, [edi+30h]
		xor	ebx, eax
		mov	[esp+arg_4], ebx
		xor	eax, edx
		mov	[esp+arg_0], eax
		xor	eax, esi
		xor	ebx, [edi+34h]
		movzx	esi, ah
		mov	edx, [ebp+esi*8+804h]
		movzx	esi, al
		xor	edx, [ebp+esi*8+4]
		shr	eax, 10h
		movzx	esi, bl
		mov	ecx, [ebp+esi*8+0]
		movzx	esi, ah
		xor	edx, [ebp+esi*8+0]
		movzx	esi, bh
		xor	ecx, [ebp+esi*8+4]
		shr	ebx, 10h
		movzx	eax, al
		xor	edx, [ebp+eax*8+800h]
		movzx	esi, bh
		mov	eax, [esp+arg_C]
		xor	ecx, edx
		ror	edx, 8
		xor	ecx, [ebp+esi*8+800h]
		movzx	esi, bl
		mov	ebx, [esp+arg_8]
		xor	edx, eax
		xor	ecx, [ebp+esi*8+804h]
		mov	esi, [edi+38h]
		xor	edx, ecx
		mov	[esp+arg_C], edx
		xor	ecx, ebx
		mov	[esp+arg_8], ecx
		xor	ecx, esi
		xor	edx, [edi+3Ch]
		movzx	esi, ch
		mov	ebx, [ebp+esi*8+804h]
		movzx	esi, cl
		xor	ebx, [ebp+esi*8+4]
		shr	ecx, 10h
		movzx	esi, dl
		mov	eax, [ebp+esi*8+0]
		movzx	esi, ch
		xor	ebx, [ebp+esi*8+0]
		movzx	esi, dh
		xor	eax, [ebp+esi*8+4]
		shr	edx, 10h
		movzx	ecx, cl
		xor	ebx, [ebp+ecx*8+800h]
		movzx	esi, dh
		mov	ecx, [esp+arg_4]
		xor	eax, ebx
		ror	ebx, 8
		xor	eax, [ebp+esi*8+800h]
		movzx	esi, dl
		mov	edx, [esp+arg_0]
		xor	ebx, ecx
		xor	eax, [ebp+esi*8+804h]
		mov	esi, [edi+40h]
		xor	ebx, eax
		mov	[esp+arg_4], ebx
		xor	eax, edx
		mov	[esp+arg_0], eax
		add	edi, 40h ; '@'
		cmp	edi, [esp+arg_10]
		jz	L$003done
		and	esi, eax
		mov	edx, [esp+arg_C]
		rol	esi, 1
		mov	ecx, edx
		xor	ebx, esi
		or	ecx, [edi+0Ch]
		mov	[esp+arg_4], ebx
		xor	ecx, [esp+arg_8]
		mov	esi, [edi+4]
		mov	[esp+arg_8], ecx
		or	esi, ebx
		and	ecx, [edi+8]
		xor	eax, esi
		rol	ecx, 1
		mov	[esp+arg_0], eax
		xor	edx, ecx
		mov	esi, [edi+10h]
		mov	[esp+arg_C], edx
		jmp	L$002loop
; ---------------------------------------------------------------------------
		align 8

L$003done:				; CODE XREF: __x86_Camellia_encrypt+2B5j
		mov	ecx, eax
		mov	edx, ebx
		mov	eax, [esp+arg_8]
		mov	ebx, [esp+arg_C]
		xor	eax, esi
		xor	ebx, [edi+4]
		xor	ecx, [edi+8]
		xor	edx, [edi+0Ch]
		retn
__x86_Camellia_encrypt endp


; =============== S U B	R O U T	I N E =======================================


		public L$_Camellia_DecryptBlock_Rounds_begin
L$_Camellia_DecryptBlock_Rounds_begin proc near
					; CODE XREF: L$_Camellia_DecryptBlock_begin+15j

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	ebx
		push	esi
		push	edi
		mov	eax, [esp+10h+arg_0]
		mov	esi, [esp+10h+arg_4]
		mov	edi, [esp+10h+arg_8]
		mov	ebx, esp
		sub	esp, 1Ch
		and	esp, 0FFFFFFC0h
		lea	ecx, [edi-7Fh]
		sub	ecx, esp
		neg	ecx
		and	ecx, 3C0h
		sub	esp, ecx
		add	esp, 4
		shl	eax, 6
		mov	[esp+28h+var_18], edi
		lea	edi, [edi+eax]
		mov	[esp+28h+var_14], ebx
		call	$+5

L$004pic_point:
		pop	ebp
		lea	ebp, [ebp+0E13h]
		mov	eax, [esi]
		mov	ebx, [esi+4]
		mov	ecx, [esi+8]
		bswap	eax
		mov	edx, [esi+0Ch]
		bswap	ebx
		bswap	ecx
		bswap	edx
		call	__x86_Camellia_decrypt
		mov	esp, [esp+28h+var_14]
		bswap	eax
		mov	esi, [esp+10h+arg_C]
		bswap	ebx
		bswap	ecx
		bswap	edx
		mov	[esi], eax
		mov	[esi+4], ebx
		mov	[esi+8], ecx
		mov	[esi+0Ch], edx
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_Camellia_DecryptBlock_Rounds_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_Camellia_DecryptBlock_begin
L$_Camellia_DecryptBlock_begin proc near

arg_0		= dword	ptr  4

		mov	eax, 80h ; '€'
		sub	eax, [esp+arg_0]
		mov	eax, 3
		adc	eax, 0
		mov	[esp+arg_0], eax
		jmp	L$_Camellia_DecryptBlock_Rounds_begin
L$_Camellia_DecryptBlock_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_Camellia_decrypt_begin
L$_Camellia_decrypt_begin proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	ebx
		push	esi
		push	edi
		mov	esi, [esp+10h+arg_0]
		mov	edi, [esp+10h+arg_8]
		mov	ebx, esp
		sub	esp, 1Ch
		and	esp, 0FFFFFFC0h
		mov	eax, [edi+110h]
		lea	ecx, [edi-7Fh]
		sub	ecx, esp
		neg	ecx
		and	ecx, 3C0h
		sub	esp, ecx
		add	esp, 4
		shl	eax, 6
		mov	[esp+28h+var_18], edi
		lea	edi, [edi+eax]
		mov	[esp+28h+var_14], ebx
		call	$+5

L$005pic_point:
		pop	ebp
		lea	ebp, [ebp+0D71h]
		mov	eax, [esi]
		mov	ebx, [esi+4]
		mov	ecx, [esi+8]
		bswap	eax
		mov	edx, [esi+0Ch]
		bswap	ebx
		bswap	ecx
		bswap	edx
		call	__x86_Camellia_decrypt
		mov	esp, [esp+28h+var_14]
		bswap	eax
		mov	esi, [esp+10h+arg_4]
		bswap	ebx
		bswap	ecx
		bswap	edx
		mov	[esi], eax
		mov	[esi+4], ebx
		mov	[esi+8], ecx
		mov	[esi+0Ch], edx
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_Camellia_decrypt_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


__x86_Camellia_decrypt proc near	; CODE XREF: L$_Camellia_DecryptBlock_Rounds_begin+57p
					; L$_Camellia_decrypt_begin+59p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		xor	eax, [edi]
		xor	ebx, [edi+4]
		xor	ecx, [edi+8]
		xor	edx, [edi+0Ch]
		mov	esi, [edi-8]
		mov	[esp+arg_0], eax
		mov	[esp+arg_4], ebx
		mov	[esp+arg_8], ecx
		mov	[esp+arg_C], edx
		nop
		nop

L$006loop:				; CODE XREF: __x86_Camellia_decrypt+2EEj
		xor	eax, esi
		xor	ebx, [edi-4]
		movzx	esi, ah
		mov	edx, [ebp+esi*8+804h]
		movzx	esi, al
		xor	edx, [ebp+esi*8+4]
		shr	eax, 10h
		movzx	esi, bl
		mov	ecx, [ebp+esi*8+0]
		movzx	esi, ah
		xor	edx, [ebp+esi*8+0]
		movzx	esi, bh
		xor	ecx, [ebp+esi*8+4]
		shr	ebx, 10h
		movzx	eax, al
		xor	edx, [ebp+eax*8+800h]
		movzx	esi, bh
		mov	eax, [esp+arg_C]
		xor	ecx, edx
		ror	edx, 8
		xor	ecx, [ebp+esi*8+800h]
		movzx	esi, bl
		mov	ebx, [esp+arg_8]
		xor	edx, eax
		xor	ecx, [ebp+esi*8+804h]
		mov	esi, [edi-10h]
		xor	edx, ecx
		mov	[esp+arg_C], edx
		xor	ecx, ebx
		mov	[esp+arg_8], ecx
		xor	ecx, esi
		xor	edx, [edi-0Ch]
		movzx	esi, ch
		mov	ebx, [ebp+esi*8+804h]
		movzx	esi, cl
		xor	ebx, [ebp+esi*8+4]
		shr	ecx, 10h
		movzx	esi, dl
		mov	eax, [ebp+esi*8+0]
		movzx	esi, ch
		xor	ebx, [ebp+esi*8+0]
		movzx	esi, dh
		xor	eax, [ebp+esi*8+4]
		shr	edx, 10h
		movzx	ecx, cl
		xor	ebx, [ebp+ecx*8+800h]
		movzx	esi, dh
		mov	ecx, [esp+arg_4]
		xor	eax, ebx
		ror	ebx, 8
		xor	eax, [ebp+esi*8+800h]
		movzx	esi, dl
		mov	edx, [esp+arg_0]
		xor	ebx, ecx
		xor	eax, [ebp+esi*8+804h]
		mov	esi, [edi-18h]
		xor	ebx, eax
		mov	[esp+arg_4], ebx
		xor	eax, edx
		mov	[esp+arg_0], eax
		xor	eax, esi
		xor	ebx, [edi-14h]
		movzx	esi, ah
		mov	edx, [ebp+esi*8+804h]
		movzx	esi, al
		xor	edx, [ebp+esi*8+4]
		shr	eax, 10h
		movzx	esi, bl
		mov	ecx, [ebp+esi*8+0]
		movzx	esi, ah
		xor	edx, [ebp+esi*8+0]
		movzx	esi, bh
		xor	ecx, [ebp+esi*8+4]
		shr	ebx, 10h
		movzx	eax, al
		xor	edx, [ebp+eax*8+800h]
		movzx	esi, bh
		mov	eax, [esp+arg_C]
		xor	ecx, edx
		ror	edx, 8
		xor	ecx, [ebp+esi*8+800h]
		movzx	esi, bl
		mov	ebx, [esp+arg_8]
		xor	edx, eax
		xor	ecx, [ebp+esi*8+804h]
		mov	esi, [edi-20h]
		xor	edx, ecx
		mov	[esp+arg_C], edx
		xor	ecx, ebx
		mov	[esp+arg_8], ecx
		xor	ecx, esi
		xor	edx, [edi-1Ch]
		movzx	esi, ch
		mov	ebx, [ebp+esi*8+804h]
		movzx	esi, cl
		xor	ebx, [ebp+esi*8+4]
		shr	ecx, 10h
		movzx	esi, dl
		mov	eax, [ebp+esi*8+0]
		movzx	esi, ch
		xor	ebx, [ebp+esi*8+0]
		movzx	esi, dh
		xor	eax, [ebp+esi*8+4]
		shr	edx, 10h
		movzx	ecx, cl
		xor	ebx, [ebp+ecx*8+800h]
		movzx	esi, dh
		mov	ecx, [esp+arg_4]
		xor	eax, ebx
		ror	ebx, 8
		xor	eax, [ebp+esi*8+800h]
		movzx	esi, dl
		mov	edx, [esp+arg_0]
		xor	ebx, ecx
		xor	eax, [ebp+esi*8+804h]
		mov	esi, [edi-28h]
		xor	ebx, eax
		mov	[esp+arg_4], ebx
		xor	eax, edx
		mov	[esp+arg_0], eax
		xor	eax, esi
		xor	ebx, [edi-24h]
		movzx	esi, ah
		mov	edx, [ebp+esi*8+804h]
		movzx	esi, al
		xor	edx, [ebp+esi*8+4]
		shr	eax, 10h
		movzx	esi, bl
		mov	ecx, [ebp+esi*8+0]
		movzx	esi, ah
		xor	edx, [ebp+esi*8+0]
		movzx	esi, bh
		xor	ecx, [ebp+esi*8+4]
		shr	ebx, 10h
		movzx	eax, al
		xor	edx, [ebp+eax*8+800h]
		movzx	esi, bh
		mov	eax, [esp+arg_C]
		xor	ecx, edx
		ror	edx, 8
		xor	ecx, [ebp+esi*8+800h]
		movzx	esi, bl
		mov	ebx, [esp+arg_8]
		xor	edx, eax
		xor	ecx, [ebp+esi*8+804h]
		mov	esi, [edi-30h]
		xor	edx, ecx
		mov	[esp+arg_C], edx
		xor	ecx, ebx
		mov	[esp+arg_8], ecx
		xor	ecx, esi
		xor	edx, [edi-2Ch]
		movzx	esi, ch
		mov	ebx, [ebp+esi*8+804h]
		movzx	esi, cl
		xor	ebx, [ebp+esi*8+4]
		shr	ecx, 10h
		movzx	esi, dl
		mov	eax, [ebp+esi*8+0]
		movzx	esi, ch
		xor	ebx, [ebp+esi*8+0]
		movzx	esi, dh
		xor	eax, [ebp+esi*8+4]
		shr	edx, 10h
		movzx	ecx, cl
		xor	ebx, [ebp+ecx*8+800h]
		movzx	esi, dh
		mov	ecx, [esp+arg_4]
		xor	eax, ebx
		ror	ebx, 8
		xor	eax, [ebp+esi*8+800h]
		movzx	esi, dl
		mov	edx, [esp+arg_0]
		xor	ebx, ecx
		xor	eax, [ebp+esi*8+804h]
		mov	esi, [edi-38h]
		xor	ebx, eax
		mov	[esp+arg_4], ebx
		xor	eax, edx
		mov	[esp+arg_0], eax
		sub	edi, 40h ; '@'
		cmp	edi, [esp+arg_10]
		jz	L$007done
		and	esi, eax
		mov	edx, [esp+arg_C]
		rol	esi, 1
		mov	ecx, edx
		xor	ebx, esi
		or	ecx, [edi+4]
		mov	[esp+arg_4], ebx
		xor	ecx, [esp+arg_8]
		mov	esi, [edi+0Ch]
		mov	[esp+arg_8], ecx
		or	esi, ebx
		and	ecx, [edi]
		xor	eax, esi
		rol	ecx, 1
		mov	[esp+arg_0], eax
		xor	edx, ecx
		mov	esi, [edi-8]
		mov	[esp+arg_C], edx
		jmp	L$006loop
; ---------------------------------------------------------------------------
		align 8

L$007done:				; CODE XREF: __x86_Camellia_decrypt+2B5j
		mov	ecx, eax
		mov	edx, ebx
		mov	eax, [esp+arg_8]
		mov	ebx, [esp+arg_C]
		xor	ecx, esi
		xor	edx, [edi+0Ch]
		xor	eax, [edi]
		xor	ebx, [edi+4]
		retn
__x86_Camellia_decrypt endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_Camellia_Ekeygen_begin
L$_Camellia_Ekeygen_begin proc near	; CODE XREF: L$_private_Camellia_set_key_begin+4Fp

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	ebx
		push	esi
		push	edi
		sub	esp, 10h
		mov	ebp, [esp+20h+arg_0]
		mov	esi, [esp+20h+arg_4]
		mov	edi, [esp+20h+arg_8]
		mov	eax, [esi]
		mov	ebx, [esi+4]
		mov	ecx, [esi+8]
		mov	edx, [esi+0Ch]
		bswap	eax
		bswap	ebx
		bswap	ecx
		bswap	edx
		mov	[edi], eax
		mov	[edi+4], ebx
		mov	[edi+8], ecx
		mov	[edi+0Ch], edx
		cmp	ebp, 80h ; '€'
		jz	L$0081st128
		mov	eax, [esi+10h]
		mov	ebx, [esi+14h]
		cmp	ebp, 0C0h ; 'À'
		jz	L$0091st192
		mov	ecx, [esi+18h]
		mov	edx, [esi+1Ch]
		jmp	L$0101st256
; ---------------------------------------------------------------------------
		align 4

L$0091st192:				; CODE XREF: L$_Camellia_Ekeygen_begin+49j
		mov	ecx, eax
		mov	edx, ebx
		not	ecx
		not	edx

L$0101st256:				; CODE XREF: L$_Camellia_Ekeygen_begin+55j
		bswap	eax
		bswap	ebx
		bswap	ecx
		bswap	edx
		mov	[edi+20h], eax
		mov	[edi+24h], ebx
		mov	[edi+28h], ecx
		mov	[edi+2Ch], edx
		xor	eax, [edi]
		xor	ebx, [edi+4]
		xor	ecx, [edi+8]
		xor	edx, [edi+0Ch]
		nop

L$0081st128:				; CODE XREF: L$_Camellia_Ekeygen_begin+37j
		call	$+5

L$011pic_point:
		pop	ebp
		lea	ebp, [ebp+997h]
		lea	edi, [ebp-40h]
		mov	esi, [edi]
		mov	[esp+20h+var_20], eax
		mov	[esp+20h+var_1C], ebx
		mov	[esp+20h+var_18], ecx
		mov	[esp+20h+var_14], edx
		xor	eax, esi
		xor	ebx, [edi+4]
		movzx	esi, ah
		mov	edx, [ebp+esi*8+804h]
		movzx	esi, al
		xor	edx, [ebp+esi*8+4]
		shr	eax, 10h
		movzx	esi, bl
		mov	ecx, [ebp+esi*8+0]
		movzx	esi, ah
		xor	edx, [ebp+esi*8+0]
		movzx	esi, bh
		xor	ecx, [ebp+esi*8+4]
		shr	ebx, 10h
		movzx	eax, al
		xor	edx, [ebp+eax*8+800h]
		movzx	esi, bh
		mov	eax, [esp+20h+var_14]
		xor	ecx, edx
		ror	edx, 8
		xor	ecx, [ebp+esi*8+800h]
		movzx	esi, bl
		mov	ebx, [esp+20h+var_18]
		xor	edx, eax
		xor	ecx, [ebp+esi*8+804h]
		mov	esi, [edi+8]
		xor	edx, ecx
		mov	[esp+20h+var_14], edx
		xor	ecx, ebx
		mov	[esp+20h+var_18], ecx
		xor	ecx, esi
		xor	edx, [edi+0Ch]
		movzx	esi, ch
		mov	ebx, [ebp+esi*8+804h]
		movzx	esi, cl
		xor	ebx, [ebp+esi*8+4]
		shr	ecx, 10h
		movzx	esi, dl
		mov	eax, [ebp+esi*8+0]
		movzx	esi, ch
		xor	ebx, [ebp+esi*8+0]
		movzx	esi, dh
		xor	eax, [ebp+esi*8+4]
		shr	edx, 10h
		movzx	ecx, cl
		xor	ebx, [ebp+ecx*8+800h]
		movzx	esi, dh
		mov	ecx, [esp+20h+var_1C]
		xor	eax, ebx
		ror	ebx, 8
		xor	eax, [ebp+esi*8+800h]
		movzx	esi, dl
		mov	edx, [esp+20h+var_20]
		xor	ebx, ecx
		xor	eax, [ebp+esi*8+804h]
		mov	esi, [edi+10h]
		xor	ebx, eax
		mov	[esp+20h+var_1C], ebx
		xor	eax, edx
		mov	[esp+20h+var_20], eax
		mov	ecx, [esp+20h+var_18]
		mov	edx, [esp+20h+var_14]
		mov	esi, [esp+20h+arg_8]
		xor	eax, [esi]
		xor	ebx, [esi+4]
		xor	ecx, [esi+8]
		xor	edx, [esi+0Ch]
		mov	esi, [edi+10h]
		mov	[esp+20h+var_20], eax
		mov	[esp+20h+var_1C], ebx
		mov	[esp+20h+var_18], ecx
		mov	[esp+20h+var_14], edx
		xor	eax, esi
		xor	ebx, [edi+14h]
		movzx	esi, ah
		mov	edx, [ebp+esi*8+804h]
		movzx	esi, al
		xor	edx, [ebp+esi*8+4]
		shr	eax, 10h
		movzx	esi, bl
		mov	ecx, [ebp+esi*8+0]
		movzx	esi, ah
		xor	edx, [ebp+esi*8+0]
		movzx	esi, bh
		xor	ecx, [ebp+esi*8+4]
		shr	ebx, 10h
		movzx	eax, al
		xor	edx, [ebp+eax*8+800h]
		movzx	esi, bh
		mov	eax, [esp+20h+var_14]
		xor	ecx, edx
		ror	edx, 8
		xor	ecx, [ebp+esi*8+800h]
		movzx	esi, bl
		mov	ebx, [esp+20h+var_18]
		xor	edx, eax
		xor	ecx, [ebp+esi*8+804h]
		mov	esi, [edi+18h]
		xor	edx, ecx
		mov	[esp+20h+var_14], edx
		xor	ecx, ebx
		mov	[esp+20h+var_18], ecx
		xor	ecx, esi
		xor	edx, [edi+1Ch]
		movzx	esi, ch
		mov	ebx, [ebp+esi*8+804h]
		movzx	esi, cl
		xor	ebx, [ebp+esi*8+4]
		shr	ecx, 10h
		movzx	esi, dl
		mov	eax, [ebp+esi*8+0]
		movzx	esi, ch
		xor	ebx, [ebp+esi*8+0]
		movzx	esi, dh
		xor	eax, [ebp+esi*8+4]
		shr	edx, 10h
		movzx	ecx, cl
		xor	ebx, [ebp+ecx*8+800h]
		movzx	esi, dh
		mov	ecx, [esp+20h+var_1C]
		xor	eax, ebx
		ror	ebx, 8
		xor	eax, [ebp+esi*8+800h]
		movzx	esi, dl
		mov	edx, [esp+20h+var_20]
		xor	ebx, ecx
		xor	eax, [ebp+esi*8+804h]
		mov	esi, [edi+20h]
		xor	ebx, eax
		mov	[esp+20h+var_1C], ebx
		xor	eax, edx
		mov	[esp+20h+var_20], eax
		mov	ecx, [esp+20h+var_18]
		mov	edx, [esp+20h+var_14]
		mov	esi, [esp+20h+arg_0]
		cmp	esi, 80h ; '€'
		jnz	L$0122nd256
		mov	edi, [esp+20h+arg_8]
		lea	edi, [edi+80h]
		mov	[edi-70h], eax
		mov	[edi-6Ch], ebx
		mov	[edi-68h], ecx
		mov	[edi-64h], edx
		mov	ebp, eax
		shl	eax, 0Fh
		mov	esi, ebx
		shr	esi, 11h
		shl	ebx, 0Fh
		or	eax, esi
		mov	esi, ecx
		shl	ecx, 0Fh
		mov	[edi-50h], eax
		shr	esi, 11h
		or	ebx, esi
		shr	ebp, 11h
		mov	esi, edx
		shr	esi, 11h
		mov	[edi-4Ch], ebx
		shl	edx, 0Fh
		or	ecx, esi
		or	edx, ebp
		mov	[edi-48h], ecx
		mov	[edi-44h], edx
		mov	ebp, eax
		shl	eax, 0Fh
		mov	esi, ebx
		shr	esi, 11h
		shl	ebx, 0Fh
		or	eax, esi
		mov	esi, ecx
		shl	ecx, 0Fh
		mov	[edi-40h], eax
		shr	esi, 11h
		or	ebx, esi
		shr	ebp, 11h
		mov	esi, edx
		shr	esi, 11h
		mov	[edi-3Ch], ebx
		shl	edx, 0Fh
		or	ecx, esi
		or	edx, ebp
		mov	[edi-38h], ecx
		mov	[edi-34h], edx
		mov	ebp, eax
		shl	eax, 0Fh
		mov	esi, ebx
		shr	esi, 11h
		shl	ebx, 0Fh
		or	eax, esi
		mov	esi, ecx
		shl	ecx, 0Fh
		mov	[edi-20h], eax
		shr	esi, 11h
		or	ebx, esi
		shr	ebp, 11h
		mov	esi, edx
		shr	esi, 11h
		mov	[edi-1Ch], ebx
		shl	edx, 0Fh
		or	ecx, esi
		or	edx, ebp
		mov	ebp, eax
		shl	eax, 0Fh
		mov	esi, ebx
		shr	esi, 11h
		shl	ebx, 0Fh
		or	eax, esi
		mov	esi, ecx
		shl	ecx, 0Fh
		mov	[edi-10h], eax
		shr	esi, 11h
		or	ebx, esi
		shr	ebp, 11h
		mov	esi, edx
		shr	esi, 11h
		mov	[edi-0Ch], ebx
		shl	edx, 0Fh
		or	ecx, esi
		or	edx, ebp
		mov	[edi-8], ecx
		mov	[edi-4], edx
		mov	ebp, ebx
		shl	ebx, 2
		mov	esi, ecx
		shr	esi, 1Eh
		shl	ecx, 2
		or	ebx, esi
		mov	esi, edx
		shl	edx, 2
		mov	[edi+20h], ebx
		shr	esi, 1Eh
		or	ecx, esi
		shr	ebp, 1Eh
		mov	esi, eax
		shr	esi, 1Eh
		mov	[edi+24h], ecx
		shl	eax, 2
		or	edx, esi
		or	eax, ebp
		mov	[edi+28h], edx
		mov	[edi+2Ch], eax
		mov	ebp, ebx
		shl	ebx, 11h
		mov	esi, ecx
		shr	esi, 0Fh
		shl	ecx, 11h
		or	ebx, esi
		mov	esi, edx
		shl	edx, 11h
		mov	[edi+40h], ebx
		shr	esi, 0Fh
		or	ecx, esi
		shr	ebp, 0Fh
		mov	esi, eax
		shr	esi, 0Fh
		mov	[edi+44h], ecx
		shl	eax, 11h
		or	edx, esi
		or	eax, ebp
		mov	[edi+48h], edx
		mov	[edi+4Ch], eax
		mov	ebx, [edi-80h]
		mov	ecx, [edi-7Ch]
		mov	edx, [edi-78h]
		mov	eax, [edi-74h]
		mov	ebp, ebx
		shl	ebx, 0Fh
		mov	esi, ecx
		shr	esi, 11h
		shl	ecx, 0Fh
		or	ebx, esi
		mov	esi, edx
		shl	edx, 0Fh
		mov	[edi-60h], ebx
		shr	esi, 11h
		or	ecx, esi
		shr	ebp, 11h
		mov	esi, eax
		shr	esi, 11h
		mov	[edi-5Ch], ecx
		shl	eax, 0Fh
		or	edx, esi
		or	eax, ebp
		mov	[edi-58h], edx
		mov	[edi-54h], eax
		mov	ebp, ebx
		shl	ebx, 1Eh
		mov	esi, ecx
		shr	esi, 2
		shl	ecx, 1Eh
		or	ebx, esi
		mov	esi, edx
		shl	edx, 1Eh
		mov	[edi-30h], ebx
		shr	esi, 2
		or	ecx, esi
		shr	ebp, 2
		mov	esi, eax
		shr	esi, 2
		mov	[edi-2Ch], ecx
		shl	eax, 1Eh
		or	edx, esi
		or	eax, ebp
		mov	[edi-28h], edx
		mov	[edi-24h], eax
		mov	ebp, ebx
		shl	ebx, 0Fh
		mov	esi, ecx
		shr	esi, 11h
		shl	ecx, 0Fh
		or	ebx, esi
		mov	esi, edx
		shl	edx, 0Fh
		shr	esi, 11h
		or	ecx, esi
		shr	ebp, 11h
		mov	esi, eax
		shr	esi, 11h
		shl	eax, 0Fh
		or	edx, esi
		or	eax, ebp
		mov	[edi-18h], edx
		mov	[edi-14h], eax
		mov	ebp, ebx
		shl	ebx, 11h
		mov	esi, ecx
		shr	esi, 0Fh
		shl	ecx, 11h
		or	ebx, esi
		mov	esi, edx
		shl	edx, 11h
		mov	[edi], ebx
		shr	esi, 0Fh
		or	ecx, esi
		shr	ebp, 0Fh
		mov	esi, eax
		shr	esi, 0Fh
		mov	[edi+4], ecx
		shl	eax, 11h
		or	edx, esi
		or	eax, ebp
		mov	[edi+8], edx
		mov	[edi+0Ch], eax
		mov	ebp, ebx
		shl	ebx, 11h
		mov	esi, ecx
		shr	esi, 0Fh
		shl	ecx, 11h
		or	ebx, esi
		mov	esi, edx
		shl	edx, 11h
		mov	[edi+10h], ebx
		shr	esi, 0Fh
		or	ecx, esi
		shr	ebp, 0Fh
		mov	esi, eax
		shr	esi, 0Fh
		mov	[edi+14h], ecx
		shl	eax, 11h
		or	edx, esi
		or	eax, ebp
		mov	[edi+18h], edx
		mov	[edi+1Ch], eax
		mov	ebp, ebx
		shl	ebx, 11h
		mov	esi, ecx
		shr	esi, 0Fh
		shl	ecx, 11h
		or	ebx, esi
		mov	esi, edx
		shl	edx, 11h
		mov	[edi+30h], ebx
		shr	esi, 0Fh
		or	ecx, esi
		shr	ebp, 0Fh
		mov	esi, eax
		shr	esi, 0Fh
		mov	[edi+34h], ecx
		shl	eax, 11h
		or	edx, esi
		or	eax, ebp
		mov	[edi+38h], edx
		mov	[edi+3Ch], eax
		mov	eax, 3
		jmp	L$013done
; ---------------------------------------------------------------------------
		align 10h

L$0122nd256:				; CODE XREF: L$_Camellia_Ekeygen_begin+28Fj
		mov	esi, [esp+20h+arg_8]
		mov	[esi+30h], eax
		mov	[esi+34h], ebx
		mov	[esi+38h], ecx
		mov	[esi+3Ch], edx
		xor	eax, [esi+20h]
		xor	ebx, [esi+24h]
		xor	ecx, [esi+28h]
		xor	edx, [esi+2Ch]
		mov	esi, [edi+20h]
		mov	[esp+20h+var_20], eax
		mov	[esp+20h+var_1C], ebx
		mov	[esp+20h+var_18], ecx
		mov	[esp+20h+var_14], edx
		xor	eax, esi
		xor	ebx, [edi+24h]
		movzx	esi, ah
		mov	edx, [ebp+esi*8+804h]
		movzx	esi, al
		xor	edx, [ebp+esi*8+4]
		shr	eax, 10h
		movzx	esi, bl
		mov	ecx, [ebp+esi*8+0]
		movzx	esi, ah
		xor	edx, [ebp+esi*8+0]
		movzx	esi, bh
		xor	ecx, [ebp+esi*8+4]
		shr	ebx, 10h
		movzx	eax, al
		xor	edx, [ebp+eax*8+800h]
		movzx	esi, bh
		mov	eax, [esp+20h+var_14]
		xor	ecx, edx
		ror	edx, 8
		xor	ecx, [ebp+esi*8+800h]
		movzx	esi, bl
		mov	ebx, [esp+20h+var_18]
		xor	edx, eax
		xor	ecx, [ebp+esi*8+804h]
		mov	esi, [edi+28h]
		xor	edx, ecx
		mov	[esp+20h+var_14], edx
		xor	ecx, ebx
		mov	[esp+20h+var_18], ecx
		xor	ecx, esi
		xor	edx, [edi+2Ch]
		movzx	esi, ch
		mov	ebx, [ebp+esi*8+804h]
		movzx	esi, cl
		xor	ebx, [ebp+esi*8+4]
		shr	ecx, 10h
		movzx	esi, dl
		mov	eax, [ebp+esi*8+0]
		movzx	esi, ch
		xor	ebx, [ebp+esi*8+0]
		movzx	esi, dh
		xor	eax, [ebp+esi*8+4]
		shr	edx, 10h
		movzx	ecx, cl
		xor	ebx, [ebp+ecx*8+800h]
		movzx	esi, dh
		mov	ecx, [esp+20h+var_1C]
		xor	eax, ebx
		ror	ebx, 8
		xor	eax, [ebp+esi*8+800h]
		movzx	esi, dl
		mov	edx, [esp+20h+var_20]
		xor	ebx, ecx
		xor	eax, [ebp+esi*8+804h]
		mov	esi, [edi+30h]
		xor	ebx, eax
		mov	[esp+20h+var_1C], ebx
		xor	eax, edx
		mov	[esp+20h+var_20], eax
		mov	ecx, [esp+20h+var_18]
		mov	edx, [esp+20h+var_14]
		mov	edi, [esp+20h+arg_8]
		lea	edi, [edi+80h]
		mov	[edi-70h], eax
		mov	[edi-6Ch], ebx
		mov	[edi-68h], ecx
		mov	[edi-64h], edx
		mov	ebp, eax
		shl	eax, 1Eh
		mov	esi, ebx
		shr	esi, 2
		shl	ebx, 1Eh
		or	eax, esi
		mov	esi, ecx
		shl	ecx, 1Eh
		mov	[edi-30h], eax
		shr	esi, 2
		or	ebx, esi
		shr	ebp, 2
		mov	esi, edx
		shr	esi, 2
		mov	[edi-2Ch], ebx
		shl	edx, 1Eh
		or	ecx, esi
		or	edx, ebp
		mov	[edi-28h], ecx
		mov	[edi-24h], edx
		mov	ebp, eax
		shl	eax, 1Eh
		mov	esi, ebx
		shr	esi, 2
		shl	ebx, 1Eh
		or	eax, esi
		mov	esi, ecx
		shl	ecx, 1Eh
		mov	[edi+20h], eax
		shr	esi, 2
		or	ebx, esi
		shr	ebp, 2
		mov	esi, edx
		shr	esi, 2
		mov	[edi+24h], ebx
		shl	edx, 1Eh
		or	ecx, esi
		or	edx, ebp
		mov	[edi+28h], ecx
		mov	[edi+2Ch], edx
		mov	ebp, ebx
		shl	ebx, 13h
		mov	esi, ecx
		shr	esi, 0Dh
		shl	ecx, 13h
		or	ebx, esi
		mov	esi, edx
		shl	edx, 13h
		mov	[edi+80h], ebx
		shr	esi, 0Dh
		or	ecx, esi
		shr	ebp, 0Dh
		mov	esi, eax
		shr	esi, 0Dh
		mov	[edi+84h], ecx
		shl	eax, 13h
		or	edx, esi
		or	eax, ebp
		mov	[edi+88h], edx
		mov	[edi+8Ch], eax
		mov	ebx, [edi-60h]
		mov	ecx, [edi-5Ch]
		mov	edx, [edi-58h]
		mov	eax, [edi-54h]
		mov	ebp, ebx
		shl	ebx, 0Fh
		mov	esi, ecx
		shr	esi, 11h
		shl	ecx, 0Fh
		or	ebx, esi
		mov	esi, edx
		shl	edx, 0Fh
		mov	[edi-60h], ebx
		shr	esi, 11h
		or	ecx, esi
		shr	ebp, 11h
		mov	esi, eax
		shr	esi, 11h
		mov	[edi-5Ch], ecx
		shl	eax, 0Fh
		or	edx, esi
		or	eax, ebp
		mov	[edi-58h], edx
		mov	[edi-54h], eax
		mov	ebp, ebx
		shl	ebx, 0Fh
		mov	esi, ecx
		shr	esi, 11h
		shl	ecx, 0Fh
		or	ebx, esi
		mov	esi, edx
		shl	edx, 0Fh
		mov	[edi-40h], ebx
		shr	esi, 11h
		or	ecx, esi
		shr	ebp, 11h
		mov	esi, eax
		shr	esi, 11h
		mov	[edi-3Ch], ecx
		shl	eax, 0Fh
		or	edx, esi
		or	eax, ebp
		mov	[edi-38h], edx
		mov	[edi-34h], eax
		mov	ebp, ebx
		shl	ebx, 1Eh
		mov	esi, ecx
		shr	esi, 2
		shl	ecx, 1Eh
		or	ebx, esi
		mov	esi, edx
		shl	edx, 1Eh
		mov	[edi+10h], ebx
		shr	esi, 2
		or	ecx, esi
		shr	ebp, 2
		mov	esi, eax
		shr	esi, 2
		mov	[edi+14h], ecx
		shl	eax, 1Eh
		or	edx, esi
		or	eax, ebp
		mov	[edi+18h], edx
		mov	[edi+1Ch], eax
		mov	ebp, ecx
		shl	ecx, 2
		mov	esi, edx
		shr	esi, 1Eh
		shl	edx, 2
		or	ecx, esi
		mov	esi, eax
		shl	eax, 2
		mov	[edi+50h], ecx
		shr	esi, 1Eh
		or	edx, esi
		shr	ebp, 1Eh
		mov	esi, ebx
		shr	esi, 1Eh
		mov	[edi+54h], edx
		shl	ebx, 2
		or	eax, esi
		or	ebx, ebp
		mov	[edi+58h], eax
		mov	[edi+5Ch], ebx
		mov	ecx, [edi-50h]
		mov	edx, [edi-4Ch]
		mov	eax, [edi-48h]
		mov	ebx, [edi-44h]
		mov	ebp, ecx
		shl	ecx, 0Fh
		mov	esi, edx
		shr	esi, 11h
		shl	edx, 0Fh
		or	ecx, esi
		mov	esi, eax
		shl	eax, 0Fh
		mov	[edi-50h], ecx
		shr	esi, 11h
		or	edx, esi
		shr	ebp, 11h
		mov	esi, ebx
		shr	esi, 11h
		mov	[edi-4Ch], edx
		shl	ebx, 0Fh
		or	eax, esi
		or	ebx, ebp
		mov	[edi-48h], eax
		mov	[edi-44h], ebx
		mov	ebp, ecx
		shl	ecx, 1Eh
		mov	esi, edx
		shr	esi, 2
		shl	edx, 1Eh
		or	ecx, esi
		mov	esi, eax
		shl	eax, 1Eh
		mov	[edi-10h], ecx
		shr	esi, 2
		or	edx, esi
		shr	ebp, 2
		mov	esi, ebx
		shr	esi, 2
		mov	[edi-0Ch], edx
		shl	ebx, 1Eh
		or	eax, esi
		or	ebx, ebp
		mov	[edi-8], eax
		mov	[edi-4], ebx
		mov	[edi+40h], edx
		mov	[edi+44h], eax
		mov	[edi+48h], ebx
		mov	[edi+4Ch], ecx
		mov	ebp, edx
		shl	edx, 11h
		mov	esi, eax
		shr	esi, 0Fh
		shl	eax, 11h
		or	edx, esi
		mov	esi, ebx
		shl	ebx, 11h
		mov	[edi+60h], edx
		shr	esi, 0Fh
		or	eax, esi
		shr	ebp, 0Fh
		mov	esi, ecx
		shr	esi, 0Fh
		mov	[edi+64h], eax
		shl	ecx, 11h
		or	ebx, esi
		or	ecx, ebp
		mov	[edi+68h], ebx
		mov	[edi+6Ch], ecx
		mov	edx, [edi-80h]
		mov	eax, [edi-7Ch]
		mov	ebx, [edi-78h]
		mov	ecx, [edi-74h]
		mov	ebp, eax
		shl	eax, 0Dh
		mov	esi, ebx
		shr	esi, 13h
		shl	ebx, 0Dh
		or	eax, esi
		mov	esi, ecx
		shl	ecx, 0Dh
		mov	[edi-20h], eax
		shr	esi, 13h
		or	ebx, esi
		shr	ebp, 13h
		mov	esi, edx
		shr	esi, 13h
		mov	[edi-1Ch], ebx
		shl	edx, 0Dh
		or	ecx, esi
		or	edx, ebp
		mov	[edi-18h], ecx
		mov	[edi-14h], edx
		mov	ebp, eax
		shl	eax, 0Fh
		mov	esi, ebx
		shr	esi, 11h
		shl	ebx, 0Fh
		or	eax, esi
		mov	esi, ecx
		shl	ecx, 0Fh
		mov	[edi], eax
		shr	esi, 11h
		or	ebx, esi
		shr	ebp, 11h
		mov	esi, edx
		shr	esi, 11h
		mov	[edi+4], ebx
		shl	edx, 0Fh
		or	ecx, esi
		or	edx, ebp
		mov	[edi+8], ecx
		mov	[edi+0Ch], edx
		mov	ebp, eax
		shl	eax, 11h
		mov	esi, ebx
		shr	esi, 0Fh
		shl	ebx, 11h
		or	eax, esi
		mov	esi, ecx
		shl	ecx, 11h
		mov	[edi+30h], eax
		shr	esi, 0Fh
		or	ebx, esi
		shr	ebp, 0Fh
		mov	esi, edx
		shr	esi, 0Fh
		mov	[edi+34h], ebx
		shl	edx, 11h
		or	ecx, esi
		or	edx, ebp
		mov	[edi+38h], ecx
		mov	[edi+3Ch], edx
		mov	ebp, ebx
		shl	ebx, 2
		mov	esi, ecx
		shr	esi, 1Eh
		shl	ecx, 2
		or	ebx, esi
		mov	esi, edx
		shl	edx, 2
		mov	[edi+70h], ebx
		shr	esi, 1Eh
		or	ecx, esi
		shr	ebp, 1Eh
		mov	esi, eax
		shr	esi, 1Eh
		mov	[edi+74h], ecx
		shl	eax, 2
		or	edx, esi
		or	eax, ebp
		mov	[edi+78h], edx
		mov	[edi+7Ch], eax
		mov	eax, 4

L$013done:				; CODE XREF: L$_Camellia_Ekeygen_begin+51Fj
		lea	edx, [edi+90h]
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_Camellia_Ekeygen_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_private_Camellia_set_key_begin
L$_private_Camellia_set_key_begin proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ecx, [esp+4+arg_0]
		mov	ebx, [esp+4+arg_4]
		mov	edx, [esp+4+arg_8]
		mov	eax, 0FFFFFFFFh
		test	ecx, ecx
		jz	L$014done
		test	edx, edx
		jz	L$014done
		mov	eax, 0FFFFFFFEh
		cmp	ebx, 100h
		jz	L$015arg_ok
		cmp	ebx, 0C0h ; 'À'
		jz	L$015arg_ok
		cmp	ebx, 80h ; '€'
		jnz	L$014done
		nop

L$015arg_ok:				; CODE XREF: L$_private_Camellia_set_key_begin+2Dj
					; L$_private_Camellia_set_key_begin+39j
		push	edx
		push	ecx
		push	ebx
		call	L$_Camellia_Ekeygen_begin
		add	esp, 0Ch
		mov	[edx], eax
		xor	eax, eax
		nop

L$014done:				; CODE XREF: L$_private_Camellia_set_key_begin+14j
					; L$_private_Camellia_set_key_begin+1Cj ...
		pop	ebx
		retn
L$_private_Camellia_set_key_begin endp

; ---------------------------------------------------------------------------
		align 10h
L$Camellia_SIGMA dd 0A09E667Fh,	3BCC908Bh, 0B67AE858h, 4CAA73B2h, 0C6EF372Fh
		dd 0E94F82BEh, 54FF53A5h, 0F1D36F1Ch, 10E527FAh, 0DE682D1Dh
		dd 0B05688C2h, 0B3E6C1FDh, 4 dup(0)
L$Camellia_SBOX	dd 70707000h, 70700070h, 82828200h, 2C2C002Ch, 2C2C2C00h
		dd 0B3B300B3h, 0ECECEC00h, 0C0C000C0h, 0B3B3B300h, 0E4E400E4h
		dd 27272700h, 57570057h, 0C0C0C000h, 0EAEA00EAh, 0E5E5E500h
		dd 0AEAE00AEh, 0E4E4E400h, 23230023h, 85858500h, 6B6B006Bh
		dd 57575700h, 45450045h, 35353500h, 0A5A500A5h,	0EAEAEA00h
		dd 0EDED00EDh, 0C0C0C00h, 4F4F004Fh, 0AEAEAE00h, 1D1D001Dh
		dd 41414100h, 92920092h, 23232300h, 86860086h, 0EFEFEF00h
		dd 0AFAF00AFh, 6B6B6B00h, 7C7C007Ch, 93939300h,	1F1F001Fh
		dd 45454500h, 3E3E003Eh, 19191900h, 0DCDC00DCh,	0A5A5A500h
		dd 5E5E005Eh, 21212100h, 0B0B000Bh, 0EDEDED00h,	0A6A600A6h
		dd 0E0E0E00h, 39390039h, 4F4F4F00h, 0D5D500D5h,	4E4E4E00h
		dd 5D5D005Dh, 1D1D1D00h, 0D9D900D9h, 65656500h,	5A5A005Ah
		dd 92929200h, 51510051h, 0BDBDBD00h, 6C6C006Ch,	86868600h
		dd 8B8B008Bh, 0B8B8B800h, 9A9A009Ah, 0AFAFAF00h, 0FBFB00FBh
		dd 8F8F8F00h, 0B0B000B0h, 7C7C7C00h, 74740074h,	0EBEBEB00h
		dd 2B2B002Bh, 1F1F1F00h, 0F0F000F0h, 0CECECE00h, 84840084h
		dd 3E3E3E00h, 0DFDF00DFh, 30303000h, 0CBCB00CBh, 0DCDCDC00h
		dd 34340034h, 5F5F5F00h, 76760076h, 5E5E5E00h, 6D6D006Dh
		dd 0C5C5C500h, 0A9A900A9h, 0B0B0B00h, 0D1D100D1h, 1A1A1A00h
		dd 4040004h, 0A6A6A600h, 14140014h, 0E1E1E100h,	3A3A003Ah
		dd 39393900h, 0DEDE00DEh, 0CACACA00h, 11110011h, 0D5D5D500h
		dd 32320032h, 47474700h, 9C9C009Ch, 5D5D5D00h, 53530053h
		dd 3D3D3D00h, 0F2F200F2h, 0D9D9D900h, 0FEFE00FEh, 1010100h
		dd 0CFCF00CFh, 5A5A5A00h, 0C3C300C3h, 0D6D6D600h, 7A7A007Ah
		dd 51515100h, 24240024h, 56565600h, 0E8E800E8h,	6C6C6C00h
		dd 60600060h, 4D4D4D00h, 69690069h, 8B8B8B00h, 0AAAA00AAh
		dd 0D0D0D00h, 0A0A000A0h, 9A9A9A00h, 0A1A100A1h, 66666600h
		dd 62620062h, 0FBFBFB00h, 54540054h, 0CCCCCC00h, 1E1E001Eh
		dd 0B0B0B000h, 0E0E000E0h, 2D2D2D00h, 64640064h, 74747400h
		dd 10100010h, 12121200h, 0
		dd 2B2B2B00h, 0A3A300A3h, 20202000h, 75750075h,	0F0F0F000h
		dd 8A8A008Ah, 0B1B1B100h, 0E6E600E6h, 84848400h, 9090009h
		dd 99999900h, 0DDDD00DDh, 0DFDFDF00h, 87870087h, 4C4C4C00h
		dd 83830083h, 0CBCBCB00h, 0CDCD00CDh, 0C2C2C200h, 90900090h
		dd 34343400h, 73730073h, 7E7E7E00h, 0F6F600F6h,	76767600h
		dd 9D9D009Dh, 5050500h,	0BFBF00BFh, 6D6D6D00h, 52520052h
		dd 0B7B7B700h, 0D8D800D8h, 0A9A9A900h, 0C8C800C8h, 31313100h
		dd 0C6C600C6h, 0D1D1D100h, 81810081h, 17171700h, 6F6F006Fh
		dd 4040400h, 13130013h,	0D7D7D700h, 63630063h, 14141400h
		dd 0E9E900E9h, 58585800h, 0A7A700A7h, 3A3A3A00h, 9F9F009Fh
		dd 61616100h, 0BCBC00BCh, 0DEDEDE00h, 29290029h, 1B1B1B00h
		dd 0F9F900F9h, 11111100h, 2F2F002Fh, 1C1C1C00h,	0B4B400B4h
		dd 32323200h, 78780078h, 0F0F0F00h, 6060006h, 9C9C9C00h
		dd 0E7E700E7h, 16161600h, 71710071h, 53535300h,	0D4D400D4h
		dd 18181800h, 0ABAB00ABh, 0F2F2F200h, 88880088h, 22222200h
		dd 8D8D008Dh, 0FEFEFE00h, 72720072h, 44444400h,	0B9B900B9h
		dd 0CFCFCF00h, 0F8F800F8h, 0B2B2B200h, 0ACAC00ACh, 0C3C3C300h
		dd 36360036h, 0B5B5B500h, 2A2A002Ah, 7A7A7A00h,	3C3C003Ch
		dd 91919100h, 0F1F100F1h, 24242400h, 40400040h,	8080800h
		dd 0D3D300D3h, 0E8E8E800h, 0BBBB00BBh, 0A8A8A800h, 43430043h
		dd 60606000h, 15150015h, 0FCFCFC00h, 0ADAD00ADh, 69696900h
		dd 77770077h, 50505000h, 80800080h, 0AAAAAA00h,	82820082h
		dd 0D0D0D000h, 0ECEC00ECh, 0A0A0A000h, 27270027h, 7D7D7D00h
		dd 0E5E500E5h, 0A1A1A100h, 85850085h, 89898900h, 35350035h
		dd 62626200h, 0C0C000Ch, 97979700h, 41410041h, 54545400h
		dd 0EFEF00EFh, 5B5B5B00h, 93930093h, 1E1E1E00h,	19190019h
		dd 95959500h, 21210021h, 0E0E0E000h, 0E0E000Eh,	0FFFFFF00h
		dd 4E4E004Eh, 64646400h, 65650065h, 0D2D2D200h,	0BDBD00BDh
		dd 10101000h, 0B8B800B8h, 0C4C4C400h, 8F8F008Fh, 0
		dd 0EBEB00EBh, 48484800h, 0CECE00CEh, 0A3A3A300h, 30300030h
		dd 0F7F7F700h, 5F5F005Fh, 75757500h, 0C5C500C5h, 0DBDBDB00h
		dd 1A1A001Ah, 8A8A8A00h, 0E1E100E1h, 3030300h, 0CACA00CAh
		dd 0E6E6E600h, 47470047h, 0DADADA00h, 3D3D003Dh, 9090900h
		dd 1010001h, 3F3F3F00h,	0D6D600D6h, 0DDDDDD00h,	56560056h
		dd 94949400h, 4D4D004Dh, 87878700h, 0D0D000Dh, 5C5C5C00h
		dd 66660066h, 83838300h, 0CCCC00CCh, 2020200h, 2D2D002Dh
		dd 0CDCDCD00h, 12120012h, 4A4A4A00h, 20200020h,	90909000h
		dd 0B1B100B1h, 33333300h, 99990099h, 73737300h,	4C4C004Ch
		dd 67676700h, 0C2C200C2h, 0F6F6F600h, 7E7E007Eh, 0F3F3F300h
		dd 5050005h, 9D9D9D00h,	0B7B700B7h, 7F7F7F00h, 31310031h
		dd 0BFBFBF00h, 17170017h, 0E2E2E200h, 0D7D700D7h, 52525200h
		dd 58580058h, 9B9B9B00h, 61610061h, 0D8D8D800h,	1B1B001Bh
		dd 26262600h, 1C1C001Ch, 0C8C8C800h, 0F0F000Fh,	37373700h
		dd 16160016h, 0C6C6C600h, 18180018h, 3B3B3B00h,	22220022h
		dd 81818100h, 44440044h, 96969600h, 0B2B200B2h,	6F6F6F00h
		dd 0B5B500B5h, 4B4B4B00h, 91910091h, 13131300h,	8080008h
		dd 0BEBEBE00h, 0A8A800A8h, 63636300h, 0FCFC00FCh, 2E2E2E00h
		dd 50500050h, 0E9E9E900h, 0D0D000D0h, 79797900h, 7D7D007Dh
		dd 0A7A7A700h, 89890089h, 8C8C8C00h, 97970097h,	9F9F9F00h
		dd 5B5B005Bh, 6E6E6E00h, 95950095h, 0BCBCBC00h,	0FFFF00FFh
		dd 8E8E8E00h, 0D2D200D2h, 29292900h, 0C4C400C4h, 0F5F5F500h
		dd 48480048h, 0F9F9F900h, 0F7F700F7h, 0B6B6B600h, 0DBDB00DBh
		dd 2F2F2F00h, 3030003h,	0FDFDFD00h, 0DADA00DAh,	0B4B4B400h
		dd 3F3F003Fh, 59595900h, 94940094h, 78787800h, 5C5C005Ch
		dd 98989800h, 2020002h,	6060600h, 4A4A004Ah, 6A6A6A00h
		dd 33330033h, 0E7E7E700h, 67670067h, 46464600h,	0F3F300F3h
		dd 71717100h, 7F7F007Fh, 0BABABA00h, 0E2E200E2h, 0D4D4D400h
		dd 9B9B009Bh, 25252500h, 26260026h, 0ABABAB00h,	37370037h
		dd 42424200h, 3B3B003Bh, 88888800h, 96960096h, 0A2A2A200h
		dd 4B4B004Bh, 8D8D8D00h, 0BEBE00BEh, 0FAFAFA00h, 2E2E002Eh
		dd 72727200h, 79790079h, 7070700h, 8C8C008Ch, 0B9B9B900h
		dd 6E6E006Eh, 55555500h, 8E8E008Eh, 0F8F8F800h,	0F5F500F5h
		dd 0EEEEEE00h, 0B6B600B6h, 0ACACAC00h, 0FDFD00FDh, 0A0A0A00h
		dd 59590059h, 36363600h, 98980098h, 49494900h, 6A6A006Ah
		dd 2A2A2A00h, 46460046h, 68686800h, 0BABA00BAh,	3C3C3C00h
		dd 25250025h, 38383800h, 42420042h, 0F1F1F100h,	0A2A200A2h
		dd 0A4A4A400h, 0FAFA00FAh, 40404000h, 7070007h,	28282800h
		dd 55550055h, 0D3D3D300h, 0EEEE00EEh, 7B7B7B00h, 0A0A000Ah
		dd 0BBBBBB00h, 49490049h, 0C9C9C900h, 68680068h, 43434300h
		dd 38380038h, 0C1C1C100h, 0A4A400A4h, 15151500h, 28280028h
		dd 0E3E3E300h, 7B7B007Bh, 0ADADAD00h, 0C9C900C9h, 0F4F4F400h
		dd 0C1C100C1h, 77777700h, 0E3E300E3h, 0C7C7C700h, 0F4F400F4h
		dd 80808000h, 0C7C700C7h, 9E9E9E00h, 9E9E009Eh,	0E0E0E0h
		dd 38003838h, 50505h, 41004141h, 585858h, 16001616h, 0D9D9D9h
		dd 76007676h, 676767h, 0D900D9D9h, 4E4E4Eh, 93009393h
		dd 818181h, 60006060h, 0CBCBCBh, 0F200F2F2h, 0C9C9C9h
		dd 72007272h, 0B0B0Bh, 0C200C2C2h, 0AEAEAEh, 0AB00ABABh
		dd 6A6A6Ah, 9A009A9Ah, 0D5D5D5h, 75007575h, 181818h, 6000606h
		dd 5D5D5Dh, 57005757h, 828282h,	0A000A0A0h, 464646h, 91009191h
		dd 0DFDFDFh, 0F700F7F7h, 0D6D6D6h, 0B500B5B5h, 272727h
		dd 0C900C9C9h, 8A8A8Ah,	0A200A2A2h, 323232h, 8C008C8Ch
		dd 4B4B4Bh, 0D200D2D2h,	424242h, 90009090h, 0DBDBDBh, 0F600F6F6h
		dd 1C1C1Ch, 7000707h, 9E9E9Eh, 0A700A7A7h, 9C9C9Ch, 27002727h
		dd 3A3A3Ah, 8E008E8Eh, 0CACACAh, 0B200B2B2h, 252525h, 49004949h
		dd 7B7B7Bh, 0DE00DEDEh,	0D0D0Dh, 43004343h, 717171h, 5C005C5Ch
		dd 5F5F5Fh, 0D700D7D7h,	1F1F1Fh, 0C700C7C7h, 0F8F8F8h
		dd 3E003E3Eh, 0D7D7D7h,	0F500F5F5h, 3E3E3Eh, 8F008F8Fh
		dd 9D9D9Dh, 67006767h, 7C7C7Ch,	1F001F1Fh, 606060h, 18001818h
		dd 0B9B9B9h, 6E006E6Eh,	0BEBEBEh, 0AF00AFAFh, 0BCBCBCh
		dd 2F002F2Fh, 8B8B8Bh, 0E200E2E2h, 161616h, 85008585h
		dd 343434h, 0D000D0Dh, 4D4D4Dh,	53005353h, 0C3C3C3h, 0F000F0F0h
		dd 727272h, 9C009C9Ch, 959595h,	65006565h, 0ABABABh, 0EA00EAEAh
		dd 8E8E8Eh, 0A300A3A3h,	0BABABAh, 0AE00AEAEh, 7A7A7Ah
		dd 9E009E9Eh, 0B3B3B3h,	0EC00ECECh, 20202h, 80008080h
		dd 0B4B4B4h, 2D002D2Dh,	0ADADADh, 6B006B6Bh, 0A2A2A2h
		dd 0A800A8A8h, 0ACACACh, 2B002B2Bh, 0D8D8D8h, 36003636h
		dd 9A9A9Ah, 0A600A6A6h,	171717h, 0C500C5C5h, 1A1A1Ah, 86008686h
		dd 353535h, 4D004D4Dh, 0CCCCCCh, 33003333h, 0F7F7F7h, 0FD00FDFDh
		dd 999999h, 66006666h, 616161h,	58005858h, 5A5A5Ah, 96009696h
		dd 0E8E8E8h, 3A003A3Ah,	242424h, 9000909h, 565656h, 95009595h
		dd 404040h, 10001010h, 0E1E1E1h, 78007878h, 636363h, 0D800D8D8h
		dd 90909h, 42004242h, 333333h, 0CC00CCCCh, 0BFBFBFh, 0EF00EFEFh
		dd 989898h, 26002626h, 979797h,	0E500E5E5h, 858585h, 61006161h
		dd 686868h, 1A001A1Ah, 0FCFCFCh, 3F003F3Fh, 0ECECECh, 3B003B3Bh
		dd 0A0A0Ah, 82008282h, 0DADADAh, 0B600B6B6h, 6F6F6Fh, 0DB00DBDBh
		dd 535353h, 0D400D4D4h,	626262h, 98009898h, 0A3A3A3h, 0E800E8E8h
		dd 2E2E2Eh, 8B008B8Bh, 80808h, 2000202h, 0AFAFAFh, 0EB00EBEBh
		dd 282828h, 0A000A0Ah, 0B0B0B0h, 2C002C2Ch, 747474h, 1D001D1Dh
		dd 0C2C2C2h, 0B000B0B0h, 0BDBDBDh, 6F006F6Fh, 363636h
		dd 8D008D8Dh, 222222h, 88008888h, 383838h, 0E000E0Eh, 646464h
		dd 19001919h, 1E1E1Eh, 87008787h, 393939h, 4E004E4Eh, 2C2C2Ch
		dd 0B000B0Bh, 0A6A6A6h,	0A900A9A9h, 303030h, 0C000C0Ch
		dd 0E5E5E5h, 79007979h,	444444h, 11001111h, 0FDFDFDh, 7F007F7Fh
		dd 888888h, 22002222h, 9F9F9Fh,	0E700E7E7h, 656565h, 59005959h
		dd 878787h, 0E100E1E1h,	6B6B6Bh, 0DA00DADAh, 0F4F4F4h
		dd 3D003D3Dh, 232323h, 0C800C8C8h, 484848h, 12001212h
		dd 101010h, 4000404h, 0D1D1D1h,	74007474h, 515151h, 54005454h
		dd 0C0C0C0h, 30003030h,	0F9F9F9h, 7E007E7Eh, 0D2D2D2h
		dd 0B400B4B4h, 0A0A0A0h, 28002828h, 555555h, 55005555h
		dd 0A1A1A1h, 68006868h,	414141h, 50005050h, 0FAFAFAh, 0BE00BEBEh
		dd 434343h, 0D000D0D0h,	131313h, 0C400C4C4h, 0C4C4C4h
		dd 31003131h, 2F2F2Fh, 0CB00CBCBh, 0A8A8A8h, 2A002A2Ah
		dd 0B6B6B6h, 0AD00ADADh, 3C3C3Ch, 0F000F0Fh, 2B2B2Bh, 0CA00CACAh
		dd 0C1C1C1h, 70007070h,	0FFFFFFh, 0FF00FFFFh, 0C8C8C8h
		dd 32003232h, 0A5A5A5h,	69006969h, 202020h, 8000808h, 898989h
		dd 62006262h, 0
		dd 0
		db 3 dup(90h)
		align 4
		dd 24002424h, 474747h, 0D100D1D1h, 0EFEFEFh, 0FB00FBFBh
		dd 0EAEAEAh, 0BA00BABAh, 0B7B7B7h, 0ED00EDEDh, 151515h
		dd 45004545h, 60606h, 81008181h, 0CDCDCDh, 73007373h, 0B5B5B5h
		dd 6D006D6Dh, 121212h, 84008484h, 7E7E7Eh, 9F009F9Fh, 0BBBBBBh
		dd 0EE00EEEEh, 292929h,	4A004A4Ah, 0F0F0Fh, 0C300C3C3h
		dd 0B8B8B8h, 2E002E2Eh,	70707h,	0C100C1C1h, 40404h, 1000101h
		dd 9B9B9Bh, 0E600E6E6h,	949494h, 25002525h, 212121h, 48004848h
		dd 666666h, 99009999h, 0E6E6E6h, 0B900B9B9h, 0CECECEh
		dd 0B300B3B3h, 0EDEDEDh, 7B007B7Bh, 0E7E7E7h, 0F900F9F9h
		dd 3B3B3Bh, 0CE00CECEh,	0FEFEFEh, 0BF00BFBFh, 7F7F7Fh
		dd 0DF00DFDFh, 0C5C5C5h, 71007171h, 0A4A4A4h, 29002929h
		dd 373737h, 0CD00CDCDh,	0B1B1B1h, 6C006C6Ch, 4C4C4Ch, 13001313h
		dd 919191h, 64006464h, 6E6E6Eh,	9B009B9Bh, 8D8D8Dh, 63006363h
		dd 767676h, 9D009D9Dh, 30303h, 0C000C0C0h, 2D2D2Dh, 4B004B4Bh
		dd 0DEDEDEh, 0B700B7B7h, 969696h, 0A500A5A5h, 262626h
		dd 89008989h, 7D7D7Dh, 5F005F5Fh, 0C6C6C6h, 0B100B1B1h
		dd 5C5C5Ch, 17001717h, 0D3D3D3h, 0F400F4F4h, 0F2F2F2h
		dd 0BC00BCBCh, 4F4F4Fh,	0D300D3D3h, 191919h, 46004646h
		dd 3F3F3Fh, 0CF00CFCFh,	0DCDCDCh, 37003737h, 797979h, 5E005E5Eh
		dd 1D1D1Dh, 47004747h, 525252h,	94009494h, 0EBEBEBh, 0FA00FAFAh
		dd 0F3F3F3h, 0FC00FCFCh, 6D6D6Dh, 5B005B5Bh, 5E5E5Eh, 97009797h
		dd 0FBFBFBh, 0FE00FEFEh, 696969h, 5A005A5Ah, 0B2B2B2h
		dd 0AC00ACACh, 0F0F0F0h, 3C003C3Ch, 313131h, 4C004C4Ch
		dd 0C0C0Ch, 3000303h, 0D4D4D4h,	35003535h, 0CFCFCFh, 0F300F3F3h
		dd 8C8C8Ch, 23002323h, 0E2E2E2h, 0B800B8B8h, 757575h, 5D005D5Dh
		dd 0A9A9A9h, 6A006A6Ah,	4A4A4Ah, 92009292h, 575757h, 0D500D5D5h
		dd 848484h, 21002121h, 111111h,	44004444h, 454545h, 51005151h
		dd 1B1B1Bh, 0C600C6C6h,	0F5F5F5h, 7D007D7Dh, 0E4E4E4h
		dd 39003939h, 0E0E0Eh, 83008383h, 737373h, 0DC00DCDCh
		dd 0AAAAAAh, 0AA00AAAAh, 0F1F1F1h, 7C007C7Ch, 0DDDDDDh
		dd 77007777h, 595959h, 56005656h, 141414h, 5000505h, 6C6C6Ch
		dd 1B001B1Bh, 929292h, 0A400A4A4h, 545454h, 15001515h
		dd 0D0D0D0h, 34003434h,	787878h, 1E001E1Eh, 707070h, 1C001C1Ch
		dd 0E3E3E3h, 0F800F8F8h, 494949h, 52005252h, 808080h, 20002020h
		dd 505050h, 14001414h, 0A7A7A7h, 0E900E9E9h, 0F6F6F6h
		dd 0BD00BDBDh, 777777h,	0DD00DDDDh, 939393h, 0E400E4E4h
		dd 868686h, 0A100A1A1h,	838383h, 0E000E0E0h, 2A2A2Ah, 8A008A8Ah
		dd 0C7C7C7h, 0F100F1F1h, 5B5B5Bh, 0D600D6D6h, 0E9E9E9h
		dd 7A007A7Ah, 0EEEEEEh,	0BB00BBBBh, 8F8F8Fh, 0E300E3E3h
		dd 10101h, 40004040h, 3D3D3Dh, 4F004F4Fh

; =============== S U B	R O U T	I N E =======================================


		public L$_Camellia_cbc_encrypt_begin
L$_Camellia_cbc_encrypt_begin proc near

var_54		= byte ptr -54h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ebp
		push	ebx
		push	esi
		push	edi
		mov	ecx, [esp+10h+arg_8]
		cmp	ecx, 0
		jz	L$016enc_out
		pushf
		cld
		mov	eax, [esp+14h+arg_0]
		mov	ebx, [esp+14h+arg_4]
		mov	edx, [esp+14h+arg_C]
		mov	ebp, [esp+14h+arg_10]
		lea	esi, [esp+14h+var_54]
		and	esi, 0FFFFFFC0h
		lea	edi, [edx-7Fh]
		sub	edi, esi
		neg	edi
		and	edi, 3C0h
		sub	esi, edi
		mov	edi, [esp+14h+arg_14]
		xchg	esp, esi
		add	esp, 4
		mov	[esp+10h+arg_0], esi
		mov	[esp+10h+arg_4], eax
		mov	[esp+10h+arg_8], ebx
		mov	[esp+10h+arg_C], ecx
		mov	[esp+10h+arg_10], edx
		mov	[esp+10h+arg_14], ebp
		call	$+5

L$017pic_point:
		pop	ebp
		lea	ebp, [ebp-105Fh]
		mov	esi, 20h ; ' '
		nop

L$018prefetch_sbox:			; CODE XREF: L$_Camellia_cbc_encrypt_begin+7Fj
		mov	eax, [ebp+0]
		mov	ebx, [ebp+20h]
		mov	ecx, [ebp+40h]
		mov	edx, [ebp+60h]
		lea	ebp, [ebp+80h]
		dec	esi
		jnz	L$018prefetch_sbox
		mov	eax, [esp+10h+arg_10]
		sub	ebp, 1000h
		mov	esi, [esp+10h+arg_4]
		mov	edx, [eax+110h]
		cmp	edi, 0
		jz	L$019DECRYPT
		mov	ecx, [esp+10h+arg_C]
		mov	edi, [esp+10h+arg_14]
		shl	edx, 6
		lea	edx, [eax+edx]
		mov	[esp+10h], edx
		test	ecx, 0FFFFFFF0h
		jz	L$020enc_tail
		mov	eax, [edi]
		mov	ebx, [edi+4]
		nop
		nop
		nop

L$021enc_loop:				; CODE XREF: L$_Camellia_cbc_encrypt_begin+124j
					; L$_Camellia_cbc_encrypt_begin+196j
		mov	ecx, [edi+8]
		mov	edx, [edi+0Ch]
		xor	eax, [esi]
		xor	ebx, [esi+4]
		xor	ecx, [esi+8]
		bswap	eax
		xor	edx, [esi+0Ch]
		bswap	ebx
		mov	edi, [esp+10h+arg_10]
		bswap	ecx
		bswap	edx
		call	__x86_Camellia_encrypt
		mov	esi, [esp+10h+arg_4]
		mov	edi, [esp+10h+arg_8]
		bswap	eax
		bswap	ebx
		bswap	ecx
		mov	[edi], eax
		bswap	edx
		mov	[edi+4], ebx
		mov	[edi+8], ecx
		mov	[edi+0Ch], edx
		mov	ecx, [esp+10h+arg_C]
		lea	esi, [esi+10h]
		mov	[esp+10h+arg_4], esi
		lea	edx, [edi+10h]
		mov	[esp+10h+arg_8], edx
		sub	ecx, 10h
		test	ecx, 0FFFFFFF0h
		mov	[esp+10h+arg_C], ecx
		jnz	L$021enc_loop
		test	ecx, 0Fh
		jnz	L$020enc_tail
		mov	esi, [esp+10h+arg_14]
		mov	ecx, [edi+8]
		mov	edx, [edi+0Ch]
		mov	[esi], eax
		mov	[esi+4], ebx
		mov	[esi+8], ecx
		mov	[esi+0Ch], edx
		mov	esp, [esp+10h+arg_0]
		popf

L$016enc_out:				; CODE XREF: L$_Camellia_cbc_encrypt_begin+Bj
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		pushf
		nop
		nop

L$020enc_tail:				; CODE XREF: L$_Camellia_cbc_encrypt_begin+BAj
					; L$_Camellia_cbc_encrypt_begin+130j
		mov	eax, edi
		mov	edi, [esp+10h+arg_8]
		push	eax
		mov	ebx, 10h
		sub	ebx, ecx
		cmp	edi, esi
		jz	L$022enc_in_place
		nop
		nop
		mov	esi, esi
		rep movsb
		jmp	L$023enc_skip_in_place
; ---------------------------------------------------------------------------

L$022enc_in_place:			; CODE XREF: L$_Camellia_cbc_encrypt_begin+168j
		lea	edi, [edi+ecx]

L$023enc_skip_in_place:			; CODE XREF: L$_Camellia_cbc_encrypt_begin+174j
		mov	ecx, ebx
		xor	eax, eax
		mov	esi, esi
		rep stosb
		pop	edi
		mov	esi, [esp+10h+arg_8]
		mov	eax, [edi]
		mov	ebx, [edi+4]
		mov	[esp+10h+arg_C], 10h
		jmp	L$021enc_loop
; ---------------------------------------------------------------------------
		align 10h

L$019DECRYPT:				; CODE XREF: L$_Camellia_cbc_encrypt_begin+9Cj
		shl	edx, 6
		lea	edx, [eax+edx]
		mov	[esp+10h], eax
		mov	[esp+10h+arg_10], edx
		cmp	esi, [esp+10h+arg_8]
		jz	L$029dec_in_place_loop
		mov	edi, [esp+10h+arg_14]
		mov	[esp+10h+arg_18], edi

L$025dec_loop:				; CODE XREF: L$_Camellia_cbc_encrypt_begin+229j
		mov	eax, [esi]
		mov	ebx, [esi+4]
		mov	ecx, [esi+8]
		bswap	eax
		mov	edx, [esi+0Ch]
		bswap	ebx
		mov	edi, [esp+10h+arg_10]
		bswap	ecx
		bswap	edx
		call	__x86_Camellia_decrypt
		mov	edi, [esp+10h+arg_18]
		mov	esi, [esp+10h+arg_C]
		bswap	eax
		bswap	ebx
		bswap	ecx
		xor	eax, [edi]
		bswap	edx
		xor	ebx, [edi+4]
		xor	ecx, [edi+8]
		xor	edx, [edi+0Ch]
		sub	esi, 10h
		jb	L$026dec_partial
		mov	[esp+10h+arg_C], esi
		mov	esi, [esp+10h+arg_4]
		mov	edi, [esp+10h+arg_8]
		mov	[edi], eax
		mov	[edi+4], ebx
		mov	[edi+8], ecx
		mov	[edi+0Ch], edx
		mov	[esp+10h+arg_18], esi
		lea	esi, [esi+10h]
		mov	[esp+10h+arg_4], esi
		lea	edi, [edi+10h]
		mov	[esp+10h+arg_8], edi
		jnz	L$025dec_loop
		mov	edi, [esp+10h+arg_18]

L$027dec_end:				; CODE XREF: L$_Camellia_cbc_encrypt_begin+274j
		mov	esi, [esp+10h+arg_14]
		mov	eax, [edi]
		mov	ebx, [edi+4]
		mov	ecx, [edi+8]
		mov	edx, [edi+0Ch]
		mov	[esi], eax
		mov	[esi+4], ebx
		mov	[esi+8], ecx
		mov	[esi+0Ch], edx
		jmp	L$028dec_out
; ---------------------------------------------------------------------------
		align 4

L$026dec_partial:			; CODE XREF: L$_Camellia_cbc_encrypt_begin+1FAj
		lea	edi, [esp+10h+arg_18]
		mov	[edi], eax
		mov	[edi+4], ebx
		mov	[edi+8], ecx
		mov	[edi+0Ch], edx
		lea	ecx, [esi+10h]
		mov	esi, edi
		mov	edi, [esp+10h+arg_8]
		mov	esi, esi
		rep movsb
		mov	edi, [esp+10h+arg_4]
		jmp	L$027dec_end
; ---------------------------------------------------------------------------
		align 4

L$029dec_in_place_loop:			; CODE XREF: L$_Camellia_cbc_encrypt_begin+1B2j
					; L$_Camellia_cbc_encrypt_begin+30Aj
		lea	edi, [esp+10h+arg_18]
		mov	eax, [esi]
		mov	ebx, [esi+4]
		mov	ecx, [esi+8]
		mov	edx, [esi+0Ch]
		mov	[edi], eax
		mov	[edi+4], ebx
		mov	[edi+8], ecx
		bswap	eax
		mov	[edi+0Ch], edx
		bswap	ebx
		mov	edi, [esp+10h+arg_10]
		bswap	ecx
		bswap	edx
		call	__x86_Camellia_decrypt
		mov	edi, [esp+10h+arg_14]
		mov	esi, [esp+10h+arg_8]
		bswap	eax
		bswap	ebx
		bswap	ecx
		xor	eax, [edi]
		bswap	edx
		xor	ebx, [edi+4]
		xor	ecx, [edi+8]
		xor	edx, [edi+0Ch]
		mov	[esi], eax
		mov	[esi+4], ebx
		mov	[esi+8], ecx
		mov	[esi+0Ch], edx
		lea	esi, [esi+10h]
		mov	[esp+10h+arg_8], esi
		lea	esi, [esp+10h+arg_18]
		mov	eax, [esi]
		mov	ebx, [esi+4]
		mov	ecx, [esi+8]
		mov	edx, [esi+0Ch]
		mov	[edi], eax
		mov	[edi+4], ebx
		mov	[edi+8], ecx
		mov	[edi+0Ch], edx
		mov	esi, [esp+10h+arg_4]
		lea	esi, [esi+10h]
		mov	[esp+10h+arg_4], esi
		mov	ecx, [esp+10h+arg_C]
		sub	ecx, 10h
		jb	L$030dec_in_place_partial
		mov	[esp+10h+arg_C], ecx
		jnz	L$029dec_in_place_loop
		jmp	L$028dec_out
; ---------------------------------------------------------------------------
		align 4

L$030dec_in_place_partial:		; CODE XREF: L$_Camellia_cbc_encrypt_begin+300j
		mov	edi, [esp+10h+arg_8]
		lea	esi, [esp+10h+arg_18]
		lea	edi, [edi+ecx]
		lea	esi, [esi+ecx+10h]
		neg	ecx
		mov	esi, esi
		rep movsb
		nop
		nop
		nop

L$028dec_out:				; CODE XREF: L$_Camellia_cbc_encrypt_begin+24Dj
					; L$_Camellia_cbc_encrypt_begin+310j
		mov	esp, [esp+10h+arg_0]
		popf
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_Camellia_cbc_encrypt_begin endp

; ---------------------------------------------------------------------------
aCamelliaForX86	db 'Camellia for x86 by <appro@openssl.org>',0
_text		ends


		end
