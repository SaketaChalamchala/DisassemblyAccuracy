;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	F3D10150FB5009C102CCE5B3E98866FD
; Input	CRC32 :	3DB2BD45

; File Name   :	C:\compspace\Diff\openssl\obj\ecp_mont.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
; `EC_GFp_mont_method'::`2'::ret
?ret@?1??EC_GFp_mont_method@@9@9 dd 1, 196h ; DATA XREF: _EC_GFp_mont_methodo
		dd offset _ec_GFp_mont_group_init
		dd offset _ec_GFp_mont_group_finish
		dd offset _ec_GFp_mont_group_clear_finish
		dd offset _ec_GFp_mont_group_copy
		dd offset _ec_GFp_mont_group_set_curve
		dd offset _ec_GFp_simple_group_get_curve
		dd offset _ec_GFp_simple_group_get_degree
		dd offset _ec_GFp_simple_group_check_discriminant
		dd offset _ec_GFp_simple_point_init
		dd offset _ec_GFp_simple_point_finish
		dd offset _ec_GFp_simple_point_clear_finish
		dd offset _ec_GFp_simple_point_copy
		dd offset _ec_GFp_simple_point_set_to_infinity
		dd offset _ec_GFp_simple_set_Jprojective_coordinates_GFp
		dd offset _ec_GFp_simple_get_Jprojective_coordinates_GFp
		dd offset _ec_GFp_simple_point_set_affine_coordinates
		dd offset _ec_GFp_simple_point_get_affine_coordinates
		dd 3 dup(0)
		dd offset _ec_GFp_simple_add
		dd offset _ec_GFp_simple_dbl
		dd offset _ec_GFp_simple_invert
		dd offset _ec_GFp_simple_is_at_infinity
		dd offset _ec_GFp_simple_is_on_curve
		dd offset _ec_GFp_simple_cmp
		dd offset _ec_GFp_simple_make_affine
		dd offset _ec_GFp_simple_points_make_affine
		dd 3 dup(0)
		dd offset _ec_GFp_mont_field_mul
		dd offset _ec_GFp_mont_field_sqr
		align 10h
		dd offset _ec_GFp_mont_field_encode
		dd offset _ec_GFp_mont_field_decode
		dd offset _ec_GFp_mont_field_set_to_one
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ec_GFp_mont_group_init
_ec_GFp_mont_group_init	proc near	; DATA XREF: .rdata:00000008o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	esi
		call	_ec_GFp_simple_group_init
		add	esp, 4
		mov	dword ptr [esi+0A0h], 0
		mov	dword ptr [esi+0A4h], 0
		pop	esi
		retn
_ec_GFp_mont_group_init	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ec_GFp_mont_group_set_curve
_ec_GFp_mont_group_set_curve proc near	; DATA XREF: .rdata:00000018o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		xor	ebx, ebx
		mov	eax, [esi+0A0h]
		test	eax, eax
		jz	short loc_E2
		push	eax
		call	_BN_MONT_CTX_free
		add	esp, 4
		mov	[esi+0A0h], ebx

loc_E2:					; CODE XREF: _ec_GFp_mont_group_set_curve+11j
		mov	eax, [esi+0A4h]
		test	eax, eax
		jz	short loc_FB
		push	eax
		call	_BN_free
		add	esp, 4
		mov	[esi+0A4h], ebx

loc_FB:					; CODE XREF: _ec_GFp_mont_group_set_curve+2Aj
		mov	ebp, [esp+0Ch+arg_10]
		test	ebp, ebp
		jnz	short loc_114
		call	_BN_CTX_new
		mov	ebx, eax
		mov	ebp, ebx
		test	ebx, ebx
		jnz	short loc_114
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_114:				; CODE XREF: _ec_GFp_mont_group_set_curve+41j
					; _ec_GFp_mont_group_set_curve+4Ej
		push	edi
		call	_BN_MONT_CTX_new
		mov	edi, eax
		test	edi, edi
		jz	short loc_14D
		push	ebp
		push	[esp+14h+arg_4]
		push	edi
		call	_BN_MONT_CTX_set
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_170
		push	0DEh ; 'Þ'
		push	offset ??_C@_0BH@LFGIMBNP@?4?2crypto?2ec?2ecp_mont?4c?$AA@ ; ".\\crypto\\ec\\ecp_mont.c"
		push	3
		push	0BDh ; '½'
		push	10h
		call	_ERR_put_error
		add	esp, 14h

loc_14D:				; CODE XREF: _ec_GFp_mont_group_set_curve+5Ej
					; _ec_GFp_mont_group_set_curve+BBj ...
		xor	ebp, ebp

$err$19:				; CODE XREF: _ec_GFp_mont_group_set_curve+105j
					; _ec_GFp_mont_group_set_curve+12Cj
		test	ebx, ebx
		jz	short loc_15C
		push	ebx
		call	_BN_CTX_free
		add	esp, 4

loc_15C:				; CODE XREF: _ec_GFp_mont_group_set_curve+91j
		test	edi, edi
		jz	short loc_169
		push	edi
		call	_BN_MONT_CTX_free
		add	esp, 4

loc_169:				; CODE XREF: _ec_GFp_mont_group_set_curve+9Ej
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_170:				; CODE XREF: _ec_GFp_mont_group_set_curve+70j
		call	_BN_new
		mov	[esp+10h+arg_0], eax
		test	eax, eax
		jz	short loc_14D
		push	ebp
		lea	ecx, [edi+4]
		push	edi
		push	ecx
		call	_BN_value_one
		push	eax
		push	[esp+20h+arg_0]
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	short loc_14D
		mov	eax, [esp+10h+arg_0]
		push	ebp
		push	[esp+14h+arg_C]
		mov	[esi+0A0h], edi
		xor	edi, edi
		push	[esp+18h+arg_8]
		mov	[esi+0A4h], eax
		push	[esp+1Ch+arg_4]
		push	esi
		call	_ec_GFp_simple_group_set_curve
		mov	ebp, eax
		add	esp, 14h
		test	ebp, ebp
		jnz	short $err$19
		push	dword ptr [esi+0A0h]
		call	_BN_MONT_CTX_free
		push	dword ptr [esi+0A4h]
		mov	[esi+0A0h], edi
		call	_BN_free
		add	esp, 8
		mov	[esi+0A4h], edi
		jmp	$err$19
_ec_GFp_mont_group_set_curve endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ec_GFp_mont_group_finish
_ec_GFp_mont_group_finish proc near	; DATA XREF: .rdata:0000000Co

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+0A0h]
		test	eax, eax
		jz	short loc_216
		push	eax
		call	_BN_MONT_CTX_free
		add	esp, 4
		mov	dword ptr [esi+0A0h], 0

loc_216:				; CODE XREF: _ec_GFp_mont_group_finish+Dj
		mov	eax, [esi+0A4h]
		test	eax, eax
		jz	short loc_233
		push	eax
		call	_BN_free
		add	esp, 4
		mov	dword ptr [esi+0A4h], 0

loc_233:				; CODE XREF: _ec_GFp_mont_group_finish+2Aj
		push	esi
		call	_ec_GFp_simple_group_finish
		add	esp, 4
		pop	esi
		retn
_ec_GFp_mont_group_finish endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 240h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ec_GFp_mont_group_clear_finish
_ec_GFp_mont_group_clear_finish	proc near ; DATA XREF: .rdata:00000010o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+0A0h]
		test	eax, eax
		jz	short loc_262
		push	eax
		call	_BN_MONT_CTX_free
		add	esp, 4
		mov	dword ptr [esi+0A0h], 0

loc_262:				; CODE XREF: _ec_GFp_mont_group_clear_finish+Dj
		mov	eax, [esi+0A4h]
		test	eax, eax
		jz	short loc_27F
		push	eax
		call	_BN_clear_free
		add	esp, 4
		mov	dword ptr [esi+0A4h], 0

loc_27F:				; CODE XREF: _ec_GFp_mont_group_clear_finish+2Aj
		push	esi
		call	_ec_GFp_simple_group_clear_finish
		add	esp, 4
		pop	esi
		retn
_ec_GFp_mont_group_clear_finish	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 28Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ec_GFp_mont_group_copy
_ec_GFp_mont_group_copy	proc near	; DATA XREF: .rdata:00000014o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	eax, [esi+0A0h]
		test	eax, eax
		jz	short loc_2AF
		push	eax
		call	_BN_MONT_CTX_free
		add	esp, 4
		mov	dword ptr [esi+0A0h], 0

loc_2AF:				; CODE XREF: _ec_GFp_mont_group_copy+Ej
		mov	eax, [esi+0A4h]
		test	eax, eax
		jz	short loc_2CC
		push	eax
		call	_BN_clear_free
		add	esp, 4
		mov	dword ptr [esi+0A4h], 0

loc_2CC:				; CODE XREF: _ec_GFp_mont_group_copy+2Bj
		mov	edi, [esp+8+arg_4]
		push	edi
		push	esi
		call	_ec_GFp_simple_group_copy
		add	esp, 8
		test	eax, eax
		jz	short loc_343
		cmp	dword ptr [edi+0A0h], 0
		jz	short loc_309
		call	_BN_MONT_CTX_new
		mov	[esi+0A0h], eax
		test	eax, eax
		jz	short loc_343
		push	dword ptr [edi+0A0h]
		push	eax
		call	_BN_MONT_CTX_copy
		add	esp, 8
		test	eax, eax
		jz	short $err$14

loc_309:				; CODE XREF: _ec_GFp_mont_group_copy+59j
		mov	eax, [edi+0A4h]
		test	eax, eax
		jz	short loc_348
		push	eax
		call	_BN_dup
		add	esp, 4
		mov	[esi+0A4h], eax
		test	eax, eax
		jnz	short loc_348

$err$14:				; CODE XREF: _ec_GFp_mont_group_copy+7Bj
		mov	eax, [esi+0A0h]
		test	eax, eax
		jz	short loc_343
		push	eax
		call	_BN_MONT_CTX_free
		add	esp, 4
		mov	dword ptr [esi+0A0h], 0

loc_343:				; CODE XREF: _ec_GFp_mont_group_copy+50j
					; _ec_GFp_mont_group_copy+68j ...
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_348:				; CODE XREF: _ec_GFp_mont_group_copy+85j
					; _ec_GFp_mont_group_copy+98j
		pop	edi
		mov	eax, 1
		pop	esi
		retn
_ec_GFp_mont_group_copy	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 350h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ec_GFp_mont_field_mul
_ec_GFp_mont_field_mul proc near	; DATA XREF: .rdata:00000084o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0A0h]
		test	eax, eax
		jnz	short loc_37C
		push	101h
		push	offset ??_C@_0BH@LFGIMBNP@?4?2crypto?2ec?2ecp_mont?4c?$AA@ ; ".\\crypto\\ec\\ecp_mont.c"
		push	6Fh ; 'o'
		push	83h ; ''
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_37C:				; CODE XREF: _ec_GFp_mont_field_mul+Cj
		push	[esp+arg_10]
		push	eax
		push	[esp+8+arg_C]
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		retn
_ec_GFp_mont_field_mul endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 398h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ec_GFp_mont_field_sqr
_ec_GFp_mont_field_sqr proc near	; DATA XREF: .rdata:00000088o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0A0h]
		test	eax, eax
		jnz	short loc_3C4
		push	10Ch
		push	offset ??_C@_0BH@LFGIMBNP@?4?2crypto?2ec?2ecp_mont?4c?$AA@ ; ".\\crypto\\ec\\ecp_mont.c"
		push	6Fh ; 'o'
		push	84h ; ''
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_3C4:				; CODE XREF: _ec_GFp_mont_field_sqr+Cj
		push	[esp+arg_C]
		push	eax
		mov	eax, [esp+8+arg_8]
		push	eax
		push	eax
		push	[esp+10h+arg_4]
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		retn
_ec_GFp_mont_field_sqr endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ec_GFp_mont_field_encode
_ec_GFp_mont_field_encode proc near	; DATA XREF: .rdata:00000090o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0A0h]
		test	eax, eax
		jnz	short loc_408
		push	117h
		push	offset ??_C@_0BH@LFGIMBNP@?4?2crypto?2ec?2ecp_mont?4c?$AA@ ; ".\\crypto\\ec\\ecp_mont.c"
		push	6Fh ; 'o'
		push	86h ; ''
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_408:				; CODE XREF: _ec_GFp_mont_field_encode+Cj
		push	[esp+arg_C]
		push	eax
		add	eax, 4
		push	eax
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		retn
_ec_GFp_mont_field_encode endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 424h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ec_GFp_mont_field_decode
_ec_GFp_mont_field_decode proc near	; DATA XREF: .rdata:00000094o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0A0h]
		test	eax, eax
		jnz	short loc_450
		push	122h
		push	offset ??_C@_0BH@LFGIMBNP@?4?2crypto?2ec?2ecp_mont?4c?$AA@ ; ".\\crypto\\ec\\ecp_mont.c"
		push	6Fh ; 'o'
		push	85h ; ''
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_450:				; CODE XREF: _ec_GFp_mont_field_decode+Cj
		push	[esp+arg_C]
		push	eax
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		call	_BN_from_montgomery
		add	esp, 10h
		retn
_ec_GFp_mont_field_decode endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 468h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ec_GFp_mont_field_set_to_one
_ec_GFp_mont_field_set_to_one proc near	; DATA XREF: .rdata:00000098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0A4h]
		test	eax, eax
		jnz	short loc_494
		push	12Dh
		push	offset ??_C@_0BH@LFGIMBNP@?4?2crypto?2ec?2ecp_mont?4c?$AA@ ; ".\\crypto\\ec\\ecp_mont.c"
		push	6Fh ; 'o'
		push	0D1h ; 'Ñ'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_494:				; CODE XREF: _ec_GFp_mont_field_set_to_one+Cj
		push	eax
		push	[esp+4+arg_4]
		call	_BN_copy
		add	esp, 8
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
_ec_GFp_mont_field_set_to_one endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EC_GFp_mont_method
_EC_GFp_mont_method proc near
		mov	eax, offset ?ret@?1??EC_GFp_mont_method@@9@9 ; `EC_GFp_mont_method'::`2'::ret
		retn
_EC_GFp_mont_method endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4B0h
; COMDAT (pick any)
		public ??_C@_0BH@LFGIMBNP@?4?2crypto?2ec?2ecp_mont?4c?$AA@
; `string'
??_C@_0BH@LFGIMBNP@?4?2crypto?2ec?2ecp_mont?4c?$AA@ db '.\crypto\ec\ecp_mont.c',0
					; DATA XREF: _ec_GFp_mont_group_set_curve+77o
					; _ec_GFp_mont_field_mul+13o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ec_GFp_simple_group_get_curve:near ; DATA XREF: .rdata:0000001Co
		extrn _ec_GFp_simple_group_get_degree:near ; DATA XREF:	.rdata:00000020o
		extrn _ec_GFp_simple_group_check_discriminant:near
					; DATA XREF: .rdata:00000024o
		extrn _ec_GFp_simple_point_init:near ; DATA XREF: .rdata:00000028o
		extrn _ec_GFp_simple_point_finish:near ; DATA XREF: .rdata:0000002Co
		extrn _ec_GFp_simple_point_clear_finish:near ; DATA XREF: .rdata:00000030o
		extrn _ec_GFp_simple_point_copy:near ; DATA XREF: .rdata:00000034o
		extrn _ec_GFp_simple_point_set_to_infinity:near
					; DATA XREF: .rdata:00000038o
		extrn _ec_GFp_simple_set_Jprojective_coordinates_GFp:near
					; DATA XREF: .rdata:0000003Co
		extrn _ec_GFp_simple_get_Jprojective_coordinates_GFp:near
					; DATA XREF: .rdata:00000040o
		extrn _ec_GFp_simple_point_set_affine_coordinates:near
					; DATA XREF: .rdata:00000044o
		extrn _ec_GFp_simple_point_get_affine_coordinates:near
					; DATA XREF: .rdata:00000048o
		extrn _ec_GFp_simple_add:near ;	DATA XREF: .rdata:00000058o
		extrn _ec_GFp_simple_dbl:near ;	DATA XREF: .rdata:0000005Co
		extrn _ec_GFp_simple_invert:near ; DATA	XREF: .rdata:00000060o
		extrn _ec_GFp_simple_is_at_infinity:near ; DATA	XREF: .rdata:00000064o
		extrn _ec_GFp_simple_is_on_curve:near ;	DATA XREF: .rdata:00000068o
		extrn _ec_GFp_simple_cmp:near ;	DATA XREF: .rdata:0000006Co
		extrn _ec_GFp_simple_make_affine:near ;	DATA XREF: .rdata:00000070o
		extrn _ec_GFp_simple_points_make_affine:near ; DATA XREF: .rdata:00000074o
		extrn _ERR_put_error:near ; CODE XREF: _ec_GFp_mont_group_set_curve+85p
					; _ec_GFp_mont_field_mul+21p ...
		extrn _BN_value_one:near ; CODE	XREF: _ec_GFp_mont_group_set_curve+C3p
		extrn _BN_CTX_new:near	; CODE XREF: _ec_GFp_mont_group_set_curve+43p
		extrn _BN_CTX_free:near	; CODE XREF: _ec_GFp_mont_group_set_curve+94p
		extrn _BN_new:near	; CODE XREF: _ec_GFp_mont_group_set_curve:loc_170p
		extrn _BN_clear_free:near ; CODE XREF: _ec_GFp_mont_group_clear_finish+2Dp
					; _ec_GFp_mont_group_copy+2Ep
		extrn _BN_copy:near	; CODE XREF: _ec_GFp_mont_field_set_to_one+31p
		extrn _BN_free:near	; CODE XREF: _ec_GFp_mont_group_set_curve+2Dp
					; _ec_GFp_mont_group_set_curve+11Ep ...
		extrn _BN_dup:near	; CODE XREF: _ec_GFp_mont_group_copy+88p
		extrn _BN_MONT_CTX_new:near ; CODE XREF: _ec_GFp_mont_group_set_curve+55p
					; _ec_GFp_mont_group_copy+5Bp
		extrn _BN_mod_mul_montgomery:near
					; CODE XREF: _ec_GFp_mont_group_set_curve+CDp
					; _ec_GFp_mont_field_mul+3Dp ...
		extrn _BN_from_montgomery:near ; CODE XREF: _ec_GFp_mont_field_decode+39p
		extrn _BN_MONT_CTX_free:near ; CODE XREF: _ec_GFp_mont_group_set_curve+14p
					; _ec_GFp_mont_group_set_curve+A1p ...
		extrn _BN_MONT_CTX_set:near ; CODE XREF: _ec_GFp_mont_group_set_curve+66p
		extrn _BN_MONT_CTX_copy:near ; CODE XREF: _ec_GFp_mont_group_copy+71p
		extrn _ec_GFp_simple_group_init:near ; CODE XREF: _ec_GFp_mont_group_init+6p
		extrn _ec_GFp_simple_group_finish:near
					; CODE XREF: _ec_GFp_mont_group_finish+40p
		extrn _ec_GFp_simple_group_clear_finish:near
					; CODE XREF: _ec_GFp_mont_group_clear_finish+40p
		extrn _ec_GFp_simple_group_copy:near
					; CODE XREF: _ec_GFp_mont_group_copy+46p
		extrn _ec_GFp_simple_group_set_curve:near
					; CODE XREF: _ec_GFp_mont_group_set_curve+F9p


		end
