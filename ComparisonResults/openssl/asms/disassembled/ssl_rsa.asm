;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	75D1A2AEF4B9E4F5F98FF051C61C21A4
; Input	CRC32 :	7BCCB2E1

; File Name   :	C:\compspace\Diff\openssl\obj\ssl_rsa.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CTX_use_PrivateKey
_SSL_CTX_use_PrivateKey	proc near	; CODE XREF: _SSL_CTX_use_PrivateKey_ASN1+4Bp
					; _SSL_CTX_use_PrivateKey_file+DCp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 0
		jnz	short loc_25
		push	261h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	43h ; 'C'
		push	0AEh ; '®'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_25:					; CODE XREF: _SSL_CTX_use_PrivateKey+5j
		push	edi
		mov	edi, [esp+4+arg_0]
		add	edi, 0B0h ; '°'
		push	edi
		call	_ssl_cert_inst
		add	esp, 4
		test	eax, eax
		jnz	short loc_5C
		push	265h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	41h ; 'A'
		push	0AEh ; '®'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_5C:					; CODE XREF: _SSL_CTX_use_PrivateKey+3Bj
		push	[esp+4+arg_4]
		push	dword ptr [edi]
		call	_ssl_set_pkey
		add	esp, 8
		pop	edi
		retn
_SSL_CTX_use_PrivateKey	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CTX_use_PrivateKey_ASN1
_SSL_CTX_use_PrivateKey_ASN1 proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_8]
		push	edi
		push	[esp+4+arg_C]
		mov	[esp+8+arg_8], eax
		lea	eax, [esp+8+arg_8]
		push	eax
		push	0
		push	[esp+10h+arg_0]
		call	_d2i_PrivateKey
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	short loc_B1
		push	29Eh
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	0Dh
		push	0AFh ; '¯'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_B1:					; CODE XREF: _SSL_CTX_use_PrivateKey_ASN1+24j
		push	esi
		push	edi
		push	[esp+0Ch+arg_4]
		call	_SSL_CTX_use_PrivateKey
		push	edi
		mov	esi, eax
		call	_EVP_PKEY_free
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_SSL_CTX_use_PrivateKey_ASN1 endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0CCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CTX_use_PrivateKey_file
_SSL_CTX_use_PrivateKey_file proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	esi
		xor	ebx, ebx
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10F
		push	274h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	7
		push	0B0h ; '°'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, ebx
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10F:				; CODE XREF: _SSL_CTX_use_PrivateKey_file+20j
		push	[esp+0Ch+arg_4]
		push	3
		push	6Ch ; 'l'
		push	esi
		call	_BIO_ctrl
		add	esp, 10h
		test	eax, eax
		jg	short loc_14E
		push	279h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	2
		push	0B0h ; '°'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_14E:				; CODE XREF: _SSL_CTX_use_PrivateKey_file+56j
		mov	eax, [esp+0Ch+arg_8]
		push	ebp
		mov	ebp, [esp+10h+arg_0]
		push	edi
		cmp	eax, 1
		jnz	short loc_178
		push	dword ptr [ebp+70h]
		mov	[esp+18h+var_4], 9
		push	dword ptr [ebp+6Ch]
		push	0
		push	esi
		call	_PEM_read_bio_PrivateKey
		add	esp, 10h
		jmp	short loc_190
; ---------------------------------------------------------------------------

loc_178:				; CODE XREF: _SSL_CTX_use_PrivateKey_file+8Fj
		cmp	eax, 2
		jnz	short loc_1C9
		push	0
		push	esi
		mov	[esp+1Ch+var_4], 0Dh
		call	_d2i_PrivateKey_bio
		add	esp, 8

loc_190:				; CODE XREF: _SSL_CTX_use_PrivateKey_file+AAj
		mov	edi, eax
		test	edi, edi
		jnz	short loc_1A6
		push	289h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	[esp+1Ch+var_4]
		jmp	short loc_1D5
; ---------------------------------------------------------------------------

loc_1A6:				; CODE XREF: _SSL_CTX_use_PrivateKey_file+C8j
		push	edi
		push	ebp
		call	_SSL_CTX_use_PrivateKey
		push	edi
		mov	ebx, eax
		call	_EVP_PKEY_free
		add	esp, 0Ch
		pop	edi
		pop	ebp
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1C9:				; CODE XREF: _SSL_CTX_use_PrivateKey_file+AFj
		push	285h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	7Ch ; '|'

loc_1D5:				; CODE XREF: _SSL_CTX_use_PrivateKey_file+D8j
		push	0B0h ; '°'
		push	14h
		call	_ERR_put_error
		add	esp, 14h

$end$17_2:
		pop	edi
		pop	ebp
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		pop	ecx
		retn
_SSL_CTX_use_PrivateKey_file endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CTX_use_RSAPrivateKey
_SSL_CTX_use_RSAPrivateKey proc	near	; CODE XREF: _SSL_CTX_use_RSAPrivateKey_ASN1+47p
					; _SSL_CTX_use_RSAPrivateKey_file+DCp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jnz	short loc_220
		push	20Ah
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	43h ; 'C'
		push	0B1h ; '±'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_220:				; CODE XREF: _SSL_CTX_use_RSAPrivateKey+7j
		push	ebx
		mov	ebx, [esp+8+arg_0]
		add	ebx, 0B0h ; '°'
		push	ebx
		call	_ssl_cert_inst
		add	esp, 4
		test	eax, eax
		jnz	short loc_258
		push	20Eh
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	41h ; 'A'
		push	0B1h ; '±'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_258:				; CODE XREF: _SSL_CTX_use_RSAPrivateKey+3Ej
		push	edi
		call	_EVP_PKEY_new
		mov	edi, eax
		test	edi, edi
		jnz	short loc_285
		push	212h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	6
		push	0B1h ; '±'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_285:				; CODE XREF: _SSL_CTX_use_RSAPrivateKey+6Aj
		push	esi
		call	_RSA_up_ref
		push	esi
		push	6
		push	edi
		call	_EVP_PKEY_assign
		add	esp, 10h
		test	eax, eax
		jg	short loc_2AA
		push	esi
		call	_RSA_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2AA:				; CODE XREF: _SSL_CTX_use_RSAPrivateKey+A1j
		push	edi
		push	dword ptr [ebx]
		call	_ssl_set_pkey
		push	edi
		mov	esi, eax
		call	_EVP_PKEY_free
		add	esp, 0Ch
		mov	eax, esi
		pop	edi
		pop	ebx
		pop	esi
		retn
_SSL_CTX_use_RSAPrivateKey endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CTX_use_RSAPrivateKey_ASN1
_SSL_CTX_use_RSAPrivateKey_ASN1	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		push	edi
		push	[esp+4+arg_8]
		mov	[esp+8+arg_4], eax
		lea	eax, [esp+8+arg_4]
		push	eax
		push	0
		call	_d2i_RSAPrivateKey
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_305
		push	254h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	0Dh
		push	0B2h ; '²'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_305:				; CODE XREF: _SSL_CTX_use_RSAPrivateKey_ASN1+20j
		push	esi
		push	edi
		push	[esp+0Ch+arg_0]
		call	_SSL_CTX_use_RSAPrivateKey
		push	edi
		mov	esi, eax
		call	_RSA_free
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_SSL_CTX_use_RSAPrivateKey_ASN1	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 320h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CTX_use_RSAPrivateKey_file
_SSL_CTX_use_RSAPrivateKey_file	proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	esi
		xor	ebx, ebx
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_363
		push	22Ah
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	7
		push	0B3h ; '³'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, ebx
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_363:				; CODE XREF: _SSL_CTX_use_RSAPrivateKey_file+20j
		push	[esp+0Ch+arg_4]
		push	3
		push	6Ch ; 'l'
		push	esi
		call	_BIO_ctrl
		add	esp, 10h
		test	eax, eax
		jg	short loc_3A2
		push	22Fh
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	2
		push	0B3h ; '³'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_3A2:				; CODE XREF: _SSL_CTX_use_RSAPrivateKey_file+56j
		mov	eax, [esp+0Ch+arg_8]
		push	ebp
		mov	ebp, [esp+10h+arg_0]
		push	edi
		cmp	eax, 2
		jnz	short loc_3C6
		push	0
		push	esi
		mov	[esp+1Ch+var_4], 0Dh
		call	_d2i_RSAPrivateKey_bio
		add	esp, 8
		jmp	short loc_3E4
; ---------------------------------------------------------------------------

loc_3C6:				; CODE XREF: _SSL_CTX_use_RSAPrivateKey_file+8Fj
		cmp	eax, 1
		jnz	short loc_41D
		push	dword ptr [ebp+70h]
		mov	[esp+18h+var_4], 9
		push	dword ptr [ebp+6Ch]
		push	0
		push	esi
		call	_PEM_read_bio_RSAPrivateKey
		add	esp, 10h

loc_3E4:				; CODE XREF: _SSL_CTX_use_RSAPrivateKey_file+A4j
		mov	edi, eax
		test	edi, edi
		jnz	short loc_3FA
		push	23Fh
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	[esp+1Ch+var_4]
		jmp	short loc_429
; ---------------------------------------------------------------------------

loc_3FA:				; CODE XREF: _SSL_CTX_use_RSAPrivateKey_file+C8j
		push	edi
		push	ebp
		call	_SSL_CTX_use_RSAPrivateKey
		push	edi
		mov	ebx, eax
		call	_RSA_free
		add	esp, 0Ch
		pop	edi
		pop	ebp
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_41D:				; CODE XREF: _SSL_CTX_use_RSAPrivateKey_file+A9j
		push	23Bh
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	7Ch ; '|'

loc_429:				; CODE XREF: _SSL_CTX_use_RSAPrivateKey_file+D8j
		push	0B3h ; '³'
		push	14h
		call	_ERR_put_error
		add	esp, 14h

$end$17_1:
		pop	edi
		pop	ebp
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		pop	ecx
		retn
_SSL_CTX_use_RSAPrivateKey_file	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 44Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CTX_use_certificate
_SSL_CTX_use_certificate proc near	; CODE XREF: _SSL_CTX_use_certificate_ASN1+3Fp
					; _SSL_CTX_use_certificate_chain_file+D2p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 0
		jnz	short loc_471
		push	17Eh
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	43h ; 'C'
		push	0ABh ; '«'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_471:				; CODE XREF: _SSL_CTX_use_certificate+5j
		push	edi
		mov	edi, [esp+4+arg_0]
		add	edi, 0B0h ; '°'
		push	edi
		call	_ssl_cert_inst
		add	esp, 4
		test	eax, eax
		jnz	short loc_4A8
		push	182h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	41h ; 'A'
		push	0ABh ; '«'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_4A8:				; CODE XREF: _SSL_CTX_use_certificate+3Bj
		push	[esp+4+arg_4]
		push	dword ptr [edi]
		call	_ssl_set_cert
		add	esp, 8
		pop	edi
		retn
_SSL_CTX_use_certificate endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CTX_use_certificate_ASN1
_SSL_CTX_use_certificate_ASN1 proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= byte ptr  0Ch

		push	edi
		push	[esp+4+arg_4]
		lea	eax, [esp+8+arg_8]
		push	eax
		push	0
		call	_d2i_X509
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_4F1
		push	1FAh
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	0Dh
		push	0ACh ; '¬'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_4F1:				; CODE XREF: _SSL_CTX_use_certificate_ASN1+18j
		push	esi
		push	edi
		push	[esp+0Ch+arg_0]
		call	_SSL_CTX_use_certificate
		push	edi
		mov	esi, eax
		call	_X509_free
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_SSL_CTX_use_certificate_ASN1 endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 50Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CTX_use_certificate_chain_file
_SSL_CTX_use_certificate_chain_file proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	ebp
		xor	ebx, ebx
		call	_ERR_clear_error
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jnz	short loc_554
		push	2B8h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	7
		push	0DCh ; 'Ü'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, ebx
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_554:				; CODE XREF: _SSL_CTX_use_certificate_chain_file+25j
		push	[esp+0Ch+arg_4]
		push	3
		push	6Ch ; 'l'
		push	ebp
		call	_BIO_ctrl
		add	esp, 10h
		test	eax, eax
		jg	short loc_593
		push	2BDh
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	2
		push	0DCh ; 'Ü'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		push	ebp
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_593:				; CODE XREF: _SSL_CTX_use_certificate_chain_file+5Bj
		push	esi
		mov	esi, [esp+10h+arg_0]
		push	dword ptr [esi+70h]
		push	dword ptr [esi+6Ch]
		push	0
		push	ebp
		call	_PEM_read_bio_X509_AUX
		add	esp, 10h
		mov	[esp+10h+var_4], eax
		test	eax, eax
		jnz	short loc_5DC
		push	2C4h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	9
		push	0DCh ; 'Ü'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		pop	esi
		push	ebp
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_5DC:				; CODE XREF: _SSL_CTX_use_certificate_chain_file+A3j
		push	eax
		push	esi
		call	_SSL_CTX_use_certificate
		add	esp, 8
		mov	ebx, eax
		call	_ERR_peek_error
		test	eax, eax
		jz	short loc_5F8
		xor	ebx, ebx
		jmp	$end$23
; ---------------------------------------------------------------------------

loc_5F8:				; CODE XREF: _SSL_CTX_use_certificate_chain_file+E3j
		test	ebx, ebx
		jz	short $end$23
		push	edi
		push	0
		push	0
		push	58h ; 'X'
		push	esi
		call	_SSL_CTX_ctrl
		push	dword ptr [esi+70h]
		push	dword ptr [esi+6Ch]
		push	0
		push	ebp
		call	_PEM_read_bio_X509
		mov	edi, eax
		add	esp, 20h
		test	edi, edi
		jz	short loc_649

loc_620:				; CODE XREF: _SSL_CTX_use_certificate_chain_file+13Bj
		push	edi
		push	0
		push	59h ; 'Y'
		push	esi
		call	_SSL_CTX_ctrl
		add	esp, 10h
		test	eax, eax
		jz	short loc_66F
		push	dword ptr [esi+70h]
		push	dword ptr [esi+6Ch]
		push	0
		push	ebp
		call	_PEM_read_bio_X509
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	short loc_620

loc_649:				; CODE XREF: _SSL_CTX_use_certificate_chain_file+112j
		call	_ERR_peek_last_error
		mov	ecx, eax
		and	ecx, 0FF000000h
		cmp	ecx, 9000000h
		jnz	short loc_678
		and	eax, 0FFFh
		cmp	eax, 6Ch ; 'l'
		jnz	short loc_678
		call	_ERR_clear_error
		jmp	short loc_67A
; ---------------------------------------------------------------------------

loc_66F:				; CODE XREF: _SSL_CTX_use_certificate_chain_file+124j
		push	edi
		call	_X509_free
		add	esp, 4

loc_678:				; CODE XREF: _SSL_CTX_use_certificate_chain_file+150j
					; _SSL_CTX_use_certificate_chain_file+15Aj
		xor	ebx, ebx

loc_67A:				; CODE XREF: _SSL_CTX_use_certificate_chain_file+161j
		pop	edi

$end$23:				; CODE XREF: _SSL_CTX_use_certificate_chain_file+E7j
					; _SSL_CTX_use_certificate_chain_file+EEj
		push	[esp+10h+var_4]
		call	_X509_free
		add	esp, 4
		pop	esi
		push	ebp
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	ebp
		pop	ebx
		pop	ecx
		retn
_SSL_CTX_use_certificate_chain_file endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 698h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CTX_use_certificate_file
_SSL_CTX_use_certificate_file proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	esi
		xor	ebx, ebx
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_6DB
		push	1CFh
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	7
		push	0ADh ; '­'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, ebx
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_6DB:				; CODE XREF: _SSL_CTX_use_certificate_file+20j
		push	[esp+0Ch+arg_4]
		push	3
		push	6Ch ; 'l'
		push	esi
		call	_BIO_ctrl
		add	esp, 10h
		test	eax, eax
		jg	short loc_71A
		push	1D4h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	2
		push	0ADh ; '­'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_71A:				; CODE XREF: _SSL_CTX_use_certificate_file+56j
		mov	eax, [esp+0Ch+arg_8]
		push	ebp
		mov	ebp, [esp+10h+arg_0]
		push	edi
		cmp	eax, 2
		jnz	short loc_73E
		push	0
		push	esi
		mov	[esp+1Ch+var_4], 0Dh
		call	_d2i_X509_bio
		add	esp, 8
		jmp	short loc_75C
; ---------------------------------------------------------------------------

loc_73E:				; CODE XREF: _SSL_CTX_use_certificate_file+8Fj
		cmp	eax, 1
		jnz	short loc_795
		push	dword ptr [ebp+70h]
		mov	[esp+18h+var_4], 9
		push	dword ptr [ebp+6Ch]
		push	0
		push	esi
		call	_PEM_read_bio_X509
		add	esp, 10h

loc_75C:				; CODE XREF: _SSL_CTX_use_certificate_file+A4j
		mov	edi, eax
		test	edi, edi
		jnz	short loc_772
		push	1E4h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	[esp+1Ch+var_4]
		jmp	short loc_7A1
; ---------------------------------------------------------------------------

loc_772:				; CODE XREF: _SSL_CTX_use_certificate_file+C8j
		push	edi
		push	ebp
		call	_SSL_CTX_use_certificate
		mov	ebx, eax

$end$18_0:
		push	edi
		call	_X509_free
		add	esp, 0Ch
		pop	edi
		pop	ebp
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_795:				; CODE XREF: _SSL_CTX_use_certificate_file+A9j
		push	1DFh
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	7Ch ; '|'

loc_7A1:				; CODE XREF: _SSL_CTX_use_certificate_file+D8j
		push	0ADh ; '­'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		pop	edi
		pop	ebp
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		pop	ecx
		retn
_SSL_CTX_use_certificate_file endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl SSL_CTX_use_serverinfo(int, void *Src, size_t Size)
		public _SSL_CTX_use_serverinfo
_SSL_CTX_use_serverinfo	proc near	; CODE XREF: _SSL_CTX_use_serverinfo_file+1E6p

arg_0		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	esi
		push	edi
		test	ebp, ebp
		jz	loc_8DA
		mov	edi, [esp+0Ch+Src]
		test	edi, edi
		jz	loc_8DA
		mov	esi, [esp+0Ch+Size]
		test	esi, esi
		jz	loc_8DA
		push	0
		push	esi
		push	edi
		call	_serverinfo_process_buffer
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_81F
		push	398h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	184h

loc_80A:				; CODE XREF: _SSL_CTX_use_serverinfo+122j
		push	150h
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_81F:				; CODE XREF: _SSL_CTX_use_serverinfo+35j
		push	ebx
		lea	ebx, [ebp+0B0h]
		push	ebx
		call	_ssl_cert_inst
		add	esp, 4
		test	eax, eax
		jnz	short loc_841
		push	39Ch
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	41h ; 'A'
		jmp	short loc_8BA
; ---------------------------------------------------------------------------

loc_841:				; CODE XREF: _SSL_CTX_use_serverinfo+6Dj
		mov	eax, [ebx]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_857
		push	3A0h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	44h ; 'D'
		jmp	short loc_8BA
; ---------------------------------------------------------------------------

loc_857:				; CODE XREF: _SSL_CTX_use_serverinfo+83j
		push	3A4h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	esi
		push	dword ptr [eax+10h]
		call	_CRYPTO_realloc
		mov	ecx, [ebx]
		add	esp, 10h
		mov	ecx, [ecx]
		mov	[ecx+10h], eax
		mov	eax, [ebx]
		mov	eax, [eax]
		mov	eax, [eax+10h]
		test	eax, eax
		jnz	short loc_88D
		push	3A6h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	41h ; 'A'
		jmp	short loc_8BA
; ---------------------------------------------------------------------------

loc_88D:				; CODE XREF: _SSL_CTX_use_serverinfo+B9j
		push	esi		; Size
		push	edi		; Src
		push	eax		; Dst
		call	_memcpy
		mov	eax, [ebx]
		push	ebp
		push	esi
		push	edi
		mov	eax, [eax]
		mov	[eax+14h], esi
		call	_serverinfo_process_buffer
		add	esp, 18h
		test	eax, eax
		jnz	short loc_8D0
		push	3B1h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	184h

loc_8BA:				; CODE XREF: _SSL_CTX_use_serverinfo+7Bj
					; _SSL_CTX_use_serverinfo+91j ...
		push	150h
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_8D0:				; CODE XREF: _SSL_CTX_use_serverinfo+E5j
		pop	ebx
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_8DA:				; CODE XREF: _SSL_CTX_use_serverinfo+9j
					; _SSL_CTX_use_serverinfo+15j ...
		push	394h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	43h ; 'C'
		jmp	loc_80A
_SSL_CTX_use_serverinfo	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CTX_use_serverinfo_file
_SSL_CTX_use_serverinfo_file proc near

Src		= dword	ptr -30h
Str1		= dword	ptr -2Ch
Size		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
Str2		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 30h ; '0'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+30h+var_4], eax
		movups	xmm0, ds:??_C@_0BA@CMCLEKJO@SERVERINFO?5FOR?5?$AA@ ; `string'
		mov	eax, [esp+30h+arg_0]
		push	ebx
		push	ebp
		push	esi
		xor	esi, esi
		mov	[esp+3Ch+var_18], eax
		xor	ebp, ebp
		mov	[esp+3Ch+Src], esi
		mov	[esp+3Ch+Size],	esi
		mov	[esp+3Ch+Str1],	esi
		mov	[esp+3Ch+var_24], esi
		mov	[esp+3Ch+var_20], esi
		push	edi
		mov	edi, [esp+40h+arg_4]
		movups	xmmword	ptr [esp+40h+Str2], xmm0
		test	eax, eax
		jz	loc_B30
		test	edi, edi
		jz	loc_B30
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		add	esp, 4
		mov	[esp+40h+var_20], eax
		test	eax, eax
		jnz	short loc_96C
		push	3CDh
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	7
		jmp	loc_B3C
; ---------------------------------------------------------------------------

loc_96C:				; CODE XREF: _SSL_CTX_use_serverinfo_file+6Dj
		push	edi
		push	3
		push	6Ch ; 'l'
		push	eax
		call	_BIO_ctrl
		add	esp, 10h
		test	eax, eax
		jg	short loc_98F
		push	3D1h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	2
		jmp	loc_B3C
; ---------------------------------------------------------------------------

loc_98F:				; CODE XREF: _SSL_CTX_use_serverinfo_file+90j
		lea	eax, [esp+40h+Size]
		mov	[esp+40h+var_1C], esi
		push	eax
		lea	eax, [esp+44h+Src]
		push	eax
		lea	eax, [esp+48h+var_24]
		push	eax
		lea	eax, [esp+4Ch+Str1]
		push	eax
		push	[esp+50h+var_20]
		call	_PEM_read_bio
		add	esp, 14h
		test	eax, eax
		jz	loc_B1F
		nop

loc_9BC:				; CODE XREF: _SSL_CTX_use_serverinfo_file+1D6j
		mov	edi, [esp+40h+Str1]
		mov	edx, edi
		lea	ecx, [edx+1]
		nop	dword ptr [eax+00000000h]

loc_9CC:				; CODE XREF: _SSL_CTX_use_serverinfo_file+E5j
		mov	al, [edx]
		inc	edx
		test	al, al
		jnz	short loc_9CC
		sub	edx, ecx
		lea	ecx, [esp+40h+Str2]
		lea	ebx, [ecx+1]

loc_9DC:				; CODE XREF: _SSL_CTX_use_serverinfo_file+F5j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_9DC
		sub	ecx, ebx
		cmp	edx, ecx
		jb	loc_B0E
		push	ecx		; MaxCount
		lea	eax, [esp+44h+Str2]
		push	eax		; Str2
		push	edi		; Str1
		call	dword ptr ds:__imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_AFD
		mov	edx, [esp+40h+Size]
		cmp	edx, 4
		jl	loc_AEC
		mov	eax, [esp+40h+Src]
		movzx	ecx, byte ptr [eax+2]
		movzx	eax, byte ptr [eax+3]
		shl	ecx, 8
		add	ecx, eax
		lea	eax, [edx-4]
		cmp	ecx, eax
		jnz	loc_AEC
		push	3F7h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		lea	eax, [edx+ebp]
		push	eax
		push	esi
		call	_CRYPTO_realloc
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	loc_ADE
		push	[esp+40h+Size]	; Size
		lea	ecx, [esi+ebp]
		push	[esp+44h+Src]	; Src
		push	ecx		; Dst
		call	_memcpy
		push	[esp+4Ch+Str1]
		add	ebp, [esp+50h+Size]
		call	_CRYPTO_free
		push	[esp+50h+var_24]
		mov	[esp+54h+Str1],	0
		call	_CRYPTO_free
		push	[esp+54h+Src]
		mov	[esp+58h+var_24], 0
		call	_CRYPTO_free
		mov	ebx, [esp+58h+var_1C]
		lea	eax, [esp+58h+Size]
		push	eax
		lea	eax, [esp+5Ch+Src]
		mov	[esp+5Ch+Src], 0
		push	eax
		lea	eax, [esp+60h+var_24]
		inc	ebx
		push	eax
		lea	eax, [esp+64h+Str1]
		mov	[esp+64h+var_1C], ebx
		push	eax
		push	[esp+68h+var_20]
		call	_PEM_read_bio
		add	esp, 2Ch
		test	eax, eax
		jnz	loc_9BC
		test	ebx, ebx
		jz	short loc_B1F
		push	ebp		; Size
		push	esi		; Src
		push	[esp+48h+var_18] ; int
		call	_SSL_CTX_use_serverinfo
		add	esp, 0Ch
		mov	ebx, eax
		jmp	short $end$34
; ---------------------------------------------------------------------------

loc_ADE:				; CODE XREF: _SSL_CTX_use_serverinfo_file+15Dj
		push	3F9h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	41h ; 'A'
		jmp	short loc_B3C
; ---------------------------------------------------------------------------

loc_AEC:				; CODE XREF: _SSL_CTX_use_serverinfo_file+120j
					; _SSL_CTX_use_serverinfo_file+13Cj
		push	3F2h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	186h
		jmp	short loc_B3C
; ---------------------------------------------------------------------------

loc_AFD:				; CODE XREF: _SSL_CTX_use_serverinfo_file+113j
		push	3EAh
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	187h
		jmp	short loc_B3C
; ---------------------------------------------------------------------------

loc_B0E:				; CODE XREF: _SSL_CTX_use_serverinfo_file+FBj
		push	3E5h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	188h
		jmp	short loc_B3C
; ---------------------------------------------------------------------------

loc_B1F:				; CODE XREF: _SSL_CTX_use_serverinfo_file+C9j
					; _SSL_CTX_use_serverinfo_file+1DEj
		push	3DDh
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	185h
		jmp	short loc_B3C
; ---------------------------------------------------------------------------

loc_B30:				; CODE XREF: _SSL_CTX_use_serverinfo_file+4Bj
					; _SSL_CTX_use_serverinfo_file+53j
		push	3C7h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	43h ; 'C'

loc_B3C:				; CODE XREF: _SSL_CTX_use_serverinfo_file+7Bj
					; _SSL_CTX_use_serverinfo_file+9Ej ...
		push	151h
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	ebx, ebx

$end$34:				; CODE XREF: _SSL_CTX_use_serverinfo_file+1F0j
		push	[esp+40h+Str1]
		call	_CRYPTO_free
		push	[esp+44h+var_24]
		call	_CRYPTO_free
		push	[esp+48h+Src]
		call	_CRYPTO_free
		push	esi
		call	_CRYPTO_free
		mov	eax, [esp+50h+var_20]
		add	esp, 10h
		test	eax, eax
		jz	short loc_B82
		push	eax
		call	_BIO_free
		add	esp, 4

loc_B82:				; CODE XREF: _SSL_CTX_use_serverinfo_file+28Bj
		mov	ecx, [esp+40h+var_4]
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 30h
		retn
_SSL_CTX_use_serverinfo_file endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B98h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_use_PrivateKey
_SSL_use_PrivateKey proc near		; CODE XREF: _SSL_use_PrivateKey_ASN1+4Bp
					; _SSL_use_PrivateKey_file+CCp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 0
		jnz	short loc_BBD
		push	133h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	43h ; 'C'
		push	0C9h ; 'É'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_BBD:				; CODE XREF: _SSL_use_PrivateKey+5j
		push	edi
		mov	edi, [esp+4+arg_0]
		add	edi, 98h ; ''
		push	edi
		call	_ssl_cert_inst
		add	esp, 4
		test	eax, eax
		jnz	short loc_BF4
		push	137h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	41h ; 'A'
		push	0C9h ; 'É'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_BF4:				; CODE XREF: _SSL_use_PrivateKey+3Bj
		push	[esp+4+arg_4]
		push	dword ptr [edi]
		call	_ssl_set_pkey
		add	esp, 8
		pop	edi
		retn
_SSL_use_PrivateKey endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C04h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_use_PrivateKey_ASN1
_SSL_use_PrivateKey_ASN1 proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_8]
		push	edi
		push	[esp+4+arg_C]
		mov	[esp+8+arg_8], eax
		lea	eax, [esp+8+arg_8]
		push	eax
		push	0
		push	[esp+10h+arg_0]
		call	_d2i_PrivateKey
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	short loc_C49
		push	172h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	0Dh
		push	0CAh ; 'Ê'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_C49:				; CODE XREF: _SSL_use_PrivateKey_ASN1+24j
		push	esi
		push	edi
		push	[esp+0Ch+arg_4]
		call	_SSL_use_PrivateKey
		push	edi
		mov	esi, eax
		call	_EVP_PKEY_free
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_SSL_use_PrivateKey_ASN1 endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C64h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_use_PrivateKey_file
_SSL_use_PrivateKey_file proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		xor	ebx, ebx
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_C9C
		push	147h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	7
		push	0CBh ; 'Ë'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, ebx
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_C9C:				; CODE XREF: _SSL_use_PrivateKey_file+16j
		push	[esp+8+arg_4]
		push	3
		push	6Ch ; 'l'
		push	esi
		call	_BIO_ctrl
		add	esp, 10h
		test	eax, eax
		jg	short loc_CDA
		push	14Ch
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	2
		push	0CBh ; 'Ë'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_CDA:				; CODE XREF: _SSL_use_PrivateKey_file+4Bj
		mov	eax, [esp+8+arg_8]
		push	ebp
		push	edi
		cmp	eax, 1
		jnz	short loc_D05
		lea	ebp, [eax+8]
		mov	eax, [esp+10h+arg_0]
		mov	eax, [eax+0E4h]
		push	dword ptr [eax+70h]
		push	dword ptr [eax+6Ch]
		push	0
		push	esi
		call	_PEM_read_bio_PrivateKey
		add	esp, 10h
		jmp	short loc_D18
; ---------------------------------------------------------------------------

loc_D05:				; CODE XREF: _SSL_use_PrivateKey_file+7Fj
		cmp	eax, 2
		jnz	short loc_D50
		push	0
		push	esi
		lea	ebp, [eax+0Bh]
		call	_d2i_PrivateKey_bio
		add	esp, 8

loc_D18:				; CODE XREF: _SSL_use_PrivateKey_file+9Fj
		mov	edi, eax
		test	edi, edi
		jnz	short loc_D2B
		push	15Dh
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	ebp
		jmp	short loc_D5C
; ---------------------------------------------------------------------------

loc_D2B:				; CODE XREF: _SSL_use_PrivateKey_file+B8j
		push	edi
		push	[esp+14h+arg_0]
		call	_SSL_use_PrivateKey
		push	edi
		mov	ebx, eax
		call	_EVP_PKEY_free
		add	esp, 0Ch
		pop	edi
		pop	ebp
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_D50:				; CODE XREF: _SSL_use_PrivateKey_file+A4j
		push	159h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	7Ch ; '|'

loc_D5C:				; CODE XREF: _SSL_use_PrivateKey_file+C5j
		push	0CBh ; 'Ë'
		push	14h
		call	_ERR_put_error
		add	esp, 14h

$end$17_0:
		pop	edi
		pop	ebp
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		retn
_SSL_use_PrivateKey_file endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D7Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_use_RSAPrivateKey
_SSL_use_RSAPrivateKey proc near	; CODE XREF: _SSL_use_RSAPrivateKey_ASN1+47p
					; _SSL_use_RSAPrivateKey_file+CCp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jnz	short loc_DA4
		push	96h ; ''
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	43h ; 'C'
		push	0CCh ; 'Ì'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_DA4:				; CODE XREF: _SSL_use_RSAPrivateKey+7j
		push	ebx
		mov	ebx, [esp+8+arg_0]
		add	ebx, 98h ; ''
		push	ebx
		call	_ssl_cert_inst
		add	esp, 4
		test	eax, eax
		jnz	short loc_DDC
		push	9Ah ; ''
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	41h ; 'A'
		push	0CCh ; 'Ì'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_DDC:				; CODE XREF: _SSL_use_RSAPrivateKey+3Ej
		push	edi
		call	_EVP_PKEY_new
		mov	edi, eax
		test	edi, edi
		jnz	short loc_E09
		push	9Eh ; ''
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	6
		push	0CCh ; 'Ì'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_E09:				; CODE XREF: _SSL_use_RSAPrivateKey+6Aj
		push	esi
		call	_RSA_up_ref
		push	esi
		push	6
		push	edi
		call	_EVP_PKEY_assign
		add	esp, 10h
		test	eax, eax
		jg	short loc_E2E
		push	esi
		call	_RSA_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_E2E:				; CODE XREF: _SSL_use_RSAPrivateKey+A1j
		push	edi
		push	dword ptr [ebx]
		call	_ssl_set_pkey
		push	edi
		mov	esi, eax
		call	_EVP_PKEY_free
		add	esp, 0Ch
		mov	eax, esi
		pop	edi
		pop	ebx
		pop	esi
		retn
_SSL_use_RSAPrivateKey endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E48h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_use_RSAPrivateKey_ASN1
_SSL_use_RSAPrivateKey_ASN1 proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		push	edi
		push	[esp+4+arg_8]
		mov	[esp+8+arg_4], eax
		lea	eax, [esp+8+arg_4]
		push	eax
		push	0
		call	_d2i_RSAPrivateKey
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_E89
		push	124h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	0Dh
		push	0CDh ; 'Í'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_E89:				; CODE XREF: _SSL_use_RSAPrivateKey_ASN1+20j
		push	esi
		push	edi
		push	[esp+0Ch+arg_0]
		call	_SSL_use_RSAPrivateKey
		push	edi
		mov	esi, eax
		call	_RSA_free
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_SSL_use_RSAPrivateKey_ASN1 endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0EA4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_use_RSAPrivateKey_file
_SSL_use_RSAPrivateKey_file proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		xor	ebx, ebx
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_EDC
		push	0FAh ; 'ú'
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	7
		push	0CEh ; 'Î'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, ebx
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_EDC:				; CODE XREF: _SSL_use_RSAPrivateKey_file+16j
		push	[esp+8+arg_4]
		push	3
		push	6Ch ; 'l'
		push	esi
		call	_BIO_ctrl
		add	esp, 10h
		test	eax, eax
		jg	short loc_F1A
		push	0FFh
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	2
		push	0CEh ; 'Î'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_F1A:				; CODE XREF: _SSL_use_RSAPrivateKey_file+4Bj
		mov	eax, [esp+8+arg_8]
		push	ebp
		push	edi
		cmp	eax, 2
		jnz	short loc_F35
		push	0
		push	esi
		lea	ebp, [eax+0Bh]
		call	_d2i_RSAPrivateKey_bio
		add	esp, 8
		jmp	short loc_F58
; ---------------------------------------------------------------------------

loc_F35:				; CODE XREF: _SSL_use_RSAPrivateKey_file+7Fj
		cmp	eax, 1
		jnz	short loc_F90
		lea	ebp, [eax+8]
		mov	eax, [esp+10h+arg_0]
		mov	eax, [eax+0E4h]
		push	dword ptr [eax+70h]
		push	dword ptr [eax+6Ch]
		push	0
		push	esi
		call	_PEM_read_bio_RSAPrivateKey
		add	esp, 10h

loc_F58:				; CODE XREF: _SSL_use_RSAPrivateKey_file+8Fj
		mov	edi, eax
		test	edi, edi
		jnz	short loc_F6B
		push	110h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	ebp
		jmp	short loc_F9C
; ---------------------------------------------------------------------------

loc_F6B:				; CODE XREF: _SSL_use_RSAPrivateKey_file+B8j
		push	edi
		push	[esp+14h+arg_0]
		call	_SSL_use_RSAPrivateKey
		push	edi
		mov	ebx, eax
		call	_RSA_free
		add	esp, 0Ch
		pop	edi
		pop	ebp
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_F90:				; CODE XREF: _SSL_use_RSAPrivateKey_file+94j
		push	10Ch
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	7Ch ; '|'

loc_F9C:				; CODE XREF: _SSL_use_RSAPrivateKey_file+C5j
		push	0CEh ; 'Î'
		push	14h
		call	_ERR_put_error
		add	esp, 14h

$end$17:
		pop	edi
		pop	ebp
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		retn
_SSL_use_RSAPrivateKey_file endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0FBCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_use_certificate
_SSL_use_certificate proc near		; CODE XREF: _SSL_use_certificate_ASN1+3Fp
					; _SSL_use_certificate_file+C3p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 0
		jnz	short loc_FDE
		push	48h ; 'H'
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	43h ; 'C'
		push	0C6h ; 'Æ'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_FDE:				; CODE XREF: _SSL_use_certificate+5j
		push	edi
		mov	edi, [esp+4+arg_0]
		add	edi, 98h ; ''
		push	edi
		call	_ssl_cert_inst
		add	esp, 4
		test	eax, eax
		jnz	short loc_1012
		push	4Ch ; 'L'
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	41h ; 'A'
		push	0C6h ; 'Æ'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1012:				; CODE XREF: _SSL_use_certificate+38j
		push	[esp+4+arg_4]
		push	dword ptr [edi]
		call	_ssl_set_cert
		add	esp, 8
		pop	edi
		retn
_SSL_use_certificate endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1024h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_use_certificate_ASN1
_SSL_use_certificate_ASN1 proc near

arg_0		= dword	ptr  4
arg_4		= byte ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	[esp+4+arg_8]
		lea	eax, [esp+8+arg_4]
		push	eax
		push	0
		call	_d2i_X509
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_105D
		push	86h ; ''
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	0Dh
		push	0C7h ; 'Ç'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_105D:				; CODE XREF: _SSL_use_certificate_ASN1+18j
		push	esi
		push	edi
		push	[esp+0Ch+arg_0]
		call	_SSL_use_certificate
		push	edi
		mov	esi, eax
		call	_X509_free
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_SSL_use_certificate_ASN1 endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1078h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_use_certificate_file
_SSL_use_certificate_file proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		xor	ebx, ebx
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10AD
		push	5Ch ; '\'
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	7
		push	0C8h ; 'È'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, ebx
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10AD:				; CODE XREF: _SSL_use_certificate_file+16j
		push	[esp+8+arg_4]
		push	3
		push	6Ch ; 'l'
		push	esi
		call	_BIO_ctrl
		add	esp, 10h
		test	eax, eax
		jg	short loc_10E8
		push	61h ; 'a'
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	2
		push	0C8h ; 'È'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10E8:				; CODE XREF: _SSL_use_certificate_file+48j
		mov	eax, [esp+8+arg_8]
		push	ebp
		push	edi
		cmp	eax, 2
		jnz	short loc_1103
		push	0
		push	esi
		lea	ebp, [eax+0Bh]
		call	_d2i_X509_bio
		add	esp, 8
		jmp	short loc_1126
; ---------------------------------------------------------------------------

loc_1103:				; CODE XREF: _SSL_use_certificate_file+79j
		cmp	eax, 1
		jnz	short loc_115B
		lea	ebp, [eax+8]
		mov	eax, [esp+10h+arg_0]
		mov	eax, [eax+0E4h]
		push	dword ptr [eax+70h]
		push	dword ptr [eax+6Ch]
		push	0
		push	esi
		call	_PEM_read_bio_X509
		add	esp, 10h

loc_1126:				; CODE XREF: _SSL_use_certificate_file+89j
		mov	edi, eax
		test	edi, edi
		jnz	short loc_1136
		push	71h ; 'q'
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	ebp
		jmp	short loc_1164
; ---------------------------------------------------------------------------

loc_1136:				; CODE XREF: _SSL_use_certificate_file+B2j
		push	edi
		push	[esp+14h+arg_0]
		call	_SSL_use_certificate
		mov	ebx, eax

$end$18:
		push	edi
		call	_X509_free
		add	esp, 0Ch
		pop	edi
		pop	ebp
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_115B:				; CODE XREF: _SSL_use_certificate_file+8Ej
		push	6Ch ; 'l'
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	7Ch ; '|'

loc_1164:				; CODE XREF: _SSL_use_certificate_file+BCj
		push	0C8h ; 'È'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		pop	edi
		pop	ebp
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		retn
_SSL_use_certificate_file endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1184h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_serverinfo_find_extension proc	near	; CODE XREF: _serverinfo_srv_add_cb+47p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_10]
		push	ebp
		mov	ebp, [esp+4+arg_C]
		mov	dword ptr [ebp+0], 0
		mov	dword ptr [eax], 0
		mov	eax, [esp+4+arg_0]
		test	eax, eax
		jz	short loc_1210
		mov	edx, [esp+4+arg_4]
		test	edx, edx
		jz	short loc_1210
		push	ebx
		mov	ebx, [esp+8+arg_8]
		push	esi
		push	edi
		nop	dword ptr [eax]

loc_11B4:				; CODE XREF: _serverinfo_find_extension+68j
		cmp	edx, 2
		jb	short loc_1208
		movzx	edi, byte ptr [eax]
		sub	edx, 2
		movzx	ecx, byte ptr [eax+1]
		shl	edi, 8
		add	edi, ecx
		cmp	edx, 2
		jb	short loc_1208
		movzx	esi, byte ptr [eax+2]
		sub	edx, 2
		movzx	ecx, byte ptr [eax+3]
		add	eax, 4
		shl	esi, 8
		add	esi, ecx
		cmp	esi, edx
		ja	short loc_1208
		cmp	edi, ebx
		jz	short loc_11F5
		add	eax, esi
		sub	edx, esi
		jnz	short loc_11B4
		pop	edi
		pop	esi
		pop	ebx
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_11F5:				; CODE XREF: _serverinfo_find_extension+62j
		mov	[ebp+0], eax
		mov	eax, [esp+10h+arg_10]
		pop	edi
		mov	[eax], esi
		mov	eax, 1
		pop	esi
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1208:				; CODE XREF: _serverinfo_find_extension+33j
					; _serverinfo_find_extension+47j ...
		pop	edi
		pop	esi
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1210:				; CODE XREF: _serverinfo_find_extension+1Cj
					; _serverinfo_find_extension+24j
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
_serverinfo_find_extension endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1218h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_serverinfo_process_buffer proc	near	; CODE XREF: _SSL_CTX_use_serverinfo+2Bp
					; _SSL_CTX_use_serverinfo+DBp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		jz	loc_12D5
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jz	loc_12D5
		push	ebx
		push	ebp
		nop	dword ptr [eax+00h]

loc_1238:				; CODE XREF: _serverinfo_process_buffer+A8j
		cmp	esi, 2
		jb	loc_12CE
		movzx	ebx, byte ptr [edi]
		movzx	eax, byte ptr [edi+1]
		shl	ebx, 8
		add	ebx, eax
		mov	eax, [esp+10h+arg_8]
		test	eax, eax
		jz	short loc_129D
		mov	eax, [eax+0B0h]
		xor	edx, edx
		mov	ebp, [eax+168h]
		mov	ecx, [eax+164h]
		test	ebp, ebp
		jz	short loc_127C

loc_126D:				; CODE XREF: _serverinfo_process_buffer+62j
		movzx	eax, word ptr [ecx]
		cmp	ebx, eax
		jz	short loc_129D
		inc	edx
		add	ecx, 18h
		cmp	edx, ebp
		jb	short loc_126D

loc_127C:				; CODE XREF: _serverinfo_process_buffer+53j
		push	0
		push	offset _serverinfo_srv_parse_cb
		push	0
		push	0
		push	offset _serverinfo_srv_add_cb
		push	ebx
		push	[esp+28h+arg_8]
		call	_SSL_CTX_add_server_custom_ext
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_12CE

loc_129D:				; CODE XREF: _serverinfo_process_buffer+3Bj
					; _serverinfo_process_buffer+5Aj
		sub	esi, 2
		cmp	esi, 2
		jb	short loc_12CE
		movzx	ecx, byte ptr [edi+2]
		sub	esi, 2
		movzx	eax, byte ptr [edi+3]
		shl	ecx, 8
		add	ecx, eax
		cmp	ecx, esi
		ja	short loc_12CE
		add	edi, 4
		add	edi, ecx
		sub	esi, ecx
		jnz	loc_1238
		pop	ebp
		pop	ebx
		pop	edi
		lea	eax, [esi+1]
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_12CE:				; CODE XREF: _serverinfo_process_buffer+23j
					; _serverinfo_process_buffer+83j ...
		pop	ebp
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_12D5:				; CODE XREF: _serverinfo_process_buffer+8j
					; _serverinfo_process_buffer+14j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
_serverinfo_process_buffer endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 12DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_serverinfo_srv_add_cb proc near	; DATA XREF: _serverinfo_process_buffer+6Fo

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 8
		call	__chkstk
		lea	eax, [esp+8+var_8]
		mov	[esp+8+var_4], 0
		push	eax
		lea	eax, [esp+0Ch+var_4]
		mov	[esp+0Ch+var_8], 0
		push	eax
		push	[esp+10h+arg_0]
		call	_ssl_get_server_cert_serverinfo
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_134D
		push	[esp+8+arg_C]
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		push	[esp+14h+var_8]
		push	[esp+18h+var_4]
		call	_serverinfo_find_extension
		mov	ecx, eax
		add	esp, 14h
		cmp	ecx, 0FFFFFFFFh
		jnz	short loc_1342
		mov	eax, [esp+8+arg_10]
		mov	dword ptr [eax], 32h ; '2'
		or	eax, ecx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1342:				; CODE XREF: _serverinfo_srv_add_cb+54j
		xor	eax, eax
		test	ecx, ecx
		setnz	al
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_134D:				; CODE XREF: _serverinfo_srv_add_cb+31j
		xor	eax, eax
		add	esp, 8
		retn
_serverinfo_srv_add_cb endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1354h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_serverinfo_srv_parse_cb proc near	; DATA XREF: _serverinfo_process_buffer+66o

arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		cmp	[esp+arg_C], 0
		jz	short loc_1368
		mov	eax, [esp+arg_10]
		mov	dword ptr [eax], 32h ; '2'
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1368:				; CODE XREF: _serverinfo_srv_parse_cb+5j
		mov	eax, 1
		retn
_serverinfo_srv_parse_cb endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1370h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ssl_set_cert	proc near		; CODE XREF: _SSL_CTX_use_certificate+62p
					; _SSL_use_certificate+5Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, [esp+8+arg_4]
		push	edi
		call	_X509_get_pubkey
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_13A8
		push	18Fh
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	10Ch
		push	0BFh ; '¿'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_13A8:				; CODE XREF: _ssl_set_cert+13j
		push	esi
		push	edi
		call	_ssl_cert_type
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		jns	short loc_13E1
		push	195h
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	0F7h ; '÷'
		push	0BFh ; '¿'
		push	14h
		call	_ERR_put_error
		push	esi
		call	_EVP_PKEY_free
		add	esp, 18h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_13E1:				; CODE XREF: _ssl_set_cert+46j
		lea	eax, ds:0[ecx*8]
		sub	eax, ecx
		push	ebx
		push	ebp
		mov	ebp, [esp+10h+arg_0]
		lea	ebx, ds:0[eax*4]
		add	ebx, ebp
		mov	eax, [ebx+40h]
		test	eax, eax
		jz	short loc_144D
		push	eax
		push	esi
		call	_EVP_PKEY_copy_parameters
		add	esp, 8
		call	_ERR_clear_error
		mov	eax, [ebx+40h]
		cmp	dword ptr [eax], 6
		jnz	short loc_1426
		push	dword ptr [eax+14h]
		call	_RSA_flags
		add	esp, 4
		test	al, 1
		jnz	short loc_144D

loc_1426:				; CODE XREF: _ssl_set_cert+A5j
		push	dword ptr [ebx+40h]
		push	edi
		call	_X509_check_private_key
		add	esp, 8
		test	eax, eax
		jnz	short loc_144D
		push	dword ptr [ebx+40h]
		call	_EVP_PKEY_free
		add	esp, 4
		mov	dword ptr [ebx+40h], 0
		call	_ERR_clear_error

loc_144D:				; CODE XREF: _ssl_set_cert+8Ej
					; _ssl_set_cert+B4j ...
		push	esi
		call	_EVP_PKEY_free
		mov	eax, [ebx+3Ch]
		add	ebx, 3Ch ; '<'
		add	esp, 4
		test	eax, eax
		jz	short loc_1469
		push	eax
		call	_X509_free
		add	esp, 4

loc_1469:				; CODE XREF: _ssl_set_cert+EEj
		push	1BDh
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	3
		lea	eax, [edi+10h]
		push	1
		push	eax
		call	_CRYPTO_add_lock
		add	esp, 14h
		mov	[ebx], edi
		mov	[ebp+0], ebx
		mov	eax, 1
		mov	dword ptr [ebp+4], 0
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		retn
_ssl_set_cert	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 149Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ssl_set_pkey	proc near		; CODE XREF: _SSL_CTX_use_PrivateKey+62p
					; _SSL_CTX_use_RSAPrivateKey+B5p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		cmp	dword ptr [edi], 1Ch
		jnz	short loc_14F7
		mov	eax, [ebx+90h]
		or	esi, 0FFFFFFFFh
		test	eax, eax
		jz	short loc_14CD
		push	edi
		push	eax
		call	_X509_check_private_key
		add	esp, 8
		mov	ecx, 3
		test	eax, eax
		cmovnz	esi, ecx

loc_14CD:				; CODE XREF: _ssl_set_pkey+1Bj
		mov	eax, [ebx+0ACh]
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_14F0
		test	eax, eax
		jz	short loc_14F0
		push	edi
		push	eax
		call	_X509_check_private_key
		add	esp, 8
		mov	ecx, 4
		test	eax, eax
		cmovnz	esi, ecx

loc_14F0:				; CODE XREF: _ssl_set_pkey+3Aj
					; _ssl_set_pkey+3Ej
		call	_ERR_clear_error
		jmp	short loc_1504
; ---------------------------------------------------------------------------

loc_14F7:				; CODE XREF: _ssl_set_pkey+Ej
		push	edi
		push	0
		call	_ssl_cert_type
		add	esp, 8
		mov	esi, eax

loc_1504:				; CODE XREF: _ssl_set_pkey+59j
		test	esi, esi
		jns	short loc_152C
		push	0C2h ; 'Â'
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	0F7h ; '÷'
		push	0C1h ; 'Á'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_152C:				; CODE XREF: _ssl_set_pkey+6Aj
		lea	eax, ds:0[esi*8]
		sub	eax, esi
		push	ebp
		lea	ebp, [ebx+eax*4]
		mov	eax, [ebp+3Ch]
		mov	[esp+10h+arg_4], ebp
		lea	esi, [ebp+3Ch]
		test	eax, eax
		jz	loc_15D5
		push	eax
		call	_X509_get_pubkey
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jnz	short loc_1582
		push	0CAh ; 'Ê'
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	41h ; 'A'
		push	0C1h ; 'Á'
		push	14h
		call	_ERR_put_error
		push	ebp
		call	_EVP_PKEY_free
		add	esp, 18h
		xor	eax, eax
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1582:				; CODE XREF: _ssl_set_pkey+BCj
		push	edi
		push	ebp
		call	_EVP_PKEY_copy_parameters
		push	ebp
		call	_EVP_PKEY_free
		add	esp, 0Ch
		call	_ERR_clear_error
		cmp	dword ptr [edi], 6
		jnz	short loc_15AB
		push	dword ptr [edi+14h]
		call	_RSA_flags
		add	esp, 4
		test	al, 1
		jnz	short loc_15D1

loc_15AB:				; CODE XREF: _ssl_set_pkey+FEj
		push	edi
		push	dword ptr [esi]
		call	_X509_check_private_key
		add	esp, 8
		test	eax, eax
		jnz	short loc_15D1
		push	dword ptr [esi]
		call	_X509_free
		add	esp, 4
		mov	dword ptr [esi], 0
		xor	eax, eax
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_15D1:				; CODE XREF: _ssl_set_pkey+10Dj
					; _ssl_set_pkey+11Cj
		mov	ebp, [esp+10h+arg_4]

loc_15D5:				; CODE XREF: _ssl_set_pkey+A9j
		mov	eax, [ebp+40h]
		test	eax, eax
		jz	short loc_15E5
		push	eax
		call	_EVP_PKEY_free
		add	esp, 4

loc_15E5:				; CODE XREF: _ssl_set_pkey+13Ej
		push	0E8h ; 'è'
		push	offset ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ ; ".\\ssl\\ssl_rsa.c"
		push	0Ah
		lea	eax, [edi+8]
		push	1
		push	eax
		call	_CRYPTO_add_lock
		add	esp, 14h
		mov	[ebp+40h], edi
		mov	[ebx], esi
		mov	eax, 1
		mov	dword ptr [ebx+4], 0
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		retn
_ssl_set_pkey	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1618h
; COMDAT (pick any)
		public ??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@
; `string'
??_C@_0BA@KANBIEAI@?4?2ssl?2ssl_rsa?4c?$AA@ db '.\ssl\ssl_rsa.c',0
					; DATA XREF: _SSL_CTX_use_PrivateKey+Co
					; _SSL_CTX_use_PrivateKey+42o ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1628h
; COMDAT (pick any)
		public ??_C@_0BA@CMCLEKJO@SERVERINFO?5FOR?5?$AA@
; `string'
??_C@_0BA@CMCLEKJO@SERVERINFO?5FOR?5?$AA@ xmmword 20524F46204F464E49524556524553h
					; DATA XREF: _SSL_CTX_use_serverinfo_file+15r
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; int __cdecl _strncmp(const char *Str1, const char *Str2, size_t MaxCount)
		extrn __imp__strncmp:near ; CODE XREF: _SSL_CTX_use_serverinfo_file+108p
					; DATA XREF: _SSL_CTX_use_serverinfo_file+108r
		extrn _CRYPTO_add_lock:near ; CODE XREF: _ssl_set_cert+10Bp
					; _ssl_set_pkey+15Bp
		extrn _CRYPTO_free:near	; CODE XREF: _SSL_CTX_use_serverinfo_file+17Cp
					; _SSL_CTX_use_serverinfo_file+18Dp ...
		extrn _CRYPTO_realloc:near ; CODE XREF:	_SSL_CTX_use_serverinfo+A1p
					; _SSL_CTX_use_serverinfo_file+151p
		extrn _BIO_s_file:near	; CODE XREF: _SSL_CTX_use_PrivateKey_file+Ep
					; _SSL_CTX_use_RSAPrivateKey_file+Ep ...
		extrn _BIO_new:near	; CODE XREF: _SSL_CTX_use_PrivateKey_file+14p
					; _SSL_CTX_use_RSAPrivateKey_file+14p ...
		extrn _BIO_free:near	; CODE XREF: _SSL_CTX_use_PrivateKey_file+74p
					; _SSL_CTX_use_PrivateKey_file+EFp ...
		extrn _BIO_ctrl:near	; CODE XREF: _SSL_CTX_use_PrivateKey_file+4Cp
					; _SSL_CTX_use_RSAPrivateKey_file+4Cp ...
		extrn _RSA_free:near	; CODE XREF: _SSL_CTX_use_RSAPrivateKey+A4p
					; _SSL_CTX_use_RSAPrivateKey_ASN1+4Fp ...
		extrn _RSA_up_ref:near	; CODE XREF: _SSL_CTX_use_RSAPrivateKey+8Ep
					; _SSL_use_RSAPrivateKey+8Ep
		extrn _RSA_flags:near	; CODE XREF: _ssl_set_cert+AAp
					; _ssl_set_pkey+103p
		extrn _d2i_RSAPrivateKey:near
					; CODE XREF: _SSL_CTX_use_RSAPrivateKey_ASN1+14p
					; _SSL_use_RSAPrivateKey_ASN1+14p
		extrn _ERR_put_error:near ; CODE XREF: _SSL_CTX_use_PrivateKey+1Ap
					; _SSL_CTX_use_PrivateKey+50p ...
		extrn _ERR_peek_error:near
					; CODE XREF: _SSL_CTX_use_certificate_chain_file+DCp
		extrn _ERR_peek_last_error:near
					; CODE XREF: _SSL_CTX_use_certificate_chain_file:loc_649p
		extrn _ERR_clear_error:near
					; CODE XREF: _SSL_CTX_use_certificate_chain_file+Ep
					; _SSL_CTX_use_certificate_chain_file+15Cp ...
		extrn _EVP_PKEY_assign:near ; CODE XREF: _SSL_CTX_use_RSAPrivateKey+97p
					; _SSL_use_RSAPrivateKey+97p
		extrn _EVP_PKEY_new:near ; CODE	XREF: _SSL_CTX_use_RSAPrivateKey+61p
					; _SSL_use_RSAPrivateKey+61p
		extrn _EVP_PKEY_free:near ; CODE XREF: _SSL_CTX_use_PrivateKey_ASN1+53p
					; _SSL_CTX_use_PrivateKey_file+E4p ...
		extrn _d2i_PrivateKey:near ; CODE XREF:	_SSL_CTX_use_PrivateKey_ASN1+18p
					; _SSL_use_PrivateKey_ASN1+18p
		extrn _EVP_PKEY_copy_parameters:near ; CODE XREF: _ssl_set_cert+92p
					; _ssl_set_pkey+E8p
		extrn _d2i_X509_bio:near ; CODE	XREF: _SSL_CTX_use_certificate_file+9Cp
					; _SSL_use_certificate_file+81p
		extrn _d2i_RSAPrivateKey_bio:near
					; CODE XREF: _SSL_CTX_use_RSAPrivateKey_file+9Cp
					; _SSL_use_RSAPrivateKey_file+87p
		extrn _d2i_PrivateKey_bio:near ; CODE XREF: _SSL_CTX_use_PrivateKey_file+BCp
					; _SSL_use_PrivateKey_file+ACp
		extrn _X509_free:near	; CODE XREF: _SSL_CTX_use_certificate_ASN1+47p
					; _SSL_CTX_use_certificate_chain_file+164p ...
		extrn _d2i_X509:near	; CODE XREF: _SSL_CTX_use_certificate_ASN1+Cp
					; _SSL_use_certificate_ASN1+Cp
		extrn _X509_get_pubkey:near ; CODE XREF: _ssl_set_cert+7p
					; _ssl_set_pkey+B0p
		extrn _X509_check_private_key:near ; CODE XREF:	_ssl_set_cert+BAp
					; _ssl_set_pkey+1Fp ...
		extrn _PEM_read_bio:near ; CODE	XREF: _SSL_CTX_use_serverinfo_file+BFp
					; _SSL_CTX_use_serverinfo_file+1CCp
		extrn _PEM_read_bio_X509:near
					; CODE XREF: _SSL_CTX_use_certificate_chain_file+106p
					; _SSL_CTX_use_certificate_chain_file+12Fp ...
		extrn _PEM_read_bio_X509_AUX:near
					; CODE XREF: _SSL_CTX_use_certificate_chain_file+95p
		extrn _PEM_read_bio_RSAPrivateKey:near
					; CODE XREF: _SSL_CTX_use_RSAPrivateKey_file+BCp
					; _SSL_use_RSAPrivateKey_file+ACp
		extrn _PEM_read_bio_PrivateKey:near
					; CODE XREF: _SSL_CTX_use_PrivateKey_file+A2p
					; _SSL_use_PrivateKey_file+97p
		extrn _SSL_CTX_add_server_custom_ext:near
					; CODE XREF: _serverinfo_process_buffer+79p
		extrn _SSL_CTX_ctrl:near
					; CODE XREF: _SSL_CTX_use_certificate_chain_file+F8p
					; _SSL_CTX_use_certificate_chain_file+11Ap
		extrn _ssl_cert_inst:near ; CODE XREF: _SSL_CTX_use_PrivateKey+31p
					; _SSL_CTX_use_RSAPrivateKey+34p ...
		extrn _ssl_get_server_cert_serverinfo:near
					; CODE XREF: _serverinfo_srv_add_cb+27p
		extrn _ssl_cert_type:near ; CODE XREF: _ssl_set_cert+3Ap
					; _ssl_set_pkey+5Ep
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _SSL_CTX_use_serverinfo_file+2A2p
		extrn __chkstk:near	; CODE XREF: _SSL_CTX_use_PrivateKey_file+5p
					; _SSL_CTX_use_RSAPrivateKey_file+5p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _SSL_CTX_use_serverinfo+CCp
					; _SSL_CTX_use_serverinfo_file+16Fp
		extrn ___security_cookie:near ;	DATA XREF: _SSL_CTX_use_serverinfo_file+Ar


		end
