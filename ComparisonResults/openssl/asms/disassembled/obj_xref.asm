;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	FEC884AB3070CE99A8C6C7EA3AFD7BD0
; Input	CRC32 :	090B0FCA

; File Name   :	C:\compspace\Diff\openssl\obj\obj_xref.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
_sigoid_srt	dd 7, 3, 6, 8, 4, 6, 2Ah, 29h, 6, 41h, 40h, 6, 42h, 29h
					; DATA XREF: .rdata:_sigoid_srt_xrefo
					; _OBJ_find_sigid_algs+64o ...
		dd 74h,	46h, 40h, 43h, 60h, 5Fh, 6, 68h, 4, 13h, 71h, 40h
		dd 74h,	73h, 40h, 13h, 77h, 75h, 6, 18Ch, 101h,	6, 1A0h
		dd 40h,	198h, 29Ch, 2A0h, 6, 29Dh, 2A1h, 6, 29Eh, 2A2h
		dd 6, 29Fh, 2A3h, 6, 317h, 0
		dd offset off_198
		dd offset loc_316+2
		align 10h
		dd offset off_198
off_E4		dd offset loc_316+3	; DATA XREF: .rdata:00000258o
		dd offset loc_29F+4
		dd offset off_198
off_F0		dd offset loc_316+4	; DATA XREF: .rdata:00000224o
		dd offset loc_29F+1
		dd offset off_198
off_FC		dd offset loc_316+5	; DATA XREF: .rdata:00000234o
		dd offset loc_29F+2
		dd offset off_198
off_108		dd offset loc_31C	; DATA XREF: .rdata:00000244o
		dd offset loc_29F+3
		dd offset off_198
off_114		dd offset loc_321+1	; DATA XREF: .rdata:00000254o
		dd offset loc_29F+4
		dd offset _sigoid_srt+74h
off_120		dd offset loc_321+2	; DATA XREF: .rdata:00000220o
		dd offset loc_29F+1
		dd offset _sigoid_srt+74h
off_12C		dd offset loc_327	; DATA XREF: .rdata:00000264o
		dd offset loc_327+2
		dd offset loc_327+4
off_138		dd offset loc_327+1	; DATA XREF: .rdata:00000268o
		dd offset loc_327+2
		dd offset loc_32C
off_144		dd offset _OBJ_bsearch_sigx ; DATA XREF: .rdata:0000026Co
		dd offset loc_327+2
		dd offset loc_350+2
off_150		dd offset _OBJ_bsearch_sigx+1 ;	DATA XREF: .rdata:00000270o
		dd offset loc_327+2
		dd offset locret_353
		dd offset loc_38E+2
		dd 0
dword_164	dd 6, 3A8h, 40h, 3B2h, 3A9h, 2A3h, 3B2h, 3AAh, 2A0h, 3B2h
					; DATA XREF: .rdata:00000208o
		dd 3ABh, 2A1h, 3B2h
off_198		dd offset loc_3AB+1	; DATA XREF: .rdata:000000D4o
					; .rdata:000000E0o ...
		dd offset loc_29F+3
		dd offset loc_3B2
off_1A4		dd offset loc_3AB+2	; DATA XREF: .rdata:0000020Co
		dd offset _sigoid_srt+40h
		dd offset loc_3B3
off_1B0		dd offset loc_3AE	; DATA XREF: .rdata:00000260o
		dd offset loc_29F+4
		dd offset loc_3B3
off_1BC		dd offset loc_3AE+1	; DATA XREF: .rdata:0000022Co
		dd offset loc_29F+1
		dd offset loc_3B3
off_1C8		dd offset loc_3B0	; DATA XREF: .rdata:0000023Co
		dd offset loc_29F+2
		dd offset loc_3B3
off_1D4		dd offset loc_3B0+1	; DATA XREF: .rdata:0000024Co
		dd offset loc_29F+3
		dd offset loc_3B3
_sigoid_srt_xref dd offset _sigoid_srt	; DATA XREF: _OBJ_find_sigid_by_algs+8Fo
		dd offset _sigoid_srt+0Ch
		dd offset _sigoid_srt+54h
		dd offset _sigoid_srt+18h
		dd offset _sigoid_srt+30h
		dd offset _sigoid_srt+24h
		dd offset _sigoid_srt+6Ch
		dd offset _sigoid_srt+3Ch
		dd offset _sigoid_srt+60h
		dd offset _sigoid_srt+90h
		dd offset dword_164+4
		dd offset off_1A4
		dd offset _sigoid_srt+48h
		dd offset _sigoid_srt+78h
		dd offset _sigoid_srt+84h
		dd offset _sigoid_srt+9Ch
		dd offset off_120
		dd offset off_F0
		dd offset dword_164+1Ch
		dd offset off_1BC
		dd offset _sigoid_srt+0A8h
		dd offset off_FC
		dd offset dword_164+28h
		dd offset off_1C8
		dd offset _sigoid_srt+0B4h
		dd offset off_108
		dd offset off_198
		dd offset off_1D4
		dd offset _sigoid_srt+0C0h
		dd offset off_114
		dd offset off_E4
		dd offset dword_164+10h
		dd offset off_1B0
		dd offset off_12C
		dd offset off_138
		dd offset off_144
		dd offset off_150
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 274h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OBJ_add_sigid
_OBJ_add_sigid	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		cmp	dword ptr ds:_sig_app, 0
		jnz	short loc_296
		push	offset _sig_sk_cmp
		call	_sk_new
		add	esp, 4
		mov	dword ptr ds:_sig_app, eax
		test	eax, eax
		jnz	short loc_296

loc_293:				; CODE XREF: _OBJ_add_sigid+3Fj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_296:				; CODE XREF: _OBJ_add_sigid+7j
					; _OBJ_add_sigid+1Dj
		cmp	dword ptr ds:_sigx_app,	0
		jnz	short loc_2B5

loc_29F:				; DATA XREF: .rdata:000000F4o
					; .rdata:00000124o ...
		push	offset _sigx_cmp
		call	_sk_new
		add	esp, 4
		mov	dword ptr ds:_sigx_app,	eax
		test	eax, eax
		jz	short loc_293

loc_2B5:				; CODE XREF: _OBJ_add_sigid+29j
		push	esi
		push	9Fh ; 'Ÿ'
		push	offset ??_C@_0BM@KHCMJIBL@?4?2crypto?2objects?2obj_xref?4c?$AA@	; ".\\crypto\\objects\\obj_xref.c"
		push	0Ch
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_300
		mov	eax, [esp+4+arg_0]
		mov	[esi], eax
		mov	eax, [esp+4+arg_4]
		mov	[esi+4], eax
		mov	eax, [esp+4+arg_8]
		mov	[esi+8], eax
		push	esi
		push	dword ptr ds:_sig_app
		call	_sk_push
		add	esp, 8
		push	esi
		test	eax, eax
		jnz	short loc_304
		call	_CRYPTO_free
		add	esp, 4

loc_300:				; CODE XREF: _OBJ_add_sigid+5Aj
					; _OBJ_add_sigid+A0j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_304:				; CODE XREF: _OBJ_add_sigid+82j
		push	dword ptr ds:_sigx_app
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	short loc_300

loc_316:				; DATA XREF: .rdata:000000D8o
					; .rdata:off_E4o ...
		push	dword ptr ds:_sig_app

loc_31C:				; DATA XREF: .rdata:off_108o
		call	_sk_sort

loc_321:				; DATA XREF: .rdata:off_114o
					; .rdata:off_120o
		push	dword ptr ds:_sigx_app

loc_327:				; DATA XREF: .rdata:off_12Co
					; .rdata:off_138o ...
		call	_sk_sort

loc_32C:				; DATA XREF: .rdata:00000140o
		add	esp, 8
		mov	eax, 1
		pop	esi
		retn
_OBJ_add_sigid	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 338h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_OBJ_bsearch_sig proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset _sig_cmp_BSEARCH_CMP_FN
		push	0Ch
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	_OBJ_bsearch_

loc_350:				; DATA XREF: .rdata:0000014Co
		add	esp, 14h

locret_353:				; DATA XREF: .rdata:00000158o
		retn
_OBJ_bsearch_sig endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 354h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_OBJ_bsearch_sigx proc near		; DATA XREF: .rdata:off_144o
					; .rdata:off_150o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset _sigx_cmp_BSEARCH_CMP_FN
		push	4
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	_OBJ_bsearch_
		add	esp, 14h
		retn
_OBJ_bsearch_sigx endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 370h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OBJ_find_sigid_algs
_OBJ_find_sigid_algs proc near

var_10		= dword	ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 10h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+10h+var_4], eax
		mov	eax, [esp+10h+arg_0]
		push	esi
		mov	esi, [esp+14h+arg_8]

loc_38E:				; DATA XREF: .rdata:0000015Co
		mov	[esp+14h+var_10], eax
		mov	eax, dword ptr ds:_sig_app
		push	edi
		mov	edi, [esp+18h+arg_4]
		test	eax, eax
		jz	short loc_3C7
		lea	ecx, [esp+18h+var_10]
		push	ecx
		push	eax
		call	_sk_find

loc_3AB:				; DATA XREF: .rdata:off_198o
					; .rdata:off_1A4o
		add	esp, 8

loc_3AE:				; DATA XREF: .rdata:off_1B0o
					; .rdata:off_1BCo
		test	eax, eax

loc_3B0:				; DATA XREF: .rdata:off_1C8o
					; .rdata:off_1D4o
		js	short loc_3C7

loc_3B2:				; DATA XREF: .rdata:000001A0o
		push	eax

loc_3B3:				; DATA XREF: .rdata:000001ACo
					; .rdata:000001B8o ...
		push	dword ptr ds:_sig_app
		call	_sk_value
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		jnz	short loc_3F9

loc_3C7:				; CODE XREF: _OBJ_find_sigid_algs+2Ej
					; _OBJ_find_sigid_algs:loc_3B0j
		push	offset _sig_cmp_BSEARCH_CMP_FN
		push	0Ch
		push	28h ; '('
		lea	eax, [esp+24h+var_10]
		push	offset _sigoid_srt
		push	eax
		call	_OBJ_bsearch_
		mov	ecx, eax
		add	esp, 14h
		test	ecx, ecx
		jnz	short loc_3F9
		pop	edi
		pop	esi
		mov	ecx, [esp+10h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_3F9:				; CODE XREF: _OBJ_find_sigid_algs+55j
					; _OBJ_find_sigid_algs+76j
		test	edi, edi
		jz	short loc_402
		mov	eax, [ecx+4]
		mov	[edi], eax

loc_402:				; CODE XREF: _OBJ_find_sigid_algs+8Bj
		test	esi, esi
		jz	short loc_40B
		mov	eax, [ecx+8]
		mov	[esi], eax

loc_40B:				; CODE XREF: _OBJ_find_sigid_algs+94j
		mov	ecx, [esp+18h+var_4]
		mov	eax, 1
		pop	edi
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 10h
		retn
_OBJ_find_sigid_algs endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 424h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OBJ_find_sigid_by_algs
_OBJ_find_sigid_by_algs	proc near

var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 14h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+14h+var_4], eax
		lea	eax, [esp+14h+var_10]
		mov	[esp+14h+var_14], eax
		mov	eax, [esp+14h+arg_4]
		mov	[esp+14h+var_C], eax
		mov	eax, [esp+14h+arg_8]
		mov	[esp+14h+var_8], eax
		mov	eax, dword ptr ds:_sigx_app
		push	esi
		mov	esi, [esp+18h+arg_0]
		test	eax, eax
		jz	short loc_4A6
		lea	ecx, [esp+18h+var_10]
		push	ecx
		push	eax
		call	_sk_find
		add	esp, 8
		test	eax, eax
		js	short loc_4A6
		push	eax
		push	dword ptr ds:_sigx_app
		call	_sk_value
		mov	[esp+20h+var_14], eax
		add	esp, 8
		lea	eax, [esp+18h+var_14]

loc_487:				; CODE XREF: _OBJ_find_sigid_by_algs+9Fj
		test	esi, esi
		jz	short loc_491
		mov	eax, [eax]
		mov	eax, [eax]
		mov	[esi], eax

loc_491:				; CODE XREF: _OBJ_find_sigid_by_algs+65j
		mov	eax, 1
		pop	esi
		mov	ecx, [esp+14h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_4A6:				; CODE XREF: _OBJ_find_sigid_by_algs+38j
					; _OBJ_find_sigid_by_algs+4Aj
		push	offset _sigx_cmp_BSEARCH_CMP_FN
		push	4
		push	25h ; '%'
		lea	eax, [esp+24h+var_14]
		push	offset _sigoid_srt_xref
		push	eax
		call	_OBJ_bsearch_
		add	esp, 14h
		test	eax, eax
		jnz	short loc_487
		mov	ecx, [esp+18h+var_4]
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 14h
		retn
_OBJ_find_sigid_by_algs	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OBJ_sigid_free
_OBJ_sigid_free	proc near
		mov	eax, dword ptr ds:_sig_app
		test	eax, eax
		jz	short loc_4F9
		push	offset _sid_free
		push	eax
		call	_sk_pop_free
		add	esp, 8
		mov	dword ptr ds:_sig_app, 0

loc_4F9:				; CODE XREF: _OBJ_sigid_free+7j
		mov	eax, dword ptr ds:_sigx_app
		test	eax, eax
		jz	short locret_515
		push	eax
		call	_sk_free
		add	esp, 4
		mov	dword ptr ds:_sigx_app,	0

locret_515:				; CODE XREF: _OBJ_sigid_free+28j
		retn
_OBJ_sigid_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 518h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_sid_free	proc near		; DATA XREF: _OBJ_sigid_free+9o
		jmp	_CRYPTO_free
_sid_free	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 520h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_sig_cmp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	eax, [eax]
		sub	eax, [ecx]
		retn
_sig_cmp	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 530h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_sig_cmp_BSEARCH_CMP_FN	proc near	; DATA XREF: _OBJ_bsearch_sigo
					; _OBJ_find_sigid_algs:loc_3C7o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	eax, [eax]
		sub	eax, [ecx]
		retn
_sig_cmp_BSEARCH_CMP_FN	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 540h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_sig_sk_cmp	proc near		; DATA XREF: _OBJ_add_sigid+9o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	edx, [eax]
		mov	eax, [esp+arg_4]
		mov	ecx, [eax]
		mov	eax, [edx]
		sub	eax, [ecx]
		retn
_sig_sk_cmp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 554h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_sigx_cmp	proc near		; DATA XREF: _OBJ_add_sigid:loc_29Fo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [eax]
		mov	eax, [esp+arg_4]
		mov	edx, [eax]
		mov	eax, [ecx+4]
		sub	eax, [edx+4]
		jnz	short locret_56E
		mov	eax, [ecx+8]
		sub	eax, [edx+8]

locret_56E:				; CODE XREF: _sigx_cmp+12j
		retn
_sigx_cmp	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 570h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_sigx_cmp_BSEARCH_CMP_FN proc near	; DATA XREF: _OBJ_bsearch_sigxo
					; _OBJ_find_sigid_by_algs:loc_4A6o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	ecx, [eax]
		mov	eax, [esp+arg_0]
		mov	edx, [eax]
		mov	eax, [edx+4]
		sub	eax, [ecx+4]
		jnz	short locret_58A
		mov	eax, [edx+8]
		sub	eax, [ecx+8]

locret_58A:				; CODE XREF: _sigx_cmp_BSEARCH_CMP_FN+12j
		retn
_sigx_cmp_BSEARCH_CMP_FN endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 58Ch
; COMDAT (pick any)
		public ??_C@_0BM@KHCMJIBL@?4?2crypto?2objects?2obj_xref?4c?$AA@
; `string'
??_C@_0BM@KHCMJIBL@?4?2crypto?2objects?2obj_xref?4c?$AA@ db '.\crypto\objects\obj_xref.c',0
					; DATA XREF: _OBJ_add_sigid+47o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _sig_app:near	; DATA XREF: _OBJ_add_sigidr
					; _OBJ_add_sigid+16w ...
		extrn _sigx_app:near	; DATA XREF: _OBJ_add_sigid:loc_296r
					; _OBJ_add_sigid+38w ...
		extrn _sk_value:near	; CODE XREF: _OBJ_find_sigid_algs+49p
					; _OBJ_find_sigid_by_algs+53p
		extrn _sk_new:near	; CODE XREF: _OBJ_add_sigid+Ep
					; _OBJ_add_sigid+30p
		extrn _sk_free:near	; CODE XREF: _OBJ_sigid_free+2Bp
		extrn _sk_pop_free:near	; CODE XREF: _OBJ_sigid_free+Fp
		extrn _sk_find:near	; CODE XREF: _OBJ_find_sigid_algs+36p
					; _OBJ_find_sigid_by_algs+40p
		extrn _sk_push:near	; CODE XREF: _OBJ_add_sigid+77p
					; _OBJ_add_sigid+96p
		extrn _sk_sort:near	; CODE XREF: _OBJ_add_sigid:loc_31Cp
					; _OBJ_add_sigid:loc_327p
		extrn _CRYPTO_malloc:near ; CODE XREF: _OBJ_add_sigid+4Ep
		extrn _CRYPTO_free:near	; CODE XREF: _OBJ_add_sigid+84p
					; _sid_freej
		extrn _OBJ_bsearch_:near ; CODE	XREF: _OBJ_bsearch_sig+13p
					; _OBJ_bsearch_sigx+13p ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _OBJ_find_sigid_algs+80p
					; _OBJ_find_sigid_algs+A8p ...
		extrn __chkstk:near	; CODE XREF: _OBJ_find_sigid_algs+5p
					; _OBJ_find_sigid_by_algs+5p
		extrn ___security_cookie:near ;	DATA XREF: _OBJ_find_sigid_algs+Ar
					; _OBJ_find_sigid_by_algs+Ar


		end
