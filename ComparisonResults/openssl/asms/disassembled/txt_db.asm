;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	EF209BEA0395094A415747FA5B1F41CF
; Input	CRC32 :	36CE6EBD

; File Name   :	C:\compspace\Diff\openssl\obj\txt_db.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		public _TXT_DB_version
_TXT_DB_version	db 'TXT_DB part of OpenSSL 1.0.2h  3 May 2016',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TXT_DB_create_index
_TXT_DB_create_index proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 4
		call	__chkstk
		mov	eax, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		cmp	eax, [edi]
		jl	short loc_4F
		mov	dword ptr [edi+10h], 3
		xor	eax, eax
		pop	edi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_4F:					; CODE XREF: _TXT_DB_create_index+15j
		push	ebx
		push	[esp+0Ch+arg_10]
		push	[esp+10h+arg_C]
		call	_lh_new
		mov	ebx, eax
		add	esp, 8
		mov	[esp+0Ch+arg_0], ebx
		test	ebx, ebx
		jnz	short loc_75
		pop	ebx
		mov	dword ptr [edi+10h], 1
		pop	edi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_75:					; CODE XREF: _TXT_DB_create_index+3Cj
		push	ebp
		push	esi
		push	dword ptr [edi+4]
		call	_sk_num
		mov	ebp, [esp+18h+arg_8]
		add	esp, 4
		xor	esi, esi
		mov	[esp+14h+var_4], eax
		test	eax, eax
		jle	short loc_F0

loc_90:					; CODE XREF: _TXT_DB_create_index+C2j
		push	esi
		push	dword ptr [edi+4]
		call	_sk_value
		add	esp, 8
		mov	ebx, eax
		test	ebp, ebp
		jz	short loc_AC
		push	ebx
		call	ebp
		add	esp, 4
		test	eax, eax
		jz	short loc_E5

loc_AC:					; CODE XREF: _TXT_DB_create_index+74j
		push	ebx
		mov	ebx, [esp+18h+arg_0]
		push	ebx
		call	_lh_insert
		add	esp, 8
		test	eax, eax
		jz	short loc_E9
		push	eax
		push	dword ptr [edi+4]
		mov	dword ptr [edi+10h], 2
		call	_sk_find
		push	ebx
		mov	[edi+14h], eax
		mov	[edi+18h], esi
		call	_lh_free
		add	esp, 0Ch
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ebx
		pop	edi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_E5:					; CODE XREF: _TXT_DB_create_index+7Ej
		mov	ebx, [esp+14h+arg_0]

loc_E9:					; CODE XREF: _TXT_DB_create_index+90j
		inc	esi
		cmp	esi, [esp+14h+var_4]
		jl	short loc_90

loc_F0:					; CODE XREF: _TXT_DB_create_index+62j
		mov	eax, [edi+8]
		mov	esi, [esp+14h+arg_4]
		mov	eax, [eax+esi*4]
		test	eax, eax
		jz	short loc_107
		push	eax
		call	_lh_free
		add	esp, 4

loc_107:				; CODE XREF: _TXT_DB_create_index+D0j
		mov	eax, [edi+8]
		mov	[eax+esi*4], ebx
		mov	eax, [edi+0Ch]
		mov	[eax+esi*4], ebp
		mov	eax, 1
		pop	esi
		pop	ebp
		pop	ebx
		pop	edi
		pop	ecx
		retn
_TXT_DB_create_index endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 120h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TXT_DB_free
_TXT_DB_free	proc near

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	loc_223
		cmp	dword ptr [edi+8], 0
		push	esi
		jz	short loc_163
		mov	esi, [edi]
		sub	esi, 1
		js	short loc_158
		nop	dword ptr [eax+eax+00h]

loc_140:				; CODE XREF: _TXT_DB_free+36j
		mov	eax, [edi+8]
		mov	eax, [eax+esi*4]
		test	eax, eax
		jz	short loc_153
		push	eax
		call	_lh_free
		add	esp, 4

loc_153:				; CODE XREF: _TXT_DB_free+28j
		sub	esi, 1
		jns	short loc_140

loc_158:				; CODE XREF: _TXT_DB_free+19j
		push	dword ptr [edi+8]
		call	_CRYPTO_free
		add	esp, 4

loc_163:				; CODE XREF: _TXT_DB_free+12j
		mov	eax, [edi+0Ch]
		test	eax, eax
		jz	short loc_173
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_173:				; CODE XREF: _TXT_DB_free+48j
		mov	eax, [edi+4]
		test	eax, eax
		jz	loc_219
		push	ebx
		push	eax
		call	_sk_num
		mov	ebx, eax
		add	esp, 4
		sub	ebx, 1
		mov	[esp+0Ch+arg_0], ebx
		js	short loc_20D
		push	ebp

loc_194:				; CODE XREF: _TXT_DB_free+EAj
		push	ebx
		push	dword ptr [edi+4]
		call	_sk_value
		mov	ebx, eax
		add	esp, 8
		mov	eax, [edi]
		xor	esi, esi
		mov	ebp, [ebx+eax*4]
		test	ebp, ebp
		jnz	short loc_1C8
		test	eax, eax
		jle	short loc_1ED

loc_1B1:				; CODE XREF: _TXT_DB_free+A4j
		mov	eax, [ebx+esi*4]
		test	eax, eax
		jz	short loc_1C1
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_1C1:				; CODE XREF: _TXT_DB_free+96j
		inc	esi
		cmp	esi, [edi]
		jl	short loc_1B1
		jmp	short loc_1ED
; ---------------------------------------------------------------------------

loc_1C8:				; CODE XREF: _TXT_DB_free+8Bj
		test	eax, eax
		jle	short loc_1ED
		nop	dword ptr [eax+00h]

loc_1D0:				; CODE XREF: _TXT_DB_free+CBj
		mov	eax, [ebx+esi*4]
		cmp	eax, ebx
		jb	short loc_1DB
		cmp	eax, ebp
		jbe	short loc_1E8

loc_1DB:				; CODE XREF: _TXT_DB_free+B5j
		test	eax, eax
		jz	short loc_1E8
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_1E8:				; CODE XREF: _TXT_DB_free+B9j
					; _TXT_DB_free+BDj
		inc	esi
		cmp	esi, [edi]
		jl	short loc_1D0

loc_1ED:				; CODE XREF: _TXT_DB_free+8Fj
					; _TXT_DB_free+A6j ...
		mov	ebx, [esp+10h+arg_0]
		push	ebx
		push	dword ptr [edi+4]
		call	_sk_value
		push	eax
		call	_CRYPTO_free
		add	esp, 0Ch
		sub	ebx, 1
		mov	[esp+10h+arg_0], ebx
		jns	short loc_194
		pop	ebp

loc_20D:				; CODE XREF: _TXT_DB_free+71j
		push	dword ptr [edi+4]
		call	_sk_free
		add	esp, 4
		pop	ebx

loc_219:				; CODE XREF: _TXT_DB_free+58j
		push	edi
		call	_CRYPTO_free
		add	esp, 4
		pop	esi

loc_223:				; CODE XREF: _TXT_DB_free+7j
		pop	edi
		retn
_TXT_DB_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 228h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TXT_DB_get_by_index
_TXT_DB_get_by_index proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	ecx, [esi]
		jl	short loc_240
		mov	dword ptr [esi+10h], 3
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_240:				; CODE XREF: _TXT_DB_get_by_index+Bj
		mov	eax, [esi+8]
		mov	eax, [eax+ecx*4]
		test	eax, eax
		jnz	short loc_253
		mov	dword ptr [esi+10h], 4
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_253:				; CODE XREF: _TXT_DB_get_by_index+20j
		push	[esp+4+arg_8]
		push	eax
		call	_lh_retrieve
		add	esp, 8
		mov	dword ptr [esi+10h], 0
		pop	esi
		retn
_TXT_DB_get_by_index endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 26Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TXT_DB_insert
_TXT_DB_insert	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		xor	edi, edi
		cmp	[esi], edi
		jle	short loc_2B2

loc_27D:				; CODE XREF: _TXT_DB_insert+44j
		mov	eax, [esi+8]
		cmp	dword ptr [eax+edi*4], 0
		jz	short loc_2AD
		mov	eax, [esi+0Ch]
		mov	eax, [eax+edi*4]
		test	eax, eax
		jz	short loc_29A
		push	ebx
		call	eax
		add	esp, 4
		test	eax, eax
		jz	short loc_2AD

loc_29A:				; CODE XREF: _TXT_DB_insert+22j
		mov	eax, [esi+8]
		push	ebx
		push	dword ptr [eax+edi*4]
		call	_lh_retrieve
		add	esp, 8
		test	eax, eax
		jnz	short loc_2CD

loc_2AD:				; CODE XREF: _TXT_DB_insert+18j
					; _TXT_DB_insert+2Cj
		inc	edi
		cmp	edi, [esi]
		jl	short loc_27D

loc_2B2:				; CODE XREF: _TXT_DB_insert+Fj
		push	ebx
		push	dword ptr [esi+4]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jnz	short loc_2E0
		mov	dword ptr [esi+10h], 1

$err$26:
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2CD:				; CODE XREF: _TXT_DB_insert+3Fj
		mov	[esi+14h], edi
		pop	edi
		mov	[esi+1Ch], eax
		xor	eax, eax
		mov	dword ptr [esi+10h], 2
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2E0:				; CODE XREF: _TXT_DB_insert+54j
		xor	edi, edi
		cmp	[esi], edi
		jle	short loc_31D
		nop	word ptr [eax+eax+00h]

loc_2EC:				; CODE XREF: _TXT_DB_insert+AFj
		mov	eax, [esi+8]
		cmp	dword ptr [eax+edi*4], 0
		jz	short loc_318
		mov	eax, [esi+0Ch]
		mov	eax, [eax+edi*4]
		test	eax, eax
		jz	short loc_309
		push	ebx
		call	eax
		add	esp, 4
		test	eax, eax
		jz	short loc_318

loc_309:				; CODE XREF: _TXT_DB_insert+91j
		mov	eax, [esi+8]
		push	ebx
		push	dword ptr [eax+edi*4]
		call	_lh_insert
		add	esp, 8

loc_318:				; CODE XREF: _TXT_DB_insert+87j
					; _TXT_DB_insert+9Bj
		inc	edi
		cmp	edi, [esi]
		jl	short loc_2EC

loc_31D:				; CODE XREF: _TXT_DB_insert+78j
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
_TXT_DB_insert	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 328h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TXT_DB_read
_TXT_DB_read	proc near

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 20h ; ' '
		call	__chkstk
		push	ebx
		push	ebp
		xor	eax, eax
		mov	[esp+28h+var_18], 1
		push	esi
		xor	esi, esi
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_14], 200h
		call	_BUF_MEM_new
		mov	ebp, dword ptr ds:__imp____acrt_iob_func
		mov	ebx, eax
		mov	[esp+2Ch+var_20], ebx
		test	ebx, ebx
		jz	$err$81
		push	200h
		push	ebx
		call	_BUF_MEM_grow
		add	esp, 8
		test	eax, eax
		jz	$err$81
		push	59h ; 'Y'
		push	offset ??_C@_0BJ@JMBAEECP@?4?2crypto?2txt_db?2txt_db?4c?$AA@ ; ".\\crypto\\txt_db\\txt_db.c"
		push	20h ; ' '
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		mov	[esp+2Ch+var_1C], esi
		test	esi, esi
		jz	$err$81
		mov	ebx, [esp+2Ch+arg_4]
		lea	ebp, [esi+8]
		push	edi
		lea	edi, [esi+0Ch]
		mov	[esi], ebx
		mov	dword ptr [ebp+0], 0
		mov	[esp+30h+var_C], edi
		mov	dword ptr [edi], 0
		call	_sk_new_null
		mov	[esi+4], eax
		test	eax, eax
		jz	loc_679
		push	60h ; '`'
		lea	esi, ds:0[ebx*4]
		push	offset ??_C@_0BJ@JMBAEECP@?4?2crypto?2txt_db?2txt_db?4c?$AA@ ; ".\\crypto\\txt_db\\txt_db.c"
		push	esi
		mov	[esp+3Ch+var_4], esi
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[ebp+0], eax
		test	eax, eax
		jz	loc_675
		push	62h ; 'b'
		push	offset ??_C@_0BJ@JMBAEECP@?4?2crypto?2txt_db?2txt_db?4c?$AA@ ; ".\\crypto\\txt_db\\txt_db.c"
		push	esi
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[esp+30h+var_8], eax
		mov	[edi], eax
		test	eax, eax
		jz	loc_675
		xor	esi, esi
		test	ebx, ebx
		jle	loc_4D0
		cmp	ebx, 4
		jb	loc_4A9
		mov	ecx, [ebp+0]
		lea	edi, [ebx-1]
		lea	edx, [ebx-1]
		lea	edx, [eax+edx*4]
		lea	edi, [ecx+edi*4]
		cmp	eax, edi
		mov	edi, [esp+30h+var_C]
		ja	short loc_43B
		cmp	edx, ecx
		jnb	short loc_4A9

loc_43B:				; CODE XREF: _TXT_DB_read+10Dj
		cmp	eax, ebp
		ja	short loc_443
		cmp	edx, ebp
		jnb	short loc_4A9

loc_443:				; CODE XREF: _TXT_DB_read+115j
		cmp	eax, edi
		ja	short loc_44B
		cmp	edx, edi
		jnb	short loc_4A9

loc_44B:				; CODE XREF: _TXT_DB_read+11Dj
		lea	eax, [ebx-1]
		lea	eax, [ecx+eax*4]
		cmp	ecx, ebp
		ja	short loc_459
		cmp	eax, ebp
		jnb	short loc_4A9

loc_459:				; CODE XREF: _TXT_DB_read+12Bj
		cmp	ecx, edi
		ja	short loc_461
		cmp	eax, edi
		jnb	short loc_4A9

loc_461:				; CODE XREF: _TXT_DB_read+133j
		mov	eax, ebx
		and	eax, 80000003h
		jns	short loc_46F
		dec	eax
		or	eax, 0FFFFFFFCh
		inc	eax

loc_46F:				; CODE XREF: _TXT_DB_read+140j
		mov	ecx, ebx
		sub	ecx, eax
		nop	dword ptr [eax+eax+00h]

loc_478:				; CODE XREF: _TXT_DB_read+155j
		add	esi, 4
		cmp	esi, ecx
		jl	short loc_478
		mov	edi, [ebp+0]
		lea	eax, [ecx+3]
		cdq
		and	edx, 3
		add	edx, eax
		xor	eax, eax
		sar	edx, 2
		shl	edx, 4
		mov	ecx, edx
		shr	ecx, 2
		rep stosd
		mov	edi, [esp+30h+var_8]
		shr	edx, 2
		mov	ecx, edx
		rep stosd
		mov	edi, [esp+30h+var_C]

loc_4A9:				; CODE XREF: _TXT_DB_read+F2j
					; _TXT_DB_read+111j ...
		cmp	esi, ebx
		jge	short loc_4D0
		db	66h, 66h
		nop	word ptr [eax+eax+00000000h]

loc_4B8:				; CODE XREF: _TXT_DB_read+1A6j
		mov	eax, [ebp+0]
		mov	dword ptr [eax+esi*4], 0
		mov	eax, [edi]
		mov	dword ptr [eax+esi*4], 0
		inc	esi
		cmp	esi, ebx
		jl	short loc_4B8

loc_4D0:				; CODE XREF: _TXT_DB_read+E9j
					; _TXT_DB_read+183j
		mov	ebx, [esp+30h+var_20]
		mov	ebp, [esp+30h+var_4]
		mov	esi, [esp+30h+var_1C]
		add	ebp, 4
		mov	[esp+30h+var_C], ebp
		xor	edi, edi
		mov	eax, [ebx+4]
		mov	byte ptr [eax+1FFh], 0

loc_4EF:				; CODE XREF: _TXT_DB_read+224j
					; _TXT_DB_read+244j ...
		test	edi, edi
		jz	short loc_512
		mov	eax, [esp+30h+var_14]
		add	eax, 200h
		push	eax
		push	ebx
		mov	[esp+38h+var_14], eax
		call	_BUF_MEM_grow_clean
		add	esp, 8
		test	eax, eax
		jz	loc_67D

loc_512:				; CODE XREF: _TXT_DB_read+1C9j
		mov	eax, [ebx+4]
		mov	byte ptr [edi+eax], 0
		mov	eax, [esp+30h+var_14]
		sub	eax, edi
		push	eax
		mov	eax, [ebx+4]
		add	eax, edi
		push	eax
		push	[esp+38h+arg_0]
		call	_BIO_gets
		mov	edx, [ebx+4]
		add	esp, 0Ch
		inc	[esp+30h+var_10]
		lea	ecx, [edx+edi]
		cmp	byte ptr [ecx],	0
		jz	loc_66D
		test	edi, edi
		jnz	short loc_54E
		cmp	byte ptr [edx],	23h ; '#'
		jz	short loc_4EF

loc_54E:				; CODE XREF: _TXT_DB_read+21Fj
		lea	esi, [ecx+1]
		nop	dword ptr [eax+00000000h]

loc_558:				; CODE XREF: _TXT_DB_read+235j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_558
		sub	ecx, esi
		mov	esi, [esp+30h+var_1C]
		add	edi, ecx
		cmp	byte ptr [edx+edi-1], 0Ah
		jnz	short loc_4EF
		push	7Fh ; ''
		mov	[edx+edi-1], al
		lea	eax, [edi+ebp]
		push	offset ??_C@_0BJ@JMBAEECP@?4?2crypto?2txt_db?2txt_db?4c?$AA@ ; ".\\crypto\\txt_db\\txt_db.c"
		push	eax
		call	_CRYPTO_malloc
		add	esp, 0Ch
		test	eax, eax
		jz	loc_67D
		mov	ebp, eax
		xor	edi, edi
		add	eax, [esp+30h+var_C]
		mov	[esp+30h+var_4], edi
		mov	[ebp+0], eax
		lea	esi, [edi+1]
		mov	ecx, [ebx+4]
		xor	ebx, ebx
		mov	dl, [ecx]
		test	dl, dl
		jz	short loc_5CE
		mov	edi, [esp+30h+arg_4]

loc_5AE:				; CODE XREF: _TXT_DB_read+2A0j
		cmp	dl, 9
		jnz	short loc_5B8
		test	ebx, ebx
		jz	short loc_628
		dec	eax

loc_5B8:				; CODE XREF: _TXT_DB_read+289j
		xor	ebx, ebx
		mov	[eax], dl
		cmp	dl, 5Ch	; '\'
		setz	bl
		inc	eax
		inc	ecx

loc_5C4:				; CODE XREF: _TXT_DB_read+30Ej
		mov	dl, [ecx]
		test	dl, dl
		jnz	short loc_5AE

loc_5CA:				; CODE XREF: _TXT_DB_read+307j
		mov	edi, [esp+30h+var_4]

loc_5CE:				; CODE XREF: _TXT_DB_read+280j
		mov	ebx, [esp+30h+arg_4]
		mov	byte ptr [eax],	0
		cmp	esi, ebx
		jnz	short loc_638
		cmp	byte ptr [ecx],	0
		jnz	short loc_638
		inc	eax
		mov	[ebp+esi*4+0], eax
		mov	esi, [esp+30h+var_1C]
		push	ebp
		push	dword ptr [esi+4]
		call	_sk_push
		mov	ebx, [esp+38h+var_20]
		add	esp, 8
		mov	ebp, [esp+30h+var_C]
		test	eax, eax
		jnz	loc_4EF
		mov	ebp, dword ptr ds:__imp____acrt_iob_func
		push	offset ??_C@_0BE@DIDEHOHF@failure?5in?5sk_push?6?$AA@ ;	"failure in sk_push\n"
		push	2
		call	ebp ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 8
		mov	[esp+30h+var_18], 2
		jmp	short loc_683
; ---------------------------------------------------------------------------

loc_628:				; CODE XREF: _TXT_DB_read+28Dj
		mov	byte ptr [eax],	0
		inc	ecx
		inc	eax
		cmp	esi, edi
		jge	short loc_5CA
		mov	[ebp+esi*4+0], eax
		inc	esi
		jmp	short loc_5C4
; ---------------------------------------------------------------------------

loc_638:				; CODE XREF: _TXT_DB_read+2AFj
					; _TXT_DB_read+2B4j
		mov	eax, [esp+30h+var_10]
		mov	ebp, dword ptr ds:__imp____acrt_iob_func
		push	ecx
		push	esi
		push	ebx
		push	eax
		push	offset ??_C@_0EO@MBKPDAJL@wrong?5number?5of?5fields?5on?5line?5?$CF@ ; "wrong number of	fields on line %ld (loo"...
		push	2
		call	ebp ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		mov	ebx, [esp+48h+var_20]
		add	esp, 18h
		mov	esi, [esp+30h+var_1C]
		mov	[esp+30h+var_18], 2
		jmp	short loc_683
; ---------------------------------------------------------------------------

loc_66D:				; CODE XREF: _TXT_DB_read+217j
		xor	eax, eax
		mov	[esp+30h+var_18], eax
		jmp	short loc_67D
; ---------------------------------------------------------------------------

loc_675:				; CODE XREF: _TXT_DB_read+C1j
					; _TXT_DB_read+DFj
		mov	esi, [esp+30h+var_1C]

loc_679:				; CODE XREF: _TXT_DB_read+9Bj
		mov	ebx, [esp+30h+var_20]

loc_67D:				; CODE XREF: _TXT_DB_read+1E4j
					; _TXT_DB_read+25Fj ...
		mov	ebp, dword ptr ds:__imp____acrt_iob_func

loc_683:				; CODE XREF: _TXT_DB_read+2FEj
					; _TXT_DB_read+343j
		pop	edi

$err$81:				; CODE XREF: _TXT_DB_read+38j
					; _TXT_DB_read+4Ej ...
		push	ebx
		call	_BUF_MEM_free
		mov	eax, [esp+30h+var_18]
		add	esp, 4
		test	eax, eax
		jz	short loc_6F5
		cmp	eax, 1
		jnz	short loc_6AF
		push	offset ??_C@_0BI@KFBJELMM@OPENSSL_malloc?5failure?6?$AA@ ; "OPENSSL_malloc failure\n"
		push	2
		call	ebp ; __imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 8

loc_6AF:				; CODE XREF: _TXT_DB_read+370j
		test	esi, esi
		jz	short loc_6EC
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6C3
		push	eax
		call	_sk_free
		add	esp, 4

loc_6C3:				; CODE XREF: _TXT_DB_read+390j
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_6D3
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_6D3:				; CODE XREF: _TXT_DB_read+3A0j
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_6E3
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_6E3:				; CODE XREF: _TXT_DB_read+3B0j
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_6EC:				; CODE XREF: _TXT_DB_read+389j
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_6F5:				; CODE XREF: _TXT_DB_read+36Bj
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 20h
		retn
_TXT_DB_read	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 700h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TXT_DB_write
_TXT_DB_write	proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 10h
		call	__chkstk
		push	ebp
		xor	ebp, ebp
		push	edi
		mov	[esp+18h+var_10], ebp
		call	_BUF_MEM_new
		mov	edi, eax
		mov	[esp+18h+var_8], edi
		test	edi, edi
		jz	loc_834
		push	ebx
		push	esi
		mov	esi, [esp+20h+arg_4]
		push	dword ptr [esi+4]
		call	_sk_num
		mov	ebx, [esi]
		mov	ecx, eax
		xor	eax, eax
		mov	[esp+24h+var_4], ecx
		add	esp, 4
		mov	[esp+20h+var_C], eax
		test	ecx, ecx
		jle	$err$47
		nop	dword ptr [eax+00h]

loc_750:				; CODE XREF: _TXT_DB_write+105j
		push	eax
		push	dword ptr [esi+4]
		call	_sk_value
		add	esp, 8
		xor	edi, edi
		xor	edx, edx
		mov	ebp, eax
		test	ebx, ebx
		jle	short loc_781

loc_766:				; CODE XREF: _TXT_DB_write+7Fj
		mov	ecx, [ebp+edx*4+0]
		test	ecx, ecx
		jz	short loc_77C
		lea	esi, [ecx+1]

loc_771:				; CODE XREF: _TXT_DB_write+76j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_771
		sub	ecx, esi
		add	edi, ecx

loc_77C:				; CODE XREF: _TXT_DB_write+6Cj
		inc	edx
		cmp	edx, ebx
		jl	short loc_766

loc_781:				; CODE XREF: _TXT_DB_write+64j
		lea	eax, [ebx+edi*2]
		mov	edi, [esp+20h+var_8]
		push	eax
		push	edi
		call	_BUF_MEM_grow_clean
		add	esp, 8
		test	eax, eax
		jz	loc_81E
		mov	esi, [edi+4]
		xor	edx, edx
		test	ebx, ebx
		jle	short loc_7CF

loc_7A3:				; CODE XREF: _TXT_DB_write+CDj
		mov	ecx, [ebp+edx*4+0]
		test	ecx, ecx
		jz	short loc_7C6
		mov	al, [ecx]
		test	al, al
		jz	short loc_7C6

loc_7B1:				; CODE XREF: _TXT_DB_write+C4j
		cmp	al, 9
		jnz	short loc_7B9
		mov	byte ptr [esi],	5Ch ; '\'
		inc	esi

loc_7B9:				; CODE XREF: _TXT_DB_write+B3j
		movzx	eax, byte ptr [ecx]
		inc	ecx
		mov	[esi], al
		inc	esi
		mov	al, [ecx]
		test	al, al
		jnz	short loc_7B1

loc_7C6:				; CODE XREF: _TXT_DB_write+A9j
					; _TXT_DB_write+AFj
		mov	byte ptr [esi],	9
		inc	edx
		inc	esi
		cmp	edx, ebx
		jl	short loc_7A3

loc_7CF:				; CODE XREF: _TXT_DB_write+A1j
		mov	byte ptr [esi-1], 0Ah
		mov	eax, [edi+4]
		sub	esi, eax
		push	esi
		push	eax
		push	[esp+28h+arg_0]
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, esi
		jnz	short loc_81E
		mov	eax, [esp+20h+var_C]
		mov	ebp, [esp+20h+var_10]
		inc	eax
		add	ebp, esi
		mov	[esp+20h+var_C], eax
		mov	esi, [esp+20h+arg_4]
		mov	[esp+20h+var_10], ebp
		cmp	eax, [esp+20h+var_4]
		jl	loc_750
		push	edi
		call	_BUF_MEM_free
		add	esp, 4
		mov	eax, ebp
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_81E:				; CODE XREF: _TXT_DB_write+94j
					; _TXT_DB_write+E8j
		or	ebp, 0FFFFFFFFh

$err$47:				; CODE XREF: _TXT_DB_write+46j
		push	edi
		call	_BUF_MEM_free
		add	esp, 4
		mov	eax, ebp
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_834:				; CODE XREF: _TXT_DB_write+1Fj
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 10h
		retn
_TXT_DB_write	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 840h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; _fprintf+Fp
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 848h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 86Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int fprintf(FILE *File, const	char *Format, ...)
		public _fprintf
_fprintf	proc near		; CODE XREF: _TXT_DB_read+2EEp
					; _TXT_DB_read+32Bp ...

File		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= byte ptr  0Ch

		lea	eax, [esp+arg_8]
		push	eax
		push	0
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
_fprintf	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 890h
; COMDAT (pick any)
		public ??_C@_0BJ@JMBAEECP@?4?2crypto?2txt_db?2txt_db?4c?$AA@
; `string'
??_C@_0BJ@JMBAEECP@?4?2crypto?2txt_db?2txt_db?4c?$AA@ db '.\crypto\txt_db\txt_db.c',0
					; DATA XREF: _TXT_DB_read+56o
					; _TXT_DB_read+AAo ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 8ACh
; COMDAT (pick any)
		public ??_C@_0EO@MBKPDAJL@wrong?5number?5of?5fields?5on?5line?5?$CF@
; char `string'[]
??_C@_0EO@MBKPDAJL@wrong?5number?5of?5fields?5on?5line?5?$CF@ db 'wrong number of fields on line %ld (looking for field %d, got %d,'
					; DATA XREF: _TXT_DB_read+31Eo
		db ' ',27h,'%s',27h,' left)',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8FCh
; COMDAT (pick any)
		public ??_C@_0BE@DIDEHOHF@failure?5in?5sk_push?6?$AA@
; char `string'[]
??_C@_0BE@DIDEHOHF@failure?5in?5sk_push?6?$AA@ db 'failure in sk_push',0Ah,0
					; DATA XREF: _TXT_DB_read+2E1o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 910h
; COMDAT (pick any)
		public ??_C@_0BI@KFBJELMM@OPENSSL_malloc?5failure?6?$AA@
; char `string'[]
??_C@_0BI@KFBJELMM@OPENSSL_malloc?5failure?6?$AA@ db 'OPENSSL_malloc failure',0Ah,0
					; DATA XREF: _TXT_DB_read+372o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _TXT_DB_read+2E8p
					; _TXT_DB_read+325p ...
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _fprintf+19p
					; DATA XREF: ...
		extrn _sk_num:near	; CODE XREF: _TXT_DB_create_index+4Ep
					; _TXT_DB_free+60p ...
		extrn _sk_value:near	; CODE XREF: _TXT_DB_create_index+68p
					; _TXT_DB_free+78p ...
		extrn _sk_new_null:near	; CODE XREF: _TXT_DB_read+91p
		extrn _sk_free:near	; CODE XREF: _TXT_DB_free+F0p
					; _TXT_DB_read+393p
		extrn _sk_find:near	; CODE XREF: _TXT_DB_create_index+9Dp
		extrn _sk_push:near	; CODE XREF: _TXT_DB_insert+4Ap
					; _TXT_DB_read+2C3p
		extrn _CRYPTO_malloc:near ; CODE XREF: _TXT_DB_read+5Dp
					; _TXT_DB_read+B4p ...
		extrn _CRYPTO_free:near	; CODE XREF: _TXT_DB_free+3Bp
					; _TXT_DB_free+4Bp ...
		extrn _BUF_MEM_new:near	; CODE XREF: _TXT_DB_read+25p
					; _TXT_DB_write+12p
		extrn _BUF_MEM_free:near ; CODE	XREF: _TXT_DB_read+35Dp
					; _TXT_DB_write+10Cp ...
		extrn _BUF_MEM_grow:near ; CODE	XREF: _TXT_DB_read+44p
		extrn _BUF_MEM_grow_clean:near ; CODE XREF: _TXT_DB_read+1DAp
					; _TXT_DB_write+8Ap
		extrn _BIO_gets:near	; CODE XREF: _TXT_DB_read+202p
		extrn _BIO_write:near	; CODE XREF: _TXT_DB_write+DEp
		extrn _lh_new:near	; CODE XREF: _TXT_DB_create_index+2Cp
		extrn _lh_free:near	; CODE XREF: _TXT_DB_create_index+A9p
					; _TXT_DB_create_index+D3p ...
		extrn _lh_insert:near	; CODE XREF: _TXT_DB_create_index+86p
					; _TXT_DB_insert+A4p
		extrn _lh_retrieve:near	; CODE XREF: _TXT_DB_get_by_index+30p
					; _TXT_DB_insert+35p
		extrn __chkstk:near	; CODE XREF: _TXT_DB_create_index+5p
					; _TXT_DB_read+5p ...
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso


		end
