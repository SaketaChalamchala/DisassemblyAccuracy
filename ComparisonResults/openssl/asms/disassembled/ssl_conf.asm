;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	393F4486BE38BE46FD63433B6ACAC645
; Input	CRC32 :	DD68E155

; File Name   :	C:\compspace\Diff\openssl\obj\ssl_conf.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cmd_CipherString proc near		; DATA XREF: .rdata:000001BCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, 1
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_20
		push	[esp+4+arg_4]
		push	eax
		call	_SSL_CTX_set_cipher_list
		add	esp, 8
		mov	ecx, eax

loc_20:					; CODE XREF: _cmd_CipherString+Fj
		mov	eax, [esi+10h]
		pop	esi
		test	eax, eax
		jz	short loc_37
		push	[esp+arg_4]
		push	eax
		call	_SSL_set_cipher_list
		add	esp, 8
		mov	ecx, eax

loc_37:					; CODE XREF: _cmd_CipherString+26j
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		retn
_cmd_CipherString endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 40h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cmd_Protocol	proc near		; DATA XREF: .rdata:000001CCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_0]
		test	byte ptr [edi],	2
		jnz	short loc_51
		mov	eax, 0FFFFFFFEh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_51:					; CODE XREF: _cmd_Protocol+8j
		mov	eax, [edi+14h]
		push	esi
		push	edi
		push	offset _ssl_set_option_list
		push	1
		mov	dword ptr [edi+1Ch], offset ?ssl_protocol_list@?1??cmd_Protocol@@9@9 ; `cmd_Protocol'::`2'::ssl_protocol_list
		mov	dword ptr [edi+20h], 6
		mov	esi, [eax]
		push	2Ch ; ','
		push	[esp+18h+arg_4]
		and	esi, 1000000h
		call	_CONF_parse_list
		mov	ecx, [edi+14h]
		add	esp, 14h
		or	[ecx], esi
		pop	esi
		pop	edi
		retn
_cmd_Protocol	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 8Ch
; `cmd_Protocol'::`2'::ssl_protocol_list
?ssl_protocol_list@?1??cmd_Protocol@@9@9 dd offset ??_C@_03NIFPGLBG@ALL?$AA@
					; DATA XREF: _cmd_Protocol+1Do
					; `string'
		dd 3, 0Dh, 1F000000h
		dd offset ??_C@_05NHFKDGAI@SSLv2?$AA@ ;	"SSLv2"
		dd 5, 0Dh, 1000000h
		dd offset ??_C@_05MOEBAHEJ@SSLv3?$AA@ ;	"SSLv3"
		dd 5, 0Dh, 2000000h
		dd offset ??_C@_05LLIBCOJ@TLSv1?$AA@ ; "TLSv1"
		dd 5, 0Dh, 4000000h
		dd offset ??_C@_07IIILFOAN@TLSv1?41?$AA@ ; "TLSv1.1"
		dd 7, 0Dh, 10000000h
		dd offset ??_C@_07KDKGANMO@TLSv1?42?$AA@ ; "TLSv1.2"
		dd 7, 0Dh, 8000000h
; `cmd_Options'::`2'::ssl_option_list
?ssl_option_list@?1??cmd_Options@@9@9 dd offset	??_C@_0O@PGDEOOBD@SessionTicket?$AA@
					; DATA XREF: _cmd_Options+28o
					; "SessionTicket"
		dd 2 dup(0Dh), 4000h
		dd offset ??_C@_0P@IEKKKMCP@EmptyFragments?$AA@	; "EmptyFragments"
		dd 0Eh,	0Dh, 800h
		dd offset ??_C@_04OIFKEPF@Bugs?$AA@ ; "Bugs"
		dd 4, 0Ch, 80000BFFh
		dd offset ??_C@_0M@COKFBABJ@Compression?$AA@ ; "Compression"
		dd 0Bh,	0Dh, 20000h
		dd offset ??_C@_0BB@MGHJKEHO@ServerPreference?$AA@ ; "ServerPreference"
		dd 10h,	8, 400000h
		dd offset ??_C@_0BM@FKDDFINF@NoResumptionOnRenegotiation?$AA@ ;	"NoResumptionOnRenegotiation"
		dd 1Bh,	8, 10000h
		dd offset ??_C@_08IEICGGIK@DHSingle?$AA@ ; "DHSingle"
		dd 2 dup(8), 100000h
		dd offset ??_C@_0L@NLJOMKMG@ECDHSingle?$AA@ ; "ECDHSingle"
		dd 0Ah,	8, 80000h
		dd offset ??_C@_0BK@KBKMKCAN@UnsafeLegacyRenegotiation?$AA@ ; "UnsafeLegacyRenegotiation"
		dd 19h,	0Ch, 40000h
_ssl_conf_cmds	dd offset _cmd_SignatureAlgorithms ; DATA XREF:	_ssl_conf_cmd_lookup+11o
		dd offset ??_C@_0BE@BLMPOMHO@SignatureAlgorithms?$AA@ ;	"SignatureAlgorithms"
		dd offset ??_C@_07CPPFGBOH@sigalgs?$AA@	; "sigalgs"
		dd 1
		dd offset _cmd_ClientSignatureAlgorithms
		dd offset ??_C@_0BK@PFLLPPDA@ClientSignatureAlgorithms?$AA@ ; "ClientSignatureAlgorithms"
		dd offset ??_C@_0P@BBDFBCC@client_sigalgs?$AA@ ; "client_sigalgs"
		dd 1
		dd offset _cmd_Curves
		dd offset ??_C@_06MLNHLMAG@Curves?$AA@ ; "Curves"
		dd offset ??_C@_06EGKIFJK@curves?$AA@ ;	"curves"
		dd 1
		dd offset _cmd_ECDHParameters
		dd offset ??_C@_0P@MCMJEMBC@ECDHParameters?$AA@	; "ECDHParameters"
		dd offset ??_C@_0M@FBFAECBG@named_curve?$AA@ ; "named_curve"
		dd 1
		dd offset _cmd_CipherString
		dd offset ??_C@_0N@KOODPKGB@CipherString?$AA@ ;	"CipherString"
		dd offset ??_C@_06KDGDAFPH@cipher?$AA@ ; "cipher"
		dd 1
		dd offset _cmd_Protocol
		dd offset ??_C@_08NAKOFPNG@Protocol?$AA@ ; "Protocol"
		align 8
		dd 1
		dd offset _cmd_Options
		dd offset ??_C@_07KHIHFBFN@Options?$AA@	; "Options"
		align 8
		dd 1
		dd offset _cmd_Certificate
		dd offset ??_C@_0M@KDOEPPNO@Certificate?$AA@ ; "Certificate"
		dd offset ??_C@_04PHJBACIC@cert?$AA@ ; "cert"
		dd 2
		dd offset _cmd_PrivateKey
		dd offset ??_C@_0L@JENBINIJ@PrivateKey?$AA@ ; "PrivateKey"
		dd offset ??_C@_03ICHNJLJF@key?$AA@ ; `string'
		dd 2
		dd offset _cmd_ServerInfoFile
		dd offset ??_C@_0P@BDBIGKFA@ServerInfoFile?$AA@	; "ServerInfoFile"
		align 8
		dd 2
		dd offset _cmd_DHParameters
		dd offset ??_C@_0N@NOMKBOKL@DHParameters?$AA@ ;	"DHParameters"
		dd offset ??_C@_07IBCFADID@dhparam?$AA@	; "dhparam"
		dd 2
; `ctrl_str_option'::`2'::ssl_option_single
?ssl_option_single@?1??ctrl_str_option@@9@9 dd offset ??_C@_07LENPOHGJ@no_ssl2?$AA@
					; DATA XREF: _SSL_CONF_cmd+CDo
					; _ctrl_str_option+Bo
					; "no_ssl2"
		dd 7, 0Ch, 1000000h
		dd offset ??_C@_07KNMENGCI@no_ssl3?$AA@	; "no_ssl3"
		dd 7, 0Ch, 2000000h
		dd offset ??_C@_07DCNCMLDO@no_tls1?$AA@	; "no_tls1"
		dd 7, 0Ch, 4000000h
		dd offset ??_C@_09OMMOFMKI@no_tls1_1?$AA@ ; "no_tls1_1"
		dd 9, 0Ch, 10000000h
		dd offset ??_C@_09MHODAPGL@no_tls1_2?$AA@ ; "no_tls1_2"
		dd 9, 0Ch, 8000000h
		dd offset ??_C@_04MPEEILPB@bugs?$AA@ ; "bugs"
		dd 4, 0Ch, 80000BFFh
		dd offset ??_C@_07NHNNPHM@no_comp?$AA@ ; "no_comp"
		dd 7, 0Ch, 20000h
		dd offset ??_C@_0M@GFJDILHJ@ecdh_single?$AA@ ; "ecdh_single"
		dd 0Bh,	8, 80000h
		dd offset ??_C@_09NMKBGOFJ@no_ticket?$AA@ ; "no_ticket"
		dd 9, 0Ch, 4000h
		dd offset ??_C@_0L@KKCHEECL@serverpref?$AA@ ; "serverpref"
		dd 0Ah,	8, 400000h
		dd offset ??_C@_0BF@HAMGDCBC@legacy_renegotiation?$AA@ ; "legacy_renegotiation"
		dd 14h,	0Ch, 40000h
		dd offset ??_C@_0BG@GIDFLGOF@legacy_server_connect?$AA@	; "legacy_server_connect"
		dd 15h,	8, 4
		dd offset ??_C@_0BH@IOGIPIAJ@no_resumption_on_reneg?$AA@ ; "no_resumption_on_reneg"
		dd 16h,	8, 10000h
		dd offset ??_C@_0BJ@CMKHGIEM@no_legacy_server_connect?$AA@ ; "no_legacy_server_connect"
		dd 18h,	9, 4
		dd offset ??_C@_06OLFOGHEN@strict?$AA@ ; "strict"
		dd 6, 0Eh, 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 31Ch
; COMDAT (pick any)
		public ??_C@_03NIFPGLBG@ALL?$AA@
; `string'
??_C@_03NIFPGLBG@ALL?$AA@ dd 4C4C41h	; DATA XREF: .rdata:`cmd_Protocol'::`2'::ssl_protocol_listo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 320h
; COMDAT (pick any)
		public ??_C@_05NHFKDGAI@SSLv2?$AA@
; `string'
??_C@_05NHFKDGAI@SSLv2?$AA@ db 'SSLv2',0 ; DATA XREF: .rdata:0000009Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 328h
; COMDAT (pick any)
		public ??_C@_05MOEBAHEJ@SSLv3?$AA@
; `string'
??_C@_05MOEBAHEJ@SSLv3?$AA@ db 'SSLv3',0 ; DATA XREF: .rdata:000000ACo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 330h
; COMDAT (pick any)
		public ??_C@_05LLIBCOJ@TLSv1?$AA@
; `string'
??_C@_05LLIBCOJ@TLSv1?$AA@ db 'TLSv1',0 ; DATA XREF: .rdata:000000BCo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 338h
; COMDAT (pick any)
		public ??_C@_07IIILFOAN@TLSv1?41?$AA@
; `string'
??_C@_07IIILFOAN@TLSv1?41?$AA@ db 'TLSv1.1',0 ; DATA XREF: .rdata:000000CCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 340h
; COMDAT (pick any)
		public ??_C@_07KDKGANMO@TLSv1?42?$AA@
; `string'
??_C@_07KDKGANMO@TLSv1?42?$AA@ db 'TLSv1.2',0 ; DATA XREF: .rdata:000000DCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 348h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cmd_Options	proc near		; DATA XREF: .rdata:000001DCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	byte ptr [eax],	2
		jnz	short loc_357
		mov	eax, 0FFFFFFFEh
		retn
; ---------------------------------------------------------------------------

loc_357:				; CODE XREF: _cmd_Options+7j
		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jnz	short loc_365
		mov	eax, 0FFFFFFFDh
		retn
; ---------------------------------------------------------------------------

loc_365:				; CODE XREF: _cmd_Options+15j
		push	eax
		push	offset _ssl_set_option_list
		push	1
		push	2Ch ; ','
		push	ecx
		mov	dword ptr [eax+1Ch], offset ?ssl_option_list@?1??cmd_Options@@9@9 ; `cmd_Options'::`2'::ssl_option_list
		mov	dword ptr [eax+20h], 9
		call	_CONF_parse_list
		add	esp, 14h
		retn
_cmd_Options	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 388h
; COMDAT (pick any)
		public ??_C@_0O@PGDEOOBD@SessionTicket?$AA@
; `string'
??_C@_0O@PGDEOOBD@SessionTicket?$AA@ db	'SessionTicket',0
					; DATA XREF: .rdata:`cmd_Options'::`2'::ssl_option_listo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 398h
; COMDAT (pick any)
		public ??_C@_0P@IEKKKMCP@EmptyFragments?$AA@
; `string'
??_C@_0P@IEKKKMCP@EmptyFragments?$AA@ db 'EmptyFragments',0 ; DATA XREF: .rdata:000000FCo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3A8h
; COMDAT (pick any)
		public ??_C@_04OIFKEPF@Bugs?$AA@
; `string'
??_C@_04OIFKEPF@Bugs?$AA@ db 'Bugs',0   ; DATA XREF: .rdata:0000010Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3B0h
; COMDAT (pick any)
		public ??_C@_0M@COKFBABJ@Compression?$AA@
; `string'
??_C@_0M@COKFBABJ@Compression?$AA@ db 'Compression',0 ; DATA XREF: .rdata:0000011Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3BCh
; COMDAT (pick any)
		public ??_C@_0BB@MGHJKEHO@ServerPreference?$AA@
; `string'
??_C@_0BB@MGHJKEHO@ServerPreference?$AA@ db 'ServerPreference',0
					; DATA XREF: .rdata:0000012Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3D0h
; COMDAT (pick any)
		public ??_C@_0BM@FKDDFINF@NoResumptionOnRenegotiation?$AA@
; `string'
??_C@_0BM@FKDDFINF@NoResumptionOnRenegotiation?$AA@ db 'NoResumptionOnRenegotiation',0
					; DATA XREF: .rdata:0000013Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3ECh
; COMDAT (pick any)
		public ??_C@_08IEICGGIK@DHSingle?$AA@
; `string'
??_C@_08IEICGGIK@DHSingle?$AA@ db 'DHSingle',0 ; DATA XREF: .rdata:0000014Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3F8h
; COMDAT (pick any)
		public ??_C@_0L@NLJOMKMG@ECDHSingle?$AA@
; `string'
??_C@_0L@NLJOMKMG@ECDHSingle?$AA@ db 'ECDHSingle',0 ; DATA XREF: .rdata:0000015Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 404h
; COMDAT (pick any)
		public ??_C@_0BK@KBKMKCAN@UnsafeLegacyRenegotiation?$AA@
; `string'
??_C@_0BK@KBKMKCAN@UnsafeLegacyRenegotiation?$AA@ db 'UnsafeLegacyRenegotiation',0
					; DATA XREF: .rdata:0000016Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 420h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cmd_Certificate proc near		; DATA XREF: .rdata:000001ECo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, 1
		test	byte ptr [esi],	20h
		jnz	short loc_436
		mov	eax, 0FFFFFFFEh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_436:				; CODE XREF: _cmd_Certificate+Dj
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_44C
		push	[esp+4+arg_4]
		push	eax
		call	_SSL_CTX_use_certificate_chain_file
		add	esp, 8
		mov	ecx, eax

loc_44C:				; CODE XREF: _cmd_Certificate+1Bj
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_464
		push	1
		push	[esp+8+arg_4]
		push	eax
		call	_SSL_use_certificate_file
		add	esp, 0Ch
		mov	ecx, eax

loc_464:				; CODE XREF: _cmd_Certificate+31j
		xor	eax, eax
		test	ecx, ecx
		pop	esi
		setnle	al
		retn
_cmd_Certificate endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 470h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cmd_PrivateKey	proc near		; DATA XREF: .rdata:000001FCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, 1
		test	byte ptr [esi],	20h
		jnz	short loc_486
		mov	eax, 0FFFFFFFEh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_486:				; CODE XREF: _cmd_PrivateKey+Dj
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_49E
		push	1
		push	[esp+8+arg_4]
		push	eax
		call	_SSL_CTX_use_PrivateKey_file
		add	esp, 0Ch
		mov	ecx, eax

loc_49E:				; CODE XREF: _cmd_PrivateKey+1Bj
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_4B6
		push	1
		push	[esp+8+arg_4]
		push	eax
		call	_SSL_use_PrivateKey_file
		add	esp, 0Ch
		mov	ecx, eax

loc_4B6:				; CODE XREF: _cmd_PrivateKey+33j
		xor	eax, eax
		test	ecx, ecx
		pop	esi
		setnle	al
		retn
_cmd_PrivateKey	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cmd_ServerInfoFile proc near		; DATA XREF: .rdata:0000020Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		mov	edx, 1
		mov	eax, [ecx]
		test	al, 20h
		jnz	short loc_4D5

loc_4CF:				; CODE XREF: _cmd_ServerInfoFile+17j
		mov	eax, 0FFFFFFFEh
		retn
; ---------------------------------------------------------------------------

loc_4D5:				; CODE XREF: _cmd_ServerInfoFile+Dj
		test	al, 8
		jz	short loc_4CF
		mov	eax, [ecx+0Ch]
		test	eax, eax
		jz	short loc_4EF
		push	[esp+arg_4]
		push	eax
		call	_SSL_CTX_use_serverinfo_file
		add	esp, 8
		mov	edx, eax

loc_4EF:				; CODE XREF: _cmd_ServerInfoFile+1Ej
		xor	eax, eax
		test	edx, edx
		setnle	al
		retn
_cmd_ServerInfoFile endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cmd_DHParameters proc near		; DATA XREF: .rdata:0000021Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	esi
		mov	esi, [esp+8+arg_0]
		xor	ebp, ebp
		test	byte ptr [esi],	20h
		jnz	short loc_50B
		pop	esi
		lea	eax, [ebp-2]
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_50B:				; CODE XREF: _cmd_DHParameters+Bj
		cmp	[esi+0Ch], ebp
		jnz	short loc_51D
		cmp	[esi+10h], ebp
		jnz	short loc_51D
		pop	esi
		mov	eax, 1
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_51D:				; CODE XREF: _cmd_DHParameters+16j
					; _cmd_DHParameters+1Bj
		push	ebx
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	short loc_59E
		push	[esp+0Ch+arg_4]
		push	3
		push	6Ch ; 'l'
		push	ebx
		call	_BIO_ctrl
		add	esp, 10h
		test	eax, eax
		jle	short loc_595
		push	edi
		push	0
		push	0
		push	0
		push	ebx
		call	_PEM_read_bio_DHparams
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_594
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_574
		push	edi
		push	0
		push	3
		push	eax
		call	_SSL_CTX_ctrl
		add	esp, 10h
		mov	ebp, eax

loc_574:				; CODE XREF: _cmd_DHParameters+6Aj
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short $end$16
		push	edi
		push	0
		push	3
		push	eax
		call	_SSL_ctrl
		add	esp, 10h
		mov	ebp, eax

$end$16:				; CODE XREF: _cmd_DHParameters+81j
		push	edi
		call	_DH_free
		add	esp, 4

loc_594:				; CODE XREF: _cmd_DHParameters+63j
		pop	edi

loc_595:				; CODE XREF: _cmd_DHParameters+4Dj
		push	ebx
		call	_BIO_free
		add	esp, 4

loc_59E:				; CODE XREF: _cmd_DHParameters+38j
		xor	eax, eax
		test	ebp, ebp
		pop	ebx
		pop	esi
		setnle	al
		pop	ebp
		retn
_cmd_DHParameters endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5ACh
; COMDAT (pick any)
		public ??_C@_0BE@BLMPOMHO@SignatureAlgorithms?$AA@
; `string'
??_C@_0BE@BLMPOMHO@SignatureAlgorithms?$AA@ db 'SignatureAlgorithms',0
					; DATA XREF: .rdata:00000180o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5C0h
; COMDAT (pick any)
		public ??_C@_07CPPFGBOH@sigalgs?$AA@
; `string'
??_C@_07CPPFGBOH@sigalgs?$AA@ db 'sigalgs',0 ; DATA XREF: .rdata:00000184o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5C8h
; COMDAT (pick any)
		public ??_C@_0BK@PFLLPPDA@ClientSignatureAlgorithms?$AA@
; `string'
??_C@_0BK@PFLLPPDA@ClientSignatureAlgorithms?$AA@ db 'ClientSignatureAlgorithms',0
					; DATA XREF: .rdata:00000190o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5E4h
; COMDAT (pick any)
		public ??_C@_0P@BBDFBCC@client_sigalgs?$AA@
; `string'
??_C@_0P@BBDFBCC@client_sigalgs?$AA@ db	'client_sigalgs',0 ; DATA XREF: .rdata:00000194o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5F4h
; COMDAT (pick any)
		public ??_C@_06MLNHLMAG@Curves?$AA@
; `string'
??_C@_06MLNHLMAG@Curves?$AA@ db	'Curves',0 ; DATA XREF: .rdata:000001A0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5FCh
; COMDAT (pick any)
		public ??_C@_06EGKIFJK@curves?$AA@
; `string'
??_C@_06EGKIFJK@curves?$AA@ db 'curves',0 ; DATA XREF: .rdata:000001A4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 604h
; COMDAT (pick any)
		public ??_C@_0P@MCMJEMBC@ECDHParameters?$AA@
; `string'
??_C@_0P@MCMJEMBC@ECDHParameters?$AA@ db 'ECDHParameters',0 ; DATA XREF: .rdata:000001B0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 614h
; COMDAT (pick any)
		public ??_C@_0M@FBFAECBG@named_curve?$AA@
; `string'
??_C@_0M@FBFAECBG@named_curve?$AA@ db 'named_curve',0 ; DATA XREF: .rdata:000001B4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 620h
; COMDAT (pick any)
		public ??_C@_0N@KOODPKGB@CipherString?$AA@
; `string'
??_C@_0N@KOODPKGB@CipherString?$AA@ db 'CipherString',0 ; DATA XREF: .rdata:000001C0o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 630h
; COMDAT (pick any)
		public ??_C@_06KDGDAFPH@cipher?$AA@
; `string'
??_C@_06KDGDAFPH@cipher?$AA@ db	'cipher',0 ; DATA XREF: .rdata:000001C4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 638h
; COMDAT (pick any)
		public ??_C@_08NAKOFPNG@Protocol?$AA@
; `string'
??_C@_08NAKOFPNG@Protocol?$AA@ db 'Protocol',0 ; DATA XREF: .rdata:000001D0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 644h
; COMDAT (pick any)
		public ??_C@_07KHIHFBFN@Options?$AA@
; `string'
??_C@_07KHIHFBFN@Options?$AA@ db 'Options',0 ; DATA XREF: .rdata:000001E0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 64Ch
; COMDAT (pick any)
		public ??_C@_0M@KDOEPPNO@Certificate?$AA@
; `string'
??_C@_0M@KDOEPPNO@Certificate?$AA@ db 'Certificate',0 ; DATA XREF: .rdata:000001F0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 658h
; COMDAT (pick any)
		public ??_C@_04PHJBACIC@cert?$AA@
; `string'
??_C@_04PHJBACIC@cert?$AA@ db 'cert',0  ; DATA XREF: .rdata:000001F4o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 660h
; COMDAT (pick any)
		public ??_C@_0L@JENBINIJ@PrivateKey?$AA@
; `string'
??_C@_0L@JENBINIJ@PrivateKey?$AA@ db 'PrivateKey',0 ; DATA XREF: .rdata:00000200o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 66Ch
; COMDAT (pick any)
		public ??_C@_03ICHNJLJF@key?$AA@
; `string'
??_C@_03ICHNJLJF@key?$AA@ dd 79656Bh	; DATA XREF: .rdata:00000204o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 670h
; COMDAT (pick any)
		public ??_C@_0P@BDBIGKFA@ServerInfoFile?$AA@
; `string'
??_C@_0P@BDBIGKFA@ServerInfoFile?$AA@ db 'ServerInfoFile',0 ; DATA XREF: .rdata:00000210o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 680h
; COMDAT (pick any)
		public ??_C@_0N@NOMKBOKL@DHParameters?$AA@
; `string'
??_C@_0N@NOMKBOKL@DHParameters?$AA@ db 'DHParameters',0 ; DATA XREF: .rdata:00000220o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 690h
; COMDAT (pick any)
		public ??_C@_07IBCFADID@dhparam?$AA@
; `string'
??_C@_07IBCFADID@dhparam?$AA@ db 'dhparam',0 ; DATA XREF: .rdata:00000224o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 698h
; COMDAT (pick any)
		public ??_C@_07LENPOHGJ@no_ssl2?$AA@
; `string'
??_C@_07LENPOHGJ@no_ssl2?$AA@ db 'no_ssl2',0
					; DATA XREF: .rdata:`ctrl_str_option'::`2'::ssl_option_singleo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6A0h
; COMDAT (pick any)
		public ??_C@_07KNMENGCI@no_ssl3?$AA@
; `string'
??_C@_07KNMENGCI@no_ssl3?$AA@ db 'no_ssl3',0 ; DATA XREF: .rdata:0000023Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6A8h
; COMDAT (pick any)
		public ??_C@_07DCNCMLDO@no_tls1?$AA@
; `string'
??_C@_07DCNCMLDO@no_tls1?$AA@ db 'no_tls1',0 ; DATA XREF: .rdata:0000024Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6B0h
; COMDAT (pick any)
		public ??_C@_09OMMOFMKI@no_tls1_1?$AA@
; `string'
??_C@_09OMMOFMKI@no_tls1_1?$AA@	db 'no_tls1_1',0 ; DATA XREF: .rdata:0000025Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6BCh
; COMDAT (pick any)
		public ??_C@_09MHODAPGL@no_tls1_2?$AA@
; `string'
??_C@_09MHODAPGL@no_tls1_2?$AA@	db 'no_tls1_2',0 ; DATA XREF: .rdata:0000026Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6C8h
; COMDAT (pick any)
		public ??_C@_04MPEEILPB@bugs?$AA@
; `string'
??_C@_04MPEEILPB@bugs?$AA@ db 'bugs',0  ; DATA XREF: .rdata:0000027Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6D0h
; COMDAT (pick any)
		public ??_C@_07NHNNPHM@no_comp?$AA@
; `string'
??_C@_07NHNNPHM@no_comp?$AA@ db	'no_comp',0 ; DATA XREF: .rdata:0000028Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6D8h
; COMDAT (pick any)
		public ??_C@_0M@GFJDILHJ@ecdh_single?$AA@
; `string'
??_C@_0M@GFJDILHJ@ecdh_single?$AA@ db 'ecdh_single',0 ; DATA XREF: .rdata:0000029Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6E4h
; COMDAT (pick any)
		public ??_C@_09NMKBGOFJ@no_ticket?$AA@
; `string'
??_C@_09NMKBGOFJ@no_ticket?$AA@	db 'no_ticket',0 ; DATA XREF: .rdata:000002ACo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6F0h
; COMDAT (pick any)
		public ??_C@_0L@KKCHEECL@serverpref?$AA@
; `string'
??_C@_0L@KKCHEECL@serverpref?$AA@ db 'serverpref',0 ; DATA XREF: .rdata:000002BCo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6FCh
; COMDAT (pick any)
		public ??_C@_0BF@HAMGDCBC@legacy_renegotiation?$AA@
; `string'
??_C@_0BF@HAMGDCBC@legacy_renegotiation?$AA@ db	'legacy_renegotiation',0
					; DATA XREF: .rdata:000002CCo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 714h
; COMDAT (pick any)
		public ??_C@_0BG@GIDFLGOF@legacy_server_connect?$AA@
; `string'
??_C@_0BG@GIDFLGOF@legacy_server_connect?$AA@ db 'legacy_server_connect',0
					; DATA XREF: .rdata:000002DCo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 72Ch
; COMDAT (pick any)
		public ??_C@_0BH@IOGIPIAJ@no_resumption_on_reneg?$AA@
; `string'
??_C@_0BH@IOGIPIAJ@no_resumption_on_reneg?$AA@ db 'no_resumption_on_reneg',0
					; DATA XREF: .rdata:000002ECo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 744h
; COMDAT (pick any)
		public ??_C@_0BJ@CMKHGIEM@no_legacy_server_connect?$AA@
; `string'
??_C@_0BJ@CMKHGIEM@no_legacy_server_connect?$AA@ db 'no_legacy_server_connect',0
					; DATA XREF: .rdata:000002FCo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 760h
; COMDAT (pick any)
		public ??_C@_06OLFOGHEN@strict?$AA@
; `string'
??_C@_06OLFOGHEN@strict?$AA@ db	'strict',0 ; DATA XREF: .rdata:0000030Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 768h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cmd_SignatureAlgorithms proc near	; DATA XREF: .rdata:_ssl_conf_cmdso

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		push	[esp+arg_4]
		push	0
		mov	eax, [ecx+10h]
		push	62h ; 'b'
		test	eax, eax
		jz	short loc_78E
		push	eax
		call	_SSL_ctrl
		mov	ecx, eax
		add	esp, 10h
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		retn
; ---------------------------------------------------------------------------

loc_78E:				; CODE XREF: _cmd_SignatureAlgorithms+11j
		push	dword ptr [ecx+0Ch]
		call	_SSL_CTX_ctrl
		mov	ecx, eax
		add	esp, 10h
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		retn
_cmd_SignatureAlgorithms endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cmd_ClientSignatureAlgorithms proc near ; DATA	XREF: .rdata:0000018Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		push	[esp+arg_4]
		push	0
		mov	eax, [ecx+10h]
		push	66h ; 'f'
		test	eax, eax
		jz	short loc_7CA
		push	eax
		call	_SSL_ctrl
		mov	ecx, eax
		add	esp, 10h
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		retn
; ---------------------------------------------------------------------------

loc_7CA:				; CODE XREF: _cmd_ClientSignatureAlgorithms+11j
		push	dword ptr [ecx+0Ch]
		call	_SSL_CTX_ctrl
		mov	ecx, eax
		add	esp, 10h
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		retn
_cmd_ClientSignatureAlgorithms endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cmd_Curves	proc near		; DATA XREF: .rdata:0000019Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		push	[esp+arg_4]
		push	0
		mov	eax, [ecx+10h]
		push	5Ch ; '\'
		test	eax, eax
		jz	short loc_806
		push	eax
		call	_SSL_ctrl
		mov	ecx, eax
		add	esp, 10h
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		retn
; ---------------------------------------------------------------------------

loc_806:				; CODE XREF: _cmd_Curves+11j
		push	dword ptr [ecx+0Ch]
		call	_SSL_CTX_ctrl
		mov	ecx, eax
		add	esp, 10h
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		retn
_cmd_Curves	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 81Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl cmd_ECDHParameters(int, char *Str1)
_cmd_ECDHParameters proc near		; DATA XREF: .rdata:000001ACo

arg_0		= dword	ptr  4
Str1		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	edi
		or	edi, 0FFFFFFFFh
		mov	eax, [ebx]
		lea	ebp, [edi+2]
		test	al, 8
		jnz	short loc_836
		lea	eax, [edi-1]
		pop	edi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_836:				; CODE XREF: _cmd_ECDHParameters+11j
		push	esi
		mov	esi, [esp+10h+Str1]
		test	al, 2
		jz	short loc_879
		cmp	byte ptr [esi],	2Bh ; '+'
		jnz	short loc_847
		mov	edi, ebp
		inc	esi

loc_847:				; CODE XREF: _cmd_ECDHParameters+26j
		cmp	byte ptr [esi],	2Dh ; '-'
		jnz	short loc_84F
		xor	edi, edi
		inc	esi

loc_84F:				; CODE XREF: _cmd_ECDHParameters+2Ej
		push	offset ??_C@_09DADDGAEC@automatic?$AA@ ; "automatic"
		push	esi		; Str1
		call	dword ptr ds:__imp___stricmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_869
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_8AF
		jmp	short loc_8AD
; ---------------------------------------------------------------------------

loc_869:				; CODE XREF: _cmd_ECDHParameters+44j
		cmp	edi, 0FFFFFFFFh
		jz	loc_8F9

loc_872:				; CODE XREF: _cmd_ECDHParameters+F5j
					; _cmd_ECDHParameters+108j
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_879:				; CODE XREF: _cmd_ECDHParameters+21j
		test	al, 1
		jz	short loc_8F9
		mov	ecx, offset ??_C@_04HAPDLBFF@auto?$AA@ ; "auto"
		mov	eax, esi

loc_884:				; CODE XREF: _cmd_ECDHParameters+82j
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_8A4
		test	dl, dl
		jz	short loc_8A0
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_8A4
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_884

loc_8A0:				; CODE XREF: _cmd_ECDHParameters+70j
		xor	eax, eax
		jmp	short loc_8A9
; ---------------------------------------------------------------------------

loc_8A4:				; CODE XREF: _cmd_ECDHParameters+6Cj
					; _cmd_ECDHParameters+78j
		sbb	eax, eax
		or	eax, 1

loc_8A9:				; CODE XREF: _cmd_ECDHParameters+86j
		test	eax, eax
		jnz	short loc_8F9

loc_8AD:				; CODE XREF: _cmd_ECDHParameters+4Bj
		mov	edi, ebp

loc_8AF:				; CODE XREF: _cmd_ECDHParameters+49j
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	short loc_8D2
		push	0
		push	edi
		push	5Eh ; '^'
		push	eax
		call	_SSL_CTX_ctrl
		add	esp, 10h
		mov	ebp, eax
		xor	eax, eax
		test	ebp, ebp
		setnle	al
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_8D2:				; CODE XREF: _cmd_ECDHParameters+98j
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	loc_95E
		push	0
		push	edi
		push	5Eh ; '^'
		push	eax
		call	_SSL_ctrl
		add	esp, 10h
		mov	ebp, eax
		xor	eax, eax
		test	ebp, ebp
		setnle	al
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_8F9:				; CODE XREF: _cmd_ECDHParameters+50j
					; _cmd_ECDHParameters+5Fj ...
		push	esi
		call	_EC_curve_nist2nid
		add	esp, 4
		test	eax, eax
		jnz	short loc_917
		push	esi
		call	_OBJ_sn2nid
		add	esp, 4
		test	eax, eax
		jz	loc_872

loc_917:				; CODE XREF: _cmd_ECDHParameters+E8j
		push	eax
		call	_EC_KEY_new_by_curve_name
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	loc_872
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	short loc_93E
		push	esi
		push	0
		push	4
		push	eax
		call	_SSL_CTX_ctrl
		jmp	short loc_950
; ---------------------------------------------------------------------------

loc_93E:				; CODE XREF: _cmd_ECDHParameters+113j
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_955
		push	esi
		push	0
		push	4
		push	eax
		call	_SSL_ctrl

loc_950:				; CODE XREF: _cmd_ECDHParameters+120j
		mov	ebp, eax
		add	esp, 10h

loc_955:				; CODE XREF: _cmd_ECDHParameters+127j
		push	esi
		call	_EC_KEY_free
		add	esp, 4

loc_95E:				; CODE XREF: _cmd_ECDHParameters+BBj
		pop	esi
		xor	eax, eax
		test	ebp, ebp
		pop	edi
		pop	ebp
		setnle	al
		pop	ebx
		retn
_cmd_ECDHParameters endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 96Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CONF_CTX_clear_flags
_SSL_CONF_CTX_clear_flags proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		not	ecx
		and	[eax], ecx
		mov	eax, [eax]
		retn
_SSL_CONF_CTX_clear_flags endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 97Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CONF_CTX_finish
_SSL_CONF_CTX_finish proc near
		mov	eax, 1
		retn
_SSL_CONF_CTX_finish endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 984h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CONF_CTX_free
_SSL_CONF_CTX_free proc	near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_9A6
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_99D
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_99D:				; CODE XREF: _SSL_CONF_CTX_free+Ej
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_9A6:				; CODE XREF: _SSL_CONF_CTX_free+7j
		pop	esi
		retn
_SSL_CONF_CTX_free endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CONF_CTX_new
_SSL_CONF_CTX_new proc near
		push	260h
		push	offset ??_C@_0BB@FBKEMNNI@?4?2ssl?2ssl_conf?4c?$AA@ ; ".\\ssl\\ssl_conf.c"
		push	24h ; '$'
		call	_CRYPTO_malloc
		add	esp, 0Ch
		test	eax, eax
		jz	short locret_9FE
		mov	dword ptr [eax], 0
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax+8], 0
		mov	dword ptr [eax+10h], 0
		mov	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax+14h], 0
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+1Ch], 0
		mov	dword ptr [eax+20h], 0

locret_9FE:				; CODE XREF: _SSL_CONF_CTX_new+16j
		retn
_SSL_CONF_CTX_new endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A00h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CONF_CTX_set1_prefix
_SSL_CONF_CTX_set1_prefix proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		xor	esi, esi
		test	eax, eax
		jz	short loc_A1C
		push	eax
		call	_BUF_strdup
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_A1C
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_A1C:				; CODE XREF: _SSL_CONF_CTX_set1_prefix+9j
					; _SSL_CONF_CTX_set1_prefix+18j
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [edi+4]
		test	eax, eax
		jz	short loc_A31
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_A31:				; CODE XREF: _SSL_CONF_CTX_set1_prefix+26j
		mov	[edi+4], esi
		test	esi, esi
		jz	short loc_A54
		lea	ecx, [esi+1]
		nop	dword ptr [eax+eax+00h]

loc_A40:				; CODE XREF: _SSL_CONF_CTX_set1_prefix+45j
		mov	al, [esi]
		inc	esi
		test	al, al
		jnz	short loc_A40
		sub	esi, ecx
		mov	eax, 1
		mov	[edi+8], esi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_A54:				; CODE XREF: _SSL_CONF_CTX_set1_prefix+36j
		mov	dword ptr [edi+8], 0
		mov	eax, 1
		pop	edi
		pop	esi
		retn
_SSL_CONF_CTX_set1_prefix endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A64h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CONF_CTX_set_flags
_SSL_CONF_CTX_set_flags	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		or	[ecx], eax
		mov	eax, [ecx]
		retn
_SSL_CONF_CTX_set_flags	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A74h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CONF_CTX_set_ssl
_SSL_CONF_CTX_set_ssl proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	[ecx+10h], edx
		mov	dword ptr [ecx+0Ch], 0
		test	edx, edx
		jz	short loc_AA0
		lea	eax, [edx+100h]
		mov	[ecx+14h], eax
		mov	eax, [edx+98h]
		add	eax, 38h ; '8'
		mov	[ecx+18h], eax
		retn
; ---------------------------------------------------------------------------

loc_AA0:				; CODE XREF: _SSL_CONF_CTX_set_ssl+14j
		mov	dword ptr [ecx+14h], 0
		mov	dword ptr [ecx+18h], 0
		retn
_SSL_CONF_CTX_set_ssl endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0AB0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CONF_CTX_set_ssl_ctx
_SSL_CONF_CTX_set_ssl_ctx proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	[ecx+0Ch], edx
		mov	dword ptr [ecx+10h], 0
		test	edx, edx
		jz	short loc_ADC
		lea	eax, [edx+0A4h]
		mov	[ecx+14h], eax
		mov	eax, [edx+0B0h]
		add	eax, 38h ; '8'
		mov	[ecx+18h], eax
		retn
; ---------------------------------------------------------------------------

loc_ADC:				; CODE XREF: _SSL_CONF_CTX_set_ssl_ctx+14j
		mov	dword ptr [ecx+14h], 0
		mov	dword ptr [ecx+18h], 0
		retn
_SSL_CONF_CTX_set_ssl_ctx endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0AECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl SSL_CONF_cmd(int,	char *Str2, int)
		public _SSL_CONF_cmd
_SSL_CONF_cmd	proc near		; CODE XREF: _SSL_CONF_cmd_argv+46p

arg_0		= dword	ptr  4
Str2		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		cmp	[esp+Str2], 0
		jnz	short loc_B14
		push	20Bh
		push	offset ??_C@_0BB@FBKEMNNI@?4?2ssl?2ssl_conf?4c?$AA@ ; ".\\ssl\\ssl_conf.c"
		push	181h
		push	14Eh
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_B14:				; CODE XREF: _SSL_CONF_cmd+5j
		push	esi
		mov	esi, [esp+4+arg_0]
		lea	eax, [esp+4+Str2]
		push	eax
		push	esi
		call	_ssl_conf_cmd_skip_prefix
		add	esp, 8
		test	eax, eax
		jnz	short loc_B32
		mov	eax, 0FFFFFFFEh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_B32:				; CODE XREF: _SSL_CONF_cmd+3Dj
		push	edi
		mov	edi, [esp+8+Str2]
		push	edi		; Str2
		push	esi		; int
		call	_ssl_conf_cmd_lookup
		add	esp, 8
		test	eax, eax
		jz	short loc_BB0
		push	ebx
		mov	ebx, [esp+0Ch+arg_8]
		test	ebx, ebx
		jnz	short loc_B55
		lea	eax, [ebx-3]
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_B55:				; CODE XREF: _SSL_CONF_cmd+60j
		mov	eax, [eax]
		push	ebx
		push	esi
		call	eax
		add	esp, 8
		test	eax, eax
		jle	short loc_B6B
		pop	ebx
		pop	edi
		mov	eax, 2
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_B6B:				; CODE XREF: _SSL_CONF_cmd+74j
		cmp	eax, 0FFFFFFFEh
		jnz	short loc_B74
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_B74:				; CODE XREF: _SSL_CONF_cmd+82j
		test	byte ptr [esi],	10h
		jz	short loc_BAA
		push	21Eh
		push	offset ??_C@_0BB@FBKEMNNI@?4?2ssl?2ssl_conf?4c?$AA@ ; ".\\ssl\\ssl_conf.c"
		push	180h
		push	14Eh
		push	14h
		call	_ERR_put_error
		push	ebx
		push	offset ??_C@_08OMICEKMJ@?0?5value?$DN?$AA@ ; ",	value="
		push	edi
		push	offset ??_C@_04LDFABOD@cmd?$DN?$AA@ ; "cmd="
		push	4
		call	_ERR_add_error_data
		add	esp, 28h

loc_BAA:				; CODE XREF: _SSL_CONF_cmd+8Bj
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_BB0:				; CODE XREF: _SSL_CONF_cmd+57j
		test	byte ptr [esi],	1
		jz	short loc_BDB
		push	esi		; int
		push	0FFFFFFFFh	; MaxCount
		push	edi		; Str2
		mov	dword ptr [esi+1Ch], offset ?ssl_option_single@?1??ctrl_str_option@@9@9	; `ctrl_str_option'::`2'::ssl_option_single
		mov	dword ptr [esi+20h], 0Fh
		call	_ssl_set_option_list
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_BDB
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_BDB:				; CODE XREF: _SSL_CONF_cmd+C7j
					; _SSL_CONF_cmd+E5j
		test	byte ptr [esi],	10h
		jz	short loc_C0B
		push	22Ah
		push	offset ??_C@_0BB@FBKEMNNI@?4?2ssl?2ssl_conf?4c?$AA@ ; ".\\ssl\\ssl_conf.c"
		push	182h
		push	14Eh
		push	14h
		call	_ERR_put_error
		push	edi
		push	offset ??_C@_04LDFABOD@cmd?$DN?$AA@ ; "cmd="
		push	2
		call	_ERR_add_error_data
		add	esp, 20h

loc_C0B:				; CODE XREF: _SSL_CONF_cmd+F2j
		pop	edi
		mov	eax, 0FFFFFFFEh
		pop	esi
		retn
_SSL_CONF_cmd	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C14h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CONF_cmd_argv
_SSL_CONF_cmd_argv proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_4]
		push	edi
		test	esi, esi
		jz	short loc_C2D
		mov	eax, [esi]
		test	eax, eax
		jnz	short loc_C2B

loc_C25:				; CODE XREF: _SSL_CONF_cmd_argv:loc_C2Bj
					; _SSL_CONF_cmd_argv+23j ...
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_C2B:				; CODE XREF: _SSL_CONF_cmd_argv+Fj
		jle	short loc_C25

loc_C2D:				; CODE XREF: _SSL_CONF_cmd_argv+9j
		mov	edi, [esp+0Ch+arg_8]
		mov	eax, [edi]
		mov	ebx, [eax]
		test	ebx, ebx
		jz	short loc_C25
		test	esi, esi
		jz	short loc_C46
		cmp	dword ptr [esi], 1
		jg	short loc_C46
		xor	edx, edx
		jmp	short loc_C49
; ---------------------------------------------------------------------------

loc_C46:				; CODE XREF: _SSL_CONF_cmd_argv+27j
					; _SSL_CONF_cmd_argv+2Cj
		mov	edx, [eax+4]

loc_C49:				; CODE XREF: _SSL_CONF_cmd_argv+30j
		mov	ecx, [esp+0Ch+arg_0]
		push	edx		; int
		push	ebx		; Str2
		push	ecx		; int
		mov	eax, [ecx]
		and	eax, 0FFFFFFFDh
		or	eax, 1
		mov	[ecx], eax
		call	_SSL_CONF_cmd
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_C79
		lea	ecx, ds:0[eax*4]
		add	[edi], ecx
		test	esi, esi
		jz	short loc_C86
		sub	[esi], eax
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_C79:				; CODE XREF: _SSL_CONF_cmd_argv+50j
		cmp	eax, 0FFFFFFFEh
		jz	short loc_C25
		or	ecx, 0FFFFFFFFh
		test	eax, eax
		cmovz	eax, ecx

loc_C86:				; CODE XREF: _SSL_CONF_cmd_argv+5Dj
		pop	edi
		pop	esi
		pop	ebx
		retn
_SSL_CONF_cmd_argv endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C8Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl SSL_CONF_cmd_value_type(int, char	*Str2)
		public _SSL_CONF_cmd_value_type
_SSL_CONF_cmd_value_type proc near

arg_0		= dword	ptr  4
Str2		= dword	ptr  8

		lea	eax, [esp+Str2]
		push	eax
		push	[esp+4+arg_0]
		call	_ssl_conf_cmd_skip_prefix
		add	esp, 8
		test	eax, eax
		jz	short loc_CB9
		push	[esp+Str2]	; Str2
		push	[esp+4+arg_0]	; int
		call	_ssl_conf_cmd_lookup
		add	esp, 8
		test	eax, eax
		jz	short loc_CB9
		mov	eax, [eax+0Ch]
		retn
; ---------------------------------------------------------------------------

loc_CB9:				; CODE XREF: _SSL_CONF_cmd_value_type+13j
					; _SSL_CONF_cmd_value_type+27j
		xor	eax, eax
		retn
_SSL_CONF_cmd_value_type endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0CBCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl ctrl_str_option(int, char	*Str2)
_ctrl_str_option proc near

arg_0		= dword	ptr  4
Str2		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	eax		; int
		push	0FFFFFFFFh	; MaxCount
		push	[esp+8+Str2]	; Str2
		mov	dword ptr [eax+1Ch], offset ?ssl_option_single@?1??ctrl_str_option@@9@9	; `ctrl_str_option'::`2'::ssl_option_single
		mov	dword ptr [eax+20h], 0Fh
		call	_ssl_set_option_list
		add	esp, 0Ch
		retn
_ctrl_str_option endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0CE0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl ssl_conf_cmd_lookup(int, char *Str2)
_ssl_conf_cmd_lookup proc near		; CODE XREF: _SSL_CONF_cmd+4Dp
					; _SSL_CONF_cmd_value_type+1Dp

arg_0		= dword	ptr  4
Str2		= dword	ptr  8

		push	ebp
		mov	ebp, [esp+4+Str2]
		test	ebp, ebp
		jnz	short loc_CED
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_CED:				; CODE XREF: _ssl_conf_cmd_lookup+7j
		push	esi
		push	edi
		xor	edi, edi
		mov	esi, offset _ssl_conf_cmds
		push	ebx

loc_CF7:				; CODE XREF: _ssl_conf_cmd_lookup+7Bj
		mov	eax, [esp+10h+arg_0]
		mov	ebx, [eax]
		test	bl, 1
		jz	short loc_D39
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_D39
		mov	ecx, ebp
		nop	dword ptr [eax+eax+00h]

loc_D10:				; CODE XREF: _ssl_conf_cmd_lookup+4Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_D30
		test	dl, dl
		jz	short loc_D2C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_D30
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_D10

loc_D2C:				; CODE XREF: _ssl_conf_cmd_lookup+38j
		xor	eax, eax
		jmp	short loc_D35
; ---------------------------------------------------------------------------

loc_D30:				; CODE XREF: _ssl_conf_cmd_lookup+34j
					; _ssl_conf_cmd_lookup+40j
		sbb	eax, eax
		or	eax, 1

loc_D35:				; CODE XREF: _ssl_conf_cmd_lookup+4Ej
		test	eax, eax
		jz	short loc_D64

loc_D39:				; CODE XREF: _ssl_conf_cmd_lookup+20j
					; _ssl_conf_cmd_lookup+27j
		test	bl, 2
		jz	short loc_D54
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_D54
		push	ebp		; Str2
		push	eax		; Str1
		call	dword ptr ds:__imp___stricmp
		add	esp, 8
		test	eax, eax
		jz	short loc_D64

loc_D54:				; CODE XREF: _ssl_conf_cmd_lookup+5Cj
					; _ssl_conf_cmd_lookup+63j
		inc	edi
		add	esi, 10h
		cmp	edi, 0Bh
		jb	short loc_CF7
		pop	ebx
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_D64:				; CODE XREF: _ssl_conf_cmd_lookup+57j
					; _ssl_conf_cmd_lookup+72j
		pop	ebx
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
_ssl_conf_cmd_lookup endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D6Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ssl_conf_cmd_skip_prefix proc near	; CODE XREF: _SSL_CONF_cmd+33p
					; _SSL_CONF_cmd_value_type+9p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_4]
		test	edi, edi
		jz	loc_DFE
		mov	edx, [edi]
		test	edx, edx
		jz	short loc_DFE
		push	esi
		mov	esi, [esp+8+arg_0]
		cmp	dword ptr [esi+4], 0
		jz	short loc_DDF
		mov	ecx, edx
		push	ebp
		lea	ebp, [ecx+1]

loc_D90:				; CODE XREF: _ssl_conf_cmd_skip_prefix+29j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_D90
		mov	eax, [esi+8]
		sub	ecx, ebp
		pop	ebp
		cmp	ecx, eax
		jbe	short loc_DF9
		test	byte ptr [esi],	1
		jz	short loc_DB8
		push	eax		; MaxCount
		push	dword ptr [esi+4] ; Str2
		push	edx		; Str1
		call	dword ptr ds:__imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_DF9

loc_DB8:				; CODE XREF: _ssl_conf_cmd_skip_prefix+38j
		test	byte ptr [esi],	2
		jz	short loc_DD2
		push	dword ptr [esi+8] ; MaxCount
		push	dword ptr [esi+4] ; Str2
		push	dword ptr [edi]	; Str1
		call	dword ptr ds:__imp___strnicmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_DF9

loc_DD2:				; CODE XREF: _ssl_conf_cmd_skip_prefix+4Fj
		mov	eax, [esi+8]
		add	[edi], eax

loc_DD7:				; CODE XREF: _ssl_conf_cmd_skip_prefix+76j
		pop	esi
		mov	eax, 1
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_DDF:				; CODE XREF: _ssl_conf_cmd_skip_prefix+1Cj
		test	byte ptr [esi],	1
		jz	short loc_DD7
		cmp	byte ptr [edx],	2Dh ; '-'
		jnz	short loc_DF9
		inc	edx
		cmp	byte ptr [edx],	0
		jz	short loc_DF9
		pop	esi
		mov	[edi], edx
		mov	eax, 1
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_DF9:				; CODE XREF: _ssl_conf_cmd_skip_prefix+33j
					; _ssl_conf_cmd_skip_prefix+4Aj ...
		pop	esi
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_DFE:				; CODE XREF: _ssl_conf_cmd_skip_prefix+7j
					; _ssl_conf_cmd_skip_prefix+11j
		xor	eax, eax
		pop	edi
		retn
_ssl_conf_cmd_skip_prefix endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E04h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl ssl_match_option(int, int, char *Str2, size_t MaxCount, int)
_ssl_match_option proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Str2		= dword	ptr  0Ch
MaxCount	= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [edi]
		and	eax, [esi+8]
		test	al, 0Ch
		jz	short loc_E4F
		mov	eax, [esp+8+MaxCount]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_E54
		mov	ecx, [esp+8+Str2]
		mov	eax, [esi]

loc_E26:				; CODE XREF: _ssl_match_option+3Cj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_E46
		test	dl, dl
		jz	short loc_E42
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_E46
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_E26

loc_E42:				; CODE XREF: _ssl_match_option+2Aj
		xor	eax, eax
		jmp	short loc_E4B
; ---------------------------------------------------------------------------

loc_E46:				; CODE XREF: _ssl_match_option+26j
					; _ssl_match_option+32j
		sbb	eax, eax
		or	eax, 1

loc_E4B:				; CODE XREF: _ssl_match_option+40j
		test	eax, eax
		jz	short loc_E6D

loc_E4F:				; CODE XREF: _ssl_match_option+11j
					; _ssl_match_option+53j ...
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_E54:				; CODE XREF: _ssl_match_option+1Aj
		cmp	[esi+4], eax
		jnz	short loc_E4F
		push	eax		; MaxCount
		push	[esp+0Ch+Str2]	; Str2
		push	dword ptr [esi]	; Str1
		call	dword ptr ds:__imp___strnicmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_E4F

loc_E6D:				; CODE XREF: _ssl_match_option+49j
		mov	ecx, [edi+14h]
		test	ecx, ecx
		jz	short loc_EA0
		mov	edx, [esi+8]
		mov	eax, [esp+8+arg_10]
		test	dl, 1
		jz	short loc_E83
		xor	eax, 1

loc_E83:				; CODE XREF: _ssl_match_option+7Aj
		test	dl, 2
		jz	short loc_E8B
		mov	ecx, [edi+18h]

loc_E8B:				; CODE XREF: _ssl_match_option+82j
		test	eax, eax
		mov	eax, [esi+0Ch]
		jz	short loc_E9C
		or	[ecx], eax
		mov	eax, 1
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_E9C:				; CODE XREF: _ssl_match_option+8Cj
		not	eax
		and	[ecx], eax

loc_EA0:				; CODE XREF: _ssl_match_option+6Ej
		pop	edi
		mov	eax, 1
		pop	esi
		retn
_ssl_match_option endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0EA8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl ssl_set_option_list(char *Str2, size_t MaxCount, int)
_ssl_set_option_list proc near		; CODE XREF: _SSL_CONF_cmd+DBp
					; _ctrl_str_option+19p
					; DATA XREF: ...

var_4		= dword	ptr -4
Str2		= dword	ptr  4
MaxCount	= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		push	ebx
		mov	ebx, [esp+8+Str2]
		mov	eax, 1
		mov	[esp+8+var_4], eax
		test	ebx, ebx
		jnz	short loc_EC9
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_EC9:				; CODE XREF: _ssl_set_option_list+1Aj
		push	edi
		mov	edi, [esp+0Ch+MaxCount]
		cmp	edi, 0FFFFFFFFh
		jz	short loc_EF1
		mov	al, [ebx]
		cmp	al, 2Bh	; '+'
		jnz	short loc_EE5
		inc	ebx
		mov	[esp+0Ch+var_4], 1
		dec	edi
		jmp	short loc_EF1
; ---------------------------------------------------------------------------

loc_EE5:				; CODE XREF: _ssl_set_option_list+2Fj
		cmp	al, 2Dh	; '-'
		jnz	short loc_EF1
		inc	ebx
		dec	edi
		xor	eax, eax
		mov	[esp+0Ch+var_4], eax

loc_EF1:				; CODE XREF: _ssl_set_option_list+29j
					; _ssl_set_option_list+3Bj ...
		push	ebp
		mov	ebp, [esp+10h+arg_8]
		push	esi
		mov	[esp+14h+Str2],	0
		cmp	dword ptr [ebp+20h], 0
		mov	esi, [ebp+1Ch]
		jbe	short loc_F69

loc_F08:				; CODE XREF: _ssl_set_option_list+BFj
		mov	eax, [esi+8]
		and	eax, [ebp+0]
		test	al, 0Ch
		jz	short loc_F58
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_F42
		mov	eax, [esi]
		mov	ecx, ebx

loc_F1B:				; CODE XREF: _ssl_set_option_list+8Dj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_F3B
		test	dl, dl
		jz	short loc_F37
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_F3B
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_F1B

loc_F37:				; CODE XREF: _ssl_set_option_list+7Bj
		xor	eax, eax
		jmp	short loc_F54
; ---------------------------------------------------------------------------

loc_F3B:				; CODE XREF: _ssl_set_option_list+77j
					; _ssl_set_option_list+83j
		sbb	eax, eax
		or	eax, 1
		jmp	short loc_F54
; ---------------------------------------------------------------------------

loc_F42:				; CODE XREF: _ssl_set_option_list+6Dj
		cmp	[esi+4], edi
		jnz	short loc_F58
		push	edi		; MaxCount
		push	ebx		; Str2
		push	dword ptr [esi]	; Str1
		call	dword ptr ds:__imp___strnicmp
		add	esp, 0Ch

loc_F54:				; CODE XREF: _ssl_set_option_list+91j
					; _ssl_set_option_list+98j
		test	eax, eax
		jz	short loc_F71

loc_F58:				; CODE XREF: _ssl_set_option_list+68j
					; _ssl_set_option_list+9Dj
		mov	eax, [esp+14h+Str2]
		add	esi, 10h
		inc	eax
		mov	[esp+14h+Str2],	eax
		cmp	eax, [ebp+20h]
		jb	short loc_F08

loc_F69:				; CODE XREF: _ssl_set_option_list+5Ej
		pop	esi
		pop	ebp
		pop	edi
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_F71:				; CODE XREF: _ssl_set_option_list+AEj
		mov	ecx, [ebp+14h]
		test	ecx, ecx
		jz	short loc_FA5
		mov	eax, [esi+8]
		mov	edx, [esp+14h+var_4]
		test	al, 1
		jz	short loc_F86
		xor	edx, 1

loc_F86:				; CODE XREF: _ssl_set_option_list+D9j
		test	al, 2
		jz	short loc_F8D
		mov	ecx, [ebp+18h]

loc_F8D:				; CODE XREF: _ssl_set_option_list+E0j
		mov	eax, [esi+0Ch]
		test	edx, edx
		jz	short loc_FA1
		or	[ecx], eax
		mov	eax, 1
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_FA1:				; CODE XREF: _ssl_set_option_list+EAj
		not	eax
		and	[ecx], eax

loc_FA5:				; CODE XREF: _ssl_set_option_list+CEj
		pop	esi
		pop	ebp
		pop	edi
		mov	eax, 1
		pop	ebx
		pop	ecx
		retn
_ssl_set_option_list endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FB0h
; COMDAT (pick any)
		public ??_C@_09DADDGAEC@automatic?$AA@
; char `string'[]
??_C@_09DADDGAEC@automatic?$AA@	db 'automatic',0 ; DATA XREF: _cmd_ECDHParameters:loc_84Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FBCh
; COMDAT (pick any)
		public ??_C@_04HAPDLBFF@auto?$AA@
; `string'
??_C@_04HAPDLBFF@auto?$AA@ db 'auto',0  ; DATA XREF: _cmd_ECDHParameters+61o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FC4h
; COMDAT (pick any)
		public ??_C@_0BB@FBKEMNNI@?4?2ssl?2ssl_conf?4c?$AA@
; `string'
??_C@_0BB@FBKEMNNI@?4?2ssl?2ssl_conf?4c?$AA@ db	'.\ssl\ssl_conf.c',0
					; DATA XREF: _SSL_CONF_CTX_new+5o
					; _SSL_CONF_cmd+Co ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FD8h
; COMDAT (pick any)
		public ??_C@_08OMICEKMJ@?0?5value?$DN?$AA@
; `string'
??_C@_08OMICEKMJ@?0?5value?$DN?$AA@ db ', value=',0 ; DATA XREF: _SSL_CONF_cmd+A9o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FE4h
; COMDAT (pick any)
		public ??_C@_04LDFABOD@cmd?$DN?$AA@
; `string'
??_C@_04LDFABOD@cmd?$DN?$AA@ db	'cmd=',0 ; DATA XREF: _SSL_CONF_cmd+AFo
					; _SSL_CONF_cmd+110o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; int __cdecl __stricmp(const char *Str1, const	char *Str2)
		extrn __imp___stricmp:near ; CODE XREF:	_cmd_ECDHParameters+39p
					; _ssl_conf_cmd_lookup+67p
					; DATA XREF: ...
; int __cdecl _strncmp(const char *Str1, const char *Str2, size_t MaxCount)
		extrn __imp__strncmp:near ; CODE XREF: _ssl_conf_cmd_skip_prefix+3Fp
					; DATA XREF: _ssl_conf_cmd_skip_prefix+3Fr
; int __cdecl __strnicmp(const char *Str1, const char *Str2, size_t MaxCount)
		extrn __imp___strnicmp:near ; CODE XREF: _ssl_conf_cmd_skip_prefix+59p
					; _ssl_match_option+5Cp ...
		extrn _BUF_strdup:near	; CODE XREF: _SSL_CONF_CTX_set1_prefix+Cp
		extrn _CRYPTO_malloc:near ; CODE XREF: _SSL_CONF_CTX_new+Cp
		extrn _CRYPTO_free:near	; CODE XREF: _SSL_CONF_CTX_free+11p
					; _SSL_CONF_CTX_free+1Ap ...
		extrn _BIO_s_file:near	; CODE XREF: _cmd_DHParameters+26p
		extrn _BIO_new:near	; CODE XREF: _cmd_DHParameters+2Cp
		extrn _BIO_free:near	; CODE XREF: _cmd_DHParameters+9Ep
		extrn _BIO_ctrl:near	; CODE XREF: _cmd_DHParameters+43p
		extrn _DH_free:near	; CODE XREF: _cmd_DHParameters+94p
		extrn _ERR_put_error:near ; CODE XREF: _SSL_CONF_cmd+1Dp
					; _SSL_CONF_cmd+A3p ...
		extrn _ERR_add_error_data:near ; CODE XREF: _SSL_CONF_cmd+B6p
					; _SSL_CONF_cmd+117p
		extrn _OBJ_sn2nid:near	; CODE XREF: _cmd_ECDHParameters+EBp
		extrn _EC_curve_nist2nid:near ;	CODE XREF: _cmd_ECDHParameters+DEp
		extrn _EC_KEY_new_by_curve_name:near ; CODE XREF: _cmd_ECDHParameters+FCp
		extrn _EC_KEY_free:near	; CODE XREF: _cmd_ECDHParameters+13Ap
		extrn _PEM_read_bio_DHparams:near ; CODE XREF: _cmd_DHParameters+57p
		extrn _SSL_CTX_set_cipher_list:near ; CODE XREF: _cmd_CipherString+16p
		extrn _SSL_set_cipher_list:near	; CODE XREF: _cmd_CipherString+2Dp
		extrn _SSL_CTX_use_serverinfo_file:near	; CODE XREF: _cmd_ServerInfoFile+25p
		extrn _SSL_use_PrivateKey_file:near ; CODE XREF: _cmd_PrivateKey+3Cp
		extrn _SSL_use_certificate_file:near ; CODE XREF: _cmd_Certificate+3Ap
		extrn _SSL_CTX_use_PrivateKey_file:near	; CODE XREF: _cmd_PrivateKey+24p
		extrn _SSL_CTX_use_certificate_chain_file:near
					; CODE XREF: _cmd_Certificate+22p
		extrn _SSL_ctrl:near	; CODE XREF: _cmd_DHParameters+89p
					; _cmd_SignatureAlgorithms+14p	...
		extrn _SSL_CTX_ctrl:near ; CODE	XREF: _cmd_DHParameters+72p
					; _cmd_SignatureAlgorithms+29p	...
		extrn _CONF_parse_list:near ; CODE XREF: _cmd_Protocol+39p
					; _cmd_Options+36p
		extrn __chkstk:near	; CODE XREF: _ssl_set_option_list+5p


		end
