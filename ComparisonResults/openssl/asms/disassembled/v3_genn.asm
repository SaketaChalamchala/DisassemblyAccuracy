;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	3FDCE1314366D2F042F82168EBE2934D
; Input	CRC32 :	9F96E11B

; File Name   :	C:\compspace\Diff\openssl\obj\v3_genn.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
_GENERAL_NAME_ch_tt dd offset off_88	; DATA XREF: .rdata:000000BCo
		align 8
		dd 4
		dd offset ??_C@_0M@FGIBMCEL@d?4otherName?$AA@ ;	"d.otherName"
		dd offset _OTHERNAME_it
		dd offset off_88
		dd 1, 4
		dd offset ??_C@_0N@MMCCMIPN@d?4rfc822Name?$AA@ ; "d.rfc822Name"
		dd offset _ASN1_IA5STRING_it
		dd offset off_88
		dd 2, 4
		dd offset ??_C@_09HIBJABFB@d?4dNSName?$AA@ ; "d.dNSName"
		dd offset _ASN1_IA5STRING_it
		dd offset off_88
		dd 3, 4
		dd offset ??_C@_0O@NKHOODFK@d?4x400Address?$AA@	; "d.x400Address"
		dd offset _ASN1_SEQUENCE_it
		dd offset dword_90
		dd 2 dup(4)
		dd offset ??_C@_0BA@JLDFBFLN@d?4directoryName?$AA@ ; "d.directoryName"
		dd offset _X509_NAME_it
		dd offset off_88
		dd 5, 4
		dd offset ??_C@_0P@OBCPPLOL@d?4ediPartyName?$AA@ ; "d.ediPartyName"
		dd offset _EDIPARTYNAME_it
		dd offset off_88
		dd 6, 4
		dd offset ??_C@_0BM@CMCMADCA@d?4uniformResourceIdentifier?$AA@ ; "d.uniformResourceIdentifier"
off_88		dd offset _ASN1_IA5STRING_it ; DATA XREF: .rdata:_GENERAL_NAME_ch_tto
					; .rdata:00000014o ...
		dd offset off_88
dword_90	dd 7, 4			; DATA XREF: .rdata:00000050o
					; .rdata:00000114o
		dd offset ??_C@_0M@PANAALJB@d?4iPAddress?$AA@ ;	"d.iPAddress"
		dd offset _ASN1_OCTET_STRING_it
		dd offset off_88
		dd 8, 4
		dd offset ??_C@_0P@KIENIEMD@d?4registeredID?$AA@ ; "d.registeredID"
		dd offset _ASN1_OBJECT_it
; `GENERAL_NAME_it'::`2'::local_it
?local_it@?1??GENERAL_NAME_it@@9@9 dd 2, 0 ; DATA XREF:	_GENERAL_NAME_ito
					; _GENERAL_NAME_freeo ...
		dd offset _GENERAL_NAME_ch_tt
		dd 9, 0
		dd 8
		dd offset ??_C@_0N@JCNPGCGM@GENERAL_NAME?$AA@ ;	"GENERAL_NAME"
_GENERAL_NAMES_item_tt dd 4, 2 dup(0)	; DATA XREF: .rdata:000000ECo
		dd offset ??_C@_0N@CJKIBDLK@GeneralNames?$AA@ ;	"GeneralNames"
		dd offset _GENERAL_NAME_it
; `GENERAL_NAMES_it'::`2'::local_it
?local_it@?1??GENERAL_NAMES_it@@9@9 dd 0 ; DATA	XREF: _GENERAL_NAMES_freeo
					; _GENERAL_NAMES_ito ...
		dd 0FFFFFFFFh
		dd offset _GENERAL_NAMES_item_tt
		dd 3 dup(0)
		dd offset ??_C@_0O@NFAAPMIG@GENERAL_NAMES?$AA@ ; "GENERAL_NAMES"
_OTHERNAME_seq_tt dd 3 dup(0)		; DATA XREF: .rdata:00000130o
		dd offset ??_C@_07EEDOJOAA@type_id?$AA@	; "type_id"
		dd offset _ASN1_OBJECT_it
		dd offset dword_90
		dd 0
		dd 4
		dd offset ??_C@_05MFEJDJP@value?$AA@ ; "value"
		dd offset _ASN1_ANY_it
; `OTHERNAME_it'::`2'::local_it
?local_it@?1??OTHERNAME_it@@9@9	dd 1, 10h ; DATA XREF: _OTHERNAME_ito
					; _GENERAL_NAME_set0_othernameo ...
		dd offset _OTHERNAME_seq_tt
		dd 2, 0
		dd 8
		dd offset ??_C@_09MAFAINAH@OTHERNAME?$AA@ ; "OTHERNAME"
_EDIPARTYNAME_seq_tt dd	offset off_88+1	; DATA XREF: .rdata:00000174o
		align 10h
		dd offset ??_C@_0N@KBFEHHDO@nameAssigner?$AA@ ;	"nameAssigner"
		dd offset _DIRECTORYSTRING_it
		dd offset off_88+1
		dd 1, 4
		dd offset ??_C@_09EHIHAIPF@partyName?$AA@ ; "partyName"
		dd offset _DIRECTORYSTRING_it
; `EDIPARTYNAME_it'::`2'::local_it
?local_it@?1??EDIPARTYNAME_it@@9@9 dd 1, 10h ; DATA XREF: _EDIPARTYNAME_ito
					; _EDIPARTYNAME_freeo ...
		dd offset _EDIPARTYNAME_seq_tt
		dd 2, 0
		dd 8
		dd offset ??_C@_0N@GEILLNKP@EDIPARTYNAME?$AA@ ;	"EDIPARTYNAME"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 188h
; COMDAT (pick any)
		public ??_C@_0M@FGIBMCEL@d?4otherName?$AA@
; `string'
??_C@_0M@FGIBMCEL@d?4otherName?$AA@ db 'd.otherName',0 ; DATA XREF: .rdata:0000000Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 194h
; COMDAT (pick any)
		public ??_C@_0N@MMCCMIPN@d?4rfc822Name?$AA@
; `string'
??_C@_0N@MMCCMIPN@d?4rfc822Name?$AA@ db	'd.rfc822Name',0 ; DATA XREF: .rdata:00000020o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A4h
; COMDAT (pick any)
		public ??_C@_09HIBJABFB@d?4dNSName?$AA@
; `string'
??_C@_09HIBJABFB@d?4dNSName?$AA@ db 'd.dNSName',0 ; DATA XREF: .rdata:00000034o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B0h
; COMDAT (pick any)
		public ??_C@_0O@NKHOODFK@d?4x400Address?$AA@
; `string'
??_C@_0O@NKHOODFK@d?4x400Address?$AA@ db 'd.x400Address',0 ; DATA XREF: .rdata:00000048o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1C0h
; COMDAT (pick any)
		public ??_C@_0BA@JLDFBFLN@d?4directoryName?$AA@
; `string'
??_C@_0BA@JLDFBFLN@d?4directoryName?$AA@ db 'd.directoryName',0
					; DATA XREF: .rdata:0000005Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1D0h
; COMDAT (pick any)
		public ??_C@_0P@OBCPPLOL@d?4ediPartyName?$AA@
; `string'
??_C@_0P@OBCPPLOL@d?4ediPartyName?$AA@ db 'd.ediPartyName',0 ; DATA XREF: .rdata:00000070o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1E0h
; COMDAT (pick any)
		public ??_C@_0BM@CMCMADCA@d?4uniformResourceIdentifier?$AA@
; `string'
??_C@_0BM@CMCMADCA@d?4uniformResourceIdentifier?$AA@ db	'd.uniformResourceIdentifier',0
					; DATA XREF: .rdata:00000084o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1FCh
; COMDAT (pick any)
		public ??_C@_0M@PANAALJB@d?4iPAddress?$AA@
; `string'
??_C@_0M@PANAALJB@d?4iPAddress?$AA@ db 'd.iPAddress',0 ; DATA XREF: .rdata:00000098o
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 208h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _GENERAL_NAME_it
_GENERAL_NAME_it proc near		; DATA XREF: .rdata:000000E0o
		mov	eax, offset ?local_it@?1??GENERAL_NAME_it@@9@9 ; `GENERAL_NAME_it'::`2'::local_it
		retn
_GENERAL_NAME_it endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 210h
; COMDAT (pick any)
		public ??_C@_0P@KIENIEMD@d?4registeredID?$AA@
; `string'
??_C@_0P@KIENIEMD@d?4registeredID?$AA@ db 'd.registeredID',0 ; DATA XREF: .rdata:000000ACo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 220h
; COMDAT (pick any)
		public ??_C@_0N@JCNPGCGM@GENERAL_NAME?$AA@
; `string'
??_C@_0N@JCNPGCGM@GENERAL_NAME?$AA@ db 'GENERAL_NAME',0 ; DATA XREF: .rdata:000000CCo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 230h
; COMDAT (pick any)
		public ??_C@_0N@CJKIBDLK@GeneralNames?$AA@
; `string'
??_C@_0N@CJKIBDLK@GeneralNames?$AA@ db 'GeneralNames',0 ; DATA XREF: .rdata:000000DCo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 240h
; COMDAT (pick any)
		public ??_C@_0O@NFAAPMIG@GENERAL_NAMES?$AA@
; `string'
??_C@_0O@NFAAPMIG@GENERAL_NAMES?$AA@ db	'GENERAL_NAMES',0 ; DATA XREF: .rdata:000000FCo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 250h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OTHERNAME_it
_OTHERNAME_it	proc near		; DATA XREF: .rdata:00000010o
		mov	eax, offset ?local_it@?1??OTHERNAME_it@@9@9 ; `OTHERNAME_it'::`2'::local_it
		retn
_OTHERNAME_it	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 258h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EDIPARTYNAME_it
_EDIPARTYNAME_it proc near		; DATA XREF: .rdata:00000074o
		mov	eax, offset ?local_it@?1??EDIPARTYNAME_it@@9@9 ; `EDIPARTYNAME_it'::`2'::local_it
		retn
_EDIPARTYNAME_it endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 260h
; COMDAT (pick any)
		public ??_C@_07EEDOJOAA@type_id?$AA@
; `string'
??_C@_07EEDOJOAA@type_id?$AA@ db 'type_id',0 ; DATA XREF: .rdata:0000010Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 268h
; COMDAT (pick any)
		public ??_C@_05MFEJDJP@value?$AA@
; `string'
??_C@_05MFEJDJP@value?$AA@ db 'value',0 ; DATA XREF: .rdata:00000120o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 270h
; COMDAT (pick any)
		public ??_C@_09MAFAINAH@OTHERNAME?$AA@
; `string'
??_C@_09MAFAINAH@OTHERNAME?$AA@	db 'OTHERNAME',0 ; DATA XREF: .rdata:00000140o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 27Ch
; COMDAT (pick any)
		public ??_C@_0N@KBFEHHDO@nameAssigner?$AA@
; `string'
??_C@_0N@KBFEHHDO@nameAssigner?$AA@ db 'nameAssigner',0 ; DATA XREF: .rdata:00000150o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 28Ch
; COMDAT (pick any)
		public ??_C@_09EHIHAIPF@partyName?$AA@
; `string'
??_C@_09EHIHAIPF@partyName?$AA@	db 'partyName',0 ; DATA XREF: .rdata:00000164o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 298h
; COMDAT (pick any)
		public ??_C@_0N@GEILLNKP@EDIPARTYNAME?$AA@
; `string'
??_C@_0N@GEILLNKP@EDIPARTYNAME?$AA@ db 'EDIPARTYNAME',0 ; DATA XREF: .rdata:00000184o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EDIPARTYNAME_free
_EDIPARTYNAME_free proc	near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??EDIPARTYNAME_it@@9@9 ; `EDIPARTYNAME_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_EDIPARTYNAME_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EDIPARTYNAME_new
_EDIPARTYNAME_new proc near
		push	offset ?local_it@?1??EDIPARTYNAME_it@@9@9 ; `EDIPARTYNAME_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_EDIPARTYNAME_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2CCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _GENERAL_NAMES_free
_GENERAL_NAMES_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??GENERAL_NAMES_it@@9@9 ; `GENERAL_NAMES_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_GENERAL_NAMES_free endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _GENERAL_NAMES_it
_GENERAL_NAMES_it proc near
		mov	eax, offset ?local_it@?1??GENERAL_NAMES_it@@9@9	; `GENERAL_NAMES_it'::`2'::local_it
		retn
_GENERAL_NAMES_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _GENERAL_NAMES_new
_GENERAL_NAMES_new proc	near
		push	offset ?local_it@?1??GENERAL_NAMES_it@@9@9 ; `GENERAL_NAMES_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_GENERAL_NAMES_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _GENERAL_NAME_cmp
_GENERAL_NAME_cmp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		or	edx, 0FFFFFFFFh
		push	esi
		test	eax, eax
		jz	loc_394
		mov	ecx, [esp+4+arg_4]
		test	ecx, ecx
		jz	loc_394
		mov	esi, [eax]
		cmp	esi, [ecx]
		jnz	short loc_394
		cmp	esi, 8		; switch 9 cases
		ja	short loc_390	; jumptable 0000031F default case
		jmp	ds:$LN15[esi*4]	; switch jump
; ---------------------------------------------------------------------------

$LN6:					; CODE XREF: _GENERAL_NAME_cmp+27j
					; DATA XREF: .text$mn:$LN15o
		push	dword ptr [ecx+4] ; jumptable 0000031F cases 3,5
		push	dword ptr [eax+4]
		call	_ASN1_TYPE_cmp
		add	esp, 8
		mov	edx, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN7:					; CODE XREF: _GENERAL_NAME_cmp+27j
					; DATA XREF: .text$mn:$LN15o
		push	dword ptr [ecx+4] ; jumptable 0000031F case 0
		push	dword ptr [eax+4]
		call	_OTHERNAME_cmp
		add	esp, 8
		mov	edx, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN8:					; CODE XREF: _GENERAL_NAME_cmp+27j
					; DATA XREF: .text$mn:$LN15o
		push	dword ptr [ecx+4] ; jumptable 0000031F cases 1,2,6
		push	dword ptr [eax+4]
		call	_ASN1_STRING_cmp
		add	esp, 8
		mov	edx, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN9:					; CODE XREF: _GENERAL_NAME_cmp+27j
					; DATA XREF: .text$mn:$LN15o
		push	dword ptr [ecx+4] ; jumptable 0000031F case 4
		push	dword ptr [eax+4]
		call	_X509_NAME_cmp
		add	esp, 8
		mov	edx, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN10:					; CODE XREF: _GENERAL_NAME_cmp+27j
					; DATA XREF: .text$mn:$LN15o
		push	dword ptr [ecx+4] ; jumptable 0000031F case 7
		push	dword ptr [eax+4]
		call	_ASN1_OCTET_STRING_cmp
		add	esp, 8
		mov	edx, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN11:					; CODE XREF: _GENERAL_NAME_cmp+27j
					; DATA XREF: .text$mn:$LN15o
		push	dword ptr [ecx+4] ; jumptable 0000031F case 8
		push	dword ptr [eax+4]
		call	_OBJ_cmp
		mov	edx, eax
		add	esp, 8

loc_390:				; CODE XREF: _GENERAL_NAME_cmp+25j
		mov	eax, edx	; jumptable 0000031F default case
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_394:				; CODE XREF: _GENERAL_NAME_cmp+Aj
					; _GENERAL_NAME_cmp+16j ...
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
_GENERAL_NAME_cmp endp

; ---------------------------------------------------------------------------
		align 4
$LN15		dd offset $LN7		; DATA XREF: _GENERAL_NAME_cmp+27r
		dd offset $LN8		; jump table for switch	statement
		dd offset $LN8
		dd offset $LN6
		dd offset $LN9
		dd offset $LN6
		dd offset $LN8
		dd offset $LN10
		dd offset $LN11
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _GENERAL_NAME_dup
_GENERAL_NAME_dup proc near

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		push	offset _d2i_GENERAL_NAME
		push	offset _i2d_GENERAL_NAME
		call	_ASN1_dup
		add	esp, 0Ch
		retn
_GENERAL_NAME_dup endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _GENERAL_NAME_free
_GENERAL_NAME_free proc	near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??GENERAL_NAME_it@@9@9 ; `GENERAL_NAME_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_GENERAL_NAME_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _GENERAL_NAME_get0_otherName
_GENERAL_NAME_get0_otherName proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		cmp	dword ptr [ecx], 0
		jz	short loc_3F8
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_3F8:				; CODE XREF: _GENERAL_NAME_get0_otherName+7j
		mov	edx, [esp+arg_4]
		test	edx, edx
		jz	short loc_407
		mov	eax, [ecx+4]
		mov	eax, [eax]
		mov	[edx], eax

loc_407:				; CODE XREF: _GENERAL_NAME_get0_otherName+12j
		mov	edx, [esp+arg_8]
		test	edx, edx
		jz	short loc_417
		mov	eax, [ecx+4]
		mov	eax, [eax+4]
		mov	[edx], eax

loc_417:				; CODE XREF: _GENERAL_NAME_get0_otherName+21j
		mov	eax, 1
		retn
_GENERAL_NAME_get0_otherName endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 420h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _GENERAL_NAME_get0_value
_GENERAL_NAME_get0_value proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		test	edx, edx
		jz	short loc_430
		mov	eax, [ecx]
		mov	[edx], eax

loc_430:				; CODE XREF: _GENERAL_NAME_get0_value+Aj
		mov	eax, [ecx]
		cmp	eax, 8		; switch 9 cases
		ja	short loc_442	; jumptable 00000437 default case
		jmp	ds:$LN14[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN5:					; CODE XREF: _GENERAL_NAME_get0_value+17j
					; DATA XREF: .text$mn:$LN14o
		mov	eax, [ecx+4]	; jumptable 00000437 cases 0-8
		retn
; ---------------------------------------------------------------------------

loc_442:				; CODE XREF: _GENERAL_NAME_get0_value+15j
		xor	eax, eax	; jumptable 00000437 default case
		retn
_GENERAL_NAME_get0_value endp

; ---------------------------------------------------------------------------
		align 4
$LN14		dd offset $LN5		; DATA XREF: _GENERAL_NAME_get0_value+17r
		dd offset $LN5		; jump table for switch	statement
		dd offset $LN5
		dd offset $LN5
		dd offset $LN5
		dd offset $LN5
		dd offset $LN5
		dd offset $LN5
		dd offset $LN5
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 46Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _GENERAL_NAME_new
_GENERAL_NAME_new proc near
		push	offset ?local_it@?1??GENERAL_NAME_it@@9@9 ; `GENERAL_NAME_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_GENERAL_NAME_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 47Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _GENERAL_NAME_set0_othername
_GENERAL_NAME_set0_othername proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??OTHERNAME_it@@9@9 ; `OTHERNAME_it'::`2'::local_it
		call	_ASN1_item_new
		mov	ecx, eax
		add	esp, 4
		test	ecx, ecx
		jnz	short loc_490
		retn
; ---------------------------------------------------------------------------

loc_490:				; CODE XREF: _GENERAL_NAME_set0_othername+11j
		mov	eax, [esp+arg_4]
		mov	[ecx], eax
		mov	eax, [esp+arg_8]
		mov	[ecx+4], eax
		mov	eax, [esp+arg_0]
		mov	[eax+4], ecx
		mov	dword ptr [eax], 0
		mov	eax, 1
		retn
_GENERAL_NAME_set0_othername endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _GENERAL_NAME_set0_value
_GENERAL_NAME_set0_value proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		cmp	edx, 8		; switch 9 cases
		ja	short loc_4CB	; jumptable 000004BD default case
		jmp	ds:$LN12[edx*4]	; switch jump
; ---------------------------------------------------------------------------

$LN9_0:					; CODE XREF: _GENERAL_NAME_set0_value+Dj
					; DATA XREF: .text$mn:$LN12o
		mov	eax, [esp+arg_8] ; jumptable 000004BD cases 0-8
		mov	[ecx+4], eax

loc_4CB:				; CODE XREF: _GENERAL_NAME_set0_value+Bj
		mov	[ecx], edx	; jumptable 000004BD default case
		retn
_GENERAL_NAME_set0_value endp

; ---------------------------------------------------------------------------
		align 10h
$LN12		dd offset $LN9_0	; DATA XREF: _GENERAL_NAME_set0_value+Dr
		dd offset $LN9_0	; jump table for switch	statement
		dd offset $LN9_0
		dd offset $LN9_0
		dd offset $LN9_0
		dd offset $LN9_0
		dd offset $LN9_0
		dd offset $LN9_0
		dd offset $LN9_0
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OTHERNAME_cmp
_OTHERNAME_cmp	proc near		; CODE XREF: _GENERAL_NAME_cmp+46p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		test	esi, esi
		jz	short loc_527
		mov	edi, [esp+8+arg_4]
		test	edi, edi
		jz	short loc_527
		push	dword ptr [edi]
		push	dword ptr [esi]
		call	_OBJ_cmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_52A
		push	dword ptr [edi+4]
		push	dword ptr [esi+4]
		call	_ASN1_TYPE_cmp
		add	esp, 8
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_527:				; CODE XREF: _OTHERNAME_cmp+8j
					; _OTHERNAME_cmp+10j
		or	eax, 0FFFFFFFFh

loc_52A:				; CODE XREF: _OTHERNAME_cmp+20j
		pop	edi
		pop	esi
		retn
_OTHERNAME_cmp	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 530h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OTHERNAME_free
_OTHERNAME_free	proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??OTHERNAME_it@@9@9 ; `OTHERNAME_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_OTHERNAME_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 544h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OTHERNAME_new
_OTHERNAME_new	proc near
		push	offset ?local_it@?1??OTHERNAME_it@@9@9 ; `OTHERNAME_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_OTHERNAME_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 554h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_EDIPARTYNAME
_d2i_EDIPARTYNAME proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??EDIPARTYNAME_it@@9@9 ; `EDIPARTYNAME_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_EDIPARTYNAME endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 570h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_GENERAL_NAME
_d2i_GENERAL_NAME proc near		; DATA XREF: _GENERAL_NAME_dup+4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??GENERAL_NAME_it@@9@9 ; `GENERAL_NAME_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_GENERAL_NAME endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 58Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_GENERAL_NAMES
_d2i_GENERAL_NAMES proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??GENERAL_NAMES_it@@9@9 ; `GENERAL_NAMES_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_GENERAL_NAMES endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_OTHERNAME
_d2i_OTHERNAME	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??OTHERNAME_it@@9@9 ; `OTHERNAME_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_OTHERNAME	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_EDIPARTYNAME
_i2d_EDIPARTYNAME proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??EDIPARTYNAME_it@@9@9 ; `EDIPARTYNAME_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_EDIPARTYNAME endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_GENERAL_NAME
_i2d_GENERAL_NAME proc near		; DATA XREF: _GENERAL_NAME_dup+9o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??GENERAL_NAME_it@@9@9 ; `GENERAL_NAME_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_GENERAL_NAME endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_GENERAL_NAMES
_i2d_GENERAL_NAMES proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??GENERAL_NAMES_it@@9@9 ; `GENERAL_NAMES_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_GENERAL_NAMES endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 60Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_OTHERNAME
_i2d_OTHERNAME	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??OTHERNAME_it@@9@9 ; `OTHERNAME_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_OTHERNAME	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ASN1_OCTET_STRING_it:near ; DATA	XREF: .rdata:0000009Co
		extrn _DIRECTORYSTRING_it:near ; DATA XREF: .rdata:00000154o
					; .rdata:00000168o
		extrn _ASN1_SEQUENCE_it:near ; DATA XREF: .rdata:0000004Co
		extrn _ASN1_IA5STRING_it:near ;	DATA XREF: .rdata:00000024o
					; .rdata:00000038o ...
		extrn _ASN1_ANY_it:near	; DATA XREF: .rdata:00000124o
		extrn _X509_NAME_it:near ; DATA	XREF: .rdata:00000060o
		extrn _ASN1_OBJECT_it:near ; DATA XREF:	.rdata:000000B0o
					; .rdata:00000110o
		extrn _ASN1_TYPE_cmp:near ; CODE XREF: _GENERAL_NAME_cmp+34p
					; _OTHERNAME_cmp+28p
		extrn _ASN1_STRING_cmp:near ; CODE XREF: _GENERAL_NAME_cmp+58p
		extrn _ASN1_OCTET_STRING_cmp:near ; CODE XREF: _GENERAL_NAME_cmp+7Cp
		extrn _ASN1_dup:near	; CODE XREF: _GENERAL_NAME_dup+Ep
		extrn _ASN1_item_new:near ; CODE XREF: _EDIPARTYNAME_new+5p
					; _GENERAL_NAMES_new+5p ...
		extrn _ASN1_item_free:near ; CODE XREF:	_EDIPARTYNAME_free+9p
					; _GENERAL_NAMES_free+9p ...
		extrn _ASN1_item_d2i:near ; CODE XREF: _d2i_EDIPARTYNAME+11p
					; _d2i_GENERAL_NAME+11p ...
		extrn _ASN1_item_i2d:near ; CODE XREF: _i2d_EDIPARTYNAME+Dp
					; _i2d_GENERAL_NAME+Dp	...
		extrn _OBJ_cmp:near	; CODE XREF: _GENERAL_NAME_cmp+8Ep
					; _OTHERNAME_cmp+16p
		extrn _X509_NAME_cmp:near ; CODE XREF: _GENERAL_NAME_cmp+6Ap


		end
