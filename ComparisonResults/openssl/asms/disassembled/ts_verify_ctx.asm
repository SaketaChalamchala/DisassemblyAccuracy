;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	CA1012EA4DE1622372A008005E2A8C4B
; Input	CRC32 :	EBEAD3AD

; File Name   :	C:\compspace\Diff\openssl\obj\ts_verify_ctx.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_REQ_to_TS_VERIFY_CTX
_TS_REQ_to_TS_VERIFY_CTX proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		mov	esi, edi
		test	ebx, ebx
		jnz	short loc_25
		push	offset ??_C@_0M@DDDKLOPN@req?5?$CB?$DN?5NULL?$AA@ ; "req != NULL"
		push	79h ; 'y'
		push	offset ??_C@_0BM@DAAJKAPE@?4?2crypto?2ts?2ts_verify_ctx?4c?$AA@	; ".\\crypto\\ts\\ts_verify_ctx.c"
		call	_OpenSSLDie
		add	esp, 0Ch

loc_25:					; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+Fj
		test	edi, edi
		jz	short loc_6E
		push	edi
		call	_TS_VERIFY_CTX_cleanup
		add	esp, 4

loc_32:					; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+B0j
		push	ebp
		push	ebx
		mov	dword ptr [esi], 6Eh ; 'n'
		call	_TS_REQ_get_policy_id
		add	esp, 4
		test	eax, eax
		jz	short loc_B8
		push	eax
		call	_OBJ_dup
		add	esp, 4
		mov	[esi+0Ch], eax
		test	eax, eax
		jnz	short loc_BB

$err$27:				; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+D7j
					; _TS_REQ_to_TS_VERIFY_CTX+106j ...
		test	edi, edi
		jz	loc_14D
		push	edi
		call	_TS_VERIFY_CTX_cleanup
		add	esp, 4
		xor	eax, eax
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6E:					; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+27j
		push	43h ; 'C'
		push	offset ??_C@_0BM@DAAJKAPE@?4?2crypto?2ts?2ts_verify_ctx?4c?$AA@	; ".\\crypto\\ts\\ts_verify_ctx.c"
		push	28h ; '('
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_96
		xorps	xmm0, xmm0
		movups	xmmword	ptr [esi], xmm0
		movups	xmmword	ptr [esi+10h], xmm0
		movq	qword ptr [esi+20h], xmm0
		jmp	short loc_AE
; ---------------------------------------------------------------------------

loc_96:					; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+83j
		push	47h ; 'G'
		push	offset ??_C@_0BM@DAAJKAPE@?4?2crypto?2ts?2ts_verify_ctx?4c?$AA@	; ".\\crypto\\ts\\ts_verify_ctx.c"
		push	41h ; 'A'
		push	90h ; 'ê'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h

loc_AE:					; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+94j
		test	esi, esi
		jnz	short loc_32
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_B8:					; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+44j
		and	dword ptr [esi], 0FFFFFFFBh

loc_BB:					; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+54j
		push	ebx
		call	_TS_REQ_get_msg_imprint
		mov	ebp, eax
		push	ebp
		call	_TS_MSG_IMPRINT_get_algo
		push	eax
		call	_X509_ALGOR_dup
		add	esp, 0Ch
		mov	[esi+10h], eax
		test	eax, eax
		jz	$err$27
		push	ebp
		call	_TS_MSG_IMPRINT_get_msg
		mov	ebp, eax
		push	ebp
		call	_ASN1_STRING_length
		push	90h ; 'ê'
		push	offset ??_C@_0BM@DAAJKAPE@?4?2crypto?2ts?2ts_verify_ctx?4c?$AA@	; ".\\crypto\\ts\\ts_verify_ctx.c"
		push	eax
		mov	[esi+18h], eax
		call	_CRYPTO_malloc
		add	esp, 14h
		mov	[esi+14h], eax
		test	eax, eax
		jz	$err$27
		push	dword ptr [esi+18h] ; Size
		push	ebp
		call	_ASN1_STRING_data
		add	esp, 4
		push	eax		; Src
		push	dword ptr [esi+14h] ; Dst
		call	_memcpy
		push	ebx
		call	_TS_REQ_get_nonce
		add	esp, 10h
		test	eax, eax
		jz	short loc_143
		push	eax
		call	_ASN1_INTEGER_dup
		add	esp, 4
		mov	[esi+20h], eax
		test	eax, eax
		jnz	short loc_146
		jmp	$err$27
; ---------------------------------------------------------------------------

loc_143:				; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+12Cj
		and	dword ptr [esi], 0FFFFFFDFh

loc_146:				; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+13Cj
		pop	ebp
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_14D:				; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+58j
		push	esi
		call	_TS_VERIFY_CTX_cleanup
		push	esi
		call	_CRYPTO_free
		add	esp, 8
		xor	eax, eax
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		retn
_TS_REQ_to_TS_VERIFY_CTX endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 164h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_VERIFY_CTX_cleanup
_TS_VERIFY_CTX_cleanup proc near	; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+2Ap
					; _TS_REQ_to_TS_VERIFY_CTX+5Fp	...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1C4
		push	dword ptr [esi+4]
		call	_X509_STORE_free
		push	offset _X509_free
		push	dword ptr [esi+8]
		call	_sk_pop_free
		push	dword ptr [esi+0Ch]
		call	_ASN1_OBJECT_free
		push	dword ptr [esi+10h]
		call	_X509_ALGOR_free
		push	dword ptr [esi+14h]
		call	_CRYPTO_free
		push	dword ptr [esi+1Ch]
		call	_BIO_free_all
		push	dword ptr [esi+20h]
		call	_ASN1_INTEGER_free
		push	dword ptr [esi+24h]
		call	_GENERAL_NAME_free
		xorps	xmm0, xmm0
		add	esp, 24h
		movups	xmmword	ptr [esi], xmm0
		movups	xmmword	ptr [esi+10h], xmm0
		movq	qword ptr [esi+20h], xmm0

loc_1C4:				; CODE XREF: _TS_VERIFY_CTX_cleanup+7j
		pop	esi
		retn
_TS_VERIFY_CTX_cleanup endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_VERIFY_CTX_free
_TS_VERIFY_CTX_free proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1E0
		push	esi
		call	_TS_VERIFY_CTX_cleanup
		push	esi
		call	_CRYPTO_free
		add	esp, 8

loc_1E0:				; CODE XREF: _TS_VERIFY_CTX_free+7j
		pop	esi
		retn
_TS_VERIFY_CTX_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_VERIFY_CTX_init
_TS_VERIFY_CTX_init proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_201
		push	offset ??_C@_0M@DHOKCPKP@ctx?5?$CB?$DN?5NULL?$AA@ ; "ctx != NULL"
		push	4Dh ; 'M'
		push	offset ??_C@_0BM@DAAJKAPE@?4?2crypto?2ts?2ts_verify_ctx?4c?$AA@	; ".\\crypto\\ts\\ts_verify_ctx.c"
		call	_OpenSSLDie
		add	esp, 0Ch

loc_201:				; CODE XREF: _TS_VERIFY_CTX_init+7j
		xorps	xmm0, xmm0
		movups	xmmword	ptr [esi], xmm0
		movups	xmmword	ptr [esi+10h], xmm0
		movq	qword ptr [esi+20h], xmm0
		pop	esi
		retn
_TS_VERIFY_CTX_init endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 214h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_VERIFY_CTX_new
_TS_VERIFY_CTX_new proc	near
		push	esi
		push	43h ; 'C'
		push	offset ??_C@_0BM@DAAJKAPE@?4?2crypto?2ts?2ts_verify_ctx?4c?$AA@	; ".\\crypto\\ts\\ts_verify_ctx.c"
		push	28h ; '('
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_23D
		xorps	xmm0, xmm0
		movups	xmmword	ptr [esi], xmm0
		movups	xmmword	ptr [esi+10h], xmm0
		movq	qword ptr [esi+20h], xmm0
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_23D:				; CODE XREF: _TS_VERIFY_CTX_new+16j
		push	47h ; 'G'
		push	offset ??_C@_0BM@DAAJKAPE@?4?2crypto?2ts?2ts_verify_ctx?4c?$AA@	; ".\\crypto\\ts\\ts_verify_ctx.c"
		push	41h ; 'A'
		push	90h ; 'ê'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, esi
		pop	esi
		retn
_TS_VERIFY_CTX_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 25Ch
; COMDAT (pick any)
		public ??_C@_0BM@DAAJKAPE@?4?2crypto?2ts?2ts_verify_ctx?4c?$AA@
; `string'
??_C@_0BM@DAAJKAPE@?4?2crypto?2ts?2ts_verify_ctx?4c?$AA@ db '.\crypto\ts\ts_verify_ctx.c',0
					; DATA XREF: _TS_REQ_to_TS_VERIFY_CTX+18o
					; _TS_REQ_to_TS_VERIFY_CTX+70o	...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 278h
; COMDAT (pick any)
		public ??_C@_0M@DHOKCPKP@ctx?5?$CB?$DN?5NULL?$AA@
; `string'
??_C@_0M@DHOKCPKP@ctx?5?$CB?$DN?5NULL?$AA@ db 'ctx != NULL',0
					; DATA XREF: _TS_VERIFY_CTX_init+9o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 284h
; COMDAT (pick any)
		public ??_C@_0M@DDDKLOPN@req?5?$CB?$DN?5NULL?$AA@
; `string'
??_C@_0M@DDDKLOPN@req?5?$CB?$DN?5NULL?$AA@ db 'req != NULL',0
					; DATA XREF: _TS_REQ_to_TS_VERIFY_CTX+11o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _sk_pop_free:near	; CODE XREF: _TS_VERIFY_CTX_cleanup+19p
		extrn _CRYPTO_malloc:near ; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+77p
					; _TS_REQ_to_TS_VERIFY_CTX+F9p	...
		extrn _CRYPTO_free:near	; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+154p
					; _TS_VERIFY_CTX_cleanup+31p ...
		extrn _OpenSSLDie:near	; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+1Dp
					; _TS_VERIFY_CTX_init+15p
		extrn _BIO_free_all:near ; CODE	XREF: _TS_VERIFY_CTX_cleanup+39p
		extrn _ERR_put_error:near ; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+A6p
					; _TS_VERIFY_CTX_new+39p
		extrn _ASN1_OBJECT_free:near ; CODE XREF: _TS_VERIFY_CTX_cleanup+21p
		extrn _ASN1_STRING_length:near ; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+E6p
		extrn _ASN1_STRING_data:near ; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+110p
		extrn _ASN1_INTEGER_free:near ;	CODE XREF: _TS_VERIFY_CTX_cleanup+41p
		extrn _ASN1_INTEGER_dup:near ; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+12Fp
		extrn _OBJ_dup:near	; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+47p
		extrn _X509_STORE_free:near ; CODE XREF: _TS_VERIFY_CTX_cleanup+Cp
		extrn _X509_ALGOR_dup:near ; CODE XREF:	_TS_REQ_to_TS_VERIFY_CTX+CAp
		extrn _X509_ALGOR_free:near ; CODE XREF: _TS_VERIFY_CTX_cleanup+29p
		extrn _X509_free:near	; DATA XREF: _TS_VERIFY_CTX_cleanup+11o
		extrn _GENERAL_NAME_free:near ;	CODE XREF: _TS_VERIFY_CTX_cleanup+49p
		extrn _TS_REQ_get_msg_imprint:near ; CODE XREF:	_TS_REQ_to_TS_VERIFY_CTX+BCp
		extrn _TS_MSG_IMPRINT_get_algo:near
					; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+C4p
		extrn _TS_MSG_IMPRINT_get_msg:near ; CODE XREF:	_TS_REQ_to_TS_VERIFY_CTX+DEp
		extrn _TS_REQ_get_policy_id:near ; CODE	XREF: _TS_REQ_to_TS_VERIFY_CTX+3Ap
		extrn _TS_REQ_get_nonce:near ; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+122p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _TS_REQ_to_TS_VERIFY_CTX+11Cp


		end
