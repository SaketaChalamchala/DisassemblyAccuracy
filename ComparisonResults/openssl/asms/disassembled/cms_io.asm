;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	72CC7270C17CAF324AC30072C67D916C
; Input	CRC32 :	A784E16C

; File Name   :	C:\compspace\Diff\openssl\obj\cms_io.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_new_CMS
_BIO_new_CMS	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		call	_CMS_ContentInfo_it
		push	eax
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_BIO_new_NDEF
		add	esp, 0Ch
		retn
_BIO_new_CMS	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 18h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_stream
_CMS_stream	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+arg_4]
		call	_CMS_get0_content
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_53
		cmp	dword ptr [esi], 0
		jnz	short loc_57
		call	_ASN1_OCTET_STRING_new
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_57
		push	4Ch ; 'L'
		push	offset ??_C@_0BG@BBPCNJCA@?4?2crypto?2cms?2cms_io?4c?$AA@ ; ".\\crypto\\cms\\cms_io.c"
		push	41h ; 'A'
		push	9Bh ; '›'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h

loc_53:					; CODE XREF: _CMS_stream+11j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_57:					; CODE XREF: _CMS_stream+16j
					; _CMS_stream+21j
		mov	eax, [esi]
		or	dword ptr [eax+0Ch], 10h
		mov	eax, [esi]
		and	dword ptr [eax+0Ch], 0FFFFFFDFh
		mov	ecx, [esi]
		mov	eax, [esp+4+arg_0]
		add	ecx, 8
		pop	esi
		mov	[eax], ecx
		mov	eax, 1
		retn
_CMS_stream	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 78h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_CMS
_PEM_read_CMS	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_03LOMOMHDE@CMS?$AA@ ; `string'
		push	offset _d2i_CMS_ContentInfo
		call	_PEM_ASN1_read
		add	esp, 18h
		retn
_PEM_read_CMS	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio_CMS
_PEM_read_bio_CMS proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_03LOMOMHDE@CMS?$AA@ ; `string'
		push	offset _d2i_CMS_ContentInfo
		call	_PEM_ASN1_read_bio
		add	esp, 18h
		retn
_PEM_read_bio_CMS endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_CMS
_PEM_write_CMS	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_03LOMOMHDE@CMS?$AA@ ; `string'
		push	offset _i2d_CMS_ContentInfo
		call	_PEM_ASN1_write
		add	esp, 24h
		retn
_PEM_write_CMS	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_CMS
_PEM_write_bio_CMS proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_03LOMOMHDE@CMS?$AA@ ; `string'
		push	offset _i2d_CMS_ContentInfo
		call	_PEM_ASN1_write_bio
		add	esp, 24h
		retn
_PEM_write_bio_CMS endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 110h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_CMS_stream
_PEM_write_bio_CMS_stream proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		call	_CMS_ContentInfo_it
		push	eax
		push	offset ??_C@_03LOMOMHDE@CMS?$AA@ ; `string'
		push	[esp+8+arg_C]
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		push	[esp+14h+arg_0]
		call	_PEM_write_bio_ASN1_stream
		add	esp, 18h
		retn
_PEM_write_bio_CMS_stream endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 134h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SMIME_read_CMS
_SMIME_read_CMS	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		call	_CMS_ContentInfo_it
		push	eax
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_SMIME_read_ASN1
		add	esp, 0Ch
		retn
_SMIME_read_CMS	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 14Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SMIME_write_CMS
_SMIME_write_CMS proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		push	edi
		push	dword ptr [esi]
		call	_OBJ_obj2nid
		push	esi
		mov	ebx, eax
		call	_CMS_get0_eContentType
		push	eax
		call	_OBJ_obj2nid
		add	esp, 0Ch
		mov	ebp, eax
		cmp	ebx, 16h
		jnz	short loc_17B
		mov	ecx, [esi+4]
		mov	edi, [ecx+4]
		jmp	short loc_17D
; ---------------------------------------------------------------------------

loc_17B:				; CODE XREF: _SMIME_write_CMS+25j
		xor	edi, edi

loc_17D:				; CODE XREF: _SMIME_write_CMS+2Dj
		call	_CMS_ContentInfo_it
		push	eax
		push	edi
		push	ebp
		push	ebx
		push	[esp+20h+arg_C]
		push	[esp+24h+arg_8]
		push	esi
		push	[esp+2Ch+arg_0]
		call	_SMIME_write_ASN1
		add	esp, 20h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_SMIME_write_CMS endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_CMS_bio
_d2i_CMS_bio	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_CMS_ContentInfo_it
		push	eax
		call	_ASN1_item_d2i_bio
		add	esp, 0Ch
		retn
_d2i_CMS_bio	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_CMS_bio
_i2d_CMS_bio	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_CMS_ContentInfo_it
		push	eax
		call	_ASN1_item_i2d_bio
		add	esp, 0Ch
		retn
_i2d_CMS_bio	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_CMS_bio_stream
_i2d_CMS_bio_stream proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		call	_CMS_ContentInfo_it
		push	eax
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	_i2d_ASN1_bio_stream
		add	esp, 14h
		retn
_i2d_CMS_bio_stream endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1F0h
; COMDAT (pick any)
		public ??_C@_0BG@BBPCNJCA@?4?2crypto?2cms?2cms_io?4c?$AA@
; `string'
??_C@_0BG@BBPCNJCA@?4?2crypto?2cms?2cms_io?4c?$AA@ db '.\crypto\cms\cms_io.c',0
					; DATA XREF: _CMS_stream+25o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 208h
; COMDAT (pick any)
		public ??_C@_03LOMOMHDE@CMS?$AA@
; `string'
??_C@_03LOMOMHDE@CMS?$AA@ dd 534D43h	; DATA XREF: _PEM_read_CMS+10o
					; _PEM_read_bio_CMS+10o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ASN1_OCTET_STRING_new:near ; CODE XREF: _CMS_stream+18p
		extrn _ASN1_item_d2i_bio:near ;	CODE XREF: _d2i_CMS_bio+Ep
		extrn _ASN1_item_i2d_bio:near ;	CODE XREF: _i2d_CMS_bio+Ep
		extrn _BIO_new_NDEF:near ; CODE	XREF: _BIO_new_CMS+Ep
		extrn _i2d_ASN1_bio_stream:near	; CODE XREF: _i2d_CMS_bio_stream+16p
		extrn _PEM_write_bio_ASN1_stream:near
					; CODE XREF: _PEM_write_bio_CMS_stream+1Bp
		extrn _SMIME_write_ASN1:near ; CODE XREF: _SMIME_write_CMS+47p
		extrn _SMIME_read_ASN1:near ; CODE XREF: _SMIME_read_CMS+Ep
		extrn _OBJ_obj2nid:near	; CODE XREF: _SMIME_write_CMS+Ap
					; _SMIME_write_CMS+18p
		extrn _ERR_put_error:near ; CODE XREF: _CMS_stream+33p
		extrn _PEM_ASN1_read_bio:near ;	CODE XREF: _PEM_read_bio_CMS+1Ap
		extrn _PEM_ASN1_write_bio:near ; CODE XREF: _PEM_write_bio_CMS+1Cp
		extrn _PEM_ASN1_read:near ; CODE XREF: _PEM_read_CMS+1Ap
		extrn _PEM_ASN1_write:near ; CODE XREF:	_PEM_write_CMS+1Cp
		extrn _d2i_CMS_ContentInfo:near	; DATA XREF: _PEM_read_CMS+15o
					; _PEM_read_bio_CMS+15o
		extrn _i2d_CMS_ContentInfo:near	; DATA XREF: _PEM_write_CMS+17o
					; _PEM_write_bio_CMS+17o
		extrn _CMS_ContentInfo_it:near ; CODE XREF: _BIO_new_CMSp
					; _PEM_write_bio_CMS_streamp ...
		extrn _CMS_get0_content:near ; CODE XREF: _CMS_stream+5p
		extrn _CMS_get0_eContentType:near ; CODE XREF: _SMIME_write_CMS+12p


		end
