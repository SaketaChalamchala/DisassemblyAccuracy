;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	6AD241DFFF9DD4B1A05A993AFABD75F7
; Input	CRC32 :	EAF93311

; File Name   :	C:\compspace\Diff\openssl\obj\bn_gf2m.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
_SQR_tb		dd 0			; DATA XREF: _BN_GF2m_mod_sqr_arr+66r
					; _BN_GF2m_mod_sqr_arr+78r ...
		dd 1, 4, 5, 10h, 11h, 14h, 15h,	40h, 41h, 44h, 45h, 50h
		dd 51h,	54h, 55h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 40h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_GF2m_add
_BN_GF2m_add	proc near		; CODE XREF: _BN_GF2m_mod_solve_quad_arr+11Ep
					; _BN_GF2m_mod_solve_quad_arr+15Ap ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_8]
		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_4]
		push	edi
		mov	eax, [ebp+4]
		cmp	eax, [ecx+4]
		jge	short loc_57
		mov	edi, ecx
		jmp	short loc_5B
; ---------------------------------------------------------------------------

loc_57:					; CODE XREF: _BN_GF2m_add+11j
		mov	edi, ebp
		mov	ebp, ecx

loc_5B:					; CODE XREF: _BN_GF2m_add+15j
		mov	ebx, [esp+0Ch+arg_0]
		mov	eax, [edi+4]
		cmp	eax, [ebx+8]
		jg	short loc_6B
		mov	eax, ebx
		jmp	short loc_75
; ---------------------------------------------------------------------------

loc_6B:					; CODE XREF: _BN_GF2m_add+25j
		push	eax
		push	ebx
		call	_bn_expand2
		add	esp, 8

loc_75:					; CODE XREF: _BN_GF2m_add+29j
		test	eax, eax
		jnz	short loc_7D
		pop	edi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_7D:					; CODE XREF: _BN_GF2m_add+37j
		push	esi
		xor	esi, esi
		cmp	[ebp+4], esi
		jle	short loc_9B

loc_85:					; CODE XREF: _BN_GF2m_add+59j
		mov	eax, [edi]
		mov	ecx, [ebp+0]
		mov	edx, [eax+esi*4]
		mov	eax, [ebx]
		xor	edx, [ecx+esi*4]
		mov	[eax+esi*4], edx
		inc	esi
		cmp	esi, [ebp+4]
		jl	short loc_85

loc_9B:					; CODE XREF: _BN_GF2m_add+43j
		cmp	esi, [edi+4]
		jge	short loc_B0

loc_A0:					; CODE XREF: _BN_GF2m_add+6Ej
		mov	eax, [edi]
		mov	ecx, [ebx]
		mov	eax, [eax+esi*4]
		mov	[ecx+esi*4], eax
		inc	esi
		cmp	esi, [edi+4]
		jl	short loc_A0

loc_B0:					; CODE XREF: _BN_GF2m_add+5Ej
		mov	ecx, [edi+4]
		mov	[ebx+4], ecx
		pop	esi
		test	ecx, ecx
		jle	short loc_D4
		mov	edx, [ebx]
		add	edx, 0FFFFFFFCh
		lea	edx, [edx+ecx*4]

loc_C3:					; CODE XREF: _BN_GF2m_add+8Fj
		mov	eax, [edx]
		lea	edx, [edx-4]
		test	eax, eax
		jnz	short loc_D1
		dec	ecx
		test	ecx, ecx
		jg	short loc_C3

loc_D1:					; CODE XREF: _BN_GF2m_add+8Aj
		mov	[ebx+4], ecx

loc_D4:					; CODE XREF: _BN_GF2m_add+79j
		pop	edi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
_BN_GF2m_add	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_GF2m_arr2poly
_BN_GF2m_arr2poly proc near		; CODE XREF: _BN_GF2m_mod_div_arr+23p
					; _BN_GF2m_mod_inv_arr+23p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	esi
		push	edi
		push	0
		push	ebx
		call	_BN_set_word
		mov	edi, [esp+14h+arg_0]
		add	esp, 8
		xor	esi, esi
		cmp	dword ptr [edi], 0FFFFFFFFh
		jz	short loc_119
		mov	eax, edi
		nop

loc_100:				; CODE XREF: _BN_GF2m_arr2poly+37j
		push	dword ptr [eax]
		push	ebx
		call	_BN_set_bit
		add	esp, 8
		test	eax, eax
		jz	short loc_122
		inc	esi
		cmp	dword ptr [edi+esi*4], 0FFFFFFFFh
		lea	eax, [edi+esi*4]
		jnz	short loc_100

loc_119:				; CODE XREF: _BN_GF2m_arr2poly+1Bj
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_122:				; CODE XREF: _BN_GF2m_arr2poly+2Dj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
_BN_GF2m_arr2poly endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 128h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_GF2m_mod
_BN_GF2m_mod	proc near		; CODE XREF: _BN_GF2m_mod_inv+89p

var_1C		= byte ptr -1Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 1Ch
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+1Ch+var_4], eax
		mov	eax, [esp+1Ch+arg_8]
		lea	ecx, [esp+1Ch+var_1C]
		push	esi
		mov	esi, [esp+20h+arg_0]
		push	edi
		mov	edi, [esp+24h+arg_4]
		push	6
		push	ecx
		push	eax
		call	_BN_GF2m_poly2arr
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_183
		cmp	eax, 6
		jg	short loc_183
		lea	eax, [esp+24h+var_1C]
		push	eax
		push	edi
		push	esi
		call	_BN_GF2m_mod_arr
		add	esp, 0Ch
		pop	edi
		pop	esi
		mov	ecx, [esp+1Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_183:				; CODE XREF: _BN_GF2m_mod+34j
					; _BN_GF2m_mod+39j
		push	1DDh
		push	offset ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@ ; ".\\crypto\\bn\\bn_gf2m.c"
		push	6Ah ; 'j'
		push	83h ; 'ƒ'
		push	3
		call	_ERR_put_error
		mov	ecx, [esp+38h+var_4]
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1Ch
		retn
_BN_GF2m_mod	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_GF2m_mod_arr
_BN_GF2m_mod_arr proc near		; CODE XREF: _BN_GF2m_mod+42p
					; _BN_GF2m_mod_exp_arr+7Ap ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 0Ch
		call	__chkstk
		push	ebx
		mov	ebx, [esp+10h+arg_8]
		cmp	dword ptr [ebx], 0
		jnz	short loc_1E0
		push	0
		push	[esp+14h+arg_0]
		call	_BN_set_word
		add	esp, 8
		mov	eax, 1
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1E0:				; CODE XREF: _BN_GF2m_mod_arr+12j
		push	esi
		mov	esi, [esp+14h+arg_4]
		push	edi
		mov	edi, [esp+18h+arg_0]
		cmp	esi, edi
		jz	short loc_22C
		mov	eax, [esi+4]
		cmp	eax, [edi+8]
		jg	short loc_1FA
		mov	eax, edi
		jmp	short loc_204
; ---------------------------------------------------------------------------

loc_1FA:				; CODE XREF: _BN_GF2m_mod_arr+40j
		push	eax
		push	edi
		call	_bn_expand2
		add	esp, 8

loc_204:				; CODE XREF: _BN_GF2m_mod_arr+44j
		test	eax, eax
		jnz	short loc_20F
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_20F:				; CODE XREF: _BN_GF2m_mod_arr+52j
		xor	edx, edx
		cmp	[esi+4], edx
		jle	short loc_226

loc_216:				; CODE XREF: _BN_GF2m_mod_arr+70j
		mov	eax, [esi]
		mov	ecx, [edi]
		mov	eax, [eax+edx*4]
		mov	[ecx+edx*4], eax
		inc	edx
		cmp	edx, [esi+4]
		jl	short loc_216

loc_226:				; CODE XREF: _BN_GF2m_mod_arr+60j
		mov	eax, [esi+4]
		mov	[edi+4], eax

loc_22C:				; CODE XREF: _BN_GF2m_mod_arr+38j
		mov	eax, [ebx]
		mov	ecx, [edi]
		cdq
		and	edx, 1Fh
		mov	[esp+18h+arg_8], ecx
		push	ebp
		lea	ebp, [edx+eax]
		mov	edx, [edi+4]
		sar	ebp, 5
		dec	edx
		mov	[esp+1Ch+var_4], ebp
		mov	[esp+1Ch+var_C], edx
		cmp	edx, ebp
		jle	loc_325
		mov	eax, edx
		sub	eax, ebp
		lea	ebp, [ecx+eax*4]
		mov	[esp+1Ch+var_8], ebp
		nop	word ptr [eax+eax+00h]

loc_264:				; CODE XREF: _BN_GF2m_mod_arr+165j
		mov	edi, [ecx+edx*4]
		lea	eax, [ecx+edx*4]
		test	edi, edi
		jnz	short loc_27F
		dec	edx
		sub	ebp, 4
		mov	[esp+1Ch+var_C], edx
		mov	[esp+1Ch+var_8], ebp
		jmp	loc_315
; ---------------------------------------------------------------------------

loc_27F:				; CODE XREF: _BN_GF2m_mod_arr+B8j
		lea	ecx, [ebx+4]
		mov	dword ptr [eax], 0
		cmp	dword ptr [ecx], 0
		mov	esi, 1
		jz	short loc_2E9
		xchg	ax, ax

loc_294:				; CODE XREF: _BN_GF2m_mod_arr+12Bj
		mov	eax, [ebx]
		sub	eax, [ecx]
		mov	ebp, eax
		and	ebp, 8000001Fh
		jns	short loc_2A7
		dec	ebp
		or	ebp, 0FFFFFFE0h
		inc	ebp

loc_2A7:				; CODE XREF: _BN_GF2m_mod_arr+ECj
		mov	ecx, [esp+1Ch+var_C]
		cdq
		and	edx, 1Fh
		add	eax, edx
		sar	eax, 5
		sub	ecx, eax
		mov	eax, [esp+1Ch+arg_8]
		lea	edx, [eax+ecx*4]
		mov	eax, edi
		mov	ecx, ebp
		shr	eax, cl
		xor	[edx], eax
		test	ebp, ebp
		jz	short loc_2D7
		mov	ecx, 20h ; ' '
		mov	eax, edi
		sub	ecx, ebp
		shl	eax, cl
		xor	[edx-4], eax

loc_2D7:				; CODE XREF: _BN_GF2m_mod_arr+113j
		inc	esi
		cmp	dword ptr [ebx+esi*4], 0
		lea	ecx, [ebx+esi*4]
		jnz	short loc_294
		mov	edx, [esp+1Ch+var_C]
		mov	ebp, [esp+1Ch+var_8]

loc_2E9:				; CODE XREF: _BN_GF2m_mod_arr+DCj
		mov	esi, [ebx]
		and	esi, 8000001Fh
		jns	short loc_2F8
		dec	esi
		or	esi, 0FFFFFFE0h
		inc	esi

loc_2F8:				; CODE XREF: _BN_GF2m_mod_arr+13Dj
		mov	eax, edi
		mov	ecx, esi
		shr	eax, cl
		xor	[ebp+0], eax
		test	esi, esi
		jz	short loc_311
		mov	ecx, 20h ; ' '
		sub	ecx, esi
		shl	edi, cl
		xor	[ebp-4], edi

loc_311:				; CODE XREF: _BN_GF2m_mod_arr+14Fj
		mov	ecx, [esp+1Ch+arg_8]

loc_315:				; CODE XREF: _BN_GF2m_mod_arr+C6j
		cmp	edx, [esp+1Ch+var_4]
		jg	loc_264
		mov	ebp, [esp+1Ch+var_4]
		cmp	edx, ebp

loc_325:				; CODE XREF: _BN_GF2m_mod_arr+99j
		jnz	loc_3D6
		lea	esi, [ecx+ebp*4]
		mov	[esp+1Ch+var_4], esi
		xchg	ax, ax

loc_334:				; CODE XREF: _BN_GF2m_mod_arr+1C9j
					; _BN_GF2m_mod_arr+21Dj
		mov	ecx, [ebx]
		and	ecx, 8000001Fh
		jns	short loc_343
		dec	ecx
		or	ecx, 0FFFFFFE0h
		inc	ecx

loc_343:				; CODE XREF: _BN_GF2m_mod_arr+188j
		mov	eax, [esi]
		mov	ebp, eax
		shr	ebp, cl
		test	ebp, ebp
		jz	loc_3D6
		mov	edx, 20h ; ' '
		sub	edx, ecx
		test	ecx, ecx
		jz	short loc_366
		mov	ecx, edx
		shl	eax, cl
		shr	eax, cl
		mov	[esi], eax
		jmp	short loc_36C
; ---------------------------------------------------------------------------

loc_366:				; CODE XREF: _BN_GF2m_mod_arr+1A6j
		mov	dword ptr [esi], 0

loc_36C:				; CODE XREF: _BN_GF2m_mod_arr+1B0j
		mov	ecx, [esp+1Ch+arg_8]
		lea	eax, [ebx+4]
		mov	edi, 1
		xor	[ecx], ebp
		cmp	dword ptr [eax], 0
		jz	short loc_334
		nop	dword ptr [eax+eax+00h]

loc_384:				; CODE XREF: _BN_GF2m_mod_arr+217j
		mov	esi, [eax]
		mov	eax, esi
		cdq
		and	edx, 1Fh
		add	eax, edx
		sar	eax, 5
		and	esi, 8000001Fh
		jns	short loc_39E
		dec	esi
		or	esi, 0FFFFFFE0h
		inc	esi

loc_39E:				; CODE XREF: _BN_GF2m_mod_arr+1E3j
		lea	edx, [ecx+eax*4]
		mov	eax, ebp
		mov	ecx, esi
		shl	eax, cl
		xor	[edx], eax
		test	esi, esi
		jz	short loc_3BF
		mov	ecx, 20h ; ' '
		mov	eax, ebp
		sub	ecx, esi
		shr	eax, cl
		test	eax, eax
		jz	short loc_3BF
		xor	[edx+4], eax

loc_3BF:				; CODE XREF: _BN_GF2m_mod_arr+1F7j
					; _BN_GF2m_mod_arr+206j
		mov	ecx, [esp+1Ch+arg_8]
		inc	edi
		cmp	dword ptr [ebx+edi*4], 0
		lea	eax, [ebx+edi*4]
		jnz	short loc_384
		mov	esi, [esp+1Ch+var_4]
		jmp	loc_334
; ---------------------------------------------------------------------------

loc_3D6:				; CODE XREF: _BN_GF2m_mod_arr:loc_325j
					; _BN_GF2m_mod_arr+197j
		mov	esi, [esp+1Ch+arg_0]
		pop	ebp
		mov	ecx, [esi+4]
		test	ecx, ecx
		jle	short loc_3FB
		mov	eax, [esi]
		lea	edx, [ecx-1]
		lea	edx, [eax+edx*4]

loc_3EA:				; CODE XREF: _BN_GF2m_mod_arr+242j
		mov	eax, [edx]
		lea	edx, [edx-4]
		test	eax, eax
		jnz	short loc_3F8
		dec	ecx
		test	ecx, ecx
		jg	short loc_3EA

loc_3F8:				; CODE XREF: _BN_GF2m_mod_arr+23Dj
		mov	[esi+4], ecx

loc_3FB:				; CODE XREF: _BN_GF2m_mod_arr+22Cj
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		add	esp, 0Ch
		retn
_BN_GF2m_mod_arr endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 408h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_GF2m_mod_div
_BN_GF2m_mod_div proc near		; CODE XREF: _BN_GF2m_mod_div_arr+3Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_10]
		push	edi
		push	esi
		xor	edi, edi
		call	_BN_CTX_start
		push	esi
		call	_BN_CTX_get
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	short $err$7
		push	esi
		push	[esp+10h+arg_C]
		push	[esp+14h+arg_8]
		push	ebx
		call	_BN_GF2m_mod_inv
		add	esp, 10h
		test	eax, eax
		jz	short $err$7
		push	esi
		push	[esp+10h+arg_C]
		push	ebx
		push	[esp+18h+arg_4]
		push	[esp+1Ch+arg_0]
		call	_BN_GF2m_mod_mul
		add	esp, 14h
		mov	ecx, 1
		test	eax, eax
		cmovnz	edi, ecx

$err$7:					; CODE XREF: _BN_GF2m_mod_div+1Cj
					; _BN_GF2m_mod_div+32j
		push	esi
		call	_BN_CTX_end
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
_BN_GF2m_mod_div endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 46Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_GF2m_mod_div_arr
_BN_GF2m_mod_div_arr proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_10]
		xor	ebx, ebx
		push	edi
		push	esi
		call	_BN_CTX_start
		push	esi
		call	_BN_CTX_get
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short $err$6_0
		push	edi
		push	[esp+10h+arg_C]
		call	_BN_GF2m_arr2poly
		add	esp, 8
		test	eax, eax
		jz	short $err$6_0
		push	esi
		push	edi
		push	[esp+14h+arg_8]
		push	[esp+18h+arg_4]
		push	[esp+1Ch+arg_0]
		call	_BN_GF2m_mod_div
		add	esp, 14h
		mov	ebx, eax

$err$6_0:				; CODE XREF: _BN_GF2m_mod_div_arr+1Cj
					; _BN_GF2m_mod_div_arr+2Dj
		push	esi
		call	_BN_CTX_end
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		retn
_BN_GF2m_mod_div_arr endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_GF2m_mod_exp
_BN_GF2m_mod_exp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_C]
		push	edi
		push	esi
		call	_BN_num_bits
		push	40Dh
		push	offset ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@ ; ".\\crypto\\bn\\bn_gf2m.c"
		lea	edi, [eax+1]
		lea	eax, ds:0[edi*4]
		push	eax
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jz	short loc_55D
		push	edi
		push	ebx
		push	esi
		call	_BN_GF2m_poly2arr
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_533
		cmp	esi, edi
		jg	short loc_533
		push	[esp+0Ch+arg_10]
		push	ebx
		push	[esp+14h+arg_8]
		push	[esp+18h+arg_4]
		push	[esp+1Ch+arg_0]
		call	_BN_GF2m_mod_exp_arr
		mov	esi, eax
		add	esp, 14h

$err$10_0:
		push	ebx
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_533:				; CODE XREF: _BN_GF2m_mod_exp+3Fj
					; _BN_GF2m_mod_exp+43j
		push	411h
		push	offset ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@ ; ".\\crypto\\bn\\bn_gf2m.c"
		push	6Ah ; 'j'
		push	84h ; '„'
		push	3
		call	_ERR_put_error
		add	esp, 14h

$err_1$11_0:
		push	ebx
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_55D:				; CODE XREF: _BN_GF2m_mod_exp+2Ej
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
_BN_GF2m_mod_exp endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 564h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_GF2m_mod_exp_arr
_BN_GF2m_mod_exp_arr proc near		; CODE XREF: _BN_GF2m_mod_exp+56p
					; _BN_GF2m_mod_sqrt_arr+56p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 4
		call	__chkstk
		push	edi
		mov	edi, [esp+8+arg_8]
		mov	[esp+8+var_4], 0
		mov	eax, [edi+4]
		test	eax, eax
		jnz	short loc_593
		push	1
		push	[esp+0Ch+arg_0]
		call	_BN_set_word
		add	esp, 8
		pop	edi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_593:				; CODE XREF: _BN_GF2m_mod_exp_arr+1Cj
		cmp	eax, 1
		jnz	short loc_5B8
		mov	eax, [edi]
		cmp	dword ptr [eax], 1
		jnz	short loc_5B8
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_BN_copy
		add	esp, 8
		neg	eax
		sbb	eax, eax
		neg	eax
		pop	edi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_5B8:				; CODE XREF: _BN_GF2m_mod_exp_arr+32j
					; _BN_GF2m_mod_exp_arr+39j
		push	ebx
		mov	ebx, [esp+0Ch+arg_10]
		push	esi
		push	ebx
		call	_BN_CTX_start
		push	ebx
		call	_BN_CTX_get
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short $err$24
		push	ebp
		mov	ebp, [esp+14h+arg_C]
		push	ebp
		push	[esp+18h+arg_4]
		push	esi
		call	_BN_GF2m_mod_arr
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_651
		push	edi
		call	_BN_num_bits
		mov	edi, eax
		add	esp, 4
		sub	edi, 2
		js	short loc_634

loc_5FA:				; CODE XREF: _BN_GF2m_mod_exp_arr+CEj
		push	ebx
		push	ebp
		push	esi
		push	esi
		call	_BN_GF2m_mod_sqr_arr
		add	esp, 10h
		test	eax, eax
		jz	short loc_651
		push	edi
		push	[esp+18h+arg_8]
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jz	short loc_62F
		push	ebx
		push	ebp
		push	[esp+1Ch+arg_4]
		push	esi
		push	esi
		call	_BN_GF2m_mod_mul_arr
		add	esp, 14h
		test	eax, eax
		jz	short loc_651

loc_62F:				; CODE XREF: _BN_GF2m_mod_exp_arr+B5j
		sub	edi, 1
		jns	short loc_5FA

loc_634:				; CODE XREF: _BN_GF2m_mod_exp_arr+94j
		push	esi
		push	[esp+18h+arg_0]
		call	_BN_copy
		xor	ecx, ecx
		add	esp, 8
		test	eax, eax
		mov	edx, 1
		cmovnz	ecx, edx
		mov	[esp+14h+var_4], ecx

loc_651:				; CODE XREF: _BN_GF2m_mod_exp_arr+84j
					; _BN_GF2m_mod_exp_arr+A4j ...
		pop	ebp

$err$24:				; CODE XREF: _BN_GF2m_mod_exp_arr+6Dj
		push	ebx
		call	_BN_CTX_end
		mov	eax, [esp+14h+var_4]
		add	esp, 4
		pop	esi
		pop	ebx
		pop	edi
		pop	ecx
		retn
_BN_GF2m_mod_exp_arr endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 664h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_GF2m_mod_inv
_BN_GF2m_mod_inv proc near		; CODE XREF: _BN_GF2m_mod_div+28p
					; _BN_GF2m_mod_inv_arr+39p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 3Ch ; '<'
		call	__chkstk
		push	esi
		mov	esi, [esp+40h+arg_C]
		push	esi
		mov	[esp+44h+var_8], 0
		call	_BN_CTX_start
		push	esi
		call	_BN_CTX_get
		mov	esi, eax
		add	esp, 8
		mov	[esp+40h+var_18], esi
		test	esi, esi
		jz	$err$114
		push	edi
		mov	edi, [esp+44h+arg_C]
		push	edi
		call	_BN_CTX_get
		mov	edx, eax
		add	esp, 4
		mov	[esp+44h+var_2C], edx
		test	edx, edx
		jz	loc_B4C
		push	edi
		call	_BN_CTX_get
		mov	esi, eax
		add	esp, 4
		mov	[esp+44h+var_C], esi
		test	esi, esi
		jz	loc_B4C
		push	edi
		call	_BN_CTX_get
		mov	edi, eax
		add	esp, 4
		mov	[esp+44h+var_28], edi
		test	edi, edi
		jz	loc_B4C
		push	ebx
		mov	ebx, [esp+48h+arg_8]
		push	ebx
		push	[esp+4Ch+arg_4]
		push	esi
		call	_BN_GF2m_mod
		add	esp, 0Ch
		test	eax, eax
		jz	loc_B4B
		cmp	dword ptr [esi+4], 0
		jz	loc_B4B
		push	ebx
		push	edi
		call	_BN_copy
		add	esp, 8
		test	eax, eax
		jz	loc_B4B
		push	ebp
		push	esi
		call	_BN_num_bits
		mov	ebp, eax
		push	edi
		mov	[esp+54h+var_1C], ebp
		call	_BN_num_bits
		mov	edi, [ebx+4]
		add	esp, 8
		mov	[esp+4Ch+var_20], eax
		mov	[esp+4Ch+var_34], edi
		cmp	edi, [esi+8]
		jg	short loc_743
		mov	eax, esi
		jmp	short loc_74D
; ---------------------------------------------------------------------------

loc_743:				; CODE XREF: _BN_GF2m_mod_inv+D9j
		push	edi
		push	esi
		call	_bn_expand2
		add	esp, 8

loc_74D:				; CODE XREF: _BN_GF2m_mod_inv+DDj
		test	eax, eax
		jz	loc_B4A
		mov	edx, [esp+4Ch+var_C]
		mov	esi, [esi]
		mov	[esp+4Ch+var_24], esi
		mov	eax, [edx+4]
		cmp	eax, edi
		jge	short loc_777
		mov	ecx, [esp+4Ch+var_34]
		lea	edi, [esi+eax*4]
		sub	ecx, eax
		xor	eax, eax
		rep stosd
		mov	edi, [esp+4Ch+var_34]

loc_777:				; CODE XREF: _BN_GF2m_mod_inv+100j
		mov	ebx, [esp+4Ch+var_18]
		mov	[edx+4], edi
		cmp	edi, [ebx+8]
		jg	short loc_787
		mov	eax, ebx
		jmp	short loc_791
; ---------------------------------------------------------------------------

loc_787:				; CODE XREF: _BN_GF2m_mod_inv+11Dj
		push	edi
		push	ebx
		call	_bn_expand2
		add	esp, 8

loc_791:				; CODE XREF: _BN_GF2m_mod_inv+121j
		test	eax, eax
		jz	loc_B4A
		mov	edx, [ebx]
		mov	[esp+4Ch+var_30], edx
		mov	dword ptr [edx], 1
		cmp	edi, 1
		jle	short loc_7B8
		lea	ecx, [edi-1]
		xor	eax, eax
		lea	edi, [edx+4]
		rep stosd
		mov	edi, [esp+4Ch+var_34]

loc_7B8:				; CODE XREF: _BN_GF2m_mod_inv+144j
		mov	ecx, [esp+4Ch+var_2C]
		mov	[ebx+4], edi
		cmp	edi, [ecx+8]
		jg	short loc_7C8
		mov	eax, ecx
		jmp	short loc_7DA
; ---------------------------------------------------------------------------

loc_7C8:				; CODE XREF: _BN_GF2m_mod_inv+15Ej
		push	edi
		push	ecx
		call	_bn_expand2
		mov	edx, [esp+54h+var_30]
		add	esp, 8
		mov	ecx, [esp+4Ch+var_2C]

loc_7DA:				; CODE XREF: _BN_GF2m_mod_inv+162j
		test	eax, eax
		jz	loc_B4A
		mov	ebx, [ecx]
		mov	[esp+4Ch+var_38], ebx
		test	edi, edi
		jle	short loc_7FC
		mov	ecx, edi
		xor	eax, eax
		mov	edi, ebx
		rep stosd
		mov	edi, [esp+4Ch+var_34]
		mov	ecx, [esp+4Ch+var_2C]

loc_7FC:				; CODE XREF: _BN_GF2m_mod_inv+186j
		mov	eax, [esp+4Ch+var_28]
		mov	[ecx+4], edi
		mov	ecx, [eax]
		mov	[esp+4Ch+var_3C], ecx

loc_809:				; CODE XREF: _BN_GF2m_mod_inv+452j
					; _BN_GF2m_mod_inv+4A0j
		test	ebp, ebp
		jz	loc_8D7
		nop	dword ptr [eax]

loc_814:				; CODE XREF: _BN_GF2m_mod_inv+265j
		mov	ebx, [esi]
		test	bl, 1
		jnz	loc_8CF
		mov	ecx, [esp+4Ch+arg_8]
		dec	edi
		mov	eax, [edx]
		mov	ebp, eax
		and	ebp, 1
		neg	ebp
		mov	ecx, [ecx]
		mov	ecx, [ecx]
		and	ecx, ebp
		xor	eax, ecx
		xor	ecx, ecx
		mov	[esp+4Ch+var_10], ecx
		test	edi, edi
		jle	short loc_8B0
		mov	ecx, esi
		mov	[esp+4Ch+var_14], 0FFFFFFFCh
		sub	ecx, edx
		lea	edi, [edx+4]
		sub	[esp+4Ch+var_14], edx
		mov	[esp+4Ch+var_4], ecx
		jmp	short loc_85C
; ---------------------------------------------------------------------------

loc_858:				; CODE XREF: _BN_GF2m_mod_inv+246j
		mov	ecx, [esp+4Ch+var_4]

loc_85C:				; CODE XREF: _BN_GF2m_mod_inv+1F2j
		mov	edx, [edi+ecx]
		mov	ecx, edx
		shl	ecx, 1Fh
		shr	ebx, 1
		or	ecx, ebx
		shr	eax, 1
		mov	ebx, [esp+4Ch+var_10]
		mov	[esi+ebx*4], ecx
		mov	ebx, edx
		mov	ecx, [esp+4Ch+arg_8]
		mov	edx, [esp+4Ch+var_14]
		mov	esi, [esp+4Ch+var_24]
		add	edx, edi
		mov	ecx, [ecx]
		mov	edx, [edx+ecx+4]
		and	edx, ebp
		xor	edx, [edi]
		mov	ecx, edx
		shl	ecx, 1Fh
		or	ecx, eax
		mov	eax, edx
		mov	edx, [esp+4Ch+var_34]
		mov	[edi-4], ecx
		dec	edx
		mov	ecx, [esp+4Ch+var_10]
		add	edi, 4
		inc	ecx
		mov	[esp+4Ch+var_10], ecx
		cmp	ecx, edx
		jl	short loc_858
		mov	edx, [esp+4Ch+var_30]

loc_8B0:				; CODE XREF: _BN_GF2m_mod_inv+1D9j
		mov	ebp, [esp+4Ch+var_1C]
		mov	edi, [esp+4Ch+var_34]
		shr	ebx, 1
		shr	eax, 1
		sub	ebp, 1
		mov	[esi+ecx*4], ebx
		mov	[edx+ecx*4], eax
		mov	[esp+4Ch+var_1C], ebp
		jnz	loc_814

loc_8CF:				; CODE XREF: _BN_GF2m_mod_inv+1B5j
		mov	ebx, [esp+4Ch+var_38]
		mov	ecx, [esp+4Ch+var_3C]

loc_8D7:				; CODE XREF: _BN_GF2m_mod_inv+1A7j
		cmp	ebp, 20h ; ' '
		jg	short loc_8EF
		mov	eax, [esi]
		test	eax, eax
		jz	loc_B4A
		cmp	eax, 1
		jz	loc_B09

loc_8EF:				; CODE XREF: _BN_GF2m_mod_inv+276j
		cmp	ebp, [esp+4Ch+var_20]
		jge	short loc_941
		mov	edx, [esp+4Ch+var_28]
		mov	eax, ebp
		mov	ebp, [esp+4Ch+var_20]
		mov	esi, ecx
		mov	[esp+4Ch+var_20], eax
		mov	eax, [esp+4Ch+var_C]
		mov	[esp+4Ch+var_28], eax
		mov	eax, [esp+4Ch+var_18]
		mov	ecx, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_C], edx
		mov	edx, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_18], edx
		mov	edx, ebx
		mov	ecx, [ecx]
		mov	[esp+4Ch+var_2C], eax
		mov	eax, [eax]
		mov	[esp+4Ch+var_1C], ebp
		mov	[esp+4Ch+var_24], esi
		mov	[esp+4Ch+var_3C], ecx
		mov	[esp+4Ch+var_30], edx
		mov	[esp+4Ch+var_38], eax
		jmp	short loc_945
; ---------------------------------------------------------------------------

loc_941:				; CODE XREF: _BN_GF2m_mod_inv+28Fj
		mov	eax, [esp+4Ch+var_38]

loc_945:				; CODE XREF: _BN_GF2m_mod_inv+2DBj
		xor	ebx, ebx
		test	edi, edi
		jle	loc_AAA
		cmp	edi, 4
		jb	loc_A5F
		lea	eax, [eax+edi*4]
		add	eax, 0FFFFFFFCh
		lea	ecx, [edi-1]
		lea	ecx, [edx+ecx*4]
		cmp	edx, eax
		ja	short loc_972
		cmp	ecx, [esp+4Ch+var_38]
		jnb	loc_A5F

loc_972:				; CODE XREF: _BN_GF2m_mod_inv+302j
		lea	eax, [edi-1]
		lea	eax, [esi+eax*4]
		lea	ecx, [edi-1]
		lea	ecx, [edx+ecx*4]
		cmp	edx, eax
		ja	short loc_98A
		cmp	ecx, esi
		jnb	loc_A5F

loc_98A:				; CODE XREF: _BN_GF2m_mod_inv+31Cj
		mov	eax, [esp+4Ch+var_3C]
		lea	ecx, [edi-1]
		lea	ecx, [edx+ecx*4]
		lea	eax, [eax+edi*4]
		add	eax, 0FFFFFFFCh
		cmp	edx, eax
		ja	short loc_9AA
		mov	eax, [esp+4Ch+var_3C]
		cmp	ecx, eax
		jnb	loc_A63

loc_9AA:				; CODE XREF: _BN_GF2m_mod_inv+338j
		mov	eax, [esp+4Ch+var_38]
		lea	ecx, [edi-1]
		lea	ecx, [esi+ecx*4]
		lea	eax, [eax+edi*4]
		add	eax, 0FFFFFFFCh
		cmp	esi, eax
		ja	short loc_9C8
		cmp	ecx, [esp+4Ch+var_38]
		jnb	loc_A5F

loc_9C8:				; CODE XREF: _BN_GF2m_mod_inv+358j
		mov	eax, [esp+4Ch+var_3C]
		lea	ecx, [edi-1]
		lea	ecx, [esi+ecx*4]
		lea	eax, [eax+edi*4]
		add	eax, 0FFFFFFFCh
		cmp	esi, eax
		ja	short loc_9E8
		mov	eax, [esp+4Ch+var_3C]
		cmp	ecx, eax
		jnb	loc_A63

loc_9E8:				; CODE XREF: _BN_GF2m_mod_inv+376j
		mov	eax, edi
		and	eax, 80000003h
		jns	short loc_9F6
		dec	eax
		or	eax, 0FFFFFFFCh
		inc	eax

loc_9F6:				; CODE XREF: _BN_GF2m_mod_inv+38Bj
		mov	edx, [esp+4Ch+var_3C]
		mov	ecx, edi
		mov	edi, [esp+4Ch+var_30]
		sub	edx, esi
		mov	[esp+4Ch+var_4], edx
		sub	ecx, eax
		mov	edx, [esp+4Ch+var_38]
		mov	eax, esi
		sub	edx, esi
		sub	edi, esi
		mov	[esp+4Ch+var_10], edx
		mov	edx, [esp+4Ch+var_4]
		mov	[esp+4Ch+var_14], edi
		mov	edi, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_14]

loc_A26:				; CODE XREF: _BN_GF2m_mod_inv+3EDj
		movups	xmm0, xmmword ptr [eax]
		add	ebx, 4
		lea	eax, [eax+10h]
		movups	xmm1, xmmword ptr [edx+eax-10h]
		pxor	xmm1, xmm0
		movups	xmmword	ptr [eax-10h], xmm1
		movups	xmm1, xmmword ptr [edi+eax-10h]
		movups	xmm0, xmmword ptr [esi+eax-10h]
		pxor	xmm1, xmm0
		movups	xmmword	ptr [esi+eax-10h], xmm1
		cmp	ebx, ecx
		jl	short loc_A26
		mov	esi, [esp+4Ch+var_24]
		mov	edx, [esp+4Ch+var_30]
		mov	edi, [esp+4Ch+var_34]

loc_A5F:				; CODE XREF: _BN_GF2m_mod_inv+2EEj
					; _BN_GF2m_mod_inv+308j ...
		mov	eax, [esp+4Ch+var_3C]

loc_A63:				; CODE XREF: _BN_GF2m_mod_inv+340j
					; _BN_GF2m_mod_inv+37Ej
		cmp	ebx, edi
		jge	short loc_AAA
		sub	eax, esi
		lea	ecx, [esi+ebx*4]
		mov	[esp+4Ch+var_4], eax
		sub	edx, esi
		mov	eax, [esp+4Ch+var_38]
		sub	eax, esi
		mov	[esp+4Ch+var_14], edx
		mov	esi, [esp+4Ch+var_4]
		sub	edi, ebx
		mov	[esp+4Ch+var_10], eax
		mov	ebx, eax

loc_A88:				; CODE XREF: _BN_GF2m_mod_inv+438j
		mov	eax, [ecx+esi]
		lea	ecx, [ecx+4]
		xor	[ecx-4], eax
		mov	eax, [ecx+ebx-4]
		xor	[ecx+edx-4], eax
		sub	edi, 1
		jnz	short loc_A88
		mov	esi, [esp+4Ch+var_24]
		mov	edx, [esp+4Ch+var_30]
		mov	edi, [esp+4Ch+var_34]

loc_AAA:				; CODE XREF: _BN_GF2m_mod_inv+2E5j
					; _BN_GF2m_mod_inv+401j
		mov	ebx, [esp+4Ch+var_38]
		mov	ecx, [esp+4Ch+var_3C]
		cmp	ebp, [esp+4Ch+var_20]
		jnz	loc_809
		lea	eax, [ebp-1]
		cdq
		and	edx, 1Fh
		lea	edi, [edx+eax]
		sar	edi, 5
		mov	eax, [esi+edi*4]
		test	eax, eax
		jnz	short loc_AE1
		nop	dword ptr [eax+00h]

loc_AD4:				; CODE XREF: _BN_GF2m_mod_inv+47Bj
		test	edi, edi
		jz	short loc_AE1
		mov	eax, [esi+edi*4-4]
		dec	edi
		test	eax, eax
		jz	short loc_AD4

loc_AE1:				; CODE XREF: _BN_GF2m_mod_inv+46Aj
					; _BN_GF2m_mod_inv+472j
		push	eax
		call	_BN_num_bits_word
		mov	edx, [esp+50h+var_30]
		add	esp, 4
		mov	ebx, [esp+4Ch+var_38]
		mov	ecx, [esp+4Ch+var_3C]
		shl	edi, 5
		lea	ebp, [edi+eax]
		mov	edi, [esp+4Ch+var_34]
		mov	[esp+4Ch+var_1C], ebp
		jmp	loc_809
; ---------------------------------------------------------------------------

loc_B09:				; CODE XREF: _BN_GF2m_mod_inv+285j
		mov	esi, [esp+4Ch+var_18]
		mov	ecx, [esi+4]
		test	ecx, ecx
		jle	short loc_B2D
		mov	eax, [esi]
		lea	edx, [ecx-1]
		lea	edx, [eax+edx*4]

loc_B1C:				; CODE XREF: _BN_GF2m_mod_inv+4C4j
		mov	eax, [edx]
		lea	edx, [edx-4]
		test	eax, eax
		jnz	short loc_B2A
		dec	ecx
		test	ecx, ecx
		jg	short loc_B1C

loc_B2A:				; CODE XREF: _BN_GF2m_mod_inv+4BFj
		mov	[esi+4], ecx

loc_B2D:				; CODE XREF: _BN_GF2m_mod_inv+4AEj
		push	esi
		push	[esp+50h+arg_0]
		call	_BN_copy
		xor	ecx, ecx
		add	esp, 8
		test	eax, eax
		mov	edx, 1
		cmovnz	ecx, edx
		mov	[esp+4Ch+var_8], ecx

loc_B4A:				; CODE XREF: _BN_GF2m_mod_inv+EBj
					; _BN_GF2m_mod_inv+12Fj ...
		pop	ebp

loc_B4B:				; CODE XREF: _BN_GF2m_mod_inv+93j
					; _BN_GF2m_mod_inv+9Dj	...
		pop	ebx

loc_B4C:				; CODE XREF: _BN_GF2m_mod_inv+4Aj
					; _BN_GF2m_mod_inv+61j	...
		pop	edi

$err$114:				; CODE XREF: _BN_GF2m_mod_inv+2Ej
		push	[esp+40h+arg_C]
		call	_BN_CTX_end
		mov	eax, [esp+44h+var_8]
		add	esp, 4
		pop	esi
		add	esp, 3Ch
		retn
_BN_GF2m_mod_inv endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B64h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_GF2m_mod_inv_arr
_BN_GF2m_mod_inv_arr proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_C]
		xor	ebx, ebx
		push	edi
		push	esi
		call	_BN_CTX_start
		push	esi
		call	_BN_CTX_get
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short $err$6
		push	edi
		push	[esp+10h+arg_8]
		call	_BN_GF2m_arr2poly
		add	esp, 8
		test	eax, eax
		jz	short $err$6
		push	esi
		push	edi
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		call	_BN_GF2m_mod_inv
		add	esp, 10h
		mov	ebx, eax

$err$6:					; CODE XREF: _BN_GF2m_mod_inv_arr+1Cj
					; _BN_GF2m_mod_inv_arr+2Dj
		push	esi
		call	_BN_CTX_end
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		retn
_BN_GF2m_mod_inv_arr endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BB8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_GF2m_mod_mul
_BN_GF2m_mod_mul proc near		; CODE XREF: _BN_GF2m_mod_div+42p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_C]
		push	edi
		push	esi
		call	_BN_num_bits
		push	229h
		push	offset ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@ ; ".\\crypto\\bn\\bn_gf2m.c"
		lea	edi, [eax+1]
		lea	eax, ds:0[edi*4]
		push	eax
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jz	short loc_C51
		push	edi
		push	ebx
		push	esi
		call	_BN_GF2m_poly2arr
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_C27
		cmp	esi, edi
		jg	short loc_C27
		push	[esp+0Ch+arg_10]
		push	ebx
		push	[esp+14h+arg_8]
		push	[esp+18h+arg_4]
		push	[esp+1Ch+arg_0]
		call	_BN_GF2m_mod_mul_arr
		mov	esi, eax
		add	esp, 14h

$err$10:
		push	ebx
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_C27:				; CODE XREF: _BN_GF2m_mod_mul+3Fj
					; _BN_GF2m_mod_mul+43j
		push	22Dh
		push	offset ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@ ; ".\\crypto\\bn\\bn_gf2m.c"
		push	6Ah ; 'j'
		push	85h ; '…'
		push	3
		call	_ERR_put_error
		add	esp, 14h

$err_1$11:
		push	ebx
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_C51:				; CODE XREF: _BN_GF2m_mod_mul+2Ej
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
_BN_GF2m_mod_mul endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C58h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_GF2m_mod_mul_arr
_BN_GF2m_mod_mul_arr proc near		; CODE XREF: _BN_GF2m_mod_exp_arr+BFp
					; _BN_GF2m_mod_mul+56p	...

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 34h ; '4'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+34h+var_4], eax
		mov	eax, [esp+34h+arg_0]
		mov	ecx, [esp+34h+arg_C]
		push	ebx
		mov	ebx, [esp+38h+arg_10]
		push	esi
		mov	esi, [esp+3Ch+arg_4]
		push	edi
		mov	edi, [esp+40h+arg_8]
		mov	[esp+40h+var_1C], eax
		mov	[esp+40h+var_2C], esi
		mov	[esp+40h+var_28], edi
		mov	[esp+40h+var_20], ecx
		mov	[esp+40h+var_18], ebx
		mov	[esp+40h+var_34], 0
		push	ebx
		cmp	esi, edi
		jnz	short loc_CC2
		push	ecx
		push	esi
		push	eax
		call	_BN_GF2m_mod_sqr_arr
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+34h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_CC2:				; CODE XREF: _BN_GF2m_mod_mul_arr+4Bj
		call	_BN_CTX_start
		push	ebx
		call	_BN_CTX_get
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	$err$63
		push	ebp
		mov	ebp, [esi+4]
		add	ebp, 4
		add	ebp, [edi+4]
		cmp	ebp, [ebx+8]
		jle	short loc_CF3
		push	ebp
		push	ebx
		call	_bn_expand2
		add	esp, 8

loc_CF3:				; CODE XREF: _BN_GF2m_mod_mul_arr+8Fj
		test	eax, eax
		jz	loc_E6B
		xor	esi, esi
		mov	[ebx+4], ebp
		test	ebp, ebp
		jle	short loc_D5B
		cmp	ebp, 4
		jb	short loc_D49
		mov	edi, [ebx]
		lea	eax, [ebp-1]
		lea	eax, [edi+eax*4]
		cmp	edi, ebx
		ja	short loc_D19
		cmp	eax, ebx
		jnb	short loc_D49

loc_D19:				; CODE XREF: _BN_GF2m_mod_mul_arr+BBj
		mov	eax, ebp
		and	eax, 80000003h
		jns	short loc_D27
		dec	eax
		or	eax, 0FFFFFFFCh
		inc	eax

loc_D27:				; CODE XREF: _BN_GF2m_mod_mul_arr+C8j
		mov	ecx, ebp
		sub	ecx, eax

loc_D2B:				; CODE XREF: _BN_GF2m_mod_mul_arr+D8j
		add	esi, 4
		cmp	esi, ecx
		jl	short loc_D2B
		lea	eax, [ecx+3]
		cdq
		and	edx, 3
		lea	ecx, [edx+eax]
		sar	ecx, 2
		shl	ecx, 4
		shr	ecx, 2
		xor	eax, eax
		rep stosd

loc_D49:				; CODE XREF: _BN_GF2m_mod_mul_arr+AFj
					; _BN_GF2m_mod_mul_arr+BFj
		cmp	esi, ebp
		jge	short loc_D5B

loc_D4D:				; CODE XREF: _BN_GF2m_mod_mul_arr+101j
		mov	eax, [ebx]
		mov	dword ptr [eax+esi*4], 0
		inc	esi
		cmp	esi, ebp
		jl	short loc_D4D

loc_D5B:				; CODE XREF: _BN_GF2m_mod_mul_arr+AAj
					; _BN_GF2m_mod_mul_arr+F3j
		mov	esi, [esp+44h+var_28]
		xor	eax, eax
		mov	[esp+44h+var_30], eax
		mov	ecx, [esi+4]
		test	ecx, ecx
		jle	loc_E2A
		mov	ebp, [esp+44h+var_2C]
		mov	edx, [ebp+4]
		nop

loc_D78:				; CODE XREF: _BN_GF2m_mod_mul_arr+1CCj
		mov	esi, [esi]
		lea	edi, ds:0[eax*4]
		mov	eax, [esi+edi]
		mov	[esp+44h+var_2C], eax
		mov	eax, [esp+44h+var_30]
		inc	eax
		cmp	eax, ecx
		jnz	short loc_D9B
		mov	[esp+44h+var_34], 0
		jmp	short loc_DA3
; ---------------------------------------------------------------------------

loc_D9B:				; CODE XREF: _BN_GF2m_mod_mul_arr+137j
		mov	eax, [esi+edi+4]
		mov	[esp+44h+var_34], eax

loc_DA3:				; CODE XREF: _BN_GF2m_mod_mul_arr+141j
		xor	esi, esi
		test	edx, edx
		jle	short loc_E10

loc_DA9:				; CODE XREF: _BN_GF2m_mod_mul_arr+1B6j
		mov	eax, [ebp+0]
		mov	ecx, [eax+esi*4]
		mov	[esp+44h+var_24], ecx
		lea	ecx, [esi+1]
		cmp	ecx, edx
		jnz	short loc_DBE
		xor	eax, eax
		jmp	short loc_DC2
; ---------------------------------------------------------------------------

loc_DBE:				; CODE XREF: _BN_GF2m_mod_mul_arr+160j
		mov	eax, [eax+esi*4+4]

loc_DC2:				; CODE XREF: _BN_GF2m_mod_mul_arr+164j
		push	[esp+44h+var_2C]
		push	[esp+48h+var_34]
		push	[esp+4Ch+var_24]
		push	eax
		lea	eax, [esp+54h+var_14]
		push	eax
		call	_bn_GF2m_mul_2x2
		mov	ecx, [ebx]
		add	esi, 2
		mov	eax, [esp+58h+var_14]
		add	esp, 14h
		xor	[ecx+edi], eax
		mov	ecx, [ebx]
		mov	eax, [esp+44h+var_10]
		xor	[ecx+edi+4], eax
		mov	ecx, [ebx]
		mov	eax, [esp+44h+var_C]
		xor	[ecx+edi+8], eax
		mov	ecx, [ebx]
		mov	eax, [esp+44h+var_8]
		xor	[ecx+edi+0Ch], eax
		add	edi, 8
		mov	edx, [ebp+4]
		cmp	esi, edx
		jl	short loc_DA9

loc_E10:				; CODE XREF: _BN_GF2m_mod_mul_arr+14Fj
		mov	esi, [esp+44h+var_28]
		mov	eax, [esp+44h+var_30]
		add	eax, 2
		mov	[esp+44h+var_30], eax
		mov	ecx, [esi+4]
		cmp	eax, ecx
		jl	loc_D78

loc_E2A:				; CODE XREF: _BN_GF2m_mod_mul_arr+112j
		mov	ecx, [ebx+4]
		test	ecx, ecx
		jle	short loc_E4A
		mov	eax, [ebx]
		lea	edx, [ecx-1]
		lea	edx, [eax+edx*4]

loc_E39:				; CODE XREF: _BN_GF2m_mod_mul_arr+1EDj
		mov	eax, [edx]
		lea	edx, [edx-4]
		test	eax, eax
		jnz	short loc_E47
		dec	ecx
		test	ecx, ecx
		jg	short loc_E39

loc_E47:				; CODE XREF: _BN_GF2m_mod_mul_arr+1E8j
		mov	[ebx+4], ecx

loc_E4A:				; CODE XREF: _BN_GF2m_mod_mul_arr+1D7j
		push	[esp+44h+var_20]
		push	ebx
		push	[esp+4Ch+var_1C]
		call	_BN_GF2m_mod_arr
		xor	ecx, ecx
		add	esp, 0Ch
		test	eax, eax
		mov	edx, 1
		cmovnz	ecx, edx
		mov	[esp+44h+var_34], ecx

loc_E6B:				; CODE XREF: _BN_GF2m_mod_mul_arr+9Dj
		pop	ebp

$err$63:				; CODE XREF: _BN_GF2m_mod_mul_arr+7Cj
		push	[esp+40h+var_18]
		call	_BN_CTX_end
		mov	ecx, [esp+44h+var_4]
		add	esp, 4
		mov	eax, [esp+40h+var_34]
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 34h
		retn
_BN_GF2m_mod_mul_arr endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E90h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_GF2m_mod_solve_quad
_BN_GF2m_mod_solve_quad	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_8]
		push	edi
		push	esi
		call	_BN_num_bits
		push	4CCh
		push	offset ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@ ; ".\\crypto\\bn\\bn_gf2m.c"
		lea	edi, [eax+1]
		lea	eax, ds:0[edi*4]
		push	eax
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jz	short loc_F25
		push	edi
		push	ebx
		push	esi
		call	_BN_GF2m_poly2arr
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_EFB
		cmp	esi, edi
		jg	short loc_EFB
		push	[esp+0Ch+arg_C]
		push	ebx
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		call	_BN_GF2m_mod_solve_quad_arr
		add	esp, 10h
		mov	esi, eax
		push	ebx
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_EFB:				; CODE XREF: _BN_GF2m_mod_solve_quad+3Fj
					; _BN_GF2m_mod_solve_quad+43j
		push	4D0h
		push	offset ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@ ; ".\\crypto\\bn\\bn_gf2m.c"
		push	6Ah ; 'j'
		push	86h ; '†'
		push	3
		call	_ERR_put_error
		add	esp, 14h

$err$9_1:
		push	ebx
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_F25:				; CODE XREF: _BN_GF2m_mod_solve_quad+2Ej
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
_BN_GF2m_mod_solve_quad	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F2Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_GF2m_mod_solve_quad_arr
_BN_GF2m_mod_solve_quad_arr proc near	; CODE XREF: _BN_GF2m_mod_solve_quad+52p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 18h
		call	__chkstk
		push	edi
		mov	edi, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_C], 0
		mov	[esp+1Ch+var_4], 0
		cmp	dword ptr [edi], 0
		jnz	short loc_F68
		push	0
		push	[esp+20h+arg_0]
		call	_BN_set_word
		add	esp, 8
		mov	eax, 1
		pop	edi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_F68:				; CODE XREF: _BN_GF2m_mod_solve_quad_arr+22j
		push	ebx
		mov	ebx, [esp+20h+arg_C]
		push	ebp
		push	esi
		push	ebx
		call	_BN_CTX_start
		push	ebx
		call	_BN_CTX_get
		push	ebx
		mov	[esp+34h+arg_8], eax
		call	_BN_CTX_get
		push	ebx
		mov	esi, eax
		call	_BN_CTX_get
		mov	ebp, eax
		add	esp, 10h
		mov	[esp+28h+var_10], ebp
		test	ebp, ebp
		jz	$err$61
		push	edi
		push	[esp+2Ch+arg_4]
		push	[esp+30h+arg_8]
		call	_BN_GF2m_mod_arr
		add	esp, 0Ch
		test	eax, eax
		jz	$err$61
		mov	eax, [esp+28h+arg_8]
		cmp	dword ptr [eax+4], 0
		jnz	short loc_FEC
		push	0
		push	[esp+2Ch+arg_0]
		call	_BN_set_word
		add	esp, 8
		mov	[esp+28h+var_C], 1
		push	ebx
		call	_BN_CTX_end
		mov	eax, [esp+2Ch+var_C]
		add	esp, 4
		pop	esi
		pop	ebp
		pop	ebx
		pop	edi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_FEC:				; CODE XREF: _BN_GF2m_mod_solve_quad_arr+93j
		test	byte ptr [edi],	1
		jz	loc_10DB
		push	eax
		push	esi
		call	_BN_copy
		add	esp, 8
		test	eax, eax
		jz	$err$61
		mov	eax, [edi]
		dec	eax
		mov	[esp+28h+var_10], 1
		cdq
		sub	eax, edx
		sar	eax, 1
		cmp	eax, 1
		jl	short loc_106F

loc_101C:				; CODE XREF: _BN_GF2m_mod_solve_quad_arr+141j
		push	ebx
		push	edi
		push	esi
		push	esi
		call	_BN_GF2m_mod_sqr_arr
		add	esp, 10h
		test	eax, eax
		jz	$err$61
		push	ebx
		push	edi
		push	esi
		push	esi
		call	_BN_GF2m_mod_sqr_arr
		add	esp, 10h
		test	eax, eax
		jz	$err$61
		push	[esp+28h+arg_8]
		push	esi
		push	esi
		call	_BN_GF2m_add
		add	esp, 0Ch
		test	eax, eax
		jz	$err$61
		mov	eax, [edi]
		mov	ecx, [esp+28h+var_10]
		dec	eax
		cdq
		inc	ecx
		sub	eax, edx
		mov	[esp+28h+var_10], ecx
		sar	eax, 1
		cmp	ecx, eax
		jle	short loc_101C

loc_106F:				; CODE XREF: _BN_GF2m_mod_solve_quad_arr+EEj
					; _BN_GF2m_mod_solve_quad_arr+2D1j ...
		push	ebx
		push	edi
		push	esi
		push	ebp
		call	_BN_GF2m_mod_sqr_arr
		add	esp, 10h
		test	eax, eax
		jz	$err$61
		push	ebp
		push	esi
		push	ebp
		call	_BN_GF2m_add
		add	esp, 0Ch
		test	eax, eax
		jz	$err$61
		push	[esp+28h+arg_8]
		push	ebp
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jz	loc_1246
		push	4AFh
		push	offset ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@ ; ".\\crypto\\bn\\bn_gf2m.c"
		push	74h ; 't'
		push	87h ; '‡'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		push	ebx
		call	_BN_CTX_end
		mov	eax, [esp+2Ch+var_C]
		add	esp, 4
		pop	esi
		pop	ebp
		pop	ebx
		pop	edi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_10DB:				; CODE XREF: _BN_GF2m_mod_solve_quad_arr+C3j
		push	ebx
		call	_BN_CTX_get
		push	ebx
		mov	[esp+30h+var_18], eax
		call	_BN_CTX_get
		push	ebx
		mov	[esp+34h+var_14], eax
		call	_BN_CTX_get
		add	esp, 0Ch
		mov	[esp+28h+var_8], eax
		test	eax, eax
		jz	$err$61

loc_1104:				; CODE XREF: _BN_GF2m_mod_solve_quad_arr+2DAj
		push	0
		push	0
		push	dword ptr [edi]
		push	[esp+34h+var_18]
		call	_BN_rand
		add	esp, 10h
		test	eax, eax
		jz	$err$61
		mov	eax, [esp+28h+var_18]
		push	edi
		push	eax
		push	eax
		call	_BN_GF2m_mod_arr
		add	esp, 0Ch
		test	eax, eax
		jz	$err$61
		push	0
		push	esi
		call	_BN_set_word
		push	[esp+30h+var_18]
		push	ebp
		call	_BN_copy
		add	esp, 10h
		test	eax, eax
		jz	$err$61
		mov	eax, [edi]
		mov	ebp, 1
		dec	eax
		cmp	eax, ebp
		jl	loc_11EC

loc_1162:				; CODE XREF: _BN_GF2m_mod_solve_quad_arr+2BAj
		push	ebx
		push	edi
		push	esi
		push	esi
		call	_BN_GF2m_mod_sqr_arr
		add	esp, 10h
		test	eax, eax
		jz	$err$61
		push	ebx
		push	edi
		push	[esp+30h+var_10]
		push	[esp+34h+var_14]
		call	_BN_GF2m_mod_sqr_arr
		add	esp, 10h
		test	eax, eax
		jz	$err$61
		push	ebx
		push	edi
		push	[esp+30h+arg_8]
		push	[esp+34h+var_14]
		push	[esp+38h+var_8]
		call	_BN_GF2m_mod_mul_arr
		add	esp, 14h
		test	eax, eax
		jz	$err$61
		push	[esp+28h+var_8]
		push	esi
		push	esi
		call	_BN_GF2m_add
		add	esp, 0Ch
		test	eax, eax
		jz	$err$61
		push	[esp+28h+var_18]
		push	[esp+2Ch+var_14]
		push	[esp+30h+var_10]
		call	_BN_GF2m_add
		add	esp, 0Ch
		test	eax, eax
		jz	$err$61
		mov	eax, [edi]
		inc	ebp
		dec	eax
		cmp	ebp, eax
		jle	loc_1162

loc_11EC:				; CODE XREF: _BN_GF2m_mod_solve_quad_arr+230j
		mov	ebp, [esp+28h+var_10]
		mov	eax, [esp+28h+var_4]
		inc	eax
		mov	[esp+28h+var_4], eax
		cmp	dword ptr [ebp+4], 0
		jnz	loc_106F
		cmp	eax, 32h ; '2'
		jl	loc_1104
		cmp	dword ptr [ebp+4], 0
		jnz	loc_106F
		push	4A5h
		push	offset ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@ ; ".\\crypto\\bn\\bn_gf2m.c"
		push	71h ; 'q'
		push	87h ; '‡'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		push	ebx
		call	_BN_CTX_end
		mov	eax, [esp+2Ch+var_C]
		add	esp, 4
		pop	esi
		pop	ebp
		pop	ebx
		pop	edi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1246:				; CODE XREF: _BN_GF2m_mod_solve_quad_arr+179j
		push	esi
		push	[esp+2Ch+arg_0]
		call	_BN_copy
		xor	ecx, ecx
		add	esp, 8
		test	eax, eax
		mov	edx, 1
		cmovnz	ecx, edx
		mov	[esp+28h+var_C], ecx

$err$61:				; CODE XREF: _BN_GF2m_mod_solve_quad_arr+6Cj
					; _BN_GF2m_mod_solve_quad_arr+85j ...
		push	ebx
		call	_BN_CTX_end
		mov	eax, [esp+2Ch+var_C]
		add	esp, 4
		pop	esi
		pop	ebp
		pop	ebx
		pop	edi
		add	esp, 18h
		retn
_BN_GF2m_mod_solve_quad_arr endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1278h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_GF2m_mod_sqr
_BN_GF2m_mod_sqr proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_8]
		push	edi
		push	esi
		call	_BN_num_bits
		push	264h
		push	offset ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@ ; ".\\crypto\\bn\\bn_gf2m.c"
		lea	edi, [eax+1]
		lea	eax, ds:0[edi*4]
		push	eax
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jz	short loc_130D
		push	edi
		push	ebx
		push	esi
		call	_BN_GF2m_poly2arr
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_12E3
		cmp	esi, edi
		jg	short loc_12E3
		push	[esp+0Ch+arg_C]
		push	ebx
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		call	_BN_GF2m_mod_sqr_arr
		add	esp, 10h
		mov	esi, eax
		push	ebx
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_12E3:				; CODE XREF: _BN_GF2m_mod_sqr+3Fj
					; _BN_GF2m_mod_sqr+43j
		push	268h
		push	offset ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@ ; ".\\crypto\\bn\\bn_gf2m.c"
		push	6Ah ; 'j'
		push	88h ; 'ˆ'
		push	3
		call	_ERR_put_error
		add	esp, 14h

$err$9:
		push	ebx
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_130D:				; CODE XREF: _BN_GF2m_mod_sqr+2Ej
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
_BN_GF2m_mod_sqr endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1314h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_GF2m_mod_sqr_arr
_BN_GF2m_mod_sqr_arr proc near		; CODE XREF: _BN_GF2m_mod_exp_arr+9Ap
					; _BN_GF2m_mod_mul_arr+50p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_C]
		push	esi
		push	edi
		push	ebx
		xor	esi, esi
		call	_BN_CTX_start
		push	ebx
		call	_BN_CTX_get
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	$err$27
		push	ebp
		mov	ebp, [esp+10h+arg_4]
		mov	eax, [ebp+4]
		add	eax, eax
		cmp	eax, [edi+8]
		jg	short loc_1349
		mov	eax, edi
		jmp	short loc_1353
; ---------------------------------------------------------------------------

loc_1349:				; CODE XREF: _BN_GF2m_mod_sqr_arr+2Fj
		push	eax
		push	edi
		call	_bn_expand2
		add	esp, 8

loc_1353:				; CODE XREF: _BN_GF2m_mod_sqr_arr+33j
		test	eax, eax
		jz	loc_1454
		mov	ebx, [ebp+4]
		sub	ebx, 1
		js	loc_1409

loc_1367:				; CODE XREF: _BN_GF2m_mod_sqr_arr+EDj
		mov	eax, [ebp+0]
		mov	esi, [eax+ebx*4]
		mov	eax, esi
		shr	eax, 1Ch
		mov	ecx, esi
		shr	ecx, 18h
		and	ecx, 0Fh
		mov	edx, _SQR_tb[eax*4]
		mov	eax, esi
		shr	eax, 14h
		and	eax, 0Fh
		shl	edx, 8
		or	edx, _SQR_tb[ecx*4]
		shl	edx, 8
		shr	esi, 10h
		or	edx, _SQR_tb[eax*4]
		and	esi, 0Fh
		mov	eax, [edi]
		shl	edx, 8
		or	edx, _SQR_tb[esi*4]
		mov	[eax+ebx*8+4], edx
		mov	eax, [ebp+0]
		mov	edx, [eax+ebx*4]
		mov	eax, edx
		shr	eax, 0Ch
		and	eax, 0Fh
		mov	ecx, _SQR_tb[eax*4]
		mov	eax, edx
		shr	eax, 8
		and	eax, 0Fh
		shl	ecx, 8
		or	ecx, _SQR_tb[eax*4]
		mov	eax, edx
		shr	eax, 4
		and	edx, 0Fh
		and	eax, 0Fh
		shl	ecx, 8
		or	ecx, _SQR_tb[eax*4]
		mov	eax, [edi]
		shl	ecx, 8
		or	ecx, _SQR_tb[edx*4]
		mov	[eax+ebx*8], ecx
		sub	ebx, 1
		jns	loc_1367
		xor	esi, esi

loc_1409:				; CODE XREF: _BN_GF2m_mod_sqr_arr+4Dj
		mov	eax, [ebp+4]
		add	eax, eax
		mov	[edi+4], eax
		test	eax, eax
		jle	short loc_1435
		mov	ecx, [edi]
		lea	edx, [eax-1]
		lea	edx, [ecx+edx*4]
		nop	dword ptr [eax+00000000h]

loc_1424:				; CODE XREF: _BN_GF2m_mod_sqr_arr+11Cj
		mov	ecx, [edx]
		lea	edx, [edx-4]
		test	ecx, ecx
		jnz	short loc_1432
		dec	eax
		test	eax, eax
		jg	short loc_1424

loc_1432:				; CODE XREF: _BN_GF2m_mod_sqr_arr+117j
		mov	[edi+4], eax

loc_1435:				; CODE XREF: _BN_GF2m_mod_sqr_arr+FFj
		push	[esp+10h+arg_8]
		push	edi
		push	[esp+18h+arg_0]
		call	_BN_GF2m_mod_arr
		mov	ebx, [esp+1Ch+arg_C]
		add	esp, 0Ch
		test	eax, eax
		mov	ecx, 1
		cmovnz	esi, ecx

loc_1454:				; CODE XREF: _BN_GF2m_mod_sqr_arr+41j
		pop	ebp

$err$27:				; CODE XREF: _BN_GF2m_mod_sqr_arr+1Cj
		push	ebx
		call	_BN_CTX_end
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		retn
_BN_GF2m_mod_sqr_arr endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1464h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_GF2m_mod_sqrt
_BN_GF2m_mod_sqrt proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_8]
		push	edi
		push	esi
		call	_BN_num_bits
		push	449h
		push	offset ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@ ; ".\\crypto\\bn\\bn_gf2m.c"
		lea	edi, [eax+1]
		lea	eax, ds:0[edi*4]
		push	eax
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jz	short loc_14F9
		push	edi
		push	ebx
		push	esi
		call	_BN_GF2m_poly2arr
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_14CF
		cmp	esi, edi
		jg	short loc_14CF
		push	[esp+0Ch+arg_C]
		push	ebx
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		call	_BN_GF2m_mod_sqrt_arr
		add	esp, 10h
		mov	esi, eax
		push	ebx
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_14CF:				; CODE XREF: _BN_GF2m_mod_sqrt+3Fj
					; _BN_GF2m_mod_sqrt+43j
		push	44Dh
		push	offset ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@ ; ".\\crypto\\bn\\bn_gf2m.c"
		push	6Ah ; 'j'
		push	89h ; '‰'
		push	3
		call	_ERR_put_error
		add	esp, 14h

$err$9_0:
		push	ebx
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_14F9:				; CODE XREF: _BN_GF2m_mod_sqrt+2Ej
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
_BN_GF2m_mod_sqrt endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1500h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_GF2m_mod_sqrt_arr
_BN_GF2m_mod_sqrt_arr proc near		; CODE XREF: _BN_GF2m_mod_sqrt+52p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		mov	edi, [esp+8+arg_8]
		xor	ebp, ebp
		cmp	[edi], ebp
		jnz	short loc_151F
		push	ebp
		push	[esp+0Ch+arg_0]
		call	_BN_set_word
		add	esp, 8
		lea	eax, [ebp+1]
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_151F:				; CODE XREF: _BN_GF2m_mod_sqrt_arr+Aj
		push	ebx
		push	esi
		mov	esi, [esp+10h+arg_C]
		push	esi
		call	_BN_CTX_start
		push	esi
		call	_BN_CTX_get
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	short $err$7_0
		mov	eax, [edi]
		dec	eax
		push	eax
		push	ebx
		call	_BN_set_bit
		add	esp, 8
		test	eax, eax
		jz	short $err$7_0
		push	esi
		push	edi
		push	ebx
		push	[esp+1Ch+arg_4]
		push	[esp+20h+arg_0]
		call	_BN_GF2m_mod_exp_arr
		add	esp, 14h
		mov	ebp, eax

$err$7_0:				; CODE XREF: _BN_GF2m_mod_sqrt_arr+38j
					; _BN_GF2m_mod_sqrt_arr+49j
		push	esi
		call	_BN_CTX_end
		add	esp, 4
		mov	eax, ebp
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		retn
_BN_GF2m_mod_sqrt_arr endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1570h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_GF2m_poly2arr
_BN_GF2m_poly2arr proc near		; CODE XREF: _BN_GF2m_mod+2Ap
					; _BN_GF2m_mod_exp+33p	...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		xor	eax, eax
		mov	ebx, [ebp+4]
		test	ebx, ebx
		jnz	short loc_1582
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1582:				; CODE XREF: _BN_GF2m_poly2arr+Dj
		add	ebx, 0FFFFFFFFh
		js	short loc_15D2
		push	esi
		push	edi
		mov	edi, ebx
		shl	edi, 5
		xchg	ax, ax

loc_1590:				; CODE XREF: _BN_GF2m_poly2arr+5Ej
		mov	ecx, [ebp+0]
		cmp	dword ptr [ecx+ebx*4], 0
		jz	short loc_15C8
		mov	edx, 80000000h
		mov	esi, 1Fh

loc_15A3:				; CODE XREF: _BN_GF2m_poly2arr+56j
		mov	ecx, [ebp+0]
		test	[ecx+ebx*4], edx
		jz	short loc_15C1
		cmp	eax, [esp+10h+arg_8]
		jge	short loc_15C0
		mov	ebp, [esp+10h+arg_4]
		lea	ecx, [edi+esi]
		mov	[ebp+eax*4+0], ecx
		mov	ebp, [esp+10h+arg_0]

loc_15C0:				; CODE XREF: _BN_GF2m_poly2arr+3Fj
		inc	eax

loc_15C1:				; CODE XREF: _BN_GF2m_poly2arr+39j
		shr	edx, 1
		sub	esi, 1
		jns	short loc_15A3

loc_15C8:				; CODE XREF: _BN_GF2m_poly2arr+27j
		sub	edi, 20h ; ' '
		sub	ebx, 1
		jns	short loc_1590
		pop	edi
		pop	esi

loc_15D2:				; CODE XREF: _BN_GF2m_poly2arr+15j
		cmp	eax, [esp+8+arg_8]
		jge	short loc_15E4
		mov	ecx, [esp+8+arg_4]
		mov	dword ptr [ecx+eax*4], 0FFFFFFFFh
		inc	eax

loc_15E4:				; CODE XREF: _BN_GF2m_poly2arr+66j
		pop	ebp
		pop	ebx
		retn
_BN_GF2m_poly2arr endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 15E8h
; COMDAT (pick any)
		public ??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@
; `string'
??_C@_0BG@LLCNHAHB@?4?2crypto?2bn?2bn_gf2m?4c?$AA@ db '.\crypto\bn\bn_gf2m.c',0
					; DATA XREF: _BN_GF2m_mod+60o
					; _BN_GF2m_mod_exp+12o	...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _BN_GF2m_mod_exp+22p
					; _BN_GF2m_mod_mul+22p	...
		extrn _CRYPTO_free:near	; CODE XREF: _BN_GF2m_mod_exp+61p
					; _BN_GF2m_mod_exp+8Bp	...
		extrn _ERR_put_error:near ; CODE XREF: _BN_GF2m_mod+6Ep
					; _BN_GF2m_mod_exp+82p	...
		extrn _BN_CTX_start:near ; CODE	XREF: _BN_GF2m_mod_div+Ap
					; _BN_GF2m_mod_div_arr+Ap ...
		extrn _BN_CTX_get:near	; CODE XREF: _BN_GF2m_mod_div+10p
					; _BN_GF2m_mod_div_arr+10p ...
		extrn _BN_CTX_end:near	; CODE XREF: _BN_GF2m_mod_div+55p
					; _BN_GF2m_mod_div_arr+48p ...
		extrn _BN_rand:near	; CODE XREF: _BN_GF2m_mod_solve_quad_arr+1E2p
		extrn _BN_num_bits:near	; CODE XREF: _BN_GF2m_mod_exp+8p
					; _BN_GF2m_mod_exp_arr+87p ...
		extrn _BN_num_bits_word:near ; CODE XREF: _BN_GF2m_mod_inv+47Ep
		extrn _BN_copy:near	; CODE XREF: _BN_GF2m_mod_exp_arr+43p
					; _BN_GF2m_mod_exp_arr+D5p ...
		extrn _BN_set_word:near	; CODE XREF: _BN_GF2m_arr2poly+Ap
					; _BN_GF2m_mod_arr+1Ap	...
		extrn _BN_is_bit_set:near ; CODE XREF: _BN_GF2m_mod_exp_arr+ABp
		extrn _BN_ucmp:near	; CODE XREF: _BN_GF2m_mod_solve_quad_arr+16Fp
		extrn _BN_set_bit:near	; CODE XREF: _BN_GF2m_arr2poly+23p
					; _BN_GF2m_mod_sqrt_arr+3Fp
		extrn _bn_expand2:near	; CODE XREF: _BN_GF2m_add+2Dp
					; _BN_GF2m_mod_arr+48p	...
		extrn _bn_GF2m_mul_2x2:near ; CODE XREF: _BN_GF2m_mod_mul_arr+17Cp
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _BN_GF2m_mod+52p
					; _BN_GF2m_mod+80p ...
		extrn __chkstk:near	; CODE XREF: _BN_GF2m_mod+5p
					; _BN_GF2m_mod_arr+5p ...
		extrn ___security_cookie:near ;	DATA XREF: _BN_GF2m_mod+Ar
					; _BN_GF2m_mod_mul_arr+Ar


		end
