;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	2B2E93289CCC2C356F9E039A002B02B1
; Input	CRC32 :	23DDE696

; File Name   :	C:\compspace\Diff\openssl\obj\rsa_asn1.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_cb		proc near		; DATA XREF: .rdata:00000054o
					; .rdata:0000013Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_1B
		call	_RSA_new
		mov	ecx, [esp+arg_4]
		mov	[ecx], eax
		neg	eax
		sbb	eax, eax
		and	eax, 2
		retn
; ---------------------------------------------------------------------------

loc_1B:					; CODE XREF: _rsa_cb+6j
		cmp	eax, 2
		jnz	short loc_3C

loc_20:					; DATA XREF: .rdata:000000C8o
		push	esi

loc_21:					; DATA XREF: .rdata:000000DCo
		mov	esi, [esp+4+arg_4]
		push	dword ptr [esi]

loc_27:					; DATA XREF: .rdata:000000F0o
		call	_RSA_free

loc_2C:					; DATA XREF: .rdata:00000104o
		add	esp, 4
		mov	dword ptr [esi], 0
		mov	eax, 2
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3C:					; CODE XREF: _rsa_cb+1Ej
		mov	eax, 1
		retn
_rsa_cb		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 44h
_RSAPrivateKey_aux dd 4	dup(0)		; DATA XREF: .rdata:00000120o
		dd offset _rsa_cb
dword_58	dd 0			; DATA XREF: .rdata:00000124o
					; .rdata:00000180o
_RSAPrivateKey_seq_tt dd 2 dup(0)	; DATA XREF: .rdata:00000118o
		dd 4
		dd offset ??_C@_07CPCPJPKL@version?$AA@	; "version"
		dd offset _LONG_it
		dd 2 dup(0)
		dd 10h
		dd offset ??_C@_01EFFIKLCJ@n?$AA@ ; "n"
		dd offset _BIGNUM_it
		dd 2 dup(0)
		dd 14h
off_90		dd offset ??_C@_01KGKMHCOC@e?$AA@
					; DATA XREF: .rdata:_RSA_PSS_PARAMS_seq_tto
					; .rdata:000001B8o ...
					; `string'
		dd offset _BIGNUM_it
		align 10h
		dd 18h
		dd offset ??_C@_01LPLHEDKD@d?$AA@ ; `string'
		dd offset _BIGNUM_it
		dd 2 dup(0)
		dd 1Ch
		dd offset ??_C@_01JBBJJEPG@p?$AA@ ; `string'
		dd offset _BIGNUM_it
		dd 2 dup(0)
		dd offset loc_20
		dd offset ??_C@_01IIACKFLH@q?$AA@ ; `string'
		dd offset _BIGNUM_it
		dd 2 dup(0)
		dd offset loc_21+3
		dd offset ??_C@_04OIPJJFD@dmp1?$AA@ ; "dmp1"
		dd offset _BIGNUM_it
		align 10h
		dd offset loc_27+1
		dd offset ??_C@_04PENPDGE@dmq1?$AA@ ; "dmq1"
		dd offset _BIGNUM_it
		dd 2 dup(0)
		dd offset loc_2C
		dd offset ??_C@_04BBEMPLKC@iqmp?$AA@ ; "iqmp"
		dd offset _BIGNUM_it
; `RSAPrivateKey_it'::`2'::local_it
?local_it@?1??RSAPrivateKey_it@@9@9 dd 1, 10h ;	DATA XREF: _RSAPrivateKey_dup+4o
					; _RSAPrivateKey_ito ...
		dd offset _RSAPrivateKey_seq_tt
		dd 9
		dd offset _RSAPrivateKey_aux
		dd offset dword_58
		dd offset ??_C@_03DICHAJGH@RSA?$AA@ ; `string'
_RSAPublicKey_aux dd 4 dup(0)		; DATA XREF: .rdata:0000017Co
		dd offset _rsa_cb
		dd 0
_RSAPublicKey_seq_tt dd	2 dup(0)	; DATA XREF: .rdata:00000174o
		dd 10h
		dd offset ??_C@_01EFFIKLCJ@n?$AA@ ; "n"
		dd offset _BIGNUM_it
		align 10h
		dd 14h
		dd offset ??_C@_01KGKMHCOC@e?$AA@ ; `string'
		dd offset _BIGNUM_it
; `RSAPublicKey_it'::`2'::local_it
?local_it@?1??RSAPublicKey_it@@9@9 dd 1, 10h ; DATA XREF: _RSAPublicKey_dup+4o
					; _RSAPublicKey_ito ...
		dd offset _RSAPublicKey_seq_tt
		dd 2
		dd offset _RSAPublicKey_aux
		dd offset dword_58
		dd offset ??_C@_03DICHAJGH@RSA?$AA@ ; `string'
; `RSA_PSS_PARAMS_it'::`2'::local_it
?local_it@?1??RSA_PSS_PARAMS_it@@9@9 dd	1, 10h ; DATA XREF: _RSA_PSS_PARAMS_freeo
					; _RSA_PSS_PARAMS_ito ...
		dd offset _RSA_PSS_PARAMS_seq_tt
		dd 4, 0
		dd 10h
		dd offset ??_C@_0P@PJJHDFJB@RSA_PSS_PARAMS?$AA@	; "RSA_PSS_PARAMS"
_RSA_PSS_PARAMS_seq_tt dd offset off_90+1 ; DATA XREF: .rdata:00000190o
		align 10h
		dd offset ??_C@_0O@DHJLLKEK@hashAlgorithm?$AA@ ; "hashAlgorithm"
		dd offset _X509_ALGOR_it
		dd offset off_90+1
		dd 1, 4
		dd offset ??_C@_0BB@KKPGFJED@maskGenAlgorithm?$AA@ ; "maskGenAlgorithm"
		dd offset _X509_ALGOR_it
		dd offset off_90+1
		dd 2, 8
		dd offset ??_C@_0L@PKGNFOCE@saltLength?$AA@ ; "saltLength"
		dd offset _ASN1_INTEGER_it
		dd offset off_90+1
		dd 3, 0Ch
		dd offset ??_C@_0N@KGDDKMLA@trailerField?$AA@ ;	"trailerField"
		dd offset _ASN1_INTEGER_it
_RSA_OAEP_PARAMS_seq_tt	dd offset off_90+1 ; DATA XREF:	.rdata:00000238o
		align 10h
		dd offset ??_C@_08FMOAAMEA@hashFunc?$AA@ ; "hashFunc"
		dd offset _X509_ALGOR_it
		dd offset off_90+1
		dd 1, 4
		dd offset ??_C@_0M@CPCGNJPJ@maskGenFunc?$AA@ ; "maskGenFunc"
		dd offset _X509_ALGOR_it
		dd offset off_90+1
		dd 2, 8
		dd offset ??_C@_0M@FADNKHFD@pSourceFunc?$AA@ ; "pSourceFunc"
		dd offset _X509_ALGOR_it
; `RSA_OAEP_PARAMS_it'::`2'::local_it
?local_it@?1??RSA_OAEP_PARAMS_it@@9@9 dd 1, 10h	; DATA XREF: _RSA_OAEP_PARAMS_freeo
					; _RSA_OAEP_PARAMS_ito	...
		dd offset _RSA_OAEP_PARAMS_seq_tt
		dd 3, 0
		dd 0Ch
		dd offset ??_C@_0BA@INJNCCPK@RSA_OAEP_PARAMS?$AA@ ; "RSA_OAEP_PARAMS"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 24Ch
; COMDAT (pick any)
		public ??_C@_07CPCPJPKL@version?$AA@
; `string'
??_C@_07CPCPJPKL@version?$AA@ db 'version',0 ; DATA XREF: .rdata:00000068o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 254h
; COMDAT (pick any)
		public ??_C@_01EFFIKLCJ@n?$AA@
; `string'
??_C@_01EFFIKLCJ@n?$AA@	db 'n',0        ; DATA XREF: .rdata:0000007Co
					; .rdata:00000150o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 258h
; COMDAT (pick any)
		public ??_C@_01KGKMHCOC@e?$AA@
; `string'
??_C@_01KGKMHCOC@e?$AA@	db 65h,	0	; DATA XREF: .rdata:off_90o
					; .rdata:00000164o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 25Ch
; COMDAT (pick any)
		public ??_C@_01LPLHEDKD@d?$AA@
; `string'
??_C@_01LPLHEDKD@d?$AA@	db 64h,	0	; DATA XREF: .rdata:000000A4o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 260h
; COMDAT (pick any)
		public ??_C@_01JBBJJEPG@p?$AA@
; `string'
??_C@_01JBBJJEPG@p?$AA@	db 70h,	0	; DATA XREF: .rdata:000000B8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 264h
; COMDAT (pick any)
		public ??_C@_01IIACKFLH@q?$AA@
; `string'
??_C@_01IIACKFLH@q?$AA@	db 71h,	0	; DATA XREF: .rdata:000000CCo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 268h
; COMDAT (pick any)
		public ??_C@_04OIPJJFD@dmp1?$AA@
; `string'
??_C@_04OIPJJFD@dmp1?$AA@ db 'dmp1',0   ; DATA XREF: .rdata:000000E0o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 270h
; COMDAT (pick any)
		public ??_C@_04PENPDGE@dmq1?$AA@
; `string'
??_C@_04PENPDGE@dmq1?$AA@ db 'dmq1',0   ; DATA XREF: .rdata:000000F4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 278h
; COMDAT (pick any)
		public ??_C@_04BBEMPLKC@iqmp?$AA@
; `string'
??_C@_04BBEMPLKC@iqmp?$AA@ db 'iqmp',0  ; DATA XREF: .rdata:00000108o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 280h
; COMDAT (pick any)
		public ??_C@_03DICHAJGH@RSA?$AA@
; `string'
??_C@_03DICHAJGH@RSA?$AA@ dd 415352h	; DATA XREF: .rdata:00000128o
					; .rdata:00000184o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 284h
; COMDAT (pick any)
		public ??_C@_0O@DHJLLKEK@hashAlgorithm?$AA@
; `string'
??_C@_0O@DHJLLKEK@hashAlgorithm?$AA@ db	'hashAlgorithm',0 ; DATA XREF: .rdata:000001B0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 294h
; COMDAT (pick any)
		public ??_C@_0BB@KKPGFJED@maskGenAlgorithm?$AA@
; `string'
??_C@_0BB@KKPGFJED@maskGenAlgorithm?$AA@ db 'maskGenAlgorithm',0
					; DATA XREF: .rdata:000001C4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2A8h
; COMDAT (pick any)
		public ??_C@_0L@PKGNFOCE@saltLength?$AA@
; `string'
??_C@_0L@PKGNFOCE@saltLength?$AA@ db 'saltLength',0 ; DATA XREF: .rdata:000001D8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2B4h
; COMDAT (pick any)
		public ??_C@_0N@KGDDKMLA@trailerField?$AA@
; `string'
??_C@_0N@KGDDKMLA@trailerField?$AA@ db 'trailerField',0 ; DATA XREF: .rdata:000001ECo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2C4h
; COMDAT (pick any)
		public ??_C@_0P@PJJHDFJB@RSA_PSS_PARAMS?$AA@
; `string'
??_C@_0P@PJJHDFJB@RSA_PSS_PARAMS?$AA@ db 'RSA_PSS_PARAMS',0 ; DATA XREF: .rdata:000001A0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2D4h
; COMDAT (pick any)
		public ??_C@_08FMOAAMEA@hashFunc?$AA@
; `string'
??_C@_08FMOAAMEA@hashFunc?$AA@ db 'hashFunc',0 ; DATA XREF: .rdata:00000200o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2E0h
; COMDAT (pick any)
		public ??_C@_0M@CPCGNJPJ@maskGenFunc?$AA@
; `string'
??_C@_0M@CPCGNJPJ@maskGenFunc?$AA@ db 'maskGenFunc',0 ; DATA XREF: .rdata:00000214o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2ECh
; COMDAT (pick any)
		public ??_C@_0M@FADNKHFD@pSourceFunc?$AA@
; `string'
??_C@_0M@FADNKHFD@pSourceFunc?$AA@ db 'pSourceFunc',0 ; DATA XREF: .rdata:00000228o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2F8h
; COMDAT (pick any)
		public ??_C@_0BA@INJNCCPK@RSA_OAEP_PARAMS?$AA@
; `string'
??_C@_0BA@INJNCCPK@RSA_OAEP_PARAMS?$AA@	db 'RSA_OAEP_PARAMS',0 ; DATA XREF: .rdata:00000248o
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 308h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSAPrivateKey_dup
_RSAPrivateKey_dup proc	near

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		push	offset ?local_it@?1??RSAPrivateKey_it@@9@9 ; `RSAPrivateKey_it'::`2'::local_it
		call	_ASN1_item_dup
		add	esp, 8
		retn
_RSAPrivateKey_dup endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 31Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSAPrivateKey_it
_RSAPrivateKey_it proc near
		mov	eax, offset ?local_it@?1??RSAPrivateKey_it@@9@9	; `RSAPrivateKey_it'::`2'::local_it
		retn
_RSAPrivateKey_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 324h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSAPublicKey_dup
_RSAPublicKey_dup proc near

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		push	offset ?local_it@?1??RSAPublicKey_it@@9@9 ; `RSAPublicKey_it'::`2'::local_it
		call	_ASN1_item_dup
		add	esp, 8
		retn
_RSAPublicKey_dup endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 338h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSAPublicKey_it
_RSAPublicKey_it proc near
		mov	eax, offset ?local_it@?1??RSAPublicKey_it@@9@9 ; `RSAPublicKey_it'::`2'::local_it
		retn
_RSAPublicKey_it endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 340h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_OAEP_PARAMS_free
_RSA_OAEP_PARAMS_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??RSA_OAEP_PARAMS_it@@9@9 ; `RSA_OAEP_PARAMS_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_RSA_OAEP_PARAMS_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 354h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_OAEP_PARAMS_it
_RSA_OAEP_PARAMS_it proc near
		mov	eax, offset ?local_it@?1??RSA_OAEP_PARAMS_it@@9@9 ; `RSA_OAEP_PARAMS_it'::`2'::local_it
		retn
_RSA_OAEP_PARAMS_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 35Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_OAEP_PARAMS_new
_RSA_OAEP_PARAMS_new proc near
		push	offset ?local_it@?1??RSA_OAEP_PARAMS_it@@9@9 ; `RSA_OAEP_PARAMS_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_RSA_OAEP_PARAMS_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 36Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_PSS_PARAMS_free
_RSA_PSS_PARAMS_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??RSA_PSS_PARAMS_it@@9@9 ; `RSA_PSS_PARAMS_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_RSA_PSS_PARAMS_free endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 380h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_PSS_PARAMS_it
_RSA_PSS_PARAMS_it proc	near
		mov	eax, offset ?local_it@?1??RSA_PSS_PARAMS_it@@9@9 ; `RSA_PSS_PARAMS_it'::`2'::local_it
		retn
_RSA_PSS_PARAMS_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 388h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_PSS_PARAMS_new
_RSA_PSS_PARAMS_new proc near
		push	offset ?local_it@?1??RSA_PSS_PARAMS_it@@9@9 ; `RSA_PSS_PARAMS_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_RSA_PSS_PARAMS_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 398h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_RSAPrivateKey
_d2i_RSAPrivateKey proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??RSAPrivateKey_it@@9@9 ; `RSAPrivateKey_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_RSAPrivateKey endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_RSAPublicKey
_d2i_RSAPublicKey proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??RSAPublicKey_it@@9@9 ; `RSAPublicKey_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_RSAPublicKey endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_RSA_OAEP_PARAMS
_d2i_RSA_OAEP_PARAMS proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??RSA_OAEP_PARAMS_it@@9@9 ; `RSA_OAEP_PARAMS_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_RSA_OAEP_PARAMS endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_RSA_PSS_PARAMS
_d2i_RSA_PSS_PARAMS proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??RSA_PSS_PARAMS_it@@9@9 ; `RSA_PSS_PARAMS_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_RSA_PSS_PARAMS endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 408h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_RSAPrivateKey
_i2d_RSAPrivateKey proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??RSAPrivateKey_it@@9@9 ; `RSAPrivateKey_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_RSAPrivateKey endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 420h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_RSAPublicKey
_i2d_RSAPublicKey proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??RSAPublicKey_it@@9@9 ; `RSAPublicKey_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_RSAPublicKey endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 438h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_RSA_OAEP_PARAMS
_i2d_RSA_OAEP_PARAMS proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??RSA_OAEP_PARAMS_it@@9@9 ; `RSA_OAEP_PARAMS_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_RSA_OAEP_PARAMS endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 450h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_RSA_PSS_PARAMS
_i2d_RSA_PSS_PARAMS proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??RSA_PSS_PARAMS_it@@9@9 ; `RSA_PSS_PARAMS_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_RSA_PSS_PARAMS endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _X509_ALGOR_it:near ; DATA XREF: .rdata:000001B4o
					; .rdata:000001C8o ...
		extrn _ASN1_INTEGER_it:near ; DATA XREF: .rdata:000001DCo
					; .rdata:000001F0o
		extrn _BIGNUM_it:near	; DATA XREF: .rdata:00000080o
					; .rdata:00000094o ...
		extrn _LONG_it:near	; DATA XREF: .rdata:0000006Co
		extrn _ASN1_item_dup:near ; CODE XREF: _RSAPrivateKey_dup+9p
					; _RSAPublicKey_dup+9p
		extrn _ASN1_item_new:near ; CODE XREF: _RSA_OAEP_PARAMS_new+5p
					; _RSA_PSS_PARAMS_new+5p
		extrn _ASN1_item_free:near ; CODE XREF:	_RSA_OAEP_PARAMS_free+9p
					; _RSA_PSS_PARAMS_free+9p
		extrn _ASN1_item_d2i:near ; CODE XREF: _d2i_RSAPrivateKey+11p
					; _d2i_RSAPublicKey+11p ...
		extrn _ASN1_item_i2d:near ; CODE XREF: _i2d_RSAPrivateKey+Dp
					; _i2d_RSAPublicKey+Dp	...
		extrn _RSA_new:near	; CODE XREF: _rsa_cb+8p
		extrn _RSA_free:near	; CODE XREF: _rsa_cb:loc_27p


		end
