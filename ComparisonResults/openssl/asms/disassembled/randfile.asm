;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	137C908E1F1E035D9C24BDD02B3B8802
; Input	CRC32 :	663F2CA5

; File Name   :	C:\compspace\Diff\openssl\obj\randfile.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RAND_file_name
_RAND_file_name	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		xor	esi, esi
		call	_OPENSSL_issetugid
		mov	edi, [esp+8+arg_4]
		test	eax, eax
		jnz	short loc_58
		push	offset ??_C@_08OFLJHDDG@RANDFILE?$AA@ ;	"RANDFILE"
		call	dword ptr ds:__imp__getenv
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_58
		cmp	byte ptr [esi],	0
		jz	short loc_58
		mov	ecx, esi
		lea	edx, [ecx+1]
		nop

loc_30:					; CODE XREF: _RAND_file_name+35j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_30
		sub	ecx, edx
		lea	eax, [ecx+1]
		cmp	eax, edi
		jnb	short loc_58
		push	edi
		push	esi
		mov	esi, [esp+10h+arg_0]
		push	esi
		call	_BUF_strlcpy
		add	esp, 0Ch
		cmp	eax, edi
		jb	short loc_C9
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_58:					; CODE XREF: _RAND_file_name+Fj
					; _RAND_file_name+23j ...
		call	_OPENSSL_issetugid
		test	eax, eax
		jnz	short loc_71
		push	offset ??_C@_04GHGFPGNC@HOME?$AA@ ; "HOME"
		call	dword ptr ds:__imp__getenv
		add	esp, 4
		mov	esi, eax

loc_71:					; CODE XREF: _RAND_file_name+5Fj
		test	esi, esi
		jnz	short loc_7C
		mov	esi, offset ??_C@_02FHMLMLAN@C?3?$AA@ ;	`string'
		jmp	short loc_81
; ---------------------------------------------------------------------------

loc_7C:					; CODE XREF: _RAND_file_name+73j
		cmp	byte ptr [esi],	0
		jz	short loc_C2

loc_81:					; CODE XREF: _RAND_file_name+7Aj
		mov	ecx, esi
		lea	edx, [ecx+1]

loc_86:					; CODE XREF: _RAND_file_name+8Bj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_86
		sub	ecx, edx
		lea	eax, [ecx+6]
		cmp	eax, edi
		jnb	short loc_C2
		push	edi
		push	esi
		mov	esi, [esp+10h+arg_0]
		push	esi
		call	_BUF_strlcpy
		push	edi
		push	offset ??_C@_01KMDKNFGN@?1?$AA@	; `string'
		push	esi
		call	_BUF_strlcat
		push	edi
		push	offset ??_C@_04MFMCLJBJ@?4rnd?$AA@ ; ".rnd"
		push	esi
		call	_BUF_strlcat
		add	esp, 24h
		mov	eax, esi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_C2:					; CODE XREF: _RAND_file_name+7Fj
					; _RAND_file_name+94j
		mov	esi, [esp+8+arg_0]
		mov	byte ptr [esi],	0

loc_C9:					; CODE XREF: _RAND_file_name+51j
		pop	edi
		mov	eax, esi
		pop	esi
		retn
_RAND_file_name	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl RAND_load_file(char *Filename, int)
		public _RAND_load_file
_RAND_load_file	proc near

var_488		= qword	ptr -488h
File		= dword	ptr -440h
var_43C		= dword	ptr -43Ch
var_438		= byte ptr -438h
DstBuf		= byte ptr -408h
var_4		= dword	ptr -4
Filename	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFC0h
		mov	eax, 474h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+474h+var_4], eax
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+Filename]
		xor	ebx, ebx
		mov	[esp+480h+var_43C], ebx
		test	edi, edi
		jnz	short loc_115

loc_FE:					; CODE XREF: _RAND_load_file+56j
					; _RAND_load_file+7Ej
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+474h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_115:				; CODE XREF: _RAND_load_file+2Cj
		lea	eax, [esp+480h+var_438]
		push	eax
		push	edi
		call	dword ptr ds:__imp___stat64i32
		add	esp, 8
		test	eax, eax
		js	short loc_FE
		mov	eax, 8
		call	__chkstk
		xorps	xmm0, xmm0
		lea	eax, [esp+488h+var_438]
		movsd	[esp+488h+var_488], xmm0
		push	30h ; '0'
		push	eax
		call	_RAND_add
		mov	esi, [ebp+arg_4]
		add	esp, 10h
		test	esi, esi
		jz	short loc_FE
		push	offset ??_C@_02JDPG@rb?$AA@ ; "rb"
		push	edi		; Filename
		call	dword ptr ds:__imp__fopen
		add	esp, 8
		mov	[esp+480h+File], eax
		test	eax, eax
		jz	$err$23
		nop	dword ptr [eax+eax+00h]

loc_170:				; CODE XREF: _RAND_load_file+FBj
					; _RAND_load_file+101j
		mov	edi, 400h
		test	esi, esi
		jle	short loc_17E
		cmp	esi, edi
		cmovl	edi, esi

loc_17E:				; CODE XREF: _RAND_load_file+A7j
		push	eax		; File
		push	edi		; Count
		lea	eax, [esp+488h+DstBuf]
		push	1		; ElementSize
		push	eax		; DstBuf
		call	dword ptr ds:__imp__fread
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jle	short loc_1D3
		movd	xmm0, ebx
		mov	eax, 8
		cvtdq2pd xmm0, xmm0
		call	__chkstk
		lea	eax, [esp+488h+DstBuf]
		movsd	[esp+488h+var_488], xmm0
		push	edi
		push	eax
		call	_RAND_add
		add	[esp+490h+var_43C], ebx
		add	esp, 10h
		mov	eax, [esp+480h+File]
		test	esi, esi
		jle	short loc_170
		sub	esi, edi
		test	esi, esi
		jg	short loc_170

loc_1D3:				; CODE XREF: _RAND_load_file+C7j
		push	[esp+480h+File]	; File
		call	dword ptr ds:__imp__fclose
		lea	eax, [esp+484h+DstBuf]
		push	400h
		push	eax
		call	_OPENSSL_cleanse
		mov	ebx, [esp+48Ch+var_43C]
		add	esp, 0Ch

$err$23:				; CODE XREF: _RAND_load_file+95j
		mov	ecx, [esp+480h+var_4]
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
_RAND_load_file	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 20Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl RAND_write_file(char *Filename)
		public _RAND_write_file
_RAND_write_file proc near

var_438		= dword	ptr -438h
var_434		= byte ptr -434h
Str		= byte ptr -404h
var_4		= dword	ptr -4
Filename	= dword	ptr  4

		mov	eax, 438h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+438h+var_4], eax
		push	ebx
		mov	ebx, [esp+43Ch+Filename]
		lea	eax, [esp+43Ch+var_434]
		push	ebp
		push	esi
		push	edi
		push	eax
		xor	esi, esi
		xor	edi, edi
		push	ebx
		mov	[esp+450h+var_438], esi
		call	dword ptr ds:__imp___stat64i32
		push	180h
		push	8101h
		push	ebx
		call	dword ptr ds:__imp___open
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_271
		push	offset ??_C@_02GMLFBBN@wb?$AA@ ; "wb"
		push	eax		; FileHandle
		call	dword ptr ds:__imp___fdopen
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jnz	short loc_28A

loc_271:				; CODE XREF: _RAND_write_file+4Ej
		push	offset ??_C@_02GMLFBBN@wb?$AA@ ; "wb"
		push	ebx		; Filename
		call	dword ptr ds:__imp__fopen
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jz	$err$22

loc_28A:				; CODE XREF: _RAND_write_file+63j
		push	180h
		push	ebx
		call	dword ptr ds:__imp___chmod
		mov	ebx, 400h
		add	esp, 8
		mov	ecx, ebx

loc_2A0:				; CODE XREF: _RAND_write_file+E2j
		cmp	ebx, 400h
		lea	eax, [esp+448h+Str]
		mov	esi, ebx
		cmovg	esi, ecx
		sub	ebx, 400h
		push	esi
		push	eax
		call	_RAND_bytes
		mov	ecx, [esp+450h+var_438]
		test	eax, eax
		push	ebp		; File
		mov	eax, 1
		push	esi		; Count
		cmovle	ecx, eax
		push	eax		; Size
		lea	eax, [esp+45Ch+Str]
		mov	[esp+45Ch+var_438], ecx
		push	eax		; Str
		call	dword ptr ds:__imp__fwrite
		add	esp, 18h
		test	eax, eax
		jle	short loc_2F0
		add	edi, eax
		test	ebx, ebx
		jle	short loc_2F2
		mov	ecx, 400h
		jmp	short loc_2A0
; ---------------------------------------------------------------------------

loc_2F0:				; CODE XREF: _RAND_write_file+D5j
		xor	edi, edi

loc_2F2:				; CODE XREF: _RAND_write_file+DBj
		push	ebp		; File
		call	dword ptr ds:__imp__fclose
		lea	eax, [esp+44Ch+Str]
		push	400h
		push	eax
		call	_OPENSSL_cleanse
		mov	esi, [esp+454h+var_438]
		add	esp, 0Ch

$err$22:				; CODE XREF: _RAND_write_file+78j
		mov	ecx, [esp+448h+var_4]
		or	eax, 0FFFFFFFFh
		test	esi, esi
		cmovnz	edi, eax
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 438h
		retn
_RAND_write_file endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 334h
; COMDAT (pick any)
		public ??_C@_02JDPG@rb?$AA@
; char `string'[3]
??_C@_02JDPG@rb?$AA@ db	'rb',0          ; DATA XREF: _RAND_load_file+80o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 338h
; COMDAT (pick any)
		public ??_C@_02GMLFBBN@wb?$AA@
; char `string'[3]
??_C@_02GMLFBBN@wb?$AA@	db 'wb',0       ; DATA XREF: _RAND_write_file+50o
					; _RAND_write_file:loc_271o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 33Ch
; COMDAT (pick any)
		public ??_C@_08OFLJHDDG@RANDFILE?$AA@
; char `string'[]
??_C@_08OFLJHDDG@RANDFILE?$AA@ db 'RANDFILE',0 ; DATA XREF: _RAND_file_name+11o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 348h
; COMDAT (pick any)
		public ??_C@_04GHGFPGNC@HOME?$AA@
; char `string'[]
??_C@_04GHGFPGNC@HOME?$AA@ db 'HOME',0  ; DATA XREF: _RAND_file_name+61o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 350h
; COMDAT (pick any)
		public ??_C@_02FHMLMLAN@C?3?$AA@
; `string'
??_C@_02FHMLMLAN@C?3?$AA@ db 43h, 3Ah, 0 ; DATA	XREF: _RAND_file_name+75o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 354h
; COMDAT (pick any)
		public ??_C@_01KMDKNFGN@?1?$AA@
; `string'
??_C@_01KMDKNFGN@?1?$AA@ db 2Fh, 0	; DATA XREF: _RAND_file_name+A3o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 358h
; COMDAT (pick any)
		public ??_C@_04MFMCLJBJ@?4rnd?$AA@
; `string'
??_C@_04MFMCLJBJ@?4rnd?$AA@ db '.rnd',0 ; DATA XREF: _RAND_file_name+AFo
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; int __cdecl _fclose(FILE *File)
		extrn __imp__fclose:near ; CODE	XREF: _RAND_load_file+107p
					; _RAND_write_file+E7p
					; DATA XREF: ...
; FILE *__cdecl	__fdopen(int FileHandle, const char *Mode)
		extrn __imp___fdopen:near ; CODE XREF: _RAND_write_file+56p
					; DATA XREF: _RAND_write_file+56r
; FILE *__cdecl	_fopen(const char *Filename, const char	*Mode)
		extrn __imp__fopen:near	; CODE XREF: _RAND_load_file+86p
					; _RAND_write_file+6Bp
					; DATA XREF: ...
; size_t __cdecl _fread(void *DstBuf, size_t ElementSize, size_t Count,	FILE *File)
		extrn __imp__fread:near	; CODE XREF: _RAND_load_file+BAp
					; DATA XREF: _RAND_load_file+BAr
; size_t __cdecl _fwrite(const void *Str, size_t Size, size_t Count, FILE *File)
		extrn __imp__fwrite:near ; CODE	XREF: _RAND_write_file+CAp
					; DATA XREF: _RAND_write_file+CAr
; char *__cdecl	_getenv(const char *VarName)
		extrn __imp__getenv:near ; CODE	XREF: _RAND_file_name+16p
					; _RAND_file_name+66p
					; DATA XREF: ...
		extrn __imp___chmod:near ; CODE	XREF: _RAND_write_file+84p
					; DATA XREF: _RAND_write_file+84r
		extrn __imp___open:near	; CODE XREF: _RAND_write_file+42p
					; DATA XREF: _RAND_write_file+42r
		extrn _OPENSSL_issetugid:near ;	CODE XREF: _RAND_file_name+4p
					; _RAND_file_name:loc_58p
		extrn _OPENSSL_cleanse:near ; CODE XREF: _RAND_load_file+117p
					; _RAND_write_file+F7p
		extrn _RAND_bytes:near	; CODE XREF: _RAND_write_file+ABp
		extrn _RAND_add:near	; CODE XREF: _RAND_load_file+71p
					; _RAND_load_file+E9p
		extrn _BUF_strlcpy:near	; CODE XREF: _RAND_file_name+47p
					; _RAND_file_name+9Dp
		extrn _BUF_strlcat:near	; CODE XREF: _RAND_file_name+A9p
					; _RAND_file_name+B5p
		extrn __imp___stat64i32:near ; CODE XREF: _RAND_load_file+4Bp
					; _RAND_write_file+31p
					; DATA XREF: ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _RAND_load_file+3Cp
					; _RAND_load_file+131p	...
		extrn __chkstk:near	; CODE XREF: _RAND_load_file+Bp
					; _RAND_load_file+5Dp ...
		extrn ___security_cookie:near ;	DATA XREF: _RAND_load_file+10r
					; _RAND_write_file+Ar
		extrn __fltused:near


		end
