;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	773AB33406CC5B1196ECCCC7113717D6
; Input	CRC32 :	9654B9DD

; File Name   :	C:\compspace\Diff\openssl\obj\bn_depr.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
_dummy		dd offset _dummy	; DATA XREF: .data:_dummyo
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_generate_prime
_BN_generate_prime proc	near

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, 0Ch
		call	__chkstk
		mov	eax, [esp+0Ch+arg_18]
		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+18h+arg_0]
		xor	ebx, ebx
		mov	[esp+18h+var_8], eax
		mov	eax, [esp+18h+arg_14]
		mov	[esp+18h+var_C], 1
		mov	[esp+18h+var_4], eax
		test	edi, edi
		jnz	short loc_40
		call	_BN_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_88
		jmp	short loc_42
; ---------------------------------------------------------------------------

loc_40:					; CODE XREF: _BN_generate_prime+2Dj
		mov	esi, edi

loc_42:					; CODE XREF: _BN_generate_prime+3Aj
		lea	eax, [esp+18h+var_C]
		push	eax
		push	[esp+1Ch+arg_10]
		push	[esp+20h+arg_C]
		push	[esp+24h+arg_8]
		push	[esp+28h+arg_4]
		push	esi
		call	_BN_generate_prime_ex
		add	esp, 18h
		test	eax, eax
		jz	short loc_77
		mov	ebx, 1
		xor	eax, eax
		test	ebx, ebx
		pop	edi
		cmovnz	eax, esi
		pop	esi
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_77:					; CODE XREF: _BN_generate_prime+5Ej
		test	edi, edi
		jnz	short loc_88
		test	esi, esi
		jz	short loc_88
		push	esi
		call	_BN_free
		add	esp, 4

loc_88:					; CODE XREF: _BN_generate_prime+38j
					; _BN_generate_prime+75j ...
		xor	eax, eax
		test	ebx, ebx
		pop	edi
		cmovnz	eax, esi
		pop	esi
		pop	ebx
		add	esp, 0Ch
		retn
_BN_generate_prime endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 98h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_is_prime
_BN_is_prime	proc near

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 0Ch
		call	__chkstk
		mov	eax, [esp+0Ch+arg_10]
		mov	[esp+0Ch+var_8], eax
		mov	eax, [esp+0Ch+arg_8]
		mov	[esp+0Ch+var_4], eax
		lea	eax, [esp+0Ch+var_C]
		push	eax
		push	[esp+10h+arg_C]
		mov	[esp+14h+var_C], 1
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		call	_BN_is_prime_ex
		add	esp, 1Ch
		retn
_BN_is_prime	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_is_prime_fasttest
_BN_is_prime_fasttest proc near

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 0Ch
		call	__chkstk
		mov	eax, [esp+0Ch+arg_10]
		mov	[esp+0Ch+var_8], eax
		mov	eax, [esp+0Ch+arg_8]
		mov	[esp+0Ch+var_4], eax
		lea	eax, [esp+0Ch+var_C]
		push	eax
		push	[esp+10h+arg_14]
		mov	[esp+14h+var_C], 1
		push	[esp+14h+arg_C]
		push	[esp+18h+arg_4]
		push	[esp+1Ch+arg_0]
		call	_BN_is_prime_fasttest_ex
		add	esp, 20h
		retn
_BN_is_prime_fasttest endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BN_new:near	; CODE XREF: _BN_generate_prime+2Fp
		extrn _BN_free:near	; CODE XREF: _BN_generate_prime+7Cp
		extrn _BN_generate_prime_ex:near ; CODE	XREF: _BN_generate_prime+54p
		extrn _BN_is_prime_ex:near ; CODE XREF:	_BN_is_prime+32p
		extrn _BN_is_prime_fasttest_ex:near ; CODE XREF: _BN_is_prime_fasttest+36p
		extrn __chkstk:near	; CODE XREF: _BN_generate_prime+5p
					; _BN_is_prime+5p ...


		end
