;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	A2946B358C792F18E9D6DE3122C2BDF6
; Input	CRC32 :	B089F4A3

; File Name   :	C:\compspace\Diff\openssl\obj\f_int.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
; `i2a_ASN1_INTEGER'::`2'::h
?h@?1??i2a_ASN1_INTEGER@@9@9 dd	offset ??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@
					; DATA XREF: _i2a_ASN1_INTEGER+AAr
_data		ends			; "0123456789ABCDEF"

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4
; COMDAT (pick any)
		public ??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@
; `string'
??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@ db '0123456789ABCDEF',0
					; DATA XREF: .data:`i2a_ASN1_INTEGER'::`2'::ho
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 18h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _a2i_ASN1_INTEGER
_a2i_ASN1_INTEGER proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 18h
		call	__chkstk
		push	ebx
		push	ebp
		mov	ebp, [esp+20h+arg_8]
		xor	eax, eax
		push	esi
		push	edi
		push	[esp+28h+arg_C]
		mov	[esp+2Ch+var_C], eax
		xor	edi, edi
		mov	eax, [esp+2Ch+arg_4]
		xor	esi, esi
		push	ebp
		push	[esp+30h+arg_0]
		mov	[esp+34h+var_18], edi
		mov	[esp+34h+var_8], esi
		mov	[esp+34h+var_10], 1
		mov	dword ptr [eax+4], 2
		call	_BIO_gets
		mov	ecx, eax
		add	esp, 0Ch
		cmp	ecx, 1
		jl	$err_sl$72

loc_6B:					; CODE XREF: _a2i_ASN1_INTEGER+1E3j
		cmp	byte ptr [ecx+ebp-1], 0Ah
		jnz	short loc_77
		dec	ecx
		mov	byte ptr [ecx+ebp], 0

loc_77:					; CODE XREF: _a2i_ASN1_INTEGER+58j
		test	ecx, ecx
		jz	$err_sl$72
		cmp	byte ptr [ecx+ebp-1], 0Dh
		jnz	short loc_8B
		dec	ecx
		mov	byte ptr [ecx+ebp], 0

loc_8B:					; CODE XREF: _a2i_ASN1_INTEGER+6Cj
		test	ecx, ecx
		jz	$err_sl$72
		xor	eax, eax
		cmp	byte ptr [ecx+ebp-1], 5Ch ; '\'
		setz	al
		xor	edx, edx
		mov	[esp+28h+var_14], eax
		test	ecx, ecx
		jle	short loc_D0
		nop

loc_A8:					; CODE XREF: _a2i_ASN1_INTEGER+AEj
		mov	al, [edx+ebp]
		cmp	al, 30h	; '0'
		jl	short loc_B3
		cmp	al, 39h	; '9'
		jle	short loc_C3

loc_B3:					; CODE XREF: _a2i_ASN1_INTEGER+95j
		cmp	al, 61h	; 'a'
		jl	short loc_BB
		cmp	al, 66h	; 'f'
		jle	short loc_C3

loc_BB:					; CODE XREF: _a2i_ASN1_INTEGER+9Dj
		cmp	al, 41h	; 'A'
		jl	short loc_CA
		cmp	al, 46h	; 'F'
		jg	short loc_CA

loc_C3:					; CODE XREF: _a2i_ASN1_INTEGER+99j
					; _a2i_ASN1_INTEGER+A1j
		inc	edx
		cmp	edx, ecx
		jl	short loc_A8
		jmp	short loc_CC
; ---------------------------------------------------------------------------

loc_CA:					; CODE XREF: _a2i_ASN1_INTEGER+A5j
					; _a2i_ASN1_INTEGER+A9j
		mov	ecx, edx

loc_CC:					; CODE XREF: _a2i_ASN1_INTEGER+B0j
		mov	eax, [esp+28h+var_14]

loc_D0:					; CODE XREF: _a2i_ASN1_INTEGER+8Dj
		mov	byte ptr [ecx+ebp], 0
		cmp	ecx, 2
		jl	$err_sl$72
		cmp	[esp+28h+var_10], 0
		mov	ebx, ebp
		jz	short loc_FE
		xor	edx, edx
		cmp	byte ptr [ebp+0], 30h ;	'0'
		mov	[esp+28h+var_10], edx
		jnz	short loc_FE
		cmp	byte ptr [ebp+1], 30h ;	'0'
		jnz	short loc_FE
		lea	ebx, [ebp+2]
		sub	ecx, 2

loc_FE:					; CODE XREF: _a2i_ASN1_INTEGER+CCj
					; _a2i_ASN1_INTEGER+D8j ...
		sub	ecx, eax
		mov	eax, ecx
		and	eax, 80000001h
		jns	short loc_10E
		dec	eax
		or	eax, 0FFFFFFFEh
		inc	eax

loc_10E:				; CODE XREF: _a2i_ASN1_INTEGER+EFj
		jnz	loc_25A
		mov	eax, ecx
		mov	ecx, [esp+28h+var_C]
		cdq
		sub	eax, edx
		mov	ebp, eax
		sar	ebp, 1
		lea	eax, [esi+ebp]
		mov	[esp+28h+var_4], eax
		cmp	eax, ecx
		jle	short loc_171
		lea	esi, [esi+ebp*2]
		test	edi, edi
		jnz	short loc_148
		push	0AAh ; '™'
		push	offset ??_C@_0BG@JGBIPMAG@?4?2crypto?2asn1?2f_int?4c?$AA@ ; ".\\crypto\\asn1\\f_int.c"
		push	esi
		call	_CRYPTO_malloc
		add	esp, 0Ch
		jmp	short loc_15D
; ---------------------------------------------------------------------------

loc_148:				; CODE XREF: _a2i_ASN1_INTEGER+119j
		push	0ACh ; '¨'
		push	offset ??_C@_0BG@JGBIPMAG@?4?2crypto?2asn1?2f_int?4c?$AA@ ; ".\\crypto\\asn1\\f_int.c"
		push	esi
		push	ecx
		push	edi
		call	_CRYPTO_realloc_clean
		add	esp, 14h

loc_15D:				; CODE XREF: _a2i_ASN1_INTEGER+12Ej
		test	eax, eax
		jz	loc_200
		mov	edx, eax
		mov	[esp+28h+var_C], esi
		mov	[esp+28h+var_18], edx
		jmp	short loc_175
; ---------------------------------------------------------------------------

loc_171:				; CODE XREF: _a2i_ASN1_INTEGER+112j
		mov	edx, [esp+28h+var_18]

loc_175:				; CODE XREF: _a2i_ASN1_INTEGER+157j
		xor	edi, edi
		test	ebp, ebp
		jle	short loc_1CC

loc_17B:				; CODE XREF: _a2i_ASN1_INTEGER+1B2j
		xor	esi, esi

loc_17D:				; CODE XREF: _a2i_ASN1_INTEGER+1AAj
		movzx	eax, byte ptr [ebx+esi]
		lea	ecx, [eax-30h]
		cmp	ecx, 9
		ja	short loc_18D
		mov	eax, ecx
		jmp	short loc_1A9
; ---------------------------------------------------------------------------

loc_18D:				; CODE XREF: _a2i_ASN1_INTEGER+16Fj
		lea	ecx, [eax-61h]
		cmp	ecx, 5
		ja	short loc_19A
		sub	eax, 57h ; 'W'
		jmp	short loc_1A9
; ---------------------------------------------------------------------------

loc_19A:				; CODE XREF: _a2i_ASN1_INTEGER+17Bj
		lea	ecx, [eax-41h]
		cmp	ecx, 5
		ja	loc_22F
		sub	eax, 37h ; '7'

loc_1A9:				; CODE XREF: _a2i_ASN1_INTEGER+173j
					; _a2i_ASN1_INTEGER+180j
		mov	ecx, [esp+28h+var_8]
		inc	esi
		add	ecx, edi
		add	edx, ecx
		mov	cl, [edx]
		shl	cl, 4
		or	cl, al
		mov	[edx], cl
		mov	edx, [esp+28h+var_18]
		cmp	esi, 2
		jl	short loc_17D
		inc	edi
		add	ebx, 2
		cmp	edi, ebp
		jl	short loc_17B

loc_1CC:				; CODE XREF: _a2i_ASN1_INTEGER+161j
		cmp	[esp+28h+var_14], 0
		mov	esi, [esp+28h+var_4]
		mov	[esp+28h+var_8], esi
		jz	short loc_240
		push	[esp+28h+arg_C]
		mov	ebp, [esp+2Ch+arg_8]
		push	ebp
		push	[esp+30h+arg_0]
		call	_BIO_gets
		mov	ecx, eax
		add	esp, 0Ch
		cmp	ecx, 1
		jl	short $err_sl$72
		mov	edi, [esp+28h+var_18]
		jmp	loc_6B
; ---------------------------------------------------------------------------

loc_200:				; CODE XREF: _a2i_ASN1_INTEGER+147j
		push	0AEh ; 'Æ'
		push	offset ??_C@_0BG@JGBIPMAG@?4?2crypto?2asn1?2f_int?4c?$AA@ ; ".\\crypto\\asn1\\f_int.c"
		push	41h ; 'A'
		push	66h ; 'f'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		test	edi, edi
		jz	short loc_286
		push	edi
		call	_CRYPTO_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_22F:				; CODE XREF: _a2i_ASN1_INTEGER+188j
		push	0C1h ; '¡'
		push	offset ??_C@_0BG@JGBIPMAG@?4?2crypto?2asn1?2f_int?4c?$AA@ ; ".\\crypto\\asn1\\f_int.c"
		push	8Dh ; 'ç'
		jmp	short loc_27A
; ---------------------------------------------------------------------------

loc_240:				; CODE XREF: _a2i_ASN1_INTEGER+1C1j
		mov	eax, [esp+28h+arg_4]
		mov	edi, [esp+28h+var_18]
		mov	[eax+8], edi
		pop	edi
		mov	[eax], esi
		mov	eax, 1
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_25A:				; CODE XREF: _a2i_ASN1_INTEGER:loc_10Ej
		push	0A3h ; '£'
		push	offset ??_C@_0BG@JGBIPMAG@?4?2crypto?2asn1?2f_int?4c?$AA@ ; ".\\crypto\\asn1\\f_int.c"
		push	91h ; 'ë'
		jmp	short loc_27A
; ---------------------------------------------------------------------------

$err_sl$72:				; CODE XREF: _a2i_ASN1_INTEGER+4Dj
					; _a2i_ASN1_INTEGER+61j ...
		push	0D4h ; '‘'
		push	offset ??_C@_0BG@JGBIPMAG@?4?2crypto?2asn1?2f_int?4c?$AA@ ; ".\\crypto\\asn1\\f_int.c"
		push	96h ; 'ñ'

loc_27A:				; CODE XREF: _a2i_ASN1_INTEGER+226j
					; _a2i_ASN1_INTEGER+251j
		push	66h ; 'f'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h

loc_286:				; CODE XREF: _a2i_ASN1_INTEGER+202j
		xor	eax, eax

$err$73:
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 18h
		retn
_a2i_ASN1_INTEGER endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 290h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2a_ASN1_INTEGER
_i2a_ASN1_INTEGER proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	edi
		xor	edi, edi
		test	ebx, ebx
		jnz	short loc_2A1
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2A1:				; CODE XREF: _i2a_ASN1_INTEGER+Aj
		test	dword ptr [ebx+4], 100h
		push	ebp
		mov	ebp, [esp+0Ch+arg_0]
		push	esi
		jz	short loc_2CB
		push	1
		push	offset ??_C@_01JOAMLHOP@?9?$AA@	; `string'
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, 1
		jnz	$err$24
		mov	edi, eax

loc_2CB:				; CODE XREF: _i2a_ASN1_INTEGER+1Ej
		mov	eax, [ebx]
		test	eax, eax
		jnz	short loc_2F3
		push	2
		push	offset ??_C@_02PLJDPFIO@00?$AA@	; `string'
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, 2
		jnz	$err$24
		add	edi, eax

loc_2EC:				; CODE XREF: _i2a_ASN1_INTEGER+67j
		pop	esi
		pop	ebp
		mov	eax, edi
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2F3:				; CODE XREF: _i2a_ASN1_INTEGER+3Fj
		xor	esi, esi
		test	eax, eax
		jle	short loc_2EC
		nop	dword ptr [eax+00000000h]

loc_300:				; CODE XREF: _i2a_ASN1_INTEGER+E8j
		test	esi, esi
		jz	short loc_337
		mov	eax, 0EA0EA0EBh
		mov	ecx, esi
		imul	esi
		add	edx, esi
		sar	edx, 5
		mov	eax, edx
		shr	eax, 1Fh
		add	eax, edx
		imul	eax, 23h
		sub	ecx, eax
		jnz	short loc_337
		push	2
		push	offset ??_C@_02JPPHBJLD@?2?6?$AA@ ; `string'
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, 2
		jnz	short $err$24
		add	edi, eax

loc_337:				; CODE XREF: _i2a_ASN1_INTEGER+72j
					; _i2a_ASN1_INTEGER+8Ej
		mov	edx, [ebx+8]
		mov	ecx, ?h@?1??i2a_ASN1_INTEGER@@9@9 ; `i2a_ASN1_INTEGER'::`2'::h
		push	2
		movzx	eax, byte ptr [edx+esi]
		shr	eax, 4
		movzx	eax, byte ptr [eax+ecx]
		mov	byte ptr [esp+14h+arg_4], al
		movzx	eax, byte ptr [edx+esi]
		and	eax, 0Fh
		movzx	eax, byte ptr [eax+ecx]
		mov	byte ptr [esp+14h+arg_4+1], al
		lea	eax, [esp+14h+arg_4]
		push	eax
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, 2
		jnz	short $err$24
		inc	esi
		add	edi, eax
		cmp	esi, [ebx]
		jl	short loc_300
		pop	esi
		pop	ebp
		mov	eax, edi
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$err$24:				; CODE XREF: _i2a_ASN1_INTEGER+33j
					; _i2a_ASN1_INTEGER+54j ...
		pop	esi
		pop	ebp
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
_i2a_ASN1_INTEGER endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 38Ch
; COMDAT (pick any)
		public ??_C@_01JOAMLHOP@?9?$AA@
; `string'
??_C@_01JOAMLHOP@?9?$AA@ db 2Dh, 0	; DATA XREF: _i2a_ASN1_INTEGER+22o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 390h
; COMDAT (pick any)
		public ??_C@_02PLJDPFIO@00?$AA@
; `string'
??_C@_02PLJDPFIO@00?$AA@ db 2 dup(30h),	0 ; DATA XREF: _i2a_ASN1_INTEGER+43o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 394h
; COMDAT (pick any)
		public ??_C@_02JPPHBJLD@?2?6?$AA@
; `string'
??_C@_02JPPHBJLD@?2?6?$AA@ db 5Ch, 0Ah,	0 ; DATA XREF: _i2a_ASN1_INTEGER+92o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 398h
; COMDAT (pick any)
		public ??_C@_0BG@JGBIPMAG@?4?2crypto?2asn1?2f_int?4c?$AA@
; `string'
??_C@_0BG@JGBIPMAG@?4?2crypto?2asn1?2f_int?4c?$AA@ db '.\crypto\asn1\f_int.c',0
					; DATA XREF: _a2i_ASN1_INTEGER+120o
					; _a2i_ASN1_INTEGER+135o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _a2i_ASN1_INTEGER+126p
		extrn _CRYPTO_free:near	; CODE XREF: _a2i_ASN1_INTEGER+205p
		extrn _CRYPTO_realloc_clean:near ; CODE	XREF: _a2i_ASN1_INTEGER+13Dp
		extrn _BIO_gets:near	; CODE XREF: _a2i_ASN1_INTEGER+40p
					; _a2i_ASN1_INTEGER+1D0p
		extrn _BIO_write:near	; CODE XREF: _i2a_ASN1_INTEGER+28p
					; _i2a_ASN1_INTEGER+49p ...
		extrn _ERR_put_error:near ; CODE XREF: _a2i_ASN1_INTEGER+1F8p
					; _a2i_ASN1_INTEGER+266p
		extrn __chkstk:near	; CODE XREF: _a2i_ASN1_INTEGER+5p


		end
