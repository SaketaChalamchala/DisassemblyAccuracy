;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	047F40B7EA8CB3DA757171C1B5556F41
; Input	CRC32 :	E986061D

; File Name   :	C:\compspace\Diff\openssl\obj\gost_md.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
		public _digest_gost
_digest_gost	dd 329h, 0
		dd offset off_20
		dd 4
		dd offset _gost_digest_init
		dd offset _gost_digest_update
		dd offset _gost_digest_final
		dd offset _gost_digest_copy
off_20		dd offset _gost_digest_cleanup ; DATA XREF: .data:00000008o
					; .data:00000040o
		align 20h
		dd offset off_20
		dd 1090h, 0
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_gost_digest_init proc near		; DATA XREF: .data:00000010o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		push	70h ; 'p'       ; Size
		mov	edi, [eax+0Ch]
		push	0		; Val
		push	edi		; Dst
		call	_memset
		lea	esi, [edi+70h]
		push	offset _GostR3411_94_CryptoProParamSet
		push	esi
		call	_gost_init
		add	esp, 14h
		mov	[edi+8], esi
		mov	eax, 1
		pop	edi
		pop	esi
		retn
_gost_digest_init endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_gost_digest_update proc near		; DATA XREF: .data:00000014o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_4]
		push	dword ptr [eax+0Ch]
		call	_hash_block
		add	esp, 0Ch
		retn
_gost_digest_update endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 94h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_gost_digest_final proc	near		; DATA XREF: .data:00000018o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	[esp+arg_4]
		push	dword ptr [eax+0Ch]
		call	_finish_hash
		add	esp, 8
		retn
_gost_digest_final endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_gost_digest_copy proc near		; DATA XREF: .data:0000001Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [eax+0Ch]
		test	esi, esi
		jz	short loc_D4
		mov	eax, [esp+4+arg_4]
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_D4
		push	1090h		; Size
		push	eax		; Src
		push	esi		; Dst
		call	_memcpy
		lea	eax, [esi+70h]
		add	esp, 0Ch
		mov	[esi+8], eax

loc_D4:					; CODE XREF: _gost_digest_copy+Aj
					; _gost_digest_copy+15j
		mov	eax, 1
		pop	esi
		retn
_gost_digest_copy endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_gost_digest_cleanup proc near		; DATA XREF: .data:off_20o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_F7
		push	1090h		; Size
		push	0		; Val
		push	eax		; Dst
		call	_memset
		add	esp, 0Ch

loc_F7:					; CODE XREF: _gost_digest_cleanup+9j
		mov	eax, 1
		retn
_gost_digest_cleanup endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _gost_init:near	; CODE XREF: _gost_digest_init+1Cp
		extrn _hash_block:near	; CODE XREF: _gost_digest_update+Fp
		extrn _finish_hash:near	; CODE XREF: _gost_digest_final+Bp
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _gost_digest_copy+1Ep
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _gost_digest_init+Ep
					; _gost_digest_cleanup+13p
		extrn _GostR3411_94_CryptoProParamSet:near
					; DATA XREF: _gost_digest_init+16o


		end
