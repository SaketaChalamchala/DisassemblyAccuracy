;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	F5DC1191DCABF13688BEF51022231AE6
; Input	CRC32 :	A0AF1780

; File Name   :	C:\compspace\Diff\openssl\obj\bn_div.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_div
_BN_div		proc near

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 50h ; 'P'
		call	__chkstk
		push	ebx
		mov	ebx, [esp+54h+arg_8]
		xor	edx, edx
		push	edi
		mov	[esp+58h+var_48], edx
		mov	ecx, [ebx+4]
		test	ecx, ecx
		jle	short loc_25
		mov	eax, [ebx]
		cmp	[eax+ecx*4-4], edx
		jz	short loc_38

loc_25:					; CODE XREF: _BN_div+1Bj
		mov	edi, [esp+58h+arg_C]
		mov	ecx, [edi+4]
		test	ecx, ecx
		jle	short loc_58
		mov	eax, [edi]
		cmp	[eax+ecx*4-4], edx
		jnz	short loc_58

loc_38:					; CODE XREF: _BN_div+23j
		push	0CFh ; 'Ï'
		push	offset ??_C@_0BF@NFDFGKJD@?4?2crypto?2bn?2bn_div?4c?$AA@ ; ".\\crypto\\bn\\bn_div.c"
		push	6Bh ; 'k'
		push	6Bh ; 'k'
		push	3
		call	_ERR_put_error
		add	esp, 14h

loc_50:					; CODE XREF: _BN_div+B7j
		pop	edi
		xor	eax, eax
		pop	ebx
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_58:					; CODE XREF: _BN_div+2Ej _BN_div+36j
		test	byte ptr [ebx+10h], 4
		jnz	short loc_64
		test	byte ptr [edi+10h], 4
		jz	short loc_6D

loc_64:					; CODE XREF: _BN_div+5Cj
		mov	edx, 1
		mov	[esp+58h+var_48], edx

loc_6D:					; CODE XREF: _BN_div+62j
		test	ecx, ecx
		jnz	short loc_91
		push	0E5h ; 'å'
		push	offset ??_C@_0BF@NFDFGKJD@?4?2crypto?2bn?2bn_div?4c?$AA@ ; ".\\crypto\\bn\\bn_div.c"
		push	67h ; 'g'
		push	6Bh ; 'k'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	ebx
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_91:					; CODE XREF: _BN_div+6Fj
		test	edx, edx
		jnz	short loc_D7
		push	edi
		push	ebx
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jns	short loc_D7
		mov	eax, [esp+58h+arg_4]
		test	eax, eax
		jz	short loc_B9
		push	ebx
		push	eax
		call	_BN_copy
		add	esp, 8
		test	eax, eax
		jz	short loc_50

loc_B9:					; CODE XREF: _BN_div+A9j
		mov	eax, [esp+58h+arg_0]
		test	eax, eax
		jz	short loc_CC
		push	0
		push	eax
		call	_BN_set_word
		add	esp, 8

loc_CC:					; CODE XREF: _BN_div+BFj
		pop	edi
		mov	eax, 1
		pop	ebx
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_D7:					; CODE XREF: _BN_div+93j _BN_div+A1j
		push	ebp
		push	esi
		mov	esi, [esp+60h+arg_10]
		push	esi
		call	_BN_CTX_start
		push	esi
		call	_BN_CTX_get
		mov	ebp, eax
		push	esi
		mov	[esp+6Ch+var_38], ebp
		call	_BN_CTX_get
		mov	ebx, eax
		push	esi
		mov	[esp+70h+var_1C], ebx
		call	_BN_CTX_get
		mov	esi, eax
		add	esp, 10h
		mov	eax, [esp+60h+arg_0]
		mov	[esp+60h+var_28], esi
		mov	[esp+60h+var_34], eax
		test	eax, eax
		jnz	short loc_126
		push	[esp+60h+arg_10]
		call	_BN_CTX_get
		add	esp, 4
		mov	[esp+60h+var_34], eax

loc_126:				; CODE XREF: _BN_div+114j
		test	esi, esi
		jz	$err$114
		test	eax, eax
		jz	$err$114
		test	ebp, ebp
		jz	$err$114
		test	ebx, ebx
		jz	$err$114
		push	edi
		call	_BN_num_bits
		and	eax, 8000001Fh
		jns	short loc_158
		dec	eax
		or	eax, 0FFFFFFE0h
		inc	eax

loc_158:				; CODE XREF: _BN_div+151j
		mov	ebp, 20h ; ' '
		sub	ebp, eax
		push	ebp
		push	edi
		push	esi
		call	_BN_lshift
		add	esp, 10h
		test	eax, eax
		jz	$err$114
		add	ebp, 20h ; ' '
		mov	dword ptr [esi+0Ch], 0
		push	ebp
		push	[esp+64h+arg_8]
		mov	[esp+68h+var_18], ebp
		push	ebx
		call	_BN_lshift
		add	esp, 0Ch
		test	eax, eax
		jz	$err$114
		cmp	[esp+60h+var_48], 0
		mov	dword ptr [ebx+0Ch], 0
		jz	loc_22C
		mov	edx, [esi+4]
		mov	ecx, [ebx+4]
		lea	eax, [edx+1]
		cmp	ecx, eax
		jg	short loc_1FF
		lea	eax, [edx+2]
		cmp	eax, [ebx+8]
		jg	short loc_1C1
		mov	eax, ebx
		jmp	short loc_1CB
; ---------------------------------------------------------------------------

loc_1C1:				; CODE XREF: _BN_div+1BBj
		push	eax
		push	ebx
		call	_bn_expand2
		add	esp, 8

loc_1CB:				; CODE XREF: _BN_div+1BFj
		test	eax, eax
		jz	$err$114
		mov	eax, [esi+4]
		mov	ecx, [ebx+4]
		add	eax, 2
		cmp	ecx, eax
		jge	short loc_1F4

loc_1E0:				; CODE XREF: _BN_div+1F2j
		mov	eax, [ebx]
		mov	dword ptr [eax+ecx*4], 0
		inc	ecx
		mov	eax, [esi+4]
		add	eax, 2
		cmp	ecx, eax
		jl	short loc_1E0

loc_1F4:				; CODE XREF: _BN_div+1DEj
		mov	eax, [esi+4]
		add	eax, 2
		mov	[ebx+4], eax
		jmp	short loc_22C
; ---------------------------------------------------------------------------

loc_1FF:				; CODE XREF: _BN_div+1B3j
		lea	eax, [ecx+1]
		cmp	eax, [ebx+8]
		jg	short loc_20B
		mov	eax, ebx
		jmp	short loc_215
; ---------------------------------------------------------------------------

loc_20B:				; CODE XREF: _BN_div+205j
		push	eax
		push	ebx
		call	_bn_expand2
		add	esp, 8

loc_215:				; CODE XREF: _BN_div+209j
		test	eax, eax
		jz	$err$114
		mov	ecx, [ebx+4]
		mov	eax, [ebx]
		mov	dword ptr [eax+ecx*4], 0
		inc	dword ptr [ebx+4]

loc_22C:				; CODE XREF: _BN_div+1A2j _BN_div+1FDj
		mov	eax, [esi+4]
		mov	edx, [ebx+4]
		mov	ecx, edx
		sub	ecx, eax
		mov	[esp+60h+var_50], eax
		mov	[esp+60h+var_8], 0
		mov	eax, [ebx]
		mov	[esp+60h+var_40], ecx
		lea	ebp, ds:0[ecx*4]
		add	eax, ebp
		mov	ebp, [esp+60h+var_50]
		mov	[esp+60h+var_14], eax
		mov	[esp+60h+var_10], ebp
		mov	eax, [ebx+8]
		sub	eax, ecx
		lea	edi, ds:0[ebp*4]
		mov	[esp+60h+var_C], eax
		mov	eax, [esi]
		mov	[esp+60h+var_24], edi
		mov	ebp, [eax+edi-4]
		mov	edi, [esp+60h+var_50]
		cmp	edi, 1
		jnz	short loc_28A
		mov	[esp+60h+var_3C], 0
		jmp	short loc_292
; ---------------------------------------------------------------------------

loc_28A:				; CODE XREF: _BN_div+27Ej
		mov	eax, [eax+edi*4-8]
		mov	[esp+60h+var_3C], eax

loc_292:				; CODE XREF: _BN_div+288j
		mov	eax, [ebx]
		mov	edi, [esp+60h+arg_C]
		lea	eax, [eax+edx*4]
		mov	edx, [esp+60h+arg_8]
		add	eax, 0FFFFFFFCh
		mov	[esp+60h+var_44], eax
		mov	eax, [edi+0Ch]
		mov	edi, [esp+60h+var_34]
		xor	eax, [edx+0Ch]
		mov	[edi+0Ch], eax
		lea	eax, [ecx+1]
		cmp	eax, [edi+8]
		jg	short loc_2BF
		mov	eax, edi
		jmp	short loc_2CD
; ---------------------------------------------------------------------------

loc_2BF:				; CODE XREF: _BN_div+2B9j
		push	eax
		push	edi
		call	_bn_expand2
		mov	ecx, [esp+68h+var_40]
		add	esp, 8

loc_2CD:				; CODE XREF: _BN_div+2BDj
		test	eax, eax
		jz	$err$114
		mov	edx, [esp+60h+var_48]
		mov	eax, ecx
		sub	eax, edx
		mov	[edi+4], eax
		mov	eax, [edi]
		lea	eax, [eax+ecx*4]
		mov	ecx, [esp+60h+var_50]
		add	eax, 0FFFFFFFCh
		inc	ecx
		mov	[esp+60h+var_4C], eax
		mov	eax, [esp+60h+var_38]
		mov	[esp+60h+var_20], ecx
		cmp	ecx, [eax+8]
		jle	short loc_30C
		push	ecx
		push	eax
		call	_bn_expand2
		mov	edx, [esp+68h+var_48]
		add	esp, 8

loc_30C:				; CODE XREF: _BN_div+2FCj
		test	eax, eax
		jz	$err$114
		test	edx, edx
		jnz	short loc_34D
		lea	eax, [esp+60h+var_14]
		push	esi
		push	eax
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		js	short loc_34A
		push	[esp+60h+var_50]
		mov	eax, [esp+64h+var_14]
		push	dword ptr [esi]
		push	eax
		push	eax
		call	_bn_sub_words
		mov	ecx, [esp+70h+var_4C]
		add	esp, 10h
		mov	dword ptr [ecx], 1
		jmp	short loc_351
; ---------------------------------------------------------------------------

loc_34A:				; CODE XREF: _BN_div+328j
		dec	dword ptr [edi+4]

loc_34D:				; CODE XREF: _BN_div+316j
		mov	ecx, [esp+60h+var_4C]

loc_351:				; CODE XREF: _BN_div+348j
		cmp	dword ptr [edi+4], 0
		jnz	short loc_360
		mov	dword ptr [edi+0Ch], 0
		jmp	short loc_363
; ---------------------------------------------------------------------------

loc_360:				; CODE XREF: _BN_div+355j
		sub	ecx, 4

loc_363:				; CODE XREF: _BN_div+35Ej
		mov	eax, [esp+60h+var_40]
		dec	eax
		mov	[esp+60h+var_30], eax
		test	eax, eax
		jle	loc_472
		mov	ebx, [esp+60h+var_44]
		sub	ecx, ebx
		mov	[esp+60h+var_4C], ecx
		xchg	ax, ax

loc_380:				; CODE XREF: _BN_div+464j
		mov	ecx, [ebx]
		mov	esi, [ebx-4]
		cmp	ecx, ebp
		jnz	short loc_38E
		or	edi, 0FFFFFFFFh
		jmp	short loc_3F0
; ---------------------------------------------------------------------------

loc_38E:				; CODE XREF: _BN_div+387j
		push	0
		push	ebp
		xor	eax, eax
		or	eax, esi
		push	ecx
		push	eax
		call	__aulldiv
		mov	edi, eax
		mov	[esp+60h+var_40], 0
		mul	[esp+60h+var_3C]
		mov	ecx, edi
		imul	ecx, ebp
		mov	ebx, eax
		mov	eax, [esp+60h+var_44]
		mov	eax, [eax-8]
		sub	esi, ecx
		or	[esp+60h+var_40], eax
		mov	ecx, esi
		mov	[esp+60h+var_2C], eax
		cmp	edx, ecx
		jb	short loc_3F0
		ja	short loc_3D0
		cmp	ebx, [esp+60h+var_40]
		jbe	short loc_3F0

loc_3D0:				; CODE XREF: _BN_div+3C8j _BN_div+3E8j ...
		add	esi, ebp
		dec	edi
		cmp	esi, ebp
		jb	short loc_3F0
		sub	ebx, [esp+60h+var_3C]
		mov	eax, esi
		sbb	edx, 0
		xor	ecx, ecx
		or	ecx, [esp+60h+var_2C]
		cmp	edx, eax
		ja	short loc_3D0
		jb	short loc_3F0
		cmp	ebx, ecx
		ja	short loc_3D0

loc_3F0:				; CODE XREF: _BN_div+38Cj _BN_div+3C6j ...
		mov	esi, [esp+60h+var_28]
		mov	eax, [esp+60h+var_38]
		push	edi
		push	[esp+64h+var_50]
		push	dword ptr [esi]
		push	dword ptr [eax]
		call	_bn_mul_words
		mov	edx, [esp+70h+var_38]
		mov	ebx, [esp+70h+var_24]
		push	[esp+70h+var_20]
		mov	ecx, [edx]
		mov	[ebx+ecx], eax
		mov	eax, [esp+74h+var_14]
		sub	eax, 4
		mov	[esp+74h+var_14], eax
		push	dword ptr [edx]
		push	eax
		push	eax
		call	_bn_sub_words
		mov	ebx, [esp+80h+var_44]
		add	esp, 20h
		test	eax, eax
		jz	short loc_451
		push	[esp+60h+var_50]
		mov	eax, [esp+64h+var_14]
		dec	edi
		push	dword ptr [esi]
		push	eax
		push	eax
		call	_bn_add_words
		add	esp, 10h
		test	eax, eax
		jz	short loc_451
		inc	dword ptr [ebx]

loc_451:				; CODE XREF: _BN_div+434j _BN_div+44Dj
		mov	eax, [esp+60h+var_4C]
		mov	[eax+ebx], edi
		sub	ebx, 4
		sub	[esp+60h+var_30], 1
		mov	[esp+60h+var_44], ebx
		jnz	loc_380
		mov	ebx, [esp+60h+var_1C]
		mov	edi, [esp+60h+var_34]

loc_472:				; CODE XREF: _BN_div+36Ej
		mov	ecx, [ebx+4]
		test	ecx, ecx
		jle	short loc_492
		mov	eax, [ebx]
		lea	edx, [ecx-1]
		lea	edx, [eax+edx*4]

loc_481:				; CODE XREF: _BN_div+48Dj
		mov	eax, [edx]
		lea	edx, [edx-4]
		test	eax, eax
		jnz	short loc_48F
		dec	ecx
		test	ecx, ecx
		jg	short loc_481

loc_48F:				; CODE XREF: _BN_div+488j
		mov	[ebx+4], ecx

loc_492:				; CODE XREF: _BN_div+477j
		mov	esi, [esp+60h+arg_4]
		test	esi, esi
		jz	short loc_4B8
		push	[esp+60h+var_18]
		mov	eax, [esp+64h+arg_8]
		push	ebx
		push	esi
		mov	ebp, [eax+0Ch]
		call	_BN_rshift
		add	esp, 0Ch
		cmp	dword ptr [esi+4], 0
		jz	short loc_4B8
		mov	[esi+0Ch], ebp

loc_4B8:				; CODE XREF: _BN_div+498j _BN_div+4B3j
		cmp	[esp+60h+var_48], 0
		jz	short loc_4E1
		mov	ecx, [edi+4]
		test	ecx, ecx
		jle	short loc_4E1
		mov	eax, [edi]
		lea	edx, [ecx-1]
		lea	edx, [eax+edx*4]
		xchg	ax, ax

loc_4D0:				; CODE XREF: _BN_div+4DCj
		mov	eax, [edx]
		lea	edx, [edx-4]
		test	eax, eax
		jnz	short loc_4DE
		dec	ecx
		test	ecx, ecx
		jg	short loc_4D0

loc_4DE:				; CODE XREF: _BN_div+4D7j
		mov	[edi+4], ecx

loc_4E1:				; CODE XREF: _BN_div+4BDj _BN_div+4C4j
		push	[esp+60h+arg_10]
		call	_BN_CTX_end
		add	esp, 4
		mov	eax, 1
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

$err$114:				; CODE XREF: _BN_div+128j _BN_div+130j ...
		push	[esp+60h+arg_10]
		call	_BN_CTX_end
		add	esp, 4
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		add	esp, 50h
		retn
_BN_div		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 510h
; COMDAT (pick any)
		public ??_C@_0BF@NFDFGKJD@?4?2crypto?2bn?2bn_div?4c?$AA@
; `string'
??_C@_0BF@NFDFGKJD@?4?2crypto?2bn?2bn_div?4c?$AA@ db '.\crypto\bn\bn_div.c',0
					; DATA XREF: _BN_div+3Do _BN_div+76o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BN_CTX_start:near ; CODE	XREF: _BN_div+DEp
		extrn _BN_CTX_get:near	; CODE XREF: _BN_div+E4p _BN_div+F0p ...
		extrn _BN_CTX_end:near	; CODE XREF: _BN_div+4E5p _BN_div+4FEp
		extrn _BN_num_bits:near	; CODE XREF: _BN_div+147p
		extrn _BN_copy:near	; CODE XREF: _BN_div+ADp
		extrn _BN_set_word:near	; CODE XREF: _BN_div+C4p
		extrn _BN_lshift:near	; CODE XREF: _BN_div+162p _BN_div+186p
		extrn _BN_rshift:near	; CODE XREF: _BN_div+4A7p
		extrn _BN_ucmp:near	; CODE XREF: _BN_div+97p _BN_div+31Ep
		extrn _bn_expand2:near	; CODE XREF: _BN_div+1C3p _BN_div+20Dp ...
		extrn _bn_mul_words:near ; CODE	XREF: _BN_div+401p
		extrn _bn_add_words:near ; CODE	XREF: _BN_div+443p
		extrn _bn_sub_words:near ; CODE	XREF: _BN_div+336p
					; _BN_div+426p
		extrn _ERR_put_error:near ; CODE XREF: _BN_div+48p _BN_div+81p
		extrn __aulldiv:near	; CODE XREF: _BN_div+397p
		extrn __chkstk:near	; CODE XREF: _BN_div+5p


		end
