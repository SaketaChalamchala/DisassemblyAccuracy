;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	D1EEE63455BA264E5A68C31B61C377F2
; Input	CRC32 :	007BB522

; File Name   :	C:\compspace\Diff\openssl\obj\ssl_cert.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
; `SSL_get_ex_data_X509_STORE_CTX_idx'::`2'::ssl_x509_store_ctx_idx
?ssl_x509_store_ctx_idx@?1??SSL_get_ex_data_X509_STORE_CTX_idx@@9@9 dd 0FFFFFFFFh
					; DATA XREF: _SSL_get_ex_data_X509_STORE_CTX_idxo
					; _SSL_get_ex_data_X509_STORE_CTX_idx+Ar ...
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CTX_add_client_CA
_SSL_CTX_add_client_CA proc near

arg_0		= dword	ptr  4

		add	[esp+arg_0], 0A0h ; ' '
		jmp	_add_client_CA
_SSL_CTX_add_client_CA endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 14h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CTX_get_client_CA_list
_SSL_CTX_get_client_CA_list proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0A0h]
		retn
_SSL_CTX_get_client_CA_list endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 20h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_CTX_set_client_CA_list
_SSL_CTX_set_client_CA_list proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+0A0h]
		test	eax, eax
		jz	short loc_3D
		push	offset _X509_NAME_free
		push	eax
		call	_sk_pop_free
		add	esp, 8

loc_3D:					; CODE XREF: _SSL_CTX_set_client_CA_list+Dj
		mov	eax, [esp+4+arg_4]
		mov	[esi+0A0h], eax
		pop	esi
		retn
_SSL_CTX_set_client_CA_list endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_add_client_CA
_SSL_add_client_CA proc	near

arg_0		= dword	ptr  4

		add	[esp+arg_0], 0F8h ; 'ø'
		jmp	_add_client_CA
_SSL_add_client_CA endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_add_dir_cert_subjects_to_stack
_SSL_add_dir_cert_subjects_to_stack proc near

var_408		= dword	ptr -408h
var_404		= byte ptr -404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 408h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+408h+var_4], eax
		push	ebx
		push	ebp
		mov	ebp, [esp+410h+arg_0]
		push	esi
		push	edi
		mov	edi, [esp+418h+arg_4]
		push	3F6h
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	18h
		push	9
		mov	[esp+428h+var_408], 0
		call	_CRYPTO_lock
		lea	eax, [esp+428h+var_408]
		push	edi
		push	eax
		call	_OPENSSL_DIR_read
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jz	loc_13A
		nop	dword ptr [eax]

loc_BC:					; CODE XREF: _SSL_add_dir_cert_subjects_to_stack+DCj
		mov	eax, edi
		lea	edx, [eax+1]

loc_C1:					; CODE XREF: _SSL_add_dir_cert_subjects_to_stack+6Aj
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_C1
		sub	eax, edx
		mov	edx, esi
		lea	ebx, [edx+1]

loc_CF:					; CODE XREF: _SSL_add_dir_cert_subjects_to_stack+78j
		mov	cl, [edx]
		inc	edx
		test	cl, cl
		jnz	short loc_CF
		sub	edx, ebx
		add	eax, 2
		add	eax, edx
		cmp	eax, 400h
		ja	loc_1D7
		push	esi
		push	edi
		push	offset ??_C@_05GFOLEBJA@?$CFs?1?$CFs?$AA@ ; "%s/%s"
		lea	eax, [esp+424h+var_404]
		push	400h
		push	eax
		call	_BIO_snprintf
		add	esp, 14h
		test	eax, eax
		jle	loc_190
		cmp	eax, 400h
		jge	loc_190
		lea	eax, [esp+418h+var_404]
		push	eax
		push	ebp
		call	_SSL_add_file_cert_subjects_to_stack
		add	esp, 8
		test	eax, eax
		jz	short loc_190
		lea	eax, [esp+418h+var_408]
		push	edi
		push	eax
		call	_OPENSSL_DIR_read
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_BC

loc_13A:				; CODE XREF: _SSL_add_dir_cert_subjects_to_stack+57j
		call	dword ptr ds:__imp___errno
		cmp	dword ptr [eax], 0
		jz	loc_1F7
		push	40Fh
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		call	dword ptr ds:__imp__GetLastError@0 ; GetLastError()
		push	eax
		push	0Ah
		push	2
		call	_ERR_put_error
		push	offset ??_C@_02HJPKOJGD@?8?$CJ?$AA@ ; `string'
		push	edi
		push	offset ??_C@_0BJ@LMCDNAEM@OPENSSL_DIR_read?$CI?$CGctx?0?5?8?$AA@ ; "OPENSSL_DIR_read(&ctx, '"
		push	3
		call	_ERR_add_error_data
		push	411h
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	2
		push	0D7h ; '×'
		push	14h
		call	_ERR_put_error
		add	esp, 38h

loc_190:				; CODE XREF: _SSL_add_dir_cert_subjects_to_stack+A7j
					; _SSL_add_dir_cert_subjects_to_stack+B2j ...
		xor	ebx, ebx

$err$24:				; CODE XREF: _SSL_add_dir_cert_subjects_to_stack+1A0j
		cmp	[esp+418h+var_408], 0
		jz	short loc_1A6
		lea	eax, [esp+418h+var_408]
		push	eax
		call	_OPENSSL_DIR_end
		add	esp, 4

loc_1A6:				; CODE XREF: _SSL_add_dir_cert_subjects_to_stack+13Bj
		push	41Ah
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	18h
		push	0Ah
		call	_CRYPTO_lock
		mov	ecx, [esp+428h+var_4]
		add	esp, 10h
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 408h
		retn
; ---------------------------------------------------------------------------

loc_1D7:				; CODE XREF: _SSL_add_dir_cert_subjects_to_stack+86j
		push	400h
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	10Eh
		push	0D7h ; '×'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		jmp	short loc_190
; ---------------------------------------------------------------------------

loc_1F7:				; CODE XREF: _SSL_add_dir_cert_subjects_to_stack+E7j
		mov	ebx, 1
		jmp	short $err$24
_SSL_add_dir_cert_subjects_to_stack endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 200h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_add_file_cert_subjects_to_stack
_SSL_add_file_cert_subjects_to_stack proc near
					; CODE XREF: _SSL_add_dir_cert_subjects_to_stack+BEp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 8
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+18h+arg_0]
		mov	ebp, 1
		push	offset _xname_cmp
		push	edi
		mov	[esp+20h+var_8], 0
		call	_sk_set_cmp_func
		mov	esi, eax
		mov	[esp+20h+var_4], esi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_264
		push	3BFh
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	41h ; 'A'
		push	0D8h ; 'Ø'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$26
; ---------------------------------------------------------------------------

loc_264:				; CODE XREF: _SSL_add_file_cert_subjects_to_stack+42j
		push	[esp+18h+arg_4]
		push	3
		push	6Ch ; 'l'
		push	ebx
		call	_BIO_ctrl
		add	esp, 10h
		test	eax, eax
		jz	$err$26
		push	0
		push	0
		lea	eax, [esp+20h+var_8]
		push	eax
		push	ebx
		call	_PEM_read_bio_X509
		add	esp, 10h
		test	eax, eax
		jz	short loc_2EE

loc_293:				; CODE XREF: _SSL_add_file_cert_subjects_to_stack+E8j
		push	[esp+18h+var_8]
		call	_X509_get_subject_name
		add	esp, 4
		test	eax, eax
		jz	short loc_2F5
		push	eax
		call	_X509_NAME_dup
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_2F5
		push	esi
		push	edi
		call	_sk_find
		add	esp, 8
		push	esi
		test	eax, eax
		js	short loc_2CB
		call	_X509_NAME_free
		add	esp, 4
		jmp	short loc_2D4
; ---------------------------------------------------------------------------

loc_2CB:				; CODE XREF: _SSL_add_file_cert_subjects_to_stack+BFj
		push	edi
		call	_sk_push
		add	esp, 8

loc_2D4:				; CODE XREF: _SSL_add_file_cert_subjects_to_stack+C9j
		push	0
		push	0
		lea	eax, [esp+20h+var_8]
		push	eax
		push	ebx
		call	_PEM_read_bio_X509
		add	esp, 10h
		test	eax, eax
		jnz	short loc_293
		mov	esi, [esp+18h+var_4]

loc_2EE:				; CODE XREF: _SSL_add_file_cert_subjects_to_stack+91j
		call	_ERR_clear_error
		jmp	short loc_2FB
; ---------------------------------------------------------------------------

loc_2F5:				; CODE XREF: _SSL_add_file_cert_subjects_to_stack+A1j
					; _SSL_add_file_cert_subjects_to_stack+B0j
		mov	esi, [esp+18h+var_4]

$err$26:				; CODE XREF: _SSL_add_file_cert_subjects_to_stack+5Fj
					; _SSL_add_file_cert_subjects_to_stack+77j
		xor	ebp, ebp

loc_2FB:				; CODE XREF: _SSL_add_file_cert_subjects_to_stack+F3j
		test	ebx, ebx
		jz	short loc_308
		push	ebx
		call	_BIO_free
		add	esp, 4

loc_308:				; CODE XREF: _SSL_add_file_cert_subjects_to_stack+FDj
		mov	ecx, [esp+18h+var_8]
		test	ecx, ecx
		jz	short loc_319
		push	ecx
		call	_X509_free
		add	esp, 4

loc_319:				; CODE XREF: _SSL_add_file_cert_subjects_to_stack+10Ej
		push	esi
		push	edi
		call	_sk_set_cmp_func
		add	esp, 8
		mov	eax, ebp
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
_SSL_add_file_cert_subjects_to_stack endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 330h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_dup_CA_list
_SSL_dup_CA_list proc near

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		call	_sk_new_null
		mov	edi, [esp+0Ch+arg_0]
		mov	ebx, eax
		push	edi
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_380
		nop	dword ptr [eax]

loc_350:				; CODE XREF: _SSL_dup_CA_list+4Ej
		push	esi
		push	edi
		call	_sk_value
		push	eax
		call	_X509_NAME_dup
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_386
		push	eax
		push	ebx
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	short loc_386
		push	edi
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_350

loc_380:				; CODE XREF: _SSL_dup_CA_list+1Bj
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_386:				; CODE XREF: _SSL_dup_CA_list+32j
					; _SSL_dup_CA_list+40j
		push	offset _X509_NAME_free
		push	ebx
		call	_sk_pop_free
		add	esp, 8
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
_SSL_dup_CA_list endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 39Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_get_client_CA_list
_SSL_get_client_CA_list	proc near

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		cmp	dword ptr [ecx+4], 1000h
		jnz	short loc_3C8
		mov	eax, [ecx]
		and	eax, 0FFFFFF00h
		cmp	eax, 300h
		jnz	short loc_3C5
		mov	eax, [ecx+58h]
		test	eax, eax
		jz	short loc_3C5
		mov	eax, [eax+36Ch]
		retn
; ---------------------------------------------------------------------------

loc_3C5:				; CODE XREF: _SSL_get_client_CA_list+19j
					; _SSL_get_client_CA_list+20j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_3C8:				; CODE XREF: _SSL_get_client_CA_list+Bj
		mov	eax, [ecx+0F8h]
		test	eax, eax
		jnz	short locret_3DE
		mov	eax, [ecx+0E4h]
		mov	eax, [eax+0A0h]

locret_3DE:				; CODE XREF: _SSL_get_client_CA_list+34j
		retn
_SSL_get_client_CA_list	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_get_ex_data_X509_STORE_CTX_idx
_SSL_get_ex_data_X509_STORE_CTX_idx proc near ;	CODE XREF: _ssl_verify_cert_chain+A5p
		mov	eax, offset ?ssl_x509_store_ctx_idx@?1??SSL_get_ex_data_X509_STORE_CTX_idx@@9@9	; `SSL_get_ex_data_X509_STORE_CTX_idx'::`2'::ssl_x509_store_ctx_idx
		test	al, 3
		jnz	short loc_44E
		push	esi
		mov	esi, ?ssl_x509_store_ctx_idx@?1??SSL_get_ex_data_X509_STORE_CTX_idx@@9@9 ; `SSL_get_ex_data_X509_STORE_CTX_idx'::`2'::ssl_x509_store_ctx_idx
		test	esi, esi
		jns	short loc_44A
		push	94h ; ''
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	0Ch
		push	9
		call	_CRYPTO_lock
		mov	esi, ?ssl_x509_store_ctx_idx@?1??SSL_get_ex_data_X509_STORE_CTX_idx@@9@9 ; `SSL_get_ex_data_X509_STORE_CTX_idx'::`2'::ssl_x509_store_ctx_idx
		add	esp, 10h
		test	esi, esi
		jns	short loc_434
		push	0
		push	0
		push	0
		push	offset ??_C@_0BI@GCIOAHAF@SSL?5for?5verify?5callback?$AA@ ; "SSL for verify callback"
		push	0
		call	_X509_STORE_CTX_get_ex_new_index
		mov	?ssl_x509_store_ctx_idx@?1??SSL_get_ex_data_X509_STORE_CTX_idx@@9@9, eax ; `SSL_get_ex_data_X509_STORE_CTX_idx'::`2'::ssl_x509_store_ctx_idx
		add	esp, 14h
		mov	esi, ?ssl_x509_store_ctx_idx@?1??SSL_get_ex_data_X509_STORE_CTX_idx@@9@9 ; `SSL_get_ex_data_X509_STORE_CTX_idx'::`2'::ssl_x509_store_ctx_idx

loc_434:				; CODE XREF: _SSL_get_ex_data_X509_STORE_CTX_idx+32j
		push	9Bh ; ''
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	0Ch
		push	0Ah
		call	_CRYPTO_lock
		add	esp, 10h

loc_44A:				; CODE XREF: _SSL_get_ex_data_X509_STORE_CTX_idx+12j
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_44E:				; CODE XREF: _SSL_get_ex_data_X509_STORE_CTX_idx+7j
		push	0A1h ; '¡'
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	0Ch
		push	5
		call	_CRYPTO_lock
		add	esp, 10h
		cmp	?ssl_x509_store_ctx_idx@?1??SSL_get_ex_data_X509_STORE_CTX_idx@@9@9, 0 ; `SSL_get_ex_data_X509_STORE_CTX_idx'::`2'::ssl_x509_store_ctx_idx
		jge	short loc_4D5
		push	0A4h ; '¤'
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	0Ch
		push	6
		call	_CRYPTO_lock
		push	0A5h ; '¥'
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	0Ch
		push	9
		call	_CRYPTO_lock
		add	esp, 20h
		cmp	?ssl_x509_store_ctx_idx@?1??SSL_get_ex_data_X509_STORE_CTX_idx@@9@9, 0 ; `SSL_get_ex_data_X509_STORE_CTX_idx'::`2'::ssl_x509_store_ctx_idx
		jge	short loc_4B9
		push	0
		push	0
		push	0
		push	offset ??_C@_0BI@GCIOAHAF@SSL?5for?5verify?5callback?$AA@ ; "SSL for verify callback"
		push	0
		call	_X509_STORE_CTX_get_ex_new_index
		add	esp, 14h
		mov	?ssl_x509_store_ctx_idx@?1??SSL_get_ex_data_X509_STORE_CTX_idx@@9@9, eax ; `SSL_get_ex_data_X509_STORE_CTX_idx'::`2'::ssl_x509_store_ctx_idx

loc_4B9:				; CODE XREF: _SSL_get_ex_data_X509_STORE_CTX_idx+BDj
		push	0B1h ; '±'
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	0Ch
		push	0Ah
		call	_CRYPTO_lock
		mov	eax, ?ssl_x509_store_ctx_idx@?1??SSL_get_ex_data_X509_STORE_CTX_idx@@9@9 ; `SSL_get_ex_data_X509_STORE_CTX_idx'::`2'::ssl_x509_store_ctx_idx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_4D5:				; CODE XREF: _SSL_get_ex_data_X509_STORE_CTX_idx+8Bj
		push	0B3h ; '³'
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	0Ch
		push	6
		call	_CRYPTO_lock
		mov	eax, ?ssl_x509_store_ctx_idx@?1??SSL_get_ex_data_X509_STORE_CTX_idx@@9@9 ; `SSL_get_ex_data_X509_STORE_CTX_idx'::`2'::ssl_x509_store_ctx_idx
		add	esp, 10h
		retn
_SSL_get_ex_data_X509_STORE_CTX_idx endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_load_client_CA_file
_SSL_load_client_CA_file proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	edi
		push	offset _xname_cmp
		mov	[esp+18h+var_4], 0
		xor	esi, esi
		call	_sk_new
		mov	ebx, eax
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		add	esp, 8
		mov	ebp, eax
		test	ebx, ebx
		jz	loc_5F3
		test	ebp, ebp
		jz	loc_5F3
		push	[esp+14h+arg_0]
		push	3
		push	6Ch ; 'l'
		push	ebp
		call	_BIO_ctrl
		add	esp, 10h
		test	eax, eax
		jz	loc_60E
		push	esi
		push	esi
		lea	eax, [esp+1Ch+var_4]
		push	eax
		push	ebp
		call	_PEM_read_bio_X509
		add	esp, 10h
		test	eax, eax
		jz	loc_610

loc_569:				; CODE XREF: _SSL_load_client_CA_file+E0j
		test	esi, esi
		jnz	short loc_578
		call	_sk_new_null
		mov	esi, eax
		test	esi, esi
		jz	short loc_5D8

loc_578:				; CODE XREF: _SSL_load_client_CA_file+77j
		push	[esp+14h+var_4]
		call	_X509_get_subject_name
		add	esp, 4
		test	eax, eax
		jz	short $err$33
		push	eax
		call	_X509_NAME_dup
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short $err$33
		push	edi
		push	ebx
		call	_sk_find
		add	esp, 8
		push	edi
		test	eax, eax
		js	short loc_5B0
		call	_X509_NAME_free
		add	esp, 4
		jmp	short loc_5C0
; ---------------------------------------------------------------------------

loc_5B0:				; CODE XREF: _SSL_load_client_CA_file+B0j
		push	ebx
		call	_sk_push
		push	edi
		push	esi
		call	_sk_push
		add	esp, 10h

loc_5C0:				; CODE XREF: _SSL_load_client_CA_file+BAj
		push	0
		push	0
		lea	eax, [esp+1Ch+var_4]
		push	eax
		push	ebp
		call	_PEM_read_bio_X509
		add	esp, 10h
		test	eax, eax
		jnz	short loc_569
		jmp	short loc_610
; ---------------------------------------------------------------------------

loc_5D8:				; CODE XREF: _SSL_load_client_CA_file+82j
		push	383h
		jmp	short loc_5F8
; ---------------------------------------------------------------------------

$err$33:				; CODE XREF: _SSL_load_client_CA_file+92j
					; _SSL_load_client_CA_file+A1j
		test	esi, esi
		jz	short loc_60E
		push	offset _X509_NAME_free
		push	esi
		call	_sk_pop_free
		add	esp, 8
		jmp	short loc_60E
; ---------------------------------------------------------------------------

loc_5F3:				; CODE XREF: _SSL_load_client_CA_file+36j
					; _SSL_load_client_CA_file+3Ej
		push	376h

loc_5F8:				; CODE XREF: _SSL_load_client_CA_file+E9j
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	41h ; 'A'
		push	0B9h ; '¹'
		push	14h
		call	_ERR_put_error
		add	esp, 14h

loc_60E:				; CODE XREF: _SSL_load_client_CA_file+57j
					; _SSL_load_client_CA_file+EDj	...
		xor	esi, esi

loc_610:				; CODE XREF: _SSL_load_client_CA_file+6Fj
					; _SSL_load_client_CA_file+E2j
		test	ebx, ebx
		jz	short loc_61D
		push	ebx
		call	_sk_free
		add	esp, 4

loc_61D:				; CODE XREF: _SSL_load_client_CA_file+11Ej
		test	ebp, ebp
		jz	short loc_62A
		push	ebp
		call	_BIO_free
		add	esp, 4

loc_62A:				; CODE XREF: _SSL_load_client_CA_file+12Bj
		mov	eax, [esp+14h+var_4]
		test	eax, eax
		jz	short loc_63B
		push	eax
		call	_X509_free
		add	esp, 4

loc_63B:				; CODE XREF: _SSL_load_client_CA_file+13Cj
		test	esi, esi
		jz	short loc_644
		call	_ERR_clear_error

loc_644:				; CODE XREF: _SSL_load_client_CA_file+149j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
_SSL_load_client_CA_file endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 64Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSL_set_client_CA_list
_SSL_set_client_CA_list	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+0F8h]
		test	eax, eax
		jz	short loc_669
		push	offset _X509_NAME_free
		push	eax
		call	_sk_pop_free
		add	esp, 8

loc_669:				; CODE XREF: _SSL_set_client_CA_list+Dj
		mov	eax, [esp+4+arg_4]
		mov	[esi+0F8h], eax
		pop	esi
		retn
_SSL_set_client_CA_list	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 678h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_add_client_CA	proc near		; CODE XREF: _SSL_CTX_add_client_CA+8j
					; _SSL_add_client_CA+8j

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_4]
		test	edi, edi
		jnz	short loc_685
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_685:				; CODE XREF: _add_client_CA+7j
		push	esi
		mov	esi, [esp+8+arg_0]
		cmp	dword ptr [esi], 0
		jnz	short loc_69A
		call	_sk_new_null
		mov	[esi], eax
		test	eax, eax
		jz	short loc_6C7

loc_69A:				; CODE XREF: _add_client_CA+15j
		push	edi
		call	_X509_get_subject_name
		push	eax
		call	_X509_NAME_dup
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_6C7
		push	edi
		push	dword ptr [esi]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jnz	short loc_6CC
		push	edi
		call	_X509_NAME_free
		add	esp, 4

loc_6C7:				; CODE XREF: _add_client_CA+20j
					; _add_client_CA+35j
		pop	esi
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6CC:				; CODE XREF: _add_client_CA+44j
		pop	esi
		mov	eax, 1
		pop	edi
		retn
_add_client_CA	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6D4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_set_client_CA_list proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6ED
		push	offset _X509_NAME_free
		push	eax
		call	_sk_pop_free
		add	esp, 8

loc_6ED:				; CODE XREF: _set_client_CA_list+9j
		mov	eax, [esp+4+arg_4]
		mov	[esi], eax
		pop	esi
		retn
_set_client_CA_list endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_add_cert_chain
_ssl_add_cert_chain proc near

var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= byte ptr -88h
var_34		= dword	ptr -34h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 90h ; ''
		call	__chkstk
		mov	ecx, [esp+90h+arg_0]
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+9Ch+arg_4]
		mov	ebp, [ecx+3Ch]
		test	edi, edi
		jz	short loc_71E
		mov	esi, [edi]
		jmp	short loc_720
; ---------------------------------------------------------------------------

loc_71E:				; CODE XREF: _ssl_add_cert_chain+20j
		xor	esi, esi

loc_720:				; CODE XREF: _ssl_add_cert_chain+24j
		mov	eax, [ecx+98h]
		mov	eax, [eax+14Ch]
		mov	[esp+9Ch+var_8C], eax
		test	eax, eax
		jnz	short loc_741
		mov	eax, [ecx+0E4h]
		mov	eax, [eax+0Ch]
		mov	[esp+9Ch+var_8C], eax

loc_741:				; CODE XREF: _ssl_add_cert_chain+3Aj
		test	edi, edi
		jz	short loc_74C
		mov	edi, [edi+0Ch]
		test	edi, edi
		jnz	short loc_758

loc_74C:				; CODE XREF: _ssl_add_cert_chain+4Bj
		mov	eax, [ecx+0E4h]
		mov	edi, [eax+94h]

loc_758:				; CODE XREF: _ssl_add_cert_chain+52j
		test	byte ptr [ecx+104h], 8
		jnz	short loc_76D
		mov	[esp+9Ch+var_90], 0
		test	edi, edi
		jz	short loc_775

loc_76D:				; CODE XREF: _ssl_add_cert_chain+67j
		mov	[esp+9Ch+var_90], 1

loc_775:				; CODE XREF: _ssl_add_cert_chain+73j
		push	0Ah
		push	ebp
		call	_BUF_MEM_grow_clean
		add	esp, 8
		test	eax, eax
		jnz	short loc_7AB
		push	45Bh
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	7
		push	13Eh
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 90h
		retn
; ---------------------------------------------------------------------------

loc_7AB:				; CODE XREF: _ssl_add_cert_chain+8Aj
		push	ebx
		mov	ebx, [esp+0A0h+arg_8]
		test	esi, esi
		jz	loc_87F
		cmp	[esp+0A0h+var_90], 0
		jz	short loc_7E0
		push	esi
		push	ebx
		push	ebp
		call	_ssl_add_cert_to_buf
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_87F
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 90h
		retn
; ---------------------------------------------------------------------------

loc_7E0:				; CODE XREF: _ssl_add_cert_chain+C8j
		push	0
		push	esi
		push	[esp+0A8h+var_8C]
		lea	eax, [esp+0ACh+var_88]
		push	eax
		call	_X509_STORE_CTX_init
		add	esp, 10h
		test	eax, eax
		jnz	short loc_820
		push	466h
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	0Bh
		push	13Eh
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 90h
		retn
; ---------------------------------------------------------------------------

loc_820:				; CODE XREF: _ssl_add_cert_chain+FEj
		lea	eax, [esp+0A0h+var_88]
		push	eax
		call	_X509_verify_cert
		call	_ERR_clear_error
		push	[esp+0A4h+var_34]
		xor	esi, esi
		call	_sk_num
		add	esp, 8
		test	eax, eax
		jle	short loc_872
		nop	dword ptr [eax+00000000h]

loc_848:				; CODE XREF: _ssl_add_cert_chain+178j
		push	esi
		push	[esp+0A4h+var_34]
		call	_sk_value
		push	eax
		push	ebx
		push	ebp
		call	_ssl_add_cert_to_buf
		add	esp, 14h
		test	eax, eax
		jz	short loc_8C2
		push	[esp+0A0h+var_34]
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_848

loc_872:				; CODE XREF: _ssl_add_cert_chain+147j
		lea	eax, [esp+0A0h+var_88]
		push	eax
		call	_X509_STORE_CTX_cleanup
		add	esp, 4

loc_87F:				; CODE XREF: _ssl_add_cert_chain+BDj
					; _ssl_add_cert_chain+D7j
		push	edi
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_8B2

loc_88E:				; CODE XREF: _ssl_add_cert_chain+1B8j
		push	esi
		push	edi
		call	_sk_value
		push	eax
		push	ebx
		push	ebp
		call	_ssl_add_cert_to_buf
		add	esp, 14h
		test	eax, eax
		jz	short loc_8CF
		push	edi
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_88E

loc_8B2:				; CODE XREF: _ssl_add_cert_chain+194j
		pop	ebx
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebp
		add	esp, 90h
		retn
; ---------------------------------------------------------------------------

loc_8C2:				; CODE XREF: _ssl_add_cert_chain+167j
		lea	eax, [esp+0A0h+var_88]
		push	eax
		call	_X509_STORE_CTX_cleanup
		add	esp, 4

loc_8CF:				; CODE XREF: _ssl_add_cert_chain+1AAj
		pop	ebx
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 90h
		retn
_ssl_add_cert_chain endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ssl_add_cert_to_buf proc near		; CODE XREF: _ssl_add_cert_chain+CDp
					; _ssl_add_cert_chain+15Dp ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	0
		push	[esp+14h+arg_8]
		call	_i2d_X509
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	short loc_96D
		mov	esi, [esp+10h+arg_4]
		mov	ebp, [esp+10h+arg_0]
		mov	ecx, [esi]
		add	ecx, 3
		add	ecx, ebx
		push	ecx
		push	ebp
		call	_BUF_MEM_grow_clean
		add	esp, 8
		test	eax, eax
		jz	short loc_96D
		mov	ecx, [ebp+4]
		mov	eax, ebx
		add	ecx, [esi]
		mov	[esp+10h+var_4], ecx
		sar	eax, 10h
		mov	[ecx], al
		mov	ecx, ebx
		mov	eax, [esp+10h+var_4]
		sar	ecx, 8
		mov	[eax+1], cl
		mov	eax, [esp+10h+var_4]
		mov	[eax+2], bl
		lea	eax, [esp+10h+var_4]
		add	[esp+10h+var_4], 3
		push	eax
		push	[esp+14h+arg_8]
		call	_i2d_X509
		add	esp, 8
		test	eax, eax
		jns	short loc_95E
		push	42Fh
		jmp	short loc_972
; ---------------------------------------------------------------------------

loc_95E:				; CODE XREF: _ssl_add_cert_to_buf+79j
		add	eax, 3
		add	[esi], eax
		mov	eax, 1
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_96D:				; CODE XREF: _ssl_add_cert_to_buf+1Fj
					; _ssl_add_cert_to_buf+3Cj
		push	427h

loc_972:				; CODE XREF: _ssl_add_cert_to_buf+80j
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	7
		push	13Fh
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
_ssl_add_cert_to_buf endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 990h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_build_cert_chain
_ssl_build_cert_chain proc near

var_8C		= dword	ptr -8Ch
var_88		= byte ptr -88h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 8Ch ; ''
		call	__chkstk
		mov	ecx, [esp+8Ch+arg_8]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+98h+arg_0]
		xor	ebp, ebp
		push	edi
		mov	[esp+9Ch+var_8C], ebp
		mov	edi, [esi]
		cmp	[edi], ebp
		jnz	short loc_9E2
		push	48Bh
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	0B3h ; '³'
		push	14Ch
		push	14h
		call	_ERR_put_error
		mov	ebx, [esp+0B0h+arg_4]
		add	esp, 14h
		jmp	$err$40
; ---------------------------------------------------------------------------

loc_9E2:				; CODE XREF: _ssl_build_cert_chain+26j
		test	cl, 4
		jz	loc_ADA
		call	_X509_STORE_new
		mov	ebx, eax
		test	ebx, ebx
		jz	$err$40
		push	dword ptr [edi+0Ch]
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_A62
		nop	dword ptr [eax+eax+00h]

loc_A10:				; CODE XREF: _ssl_build_cert_chain+D0j
		push	esi
		push	dword ptr [edi+0Ch]
		call	_sk_value
		push	eax
		push	ebx
		call	_X509_STORE_add_cert
		add	esp, 10h
		test	eax, eax
		jnz	short loc_A52
		call	_ERR_peek_last_error
		mov	ecx, eax
		and	eax, 0FF000000h
		cmp	eax, 0B000000h
		jnz	$err$40
		and	ecx, 0FFFh
		cmp	ecx, 65h ; 'e'
		jnz	$err$40
		call	_ERR_clear_error

loc_A52:				; CODE XREF: _ssl_build_cert_chain+95j
		push	dword ptr [edi+0Ch]
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_A10

loc_A62:				; CODE XREF: _ssl_build_cert_chain+79j
		push	dword ptr [edi]
		push	ebx
		call	_X509_STORE_add_cert
		add	esp, 8
		test	eax, eax
		jnz	short loc_A9C
		call	_ERR_peek_last_error
		mov	ecx, eax
		and	eax, 0FF000000h
		cmp	eax, 0B000000h
		jnz	$err$40
		and	ecx, 0FFFh
		cmp	ecx, 65h ; 'e'
		jnz	$err$40
		call	_ERR_clear_error

loc_A9C:				; CODE XREF: _ssl_build_cert_chain+DFj
		mov	esi, [esp+9Ch+arg_0]

loc_AA3:				; CODE XREF: _ssl_build_cert_chain+15Fj
		xor	eax, eax

loc_AA5:				; CODE XREF: _ssl_build_cert_chain+164j
		push	eax
		push	dword ptr [edi]
		lea	eax, [esp+0A4h+var_88]
		push	ebx
		push	eax
		call	_X509_STORE_CTX_init
		add	esp, 10h
		test	eax, eax
		jnz	short loc_AF6
		push	4AFh
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	0Bh
		push	14Ch
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$40
; ---------------------------------------------------------------------------

loc_ADA:				; CODE XREF: _ssl_build_cert_chain+55j
		mov	eax, [esi+14Ch]
		test	eax, eax
		mov	ebx, [esp+9Ch+arg_4]
		cmovnz	ebx, eax
		test	cl, 1
		jz	short loc_AA3
		mov	eax, [edi+0Ch]
		jmp	short loc_AA5
; ---------------------------------------------------------------------------

loc_AF6:				; CODE XREF: _ssl_build_cert_chain+128j
		mov	eax, [esi+38h]
		and	eax, 30000h
		push	eax
		lea	eax, [esp+0A0h+var_88]
		push	eax
		call	_X509_STORE_CTX_set_flags
		lea	eax, [esp+0A4h+var_88]
		push	eax
		call	_X509_verify_cert
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jg	short loc_B3D
		mov	eax, [esp+9Ch+arg_8]
		test	al, 8
		jz	short loc_B54
		test	al, 10h
		jz	short loc_B30
		call	_ERR_clear_error

loc_B30:				; CODE XREF: _ssl_build_cert_chain+199j
		mov	esi, 1
		mov	[esp+9Ch+var_8C], 2

loc_B3D:				; CODE XREF: _ssl_build_cert_chain+18Aj
		lea	eax, [esp+9Ch+var_88]
		push	eax
		call	_X509_STORE_CTX_get1_chain
		add	esp, 4
		mov	ebp, eax
		test	esi, esi
		jg	short loc_B9E
		mov	ebp, [esp+9Ch+var_8C]

loc_B54:				; CODE XREF: _ssl_build_cert_chain+195j
		push	4C0h
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	86h ; ''
		push	14Ch
		push	14h
		call	_ERR_put_error
		lea	eax, [esp+0B0h+var_88]
		push	eax
		call	_X509_STORE_CTX_get_error
		push	eax
		call	_X509_verify_cert_error_string
		push	eax
		push	offset ??_C@_0O@HFNJECFC@Verify?5error?3?$AA@ ;	"Verify	error:"
		push	2
		call	_ERR_add_error_data
		lea	eax, [esp+0C4h+var_88]
		push	eax
		call	_X509_STORE_CTX_cleanup
		add	esp, 2Ch
		jmp	$err$40
; ---------------------------------------------------------------------------

loc_B9E:				; CODE XREF: _ssl_build_cert_chain+1BEj
		lea	eax, [esp+9Ch+var_88]
		push	eax
		call	_X509_STORE_CTX_cleanup
		mov	eax, [edi+0Ch]
		add	esp, 4
		test	eax, eax
		jz	short loc_BC0
		push	offset _X509_free
		push	eax
		call	_sk_pop_free
		add	esp, 8

loc_BC0:				; CODE XREF: _ssl_build_cert_chain+220j
		push	ebp
		call	_sk_shift
		push	eax
		call	_X509_free
		add	esp, 8
		test	byte ptr [esp+9Ch+arg_8], 2
		jz	short loc_C1B
		push	ebp
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_C1B
		push	ebp
		call	_sk_num
		dec	eax
		push	eax
		push	ebp
		call	_sk_value
		push	0
		mov	esi, eax
		push	0FFFFFFFFh
		push	esi
		call	_X509_check_purpose
		add	esp, 18h
		test	dword ptr [esi+28h], 2000h
		jz	short loc_C1B
		push	ebp
		call	_sk_pop
		push	eax
		call	_X509_free
		add	esp, 8

loc_C1B:				; CODE XREF: _ssl_build_cert_chain+247j
					; _ssl_build_cert_chain+254j ...
		mov	[edi+0Ch], ebp
		mov	eax, 1
		mov	ebp, [esp+9Ch+var_8C]
		test	ebp, ebp
		cmovz	ebp, eax

$err$40:				; CODE XREF: _ssl_build_cert_chain+4Dj
					; _ssl_build_cert_chain+64j ...
		test	byte ptr [esp+9Ch+arg_8], 4
		jz	short loc_C3F
		push	ebx
		call	_X509_STORE_free
		add	esp, 4

loc_C3F:				; CODE XREF: _ssl_build_cert_chain+2A4j
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 8Ch
		retn
_ssl_build_cert_chain endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C4Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_cert_add0_chain_cert
_ssl_cert_add0_chain_cert proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [eax]
		test	esi, esi
		jz	short loc_C84
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_C65
		call	_sk_new_null
		mov	[esi+0Ch], eax

loc_C65:				; CODE XREF: _ssl_cert_add0_chain_cert+Fj
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_C84
		push	[esp+4+arg_4]
		push	eax
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	short loc_C84
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_C84:				; CODE XREF: _ssl_cert_add0_chain_cert+9j
					; _ssl_cert_add0_chain_cert+1Ej ...
		xor	eax, eax
		pop	esi
		retn
_ssl_cert_add0_chain_cert endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C88h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_cert_add1_chain_cert
_ssl_cert_add1_chain_cert proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [eax]
		test	esi, esi
		jz	short loc_CDB
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_CA1
		call	_sk_new_null
		mov	[esi+0Ch], eax

loc_CA1:				; CODE XREF: _ssl_cert_add1_chain_cert+Fj
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_CDB
		mov	esi, [esp+4+arg_4]
		push	esi
		push	eax
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	short loc_CDB
		push	244h
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	3
		lea	eax, [esi+10h]
		push	1
		push	eax
		call	_CRYPTO_add_lock
		add	esp, 14h
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_CDB:				; CODE XREF: _ssl_cert_add1_chain_cert+9j
					; _ssl_cert_add1_chain_cert+1Ej ...
		xor	eax, eax
		pop	esi
		retn
_ssl_cert_add1_chain_cert endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0CE0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_cert_clear_certs
_ssl_cert_clear_certs proc near		; CODE XREF: _ssl_cert_dup+14Fp
					; _ssl_cert_free+63p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_D68
		push	edi
		add	esi, 48h ; 'H'
		mov	edi, 8

loc_CF2:				; CODE XREF: _ssl_cert_clear_certs+85j
		mov	eax, [esi-0Ch]
		test	eax, eax
		jz	short loc_D09
		push	eax
		call	_X509_free
		add	esp, 4
		mov	dword ptr [esi-0Ch], 0

loc_D09:				; CODE XREF: _ssl_cert_clear_certs+17j
		mov	eax, [esi-8]
		test	eax, eax
		jz	short loc_D20
		push	eax
		call	_EVP_PKEY_free
		add	esp, 4
		mov	dword ptr [esi-8], 0

loc_D20:				; CODE XREF: _ssl_cert_clear_certs+2Ej
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_D3A
		push	offset _X509_free
		push	eax
		call	_sk_pop_free
		add	esp, 8
		mov	dword ptr [esi], 0

loc_D3A:				; CODE XREF: _ssl_cert_clear_certs+44j
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_D58
		push	eax
		call	_CRYPTO_free
		add	esp, 4
		mov	dword ptr [esi+4], 0
		mov	dword ptr [esi+8], 0

loc_D58:				; CODE XREF: _ssl_cert_clear_certs+5Fj
		and	dword ptr [esi+0Ch], 100h
		add	esi, 1Ch
		sub	edi, 1
		jnz	short loc_CF2
		pop	edi

loc_D68:				; CODE XREF: _ssl_cert_clear_certs+7j
		pop	esi
		retn
_ssl_cert_clear_certs endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D6Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_cert_dup
_ssl_cert_dup	proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 8
		call	__chkstk
		push	esi
		push	0DEh ; 'Þ'
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	17Ch
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_DB6
		push	0E0h ; 'à'
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	41h ; 'A'
		push	0DDh ; 'Ý'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_DB6:				; CODE XREF: _ssl_cert_dup+26j
		push	ebx
		push	17Ch		; Size
		push	0		; Val
		push	esi		; Dst
		call	_memset
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, 92492493h
		mov	dword ptr [esi+16Ch], 1
		add	esp, 0Ch
		mov	ecx, [ebx]
		sub	ecx, ebx
		sub	ecx, 3Ch ; '<'
		imul	ecx
		add	edx, ecx
		sar	edx, 4
		mov	ecx, edx
		shr	ecx, 1Fh
		add	ecx, edx
		lea	eax, ds:0[ecx*8]
		sub	eax, ecx
		add	eax, 0Fh
		lea	eax, [esi+eax*4]
		mov	[esi], eax
		mov	eax, [ebx+4]
		mov	[esi+4], eax
		mov	eax, [ebx+8]
		mov	[esi+8], eax
		mov	eax, [ebx+0Ch]
		mov	[esi+0Ch], eax
		mov	eax, [ebx+10h]
		mov	[esi+10h], eax
		mov	eax, [ebx+14h]
		mov	[esi+14h], eax
		mov	eax, [ebx+1Ch]
		test	eax, eax
		jz	short loc_E34
		push	eax
		call	_RSA_up_ref
		mov	eax, [ebx+1Ch]
		add	esp, 4
		mov	[esi+1Ch], eax

loc_E34:				; CODE XREF: _ssl_cert_dup+B7j
		mov	eax, [ebx+20h]
		mov	[esi+20h], eax
		mov	eax, [ebx+24h]
		push	ebp
		push	edi
		test	eax, eax
		jz	loc_F2D
		push	eax
		call	_DHparams_dup
		add	esp, 4
		mov	[esi+24h], eax
		test	eax, eax
		jnz	short loc_ECD
		push	0FFh
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	5

loc_E63:				; CODE XREF: _ssl_cert_dup+186j
					; _ssl_cert_dup+1B6j ...
		push	0DDh ; 'Ý'
		push	14h
		call	_ERR_put_error
		add	esp, 14h

$err$53:				; CODE XREF: _ssl_cert_dup+366j
					; _ssl_cert_dup+3C2j ...
		mov	eax, [esi+1Ch]
		test	eax, eax
		jz	short loc_E82
		push	eax
		call	_RSA_free
		add	esp, 4

loc_E82:				; CODE XREF: _ssl_cert_dup+10Bj
		mov	eax, [esi+24h]
		test	eax, eax
		jz	short loc_E92
		push	eax
		call	_DH_free
		add	esp, 4

loc_E92:				; CODE XREF: _ssl_cert_dup+11Bj
		mov	eax, [esi+2Ch]
		test	eax, eax
		jz	short loc_EA2
		push	eax
		call	_EC_KEY_free
		add	esp, 4

loc_EA2:				; CODE XREF: _ssl_cert_dup+12Bj
		lea	eax, [esi+15Ch]
		push	eax
		call	_custom_exts_free
		lea	eax, [esi+164h]
		push	eax
		call	_custom_exts_free
		push	esi
		call	_ssl_cert_clear_certs
		add	esp, 0Ch
		xor	eax, eax
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_ECD:				; CODE XREF: _ssl_cert_dup+E9j
		mov	eax, [ebx+24h]
		mov	eax, [eax+18h]
		test	eax, eax
		jz	short loc_EFD
		push	eax
		call	_BN_dup
		mov	ecx, eax
		add	esp, 4
		test	ecx, ecx
		jnz	short loc_EF7
		push	105h
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	3
		jmp	loc_E63
; ---------------------------------------------------------------------------

loc_EF7:				; CODE XREF: _ssl_cert_dup+178j
		mov	eax, [esi+24h]
		mov	[eax+18h], ecx

loc_EFD:				; CODE XREF: _ssl_cert_dup+169j
		mov	eax, [ebx+24h]
		mov	eax, [eax+14h]
		test	eax, eax
		jz	short loc_F2D
		push	eax
		call	_BN_dup
		mov	ecx, eax
		add	esp, 4
		test	ecx, ecx
		jnz	short loc_F27
		push	10Dh
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	3
		jmp	loc_E63
; ---------------------------------------------------------------------------

loc_F27:				; CODE XREF: _ssl_cert_dup+1A8j
		mov	eax, [esi+24h]
		mov	[eax+14h], ecx

loc_F2D:				; CODE XREF: _ssl_cert_dup+D5j
					; _ssl_cert_dup+199j
		mov	eax, [ebx+28h]
		mov	[esi+28h], eax
		mov	eax, [ebx+2Ch]
		test	eax, eax
		jz	short loc_F5B
		push	eax
		call	_EC_KEY_dup
		add	esp, 4
		mov	[esi+2Ch], eax
		test	eax, eax
		jnz	short loc_F5B
		push	11Ah
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	10h
		jmp	loc_E63
; ---------------------------------------------------------------------------

loc_F5B:				; CODE XREF: _ssl_cert_dup+1CCj
					; _ssl_cert_dup+1DCj
		mov	eax, [ebx+30h]
		lea	ebp, [esi+54h]
		mov	ecx, esi
		mov	[esi+30h], eax
		mov	eax, [ebx+34h]
		lea	edi, [ebx+40h]
		sub	ecx, ebx
		mov	[esi+34h], eax
		mov	[esp+18h+var_8], 0
		mov	[esp+18h+var_4], ecx

loc_F7D:				; CODE XREF: _ssl_cert_dup+2CBj
		mov	eax, [edi-4]
		test	eax, eax
		jz	short loc_FA5
		push	127h
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	3
		mov	[ebp-18h], eax
		add	eax, 10h
		push	1
		push	eax
		call	_CRYPTO_add_lock
		mov	ecx, [esp+2Ch+var_4]
		add	esp, 14h

loc_FA5:				; CODE XREF: _ssl_cert_dup+216j
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_FCA
		push	12Ch
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		mov	[ecx+edi], eax
		mov	eax, [edi]
		push	0Ah
		add	eax, 8
		push	1
		push	eax
		call	_CRYPTO_add_lock
		add	esp, 14h

loc_FCA:				; CODE XREF: _ssl_cert_dup+23Dj
		mov	eax, [edi+8]
		test	eax, eax
		jz	short loc_FE1
		push	eax
		call	_X509_chain_up_ref
		add	esp, 4
		mov	[ebp-0Ch], eax
		test	eax, eax
		jz	short loc_103C

loc_FE1:				; CODE XREF: _ssl_cert_dup+263j
		mov	dword ptr [ebp+0], 0
		cmp	dword ptr [edi+0Ch], 0
		jz	short loc_101F
		push	13Bh
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	dword ptr [edi+10h]
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[ebp-8], eax
		test	eax, eax
		jz	short loc_104D
		mov	ecx, [edi+10h]
		mov	[ebp-4], ecx
		push	dword ptr [edi+10h] ; Size
		push	dword ptr [edi+0Ch] ; Src
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch

loc_101F:				; CODE XREF: _ssl_cert_dup+280j
		mov	ecx, [esp+18h+var_8]
		add	ebp, 1Ch
		inc	ecx
		add	edi, 1Ch
		mov	[esp+18h+var_8], ecx
		cmp	ecx, 8
		jge	short loc_1072
		mov	ecx, [esp+18h+var_4]
		jmp	loc_F7D
; ---------------------------------------------------------------------------

loc_103C:				; CODE XREF: _ssl_cert_dup+273j
		push	132h
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	41h ; 'A'
		jmp	loc_E63
; ---------------------------------------------------------------------------

loc_104D:				; CODE XREF: _ssl_cert_dup+29Cj
		push	13Dh
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	41h ; 'A'
		push	0DDh ; 'Ý'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1072:				; CODE XREF: _ssl_cert_dup+2C5j
		call	_EVP_sha1
		mov	[esi+7Ch], eax
		call	_EVP_sha1
		mov	[esi+60h], eax
		call	_EVP_sha1
		mov	[esi+44h], eax
		call	_EVP_sha1
		mov	[esi+0D0h], eax
		mov	dword ptr [esi+124h], 0
		mov	dword ptr [esi+128h], 0
		cmp	dword ptr [ebx+12Ch], 0
		jz	short loc_10FB
		push	154h
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	dword ptr [ebx+130h]
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[esi+12Ch], eax
		test	eax, eax
		jz	$err$53
		push	dword ptr [ebx+130h] ; Size
		push	dword ptr [ebx+12Ch] ; Src
		push	eax		; Dst
		call	_memcpy
		mov	eax, [ebx+130h]
		add	esp, 0Ch
		mov	[esi+130h], eax
		jmp	short loc_1105
; ---------------------------------------------------------------------------

loc_10FB:				; CODE XREF: _ssl_cert_dup+344j
		mov	dword ptr [esi+12Ch], 0

loc_1105:				; CODE XREF: _ssl_cert_dup+38Dj
		cmp	dword ptr [ebx+134h], 0
		jz	short loc_1157
		push	15Dh
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	dword ptr [ebx+138h]
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[esi+134h], eax
		test	eax, eax
		jz	$err$53
		push	dword ptr [ebx+138h] ; Size
		push	dword ptr [ebx+134h] ; Src
		push	eax		; Dst
		call	_memcpy
		mov	eax, [ebx+138h]
		add	esp, 0Ch
		mov	[esi+138h], eax
		jmp	short loc_1161
; ---------------------------------------------------------------------------

loc_1157:				; CODE XREF: _ssl_cert_dup+3A0j
		mov	dword ptr [esi+134h], 0

loc_1161:				; CODE XREF: _ssl_cert_dup+3E9j
		mov	dword ptr [esi+13Ch], 0
		cmp	dword ptr [ebx+11Ch], 0
		jz	short loc_11BB
		push	169h
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	dword ptr [ebx+120h]
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[esi+11Ch], eax
		test	eax, eax
		jz	$err$53
		push	dword ptr [ebx+120h] ; Size
		push	dword ptr [ebx+11Ch] ; Src
		push	eax		; Dst
		call	_memcpy
		mov	eax, [ebx+120h]
		add	esp, 0Ch
		mov	[esi+120h], eax

loc_11BB:				; CODE XREF: _ssl_cert_dup+406j
		mov	eax, [ebx+38h]
		mov	[esi+38h], eax
		mov	eax, [ebx+144h]
		mov	[esi+144h], eax
		mov	eax, [ebx+148h]
		mov	[esi+148h], eax
		mov	eax, [ebx+150h]
		test	eax, eax
		jz	short loc_1209
		push	177h
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	0Bh
		add	eax, 44h ; 'D'
		push	1
		push	eax
		call	_CRYPTO_add_lock
		mov	eax, [ebx+150h]
		add	esp, 14h
		mov	[esi+150h], eax

loc_1209:				; CODE XREF: _ssl_cert_dup+475j
		mov	eax, [ebx+14Ch]
		test	eax, eax
		jz	short loc_1239
		push	17Ch
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	0Bh
		add	eax, 44h ; 'D'
		push	1
		push	eax
		call	_CRYPTO_add_lock
		mov	eax, [ebx+14Ch]
		add	esp, 14h
		mov	[esi+14Ch], eax

loc_1239:				; CODE XREF: _ssl_cert_dup+4A5j
		lea	eax, [ebx+15Ch]
		mov	dword ptr [esi+154h], 0
		push	eax
		lea	eax, [esi+15Ch]
		push	eax
		call	_custom_exts_copy
		add	esp, 8
		test	eax, eax
		jz	$err$53
		lea	eax, [ebx+164h]
		push	eax
		lea	eax, [esi+164h]
		push	eax
		call	_custom_exts_copy
		add	esp, 8
		test	eax, eax
		jz	$err$53
		pop	edi
		pop	ebp
		pop	ebx
		mov	eax, esi
		pop	esi
		add	esp, 8
		retn
_ssl_cert_dup	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 128Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_cert_free
_ssl_cert_free	proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	loc_13C6
		push	1CDh
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	0Dh
		lea	eax, [esi+16Ch]
		push	0FFFFFFFFh
		push	eax
		call	_CRYPTO_add_lock
		add	esp, 14h
		test	eax, eax
		jg	loc_13C6
		mov	eax, [esi+1Ch]
		test	eax, eax
		jz	short loc_12CE
		push	eax
		call	_RSA_free
		add	esp, 4

loc_12CE:				; CODE XREF: _ssl_cert_free+37j
		mov	eax, [esi+24h]
		test	eax, eax
		jz	short loc_12DE
		push	eax
		call	_DH_free
		add	esp, 4

loc_12DE:				; CODE XREF: _ssl_cert_free+47j
		mov	eax, [esi+2Ch]
		test	eax, eax
		jz	short loc_12EE
		push	eax
		call	_EC_KEY_free
		add	esp, 4

loc_12EE:				; CODE XREF: _ssl_cert_free+57j
		push	esi
		call	_ssl_cert_clear_certs
		mov	eax, [esi+124h]
		add	esp, 4
		test	eax, eax
		jz	short loc_130A
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_130A:				; CODE XREF: _ssl_cert_free+73j
		mov	eax, [esi+12Ch]
		test	eax, eax
		jz	short loc_131D
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_131D:				; CODE XREF: _ssl_cert_free+86j
		mov	eax, [esi+134h]
		test	eax, eax
		jz	short loc_1330
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_1330:				; CODE XREF: _ssl_cert_free+99j
		mov	eax, [esi+13Ch]
		test	eax, eax
		jz	short loc_1343
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_1343:				; CODE XREF: _ssl_cert_free+ACj
		mov	eax, [esi+11Ch]
		test	eax, eax
		jz	short loc_1356
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_1356:				; CODE XREF: _ssl_cert_free+BFj
		mov	eax, [esi+150h]
		test	eax, eax
		jz	short loc_1369
		push	eax
		call	_X509_STORE_free
		add	esp, 4

loc_1369:				; CODE XREF: _ssl_cert_free+D2j
		mov	eax, [esi+14Ch]
		test	eax, eax
		jz	short loc_137C
		push	eax
		call	_X509_STORE_free
		add	esp, 4

loc_137C:				; CODE XREF: _ssl_cert_free+E5j
		mov	eax, [esi+154h]
		test	eax, eax
		jz	short loc_138F
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_138F:				; CODE XREF: _ssl_cert_free+F8j
		lea	eax, [esi+15Ch]
		push	eax
		call	_custom_exts_free
		lea	eax, [esi+164h]
		push	eax
		call	_custom_exts_free
		mov	eax, [esi+170h]
		add	esp, 8
		test	eax, eax
		jz	short loc_13BD
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_13BD:				; CODE XREF: _ssl_cert_free+126j
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_13C6:				; CODE XREF: _ssl_cert_free+7j
					; _ssl_cert_free+2Cj
		pop	esi
		retn
_ssl_cert_free	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 13C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_cert_inst
_ssl_cert_inst	proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_13F0
		push	20Eh
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	43h ; 'C'
		push	0DEh ; 'Þ'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_13F0:				; CODE XREF: _ssl_cert_inst+7j
		cmp	dword ptr [esi], 0
		jnz	short loc_141F
		call	_ssl_cert_new
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_141F
		push	213h
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	41h ; 'A'
		push	0DEh ; 'Þ'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_141F:				; CODE XREF: _ssl_cert_inst+2Bj
					; _ssl_cert_inst+36j
		mov	eax, 1
		pop	esi
		retn
_ssl_cert_inst	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1428h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_cert_new
_ssl_cert_new	proc near		; CODE XREF: _ssl_cert_inst+2Dp
		push	esi
		push	0CCh ; 'Ì'
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	17Ch
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1465
		push	0CEh ; 'Î'
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	41h ; 'A'
		push	0A2h ; '¢'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1465:				; CODE XREF: _ssl_cert_new+1Cj
		push	17Ch		; Size
		push	0		; Val
		push	esi		; Dst
		call	_memset
		add	esp, 0Ch
		mov	dword ptr [esi+16Ch], 1
		lea	eax, [esi+3Ch]
		mov	[esi], eax
		call	_EVP_sha1
		mov	[esi+7Ch], eax
		call	_EVP_sha1
		mov	[esi+60h], eax
		call	_EVP_sha1
		mov	[esi+44h], eax
		call	_EVP_sha1
		mov	[esi+0D0h], eax
		mov	eax, esi
		pop	esi
		retn
_ssl_cert_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 14ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_cert_select_current
_ssl_cert_select_current proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		test	ebx, ebx
		jnz	short loc_14B9
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_14B9:				; CODE XREF: _ssl_cert_select_current+7j
		push	ebp
		mov	ebp, [esp+8+arg_0]
		xor	ecx, ecx
		push	esi
		lea	esi, [ebp+3Ch]
		mov	eax, esi
		nop	word ptr [eax+eax+00h]

loc_14CC:				; CODE XREF: _ssl_cert_select_current+31j
		cmp	[eax], ebx
		jnz	short loc_14D6
		cmp	dword ptr [eax+4], 0
		jnz	short loc_150C

loc_14D6:				; CODE XREF: _ssl_cert_select_current+22j
		inc	ecx
		add	eax, 1Ch
		cmp	ecx, 8
		jl	short loc_14CC
		push	edi
		xor	edi, edi

loc_14E2:				; CODE XREF: _ssl_cert_select_current+57j
		cmp	dword ptr [esi+4], 0
		jz	short loc_14FC
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_14FC
		push	ebx
		push	eax
		call	_X509_cmp
		add	esp, 8
		test	eax, eax
		jz	short loc_1518

loc_14FC:				; CODE XREF: _ssl_cert_select_current+3Aj
					; _ssl_cert_select_current+40j
		inc	edi
		add	esi, 1Ch
		cmp	edi, 8
		jl	short loc_14E2
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_150C:				; CODE XREF: _ssl_cert_select_current+28j
		pop	esi
		mov	[ebp+0], eax
		mov	eax, 1
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1518:				; CODE XREF: _ssl_cert_select_current+4Ej
		pop	edi
		mov	[ebp+0], esi
		mov	eax, 1
		pop	esi
		pop	ebp
		pop	ebx
		retn
_ssl_cert_select_current endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1528h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_cert_set0_chain
_ssl_cert_set0_chain proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [eax]
		test	esi, esi
		jnz	short loc_1537
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1537:				; CODE XREF: _ssl_cert_set0_chain+9j
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_154C
		push	offset _X509_free
		push	eax
		call	_sk_pop_free
		add	esp, 8

loc_154C:				; CODE XREF: _ssl_cert_set0_chain+14j
		mov	eax, [esp+4+arg_4]
		mov	[esi+0Ch], eax
		mov	eax, 1
		pop	esi
		retn
_ssl_cert_set0_chain endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 155Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_cert_set1_chain
_ssl_cert_set1_chain proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		test	eax, eax
		jnz	short loc_1592
		mov	eax, [esp+4+arg_0]
		mov	esi, [eax]
		test	esi, esi
		jz	short loc_15A1
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_1584
		push	offset _X509_free
		push	eax
		call	_sk_pop_free
		add	esp, 8

loc_1584:				; CODE XREF: _ssl_cert_set1_chain+18j
		mov	dword ptr [esi+0Ch], 0
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1592:				; CODE XREF: _ssl_cert_set1_chain+7j
		push	eax
		call	_X509_chain_up_ref
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_15A5

loc_15A1:				; CODE XREF: _ssl_cert_set1_chain+11j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_15A5:				; CODE XREF: _ssl_cert_set1_chain+43j
		mov	eax, [esp+4+arg_0]
		push	edi
		mov	edi, [eax]
		test	edi, edi
		jz	short loc_15D0
		mov	eax, [edi+0Ch]
		test	eax, eax
		jz	short loc_15C5
		push	offset _X509_free
		push	eax
		call	_sk_pop_free
		add	esp, 8

loc_15C5:				; CODE XREF: _ssl_cert_set1_chain+59j
		mov	[edi+0Ch], esi
		mov	eax, 1
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_15D0:				; CODE XREF: _ssl_cert_set1_chain+52j
		push	offset _X509_free
		push	esi
		call	_sk_pop_free
		add	esp, 8
		xor	eax, eax
		pop	edi
		pop	esi
		retn
_ssl_cert_set1_chain endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 15E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_cert_set_cert_cb
_ssl_cert_set_cert_cb proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		mov	[ecx+144h], eax
		mov	eax, [esp+arg_8]
		mov	[ecx+148h], eax
		retn
_ssl_cert_set_cert_cb endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1600h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_cert_set_cert_store
_ssl_cert_set_cert_store proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		cmp	[esp+arg_8], 0
		push	esi
		mov	esi, [esp+4+arg_0]
		jz	short loc_1614
		add	esi, 14Ch
		jmp	short loc_161A
; ---------------------------------------------------------------------------

loc_1614:				; CODE XREF: _ssl_cert_set_cert_store+Aj
		add	esi, 150h

loc_161A:				; CODE XREF: _ssl_cert_set_cert_store+12j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1629
		push	eax
		call	_X509_STORE_free
		add	esp, 4

loc_1629:				; CODE XREF: _ssl_cert_set_cert_store+1Ej
		cmp	[esp+4+arg_C], 0
		mov	eax, [esp+4+arg_4]
		mov	[esi], eax
		pop	esi
		jz	short loc_1655
		test	eax, eax
		jz	short loc_1655
		push	4EEh
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	0Bh
		add	eax, 44h ; 'D'
		push	1
		push	eax
		call	_CRYPTO_add_lock
		add	esp, 14h

loc_1655:				; CODE XREF: _ssl_cert_set_cert_store+35j
					; _ssl_cert_set_cert_store+39j
		mov	eax, 1
		retn
_ssl_cert_set_cert_store endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 165Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_cert_set_current
_ssl_cert_set_current proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_16C0
		mov	eax, [esp+4+arg_4]
		cmp	eax, 1
		jnz	short loc_1672
		xor	edx, edx
		jmp	short loc_1697
; ---------------------------------------------------------------------------

loc_1672:				; CODE XREF: _ssl_cert_set_current+10j
		cmp	eax, 2
		jnz	short loc_16C0
		mov	ecx, [esi]
		mov	eax, 92492493h
		sub	ecx, esi
		sub	ecx, 3Ch ; '<'
		imul	ecx
		add	edx, ecx
		sar	edx, 4
		mov	eax, edx
		inc	edx
		shr	eax, 1Fh
		add	edx, eax
		cmp	edx, 8
		jge	short loc_16C0

loc_1697:				; CODE XREF: _ssl_cert_set_current+14j
		lea	eax, ds:0[edx*8]
		mov	ecx, edx
		sub	eax, edx
		add	eax, 0Fh
		lea	eax, [esi+eax*4]
		nop	dword ptr [eax+00h]

loc_16AC:				; CODE XREF: _ssl_cert_set_current+62j
		cmp	dword ptr [eax], 0
		jz	short loc_16B7
		cmp	dword ptr [eax+4], 0
		jnz	short loc_16C4

loc_16B7:				; CODE XREF: _ssl_cert_set_current+53j
		inc	ecx
		add	eax, 1Ch
		cmp	ecx, 8
		jl	short loc_16AC

loc_16C0:				; CODE XREF: _ssl_cert_set_current+7j
					; _ssl_cert_set_current+19j ...
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_16C4:				; CODE XREF: _ssl_cert_set_current+59j
		mov	[esi], eax
		mov	eax, 1
		pop	esi
		retn
_ssl_cert_set_current endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 16D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_cert_set_default_md
_ssl_cert_set_default_md proc near

arg_0		= dword	ptr  4

		push	esi
		call	_EVP_sha1
		mov	esi, [esp+4+arg_0]
		mov	[esi+7Ch], eax
		call	_EVP_sha1
		mov	[esi+60h], eax
		call	_EVP_sha1
		mov	[esi+44h], eax
		call	_EVP_sha1
		mov	[esi+0D0h], eax
		pop	esi
		retn
_ssl_cert_set_default_md endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 16FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_sess_cert_free
_ssl_sess_cert_free proc near

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	loc_17A7
		push	294h
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	0Fh
		lea	eax, [edi+0F8h]
		push	0FFFFFFFFh
		push	eax
		call	_CRYPTO_add_lock
		add	esp, 14h
		test	eax, eax
		jg	short loc_17A7
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_173E
		push	offset _X509_free
		push	eax
		call	_sk_pop_free
		add	esp, 8

loc_173E:				; CODE XREF: _ssl_sess_cert_free+32j
		push	ebx
		push	esi
		lea	esi, [edi+0Ch]
		mov	ebx, 8
		nop	dword ptr [eax+00h]

loc_174C:				; CODE XREF: _ssl_sess_cert_free+65j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_175B
		push	eax
		call	_X509_free
		add	esp, 4

loc_175B:				; CODE XREF: _ssl_sess_cert_free+54j
		add	esi, 1Ch
		sub	ebx, 1
		jnz	short loc_174C
		mov	eax, [edi+0ECh]
		pop	esi
		pop	ebx
		test	eax, eax
		jz	short loc_1778
		push	eax
		call	_RSA_free
		add	esp, 4

loc_1778:				; CODE XREF: _ssl_sess_cert_free+71j
		mov	eax, [edi+0F0h]
		test	eax, eax
		jz	short loc_178B
		push	eax
		call	_DH_free
		add	esp, 4

loc_178B:				; CODE XREF: _ssl_sess_cert_free+84j
		mov	eax, [edi+0F4h]
		test	eax, eax
		jz	short loc_179E
		push	eax
		call	_EC_KEY_free
		add	esp, 4

loc_179E:				; CODE XREF: _ssl_sess_cert_free+97j
		push	edi
		call	_CRYPTO_free
		add	esp, 4

loc_17A7:				; CODE XREF: _ssl_sess_cert_free+7j
					; _ssl_sess_cert_free+2Cj
		pop	edi
		retn
_ssl_sess_cert_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 17ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_sess_cert_new
_ssl_sess_cert_new proc	near
		push	esi
		push	280h
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	0FCh ; 'ü'
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_17E9
		push	282h
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	41h ; 'A'
		push	0E1h ; 'á'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_17E9:				; CODE XREF: _ssl_sess_cert_new+1Cj
		push	0FCh ; 'ü'      ; Size
		push	0		; Val
		push	esi		; Dst
		call	_memset
		lea	eax, [esi+0Ch]
		mov	dword ptr [esi+0F8h], 1
		add	esp, 0Ch
		mov	[esi+8], eax
		mov	eax, esi
		pop	esi
		retn
_ssl_sess_cert_new endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1810h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_set_peer_cert_type
_ssl_set_peer_cert_type	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax+4], ecx
		mov	eax, 1
		retn
_ssl_set_peer_cert_type	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1824h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl_verify_cert_chain
_ssl_verify_cert_chain proc near

var_88		= byte ptr -88h
var_24		= dword	ptr -24h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 88h ; ''
		call	__chkstk
		push	ebx
		push	esi
		mov	esi, [esp+90h+arg_0]
		push	edi
		mov	eax, [esi+98h]
		mov	ebx, [eax+150h]
		test	ebx, ebx
		jnz	short loc_1851
		mov	eax, [esi+0E4h]
		mov	ebx, [eax+0Ch]

loc_1851:				; CODE XREF: _ssl_verify_cert_chain+22j
		mov	edi, [esp+94h+arg_4]
		test	edi, edi
		jz	short loc_18A0
		push	edi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jz	short loc_18A0
		push	0
		push	edi
		call	_sk_value
		push	edi
		push	eax
		lea	eax, [esp+0A4h+var_88]
		push	ebx
		push	eax
		call	_X509_STORE_CTX_init
		add	esp, 18h
		test	eax, eax
		jnz	short loc_18AC
		push	2D7h
		push	offset ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ ; ".\\ssl\\ssl_cert.c"
		push	0Bh
		push	0CFh ; 'Ï'
		push	14h
		call	_ERR_put_error
		add	esp, 14h

loc_18A0:				; CODE XREF: _ssl_verify_cert_chain+36j
					; _ssl_verify_cert_chain+43j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 88h
		retn
; ---------------------------------------------------------------------------

loc_18AC:				; CODE XREF: _ssl_verify_cert_chain+5Fj
		mov	eax, [esi+98h]
		mov	eax, [eax+38h]
		and	eax, 30000h
		push	eax
		lea	eax, [esp+98h+var_88]
		push	eax
		call	_X509_STORE_CTX_set_flags
		add	esp, 8
		push	esi
		call	_SSL_get_ex_data_X509_STORE_CTX_idx
		push	eax
		lea	eax, [esp+9Ch+var_88]
		push	eax
		call	_X509_STORE_CTX_set_ex_data
		cmp	dword ptr [esi+24h], 0
		mov	ecx, offset ??_C@_0L@MDHNNNKP@ssl_server?$AA@ ;	"ssl_server"
		mov	eax, offset ??_C@_0L@IMDPAGCM@ssl_client?$AA@ ;	"ssl_client"
		cmovz	eax, ecx
		push	eax
		lea	eax, [esp+0A4h+var_88]
		push	eax
		call	_X509_STORE_CTX_set_default
		add	esp, 14h
		lea	eax, [esp+94h+var_88]
		push	dword ptr [esi+70h]
		push	eax
		call	_X509_STORE_CTX_get0_param
		add	esp, 4
		push	eax
		call	_X509_VERIFY_PARAM_set1
		mov	eax, [esi+0CCh]
		add	esp, 8
		test	eax, eax
		jz	short loc_1929
		push	eax
		lea	eax, [esp+98h+var_88]
		push	eax
		call	_X509_STORE_CTX_set_verify_cb
		add	esp, 8

loc_1929:				; CODE XREF: _ssl_verify_cert_chain+F5j
		mov	eax, [esi+0E4h]
		mov	ecx, [eax+64h]
		test	ecx, ecx
		jz	short loc_1945
		push	dword ptr [eax+68h]
		lea	eax, [esp+98h+var_88]
		push	eax
		call	ecx
		add	esp, 8
		jmp	short loc_1952
; ---------------------------------------------------------------------------

loc_1945:				; CODE XREF: _ssl_verify_cert_chain+110j
		lea	eax, [esp+94h+var_88]
		push	eax
		call	_X509_verify_cert
		add	esp, 4

loc_1952:				; CODE XREF: _ssl_verify_cert_chain+11Fj
		mov	edi, eax
		mov	eax, [esp+94h+var_24]
		mov	[esi+0ECh], eax
		lea	eax, [esp+94h+var_88]
		push	eax
		call	_X509_STORE_CTX_cleanup
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 88h
		retn
_ssl_verify_cert_chain endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1978h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_xname_cmp	proc near		; DATA XREF: _SSL_add_file_cert_subjects_to_stack+17o
					; _SSL_load_client_CA_file+Eo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	dword ptr [eax]
		mov	eax, [esp+4+arg_0]
		push	dword ptr [eax]
		call	_X509_NAME_cmp
		add	esp, 8
		retn
_xname_cmp	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1990h
; COMDAT (pick any)
		public ??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@
; `string'
??_C@_0BB@KPDPALCJ@?4?2ssl?2ssl_cert?4c?$AA@ db	'.\ssl\ssl_cert.c',0
					; DATA XREF: _SSL_add_dir_cert_subjects_to_stack+2Fo
					; _SSL_add_dir_cert_subjects_to_stack+F2o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 19A4h
; COMDAT (pick any)
		public ??_C@_0BI@GCIOAHAF@SSL?5for?5verify?5callback?$AA@
; `string'
??_C@_0BI@GCIOAHAF@SSL?5for?5verify?5callback?$AA@ db 'SSL for verify callback',0
					; DATA XREF: _SSL_get_ex_data_X509_STORE_CTX_idx+3Ao
					; _SSL_get_ex_data_X509_STORE_CTX_idx+C5o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 19BCh
; COMDAT (pick any)
		public ??_C@_0L@IMDPAGCM@ssl_client?$AA@
; `string'
??_C@_0L@IMDPAGCM@ssl_client?$AA@ db 'ssl_client',0 ; DATA XREF: _ssl_verify_cert_chain+BEo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 19C8h
; COMDAT (pick any)
		public ??_C@_0L@MDHNNNKP@ssl_server?$AA@
; `string'
??_C@_0L@MDHNNNKP@ssl_server?$AA@ db 'ssl_server',0 ; DATA XREF: _ssl_verify_cert_chain+B9o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 19D4h
; COMDAT (pick any)
		public ??_C@_05GFOLEBJA@?$CFs?1?$CFs?$AA@
; `string'
??_C@_05GFOLEBJA@?$CFs?1?$CFs?$AA@ db '%s/%s',0
					; DATA XREF: _SSL_add_dir_cert_subjects_to_stack+8Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 19DCh
; COMDAT (pick any)
		public ??_C@_02HJPKOJGD@?8?$CJ?$AA@
; `string'
??_C@_02HJPKOJGD@?8?$CJ?$AA@ db	27h, 29h, 0
					; DATA XREF: _SSL_add_dir_cert_subjects_to_stack+107o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 19E0h
; COMDAT (pick any)
		public ??_C@_0BJ@LMCDNAEM@OPENSSL_DIR_read?$CI?$CGctx?0?5?8?$AA@
; `string'
??_C@_0BJ@LMCDNAEM@OPENSSL_DIR_read?$CI?$CGctx?0?5?8?$AA@ db 'OPENSSL_DIR_read(&ctx, ',27h,0
					; DATA XREF: _SSL_add_dir_cert_subjects_to_stack+10Do
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 19FCh
; COMDAT (pick any)
		public ??_C@_0O@HFNJECFC@Verify?5error?3?$AA@
; `string'
??_C@_0O@HFNJECFC@Verify?5error?3?$AA@ db 'Verify error:',0
					; DATA XREF: _ssl_build_cert_chain+1F0o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; int *__cdecl __errno()
		extrn __imp___errno:near
					; CODE XREF: _SSL_add_dir_cert_subjects_to_stack:loc_13Ap
					; DATA XREF: _SSL_add_dir_cert_subjects_to_stack:loc_13Ar
; DWORD	__stdcall GetLastError()
		extrn __imp__GetLastError@0:near
					; CODE XREF: _SSL_add_dir_cert_subjects_to_stack+F7p
					; DATA XREF: _SSL_add_dir_cert_subjects_to_stack+F7r
		extrn _OPENSSL_DIR_read:near
					; CODE XREF: _SSL_add_dir_cert_subjects_to_stack+4Bp
					; _SSL_add_dir_cert_subjects_to_stack+D0p
		extrn _OPENSSL_DIR_end:near
					; CODE XREF: _SSL_add_dir_cert_subjects_to_stack+142p
		extrn _sk_num:near	; CODE XREF: _SSL_dup_CA_list+11p
					; _SSL_dup_CA_list+44p	...
		extrn _sk_value:near	; CODE XREF: _SSL_dup_CA_list+22p
					; _ssl_add_cert_chain+155p ...
		extrn _sk_new:near	; CODE XREF: _SSL_load_client_CA_file+1Dp
		extrn _sk_new_null:near	; CODE XREF: _SSL_dup_CA_list+3p
					; _SSL_load_client_CA_file+79p	...
		extrn _sk_free:near	; CODE XREF: _SSL_load_client_CA_file+121p
		extrn _sk_pop_free:near	; CODE XREF: _SSL_CTX_set_client_CA_list+15p
					; _SSL_dup_CA_list+5Cp	...
		extrn _sk_find:near	; CODE XREF: _SSL_add_file_cert_subjects_to_stack+B4p
					; _SSL_load_client_CA_file+A5p
		extrn _sk_push:near	; CODE XREF: _SSL_add_file_cert_subjects_to_stack+CCp
					; _SSL_dup_CA_list+36p	...
		extrn _sk_shift:near	; CODE XREF: _ssl_build_cert_chain+231p
		extrn _sk_pop:near	; CODE XREF: _ssl_build_cert_chain+27Dp
		extrn _sk_set_cmp_func:near
					; CODE XREF: _SSL_add_file_cert_subjects_to_stack+25p
					; _SSL_add_file_cert_subjects_to_stack+11Bp
		extrn _CRYPTO_lock:near	; CODE XREF: _SSL_add_dir_cert_subjects_to_stack+40p
					; _SSL_add_dir_cert_subjects_to_stack+158p ...
		extrn _CRYPTO_add_lock:near ; CODE XREF: _ssl_cert_add1_chain_cert+44p
					; _ssl_cert_dup+22Dp ...
		extrn _CRYPTO_malloc:near ; CODE XREF: _ssl_cert_dup+1Ap
					; _ssl_cert_dup+28Fp ...
		extrn _CRYPTO_free:near	; CODE XREF: _ssl_cert_clear_certs+62p
					; _ssl_cert_free+76p ...
		extrn _BIO_s_file:near	; CODE XREF: _SSL_add_file_cert_subjects_to_stack+30p
					; _SSL_load_client_CA_file+24p
		extrn _BIO_new:near	; CODE XREF: _SSL_add_file_cert_subjects_to_stack+36p
					; _SSL_load_client_CA_file+2Ap
		extrn _BIO_free:near	; CODE XREF: _SSL_add_file_cert_subjects_to_stack+100p
					; _SSL_load_client_CA_file+12Ep
		extrn _BIO_ctrl:near	; CODE XREF: _SSL_add_file_cert_subjects_to_stack+6Dp
					; _SSL_load_client_CA_file+4Dp
		extrn _BIO_snprintf:near
					; CODE XREF: _SSL_add_dir_cert_subjects_to_stack+9Dp
		extrn _BN_dup:near	; CODE XREF: _ssl_cert_dup+16Cp
					; _ssl_cert_dup+19Cp
		extrn _EVP_sha1:near	; CODE XREF: _ssl_cert_dup:loc_1072p
					; _ssl_cert_dup+30Ep ...
		extrn _EVP_PKEY_free:near ; CODE XREF: _ssl_cert_clear_certs+31p
		extrn _BUF_MEM_grow_clean:near ; CODE XREF: _ssl_add_cert_chain+80p
					; _ssl_add_cert_to_buf+32p
		extrn _EC_KEY_free:near	; CODE XREF: _ssl_cert_dup+12Ep
					; _ssl_cert_free+5Ap ...
		extrn _EC_KEY_dup:near	; CODE XREF: _ssl_cert_dup+1CFp
		extrn _RSA_free:near	; CODE XREF: _ssl_cert_dup+10Ep
					; _ssl_cert_free+3Ap ...
		extrn _RSA_up_ref:near	; CODE XREF: _ssl_cert_dup+BAp
		extrn _DHparams_dup:near ; CODE	XREF: _ssl_cert_dup+DCp
		extrn _DH_free:near	; CODE XREF: _ssl_cert_dup+11Ep
					; _ssl_cert_free+4Ap ...
		extrn _X509_STORE_new:near ; CODE XREF:	_ssl_build_cert_chain+5Bp
		extrn _X509_STORE_free:near ; CODE XREF: _ssl_build_cert_chain+2A7p
					; _ssl_cert_free+D5p ...
		extrn _X509_STORE_CTX_init:near	; CODE XREF: _ssl_add_cert_chain+F4p
					; _ssl_build_cert_chain+11Ep ...
		extrn _X509_STORE_CTX_cleanup:near ; CODE XREF:	_ssl_add_cert_chain+17Fp
					; _ssl_add_cert_chain+1CFp ...
		extrn _X509_STORE_add_cert:near	; CODE XREF: _ssl_build_cert_chain+8Bp
					; _ssl_build_cert_chain+D5p
		extrn _X509_STORE_CTX_get_ex_new_index:near
					; CODE XREF: _SSL_get_ex_data_X509_STORE_CTX_idx+41p
					; _SSL_get_ex_data_X509_STORE_CTX_idx+CCp
		extrn _X509_STORE_CTX_set_ex_data:near
					; CODE XREF: _ssl_verify_cert_chain+B0p
		extrn _X509_STORE_CTX_get_error:near ; CODE XREF: _ssl_build_cert_chain+1E4p
		extrn _X509_STORE_CTX_get1_chain:near
					; CODE XREF: _ssl_build_cert_chain+1B2p
		extrn _X509_STORE_CTX_set_flags:near ; CODE XREF: _ssl_build_cert_chain+174p
					; _ssl_verify_cert_chain+9Cp
		extrn _X509_STORE_CTX_set_verify_cb:near
					; CODE XREF: _ssl_verify_cert_chain+FDp
		extrn _X509_STORE_CTX_get0_param:near
					; CODE XREF: _ssl_verify_cert_chain+DCp
		extrn _X509_STORE_CTX_set_default:near
					; CODE XREF: _ssl_verify_cert_chain+CCp
		extrn _X509_VERIFY_PARAM_set1:near ; CODE XREF:	_ssl_verify_cert_chain+E5p
		extrn _X509_verify_cert_error_string:near
					; CODE XREF: _ssl_build_cert_chain+1EAp
		extrn _X509_NAME_dup:near
					; CODE XREF: _SSL_add_file_cert_subjects_to_stack+A4p
					; _SSL_dup_CA_list+28p	...
		extrn _X509_NAME_free:near
					; CODE XREF: _SSL_add_file_cert_subjects_to_stack+C1p
					; _SSL_load_client_CA_file+B2p	...
		extrn _X509_free:near	; CODE XREF: _SSL_add_file_cert_subjects_to_stack+111p
					; _SSL_load_client_CA_file+13Fp ...
		extrn _i2d_X509:near	; CODE XREF: _ssl_add_cert_to_buf+13p
					; _ssl_add_cert_to_buf+6Fp
		extrn _X509_get_subject_name:near
					; CODE XREF: _SSL_add_file_cert_subjects_to_stack+97p
					; _SSL_load_client_CA_file+88p	...
		extrn _X509_chain_up_ref:near ;	CODE XREF: _ssl_cert_dup+266p
					; _ssl_cert_set1_chain+37p
		extrn _X509_cmp:near	; CODE XREF: _ssl_cert_select_current+44p
		extrn _X509_NAME_cmp:near ; CODE XREF: _xname_cmp+Cp
		extrn _X509_verify_cert:near ; CODE XREF: _ssl_add_cert_chain+12Dp
					; _ssl_build_cert_chain+17Ep ...
		extrn _PEM_read_bio_X509:near
					; CODE XREF: _SSL_add_file_cert_subjects_to_stack+87p
					; _SSL_add_file_cert_subjects_to_stack+DEp ...
		extrn _X509_check_purpose:near ; CODE XREF: _ssl_build_cert_chain+26Bp
		extrn _ERR_put_error:near
					; CODE XREF: _SSL_add_dir_cert_subjects_to_stack+102p
					; _SSL_add_dir_cert_subjects_to_stack+12Cp ...
		extrn _ERR_peek_last_error:near	; CODE XREF: _ssl_build_cert_chain+97p
					; _ssl_build_cert_chain+E1p
		extrn _ERR_clear_error:near
					; CODE XREF: _SSL_add_file_cert_subjects_to_stack:loc_2EEp
					; _SSL_load_client_CA_file+14Bp ...
		extrn _ERR_add_error_data:near
					; CODE XREF: _SSL_add_dir_cert_subjects_to_stack+114p
					; _ssl_build_cert_chain+1F7p
		extrn _custom_exts_copy:near ; CODE XREF: _ssl_cert_dup+4E5p
					; _ssl_cert_dup+503p
		extrn _custom_exts_free:near ; CODE XREF: _ssl_cert_dup+13Dp
					; _ssl_cert_dup+149p ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _SSL_add_dir_cert_subjects_to_stack+16Fp
		extrn __chkstk:near	; CODE XREF: _SSL_add_dir_cert_subjects_to_stack+5p
					; _SSL_add_file_cert_subjects_to_stack+5p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _ssl_cert_dup+2ABp
					; _ssl_cert_dup+379p ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _ssl_cert_dup+53p
					; _ssl_cert_new+45p ...
		extrn ___security_cookie:near
					; DATA XREF: _SSL_add_dir_cert_subjects_to_stack+Ar


		end
