;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	8EE1C5CCF950ADC677DEB2F91EE591DA
; Input	CRC32 :	D5E4299B

; File Name   :	C:\compspace\Diff\openssl\obj\nsseq.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nsseq_cb	proc near		; DATA XREF: .rdata:00000034o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_0], 1
		jnz	short loc_1B
		mov	eax, [esp+arg_4]
		push	esi
		push	4Fh ; 'O'
		mov	esi, [eax]
		call	_OBJ_nid2obj
		add	esp, 4
		mov	[esi], eax
		pop	esi

loc_1B:					; CODE XREF: _nsseq_cb+5j
		mov	eax, 1
		retn
_nsseq_cb	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 24h
_NETSCAPE_CERT_SEQUENCE_aux dd 4 dup(0)	; DATA XREF: .rdata:00000074o
		dd offset _nsseq_cb
		dd 0
_NETSCAPE_CERT_SEQUENCE_seq_tt dd 3 dup(0) ; DATA XREF:	.rdata:0000006Co
		dd offset ??_C@_04GPMDFGEJ@type?$AA@ ; "type"
		dd offset _ASN1_OBJECT_it
		dd offset aApe_cert_seque ; "APE_CERT_SEQUENCE"
		align 8
		dd 4
		dd offset ??_C@_05HFDFJDL@certs?$AA@ ; "certs"
		dd offset _X509_it
; `NETSCAPE_CERT_SEQUENCE_it'::`2'::local_it
?local_it@?1??NETSCAPE_CERT_SEQUENCE_it@@9@9 dd	1, 10h
					; DATA XREF: _NETSCAPE_CERT_SEQUENCE_freeo
					; _NETSCAPE_CERT_SEQUENCE_ito ...
		dd offset _NETSCAPE_CERT_SEQUENCE_seq_tt
		dd 2
		dd offset _NETSCAPE_CERT_SEQUENCE_aux
		dd 8
		dd offset ??_C@_0BH@GGOBJLLE@NETSCAPE_CERT_SEQUENCE?$AA@ ; `string'
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 80h
; COMDAT (pick any)
		public ??_C@_04GPMDFGEJ@type?$AA@
; `string'
??_C@_04GPMDFGEJ@type?$AA@ db 'type',0  ; DATA XREF: .rdata:00000048o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 88h
; COMDAT (pick any)
		public ??_C@_05HFDFJDL@certs?$AA@
; `string'
??_C@_05HFDFJDL@certs?$AA@ db 'certs',0 ; DATA XREF: .rdata:0000005Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 90h
; COMDAT (pick any)
		public ??_C@_0BH@GGOBJLLE@NETSCAPE_CERT_SEQUENCE?$AA@
; `string'
??_C@_0BH@GGOBJLLE@NETSCAPE_CERT_SEQUENCE?$AA@ dd 5354454Eh ; DATA XREF: .rdata:0000007Co
		db 43h
aApe_cert_seque	db 'APE_CERT_SEQUENCE',0 ; DATA XREF: .rdata:00000050o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NETSCAPE_CERT_SEQUENCE_free
_NETSCAPE_CERT_SEQUENCE_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??NETSCAPE_CERT_SEQUENCE_it@@9@9 ; `NETSCAPE_CERT_SEQUENCE_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_NETSCAPE_CERT_SEQUENCE_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NETSCAPE_CERT_SEQUENCE_it
_NETSCAPE_CERT_SEQUENCE_it proc	near
		mov	eax, offset ?local_it@?1??NETSCAPE_CERT_SEQUENCE_it@@9@9 ; `NETSCAPE_CERT_SEQUENCE_it'::`2'::local_it
		retn
_NETSCAPE_CERT_SEQUENCE_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NETSCAPE_CERT_SEQUENCE_new
_NETSCAPE_CERT_SEQUENCE_new proc near
		push	offset ?local_it@?1??NETSCAPE_CERT_SEQUENCE_it@@9@9 ; `NETSCAPE_CERT_SEQUENCE_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_NETSCAPE_CERT_SEQUENCE_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_NETSCAPE_CERT_SEQUENCE
_d2i_NETSCAPE_CERT_SEQUENCE proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??NETSCAPE_CERT_SEQUENCE_it@@9@9 ; `NETSCAPE_CERT_SEQUENCE_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_NETSCAPE_CERT_SEQUENCE endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_NETSCAPE_CERT_SEQUENCE
_i2d_NETSCAPE_CERT_SEQUENCE proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??NETSCAPE_CERT_SEQUENCE_it@@9@9 ; `NETSCAPE_CERT_SEQUENCE_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_NETSCAPE_CERT_SEQUENCE endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ASN1_OBJECT_it:near ; DATA XREF:	.rdata:0000004Co
		extrn _X509_it:near	; DATA XREF: .rdata:00000060o
		extrn _ASN1_item_new:near ; CODE XREF: _NETSCAPE_CERT_SEQUENCE_new+5p
		extrn _ASN1_item_free:near ; CODE XREF:	_NETSCAPE_CERT_SEQUENCE_free+9p
		extrn _ASN1_item_d2i:near ; CODE XREF: _d2i_NETSCAPE_CERT_SEQUENCE+11p
		extrn _ASN1_item_i2d:near ; CODE XREF: _i2d_NETSCAPE_CERT_SEQUENCE+Dp
		extrn _OBJ_nid2obj:near	; CODE XREF: _nsseq_cb+10p


		end
