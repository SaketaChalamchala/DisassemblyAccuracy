;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	AADC99EFD24B49DB181D35D53989B724
; Input	CRC32 :	6AE8DA5A

; File Name   :	C:\compspace\Diff\openssl\obj\pcy_lib.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_policy_level_get0_node
_X509_policy_level_get0_node proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_9
		retn
; ---------------------------------------------------------------------------

loc_9:					; CODE XREF: _X509_policy_level_get0_node+6j
		mov	edx, [eax+8]
		mov	ecx, [esp+arg_4]
		test	edx, edx
		jz	short loc_1C
		test	ecx, ecx
		jnz	short loc_1B
		mov	eax, edx
		retn
; ---------------------------------------------------------------------------

loc_1B:					; CODE XREF: _X509_policy_level_get0_node+16j
		dec	ecx

loc_1C:					; CODE XREF: _X509_policy_level_get0_node+12j
		push	ecx
		push	dword ptr [eax+4]
		call	_sk_value
		add	esp, 8
		retn
_X509_policy_level_get0_node endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_policy_level_node_count
_X509_policy_level_node_count proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_35
		retn
; ---------------------------------------------------------------------------

loc_35:					; CODE XREF: _X509_policy_level_node_count+6j
		push	ebx
		xor	ebx, ebx
		cmp	[eax+8], ebx
		mov	eax, [eax+4]
		setnz	bl
		test	eax, eax
		jz	short loc_50
		push	eax
		call	_sk_num
		add	esp, 4
		add	ebx, eax

loc_50:					; CODE XREF: _X509_policy_level_node_count+17j
		mov	eax, ebx
		pop	ebx
		retn
_X509_policy_level_node_count endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 54h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_policy_node_get0_parent
_X509_policy_node_get0_parent proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_5D
		retn
; ---------------------------------------------------------------------------

loc_5D:					; CODE XREF: _X509_policy_node_get0_parent+6j
		mov	eax, [eax+4]
		retn
_X509_policy_node_get0_parent endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 64h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_policy_node_get0_policy
_X509_policy_node_get0_policy proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_6D
		retn
; ---------------------------------------------------------------------------

loc_6D:					; CODE XREF: _X509_policy_node_get0_policy+6j
		mov	eax, [eax]
		mov	eax, [eax+4]
		retn
_X509_policy_node_get0_policy endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 74h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_policy_node_get0_qualifiers
_X509_policy_node_get0_qualifiers proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_7D
		retn
; ---------------------------------------------------------------------------

loc_7D:					; CODE XREF: _X509_policy_node_get0_qualifiers+6j
		mov	eax, [eax]
		mov	eax, [eax+8]
		retn
_X509_policy_node_get0_qualifiers endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 84h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_policy_tree_get0_level
_X509_policy_tree_get0_level proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jz	short loc_9F
		mov	eax, [esp+arg_4]
		test	eax, eax
		js	short loc_9F
		cmp	eax, [ecx+4]
		jge	short loc_9F
		shl	eax, 4
		add	eax, [ecx]
		retn
; ---------------------------------------------------------------------------

loc_9F:					; CODE XREF: _X509_policy_tree_get0_level+6j
					; _X509_policy_tree_get0_level+Ej ...
		xor	eax, eax
		retn
_X509_policy_tree_get0_level endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_policy_tree_get0_policies
_X509_policy_tree_get0_policies	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_AD
		retn
; ---------------------------------------------------------------------------

loc_AD:					; CODE XREF: _X509_policy_tree_get0_policies+6j
		mov	eax, [eax+0Ch]
		retn
_X509_policy_tree_get0_policies	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_policy_tree_get0_user_policies
_X509_policy_tree_get0_user_policies proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_BD
		retn
; ---------------------------------------------------------------------------

loc_BD:					; CODE XREF: _X509_policy_tree_get0_user_policies+6j
		test	byte ptr [eax+14h], 2
		jz	short loc_C7
		mov	eax, [eax+0Ch]
		retn
; ---------------------------------------------------------------------------

loc_C7:					; CODE XREF: _X509_policy_tree_get0_user_policies+Dj
		mov	eax, [eax+10h]
		retn
_X509_policy_tree_get0_user_policies endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0CCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_policy_tree_level_count
_X509_policy_tree_level_count proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_D5
		retn
; ---------------------------------------------------------------------------

loc_D5:					; CODE XREF: _X509_policy_tree_level_count+6j
		mov	eax, [eax+4]
		retn
_X509_policy_tree_level_count endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _sk_num:near	; CODE XREF: _X509_policy_level_node_count+1Ap
		extrn _sk_value:near	; CODE XREF: _X509_policy_level_get0_node+20p


		end
