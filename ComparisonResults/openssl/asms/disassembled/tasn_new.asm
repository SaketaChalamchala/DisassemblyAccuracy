;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	701882F2505E58AE5F49E91196F3B400
; Input	CRC32 :	886DBC19

; File Name   :	C:\compspace\Diff\openssl\obj\tasn_new.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_item_ex_new
_ASN1_item_ex_new proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_asn1_item_ex_combine_new
		add	esp, 0Ch
		retn
_ASN1_item_ex_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 14h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_item_new
_ASN1_item_new	proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 4
		call	__chkstk
		push	0
		push	[esp+8+arg_0]
		lea	eax, [esp+0Ch+var_4]
		mov	[esp+0Ch+var_4], 0
		push	eax
		call	_asn1_item_ex_combine_new
		xor	ecx, ecx
		test	eax, eax
		cmovg	ecx, [esp+10h+var_4]
		mov	eax, ecx
		add	esp, 10h
		retn
_ASN1_item_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 48h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_primitive_new
_ASN1_primitive_new proc near		; CODE XREF: _asn1_item_ex_combine_new+7Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jnz	short loc_55

loc_51:					; CODE XREF: _ASN1_primitive_new+98j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_55:					; CODE XREF: _ASN1_primitive_new+7j
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_6F
		mov	eax, [eax+8]
		test	eax, eax
		jz	short loc_6F
		push	esi
		push	[esp+8+arg_0]
		call	eax
		add	esp, 8
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6F:					; CODE XREF: _ASN1_primitive_new+12j
					; _ASN1_primitive_new+19j
		cmp	byte ptr [esi],	5
		jnz	short loc_79
		or	ecx, 0FFFFFFFFh
		jmp	short loc_7C
; ---------------------------------------------------------------------------

loc_79:					; CODE XREF: _ASN1_primitive_new+2Aj
		mov	ecx, [esi+4]

loc_7C:					; CODE XREF: _ASN1_primitive_new+2Fj
		lea	eax, [ecx+4]	; switch 11 cases
		cmp	eax, 0Ah
		ja	short $LN14	; jumptable 0000008B default case
		movzx	eax, ds:$LN18[eax]
		jmp	ds:$LN21[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN9:					; CODE XREF: _ASN1_primitive_new+43j
					; DATA XREF: .text$mn:$LN21o
		push	0		; jumptable 0000008B case 6
		call	_OBJ_nid2obj
		mov	ecx, [esp+8+arg_0]
		add	esp, 4
		mov	[ecx], eax
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN10:					; CODE XREF: _ASN1_primitive_new+43j
					; DATA XREF: .text$mn:$LN21o
		mov	eax, [esp+4+arg_0] ; jumptable 0000008B	case 1
		mov	ecx, [esi+14h]
		pop	esi
		mov	[eax], ecx
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

$LN11:					; CODE XREF: _ASN1_primitive_new+43j
					; DATA XREF: .text$mn:$LN21o
		mov	eax, [esp+4+arg_0] ; jumptable 0000008B	case 5
		pop	esi
		mov	dword ptr [eax], 1
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

$LN12:					; CODE XREF: _ASN1_primitive_new+43j
					; DATA XREF: .text$mn:$LN21o
		push	156h		; jumptable 0000008B case -4
		push	offset ??_C@_0BJ@NBOPBEKM@?4?2crypto?2asn1?2tasn_new?4c?$AA@ ; ".\\crypto\\asn1\\tasn_new.c"
		push	8
		call	_CRYPTO_malloc
		add	esp, 0Ch
		test	eax, eax
		jz	loc_51
		mov	ecx, [esp+4+arg_0]
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax], 0FFFFFFFFh
		pop	esi
		mov	[ecx], eax
		xor	eax, eax
		cmp	[ecx], eax
		setnz	al
		retn
; ---------------------------------------------------------------------------

$LN14:					; CODE XREF: _ASN1_primitive_new+3Aj
					; _ASN1_primitive_new+43j
					; DATA XREF: ...
		push	ecx		; jumptable 0000008B default case
		call	_ASN1_STRING_type_new
		add	esp, 4
		cmp	byte ptr [esi],	5
		jnz	short loc_118
		test	eax, eax
		jz	short loc_118
		or	dword ptr [eax+0Ch], 40h

loc_118:				; CODE XREF: _ASN1_primitive_new+C6j
					; _ASN1_primitive_new+CAj
		mov	ecx, [esp+4+arg_0]
		pop	esi
		mov	[ecx], eax
		xor	eax, eax
		cmp	[ecx], eax
		setnz	al
		retn
_ASN1_primitive_new endp

; ---------------------------------------------------------------------------
		align 4
$LN21		dd offset $LN12		; DATA XREF: _ASN1_primitive_new+43r
		dd offset $LN10		; jump table for switch	statement
		dd offset $LN11
		dd offset $LN9
		dd offset $LN14
$LN18		db	0,     4,     4,     4 ; DATA XREF: _ASN1_primitive_new+3Cr
		db	4,     1,     4,     4 ; indirect table	for switch statement
		db	4,     2,     3
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 148h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_template_new
_ASN1_template_new proc	near		; CODE XREF: _asn1_item_ex_combine_new+6Ep
					; _asn1_item_ex_combine_new+189p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		mov	eax, [esi+10h]
		call	eax
		mov	ecx, [esi]
		test	cl, 1
		jz	short loc_18B
		test	ecx, 306h
		jz	short loc_172
		mov	eax, [esp+4+arg_0]
		pop	esi
		mov	dword ptr [eax], 0
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_172:				; CODE XREF: _ASN1_template_new+17j
		mov	eax, [esi+10h]
		call	eax
		push	eax
		push	[esp+8+arg_0]
		call	_asn1_item_clear
		add	esp, 8
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_18B:				; CODE XREF: _ASN1_template_new+Fj
		test	ecx, 300h
		jz	short loc_1A4
		mov	eax, [esp+4+arg_0]
		pop	esi
		mov	dword ptr [eax], 0
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_1A4:				; CODE XREF: _ASN1_template_new+49j
		test	cl, 6
		jz	short loc_1E0
		call	_sk_new_null
		mov	ecx, eax
		test	ecx, ecx
		jnz	short loc_1D3
		push	115h
		push	offset ??_C@_0BJ@NBOPBEKM@?4?2crypto?2asn1?2tasn_new?4c?$AA@ ; ".\\crypto\\asn1\\tasn_new.c"
		push	41h ; 'A'
		push	85h ; '…'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1D3:				; CODE XREF: _ASN1_template_new+6Aj
		mov	eax, [esp+4+arg_0]
		pop	esi
		mov	[eax], ecx
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_1E0:				; CODE XREF: _ASN1_template_new+5Fj
		and	ecx, 400h
		push	ecx
		push	eax
		push	[esp+0Ch+arg_0]
		call	_asn1_item_ex_combine_new
		add	esp, 0Ch

$done$83:
		pop	esi
		retn
_ASN1_template_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_item_clear proc near		; CODE XREF: _ASN1_template_new+34p
					; _asn1_template_clear+20j

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		movsx	ecx, byte ptr [eax]
		cmp	ecx, 6		; switch 7 cases
		ja	short locret_25C ; jumptable 00000208 default case
		nop	dword ptr [eax+00h]

loc_208:				; CODE XREF: _asn1_item_clear+31j
		jmp	ds:$LN25[ecx*4]	; switch jump
; ---------------------------------------------------------------------------

$LN7:					; CODE XREF: _asn1_item_clear:loc_208j
					; DATA XREF: .text$mn:$LN25o
		mov	ecx, [eax+8]	; jumptable 00000208 case 0
		test	ecx, ecx
		jz	short loc_22C
		test	dword ptr [ecx], 306h
		jnz	short $LN11_0	; jumptable 00000208 cases 1-3,6
		mov	eax, [ecx+10h]
		call	eax
		movsx	ecx, byte ptr [eax]
		cmp	ecx, 6
		jbe	short loc_208
		retn
; ---------------------------------------------------------------------------

loc_22C:				; CODE XREF: _asn1_item_clear+1Cj
		mov	[esp+arg_4], eax
		jmp	_asn1_primitive_clear
; ---------------------------------------------------------------------------

$LN4:					; CODE XREF: _asn1_item_clear:loc_208j
					; DATA XREF: .text$mn:$LN25o
		mov	ecx, [eax+10h]	; jumptable 00000208 case 4
		test	ecx, ecx
		jz	short $LN11_0	; jumptable 00000208 cases 1-3,6
		mov	ecx, [ecx+0Ch]
		test	ecx, ecx
		jz	short $LN11_0	; jumptable 00000208 cases 1-3,6
		mov	[esp+arg_4], eax
		jmp	ecx
; ---------------------------------------------------------------------------

$LN10_0:				; CODE XREF: _asn1_item_clear:loc_208j
					; DATA XREF: .text$mn:$LN25o
		mov	[esp+arg_4], eax ; jumptable 00000208 case 5
		jmp	_asn1_primitive_clear
; ---------------------------------------------------------------------------

$LN11_0:				; CODE XREF: _asn1_item_clear:loc_208j
					; _asn1_item_clear+24j	...
		mov	eax, [esp+arg_0] ; jumptable 00000208 cases 1-3,6
		mov	dword ptr [eax], 0

locret_25C:				; CODE XREF: _asn1_item_clear+Aj
		retn			; jumptable 00000208 default case
_asn1_item_clear endp

; ---------------------------------------------------------------------------
		align 10h
$LN25		dd offset $LN7		; DATA XREF: _asn1_item_clear:loc_208r
		dd offset $LN11_0	; jump table for switch	statement
		dd offset $LN11_0
		dd offset $LN11_0
		dd offset $LN4
		dd offset $LN10_0
		dd offset $LN11_0
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 27Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_item_ex_combine_new proc near	; CODE XREF: _ASN1_item_ex_new+Ap
					; _ASN1_item_new+1Dp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		push	edi
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_292
		mov	ebp, [eax+10h]
		test	ebp, ebp
		jnz	short loc_294

loc_292:				; CODE XREF: _asn1_item_ex_combine_new+Dj
		xor	ebp, ebp

loc_294:				; CODE XREF: _asn1_item_ex_combine_new+14j
		movsx	ecx, byte ptr [esi]
		cmp	ecx, 6		; switch 7 cases
		ja	short loc_2C0	; jumptable 0000029C default case
		jmp	ds:$LN47[ecx*4]	; switch jump
; ---------------------------------------------------------------------------

$LN9_0:					; CODE XREF: _asn1_item_ex_combine_new+20j
					; DATA XREF: .text$mn:$LN47o
		test	eax, eax	; jumptable 0000029C case 4
		jz	short loc_2C0	; jumptable 0000029C default case
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_2C0	; jumptable 0000029C default case
		push	esi
		push	[esp+14h+arg_0]
		call	eax

loc_2B5:				; CODE XREF: _asn1_item_ex_combine_new+73j
					; _asn1_item_ex_combine_new+7Fj
		add	esp, 8

loc_2B8:				; CODE XREF: _asn1_item_ex_combine_new+60j
		test	eax, eax
		jz	$memerr$48

loc_2C0:				; CODE XREF: _asn1_item_ex_combine_new+1Ej
					; _asn1_item_ex_combine_new+29j ...
		pop	edi		; jumptable 0000029C default case
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN12_0:				; CODE XREF: _asn1_item_ex_combine_new+20j
					; DATA XREF: .text$mn:$LN47o
		test	eax, eax	; jumptable 0000029C case 3
		jz	short loc_2C0	; jumptable 0000029C default case
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_2C0	; jumptable 0000029C default case
		call	eax
		mov	ecx, [esp+10h+arg_0]
		mov	[ecx], eax
		jmp	short loc_2B8
; ---------------------------------------------------------------------------

$LN15:					; CODE XREF: _asn1_item_ex_combine_new+20j
					; DATA XREF: .text$mn:$LN47o
		mov	eax, [esi+8]	; jumptable 0000029C case 0
		test	eax, eax
		jz	short $LN16	; jumptable 0000029C case 5
		push	eax
		push	[esp+14h+arg_0]
		call	_ASN1_template_new
		jmp	short loc_2B5
; ---------------------------------------------------------------------------

$LN16:					; CODE XREF: _asn1_item_ex_combine_new+20j
					; _asn1_item_ex_combine_new+67j
					; DATA XREF: ...
		push	esi		; jumptable 0000029C case 5
		push	[esp+14h+arg_0]
		call	_ASN1_primitive_new
		jmp	short loc_2B5
; ---------------------------------------------------------------------------

$LN22:					; CODE XREF: _asn1_item_ex_combine_new+20j
					; DATA XREF: .text$mn:$LN47o
		mov	edi, [esp+10h+arg_0] ; jumptable 0000029C case 2
		test	ebp, ebp
		jz	short loc_31D
		push	0
		push	esi
		push	edi
		push	0
		call	ebp
		add	esp, 10h
		test	eax, eax
		jz	$auxerr$49
		cmp	eax, 2
		jz	short loc_2C0	; jumptable 0000029C default case

loc_31D:				; CODE XREF: _asn1_item_ex_combine_new+87j
		cmp	[esp+10h+arg_8], 0
		jnz	short loc_351
		push	9Ah ; 'š'
		push	offset ??_C@_0BJ@NBOPBEKM@?4?2crypto?2asn1?2tasn_new?4c?$AA@ ; ".\\crypto\\asn1\\tasn_new.c"
		push	dword ptr [esi+14h]
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[edi], eax
		test	eax, eax
		jz	$memerr$48
		push	dword ptr [esi+14h] ; Size
		push	0		; Val
		push	eax		; Dst
		call	_memset
		add	esp, 0Ch

loc_351:				; CODE XREF: _asn1_item_ex_combine_new+A6j
		push	esi
		push	0FFFFFFFFh
		push	edi
		call	_asn1_set_choice_selector
		add	esp, 0Ch
		test	ebp, ebp
		jz	loc_2C0		; jumptable 0000029C default case
		push	0
		push	esi
		push	edi
		push	1
		call	ebp
		add	esp, 10h
		test	eax, eax
		jz	$auxerr$49
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN29:					; CODE XREF: _asn1_item_ex_combine_new+20j
					; DATA XREF: .text$mn:$LN47o
		mov	edi, [esp+10h+arg_0] ; jumptable 0000029C cases	1,6
		test	ebp, ebp
		jz	short loc_3A6
		push	0
		push	esi
		push	edi
		push	0
		call	ebp
		add	esp, 10h
		test	eax, eax
		jz	$auxerr$49
		cmp	eax, 2
		jz	loc_2C0		; jumptable 0000029C default case

loc_3A6:				; CODE XREF: _asn1_item_ex_combine_new+10Cj
		cmp	[esp+10h+arg_8], 0
		jnz	short loc_3EA
		push	0B3h ; '³'
		push	offset ??_C@_0BJ@NBOPBEKM@?4?2crypto?2asn1?2tasn_new?4c?$AA@ ; ".\\crypto\\asn1\\tasn_new.c"
		push	dword ptr [esi+14h]
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[edi], eax
		test	eax, eax
		jz	$memerr$48
		push	dword ptr [esi+14h] ; Size
		push	0		; Val
		push	eax		; Dst
		call	_memset
		push	esi
		push	0
		push	edi
		call	_asn1_do_lock
		push	esi
		push	edi
		call	_asn1_enc_init
		add	esp, 20h

loc_3EA:				; CODE XREF: _asn1_item_ex_combine_new+12Fj
		cmp	dword ptr [esi+0Ch], 0
		mov	ebx, [esi+8]
		mov	[esp+10h+arg_4], 0
		jle	short loc_422
		nop

loc_3FC:				; CODE XREF: _asn1_item_ex_combine_new+1A4j
		push	ebx
		push	edi
		call	_asn1_get_field_ptr
		push	ebx
		push	eax
		call	_ASN1_template_new
		add	esp, 10h
		test	eax, eax
		jz	short $memerr$48
		mov	eax, [esp+10h+arg_4]
		add	ebx, 14h
		inc	eax
		mov	[esp+10h+arg_4], eax
		cmp	eax, [esi+0Ch]
		jl	short loc_3FC

loc_422:				; CODE XREF: _asn1_item_ex_combine_new+17Dj
		test	ebp, ebp
		jz	loc_2C0		; jumptable 0000029C default case
		push	0
		push	esi
		push	edi
		push	1
		call	ebp
		add	esp, 10h
		test	eax, eax
		jnz	loc_2C0		; jumptable 0000029C default case

$auxerr$49:				; CODE XREF: _asn1_item_ex_combine_new+96j
					; _asn1_item_ex_combine_new+F6j ...
		push	0D2h ; 'Ò'
		push	offset ??_C@_0BJ@NBOPBEKM@?4?2crypto?2asn1?2tasn_new?4c?$AA@ ; ".\\crypto\\asn1\\tasn_new.c"
		push	64h ; 'd'
		push	79h ; 'y'
		push	0Dh
		call	_ERR_put_error
		push	esi
		push	edi
		call	_ASN1_item_ex_free
		add	esp, 1Ch
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$memerr$48:				; CODE XREF: _asn1_item_ex_combine_new+3Ej
					; _asn1_item_ex_combine_new+C1j ...
		push	0CAh ; 'Ê'
		push	offset ??_C@_0BJ@NBOPBEKM@?4?2crypto?2asn1?2tasn_new?4c?$AA@ ; ".\\crypto\\asn1\\tasn_new.c"
		push	41h ; 'A'
		push	79h ; 'y'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_asn1_item_ex_combine_new endp

; ---------------------------------------------------------------------------
		align 4
$LN47		dd offset $LN15		; DATA XREF: _asn1_item_ex_combine_new+20r
		dd offset $LN29		; jump table for switch	statement
		dd offset $LN22
		dd offset $LN12_0
		dd offset $LN9_0
		dd offset $LN16
		dd offset $LN29
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_primitive_clear proc near		; CODE XREF: _asn1_item_clear+38j
					; _asn1_item_clear+55j

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jz	short loc_4D1
		mov	eax, [ecx+10h]
		test	eax, eax
		jz	short loc_4BC
		mov	eax, [eax+10h]
		test	eax, eax
		jz	short loc_4D1
		mov	[esp+arg_4], ecx
		jmp	eax
; ---------------------------------------------------------------------------

loc_4BC:				; CODE XREF: _asn1_primitive_clear+Dj
		cmp	byte ptr [ecx],	5
		jz	short loc_4D1
		cmp	dword ptr [ecx+4], 1
		jnz	short loc_4D1
		mov	eax, [esp+arg_0]
		mov	ecx, [ecx+14h]
		mov	[eax], ecx
		retn
; ---------------------------------------------------------------------------

loc_4D1:				; CODE XREF: _asn1_primitive_clear+6j
					; _asn1_primitive_clear+14j ...
		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], 0
		retn
_asn1_primitive_clear endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_template_clear proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		test	dword ptr [eax], 306h
		jz	short loc_4F3
		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], 0
		retn
; ---------------------------------------------------------------------------

loc_4F3:				; CODE XREF: _asn1_template_clear+Aj
		mov	eax, [eax+10h]
		call	eax
		mov	[esp+arg_4], eax
		jmp	_asn1_item_clear
_asn1_template_clear endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 504h
; COMDAT (pick any)
		public ??_C@_0BJ@NBOPBEKM@?4?2crypto?2asn1?2tasn_new?4c?$AA@
; `string'
??_C@_0BJ@NBOPBEKM@?4?2crypto?2asn1?2tasn_new?4c?$AA@ db '.\crypto\asn1\tasn_new.c',0
					; DATA XREF: _ASN1_primitive_new+87o
					; _ASN1_template_new+71o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _sk_new_null:near	; CODE XREF: _ASN1_template_new+61p
		extrn _CRYPTO_malloc:near ; CODE XREF: _ASN1_primitive_new+8Ep
					; _asn1_item_ex_combine_new+B5p ...
		extrn _ASN1_STRING_type_new:near ; CODE	XREF: _ASN1_primitive_new+BBp
		extrn _OBJ_nid2obj:near	; CODE XREF: _ASN1_primitive_new+4Cp
		extrn _ERR_put_error:near ; CODE XREF: _ASN1_template_new+7Fp
					; _asn1_item_ex_combine_new+1D1p ...
		extrn _ASN1_item_ex_free:near ;	CODE XREF: _asn1_item_ex_combine_new+1D8p
		extrn _asn1_set_choice_selector:near
					; CODE XREF: _asn1_item_ex_combine_new+D9p
		extrn _asn1_get_field_ptr:near ; CODE XREF: _asn1_item_ex_combine_new+182p
		extrn _asn1_do_lock:near ; CODE	XREF: _asn1_item_ex_combine_new+15Fp
		extrn _asn1_enc_init:near ; CODE XREF: _asn1_item_ex_combine_new+166p
		extrn __chkstk:near	; CODE XREF: _ASN1_item_new+5p
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _asn1_item_ex_combine_new+CDp
					; _asn1_item_ex_combine_new+156p


		end
