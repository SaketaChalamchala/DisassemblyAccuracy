;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	B7112802A92A4269C90DABD91CD90C50
; Input	CRC32 :	9BCCE09B

; File Name   :	C:\compspace\Diff\openssl\obj\bn_sqr.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_sqr
_BN_sqr		proc near

var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= byte ptr -84h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 90h ; 'ê'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+90h+var_4], eax
		push	ebx
		mov	ebx, [esp+94h+arg_0]
		push	ebp
		mov	ebp, [esp+98h+arg_4]
		push	esi
		mov	esi, [esp+9Ch+arg_8]
		push	edi
		mov	edi, [ebp+4]
		mov	[esp+0A0h+var_88], ebx
		mov	[esp+0A0h+var_90], esi
		mov	[esp+0A0h+var_8C], 0
		test	edi, edi
		jg	short loc_60
		mov	dword ptr [ebx+4], 0
		mov	eax, 1
		mov	dword ptr [ebx+0Ch], 0
		jmp	loc_1A9
; ---------------------------------------------------------------------------

loc_60:					; CODE XREF: _BN_sqr+46j
		push	esi
		call	_BN_CTX_start
		add	esp, 4
		cmp	ebp, ebx
		jz	short loc_71
		mov	esi, ebx
		jmp	short loc_7C
; ---------------------------------------------------------------------------

loc_71:					; CODE XREF: _BN_sqr+6Bj
		push	esi
		call	_BN_CTX_get
		add	esp, 4
		mov	esi, eax

loc_7C:					; CODE XREF: _BN_sqr+6Fj
		push	[esp+0A0h+var_90]
		call	_BN_CTX_get
		add	esp, 4
		mov	ebx, eax
		test	esi, esi
		jz	$err$32
		test	ebx, ebx
		jz	$err$32
		lea	eax, [edi+edi]
		cmp	eax, [esi+8]
		jg	short loc_A6
		mov	eax, esi
		jmp	short loc_B0
; ---------------------------------------------------------------------------

loc_A6:					; CODE XREF: _BN_sqr+A0j
		push	eax
		push	esi
		call	_bn_expand2
		add	esp, 8

loc_B0:					; CODE XREF: _BN_sqr+A4j
		test	eax, eax
		jz	$err$32
		cmp	edi, 4
		jnz	short loc_CF
		push	dword ptr [ebp+0]
		push	dword ptr [esi]
		call	_bn_sqr_comba4
		add	esp, 8
		jmp	loc_15B
; ---------------------------------------------------------------------------

loc_CF:					; CODE XREF: _BN_sqr+BBj
		cmp	edi, 8
		jnz	short loc_E3
		push	dword ptr [ebp+0]
		push	dword ptr [esi]
		call	_bn_sqr_comba8
		add	esp, 8
		jmp	short loc_15B
; ---------------------------------------------------------------------------

loc_E3:					; CODE XREF: _BN_sqr+D2j
		cmp	edi, 10h
		jge	short loc_EF
		lea	eax, [esp+0A0h+var_84]
		push	eax
		jmp	short loc_14D
; ---------------------------------------------------------------------------

loc_EF:					; CODE XREF: _BN_sqr+E6j
		push	edi
		call	_BN_num_bits_word
		mov	edx, 1
		add	esp, 4
		lea	ecx, [eax-1]
		shl	edx, cl
		lea	eax, [edx+edx]
		cmp	edi, edx
		jnz	short loc_131
		add	eax, eax
		cmp	eax, [ebx+8]
		jg	short loc_114
		mov	eax, ebx
		jmp	short loc_11E
; ---------------------------------------------------------------------------

loc_114:				; CODE XREF: _BN_sqr+10Ej
		push	eax
		push	ebx
		call	_bn_expand2
		add	esp, 8

loc_11E:				; CODE XREF: _BN_sqr+112j
		test	eax, eax
		jz	short $err$32
		push	dword ptr [ebx]
		push	edi
		push	dword ptr [ebp+0]
		push	dword ptr [esi]
		call	_bn_sqr_recursive
		jmp	short loc_158
; ---------------------------------------------------------------------------

loc_131:				; CODE XREF: _BN_sqr+107j
		lea	eax, [edi+edi]
		cmp	eax, [ebx+8]
		jg	short loc_13D
		mov	eax, ebx
		jmp	short loc_147
; ---------------------------------------------------------------------------

loc_13D:				; CODE XREF: _BN_sqr+137j
		push	eax
		push	ebx
		call	_bn_expand2
		add	esp, 8

loc_147:				; CODE XREF: _BN_sqr+13Bj
		test	eax, eax
		jz	short $err$32
		push	dword ptr [ebx]

loc_14D:				; CODE XREF: _BN_sqr+EDj
		push	edi
		push	dword ptr [ebp+0]
		push	dword ptr [esi]
		call	_bn_sqr_normal

loc_158:				; CODE XREF: _BN_sqr+12Fj
		add	esp, 10h

loc_15B:				; CODE XREF: _BN_sqr+CAj _BN_sqr+E1j
		mov	dword ptr [esi+0Ch], 0
		mov	eax, [ebp+0]
		mov	ecx, [eax+edi*4-4]
		movzx	eax, cx
		cmp	ecx, eax
		jnz	short loc_179
		lea	eax, ds:0FFFFFFFFh[edi*2]
		jmp	short loc_17C
; ---------------------------------------------------------------------------

loc_179:				; CODE XREF: _BN_sqr+16Ej
		lea	eax, [edi+edi]

loc_17C:				; CODE XREF: _BN_sqr+177j
		mov	[esi+4], eax
		mov	eax, [esp+0A0h+var_88]
		cmp	esi, eax
		jz	short loc_191
		push	esi
		push	eax
		call	_BN_copy
		add	esp, 8

loc_191:				; CODE XREF: _BN_sqr+185j
		mov	[esp+0A0h+var_8C], 1

$err$32:				; CODE XREF: _BN_sqr+8Cj _BN_sqr+94j ...
		push	[esp+0A0h+var_90]
		call	_BN_CTX_end
		mov	eax, [esp+0A4h+var_8C]
		add	esp, 4

loc_1A9:				; CODE XREF: _BN_sqr+5Bj
		mov	ecx, [esp+0A0h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 90h
		retn
_BN_sqr		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _bn_sqr_normal
_bn_sqr_normal	proc near		; CODE XREF: _BN_sqr+153p
					; _bn_sqr_recursive+5Dp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 4
		call	__chkstk
		mov	eax, [esp+4+arg_8]
		mov	edx, [esp+4+arg_4]
		push	ebx
		push	ebp
		mov	ebp, [esp+0Ch+arg_0]
		lea	ecx, [eax+eax]
		push	esi
		lea	esi, [eax-1]
		mov	[esp+10h+var_4], ecx
		mov	ebx, edx
		mov	dword ptr [ebp+ecx*4-4], 0
		mov	dword ptr [ebp+0], 0
		push	edi
		lea	edi, [ebp+4]
		test	esi, esi
		jle	short loc_21A
		push	dword ptr [edx]
		lea	ebx, [edx+4]
		push	esi
		push	ebx
		push	edi
		call	_bn_mul_words
		mov	[edi+esi*4], eax
		add	esp, 10h
		mov	eax, [esp+14h+arg_8]
		add	edi, 8

loc_21A:				; CODE XREF: _bn_sqr_normal+3Aj
		add	eax, 0FFFFFFFEh
		test	eax, eax
		jle	short loc_244
		lea	ebp, [esi-1]

loc_224:				; CODE XREF: _bn_sqr_normal+7Aj
		push	dword ptr [ebx]
		add	ebx, 4
		dec	esi
		push	esi
		push	ebx
		push	edi
		dec	ebp
		call	_bn_mul_add_words
		mov	[edi+esi*4], eax
		add	esp, 10h
		add	edi, 8
		test	ebp, ebp
		jg	short loc_224
		mov	ebp, [esp+14h+arg_0]

loc_244:				; CODE XREF: _bn_sqr_normal+5Bj
		mov	edi, [esp+14h+var_4]
		push	edi
		push	ebp
		push	ebp
		push	ebp
		call	_bn_add_words
		push	[esp+24h+arg_8]
		mov	esi, [esp+28h+arg_C]
		push	[esp+28h+arg_4]
		push	esi
		call	_bn_sqr_words
		push	edi
		push	esi
		push	ebp
		push	ebp
		call	_bn_add_words
		add	esp, 2Ch
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
_bn_sqr_normal	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 278h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _bn_sqr_recursive
_bn_sqr_recursive proc near		; CODE XREF: _BN_sqr+12Ap
					; _bn_sqr_recursive+D4p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	edi
		mov	edi, [esp+0Ch+arg_8]
		mov	eax, edi
		cdq
		sub	eax, edx
		mov	ebx, eax
		sar	ebx, 1
		cmp	edi, 4
		jnz	short loc_2AA
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	_bn_sqr_comba4
		add	esp, 8
		pop	edi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_2AA:				; CODE XREF: _bn_sqr_recursive+1Cj
		cmp	edi, 8
		jnz	short loc_2C3
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	_bn_sqr_comba8
		add	esp, 8
		pop	edi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_2C3:				; CODE XREF: _bn_sqr_recursive+35j
		cmp	edi, 10h
		jge	short loc_2E1
		push	[esp+0Ch+arg_C]
		push	edi
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		call	_bn_sqr_normal
		add	esp, 10h
		pop	edi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_2E1:				; CODE XREF: _bn_sqr_recursive+4Ej
		push	ebp
		push	esi
		mov	esi, [esp+14h+arg_4]
		push	ebx
		lea	eax, [esi+ebx*4]
		push	eax
		push	esi
		mov	[esp+20h+arg_8], eax
		call	_bn_cmp_words
		mov	ebp, [esp+20h+arg_C]
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_314
		push	ebx
		push	[esp+18h+arg_8]
		push	esi
		push	ebp
		call	_bn_sub_words
		add	esp, 10h
		xor	eax, eax
		jmp	short loc_32E
; ---------------------------------------------------------------------------

loc_314:				; CODE XREF: _bn_sqr_recursive+87j
		jns	short loc_329
		push	ebx
		push	esi
		push	[esp+1Ch+arg_8]
		push	ebp
		call	_bn_sub_words
		add	esp, 10h
		xor	eax, eax
		jmp	short loc_32E
; ---------------------------------------------------------------------------

loc_329:				; CODE XREF: _bn_sqr_recursive:loc_314j
		mov	eax, 1

loc_32E:				; CODE XREF: _bn_sqr_recursive+9Aj
					; _bn_sqr_recursive+AFj
		lea	ecx, ds:0[edi*8]
		add	ecx, ebp
		test	eax, eax
		lea	eax, ds:0[edi*4]
		jnz	short loc_356
		push	ecx
		push	ebx
		add	eax, ebp
		push	ebp
		push	eax
		mov	[esp+24h+var_4], eax
		call	_bn_sqr_recursive
		add	esp, 10h
		jmp	short loc_369
; ---------------------------------------------------------------------------

loc_356:				; CODE XREF: _bn_sqr_recursive+C8j
		push	eax		; Size
		lea	ecx, [eax+ebp]
		push	0		; Val
		push	ecx		; Dst
		mov	[esp+20h+var_4], ecx
		call	_memset
		add	esp, 0Ch

loc_369:				; CODE XREF: _bn_sqr_recursive+DCj
		lea	eax, ds:0[edi*8]
		add	eax, ebp
		push	eax
		push	ebx
		push	esi
		mov	esi, [esp+20h+arg_0]
		push	esi
		call	_bn_sqr_recursive
		lea	eax, ds:0[edi*8]
		add	eax, ebp
		lea	esi, [esi+edi*4]
		push	eax
		push	ebx
		push	[esp+2Ch+arg_8]
		push	esi
		call	_bn_sqr_recursive
		mov	ecx, [esp+34h+arg_0]
		push	edi
		push	esi
		push	ecx
		push	ebp
		call	_bn_add_words
		mov	esi, [esp+44h+var_4]
		push	edi
		push	esi
		push	ebp
		push	esi
		mov	[esp+54h+arg_8], eax
		call	_bn_sub_words
		mov	ebp, [esp+54h+arg_8]
		add	esp, 40h
		sub	ebp, eax
		mov	eax, [esp+14h+arg_0]
		push	edi
		lea	ecx, [eax+ebx*4]
		push	esi
		push	ecx
		push	ecx
		call	_bn_add_words
		add	esp, 10h
		add	ebp, eax
		jz	short loc_3F2
		mov	ecx, [esp+14h+arg_0]
		lea	eax, [ebx+edi]
		lea	ecx, [ecx+eax*4]
		mov	eax, [ecx]
		add	eax, ebp
		mov	[ecx], eax
		cmp	eax, ebp
		jnb	short loc_3F2

loc_3E9:				; CODE XREF: _bn_sqr_recursive+178j
		add	dword ptr [ecx+4], 1
		lea	ecx, [ecx+4]
		jz	short loc_3E9

loc_3F2:				; CODE XREF: _bn_sqr_recursive+15Bj
					; _bn_sqr_recursive+16Fj
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		pop	ecx
		retn
_bn_sqr_recursive endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BN_CTX_start:near ; CODE	XREF: _BN_sqr+61p
		extrn _BN_CTX_get:near	; CODE XREF: _BN_sqr+72p _BN_sqr+80p
		extrn _BN_CTX_end:near	; CODE XREF: _BN_sqr+19Dp
		extrn _BN_num_bits_word:near ; CODE XREF: _BN_sqr+F0p
		extrn _BN_copy:near	; CODE XREF: _BN_sqr+189p
		extrn _bn_expand2:near	; CODE XREF: _BN_sqr+A8p _BN_sqr+116p	...
		extrn _bn_mul_add_words:near ; CODE XREF: _bn_sqr_normal+6Ap
		extrn _bn_mul_words:near ; CODE	XREF: _bn_sqr_normal+44p
		extrn _bn_sqr_words:near ; CODE	XREF: _bn_sqr_normal+9Ap
		extrn _bn_add_words:near ; CODE	XREF: _bn_sqr_normal+88p
					; _bn_sqr_normal+A3p ...
		extrn _bn_sub_words:near ; CODE	XREF: _bn_sqr_recursive+90p
					; _bn_sqr_recursive+A5p ...
		extrn _bn_sqr_comba8:near ; CODE XREF: _BN_sqr+D9p
					; _bn_sqr_recursive+3Fp
		extrn _bn_sqr_comba4:near ; CODE XREF: _BN_sqr+C2p
					; _bn_sqr_recursive+26p
		extrn _bn_cmp_words:near ; CODE	XREF: _bn_sqr_recursive+79p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _BN_sqr+1B6p
		extrn __chkstk:near	; CODE XREF: _BN_sqr+5p
					; _bn_sqr_normal+5p ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _bn_sqr_recursive+E9p
		extrn ___security_cookie:near ;	DATA XREF: _BN_sqr+Ar


		end
