;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	9378AB6B9420CAD17087CFB0B0E0CEC7
; Input	CRC32 :	EF366EF2

; File Name   :	C:\compspace\Diff\openssl\obj\eng_table.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
_table_flags	dd ?			; DATA XREF: _ENGINE_get_table_flagsr
					; _ENGINE_set_table_flags+4w ...
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_get_table_flags
_ENGINE_get_table_flags	proc near
		mov	eax, ds:_table_flags
		retn
_ENGINE_get_table_flags	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_set_table_flags
_ENGINE_set_table_flags	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	ds:_table_flags, eax
		retn
_ENGINE_set_table_flags	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 18h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_engine_pile_LHASH_COMP	proc near	; DATA XREF: _engine_table_register+32o
					; _int_table_check:loc_47Do

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	eax, [eax]
		sub	eax, [ecx]
		retn
_engine_pile_LHASH_COMP	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 28h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_engine_pile_LHASH_HASH	proc near	; DATA XREF: _engine_table_register+37o
					; _int_table_check+1Ao

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		retn
_engine_pile_LHASH_HASH	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 30h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_engine_pile_cmp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	eax, [eax]
		sub	eax, [ecx]
		retn
_engine_pile_cmp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 40h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_engine_pile_hash proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		retn
_engine_pile_hash endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 48h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _engine_table_cleanup
_engine_table_cleanup proc near

arg_0		= dword	ptr  4

		push	esi
		push	0E5h ; 'å'
		push	offset ??_C@_0BM@GAEJEOPM@?4?2crypto?2engine?2eng_table?4c?$AA@	; ".\\crypto\\engine\\eng_table.c"
		push	1Eh
		push	9
		call	_CRYPTO_lock
		mov	esi, [esp+14h+arg_0]
		add	esp, 10h
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_84
		push	offset _int_cleanup_cb_LHASH_DOALL
		push	eax
		call	_lh_doall
		push	dword ptr [esi]
		call	_lh_free
		add	esp, 0Ch
		mov	dword ptr [esi], 0

loc_84:					; CODE XREF: _engine_table_cleanup+1Fj
		push	0ECh ; 'ì'
		push	offset ??_C@_0BM@GAEJEOPM@?4?2crypto?2engine?2eng_table?4c?$AA@	; ".\\crypto\\engine\\eng_table.c"
		push	1Eh
		push	0Ah
		call	_CRYPTO_lock
		add	esp, 10h
		pop	esi
		retn
_engine_table_cleanup endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _engine_table_doall
_engine_table_doall proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 8
		call	__chkstk
		mov	eax, [esp+8+arg_4]
		mov	[esp+8+var_8], eax
		mov	eax, [esp+8+arg_8]
		mov	[esp+8+var_4], eax
		mov	eax, [esp+8+arg_0]
		test	eax, eax
		jz	short loc_CF
		lea	ecx, [esp+8+var_8]
		push	ecx
		push	offset _int_cb_LHASH_DOALL_ARG
		push	eax
		call	_lh_doall_arg
		add	esp, 0Ch

loc_CF:					; CODE XREF: _engine_table_doall+1Fj
		add	esp, 8
		retn
_engine_table_doall endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _engine_table_register
_engine_table_register proc near

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 14h
		call	__chkstk
		push	esi
		push	8Ah ; 'Š'
		push	offset ??_C@_0BM@GAEJEOPM@?4?2crypto?2engine?2eng_table?4c?$AA@	; ".\\crypto\\engine\\eng_table.c"
		push	1Eh
		push	9
		mov	[esp+28h+var_14], 0
		call	_CRYPTO_lock
		mov	esi, [esp+28h+arg_0]
		add	esp, 10h
		cmp	dword ptr [esi], 0
		jnz	short loc_12E
		push	offset _engine_pile_LHASH_COMP
		push	offset _engine_pile_LHASH_HASH
		call	_lh_new
		add	esp, 8
		test	eax, eax
		jz	$end$37
		push	[esp+18h+arg_4]
		mov	[esi], eax
		call	_engine_cleanup_add_first
		add	esp, 4

loc_12E:				; CODE XREF: _engine_table_register+30j
		push	ebx
		push	ebp
		mov	ebp, [esp+20h+arg_10]
		push	edi
		test	ebp, ebp
		jz	loc_233
		mov	ebx, [esp+24h+arg_8]
		mov	edi, [esp+24h+arg_C]

loc_145:				; CODE XREF: _engine_table_register+133j
		mov	eax, [edi]
		dec	ebp
		mov	[esp+24h+var_10], eax
		lea	eax, [esp+24h+var_10]
		push	eax
		push	dword ptr [esi]
		call	_lh_retrieve
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_1AC
		push	96h ; '–'
		push	offset ??_C@_0BM@GAEJEOPM@?4?2crypto?2engine?2eng_table?4c?$AA@	; ".\\crypto\\engine\\eng_table.c"
		push	10h
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	loc_23B
		mov	dword ptr [esi+0Ch], 1
		mov	eax, [edi]
		mov	[esi], eax
		call	_sk_new_null
		mov	[esi+4], eax
		push	esi
		test	eax, eax
		jz	short loc_20C
		mov	eax, [esp+28h+arg_0]
		mov	dword ptr [esi+8], 0
		push	dword ptr [eax]
		call	_lh_insert
		add	esp, 8

loc_1AC:				; CODE XREF: _engine_table_register+8Bj
		push	ebx
		push	dword ptr [esi+4]
		call	_sk_delete_ptr
		push	ebx
		push	dword ptr [esi+4]
		call	_sk_push
		add	esp, 10h
		test	eax, eax
		jz	short loc_23B
		cmp	[esp+24h+arg_14], 0
		mov	dword ptr [esi+0Ch], 0
		jz	short loc_1FC
		push	ebx
		call	_engine_unlocked_init
		add	esp, 4
		test	eax, eax
		jz	short loc_216
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_1F2
		push	0
		push	eax
		call	_engine_unlocked_finish
		add	esp, 8

loc_1F2:				; CODE XREF: _engine_table_register+111j
		mov	[esi+8], ebx
		mov	dword ptr [esi+0Ch], 1

loc_1FC:				; CODE XREF: _engine_table_register+FDj
		add	edi, 4
		test	ebp, ebp
		jz	short loc_233
		mov	esi, [esp+24h+arg_0]
		jmp	loc_145
; ---------------------------------------------------------------------------

loc_20C:				; CODE XREF: _engine_table_register+C1j
		call	_CRYPTO_free
		add	esp, 4
		jmp	short loc_23B
; ---------------------------------------------------------------------------

loc_216:				; CODE XREF: _engine_table_register+10Aj
		push	0AFh ; '¯'
		push	offset ??_C@_0BM@GAEJEOPM@?4?2crypto?2engine?2eng_table?4c?$AA@	; ".\\crypto\\engine\\eng_table.c"
		push	6Dh ; 'm'
		push	0B8h ; '¸'
		push	26h ; '&'
		call	_ERR_put_error
		add	esp, 14h
		jmp	short loc_23B
; ---------------------------------------------------------------------------

loc_233:				; CODE XREF: _engine_table_register+63j
					; _engine_table_register+12Dj
		mov	[esp+24h+var_14], 1

loc_23B:				; CODE XREF: _engine_table_register+A5j
					; _engine_table_register+EFj ...
		pop	edi
		pop	ebp
		pop	ebx

$end$37:				; CODE XREF: _engine_table_register+46j
		push	0BBh ; '»'
		push	offset ??_C@_0BM@GAEJEOPM@?4?2crypto?2engine?2eng_table?4c?$AA@	; ".\\crypto\\engine\\eng_table.c"
		push	1Eh
		push	0Ah
		call	_CRYPTO_lock
		mov	eax, [esp+28h+var_14]
		add	esp, 10h
		pop	esi
		add	esp, 14h
		retn
_engine_table_register endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 260h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _engine_table_select
_engine_table_select proc near

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 10h
		call	__chkstk
		push	esi
		push	edi
		mov	edi, [esp+18h+arg_0]
		xor	esi, esi
		cmp	[edi], esi
		jnz	short loc_27E
		pop	edi
		xor	eax, eax
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_27E:				; CODE XREF: _engine_table_select+14j
		call	_ERR_set_mark
		push	103h
		push	offset ??_C@_0BM@GAEJEOPM@?4?2crypto?2engine?2eng_table?4c?$AA@	; ".\\crypto\\engine\\eng_table.c"
		push	1Eh
		push	9
		call	_CRYPTO_lock
		mov	ecx, [edi]
		add	esp, 10h
		test	ecx, ecx
		jz	loc_360
		mov	eax, [esp+18h+arg_4]
		mov	[esp+18h+var_10], eax
		lea	eax, [esp+18h+var_10]
		push	eax
		push	ecx
		call	_lh_retrieve
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	loc_360
		mov	eax, [edi+8]
		test	eax, eax
		jz	short loc_2DC
		push	eax
		call	_engine_unlocked_init
		add	esp, 4
		test	eax, eax
		jz	short loc_2DC

loc_2D7:				; CODE XREF: _engine_table_select+7Fj
		mov	esi, [edi+8]
		jmp	short $end$32
; ---------------------------------------------------------------------------

loc_2DC:				; CODE XREF: _engine_table_select+68j
					; _engine_table_select+75j
		cmp	[edi+0Ch], esi
		jnz	short loc_2D7
		push	ebx
		push	0
		push	dword ptr [edi+4]
		call	_sk_value
		mov	esi, eax
		add	esp, 8
		mov	ebx, 1
		test	esi, esi
		jz	short loc_358
		nop	word ptr [eax+eax+00h]

$trynext$33:				; CODE XREF: _engine_table_select+CDj
		cmp	dword ptr [esi+5Ch], 0
		jg	short loc_30F
		test	byte ptr ds:_table_flags, 1
		jnz	short loc_31C

loc_30F:				; CODE XREF: _engine_table_select+A4j
		push	esi
		call	_engine_unlocked_init
		add	esp, 4
		test	eax, eax
		jnz	short loc_331

loc_31C:				; CODE XREF: _engine_table_select+ADj
		push	ebx
		push	dword ptr [edi+4]
		call	_sk_value
		mov	esi, eax
		add	esp, 8
		inc	ebx
		test	esi, esi
		jnz	short $trynext$33
		jmp	short loc_358
; ---------------------------------------------------------------------------

loc_331:				; CODE XREF: _engine_table_select+BAj
		cmp	[edi+8], esi
		jz	short loc_358
		push	esi
		call	_engine_unlocked_init
		add	esp, 4
		test	eax, eax
		jz	short loc_358
		mov	eax, [edi+8]
		test	eax, eax
		jz	short loc_355
		push	0
		push	eax
		call	_engine_unlocked_finish
		add	esp, 8

loc_355:				; CODE XREF: _engine_table_select+E8j
		mov	[edi+8], esi

loc_358:				; CODE XREF: _engine_table_select+98j
					; _engine_table_select+CFj ...
		pop	ebx

$end$32:				; CODE XREF: _engine_table_select+7Aj
		mov	dword ptr [edi+0Ch], 1

loc_360:				; CODE XREF: _engine_table_select+3Dj
					; _engine_table_select+5Dj
		push	14Ah
		push	offset ??_C@_0BM@GAEJEOPM@?4?2crypto?2engine?2eng_table?4c?$AA@	; ".\\crypto\\engine\\eng_table.c"
		push	1Eh
		push	0Ah
		call	_CRYPTO_lock
		add	esp, 10h
		call	_ERR_pop_to_mark
		pop	edi
		mov	eax, esi
		pop	esi
		add	esp, 10h
		retn
_engine_table_select endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 384h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _engine_table_unregister
_engine_table_unregister proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0D1h ; 'Ñ'
		push	offset ??_C@_0BM@GAEJEOPM@?4?2crypto?2engine?2eng_table?4c?$AA@	; ".\\crypto\\engine\\eng_table.c"
		push	1Eh
		push	9
		call	_CRYPTO_lock
		mov	eax, [esp+10h+arg_0]
		add	esp, 10h
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_3B6
		push	[esp+arg_4]
		push	offset _int_unregister_cb_LHASH_DOALL_ARG
		push	eax
		call	_lh_doall_arg
		add	esp, 0Ch

loc_3B6:				; CODE XREF: _engine_table_unregister+1Ej
		push	0D6h ; 'Ö'
		push	offset ??_C@_0BM@GAEJEOPM@?4?2crypto?2engine?2eng_table?4c?$AA@	; ".\\crypto\\engine\\eng_table.c"
		push	1Eh
		push	0Ah
		call	_CRYPTO_lock
		add	esp, 10h
		retn
_engine_table_unregister endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_cb_LHASH_DOALL_ARG	proc near	; DATA XREF: _engine_table_doall+25o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		push	dword ptr [ecx+4]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		mov	eax, [ecx]
		call	eax
		add	esp, 10h
		retn
_int_cb_LHASH_DOALL_ARG	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_cb_doall_arg proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		push	dword ptr [ecx+4]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		mov	eax, [ecx]
		call	eax
		add	esp, 10h
		retn
_int_cb_doall_arg endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 408h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_cleanup_cb_LHASH_DOALL proc near	; DATA XREF: _engine_table_cleanup+21o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	dword ptr [esi+4]
		call	_sk_free
		mov	eax, [esi+8]
		add	esp, 4
		test	eax, eax
		jz	short loc_42A
		push	0
		push	eax
		call	_engine_unlocked_finish
		add	esp, 8

loc_42A:				; CODE XREF: _int_cleanup_cb_LHASH_DOALL+15j
		push	esi
		call	_CRYPTO_free
		add	esp, 4
		pop	esi
		retn
_int_cleanup_cb_LHASH_DOALL endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 438h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_cleanup_cb_doall proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	dword ptr [esi+4]
		call	_sk_free
		mov	eax, [esi+8]
		add	esp, 4
		test	eax, eax
		jz	short loc_45A
		push	0
		push	eax
		call	_engine_unlocked_finish
		add	esp, 8

loc_45A:				; CODE XREF: _int_cleanup_cb_doall+15j
		push	esi
		call	_CRYPTO_free
		add	esp, 4
		pop	esi
		retn
_int_cleanup_cb_doall endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 468h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_table_check proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi], 0
		jnz	short loc_495
		cmp	[esp+4+arg_4], 0
		jnz	short loc_47D

loc_479:				; CODE XREF: _int_table_check+29j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_47D:				; CODE XREF: _int_table_check+Fj
		push	offset _engine_pile_LHASH_COMP
		push	offset _engine_pile_LHASH_HASH
		call	_lh_new
		add	esp, 8
		test	eax, eax
		jz	short loc_479
		mov	[esi], eax

loc_495:				; CODE XREF: _int_table_check+8j
		mov	eax, 1
		pop	esi
		retn
_int_table_check endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 49Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_unregister_cb_LHASH_DOALL_ARG proc	near ; DATA XREF: _engine_table_unregister+24o
		jmp	_int_unregister_cb_doall_arg
_int_unregister_cb_LHASH_DOALL_ARG endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_unregister_cb_doall_arg proc near	; CODE XREF: _int_unregister_cb_LHASH_DOALL_ARGj

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esp+8+arg_4]
		push	edi
		push	dword ptr [esi+4]
		call	_sk_find
		add	esp, 8
		test	eax, eax
		js	short loc_4E4
		nop	word ptr [eax+eax+00h]

loc_4C4:				; CODE XREF: _int_unregister_cb_doall_arg+3Ej
		push	eax
		push	dword ptr [esi+4]
		call	_sk_delete
		mov	dword ptr [esi+0Ch], 0
		push	edi
		push	dword ptr [esi+4]
		call	_sk_find
		add	esp, 10h
		test	eax, eax
		jns	short loc_4C4

loc_4E4:				; CODE XREF: _int_unregister_cb_doall_arg+18j
		cmp	[esi+8], edi
		jnz	short loc_4FB
		push	0
		push	edi
		call	_engine_unlocked_finish
		add	esp, 8
		mov	dword ptr [esi+8], 0

loc_4FB:				; CODE XREF: _int_unregister_cb_doall_arg+43j
		pop	edi
		pop	esi
		retn
_int_unregister_cb_doall_arg endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 500h
; COMDAT (pick any)
		public ??_C@_0BM@GAEJEOPM@?4?2crypto?2engine?2eng_table?4c?$AA@
; `string'
??_C@_0BM@GAEJEOPM@?4?2crypto?2engine?2eng_table?4c?$AA@ db '.\crypto\engine\eng_table.c',0
					; DATA XREF: _engine_table_cleanup+6o
					; _engine_table_cleanup+41o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _sk_value:near	; CODE XREF: _engine_table_select+87p
					; _engine_table_select+C0p
		extrn _sk_new_null:near	; CODE XREF: _engine_table_register+B6p
		extrn _sk_free:near	; CODE XREF: _int_cleanup_cb_LHASH_DOALL+8p
					; _int_cleanup_cb_doall+8p
		extrn _sk_delete:near	; CODE XREF: _int_unregister_cb_doall_arg+24p
		extrn _sk_delete_ptr:near ; CODE XREF: _engine_table_register+DCp
		extrn _sk_find:near	; CODE XREF: _int_unregister_cb_doall_arg+Ep
					; _int_unregister_cb_doall_arg+34p
		extrn _sk_push:near	; CODE XREF: _engine_table_register+E5p
		extrn _CRYPTO_lock:near	; CODE XREF: _engine_table_cleanup+Fp
					; _engine_table_cleanup+4Ap ...
		extrn _CRYPTO_malloc:near ; CODE XREF: _engine_table_register+99p
		extrn _CRYPTO_free:near	; CODE XREF: _engine_table_register:loc_20Cp
					; _int_cleanup_cb_LHASH_DOALL+23p ...
		extrn _lh_new:near	; CODE XREF: _engine_table_register+3Cp
					; _int_table_check+1Fp
		extrn _lh_free:near	; CODE XREF: _engine_table_cleanup+2Ep
		extrn _lh_insert:near	; CODE XREF: _engine_table_register+D0p
		extrn _lh_retrieve:near	; CODE XREF: _engine_table_register+7Fp
					; _engine_table_select+51p
		extrn _lh_doall:near	; CODE XREF: _engine_table_cleanup+27p
		extrn _lh_doall_arg:near ; CODE	XREF: _engine_table_doall+2Bp
					; _engine_table_unregister+2Ap
		extrn _ERR_put_error:near ; CODE XREF: _engine_table_register+155p
		extrn _ERR_set_mark:near ; CODE	XREF: _engine_table_select:loc_27Ep
		extrn _ERR_pop_to_mark:near ; CODE XREF: _engine_table_select+116p
		extrn _engine_cleanup_add_first:near ; CODE XREF: _engine_table_register+52p
		extrn _engine_unlocked_init:near ; CODE	XREF: _engine_table_register+100p
					; _engine_table_select+6Bp ...
		extrn _engine_unlocked_finish:near ; CODE XREF:	_engine_table_register+116p
					; _engine_table_select+EDp ...
		extrn __chkstk:near	; CODE XREF: _engine_table_doall+5p
					; _engine_table_register+5p ...


		end
