;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	208D343D83E4B726BEFAEA2C371F97CF
; Input	CRC32 :	5C18E29A

; File Name   :	C:\compspace\Diff\openssl\obj\x_x509.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_x509_cb	proc near		; DATA XREF: .rdata:0000010Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [eax]
		mov	eax, [esp+4+arg_0]
		sub	eax, 1
		jz	loc_AB
		sub	eax, 2
		jz	short loc_4D
		sub	eax, 2
		jnz	loc_F2
		mov	eax, [esi+14h]
		test	eax, eax

loc_27:					; DATA XREF: .rdata:00000180o
		jz	short loc_32
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_32:					; CODE XREF: _x509_cb:loc_27j
		mov	eax, [esi]

loc_34:					; DATA XREF: .rdata:00000260o
		push	0
		push	0
		push	dword ptr [eax+14h]
		call	_X509_NAME_oneline
		add	esp, 0Ch
		mov	[esi+14h], eax
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4D:					; CODE XREF: _x509_cb+17j
		lea	eax, [esi+18h]
		push	eax
		push	esi
		push	0Ah
		call	_CRYPTO_free_ex_data
		push	dword ptr [esi+64h]
		call	_X509_CERT_AUX_free
		push	dword ptr [esi+38h]

loc_64:					; DATA XREF: .rdata:00000164o
		call	_ASN1_OCTET_STRING_free
		push	dword ptr [esi+3Ch]
		call	_AUTHORITY_KEYID_free
		push	dword ptr [esi+44h]
		call	_CRL_DIST_POINTS_free
		push	dword ptr [esi+40h]
		call	_policy_cache_free
		push	dword ptr [esi+48h]
		call	_GENERAL_NAMES_free

loc_89:					; DATA XREF: .rdata:00000210o
					; .rdata:00000224o
		push	dword ptr [esi+4Ch]
		call	_NAME_CONSTRAINTS_free

loc_91:					; DATA XREF: .rdata:_X509_CINF_seq_tto
		mov	eax, [esi+14h]

loc_94:					; DATA XREF: .rdata:00000238o
		add	esp, 28h
		test	eax, eax
		jz	short loc_F2
		push	eax
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_AB:					; CODE XREF: _x509_cb+Ej
		lea	eax, [esi+18h]
		mov	dword ptr [esi+0Ch], 0
		push	eax
		push	esi
		push	0Ah
		mov	dword ptr [esi+14h], 0
		mov	dword ptr [esi+28h], 0
		mov	dword ptr [esi+20h], 0FFFFFFFFh
		mov	dword ptr [esi+38h], 0
		mov	dword ptr [esi+3Ch], 0
		mov	dword ptr [esi+64h], 0
		mov	dword ptr [esi+44h], 0
		call	_CRYPTO_new_ex_data
		add	esp, 0Ch

loc_F2:					; CODE XREF: _x509_cb+1Cj _x509_cb+99j
		mov	eax, 1
		pop	esi
		retn
_x509_cb	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 0FCh
_X509_aux	dd 0			; DATA XREF: .rdata:00000160o
		dd 1, 10h, 3
		dd offset _x509_cb
		dd 0
_X509_seq_tt	dd 3 dup(0)		; DATA XREF: .rdata:00000158o
		dd offset ??_C@_09NKDPGBBA@cert_info?$AA@ ; "cert_info"
		dd offset _X509_CINF_it
		align 10h
		dd 4
		dd offset ??_C@_07OBHFIHGJ@sig_alg?$AA@	; "sig_alg"
		dd offset _X509_ALGOR_it
		dd 2 dup(0)
		dd 8
		dd offset ??_C@_09CMIIOJHF@signature?$AA@ ; "signature"
		dd offset _ASN1_BIT_STRING_it
; `X509_it'::`2'::local_it
?local_it@?1??X509_it@@9@9 dd 1, 10h	; DATA XREF: _X509_dup+4o _X509_freeo	...
		dd offset _X509_seq_tt
		dd 3
		dd offset _X509_aux
		dd offset loc_64+4
		dd offset ??_C@_04NMKEOMFB@X509?$AA@ ; "X509"
_X509_CINF_aux	dd 0			; DATA XREF: .rdata:0000025Co
		dd 2, 3	dup(0)
		dd offset loc_27+1
_X509_CINF_seq_tt dd offset loc_91	; DATA XREF: .rdata:00000254o
		align 10h
		dd offset ??_C@_07CPCPJPKL@version?$AA@	; "version"
		dd offset _ASN1_INTEGER_it
		align 10h
		dd 4
		dd offset ??_C@_0N@OMOHFKCJ@serialNumber?$AA@ ;	"serialNumber"
		dd offset _ASN1_INTEGER_it
		dd 2 dup(0)
		dd 8
		dd offset ??_C@_09CMIIOJHF@signature?$AA@ ; "signature"
		dd offset _X509_ALGOR_it
		dd 2 dup(0)
		dd 0Ch
		dd offset ??_C@_06EAINIONG@issuer?$AA@ ; "issuer"
		dd offset _X509_NAME_it
		dd 2 dup(0)
		dd 10h
		dd offset ??_C@_08GCHKOCBP@validity?$AA@ ; "validity"
		dd offset _X509_VAL_it
		align 10h
		dd 14h
		dd offset ??_C@_07JNNGEGGO@subject?$AA@	; "subject"
		dd offset _X509_NAME_it
		dd 2 dup(0)
		dd 18h
		dd offset ??_C@_03ICHNJLJF@key?$AA@ ; "key"
		dd offset _X509_PUBKEY_it
		dd offset loc_89
		dd 1, 1Ch
		dd offset ??_C@_09KIIAMAEE@issuerUID?$AA@ ; "issuerUID"
		dd offset _ASN1_BIT_STRING_it
		dd offset loc_89
		dd 2, 20h
		dd offset ??_C@_0L@JMFHLKAL@subjectUID?$AA@ ; "subjectUID"
		dd offset _ASN1_BIT_STRING_it
		dd offset loc_94+1
		dd 3, 24h
		dd offset ??_C@_0L@ICCCPLKC@extensions?$AA@ ; "extensions"
		dd offset _X509_EXTENSION_it
; `X509_CINF_it'::`2'::local_it
?local_it@?1??X509_CINF_it@@9@9	dd 1, 10h ; DATA XREF: _X509_CINF_ito
					; _X509_CINF_freeo ...
		dd offset _X509_CINF_seq_tt
		dd 0Ah
		dd offset _X509_CINF_aux
		dd offset loc_34
		dd offset ??_C@_09LCJGKABB@X509_CINF?$AA@ ; "X509_CINF"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 268h
; COMDAT (pick any)
		public ??_C@_09NKDPGBBA@cert_info?$AA@
; `string'
??_C@_09NKDPGBBA@cert_info?$AA@	db 'cert_info',0 ; DATA XREF: .rdata:00000120o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 274h
; COMDAT (pick any)
		public ??_C@_07OBHFIHGJ@sig_alg?$AA@
; `string'
??_C@_07OBHFIHGJ@sig_alg?$AA@ db 'sig_alg',0 ; DATA XREF: .rdata:00000134o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 27Ch
; COMDAT (pick any)
		public ??_C@_04NMKEOMFB@X509?$AA@
; `string'
??_C@_04NMKEOMFB@X509?$AA@ db 'X509',0  ; DATA XREF: .rdata:00000168o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 284h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_CINF_it
_X509_CINF_it	proc near		; DATA XREF: .rdata:00000124o
		mov	eax, offset ?local_it@?1??X509_CINF_it@@9@9 ; `X509_CINF_it'::`2'::local_it
		retn
_X509_CINF_it	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 28Ch
; COMDAT (pick any)
		public ??_C@_07CPCPJPKL@version?$AA@
; `string'
??_C@_07CPCPJPKL@version?$AA@ db 'version',0 ; DATA XREF: .rdata:00000190o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 294h
; COMDAT (pick any)
		public ??_C@_0N@OMOHFKCJ@serialNumber?$AA@
; `string'
??_C@_0N@OMOHFKCJ@serialNumber?$AA@ db 'serialNumber',0 ; DATA XREF: .rdata:000001A4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2A4h
; COMDAT (pick any)
		public ??_C@_09CMIIOJHF@signature?$AA@
; `string'
??_C@_09CMIIOJHF@signature?$AA@	db 'signature',0 ; DATA XREF: .rdata:00000148o
					; .rdata:000001B8o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2B0h
; COMDAT (pick any)
		public ??_C@_06EAINIONG@issuer?$AA@
; `string'
??_C@_06EAINIONG@issuer?$AA@ db	'issuer',0 ; DATA XREF: .rdata:000001CCo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2B8h
; COMDAT (pick any)
		public ??_C@_08GCHKOCBP@validity?$AA@
; `string'
??_C@_08GCHKOCBP@validity?$AA@ db 'validity',0 ; DATA XREF: .rdata:000001E0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2C4h
; COMDAT (pick any)
		public ??_C@_07JNNGEGGO@subject?$AA@
; `string'
??_C@_07JNNGEGGO@subject?$AA@ db 'subject',0 ; DATA XREF: .rdata:000001F4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2CCh
; COMDAT (pick any)
		public ??_C@_03ICHNJLJF@key?$AA@
; `string'
??_C@_03ICHNJLJF@key?$AA@ db 'key',0    ; DATA XREF: .rdata:00000208o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2D0h
; COMDAT (pick any)
		public ??_C@_09KIIAMAEE@issuerUID?$AA@
; `string'
??_C@_09KIIAMAEE@issuerUID?$AA@	db 'issuerUID',0 ; DATA XREF: .rdata:0000021Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2DCh
; COMDAT (pick any)
		public ??_C@_0L@JMFHLKAL@subjectUID?$AA@
; `string'
??_C@_0L@JMFHLKAL@subjectUID?$AA@ db 'subjectUID',0 ; DATA XREF: .rdata:00000230o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2E8h
; COMDAT (pick any)
		public ??_C@_0L@ICCCPLKC@extensions?$AA@
; `string'
??_C@_0L@ICCCPLKC@extensions?$AA@ db 'extensions',0 ; DATA XREF: .rdata:00000244o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2F4h
; COMDAT (pick any)
		public ??_C@_09LCJGKABB@X509_CINF?$AA@
; `string'
??_C@_09LCJGKABB@X509_CINF?$AA@	db 'X509_CINF',0 ; DATA XREF: .rdata:00000264o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 300h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_CINF_free
_X509_CINF_free	proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??X509_CINF_it@@9@9 ; `X509_CINF_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_X509_CINF_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 314h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_CINF_new
_X509_CINF_new	proc near
		push	offset ?local_it@?1??X509_CINF_it@@9@9 ; `X509_CINF_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_X509_CINF_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 324h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_dup
_X509_dup	proc near

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		push	offset ?local_it@?1??X509_it@@9@9 ; `X509_it'::`2'::local_it
		call	_ASN1_item_dup
		add	esp, 8
		retn
_X509_dup	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 338h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_free
_X509_free	proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??X509_it@@9@9 ; `X509_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_X509_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 34Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_get0_signature
_X509_get0_signature proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		mov	edx, [esp+arg_8]
		test	ecx, ecx
		jz	short loc_35D
		mov	eax, [edx+8]
		mov	[ecx], eax

loc_35D:				; CODE XREF: _X509_get0_signature+Aj
		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jz	short locret_36A
		mov	eax, [edx+4]
		mov	[ecx], eax

locret_36A:				; CODE XREF: _X509_get0_signature+17j
		retn
_X509_get0_signature endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 36Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_get_ex_data
_X509_get_ex_data proc near

arg_0		= dword	ptr  4

		add	[esp+arg_0], 18h
		jmp	_CRYPTO_get_ex_data
_X509_get_ex_data endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 378h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_get_ex_new_index
_X509_get_ex_new_index proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	[esp+arg_10]
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		push	0Ah
		call	_CRYPTO_get_ex_new_index
		add	esp, 18h
		retn
_X509_get_ex_new_index endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 398h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_get_signature_nid
_X509_get_signature_nid	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+4]
		push	dword ptr [eax]
		call	_OBJ_obj2nid
		add	esp, 4
		retn
_X509_get_signature_nid	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_it
_X509_it	proc near
		mov	eax, offset ?local_it@?1??X509_it@@9@9 ; `X509_it'::`2'::local_it
		retn
_X509_it	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_new
_X509_new	proc near
		push	offset ?local_it@?1??X509_it@@9@9 ; `X509_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_X509_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_set_ex_data
_X509_set_ex_data proc near

arg_0		= dword	ptr  4

		add	[esp+arg_0], 18h
		jmp	_CRYPTO_set_ex_data
_X509_set_ex_data endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_X509
_d2i_X509	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??X509_it@@9@9 ; `X509_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_X509	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_X509_AUX
_d2i_X509_AUX	proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	ebp
		mov	ebp, [esp+0Ch+arg_4]
		push	esi
		mov	esi, [esp+10h+arg_0]
		mov	[esp+10h+var_4], 0
		mov	eax, [ebp+0]
		mov	[esp+10h+arg_4], eax
		push	edi
		test	esi, esi
		jz	short loc_41A
		cmp	dword ptr [esi], 0
		jnz	short loc_422

loc_41A:				; CODE XREF: _d2i_X509_AUX+27j
		mov	[esp+14h+var_4], 1

loc_422:				; CODE XREF: _d2i_X509_AUX+2Cj
		mov	ebx, [esp+14h+arg_8]
		lea	eax, [esp+14h+arg_4]
		push	offset ?local_it@?1??X509_it@@9@9 ; `X509_it'::`2'::local_it
		push	ebx
		push	eax
		push	esi
		call	_ASN1_item_d2i
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_483
		mov	eax, [ebp+0]
		mov	ecx, [esp+14h+arg_4]
		sub	eax, ecx
		add	ebx, eax
		test	ebx, ebx
		jle	short loc_48F
		push	ebx
		lea	eax, [esp+18h+arg_4]
		push	eax
		lea	eax, [edi+64h]
		push	eax
		call	_d2i_X509_CERT_AUX
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_48B

$err$19:
		cmp	[esp+14h+var_4], eax
		jz	short loc_483
		push	offset ?local_it@?1??X509_it@@9@9 ; `X509_it'::`2'::local_it
		push	edi
		call	_ASN1_item_free
		add	esp, 8
		test	esi, esi
		jz	short loc_483
		mov	dword ptr [esi], 0

loc_483:				; CODE XREF: _d2i_X509_AUX+52j
					; _d2i_X509_AUX+7Dj ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_48B:				; CODE XREF: _d2i_X509_AUX+77j
		mov	ecx, [esp+14h+arg_4]

loc_48F:				; CODE XREF: _d2i_X509_AUX+61j
		mov	eax, edi
		mov	[ebp+0], ecx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
_d2i_X509_AUX	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 49Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_X509_CINF
_d2i_X509_CINF	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??X509_CINF_it@@9@9 ; `X509_CINF_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_X509_CINF	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_X509
_i2d_X509	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??X509_it@@9@9 ; `X509_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_X509	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_X509_AUX
_i2d_X509_AUX	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		push	edi
		test	esi, esi
		jz	short loc_4E0
		mov	edi, [esi]
		jmp	short loc_4E2
; ---------------------------------------------------------------------------

loc_4E0:				; CODE XREF: _i2d_X509_AUX+Aj
		xor	edi, edi

loc_4E2:				; CODE XREF: _i2d_X509_AUX+Ej
		mov	ebp, [esp+10h+arg_0]
		push	offset ?local_it@?1??X509_it@@9@9 ; `X509_it'::`2'::local_it
		push	esi
		push	ebp
		call	_ASN1_item_i2d
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	short loc_51C
		test	ebp, ebp
		jz	short loc_51C
		push	esi
		push	dword ptr [ebp+64h]
		call	_i2d_X509_CERT_AUX
		add	esp, 8
		test	eax, eax
		jns	short loc_51A
		test	edi, edi
		jz	short loc_51C
		mov	[esi], edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_51A:				; CODE XREF: _i2d_X509_AUX+3Dj
		add	eax, ebx

loc_51C:				; CODE XREF: _i2d_X509_AUX+29j
					; _i2d_X509_AUX+2Dj ...
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_i2d_X509_AUX	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 524h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_X509_CINF
_i2d_X509_CINF	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??X509_CINF_it@@9@9 ; `X509_CINF_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_X509_CINF	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 53Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_re_X509_tbs
_i2d_re_X509_tbs proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		push	offset ?local_it@?1??X509_CINF_it@@9@9 ; `X509_CINF_it'::`2'::local_it
		push	[esp+4+arg_4]
		mov	eax, [ecx]
		mov	dword ptr [eax+30h], 1
		push	dword ptr [ecx]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_re_X509_tbs endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ASN1_BIT_STRING_it:near ; DATA XREF: .rdata:0000014Co
					; .rdata:00000220o ...
		extrn _ASN1_INTEGER_it:near ; DATA XREF: .rdata:00000194o
					; .rdata:000001A8o
		extrn _X509_ALGOR_it:near ; DATA XREF: .rdata:00000138o
					; .rdata:000001BCo
		extrn _X509_VAL_it:near	; DATA XREF: .rdata:000001E4o
		extrn _X509_PUBKEY_it:near ; DATA XREF:	.rdata:0000020Co
		extrn _X509_EXTENSION_it:near ;	DATA XREF: .rdata:00000248o
		extrn _X509_NAME_it:near ; DATA	XREF: .rdata:000001D0o
					; .rdata:000001F8o
		extrn _CRYPTO_get_ex_new_index:near ; CODE XREF: _X509_get_ex_new_index+16p
		extrn _CRYPTO_new_ex_data:near ; CODE XREF: _x509_cb+EAp
		extrn _CRYPTO_free_ex_data:near	; CODE XREF: _x509_cb+54p
		extrn _CRYPTO_set_ex_data:near ; CODE XREF: _X509_set_ex_data+5j
		extrn _CRYPTO_get_ex_data:near ; CODE XREF: _X509_get_ex_data+5j
		extrn _CRYPTO_free:near	; CODE XREF: _x509_cb+2Ap _x509_cb+9Cp
		extrn _ASN1_OCTET_STRING_free:near ; CODE XREF:	_x509_cb:loc_64p
		extrn _ASN1_item_dup:near ; CODE XREF: _X509_dup+9p
		extrn _ASN1_item_new:near ; CODE XREF: _X509_CINF_new+5p
					; _X509_new+5p
		extrn _ASN1_item_free:near ; CODE XREF:	_X509_CINF_free+9p
					; _X509_free+9p ...
		extrn _ASN1_item_d2i:near ; CODE XREF: _d2i_X509+11p
					; _d2i_X509_AUX+46p ...
		extrn _ASN1_item_i2d:near ; CODE XREF: _i2d_X509+Dp
					; _i2d_X509_AUX+1Dp ...
		extrn _OBJ_obj2nid:near	; CODE XREF: _X509_get_signature_nid+9p
		extrn _X509_CERT_AUX_free:near ; CODE XREF: _x509_cb+5Cp
		extrn _d2i_X509_CERT_AUX:near ;	CODE XREF: _d2i_X509_AUX+6Dp
		extrn _i2d_X509_CERT_AUX:near ;	CODE XREF: _i2d_X509_AUX+33p
		extrn _X509_NAME_oneline:near ;	CODE XREF: _x509_cb+3Bp
		extrn _AUTHORITY_KEYID_free:near ; CODE	XREF: _x509_cb+6Cp
		extrn _GENERAL_NAMES_free:near ; CODE XREF: _x509_cb+84p
		extrn _CRL_DIST_POINTS_free:near ; CODE	XREF: _x509_cb+74p
		extrn _NAME_CONSTRAINTS_free:near ; CODE XREF: _x509_cb+8Cp
		extrn _policy_cache_free:near ;	CODE XREF: _x509_cb+7Cp
		extrn __chkstk:near	; CODE XREF: _d2i_X509_AUX+5p


		end
