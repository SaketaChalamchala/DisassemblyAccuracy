;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	4CC931804C9906742BC3128017FBD9A1
; Input	CRC32 :	9B3B99CA

; File Name   :	C:\compspace\Diff\openssl\obj\rc4test.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
_keys		db 8			; DATA XREF: _main+37r	_main+565r
byte_1		db 1, 23h, 45h		; DATA XREF: _main:loc_2FCo
aGilQ		db 'g‰«Íï',0
		align 4
		dd 4 dup(0)
		dd 1080000h, 89674523h,	0EFCDABh, 5 dup(0)
		dd 8, 6	dup(0)
		db 2 dup(0)
byte_5A		db 4			; DATA XREF: _main:loc_4CCr
					; _main:loc_66Cr
byte_5B		db 0EFh			; DATA XREF: _main+207o _main+3A7o ...
		dd 452301h, 6 dup(0)
		dd 45230108h, 0CDAB8967h, 0EFh,	4 dup(0)
		dd 0EF040000h, 452301h,	0Eh dup(0)
_data_len	db 8			; DATA XREF: _main+6Cr	_main+81r ...
		db 2 dup(8)
byte_D7		db 14h			; DATA XREF: _main+1E2r _main:loc_624r ...
		dd offset ??_C@_0CA@KMNKCOHE@error?5in?5RC4?5length?5processing?6?$AA@+14h ; "processing\n"
		align 10h
_data		dd 67452301h, 0EFCDAB89h, 0FFh,	6 dup(0) ; DATA	XREF: _main+65o
		dd 0FF0000h, 7 dup(0)
		dd offset _data+1Fh
		dd 4 dup(0)
		db 2 dup(0)
word_13A	dw 0			; DATA XREF: _main+233o _main+3D3o ...
		dd 4 dup(0)
		dd 0FF0000h, 2 dup(0)
		dd 78563412h, 0F0DEBC9Ah, 78563412h, 0F0DEBC9Ah, 78563412h
		dd 0F0DEBC9Ah, 78563412h, 0FFh,	2 dup(0)
		dd offset _data+1Fh
		dd 0Dh dup(0)
_output		db 'u·‡€™àÅ–',0         ; DATA XREF: _main+90o _main:loc_43Cr
		align 4
		dd 4 dup(0)
		dd 94740000h, 4B10E7C2h, 7908h,	5 dup(0)
		dd 418918DEh, 3A5D37A3h, 5 dup(0)
		db 2 dup(0)
byte_212	db 0D6h			; DATA XREF: _main+252o _main:loc_5FCr ...
		db 0A1h
		dd 3CECA741h, 61BDDF38h, 0E162115Ah, 0B636BAC7h, 5878h
		dd 2 dup(0)
		dd 9F94A066h, 89D6F78Ah, 2B837F1Fh, 0CC033A8h, 30BE2E89h
		dd 87E23C14h, 0CF1E0140h, 0A1D60000h, 3CECA741h, 61BDDF38h
		dd 0Dh dup(0)
; `main'::`20'::expected
?expected@?BE@??main@@9@9 db 0A4h	; DATA XREF: _main+5F8o _main:loc_94Cr
		db 7Bh,	0CCh, 0
		dd 0E1BDD03Dh, 1E125FACh, 1AFBBC45h, 0C57FF2A1h
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2A0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; _printf+19p
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2A8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2CCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public _main
_main		proc near

var_888		= dword	ptr -888h
var_884		= byte ptr -884h
var_824		= byte ptr -824h
var_41C		= byte ptr -41Ch
Dst		= byte ptr -408h
var_208		= byte ptr -208h
var_4		= dword	ptr -4
argc		= dword	ptr  4
argv		= dword	ptr  8
envp		= dword	ptr  0Ch

		mov	eax, 888h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+888h+var_4], eax
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	[esp+898h+var_888], 0
		call	_OPENSSL_cpuid_setup
		xor	edi, edi
		xor	ebx, ebx
		nop	dword ptr [eax]

loc_2FC:				; CODE XREF: _main+1C7j
		lea	eax, byte_1[ebx]
		push	eax
		movzx	eax, _keys[ebx]
		push	eax
		lea	eax, [esp+8A0h+var_824]
		push	eax
		call	_RC4_set_key
		push	200h		; Size
		lea	eax, [esp+8A8h+Dst]
		push	0		; Val
		push	eax		; Dst
		call	_memset
		lea	eax, [esp+8B0h+Dst]
		push	eax
		lea	eax, _data[ebx]
		push	eax
		movzx	eax, _data_len[edi]
		push	eax
		lea	eax, [esp+8BCh+var_824]
		push	eax
		call	_RC4
		movzx	esi, _data_len[edi]
		lea	ecx, [esp+8C0h+Dst]
		inc	esi
		lea	edx, _output[ebx] ; "u·‡€™àÅ–"
		add	esp, 28h
		sub	esi, 4
		jb	short loc_37D
		xchg	ax, ax

loc_36C:				; CODE XREF: _main+AFj
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_386
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_36C

loc_37D:				; CODE XREF: _main+9Cj
		cmp	esi, 0FFFFFFFCh
		jz	loc_477

loc_386:				; CODE XREF: _main+A4j
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_3C3
		cmp	esi, 0FFFFFFFDh
		jz	loc_477
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_3C3
		cmp	esi, 0FFFFFFFEh
		jz	loc_477
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_3C3
		cmp	esi, 0FFFFFFFFh
		jz	loc_477
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jz	loc_477

loc_3C3:				; CODE XREF: _main+BEj	_main+CFj ...
		push	offset ??_C@_0BH@NADOLLBK@error?5calculating?5RC4?6?$AA@ ; "error calculating RC4\n"
		call	_printf
		push	offset ??_C@_07GOJHIMEO@output?3?$AA@ ;	"output:"
		call	_printf
		movzx	eax, _data_len[edi]
		add	esp, 8
		inc	eax
		xor	esi, esi
		test	eax, eax
		jle	short loc_40F
		nop	dword ptr [eax+00h]

loc_3EC:				; CODE XREF: _main+141j
		movzx	eax, [esp+esi+898h+Dst]
		push	eax
		push	offset ??_C@_05HAJCMBLP@?5?$CF02x?$AA@ ; " %02x"
		call	_printf
		movzx	eax, _data_len[edi]
		inc	esi
		inc	eax
		add	esp, 8
		cmp	esi, eax
		jl	short loc_3EC

loc_40F:				; CODE XREF: _main+11Aj
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		push	offset ??_C@_07NIGDKDOB@expect?3?$AA@ ;	"expect:"
		call	_printf
		movzx	eax, _data_len[edi]
		add	esp, 8
		inc	eax
		xor	esi, esi
		test	eax, eax
		jle	short loc_45F
		nop	dword ptr [eax+eax+00000000h]

loc_43C:				; CODE XREF: _main+191j
		movzx	eax, byte ptr _output[esi+ebx] ; "u·‡€™àÅ–"
		push	eax
		push	offset ??_C@_05HAJCMBLP@?5?$CF02x?$AA@ ; " %02x"
		call	_printf
		movzx	eax, _data_len[edi]
		inc	esi
		inc	eax
		add	esp, 8
		cmp	esi, eax
		jl	short loc_43C

loc_45F:				; CODE XREF: _main+166j
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		mov	ebp, [esp+89Ch+var_888]
		add	esp, 4
		inc	ebp
		mov	[esp+898h+var_888], ebp
		jmp	short loc_489
; ---------------------------------------------------------------------------

loc_477:				; CODE XREF: _main+B4j	_main+C3j ...
		push	edi
		push	offset ??_C@_0M@NJKLCIBI@test?5?$CFd?5ok?6?$AA@	; "test	%d ok\n"
		call	_printf
		mov	ebp, [esp+8A0h+var_888]
		add	esp, 8

loc_489:				; CODE XREF: _main+1A9j
		add	ebx, 1Eh
		inc	edi
		cmp	ebx, 0B4h ; '´'
		jl	loc_2FC
		push	offset ??_C@_0BF@OFBMILLE@test?5end?5processing?5?$AA@ ; "test end processing "
		call	_printf
		mov	ebx, dword ptr ds:__imp__fflush
		add	esp, 4
		xor	edi, edi
		cmp	byte_D7, 0
		jbe	loc_63B
		lea	eax, [esp+898h+Dst]
		dec	eax
		mov	[esp+898h+var_888], eax
		nop	dword ptr [eax+eax+00h]

loc_4CC:				; CODE XREF: _main+363j
		movzx	eax, byte_5A
		push	offset byte_5B
		push	eax
		lea	eax, [esp+8A0h+var_824]
		push	eax
		call	_RC4_set_key
		push	200h		; Size
		lea	eax, [esp+8A8h+Dst]
		push	0		; Val
		push	eax		; Dst
		call	_memset
		lea	eax, [esp+8B0h+Dst]
		push	eax
		push	offset word_13A
		lea	eax, [esp+8B8h+var_824]
		push	edi
		push	eax
		call	_RC4
		mov	esi, edi
		lea	ecx, [esp+8C0h+Dst]
		add	esp, 28h
		mov	edx, offset byte_212
		sub	esi, 4
		jb	short loc_53D
		nop	dword ptr [eax+00h]

loc_52C:				; CODE XREF: _main+26Fj
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_542
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_52C

loc_53D:				; CODE XREF: _main+25Aj
		cmp	esi, 0FFFFFFFCh
		jz	short loc_56F

loc_542:				; CODE XREF: _main+264j
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_59D
		cmp	esi, 0FFFFFFFDh
		jz	short loc_56F
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_59D
		cmp	esi, 0FFFFFFFEh
		jz	short loc_56F
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_59D
		cmp	esi, 0FFFFFFFFh
		jz	short loc_56F
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jnz	short loc_59D

loc_56F:				; CODE XREF: _main+274j _main+27Fj ...
		mov	eax, [esp+898h+var_888]
		lea	ebx, [edi+1]
		cmp	byte ptr [eax+ebx], 0
		jnz	short loc_59D
		push	offset ??_C@_01LFCBOECM@?4?$AA@	; "."
		call	_printf
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		push	eax		; File
		call	dword ptr ds:__imp__fflush
		add	esp, 0Ch
		jmp	loc_624
; ---------------------------------------------------------------------------

loc_59D:				; CODE XREF: _main+27Aj _main+287j ...
		push	offset ??_C@_0CA@KMNKCOHE@error?5in?5RC4?5length?5processing?6?$AA@ ; "error in	RC4 length processing\n"
		call	_printf
		push	offset ??_C@_07GOJHIMEO@output?3?$AA@ ;	"output:"
		call	_printf
		lea	ebx, [edi+1]
		add	esp, 8
		xor	esi, esi
		test	ebx, ebx
		jle	short loc_5D8

loc_5BD:				; CODE XREF: _main+30Aj
		movzx	eax, [esp+esi+898h+Dst]
		push	eax
		push	offset ??_C@_05HAJCMBLP@?5?$CF02x?$AA@ ; " %02x"
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, ebx
		jl	short loc_5BD

loc_5D8:				; CODE XREF: _main+2EFj
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		push	offset ??_C@_07NIGDKDOB@expect?3?$AA@ ;	"expect:"
		call	_printf
		add	esp, 8
		xor	esi, esi
		test	edi, edi
		jle	short loc_616
		nop	dword ptr [eax+00000000h]

loc_5FC:				; CODE XREF: _main+348j
		movzx	eax, byte_212[esi]
		push	eax
		push	offset ??_C@_05HAJCMBLP@?5?$CF02x?$AA@ ; " %02x"
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, edi
		jl	short loc_5FC

loc_616:				; CODE XREF: _main+327j
		push	offset ??_C@_04NGLDNCFN@?500?6?$AA@ ; "	00\n"
		call	_printf
		add	esp, 4
		inc	ebp

loc_624:				; CODE XREF: _main+2CCj
		movzx	eax, byte_D7
		mov	edi, ebx
		cmp	edi, eax
		jl	loc_4CC
		mov	ebx, dword ptr ds:__imp__fflush

loc_63B:				; CODE XREF: _main+1E9j
		push	offset ??_C@_05KJDAJCPN@done?6?$AA@ ; "done\n"
		call	_printf
		push	offset ??_C@_0BB@IEHBALPJ@test?5multi?9call?5?$AA@ ; "test multi-call "
		call	_printf
		add	esp, 8
		xor	edi, edi
		cmp	byte_D7, 0
		jbe	loc_81D
		db	66h, 66h
		nop	word ptr [eax+eax+00000000h]

loc_66C:				; CODE XREF: _main+54Bj
		movzx	eax, byte_5A
		push	offset byte_5B
		push	eax
		lea	eax, [esp+8A0h+var_824]
		push	eax
		call	_RC4_set_key
		push	200h		; Size
		lea	eax, [esp+8A8h+Dst]
		push	0		; Val
		push	eax		; Dst
		call	_memset
		lea	eax, [esp+8B0h+Dst]
		push	eax
		push	offset word_13A
		lea	eax, [esp+8B8h+var_824]
		push	edi
		push	eax
		call	_RC4
		lea	eax, [esp+8C0h+Dst]
		add	eax, edi
		push	eax
		lea	eax, word_13A[edi]
		push	eax
		movzx	eax, byte_D7
		sub	eax, edi
		push	eax
		lea	eax, [esp+8CCh+var_824]
		push	eax
		call	_RC4
		movzx	esi, byte_D7
		lea	ecx, [esp+8D0h+Dst]
		inc	esi
		add	esp, 38h
		mov	edx, offset byte_212
		sub	esi, 4
		jb	short loc_70D
		nop	word ptr [eax+eax+00h]

loc_6FC:				; CODE XREF: _main+43Fj
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_716
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_6FC

loc_70D:				; CODE XREF: _main+428j
		cmp	esi, 0FFFFFFFCh
		jz	loc_7F3

loc_716:				; CODE XREF: _main+434j
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_753
		cmp	esi, 0FFFFFFFDh
		jz	loc_7F3
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_753
		cmp	esi, 0FFFFFFFEh
		jz	loc_7F3
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_753
		cmp	esi, 0FFFFFFFFh
		jz	loc_7F3
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jz	loc_7F3

loc_753:				; CODE XREF: _main+44Ej _main+45Fj ...
		push	offset ??_C@_0CE@OFFPFLEM@error?5in?5RC4?5multi?9call?5processi@ ; "error in RC4 multi-call processing\n"
		call	_printf
		push	offset ??_C@_07GOJHIMEO@output?3?$AA@ ;	"output:"
		call	_printf
		movzx	eax, byte_D7
		add	esp, 8
		inc	eax
		xor	esi, esi
		test	eax, eax
		jle	short loc_79F
		nop	dword ptr [eax+00h]

loc_77C:				; CODE XREF: _main+4D1j
		movzx	eax, [esp+esi+898h+Dst]
		push	eax
		push	offset ??_C@_05HAJCMBLP@?5?$CF02x?$AA@ ; " %02x"
		call	_printf
		movzx	eax, byte_D7
		inc	esi
		inc	eax
		add	esp, 8
		cmp	esi, eax
		jl	short loc_77C

loc_79F:				; CODE XREF: _main+4AAj
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		push	offset ??_C@_07NIGDKDOB@expect?3?$AA@ ;	"expect:"
		call	_printf
		mov	cl, byte_D7
		add	esp, 8
		movzx	eax, cl
		xor	esi, esi
		inc	eax
		test	eax, eax
		jle	short loc_7F0
		nop	word ptr [eax+eax+00h]

loc_7CC:				; CODE XREF: _main+522j
		movzx	eax, byte_212[esi]
		push	eax
		push	offset ??_C@_05HAJCMBLP@?5?$CF02x?$AA@ ; " %02x"
		call	_printf
		mov	cl, byte_D7
		inc	esi
		movzx	eax, cl
		add	esp, 8
		inc	eax
		cmp	esi, eax
		jl	short loc_7CC

loc_7F0:				; CODE XREF: _main+4F8j
		inc	ebp
		jmp	short loc_811
; ---------------------------------------------------------------------------

loc_7F3:				; CODE XREF: _main+444j _main+453j ...
		push	offset ??_C@_01LFCBOECM@?4?$AA@	; "."
		call	_printf
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		push	eax		; File
		call	ebx ; __imp__fflush
		mov	cl, byte_D7
		add	esp, 0Ch

loc_811:				; CODE XREF: _main+525j
		inc	edi
		movzx	eax, cl
		cmp	edi, eax
		jl	loc_66C

loc_81D:				; CODE XREF: _main+38Fj
		push	offset ??_C@_05KJDAJCPN@done?6?$AA@ ; "done\n"
		call	_printf
		push	offset ??_C@_0L@KFMIEEB@bulk?5test?5?$AA@ ; "bulk test "
		call	_printf
		movzx	eax, _keys
		push	offset byte_5B
		push	eax
		lea	eax, [esp+8A8h+var_824]
		push	eax
		call	_RC4_set_key
		push	201h		; Size
		lea	eax, [esp+8B0h+var_208]
		push	0		; Val
		push	eax		; Dst
		call	_memset
		lea	eax, [esp+8B8h+var_884]
		push	eax
		call	_SHA1_Init
		add	esp, 24h
		mov	esi, 0A0Bh

loc_871:				; CODE XREF: _main+5DAj
		lea	eax, [esp+898h+var_208]
		push	eax
		push	eax
		lea	eax, [esp+8A0h+var_824]
		push	201h
		push	eax
		call	_RC4
		push	201h
		lea	eax, [esp+8ACh+var_208]
		push	eax
		lea	eax, [esp+8B0h+var_884]
		push	eax
		call	_SHA1_Update
		add	esp, 1Ch
		sub	esi, 1
		jnz	short loc_871
		lea	eax, [esp+898h+var_884]
		push	eax
		lea	eax, [esp+89Ch+var_41C]
		push	eax
		call	_SHA1_Final
		add	esp, 8
		lea	ecx, [esp+898h+var_41C]
		mov	edx, offset ?expected@?BE@??main@@9@9 ;	`main'::`20'::expected
		mov	esi, 10h

loc_8CE:				; CODE XREF: _main+611j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_8F1
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_8CE
		push	offset ??_C@_03DJDALPN@ok?6?$AA@ ; "ok\n"
		call	_printf
		add	esp, 4
		jmp	loc_975
; ---------------------------------------------------------------------------

loc_8F1:				; CODE XREF: _main+606j
		push	offset ??_C@_0BI@EBFBNNON@error?5in?5RC4?5bulk?5test?6?$AA@ ; "error in	RC4 bulk test\n"
		call	_printf
		push	offset ??_C@_07GOJHIMEO@output?3?$AA@ ;	"output:"
		call	_printf
		add	esp, 8
		xor	esi, esi
		xchg	ax, ax

loc_90C:				; CODE XREF: _main+65Aj
		movzx	eax, [esp+esi+898h+var_41C]
		push	eax
		push	offset ??_C@_05HAJCMBLP@?5?$CF02x?$AA@ ; " %02x"
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 14h
		jl	short loc_90C
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		push	offset ??_C@_07NIGDKDOB@expect?3?$AA@ ;	"expect:"
		call	_printf
		add	esp, 8
		xor	esi, esi
		db	66h, 66h
		nop	word ptr [eax+eax+00000000h]

loc_94C:				; CODE XREF: _main+699j
		movzx	eax, ?expected@?BE@??main@@9@9[esi] ; `main'::`20'::expected
		push	eax
		push	offset ??_C@_05HAJCMBLP@?5?$CF02x?$AA@ ; " %02x"
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 14h
		jl	short loc_94C
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		add	esp, 4
		inc	ebp

loc_975:				; CODE XREF: _main+620j
		push	ebp		; Code
		call	dword ptr ds:__imp__exit
_main		endp

; ---------------------------------------------------------------------------
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 980h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int printf(const char	*Format, ...)
		public _printf
_printf		proc near		; CODE XREF: _main+FCp	_main+106p ...

Format		= dword	ptr  4
arg_4		= byte ptr  8

		push	esi		; $LN114
					; $LN113
		mov	esi, [esp+4+Format]
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		lea	ecx, [esp+4+arg_4]
		push	ecx
		push	0
		push	esi
		push	eax
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		pop	esi
		retn
_printf		endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9B0h
; COMDAT (pick any)
		public ??_C@_0BH@NADOLLBK@error?5calculating?5RC4?6?$AA@
; char `string'[]
??_C@_0BH@NADOLLBK@error?5calculating?5RC4?6?$AA@ db 'error calculating RC4',0Ah,0
					; DATA XREF: _main:loc_3C3o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9C8h
; COMDAT (pick any)
		public ??_C@_07GOJHIMEO@output?3?$AA@
; char `string'[]
??_C@_07GOJHIMEO@output?3?$AA@ db 'output:',0 ; DATA XREF: _main+101o
					; _main+2DBo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9D0h
; COMDAT (pick any)
		public ??_C@_05HAJCMBLP@?5?$CF02x?$AA@
; char `string'[]
??_C@_05HAJCMBLP@?5?$CF02x?$AA@	db ' %02x',0 ; DATA XREF: _main+129o
					; _main+179o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9D8h
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; char `string'[2]
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah,0	; DATA XREF: _main:loc_40Fo
					; _main:loc_45Fo ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9DCh
; COMDAT (pick any)
		public ??_C@_07NIGDKDOB@expect?3?$AA@
; char `string'[]
??_C@_07NIGDKDOB@expect?3?$AA@ db 'expect:',0 ; DATA XREF: _main+14Do
					; _main+316o ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9E4h
; COMDAT (pick any)
		public ??_C@_0M@NJKLCIBI@test?5?$CFd?5ok?6?$AA@
; char `string'[]
??_C@_0M@NJKLCIBI@test?5?$CFd?5ok?6?$AA@ db 'test %d ok',0Ah,0 ; DATA XREF: _main+1ACo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9F0h
; COMDAT (pick any)
		public ??_C@_0BF@OFBMILLE@test?5end?5processing?5?$AA@
; char `string'[]
??_C@_0BF@OFBMILLE@test?5end?5processing?5?$AA@	db 'test end processing ',0
					; DATA XREF: _main+1CDo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A08h
; COMDAT (pick any)
		public ??_C@_0CA@KMNKCOHE@error?5in?5RC4?5length?5processing?6?$AA@
; char `string'[]
??_C@_0CA@KMNKCOHE@error?5in?5RC4?5length?5processing?6?$AA@ db	'error in RC4 length processing',0Ah,0
					; DATA XREF: _main:loc_59Do
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A28h
; COMDAT (pick any)
		public ??_C@_04NGLDNCFN@?500?6?$AA@
; char `string'[]
??_C@_04NGLDNCFN@?500?6?$AA@ db	' 00',0Ah,0 ; DATA XREF: _main:loc_616o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A30h
; COMDAT (pick any)
		public ??_C@_01LFCBOECM@?4?$AA@
; char `string'[2]
??_C@_01LFCBOECM@?4?$AA@ db '.',0       ; DATA XREF: _main+2B0o _main:loc_7F3o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A34h
; COMDAT (pick any)
		public ??_C@_05KJDAJCPN@done?6?$AA@
; char `string'[]
??_C@_05KJDAJCPN@done?6?$AA@ db	'done',0Ah,0 ; DATA XREF: _main:loc_63Bo
					; _main:loc_81Do
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A3Ch
; COMDAT (pick any)
		public ??_C@_0BB@IEHBALPJ@test?5multi?9call?5?$AA@
; char `string'[]
??_C@_0BB@IEHBALPJ@test?5multi?9call?5?$AA@ db 'test multi-call ',0 ; DATA XREF: _main+379o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A50h
; COMDAT (pick any)
		public ??_C@_0CE@OFFPFLEM@error?5in?5RC4?5multi?9call?5processi@
; char `string'[]
??_C@_0CE@OFFPFLEM@error?5in?5RC4?5multi?9call?5processi@ db 'error in RC4 multi-call processing',0Ah,0
					; DATA XREF: _main:loc_753o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A74h
; COMDAT (pick any)
		public ??_C@_0L@KFMIEEB@bulk?5test?5?$AA@
; char `string'[]
??_C@_0L@KFMIEEB@bulk?5test?5?$AA@ db 'bulk test ',0 ; DATA XREF: _main+55Bo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A80h
; COMDAT (pick any)
		public ??_C@_0BI@EBFBNNON@error?5in?5RC4?5bulk?5test?6?$AA@
; char `string'[]
??_C@_0BI@EBFBNNON@error?5in?5RC4?5bulk?5test?6?$AA@ db	'error in RC4 bulk test',0Ah,0
					; DATA XREF: _main:loc_8F1o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A98h
; COMDAT (pick any)
		public ??_C@_03DJDALPN@ok?6?$AA@
; char `string'[]
??_C@_03DJDALPN@ok?6?$AA@ db 'ok',0Ah,0 ; DATA XREF: _main+613o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _main+2BCp
					; _main+533p ...
; int __cdecl _fflush(FILE *File)
		extrn __imp__fflush:near ; CODE	XREF: _main+2C3p _main+53Ap
					; DATA XREF: ...
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _printf+23p
					; DATA XREF: ...
; void __cdecl __noreturn _exit(int Code)
		extrn __imp__exit:near	; CODE XREF: _main+6AAp
					; DATA XREF: _main+6AAr
		extrn _RC4_set_key:near	; CODE XREF: _main+44p	_main+212p ...
		extrn _RC4:near		; CODE XREF: _main+7Cp	_main+241p ...
		extrn _SHA1_Init:near	; CODE XREF: _main+598p
		extrn _SHA1_Update:near	; CODE XREF: _main+5CFp
		extrn _SHA1_Final:near	; CODE XREF: _main+5E9p
		extrn _OPENSSL_cpuid_setup:near	; CODE XREF: _main+24p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
		extrn __chkstk:near	; CODE XREF: _main+5p
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _main+58p	_main+226p ...
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso
		extrn ___security_cookie:near ;	DATA XREF: _main+Ar


		end
