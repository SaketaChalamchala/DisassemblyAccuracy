;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	BCE07CCEA04C56F07F7EE3D0FFFBA4EC
; Input	CRC32 :	F1EFA6E1

; File Name   :	C:\compspace\Diff\openssl\obj\gost_eng.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
_engine_gost_id	dd offset ??_C@_04GMGOCOBB@gost?$AA@ ; DATA XREF: _bind_gost+5r
					; "gost"
_engine_gost_name dd offset ??_C@_0CI@OEIKNEHB@Reference?5implementation?5of?5GOST@
					; DATA XREF: _bind_gost:loc_1ACr
					; "Reference implementation of GOST engine"
_gost_cipher_nids dd offset loc_32C+1	; DATA XREF: _gost_ciphers+11o
		dd offset loc_32C+2
		dd 0
_gost_digest_nids dd offset loc_327+2	; DATA XREF: _gost_digests+11o
		dd offset loc_32C+3
		align 10h
_gost_pkey_meth_nids dd	offset loc_32C	; DATA XREF: _gost_pkey_asn1_meths+Co
					; _gost_pkey_meths+Co
		dd offset loc_327+4
		dd offset loc_32C+3
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 30h
; COMDAT (pick any)
		public ??_C@_04GMGOCOBB@gost?$AA@
; `string'
??_C@_04GMGOCOBB@gost?$AA@ db 'gost',0  ; DATA XREF: .data:_engine_gost_ido
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 38h
; COMDAT (pick any)
		public ??_C@_0CI@OEIKNEHB@Reference?5implementation?5of?5GOST@
; `string'
??_C@_0CI@OEIKNEHB@Reference?5implementation?5of?5GOST@	db 'Reference implementation of GOST engine',0
					; DATA XREF: .data:_engine_gost_nameo
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 60h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
_pmeth_GostR3410_94 dd ?		; DATA XREF: _bind_gost+245o
					; _gost_engine_destroy+5w ...
_pmeth_GostR3410_2001 dd ?		; DATA XREF: _bind_gost+261o
					; _gost_engine_destroy+14w ...
_pmeth_Gost28147_MAC dd	?		; DATA XREF: _bind_gost+27Do
					; _gost_engine_destroy+1Ew ...
_ameth_GostR3410_94 dd ?		; DATA XREF: _bind_gost:loc_16Er
					; _bind_gost+1E1o ...
_ameth_GostR3410_2001 dd ?		; DATA XREF: _bind_gost+205o
					; _gost_engine_destroy+32w ...
_ameth_Gost28147_MAC dd	?		; DATA XREF: _bind_gost+229o
					; _gost_engine_destroy+3Cw ...
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 78h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; _fprintf+Fp ...
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 80h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _bind_engine
_bind_engine	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		call	_ENGINE_get_static_state
		mov	esi, [esp+4+arg_8]
		cmp	eax, [esi]
		jz	short $skip_cbs$10
		push	dword ptr [esi+14h]
		push	dword ptr [esi+10h]
		push	dword ptr [esi+0Ch]
		call	_CRYPTO_set_mem_functions
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_CB

loc_C7:					; CODE XREF: _bind_engine+5Cj
					; _bind_engine+6Bj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_CB:					; CODE XREF: _bind_engine+21j
		push	dword ptr [esi+18h]
		call	_CRYPTO_set_locking_callback
		push	dword ptr [esi+1Ch]
		call	_CRYPTO_set_add_lock_callback
		push	dword ptr [esi+20h]
		call	_CRYPTO_set_dynlock_create_callback
		push	dword ptr [esi+24h]
		call	_CRYPTO_set_dynlock_lock_callback
		push	dword ptr [esi+28h]
		call	_CRYPTO_set_dynlock_destroy_callback
		push	dword ptr [esi+8]
		call	_CRYPTO_set_ex_data_implementation
		add	esp, 18h
		test	eax, eax
		jz	short loc_C7
		push	dword ptr [esi+4]
		call	_ERR_set_implementation
		add	esp, 4
		test	eax, eax
		jz	short loc_C7

$skip_cbs$10:				; CODE XREF: _bind_engine+Cj
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_bind_gost
		add	esp, 8
		neg	eax
		sbb	eax, eax
		neg	eax
		pop	esi
		retn
_bind_engine	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 12Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_bind_gost	proc near		; CODE XREF: _bind_engine+75p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, _engine_gost_id
		push	edi
		xor	edi, edi
		test	eax, eax
		jz	short loc_16E
		mov	ecx, esi

loc_140:				; CODE XREF: _bind_gost+2Ej
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_160
		test	dl, dl
		jz	short loc_15C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_160
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_140

loc_15C:				; CODE XREF: _bind_gost+1Cj
		xor	eax, eax
		jmp	short loc_165
; ---------------------------------------------------------------------------

loc_160:				; CODE XREF: _bind_gost+18j
					; _bind_gost+24j
		sbb	eax, eax
		or	eax, 1

loc_165:				; CODE XREF: _bind_gost+32j
		test	eax, eax
		jz	short loc_16E
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_16E:				; CODE XREF: _bind_gost+10j
					; _bind_gost+3Bj
		cmp	ds:_ameth_GostR3410_94,	edi
		jz	short loc_188
		push	offset ??_C@_0BM@HLPEKGOI@GOST?5engine?5already?5loaded?6?$AA@ ; "GOST engine already loaded\n"
		call	_printf
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_188:				; CODE XREF: _bind_gost+48j
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	esi
		call	_ENGINE_set_id
		add	esp, 8
		test	eax, eax
		jnz	short loc_1AC
		push	offset ??_C@_0BG@FBBPECPI@ENGINE_set_id?5failed?6?$AA@ ; "ENGINE_set_id	failed\n"
		call	_printf
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1AC:				; CODE XREF: _bind_gost+6Cj
		push	_engine_gost_name
		push	esi
		call	_ENGINE_set_name
		add	esp, 8
		test	eax, eax
		jnz	short loc_1D1
		push	offset ??_C@_0BI@LHFEAHAE@ENGINE_set_name?5failed?6?$AA@ ; "ENGINE_set_name failed\n"
		call	_printf
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1D1:				; CODE XREF: _bind_gost+91j
		push	offset _gost_digests
		push	esi
		call	_ENGINE_set_digests
		add	esp, 8
		test	eax, eax
		jnz	short loc_1F5
		push	offset ??_C@_0BL@FHPMDDKB@ENGINE_set_digests?5failed?6?$AA@ ; "ENGINE_set_digests failed\n"
		call	_printf
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1F5:				; CODE XREF: _bind_gost+B5j
		push	offset _gost_ciphers
		push	esi
		call	_ENGINE_set_ciphers
		add	esp, 8
		test	eax, eax
		jnz	short loc_219
		push	offset ??_C@_0BL@OFMGLPFJ@ENGINE_set_ciphers?5failed?6?$AA@ ; "ENGINE_set_ciphers failed\n"
		call	_printf
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_219:				; CODE XREF: _bind_gost+D9j
		push	offset _gost_pkey_meths
		push	esi
		call	_ENGINE_set_pkey_meths
		add	esp, 8
		test	eax, eax
		jnz	short loc_23D
		push	offset ??_C@_0BO@KJOAGKPP@ENGINE_set_pkey_meths?5failed?6?$AA@ ; "ENGINE_set_pkey_meths	failed\n"
		call	_printf
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_23D:				; CODE XREF: _bind_gost+FDj
		push	offset _gost_pkey_asn1_meths
		push	esi
		call	_ENGINE_set_pkey_asn1_meths
		add	esp, 8
		test	eax, eax
		jnz	short loc_261
		push	offset ??_C@_0CD@CINJIFGL@ENGINE_set_pkey_asn1_meths?5faile@ ; "ENGINE_set_pkey_asn1_meths failed\n"
		call	_printf
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_261:				; CODE XREF: _bind_gost+121j
		push	offset _gost_cmds
		push	esi
		call	_ENGINE_set_cmd_defns
		add	esp, 8
		test	eax, eax
		jnz	short loc_291
		push	offset ??_C@_0BN@EDLOHGDH@ENGINE_set_cmd_defns?5failed?6?$AA@ ;	"ENGINE_set_cmd_defns failed\n"
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 8
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_291:				; CODE XREF: _bind_gost+145j
		push	offset _gost_control_func
		push	esi
		call	_ENGINE_set_ctrl_function
		add	esp, 8
		test	eax, eax
		jnz	short loc_2C1
		push	offset ??_C@_0BN@FIDJFKDG@ENGINE_set_ctrl_func?5failed?6?$AA@ ;	"ENGINE_set_ctrl_func failed\n"
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		add	esp, 8
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2C1:				; CODE XREF: _bind_gost+175j
		push	offset _gost_engine_destroy
		push	esi
		call	_ENGINE_set_destroy_function
		add	esp, 8
		test	eax, eax
		jz	$end$28
		push	offset _gost_engine_init
		push	esi
		call	_ENGINE_set_init_function
		add	esp, 8
		test	eax, eax
		jz	$end$28
		push	offset _gost_engine_finish
		push	esi
		call	_ENGINE_set_finish_function
		add	esp, 8
		test	eax, eax
		jz	$end$28
		push	offset ??_C@_0BA@JOCBNIHN@GOST?5R?534?410?994?$AA@ ; "GOST R 34.10-94"
		push	offset ??_C@_06LGHNNDMJ@GOST94?$AA@ ; "GOST94"
		push	offset _ameth_GostR3410_94
		push	32Ch
		call	_register_ameth_gost
		add	esp, 10h
		test	eax, eax
		jz	$end$28

loc_327:				; DATA XREF: .data:_gost_digest_nidso
					; .data:00000024o
		push	offset ??_C@_0BC@IBNIHBI@GOST?5R?534?410?92001?$AA@ ; "GOST R 34.10-2001"

loc_32C:				; DATA XREF: .data:_gost_pkey_meth_nidso
					; .data:_gost_cipher_nidso ...
		push	offset ??_C@_08BPGGBNHA@GOST2001?$AA@ ;	"GOST2001"
		push	offset _ameth_GostR3410_2001
		push	32Bh
		call	_register_ameth_gost
		add	esp, 10h
		test	eax, eax
		jz	$end$28
		push	offset ??_C@_0BC@BPAGAEJB@GOST?528147?989?5MAC?$AA@ ; "GOST 28147-89 MAC"
		push	offset ??_C@_08CMLJHMHB@GOST?9MAC?$AA@ ; "GOST-MAC"
		push	offset _ameth_Gost28147_MAC
		push	32Fh
		call	_register_ameth_gost
		add	esp, 10h
		test	eax, eax
		jz	$end$28
		push	0
		push	offset _pmeth_GostR3410_94
		push	32Ch
		call	_register_pmeth_gost
		add	esp, 0Ch
		test	eax, eax
		jz	$end$28
		push	0
		push	offset _pmeth_GostR3410_2001
		push	32Bh
		call	_register_pmeth_gost
		add	esp, 0Ch
		test	eax, eax
		jz	$end$28
		push	0
		push	offset _pmeth_Gost28147_MAC
		push	32Fh
		call	_register_pmeth_gost
		add	esp, 0Ch
		test	eax, eax
		jz	short $end$28
		push	esi
		call	_ENGINE_register_ciphers
		add	esp, 4
		test	eax, eax
		jz	short $end$28
		push	esi
		call	_ENGINE_register_digests
		add	esp, 4
		test	eax, eax
		jz	short $end$28
		push	esi
		call	_ENGINE_register_pkey_meths
		add	esp, 4
		test	eax, eax
		jz	short $end$28
		push	offset _cipher_gost
		call	_EVP_add_cipher
		add	esp, 4
		test	eax, eax
		jz	short $end$28
		push	offset _cipher_gost_cpacnt
		call	_EVP_add_cipher
		add	esp, 4
		test	eax, eax
		jz	short $end$28
		push	offset _digest_gost
		call	_EVP_add_digest
		add	esp, 4
		test	eax, eax
		jz	short $end$28
		push	offset _imit_gost_cpa
		call	_EVP_add_digest
		add	esp, 4
		test	eax, eax
		jz	short $end$28
		call	_ERR_load_GOST_strings
		mov	edi, 1

$end$28:				; CODE XREF: _bind_gost+1A5j
					; _bind_gost+1BBj ...
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_bind_gost	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 43Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int fprintf(FILE *File, const	char *Format, ...)
		public _fprintf
_fprintf	proc near		; CODE XREF: _bind_gost+158p
					; _bind_gost+188p

File		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= byte ptr  0Ch

		lea	eax, [esp+arg_8]
		push	eax
		push	0
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
_fprintf	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 460h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_gost_ciphers	proc near		; DATA XREF: _bind_gost:loc_1F5o

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		mov	ecx, 1
		test	eax, eax
		jnz	short loc_47B
		mov	eax, [esp+arg_8]
		mov	dword ptr [eax], offset	_gost_cipher_nids
		lea	eax, [ecx+1]
		retn
; ---------------------------------------------------------------------------

loc_47B:				; CODE XREF: _gost_ciphers+Bj
		mov	edx, [esp+arg_C]
		cmp	edx, 32Dh
		jnz	short loc_490
		mov	dword ptr [eax], offset	_cipher_gost
		mov	eax, ecx
		retn
; ---------------------------------------------------------------------------

loc_490:				; CODE XREF: _gost_ciphers+25j
		cmp	edx, 32Eh
		jnz	short loc_4A1
		mov	dword ptr [eax], offset	_cipher_gost_cpacnt
		mov	eax, ecx
		retn
; ---------------------------------------------------------------------------

loc_4A1:				; CODE XREF: _gost_ciphers+36j
		xor	ecx, ecx
		mov	[eax], ecx
		mov	eax, ecx
		retn
_gost_ciphers	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_gost_digests	proc near		; DATA XREF: _bind_gost:loc_1D1o

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		mov	ecx, 1
		test	eax, eax
		jnz	short loc_4C3
		mov	eax, [esp+arg_8]
		mov	dword ptr [eax], offset	_gost_digest_nids
		lea	eax, [ecx+1]
		retn
; ---------------------------------------------------------------------------

loc_4C3:				; CODE XREF: _gost_digests+Bj
		mov	edx, [esp+arg_C]
		cmp	edx, 329h
		jnz	short loc_4D8
		mov	dword ptr [eax], offset	_digest_gost
		mov	eax, ecx
		retn
; ---------------------------------------------------------------------------

loc_4D8:				; CODE XREF: _gost_digests+25j
		cmp	edx, 32Fh
		jnz	short loc_4E9
		mov	dword ptr [eax], offset	_imit_gost_cpa
		mov	eax, ecx
		retn
; ---------------------------------------------------------------------------

loc_4E9:				; CODE XREF: _gost_digests+36j
		xor	ecx, ecx
		mov	[eax], ecx
		mov	eax, ecx
		retn
_gost_digests	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_gost_engine_destroy proc near		; DATA XREF: _bind_gost:loc_2C1o
		call	_gost_param_free
		mov	ds:_pmeth_GostR3410_94,	0
		mov	eax, 1
		mov	ds:_pmeth_GostR3410_2001, 0
		mov	ds:_pmeth_Gost28147_MAC, 0
		mov	ds:_ameth_GostR3410_94,	0
		mov	ds:_ameth_GostR3410_2001, 0
		mov	ds:_ameth_Gost28147_MAC, 0
		retn
_gost_engine_destroy endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 538h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_gost_engine_finish proc near		; DATA XREF: _bind_gost+1C1o
		mov	eax, 1
		retn
_gost_engine_finish endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 540h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_gost_engine_init proc near		; DATA XREF: _bind_gost+1ABo
		mov	eax, 1
		retn
_gost_engine_init endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 548h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_gost_pkey_asn1_meths proc near		; DATA XREF: _bind_gost:loc_23Do

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jnz	short loc_560
		mov	eax, [esp+arg_8]
		mov	dword ptr [eax], offset	_gost_pkey_meth_nids
		mov	eax, 3
		retn
; ---------------------------------------------------------------------------

loc_560:				; CODE XREF: _gost_pkey_asn1_meths+6j
		mov	eax, [esp+arg_C]
		sub	eax, 32Bh
		jz	short loc_598
		sub	eax, 1
		jz	short loc_58B
		sub	eax, 3
		jz	short loc_57E
		mov	dword ptr [ecx], 0
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_57E:				; CODE XREF: _gost_pkey_asn1_meths+2Bj
		mov	eax, ds:_ameth_Gost28147_MAC
		mov	[ecx], eax
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_58B:				; CODE XREF: _gost_pkey_asn1_meths+26j
		mov	eax, ds:_ameth_GostR3410_94
		mov	[ecx], eax
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_598:				; CODE XREF: _gost_pkey_asn1_meths+21j
		mov	eax, ds:_ameth_GostR3410_2001
		mov	[ecx], eax
		mov	eax, 1
		retn
_gost_pkey_asn1_meths endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_gost_pkey_meths proc near		; DATA XREF: _bind_gost:loc_219o

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jnz	short loc_5C0
		mov	eax, [esp+arg_8]
		mov	dword ptr [eax], offset	_gost_pkey_meth_nids
		mov	eax, 3
		retn
; ---------------------------------------------------------------------------

loc_5C0:				; CODE XREF: _gost_pkey_meths+6j
		mov	eax, [esp+arg_C]
		sub	eax, 32Bh
		jz	short loc_5F8
		sub	eax, 1
		jz	short loc_5EB
		sub	eax, 3
		jz	short loc_5DE
		mov	dword ptr [ecx], 0
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_5DE:				; CODE XREF: _gost_pkey_meths+2Bj
		mov	eax, ds:_pmeth_Gost28147_MAC
		mov	[ecx], eax
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_5EB:				; CODE XREF: _gost_pkey_meths+26j
		mov	eax, ds:_pmeth_GostR3410_94
		mov	[ecx], eax
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_5F8:				; CODE XREF: _gost_pkey_meths+21j
		mov	eax, ds:_pmeth_GostR3410_2001
		mov	[ecx], eax
		mov	eax, 1
		retn
_gost_pkey_meths endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 608h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int printf(const char	*Format, ...)
		public _printf
_printf		proc near		; CODE XREF: _bind_gost+4Fp
					; _bind_gost+73p ...

Format		= dword	ptr  4
arg_4		= byte ptr  8

		push	esi
		mov	esi, [esp+4+Format]
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		lea	ecx, [esp+4+arg_4]
		push	ecx
		push	0
		push	esi
		push	eax
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		pop	esi
		retn
_printf		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 638h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _v_check
_v_check	proc near

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 20000h
		sbb	eax, eax
		and	eax, 0FFFE0000h
		add	eax, 20000h
		retn
_v_check	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 650h
; COMDAT (pick any)
		public ??_C@_0BM@HLPEKGOI@GOST?5engine?5already?5loaded?6?$AA@
; char `string'[]
??_C@_0BM@HLPEKGOI@GOST?5engine?5already?5loaded?6?$AA@	db 'GOST engine already loaded',0Ah,0
					; DATA XREF: _bind_gost+4Ao
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 66Ch
; COMDAT (pick any)
		public ??_C@_0BG@FBBPECPI@ENGINE_set_id?5failed?6?$AA@
; char `string'[]
??_C@_0BG@FBBPECPI@ENGINE_set_id?5failed?6?$AA@	db 'ENGINE_set_id failed',0Ah,0
					; DATA XREF: _bind_gost+6Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 684h
; COMDAT (pick any)
		public ??_C@_0BI@LHFEAHAE@ENGINE_set_name?5failed?6?$AA@
; char `string'[]
??_C@_0BI@LHFEAHAE@ENGINE_set_name?5failed?6?$AA@ db 'ENGINE_set_name failed',0Ah,0
					; DATA XREF: _bind_gost+93o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 69Ch
; COMDAT (pick any)
		public ??_C@_0BL@FHPMDDKB@ENGINE_set_digests?5failed?6?$AA@
; char `string'[]
??_C@_0BL@FHPMDDKB@ENGINE_set_digests?5failed?6?$AA@ db	'ENGINE_set_digests failed',0Ah,0
					; DATA XREF: _bind_gost+B7o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6B8h
; COMDAT (pick any)
		public ??_C@_0BL@OFMGLPFJ@ENGINE_set_ciphers?5failed?6?$AA@
; char `string'[]
??_C@_0BL@OFMGLPFJ@ENGINE_set_ciphers?5failed?6?$AA@ db	'ENGINE_set_ciphers failed',0Ah,0
					; DATA XREF: _bind_gost+DBo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6D4h
; COMDAT (pick any)
		public ??_C@_0BO@KJOAGKPP@ENGINE_set_pkey_meths?5failed?6?$AA@
; char `string'[]
??_C@_0BO@KJOAGKPP@ENGINE_set_pkey_meths?5failed?6?$AA@	db 'ENGINE_set_pkey_meths failed',0Ah,0
					; DATA XREF: _bind_gost+FFo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6F4h
; COMDAT (pick any)
		public ??_C@_0CD@CINJIFGL@ENGINE_set_pkey_asn1_meths?5faile@
; char `string'[]
??_C@_0CD@CINJIFGL@ENGINE_set_pkey_asn1_meths?5faile@ db 'ENGINE_set_pkey_asn1_meths failed',0Ah,0
					; DATA XREF: _bind_gost+123o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 718h
; COMDAT (pick any)
		public ??_C@_0BN@EDLOHGDH@ENGINE_set_cmd_defns?5failed?6?$AA@
; char `string'[]
??_C@_0BN@EDLOHGDH@ENGINE_set_cmd_defns?5failed?6?$AA@ db 'ENGINE_set_cmd_defns failed',0Ah,0
					; DATA XREF: _bind_gost+147o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 738h
; COMDAT (pick any)
		public ??_C@_0BN@FIDJFKDG@ENGINE_set_ctrl_func?5failed?6?$AA@
; char `string'[]
??_C@_0BN@FIDJFKDG@ENGINE_set_ctrl_func?5failed?6?$AA@ db 'ENGINE_set_ctrl_func failed',0Ah,0
					; DATA XREF: _bind_gost+177o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 758h
; COMDAT (pick any)
		public ??_C@_0BA@JOCBNIHN@GOST?5R?534?410?994?$AA@
; `string'
??_C@_0BA@JOCBNIHN@GOST?5R?534?410?994?$AA@ db 'GOST R 34.10-94',0
					; DATA XREF: _bind_gost+1D7o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 768h
; COMDAT (pick any)
		public ??_C@_06LGHNNDMJ@GOST94?$AA@
; `string'
??_C@_06LGHNNDMJ@GOST94?$AA@ db	'GOST94',0 ; DATA XREF: _bind_gost+1DCo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 770h
; COMDAT (pick any)
		public ??_C@_0BC@IBNIHBI@GOST?5R?534?410?92001?$AA@
; `string'
??_C@_0BC@IBNIHBI@GOST?5R?534?410?92001?$AA@ db	'GOST R 34.10-2001',0
					; DATA XREF: _bind_gost:loc_327o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 784h
; COMDAT (pick any)
		public ??_C@_08BPGGBNHA@GOST2001?$AA@
; `string'
??_C@_08BPGGBNHA@GOST2001?$AA@ db 'GOST2001',0 ; DATA XREF: _bind_gost:loc_32Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 790h
; COMDAT (pick any)
		public ??_C@_0BC@BPAGAEJB@GOST?528147?989?5MAC?$AA@
; `string'
??_C@_0BC@BPAGAEJB@GOST?528147?989?5MAC?$AA@ db	'GOST 28147-89 MAC',0
					; DATA XREF: _bind_gost+21Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7A4h
; COMDAT (pick any)
		public ??_C@_08CMLJHMHB@GOST?9MAC?$AA@
; `string'
??_C@_08CMLJHMHB@GOST?9MAC?$AA@	db 'GOST-MAC',0 ; DATA XREF: _bind_gost+224o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _bind_gost+14Ep
					; _bind_gost+17Ep ...
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _fprintf+19p	...
		extrn _CRYPTO_set_ex_data_implementation:near ;	CODE XREF: _bind_engine+52p
		extrn _CRYPTO_set_locking_callback:near	; CODE XREF: _bind_engine+2Ap
		extrn _CRYPTO_set_add_lock_callback:near ; CODE	XREF: _bind_engine+32p
		extrn _CRYPTO_set_dynlock_create_callback:near ; CODE XREF: _bind_engine+3Ap
		extrn _CRYPTO_set_dynlock_lock_callback:near ; CODE XREF: _bind_engine+42p
		extrn _CRYPTO_set_dynlock_destroy_callback:near
					; CODE XREF: _bind_engine+4Ap
		extrn _CRYPTO_set_mem_functions:near ; CODE XREF: _bind_engine+17p
		extrn _ERR_set_implementation:near ; CODE XREF:	_bind_engine+61p
		extrn _EVP_add_cipher:near ; CODE XREF:	_bind_gost+2BFp
					; _bind_gost+2D0p
		extrn _EVP_add_digest:near ; CODE XREF:	_bind_gost+2E1p
					; _bind_gost+2F2p
		extrn _ENGINE_register_ciphers:near ; CODE XREF: _bind_gost+294p
		extrn _ENGINE_register_digests:near ; CODE XREF: _bind_gost+2A1p
		extrn _ENGINE_register_pkey_meths:near ; CODE XREF: _bind_gost+2AEp
		extrn _ENGINE_set_id:near ; CODE XREF: _bind_gost+62p
		extrn _ENGINE_set_name:near ; CODE XREF: _bind_gost+87p
		extrn _ENGINE_set_destroy_function:near	; CODE XREF: _bind_gost+19Bp
		extrn _ENGINE_set_init_function:near ; CODE XREF: _bind_gost+1B1p
		extrn _ENGINE_set_finish_function:near ; CODE XREF: _bind_gost+1C7p
		extrn _ENGINE_set_ctrl_function:near ; CODE XREF: _bind_gost+16Bp
		extrn _ENGINE_set_ciphers:near ; CODE XREF: _bind_gost+CFp
		extrn _ENGINE_set_digests:near ; CODE XREF: _bind_gost+ABp
		extrn _ENGINE_set_pkey_meths:near ; CODE XREF: _bind_gost+F3p
		extrn _ENGINE_set_pkey_asn1_meths:near ; CODE XREF: _bind_gost+117p
		extrn _ENGINE_set_cmd_defns:near ; CODE	XREF: _bind_gost+13Bp
		extrn _ENGINE_get_static_state:near ; CODE XREF: _bind_engine+1p
		extrn _ERR_load_GOST_strings:near ; CODE XREF: _bind_gost+2FEp
		extrn _gost_control_func:near ;	DATA XREF: _bind_gost:loc_291o
		extrn _gost_param_free:near ; CODE XREF: _gost_engine_destroyp
		extrn _register_ameth_gost:near	; CODE XREF: _bind_gost+1EBp
					; _bind_gost+20Fp ...
		extrn _register_pmeth_gost:near	; CODE XREF: _bind_gost+24Fp
					; _bind_gost+26Bp ...
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso
		extrn _gost_cmds:near	; DATA XREF: _bind_gost:loc_261o
		extrn _digest_gost:near	; DATA XREF: _bind_gost+2DCo
					; _gost_digests+27o
		extrn _imit_gost_cpa:near ; DATA XREF: _bind_gost+2EDo
					; _gost_digests+38o
		extrn _cipher_gost:near	; DATA XREF: _bind_gost+2BAo
					; _gost_ciphers+27o
		extrn _cipher_gost_cpacnt:near ; DATA XREF: _bind_gost+2CBo
					; _gost_ciphers+38o


		end
