;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	E4897756C44A4035124050FDA8A833F2
; Input	CRC32 :	70CC8A9E

; File Name   :	C:\compspace\Diff\openssl\obj\rc4-586.obj
; Format      :	COFF (X386MAGIC)

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
; Segment alignment '64byte' can not be represented in assembly
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public L$_RC4_begin
L$_RC4_begin	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		mov	edx, [esp+10h+arg_4]
		mov	esi, [esp+10h+arg_8]
		mov	ebp, [esp+10h+arg_C]
		xor	eax, eax
		xor	ebx, ebx
		cmp	edx, 0
		jz	L$000abort
		mov	al, [edi]
		mov	bl, [edi+4]
		add	edi, 8
		lea	ecx, [esi+edx]
		sub	ebp, esi
		mov	[esp+10h+arg_4], ecx
		inc	al
		cmp	dword ptr [edi+100h], 0FFFFFFFFh
		jz	L$001RC4_CHAR
		mov	ecx, [edi+eax*4]
		and	edx, 0FFFFFFFCh
		jz	L$002loop1
		mov	[esp+10h+arg_C], ebp
		test	edx, 0FFFFFFF8h
		jz	L$003go4loop4
		lea	ebp, _OPENSSL_ia32cap_P
		bt	dword ptr [ebp+0], 1Ah
		jnb	L$003go4loop4
		mov	ebp, [esp+10h+arg_C]
		and	edx, 0FFFFFFF8h
		lea	edx, [esi+edx-8]
		mov	[edi-4], edx
		add	bl, cl
		mov	edx, [edi+ebx*4]
		mov	[edi+ebx*4], ecx
		mov	[edi+eax*4], edx
		inc	eax
		add	edx, ecx
		movzx	eax, al
		movzx	edx, dl
		movq	mm0, qword ptr [esi]
		mov	ecx, [edi+eax*4]
		movd	mm2, dword ptr [edi+edx*4]
		jmp	L$004loop_mmx_enter
; ---------------------------------------------------------------------------
		align 10h

L$005loop_mmx:				; CODE XREF: L$_RC4_begin+1C0j
		add	bl, cl
		psllq	mm1, 38h ; '8'
		mov	edx, [edi+ebx*4]
		mov	[edi+ebx*4], ecx
		mov	[edi+eax*4], edx
		inc	eax
		add	edx, ecx
		movzx	eax, al
		movzx	edx, dl
		pxor	mm2, mm1
		movq	mm0, qword ptr [esi]
		movq	qword ptr [ebp+esi-8], mm2
		mov	ecx, [edi+eax*4]
		movd	mm2, dword ptr [edi+edx*4]

L$004loop_mmx_enter:			; CODE XREF: L$_RC4_begin+9Aj
		add	bl, cl
		mov	edx, [edi+ebx*4]
		mov	[edi+ebx*4], ecx
		mov	[edi+eax*4], edx
		inc	eax
		add	edx, ecx
		movzx	eax, al
		movzx	edx, dl
		pxor	mm2, mm0
		mov	ecx, [edi+eax*4]
		movd	mm1, dword ptr [edi+edx*4]
		add	bl, cl
		psllq	mm1, 8
		mov	edx, [edi+ebx*4]
		mov	[edi+ebx*4], ecx
		mov	[edi+eax*4], edx
		inc	eax
		add	edx, ecx
		movzx	eax, al
		movzx	edx, dl
		pxor	mm2, mm1
		mov	ecx, [edi+eax*4]
		movd	mm1, dword ptr [edi+edx*4]
		add	bl, cl
		psllq	mm1, 10h
		mov	edx, [edi+ebx*4]
		mov	[edi+ebx*4], ecx
		mov	[edi+eax*4], edx
		inc	eax
		add	edx, ecx
		movzx	eax, al
		movzx	edx, dl
		pxor	mm2, mm1
		mov	ecx, [edi+eax*4]
		movd	mm1, dword ptr [edi+edx*4]
		add	bl, cl
		psllq	mm1, 18h
		mov	edx, [edi+ebx*4]
		mov	[edi+ebx*4], ecx
		mov	[edi+eax*4], edx
		inc	eax
		add	edx, ecx
		movzx	eax, al
		movzx	edx, dl
		pxor	mm2, mm1
		mov	ecx, [edi+eax*4]
		movd	mm1, dword ptr [edi+edx*4]
		add	bl, cl
		psllq	mm1, 20h ; ' '
		mov	edx, [edi+ebx*4]
		mov	[edi+ebx*4], ecx
		mov	[edi+eax*4], edx
		inc	eax
		add	edx, ecx
		movzx	eax, al
		movzx	edx, dl
		pxor	mm2, mm1
		mov	ecx, [edi+eax*4]
		movd	mm1, dword ptr [edi+edx*4]
		add	bl, cl
		psllq	mm1, 28h ; '('
		mov	edx, [edi+ebx*4]
		mov	[edi+ebx*4], ecx
		mov	[edi+eax*4], edx
		inc	eax
		add	edx, ecx
		movzx	eax, al
		movzx	edx, dl
		pxor	mm2, mm1
		mov	ecx, [edi+eax*4]
		movd	mm1, dword ptr [edi+edx*4]
		add	bl, cl
		psllq	mm1, 30h ; '0'
		mov	edx, [edi+ebx*4]
		mov	[edi+ebx*4], ecx
		mov	[edi+eax*4], edx
		inc	eax
		add	edx, ecx
		movzx	eax, al
		movzx	edx, dl
		pxor	mm2, mm1
		mov	ecx, [edi+eax*4]
		movd	mm1, dword ptr [edi+edx*4]
		mov	edx, ebx
		xor	ebx, ebx
		mov	bl, dl
		cmp	esi, [edi-4]
		lea	esi, [esi+8]
		jb	L$005loop_mmx
		psllq	mm1, 38h ; '8'
		pxor	mm2, mm1
		movq	qword ptr [ebp+esi-8], mm2
		emms
		cmp	esi, [esp+10h+arg_4]
		jz	L$006done
		jmp	L$002loop1
; ---------------------------------------------------------------------------
		align 10h

L$003go4loop4:				; CODE XREF: L$_RC4_begin+57j
					; L$_RC4_begin+68j
		lea	edx, [esi+edx-4]
		mov	[esp+10h+arg_8], edx

L$007loop4:				; CODE XREF: L$_RC4_begin+280j
		add	bl, cl
		mov	edx, [edi+ebx*4]
		mov	[edi+ebx*4], ecx
		mov	[edi+eax*4], edx
		add	edx, ecx
		inc	al
		and	edx, 0FFh
		mov	ecx, [edi+eax*4]
		mov	ebp, [edi+edx*4]
		add	bl, cl
		mov	edx, [edi+ebx*4]
		mov	[edi+ebx*4], ecx
		mov	[edi+eax*4], edx
		add	edx, ecx
		inc	al
		and	edx, 0FFh
		ror	ebp, 8
		mov	ecx, [edi+eax*4]
		or	ebp, [edi+edx*4]
		add	bl, cl
		mov	edx, [edi+ebx*4]
		mov	[edi+ebx*4], ecx
		mov	[edi+eax*4], edx
		add	edx, ecx
		inc	al
		and	edx, 0FFh
		ror	ebp, 8
		mov	ecx, [edi+eax*4]
		or	ebp, [edi+edx*4]
		add	bl, cl
		mov	edx, [edi+ebx*4]
		mov	[edi+ebx*4], ecx
		mov	[edi+eax*4], edx
		add	edx, ecx
		inc	al
		and	edx, 0FFh
		ror	ebp, 8
		mov	ecx, [esp+10h+arg_C]
		or	ebp, [edi+edx*4]
		ror	ebp, 8
		xor	ebp, [esi]
		cmp	esi, [esp+10h+arg_8]
		mov	[ecx+esi], ebp
		lea	esi, [esi+4]
		mov	ecx, [edi+eax*4]
		jb	L$007loop4
		cmp	esi, [esp+10h+arg_4]
		jz	L$006done
		mov	ebp, [esp+10h+arg_C]
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop

L$002loop1:				; CODE XREF: L$_RC4_begin+47j
					; L$_RC4_begin+1DEj ...
		add	bl, cl
		mov	edx, [edi+ebx*4]
		mov	[edi+ebx*4], ecx
		mov	[edi+eax*4], edx
		add	edx, ecx
		inc	al
		and	edx, 0FFh
		mov	edx, [edi+edx*4]
		xor	dl, [esi]
		lea	esi, [esi+1]
		mov	ecx, [edi+eax*4]
		cmp	esi, [esp+10h+arg_4]
		mov	[ebp+esi-1], dl
		jb	L$002loop1
		jmp	L$006done
; ---------------------------------------------------------------------------
		align 10h

L$001RC4_CHAR:				; CODE XREF: L$_RC4_begin+3Bj
		movzx	ecx, byte ptr [edi+eax]

L$008cloop1:				; CODE XREF: L$_RC4_begin+309j
		add	bl, cl
		movzx	edx, byte ptr [edi+ebx]
		mov	[edi+ebx], cl
		mov	[edi+eax], dl
		add	dl, cl
		movzx	edx, byte ptr [edi+edx]
		add	al, 1
		xor	dl, [esi]
		lea	esi, [esi+1]
		movzx	ecx, byte ptr [edi+eax]
		cmp	esi, [esp+10h+arg_4]
		mov	[ebp+esi-1], dl
		jb	L$008cloop1

L$006done:				; CODE XREF: L$_RC4_begin+1D8j
					; L$_RC4_begin+28Aj ...
		dec	al
		mov	[edi-4], ebx
		mov	[edi-8], al

L$000abort:				; CODE XREF: L$_RC4_begin+1Bj
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_RC4_begin	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_private_RC4_set_key_begin
L$_private_RC4_set_key_begin proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		mov	ebp, [esp+10h+arg_4]
		mov	esi, [esp+10h+arg_8]
		lea	edx, _OPENSSL_ia32cap_P
		lea	edi, [edi+8]
		lea	esi, [esi+ebp]
		neg	ebp
		xor	eax, eax
		mov	[edi-4], ebp
		bt	dword ptr [edx], 14h
		jb	L$009c1stloop
		nop
		nop
		nop

L$010w1stloop:				; CODE XREF: L$_private_RC4_set_key_begin+35j
		mov	[edi+eax*4], eax
		add	al, 1
		jnb	L$010w1stloop
		xor	ecx, ecx
		xor	edx, edx
		nop

L$011w2ndloop:				; CODE XREF: L$_private_RC4_set_key_begin+60j
		mov	eax, [edi+ecx*4]
		add	dl, [esi+ebp]
		add	dl, al
		add	ebp, 1
		mov	ebx, [edi+edx*4]
		jnz	L$012wnowrap
		mov	ebp, [edi-4]

L$012wnowrap:				; CODE XREF: L$_private_RC4_set_key_begin+4Ej
		mov	[edi+edx*4], eax
		mov	[edi+ecx*4], ebx
		add	cl, 1
		jnb	L$011w2ndloop
		jmp	L$013exit
; ---------------------------------------------------------------------------
		align 10h

L$009c1stloop:				; CODE XREF: L$_private_RC4_set_key_begin+27j
					; L$_private_RC4_set_key_begin+75j
		mov	[edi+eax], al
		add	al, 1
		jnb	L$009c1stloop
		xor	ecx, ecx
		xor	edx, edx
		xor	ebx, ebx
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop

L$014c2ndloop:				; CODE XREF: L$_private_RC4_set_key_begin+B0j
		mov	al, [edi+ecx]
		add	dl, [esi+ebp]
		add	dl, al
		add	ebp, 1
		mov	bl, [edi+edx]
		jnz	L$015cnowrap
		mov	ebp, [edi-4]

L$015cnowrap:				; CODE XREF: L$_private_RC4_set_key_begin+9Ej
		mov	[edi+edx], al
		mov	[edi+ecx], bl
		add	cl, 1
		jnb	L$014c2ndloop
		mov	dword ptr [edi+100h], 0FFFFFFFFh

L$013exit:				; CODE XREF: L$_private_RC4_set_key_begin+66j
		xor	eax, eax
		mov	[edi-8], eax
		mov	[edi-4], eax
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_private_RC4_set_key_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_RC4_options_begin
L$_RC4_options_begin proc near
		call	$+5

L$016pic_point:
		pop	eax
		lea	eax, (L$017opts	- 3F5h)[eax] ; "rc4(4x,int)"
		lea	edx, _OPENSSL_ia32cap_P
		mov	edx, [edx]
		bt	edx, 14h
		jb	L$0181xchar
		bt	edx, 1Ah
		jnb	L$019ret
		add	eax, 19h
		retn
; ---------------------------------------------------------------------------

L$0181xchar:				; CODE XREF: L$_RC4_options_begin+15j
		add	eax, 0Ch

L$019ret:				; CODE XREF: L$_RC4_options_begin+1Fj
		retn
L$_RC4_options_begin endp

; ---------------------------------------------------------------------------
		align 40h
L$017opts	db 'rc4(4x,int)',0      ; DATA XREF: L$_RC4_options_begin+6o
aRc41xChar	db 'rc4(1x,char)',0
aRc48xMmx	db 'rc4(8x,mmx)',0
aRc4ForX86Crypt	db 'RC4 for x86, CRYPTOGAMS by <appro@openssl.org>',0
		align 40h
_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
_bss		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _OPENSSL_ia32cap_P:near ;	DATA XREF: L$_RC4_begin+5Do
					; L$_private_RC4_set_key_begin+10o ...


		end
