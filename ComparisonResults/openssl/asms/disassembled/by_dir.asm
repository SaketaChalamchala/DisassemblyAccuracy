;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	8E5B97DF16538B4062C785ABAF18801E
; Input	CRC32 :	0B84BC77

; File Name   :	C:\compspace\Diff\openssl\obj\by_dir.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dir_ctrl	proc near		; DATA XREF: .data:000004F8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	[esp+arg_4], 2
		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [eax+0Ch]
		jnz	short loc_6E
		mov	eax, [esp+4+arg_C]
		cmp	eax, 3
		jnz	short loc_5E
		call	_X509_get_default_cert_dir_env
		push	eax		; VarName
		call	dword ptr ds:__imp__getenv
		add	esp, 4
		push	1
		test	eax, eax
		jnz	short loc_32
		call	_X509_get_default_cert_dir

loc_32:					; CODE XREF: _dir_ctrl+2Bj
		push	eax
		push	esi
		call	_add_cert_dir
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_5A
		push	8Ah ; 'Š'
		push	offset ??_C@_0BH@HEBEBEMJ@?4?2crypto?2x509?2by_dir?4c?$AA@ ; ".\\crypto\\x509\\by_dir.c"
		push	67h ; 'g'
		push	66h ; 'f'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h

loc_5A:					; CODE XREF: _dir_ctrl+40j
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_5E:					; CODE XREF: _dir_ctrl+16j
		push	eax
		push	[esp+8+arg_8]
		push	esi
		call	_add_cert_dir
		add	esp, 0Ch
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6E:					; CODE XREF: _dir_ctrl+Dj
		xor	eax, eax
		pop	esi
		retn
_dir_ctrl	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 74h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_new_dir	proc near		; DATA XREF: .data:000004E8o

arg_0		= dword	ptr  4

		push	esi
		push	97h ; '—'
		push	offset ??_C@_0BH@HEBEBEMJ@?4?2crypto?2x509?2by_dir?4c?$AA@ ; ".\\crypto\\x509\\by_dir.c"
		push	8
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_A3
		call	_BUF_MEM_new
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_A7
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_A3:					; CODE XREF: _new_dir+19j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_A7:					; CODE XREF: _new_dir+24j
		mov	eax, [esp+4+arg_0]
		mov	dword ptr [esi+4], 0
		mov	[eax+0Ch], esi
		mov	eax, 1
		pop	esi
		retn
_new_dir	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_free_dir	proc near		; DATA XREF: .data:000004ECo

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [eax+0Ch]
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_D9
		push	offset _by_dir_entry_free
		push	eax
		call	_sk_pop_free
		add	esp, 8

loc_D9:					; CODE XREF: _free_dir+Dj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_E8
		push	eax
		call	_BUF_MEM_free
		add	esp, 4

loc_E8:					; CODE XREF: _free_dir+21j
		push	esi
		call	_CRYPTO_free
		add	esp, 4
		pop	esi
		retn
_free_dir	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_get_cert_by_subject proc near		; DATA XREF: .data:000004FCo

var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D0		= dword	ptr -0D0h
var_84		= byte ptr -84h
var_7C		= dword	ptr -7Ch
var_68		= byte ptr -68h
var_54		= dword	ptr -54h
var_34		= byte ptr -34h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 104h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+104h+var_4], eax
		mov	eax, [esp+104h+arg_C]
		push	esi
		mov	esi, [esp+108h+arg_8]
		mov	[esp+108h+var_E4], eax
		mov	[esp+108h+var_F4], 0
		push	edi
		mov	edi, [esp+10Ch+arg_0]
		mov	[esp+10Ch+var_104], edi
		test	esi, esi
		jnz	short loc_150
		pop	edi
		xor	eax, eax
		pop	esi
		mov	ecx, [esp+104h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 104h
		retn
; ---------------------------------------------------------------------------

loc_150:				; CODE XREF: _get_cert_by_subject+41j
		push	ebx
		push	ebp
		mov	ebp, [esp+114h+arg_4]
		mov	[esp+114h+var_E0], ebp
		cmp	ebp, 1
		jnz	short loc_17A
		lea	eax, [esp+114h+var_68]
		mov	[esp+114h+var_54], esi
		mov	[esp+114h+var_F0], offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
		jmp	short loc_199
; ---------------------------------------------------------------------------

loc_17A:				; CODE XREF: _get_cert_by_subject+6Cj
		cmp	ebp, 2
		jnz	loc_4AE
		lea	eax, [esp+114h+var_84]
		mov	[esp+114h+var_7C], esi
		mov	[esp+114h+var_F0], offset ??_C@_01KDCPPGHE@r?$AA@ ; `string'

loc_199:				; CODE XREF: _get_cert_by_subject+84j
		mov	[esp+114h+var_D0], eax
		lea	eax, [esp+114h+var_D0]
		mov	[esp+114h+var_DC], eax
		call	_BUF_MEM_new
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_1C1
		push	127h
		push	offset ??_C@_0BH@HEBEBEMJ@?4?2crypto?2x509?2by_dir?4c?$AA@ ; ".\\crypto\\x509\\by_dir.c"
		push	7
		jmp	loc_4BA
; ---------------------------------------------------------------------------

loc_1C1:				; CODE XREF: _get_cert_by_subject+BAj
		mov	eax, [edi+0Ch]
		push	esi
		mov	[esp+118h+var_F8], eax
		call	_X509_NAME_hash
		mov	esi, eax
		xor	edi, edi
		mov	eax, [esp+118h+var_F8]
		mov	[esp+118h+var_100], esi
		mov	[esp+118h+var_E8], edi
		push	dword ptr [eax+4]
		call	_sk_num
		add	esp, 8
		test	eax, eax
		jle	$finish$67
		nop	dword ptr [eax]

loc_1F4:				; CODE XREF: _get_cert_by_subject+342j
		mov	eax, [esp+114h+var_F8]
		push	edi
		push	dword ptr [eax+4]
		call	_sk_value
		mov	edi, eax
		add	esp, 8
		mov	ecx, [edi]
		lea	edx, [ecx+1]

loc_20B:				; CODE XREF: _get_cert_by_subject+11Cj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_20B
		sub	ecx, edx
		lea	eax, [ecx+11h]
		push	eax
		push	ebx
		call	_BUF_MEM_grow
		add	esp, 8
		test	eax, eax
		jz	loc_48B
		cmp	ebp, 2
		jnz	short loc_290
		cmp	dword ptr [edi+8], 0
		jz	short loc_290
		push	13Ah
		push	offset ??_C@_0BH@HEBEBEMJ@?4?2crypto?2x509?2by_dir?4c?$AA@ ; ".\\crypto\\x509\\by_dir.c"
		push	0Bh
		push	5
		mov	[esp+124h+var_D8], esi
		call	_CRYPTO_lock
		lea	eax, [esp+124h+var_D8]
		push	eax
		push	dword ptr [edi+8]
		call	_sk_find
		add	esp, 18h
		test	eax, eax
		js	short loc_270
		push	eax
		push	dword ptr [edi+8]
		call	_sk_value
		add	esp, 8
		mov	esi, [eax+4]
		jmp	short loc_274
; ---------------------------------------------------------------------------

loc_270:				; CODE XREF: _get_cert_by_subject+169j
		xor	eax, eax
		xor	esi, esi

loc_274:				; CODE XREF: _get_cert_by_subject+17Aj
		push	143h
		push	offset ??_C@_0BH@HEBEBEMJ@?4?2crypto?2x509?2by_dir?4c?$AA@ ; ".\\crypto\\x509\\by_dir.c"
		push	0Bh
		push	6
		mov	[esp+124h+var_FC], eax
		call	_CRYPTO_lock
		add	esp, 10h
		jmp	short loc_298
; ---------------------------------------------------------------------------

loc_290:				; CODE XREF: _get_cert_by_subject+138j
					; _get_cert_by_subject+13Ej
		xor	esi, esi
		xor	eax, eax
		mov	[esp+114h+var_FC], eax

loc_298:				; CODE XREF: _get_cert_by_subject+19Aj
					; _get_cert_by_subject+20Bj
		push	esi
		push	[esp+118h+var_F0]
		push	[esp+11Ch+var_100]
		push	2Fh ; '/'
		push	dword ptr [edi]
		push	offset ??_C@_0P@NEPFKFLK@?$CFs?$CFc?$CF08lx?4?$CFs?$CFd?$AA@ ; "%s%c%08lx.%s%d"
		push	dword ptr [ebx+8]
		push	dword ptr [ebx+4]
		call	_BIO_snprintf
		lea	eax, [esp+134h+var_34]
		push	eax
		push	dword ptr [ebx+4]
		call	dword ptr ds:__imp___stat64i32
		add	esp, 28h
		test	eax, eax
		js	short loc_301
		cmp	ebp, 1
		jnz	short loc_2E3
		push	dword ptr [edi+4]
		push	dword ptr [ebx+4]
		push	[esp+11Ch+var_104]
		call	_X509_load_cert_file
		jmp	short loc_2F7
; ---------------------------------------------------------------------------

loc_2E3:				; CODE XREF: _get_cert_by_subject+1DCj
		cmp	ebp, 2
		jnz	short loc_2FE
		push	dword ptr [edi+4]
		push	dword ptr [ebx+4]
		push	[esp+11Ch+var_104]
		call	_X509_load_crl_file

loc_2F7:				; CODE XREF: _get_cert_by_subject+1EDj
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_301

loc_2FE:				; CODE XREF: _get_cert_by_subject+1F2j
		inc	esi
		jmp	short loc_298
; ---------------------------------------------------------------------------

loc_301:				; CODE XREF: _get_cert_by_subject+1D7j
					; _get_cert_by_subject+208j
		push	17Ch
		push	offset ??_C@_0BH@HEBEBEMJ@?4?2crypto?2x509?2by_dir?4c?$AA@ ; ".\\crypto\\x509\\by_dir.c"
		push	0Bh
		push	9
		call	_CRYPTO_lock
		lea	eax, [esp+124h+var_E0]
		push	eax
		mov	eax, [esp+128h+var_104]
		mov	eax, [eax+10h]
		push	dword ptr [eax+4]
		call	_sk_find
		add	esp, 18h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_349
		push	eax
		mov	eax, [esp+118h+var_104]
		mov	eax, [eax+10h]
		push	dword ptr [eax+4]
		call	_sk_value
		add	esp, 8
		mov	[esp+114h+var_EC], eax
		jmp	short loc_351
; ---------------------------------------------------------------------------

loc_349:				; CODE XREF: _get_cert_by_subject+23Aj
		mov	[esp+114h+var_EC], 0

loc_351:				; CODE XREF: _get_cert_by_subject+253j
		push	182h
		push	offset ??_C@_0BH@HEBEBEMJ@?4?2crypto?2x509?2by_dir?4c?$AA@ ; ".\\crypto\\x509\\by_dir.c"
		push	0Bh
		push	0Ah
		call	_CRYPTO_lock
		add	esp, 10h
		cmp	ebp, 2
		jnz	loc_40E
		push	187h
		push	offset ??_C@_0BH@HEBEBEMJ@?4?2crypto?2x509?2by_dir?4c?$AA@ ; ".\\crypto\\x509\\by_dir.c"
		push	0Bh
		push	9
		call	_CRYPTO_lock
		mov	eax, [esp+124h+var_FC]
		add	esp, 10h
		test	eax, eax
		jnz	short loc_3F0
		mov	eax, [esp+114h+var_100]
		mov	[esp+114h+var_D8], eax
		lea	eax, [esp+114h+var_D8]
		push	eax
		push	dword ptr [edi+8]
		call	_sk_find
		add	esp, 8
		test	eax, eax
		js	short loc_3BA
		push	eax
		push	dword ptr [edi+8]
		call	_sk_value
		add	esp, 8
		test	eax, eax
		jnz	short loc_3F0

loc_3BA:				; CODE XREF: _get_cert_by_subject+2B4j
		push	193h
		push	offset ??_C@_0BH@HEBEBEMJ@?4?2crypto?2x509?2by_dir?4c?$AA@ ; ".\\crypto\\x509\\by_dir.c"
		push	8
		call	_CRYPTO_malloc
		mov	ebp, eax
		mov	eax, [esp+120h+var_100]
		push	ebp
		mov	[ebp+0], eax
		mov	[ebp+4], esi
		push	dword ptr [edi+8]
		call	_sk_push
		add	esp, 14h
		test	eax, eax
		jz	short loc_43B
		mov	ebp, [esp+114h+arg_4]
		jmp	short loc_3F8
; ---------------------------------------------------------------------------

loc_3F0:				; CODE XREF: _get_cert_by_subject+298j
					; _get_cert_by_subject+2C4j
		cmp	[eax+4], esi
		jge	short loc_3F8
		mov	[eax+4], esi

loc_3F8:				; CODE XREF: _get_cert_by_subject+2FAj
					; _get_cert_by_subject+2FFj
		push	19Fh
		push	offset ??_C@_0BH@HEBEBEMJ@?4?2crypto?2x509?2by_dir?4c?$AA@ ; ".\\crypto\\x509\\by_dir.c"
		push	0Bh
		push	0Ah
		call	_CRYPTO_lock
		add	esp, 10h

loc_40E:				; CODE XREF: _get_cert_by_subject+276j
		mov	ecx, [esp+114h+var_EC]
		test	ecx, ecx
		jnz	short loc_46A
		mov	eax, [esp+114h+var_F8]
		mov	edi, [esp+114h+var_E8]
		inc	edi
		mov	[esp+114h+var_E8], edi
		push	dword ptr [eax+4]
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jge	short $finish$67
		mov	esi, [esp+114h+var_100]
		jmp	loc_1F4
; ---------------------------------------------------------------------------

loc_43B:				; CODE XREF: _get_cert_by_subject+2F1j
		push	197h
		push	offset ??_C@_0BH@HEBEBEMJ@?4?2crypto?2x509?2by_dir?4c?$AA@ ; ".\\crypto\\x509\\by_dir.c"
		push	0Bh
		push	0Ah
		call	_CRYPTO_lock
		push	ebp
		call	_CRYPTO_free
		add	esp, 14h
		mov	[esp+114h+var_F4], 0
		push	ebx
		call	_BUF_MEM_free
		add	esp, 4
		jmp	short loc_4C6
; ---------------------------------------------------------------------------

loc_46A:				; CODE XREF: _get_cert_by_subject+320j
		mov	edx, [esp+114h+var_E4]
		mov	eax, [ecx]
		push	ebx
		mov	[esp+118h+var_F4], 1
		mov	[edx], eax
		mov	eax, [ecx+4]
		mov	[edx+4], eax
		call	_BUF_MEM_free
		add	esp, 4
		jmp	short loc_4C6
; ---------------------------------------------------------------------------

loc_48B:				; CODE XREF: _get_cert_by_subject+12Fj
		push	135h
		push	offset ??_C@_0BH@HEBEBEMJ@?4?2crypto?2x509?2by_dir?4c?$AA@ ; ".\\crypto\\x509\\by_dir.c"
		push	41h ; 'A'
		push	67h ; 'g'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h

$finish$67:				; CODE XREF: _get_cert_by_subject+F7j
					; _get_cert_by_subject+33Cj
		push	ebx
		call	_BUF_MEM_free
		add	esp, 4
		jmp	short loc_4C6
; ---------------------------------------------------------------------------

loc_4AE:				; CODE XREF: _get_cert_by_subject+89j
		push	122h
		push	offset ??_C@_0BH@HEBEBEMJ@?4?2crypto?2x509?2by_dir?4c?$AA@ ; ".\\crypto\\x509\\by_dir.c"
		push	70h ; 'p'

loc_4BA:				; CODE XREF: _get_cert_by_subject+C8j
		push	67h ; 'g'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h

loc_4C6:				; CODE XREF: _get_cert_by_subject+374j
					; _get_cert_by_subject+395j ...
		mov	ecx, [esp+114h+var_4]
		mov	eax, [esp+114h+var_F4]
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 104h
		retn
_get_cert_by_subject endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 4E4h
		public _x509_dir_lookup
_x509_dir_lookup dd offset ??_C@_0CF@LKDMNFLO@Load?5certs?5from?5files?5in?5a?5direc@
					; DATA XREF: _X509_LOOKUP_hash_diro
					; "Load	certs from files in a directory"
		dd offset _new_dir
		dd offset _free_dir
		dd 2 dup(0)
		dd offset _dir_ctrl
		dd offset _get_cert_by_subject
		dd 3 dup(0)
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 50Ch
; COMDAT (pick any)
		public ??_C@_0CF@LKDMNFLO@Load?5certs?5from?5files?5in?5a?5direc@
; `string'
??_C@_0CF@LKDMNFLO@Load?5certs?5from?5files?5in?5a?5direc@ db 'Load certs from files in a directory',0
					; DATA XREF: .data:_x509_dir_lookupo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 534h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_LOOKUP_hash_dir
_X509_LOOKUP_hash_dir proc near
		mov	eax, offset _x509_dir_lookup
		retn
_X509_LOOKUP_hash_dir endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 53Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_add_cert_dir	proc near		; CODE XREF: _dir_ctrl+34p
					; _dir_ctrl+64p

Str2		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 8
		call	__chkstk
		mov	ecx, [esp+8+arg_4]
		test	ecx, ecx
		jz	loc_71E
		cmp	byte ptr [ecx],	0
		jz	loc_71E
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		push	ebp
		mov	ebp, ecx
		push	esi
		mov	[esp+14h+var_4], ebp
		push	edi
		nop	dword ptr [eax]

loc_56C:				; CODE XREF: _add_cert_dir+165j
		mov	al, [ebp+0]
		cmp	al, 3Bh	; ';'
		jz	short loc_57B
		test	al, al
		jnz	loc_697

loc_57B:				; CODE XREF: _add_cert_dir+35j
		mov	eax, ecx
		mov	edi, ebp
		mov	[esp+18h+Str2],	eax
		lea	ecx, [ebp+1]
		mov	[esp+18h+arg_4], ecx
		sub	edi, eax
		jz	loc_697
		push	dword ptr [ebx+4]
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_5F0

loc_5A3:				; CODE XREF: _add_cert_dir+AEj
		push	esi
		push	dword ptr [ebx+4]
		call	_sk_value
		add	esp, 8
		mov	edx, [eax]
		mov	eax, edx
		lea	ebp, [eax+1]
		nop	word ptr [eax+eax+00h]

loc_5BC:				; CODE XREF: _add_cert_dir+85j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_5BC
		sub	eax, ebp
		cmp	eax, edi
		jnz	short loc_5DC
		push	edi		; MaxCount
		push	[esp+1Ch+Str2]	; Str2
		push	edx		; Str1
		call	dword ptr ds:__imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_5EC

loc_5DC:				; CODE XREF: _add_cert_dir+8Bj
		push	dword ptr [ebx+4]
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_5A3

loc_5EC:				; CODE XREF: _add_cert_dir+9Ej
		mov	ebp, [esp+18h+var_4]

loc_5F0:				; CODE XREF: _add_cert_dir+65j
		push	dword ptr [ebx+4]
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	loc_693
		cmp	dword ptr [ebx+4], 0
		jnz	short loc_619
		call	_sk_new_null
		mov	[ebx+4], eax
		test	eax, eax
		jz	loc_6B4

loc_619:				; CODE XREF: _add_cert_dir+CBj
		push	0E9h ; 'é'
		push	offset ??_C@_0BH@HEBEBEMJ@?4?2crypto?2x509?2by_dir?4c?$AA@ ; ".\\crypto\\x509\\by_dir.c"
		push	0Ch
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	loc_6DF
		mov	eax, [esp+18h+arg_8]
		push	offset _by_dir_hash_cmp
		mov	[esi+4], eax
		call	_sk_new
		push	0EEh ; 'î'
		mov	[esi+8], eax
		lea	eax, [edi+1]
		push	offset ??_C@_0BH@HEBEBEMJ@?4?2crypto?2x509?2by_dir?4c?$AA@ ; ".\\crypto\\x509\\by_dir.c"
		push	eax
		call	_CRYPTO_malloc
		add	esp, 10h
		mov	[esi], eax
		test	eax, eax
		jz	loc_6F6
		cmp	dword ptr [esi+8], 0
		jz	short loc_6E9
		push	edi		; Count
		push	[esp+1Ch+Str2]	; Source
		push	eax		; Dest
		call	dword ptr ds:__imp__strncpy
		mov	eax, [esi]
		push	esi
		mov	byte ptr [edi+eax], 0
		push	dword ptr [ebx+4]
		call	_sk_push
		add	esp, 14h
		test	eax, eax
		jz	short loc_6D6

loc_693:				; CODE XREF: _add_cert_dir+C1j
		mov	ecx, [esp+18h+arg_4]

loc_697:				; CODE XREF: _add_cert_dir+39j
					; _add_cert_dir+50j
		mov	al, [ebp+0]
		inc	ebp
		mov	[esp+18h+var_4], ebp
		test	al, al
		jnz	loc_56C
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_6B4:				; CODE XREF: _add_cert_dir+D7j
		push	0E5h ; 'å'
		push	offset ??_C@_0BH@HEBEBEMJ@?4?2crypto?2x509?2by_dir?4c?$AA@ ; ".\\crypto\\x509\\by_dir.c"
		push	41h ; 'A'
		push	64h ; 'd'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_6D6:				; CODE XREF: _add_cert_dir+155j
		push	esi
		call	_by_dir_entry_free
		add	esp, 4

loc_6DF:				; CODE XREF: _add_cert_dir+F5j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_6E9:				; CODE XREF: _add_cert_dir+133j
		test	eax, eax
		jz	short loc_6F6
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_6F6:				; CODE XREF: _add_cert_dir+129j
					; _add_cert_dir+1AFj
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_70B
		push	offset _by_dir_hash_free
		push	eax
		call	_sk_pop_free
		add	esp, 8

loc_70B:				; CODE XREF: _add_cert_dir+1BFj
		push	esi
		call	_CRYPTO_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_71E:				; CODE XREF: _add_cert_dir+10j
					; _add_cert_dir+19j
		push	0CCh ; 'Ì'
		push	offset ??_C@_0BH@HEBEBEMJ@?4?2crypto?2x509?2by_dir?4c?$AA@ ; ".\\crypto\\x509\\by_dir.c"
		push	71h ; 'q'
		push	64h ; 'd'
		push	0Bh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		add	esp, 8
		retn
_add_cert_dir	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 73Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_by_dir_entry_free proc	near		; CODE XREF: _add_cert_dir+19Bp
					; DATA XREF: _free_dir+Fo

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_750
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_750:				; CODE XREF: _by_dir_entry_free+9j
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_765
		push	offset _by_dir_hash_free
		push	eax
		call	_sk_pop_free
		add	esp, 8

loc_765:				; CODE XREF: _by_dir_entry_free+19j
		push	esi
		call	_CRYPTO_free
		add	esp, 4
		pop	esi
		retn
_by_dir_entry_free endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 770h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_by_dir_hash_cmp proc near		; DATA XREF: _add_cert_dir+FFo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		mov	ecx, [eax]
		mov	eax, [esp+arg_4]
		mov	eax, [eax]
		mov	eax, [eax]
		cmp	ecx, eax
		jbe	short loc_78A
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_78A:				; CODE XREF: _by_dir_hash_cmp+12j
		sbb	eax, eax
		retn
_by_dir_hash_cmp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 790h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_by_dir_hash_free proc near		; DATA XREF: _add_cert_dir+1C1o
					; _by_dir_entry_free+1Bo
		jmp	_CRYPTO_free
_by_dir_hash_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 798h
; COMDAT (pick any)
		public ??_C@_0BH@HEBEBEMJ@?4?2crypto?2x509?2by_dir?4c?$AA@
; `string'
??_C@_0BH@HEBEBEMJ@?4?2crypto?2x509?2by_dir?4c?$AA@ db '.\crypto\x509\by_dir.c',0
					; DATA XREF: _dir_ctrl+47o _new_dir+6o ...
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 7B0h
; COMDAT (pick any)
		public ??_C@_00CNPNBAHC@?$AA@
; `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: _get_cert_by_subject+7Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7B4h
; COMDAT (pick any)
		public ??_C@_01KDCPPGHE@r?$AA@
; `string'
??_C@_01KDCPPGHE@r?$AA@	db 72h,	0	; DATA XREF: _get_cert_by_subject+9Do
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7B8h
; COMDAT (pick any)
		public ??_C@_0P@NEPFKFLK@?$CFs?$CFc?$CF08lx?4?$CFs?$CFd?$AA@
; `string'
??_C@_0P@NEPFKFLK@?$CFs?$CFc?$CF08lx?4?$CFs?$CFd?$AA@ db '%s%c%08lx.%s%d',0
					; DATA XREF: _get_cert_by_subject+1B1o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; char *__cdecl	_getenv(const char *VarName)
		extrn __imp__getenv:near ; CODE	XREF: _dir_ctrl+1Ep
					; DATA XREF: _dir_ctrl+1Er
; int __cdecl _strncmp(const char *Str1, const char *Str2, size_t MaxCount)
		extrn __imp__strncmp:near ; CODE XREF: _add_cert_dir+93p
					; DATA XREF: _add_cert_dir+93r
; char *__cdecl	_strncpy(char *Dest, const char	*Source, size_t	Count)
		extrn __imp__strncpy:near ; CODE XREF: _add_cert_dir+13Bp
					; DATA XREF: _add_cert_dir+13Br
		extrn _sk_num:near	; CODE XREF: _get_cert_by_subject+EDp
					; _get_cert_by_subject+332p ...
		extrn _sk_value:near	; CODE XREF: _get_cert_by_subject+108p
					; _get_cert_by_subject+16Fp ...
		extrn _sk_new:near	; CODE XREF: _add_cert_dir+107p
		extrn _sk_new_null:near	; CODE XREF: _add_cert_dir+CDp
		extrn _sk_pop_free:near	; CODE XREF: _free_dir+15p
					; _add_cert_dir+1C7p ...
		extrn _sk_find:near	; CODE XREF: _get_cert_by_subject+15Fp
					; _get_cert_by_subject+22Fp ...
		extrn _sk_push:near	; CODE XREF: _get_cert_by_subject+2E7p
					; _add_cert_dir+14Bp
		extrn _CRYPTO_lock:near	; CODE XREF: _get_cert_by_subject+152p
					; _get_cert_by_subject+192p ...
		extrn _CRYPTO_malloc:near ; CODE XREF: _new_dir+Dp
					; _get_cert_by_subject+2D2p ...
		extrn _CRYPTO_free:near	; CODE XREF: _new_dir+27p
					; _free_dir+2Dp ...
		extrn _BUF_MEM_new:near	; CODE XREF: _new_dir+1Bp
					; _get_cert_by_subject+B1p
		extrn _BUF_MEM_free:near ; CODE	XREF: _free_dir+24p
					; _get_cert_by_subject+36Cp ...
		extrn _BUF_MEM_grow:near ; CODE	XREF: _get_cert_by_subject+125p
		extrn _BIO_snprintf:near ; CODE	XREF: _get_cert_by_subject+1BCp
		extrn _ERR_put_error:near ; CODE XREF: _dir_ctrl+52p
					; _get_cert_by_subject+3A7p ...
		extrn __imp___stat64i32:near ; CODE XREF: _get_cert_by_subject+1CCp
					; DATA XREF: _get_cert_by_subject+1CCr
		extrn _X509_load_cert_file:near	; CODE XREF: _get_cert_by_subject+1E8p
		extrn _X509_load_crl_file:near ; CODE XREF: _get_cert_by_subject+1FEp
		extrn _X509_get_default_cert_dir:near ;	CODE XREF: _dir_ctrl+2Dp
		extrn _X509_get_default_cert_dir_env:near ; CODE XREF: _dir_ctrl+18p
		extrn _X509_NAME_hash:near ; CODE XREF:	_get_cert_by_subject+D5p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _get_cert_by_subject+50p
					; _get_cert_by_subject+3E3p
		extrn __chkstk:near	; CODE XREF: _get_cert_by_subject+5p
					; _add_cert_dir+5p
		extrn ___security_cookie:near ;	DATA XREF: _get_cert_by_subject+Ar


		end
