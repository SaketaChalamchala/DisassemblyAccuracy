;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	898E08CD288E25E2C2FF332E454AF4A9
; Input	CRC32 :	611E61EE

; File Name   :	C:\compspace\Diff\openssl\obj\v3_ncons.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
; `GENERAL_SUBTREE_it'::`2'::local_it
?local_it@?1??GENERAL_SUBTREE_it@@9@9 dd 1, 10h	; DATA XREF: _GENERAL_SUBTREE_ito
					; _v2i_NAME_CONSTRAINTS+A5o ...
		dd offset _GENERAL_SUBTREE_seq_tt
		dd 3, 0
		dd 0Ch
		dd offset ??_C@_0BA@ECMIFHDE@GENERAL_SUBTREE?$AA@ ; "GENERAL_SUBTREE"
_NAME_CONSTRAINTS_seq_tt dd offset off_8C+1 ; DATA XREF: .rdata:0000004Co
		dd 2 dup(0)
		dd offset ??_C@_0BC@FACFJLFB@permittedSubtrees?$AA@ ; "permittedSubtrees"
		dd offset _GENERAL_SUBTREE_it
		dd offset off_8C+1
		dd 1, 4
		dd offset ??_C@_0BB@HLFEMJKE@excludedSubtrees?$AA@ ; "excludedSubtrees"
		dd offset _GENERAL_SUBTREE_it
; `NAME_CONSTRAINTS_it'::`2'::local_it
?local_it@?1??NAME_CONSTRAINTS_it@@9@9 dd 1, 10h ; DATA	XREF: _NAME_CONSTRAINTS_ito
					; _v2i_NAME_CONSTRAINTS+Eo ...
		dd offset _NAME_CONSTRAINTS_seq_tt
		dd 2, 0
		dd 8
		dd offset ??_C@_0BB@MLLJAFMN@NAME_CONSTRAINTS?$AA@ ; "NAME_CONSTRAINTS"
		public _v3_name_constraints
_v3_name_constraints dd	offset loc_29A
		align 8
		dd offset _NAME_CONSTRAINTS_it
		dd 7 dup(0)
off_88		dd offset _v2i_NAME_CONSTRAINTS	; DATA XREF: .rdata:000000ACo
					; .rdata:000000C0o
off_8C		dd offset _i2r_NAME_CONSTRAINTS
					; DATA XREF: .rdata:_NAME_CONSTRAINTS_seq_tto
					; .rdata:00000030o
		dd 2 dup(0)
_GENERAL_SUBTREE_seq_tt	dd 3 dup(0)	; DATA XREF: .rdata:00000008o
		dd offset ??_C@_04BHIIPFEC@base?$AA@ ; "base"
		dd offset _GENERAL_NAME_it
		dd offset off_88+1
		dd 0
		dd 4
		dd offset ??_C@_07CCOEHHFD@minimum?$AA@	; "minimum"
		dd offset _ASN1_INTEGER_it
		dd offset off_88+1
		dd 1, 8
		dd offset ??_C@_07MEIENILC@maximum?$AA@	; "maximum"
		dd offset _ASN1_INTEGER_it
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D4h
; COMDAT (pick any)
		public ??_C@_0BA@ECMIFHDE@GENERAL_SUBTREE?$AA@
; `string'
??_C@_0BA@ECMIFHDE@GENERAL_SUBTREE?$AA@	db 'GENERAL_SUBTREE',0 ; DATA XREF: .rdata:00000018o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E4h
; COMDAT (pick any)
		public ??_C@_0BC@FACFJLFB@permittedSubtrees?$AA@
; `string'
??_C@_0BC@FACFJLFB@permittedSubtrees?$AA@ db 'permittedSubtrees',0
					; DATA XREF: .rdata:00000028o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F8h
; COMDAT (pick any)
		public ??_C@_0BB@HLFEMJKE@excludedSubtrees?$AA@
; `string'
??_C@_0BB@HLFEMJKE@excludedSubtrees?$AA@ db 'excludedSubtrees',0
					; DATA XREF: .rdata:0000003Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10Ch
; COMDAT (pick any)
		public ??_C@_0BB@MLLJAFMN@NAME_CONSTRAINTS?$AA@
; `string'
??_C@_0BB@MLLJAFMN@NAME_CONSTRAINTS?$AA@ db 'NAME_CONSTRAINTS',0
					; DATA XREF: .rdata:0000005Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 120h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _GENERAL_SUBTREE_it
_GENERAL_SUBTREE_it proc near		; DATA XREF: .rdata:0000002Co
					; .rdata:00000040o
		mov	eax, offset ?local_it@?1??GENERAL_SUBTREE_it@@9@9 ; `GENERAL_SUBTREE_it'::`2'::local_it
		retn
_GENERAL_SUBTREE_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 128h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NAME_CONSTRAINTS_it
_NAME_CONSTRAINTS_it proc near		; DATA XREF: .rdata:00000068o
		mov	eax, offset ?local_it@?1??NAME_CONSTRAINTS_it@@9@9 ; `NAME_CONSTRAINTS_it'::`2'::local_it
		retn
_NAME_CONSTRAINTS_it endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 130h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_v2i_NAME_CONSTRAINTS proc near		; DATA XREF: .rdata:off_88o

var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 10h
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	edi
		push	offset ?local_it@?1??NAME_CONSTRAINTS_it@@9@9 ;	`NAME_CONSTRAINTS_it'::`2'::local_it
		xor	esi, esi
		call	_ASN1_item_new
		mov	edi, eax
		add	esp, 4
		mov	[esp+20h+var_10], edi
		test	edi, edi
		jz	$memerr$45
		mov	ebx, [esp+20h+arg_8]
		xor	ebp, ebp
		push	ebx
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	loc_244

loc_172:				; CODE XREF: _v2i_NAME_CONSTRAINTS+10Ej
		push	ebp
		push	ebx
		call	_sk_value
		mov	ebx, eax
		push	9		; MaxCount
		push	offset ??_C@_09HAKFOFAM@permitted?$AA@ ; "permitted"
		push	dword ptr [ebx+4] ; Str1
		call	dword ptr ds:__imp__strncmp
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1A0
		mov	eax, [ebx+4]
		cmp	byte ptr [eax+9], 0
		jz	short loc_1A0
		add	eax, 0Ah
		jmp	short loc_1CE
; ---------------------------------------------------------------------------

loc_1A0:				; CODE XREF: _v2i_NAME_CONSTRAINTS+60j
					; _v2i_NAME_CONSTRAINTS+69j
		push	8		; MaxCount
		push	offset ??_C@_08HPCEJEEF@excluded?$AA@ ;	"excluded"
		push	dword ptr [ebx+4] ; Str1
		call	dword ptr ds:__imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_24E
		mov	eax, [ebx+4]
		cmp	byte ptr [eax+8], 0
		jz	loc_24E
		add	edi, 4
		add	eax, 9

loc_1CE:				; CODE XREF: _v2i_NAME_CONSTRAINTS+6Ej
		mov	[esp+20h+var_8], eax
		mov	eax, [ebx+8]
		push	offset ?local_it@?1??GENERAL_SUBTREE_it@@9@9 ; `GENERAL_SUBTREE_it'::`2'::local_it
		mov	[esp+24h+var_4], eax
		call	_ASN1_item_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short $memerr$45
		push	1
		lea	eax, [esp+24h+var_C]
		push	eax
		push	[esp+28h+arg_4]
		push	[esp+2Ch+arg_0]
		push	dword ptr [esi]
		call	_v2i_GENERAL_NAME_ex
		add	esp, 14h
		test	eax, eax
		jz	short $err$46
		cmp	dword ptr [edi], 0
		jnz	short loc_219
		call	_sk_new_null
		mov	[edi], eax
		test	eax, eax
		jz	short $memerr$45

loc_219:				; CODE XREF: _v2i_NAME_CONSTRAINTS+DCj
		push	esi
		push	dword ptr [edi]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	short $memerr$45
		mov	ebx, [esp+20h+arg_8]
		xor	esi, esi
		push	ebx
		inc	ebp
		call	_sk_num
		mov	edi, [esp+24h+var_10]
		add	esp, 4
		cmp	ebp, eax
		jl	loc_172

loc_244:				; CODE XREF: _v2i_NAME_CONSTRAINTS+3Cj
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_24E:				; CODE XREF: _v2i_NAME_CONSTRAINTS+85j
					; _v2i_NAME_CONSTRAINTS+92j
		push	82h ; 'Ç'
		push	offset ??_C@_0BL@IDMCNIEC@?4?2crypto?2x509v3?2v3_ncons?4c?$AA@ ; ".\\crypto\\x509v3\\v3_ncons.c"
		push	8Fh ; 'è'
		jmp	short loc_26B
; ---------------------------------------------------------------------------

$memerr$45:				; CODE XREF: _v2i_NAME_CONSTRAINTS+25j
					; _v2i_NAME_CONSTRAINTS+BAj ...
		push	95h ; 'ï'
		push	offset ??_C@_0BL@IDMCNIEC@?4?2crypto?2x509v3?2v3_ncons?4c?$AA@ ; ".\\crypto\\x509v3\\v3_ncons.c"
		push	41h ; 'A'

loc_26B:				; CODE XREF: _v2i_NAME_CONSTRAINTS+12Dj
		push	93h ; 'ì'
		push	22h ; '"'
		call	_ERR_put_error
		add	esp, 14h

$err$46:				; CODE XREF: _v2i_NAME_CONSTRAINTS+D7j
		mov	eax, [esp+20h+var_10]
		test	eax, eax
		jz	short loc_290
		push	offset ?local_it@?1??NAME_CONSTRAINTS_it@@9@9 ;	`NAME_CONSTRAINTS_it'::`2'::local_it
		push	eax
		call	_ASN1_item_free
		add	esp, 8

loc_290:				; CODE XREF: _v2i_NAME_CONSTRAINTS+150j
		test	esi, esi
		jz	short loc_2A2
		push	offset ?local_it@?1??GENERAL_SUBTREE_it@@9@9 ; `GENERAL_SUBTREE_it'::`2'::local_it
		push	esi

loc_29A:				; DATA XREF: .rdata:_v3_name_constraintso
		call	_ASN1_item_free
		add	esp, 8

loc_2A2:				; CODE XREF: _v2i_NAME_CONSTRAINTS+162j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 10h
		retn
_v2i_NAME_CONSTRAINTS endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_i2r_NAME_CONSTRAINTS proc near		; DATA XREF: .rdata:off_8Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		mov	edi, [esp+4+arg_4]
		push	offset ??_C@_09DPPIOGNM@Permitted?$AA@ ; "Permitted"
		push	[esp+8+arg_C]
		push	[esp+0Ch+arg_8]
		push	dword ptr [edi]
		push	[esp+14h+arg_0]
		call	_do_i2r_name_constraints
		push	offset ??_C@_08PNNFBGOG@Excluded?$AA@ ;	"Excluded"
		push	[esp+1Ch+arg_C]
		push	[esp+20h+arg_8]
		push	dword ptr [edi+4]
		push	[esp+28h+arg_0]
		call	_do_i2r_name_constraints
		add	esp, 28h
		mov	eax, 1
		pop	edi
		retn
_i2r_NAME_CONSTRAINTS endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2ECh
; COMDAT (pick any)
		public ??_C@_04BHIIPFEC@base?$AA@
; `string'
??_C@_04BHIIPFEC@base?$AA@ db 'base',0  ; DATA XREF: .rdata:000000A4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2F4h
; COMDAT (pick any)
		public ??_C@_07CCOEHHFD@minimum?$AA@
; `string'
??_C@_07CCOEHHFD@minimum?$AA@ db 'minimum',0 ; DATA XREF: .rdata:000000B8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2FCh
; COMDAT (pick any)
		public ??_C@_07MEIENILC@maximum?$AA@
; `string'
??_C@_07MEIENILC@maximum?$AA@ db 'maximum',0 ; DATA XREF: .rdata:000000CCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 304h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _GENERAL_SUBTREE_free
_GENERAL_SUBTREE_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??GENERAL_SUBTREE_it@@9@9 ; `GENERAL_SUBTREE_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_GENERAL_SUBTREE_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 318h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _GENERAL_SUBTREE_new
_GENERAL_SUBTREE_new proc near
		push	offset ?local_it@?1??GENERAL_SUBTREE_it@@9@9 ; `GENERAL_SUBTREE_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_GENERAL_SUBTREE_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 328h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NAME_CONSTRAINTS_check
_NAME_CONSTRAINTS_check	proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 8
		call	__chkstk
		push	ebx
		push	esi
		push	edi
		push	[esp+14h+arg_0]
		call	_X509_get_subject_name
		mov	edi, eax
		push	edi
		call	_X509_NAME_entry_count
		mov	ebx, [esp+1Ch+arg_4]
		add	esp, 8
		test	eax, eax
		jle	loc_3DF
		lea	eax, [esp+14h+var_8]
		mov	[esp+14h+var_8], 4
		push	ebx
		push	eax
		mov	[esp+1Ch+var_4], edi
		call	_nc_match
		add	esp, 8
		test	eax, eax
		jnz	loc_50F
		push	0FFFFFFFFh
		push	30h ; '0'
		push	edi
		mov	[esp+20h+var_8], 1
		call	_X509_NAME_get_index_by_NID
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, 0FFFFFFFFh
		jz	short loc_3DF
		nop	dword ptr [eax+eax+00h]

loc_398:				; CODE XREF: _NAME_CONSTRAINTS_check+B5j
		push	esi
		push	edi
		call	_X509_NAME_get_entry
		push	eax
		call	_X509_NAME_ENTRY_get_data
		add	esp, 0Ch
		mov	[esp+14h+var_4], eax
		cmp	dword ptr [eax+4], 16h
		jnz	loc_464
		lea	eax, [esp+14h+var_8]
		push	ebx
		push	eax
		call	_nc_match
		add	esp, 8
		test	eax, eax
		jnz	loc_50F
		push	esi
		push	30h ; '0'
		push	edi
		call	_X509_NAME_get_index_by_NID
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_398

loc_3DF:				; CODE XREF: _NAME_CONSTRAINTS_check+27j
					; _NAME_CONSTRAINTS_check+69j
		mov	edi, [esp+14h+arg_0]
		push	ebp
		xor	ebp, ebp
		mov	[esp+18h+var_8], ebp
		push	dword ptr [edi+48h]
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	loc_50C

loc_3FD:				; CODE XREF: _NAME_CONSTRAINTS_check+1DEj
		push	ebp
		push	dword ptr [edi+48h]
		call	_sk_value
		push	dword ptr [ebx]
		mov	ebp, eax
		xor	esi, esi
		xor	edi, edi
		call	_sk_num
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_491

loc_41A:				; CODE XREF: _NAME_CONSTRAINTS_check+15Ej
		push	edi
		push	dword ptr [ebx]
		call	_sk_value
		mov	ecx, [ebp+0]
		add	esp, 8
		mov	edx, [eax]
		cmp	ecx, [edx]
		jnz	short loc_479
		cmp	dword ptr [eax+4], 0
		jnz	loc_530
		cmp	dword ptr [eax+8], 0
		jnz	loc_530
		cmp	esi, 2
		jz	short loc_479
		push	edx
		test	esi, esi
		mov	eax, 1
		push	ebp
		cmovz	esi, eax
		call	_nc_match_single
		add	esp, 8
		test	eax, eax
		jnz	short loc_470
		lea	esi, [eax+2]
		jmp	short loc_479
; ---------------------------------------------------------------------------

loc_464:				; CODE XREF: _NAME_CONSTRAINTS_check+88j
		pop	edi
		pop	esi
		mov	eax, 35h ; '5'
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_470:				; CODE XREF: _NAME_CONSTRAINTS_check+135j
		cmp	eax, 2Fh ; '/'
		jnz	loc_50E

loc_479:				; CODE XREF: _NAME_CONSTRAINTS_check+104j
					; _NAME_CONSTRAINTS_check+11Dj	...
		push	dword ptr [ebx]
		inc	edi
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jl	short loc_41A
		cmp	esi, 1
		jz	loc_516

loc_491:				; CODE XREF: _NAME_CONSTRAINTS_check+F0j
		push	dword ptr [ebx+4]
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_4EC
		nop	word ptr [eax+eax+00h]

loc_4A8:				; CODE XREF: _NAME_CONSTRAINTS_check+1C2j
		push	esi
		push	dword ptr [ebx+4]
		call	_sk_value
		mov	ecx, [ebp+0]
		add	esp, 8
		mov	edx, [eax]
		cmp	ecx, [edx]
		jnz	short loc_4DC
		cmp	dword ptr [eax+4], 0
		jnz	short loc_530
		cmp	dword ptr [eax+8], 0
		jnz	short loc_530
		push	edx
		push	ebp
		call	_nc_match_single
		add	esp, 8
		test	eax, eax
		jz	short loc_523
		cmp	eax, 2Fh ; '/'
		jnz	short loc_50E

loc_4DC:				; CODE XREF: _NAME_CONSTRAINTS_check+193j
		push	dword ptr [ebx+4]
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_4A8

loc_4EC:				; CODE XREF: _NAME_CONSTRAINTS_check+178j
		mov	edi, [esp+18h+arg_0]
		mov	ebp, [esp+18h+var_8]
		inc	ebp
		mov	[esp+18h+var_8], ebp
		push	dword ptr [edi+48h]
		call	_sk_num
		add	esp, 4
		cmp	ebp, eax
		jl	loc_3FD

loc_50C:				; CODE XREF: _NAME_CONSTRAINTS_check+CFj
		xor	eax, eax

loc_50E:				; CODE XREF: _NAME_CONSTRAINTS_check+14Bj
					; _NAME_CONSTRAINTS_check+1B2j
		pop	ebp

loc_50F:				; CODE XREF: _NAME_CONSTRAINTS_check+49j
					; _NAME_CONSTRAINTS_check+9Ej
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_516:				; CODE XREF: _NAME_CONSTRAINTS_check+163j
		pop	ebp
		pop	edi
		pop	esi
		mov	eax, 2Fh ; '/'
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_523:				; CODE XREF: _NAME_CONSTRAINTS_check+1ADj
		pop	ebp
		pop	edi
		pop	esi
		mov	eax, 30h ; '0'
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_530:				; CODE XREF: _NAME_CONSTRAINTS_check+10Aj
					; _NAME_CONSTRAINTS_check+114j	...
		pop	ebp
		pop	edi
		pop	esi
		mov	eax, 31h ; '1'
		pop	ebx
		add	esp, 8
		retn
_NAME_CONSTRAINTS_check	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 540h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NAME_CONSTRAINTS_free
_NAME_CONSTRAINTS_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??NAME_CONSTRAINTS_it@@9@9 ;	`NAME_CONSTRAINTS_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_NAME_CONSTRAINTS_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 554h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _NAME_CONSTRAINTS_new
_NAME_CONSTRAINTS_new proc near
		push	offset ?local_it@?1??NAME_CONSTRAINTS_it@@9@9 ;	`NAME_CONSTRAINTS_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_NAME_CONSTRAINTS_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 564h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_do_i2r_name_constraints proc near	; CODE XREF: _i2r_NAME_CONSTRAINTS+18p
					; _i2r_NAME_CONSTRAINTS+31p

var_4		= dword	ptr -4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	edi
		push	[esp+14h+arg_4]
		call	_sk_num
		mov	esi, [esp+18h+arg_C]
		add	esp, 4
		mov	edi, [esp+14h+arg_8]
		test	eax, eax
		jle	short loc_5A2
		push	[esp+14h+arg_10]
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	esi
		push	offset ??_C@_07GOIIHCND@?$CF?$CKs?$CFs?3?6?$AA@	; "%*s%s:\n"
		push	edi
		call	_BIO_printf
		add	esp, 14h

loc_5A2:				; CODE XREF: _do_i2r_name_constraints+24j
		mov	ebx, [esp+14h+arg_4]
		xor	ebp, ebp
		push	ebx
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	loc_6C8
		lea	eax, [esi+2]
		mov	[esp+14h+var_4], eax
		nop	dword ptr [eax+00h]

loc_5C4:				; CODE XREF: _do_i2r_name_constraints+15Ej
		push	ebp
		push	ebx
		call	_sk_value
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	[esp+20h+var_4]
		mov	esi, eax
		push	offset ??_C@_03HIJPJGOM@?$CF?$CKs?$AA@ ; "%*s"
		push	edi
		call	_BIO_printf
		mov	eax, [esi]
		add	esp, 18h
		cmp	dword ptr [eax], 7
		jnz	loc_69A
		mov	eax, [eax+4]
		push	offset ??_C@_03HBLCMHJN@IP?3?$AA@ ; `string'
		push	edi
		mov	ebx, [eax+8]
		mov	esi, [eax]
		call	_BIO_puts
		add	esp, 8
		cmp	esi, 8
		jnz	short loc_641
		movzx	eax, byte ptr [ebx+7]
		push	eax
		movzx	eax, byte ptr [ebx+6]
		push	eax
		movzx	eax, byte ptr [ebx+5]
		push	eax
		movzx	eax, byte ptr [ebx+4]
		push	eax
		movzx	eax, byte ptr [ebx+3]
		push	eax
		movzx	eax, byte ptr [ebx+2]
		push	eax
		movzx	eax, byte ptr [ebx+1]
		push	eax
		movzx	eax, byte ptr [ebx]
		push	eax
		push	offset ??_C@_0BI@IFNIGPEJ@?$CFd?4?$CFd?4?$CFd?4?$CFd?1?$CFd?4?$CFd?4?$CFd?4?$CFd?$AA@ ;	"%d.%d.%d.%d/%d.%d.%d.%d"
		push	edi
		call	_BIO_printf
		add	esp, 28h
		jmp	short loc_6A4
; ---------------------------------------------------------------------------

loc_641:				; CODE XREF: _do_i2r_name_constraints+A4j
		cmp	esi, 20h ; ' '
		jnz	short loc_68D
		xor	esi, esi

loc_648:				; CODE XREF: _do_i2r_name_constraints+125j
		movzx	ecx, byte ptr [ebx]
		movzx	eax, byte ptr [ebx+1]
		shl	ecx, 8
		or	ecx, eax
		push	ecx
		push	offset ??_C@_02EMFKHFLK@?$CFX?$AA@ ; "%X"
		push	edi
		call	_BIO_printf
		add	esp, 0Ch
		lea	ebx, [ebx+2]
		cmp	esi, 7
		jnz	short loc_672
		push	offset ??_C@_01KMDKNFGN@?1?$AA@	; `string'
		jmp	short loc_67C
; ---------------------------------------------------------------------------

loc_672:				; CODE XREF: _do_i2r_name_constraints+105j
		cmp	esi, 0Fh
		jz	short loc_685
		push	offset ??_C@_01JLIPDDHJ@?3?$AA@	; `string'

loc_67C:				; CODE XREF: _do_i2r_name_constraints+10Cj
		push	edi
		call	_BIO_puts
		add	esp, 8

loc_685:				; CODE XREF: _do_i2r_name_constraints+111j
		inc	esi
		cmp	esi, 10h
		jl	short loc_648
		jmp	short loc_6A4
; ---------------------------------------------------------------------------

loc_68D:				; CODE XREF: _do_i2r_name_constraints+E0j
		push	offset ??_C@_0BF@JMMIKJMP@IP?5Address?3?$DMinvalid?$DO?$AA@ ; "IP Address:<invalid>"
		push	edi
		call	_BIO_printf
		jmp	short loc_6A1
; ---------------------------------------------------------------------------

loc_69A:				; CODE XREF: _do_i2r_name_constraints+85j
		push	eax
		push	edi
		call	_GENERAL_NAME_print

loc_6A1:				; CODE XREF: _do_i2r_name_constraints+134j
		add	esp, 8

loc_6A4:				; CODE XREF: _do_i2r_name_constraints+DBj
					; _do_i2r_name_constraints+127j
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		push	edi
		call	_BIO_puts
		push	[esp+1Ch+arg_4]
		inc	ebp
		call	_sk_num
		mov	ebx, [esp+20h+arg_4]
		add	esp, 0Ch
		cmp	ebp, eax
		jl	loc_5C4

loc_6C8:				; CODE XREF: _do_i2r_name_constraints+4Fj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		pop	ecx
		retn
_do_i2r_name_constraints endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6D4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nc_dn		proc near		; CODE XREF: _nc_match_single+1Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+4], 0
		jz	short loc_6F5
		push	0
		push	esi
		call	_i2d_X509_NAME
		add	esp, 8
		test	eax, eax
		jns	short loc_6F5
		mov	eax, 11h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6F5:				; CODE XREF: _nc_dn+9j	_nc_dn+18j
		push	edi
		mov	edi, [esp+8+arg_4]
		cmp	dword ptr [edi+4], 0
		jz	short loc_717
		push	0
		push	edi
		call	_i2d_X509_NAME
		add	esp, 8
		test	eax, eax
		jns	short loc_717
		pop	edi
		mov	eax, 11h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_717:				; CODE XREF: _nc_dn+2Aj _nc_dn+39j
		mov	ecx, [edi+10h]
		cmp	ecx, [esi+10h]
		jle	short loc_727

loc_71F:				; CODE XREF: _nc_dn+7Aj _nc_dn+87j ...
		pop	edi
		mov	eax, 2Fh ; '/'
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_727:				; CODE XREF: _nc_dn+49j
		mov	edx, [edi+0Ch]
		mov	esi, [esi+0Ch]
		sub	ecx, 4
		jb	short loc_745
		xchg	ax, ax

loc_734:				; CODE XREF: _nc_dn+6Fj
		mov	eax, [edx]
		cmp	eax, [esi]
		jnz	short loc_74A
		add	edx, 4
		add	esi, 4
		sub	ecx, 4
		jnb	short loc_734

loc_745:				; CODE XREF: _nc_dn+5Cj
		cmp	ecx, 0FFFFFFFCh
		jz	short loc_777

loc_74A:				; CODE XREF: _nc_dn+64j
		mov	al, [edx]
		cmp	al, [esi]
		jnz	short loc_71F
		cmp	ecx, 0FFFFFFFDh
		jz	short loc_777
		mov	al, [edx+1]
		cmp	al, [esi+1]
		jnz	short loc_71F
		cmp	ecx, 0FFFFFFFEh
		jz	short loc_777
		mov	al, [edx+2]
		cmp	al, [esi+2]
		jnz	short loc_71F
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_777
		mov	al, [edx+3]
		cmp	al, [esi+3]
		jnz	short loc_71F

loc_777:				; CODE XREF: _nc_dn+74j _nc_dn+7Fj ...
		pop	edi
		xor	eax, eax
		pop	esi
		retn
_nc_dn		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 77Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nc_dns		proc near		; CODE XREF: _nc_match_single+30p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		push	ebx
		push	esi
		mov	esi, [esp+8+arg_4]
		mov	eax, [ecx+8]
		mov	edx, [esi+8]
		mov	bl, [edx]
		test	bl, bl
		jnz	short loc_797
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_797:				; CODE XREF: _nc_dns+14j
		mov	ecx, [ecx]
		mov	esi, [esi]
		cmp	ecx, esi
		jle	short loc_7B6
		sub	ecx, esi
		add	eax, ecx
		cmp	bl, 2Eh	; '.'
		jz	short loc_7B6
		cmp	byte ptr [eax-1], 2Eh ;	'.'
		jz	short loc_7B6
		pop	esi
		mov	eax, 2Fh ; '/'
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_7B6:				; CODE XREF: _nc_dns+21j _nc_dns+2Aj ...
		push	eax		; Str2
		push	edx		; Str1
		call	dword ptr ds:__imp___stricmp
		add	esp, 8
		neg	eax
		sbb	eax, eax
		and	eax, 2Fh
		pop	esi
		pop	ebx
		retn
_nc_dns		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7CCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nc_email	proc near		; CODE XREF: _nc_match_single+43p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	esi
		mov	esi, dword ptr ds:__imp__strchr
		mov	ebx, [ebx+8]
		push	edi
		mov	edi, [eax+8]
		push	40h ; '@'       ; Val
		push	edi		; Str
		call	esi ; __imp__strchr
		push	40h ; '@'       ; Val
		push	ebx		; Str
		mov	ebp, eax
		call	esi ; __imp__strchr
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_801
		pop	edi
		lea	eax, [esi+35h]
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_801:				; CODE XREF: _nc_email+2Bj
		test	ebp, ebp
		jnz	short loc_83C
		cmp	byte ptr [edi],	2Eh ; '.'
		jnz	short loc_85F
		mov	eax, [esp+10h+arg_0]
		mov	ecx, [esp+10h+arg_4]
		mov	eax, [eax]
		mov	ecx, [ecx]
		cmp	eax, ecx
		jle	short loc_832
		sub	eax, ecx
		add	ebx, eax
		push	ebx		; Str2
		push	edi		; Str1
		call	dword ptr ds:__imp___stricmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_832
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_832:				; CODE XREF: _nc_email+4Cj
					; _nc_email+5Fj ...
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 2Fh ; '/'
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_83C:				; CODE XREF: _nc_email+37j
		cmp	ebp, edi
		jz	short loc_85C
		mov	ecx, esi
		mov	eax, ebp
		sub	ecx, ebx
		sub	eax, edi
		cmp	eax, ecx
		jnz	short loc_832
		push	ecx		; MaxCount
		push	ebx		; Str2
		push	edi		; Str1
		call	dword ptr ds:__imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_832

loc_85C:				; CODE XREF: _nc_email+72j
		lea	edi, [ebp+1]

loc_85F:				; CODE XREF: _nc_email+3Cj
		lea	eax, [esi+1]
		push	eax		; Str2
		push	edi		; Str1
		call	dword ptr ds:__imp___stricmp
		add	esp, 8
		neg	eax
		sbb	eax, eax
		and	eax, 2Fh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_nc_email	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 87Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nc_match	proc near		; CODE XREF: _NAME_CONSTRAINTS_check+3Fp
					; _NAME_CONSTRAINTS_check+94p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_4]
		xor	esi, esi
		xor	ebx, ebx
		push	dword ptr [edi]
		call	_sk_num
		mov	ebp, [esp+14h+arg_0]
		add	esp, 4
		test	eax, eax
		jle	short loc_909
		xchg	ax, ax

loc_89C:				; CODE XREF: _nc_match+74j
		push	ebx
		push	dword ptr [edi]
		call	_sk_value
		mov	ecx, [ebp+0]
		add	esp, 8
		mov	edx, [eax]
		cmp	ecx, [edx]
		jnz	short loc_8E3
		cmp	dword ptr [eax+4], 0
		jnz	short loc_8FF
		cmp	dword ptr [eax+8], 0
		jnz	short loc_8FF
		cmp	esi, 2
		jz	short loc_8E3
		push	edx
		test	esi, esi
		mov	eax, 1
		push	ebp
		cmovz	esi, eax
		call	_nc_match_single
		add	esp, 8
		test	eax, eax
		jnz	short loc_8DE
		lea	esi, [eax+2]
		jmp	short loc_8E3
; ---------------------------------------------------------------------------

loc_8DE:				; CODE XREF: _nc_match+5Bj
		cmp	eax, 2Fh ; '/'
		jnz	short loc_962

loc_8E3:				; CODE XREF: _nc_match+32j
					; _nc_match+43j ...
		push	dword ptr [edi]
		inc	ebx
		call	_sk_num
		add	esp, 4
		cmp	ebx, eax
		jl	short loc_89C
		cmp	esi, 1
		jnz	short loc_909
		pop	edi
		lea	eax, [esi+2Eh]
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_8FF:				; CODE XREF: _nc_match+38j
					; _nc_match+3Ej ...
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 31h ; '1'
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_909:				; CODE XREF: _nc_match+1Cj
					; _nc_match+79j
		push	dword ptr [edi+4]
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_960
		xchg	ax, ax

loc_91C:				; CODE XREF: _nc_match+E2j
		push	esi
		push	dword ptr [edi+4]
		call	_sk_value
		mov	ecx, [ebp+0]
		add	esp, 8
		mov	edx, [eax]
		cmp	ecx, [edx]
		jnz	short loc_950
		cmp	dword ptr [eax+4], 0
		jnz	short loc_8FF
		cmp	dword ptr [eax+8], 0
		jnz	short loc_8FF
		push	edx
		push	ebp
		call	_nc_match_single
		add	esp, 8
		test	eax, eax
		jz	short loc_967
		cmp	eax, 2Fh ; '/'
		jnz	short loc_962

loc_950:				; CODE XREF: _nc_match+B3j
		push	dword ptr [edi+4]
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_91C

loc_960:				; CODE XREF: _nc_match+9Cj
		xor	eax, eax

loc_962:				; CODE XREF: _nc_match+65j
					; _nc_match+D2j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_967:				; CODE XREF: _nc_match+CDj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 30h ; '0'
		pop	ebx
		retn
_nc_match	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 974h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nc_match_single proc near		; CODE XREF: _NAME_CONSTRAINTS_check+12Bp
					; _NAME_CONSTRAINTS_check+1A3p	...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		mov	eax, [ecx]
		dec	eax
		cmp	eax, 5		; switch 6 cases
		ja	short $LN8	; jumptable 00000980 default case
		jmp	ds:$LN11[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN4:					; CODE XREF: _nc_match_single+Cj
					; DATA XREF: .text$mn:$LN11o
		mov	eax, [esp+arg_0] ; jumptable 00000980 case 3
		push	dword ptr [ecx+4]
		push	dword ptr [eax+4]
		call	_nc_dn
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

$LN5:					; CODE XREF: _nc_match_single+Cj
					; DATA XREF: .text$mn:$LN11o
		mov	eax, [esp+arg_0] ; jumptable 00000980 case 1
		push	dword ptr [ecx+4]
		push	dword ptr [eax+4]
		call	_nc_dns
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

$LN6:					; CODE XREF: _nc_match_single+Cj
					; DATA XREF: .text$mn:$LN11o
		mov	eax, [esp+arg_0] ; jumptable 00000980 case 0
		push	dword ptr [ecx+4]
		push	dword ptr [eax+4]
		call	_nc_email
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

$LN7:					; CODE XREF: _nc_match_single+Cj
					; DATA XREF: .text$mn:$LN11o
		mov	eax, [esp+arg_0] ; jumptable 00000980 case 5
		push	dword ptr [ecx+4]
		push	dword ptr [eax+4]
		call	_nc_uri
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

$LN8:					; CODE XREF: _nc_match_single+Aj
					; _nc_match_single+Cj
					; DATA XREF: ...
		mov	eax, 33h ; '3'  ; jumptable 00000980 default case
		retn
_nc_match_single endp

; ---------------------------------------------------------------------------
		align 4
$LN11		dd offset $LN6		; DATA XREF: _nc_match_single+Cr
		dd offset $LN5		; jump table for switch	statement
		dd offset $LN8
		dd offset $LN4
		dd offset $LN8
		dd offset $LN7
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nc_uri		proc near		; CODE XREF: _nc_match_single+56p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_4]
		push	edi
		mov	edi, dword ptr ds:__imp__strchr
		push	3Ah ; ':'       ; Val
		push	dword ptr [eax+8] ; Str
		mov	ebx, [ebp+8]
		call	edi ; __imp__strchr
		add	esp, 8
		test	eax, eax
		jz	loc_A9D
		cmp	byte ptr [eax+1], 2Fh ;	'/'
		jnz	short loc_A9D
		cmp	byte ptr [eax+2], 2Fh ;	'/'
		jnz	short loc_A9D
		push	esi
		lea	esi, [eax+3]
		push	3Ah ; ':'       ; Val
		push	esi		; Str
		call	edi ; __imp__strchr
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		jnz	short loc_A56
		push	2Fh ; '/'       ; Val
		push	esi		; Str
		call	edi ; __imp__strchr
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		jnz	short loc_A56
		mov	ecx, esi
		lea	edx, [ecx+1]

loc_A4B:				; CODE XREF: _nc_uri+5Cj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_A4B
		sub	ecx, edx
		jmp	short loc_A58
; ---------------------------------------------------------------------------

loc_A56:				; CODE XREF: _nc_uri+42j _nc_uri+50j
		sub	ecx, esi

loc_A58:				; CODE XREF: _nc_uri+60j
		test	ecx, ecx
		jnz	short loc_A64
		pop	esi
		pop	edi
		pop	ebp
		lea	eax, [ecx+35h]
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_A64:				; CODE XREF: _nc_uri+66j
		cmp	byte ptr [ebx],	2Eh ; '.'
		jnz	short loc_A79
		mov	eax, [ebp+0]
		cmp	ecx, eax
		jle	short loc_A93
		push	eax
		sub	ecx, eax
		add	ecx, esi
		push	ebx
		push	ecx
		jmp	short loc_A81
; ---------------------------------------------------------------------------

loc_A79:				; CODE XREF: _nc_uri+73j
		cmp	[ebp+0], ecx
		jnz	short loc_A93
		push	ecx		; MaxCount
		push	ebx		; Str2
		push	esi		; Str1

loc_A81:				; CODE XREF: _nc_uri+83j
		call	dword ptr ds:__imp___strnicmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_A93
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_A93:				; CODE XREF: _nc_uri+7Aj _nc_uri+88j ...
		pop	esi
		pop	edi
		pop	ebp
		mov	eax, 2Fh ; '/'
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_A9D:				; CODE XREF: _nc_uri+20j _nc_uri+2Aj ...
		pop	edi
		pop	ebp
		mov	eax, 35h ; '5'
		pop	ebx
		retn
_nc_uri		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0AA8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_print_nc_ipadd	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		mov	esi, [eax]
		push	edi
		mov	edi, [eax+8]
		push	offset ??_C@_03HBLCMHJN@IP?3?$AA@ ; `string'
		push	ebx
		call	_BIO_puts
		add	esp, 8
		cmp	esi, 8
		jnz	short loc_B07
		movzx	eax, byte ptr [edi+7]
		push	eax
		movzx	eax, byte ptr [edi+6]
		push	eax
		movzx	eax, byte ptr [edi+5]
		push	eax
		movzx	eax, byte ptr [edi+4]
		push	eax
		movzx	eax, byte ptr [edi+3]
		push	eax
		movzx	eax, byte ptr [edi+2]
		push	eax
		movzx	eax, byte ptr [edi+1]
		push	eax
		movzx	eax, byte ptr [edi]
		push	eax
		push	offset ??_C@_0BI@IFNIGPEJ@?$CFd?4?$CFd?4?$CFd?4?$CFd?1?$CFd?4?$CFd?4?$CFd?4?$CFd?$AA@ ;	"%d.%d.%d.%d/%d.%d.%d.%d"
		push	ebx
		call	_BIO_printf
		add	esp, 28h
		lea	eax, [esi-7]
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_B07:				; CODE XREF: _print_nc_ipadd+21j
		cmp	esi, 20h ; ' '
		jnz	short loc_B5A
		xor	esi, esi

loc_B0E:				; CODE XREF: _print_nc_ipadd+A7j
		movzx	ecx, byte ptr [edi]
		movzx	eax, byte ptr [edi+1]
		shl	ecx, 8
		or	ecx, eax
		push	ecx
		push	offset ??_C@_02EMFKHFLK@?$CFX?$AA@ ; "%X"
		push	ebx
		call	_BIO_printf
		add	esp, 0Ch
		lea	edi, [edi+2]
		cmp	esi, 7
		jnz	short loc_B38
		push	offset ??_C@_01KMDKNFGN@?1?$AA@	; `string'
		jmp	short loc_B42
; ---------------------------------------------------------------------------

loc_B38:				; CODE XREF: _print_nc_ipadd+87j
		cmp	esi, 0Fh
		jz	short loc_B4B
		push	offset ??_C@_01JLIPDDHJ@?3?$AA@	; `string'

loc_B42:				; CODE XREF: _print_nc_ipadd+8Ej
		push	ebx
		call	_BIO_puts
		add	esp, 8

loc_B4B:				; CODE XREF: _print_nc_ipadd+93j
		inc	esi
		cmp	esi, 10h
		jl	short loc_B0E
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_B5A:				; CODE XREF: _print_nc_ipadd+62j
		push	offset ??_C@_0BF@JMMIKJMP@IP?5Address?3?$DMinvalid?$DO?$AA@ ; "IP Address:<invalid>"
		push	ebx
		call	_BIO_printf
		add	esp, 8
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebx
		retn
_print_nc_ipadd	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B74h
; COMDAT (pick any)
		public ??_C@_09HAKFOFAM@permitted?$AA@
; char `string'[]
??_C@_09HAKFOFAM@permitted?$AA@	db 'permitted',0 ; DATA XREF: _v2i_NAME_CONSTRAINTS+4Do
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B80h
; COMDAT (pick any)
		public ??_C@_08HPCEJEEF@excluded?$AA@
; char `string'[]
??_C@_08HPCEJEEF@excluded?$AA@ db 'excluded',0 ; DATA XREF: _v2i_NAME_CONSTRAINTS+72o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B8Ch
; COMDAT (pick any)
		public ??_C@_0BL@IDMCNIEC@?4?2crypto?2x509v3?2v3_ncons?4c?$AA@
; `string'
??_C@_0BL@IDMCNIEC@?4?2crypto?2x509v3?2v3_ncons?4c?$AA@	db '.\crypto\x509v3\v3_ncons.c',0
					; DATA XREF: _v2i_NAME_CONSTRAINTS+123o
					; _v2i_NAME_CONSTRAINTS+134o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BA8h
; COMDAT (pick any)
		public ??_C@_09DPPIOGNM@Permitted?$AA@
; `string'
??_C@_09DPPIOGNM@Permitted?$AA@	db 'Permitted',0 ; DATA XREF: _i2r_NAME_CONSTRAINTS+5o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BB4h
; COMDAT (pick any)
		public ??_C@_08PNNFBGOG@Excluded?$AA@
; `string'
??_C@_08PNNFBGOG@Excluded?$AA@ db 'Excluded',0 ; DATA XREF: _i2r_NAME_CONSTRAINTS+1Do
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 0BC0h
; COMDAT (pick any)
		public ??_C@_00CNPNBAHC@?$AA@
; `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: _do_i2r_name_constraints+2Ao
					; _do_i2r_name_constraints+67o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BC4h
; COMDAT (pick any)
		public ??_C@_07GOIIHCND@?$CF?$CKs?$CFs?3?6?$AA@
; `string'
??_C@_07GOIIHCND@?$CF?$CKs?$CFs?3?6?$AA@ db '%*s%s:',0Ah,0
					; DATA XREF: _do_i2r_name_constraints+30o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BCCh
; COMDAT (pick any)
		public ??_C@_03HIJPJGOM@?$CF?$CKs?$AA@
; `string'
??_C@_03HIJPJGOM@?$CF?$CKs?$AA@	db '%*s',0 ; DATA XREF: _do_i2r_name_constraints+72o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BD0h
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; `string'
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah,0	; DATA XREF: _do_i2r_name_constraints:loc_6A4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BD4h
; COMDAT (pick any)
		public ??_C@_03HBLCMHJN@IP?3?$AA@
; `string'
??_C@_03HBLCMHJN@IP?3?$AA@ dd 3A5049h	; DATA XREF: _do_i2r_name_constraints+8Eo
					; _print_nc_ipadd+10o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BD8h
; COMDAT (pick any)
		public ??_C@_0BI@IFNIGPEJ@?$CFd?4?$CFd?4?$CFd?4?$CFd?1?$CFd?4?$CFd?4?$CFd?4?$CFd?$AA@
; `string'
??_C@_0BI@IFNIGPEJ@?$CFd?4?$CFd?4?$CFd?4?$CFd?1?$CFd?4?$CFd?4?$CFd?4?$CFd?$AA@ db '%d.%d.%d.%d/%d.%d.%d.%d',0
					; DATA XREF: _do_i2r_name_constraints+CDo
					; _print_nc_ipadd+4Ao
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BF0h
; COMDAT (pick any)
		public ??_C@_02EMFKHFLK@?$CFX?$AA@
; `string'
??_C@_02EMFKHFLK@?$CFX?$AA@ db '%X',0   ; DATA XREF: _do_i2r_name_constraints+F1o
					; _print_nc_ipadd+73o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BF4h
; COMDAT (pick any)
		public ??_C@_01KMDKNFGN@?1?$AA@
; `string'
??_C@_01KMDKNFGN@?1?$AA@ db 2Fh, 0	; DATA XREF: _do_i2r_name_constraints+107o
					; _print_nc_ipadd+89o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BF8h
; COMDAT (pick any)
		public ??_C@_01JLIPDDHJ@?3?$AA@
; `string'
??_C@_01JLIPDDHJ@?3?$AA@ db 3Ah, 0	; DATA XREF: _do_i2r_name_constraints+113o
					; _print_nc_ipadd+95o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BFCh
; COMDAT (pick any)
		public ??_C@_0BF@JMMIKJMP@IP?5Address?3?$DMinvalid?$DO?$AA@
; `string'
??_C@_0BF@JMMIKJMP@IP?5Address?3?$DMinvalid?$DO?$AA@ db	'IP Address:<invalid>',0
					; DATA XREF: _do_i2r_name_constraints:loc_68Do
					; _print_nc_ipadd:loc_B5Ao
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _GENERAL_NAME_it:near ; DATA XREF: .rdata:000000A8o
		extrn _ASN1_INTEGER_it:near ; DATA XREF: .rdata:000000BCo
					; .rdata:000000D0o
; char *__cdecl	_strchr(const char *Str, int Val)
		extrn __imp__strchr:near ; CODE	XREF: _nc_email+1Bp
					; _nc_email+22p ...
; int __cdecl __stricmp(const char *Str1, const	char *Str2)
		extrn __imp___stricmp:near ; CODE XREF:	_nc_dns+3Cp
					; _nc_email+54p ...
; int __cdecl _strncmp(const char *Str1, const char *Str2, size_t MaxCount)
		extrn __imp__strncmp:near ; CODE XREF: _v2i_NAME_CONSTRAINTS+55p
					; _v2i_NAME_CONSTRAINTS+7Ap ...
; int __cdecl __strnicmp(const char *Str1, const char *Str2, size_t MaxCount)
		extrn __imp___strnicmp:near ; CODE XREF: _nc_uri:loc_A81p
					; DATA XREF: _nc_uri:loc_A81r
		extrn _sk_num:near	; CODE XREF: _v2i_NAME_CONSTRAINTS+32p
					; _v2i_NAME_CONSTRAINTS+100p ...
		extrn _sk_value:near	; CODE XREF: _v2i_NAME_CONSTRAINTS+44p
					; _NAME_CONSTRAINTS_check+D9p ...
		extrn _sk_new_null:near	; CODE XREF: _v2i_NAME_CONSTRAINTS+DEp
		extrn _sk_push:near	; CODE XREF: _v2i_NAME_CONSTRAINTS+ECp
		extrn _BIO_puts:near	; CODE XREF: _do_i2r_name_constraints+99p
					; _do_i2r_name_constraints+119p ...
		extrn _BIO_printf:near	; CODE XREF: _do_i2r_name_constraints+36p
					; _do_i2r_name_constraints+78p	...
		extrn _ERR_put_error:near ; CODE XREF: _v2i_NAME_CONSTRAINTS+142p
		extrn _ASN1_item_new:near ; CODE XREF: _v2i_NAME_CONSTRAINTS+15p
					; _v2i_NAME_CONSTRAINTS+AEp ...
		extrn _ASN1_item_free:near ; CODE XREF:	_v2i_NAME_CONSTRAINTS+158p
					; _v2i_NAME_CONSTRAINTS:loc_29Ap ...
		extrn _i2d_X509_NAME:near ; CODE XREF: _nc_dn+Ep _nc_dn+2Fp
		extrn _X509_get_subject_name:near ; CODE XREF: _NAME_CONSTRAINTS_check+11p
		extrn _X509_NAME_entry_count:near ; CODE XREF: _NAME_CONSTRAINTS_check+19p
		extrn _X509_NAME_get_index_by_NID:near
					; CODE XREF: _NAME_CONSTRAINTS_check+5Cp
					; _NAME_CONSTRAINTS_check+A8p
		extrn _X509_NAME_get_entry:near	; CODE XREF: _NAME_CONSTRAINTS_check+72p
		extrn _X509_NAME_ENTRY_get_data:near
					; CODE XREF: _NAME_CONSTRAINTS_check+78p
		extrn _GENERAL_NAME_print:near ; CODE XREF: _do_i2r_name_constraints+138p
		extrn _v2i_GENERAL_NAME_ex:near	; CODE XREF: _v2i_NAME_CONSTRAINTS+CDp
		extrn __chkstk:near	; CODE XREF: _v2i_NAME_CONSTRAINTS+5p
					; _NAME_CONSTRAINTS_check+5p ...


		end
