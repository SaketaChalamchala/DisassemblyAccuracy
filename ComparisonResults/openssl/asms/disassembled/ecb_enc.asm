;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	7887694580AF385F3F24AF0F21CBD3AA
; Input	CRC32 :	8D9A1924

; File Name   :	C:\compspace\Diff\openssl\obj\ecb_enc.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
; `DES_options'::`2'::init
?init@?1??DES_options@@9@9 dd 1		; DATA XREF: _DES_optionsr
					; _DES_options+31w
_data		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4
		public _OSSL_DES_version
_OSSL_DES_version db 'DES part of OpenSSL 1.0.2h  3 May 2016',0
		align 4
;
; Exported entry
;
		public _OSSL_libdes_version
_OSSL_libdes_version db	'libdes part of OpenSSL 1.0.2h  3 May 2016',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 58h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_ecb_encrypt
_DES_ecb_encrypt proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 8
		call	__chkstk
		mov	eax, [esp+8+arg_0]
		movzx	edx, byte ptr [eax+4]
		push	esi
		lea	esi, [eax+1]
		movzx	ecx, byte ptr [eax]
		movzx	eax, byte ptr [esi]
		push	[esp+0Ch+arg_C]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+1]
		push	[esp+10h+arg_8]
		shl	eax, 10h
		or	ecx, eax
		movzx	eax, byte ptr [esi+2]
		shl	eax, 18h
		or	ecx, eax
		movzx	eax, byte ptr [esi+4]
		mov	[esp+14h+var_8], ecx
		movzx	ecx, byte ptr [esi+6]
		shl	eax, 8
		or	edx, eax
		shl	ecx, 8
		movzx	eax, byte ptr [esi+5]
		or	ecx, eax
		lea	eax, [esp+14h+var_8]
		shl	ecx, 10h
		or	ecx, edx
		push	eax
		mov	[esp+18h+var_4], ecx
		call	_DES_encrypt1
		mov	eax, [esp+18h+arg_4]
		add	esp, 0Ch
		mov	ecx, [esp+0Ch+var_8]
		lea	edx, [eax+1]
		mov	[eax], cl
		mov	eax, ecx
		shr	eax, 8
		mov	[edx], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+1], al
		shr	ecx, 18h
		mov	[edx+2], cl
		mov	ecx, [esp+0Ch+var_4]
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+3], cl
		mov	[edx+4], al
		mov	eax, ecx
		shr	eax, 10h
		shr	ecx, 18h
		mov	[edx+5], al
		mov	[edx+6], cl
		pop	esi
		add	esp, 8
		retn
_DES_ecb_encrypt endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 108h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_options
_DES_options	proc near
		cmp	?init@?1??DES_options@@9@9, 0 ;	`DES_options'::`2'::init
		jz	short loc_143
		push	offset ??_C@_04GOKPGOLB@long?$AA@ ; "long"
		push	offset ??_C@_01FDFGLJHB@2?$AA@ ; `string'
		push	offset ??_C@_04LJAGFDJL@cisc?$AA@ ; "cisc"
		push	offset ??_C@_03DAKNAIGI@idx?$AA@ ; `string'
		push	offset ??_C@_0BB@LCGGLDPJ@des?$CI?$CFs?0?$CFs?0?$CFs?0?$CFs?$CJ?$AA@ ; "des(%s,%s,%s,%s)"
		push	20h ; ' '
		push	offset ?buf@?1??DES_options@@9@9 ; `DES_options'::`2'::buf
		call	_BIO_snprintf
		add	esp, 1Ch
		mov	?init@?1??DES_options@@9@9, 0 ;	`DES_options'::`2'::init

loc_143:				; CODE XREF: _DES_options+7j
		mov	eax, offset ?buf@?1??DES_options@@9@9 ;	`DES_options'::`2'::buf
		retn
_DES_options	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 14Ch
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; `DES_options'::`2'::buf
?buf@?1??DES_options@@9@9 dd 8 dup(?)	; DATA XREF: _DES_options+24o
					; _DES_options:loc_143o
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 16Ch
; COMDAT (pick any)
		public ??_C@_03DAKNAIGI@idx?$AA@
; `string'
??_C@_03DAKNAIGI@idx?$AA@ dd 786469h	; DATA XREF: _DES_options+18o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 170h
; COMDAT (pick any)
		public ??_C@_04LJAGFDJL@cisc?$AA@
; `string'
??_C@_04LJAGFDJL@cisc?$AA@ db 'cisc',0  ; DATA XREF: _DES_options+13o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 178h
; COMDAT (pick any)
		public ??_C@_01FDFGLJHB@2?$AA@
; `string'
??_C@_01FDFGLJHB@2?$AA@	db 32h,	0	; DATA XREF: _DES_options+Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 17Ch
; COMDAT (pick any)
		public ??_C@_04GOKPGOLB@long?$AA@
; `string'
??_C@_04GOKPGOLB@long?$AA@ db 'long',0  ; DATA XREF: _DES_options+9o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 184h
; COMDAT (pick any)
		public ??_C@_0BB@LCGGLDPJ@des?$CI?$CFs?0?$CFs?0?$CFs?0?$CFs?$CJ?$AA@
; `string'
??_C@_0BB@LCGGLDPJ@des?$CI?$CFs?0?$CFs?0?$CFs?0?$CFs?$CJ?$AA@ db 'des(%s,%s,%s,%s)',0
					; DATA XREF: _DES_options+1Do
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _DES_encrypt1:near ; CODE	XREF: _DES_ecb_encrypt+63p
		extrn _BIO_snprintf:near ; CODE	XREF: _DES_options+29p
		extrn __chkstk:near	; CODE XREF: _DES_ecb_encrypt+5p


		end
