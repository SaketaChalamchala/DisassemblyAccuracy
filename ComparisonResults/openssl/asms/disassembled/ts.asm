;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	FD277FCC0B3FEC6F04E627ABCF114F68
; Input	CRC32 :	8800177A

; File Name   :	C:\compspace\Diff\openssl\obj\ts.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_BIO_open_with_default proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_16
		push	eax
		push	[esp+4+arg_8]
		call	_BIO_new_fp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_16:					; CODE XREF: _BIO_open_with_default+6j
		push	[esp+arg_4]
		push	eax
		call	_BIO_new_file
		add	esp, 8
		retn
_BIO_open_with_default endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 24h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; _printf+19p
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 50h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_create_cert_store proc	near		; CODE XREF: _create_verify_ctx+E9p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		call	_X509_STORE_new
		mov	esi, eax
		push	offset _verify_cb
		push	esi
		call	_X509_STORE_set_verify_cb
		mov	edi, [esp+10h+arg_0]
		add	esp, 8
		test	edi, edi
		jz	short loc_BF
		call	_X509_LOOKUP_hash_dir
		push	eax
		push	esi
		call	_X509_STORE_add_lookup
		add	esp, 8
		test	eax, eax
		jnz	short loc_A3

loc_82:					; CODE XREF: _create_cert_store+88j
		push	offset ??_C@_0BL@NEBNLEOC@memory?5allocation?5failure?6?$AA@ ; "memory allocation failure\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 8
		push	esi
		call	_X509_STORE_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_A3:					; CODE XREF: _create_cert_store+30j
		push	0
		push	1
		push	edi
		push	2
		push	eax
		call	_X509_LOOKUP_ctrl
		add	esp, 14h
		test	eax, eax
		jnz	short loc_BF
		push	edi
		push	offset ??_C@_0BM@OKGFCOK@Error?5loading?5directory?5?$CFs?6?$AA@ ; "Error loading directory %s\n"
		jmp	short loc_F4
; ---------------------------------------------------------------------------

loc_BF:					; CODE XREF: _create_cert_store+1Dj
					; _create_cert_store+65j
		mov	edi, [esp+8+arg_4]
		test	edi, edi
		jz	short loc_110
		call	_X509_LOOKUP_file
		push	eax
		push	esi
		call	_X509_STORE_add_lookup
		add	esp, 8
		test	eax, eax
		jz	short loc_82
		push	0
		push	1
		push	edi
		push	1
		push	eax
		call	_X509_LOOKUP_ctrl
		add	esp, 14h
		test	eax, eax
		jnz	short loc_110
		push	edi
		push	offset ??_C@_0BH@FHLAEOCH@Error?5loading?5file?5?$CFs?6?$AA@ ; "Error loading file %s\n"

loc_F4:					; CODE XREF: _create_cert_store+6Dj
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 0Ch

$err$12:
		push	esi
		call	_X509_STORE_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_110:				; CODE XREF: _create_cert_store+75j
					; _create_cert_store+9Cj
		pop	edi
		mov	eax, esi
		pop	esi
		retn
_create_cert_store endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 118h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_create_digest	proc near		; CODE XREF: _create_query+CFp

var_1024	= dword	ptr -1024h
var_1020	= dword	ptr -1020h
var_101C	= byte ptr -101Ch
var_1004	= byte ptr -1004h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 1024h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+1024h+var_4], eax
		mov	eax, [esp+1024h+arg_4]
		push	ebx
		mov	ebx, [esp+1028h+arg_C]
		push	ebp
		mov	ebp, [esp+102Ch+arg_8]
		push	esi
		push	edi
		mov	edi, [esp+1034h+arg_0]
		push	ebp
		mov	[esp+1038h+var_1024], eax
		call	_EVP_MD_size
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	$err$16
		test	edi, edi
		jz	short loc_1E6
		push	24Ah
		push	offset ??_C@_0M@MKEPFLFH@?4?2apps?2ts?4c?$AA@ ;	".\\apps\\ts.c"
		push	esi
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[ebx], eax
		test	eax, eax
		jz	$err$16
		lea	eax, [esp+1034h+var_101C]
		push	ebp
		push	eax
		call	_EVP_DigestInit
		push	1000h
		lea	eax, [esp+1040h+var_1004]
		push	eax
		push	edi
		call	_BIO_read
		add	esp, 14h
		test	eax, eax
		jle	short loc_1D1

loc_1AA:				; CODE XREF: _create_digest+B7j
		push	eax
		lea	eax, [esp+1038h+var_1004]
		push	eax
		lea	eax, [esp+103Ch+var_101C]
		push	eax
		call	_EVP_DigestUpdate
		push	1000h
		lea	eax, [esp+1044h+var_1004]
		push	eax
		push	edi
		call	_BIO_read
		add	esp, 18h
		test	eax, eax
		jg	short loc_1AA

loc_1D1:				; CODE XREF: _create_digest+90j
		push	0
		push	dword ptr [ebx]
		lea	eax, [esp+103Ch+var_101C]
		push	eax
		call	_EVP_DigestFinal
		add	esp, 0Ch
		mov	eax, esi
		jmp	short loc_229
; ---------------------------------------------------------------------------

loc_1E6:				; CODE XREF: _create_digest+51j
		lea	eax, [esp+1034h+var_1020]
		push	eax
		push	[esp+1038h+var_1024]
		call	_string_to_hex
		add	esp, 8
		mov	[ebx], eax
		test	eax, eax
		jz	short loc_207
		cmp	esi, [esp+1034h+var_1020]
		jnz	short loc_207
		mov	eax, esi
		jmp	short loc_229
; ---------------------------------------------------------------------------

loc_207:				; CODE XREF: _create_digest+E3j
					; _create_digest+E9j
		push	eax
		call	_CRYPTO_free
		push	esi
		mov	dword ptr [ebx], 0
		push	offset ??_C@_0CI@GKJPONPL@bad?5digest?0?5?$CFd?5bytes?5must?5be?5spe@ ;	"bad digest, %d	bytes must be specified\"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 10h

$err$16:				; CODE XREF: _create_digest+49j
					; _create_digest+6Aj
		xor	eax, eax

loc_229:				; CODE XREF: _create_digest+CCj
					; _create_digest+EDj
		mov	ecx, [esp+1034h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1024h
		retn
_create_digest	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 244h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_create_nonce	proc near		; CODE XREF: _create_query+130p

var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 18h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+18h+var_4], eax
		mov	eax, [esp+18h+arg_0]
		dec	eax
		cdq
		push	ebx
		and	edx, 7
		xor	ebx, ebx
		push	esi
		push	edi
		lea	edi, [edx+eax]
		sar	edi, 3
		inc	edi
		cmp	edi, 14h
		jg	short $err$16_0
		lea	eax, [esp+24h+var_18]
		push	edi
		push	eax
		call	_RAND_bytes
		add	esp, 8
		test	eax, eax
		jle	short $err$16_0
		xor	esi, esi
		test	edi, edi
		jle	short loc_296

loc_28B:				; CODE XREF: _create_nonce+50j
		cmp	[esp+esi+24h+var_18], bl
		jnz	short loc_296
		inc	esi
		cmp	esi, edi
		jl	short loc_28B

loc_296:				; CODE XREF: _create_nonce+45j
					; _create_nonce+4Bj
		call	_ASN1_INTEGER_new
		mov	ebx, eax
		test	ebx, ebx
		jz	short $err$16_0
		push	dword ptr [ebx+8]
		call	_CRYPTO_free
		sub	edi, esi
		push	279h
		push	offset ??_C@_0M@MKEPFLFH@?4?2apps?2ts?4c?$AA@ ;	".\\apps\\ts.c"
		mov	[ebx], edi
		lea	eax, [edi+1]
		push	eax
		call	_CRYPTO_malloc
		add	esp, 10h
		mov	[ebx+8], eax
		test	eax, eax
		jz	short $err$16_0
		push	dword ptr [ebx]	; Size
		lea	ecx, [esp+28h+var_18]
		add	ecx, esi
		push	ecx		; Src
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+18h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

$err$16_0:				; CODE XREF: _create_nonce+2Dj
					; _create_nonce+3Fj ...
		push	offset ??_C@_0BI@FECAGFBO@could?5not?5create?5nonce?6?$AA@ ; "could not	create nonce\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	ebx
		call	_ASN1_INTEGER_free
		mov	ecx, [esp+30h+var_4]
		add	esp, 0Ch
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
_create_nonce	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 320h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_create_query	proc near		; CODE XREF: _query_command+97p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 0Ch
		call	__chkstk
		push	ebx
		mov	ebx, [esp+10h+arg_8]
		push	ebp
		push	esi
		xor	esi, esi
		xor	ebp, ebp
		push	edi
		xor	edi, edi
		mov	[esp+1Ch+var_C], esi
		mov	[esp+1Ch+var_8], esi
		mov	[esp+1Ch+var_4], esi
		test	ebx, ebx
		jnz	short loc_35F
		push	offset ??_C@_04PGHFOLLE@sha1?$AA@ ; "sha1"
		call	_EVP_get_digestbyname
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	loc_481

loc_35F:				; CODE XREF: _create_query+26j
		call	_TS_REQ_new
		mov	esi, eax
		test	esi, esi
		jz	loc_481
		push	1
		push	esi
		call	_TS_REQ_set_version
		add	esp, 8
		test	eax, eax
		jz	loc_481
		call	_TS_MSG_IMPRINT_new
		mov	edi, eax
		test	edi, edi
		jz	loc_481
		call	_X509_ALGOR_new
		mov	ebp, eax
		test	ebp, ebp
		jz	loc_481
		push	ebx
		call	_EVP_MD_type
		push	eax
		call	_OBJ_nid2obj
		add	esp, 8
		mov	[ebp+0], eax
		test	eax, eax
		jz	loc_481
		call	_ASN1_TYPE_new
		mov	[ebp+4], eax
		test	eax, eax
		jz	loc_481
		push	ebp
		push	edi
		mov	dword ptr [eax], 5
		call	_TS_MSG_IMPRINT_set_algo
		add	esp, 8
		test	eax, eax
		jz	loc_481
		lea	eax, [esp+1Ch+var_C]
		push	eax
		push	ebx
		push	[esp+24h+arg_4]
		push	[esp+28h+arg_0]
		call	_create_digest
		mov	ebx, [esp+2Ch+var_C]
		add	esp, 10h
		test	eax, eax
		jz	loc_485
		push	eax
		push	ebx
		push	edi
		call	_TS_MSG_IMPRINT_set_msg
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_485
		push	edi
		push	esi
		call	_TS_REQ_set_msg_imprint
		add	esp, 8
		test	eax, eax
		jz	short loc_485
		mov	eax, [esp+1Ch+arg_C]
		test	eax, eax
		jz	short loc_447
		push	eax
		call	_txt2obj
		add	esp, 4
		mov	[esp+1Ch+var_8], eax
		test	eax, eax
		jz	short loc_485
		push	eax
		push	esi
		call	_TS_REQ_set_policy_id
		add	esp, 8
		test	eax, eax
		jz	short loc_485

loc_447:				; CODE XREF: _create_query+106j
		cmp	[esp+1Ch+arg_10], 0
		jnz	short loc_46E
		push	40h ; '@'
		call	_create_nonce
		add	esp, 4
		mov	[esp+1Ch+var_4], eax
		test	eax, eax
		jz	short loc_485
		push	eax
		push	esi
		call	_TS_REQ_set_nonce
		add	esp, 8
		test	eax, eax
		jz	short loc_485

loc_46E:				; CODE XREF: _create_query+12Cj
		push	[esp+1Ch+arg_14]
		push	esi
		call	_TS_REQ_set_cert_req
		add	esp, 8
		test	eax, eax
		jnz	short loc_4A0
		jmp	short loc_485
; ---------------------------------------------------------------------------

loc_481:				; CODE XREF: _create_query+39j
					; _create_query+48j ...
		mov	ebx, [esp+1Ch+var_C]

loc_485:				; CODE XREF: _create_query+DDj
					; _create_query+F0j ...
		push	esi
		call	_TS_REQ_free
		push	offset ??_C@_0BI@ONLCPDDL@could?5not?5create?5query?6?$AA@ ; "could not	create query\n"
		push	dword ptr ds:_bio_err
		xor	esi, esi
		call	_BIO_printf
		add	esp, 0Ch

loc_4A0:				; CODE XREF: _create_query+15Dj
		push	edi
		call	_TS_MSG_IMPRINT_free
		push	ebp
		call	_X509_ALGOR_free
		push	ebx
		call	_CRYPTO_free
		push	[esp+28h+var_8]
		call	_ASN1_OBJECT_free
		push	[esp+2Ch+var_4]
		call	_ASN1_INTEGER_free
		add	esp, 14h
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
_create_query	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4D4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_create_response proc near		; CODE XREF: _reply_command+6Fp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	edi
		push	offset ??_C@_02JDPG@rb?$AA@ ; `string'
		push	[esp+18h+arg_C]
		xor	ebp, ebp
		xor	esi, esi
		call	_BIO_new_file
		mov	ebx, eax
		add	esp, 8
		mov	[esp+14h+var_4], ebx
		test	ebx, ebx
		jz	loc_63C
		push	[esp+14h+arg_4]
		mov	edi, [esp+18h+arg_0]
		push	edi
		call	_TS_CONF_get_tsa_section
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	loc_638
		call	_TS_RESP_CTX_new
		mov	esi, eax
		test	esi, esi
		jz	loc_638
		push	esi
		push	offset _serial_cb
		push	ebx
		push	edi
		call	_TS_CONF_set_serial
		add	esp, 10h
		test	eax, eax
		jz	loc_638
		push	[esp+14h+arg_8]
		push	ebx
		push	edi
		call	_TS_CONF_set_crypto_device
		add	esp, 0Ch
		test	eax, eax
		jz	loc_638
		push	esi
		push	[esp+18h+arg_18]
		push	ebx
		push	edi
		call	_TS_CONF_set_signer_cert
		add	esp, 10h
		test	eax, eax
		jz	loc_638
		push	esi
		push	[esp+18h+arg_1C]
		push	ebx
		push	edi
		call	_TS_CONF_set_certs
		add	esp, 10h
		test	eax, eax
		jz	loc_638
		push	esi
		push	[esp+18h+arg_10]
		push	[esp+1Ch+arg_14]
		push	ebx
		push	edi
		call	_TS_CONF_set_signer_key
		add	esp, 14h
		test	eax, eax
		jz	loc_638
		push	esi
		push	[esp+18h+arg_20]
		push	ebx
		push	edi
		call	_TS_CONF_set_def_policy
		add	esp, 10h
		test	eax, eax
		jz	short loc_638
		push	esi
		push	ebx
		push	edi
		call	_TS_CONF_set_policies
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_638
		push	esi
		push	ebx
		push	edi
		call	_TS_CONF_set_digests
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_638
		push	esi
		push	ebx
		push	edi
		call	_TS_CONF_set_accuracy
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_638
		push	esi
		push	ebx
		push	edi
		call	_TS_CONF_set_clock_precision_digits
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_638
		push	esi
		push	ebx
		push	edi
		call	_TS_CONF_set_ordering
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_638
		push	esi
		push	ebx
		push	edi
		call	_TS_CONF_set_tsa_name
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_638
		push	esi
		push	ebx
		push	edi
		call	_TS_CONF_set_ess_cert_id_chain
		mov	ebx, [esp+20h+var_4]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_63C
		push	ebx
		push	esi
		call	_TS_RESP_create_response
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jnz	short loc_647
		jmp	short loc_63C
; ---------------------------------------------------------------------------

loc_638:				; CODE XREF: _create_response+46j
					; _create_response+55j	...
		mov	ebx, [esp+14h+var_4]

loc_63C:				; CODE XREF: _create_response+2Bj
					; _create_response+150j ...
		push	ebp
		call	_TS_RESP_free
		add	esp, 4
		xor	ebp, ebp

loc_647:				; CODE XREF: _create_response+160j
		push	esi
		call	_TS_RESP_CTX_free
		push	ebx
		call	_BIO_free_all
		add	esp, 8
		mov	eax, ebp
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
_create_response endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 660h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_create_verify_ctx proc	near		; CODE XREF: _verify_command+6Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		xor	ebx, ebx
		push	esi
		push	edi
		xor	esi, esi
		xor	edi, edi
		test	ebp, ebp
		jnz	short loc_6C9
		cmp	[esp+10h+arg_4], ebx
		jnz	short loc_6C9
		mov	eax, [esp+10h+arg_8]
		test	eax, eax
		jz	short loc_6C2
		push	offset ??_C@_02JDPG@rb?$AA@ ; `string'
		push	eax
		call	_BIO_new_file
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	loc_770
		push	ebp
		push	ebx
		call	_d2i_TS_REQ_bio
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	loc_770
		push	ebp
		push	edi
		call	_TS_REQ_to_TS_VERIFY_CTX
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	loc_770
		jmp	short loc_73E
; ---------------------------------------------------------------------------

loc_6C2:				; CODE XREF: _create_verify_ctx+1Ej
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6C9:				; CODE XREF: _create_verify_ctx+10j
					; _create_verify_ctx+16j
		call	_TS_VERIFY_CTX_new
		mov	esi, eax
		test	esi, esi
		jz	loc_770
		mov	dword ptr [esi], 42h ; 'B'
		test	ebp, ebp
		jz	short loc_6FF
		push	offset ??_C@_02JDPG@rb?$AA@ ; `string'
		push	ebp
		mov	dword ptr [esi], 52h ; 'R'
		call	_BIO_new_file
		add	esp, 8
		mov	[esi+1Ch], eax
		test	eax, eax
		jz	short loc_770
		jmp	short loc_73E
; ---------------------------------------------------------------------------

loc_6FF:				; CODE XREF: _create_verify_ctx+80j
		mov	eax, [esp+10h+arg_4]
		test	eax, eax
		jz	short loc_73E
		lea	ecx, [esp+10h+arg_0]
		mov	dword ptr [esi], 4Ah ; 'J'
		push	ecx
		push	eax
		call	_string_to_hex
		add	esp, 8
		mov	[esi+14h], eax
		test	eax, eax
		jnz	short loc_737
		push	offset ??_C@_0BH@DIIACFIB@invalid?5digest?5string?6?$AA@ ; "invalid digest string\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 8
		jmp	short loc_770
; ---------------------------------------------------------------------------

loc_737:				; CODE XREF: _create_verify_ctx+C0j
		mov	eax, [esp+10h+arg_0]
		mov	[esi+18h], eax

loc_73E:				; CODE XREF: _create_verify_ctx+60j
					; _create_verify_ctx+9Dj ...
		push	[esp+10h+arg_10]
		or	dword ptr [esi], 1
		push	[esp+14h+arg_C]
		call	_create_cert_store
		add	esp, 8
		mov	[esi+4], eax
		test	eax, eax
		jz	short loc_770
		mov	eax, [esp+10h+arg_14]
		test	eax, eax
		jz	short loc_77B
		push	eax
		call	_TS_CONF_load_certs
		add	esp, 4
		mov	[esi+8], eax
		test	eax, eax
		jnz	short loc_77B

loc_770:				; CODE XREF: _create_verify_ctx+32j
					; _create_verify_ctx+46j ...
		push	esi
		call	_TS_VERIFY_CTX_free
		add	esp, 4
		xor	esi, esi

loc_77B:				; CODE XREF: _create_verify_ctx+FEj
					; _create_verify_ctx+10Ej
		push	ebx
		call	_BIO_free_all
		push	edi
		call	_TS_REQ_free
		add	esp, 8
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_create_verify_ctx endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 794h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_load_config_file proc near		; CODE XREF: _ts_main+9A6p
					; _ts_main+9E6p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 4
		call	__chkstk
		push	esi
		mov	esi, [esp+8+arg_0]
		mov	[esp+8+var_4], 0FFFFFFFFh
		push	edi
		test	esi, esi
		jnz	short loc_7DA
		mov	edi, dword ptr ds:__imp__getenv
		push	offset ??_C@_0N@JPGHCLFD@OPENSSL_CONF?$AA@ ; "OPENSSL_CONF"
		call	edi ; __imp__getenv
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_7DA
		push	offset ??_C@_0M@JALBFNKB@SSLEAY_CONF?$AA@ ; "SSLEAY_CONF"
		call	edi ; __imp__getenv
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_7DA
		pop	edi
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_7DA:				; CODE XREF: _load_config_file+1Aj
					; _load_config_file+30j ...
		push	0
		call	_NCONF_new
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_7FD
		lea	eax, [esp+0Ch+var_4]
		push	eax
		push	esi
		push	edi
		call	_NCONF_load
		add	esp, 0Ch
		test	eax, eax
		jg	short loc_82F

loc_7FD:				; CODE XREF: _load_config_file+54j
		mov	eax, [esp+0Ch+var_4]
		push	esi
		test	eax, eax
		jg	short loc_81B
		push	offset ??_C@_0CE@NCMMMAJM@error?5loading?5the?5config?5file?5?8?$CF@ ; "error loading the config file '%s'\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 0Ch
		jmp	short loc_82F
; ---------------------------------------------------------------------------

loc_81B:				; CODE XREF: _load_config_file+70j
		push	eax
		push	offset ??_C@_0CH@MPAIMKJO@error?5on?5line?5?$CFld?5of?5config?5file@ ; "error on line %ld of config file '%s'\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 10h

loc_82F:				; CODE XREF: _load_config_file+67j
					; _load_config_file+85j
		test	edi, edi
		jz	loc_8B7
		push	esi
		push	offset ??_C@_0BN@DBMBACJB@Using?5configuration?5from?5?$CFs?6?$AA@ ; "Using configuration from %s\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_08NOLCFLKC@oid_file?$AA@ ;	"oid_file"
		push	0
		push	edi
		call	_NCONF_get_string
		add	esp, 18h
		test	eax, eax
		jz	short loc_891
		push	offset ??_C@_01KDCPPGHE@r?$AA@ ; `string'
		push	eax
		call	_BIO_new_file
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_880
		push	dword ptr ds:_bio_err
		call	_ERR_print_errors
		add	esp, 4
		jmp	short loc_896
; ---------------------------------------------------------------------------

loc_880:				; CODE XREF: _load_config_file+DAj
		push	esi
		call	_OBJ_create_objects
		push	esi
		call	_BIO_free_all
		add	esp, 8
		jmp	short loc_896
; ---------------------------------------------------------------------------

loc_891:				; CODE XREF: _load_config_file+C6j
		call	_ERR_clear_error

loc_896:				; CODE XREF: _load_config_file+EAj
					; _load_config_file+FBj
		push	edi
		push	dword ptr ds:_bio_err
		call	_add_oid_section
		add	esp, 8
		test	eax, eax
		jnz	short loc_8B7
		push	dword ptr ds:_bio_err
		call	_ERR_print_errors
		add	esp, 4

loc_8B7:				; CODE XREF: _load_config_file+9Dj
					; _load_config_file+113j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ecx
		retn
_load_config_file endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_next_serial	proc near		; CODE XREF: _serial_cb+7p

var_404		= byte ptr -404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 404h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+404h+var_4], eax
		push	ebx
		push	ebp
		mov	ebp, [esp+40Ch+arg_0]
		xor	ebx, ebx
		push	esi
		push	edi
		xor	edi, edi
		call	_ASN1_INTEGER_new
		mov	esi, eax
		test	esi, esi
		jz	loc_997
		push	offset ??_C@_01KDCPPGHE@r?$AA@ ; `string'
		push	ebp
		call	_BIO_new_file
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_931
		call	_ERR_clear_error
		push	ebp
		push	offset ??_C@_0EF@LGJIOGOJ@Warning?3?5could?5not?5open?5file?5?$CFs?5@ ;	"Warning: could	not open file %s for rea"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	1
		push	esi
		call	_ASN1_INTEGER_set
		add	esp, 14h
		test	eax, eax
		jz	short loc_997
		jmp	short loc_9A2
; ---------------------------------------------------------------------------

loc_931:				; CODE XREF: _next_serial+48j
		push	400h
		lea	eax, [esp+418h+var_404]
		push	eax
		push	esi
		push	ebx
		call	_a2i_ASN1_INTEGER
		add	esp, 10h
		test	eax, eax
		jnz	short loc_95F
		push	ebp
		push	offset ??_C@_0BP@IBMKHAAI@unable?5to?5load?5number?5from?5?$CFs?6?$AA@ ; "unable to load number	from %s\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 0Ch
		jmp	short loc_997
; ---------------------------------------------------------------------------

loc_95F:				; CODE XREF: _next_serial+87j
		push	0
		push	esi
		call	_ASN1_INTEGER_to_BN
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_997
		push	esi
		call	_ASN1_INTEGER_free
		push	1
		push	edi
		xor	esi, esi
		call	_BN_add_word
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_997
		push	esi
		push	edi
		call	_BN_to_ASN1_INTEGER
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_9A2

loc_997:				; CODE XREF: _next_serial+30j
					; _next_serial+6Dj ...
		push	esi
		call	_ASN1_INTEGER_free
		add	esp, 4
		xor	esi, esi

loc_9A2:				; CODE XREF: _next_serial+6Fj
					; _next_serial+D5j
		push	ebx
		call	_BIO_free_all
		push	edi
		call	_BN_free
		mov	ecx, [esp+41Ch+var_4]
		add	esp, 8
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 404h
		retn
_next_serial	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9CCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int printf(const char	*Format, ...)
		public _printf
_printf		proc near		; CODE XREF: _verify_command+99p
					; _verify_command+AAp ...

Format		= dword	ptr  4
arg_4		= byte ptr  8

		push	esi
		mov	esi, [esp+4+Format]
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		lea	ecx, [esp+4+arg_4]
		push	ecx
		push	0
		push	esi
		push	eax
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		pop	esi
		retn
_printf		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_query_command	proc near		; CODE XREF: _ts_main+9CEp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		mov	eax, 4
		call	__chkstk
		mov	eax, [esp+4+arg_18]
		push	ebx
		push	ebp
		push	esi
		push	edi
		xor	edi, edi
		mov	[esp+14h+var_4], 0
		xor	ebp, ebp
		xor	ebx, ebx
		xor	esi, esi
		test	eax, eax
		jz	short loc_A46
		push	offset ??_C@_02JDPG@rb?$AA@ ; `string'
		push	eax
		call	_BIO_new_file
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jz	$end$27
		push	esi
		push	ebp
		call	_d2i_TS_REQ_bio
		add	esp, 8
		jmp	short loc_A9B
; ---------------------------------------------------------------------------

loc_A46:				; CODE XREF: _query_command+24j
		mov	eax, [esp+14h+arg_4]
		test	eax, eax
		jnz	short loc_A81
		push	eax
		call	dword ptr ds:__imp____acrt_iob_func
		mov	ecx, [esp+18h+arg_0]
		add	esp, 4
		test	ecx, ecx
		jnz	short loc_A69
		push	ecx
		push	eax
		call	_BIO_new_fp
		jmp	short loc_A74
; ---------------------------------------------------------------------------

loc_A69:				; CODE XREF: _query_command+62j
		push	offset ??_C@_02JDPG@rb?$AA@ ; `string'
		push	ecx
		call	_BIO_new_file

loc_A74:				; CODE XREF: _query_command+6Bj
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	short $end$27
		mov	eax, [esp+14h+arg_4]

loc_A81:				; CODE XREF: _query_command+50j
		push	[esp+14h+arg_14]
		push	[esp+18h+arg_10]
		push	[esp+1Ch+arg_C]
		push	[esp+20h+arg_8]
		push	eax
		push	ebx
		call	_create_query
		add	esp, 18h

loc_A9B:				; CODE XREF: _query_command+48j
		mov	edi, eax
		test	edi, edi
		jz	short $end$27
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		mov	ecx, [esp+18h+arg_1C]
		add	esp, 4
		test	ecx, ecx
		jnz	short loc_ABD
		push	ecx
		push	eax
		call	_BIO_new_fp
		jmp	short loc_AC8
; ---------------------------------------------------------------------------

loc_ABD:				; CODE XREF: _query_command+B6j
		push	offset ??_C@_02GMLFBBN@wb?$AA@ ; `string'
		push	ecx
		call	_BIO_new_file

loc_AC8:				; CODE XREF: _query_command+BFj
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short $end$27
		cmp	[esp+14h+arg_20], 0
		push	edi
		push	esi
		jz	short loc_AE1
		call	_TS_REQ_print_bio
		jmp	short loc_AE6
; ---------------------------------------------------------------------------

loc_AE1:				; CODE XREF: _query_command+DCj
		call	_i2d_TS_REQ_bio

loc_AE6:				; CODE XREF: _query_command+E3j
		add	esp, 8
		test	eax, eax
		jz	short $end$27
		mov	[esp+14h+var_4], 1

$end$27:				; CODE XREF: _query_command+38j
					; _query_command+7Fj ...
		push	dword ptr ds:_bio_err
		call	_ERR_print_errors
		push	ebp
		call	_BIO_free_all
		push	ebx
		call	_BIO_free_all
		push	esi
		call	_BIO_free_all
		push	edi
		call	_TS_REQ_free
		mov	eax, [esp+28h+var_4]
		add	esp, 14h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
_query_command	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B28h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_read_PKCS7	proc near		; CODE XREF: _reply_command+33p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	edi
		xor	edi, edi
		mov	[esp+14h+var_4], 0
		push	edi
		push	[esp+18h+arg_0]
		xor	ebx, ebx
		xor	esi, esi
		call	_d2i_PKCS7_bio
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jz	short $end$11
		push	ebp
		call	_PKCS7_to_TS_TST_INFO
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	short $end$11
		call	_TS_RESP_new
		mov	esi, eax
		test	esi, esi
		jz	short $end$11
		call	_TS_STATUS_INFO_new
		mov	edi, eax
		test	edi, edi
		jz	short $end$11
		push	0
		push	dword ptr [edi]
		call	_ASN1_INTEGER_set
		add	esp, 8
		test	eax, eax
		jz	short $end$11
		push	edi
		push	esi
		call	_TS_RESP_set_status_info
		add	esp, 8
		test	eax, eax
		jz	short $end$11
		push	ebx
		push	ebp
		push	esi
		call	_TS_RESP_set_tst_info
		add	esp, 0Ch
		mov	[esp+14h+var_4], 1
		xor	ebp, ebp
		xor	ebx, ebx

$end$11:				; CODE XREF: _read_PKCS7+2Dj
					; _read_PKCS7+3Cj ...
		push	ebp
		call	_PKCS7_free
		push	ebx
		call	_TS_TST_INFO_free
		add	esp, 8
		cmp	[esp+14h+var_4], 0
		jnz	short loc_BD2
		push	esi
		call	_TS_RESP_free
		add	esp, 4
		xor	esi, esi

loc_BD2:				; CODE XREF: _read_PKCS7+9Dj
		push	edi
		call	_TS_STATUS_INFO_free
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
_read_PKCS7	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BE4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_reply_command	proc near		; CODE XREF: _ts_main+A5Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch
arg_2C		= dword	ptr  30h
arg_30		= dword	ptr  34h
arg_34		= dword	ptr  38h

		mov	eax, [esp+arg_24]
		push	ebx
		push	ebp
		push	esi
		push	edi
		xor	ebp, ebp
		xor	esi, esi
		xor	ebx, ebx
		xor	edi, edi
		test	eax, eax
		jz	short loc_C2F
		push	offset ??_C@_02JDPG@rb?$AA@ ; `string'
		push	eax
		call	_BIO_new_file
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	$end$32
		cmp	[esp+10h+arg_28], esi
		jz	short loc_C23
		push	ebx
		call	_read_PKCS7
		add	esp, 4
		mov	esi, eax
		jmp	short loc_C78
; ---------------------------------------------------------------------------

loc_C23:				; CODE XREF: _reply_command+30j
		push	0
		push	ebx
		call	_d2i_TS_RESP_bio
		mov	esi, eax
		jmp	short loc_C75
; ---------------------------------------------------------------------------

loc_C2F:				; CODE XREF: _reply_command+12j
		push	[esp+10h+arg_20]
		push	[esp+14h+arg_1C]
		push	[esp+18h+arg_18]
		push	[esp+1Ch+arg_14]
		push	[esp+20h+arg_10]
		push	[esp+24h+arg_C]
		push	[esp+28h+arg_8]
		push	[esp+2Ch+arg_4]
		push	[esp+30h+arg_0]
		call	_create_response
		mov	esi, eax
		add	esp, 24h
		test	esi, esi
		jz	loc_D01
		push	offset ??_C@_0BO@CJJOIHDP@Response?5has?5been?5generated?4?6?$AA@ ; "Response has been generated.\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf

loc_C75:				; CODE XREF: _reply_command+49j
		add	esp, 8

loc_C78:				; CODE XREF: _reply_command+3Dj
		test	esi, esi
		jz	$end$32
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		mov	ecx, [esp+14h+arg_2C]
		add	esp, 4
		test	ecx, ecx
		jnz	short loc_C9C
		push	ecx
		push	eax
		call	_BIO_new_fp
		jmp	short loc_CA7
; ---------------------------------------------------------------------------

loc_C9C:				; CODE XREF: _reply_command+ADj
		push	offset ??_C@_02GMLFBBN@wb?$AA@ ; `string'
		push	ecx
		call	_BIO_new_file

loc_CA7:				; CODE XREF: _reply_command+B6j
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short $end$32
		push	esi
		cmp	[esp+14h+arg_34], ebp
		jz	short loc_CD6
		cmp	[esp+14h+arg_30], ebp
		jz	short loc_CCE
		call	_TS_RESP_get_tst_info
		push	eax
		push	edi
		call	_TS_TST_INFO_print_bio
		add	esp, 0Ch
		jmp	short loc_CF6
; ---------------------------------------------------------------------------

loc_CCE:				; CODE XREF: _reply_command+D7j
		push	edi
		call	_TS_RESP_print_bio
		jmp	short loc_CF3
; ---------------------------------------------------------------------------

loc_CD6:				; CODE XREF: _reply_command+D1j
		cmp	[esp+14h+arg_30], ebp
		jz	short loc_CED
		call	_TS_RESP_get_token
		push	eax
		push	edi
		call	_i2d_PKCS7_bio
		add	esp, 0Ch
		jmp	short loc_CF6
; ---------------------------------------------------------------------------

loc_CED:				; CODE XREF: _reply_command+F6j
		push	edi
		call	_i2d_TS_RESP_bio

loc_CF3:				; CODE XREF: _reply_command+F0j
		add	esp, 8

loc_CF6:				; CODE XREF: _reply_command+E8j
					; _reply_command+107j
		test	eax, eax
		jz	short $end$32
		mov	ebp, 1
		jmp	short $end$32
; ---------------------------------------------------------------------------

loc_D01:				; CODE XREF: _reply_command+7Bj
		push	offset ??_C@_0BM@IBMCAENB@Response?5is?5not?5generated?4?6?$AA@	; "Response is not generated.\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 8

$end$32:				; CODE XREF: _reply_command+26j
					; _reply_command+96j ...
		push	dword ptr ds:_bio_err
		call	_ERR_print_errors
		push	ebx
		call	_BIO_free_all
		push	0
		call	_BIO_free_all
		push	0
		call	_BIO_free_all
		push	0
		call	_BIO_free_all
		push	edi
		call	_BIO_free_all
		push	esi
		call	_TS_RESP_free
		add	esp, 1Ch
		mov	eax, ebp
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_reply_command	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D50h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_save_ts_serial	proc near		; CODE XREF: _serial_cb+38p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		push	offset ??_C@_01NOFIACDB@w?$AA@ ; `string'
		push	[esp+0Ch+arg_0]
		xor	edi, edi
		call	_BIO_new_file
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_DA1
		push	[esp+8+arg_4]
		push	esi
		call	_i2a_ASN1_INTEGER
		add	esp, 8
		test	eax, eax
		jle	short loc_DA1
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	esi
		call	_BIO_puts
		add	esp, 8
		test	eax, eax
		jle	short loc_DA1
		push	esi
		mov	edi, 1
		call	_BIO_free_all
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_DA1:				; CODE XREF: _save_ts_serial+19j
					; _save_ts_serial+2Aj ...
		push	[esp+8+arg_0]
		push	offset ??_C@_0CE@BDGKPNBC@could?5not?5save?5serial?5number?5to?5@ ; "could not save serial number to %s\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 0Ch
		push	esi
		call	_BIO_free_all
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_save_ts_serial	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0DC8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_serial_cb	proc near		; DATA XREF: _create_response+5Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		push	esi
		call	_next_serial
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_DFE
		mov	esi, [esp+8+arg_0]
		push	offset ??_C@_0CH@IKKNJBOJ@Error?5during?5serial?5number?5gener@	; "Error during	serial number generation."
		push	2
		push	esi
		call	_TS_RESP_CTX_set_status_info
		push	11h
		push	esi
		call	_TS_RESP_CTX_add_failure_info
		add	esp, 14h
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_DFE:				; CODE XREF: _serial_cb+13j
		push	edi
		push	esi
		call	_save_ts_serial
		add	esp, 8
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_serial_cb	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E10h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ts_main
_ts_main	proc near

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 6Ch ; 'l'
		call	__chkstk
		push	ebx
		mov	eax, 1
		mov	[esp+70h+var_48], 0
		push	ebp
		mov	[esp+74h+var_60], eax
		xor	ebx, ebx
		xor	eax, eax
		mov	[esp+74h+var_14], 0
		xor	ebp, ebp
		mov	[esp+74h+var_38], 0
		mov	[esp+74h+var_58], ebp
		mov	[esp+74h+var_68], ebx
		mov	[esp+74h+var_2C], ebx
		mov	[esp+74h+var_4C], eax
		mov	[esp+74h+var_3C], eax
		mov	[esp+74h+var_6C], eax
		mov	[esp+74h+var_30], eax
		mov	[esp+74h+var_54], eax
		mov	[esp+74h+var_40], eax
		mov	[esp+74h+var_44], eax
		mov	[esp+74h+var_5C], eax
		mov	[esp+74h+var_64], eax
		mov	[esp+74h+var_34], eax
		mov	[esp+74h+var_1C], eax
		mov	[esp+74h+var_20], eax
		mov	[esp+74h+var_24], eax
		mov	[esp+74h+var_8], eax
		mov	[esp+74h+var_C], eax
		mov	[esp+74h+var_10], eax
		mov	[esp+74h+var_18], eax
		mov	[esp+74h+var_50], eax
		mov	[esp+74h+var_28], eax
		mov	[esp+74h+var_4], eax
		call	_ERR_load_crypto_strings
		mov	eax, dword ptr ds:_bio_err
		test	eax, eax
		jnz	short loc_EEC
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		add	esp, 4
		mov	dword ptr ds:_bio_err, eax
		test	eax, eax
		jz	short loc_EEC
		push	2
		mov	[esp+78h+var_4], 1
		call	dword ptr ds:__imp____acrt_iob_func
		push	eax
		push	10h
		push	6Ah ; 'j'
		push	dword ptr ds:_bio_err
		call	_BIO_ctrl
		mov	eax, dword ptr ds:_bio_err
		add	esp, 14h

loc_EEC:				; CODE XREF: _ts_main+9Bj _ts_main+B2j
		push	esi
		push	edi
		push	0
		push	eax
		call	_load_config
		add	esp, 8
		test	eax, eax
		jz	loc_1741	; jumptable 0000179B default case
		mov	esi, [esp+7Ch+arg_0]
		mov	edi, [esp+7Ch+arg_4]
		dec	esi
		add	edi, 4
		test	esi, esi
		jle	loc_179B
		nop	dword ptr [eax+eax+00h]

loc_F20:				; CODE XREF: _ts_main+883j
		mov	ebx, [edi]
		mov	ecx, offset ??_C@_07OOKHNANK@?9config?$AA@ ; "-config"
		mov	eax, ebx
		nop	dword ptr [eax+00000000h]

loc_F30:				; CODE XREF: _ts_main+13Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_F50
		test	dl, dl
		jz	short loc_F4C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_F50
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_F30

loc_F4C:				; CODE XREF: _ts_main+128j
		xor	eax, eax
		jmp	short loc_F55
; ---------------------------------------------------------------------------

loc_F50:				; CODE XREF: _ts_main+124j
					; _ts_main+130j
		sbb	eax, eax
		or	eax, 1

loc_F55:				; CODE XREF: _ts_main+13Ej
		test	eax, eax
		jnz	short loc_F74
		mov	eax, esi
		dec	esi
		cmp	eax, 1
		jl	$usage$248	; jumptable 0000179B case 0
		mov	eax, [edi+4]
		add	edi, 4
		mov	[esp+7Ch+var_48], eax
		jmp	loc_1681
; ---------------------------------------------------------------------------

loc_F74:				; CODE XREF: _ts_main+147j
		mov	ecx, offset ??_C@_08ONPADCNC@?9section?$AA@ ; "-section"
		mov	eax, ebx
		nop	dword ptr [eax+eax+00h]

loc_F80:				; CODE XREF: _ts_main+18Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_FA0
		test	dl, dl
		jz	short loc_F9C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_FA0
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_F80

loc_F9C:				; CODE XREF: _ts_main+178j
		xor	eax, eax
		jmp	short loc_FA5
; ---------------------------------------------------------------------------

loc_FA0:				; CODE XREF: _ts_main+174j
					; _ts_main+180j
		sbb	eax, eax
		or	eax, 1

loc_FA5:				; CODE XREF: _ts_main+18Ej
		test	eax, eax
		jnz	short loc_FC4
		mov	eax, esi
		dec	esi
		cmp	eax, 1
		jl	$usage$248	; jumptable 0000179B case 0
		mov	eax, [edi+4]
		add	edi, 4
		mov	[esp+7Ch+var_14], eax
		jmp	loc_1681
; ---------------------------------------------------------------------------

loc_FC4:				; CODE XREF: _ts_main+197j
		mov	ecx, offset ??_C@_06JIMFLALG@?9query?$AA@ ; "-query"
		mov	eax, ebx
		nop	dword ptr [eax+eax+00h]

loc_FD0:				; CODE XREF: _ts_main+1DAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_FF0
		test	dl, dl
		jz	short loc_FEC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_FF0
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_FD0

loc_FEC:				; CODE XREF: _ts_main+1C8j
		xor	eax, eax
		jmp	short loc_FF5
; ---------------------------------------------------------------------------

loc_FF0:				; CODE XREF: _ts_main+1C4j
					; _ts_main+1D0j
		sbb	eax, eax
		or	eax, 1

loc_FF5:				; CODE XREF: _ts_main+1DEj
		test	eax, eax
		jnz	short loc_1009
		test	ebp, ebp
		jnz	$usage$248	; jumptable 0000179B case 0
		lea	ebp, [eax+1]
		jmp	loc_1681
; ---------------------------------------------------------------------------

loc_1009:				; CODE XREF: _ts_main+1E7j
		mov	ecx, offset ??_C@_05DFDJJDDF@?9data?$AA@ ; "-data"
		mov	eax, ebx

loc_1010:				; CODE XREF: _ts_main+21Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1030
		test	dl, dl
		jz	short loc_102C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1030
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1010

loc_102C:				; CODE XREF: _ts_main+208j
		xor	eax, eax
		jmp	short loc_1035
; ---------------------------------------------------------------------------

loc_1030:				; CODE XREF: _ts_main+204j
					; _ts_main+210j
		sbb	eax, eax
		or	eax, 1

loc_1035:				; CODE XREF: _ts_main+21Ej
		test	eax, eax
		jnz	short loc_1054
		mov	eax, esi
		dec	esi
		cmp	eax, 1
		jl	$usage$248	; jumptable 0000179B case 0
		mov	eax, [edi+4]
		add	edi, 4
		mov	[esp+7Ch+var_58], eax
		jmp	loc_1681
; ---------------------------------------------------------------------------

loc_1054:				; CODE XREF: _ts_main+227j
		mov	ecx, offset ??_C@_07JCKCKHOC@?9digest?$AA@ ; "-digest"
		mov	eax, ebx
		nop	dword ptr [eax+eax+00h]

loc_1060:				; CODE XREF: _ts_main+26Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1080
		test	dl, dl
		jz	short loc_107C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1080
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1060

loc_107C:				; CODE XREF: _ts_main+258j
		xor	eax, eax
		jmp	short loc_1085
; ---------------------------------------------------------------------------

loc_1080:				; CODE XREF: _ts_main+254j
					; _ts_main+260j
		sbb	eax, eax
		or	eax, 1

loc_1085:				; CODE XREF: _ts_main+26Ej
		test	eax, eax
		jnz	short loc_10A4
		mov	eax, esi
		dec	esi
		cmp	eax, 1
		jl	$usage$248	; jumptable 0000179B case 0
		mov	ebx, [edi+4]
		add	edi, 4
		mov	[esp+7Ch+var_68], ebx
		jmp	loc_1685
; ---------------------------------------------------------------------------

loc_10A4:				; CODE XREF: _ts_main+277j
		mov	ecx, offset ??_C@_05LGFPCDPE@?9rand?$AA@ ; "-rand"
		mov	eax, ebx
		nop	dword ptr [eax+eax+00h]

loc_10B0:				; CODE XREF: _ts_main+2BAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_10D0
		test	dl, dl
		jz	short loc_10CC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_10D0
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_10B0

loc_10CC:				; CODE XREF: _ts_main+2A8j
		xor	eax, eax
		jmp	short loc_10D5
; ---------------------------------------------------------------------------

loc_10D0:				; CODE XREF: _ts_main+2A4j
					; _ts_main+2B0j
		sbb	eax, eax
		or	eax, 1

loc_10D5:				; CODE XREF: _ts_main+2BEj
		test	eax, eax
		jnz	short loc_10F4
		mov	eax, esi
		dec	esi
		cmp	eax, 1
		jl	$usage$248	; jumptable 0000179B case 0
		mov	eax, [edi+4]
		add	edi, 4
		mov	[esp+7Ch+var_4C], eax
		jmp	loc_1681
; ---------------------------------------------------------------------------

loc_10F4:				; CODE XREF: _ts_main+2C7j
		mov	ecx, offset ??_C@_07EDOEKPLG@?9policy?$AA@ ; "-policy"
		mov	eax, ebx
		nop	dword ptr [eax+eax+00h]

loc_1100:				; CODE XREF: _ts_main+30Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1120
		test	dl, dl
		jz	short loc_111C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1120
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1100

loc_111C:				; CODE XREF: _ts_main+2F8j
		xor	eax, eax
		jmp	short loc_1125
; ---------------------------------------------------------------------------

loc_1120:				; CODE XREF: _ts_main+2F4j
					; _ts_main+300j
		sbb	eax, eax
		or	eax, 1

loc_1125:				; CODE XREF: _ts_main+30Ej
		test	eax, eax
		jnz	short loc_1144
		mov	eax, esi
		dec	esi
		cmp	eax, 1
		jl	$usage$248	; jumptable 0000179B case 0
		mov	eax, [edi+4]
		add	edi, 4
		mov	[esp+7Ch+var_3C], eax
		jmp	loc_1681
; ---------------------------------------------------------------------------

loc_1144:				; CODE XREF: _ts_main+317j
		mov	ecx, offset ??_C@_09EOFPIKIL@?9no_nonce?$AA@ ; "-no_nonce"
		mov	eax, ebx
		nop	dword ptr [eax+eax+00h]

loc_1150:				; CODE XREF: _ts_main+35Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1170
		test	dl, dl
		jz	short loc_116C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1170
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1150

loc_116C:				; CODE XREF: _ts_main+348j
		xor	eax, eax
		jmp	short loc_1175
; ---------------------------------------------------------------------------

loc_1170:				; CODE XREF: _ts_main+344j
					; _ts_main+350j
		sbb	eax, eax
		or	eax, 1

loc_1175:				; CODE XREF: _ts_main+35Ej
		test	eax, eax
		jnz	short loc_118B
		mov	ebx, [esp+7Ch+var_68]
		mov	ecx, 1
		mov	[esp+7Ch+var_6C], ecx
		jmp	loc_1689
; ---------------------------------------------------------------------------

loc_118B:				; CODE XREF: _ts_main+367j
		mov	ecx, offset ??_C@_05DLEDECNE@?9cert?$AA@ ; "-cert"
		mov	eax, ebx

loc_1192:				; CODE XREF: _ts_main+39Cj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_11B2
		test	dl, dl
		jz	short loc_11AE
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_11B2
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1192

loc_11AE:				; CODE XREF: _ts_main+38Aj
		xor	eax, eax
		jmp	short loc_11B7
; ---------------------------------------------------------------------------

loc_11B2:				; CODE XREF: _ts_main+386j
					; _ts_main+392j
		sbb	eax, eax
		or	eax, 1

loc_11B7:				; CODE XREF: _ts_main+3A0j
		test	eax, eax
		jnz	short loc_11C8
		mov	[esp+7Ch+var_30], 1
		jmp	loc_1681
; ---------------------------------------------------------------------------

loc_11C8:				; CODE XREF: _ts_main+3A9j
		mov	ecx, offset ??_C@_03DAJLOBIG@?9in?$AA@ ; `string'
		mov	eax, ebx
		nop

loc_11D0:				; CODE XREF: _ts_main+3DAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_11F0
		test	dl, dl
		jz	short loc_11EC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_11F0
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_11D0

loc_11EC:				; CODE XREF: _ts_main+3C8j
		xor	eax, eax
		jmp	short loc_11F5
; ---------------------------------------------------------------------------

loc_11F0:				; CODE XREF: _ts_main+3C4j
					; _ts_main+3D0j
		sbb	eax, eax
		or	eax, 1

loc_11F5:				; CODE XREF: _ts_main+3DEj
		test	eax, eax
		jnz	short loc_1214
		mov	eax, esi
		dec	esi
		cmp	eax, 1
		jl	$usage$248	; jumptable 0000179B case 0
		mov	eax, [edi+4]
		add	edi, 4
		mov	[esp+7Ch+var_54], eax
		jmp	loc_1681
; ---------------------------------------------------------------------------

loc_1214:				; CODE XREF: _ts_main+3E7j
		mov	ecx, offset ??_C@_09NKMONJIP@?9token_in?$AA@ ; "-token_in"
		mov	eax, ebx
		nop	dword ptr [eax+eax+00h]

loc_1220:				; CODE XREF: _ts_main+42Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1240
		test	dl, dl
		jz	short loc_123C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1240
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1220

loc_123C:				; CODE XREF: _ts_main+418j
		xor	eax, eax
		jmp	short loc_1245
; ---------------------------------------------------------------------------

loc_1240:				; CODE XREF: _ts_main+414j
					; _ts_main+420j
		sbb	eax, eax
		or	eax, 1

loc_1245:				; CODE XREF: _ts_main+42Ej
		test	eax, eax
		jnz	short loc_1256
		mov	[esp+7Ch+var_50], 1
		jmp	loc_1681
; ---------------------------------------------------------------------------

loc_1256:				; CODE XREF: _ts_main+437j
		mov	ecx, offset ??_C@_04HKKABCEL@?9out?$AA@	; "-out"
		mov	eax, ebx
		nop	dword ptr [eax]

loc_1260:				; CODE XREF: _ts_main+46Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1280
		test	dl, dl
		jz	short loc_127C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1280
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1260

loc_127C:				; CODE XREF: _ts_main+458j
		xor	eax, eax
		jmp	short loc_1285
; ---------------------------------------------------------------------------

loc_1280:				; CODE XREF: _ts_main+454j
					; _ts_main+460j
		sbb	eax, eax
		or	eax, 1

loc_1285:				; CODE XREF: _ts_main+46Ej
		test	eax, eax
		jnz	short loc_12A4
		mov	eax, esi
		dec	esi
		cmp	eax, 1
		jl	$usage$248	; jumptable 0000179B case 0
		mov	eax, [edi+4]
		add	edi, 4
		mov	[esp+7Ch+var_40], eax
		jmp	loc_1681
; ---------------------------------------------------------------------------

loc_12A4:				; CODE XREF: _ts_main+477j
		mov	ecx, offset ??_C@_0L@DJGPPNH@?9token_out?$AA@ ;	"-token_out"
		mov	eax, ebx
		nop	dword ptr [eax+eax+00h]

loc_12B0:				; CODE XREF: _ts_main+4BAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_12D0
		test	dl, dl
		jz	short loc_12CC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_12D0
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_12B0

loc_12CC:				; CODE XREF: _ts_main+4A8j
		xor	eax, eax
		jmp	short loc_12D5
; ---------------------------------------------------------------------------

loc_12D0:				; CODE XREF: _ts_main+4A4j
					; _ts_main+4B0j
		sbb	eax, eax
		or	eax, 1

loc_12D5:				; CODE XREF: _ts_main+4BEj
		test	eax, eax
		jnz	short loc_12E6
		mov	[esp+7Ch+var_28], 1
		jmp	loc_1681
; ---------------------------------------------------------------------------

loc_12E6:				; CODE XREF: _ts_main+4C7j
		mov	ecx, offset ??_C@_05OEBEIMJA@?9text?$AA@ ; "-text"
		mov	eax, ebx
		nop	dword ptr [eax]

loc_12F0:				; CODE XREF: _ts_main+4FAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1310
		test	dl, dl
		jz	short loc_130C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1310
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_12F0

loc_130C:				; CODE XREF: _ts_main+4E8j
		xor	eax, eax
		jmp	short loc_1315
; ---------------------------------------------------------------------------

loc_1310:				; CODE XREF: _ts_main+4E4j
					; _ts_main+4F0j
		sbb	eax, eax
		or	eax, 1

loc_1315:				; CODE XREF: _ts_main+4FEj
		test	eax, eax
		jnz	short loc_1326
		mov	[esp+7Ch+var_44], 1
		jmp	loc_1681
; ---------------------------------------------------------------------------

loc_1326:				; CODE XREF: _ts_main+507j
		mov	ecx, offset ??_C@_06PMOHMEN@?9reply?$AA@ ; "-reply"
		mov	eax, ebx
		nop	dword ptr [eax]

loc_1330:				; CODE XREF: _ts_main+53Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1350
		test	dl, dl
		jz	short loc_134C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1350
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1330

loc_134C:				; CODE XREF: _ts_main+528j
		xor	eax, eax
		jmp	short loc_1355
; ---------------------------------------------------------------------------

loc_1350:				; CODE XREF: _ts_main+524j
					; _ts_main+530j
		sbb	eax, eax
		or	eax, 1

loc_1355:				; CODE XREF: _ts_main+53Ej
		test	eax, eax
		jnz	short loc_1369
		test	ebp, ebp
		jnz	$usage$248	; jumptable 0000179B case 0
		lea	ebp, [eax+2]
		jmp	loc_1681
; ---------------------------------------------------------------------------

loc_1369:				; CODE XREF: _ts_main+547j
		mov	ecx, offset ??_C@_0L@LMAFEAOJ@?9queryfile?$AA@ ; "-queryfile"
		mov	eax, ebx

loc_1370:				; CODE XREF: _ts_main+57Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1390
		test	dl, dl
		jz	short loc_138C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1390
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1370

loc_138C:				; CODE XREF: _ts_main+568j
		xor	eax, eax
		jmp	short loc_1395
; ---------------------------------------------------------------------------

loc_1390:				; CODE XREF: _ts_main+564j
					; _ts_main+570j
		sbb	eax, eax
		or	eax, 1

loc_1395:				; CODE XREF: _ts_main+57Ej
		test	eax, eax
		jnz	short loc_13B4
		mov	eax, esi
		dec	esi
		cmp	eax, 1
		jl	$usage$248	; jumptable 0000179B case 0
		mov	eax, [edi+4]
		add	edi, 4
		mov	[esp+7Ch+var_5C], eax
		jmp	loc_1681
; ---------------------------------------------------------------------------

loc_13B4:				; CODE XREF: _ts_main+587j
		mov	ecx, offset ??_C@_07KMOOHICO@?9passin?$AA@ ; "-passin"
		mov	eax, ebx
		nop	dword ptr [eax+eax+00h]

loc_13C0:				; CODE XREF: _ts_main+5CAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_13E0
		test	dl, dl
		jz	short loc_13DC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_13E0
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_13C0

loc_13DC:				; CODE XREF: _ts_main+5B8j
		xor	eax, eax
		jmp	short loc_13E5
; ---------------------------------------------------------------------------

loc_13E0:				; CODE XREF: _ts_main+5B4j
					; _ts_main+5C0j
		sbb	eax, eax
		or	eax, 1

loc_13E5:				; CODE XREF: _ts_main+5CEj
		test	eax, eax
		jnz	short loc_140C
		mov	eax, esi
		dec	esi
		cmp	eax, 1
		jl	$usage$248	; jumptable 0000179B case 0
		mov	eax, [edi+4]
		add	edi, 4
		mov	ebx, [esp+7Ch+var_68]
		mov	ecx, [esp+7Ch+var_6C]
		mov	[esp+7Ch+var_64], eax
		jmp	loc_168D
; ---------------------------------------------------------------------------

loc_140C:				; CODE XREF: _ts_main+5D7j
		mov	ecx, offset ??_C@_06JJMGFEBF@?9inkey?$AA@ ; "-inkey"
		mov	eax, ebx

loc_1413:				; CODE XREF: _ts_main+61Dj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1433
		test	dl, dl
		jz	short loc_142F
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1433
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1413

loc_142F:				; CODE XREF: _ts_main+60Bj
		xor	eax, eax
		jmp	short loc_1438
; ---------------------------------------------------------------------------

loc_1433:				; CODE XREF: _ts_main+607j
					; _ts_main+613j
		sbb	eax, eax
		or	eax, 1

loc_1438:				; CODE XREF: _ts_main+621j
		test	eax, eax
		jnz	short loc_1457
		mov	eax, esi
		dec	esi
		cmp	eax, 1
		jl	$usage$248	; jumptable 0000179B case 0
		mov	eax, [edi+4]
		add	edi, 4
		mov	[esp+7Ch+var_1C], eax
		jmp	loc_1681
; ---------------------------------------------------------------------------

loc_1457:				; CODE XREF: _ts_main+62Aj
		mov	ecx, offset ??_C@_07KJCLPKOH@?9signer?$AA@ ; "-signer"
		mov	eax, ebx
		xchg	ax, ax

loc_1460:				; CODE XREF: _ts_main+66Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1480
		test	dl, dl
		jz	short loc_147C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1480
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1460

loc_147C:				; CODE XREF: _ts_main+658j
		xor	eax, eax
		jmp	short loc_1485
; ---------------------------------------------------------------------------

loc_1480:				; CODE XREF: _ts_main+654j
					; _ts_main+660j
		sbb	eax, eax
		or	eax, 1

loc_1485:				; CODE XREF: _ts_main+66Ej
		test	eax, eax
		jnz	short loc_14A4
		mov	eax, esi
		dec	esi
		cmp	eax, 1
		jl	$usage$248	; jumptable 0000179B case 0
		mov	eax, [edi+4]
		add	edi, 4
		mov	[esp+7Ch+var_20], eax
		jmp	loc_1681
; ---------------------------------------------------------------------------

loc_14A4:				; CODE XREF: _ts_main+677j
		mov	ecx, offset ??_C@_06NEDJBPEF@?9chain?$AA@ ; "-chain"
		mov	eax, ebx
		nop	dword ptr [eax+eax+00h]

loc_14B0:				; CODE XREF: _ts_main+6BAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_14D0
		test	dl, dl
		jz	short loc_14CC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_14D0
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_14B0

loc_14CC:				; CODE XREF: _ts_main+6A8j
		xor	eax, eax
		jmp	short loc_14D5
; ---------------------------------------------------------------------------

loc_14D0:				; CODE XREF: _ts_main+6A4j
					; _ts_main+6B0j
		sbb	eax, eax
		or	eax, 1

loc_14D5:				; CODE XREF: _ts_main+6BEj
		test	eax, eax
		jnz	short loc_14F4
		mov	eax, esi
		dec	esi
		cmp	eax, 1
		jl	$usage$248	; jumptable 0000179B case 0
		mov	eax, [edi+4]
		add	edi, 4
		mov	[esp+7Ch+var_24], eax
		jmp	loc_1681
; ---------------------------------------------------------------------------

loc_14F4:				; CODE XREF: _ts_main+6C7j
		mov	ecx, offset ??_C@_07FILEFCOC@?9verify?$AA@ ; "-verify"
		mov	eax, ebx
		nop	dword ptr [eax+eax+00h]

loc_1500:				; CODE XREF: _ts_main+70Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1520
		test	dl, dl
		jz	short loc_151C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1520
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1500

loc_151C:				; CODE XREF: _ts_main+6F8j
		xor	eax, eax
		jmp	short loc_1525
; ---------------------------------------------------------------------------

loc_1520:				; CODE XREF: _ts_main+6F4j
					; _ts_main+700j
		sbb	eax, eax
		or	eax, 1

loc_1525:				; CODE XREF: _ts_main+70Ej
		test	eax, eax
		jnz	short loc_1539
		test	ebp, ebp
		jnz	$usage$248	; jumptable 0000179B case 0
		lea	ebp, [eax+3]
		jmp	loc_1681
; ---------------------------------------------------------------------------

loc_1539:				; CODE XREF: _ts_main+717j
		mov	ecx, offset ??_C@_07MNNNLALG@?9CApath?$AA@ ; "-CApath"
		mov	eax, ebx

loc_1540:				; CODE XREF: _ts_main+74Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1560
		test	dl, dl
		jz	short loc_155C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1560
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1540

loc_155C:				; CODE XREF: _ts_main+738j
		xor	eax, eax
		jmp	short loc_1565
; ---------------------------------------------------------------------------

loc_1560:				; CODE XREF: _ts_main+734j
					; _ts_main+740j
		sbb	eax, eax
		or	eax, 1

loc_1565:				; CODE XREF: _ts_main+74Ej
		test	eax, eax
		jnz	short loc_1584
		mov	eax, esi
		dec	esi
		cmp	eax, 1
		jl	$usage$248	; jumptable 0000179B case 0
		mov	eax, [edi+4]
		add	edi, 4
		mov	[esp+7Ch+var_8], eax
		jmp	loc_1681
; ---------------------------------------------------------------------------

loc_1584:				; CODE XREF: _ts_main+757j
		mov	ecx, offset ??_C@_07EAFCHGPO@?9CAfile?$AA@ ; "-CAfile"
		mov	eax, ebx
		nop	dword ptr [eax+eax+00h]

loc_1590:				; CODE XREF: _ts_main+79Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_15B0
		test	dl, dl
		jz	short loc_15AC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_15B0
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1590

loc_15AC:				; CODE XREF: _ts_main+788j
		xor	eax, eax
		jmp	short loc_15B5
; ---------------------------------------------------------------------------

loc_15B0:				; CODE XREF: _ts_main+784j
					; _ts_main+790j
		sbb	eax, eax
		or	eax, 1

loc_15B5:				; CODE XREF: _ts_main+79Ej
		test	eax, eax
		jnz	short loc_15D4
		mov	eax, esi
		dec	esi
		cmp	eax, 1
		jl	$usage$248	; jumptable 0000179B case 0
		mov	eax, [edi+4]
		add	edi, 4
		mov	[esp+7Ch+var_C], eax
		jmp	loc_1681
; ---------------------------------------------------------------------------

loc_15D4:				; CODE XREF: _ts_main+7A7j
		mov	ecx, offset ??_C@_0L@EABBFAIP@?9untrusted?$AA@ ; "-untrusted"
		mov	eax, ebx
		nop	dword ptr [eax+eax+00h]

loc_15E0:				; CODE XREF: _ts_main+7EAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1600
		test	dl, dl
		jz	short loc_15FC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1600
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_15E0

loc_15FC:				; CODE XREF: _ts_main+7D8j
		xor	eax, eax
		jmp	short loc_1605
; ---------------------------------------------------------------------------

loc_1600:				; CODE XREF: _ts_main+7D4j
					; _ts_main+7E0j
		sbb	eax, eax
		or	eax, 1

loc_1605:				; CODE XREF: _ts_main+7EEj
		test	eax, eax
		jnz	short loc_1621
		mov	eax, esi
		dec	esi
		cmp	eax, 1
		jl	$usage$248	; jumptable 0000179B case 0
		mov	eax, [edi+4]
		add	edi, 4
		mov	[esp+7Ch+var_10], eax
		jmp	short loc_1681
; ---------------------------------------------------------------------------

loc_1621:				; CODE XREF: _ts_main+7F7j
		mov	ecx, offset ??_C@_07CECBDAGF@?9engine?$AA@ ; "-engine"
		mov	eax, ebx

loc_1628:				; CODE XREF: _ts_main+832j
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1648
		test	dl, dl
		jz	short loc_1644
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1648
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1628

loc_1644:				; CODE XREF: _ts_main+820j
		xor	eax, eax
		jmp	short loc_164D
; ---------------------------------------------------------------------------

loc_1648:				; CODE XREF: _ts_main+81Cj
					; _ts_main+828j
		sbb	eax, eax
		or	eax, 1

loc_164D:				; CODE XREF: _ts_main+836j
		test	eax, eax
		jnz	short loc_1669
		mov	eax, esi
		dec	esi
		cmp	eax, 1
		jl	$usage$248	; jumptable 0000179B case 0
		mov	eax, [edi+4]
		add	edi, 4
		mov	[esp+7Ch+var_18], eax
		jmp	short loc_1681
; ---------------------------------------------------------------------------

loc_1669:				; CODE XREF: _ts_main+83Fj
		lea	eax, [ebx+1]
		push	eax
		call	_EVP_get_digestbyname
		add	esp, 4
		mov	[esp+7Ch+var_2C], eax
		test	eax, eax
		jz	$usage$248	; jumptable 0000179B case 0

loc_1681:				; CODE XREF: _ts_main+15Fj
					; _ts_main+1AFj ...
		mov	ebx, [esp+7Ch+var_68]

loc_1685:				; CODE XREF: _ts_main+28Fj
		mov	ecx, [esp+7Ch+var_6C]

loc_1689:				; CODE XREF: _ts_main+376j
		mov	eax, [esp+7Ch+var_64]

loc_168D:				; CODE XREF: _ts_main+5F7j
		dec	esi
		add	edi, 4
		test	esi, esi
		jg	loc_F20
		cmp	ebp, 1
		jnz	short loc_1701
		test	ecx, ecx
		jnz	loc_179B
		push	ebp
		push	dword ptr ds:_bio_err
		push	ecx
		call	_app_RAND_load_file
		add	esp, 0Ch
		test	eax, eax
		mov	eax, [esp+7Ch+var_4C]
		jnz	short loc_16DA
		test	eax, eax
		jnz	short loc_16E2
		push	offset ??_C@_0EG@NMHBLOCJ@warning?0?5not?5much?5extra?5random?5d@ ; "warning, not much extra random data, co"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 8
		jmp	loc_179B
; ---------------------------------------------------------------------------

loc_16DA:				; CODE XREF: _ts_main+8ACj
		test	eax, eax
		jz	loc_179B

loc_16E2:				; CODE XREF: _ts_main+8B0j
		push	eax
		call	_app_RAND_load_files
		push	eax
		push	offset ??_C@_0BO@JENMPIEN@?$CFld?5semi?9random?5bytes?5loaded?6?$AA@ ; "%ld semi-random	bytes loaded\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 10h
		jmp	loc_179B
; ---------------------------------------------------------------------------

loc_1701:				; CODE XREF: _ts_main+88Cj
		cmp	ebp, 2
		jnz	loc_1796
		test	eax, eax
		jz	loc_179B
		push	0
		lea	ecx, [esp+80h+var_34]
		push	ecx
		push	0
		push	eax
		push	dword ptr ds:_bio_err
		call	_app_passwd
		add	esp, 14h
		test	eax, eax
		jnz	short loc_179B
		push	offset ??_C@_0BJ@MCGLDCN@Error?5getting?5password?4?6?$AA@ ; "Error getting password.\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 8

loc_1741:				; CODE XREF: _ts_main+EBj
					; _ts_main+989j
		mov	ebx, 1		; jumptable 0000179B default case

$cleanup$249:				; CODE XREF: _ts_main+9DDj
					; _ts_main+A69j ...
		push	dword ptr ds:_bio_err
		push	0
		call	_app_RAND_write_file
		push	[esp+84h+var_38]
		call	_NCONF_free
		push	[esp+88h+var_34]
		call	_CRYPTO_free
		add	esp, 10h
		call	_OBJ_cleanup
		cmp	[esp+7Ch+var_4], 0
		pop	edi
		pop	esi
		jz	short loc_178E
		push	dword ptr ds:_bio_err
		call	_BIO_free_all
		add	esp, 4
		mov	dword ptr ds:_bio_err, 0

loc_178E:				; CODE XREF: _ts_main+964j
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 6Ch
		retn
; ---------------------------------------------------------------------------

loc_1796:				; CODE XREF: _ts_main+8F4j
		cmp	ebp, 3		; switch 4 cases
		ja	short loc_1741	; jumptable 0000179B default case

loc_179B:				; CODE XREF: _ts_main+105j
					; _ts_main+890j ...
		jmp	ds:$LN247[ebp*4] ; switch jump
; ---------------------------------------------------------------------------

$LN86:					; CODE XREF: _ts_main:loc_179Bj
					; DATA XREF: .text$mn:$LN247o
		mov	esi, [esp+7Ch+var_58] ;	jumptable 0000179B case	1
		test	esi, esi
		jz	short loc_17B2
		test	ebx, ebx
		jnz	loc_1892

loc_17B2:				; CODE XREF: _ts_main+998j
		push	[esp+7Ch+var_48]
		call	_load_config_file
		push	[esp+80h+var_44]
		mov	edx, [esp+84h+var_54]
		push	[esp+84h+var_40]
		mov	[esp+88h+var_38], eax
		push	edx
		push	[esp+8Ch+var_30]
		push	[esp+90h+var_6C]
		push	[esp+94h+var_3C]
		push	[esp+98h+var_2C]
		push	ebx
		push	esi
		call	_query_command
		add	esp, 28h
		mov	ebx, eax
		neg	ebx
		sbb	ebx, ebx
		inc	ebx
		jmp	$cleanup$249
; ---------------------------------------------------------------------------

$LN88:					; CODE XREF: _ts_main:loc_179Bj
					; DATA XREF: .text$mn:$LN247o
		push	[esp+7Ch+var_48] ; jumptable 0000179B case 2
		call	_load_config_file
		mov	edx, [esp+80h+var_54]
		add	esp, 4
		mov	ecx, [esp+7Ch+var_5C]
		mov	ebx, eax
		mov	[esp+7Ch+var_38], ebx
		test	edx, edx
		jnz	short loc_1822
		test	ecx, ecx
		jz	short loc_1892
		test	ebx, ebx
		jz	short loc_1892
		mov	esi, [esp+7Ch+var_50]
		test	esi, esi
		jz	short loc_1835
		jmp	short loc_1892
; ---------------------------------------------------------------------------

loc_1822:				; CODE XREF: _ts_main+9FEj
		xor	eax, eax
		test	ecx, ecx
		setnz	al
		mov	[esp+7Ch+var_60], eax
		test	eax, eax
		jnz	short $usage$248 ; jumptable 0000179B case 0
		mov	esi, [esp+7Ch+var_50]

loc_1835:				; CODE XREF: _ts_main+A0Ej
		push	[esp+7Ch+var_44]
		push	[esp+80h+var_28]
		push	[esp+84h+var_40]
		push	esi
		push	edx
		push	[esp+90h+var_3C]
		push	[esp+94h+var_24]
		push	[esp+98h+var_20]
		push	[esp+9Ch+var_1C]
		push	[esp+0A0h+var_34]
		push	ecx
		push	[esp+0A8h+var_18]
		push	[esp+0ACh+var_14]
		push	ebx
		call	_reply_command
		add	esp, 38h
		mov	ebx, eax
		neg	ebx
		sbb	ebx, ebx
		inc	ebx
		jmp	$cleanup$249
; ---------------------------------------------------------------------------

$LN93:					; CODE XREF: _ts_main:loc_179Bj
					; DATA XREF: .text$mn:$LN247o
		mov	ecx, [esp+7Ch+var_5C] ;	jumptable 0000179B case	3
		mov	eax, [esp+7Ch+var_58]
		test	ecx, ecx
		jz	short loc_18DB
		test	eax, eax
		jnz	short loc_1892

loc_188E:				; CODE XREF: _ts_main+ACDj
		test	ebx, ebx
		jz	short loc_18E3

loc_1892:				; CODE XREF: _ts_main+99Cj
					; _ts_main+A02j ...
		mov	eax, 1
		mov	[esp+7Ch+var_60], eax

$usage$248:				; CODE XREF: _ts_main+14Fj
					; _ts_main+19Fj ...
		push	3Bh ; ';'       ; jumptable 0000179B case 0
		push	3Bh ; ';'
		push	offset ??_C@_0OM@CGNAACOE@usage?3?6ts?5?9query?5?$FL?9rand?5file?$CFcfi@ ; "usage:\nts -query [-rand file%cfile%c.."...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0BBH@JKDHADME@or?6ts?5?9reply?5?$FL?9config?5configfile@ ;	"or\nts	-reply [-config	configfile] [-se"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0KO@KIDMHDIF@or?6ts?5?9verify?5?$FL?9data?5file_to_has@ ; "or\nts -verify [-data file_to_hash] [-d"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		mov	ebx, [esp+9Ch+var_60]
		add	esp, 20h
		jmp	$cleanup$249
; ---------------------------------------------------------------------------

loc_18DB:				; CODE XREF: _ts_main+A78j
		test	eax, eax
		jnz	short loc_188E
		test	ebx, ebx
		jz	short loc_1892

loc_18E3:				; CODE XREF: _ts_main+A80j
		mov	edx, [esp+7Ch+var_54]
		test	edx, edx
		jz	short loc_1892
		push	[esp+7Ch+var_10]
		mov	esi, [esp+80h+var_50]
		push	[esp+80h+var_C]
		push	[esp+84h+var_8]
		push	esi
		push	edx
		push	ecx
		push	ebx
		push	eax
		call	_verify_command
		add	esp, 20h
		mov	ebx, eax
		neg	ebx
		sbb	ebx, ebx
		inc	ebx
		jmp	$cleanup$249
_ts_main	endp

; ---------------------------------------------------------------------------
$LN247		dd offset $usage$248	; DATA XREF: _ts_main:loc_179Br
		dd offset $LN86		; jump table for switch	statement
		dd offset $LN88
		dd offset $LN93
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1924h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_txt2obj	proc near		; CODE XREF: _create_query+109p

arg_0		= dword	ptr  4

		push	esi
		push	0
		push	[esp+8+arg_0]
		call	_OBJ_txt2obj
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_1952
		push	[esp+4+arg_0]
		push	offset ??_C@_0BK@FNHFJPIO@cannot?5convert?5?$CFs?5to?5OID?6?$AA@ ; "cannot convert %s to OID\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 0Ch
		mov	eax, esi

loc_1952:				; CODE XREF: _txt2obj+13j
		pop	esi
		retn
_txt2obj	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1954h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_verify_cb	proc near		; DATA XREF: _create_cert_store+9o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
_verify_cb	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 195Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_verify_command	proc near		; CODE XREF: _ts_main+AF0p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	edi
		push	offset ??_C@_02JDPG@rb?$AA@ ; `string'
		push	[esp+18h+arg_C]
		xor	ebx, ebx
		xor	ebp, ebp
		xor	edi, edi
		xor	esi, esi
		call	_BIO_new_file
		add	esp, 8
		mov	[esp+14h+var_4], eax
		test	eax, eax
		jz	short $end$16
		push	esi
		push	eax
		cmp	[esp+1Ch+arg_10], ebx
		jz	short loc_19A1
		call	_d2i_PKCS7_bio
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jmp	short loc_19AD
; ---------------------------------------------------------------------------

loc_19A1:				; CODE XREF: _verify_command+35j
		call	_d2i_TS_RESP_bio
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp

loc_19AD:				; CODE XREF: _verify_command+43j
		jz	short $end$16
		push	[esp+14h+arg_1C]
		push	[esp+18h+arg_18]
		push	[esp+1Ch+arg_14]
		push	[esp+20h+arg_8]
		push	[esp+24h+arg_4]
		push	[esp+28h+arg_0]
		call	_create_verify_ctx
		mov	edi, eax
		add	esp, 18h
		test	edi, edi
		jz	short $end$16
		cmp	[esp+14h+arg_10], esi
		jz	short loc_19E4
		push	ebx
		push	edi
		call	_TS_RESP_verify_token
		jmp	short loc_19EB
; ---------------------------------------------------------------------------

loc_19E4:				; CODE XREF: _verify_command+7Dj
		push	ebp
		push	edi
		call	_TS_RESP_verify_response

loc_19EB:				; CODE XREF: _verify_command+86j
		mov	esi, eax
		add	esp, 8

$end$16:				; CODE XREF: _verify_command+2Dj
					; _verify_command:loc_19ADj ...
		push	offset ??_C@_0P@EEGBFCKN@Verification?3?5?$AA@ ; "Verification:	"
		call	_printf
		add	esp, 4
		test	esi, esi
		jz	short loc_1A10
		push	offset ??_C@_03JLOMOCCD@OK?6?$AA@ ; "OK\n"
		call	_printf
		add	esp, 4
		jmp	short loc_1A28
; ---------------------------------------------------------------------------

loc_1A10:				; CODE XREF: _verify_command+A3j
		push	offset ??_C@_07DLBBOEE@FAILED?6?$AA@ ; "FAILED\n"
		call	_printf
		push	dword ptr ds:_bio_err
		call	_ERR_print_errors
		add	esp, 8

loc_1A28:				; CODE XREF: _verify_command+B2j
		push	[esp+14h+var_4]
		call	_BIO_free_all
		push	ebx
		call	_PKCS7_free
		push	ebp
		call	_TS_RESP_free
		push	edi
		call	_TS_VERIFY_CTX_free
		add	esp, 10h
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
_verify_command	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A50h
; COMDAT (pick any)
		public ??_C@_07OOKHNANK@?9config?$AA@
; `string'
??_C@_07OOKHNANK@?9config?$AA@ db '-config',0 ; DATA XREF: _ts_main+112o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A58h
; COMDAT (pick any)
		public ??_C@_08ONPADCNC@?9section?$AA@
; `string'
??_C@_08ONPADCNC@?9section?$AA@	db '-section',0 ; DATA XREF: _ts_main:loc_F74o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A64h
; COMDAT (pick any)
		public ??_C@_06JIMFLALG@?9query?$AA@
; `string'
??_C@_06JIMFLALG@?9query?$AA@ db '-query',0 ; DATA XREF: _ts_main:loc_FC4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A6Ch
; COMDAT (pick any)
		public ??_C@_05DFDJJDDF@?9data?$AA@
; `string'
??_C@_05DFDJJDDF@?9data?$AA@ db	'-data',0 ; DATA XREF: _ts_main:loc_1009o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A74h
; COMDAT (pick any)
		public ??_C@_07JCKCKHOC@?9digest?$AA@
; `string'
??_C@_07JCKCKHOC@?9digest?$AA@ db '-digest',0 ; DATA XREF: _ts_main:loc_1054o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A7Ch
; COMDAT (pick any)
		public ??_C@_05LGFPCDPE@?9rand?$AA@
; `string'
??_C@_05LGFPCDPE@?9rand?$AA@ db	'-rand',0 ; DATA XREF: _ts_main:loc_10A4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A84h
; COMDAT (pick any)
		public ??_C@_07EDOEKPLG@?9policy?$AA@
; `string'
??_C@_07EDOEKPLG@?9policy?$AA@ db '-policy',0 ; DATA XREF: _ts_main:loc_10F4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A8Ch
; COMDAT (pick any)
		public ??_C@_09EOFPIKIL@?9no_nonce?$AA@
; `string'
??_C@_09EOFPIKIL@?9no_nonce?$AA@ db '-no_nonce',0 ; DATA XREF: _ts_main:loc_1144o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A98h
; COMDAT (pick any)
		public ??_C@_05DLEDECNE@?9cert?$AA@
; `string'
??_C@_05DLEDECNE@?9cert?$AA@ db	'-cert',0 ; DATA XREF: _ts_main:loc_118Bo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1AA0h
; COMDAT (pick any)
		public ??_C@_03DAJLOBIG@?9in?$AA@
; `string'
??_C@_03DAJLOBIG@?9in?$AA@ dd 6E692Dh	; DATA XREF: _ts_main:loc_11C8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1AA4h
; COMDAT (pick any)
		public ??_C@_09NKMONJIP@?9token_in?$AA@
; `string'
??_C@_09NKMONJIP@?9token_in?$AA@ db '-token_in',0 ; DATA XREF: _ts_main:loc_1214o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1AB0h
; COMDAT (pick any)
		public ??_C@_04HKKABCEL@?9out?$AA@
; `string'
??_C@_04HKKABCEL@?9out?$AA@ db '-out',0 ; DATA XREF: _ts_main:loc_1256o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1AB8h
; COMDAT (pick any)
		public ??_C@_0L@DJGPPNH@?9token_out?$AA@
; `string'
??_C@_0L@DJGPPNH@?9token_out?$AA@ db '-token_out',0 ; DATA XREF: _ts_main:loc_12A4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1AC4h
; COMDAT (pick any)
		public ??_C@_05OEBEIMJA@?9text?$AA@
; `string'
??_C@_05OEBEIMJA@?9text?$AA@ db	'-text',0 ; DATA XREF: _ts_main:loc_12E6o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1ACCh
; COMDAT (pick any)
		public ??_C@_06PMOHMEN@?9reply?$AA@
; `string'
??_C@_06PMOHMEN@?9reply?$AA@ db	'-reply',0 ; DATA XREF: _ts_main:loc_1326o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1AD4h
; COMDAT (pick any)
		public ??_C@_0L@LMAFEAOJ@?9queryfile?$AA@
; `string'
??_C@_0L@LMAFEAOJ@?9queryfile?$AA@ db '-queryfile',0 ; DATA XREF: _ts_main:loc_1369o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1AE0h
; COMDAT (pick any)
		public ??_C@_07KMOOHICO@?9passin?$AA@
; `string'
??_C@_07KMOOHICO@?9passin?$AA@ db '-passin',0 ; DATA XREF: _ts_main:loc_13B4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1AE8h
; COMDAT (pick any)
		public ??_C@_06JJMGFEBF@?9inkey?$AA@
; `string'
??_C@_06JJMGFEBF@?9inkey?$AA@ db '-inkey',0 ; DATA XREF: _ts_main:loc_140Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1AF0h
; COMDAT (pick any)
		public ??_C@_07KJCLPKOH@?9signer?$AA@
; `string'
??_C@_07KJCLPKOH@?9signer?$AA@ db '-signer',0 ; DATA XREF: _ts_main:loc_1457o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1AF8h
; COMDAT (pick any)
		public ??_C@_06NEDJBPEF@?9chain?$AA@
; `string'
??_C@_06NEDJBPEF@?9chain?$AA@ db '-chain',0 ; DATA XREF: _ts_main:loc_14A4o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B00h
; COMDAT (pick any)
		public ??_C@_07FILEFCOC@?9verify?$AA@
; `string'
??_C@_07FILEFCOC@?9verify?$AA@ db '-verify',0 ; DATA XREF: _ts_main:loc_14F4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B08h
; COMDAT (pick any)
		public ??_C@_07MNNNLALG@?9CApath?$AA@
; `string'
??_C@_07MNNNLALG@?9CApath?$AA@ db '-CApath',0 ; DATA XREF: _ts_main:loc_1539o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B10h
; COMDAT (pick any)
		public ??_C@_07EAFCHGPO@?9CAfile?$AA@
; `string'
??_C@_07EAFCHGPO@?9CAfile?$AA@ db '-CAfile',0 ; DATA XREF: _ts_main:loc_1584o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B18h
; COMDAT (pick any)
		public ??_C@_0L@EABBFAIP@?9untrusted?$AA@
; `string'
??_C@_0L@EABBFAIP@?9untrusted?$AA@ db '-untrusted',0 ; DATA XREF: _ts_main:loc_15D4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B24h
; COMDAT (pick any)
		public ??_C@_07CECBDAGF@?9engine?$AA@
; `string'
??_C@_07CECBDAGF@?9engine?$AA@ db '-engine',0 ; DATA XREF: _ts_main:loc_1621o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 1B2Ch
; COMDAT (pick any)
		public ??_C@_0EG@NMHBLOCJ@warning?0?5not?5much?5extra?5random?5d@
; `string'
??_C@_0EG@NMHBLOCJ@warning?0?5not?5much?5extra?5random?5d@ db 'warning, not much extra random data, consider using the -rand opt'
					; DATA XREF: _ts_main+8B2o
		db 'ion',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B74h
; COMDAT (pick any)
		public ??_C@_0BO@JENMPIEN@?$CFld?5semi?9random?5bytes?5loaded?6?$AA@
; `string'
??_C@_0BO@JENMPIEN@?$CFld?5semi?9random?5bytes?5loaded?6?$AA@ db '%ld semi-random bytes loaded',0Ah,0
					; DATA XREF: _ts_main+8D9o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B94h
; COMDAT (pick any)
		public ??_C@_0BJ@MCGLDCN@Error?5getting?5password?4?6?$AA@
; `string'
??_C@_0BJ@MCGLDCN@Error?5getting?5password?4?6?$AA@ db 'Error getting password.',0Ah,0
					; DATA XREF: _ts_main+91Eo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 1BB0h
; COMDAT (pick any)
		public ??_C@_0OM@CGNAACOE@usage?3?6ts?5?9query?5?$FL?9rand?5file?$CFcfi@
; `string'
??_C@_0OM@CGNAACOE@usage?3?6ts?5?9query?5?$FL?9rand?5file?$CFcfi@ db 'usage:',0Ah
					; DATA XREF: _ts_main+A8Fo
		db 'ts -query [-rand file%cfile%c...] [-config configfile] [-data fil'
		db 'e_to_hash] [-digest digest_bytes][-md2|-md4|-md5|-sha|-sha1|-mdc2'
		db '|-ripemd160] [-policy object_id] [-no_nonce] [-cert] [-in request'
		db '.tsq] [-out request.tsq] [-text]',0Ah,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 1C9Ch
; COMDAT (pick any)
		public ??_C@_0BBH@JKDHADME@or?6ts?5?9reply?5?$FL?9config?5configfile@
; `string'
??_C@_0BBH@JKDHADME@or?6ts?5?9reply?5?$FL?9config?5configfile@ db 'or',0Ah
					; DATA XREF: _ts_main+A9Fo
		db 'ts -reply [-config configfile] [-section tsa_section] [-queryfile'
		db ' request.tsq] [-passin password] [-signer tsa_cert.pem] [-inkey p'
		db 'rivate_key.pem] [-chain certs_file.pem] [-policy object_id] [-in '
		db 'response.tsr] [-token_in] [-out response.tsr] [-token_out] [-text'
		db '] [-engine id]',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 1DB4h
; COMDAT (pick any)
		public ??_C@_0KO@KIDMHDIF@or?6ts?5?9verify?5?$FL?9data?5file_to_has@
; `string'
??_C@_0KO@KIDMHDIF@or?6ts?5?9verify?5?$FL?9data?5file_to_has@ db 'or',0Ah
					; DATA XREF: _ts_main+AAFo
		db 'ts -verify [-data file_to_hash] [-digest digest_bytes] [-queryfil'
		db 'e request.tsq] -in response.tsr [-token_in] -CApath ca_path -CAfi'
		db 'le ca_file.pem -untrusted cert_file.pem',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1E64h
; COMDAT (pick any)
		public ??_C@_0BK@FNHFJPIO@cannot?5convert?5?$CFs?5to?5OID?6?$AA@
; `string'
??_C@_0BK@FNHFJPIO@cannot?5convert?5?$CFs?5to?5OID?6?$AA@ db 'cannot convert %s to OID',0Ah,0
					; DATA XREF: _txt2obj+19o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1E80h
; COMDAT (pick any)
		public ??_C@_0N@JPGHCLFD@OPENSSL_CONF?$AA@
; char `string'[]
??_C@_0N@JPGHCLFD@OPENSSL_CONF?$AA@ db 'OPENSSL_CONF',0 ; DATA XREF: _load_config_file+22o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1E90h
; COMDAT (pick any)
		public ??_C@_0M@JALBFNKB@SSLEAY_CONF?$AA@
; char `string'[]
??_C@_0M@JALBFNKB@SSLEAY_CONF?$AA@ db 'SSLEAY_CONF',0 ; DATA XREF: _load_config_file+32o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1E9Ch
; COMDAT (pick any)
		public ??_C@_0CE@NCMMMAJM@error?5loading?5the?5config?5file?5?8?$CF@
; `string'
??_C@_0CE@NCMMMAJM@error?5loading?5the?5config?5file?5?8?$CF@ db 'error loading the config file ',27h,'%s',27h,0Ah,0
					; DATA XREF: _load_config_file+72o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1EC0h
; COMDAT (pick any)
		public ??_C@_0CH@MPAIMKJO@error?5on?5line?5?$CFld?5of?5config?5file@
; `string'
??_C@_0CH@MPAIMKJO@error?5on?5line?5?$CFld?5of?5config?5file@ db 'error on line %ld of config file ',27h,'%s',27h,0Ah,0
					; DATA XREF: _load_config_file+88o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1EE8h
; COMDAT (pick any)
		public ??_C@_0BN@DBMBACJB@Using?5configuration?5from?5?$CFs?6?$AA@
; `string'
??_C@_0BN@DBMBACJB@Using?5configuration?5from?5?$CFs?6?$AA@ db 'Using configuration from %s',0Ah,0
					; DATA XREF: _load_config_file+A4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1F08h
; COMDAT (pick any)
		public ??_C@_08NOLCFLKC@oid_file?$AA@
; `string'
??_C@_08NOLCFLKC@oid_file?$AA@ db 'oid_file',0 ; DATA XREF: _load_config_file+B4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1F14h
; COMDAT (pick any)
		public ??_C@_01KDCPPGHE@r?$AA@
; `string'
??_C@_01KDCPPGHE@r?$AA@	db 72h,	0	; DATA XREF: _load_config_file+C8o
					; _next_serial+36o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1F18h
; COMDAT (pick any)
		public ??_C@_02JDPG@rb?$AA@
; `string'
??_C@_02JDPG@rb?$AA@ db	72h, 62h, 0	; DATA XREF: _create_response+Eo
					; _create_verify_ctx+20o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1F1Ch
; COMDAT (pick any)
		public ??_C@_02GMLFBBN@wb?$AA@
; `string'
??_C@_02GMLFBBN@wb?$AA@	db 77h,	62h, 0	; DATA XREF: _query_command:loc_ABDo
					; _reply_command:loc_C9Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1F20h
; COMDAT (pick any)
		public ??_C@_04PGHFOLLE@sha1?$AA@
; `string'
??_C@_04PGHFOLLE@sha1?$AA@ db 'sha1',0  ; DATA XREF: _create_query+28o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1F28h
; COMDAT (pick any)
		public ??_C@_0BI@ONLCPDDL@could?5not?5create?5query?6?$AA@
; `string'
??_C@_0BI@ONLCPDDL@could?5not?5create?5query?6?$AA@ db 'could not create query',0Ah,0
					; DATA XREF: _create_query+16Bo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1F40h
; COMDAT (pick any)
		public ??_C@_0M@MKEPFLFH@?4?2apps?2ts?4c?$AA@
; `string'
??_C@_0M@MKEPFLFH@?4?2apps?2ts?4c?$AA@ db '.\apps\ts.c',0 ; DATA XREF: _create_digest+58o
					; _create_nonce+6Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1F4Ch
; COMDAT (pick any)
		public ??_C@_0CI@GKJPONPL@bad?5digest?0?5?$CFd?5bytes?5must?5be?5spe@
; `string'
??_C@_0CI@GKJPONPL@bad?5digest?0?5?$CFd?5bytes?5must?5be?5spe@ db 'bad digest, %d bytes must be specified',0Ah,0
					; DATA XREF: _create_digest+FCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1F74h
; COMDAT (pick any)
		public ??_C@_0BI@FECAGFBO@could?5not?5create?5nonce?6?$AA@
; `string'
??_C@_0BI@FECAGFBO@could?5not?5create?5nonce?6?$AA@ db 'could not create nonce',0Ah,0
					; DATA XREF: _create_nonce:$err$16_0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1F8Ch
; COMDAT (pick any)
		public ??_C@_0BO@CJJOIHDP@Response?5has?5been?5generated?4?6?$AA@
; `string'
??_C@_0BO@CJJOIHDP@Response?5has?5been?5generated?4?6?$AA@ db 'Response has been generated.',0Ah,0
					; DATA XREF: _reply_command+81o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1FACh
; COMDAT (pick any)
		public ??_C@_0BM@IBMCAENB@Response?5is?5not?5generated?4?6?$AA@
; `string'
??_C@_0BM@IBMCAENB@Response?5is?5not?5generated?4?6?$AA@ db 'Response is not generated.',0Ah,0
					; DATA XREF: _reply_command:loc_D01o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1FC8h
; COMDAT (pick any)
		public ??_C@_0CH@IKKNJBOJ@Error?5during?5serial?5number?5gener@
; `string'
??_C@_0CH@IKKNJBOJ@Error?5during?5serial?5number?5gener@ db 'Error during serial number generation.',0
					; DATA XREF: _serial_cb+19o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 1FF0h
; COMDAT (pick any)
		public ??_C@_0EF@LGJIOGOJ@Warning?3?5could?5not?5open?5file?5?$CFs?5@
; `string'
??_C@_0EF@LGJIOGOJ@Warning?3?5could?5not?5open?5file?5?$CFs?5@ db 'Warning: could not open file %s for reading, using serial number:'
					; DATA XREF: _next_serial+50o
		db ' 1',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2038h
; COMDAT (pick any)
		public ??_C@_0BP@IBMKHAAI@unable?5to?5load?5number?5from?5?$CFs?6?$AA@
; `string'
??_C@_0BP@IBMKHAAI@unable?5to?5load?5number?5from?5?$CFs?6?$AA@	db 'unable to load number from %s',0Ah,0
					; DATA XREF: _next_serial+8Ao
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2058h
; COMDAT (pick any)
		public ??_C@_01NOFIACDB@w?$AA@
; `string'
??_C@_01NOFIACDB@w?$AA@	db 77h,	0	; DATA XREF: _save_ts_serial+2o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 205Ch
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; `string'
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah, 0	; DATA XREF: _save_ts_serial+2Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2060h
; COMDAT (pick any)
		public ??_C@_0CE@BDGKPNBC@could?5not?5save?5serial?5number?5to?5@
; `string'
??_C@_0CE@BDGKPNBC@could?5not?5save?5serial?5number?5to?5@ db 'could not save serial number to %s',0Ah,0
					; DATA XREF: _save_ts_serial+55o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2084h
; COMDAT (pick any)
		public ??_C@_0P@EEGBFCKN@Verification?3?5?$AA@
; char `string'[]
??_C@_0P@EEGBFCKN@Verification?3?5?$AA@	db 'Verification: ',0
					; DATA XREF: _verify_command:$end$16o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2094h
; COMDAT (pick any)
		public ??_C@_03JLOMOCCD@OK?6?$AA@
; char `string'[4]
??_C@_03JLOMOCCD@OK?6?$AA@ db 'OK',0Ah,0 ; DATA XREF: _verify_command+A5o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2098h
; COMDAT (pick any)
		public ??_C@_07DLBBOEE@FAILED?6?$AA@
; char `string'[]
??_C@_07DLBBOEE@FAILED?6?$AA@ db 'FAILED',0Ah,0 ; DATA XREF: _verify_command:loc_1A10o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 20A0h
; COMDAT (pick any)
		public ??_C@_0BH@DIIACFIB@invalid?5digest?5string?6?$AA@
; `string'
??_C@_0BH@DIIACFIB@invalid?5digest?5string?6?$AA@ db 'invalid digest string',0Ah,0
					; DATA XREF: _create_verify_ctx+C2o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 20B8h
; COMDAT (pick any)
		public ??_C@_0BL@NEBNLEOC@memory?5allocation?5failure?6?$AA@
; `string'
??_C@_0BL@NEBNLEOC@memory?5allocation?5failure?6?$AA@ db 'memory allocation failure',0Ah,0
					; DATA XREF: _create_cert_store:loc_82o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 20D4h
; COMDAT (pick any)
		public ??_C@_0BM@OKGFCOK@Error?5loading?5directory?5?$CFs?6?$AA@
; `string'
??_C@_0BM@OKGFCOK@Error?5loading?5directory?5?$CFs?6?$AA@ db 'Error loading directory %s',0Ah,0
					; DATA XREF: _create_cert_store+68o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 20F0h
; COMDAT (pick any)
		public ??_C@_0BH@FHLAEOCH@Error?5loading?5file?5?$CFs?6?$AA@
; `string'
??_C@_0BH@FHLAEOCH@Error?5loading?5file?5?$CFs?6?$AA@ db 'Error loading file %s',0Ah,0
					; DATA XREF: _create_cert_store+9Fo
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _printf+7p
					; _query_command+53p ...
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _printf+23p
					; DATA XREF: ...
; char *__cdecl	_getenv(const char *VarName)
		extrn __imp__getenv:near ; CODE	XREF: _load_config_file+27p
					; _load_config_file+37p
					; DATA XREF: ...
		extrn _CRYPTO_malloc:near ; CODE XREF: _create_digest+5Ep
					; _create_nonce+77p
		extrn _CRYPTO_free:near	; CODE XREF: _create_digest+F0p
					; _create_nonce+60p ...
		extrn _BIO_s_file:near	; CODE XREF: _ts_main+9Dp
		extrn _BIO_new_file:near ; CODE	XREF: _BIO_open_with_default+1Bp
					; _create_response+1Bp	...
		extrn _BIO_new_fp:near	; CODE XREF: _BIO_open_with_default+Dp
					; _query_command+66p ...
		extrn _BIO_new:near	; CODE XREF: _ts_main+A3p
		extrn _BIO_read:near	; CODE XREF: _create_digest+86p
					; _create_digest+ADp
		extrn _BIO_puts:near	; CODE XREF: _save_ts_serial+32p
		extrn _BIO_ctrl:near	; CODE XREF: _ts_main+CFp
		extrn _BIO_free_all:near ; CODE	XREF: _create_response+17Ap
					; _create_verify_ctx+11Cp ...
		extrn _BIO_printf:near	; CODE XREF: _create_cert_store+3Dp
					; _create_cert_store+AAp ...
		extrn _BN_add_word:near	; CODE XREF: _next_serial+BBp
		extrn _BN_free:near	; CODE XREF: _next_serial+E9p
		extrn _ASN1_TYPE_new:near ; CODE XREF: _create_query+99p
		extrn _ASN1_OBJECT_free:near ; CODE XREF: _create_query+196p
		extrn _ASN1_INTEGER_new:near ; CODE XREF: _create_nonce:loc_296p
					; _next_serial+27p
		extrn _ASN1_INTEGER_free:near ;	CODE XREF: _create_nonce+BDp
					; _create_query+19Fp ...
		extrn _i2a_ASN1_INTEGER:near ; CODE XREF: _save_ts_serial+20p
		extrn _a2i_ASN1_INTEGER:near ; CODE XREF: _next_serial+7Dp
		extrn _ASN1_INTEGER_set:near ; CODE XREF: _next_serial+63p
					; _read_PKCS7+58p
		extrn _BN_to_ASN1_INTEGER:near ; CODE XREF: _next_serial+C9p
		extrn _ASN1_INTEGER_to_BN:near ; CODE XREF: _next_serial+A2p
		extrn _OBJ_nid2obj:near	; CODE XREF: _create_query+86p
		extrn _OBJ_txt2obj:near	; CODE XREF: _txt2obj+7p
		extrn _OBJ_cleanup:near	; CODE XREF: _ts_main+958p
		extrn _OBJ_create_objects:near ; CODE XREF: _load_config_file+EDp
		extrn _EVP_MD_type:near	; CODE XREF: _create_query+80p
		extrn _EVP_MD_size:near	; CODE XREF: _create_digest+3Dp
		extrn _EVP_DigestUpdate:near ; CODE XREF: _create_digest+9Dp
		extrn _EVP_DigestInit:near ; CODE XREF:	_create_digest+76p
		extrn _EVP_DigestFinal:near ; CODE XREF: _create_digest+C2p
		extrn _EVP_get_digestbyname:near ; CODE	XREF: _create_query+2Dp
					; _ts_main+85Dp
		extrn _X509_STORE_new:near ; CODE XREF:	_create_cert_store+2p
		extrn _X509_STORE_free:near ; CODE XREF: _create_cert_store+46p
					; _create_cert_store+B3p
		extrn _X509_STORE_set_verify_cb:near ; CODE XREF: _create_cert_store+Fp
		extrn _X509_STORE_add_lookup:near ; CODE XREF: _create_cert_store+26p
					; _create_cert_store+7Ep
		extrn _X509_LOOKUP_hash_dir:near ; CODE	XREF: _create_cert_store+1Fp
		extrn _X509_LOOKUP_file:near ; CODE XREF: _create_cert_store+77p
		extrn _X509_LOOKUP_ctrl:near ; CODE XREF: _create_cert_store+5Bp
					; _create_cert_store+92p
		extrn _d2i_PKCS7_bio:near ; CODE XREF: _read_PKCS7+21p
					; _verify_command+37p
		extrn _i2d_PKCS7_bio:near ; CODE XREF: _reply_command+FFp
		extrn _PKCS7_free:near	; CODE XREF: _read_PKCS7+8Ap
					; _verify_command+D6p
		extrn _X509_ALGOR_new:near ; CODE XREF:	_create_query+70p
		extrn _X509_ALGOR_free:near ; CODE XREF: _create_query+187p
		extrn _NCONF_new:near	; CODE XREF: _load_config_file+48p
		extrn _NCONF_free:near	; CODE XREF: _ts_main+947p
		extrn _NCONF_load:near	; CODE XREF: _load_config_file+5Dp
		extrn _NCONF_get_string:near ; CODE XREF: _load_config_file+BCp
		extrn _RAND_bytes:near	; CODE XREF: _create_nonce+35p
		extrn _ERR_clear_error:near ; CODE XREF: _load_config_file:loc_891p
					; _next_serial+4Ap
		extrn _ERR_print_errors:near ; CODE XREF: _load_config_file+E2p
					; _load_config_file+11Bp ...
		extrn _ERR_load_crypto_strings:near ; CODE XREF: _ts_main+8Fp
		extrn _string_to_hex:near ; CODE XREF: _create_digest+D7p
					; _create_verify_ctx+B3p
		extrn _app_RAND_load_file:near ; CODE XREF: _ts_main+89Ep
		extrn _app_RAND_write_file:near	; CODE XREF: _ts_main+93Ep
		extrn _app_RAND_load_files:near	; CODE XREF: _ts_main+8D3p
		extrn _app_passwd:near	; CODE XREF: _ts_main+912p
		extrn _add_oid_section:near ; CODE XREF: _load_config_file+109p
		extrn _load_config:near	; CODE XREF: _ts_main+E1p
		extrn _TS_REQ_new:near	; CODE XREF: _create_query:loc_35Fp
		extrn _TS_REQ_free:near	; CODE XREF: _create_query+166p
					; _create_verify_ctx+122p ...
		extrn _d2i_TS_REQ_bio:near ; CODE XREF:	_create_verify_ctx+3Ap
					; _query_command+40p
		extrn _i2d_TS_REQ_bio:near ; CODE XREF:	_query_command:loc_AE1p
		extrn _TS_MSG_IMPRINT_new:near ; CODE XREF: _create_query+61p
		extrn _TS_MSG_IMPRINT_free:near	; CODE XREF: _create_query+181p
		extrn _TS_RESP_new:near	; CODE XREF: _read_PKCS7+3Ep
		extrn _TS_RESP_free:near ; CODE	XREF: _create_response+169p
					; _read_PKCS7+A0p ...
		extrn _PKCS7_to_TS_TST_INFO:near ; CODE	XREF: _read_PKCS7+30p
		extrn _d2i_TS_RESP_bio:near ; CODE XREF: _reply_command+42p
					; _verify_command:loc_19A1p
		extrn _i2d_TS_RESP_bio:near ; CODE XREF: _reply_command+10Ap
		extrn _TS_STATUS_INFO_new:near ; CODE XREF: _read_PKCS7+49p
		extrn _TS_STATUS_INFO_free:near	; CODE XREF: _read_PKCS7+ABp
		extrn _TS_TST_INFO_free:near ; CODE XREF: _read_PKCS7+90p
		extrn _TS_REQ_set_version:near ; CODE XREF: _create_query+51p
		extrn _TS_REQ_set_msg_imprint:near ; CODE XREF:	_create_query+F4p
		extrn _TS_MSG_IMPRINT_set_algo:near ; CODE XREF: _create_query+B1p
		extrn _TS_MSG_IMPRINT_set_msg:near ; CODE XREF:	_create_query+E6p
		extrn _TS_REQ_set_policy_id:near ; CODE	XREF: _create_query+11Bp
		extrn _TS_REQ_set_nonce:near ; CODE XREF: _create_query+142p
		extrn _TS_REQ_set_cert_req:near	; CODE XREF: _create_query+153p
		extrn _TS_REQ_print_bio:near ; CODE XREF: _query_command+DEp
		extrn _TS_RESP_set_status_info:near ; CODE XREF: _read_PKCS7+66p
		extrn _TS_RESP_set_tst_info:near ; CODE	XREF: _read_PKCS7+75p
		extrn _TS_RESP_get_token:near ;	CODE XREF: _reply_command+F8p
		extrn _TS_RESP_get_tst_info:near ; CODE	XREF: _reply_command+D9p
		extrn _TS_RESP_CTX_new:near ; CODE XREF: _create_response+4Cp
		extrn _TS_RESP_CTX_free:near ; CODE XREF: _create_response+174p
		extrn _TS_RESP_CTX_set_status_info:near	; CODE XREF: _serial_cb+21p
		extrn _TS_RESP_CTX_add_failure_info:near ; CODE	XREF: _serial_cb+29p
		extrn _TS_RESP_create_response:near ; CODE XREF: _create_response+154p
		extrn _TS_RESP_verify_response:near ; CODE XREF: _verify_command+8Ap
		extrn _TS_RESP_verify_token:near ; CODE	XREF: _verify_command+81p
		extrn _TS_VERIFY_CTX_new:near ;	CODE XREF: _create_verify_ctx:loc_6C9p
		extrn _TS_VERIFY_CTX_free:near ; CODE XREF: _create_verify_ctx+111p
					; _verify_command+E2p
		extrn _TS_REQ_to_TS_VERIFY_CTX:near ; CODE XREF: _create_verify_ctx+4Ep
		extrn _TS_RESP_print_bio:near ;	CODE XREF: _reply_command+EBp
		extrn _TS_TST_INFO_print_bio:near ; CODE XREF: _reply_command+E0p
		extrn _TS_CONF_load_certs:near ; CODE XREF: _create_verify_ctx+101p
		extrn _TS_CONF_get_tsa_section:near ; CODE XREF: _create_response+3Ap
		extrn _TS_CONF_set_serial:near ; CODE XREF: _create_response+63p
		extrn _TS_CONF_set_crypto_device:near ;	CODE XREF: _create_response+79p
		extrn _TS_CONF_set_signer_cert:near ; CODE XREF: _create_response+90p
		extrn _TS_CONF_set_certs:near ;	CODE XREF: _create_response+A7p
		extrn _TS_CONF_set_signer_key:near ; CODE XREF:	_create_response+C2p
		extrn _TS_CONF_set_def_policy:near ; CODE XREF:	_create_response+D9p
		extrn _TS_CONF_set_policies:near ; CODE	XREF: _create_response+E8p
		extrn _TS_CONF_set_digests:near	; CODE XREF: _create_response+F7p
		extrn _TS_CONF_set_accuracy:near ; CODE	XREF: _create_response+106p
		extrn _TS_CONF_set_clock_precision_digits:near
					; CODE XREF: _create_response+115p
		extrn _TS_CONF_set_ordering:near ; CODE	XREF: _create_response+124p
		extrn _TS_CONF_set_tsa_name:near ; CODE	XREF: _create_response+133p
		extrn _TS_CONF_set_ess_cert_id_chain:near ; CODE XREF: _create_response+142p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _create_digest+11Ep
					; _create_nonce+A3p ...
		extrn __chkstk:near	; CODE XREF: _create_digest+5p
					; _create_nonce+5p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _create_nonce+90p
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso
		extrn _bio_err:near	; DATA XREF: _create_cert_store+37r
					; _create_cert_store:loc_F4r ...
		extrn ___security_cookie:near ;	DATA XREF: _create_digest+Ar
					; _create_nonce+Ar ...


		end
