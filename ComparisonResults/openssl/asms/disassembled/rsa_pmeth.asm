;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	E4AA828EE76C15B258C8CFF6AE2118ED
; Input	CRC32 :	9BFA8BC7

; File Name   :	C:\compspace\Diff\openssl\obj\rsa_pmeth.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl pkey_rsa_sign(int, int, int, void	*Src, size_t Size)
_pkey_rsa_sign	proc near		; DATA XREF: .rdata:00000EDCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
Src		= dword	ptr  10h
Size		= dword	ptr  14h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	esi
		push	edi
		mov	eax, [ebx+8]
		mov	esi, [ebx+14h]
		mov	edi, [eax+14h]
		mov	eax, [esi+14h]
		test	eax, eax
		jz	loc_19E
		push	eax
		call	_EVP_MD_size
		mov	ebp, [esp+14h+Size]
		add	esp, 4
		cmp	ebp, eax
		jz	short loc_53
		push	0E4h ; '‰'
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	8Fh ; 'è'

loc_3C:					; CODE XREF: _pkey_rsa_sign+B9j
					; _pkey_rsa_sign+D5j
		push	8Eh ; 'é'
		push	4
		call	_ERR_put_error
		add	esp, 14h

loc_4B:					; CODE XREF: _pkey_rsa_sign+67j
					; _pkey_rsa_sign+14Fj ...
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_53:					; CODE XREF: _pkey_rsa_sign+2Bj
		push	dword ptr [esi+14h]
		call	_EVP_MD_type
		add	esp, 4
		cmp	eax, 5Fh ; '_'
		jnz	short loc_93
		cmp	dword ptr [esi+10h], 1
		jnz	short loc_4B
		push	edi
		lea	eax, [esp+14h+arg_0]
		push	eax
		push	[esp+18h+arg_4]
		push	ebp
		push	[esp+20h+Src]
		push	5Fh ; '_'
		call	_RSA_sign_ASN1_OCTET_STRING
		add	esp, 18h
		test	eax, eax
		jle	loc_1CE
		mov	ecx, [esp+10h+arg_0]
		jmp	loc_1B8
; ---------------------------------------------------------------------------

loc_93:					; CODE XREF: _pkey_rsa_sign+61j
		mov	eax, [esi+10h]
		cmp	eax, 5
		jnz	short loc_116
		push	dword ptr [ebx+8]
		call	_EVP_PKEY_size
		lea	ecx, [ebp+1]
		add	esp, 4
		cmp	eax, ecx
		jnb	short loc_BB
		push	102h
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	78h ; 'x'
		jmp	short loc_3C
; ---------------------------------------------------------------------------

loc_BB:					; CODE XREF: _pkey_rsa_sign+ABj
		push	ebx
		push	esi
		call	_setup_tbuf
		add	esp, 8
		test	eax, eax
		jnz	short loc_DA
		push	106h
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	41h ; 'A'
		jmp	loc_3C
; ---------------------------------------------------------------------------

loc_DA:					; CODE XREF: _pkey_rsa_sign+C7j
		push	ebp		; Size
		push	[esp+14h+Src]	; Src
		push	dword ptr [esi+20h] ; Dst
		call	_memcpy
		push	dword ptr [esi+14h]
		call	_EVP_MD_type
		push	eax
		call	_RSA_X931_hash_id
		mov	ecx, [esi+20h]
		push	5
		push	edi
		push	[esp+2Ch+arg_4]
		mov	[ecx+ebp], al
		lea	eax, [ebp+1]
		push	dword ptr [esi+20h]
		push	eax
		call	_RSA_private_encrypt
		add	esp, 28h
		jmp	loc_1B6
; ---------------------------------------------------------------------------

loc_116:				; CODE XREF: _pkey_rsa_sign+99j
		cmp	eax, 1
		jnz	short loc_14C
		push	edi
		lea	eax, [esp+14h+arg_0]
		push	eax
		push	[esp+18h+arg_4]
		push	ebp
		push	[esp+20h+Src]
		push	dword ptr [esi+14h]
		call	_EVP_MD_type
		add	esp, 4
		push	eax
		call	_RSA_sign
		add	esp, 18h
		test	eax, eax
		jle	loc_1CE
		mov	ecx, [esp+10h+arg_0]
		jmp	short loc_1B8
; ---------------------------------------------------------------------------

loc_14C:				; CODE XREF: _pkey_rsa_sign+119j
		cmp	eax, 6
		jnz	loc_4B
		push	ebx
		push	esi
		call	_setup_tbuf
		add	esp, 8
		test	eax, eax
		jz	loc_4B
		push	dword ptr [esi+1Ch]
		push	dword ptr [esi+18h]
		push	dword ptr [esi+14h]
		push	[esp+1Ch+Src]
		push	dword ptr [esi+20h]
		push	edi
		call	_RSA_padding_add_PKCS1_PSS_mgf1
		add	esp, 18h
		test	eax, eax
		jz	loc_4B
		push	3
		push	edi
		push	[esp+18h+arg_4]
		push	dword ptr [esi+20h]
		push	edi
		call	_RSA_size
		add	esp, 4
		push	eax
		jmp	short loc_1AE
; ---------------------------------------------------------------------------

loc_19E:				; CODE XREF: _pkey_rsa_sign+16j
		push	dword ptr [esi+10h]
		push	edi
		push	[esp+18h+arg_4]
		push	[esp+1Ch+Src]
		push	[esp+20h+Size]

loc_1AE:				; CODE XREF: _pkey_rsa_sign+19Cj
		call	_RSA_private_encrypt
		add	esp, 14h

loc_1B6:				; CODE XREF: _pkey_rsa_sign+111j
		mov	ecx, eax

loc_1B8:				; CODE XREF: _pkey_rsa_sign+8Ej
					; _pkey_rsa_sign+14Aj
		test	ecx, ecx
		jns	short loc_1C3
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ecx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1C3:				; CODE XREF: _pkey_rsa_sign+1BAj
		mov	eax, [esp+10h+arg_8]
		mov	[eax], ecx
		mov	eax, 1

loc_1CE:				; CODE XREF: _pkey_rsa_sign+84j
					; _pkey_rsa_sign+140j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_pkey_rsa_sign	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl pkey_rsa_verifyrecover(int, void *Dst, int, int, int)
_pkey_rsa_verifyrecover	proc near	; CODE XREF: _pkey_rsa_verify+5Dp
					; DATA XREF: .rdata:00000EECo

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esi+14h]
		mov	ecx, [edi+14h]
		test	ecx, ecx
		jz	loc_2F4
		mov	eax, [edi+10h]
		cmp	eax, 5
		jnz	loc_2B0
		push	esi
		push	edi
		call	_setup_tbuf
		add	esp, 8
		test	eax, eax
		jnz	short loc_208

loc_202:				; CODE XREF: _pkey_rsa_verifyrecover+DFj
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_208:				; CODE XREF: _pkey_rsa_verifyrecover+2Cj
		mov	eax, [esi+8]
		push	5
		push	dword ptr [eax+14h]
		push	dword ptr [edi+20h]
		push	[esp+14h+arg_C]
		push	[esp+18h+arg_10]
		call	_RSA_public_decrypt
		mov	esi, eax
		add	esp, 14h
		cmp	esi, 1
		jl	short loc_262
		push	dword ptr [edi+14h]
		dec	esi
		call	_EVP_MD_type
		push	eax
		call	_RSA_X931_hash_id
		mov	ecx, [edi+20h]
		add	esp, 8
		movzx	ecx, byte ptr [ecx+esi]
		cmp	ecx, eax
		jz	short loc_267
		push	13Ch
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	64h ; 'd'
		push	8Dh ; 'ç'
		push	4
		call	_ERR_put_error
		add	esp, 14h

loc_262:				; CODE XREF: _pkey_rsa_verifyrecover+54j
					; _pkey_rsa_verifyrecover+114j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_267:				; CODE XREF: _pkey_rsa_verifyrecover+71j
		push	dword ptr [edi+14h]
		call	_EVP_MD_size
		add	esp, 4
		cmp	esi, eax
		jz	short loc_299
		push	141h
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	8Fh ; 'è'
		push	8Dh ; 'ç'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_299:				; CODE XREF: _pkey_rsa_verifyrecover+A0j
		mov	eax, [esp+8+Dst]
		test	eax, eax
		jz	short loc_313
		push	esi		; Size
		push	dword ptr [edi+20h] ; Src
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch
		jmp	short loc_313
; ---------------------------------------------------------------------------

loc_2B0:				; CODE XREF: _pkey_rsa_verifyrecover+1Aj
		cmp	eax, 1
		jnz	loc_202
		mov	eax, [esi+8]
		push	dword ptr [eax+14h]
		lea	eax, [esp+0Ch+arg_0]
		push	[esp+0Ch+arg_10]
		push	[esp+10h+arg_C]
		push	eax
		push	[esp+18h+Dst]
		push	0
		push	0
		push	ecx
		call	_EVP_MD_type
		add	esp, 4
		push	eax
		call	_int_rsa_verify
		add	esp, 20h
		test	eax, eax
		jle	loc_262
		mov	esi, [esp+8+arg_0]
		jmp	short loc_313
; ---------------------------------------------------------------------------

loc_2F4:				; CODE XREF: _pkey_rsa_verifyrecover+Ej
		push	dword ptr [edi+10h]
		mov	eax, [esi+8]
		push	dword ptr [eax+14h]
		push	[esp+10h+Dst]
		push	[esp+14h+arg_C]
		push	[esp+18h+arg_10]
		call	_RSA_public_decrypt
		add	esp, 14h
		mov	esi, eax

loc_313:				; CODE XREF: _pkey_rsa_verifyrecover+CBj
					; _pkey_rsa_verifyrecover+DAj ...
		test	esi, esi
		jns	short loc_31C
		pop	edi
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_31C:				; CODE XREF: _pkey_rsa_verifyrecover+141j
		mov	eax, [esp+8+arg_8]
		pop	edi
		mov	[eax], esi
		mov	eax, 1
		pop	esi
		retn
_pkey_rsa_verifyrecover	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 32Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_rsa_verify proc near		; DATA XREF: .rdata:00000EE4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		mov	esi, [eax+14h]
		mov	ecx, [eax+8]
		mov	edx, [esi+14h]
		mov	edi, [ecx+14h]
		test	edx, edx
		jz	loc_3FE
		mov	ecx, [esi+10h]
		cmp	ecx, 1
		jnz	short loc_374
		push	edi
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		push	[esp+14h+arg_10]
		push	[esp+18h+arg_C]
		push	edx
		call	_EVP_MD_type
		add	esp, 4
		push	eax
		call	_RSA_verify
		add	esp, 18h
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_374:				; CODE XREF: _pkey_rsa_verify+20j
		cmp	ecx, 5
		jnz	short loc_3A2
		push	[esp+8+arg_8]	; int
		lea	ecx, [esp+0Ch+arg_0]
		push	[esp+0Ch+arg_4]	; int
		push	ecx		; int
		push	0		; Dst
		push	eax		; int
		call	_pkey_rsa_verifyrecover
		add	esp, 14h
		test	eax, eax
		jle	loc_4A7
		mov	ecx, [esp+8+arg_0]
		jmp	loc_444
; ---------------------------------------------------------------------------

loc_3A2:				; CODE XREF: _pkey_rsa_verify+4Bj
		cmp	ecx, 6
		jnz	short loc_3B5
		push	eax
		push	esi
		call	_setup_tbuf
		add	esp, 8
		test	eax, eax
		jnz	short loc_3BB

loc_3B5:				; CODE XREF: _pkey_rsa_verify+79j
					; _pkey_rsa_verify+F9j
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3BB:				; CODE XREF: _pkey_rsa_verify+87j
		push	3
		push	edi
		push	dword ptr [esi+20h]
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_8]
		call	_RSA_public_decrypt
		add	esp, 14h
		test	eax, eax
		jle	loc_4A7
		push	dword ptr [esi+1Ch]
		push	dword ptr [esi+20h]
		push	dword ptr [esi+18h]
		push	dword ptr [esi+14h]
		push	[esp+18h+arg_C]
		push	edi
		call	_RSA_verify_PKCS1_PSS_mgf1
		add	esp, 18h
		xor	ecx, ecx
		test	eax, eax
		setnle	cl
		pop	edi
		mov	eax, ecx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3FE:				; CODE XREF: _pkey_rsa_verify+14j
		cmp	dword ptr [esi+20h], 0
		jnz	short loc_427
		push	9Ch ; 'ú'
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	ecx
		call	_EVP_PKEY_size
		add	esp, 4
		push	eax
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[esi+20h], eax
		test	eax, eax
		jz	short loc_3B5

loc_427:				; CODE XREF: _pkey_rsa_verify+D6j
		push	dword ptr [esi+10h]
		push	edi
		push	dword ptr [esi+20h]
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_8]
		call	_RSA_public_decrypt
		mov	ecx, eax
		add	esp, 14h
		test	ecx, ecx
		jz	short loc_4A7

loc_444:				; CODE XREF: _pkey_rsa_verify+71j
		cmp	ecx, [esp+8+arg_10]
		jnz	short loc_4A7
		mov	edx, [esp+8+arg_C]
		mov	esi, [esi+20h]
		sub	ecx, 4
		jb	short loc_46D
		nop	word ptr [eax+eax+00h]

loc_45C:				; CODE XREF: _pkey_rsa_verify+13Fj
		mov	eax, [edx]
		cmp	eax, [esi]
		jnz	short loc_472
		add	edx, 4
		add	esi, 4
		sub	ecx, 4
		jnb	short loc_45C

loc_46D:				; CODE XREF: _pkey_rsa_verify+128j
		cmp	ecx, 0FFFFFFFCh
		jz	short loc_49F

loc_472:				; CODE XREF: _pkey_rsa_verify+134j
		mov	al, [edx]
		cmp	al, [esi]
		jnz	short loc_4A7
		cmp	ecx, 0FFFFFFFDh
		jz	short loc_49F
		mov	al, [edx+1]
		cmp	al, [esi+1]
		jnz	short loc_4A7
		cmp	ecx, 0FFFFFFFEh
		jz	short loc_49F
		mov	al, [edx+2]
		cmp	al, [esi+2]
		jnz	short loc_4A7
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_49F
		mov	al, [edx+3]
		cmp	al, [esi+3]
		jnz	short loc_4A7

loc_49F:				; CODE XREF: _pkey_rsa_verify+144j
					; _pkey_rsa_verify+14Fj ...
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4A7:				; CODE XREF: _pkey_rsa_verify+67j
					; _pkey_rsa_verify+A7j	...
		pop	edi
		xor	eax, eax
		pop	esi
		retn
_pkey_rsa_verify endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_rsa_encrypt proc near		; DATA XREF: .rdata:00000F04o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		mov	esi, [edi+14h]
		mov	eax, [esi+10h]
		cmp	eax, 4
		jnz	short loc_536
		mov	eax, [edi+8]
		push	dword ptr [eax+14h]
		call	_RSA_size
		add	esp, 4
		mov	ebx, eax
		cmp	dword ptr [esi+20h], 0
		jnz	short loc_500
		push	9Ch ; 'ú'
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	dword ptr [edi+8]
		call	_EVP_PKEY_size
		add	esp, 4
		push	eax
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[esi+20h], eax
		test	eax, eax
		jnz	short loc_500

loc_4F9:				; CODE XREF: _pkey_rsa_encrypt+76j
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_500:				; CODE XREF: _pkey_rsa_encrypt+26j
					; _pkey_rsa_encrypt+4Bj
		push	dword ptr [esi+18h]
		push	dword ptr [esi+14h]
		push	dword ptr [esi+28h]
		push	dword ptr [esi+24h]
		push	[esp+1Ch+arg_10]
		push	[esp+20h+arg_C]
		push	ebx
		push	dword ptr [esi+20h]
		call	_RSA_padding_add_PKCS1_OAEP_mgf1
		add	esp, 20h
		test	eax, eax
		jz	short loc_4F9
		mov	eax, [edi+8]
		push	3
		push	dword ptr [eax+14h]
		push	[esp+14h+arg_4]
		push	dword ptr [esi+20h]
		push	ebx
		jmp	short loc_549
; ---------------------------------------------------------------------------

loc_536:				; CODE XREF: _pkey_rsa_encrypt+10j
		push	eax
		mov	eax, [edi+8]
		push	dword ptr [eax+14h]
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_C]
		push	[esp+1Ch+arg_10]

loc_549:				; CODE XREF: _pkey_rsa_encrypt+88j
		call	_RSA_public_encrypt
		mov	ecx, eax
		add	esp, 14h
		test	ecx, ecx
		jns	short loc_55B
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_55B:				; CODE XREF: _pkey_rsa_encrypt+A9j
		mov	eax, [esp+0Ch+arg_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	[eax], ecx
		mov	eax, 1
		retn
_pkey_rsa_encrypt endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 56Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_rsa_decrypt proc near		; DATA XREF: .rdata:00000F0Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	esi, [edi+14h]
		mov	eax, [esi+10h]
		cmp	eax, 4
		jnz	loc_611
		cmp	dword ptr [esi+20h], 0
		jnz	short loc_5B2
		push	9Ch ; 'ú'
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	dword ptr [edi+8]
		call	_EVP_PKEY_size
		add	esp, 4
		push	eax
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[esi+20h], eax
		test	eax, eax
		jnz	short loc_5B2
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_5B2:				; CODE XREF: _pkey_rsa_decrypt+19j
					; _pkey_rsa_decrypt+3Ej
		mov	eax, [edi+8]
		push	3
		push	dword ptr [eax+14h]
		push	dword ptr [esi+20h]
		push	[esp+14h+arg_C]
		push	[esp+18h+arg_10]
		call	_RSA_private_decrypt
		mov	edx, eax
		add	esp, 14h
		test	edx, edx
		jg	short loc_5D6
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_5D6:				; CODE XREF: _pkey_rsa_decrypt+65j
		xor	ecx, ecx
		test	edx, edx
		jle	short loc_5EA
		mov	eax, [esi+20h]

loc_5DF:				; CODE XREF: _pkey_rsa_decrypt+7Cj
		cmp	byte ptr [eax+ecx], 0
		jnz	short loc_5EA
		inc	ecx
		cmp	ecx, edx
		jl	short loc_5DF

loc_5EA:				; CODE XREF: _pkey_rsa_decrypt+6Ej
					; _pkey_rsa_decrypt+77j
		push	dword ptr [esi+18h]
		mov	eax, edx
		push	dword ptr [esi+14h]
		sub	eax, ecx
		push	dword ptr [esi+28h]
		push	dword ptr [esi+24h]
		push	edx
		push	eax
		mov	eax, [esi+20h]
		add	eax, ecx
		push	eax
		push	edx
		push	[esp+28h+arg_4]
		call	_RSA_padding_check_PKCS1_OAEP_mgf1
		add	esp, 24h
		jmp	short loc_62C
; ---------------------------------------------------------------------------

loc_611:				; CODE XREF: _pkey_rsa_decrypt+Fj
		push	eax
		mov	eax, [edi+8]
		push	dword ptr [eax+14h]
		push	[esp+10h+arg_4]
		push	[esp+14h+arg_C]
		push	[esp+18h+arg_10]
		call	_RSA_private_decrypt
		add	esp, 14h

loc_62C:				; CODE XREF: _pkey_rsa_decrypt+A3j
		mov	ecx, eax
		test	ecx, ecx
		jns	short loc_635
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_635:				; CODE XREF: _pkey_rsa_decrypt+C4j
		mov	eax, [esp+8+arg_8]
		pop	edi
		pop	esi
		mov	[eax], ecx
		mov	eax, 1
		retn
_pkey_rsa_decrypt endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 644h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_rsa_ctrl	proc near		; DATA XREF: .rdata:00000F18o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		push	edi
		mov	esi, [ebx+14h]
		cmp	eax, 0Dh
		jg	short loc_6C6
		jz	short loc_6B4
		dec	eax
		cmp	eax, 0Ah	; switch 11 cases
		ja	short $LN46	; jumptable 00000666 default case
		movzx	eax, ds:$LN49[eax]
		jmp	ds:$LN57[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN27:					; CODE XREF: _pkey_rsa_ctrl+22j
					; DATA XREF: .text$mn:$LN57o
		push	dword ptr [esi+10h] ; jumptable	00000666 case 0
		mov	edi, [esp+10h+arg_C]
		push	edi
		call	_check_padding_md
		add	esp, 8
		test	eax, eax
		jz	short loc_6F4
		mov	[esi+14h], edi
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN45:					; CODE XREF: _pkey_rsa_ctrl+22j
					; DATA XREF: .text$mn:$LN57o
		push	275h		; jumptable 00000666 case 1
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	94h ; 'î'

loc_69C:				; CODE XREF: _pkey_rsa_ctrl+F8j
					; _pkey_rsa_ctrl+124j ...
		push	8Fh ; 'è'
		push	4
		call	_ERR_put_error
		add	esp, 14h

$LN46:					; CODE XREF: _pkey_rsa_ctrl+19j
					; _pkey_rsa_ctrl+22j ...
		pop	edi		; jumptable 00000666 default case
		pop	esi
		mov	eax, 0FFFFFFFEh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B4:				; CODE XREF: _pkey_rsa_ctrl+13j
		mov	eax, [esp+0Ch+arg_C]
		mov	ecx, [esi+14h]
		pop	edi
		pop	esi
		mov	[eax], ecx
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6C6:				; CODE XREF: _pkey_rsa_ctrl+11j
		lea	ecx, [eax-1001h] ; switch 12 cases
		cmp	ecx, 0Bh
		ja	short $LN46	; jumptable 00000666 default case
		jmp	ds:$LN58[ecx*4]	; switch jump
; ---------------------------------------------------------------------------

$LN4:					; CODE XREF: _pkey_rsa_ctrl+8Dj
					; DATA XREF: .text$mn:$LN58o
		mov	edi, [esp+0Ch+arg_8] ; jumptable 000006D1 case 4097
		lea	eax, [edi-1]
		cmp	eax, 5
		ja	short $bad_pad$59
		push	edi
		push	dword ptr [esi+14h]
		call	_check_padding_md
		add	esp, 8
		test	eax, eax
		jnz	short loc_6FA

loc_6F4:				; CODE XREF: _pkey_rsa_ctrl+3Bj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6FA:				; CODE XREF: _pkey_rsa_ctrl+AEj
		cmp	edi, 6
		jnz	short loc_705
		test	byte ptr [ebx+10h], 18h
		jmp	short loc_711
; ---------------------------------------------------------------------------

loc_705:				; CODE XREF: _pkey_rsa_ctrl+B9j
		cmp	edi, 4
		jnz	short loc_721
		test	dword ptr [ebx+10h], 300h

loc_711:				; CODE XREF: _pkey_rsa_ctrl+BFj
		jz	short $bad_pad$59
		cmp	dword ptr [esi+14h], 0
		jnz	short loc_721
		call	_EVP_sha1
		mov	[esi+14h], eax

loc_721:				; CODE XREF: _pkey_rsa_ctrl+C4j
					; _pkey_rsa_ctrl+D3j
		mov	[esi+10h], edi

$LN43:					; CODE XREF: _pkey_rsa_ctrl+22j
					; DATA XREF: .text$mn:$LN57o
		pop	edi		; jumptable 00000666 cases 2-4,6,8-10
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$bad_pad$59:				; CODE XREF: _pkey_rsa_ctrl+9Ej
					; _pkey_rsa_ctrl:loc_711j
		push	205h
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	90h ; 'ê'
		jmp	loc_69C
; ---------------------------------------------------------------------------

$LN13:					; CODE XREF: _pkey_rsa_ctrl+8Dj
					; DATA XREF: .text$mn:$LN58o
		mov	eax, [esp+0Ch+arg_C] ; jumptable 000006D1 case 4102
		mov	ecx, [esi+10h]
		pop	edi
		pop	esi
		mov	[eax], ecx
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN14:					; CODE XREF: _pkey_rsa_ctrl+8Dj
					; DATA XREF: .text$mn:$LN58o
		cmp	dword ptr [esi+10h], 6 ; jumptable 000006D1 cases 4098,4103
		jz	short loc_76D
		push	20Fh
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	92h ; 'í'
		jmp	loc_69C
; ---------------------------------------------------------------------------

loc_76D:				; CODE XREF: _pkey_rsa_ctrl+113j
		cmp	eax, 1007h
		jnz	short loc_786
		mov	eax, [esp+0Ch+arg_C]
		mov	ecx, [esi+1Ch]
		pop	edi
		pop	esi
		mov	[eax], ecx
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_786:				; CODE XREF: _pkey_rsa_ctrl+12Ej
		mov	eax, [esp+0Ch+arg_8]
		cmp	eax, 0FFFFFFFEh
		jl	$LN46		; jumptable 00000666 default case
		pop	edi
		mov	[esi+1Ch], eax
		mov	eax, 1
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN19:					; CODE XREF: _pkey_rsa_ctrl+8Dj
					; DATA XREF: .text$mn:$LN58o
		mov	eax, [esp+0Ch+arg_8] ; jumptable 000006D1 case 4099
		cmp	eax, 100h
		jge	short loc_7BE
		push	21Dh
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	91h ; 'ë'
		jmp	loc_69C
; ---------------------------------------------------------------------------

loc_7BE:				; CODE XREF: _pkey_rsa_ctrl+164j
		pop	edi
		mov	[esi], eax
		mov	eax, 1
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN21:					; CODE XREF: _pkey_rsa_ctrl+8Dj
					; DATA XREF: .text$mn:$LN58o
		mov	edi, [esp+0Ch+arg_C] ; jumptable 000006D1 case 4100
		test	edi, edi
		jz	$LN46		; jumptable 00000666 default case
		push	dword ptr [esi+4]
		call	_BN_free
		add	esp, 4
		mov	[esi+4], edi
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN23:					; CODE XREF: _pkey_rsa_ctrl+8Dj
					; DATA XREF: .text$mn:$LN58o
		cmp	dword ptr [esi+10h], 4 ; jumptable 000006D1 cases 4105,4107
		jz	short loc_806
		push	22Dh
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	8Dh ; 'ç'
		jmp	loc_69C
; ---------------------------------------------------------------------------

loc_806:				; CODE XREF: _pkey_rsa_ctrl+1ACj
		cmp	eax, 100Bh
		mov	eax, [esp+0Ch+arg_C]
		jnz	short loc_81F
		mov	ecx, [esi+14h]
		pop	edi
		pop	esi
		mov	[eax], ecx
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_81F:				; CODE XREF: _pkey_rsa_ctrl+1CBj
		pop	edi
		mov	[esi+14h], eax
		mov	eax, 1
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN30:					; CODE XREF: _pkey_rsa_ctrl+8Dj
					; DATA XREF: .text$mn:$LN58o
		mov	ecx, [esi+10h]	; jumptable 000006D1 cases 4101,4104
		cmp	ecx, 6
		jz	short loc_84C
		cmp	ecx, 4
		jz	short loc_84C
		push	244h
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	9Ch ; 'ú'
		jmp	loc_69C
; ---------------------------------------------------------------------------

loc_84C:				; CODE XREF: _pkey_rsa_ctrl+1EDj
					; _pkey_rsa_ctrl+1F2j
		cmp	eax, 1008h
		mov	eax, [esp+0Ch+arg_C]
		jnz	short loc_86C
		mov	ecx, [esi+18h]
		test	ecx, ecx
		jnz	short loc_861
		mov	ecx, [esi+14h]

loc_861:				; CODE XREF: _pkey_rsa_ctrl+218j
		pop	edi
		pop	esi
		mov	[eax], ecx
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_86C:				; CODE XREF: _pkey_rsa_ctrl+211j
		pop	edi
		mov	[esi+18h], eax
		mov	eax, 1
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN36:					; CODE XREF: _pkey_rsa_ctrl+8Dj
					; DATA XREF: .text$mn:$LN58o
		cmp	dword ptr [esi+10h], 4 ; jumptable 000006D1 case 4106
		jz	short loc_892
		push	252h
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	8Dh ; 'ç'
		jmp	loc_69C
; ---------------------------------------------------------------------------

loc_892:				; CODE XREF: _pkey_rsa_ctrl+238j
		mov	eax, [esi+24h]
		test	eax, eax
		jz	short loc_8A2
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_8A2:				; CODE XREF: _pkey_rsa_ctrl+253j
		mov	eax, [esp+0Ch+arg_C]
		test	eax, eax
		jz	short loc_8C1
		mov	ecx, [esp+0Ch+arg_8]
		test	ecx, ecx
		jle	short loc_8C1
		pop	edi
		mov	[esi+24h], eax
		mov	eax, 1
		mov	[esi+28h], ecx
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_8C1:				; CODE XREF: _pkey_rsa_ctrl+264j
					; _pkey_rsa_ctrl+26Cj
		pop	edi
		mov	dword ptr [esi+24h], 0
		mov	eax, 1
		mov	dword ptr [esi+28h], 0
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN41:					; CODE XREF: _pkey_rsa_ctrl+8Dj
					; DATA XREF: .text$mn:$LN58o
		cmp	dword ptr [esi+10h], 4 ; jumptable 000006D1 case 4108
		jz	short loc_8F2
		push	262h
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	8Dh ; 'ç'
		jmp	loc_69C
; ---------------------------------------------------------------------------

loc_8F2:				; CODE XREF: _pkey_rsa_ctrl+298j
		mov	ecx, [esp+0Ch+arg_C]
		mov	edx, [esi+24h]
		pop	edi
		mov	[ecx], edx
		mov	eax, [esi+28h]
		pop	esi
		pop	ebx
		retn
_pkey_rsa_ctrl	endp

; ---------------------------------------------------------------------------
		align 4
$LN57		dd offset $LN27		; DATA XREF: _pkey_rsa_ctrl+22r
		dd offset $LN45		; jump table for switch	statement
		dd offset $LN43
		dd offset $LN46
$LN49		db	0,     1,     2,     2 ; DATA XREF: _pkey_rsa_ctrl+1Br
		db	2,     3,     2,     3 ; indirect table	for switch statement
		db	2,     2,     2
		align 10h
$LN58		dd offset $LN4		; DATA XREF: _pkey_rsa_ctrl+8Dr
		dd offset $LN14		; jump table for switch	statement
		dd offset $LN19
		dd offset $LN21
		dd offset $LN30
		dd offset $LN13
		dd offset $LN14
		dd offset $LN30
		dd offset $LN23
		dd offset $LN36
		dd offset $LN23
		dd offset $LN41
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 950h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl pkey_rsa_ctrl_str(int, int, char *Str)
_pkey_rsa_ctrl_str proc	near		; DATA XREF: .rdata:00000F1Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Str		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+Str]
		test	esi, esi
		jnz	short loc_97B
		push	282h
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	93h ; 'ì'
		push	90h ; 'ê'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_97B:				; CODE XREF: _pkey_rsa_ctrl_str+7j
		mov	edx, [esp+4+arg_4]
		mov	ecx, offset ??_C@_0BB@BILFEOKG@rsa_padding_mode?$AA@ ; "rsa_padding_mode"
		mov	eax, edx
		push	ebx

loc_987:				; CODE XREF: _pkey_rsa_ctrl_str+51j
		mov	bl, [eax]
		cmp	bl, [ecx]
		jnz	short loc_9A7
		test	bl, bl
		jz	short loc_9A3
		mov	bl, [eax+1]
		cmp	bl, [ecx+1]
		jnz	short loc_9A7
		add	eax, 2
		add	ecx, 2
		test	bl, bl
		jnz	short loc_987

loc_9A3:				; CODE XREF: _pkey_rsa_ctrl_str+3Fj
		xor	eax, eax
		jmp	short loc_9AC
; ---------------------------------------------------------------------------

loc_9A7:				; CODE XREF: _pkey_rsa_ctrl_str+3Bj
					; _pkey_rsa_ctrl_str+47j
		sbb	eax, eax
		or	eax, 1

loc_9AC:				; CODE XREF: _pkey_rsa_ctrl_str+55j
		test	eax, eax
		jnz	loc_B8C
		mov	ecx, offset ??_C@_05BCIEJMJH@pkcs1?$AA@	; "pkcs1"
		mov	eax, esi
		nop	dword ptr [eax+eax+00h]

loc_9C0:				; CODE XREF: _pkey_rsa_ctrl_str+8Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_9E0
		test	dl, dl
		jz	short loc_9DC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_9E0
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_9C0

loc_9DC:				; CODE XREF: _pkey_rsa_ctrl_str+78j
		xor	eax, eax
		jmp	short loc_9E5
; ---------------------------------------------------------------------------

loc_9E0:				; CODE XREF: _pkey_rsa_ctrl_str+74j
					; _pkey_rsa_ctrl_str+80j
		sbb	eax, eax
		or	eax, 1

loc_9E5:				; CODE XREF: _pkey_rsa_ctrl_str+8Ej
		test	eax, eax
		jnz	short loc_9F3
		mov	eax, 1
		jmp	loc_B4E
; ---------------------------------------------------------------------------

loc_9F3:				; CODE XREF: _pkey_rsa_ctrl_str+97j
		mov	ecx, offset ??_C@_06PDLHKEJK@sslv23?$AA@ ; "sslv23"
		mov	eax, esi
		nop	word ptr [eax+eax+00h]

loc_A00:				; CODE XREF: _pkey_rsa_ctrl_str+CAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_A20
		test	dl, dl
		jz	short loc_A1C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_A20
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_A00

loc_A1C:				; CODE XREF: _pkey_rsa_ctrl_str+B8j
		xor	eax, eax
		jmp	short loc_A25
; ---------------------------------------------------------------------------

loc_A20:				; CODE XREF: _pkey_rsa_ctrl_str+B4j
					; _pkey_rsa_ctrl_str+C0j
		sbb	eax, eax
		or	eax, 1

loc_A25:				; CODE XREF: _pkey_rsa_ctrl_str+CEj
		test	eax, eax
		jnz	short loc_A33
		mov	eax, 2
		jmp	loc_B4E
; ---------------------------------------------------------------------------

loc_A33:				; CODE XREF: _pkey_rsa_ctrl_str+D7j
		mov	ecx, offset ??_C@_04CGFJFPFD@none?$AA@ ; "none"
		mov	eax, esi
		nop	word ptr [eax+eax+00h]

loc_A40:				; CODE XREF: _pkey_rsa_ctrl_str+10Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_A60
		test	dl, dl
		jz	short loc_A5C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_A60
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_A40

loc_A5C:				; CODE XREF: _pkey_rsa_ctrl_str+F8j
		xor	eax, eax
		jmp	short loc_A65
; ---------------------------------------------------------------------------

loc_A60:				; CODE XREF: _pkey_rsa_ctrl_str+F4j
					; _pkey_rsa_ctrl_str+100j
		sbb	eax, eax
		or	eax, 1

loc_A65:				; CODE XREF: _pkey_rsa_ctrl_str+10Ej
		test	eax, eax
		jnz	short loc_A73
		mov	eax, 3
		jmp	loc_B4E
; ---------------------------------------------------------------------------

loc_A73:				; CODE XREF: _pkey_rsa_ctrl_str+117j
		mov	ecx, offset ??_C@_04EIGNDHKO@oeap?$AA@ ; "oeap"
		mov	eax, esi
		nop	word ptr [eax+eax+00h]

loc_A80:				; CODE XREF: _pkey_rsa_ctrl_str+14Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_AA0
		test	dl, dl
		jz	short loc_A9C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_AA0
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_A80

loc_A9C:				; CODE XREF: _pkey_rsa_ctrl_str+138j
		xor	eax, eax
		jmp	short loc_AA5
; ---------------------------------------------------------------------------

loc_AA0:				; CODE XREF: _pkey_rsa_ctrl_str+134j
					; _pkey_rsa_ctrl_str+140j
		sbb	eax, eax
		or	eax, 1

loc_AA5:				; CODE XREF: _pkey_rsa_ctrl_str+14Ej
		test	eax, eax
		jz	short loc_AD9
		mov	ecx, offset ??_C@_04MAAGAICF@oaep?$AA@ ; "oaep"
		mov	eax, esi

loc_AB0:				; CODE XREF: _pkey_rsa_ctrl_str+17Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_AD0
		test	dl, dl
		jz	short loc_ACC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_AD0
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_AB0

loc_ACC:				; CODE XREF: _pkey_rsa_ctrl_str+168j
		xor	eax, eax
		jmp	short loc_AD5
; ---------------------------------------------------------------------------

loc_AD0:				; CODE XREF: _pkey_rsa_ctrl_str+164j
					; _pkey_rsa_ctrl_str+170j
		sbb	eax, eax
		or	eax, 1

loc_AD5:				; CODE XREF: _pkey_rsa_ctrl_str+17Ej
		test	eax, eax
		jnz	short loc_AE0

loc_AD9:				; CODE XREF: _pkey_rsa_ctrl_str+157j
		mov	eax, 4
		jmp	short loc_B4E
; ---------------------------------------------------------------------------

loc_AE0:				; CODE XREF: _pkey_rsa_ctrl_str+187j
		mov	ecx, offset ??_C@_04JNCMEILM@x931?$AA@ ; "x931"
		mov	eax, esi

loc_AE7:				; CODE XREF: _pkey_rsa_ctrl_str+1B1j
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_B07
		test	dl, dl
		jz	short loc_B03
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_B07
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_AE7

loc_B03:				; CODE XREF: _pkey_rsa_ctrl_str+19Fj
		xor	eax, eax
		jmp	short loc_B0C
; ---------------------------------------------------------------------------

loc_B07:				; CODE XREF: _pkey_rsa_ctrl_str+19Bj
					; _pkey_rsa_ctrl_str+1A7j
		sbb	eax, eax
		or	eax, 1

loc_B0C:				; CODE XREF: _pkey_rsa_ctrl_str+1B5j
		test	eax, eax
		jnz	short loc_B17
		mov	eax, 5
		jmp	short loc_B4E
; ---------------------------------------------------------------------------

loc_B17:				; CODE XREF: _pkey_rsa_ctrl_str+1BEj
		mov	eax, offset ??_C@_03OHCBHMED@pss?$AA@ ;	`string'
		nop	dword ptr [eax+00h]

loc_B20:				; CODE XREF: _pkey_rsa_ctrl_str+1EAj
		mov	cl, [esi]
		cmp	cl, [eax]
		jnz	short loc_B40
		test	cl, cl
		jz	short loc_B3C
		mov	cl, [esi+1]
		cmp	cl, [eax+1]
		jnz	short loc_B40
		add	esi, 2
		add	eax, 2
		test	cl, cl
		jnz	short loc_B20

loc_B3C:				; CODE XREF: _pkey_rsa_ctrl_str+1D8j
		xor	eax, eax
		jmp	short loc_B45
; ---------------------------------------------------------------------------

loc_B40:				; CODE XREF: _pkey_rsa_ctrl_str+1D4j
					; _pkey_rsa_ctrl_str+1E0j
		sbb	eax, eax
		or	eax, 1

loc_B45:				; CODE XREF: _pkey_rsa_ctrl_str+1EEj
		test	eax, eax
		jnz	short loc_B69
		mov	eax, 6

loc_B4E:				; CODE XREF: _pkey_rsa_ctrl_str+9Ej
					; _pkey_rsa_ctrl_str+DEj ...
		push	0
		push	eax
		push	1001h
		push	0FFFFFFFFh
		push	6
		push	[esp+1Ch+arg_0]
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_B69:				; CODE XREF: _pkey_rsa_ctrl_str+1F7j
		push	296h
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	76h ; 'v'
		push	90h ; 'ê'
		push	4
		call	_ERR_put_error
		add	esp, 14h

loc_B84:				; CODE XREF: _pkey_rsa_ctrl_str+468j
		pop	ebx
		mov	eax, 0FFFFFFFEh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_B8C:				; CODE XREF: _pkey_rsa_ctrl_str+5Ej
		mov	ecx, offset ??_C@_0BA@CIHMEEHB@rsa_pss_saltlen?$AA@ ; "rsa_pss_saltlen"
		mov	eax, edx

loc_B93:				; CODE XREF: _pkey_rsa_ctrl_str+25Dj
		mov	bl, [eax]
		cmp	bl, [ecx]
		jnz	short loc_BB3
		test	bl, bl
		jz	short loc_BAF
		mov	bl, [eax+1]
		cmp	bl, [ecx+1]
		jnz	short loc_BB3
		add	eax, 2
		add	ecx, 2
		test	bl, bl
		jnz	short loc_B93

loc_BAF:				; CODE XREF: _pkey_rsa_ctrl_str+24Bj
		xor	eax, eax
		jmp	short loc_BB8
; ---------------------------------------------------------------------------

loc_BB3:				; CODE XREF: _pkey_rsa_ctrl_str+247j
					; _pkey_rsa_ctrl_str+253j
		sbb	eax, eax
		or	eax, 1

loc_BB8:				; CODE XREF: _pkey_rsa_ctrl_str+261j
		test	eax, eax
		jnz	short loc_BDE
		push	esi		; Str
		call	dword ptr ds:__imp__atoi
		push	0
		push	eax
		push	1002h
		push	18h
		push	6
		push	[esp+20h+arg_0]
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 1Ch
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_BDE:				; CODE XREF: _pkey_rsa_ctrl_str+26Aj
		mov	ecx, offset ??_C@_0BA@GFPKPLAF@rsa_keygen_bits?$AA@ ; "rsa_keygen_bits"
		mov	eax, edx

loc_BE5:				; CODE XREF: _pkey_rsa_ctrl_str+2AFj
		mov	bl, [eax]
		cmp	bl, [ecx]
		jnz	short loc_C05
		test	bl, bl
		jz	short loc_C01
		mov	bl, [eax+1]
		cmp	bl, [ecx+1]
		jnz	short loc_C05
		add	eax, 2
		add	ecx, 2
		test	bl, bl
		jnz	short loc_BE5

loc_C01:				; CODE XREF: _pkey_rsa_ctrl_str+29Dj
		xor	eax, eax
		jmp	short loc_C0A
; ---------------------------------------------------------------------------

loc_C05:				; CODE XREF: _pkey_rsa_ctrl_str+299j
					; _pkey_rsa_ctrl_str+2A5j
		sbb	eax, eax
		or	eax, 1

loc_C0A:				; CODE XREF: _pkey_rsa_ctrl_str+2B3j
		test	eax, eax
		jnz	short loc_C30
		push	esi		; Str
		call	dword ptr ds:__imp__atoi
		push	0
		push	eax
		push	1003h
		push	4
		push	6
		push	[esp+20h+arg_0]
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 1Ch
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_C30:				; CODE XREF: _pkey_rsa_ctrl_str+2BCj
		mov	ecx, offset ??_C@_0BC@DMECNPFD@rsa_keygen_pubexp?$AA@ ;	"rsa_keygen_pubexp"
		mov	eax, edx

loc_C37:				; CODE XREF: _pkey_rsa_ctrl_str+301j
		mov	bl, [eax]
		cmp	bl, [ecx]
		jnz	short loc_C57
		test	bl, bl
		jz	short loc_C53
		mov	bl, [eax+1]
		cmp	bl, [ecx+1]
		jnz	short loc_C57
		add	eax, 2
		add	ecx, 2
		test	bl, bl
		jnz	short loc_C37

loc_C53:				; CODE XREF: _pkey_rsa_ctrl_str+2EFj
		xor	eax, eax
		jmp	short loc_C5C
; ---------------------------------------------------------------------------

loc_C57:				; CODE XREF: _pkey_rsa_ctrl_str+2EBj
					; _pkey_rsa_ctrl_str+2F7j
		sbb	eax, eax
		or	eax, 1

loc_C5C:				; CODE XREF: _pkey_rsa_ctrl_str+305j
		test	eax, eax
		jnz	short loc_CAC
		mov	[esp+8+Str], eax
		lea	eax, [esp+8+Str]
		push	esi
		push	eax
		call	_BN_asc2bn
		add	esp, 8
		test	eax, eax
		jz	loc_D69
		push	[esp+8+Str]
		push	0
		push	1004h
		push	4
		push	6
		push	[esp+1Ch+arg_0]
		call	_EVP_PKEY_CTX_ctrl
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jg	short loc_CA7
		push	[esp+8+Str]
		call	_BN_free
		add	esp, 4

loc_CA7:				; CODE XREF: _pkey_rsa_ctrl_str+349j
		pop	ebx
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_CAC:				; CODE XREF: _pkey_rsa_ctrl_str+30Ej
		mov	ecx, offset ??_C@_0M@CNLGKALE@rsa_mgf1_md?$AA@ ; "rsa_mgf1_md"
		mov	eax, edx

loc_CB3:				; CODE XREF: _pkey_rsa_ctrl_str+37Dj
		mov	bl, [eax]
		cmp	bl, [ecx]
		jnz	short loc_CD3
		test	bl, bl
		jz	short loc_CCF
		mov	bl, [eax+1]
		cmp	bl, [ecx+1]
		jnz	short loc_CD3
		add	eax, 2
		add	ecx, 2
		test	bl, bl
		jnz	short loc_CB3

loc_CCF:				; CODE XREF: _pkey_rsa_ctrl_str+36Bj
		xor	eax, eax
		jmp	short loc_CD8
; ---------------------------------------------------------------------------

loc_CD3:				; CODE XREF: _pkey_rsa_ctrl_str+367j
					; _pkey_rsa_ctrl_str+373j
		sbb	eax, eax
		or	eax, 1

loc_CD8:				; CODE XREF: _pkey_rsa_ctrl_str+381j
		test	eax, eax
		jnz	short loc_D0E
		push	esi
		call	_EVP_get_digestbyname
		add	esp, 4
		test	eax, eax
		jnz	short loc_CF0
		push	2B6h
		jmp	short loc_D50
; ---------------------------------------------------------------------------

loc_CF0:				; CODE XREF: _pkey_rsa_ctrl_str+397j
		push	eax
		push	0
		push	1005h
		push	3F8h
		push	6
		push	[esp+1Ch+arg_0]
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_D0E:				; CODE XREF: _pkey_rsa_ctrl_str+38Aj
		mov	ecx, offset ??_C@_0M@OPEEJBKE@rsa_oaep_md?$AA@ ; "rsa_oaep_md"
		mov	eax, edx

loc_D15:				; CODE XREF: _pkey_rsa_ctrl_str+3DFj
		mov	bl, [eax]
		cmp	bl, [ecx]
		jnz	short loc_D35
		test	bl, bl
		jz	short loc_D31
		mov	bl, [eax+1]
		cmp	bl, [ecx+1]
		jnz	short loc_D35
		add	eax, 2
		add	ecx, 2
		test	bl, bl
		jnz	short loc_D15

loc_D31:				; CODE XREF: _pkey_rsa_ctrl_str+3CDj
		xor	eax, eax
		jmp	short loc_D3A
; ---------------------------------------------------------------------------

loc_D35:				; CODE XREF: _pkey_rsa_ctrl_str+3C9j
					; _pkey_rsa_ctrl_str+3D5j
		sbb	eax, eax
		or	eax, 1

loc_D3A:				; CODE XREF: _pkey_rsa_ctrl_str+3E3j
		test	eax, eax
		jnz	short loc_D8C
		push	esi
		call	_EVP_get_digestbyname
		add	esp, 4
		test	eax, eax
		jnz	short loc_D6E
		push	2BFh

loc_D50:				; CODE XREF: _pkey_rsa_ctrl_str+39Ej
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	0A0h ; '†'
		push	90h ; 'ê'
		push	4
		call	_ERR_put_error
		add	esp, 14h

loc_D69:				; CODE XREF: _pkey_rsa_ctrl_str+324j
					; _pkey_rsa_ctrl_str+480j
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_D6E:				; CODE XREF: _pkey_rsa_ctrl_str+3F9j
		push	eax
		push	0
		push	1009h
		push	300h
		push	6
		push	[esp+1Ch+arg_0]
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_D8C:				; CODE XREF: _pkey_rsa_ctrl_str+3ECj
		mov	eax, offset ??_C@_0P@NCFNIFLM@rsa_oaep_label?$AA@ ; "rsa_oaep_label"

loc_D91:				; CODE XREF: _pkey_rsa_ctrl_str+45Bj
		mov	cl, [edx]
		cmp	cl, [eax]
		jnz	short loc_DB1
		test	cl, cl
		jz	short loc_DAD
		mov	cl, [edx+1]
		cmp	cl, [eax+1]
		jnz	short loc_DB1
		add	edx, 2
		add	eax, 2
		test	cl, cl
		jnz	short loc_D91

loc_DAD:				; CODE XREF: _pkey_rsa_ctrl_str+449j
		xor	eax, eax
		jmp	short loc_DB6
; ---------------------------------------------------------------------------

loc_DB1:				; CODE XREF: _pkey_rsa_ctrl_str+445j
					; _pkey_rsa_ctrl_str+451j
		sbb	eax, eax
		or	eax, 1

loc_DB6:				; CODE XREF: _pkey_rsa_ctrl_str+45Fj
		test	eax, eax
		jnz	loc_B84
		lea	eax, [esp+8+Str]
		push	eax
		push	esi
		call	_string_to_hex
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_D69
		push	edi
		push	esi
		push	[esp+10h+Str]
		push	100Ah
		push	300h
		push	6
		push	[esp+20h+arg_0]
		call	_EVP_PKEY_CTX_ctrl
		mov	edi, eax
		add	esp, 18h
		test	edi, edi
		jg	short loc_DFF
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_DFF:				; CODE XREF: _pkey_rsa_ctrl_str+4A4j
		mov	eax, edi
		pop	edi
		pop	ebx
		pop	esi
		retn
_pkey_rsa_ctrl_str endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E08h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_rsa_keygen proc near		; DATA XREF: .rdata:00000ED4o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 0Ch
		call	__chkstk
		push	ebx
		push	edi
		mov	edi, [esp+14h+arg_0]
		mov	ebx, [edi+14h]
		cmp	dword ptr [ebx+4], 0
		jnz	short loc_E47
		call	_BN_new
		mov	[ebx+4], eax
		test	eax, eax
		jz	short loc_E3F
		push	10001h
		push	eax
		call	_BN_set_word
		add	esp, 8
		test	eax, eax
		jnz	short loc_E47

loc_E3F:				; CODE XREF: _pkey_rsa_keygen+23j
		pop	edi
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_E47:				; CODE XREF: _pkey_rsa_keygen+17j
					; _pkey_rsa_keygen+35j
		push	esi
		call	_RSA_new
		mov	esi, eax
		test	esi, esi
		jnz	short loc_E5A
		pop	esi
		pop	edi
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_E5A:				; CODE XREF: _pkey_rsa_keygen+49j
		cmp	dword ptr [edi+1Ch], 0
		push	ebp
		jz	short loc_E73
		lea	ebp, [esp+1Ch+var_C]
		mov	eax, ebp
		push	edi
		push	eax
		call	_evp_pkey_set_cb_translate
		add	esp, 8
		jmp	short loc_E75
; ---------------------------------------------------------------------------

loc_E73:				; CODE XREF: _pkey_rsa_keygen+57j
		xor	ebp, ebp

loc_E75:				; CODE XREF: _pkey_rsa_keygen+69j
		push	ebp
		push	dword ptr [ebx+4]
		push	dword ptr [ebx]
		push	esi
		call	_RSA_generate_key_ex
		add	esp, 10h
		mov	edi, eax
		pop	ebp
		push	esi
		test	edi, edi
		jle	short loc_EA3
		push	6
		push	[esp+20h+arg_4]
		call	_EVP_PKEY_assign
		add	esp, 0Ch
		mov	eax, edi
		pop	esi
		pop	edi
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_EA3:				; CODE XREF: _pkey_rsa_keygen+82j
		call	_RSA_free
		add	esp, 4
		mov	eax, edi
		pop	esi
		pop	edi
		pop	ebx
		add	esp, 0Ch
		retn
_pkey_rsa_keygen endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 0EB4h
		public _rsa_pkey_meth
_rsa_pkey_meth	dd 6, 2
		dd offset _pkey_rsa_init
		dd offset _pkey_rsa_copy
		dd offset _pkey_rsa_cleanup
		dd 3 dup(0)
		dd offset _pkey_rsa_keygen
		dd 0
		dd offset _pkey_rsa_sign
		dd 0
		dd offset _pkey_rsa_verify
		dd 0
		dd offset _pkey_rsa_verifyrecover
		dd 5 dup(0)
		dd offset _pkey_rsa_encrypt
		dd 0
		dd offset _pkey_rsa_decrypt
		dd 2 dup(0)
		dd offset _pkey_rsa_ctrl
		dd offset _pkey_rsa_ctrl_str
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F20h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_rsa_init	proc near		; CODE XREF: _pkey_rsa_copy+6p
					; DATA XREF: .rdata:00000EBCo

arg_0		= dword	ptr  4

		push	67h ; 'g'
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	2Ch ; ','
		call	_CRYPTO_malloc
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_F36
		retn
; ---------------------------------------------------------------------------

loc_F36:				; CODE XREF: _pkey_rsa_init+13j
		mov	ecx, [esp+arg_0]
		mov	dword ptr [eax], 400h
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax+10h], 1
		mov	dword ptr [eax+14h], 0
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+20h], 0
		mov	dword ptr [eax+1Ch], 0FFFFFFFEh
		mov	dword ptr [eax+24h], 0
		mov	dword ptr [eax+28h], 0
		mov	[ecx+14h], eax
		add	eax, 8
		mov	[ecx+20h], eax
		mov	eax, 1
		mov	dword ptr [ecx+24h], 2
		retn
_pkey_rsa_init	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F90h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_rsa_copy	proc near		; DATA XREF: .rdata:00000EC0o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_0]
		push	edi
		call	_pkey_rsa_init
		add	esp, 4
		test	eax, eax
		jnz	short loc_FA4
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_FA4:				; CODE XREF: _pkey_rsa_copy+10j
		mov	eax, [esp+4+arg_4]
		mov	edi, [edi+14h]
		push	esi
		mov	esi, [eax+14h]
		mov	eax, [esi]
		mov	[edi], eax
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_FCA
		push	eax
		call	_BN_dup
		add	esp, 4
		mov	[edi+4], eax
		test	eax, eax
		jz	short loc_1007

loc_FCA:				; CODE XREF: _pkey_rsa_copy+28j
		mov	eax, [esi+10h]
		mov	[edi+10h], eax
		mov	eax, [esi+14h]
		mov	[edi+14h], eax
		mov	eax, [esi+18h]
		mov	[edi+18h], eax
		cmp	dword ptr [esi+24h], 0
		jz	short loc_1012
		mov	eax, [edi+24h]
		test	eax, eax
		jz	short loc_FF2
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_FF2:				; CODE XREF: _pkey_rsa_copy+57j
		push	dword ptr [esi+28h]
		push	dword ptr [esi+24h]
		call	_BUF_memdup
		add	esp, 8
		mov	[edi+24h], eax
		test	eax, eax
		jnz	short loc_100C

loc_1007:				; CODE XREF: _pkey_rsa_copy+38j
		pop	esi
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_100C:				; CODE XREF: _pkey_rsa_copy+75j
		mov	eax, [esi+28h]
		mov	[edi+28h], eax

loc_1012:				; CODE XREF: _pkey_rsa_copy+50j
		pop	esi
		mov	eax, 1
		pop	edi
		retn
_pkey_rsa_copy	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 101Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_rsa_cleanup proc near		; DATA XREF: .rdata:00000EC4o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [eax+14h]
		test	esi, esi
		jz	short loc_1061
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_1038
		push	eax
		call	_BN_free
		add	esp, 4

loc_1038:				; CODE XREF: _pkey_rsa_cleanup+11j
		mov	eax, [esi+20h]
		test	eax, eax
		jz	short loc_1048
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_1048:				; CODE XREF: _pkey_rsa_cleanup+21j
		mov	eax, [esi+24h]
		test	eax, eax
		jz	short loc_1058
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_1058:				; CODE XREF: _pkey_rsa_cleanup+31j
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_1061:				; CODE XREF: _pkey_rsa_cleanup+Aj
		pop	esi
		retn
_pkey_rsa_cleanup endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1064h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_check_padding_md proc near		; CODE XREF: _pkey_rsa_ctrl+31p
					; _pkey_rsa_ctrl+A4p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_10D0
		mov	ecx, [esp+arg_4]
		cmp	ecx, 3
		jnz	short loc_1096
		push	1DCh
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	8Dh ; 'ç'
		push	8Ch ; 'å'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1096:				; CODE XREF: _check_padding_md+Fj
		cmp	ecx, 5
		jnz	short loc_10D0
		push	eax
		call	_EVP_MD_type
		push	eax
		call	_RSA_X931_hash_id
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10D0
		push	1E2h
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	8Eh ; 'é'
		push	8Ch ; 'å'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10D0:				; CODE XREF: _check_padding_md+6j
					; _check_padding_md+35j ...
		mov	eax, 1
		retn
_check_padding_md endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_setup_tbuf	proc near		; CODE XREF: _pkey_rsa_sign+BDp
					; _pkey_rsa_sign+157p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+20h], 0
		jz	short loc_10EA
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10EA:				; CODE XREF: _setup_tbuf+9j
		mov	eax, [esp+4+arg_4]
		push	9Ch ; 'ú'
		push	offset ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pmeth.c"
		push	dword ptr [eax+8]
		call	_EVP_PKEY_size
		add	esp, 4
		push	eax
		call	_CRYPTO_malloc
		xor	ecx, ecx
		mov	[esi+20h], eax
		add	esp, 0Ch
		test	eax, eax
		setnz	cl
		mov	eax, ecx
		pop	esi
		retn
_setup_tbuf	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 111Ch
; COMDAT (pick any)
		public ??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@
; `string'
??_C@_0BJ@NEEFGCJO@?4?2crypto?2rsa?2rsa_pmeth?4c?$AA@ db '.\crypto\rsa\rsa_pmeth.c',0
					; DATA XREF: _pkey_rsa_sign+32o
					; _pkey_rsa_sign+B2o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1138h
; COMDAT (pick any)
		public ??_C@_0BB@BILFEOKG@rsa_padding_mode?$AA@
; `string'
??_C@_0BB@BILFEOKG@rsa_padding_mode?$AA@ db 'rsa_padding_mode',0
					; DATA XREF: _pkey_rsa_ctrl_str+2Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 114Ch
; COMDAT (pick any)
		public ??_C@_05BCIEJMJH@pkcs1?$AA@
; `string'
??_C@_05BCIEJMJH@pkcs1?$AA@ db 'pkcs1',0 ; DATA XREF: _pkey_rsa_ctrl_str+64o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1154h
; COMDAT (pick any)
		public ??_C@_06PDLHKEJK@sslv23?$AA@
; `string'
??_C@_06PDLHKEJK@sslv23?$AA@ db	'sslv23',0 ; DATA XREF: _pkey_rsa_ctrl_str:loc_9F3o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 115Ch
; COMDAT (pick any)
		public ??_C@_04CGFJFPFD@none?$AA@
; `string'
??_C@_04CGFJFPFD@none?$AA@ db 'none',0  ; DATA XREF: _pkey_rsa_ctrl_str:loc_A33o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1164h
; COMDAT (pick any)
		public ??_C@_04EIGNDHKO@oeap?$AA@
; `string'
??_C@_04EIGNDHKO@oeap?$AA@ db 'oeap',0  ; DATA XREF: _pkey_rsa_ctrl_str:loc_A73o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 116Ch
; COMDAT (pick any)
		public ??_C@_04MAAGAICF@oaep?$AA@
; `string'
??_C@_04MAAGAICF@oaep?$AA@ db 'oaep',0  ; DATA XREF: _pkey_rsa_ctrl_str+159o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1174h
; COMDAT (pick any)
		public ??_C@_04JNCMEILM@x931?$AA@
; `string'
??_C@_04JNCMEILM@x931?$AA@ db 'x931',0  ; DATA XREF: _pkey_rsa_ctrl_str:loc_AE0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 117Ch
; COMDAT (pick any)
		public ??_C@_03OHCBHMED@pss?$AA@
; `string'
??_C@_03OHCBHMED@pss?$AA@ dd 737370h	; DATA XREF: _pkey_rsa_ctrl_str:loc_B17o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1180h
; COMDAT (pick any)
		public ??_C@_0BA@CIHMEEHB@rsa_pss_saltlen?$AA@
; `string'
??_C@_0BA@CIHMEEHB@rsa_pss_saltlen?$AA@	db 'rsa_pss_saltlen',0
					; DATA XREF: _pkey_rsa_ctrl_str:loc_B8Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1190h
; COMDAT (pick any)
		public ??_C@_0BA@GFPKPLAF@rsa_keygen_bits?$AA@
; `string'
??_C@_0BA@GFPKPLAF@rsa_keygen_bits?$AA@	db 'rsa_keygen_bits',0
					; DATA XREF: _pkey_rsa_ctrl_str:loc_BDEo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11A0h
; COMDAT (pick any)
		public ??_C@_0BC@DMECNPFD@rsa_keygen_pubexp?$AA@
; `string'
??_C@_0BC@DMECNPFD@rsa_keygen_pubexp?$AA@ db 'rsa_keygen_pubexp',0
					; DATA XREF: _pkey_rsa_ctrl_str:loc_C30o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11B4h
; COMDAT (pick any)
		public ??_C@_0M@CNLGKALE@rsa_mgf1_md?$AA@
; `string'
??_C@_0M@CNLGKALE@rsa_mgf1_md?$AA@ db 'rsa_mgf1_md',0
					; DATA XREF: _pkey_rsa_ctrl_str:loc_CACo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11C0h
; COMDAT (pick any)
		public ??_C@_0M@OPEEJBKE@rsa_oaep_md?$AA@
; `string'
??_C@_0M@OPEEJBKE@rsa_oaep_md?$AA@ db 'rsa_oaep_md',0
					; DATA XREF: _pkey_rsa_ctrl_str:loc_D0Eo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11CCh
; COMDAT (pick any)
		public ??_C@_0P@NCFNIFLM@rsa_oaep_label?$AA@
; `string'
??_C@_0P@NCFNIFLM@rsa_oaep_label?$AA@ db 'rsa_oaep_label',0
					; DATA XREF: _pkey_rsa_ctrl_str:loc_D8Co
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; int __cdecl _atoi(const char *Str)
		extrn __imp__atoi:near	; CODE XREF: _pkey_rsa_ctrl_str+26Dp
					; _pkey_rsa_ctrl_str+2BFp
					; DATA XREF: ...
		extrn _CRYPTO_malloc:near ; CODE XREF: _pkey_rsa_verify+ECp
					; _pkey_rsa_encrypt+3Ep ...
		extrn _CRYPTO_free:near	; CODE XREF: _pkey_rsa_ctrl+256p
					; _pkey_rsa_ctrl_str+4A7p ...
		extrn _BUF_memdup:near	; CODE XREF: _pkey_rsa_copy+68p
		extrn _ERR_put_error:near ; CODE XREF: _pkey_rsa_sign+43p
					; _pkey_rsa_verifyrecover+86p ...
		extrn _BN_new:near	; CODE XREF: _pkey_rsa_keygen+19p
		extrn _BN_set_word:near	; CODE XREF: _pkey_rsa_keygen+2Bp
		extrn _BN_free:near	; CODE XREF: _pkey_rsa_ctrl+194p
					; _pkey_rsa_ctrl_str+34Fp ...
		extrn _BN_dup:near	; CODE XREF: _pkey_rsa_copy+2Bp
		extrn _BN_asc2bn:near	; CODE XREF: _pkey_rsa_ctrl_str+31Ap
		extrn _EVP_MD_type:near	; CODE XREF: _pkey_rsa_sign+56p
					; _pkey_rsa_sign+EAp ...
		extrn _EVP_MD_size:near	; CODE XREF: _pkey_rsa_sign+1Dp
					; _pkey_rsa_verifyrecover+96p
		extrn _EVP_sha1:near	; CODE XREF: _pkey_rsa_ctrl+D5p
		extrn _EVP_get_digestbyname:near ; CODE	XREF: _pkey_rsa_ctrl_str+38Dp
					; _pkey_rsa_ctrl_str+3EFp
		extrn _EVP_PKEY_size:near ; CODE XREF: _pkey_rsa_sign+9Ep
					; _pkey_rsa_verify+E3p	...
		extrn _EVP_PKEY_assign:near ; CODE XREF: _pkey_rsa_keygen+8Ap
		extrn _EVP_PKEY_CTX_ctrl:near ;	CODE XREF: _pkey_rsa_ctrl_str+20Ep
					; _pkey_rsa_ctrl_str+283p ...
		extrn _RSA_new:near	; CODE XREF: _pkey_rsa_keygen+40p
		extrn _RSA_size:near	; CODE XREF: _pkey_rsa_sign+193p
					; _pkey_rsa_encrypt+18p
		extrn _RSA_generate_key_ex:near	; CODE XREF: _pkey_rsa_keygen+74p
		extrn _RSA_public_encrypt:near ; CODE XREF: _pkey_rsa_encrypt:loc_549p
		extrn _RSA_private_encrypt:near	; CODE XREF: _pkey_rsa_sign+109p
					; _pkey_rsa_sign:loc_1AEp
		extrn _RSA_public_decrypt:near ; CODE XREF: _pkey_rsa_verifyrecover+47p
					; _pkey_rsa_verifyrecover+135p	...
		extrn _RSA_private_decrypt:near	; CODE XREF: _pkey_rsa_decrypt+59p
					; _pkey_rsa_decrypt+B8p
		extrn _RSA_free:near	; CODE XREF: _pkey_rsa_keygen:loc_EA3p
		extrn _RSA_sign:near	; CODE XREF: _pkey_rsa_sign+136p
		extrn _RSA_verify:near	; CODE XREF: _pkey_rsa_verify+3Dp
		extrn _RSA_sign_ASN1_OCTET_STRING:near ; CODE XREF: _pkey_rsa_sign+7Ap
		extrn _RSA_padding_add_PKCS1_OAEP_mgf1:near
					; CODE XREF: _pkey_rsa_encrypt+6Cp
		extrn _RSA_padding_check_PKCS1_OAEP_mgf1:near
					; CODE XREF: _pkey_rsa_decrypt+9Bp
		extrn _RSA_X931_hash_id:near ; CODE XREF: _pkey_rsa_sign+F0p
					; _pkey_rsa_verifyrecover+60p ...
		extrn _RSA_verify_PKCS1_PSS_mgf1:near ;	CODE XREF: _pkey_rsa_verify+BEp
		extrn _RSA_padding_add_PKCS1_PSS_mgf1:near ; CODE XREF:	_pkey_rsa_sign+178p
		extrn _string_to_hex:near ; CODE XREF: _pkey_rsa_ctrl_str+474p
		extrn _evp_pkey_set_cb_translate:near ;	CODE XREF: _pkey_rsa_keygen+61p
		extrn _int_rsa_verify:near ; CODE XREF:	_pkey_rsa_verifyrecover+10Ap
		extrn __chkstk:near	; CODE XREF: _pkey_rsa_keygen+5p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _pkey_rsa_sign+E2p
					; _pkey_rsa_verifyrecover+D2p


		end
