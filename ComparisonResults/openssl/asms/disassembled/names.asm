;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	C17C71B548BBF9FC417BCB95A0327259
; Input	CRC32 :	7ECE5641

; File Name   :	C:\compspace\Diff\openssl\obj\names.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_CIPHER_do_all
_EVP_CIPHER_do_all proc	near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 8
		call	__chkstk
		mov	eax, [esp+8+arg_0]
		mov	[esp+8+var_4], eax
		mov	eax, [esp+8+arg_4]
		mov	[esp+8+var_8], eax
		lea	eax, [esp+8+var_8]
		push	eax
		push	offset _do_all_cipher_fn
		push	2
		call	_OBJ_NAME_do_all
		add	esp, 14h
		retn
_EVP_CIPHER_do_all endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 30h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_CIPHER_do_all_sorted
_EVP_CIPHER_do_all_sorted proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 8
		call	__chkstk
		mov	eax, [esp+8+arg_0]
		mov	[esp+8+var_4], eax
		mov	eax, [esp+8+arg_4]
		mov	[esp+8+var_8], eax
		lea	eax, [esp+8+var_8]
		push	eax
		push	offset _do_all_cipher_fn
		push	2
		call	_OBJ_NAME_do_all_sorted
		add	esp, 14h
		retn
_EVP_CIPHER_do_all_sorted endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 60h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_MD_do_all
_EVP_MD_do_all	proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 8
		call	__chkstk
		mov	eax, [esp+8+arg_0]
		mov	[esp+8+var_4], eax
		mov	eax, [esp+8+arg_4]
		mov	[esp+8+var_8], eax
		lea	eax, [esp+8+var_8]
		push	eax
		push	offset _do_all_md_fn
		push	1
		call	_OBJ_NAME_do_all
		add	esp, 14h
		retn
_EVP_MD_do_all	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 90h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_MD_do_all_sorted
_EVP_MD_do_all_sorted proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 8
		call	__chkstk
		mov	eax, [esp+8+arg_0]
		mov	[esp+8+var_4], eax
		mov	eax, [esp+8+arg_4]
		mov	[esp+8+var_8], eax
		lea	eax, [esp+8+var_8]
		push	eax
		push	offset _do_all_md_fn
		push	1
		call	_OBJ_NAME_do_all_sorted
		add	esp, 14h
		retn
_EVP_MD_do_all_sorted endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_add_cipher
_EVP_add_cipher	proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_CD

loc_C9:					; CODE XREF: _EVP_add_cipher+2Aj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_CD:					; CODE XREF: _EVP_add_cipher+7j
		call	_OPENSSL_init
		push	esi
		push	2
		push	dword ptr [esi]
		call	_OBJ_nid2sn
		add	esp, 4
		push	eax
		call	_OBJ_NAME_add
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_C9
		push	dword ptr [esi]
		call	_check_defer
		add	esp, 4
		push	esi
		push	2
		push	dword ptr [esi]
		call	_OBJ_nid2ln
		add	esp, 4
		push	eax
		call	_OBJ_NAME_add
		add	esp, 0Ch
		pop	esi
		retn
_EVP_add_cipher	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 110h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_add_digest
_EVP_add_digest	proc near

arg_0		= dword	ptr  4

		push	esi
		push	edi
		call	_OPENSSL_init
		mov	esi, [esp+8+arg_0]
		push	dword ptr [esi]
		call	_OBJ_nid2sn
		push	esi
		mov	edi, eax
		push	1
		push	edi
		call	_OBJ_NAME_add
		add	esp, 10h
		test	eax, eax
		jnz	short loc_139

loc_134:				; CODE XREF: _EVP_add_digest+4Dj
					; _EVP_add_digest+74j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_139:				; CODE XREF: _EVP_add_digest+22j
		push	dword ptr [esi]
		call	_check_defer
		add	esp, 4
		push	esi
		push	1
		push	dword ptr [esi]
		call	_OBJ_nid2ln
		add	esp, 4
		push	eax
		call	_OBJ_NAME_add
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jz	short loc_134
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_1AD
		cmp	[esi], eax
		jz	short loc_1AD
		push	edi
		push	8001h
		push	eax
		call	_OBJ_nid2sn
		add	esp, 4
		push	eax
		call	_OBJ_NAME_add
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_134
		push	dword ptr [esi+4]
		call	_check_defer
		add	esp, 4
		push	edi
		push	8001h
		push	dword ptr [esi+4]
		call	_OBJ_nid2ln
		add	esp, 4
		push	eax
		call	_OBJ_NAME_add
		add	esp, 0Ch
		mov	ecx, eax

loc_1AD:				; CODE XREF: _EVP_add_digest+54j
					; _EVP_add_digest+58j
		pop	edi
		mov	eax, ecx
		pop	esi
		retn
_EVP_add_digest	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_cleanup
_EVP_cleanup	proc near
		push	2
		call	_OBJ_NAME_cleanup
		push	1
		call	_OBJ_NAME_cleanup
		push	0FFFFFFFFh
		call	_OBJ_NAME_cleanup
		add	esp, 0Ch
		call	_EVP_PBE_cleanup
		cmp	dword ptr ds:_obj_cleanup_defer, 2
		jnz	short loc_1E9
		mov	dword ptr ds:_obj_cleanup_defer, 0
		call	_OBJ_cleanup

loc_1E9:				; CODE XREF: _EVP_cleanup+24j
		jmp	_OBJ_sigid_free
_EVP_cleanup	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_get_cipherbyname
_EVP_get_cipherbyname proc near

arg_0		= dword	ptr  4

		push	2
		push	[esp+4+arg_0]
		call	_OBJ_NAME_get
		add	esp, 8
		retn
_EVP_get_cipherbyname endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 200h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_get_digestbyname
_EVP_get_digestbyname proc near

arg_0		= dword	ptr  4

		push	1
		push	[esp+4+arg_0]
		call	_OBJ_NAME_get
		add	esp, 8
		retn
_EVP_get_digestbyname endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 210h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_do_all_cipher_fn proc near		; DATA XREF: _EVP_CIPHER_do_all+1Do
					; _EVP_CIPHER_do_all_sorted+1Do

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		push	dword ptr [eax]
		cmp	dword ptr [ecx+4], 0
		mov	eax, [eax+4]
		jz	short loc_231
		push	dword ptr [ecx+0Ch]
		push	dword ptr [ecx+8]
		push	0
		call	eax
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_231:				; CODE XREF: _do_all_cipher_fn+11j
		push	0
		push	dword ptr [ecx+8]
		push	dword ptr [ecx+0Ch]
		call	eax
		add	esp, 10h
		retn
_do_all_cipher_fn endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 240h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_do_all_md_fn	proc near		; DATA XREF: _EVP_MD_do_all+1Do
					; _EVP_MD_do_all_sorted+1Do

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		push	dword ptr [eax]
		cmp	dword ptr [ecx+4], 0
		mov	eax, [eax+4]
		jz	short loc_261
		push	dword ptr [ecx+0Ch]
		push	dword ptr [ecx+8]
		push	0
		call	eax
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_261:				; CODE XREF: _do_all_md_fn+11j
		push	0
		push	dword ptr [ecx+8]
		push	dword ptr [ecx+0Ch]
		call	eax
		add	esp, 10h
		retn
_do_all_md_fn	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _OPENSSL_init:near ; CODE	XREF: _EVP_add_cipher:loc_CDp
					; _EVP_add_digest+2p
		extrn _OBJ_NAME_get:near ; CODE	XREF: _EVP_get_cipherbyname+6p
					; _EVP_get_digestbyname+6p
		extrn _OBJ_NAME_add:near ; CODE	XREF: _EVP_add_cipher+20p
					; _EVP_add_cipher+44p ...
		extrn _OBJ_NAME_cleanup:near ; CODE XREF: _EVP_cleanup+2p
					; _EVP_cleanup+9p ...
		extrn _OBJ_NAME_do_all:near ; CODE XREF: _EVP_CIPHER_do_all+24p
					; _EVP_MD_do_all+24p
		extrn _OBJ_NAME_do_all_sorted:near
					; CODE XREF: _EVP_CIPHER_do_all_sorted+24p
					; _EVP_MD_do_all_sorted+24p
		extrn _OBJ_nid2ln:near	; CODE XREF: _EVP_add_cipher+3Bp
					; _EVP_add_digest+38p ...
		extrn _OBJ_nid2sn:near	; CODE XREF: _EVP_add_cipher+17p
					; _EVP_add_digest+Dp ...
		extrn _OBJ_cleanup:near	; CODE XREF: _EVP_cleanup+30p
		extrn _OBJ_sigid_free:near ; CODE XREF:	_EVP_cleanup:loc_1E9j
		extrn _check_defer:near	; CODE XREF: _EVP_add_cipher+2Ep
					; _EVP_add_digest+2Bp ...
		extrn _EVP_PBE_cleanup:near ; CODE XREF: _EVP_cleanup+18p
		extrn __chkstk:near	; CODE XREF: _EVP_CIPHER_do_all+5p
					; _EVP_CIPHER_do_all_sorted+5p	...
		extrn _obj_cleanup_defer:near ;	DATA XREF: _EVP_cleanup+1Dr
					; _EVP_cleanup+26w


		end
