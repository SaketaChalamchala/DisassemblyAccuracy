;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	E960CFA9C2766FBE3513E4476326A5EA
; Input	CRC32 :	94B3A03E

; File Name   :	C:\compspace\Diff\openssl\obj\md5test.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
_test		dd offset ??_C@_00CNPNBAHC@?$AA@ ; DATA	XREF: _main+1Fr
					; _main:loc_2C8r ...
					; `string'
		dd offset ??_C@_01MCMALHOG@a?$AA@ ; `string'
		dd offset ??_C@_03FIKCJHKP@abc?$AA@ ; `string'
		dd offset ??_C@_0P@ONGHGJEC@message?5digest?$AA@ ; "message digest"
		dd offset ??_C@_0BL@JIGBPIBD@abcdefghijklmnopqrstuvwxyz?$AA@ ; "abcdefghijklmnopqrstuvwxyz"
		dd offset ??_C@_0DP@EFDPGBGM@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef@ ; "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm"...
		dd offset ??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@ ; "123456789012345678901234567890123456789"...
		align 10h
_ret		dd offset ??_C@_0CB@LPGMCALB@d41d8cd98f00b204e9800998ecf8427e@
					; DATA XREF: _main+92r	_main+D9r
					; "d41d8cd98f00b204e9800998ecf8427e"
		dd offset ??_C@_0CB@DEHHFLOM@0cc175b9c0f1b6a831c399e269772661@ ; "0cc175b9c0f1b6a831c399e269772661"
		dd offset ??_C@_0CB@EILGCHIB@900150983cd24fb0d6963f7d28e17f72@ ; "900150983cd24fb0d6963f7d28e17f72"
		dd offset ??_C@_0CB@OOMOBBDF@f96b697d7cb7938d525a2f31aaf161d0@ ; "f96b697d7cb7938d525a2f31aaf161d0"
		dd offset ??_C@_0CB@MGHCHBPL@c3fcd3d76192e4007dfb496cca67e13b@ ; "c3fcd3d76192e4007dfb496cca67e13b"
		dd offset ??_C@_0CB@NBNKJKEB@d174ab98d277d9f5a5611c2c9f419d9f@ ; "d174ab98d277d9f5a5611c2c9f419d9f"
		dd offset ??_C@_0CB@FMCHILGE@57edf4a22be3c955ac49da2e2107b67a@ ; "57edf4a22be3c955ac49da2e2107b67a"
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 3Ch
; COMDAT (pick any)
		public ??_C@_00CNPNBAHC@?$AA@
; `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: .data:_testo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 40h
; COMDAT (pick any)
		public ??_C@_01MCMALHOG@a?$AA@
; `string'
??_C@_01MCMALHOG@a?$AA@	db 61h,	0	; DATA XREF: .data:00000004o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 44h
; COMDAT (pick any)
		public ??_C@_03FIKCJHKP@abc?$AA@
; `string'
??_C@_03FIKCJHKP@abc?$AA@ dd 636261h	; DATA XREF: .data:00000008o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 48h
; COMDAT (pick any)
		public ??_C@_0P@ONGHGJEC@message?5digest?$AA@
; `string'
??_C@_0P@ONGHGJEC@message?5digest?$AA@ db 'message digest',0 ; DATA XREF: .data:0000000Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 58h
; COMDAT (pick any)
		public ??_C@_0BL@JIGBPIBD@abcdefghijklmnopqrstuvwxyz?$AA@
; `string'
??_C@_0BL@JIGBPIBD@abcdefghijklmnopqrstuvwxyz?$AA@ db 'abcdefghijklmnopqrstuvwxyz',0
					; DATA XREF: .data:00000010o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 74h
; COMDAT (pick any)
		public ??_C@_0DP@EFDPGBGM@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef@
; `string'
??_C@_0DP@EFDPGBGM@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef@ db	'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',0
					; DATA XREF: .data:00000014o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 0B4h
; COMDAT (pick any)
		public ??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@
; `string'
??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@ db	'12345678901234567890123456789012345678901234567890123456789012345'
					; DATA XREF: .data:00000018o
		db '678901234567890',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 108h
; COMDAT (pick any)
		public ??_C@_0CB@LPGMCALB@d41d8cd98f00b204e9800998ecf8427e@
; `string'
??_C@_0CB@LPGMCALB@d41d8cd98f00b204e9800998ecf8427e@ db	'd41d8cd98f00b204e9800998ecf8427e',0
					; DATA XREF: .data:_reto
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 12Ch
; COMDAT (pick any)
		public ??_C@_0CB@DEHHFLOM@0cc175b9c0f1b6a831c399e269772661@
; `string'
??_C@_0CB@DEHHFLOM@0cc175b9c0f1b6a831c399e269772661@ db	'0cc175b9c0f1b6a831c399e269772661',0
					; DATA XREF: .data:00000024o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 150h
; COMDAT (pick any)
		public ??_C@_0CB@EILGCHIB@900150983cd24fb0d6963f7d28e17f72@
; `string'
??_C@_0CB@EILGCHIB@900150983cd24fb0d6963f7d28e17f72@ db	'900150983cd24fb0d6963f7d28e17f72',0
					; DATA XREF: .data:00000028o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 174h
; COMDAT (pick any)
		public ??_C@_0CB@OOMOBBDF@f96b697d7cb7938d525a2f31aaf161d0@
; `string'
??_C@_0CB@OOMOBBDF@f96b697d7cb7938d525a2f31aaf161d0@ db	'f96b697d7cb7938d525a2f31aaf161d0',0
					; DATA XREF: .data:0000002Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 198h
; COMDAT (pick any)
		public ??_C@_0CB@MGHCHBPL@c3fcd3d76192e4007dfb496cca67e13b@
; `string'
??_C@_0CB@MGHCHBPL@c3fcd3d76192e4007dfb496cca67e13b@ db	'c3fcd3d76192e4007dfb496cca67e13b',0
					; DATA XREF: .data:00000030o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1BCh
; COMDAT (pick any)
		public ??_C@_0CB@NBNKJKEB@d174ab98d277d9f5a5611c2c9f419d9f@
; `string'
??_C@_0CB@NBNKJKEB@d174ab98d277d9f5a5611c2c9f419d9f@ db	'd174ab98d277d9f5a5611c2c9f419d9f',0
					; DATA XREF: .data:00000034o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1E0h
; COMDAT (pick any)
		public ??_C@_0CB@FMCHILGE@57edf4a22be3c955ac49da2e2107b67a@
; `string'
??_C@_0CB@FMCHILGE@57edf4a22be3c955ac49da2e2107b67a@ db	'57edf4a22be3c955ac49da2e2107b67a',0
					; DATA XREF: .data:00000038o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 204h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; __vsnprintf_l+14p ...
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 20Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 230h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vsnprintf_l(char	*DstBuf, size_t	MaxCount, const	char *Format, _locale_t	Locale,	va_list	ArgList)
		public __vsnprintf_l
__vsnprintf_l	proc near

DstBuf		= dword	ptr  4
MaxCount	= dword	ptr  8
Format		= dword	ptr  0Ch
Locale		= dword	ptr  10h
ArgList		= dword	ptr  14h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+MaxCount]
		push	[esp+10h+DstBuf]
		call	___local_stdio_printf_options
		mov	ecx, [eax]
		push	dword ptr [eax+4]
		or	ecx, 1
		push	ecx
		call	dword ptr ds:__imp____stdio_common_vsprintf
		or	ecx, 0FFFFFFFFh
		add	esp, 1Ch
		test	eax, eax
		cmovs	eax, ecx
		retn
__vsnprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 264h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vsprintf_l(char *DstBuf,	const char *Format, _locale_t, va_list ArgList)
		public __vsprintf_l
__vsprintf_l	proc near

DstBuf		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+arg_8]
		push	[esp+8+Format]
		push	0FFFFFFFFh
		push	[esp+10h+DstBuf]
		call	___local_stdio_printf_options
		mov	ecx, [eax]
		push	dword ptr [eax+4]
		or	ecx, 1
		push	ecx
		call	dword ptr ds:__imp____stdio_common_vsprintf
		or	ecx, 0FFFFFFFFh
		add	esp, 1Ch
		test	eax, eax
		cmovs	eax, ecx
		retn
__vsprintf_l	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 298h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public _main
_main		proc near

var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
argc		= dword	ptr  4
argv		= dword	ptr  8
envp		= dword	ptr  0Ch

		mov	eax, 18h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+18h+var_4], eax
		xor	eax, eax
		push	ebp
		mov	[esp+1Ch+var_18], eax
		lea	ebp, [eax+1]
		cmp	_test, eax
		jz	loc_3BA
		push	ebx
		push	esi
		push	edi
		xor	ebx, ebx

loc_2C8:				; CODE XREF: _main+119j
		mov	esi, _test[ebx]
		lea	ecx, [esi+1]
		nop	dword ptr [eax+00000000h]

loc_2D8:				; CODE XREF: _main+45j
		mov	al, [esi]
		inc	esi
		test	al, al
		jnz	short loc_2D8
		push	0
		sub	esi, ecx
		call	_EVP_md5
		push	eax
		push	0
		lea	eax, [esp+34h+var_14]
		push	eax
		push	esi
		push	_test[ebx]
		call	_EVP_Digest
		add	esp, 18h
		mov	esi, offset ?buf@?1??pt@@9@9 ; `pt'::`2'::buf
		xor	edi, edi
		xchg	ax, ax

loc_308:				; CODE XREF: _main+90j
		movzx	eax, [esp+edi+28h+var_14]
		push	eax
		push	offset ??_C@_04NOJCDH@?$CF02x?$AA@ ; "%02x"
		push	esi		; Dest
		call	_sprintf
		add	esi, 2
		lea	edi, [edi+1]
		add	esp, 0Ch
		cmp	esi, offset dword_4C8
		jl	short loc_308
		mov	ecx, _ret[ebx]
		mov	eax, offset ?buf@?1??pt@@9@9 ; `pt'::`2'::buf
		nop	dword ptr [eax]

loc_338:				; CODE XREF: _main+BAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_358
		test	dl, dl
		jz	short loc_354
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_358
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_338

loc_354:				; CODE XREF: _main+A8j
		xor	eax, eax
		jmp	short loc_35D
; ---------------------------------------------------------------------------

loc_358:				; CODE XREF: _main+A4j	_main+B0j
		sbb	eax, eax
		or	eax, 1

loc_35D:				; CODE XREF: _main+BEj
		test	eax, eax
		jz	short loc_394
		push	_test[ebx]
		push	offset ??_C@_0BP@CCHLBOID@error?5calculating?5MD5?5on?5?8?$CFs?8?6?$AA@	; "error calculating MD5 on '%s'\n"
		call	_printf
		push	_ret[ebx]
		push	offset ?buf@?1??pt@@9@9	; `pt'::`2'::buf
		push	offset ??_C@_0BG@IMOFIMJK@got?5?$CFs?5instead?5of?5?$CFs?6?$AA@	; "got %s instead of %s\n"
		call	_printf
		mov	eax, [esp+3Ch+var_18]
		add	esp, 14h
		inc	eax
		mov	[esp+28h+var_18], eax
		jmp	short loc_3A6
; ---------------------------------------------------------------------------

loc_394:				; CODE XREF: _main+C7j
		push	ebp
		push	offset ??_C@_0M@NJKLCIBI@test?5?$CFd?5ok?6?$AA@	; "test	%d ok\n"
		call	_printf
		mov	eax, [esp+30h+var_18]
		add	esp, 8

loc_3A6:				; CODE XREF: _main+FAj
		add	ebx, 4
		inc	ebp
		cmp	_test[ebx], 0
		jnz	loc_2C8
		pop	edi
		pop	esi
		pop	ebx

loc_3BA:				; CODE XREF: _main+25j
		push	eax		; Code
		call	dword ptr ds:__imp__exit
_main		endp

; ---------------------------------------------------------------------------
		db 5Dh
$LN26:					; $LN25
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3C4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int printf(const char	*Format, ...)
		public _printf
_printf		proc near		; CODE XREF: _main+D4p	_main+E9p ...

Format		= dword	ptr  4
arg_4		= byte ptr  8

		push	esi
		mov	esi, [esp+4+Format]
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		lea	ecx, [esp+4+arg_4]
		push	ecx
		push	0
		push	esi
		push	eax
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		pop	esi
		retn
_printf		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pt		proc near

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		push	edi
		xor	edi, edi
		mov	esi, offset ?buf@?1??pt@@9@9 ; `pt'::`2'::buf
		xchg	ax, ax

loc_404:				; CODE XREF: _pt+2Fj
		movzx	eax, byte ptr [edi+ebx]
		push	eax
		push	offset ??_C@_04NOJCDH@?$CF02x?$AA@ ; "%02x"
		push	esi		; Dest
		call	_sprintf
		add	esi, 2
		lea	edi, [edi+1]
		add	esp, 0Ch
		cmp	esi, offset dword_4C8
		jl	short loc_404
		pop	edi
		pop	esi
		mov	eax, offset ?buf@?1??pt@@9@9 ; `pt'::`2'::buf
		pop	ebx
		retn
_pt		endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 430h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int sprintf(char *Dest, const	char *Format, ...)
		public _sprintf
_sprintf	proc near		; CODE XREF: _main+7Cp	_pt+1Bp

Dest		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= byte ptr  0Ch

		lea	eax, [esp+arg_8]
		push	eax
		push	0
		push	[esp+8+Format]
		push	0FFFFFFFFh
		push	[esp+10h+Dest]
		call	___local_stdio_printf_options
		mov	ecx, [eax]
		push	dword ptr [eax+4]
		or	ecx, 1
		push	ecx
		call	dword ptr ds:__imp____stdio_common_vsprintf
		or	ecx, 0FFFFFFFFh
		add	esp, 1Ch
		test	eax, eax
		cmovs	eax, ecx
		retn
_sprintf	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 464h
; COMDAT (pick any)
		public ??_C@_0BP@CCHLBOID@error?5calculating?5MD5?5on?5?8?$CFs?8?6?$AA@
; char `string'[]
??_C@_0BP@CCHLBOID@error?5calculating?5MD5?5on?5?8?$CFs?8?6?$AA@ db 'error calculating MD5 on ',27h,'%s',27h,0Ah,0
					; DATA XREF: _main+CFo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 484h
; COMDAT (pick any)
		public ??_C@_0BG@IMOFIMJK@got?5?$CFs?5instead?5of?5?$CFs?6?$AA@
; char `string'[]
??_C@_0BG@IMOFIMJK@got?5?$CFs?5instead?5of?5?$CFs?6?$AA@ db 'got %s instead of %s',0Ah,0
					; DATA XREF: _main+E4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 49Ch
; COMDAT (pick any)
		public ??_C@_0M@NJKLCIBI@test?5?$CFd?5ok?6?$AA@
; char `string'[]
??_C@_0M@NJKLCIBI@test?5?$CFd?5ok?6?$AA@ db 'test %d ok',0Ah,0 ; DATA XREF: _main+FDo
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 4A8h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; char `pt'::`2'::buf[32]
?buf@?1??pt@@9@9 db 20h	dup(?)		; DATA XREF: _main+67o	_main+98o ...
dword_4C8	dd 0Ch dup(?)		; DATA XREF: _main+8Ao	_pt+29o
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4F8h
; COMDAT (pick any)
		public ??_C@_04NOJCDH@?$CF02x?$AA@
; char `string'[]
??_C@_04NOJCDH@?$CF02x?$AA@ db '%02x',0 ; DATA XREF: _main+76o _pt+15o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _printf+7p
					; DATA XREF: _printf+7r
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _printf+23p
					; DATA XREF: ...
		extrn __imp____stdio_common_vsprintf:near ; CODE XREF: __vsnprintf_l+22p
					; __vsprintf_l+20p ...
; void __cdecl __noreturn _exit(int Code)
		extrn __imp__exit:near	; CODE XREF: _main+123p
					; DATA XREF: _main+123r
		extrn _EVP_Digest:near	; CODE XREF: _main+5Fp
		extrn _EVP_md5:near	; CODE XREF: _main+4Bp
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
		extrn __chkstk:near	; CODE XREF: _main+5p
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso
		extrn ___security_cookie:near ;	DATA XREF: _main+Ar


		end
