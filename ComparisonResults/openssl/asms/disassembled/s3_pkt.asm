;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	391C4E080EE5EFCD73847EFA05B726E9
; Input	CRC32 :	3E94A97F

; File Name   :	C:\compspace\Diff\openssl\obj\s3_pkt.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl do_ssl3_write(int, int, void *Src, size_t	Size, int)
_do_ssl3_write	proc near		; CODE XREF: _do_ssl3_write+138p
					; _ssl3_dispatch_alert+23p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
Size		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 0Ch

loc_5:					; DATA XREF: _ssl3_get_record+B4o
		call	__chkstk
		push	ebp
		push	esi
		mov	esi, [esp+14h+arg_0]
		push	edi
		xor	edi, edi
		mov	[esp+18h+var_C], edi
		mov	ebp, [esi+58h]
		mov	[esp+18h+var_4], ebp
		cmp	[ebp+108h], edi
		jz	short loc_42
		push	[esp+18h+Size]
		push	[esp+1Ch+Src]
		push	[esp+20h+arg_4]
		push	esi
		call	_ssl3_write_pending
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_42:					; CODE XREF: _do_ssl3_write+24j
		cmp	[ebp+18Ch], edi
		jz	short loc_5E
		mov	eax, [esi+8]
		push	esi
		mov	eax, [eax+3Ch]
		call	eax
		add	esp, 4
		test	eax, eax
		jle	loc_39F

loc_5E:					; CODE XREF: _do_ssl3_write+48j
		cmp	[ebp+0FCh], edi
		jnz	short loc_7D
		push	esi
		call	_ssl3_setup_write_buffer
		add	esp, 4
		test	eax, eax
		jnz	short loc_7D
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_7D:					; CODE XREF: _do_ssl3_write+64j
					; _do_ssl3_write+71j
		mov	ecx, [esp+18h+arg_10]
		cmp	[esp+18h+Size],	edi
		jnz	short loc_94
		test	ecx, ecx
		jnz	short loc_94
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_94:					; CODE XREF: _do_ssl3_write+85j
					; _do_ssl3_write+89j
		push	ebx
		mov	ebx, [esi+58h]
		add	ebx, 130h
		cmp	[esi+0C0h], edi
		jz	short loc_ED
		cmp	[esi+8Ch], edi
		jz	short loc_ED
		push	dword ptr [esi+90h]
		call	_EVP_MD_CTX_md
		add	esp, 4
		test	eax, eax
		jz	short loc_E9
		push	dword ptr [esi+90h]
		call	_EVP_MD_CTX_md
		push	eax
		call	_EVP_MD_size
		mov	edx, eax
		add	esp, 8
		mov	[esp+1Ch+arg_0], edx
		test	edx, edx
		jns	short loc_104
		pop	ebx
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_E9:					; CODE XREF: _do_ssl3_write+BEj
		mov	ecx, [esp+1Ch+arg_10]

loc_ED:					; CODE XREF: _do_ssl3_write+A4j
					; _do_ssl3_write+ACj
		xor	eax, eax
		mov	[esp+1Ch+arg_0], edi
		cmp	[esi+8Ch], eax
		setz	al
		test	eax, eax
		jnz	loc_199

loc_104:				; CODE XREF: _do_ssl3_write+DCj
		cmp	[esp+1Ch+arg_10], edi
		jnz	loc_19D
		mov	eax, [esi+58h]
		cmp	[eax+0E4h], edi
		jnz	loc_1A4
		cmp	[eax+0E0h], edi
		jz	short loc_176
		cmp	[esp+1Ch+arg_4], 17h
		jnz	short loc_176
		mov	edi, [esp+1Ch+Src]
		push	1		; int
		push	0		; Size
		push	edi		; Src
		push	17h		; int
		push	esi		; int
		call	_do_ssl3_write
		mov	edi, eax
		add	esp, 14h
		mov	[esp+1Ch+var_C], edi
		test	edi, edi
		jle	$err$48
		cmp	edi, 55h ; 'U'
		jle	short loc_176
		push	3A6h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	44h ; 'D'
		push	68h ; 'h'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_176:				; CODE XREF: _do_ssl3_write+123j
					; _do_ssl3_write+12Aj ...
		mov	eax, [esi+58h]
		mov	dword ptr [eax+0E4h], 1
		test	edi, edi
		jz	short loc_1A4
		mov	edi, [ebp+104h]
		add	edi, [ebp+0FCh]
		add	edi, [esp+1Ch+var_C]
		jmp	short loc_1BD
; ---------------------------------------------------------------------------

loc_199:				; CODE XREF: _do_ssl3_write+FEj
		test	ecx, ecx
		jz	short loc_1A4

loc_19D:				; CODE XREF: _do_ssl3_write+108j
		mov	ecx, 0FFFFFFFEh
		jmp	short loc_1A9
; ---------------------------------------------------------------------------

loc_1A4:				; CODE XREF: _do_ssl3_write+117j
					; _do_ssl3_write+185j ...
		mov	ecx, 3

loc_1A9:				; CODE XREF: _do_ssl3_write+1A2j
		mov	eax, [ebp+0FCh]
		sub	ecx, eax
		and	ecx, 7
		mov	[ebp+104h], ecx
		lea	edi, [eax+ecx]

loc_1BD:				; CODE XREF: _do_ssl3_write+197j
		mov	eax, [esp+1Ch+arg_4]
		mov	[edi], al
		mov	[ebx], eax
		mov	eax, [esi]
		sar	eax, 8
		mov	[edi+1], al
		cmp	dword ptr [esi+34h], 1111h
		jnz	short loc_1FD
		cmp	dword ptr [esi+190h], 0
		jnz	short loc_1FD
		mov	ecx, [esi]
		mov	eax, ecx
		and	eax, 0FFFFFF00h
		cmp	eax, 300h
		jnz	short loc_1FD
		cmp	ecx, 301h
		jle	short loc_1FD
		mov	byte ptr [edi+2], 1
		jmp	short loc_202
; ---------------------------------------------------------------------------

loc_1FD:				; CODE XREF: _do_ssl3_write+1D4j
					; _do_ssl3_write+1DDj ...
		mov	al, [esi]
		mov	[edi+2], al

loc_202:				; CODE XREF: _do_ssl3_write+1FBj
		mov	ecx, [esi+8Ch]
		add	edi, 3
		mov	[esp+1Ch+var_8], edi
		add	edi, 2
		test	ecx, ecx
		jz	short loc_24A
		mov	eax, [esi+8]
		mov	eax, [eax+64h]
		test	byte ptr [eax+38h], 1
		jz	short loc_24A
		push	ecx
		call	_EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		add	esp, 4
		cmp	eax, 2
		jnz	short loc_29C
		push	dword ptr [esi+8Ch]
		call	_EVP_CIPHER_CTX_iv_length
		mov	ebp, eax
		add	esp, 4
		cmp	ebp, 1
		jg	short loc_24C

loc_24A:				; CODE XREF: _do_ssl3_write+214j
					; _do_ssl3_write+220j
		xor	ebp, ebp

loc_24C:				; CODE XREF: _do_ssl3_write+248j
					; _do_ssl3_write+2A9j
		mov	ecx, [esp+1Ch+Size]
		lea	eax, [edi+ebp]
		mov	edx, [esp+1Ch+Src]
		mov	[ebx+0Ch], eax
		mov	[ebx+4], ecx
		mov	[ebx+10h], edx
		cmp	dword ptr [esi+94h], 0
		jz	short loc_2AB
		push	esi
		call	_ssl3_do_compress
		add	esp, 4
		test	eax, eax
		jnz	short loc_2BC
		push	3F4h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	8Dh ; 'ç'
		push	68h ; 'h'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_29C:				; CODE XREF: _do_ssl3_write+233j
		xor	ebp, ebp
		mov	ecx, 8
		cmp	eax, 6
		cmovz	ebp, ecx
		jmp	short loc_24C
; ---------------------------------------------------------------------------

loc_2AB:				; CODE XREF: _do_ssl3_write+267j
		push	ecx		; Size
		push	edx		; Src
		push	eax		; Dst
		call	_memcpy
		mov	eax, [ebx+0Ch]
		add	esp, 0Ch
		mov	[ebx+10h], eax

loc_2BC:				; CODE XREF: _do_ssl3_write+274j
		cmp	[esp+1Ch+arg_0], 0
		jz	short loc_2E7
		mov	eax, [esi+8]
		push	1
		mov	ecx, [eax+64h]
		mov	eax, [ebx+4]
		add	eax, ebp
		add	eax, edi
		push	eax
		mov	eax, [ecx+4]
		push	esi
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	short $err$48
		mov	eax, [esp+1Ch+arg_0]
		add	[ebx+4], eax

loc_2E7:				; CODE XREF: _do_ssl3_write+2C1j
		mov	[ebx+10h], edi
		mov	[ebx+0Ch], edi
		test	ebp, ebp
		jz	short loc_2F4
		add	[ebx+4], ebp

loc_2F4:				; CODE XREF: _do_ssl3_write+2EFj
		mov	eax, [esi+8]
		push	1
		push	esi
		mov	eax, [eax+64h]
		mov	eax, [eax]
		call	eax
		add	esp, 8
		cmp	eax, 1
		jge	short loc_314

$err$48:				; CODE XREF: _do_ssl3_write+148j
					; _do_ssl3_write+2DEj
		pop	ebx
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_314:				; CODE XREF: _do_ssl3_write+307j
		mov	edx, [esp+1Ch+var_8]
		movzx	eax, byte ptr [ebx+5]
		mov	[edx], al
		movzx	eax, byte ptr [ebx+4]
		mov	[edx+1], al
		mov	ecx, [esi+64h]
		test	ecx, ecx
		jz	short loc_344
		push	dword ptr [esi+68h]
		lea	eax, [edx-3]
		push	esi
		push	5
		push	eax
		push	100h
		push	0
		push	1
		call	ecx
		add	esp, 1Ch

loc_344:				; CODE XREF: _do_ssl3_write+32Aj
		add	dword ptr [ebx+4], 5
		cmp	[esp+1Ch+arg_10], 0
		mov	edx, [esp+1Ch+arg_4]
		mov	eax, [ebx+4]
		mov	[ebx], edx
		jnz	short loc_39E
		add	eax, [esp+1Ch+var_C]
		mov	ecx, [esp+1Ch+var_4]
		mov	edi, [esp+1Ch+Src]
		mov	[ecx+108h], eax
		mov	eax, [esi+58h]
		mov	ecx, [esp+1Ch+Size]
		push	ecx
		push	edi
		mov	[eax+168h], ecx
		mov	eax, [esi+58h]
		push	edx
		push	esi
		mov	[eax+174h], edi
		mov	eax, [esi+58h]
		mov	[eax+16Ch], edx
		mov	eax, [esi+58h]
		mov	[eax+170h], ecx
		call	_ssl3_write_pending
		add	esp, 10h

loc_39E:				; CODE XREF: _do_ssl3_write+356j
		pop	ebx

loc_39F:				; CODE XREF: _do_ssl3_write+58j
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 0Ch
		retn
_do_ssl3_write	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl3_dispatch_alert
_ssl3_dispatch_alert proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		push	0		; int
		push	2		; Size
		mov	eax, [esi+58h]
		mov	dword ptr [eax+18Ch], 0
		mov	eax, [esi+58h]
		add	eax, 190h
		push	eax		; Src
		push	15h		; int
		push	esi		; int
		call	_do_ssl3_write
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jg	short loc_3E9
		mov	ecx, [esi+58h]
		pop	edi
		pop	esi
		mov	dword ptr [ecx+18Ch], 1
		retn
; ---------------------------------------------------------------------------

loc_3E9:				; CODE XREF: _ssl3_dispatch_alert+2Fj
		mov	eax, [esi+58h]
		cmp	byte ptr [eax+190h], 2
		jnz	short loc_406
		push	0
		push	0
		push	0Bh
		push	dword ptr [esi+10h]
		call	_BIO_ctrl
		add	esp, 10h

loc_406:				; CODE XREF: _ssl3_dispatch_alert+4Bj
		mov	ecx, [esi+64h]
		test	ecx, ecx
		jz	short loc_427
		push	dword ptr [esi+68h]
		mov	eax, [esi+58h]
		push	esi
		push	2
		add	eax, 190h
		push	eax
		push	15h
		push	dword ptr [esi]
		push	1
		call	ecx
		add	esp, 1Ch

loc_427:				; CODE XREF: _ssl3_dispatch_alert+63j
		mov	edx, [esi+0D0h]
		test	edx, edx
		jnz	short loc_441
		mov	eax, [esi+0E4h]
		mov	edx, [eax+9Ch]
		test	edx, edx
		jz	short loc_463

loc_441:				; CODE XREF: _ssl3_dispatch_alert+87j
		mov	eax, [esi+58h]
		movzx	ecx, byte ptr [eax+190h]
		movzx	eax, byte ptr [eax+191h]
		shl	ecx, 8
		or	ecx, eax
		push	ecx
		push	4008h
		push	esi
		call	edx
		add	esp, 0Ch

loc_463:				; CODE XREF: _ssl3_dispatch_alert+97j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_ssl3_dispatch_alert endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 468h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl3_do_change_cipher_spec
_ssl3_do_change_cipher_spec proc near	; CODE XREF: _ssl3_read_bytes+53Bp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esi+34h]
		mov	eax, [esi+58h]
		and	edi, 2000h
		neg	edi
		sbb	edi, edi
		and	edi, 10h
		add	edi, 11h
		cmp	dword ptr [eax+378h], 0
		jnz	short loc_4E2
		mov	ecx, [esi+0C0h]
		test	ecx, ecx
		jz	short loc_4BF
		cmp	dword ptr [ecx+10h], 0
		jz	short loc_4BF
		mov	eax, [eax+344h]
		mov	[ecx+0B4h], eax
		mov	eax, [esi+8]
		push	esi
		mov	eax, [eax+64h]
		mov	eax, [eax+8]
		call	eax
		add	esp, 4
		test	eax, eax
		jnz	short loc_4E2
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4BF:				; CODE XREF: _ssl3_do_change_cipher_spec+2Dj
					; _ssl3_do_change_cipher_spec+33j
		push	676h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	85h ; 'Ö'
		push	124h
		push	14h
		call	_ERR_put_error
		add	esp, 14h

loc_4DD:				; CODE XREF: _ssl3_do_change_cipher_spec+8Cj
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4E2:				; CODE XREF: _ssl3_do_change_cipher_spec+23j
					; _ssl3_do_change_cipher_spec+52j
		mov	eax, [esi+8]
		push	edi
		push	esi
		mov	eax, [eax+64h]
		mov	eax, [eax+10h]
		call	eax
		add	esp, 8
		test	eax, eax
		jz	short loc_4DD
		test	dword ptr [esi+34h], 1000h
		mov	eax, [esi+8]
		mov	eax, [eax+64h]
		jz	short loc_50D
		mov	edx, [eax+28h]
		mov	edi, [eax+2Ch]
		jmp	short loc_513
; ---------------------------------------------------------------------------

loc_50D:				; CODE XREF: _ssl3_do_change_cipher_spec+9Bj
		mov	edx, [eax+20h]
		mov	edi, [eax+24h]

loc_513:				; CODE XREF: _ssl3_do_change_cipher_spec+A3j
		mov	eax, [esi+8]
		mov	ecx, [eax+64h]
		mov	eax, [esi+58h]
		add	eax, 2B8h
		push	eax
		mov	eax, [ecx+14h]
		push	edi
		push	edx
		push	esi
		call	eax
		mov	ecx, eax
		add	esp, 10h
		test	ecx, ecx
		jnz	short loc_553
		push	692h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	44h ; 'D'
		push	124h
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_553:				; CODE XREF: _ssl3_do_change_cipher_spec+C9j
		mov	eax, [esi+58h]
		pop	edi
		pop	esi
		mov	[eax+338h], ecx
		mov	eax, 1
		retn
_ssl3_do_change_cipher_spec endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 564h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl3_do_compress
_ssl3_do_compress proc near		; CODE XREF: _do_ssl3_write+26Ap

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [eax+58h]
		add	esi, 130h
		push	dword ptr [esi+4]
		push	dword ptr [esi+10h]
		push	4400h
		push	dword ptr [esi+0Ch]
		push	dword ptr [eax+94h]
		call	_COMP_compress_block
		add	esp, 14h
		test	eax, eax
		jns	short loc_596
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_596:				; CODE XREF: _ssl3_do_compress+2Cj
		mov	[esi+4], eax
		mov	eax, [esi+0Ch]
		mov	[esi+10h], eax
		mov	eax, 1
		pop	esi
		retn
_ssl3_do_compress endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl3_do_uncompress
_ssl3_do_uncompress proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [eax+58h]
		add	esi, 10Ch
		push	dword ptr [esi+4]
		push	dword ptr [esi+0Ch]
		push	4000h
		push	dword ptr [esi+14h]
		push	dword ptr [eax+88h]
		call	_COMP_expand_block
		add	esp, 14h
		test	eax, eax
		jns	short loc_5DA
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_5DA:				; CODE XREF: _ssl3_do_uncompress+2Cj
		mov	[esi+4], eax
		mov	eax, [esi+14h]
		mov	[esi+0Ch], eax
		mov	eax, 1
		pop	esi
		retn
_ssl3_do_uncompress endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ssl3_get_record proc near		; CODE XREF: _ssl3_read_bytes+190p

var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= byte ptr -84h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 94h ; 'î'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+94h+var_4], eax
		push	ebx
		push	esi
		mov	esi, [esp+9Ch+arg_0]
		push	edi
		mov	[esp+0A0h+var_90], 0
		test	byte ptr [esi+100h], 20h
		mov	eax, [esi+58h]
		mov	ebx, [esi+0C0h]
		mov	[esp+0A0h+var_8C], ebx
		lea	edi, [eax+10Ch]
		jz	short loc_679
		cmp	dword ptr [eax+0E8h], 0
		mov	[esp+0A0h+var_94], 4000h
		jnz	short loc_681
		push	14Bh
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	44h ; 'D'
		push	8Fh ; 'è'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+94h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 94h
		retn
; ---------------------------------------------------------------------------

loc_679:				; CODE XREF: _ssl3_get_record+44j
		mov	[esp+0A0h+var_94], 0

loc_681:				; CODE XREF: _ssl3_get_record+55j
		push	ebp

$again$73:				; CODE XREF: _ssl3_get_record+377j
		cmp	dword ptr [esi+38h], 0F1h ; 'Ò'
		jnz	short loc_695
		cmp	dword ptr [esi+50h], 5
		jnb	loc_73E

loc_695:				; CODE XREF: _ssl3_get_record+9Dj
		mov	eax, [esi+58h]
		push	0		; int
		push	dword ptr [eax+0F0h] ; int
		push	offset loc_5	; Src
		push	esi		; int
		call	_ssl3_read_n
		add	esp, 10h
		test	eax, eax
		jle	loc_AAD
		mov	eax, [esi+64h]
		mov	ebx, [esi+4Ch]
		mov	dword ptr [esi+38h], 0F1h ; 'Ò'
		test	eax, eax
		jz	short loc_6D9
		push	dword ptr [esi+68h]
		push	esi
		push	5
		push	ebx
		push	100h
		push	0
		push	0
		call	eax
		add	esp, 1Ch

loc_6D9:				; CODE XREF: _ssl3_get_record+D6j
		movzx	eax, byte ptr [ebx]
		mov	[edi], eax
		movzx	ecx, byte ptr [ebx+1]
		movzx	eax, byte ptr [ebx+2]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [ebx+4]
		movzx	ebp, cx
		movzx	ecx, byte ptr [ebx+3]
		shl	ecx, 8
		or	ecx, eax
		mov	[edi+4], ecx
		cmp	dword ptr [esi+10Ch], 0
		jnz	short loc_712
		movsx	eax, bp
		cmp	eax, [esi]
		jnz	loc_968

loc_712:				; CODE XREF: _ssl3_get_record+119j
		and	ebp, 0FFFFFF00h
		mov	eax, 300h
		cmp	bp, ax
		jnz	loc_A8C
		mov	eax, [esi+58h]
		mov	eax, [eax+0F0h]
		sub	eax, 5
		cmp	ecx, eax
		ja	loc_A5B
		mov	ebx, [esp+0A4h+var_8C]

loc_73E:				; CODE XREF: _ssl3_get_record+A3j
		mov	eax, [esi+50h]
		mov	ecx, [edi+4]
		sub	eax, 5
		cmp	ecx, eax
		jbe	short loc_760
		push	1		; int
		push	ecx		; int
		push	ecx		; Src
		push	esi		; int
		call	_ssl3_read_n
		add	esp, 10h
		test	eax, eax
		jle	loc_AAD

loc_760:				; CODE XREF: _ssl3_get_record+15Dj
		mov	ecx, [esi+4Ch]
		mov	eax, [esp+0A4h+var_94]
		add	ecx, 5
		mov	dword ptr [esi+38h], 0F0h ; ''
		add	eax, 4540h
		mov	[edi+10h], ecx
		cmp	[edi+4], eax
		ja	loc_A4A
		mov	[edi+0Ch], ecx
		mov	eax, [esi+8]
		push	0
		push	esi
		mov	eax, [eax+64h]
		mov	eax, [eax]
		call	eax
		mov	ebp, eax
		add	esp, 8
		mov	[esp+0A4h+var_88], ebp
		test	ebp, ebp
		jz	loc_A34
		test	ebx, ebx
		jz	loc_8D1
		cmp	dword ptr [esi+80h], 0
		jz	loc_8D1
		push	dword ptr [esi+84h]
		call	_EVP_MD_CTX_md
		add	esp, 4
		test	eax, eax
		jz	loc_8D1
		push	dword ptr [esi+84h]
		call	_EVP_MD_CTX_md
		push	eax
		call	_EVP_MD_size
		mov	ebx, eax
		add	esp, 8
		cmp	ebx, 40h ; '@'
		jbe	short loc_800
		push	offset ??_C@_0BM@LDNPIHEI@mac_size?5?$DM?$DN?5EVP_MAX_MD_SIZE?$AA@ ; "mac_size <= EVP_MAX_MD_SIZE"
		push	1D8h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		call	_OpenSSLDie
		add	esp, 0Ch

loc_800:				; CODE XREF: _ssl3_get_record+1FBj
		mov	ebp, [edi]
		shr	ebp, 8
		add	ebp, [edi+4]
		cmp	ebp, ebx
		jb	loc_9C6
		push	dword ptr [esi+80h]
		call	_EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		add	esp, 4
		cmp	eax, 2
		jnz	short loc_833
		lea	eax, [ebx+1]
		cmp	ebp, eax
		jb	loc_9C6

loc_833:				; CODE XREF: _ssl3_get_record+23Aj
		push	dword ptr [esi+80h]
		call	_EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		add	esp, 4
		cmp	eax, 2
		jnz	short loc_864
		push	ebp
		push	ebx
		lea	eax, [esp+0ACh+var_84]
		push	edi
		push	eax
		call	_ssl3_cbc_copy_mac
		add	esp, 10h
		lea	ebp, [esp+0A4h+var_84]
		sub	[edi+4], ebx
		jmp	short loc_86D
; ---------------------------------------------------------------------------

loc_864:				; CODE XREF: _ssl3_get_record+25Dj
		mov	ebp, [edi+0Ch]
		sub	[edi+4], ebx
		add	ebp, [edi+4]

loc_86D:				; CODE XREF: _ssl3_get_record+276j
		mov	eax, [esi+8]
		lea	ecx, [esp+0A4h+var_44]
		push	0
		push	ecx
		push	esi
		mov	eax, [eax+64h]
		mov	eax, [eax+4]
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	short loc_89E
		test	ebp, ebp
		jz	short loc_89E
		push	ebx
		lea	eax, [esp+0A8h+var_44]
		push	ebp
		push	eax
		call	_CRYPTO_memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_8A3

loc_89E:				; CODE XREF: _ssl3_get_record+299j
					; _ssl3_get_record+29Dj
		or	ebp, 0FFFFFFFFh
		jmp	short loc_8A7
; ---------------------------------------------------------------------------

loc_8A3:				; CODE XREF: _ssl3_get_record+2B0j
		mov	ebp, [esp+0A4h+var_88]

loc_8A7:				; CODE XREF: _ssl3_get_record+2B5j
		mov	edx, [esp+0A4h+var_94]
		lea	eax, [edx+4400h]
		add	eax, ebx
		cmp	[edi+4], eax
		jbe	short loc_8D5

loc_8B8:				; CODE XREF: _ssl3_get_record+2EBj
		push	214h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		mov	edi, 14h
		push	119h
		jmp	loc_A6F
; ---------------------------------------------------------------------------

loc_8D1:				; CODE XREF: _ssl3_get_record+1B9j
					; _ssl3_get_record+1C6j ...
		mov	edx, [esp+0A4h+var_94]

loc_8D5:				; CODE XREF: _ssl3_get_record+2CAj
		test	ebp, ebp
		js	short loc_8B8
		mov	ecx, [esi+88h]
		test	ecx, ecx
		jz	short loc_923
		lea	eax, [edx+4400h]
		cmp	[edi+4], eax
		ja	loc_9F2
		mov	ebx, [esi+58h]
		add	ebx, 10Ch
		push	dword ptr [ebx+4]
		push	dword ptr [ebx+0Ch]
		push	4000h
		push	dword ptr [ebx+14h]
		push	ecx
		call	_COMP_expand_block
		add	esp, 14h
		test	eax, eax
		js	loc_9DF
		mov	[ebx+4], eax
		mov	eax, [ebx+14h]
		mov	[ebx+0Ch], eax

loc_923:				; CODE XREF: _ssl3_get_record+2F5j
		mov	eax, [esp+0A4h+var_94]
		add	eax, 4000h
		cmp	[edi+4], eax
		ja	loc_A23
		mov	dword ptr [edi+8], 0
		mov	dword ptr [esi+50h], 0
		cmp	dword ptr [edi+4], 0
		jnz	loc_A19
		mov	ecx, [esp+0A4h+var_90]
		inc	ecx
		mov	[esp+0A4h+var_90], ecx
		cmp	ecx, 20h ; ' '
		ja	loc_A03
		mov	ebx, [esp+0A4h+var_8C]
		jmp	$again$73
; ---------------------------------------------------------------------------

loc_968:				; CODE XREF: _ssl3_get_record+120j
		push	16Ah
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	10Bh
		push	8Fh ; 'è'
		push	14h
		call	_ERR_put_error
		mov	eax, [esi]
		mov	ecx, ebp
		xor	eax, ecx
		add	esp, 14h
		test	eax, 0FF00h
		jnz	short loc_9B0
		cmp	dword ptr [esi+8Ch], 0
		jnz	short loc_9B0
		cmp	dword ptr [esi+90h], 0
		jnz	short loc_9B0
		cmp	dword ptr [edi], 15h
		jz	$err$74
		mov	[esi], ecx

loc_9B0:				; CODE XREF: _ssl3_get_record+3A5j
					; _ssl3_get_record+3AEj ...
		mov	edi, 46h ; 'F'
		push	edi
		push	2
		push	esi
		call	_ssl3_send_alert
		add	esp, 0Ch
		jmp	$err$74
; ---------------------------------------------------------------------------

loc_9C6:				; CODE XREF: _ssl3_get_record+21Ej
					; _ssl3_get_record+241j
		push	1EAh
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		mov	edi, 32h ; '2'
		push	0A0h ; '†'
		jmp	loc_A6F
; ---------------------------------------------------------------------------

loc_9DF:				; CODE XREF: _ssl3_get_record+328j
		push	221h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		mov	edi, 1Eh
		push	6Bh ; 'k'
		jmp	short loc_A6F
; ---------------------------------------------------------------------------

loc_9F2:				; CODE XREF: _ssl3_get_record+300j
		push	21Ch
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	8Ch ; 'å'
		jmp	short loc_A6A
; ---------------------------------------------------------------------------

loc_A03:				; CODE XREF: _ssl3_get_record+36Dj
		push	23Eh
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		mov	edi, 0Ah
		push	12Ah
		jmp	short loc_A6F
; ---------------------------------------------------------------------------

loc_A19:				; CODE XREF: _ssl3_get_record+35Bj
		mov	eax, 1
		jmp	loc_AAD
; ---------------------------------------------------------------------------

loc_A23:				; CODE XREF: _ssl3_get_record+343j
		push	228h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	92h ; 'í'
		jmp	short loc_A6A
; ---------------------------------------------------------------------------

loc_A34:				; CODE XREF: _ssl3_get_record+1B1j
		push	1C4h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		mov	edi, 15h
		push	81h ; 'Å'
		jmp	short loc_A6F
; ---------------------------------------------------------------------------

loc_A4A:				; CODE XREF: _ssl3_get_record+190j
		push	1B4h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	96h ; 'ñ'
		jmp	short loc_A6A
; ---------------------------------------------------------------------------

loc_A5B:				; CODE XREF: _ssl3_get_record+148j
		push	188h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	0C6h ; '∆'

loc_A6A:				; CODE XREF: _ssl3_get_record+415j
					; _ssl3_get_record+446j ...
		mov	edi, 16h

loc_A6F:				; CODE XREF: _ssl3_get_record+2E0j
					; _ssl3_get_record+3EEj ...
		push	8Fh ; 'è'
		push	14h
		call	_ERR_put_error
		add	esp, 14h

$f_err$75:
		push	edi
		push	2
		push	esi
		call	_ssl3_send_alert
		add	esp, 0Ch
		jmp	short $err$74
; ---------------------------------------------------------------------------

loc_A8C:				; CODE XREF: _ssl3_get_record+134j
		push	182h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	10Bh
		push	8Fh ; 'è'
		push	14h
		call	_ERR_put_error
		add	esp, 14h

$err$74:				; CODE XREF: _ssl3_get_record+3BCj
					; _ssl3_get_record+3D5j ...
		or	eax, 0FFFFFFFFh

loc_AAD:				; CODE XREF: _ssl3_get_record+C1j
					; _ssl3_get_record+16Ej ...
		mov	ecx, [esp+0A4h+var_4]
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 94h
		retn
_ssl3_get_record endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0AC8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl3_read_bytes
_ssl3_read_bytes proc near

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
Dst		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 28h ; '('
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+28h+var_4], eax
		mov	edx, [esp+28h+arg_8]
		push	esi
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_18], esi
		mov	[esp+2Ch+Dst], edx
		mov	[esp+2Ch+var_28], 0
		mov	eax, [esi+58h]
		cmp	dword ptr [eax+0ECh], 0
		jnz	short loc_B26
		push	esi
		call	_ssl3_setup_read_buffer
		add	esp, 4
		test	eax, eax
		jnz	short loc_B22
		or	eax, 0FFFFFFFFh
		pop	esi
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_B22:				; CODE XREF: _ssl3_read_bytes+45j
		mov	edx, [esp+2Ch+Dst]

loc_B26:				; CODE XREF: _ssl3_read_bytes+38j
		push	ebx
		mov	ebx, [esp+30h+arg_4]
		test	ebx, ebx
		jz	short loc_B39
		cmp	ebx, 17h
		jz	short loc_B39
		cmp	ebx, 16h
		jnz	short loc_B45

loc_B39:				; CODE XREF: _ssl3_read_bytes+65j
					; _ssl3_read_bytes+6Aj
		cmp	[esp+30h+arg_10], 0
		jz	short loc_B74
		cmp	ebx, 17h
		jz	short loc_B74

loc_B45:				; CODE XREF: _ssl3_read_bytes+6Fj
		push	497h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	44h ; 'D'
		push	94h ; 'î'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_B74:				; CODE XREF: _ssl3_read_bytes+76j
					; _ssl3_read_bytes+7Bj
		push	ebp
		push	edi
		cmp	ebx, 16h
		jnz	short loc_BF9
		mov	edi, [esi+58h]
		cmp	dword ptr [edi+160h], 0
		jbe	short loc_BF9
		mov	ecx, [esp+38h+arg_C]
		add	edi, 15Ch
		xor	ebp, ebp
		test	ecx, ecx
		jle	short loc_BB9
		nop

loc_B98:				; CODE XREF: _ssl3_read_bytes+EFj
		mov	eax, [esi+58h]
		cmp	dword ptr [eax+160h], 0
		jbe	short loc_BB9
		mov	al, [edi]
		dec	ecx
		mov	[edx+ebp], al
		inc	edi
		mov	eax, [esi+58h]
		inc	ebp
		dec	dword ptr [eax+160h]
		test	ecx, ecx
		jg	short loc_B98

loc_BB9:				; CODE XREF: _ssl3_read_bytes+CDj
					; _ssl3_read_bytes+DAj
		mov	eax, [esi+58h]
		xor	ebx, ebx
		cmp	[eax+160h], ebx
		jbe	short loc_BE4
		xchg	ax, ax

loc_BC8:				; CODE XREF: _ssl3_read_bytes+11Aj
		mov	edx, [esi+58h]
		lea	edi, [edi+1]
		mov	cl, [edi-1]
		mov	[ebx+edx+15Ch],	cl
		inc	ebx
		mov	ecx, [esi+58h]
		cmp	ebx, [ecx+160h]
		jb	short loc_BC8

loc_BE4:				; CODE XREF: _ssl3_read_bytes+FCj
		pop	edi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		pop	esi
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_BF9:				; CODE XREF: _ssl3_read_bytes+B1j
					; _ssl3_read_bytes+BDj
		cmp	dword ptr [esi+1Ch], 0
		jnz	short $start$155
		push	esi
		call	_SSL_state
		add	esp, 4
		test	eax, 3000h
		jz	short $start$155
		mov	eax, [esi+20h]
		push	esi
		call	eax
		add	esp, 4
		test	eax, eax
		js	loc_1489
		jnz	short $start$155
		push	4BAh
		jmp	loc_1260
; ---------------------------------------------------------------------------
		db 0Fh,	1Fh, 40h, 0
		db 0Fh,	1Fh, 84h, 5 dup(0)
; ---------------------------------------------------------------------------

$start$155:				; CODE XREF: _ssl3_read_bytes+135j
					; _ssl3_read_bytes+145j ...
		mov	edi, [esi+58h]
		add	edi, 10Ch
		mov	dword ptr [esi+18h], 1
		cmp	dword ptr [edi+4], 0
		jz	short loc_C57
		cmp	dword ptr [esi+38h], 0F1h ; 'Ò'
		jnz	short loc_C68

loc_C57:				; CODE XREF: _ssl3_read_bytes+184j
		push	esi
		call	_ssl3_get_record
		add	esp, 4
		test	eax, eax
		jle	loc_1489

loc_C68:				; CODE XREF: _ssl3_read_bytes+18Dj
		mov	ebp, [esi+58h]
		cmp	dword ptr [ebp+180h], 0
		jz	short loc_C7D
		cmp	dword ptr [edi], 16h
		jnz	loc_111E

loc_C7D:				; CODE XREF: _ssl3_read_bytes+1AAj
		test	byte ptr [esi+30h], 2
		jnz	loc_1479
		mov	eax, [edi]
		cmp	ebx, eax
		jz	loc_13A2
		cmp	eax, 16h
		jnz	short loc_CAB
		lea	ecx, [ebp+15Ch]
		add	ebp, 160h
		lea	edx, [eax-12h]
		mov	[esp+38h+var_24], ecx
		jmp	short loc_CC5
; ---------------------------------------------------------------------------

loc_CAB:				; CODE XREF: _ssl3_read_bytes+1CCj
		cmp	eax, 15h
		jnz	short loc_D11
		lea	eax, [ebp+154h]
		mov	edx, 2
		mov	[esp+38h+var_24], eax
		add	ebp, 158h

loc_CC5:				; CODE XREF: _ssl3_read_bytes+1E1j
		mov	ebx, edx
		mov	[esp+38h+var_20], edx
		sub	ebx, [ebp+0]
		cmp	[edi+4], ebx
		cmovb	ebx, [edi+4]
		test	ebx, ebx
		jz	short loc_D02
		mov	esi, [esp+38h+var_24]

loc_CDD:				; CODE XREF: _ssl3_read_bytes+230j
		mov	eax, [edi+8]
		mov	edx, [edi+0Ch]
		mov	ecx, [ebp+0]
		mov	al, [edx+eax]
		mov	[esi+ecx], al
		inc	dword ptr [ebp+0]
		inc	dword ptr [edi+8]
		dec	dword ptr [edi+4]
		sub	ebx, 1
		jnz	short loc_CDD
		mov	esi, [esp+38h+var_18]
		mov	edx, [esp+38h+var_20]

loc_D02:				; CODE XREF: _ssl3_read_bytes+20Fj
		mov	ebx, [esp+38h+arg_4]
		cmp	[ebp+0], edx
		jb	$start$155
		jmp	short loc_D1A
; ---------------------------------------------------------------------------

loc_D11:				; CODE XREF: _ssl3_read_bytes+1E6j
		cmp	eax, 18h
		jz	loc_134D

loc_D1A:				; CODE XREF: _ssl3_read_bytes+247j
		mov	edx, [esi+24h]
		test	edx, edx
		jnz	loc_E57
		mov	eax, [esi+58h]
		cmp	dword ptr [eax+160h], 4
		jb	loc_E53
		cmp	[eax+15Ch], dl
		jnz	loc_E53
		mov	ecx, [esi+0C0h]
		test	ecx, ecx
		jz	loc_E53
		cmp	[ecx+0B4h], edx
		jz	loc_E53
		mov	[eax+160h], edx
		mov	eax, [esi+58h]
		cmp	[eax+15Dh], dl
		jnz	loc_113C
		cmp	[eax+15Eh], dl
		jnz	loc_113C
		cmp	[eax+15Fh], dl
		jnz	loc_113C
		mov	ecx, [esi+64h]
		test	ecx, ecx
		jz	short loc_DA5
		push	dword ptr [esi+68h]
		add	eax, 15Ch
		push	esi
		push	4
		push	eax
		push	16h
		push	dword ptr [esi]
		push	edx
		call	ecx
		add	esp, 1Ch

loc_DA5:				; CODE XREF: _ssl3_read_bytes+2C5j
		push	esi
		call	_SSL_state
		add	esp, 4
		cmp	eax, 3
		jnz	$start$155
		mov	eax, [esi+58h]
		test	byte ptr [eax],	1
		jnz	$start$155
		cmp	dword ptr [eax+194h], 0
		jnz	$start$155
		push	esi
		call	_ssl3_renegotiate
		push	esi
		call	_ssl3_renegotiate_check
		add	esp, 8
		test	eax, eax
		jz	$start$155
		mov	eax, [esi+20h]
		push	esi
		call	eax
		add	esp, 4
		test	eax, eax
		js	loc_1489
		jz	loc_1132
		test	byte ptr [esi+104h], 4
		jnz	$start$155
		mov	eax, [esi+58h]
		cmp	dword ptr [eax+0F8h], 0
		jnz	$start$155
		push	esi
		mov	dword ptr [esi+18h], 3
		call	_SSL_get_rbio
		mov	esi, eax
		push	0Fh
		push	esi
		call	_BIO_clear_flags
		push	9
		push	esi
		call	_BIO_set_flags
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_E53:				; CODE XREF: _ssl3_read_bytes+267j
					; _ssl3_read_bytes+273j ...
		test	edx, edx
		jz	short loc_EC9

loc_E57:				; CODE XREF: _ssl3_read_bytes+257j
		push	esi
		call	_SSL_state
		add	esp, 4
		cmp	eax, 3
		jnz	short loc_EC9
		mov	eax, [esi+58h]
		cmp	dword ptr [eax+418h], 0
		jnz	short loc_EC9
		cmp	dword ptr [esi], 300h
		jle	short loc_EC9
		cmp	dword ptr [eax+160h], 4
		jb	short loc_EC9
		cmp	byte ptr [eax+15Ch], 1
		jnz	short loc_EC9
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_EC9
		cmp	dword ptr [eax+0B4h], 0
		jz	short loc_EC9
		mov	eax, [esi+0E4h]
		test	dword ptr [eax+0A4h], 40000h
		jnz	short loc_EC9
		push	64h ; 'd'
		push	1
		push	esi
		mov	dword ptr [edi+4], 0
		call	_ssl3_send_alert
		add	esp, 0Ch
		jmp	$start$155
; ---------------------------------------------------------------------------

loc_EC9:				; CODE XREF: _ssl3_read_bytes+38Dj
					; _ssl3_read_bytes+39Bj ...
		mov	ecx, [esi+58h]
		cmp	dword ptr [ecx+158h], 2
		jb	loc_F80
		movzx	ebx, byte ptr [ecx+154h]
		movzx	edi, byte ptr [ecx+155h]
		mov	dword ptr [ecx+158h], 0
		mov	ecx, [esi+64h]
		test	ecx, ecx
		jz	short loc_F12
		push	dword ptr [esi+68h]
		mov	eax, [esi+58h]
		push	esi
		push	2
		add	eax, 154h
		push	eax
		push	15h
		push	dword ptr [esi]
		push	0
		call	ecx
		add	esp, 1Ch

loc_F12:				; CODE XREF: _ssl3_read_bytes+42Ej
		mov	eax, [esi+0D0h]
		test	eax, eax
		jz	short loc_F24
		mov	ebp, eax
		mov	[esp+38h+var_28], eax
		jmp	short loc_F3D
; ---------------------------------------------------------------------------

loc_F24:				; CODE XREF: _ssl3_read_bytes+452j
		mov	eax, [esi+0E4h]
		mov	ebp, [esp+38h+var_28]
		mov	eax, [eax+9Ch]
		test	eax, eax
		cmovnz	ebp, eax
		mov	[esp+38h+var_28], ebp

loc_F3D:				; CODE XREF: _ssl3_read_bytes+45Aj
		test	ebp, ebp
		jz	short loc_F54
		mov	eax, ebx
		shl	eax, 8
		or	eax, edi
		push	eax
		push	4004h
		push	esi
		call	ebp
		add	esp, 0Ch

loc_F54:				; CODE XREF: _ssl3_read_bytes+477j
		cmp	ebx, 1
		jnz	loc_1184
		mov	eax, [esi+58h]
		mov	[eax+184h], edi
		test	edi, edi
		jz	loc_116B
		cmp	edi, 64h ; 'd'
		jz	loc_1152
		mov	ebx, [esp+38h+arg_4]
		jmp	$start$155
; ---------------------------------------------------------------------------

loc_F80:				; CODE XREF: _ssl3_read_bytes+40Bj
		test	byte ptr [esi+30h], 1
		jnz	loc_132A
		mov	eax, [edi]
		cmp	eax, 14h
		jnz	loc_1029
		cmp	dword ptr [edi+4], 1
		jnz	loc_1245
		cmp	dword ptr [edi+8], 0
		jnz	loc_1245
		mov	eax, [edi+0Ch]
		cmp	byte ptr [eax],	1
		jnz	loc_1245
		cmp	dword ptr [ecx+344h], 0
		jz	loc_1231
		mov	eax, [ecx]
		test	al, al
		jns	loc_121D
		and	eax, 0FFFFFF7Fh
		mov	[ecx], eax
		mov	dword ptr [edi+4], 0
		mov	eax, [esi+64h]
		test	eax, eax
		jz	short loc_FF5
		push	dword ptr [esi+68h]
		push	esi
		push	1
		push	dword ptr [edi+0Ch]
		push	14h
		push	dword ptr [esi]
		push	0
		call	eax
		add	esp, 1Ch

loc_FF5:				; CODE XREF: _ssl3_read_bytes+517j
		mov	eax, [esi+58h]
		push	esi
		mov	dword ptr [eax+180h], 1
		call	_ssl3_do_change_cipher_spec
		add	esp, 4
		test	eax, eax
		jnz	$start$155
		pop	edi
		pop	ebp
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	esi
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1029:				; CODE XREF: _ssl3_read_bytes+4C7j
		cmp	dword ptr [ecx+160h], 4
		jb	loc_10E3
		cmp	dword ptr [esi+1Ch], 0
		jnz	loc_10E3
		mov	eax, [esi+34h]
		and	eax, 0FFFh
		cmp	eax, 3
		jnz	short loc_1077
		test	byte ptr [ecx],	1
		jnz	short loc_1077
		cmp	dword ptr [esi+24h], 0
		mov	eax, 1000h
		mov	ecx, 2000h
		mov	dword ptr [esi+190h], 1
		cmovnz	eax, ecx
		mov	dword ptr [esi+28h], 1
		mov	[esi+34h], eax

loc_1077:				; CODE XREF: _ssl3_read_bytes+583j
					; _ssl3_read_bytes+588j
		mov	eax, [esi+20h]
		push	esi
		call	eax
		add	esp, 4
		test	eax, eax
		js	loc_1489
		jz	loc_125B
		test	byte ptr [esi+104h], 4
		jnz	$start$155
		mov	eax, [esi+58h]
		cmp	dword ptr [eax+0F8h], 0
		jnz	$start$155
		push	esi
		mov	dword ptr [esi+18h], 3
		call	_SSL_get_rbio
		mov	esi, eax
		push	0Fh
		push	esi
		call	_BIO_clear_flags
		push	9
		push	esi
		call	_BIO_set_flags
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_10E3:				; CODE XREF: _ssl3_read_bytes+568j
					; _ssl3_read_bytes+572j
		cmp	eax, 14h
		jl	short loc_10FA
		cmp	eax, 16h
		jle	loc_1305
		cmp	eax, 17h
		jz	loc_128F

loc_10FA:				; CODE XREF: _ssl3_read_bytes+61Ej
		mov	eax, [esi]
		cmp	eax, 301h
		jl	loc_1316
		cmp	eax, 302h
		jg	loc_1316
		mov	dword ptr [edi+4], 0
		jmp	$start$155
; ---------------------------------------------------------------------------

loc_111E:				; CODE XREF: _ssl3_read_bytes+1AFj
		push	4D6h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	91h ; 'ë'
		jmp	loc_13CC
; ---------------------------------------------------------------------------

loc_1132:				; CODE XREF: _ssl3_read_bytes+330j
		push	560h
		jmp	loc_1260
; ---------------------------------------------------------------------------

loc_113C:				; CODE XREF: _ssl3_read_bytes+2A2j
					; _ssl3_read_bytes+2AEj ...
		push	54Dh
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		mov	edi, 32h ; '2'
		push	69h ; 'i'
		jmp	loc_13D1
; ---------------------------------------------------------------------------

loc_1152:				; CODE XREF: _ssl3_read_bytes+4A9j
		push	5B4h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		mov	edi, 28h ; '('
		push	153h
		jmp	loc_13D1
; ---------------------------------------------------------------------------

loc_116B:				; CODE XREF: _ssl3_read_bytes+4A0j
		or	dword ptr [esi+30h], 2
		xor	eax, eax
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1184:				; CODE XREF: _ssl3_read_bytes+48Fj
		cmp	ebx, 2
		jnz	short loc_1204
		mov	eax, [esi+58h]
		push	5C0h
		mov	dword ptr [esi+18h], 1
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		mov	[eax+188h], edi
		lea	eax, [edi+3E8h]
		push	eax
		push	94h ; 'î'
		push	14h
		call	_ERR_put_error
		push	edi
		push	offset ??_C@_02DPKJAMEF@?$CFd?$AA@ ; `string'
		lea	eax, [esp+54h+var_14]
		push	10h
		push	eax
		call	_BIO_snprintf
		lea	eax, [esp+5Ch+var_14]
		push	eax
		push	offset ??_C@_0BC@PCIPMNJJ@SSL?5alert?5number?5?$AA@ ; "SSL alert number	"
		push	ebx
		call	_ERR_add_error_data
		push	dword ptr [esi+0C0h]
		or	[esi+30h], ebx
		push	dword ptr [esi+0E4h]
		call	_SSL_CTX_remove_session
		add	esp, 38h
		xor	eax, eax
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1204:				; CODE XREF: _ssl3_read_bytes+6BFj
		push	5C8h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		mov	edi, 2Fh ; '/'
		push	0F6h ; 'ˆ'
		jmp	loc_13D1
; ---------------------------------------------------------------------------

loc_121D:				; CODE XREF: _ssl3_read_bytes+4FEj
		push	5EBh
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	85h ; 'Ö'
		jmp	loc_13CC
; ---------------------------------------------------------------------------

loc_1231:				; CODE XREF: _ssl3_read_bytes+4F4j
		push	5E5h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	85h ; 'Ö'
		jmp	loc_13CC
; ---------------------------------------------------------------------------

loc_1245:				; CODE XREF: _ssl3_read_bytes+4D1j
					; _ssl3_read_bytes+4DBj ...
		push	5DEh
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		mov	edi, 2Fh ; '/'
		push	67h ; 'g'
		jmp	loc_13D1
; ---------------------------------------------------------------------------

loc_125B:				; CODE XREF: _ssl3_read_bytes+5C0j
		push	614h

loc_1260:				; CODE XREF: _ssl3_read_bytes+15Fj
					; _ssl3_read_bytes+66Fj
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	0E5h ; 'Â'
		push	94h ; 'î'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_128F:				; CODE XREF: _ssl3_read_bytes+62Cj
		mov	ecx, [esi+58h]
		cmp	dword ptr [ecx+1A0h], 0
		jz	short loc_12F1
		cmp	dword ptr [ecx+198h], 0
		jz	short loc_12F1
		mov	eax, [esi+34h]
		test	eax, 1000h
		jz	short loc_12BC
		cmp	eax, 1110h
		jl	short loc_12BC
		cmp	eax, 1120h
		jle	short loc_12D1

loc_12BC:				; CODE XREF: _ssl3_read_bytes+7E4j
					; _ssl3_read_bytes+7EBj
		test	eax, 2000h
		jz	short loc_12F1
		cmp	eax, 2120h
		jg	short loc_12F1
		cmp	eax, 2110h
		jl	short loc_12F1

loc_12D1:				; CODE XREF: _ssl3_read_bytes+7F2j
		pop	edi
		pop	ebp
		pop	ebx
		mov	dword ptr [ecx+1A0h], 2
		or	eax, 0FFFFFFFFh
		pop	esi
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_12F1:				; CODE XREF: _ssl3_read_bytes+7D1j
					; _ssl3_read_bytes+7DAj ...
		push	65Bh
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	0F5h ; 'ı'
		jmp	loc_13CC
; ---------------------------------------------------------------------------

loc_1305:				; CODE XREF: _ssl3_read_bytes+623j
		push	643h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	44h ; 'D'
		jmp	loc_13CC
; ---------------------------------------------------------------------------

loc_1316:				; CODE XREF: _ssl3_read_bytes+639j
					; _ssl3_read_bytes+644j
		push	638h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	0F5h ; 'ı'
		jmp	loc_13CC
; ---------------------------------------------------------------------------

loc_132A:				; CODE XREF: _ssl3_read_bytes+4BCj
		mov	dword ptr [esi+18h], 1
		xor	eax, eax
		mov	dword ptr [edi+4], 0
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_134D:				; CODE XREF: _ssl3_read_bytes+24Cj
		push	esi
		call	_tls1_process_heartbeat
		add	esp, 4
		mov	dword ptr [edi+4], 0
		mov	dword ptr [esi+18h], 3
		push	0Fh
		push	esi
		call	_SSL_get_rbio
		add	esp, 4
		push	eax
		call	_BIO_clear_flags
		add	esp, 8
		push	9
		push	esi
		call	_SSL_get_rbio
		add	esp, 4
		push	eax
		call	_BIO_set_flags
		add	esp, 8
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_13A2:				; CODE XREF: _ssl3_read_bytes+1C3j
		push	esi
		call	_SSL_state
		add	esp, 4
		test	eax, 3000h
		jz	short loc_1402
		cmp	ebx, 17h
		jnz	short loc_1402
		cmp	dword ptr [esi+80h], 0
		jnz	short loc_1402
		push	4EDh
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	64h ; 'd'

loc_13CC:				; CODE XREF: _ssl3_read_bytes+665j
					; _ssl3_read_bytes+764j ...
		mov	edi, 0Ah

loc_13D1:				; CODE XREF: _ssl3_read_bytes+685j
					; _ssl3_read_bytes+69Ej ...
		push	94h ; 'î'
		push	14h
		call	_ERR_put_error
		add	esp, 14h

$f_err$156:
		push	edi
		push	2
		push	esi
		call	_ssl3_send_alert
		add	esp, 0Ch

$err$157:
		pop	edi
		pop	ebp
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	esi
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1402:				; CODE XREF: _ssl3_read_bytes+8E8j
					; _ssl3_read_bytes+8EDj ...
		mov	ebx, [esp+38h+arg_C]
		test	ebx, ebx
		jle	short loc_1464
		cmp	ebx, [edi+4]
		mov	eax, [edi+0Ch]
		cmova	ebx, [edi+4]
		add	eax, [edi+8]
		push	ebx		; Size
		push	eax		; Src
		push	[esp+40h+Dst]	; Dst
		call	_memcpy
		add	esp, 0Ch
		cmp	[esp+38h+arg_10], 0
		jnz	short loc_1464
		sub	[edi+4], ebx
		add	[edi+8], ebx
		cmp	dword ptr [edi+4], 0
		jnz	short loc_1464
		mov	dword ptr [esi+38h], 0F0h ; ''
		mov	dword ptr [edi+8], 0
		test	byte ptr [esi+104h], 10h
		jz	short loc_1464
		mov	ecx, [esi+58h]
		cmp	dword ptr [ecx+0F8h], 0
		jnz	short loc_1464
		push	esi
		call	_ssl3_release_read_buffer
		add	esp, 4

loc_1464:				; CODE XREF: _ssl3_read_bytes+940j
					; _ssl3_read_bytes+962j ...
		pop	edi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		pop	esi
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1479:				; CODE XREF: _ssl3_read_bytes+1B9j
		mov	dword ptr [edi+4], 0
		xor	eax, eax
		mov	dword ptr [esi+18h], 1

loc_1489:				; CODE XREF: _ssl3_read_bytes+152j
					; _ssl3_read_bytes+19Aj ...
		mov	ecx, [esp+38h+var_4]
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
_ssl3_read_bytes endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 149Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl ssl3_read_n(int, void *Src, int, int)
		public _ssl3_read_n
_ssl3_read_n	proc near		; CODE XREF: _ssl3_get_record+B7p
					; _ssl3_get_record+164p

Dst		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 0Ch
		call	__chkstk
		push	ebx
		mov	ebx, [esp+10h+Src]
		test	ebx, ebx
		jg	short loc_14B6
		mov	eax, ebx
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_14B6:				; CODE XREF: _ssl3_read_n+11j
		push	ebp
		push	edi
		mov	edi, [esp+18h+arg_0]
		mov	ebp, [edi+58h]
		add	ebp, 0ECh ; 'Ï'
		cmp	dword ptr [ebp+0], 0
		jnz	short loc_14E2
		push	edi
		call	_ssl3_setup_read_buffer
		add	esp, 4
		test	eax, eax
		jnz	short loc_14E2
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_14E2:				; CODE XREF: _ssl3_read_n+2Dj
					; _ssl3_read_n+3Aj
		mov	ecx, [ebp+0]
		mov	edx, 3
		sub	edx, ecx
		and	edx, 7
		cmp	[esp+18h+arg_C], 0
		push	esi
		mov	esi, [ebp+0Ch]
		mov	[esp+1Ch+var_8], edx
		jnz	short loc_1559
		test	esi, esi
		jz	short loc_1546
		test	edx, edx
		jz	short loc_1549
		cmp	esi, 5
		jl	short loc_1549
		mov	eax, [ebp+8]
		add	eax, ecx
		mov	[esp+1Ch+Src], eax
		cmp	byte ptr [eax],	17h
		jnz	short loc_1549
		movzx	ecx, byte ptr [eax+3]
		movzx	eax, byte ptr [eax+4]
		shl	ecx, 8
		or	ecx, eax
		cmp	ecx, 80h ; 'Ä'
		jl	short loc_1549
		mov	eax, [ebp+0]
		push	esi		; Size
		push	[esp+20h+Src]	; Src
		add	eax, edx
		push	eax		; Dst
		call	dword ptr ds:__imp__memmove
		mov	edx, [esp+28h+var_8]
		add	esp, 0Ch

loc_1546:				; CODE XREF: _ssl3_read_n+64j
		mov	[ebp+8], edx

loc_1549:				; CODE XREF: _ssl3_read_n+68j
					; _ssl3_read_n+6Dj ...
		mov	eax, [ebp+8]
		add	eax, [ebp+0]
		mov	[edi+4Ch], eax
		mov	dword ptr [edi+50h], 0

loc_1559:				; CODE XREF: _ssl3_read_n+60j
		mov	eax, [edi+8]
		mov	eax, [eax+64h]
		test	byte ptr [eax+38h], 8
		jz	short loc_1596
		test	esi, esi
		jnz	short loc_1579
		cmp	[esp+1Ch+arg_C], esi
		jz	short loc_1596
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1579:				; CODE XREF: _ssl3_read_n+CBj
		jle	short loc_1596
		cmp	ebx, esi
		jle	short loc_159A
		mov	ebx, esi
		add	[edi+50h], ebx
		sub	esi, ebx
		add	[ebp+8], ebx
		mov	eax, ebx
		mov	[ebp+0Ch], esi
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1596:				; CODE XREF: _ssl3_read_n+C7j
					; _ssl3_read_n+D1j ...
		cmp	esi, ebx
		jl	short loc_15AF

loc_159A:				; CODE XREF: _ssl3_read_n+E1j
		add	[edi+50h], ebx
		sub	esi, ebx
		add	[ebp+8], ebx
		mov	eax, ebx
		mov	[ebp+0Ch], esi
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_15AF:				; CODE XREF: _ssl3_read_n+FCj
		mov	eax, [edi+50h]
		mov	ecx, [edi+4Ch]
		mov	[esp+1Ch+Src], eax
		mov	eax, [ebp+0]
		add	eax, edx
		mov	[esp+1Ch+Dst], eax
		cmp	ecx, eax
		jz	short loc_15ED
		mov	eax, [esp+1Ch+Src]
		add	eax, esi
		push	eax		; Size
		push	ecx		; Src
		push	[esp+24h+Dst]	; Dst
		call	dword ptr ds:__imp__memmove
		mov	eax, [esp+28h+Dst]
		add	esp, 0Ch
		mov	[edi+4Ch], eax
		mov	eax, [esp+1Ch+var_8]
		add	eax, [esp+1Ch+Src]
		mov	[ebp+8], eax

loc_15ED:				; CODE XREF: _ssl3_read_n+128j
		mov	ecx, [ebp+4]
		sub	ecx, [ebp+8]
		cmp	ebx, ecx
		jle	short loc_161D
		push	0E6h ; 'Ê'
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	44h ; 'D'
		push	95h ; 'ï'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_161D:				; CODE XREF: _ssl3_read_n+159j
		cmp	dword ptr [edi+60h], 0
		jnz	short loc_1635
		mov	eax, [edi+8]
		mov	eax, [eax+64h]
		test	byte ptr [eax+38h], 8
		jnz	short loc_1635
		mov	[esp+1Ch+var_8], ebx
		jmp	short loc_164C
; ---------------------------------------------------------------------------

loc_1635:				; CODE XREF: _ssl3_read_n+185j
					; _ssl3_read_n+191j
		mov	eax, [esp+1Ch+arg_8]
		cmp	eax, ebx
		cmovl	eax, ebx
		cmp	eax, ecx
		cmovg	eax, ecx
		mov	[esp+1Ch+var_8], eax
		nop	dword ptr [eax+eax+00h]

loc_164C:				; CODE XREF: _ssl3_read_n+197j
					; _ssl3_read_n+1F9j
		push	0		; dwErrCode
		call	dword ptr ds:__imp__SetLastError@4 ; SetLastError(x)
		mov	ecx, [edi+0Ch]
		test	ecx, ecx
		jz	short loc_16BB
		mov	eax, [esp+1Ch+var_8]
		sub	eax, esi
		mov	dword ptr [edi+18h], 3
		push	eax
		mov	eax, [esp+20h+Dst]
		add	eax, [esp+20h+Src]
		add	eax, esi
		push	eax
		push	ecx
		call	_BIO_read
		add	esp, 0Ch
		mov	[esp+1Ch+var_4], eax
		test	eax, eax
		jle	short loc_16DE
		add	esi, eax
		mov	eax, [edi+8]
		mov	eax, [eax+64h]
		test	byte ptr [eax+38h], 8
		jnz	short loc_1699
		cmp	esi, ebx
		jl	short loc_164C
		jmp	short loc_169F
; ---------------------------------------------------------------------------

loc_1699:				; CODE XREF: _ssl3_read_n+1F5j
		cmp	ebx, esi
		jle	short loc_169F
		mov	ebx, esi

loc_169F:				; CODE XREF: _ssl3_read_n+1FBj
					; _ssl3_read_n+1FFj
		add	[ebp+8], ebx
		sub	esi, ebx
		mov	[ebp+0Ch], esi
		mov	eax, ebx
		add	[edi+50h], ebx
		pop	esi
		mov	dword ptr [edi+18h], 1
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_16BB:				; CODE XREF: _ssl3_read_n+1BDj
		push	101h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	0D3h ; '”'
		push	95h ; 'ï'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		or	ebx, 0FFFFFFFFh
		jmp	short loc_16E2
; ---------------------------------------------------------------------------

loc_16DE:				; CODE XREF: _ssl3_read_n+1E7j
		mov	ebx, [esp+1Ch+var_4]

loc_16E2:				; CODE XREF: _ssl3_read_n+240j
		mov	[ebp+0Ch], esi
		test	byte ptr [edi+104h], 10h
		jz	short loc_170B
		mov	eax, [edi+8]
		mov	eax, [eax+64h]
		test	byte ptr [eax+38h], 8
		jnz	short loc_170B
		mov	eax, [esp+1Ch+Src]
		add	eax, esi
		jnz	short loc_170B
		push	edi
		call	_ssl3_release_read_buffer
		add	esp, 4

loc_170B:				; CODE XREF: _ssl3_read_n+250j
					; _ssl3_read_n+25Cj ...
		pop	esi
		pop	edi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 0Ch
		retn
_ssl3_read_n	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1718h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl3_send_alert
_ssl3_send_alert proc near		; CODE XREF: _ssl3_get_record+3CDp
					; _ssl3_get_record+496p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	[esp+8+arg_8]
		mov	eax, [esi+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+30h]
		call	eax
		add	esp, 4
		mov	ebx, eax
		cmp	dword ptr [esi], 300h
		jnz	short loc_1744
		cmp	ebx, 46h ; 'F'
		jnz	short loc_1744
		lea	ebx, [eax-1Eh]
		jmp	short loc_1748
; ---------------------------------------------------------------------------

loc_1744:				; CODE XREF: _ssl3_send_alert+20j
					; _ssl3_send_alert+25j
		test	ebx, ebx
		js	short loc_17A6

loc_1748:				; CODE XREF: _ssl3_send_alert+2Aj
		cmp	[esp+8+arg_4], 2
		jnz	short loc_1768
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_1768
		push	eax
		push	dword ptr [esi+0E4h]
		call	_SSL_CTX_remove_session
		add	esp, 8

loc_1768:				; CODE XREF: _ssl3_send_alert+35j
					; _ssl3_send_alert+3Fj
		mov	eax, [esi+58h]
		mov	ecx, [esp+8+arg_4]
		mov	dword ptr [eax+18Ch], 1
		mov	eax, [esi+58h]
		mov	[eax+190h], cl
		mov	eax, [esi+58h]
		mov	[eax+191h], bl
		mov	eax, [esi+58h]
		cmp	dword ptr [eax+108h], 0
		jnz	short loc_17A6
		mov	eax, [esi+8]
		push	esi
		mov	eax, [eax+3Ch]
		call	eax
		add	esp, 4
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_17A6:				; CODE XREF: _ssl3_send_alert+2Ej
					; _ssl3_send_alert+7Dj
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
_ssl3_send_alert endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 17ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl3_write_bytes
_ssl3_write_bytes proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		mov	ebp, [esi+58h]
		mov	dword ptr [esi+18h], 1
		cmp	dword ptr [ebp+164h], 7FFFFFFFh
		jbe	short loc_17E0
		push	offset ??_C@_0BH@ECBDHNMC@s?9?$DOs3?9?$DOwnum?5?$DM?$DN?5INT_MAX?$AA@ ;	"s->s3->wnum <=	INT_MAX"
		push	287h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		call	_OpenSSLDie
		add	esp, 0Ch

loc_17E0:				; CODE XREF: _ssl3_write_bytes+1Bj
		mov	eax, [esi+58h]
		push	esi
		mov	ebx, [eax+164h]
		mov	dword ptr [eax+164h], 0
		call	_SSL_state
		add	esp, 4
		test	eax, 3000h
		jz	short loc_1841
		cmp	dword ptr [esi+1Ch], 0
		jnz	short loc_1841
		mov	eax, [esi+20h]
		push	esi
		call	eax
		add	esp, 4
		test	eax, eax
		js	loc_1966
		jnz	short loc_1841
		push	290h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	0E5h ; 'Â'
		push	9Eh ; 'û'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1841:				; CODE XREF: _ssl3_write_bytes+55j
					; _ssl3_write_bytes+5Bj ...
		push	edi
		mov	edi, [esp+10h+arg_C]
		cmp	edi, ebx
		jge	short loc_1870
		push	29Fh
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	10Fh
		push	9Eh ; 'û'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1870:				; CODE XREF: _ssl3_write_bytes+9Cj
		cmp	dword ptr [ebp+108h], 0
		mov	edx, [esp+10h+arg_4]
		mov	ebp, [esp+10h+arg_8]
		jz	short loc_18B4
		mov	eax, [esi+58h]
		push	dword ptr [eax+168h]
		lea	eax, [ebx+ebp]
		push	eax
		push	edx
		push	esi
		call	_ssl3_write_pending
		mov	ecx, eax
		add	esp, 10h
		test	ecx, ecx
		jg	short loc_18AE
		mov	eax, [esi+58h]
		pop	edi
		pop	esi
		pop	ebp
		mov	[eax+164h], ebx
		mov	eax, ecx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_18AE:				; CODE XREF: _ssl3_write_bytes+F0j
		mov	edx, [esp+10h+arg_4]
		add	ebx, ecx

loc_18B4:				; CODE XREF: _ssl3_write_bytes+D3j
		cmp	ebx, edi
		jnz	short loc_18DD
		test	byte ptr [esi+104h], 10h
		jz	short loc_18D6
		mov	ecx, [esi+8]
		mov	ecx, [ecx+64h]
		test	byte ptr [ecx+38h], 8
		jnz	short loc_18D6
		push	esi
		call	_ssl3_release_write_buffer
		add	esp, 4

loc_18D6:				; CODE XREF: _ssl3_write_bytes+113j
					; _ssl3_write_bytes+11Fj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_18DD:				; CODE XREF: _ssl3_write_bytes+10Aj
		sub	edi, ebx

loc_18DF:				; CODE XREF: _ssl3_write_bytes+175j
		mov	eax, [esi+114h]
		mov	ecx, edi
		cmp	edi, eax
		push	0		; int
		cmova	ecx, eax
		lea	eax, [ebx+ebp]
		push	ecx		; Size
		push	eax		; Src
		push	edx		; int
		push	esi		; int
		call	_do_ssl3_write
		mov	ebp, eax
		add	esp, 14h
		test	ebp, ebp
		jle	short loc_195A
		cmp	ebp, edi
		jz	short loc_1923
		mov	edx, [esp+10h+arg_4]
		cmp	edx, 17h
		jnz	short loc_1919
		test	byte ptr [esi+104h], 1
		jnz	short loc_1923

loc_1919:				; CODE XREF: _ssl3_write_bytes+162j
		sub	edi, ebp
		add	ebx, ebp
		mov	ebp, [esp+10h+arg_8]
		jmp	short loc_18DF
; ---------------------------------------------------------------------------

loc_1923:				; CODE XREF: _ssl3_write_bytes+159j
					; _ssl3_write_bytes+16Bj
		mov	eax, [esi+58h]
		mov	dword ptr [eax+0E4h], 0
		cmp	ebp, edi
		jnz	short loc_1952
		test	byte ptr [esi+104h], 10h
		jz	short loc_1952
		mov	eax, [esi+8]
		mov	eax, [eax+64h]
		test	byte ptr [eax+38h], 8
		jnz	short loc_1952
		push	esi
		call	_ssl3_release_write_buffer
		add	esp, 4

loc_1952:				; CODE XREF: _ssl3_write_bytes+186j
					; _ssl3_write_bytes+18Fj ...
		pop	edi
		pop	esi
		lea	eax, [ebx+ebp]
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_195A:				; CODE XREF: _ssl3_write_bytes+155j
		mov	eax, [esi+58h]
		pop	edi
		mov	[eax+164h], ebx
		mov	eax, ebp

loc_1966:				; CODE XREF: _ssl3_write_bytes+68j
		pop	esi
		pop	ebp
		pop	ebx
		retn
_ssl3_write_bytes endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 196Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl3_write_pending
_ssl3_write_pending proc near		; CODE XREF: _do_ssl3_write+33p
					; _do_ssl3_write+396p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	esi, [edi+58h]
		mov	eax, [esi+168h]
		cmp	eax, [esp+8+arg_C]
		jg	loc_1A6D
		mov	eax, [esi+174h]
		cmp	eax, [esp+8+arg_8]
		jz	short loc_199E
		test	byte ptr [edi+104h], 2
		jz	loc_1A6D

loc_199E:				; CODE XREF: _ssl3_write_pending+23j
		mov	eax, [esi+16Ch]
		cmp	eax, [esp+8+arg_4]
		jnz	loc_1A6D
		push	ebx
		mov	ebx, dword ptr ds:__imp__SetLastError@4	; SetLastError(x)
		nop	dword ptr [eax+00000000h]

loc_19BC:				; CODE XREF: _ssl3_write_pending+BFj
		push	0		; dwErrCode
		call	ebx ; SetLastError(x) ;	SetLastError(x)
		mov	ecx, [edi+10h]
		test	ecx, ecx
		jz	short loc_19EE
		mov	dword ptr [edi+18h], 2
		push	dword ptr [esi+108h]
		mov	eax, [esi+104h]
		add	eax, [esi+0FCh]
		push	eax
		push	ecx
		call	_BIO_write
		add	esp, 0Ch
		mov	ecx, eax
		jmp	short loc_1A0F
; ---------------------------------------------------------------------------

loc_19EE:				; CODE XREF: _ssl3_write_pending+59j
		push	455h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	80h ; 'Ä'
		push	9Fh ; 'ü'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		or	ecx, 0FFFFFFFFh

loc_1A0F:				; CODE XREF: _ssl3_write_pending+80j
		mov	eax, [esi+108h]
		cmp	ecx, eax
		jz	short loc_1A49
		test	ecx, ecx
		jle	short loc_1A2D
		add	[esi+104h], ecx
		sub	eax, ecx
		mov	[esi+108h], eax
		jmp	short loc_19BC
; ---------------------------------------------------------------------------

loc_1A2D:				; CODE XREF: _ssl3_write_pending+AFj
		mov	eax, [edi+8]
		mov	eax, [eax+64h]
		test	byte ptr [eax+38h], 8
		jz	short loc_1A43
		mov	dword ptr [esi+108h], 0

loc_1A43:				; CODE XREF: _ssl3_write_pending+CBj
		pop	ebx
		pop	edi
		mov	eax, ecx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1A49:				; CODE XREF: _ssl3_write_pending+ABj
		add	[esi+104h], ecx
		mov	dword ptr [esi+108h], 0
		mov	eax, [edi+58h]
		pop	ebx
		mov	dword ptr [edi+18h], 1
		pop	edi
		mov	eax, [eax+170h]
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1A6D:				; CODE XREF: _ssl3_write_pending+13j
					; _ssl3_write_pending+2Cj ...
		push	449h
		push	offset ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ ; ".\\ssl\\s3_pkt.c"
		push	7Fh ; ''
		push	9Fh ; 'ü'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		retn
_ssl3_write_pending endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1A90h
; COMDAT (pick any)
		public ??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@
; `string'
??_C@_0P@IHAHLMDM@?4?2ssl?2s3_pkt?4c?$AA@ db '.\ssl\s3_pkt.c',0
					; DATA XREF: _do_ssl3_write+158o
					; _do_ssl3_write+27Bo ...
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1AA0h
; COMDAT (pick any)
		public ??_C@_0BM@LDNPIHEI@mac_size?5?$DM?$DN?5EVP_MAX_MD_SIZE?$AA@
; `string'
??_C@_0BM@LDNPIHEI@mac_size?5?$DM?$DN?5EVP_MAX_MD_SIZE?$AA@ db 'mac_size <= EVP_MAX_MD_SIZE',0
					; DATA XREF: _ssl3_get_record+1FDo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1ABCh
; COMDAT (pick any)
		public ??_C@_0BH@ECBDHNMC@s?9?$DOs3?9?$DOwnum?5?$DM?$DN?5INT_MAX?$AA@
; `string'
??_C@_0BH@ECBDHNMC@s?9?$DOs3?9?$DOwnum?5?$DM?$DN?5INT_MAX?$AA@ db 's->s3->wnum <= INT_MAX',0
					; DATA XREF: _ssl3_write_bytes+1Do
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1AD4h
; COMDAT (pick any)
		public ??_C@_02DPKJAMEF@?$CFd?$AA@
; `string'
??_C@_02DPKJAMEF@?$CFd?$AA@ db 25h, 64h, 0 ; DATA XREF:	_ssl3_read_bytes+6EFo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1AD8h
; COMDAT (pick any)
		public ??_C@_0BC@PCIPMNJJ@SSL?5alert?5number?5?$AA@
; `string'
??_C@_0BC@PCIPMNJJ@SSL?5alert?5number?5?$AA@ db	'SSL alert number ',0
					; DATA XREF: _ssl3_read_bytes+705o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; void *__cdecl	_memmove(void *Dst, const void *Src, size_t Size)
		extrn __imp__memmove:near ; CODE XREF: _ssl3_read_n+9Dp
					; _ssl3_read_n+136p
					; DATA XREF: ...
; void __stdcall SetLastError(DWORD dwErrCode)
		extrn __imp__SetLastError@4:near ; CODE	XREF: _ssl3_read_n+1B2p
					; _ssl3_write_pending+52p
					; DATA XREF: ...
		extrn _OpenSSLDie:near	; CODE XREF: _ssl3_get_record+20Cp
					; _ssl3_write_bytes+2Cp
		extrn _CRYPTO_memcmp:near ; CODE XREF: _ssl3_get_record+2A6p
		extrn _COMP_compress_block:near	; CODE XREF: _ssl3_do_compress+22p
		extrn _COMP_expand_block:near ;	CODE XREF: _ssl3_do_uncompress+22p
					; _ssl3_get_record+31Ep
		extrn _BIO_set_flags:near ; CODE XREF: _ssl3_read_bytes+36Dp
					; _ssl3_read_bytes+5FDp ...
		extrn _BIO_clear_flags:near ; CODE XREF: _ssl3_read_bytes+365p
					; _ssl3_read_bytes+5F5p ...
		extrn _BIO_read:near	; CODE XREF: _ssl3_read_n+1D9p
		extrn _BIO_write:near	; CODE XREF: _ssl3_write_pending+76p
		extrn _BIO_ctrl:near	; CODE XREF: _ssl3_dispatch_alert+56p
		extrn _BIO_snprintf:near ; CODE	XREF: _ssl3_read_bytes+6FBp
		extrn _ERR_put_error:near ; CODE XREF: _do_ssl3_write+163p
					; _do_ssl3_write+289p ...
		extrn _ERR_add_error_data:near ; CODE XREF: _ssl3_read_bytes+70Bp
		extrn _EVP_MD_size:near	; CODE XREF: _do_ssl3_write+CCp
					; _ssl3_get_record+1EEp
		extrn _EVP_MD_CTX_md:near ; CODE XREF: _do_ssl3_write+B4p
					; _do_ssl3_write+C6p ...
		extrn _EVP_CIPHER_CTX_iv_length:near ; CODE XREF: _do_ssl3_write+23Bp
		extrn _EVP_CIPHER_CTX_flags:near ; CODE	XREF: _do_ssl3_write+223p
					; _ssl3_get_record+22Ap ...
		extrn _SSL_get_rbio:near ; CODE	XREF: _ssl3_read_bytes+35Bp
					; _ssl3_read_bytes+5EBp ...
		extrn _SSL_CTX_remove_session:near ; CODE XREF:	_ssl3_read_bytes+71Fp
					; _ssl3_send_alert+48p
		extrn _SSL_state:near	; CODE XREF: _ssl3_read_bytes+138p
					; _ssl3_read_bytes+2DEp ...
		extrn _ssl3_renegotiate:near ; CODE XREF: _ssl3_read_bytes+309p
		extrn _ssl3_renegotiate_check:near ; CODE XREF:	_ssl3_read_bytes+30Fp
		extrn _ssl3_setup_read_buffer:near ; CODE XREF:	_ssl3_read_bytes+3Bp
					; _ssl3_read_n+30p
		extrn _ssl3_setup_write_buffer:near ; CODE XREF: _do_ssl3_write+67p
		extrn _ssl3_release_read_buffer:near ; CODE XREF: _ssl3_read_bytes+994p
					; _ssl3_read_n+267p
		extrn _ssl3_release_write_buffer:near ;	CODE XREF: _ssl3_write_bytes+122p
					; _ssl3_write_bytes+19Ep
		extrn _tls1_process_heartbeat:near ; CODE XREF:	_ssl3_read_bytes+886p
		extrn _ssl3_cbc_copy_mac:near ;	CODE XREF: _ssl3_get_record+267p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _ssl3_get_record+81p
					; _ssl3_get_record+4CEp ...
		extrn __chkstk:near	; CODE XREF: _do_ssl3_write:loc_5p
					; _ssl3_get_record+5p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _do_ssl3_write+2AEp
					; _ssl3_read_bytes+955p
		extrn ___security_cookie:near ;	DATA XREF: _ssl3_get_record+Ar
					; _ssl3_read_bytes+Ar


		end
