;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	B6A255949FBD1C28155DC8313504886D
; Input	CRC32 :	161F623D

; File Name   :	C:\compspace\Diff\openssl\obj\a_strnid.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
_stable		dd ?			; DATA XREF: _ASN1_STRING_TABLE_add+Br
					; _ASN1_STRING_TABLE_add+21w ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 4
_global_mask	dd 2000h		; DATA XREF: _ASN1_STRING_get_default_maskr
					; _ASN1_STRING_set_by_NID+39r ...
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 8
_tbl_standard	dd 0Dh,	1, 40h,	2806h, 0 ; DATA	XREF: _ASN1_STRING_TABLE_get+2Ao
dword_1C	dd 0Eh,	4 dup(2), 0Fh, 1, 80h, 2806h, 0
		dd 10h,	1, 80h,	2806h, 0
dword_58	dd 11h,	1, 40h,	2806h, 0 ; DATA	XREF: .rdata:000000D0o
					; .rdata:000000E4o ...
		dd 12h,	1, 40h,	2806h, 0
		dd offset dword_1C+14h
		dd 1, 80h, 10h,	2, 31h,	1, 0FFFFFFFFh, 2816h, 0
		dd offset dword_1C+1Ah
dword_AC	dd 1, 0FFFFFFFFh, 2816h, 0 ; DATA XREF:	.rdata:00000148o
		dd offset dword_1C+1Bh
		dd 1, 0FFFFFFFFh, 2806h, 0
		dd offset dword_58+0Bh
		dd 1, 8000h, 2806h, 0
		dd offset dword_58+0Ch
		dd 1, 8000h, 2806h, 0
		dd offset dword_58+0Dh
		dd 1, 8000h, 2806h, 0
		dd offset dword_58+11h
		dd 1, 40h, 2 dup(2), 9Ch, 2 dup(0FFFFFFFFh), 800h, 2, 0ADh
		dd 1, 8000h, 2806h, 0
		dd offset dword_AC+2
		dd 2 dup(0FFFFFFFFh), 2	dup(2),	187h, 1, 0FFFFFFFFh, 10h
		dd 2, 1A1h, 2 dup(0FFFFFFFFh), 800h, 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 184h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_STRING_TABLE_add
_ASN1_STRING_TABLE_add proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_10]
		xor	bl, bl
		and	esi, 0FFFFFFFEh
		cmp	ds:_stable, 0
		jnz	short loc_1CE
		push	offset _sk_table_cmp
		call	_sk_new
		add	esp, 4
		mov	ds:_stable, eax
		test	eax, eax
		jnz	short loc_1CE
		push	0F2h ; 'Ú'
		push	offset ??_C@_0BJ@LMDJKOGB@?4?2crypto?2asn1?2a_strnid?4c?$AA@ ; ".\\crypto\\asn1\\a_strnid.c"
		push	41h ; 'A'
		push	81h ; 'Å'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1CE:				; CODE XREF: _ASN1_STRING_TABLE_add+12j
					; _ASN1_STRING_TABLE_add+28j
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		push	edi
		call	_ASN1_STRING_TABLE_get
		mov	ecx, eax
		add	esp, 4
		test	ecx, ecx
		jnz	short loc_229
		push	0F6h ; 'ˆ'
		push	offset ??_C@_0BJ@LMDJKOGB@?4?2crypto?2asn1?2a_strnid?4c?$AA@ ; ".\\crypto\\asn1\\a_strnid.c"
		push	14h
		call	_CRYPTO_malloc
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jnz	short loc_21D
		push	0F8h ; '¯'
		push	offset ??_C@_0BJ@LMDJKOGB@?4?2crypto?2asn1?2a_strnid?4c?$AA@ ; ".\\crypto\\asn1\\a_strnid.c"
		push	41h ; 'A'
		push	81h ; 'Å'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_21D:				; CODE XREF: _ASN1_STRING_TABLE_add+76j
		or	esi, 1
		mov	[ecx], edi
		mov	[ecx+10h], esi
		mov	bl, 1
		jmp	short loc_234
; ---------------------------------------------------------------------------

loc_229:				; CODE XREF: _ASN1_STRING_TABLE_add+5Cj
		mov	eax, [ecx+10h]
		and	eax, 1
		or	eax, esi
		mov	[ecx+10h], eax

loc_234:				; CODE XREF: _ASN1_STRING_TABLE_add+A3j
		mov	eax, [esp+0Ch+arg_4]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_240
		mov	[ecx+4], eax

loc_240:				; CODE XREF: _ASN1_STRING_TABLE_add+B7j
		mov	eax, [esp+0Ch+arg_8]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_24C
		mov	[ecx+8], eax

loc_24C:				; CODE XREF: _ASN1_STRING_TABLE_add+C3j
		mov	eax, [esp+0Ch+arg_C]
		mov	[ecx+0Ch], eax
		test	bl, bl
		jz	short loc_266
		push	ecx
		push	ds:_stable
		call	_sk_push
		add	esp, 8

loc_266:				; CODE XREF: _ASN1_STRING_TABLE_add+D1j
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
_ASN1_STRING_TABLE_add endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 270h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_STRING_TABLE_cleanup
_ASN1_STRING_TABLE_cleanup proc	near
		mov	eax, ds:_stable
		test	eax, eax
		jz	short locret_291
		push	offset _st_free
		push	eax
		mov	ds:_stable, 0
		call	_sk_pop_free
		add	esp, 8

locret_291:				; CODE XREF: _ASN1_STRING_TABLE_cleanup+7j
		retn
_ASN1_STRING_TABLE_cleanup endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 294h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_STRING_TABLE_get
_ASN1_STRING_TABLE_get proc near	; CODE XREF: _ASN1_STRING_TABLE_add+50p
					; _ASN1_STRING_set_by_NID+24p

var_18		= dword	ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 18h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+18h+var_4], eax
		mov	eax, [esp+18h+arg_0]
		push	offset _table_cmp_BSEARCH_CMP_FN
		push	14h
		push	13h
		mov	[esp+24h+var_18], eax
		lea	eax, [esp+24h+var_18]
		push	offset _tbl_standard
		push	eax
		call	_OBJ_bsearch_
		add	esp, 14h
		test	eax, eax
		jnz	short loc_30A
		mov	eax, ds:_stable
		test	eax, eax
		jnz	short loc_2EA

loc_2D9:				; CODE XREF: _ASN1_STRING_TABLE_get+65j
		xor	eax, eax
		mov	ecx, [esp+18h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_2EA:				; CODE XREF: _ASN1_STRING_TABLE_get+43j
		lea	ecx, [esp+18h+var_18]
		push	ecx
		push	eax
		call	_sk_find
		add	esp, 8
		test	eax, eax
		js	short loc_2D9
		push	eax
		push	ds:_stable
		call	_sk_value
		add	esp, 8

loc_30A:				; CODE XREF: _ASN1_STRING_TABLE_get+3Aj
		mov	ecx, [esp+18h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
_ASN1_STRING_TABLE_get endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 31Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_STRING_get_default_mask
_ASN1_STRING_get_default_mask proc near
		mov	eax, _global_mask
		retn
_ASN1_STRING_get_default_mask endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 324h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_STRING_set_by_NID
_ASN1_STRING_set_by_NID	proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 4
		call	__chkstk
		mov	eax, [esp+4+arg_0]
		test	eax, eax
		push	esi
		push	[esp+8+arg_10]
		lea	esi, [esp+0Ch+var_4]
		mov	[esp+0Ch+var_4], 0
		cmovnz	esi, eax
		call	_ASN1_STRING_TABLE_get
		add	esp, 4
		test	eax, eax
		jz	short loc_381
		test	byte ptr [eax+10h], 2
		mov	ecx, [eax+0Ch]
		jnz	short loc_363
		and	ecx, _global_mask

loc_363:				; CODE XREF: _ASN1_STRING_set_by_NID+37j
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		push	ecx
		push	[esp+14h+arg_C]
		push	[esp+18h+arg_8]
		push	[esp+1Ch+arg_4]
		push	esi
		call	_ASN1_mbstring_ncopy
		add	esp, 1Ch
		jmp	short loc_3A1
; ---------------------------------------------------------------------------

loc_381:				; CODE XREF: _ASN1_STRING_set_by_NID+2Ej
		mov	eax, _global_mask
		and	eax, 2806h
		push	eax
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	esi
		call	_ASN1_mbstring_copy
		add	esp, 14h

loc_3A1:				; CODE XREF: _ASN1_STRING_set_by_NID+5Bj
		test	eax, eax
		jg	short loc_3AA
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_3AA:				; CODE XREF: _ASN1_STRING_set_by_NID+7Fj
		mov	eax, [esi]
		pop	esi
		pop	ecx
		retn
_ASN1_STRING_set_by_NID	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_STRING_set_default_mask
_ASN1_STRING_set_default_mask proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	_global_mask, eax
		retn
_ASN1_STRING_set_default_mask endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl ASN1_STRING_set_default_mask_asc(char *Str1)
		public _ASN1_STRING_set_default_mask_asc
_ASN1_STRING_set_default_mask_asc proc near

EndPtr		= dword	ptr -4
Str1		= dword	ptr  4

		mov	eax, 4
		call	__chkstk
		push	esi
		mov	esi, [esp+8+Str1]
		push	5		; MaxCount
		push	offset ??_C@_05BILGCKAD@MASK?3?$AA@ ; "MASK:"
		push	esi		; Str1
		call	dword ptr ds:__imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_409
		add	esi, 5
		cmp	[esi], al
		jz	short loc_404
		push	eax		; Radix
		lea	eax, [esp+0Ch+EndPtr]
		push	eax		; EndPtr
		push	esi		; Str
		call	dword ptr ds:__imp__strtoul
		mov	ecx, [esp+14h+EndPtr]
		add	esp, 0Ch
		cmp	byte ptr [ecx],	0
		jz	loc_504

loc_404:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+29j
					; _ASN1_STRING_set_default_mask_asc+13Fj
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_409:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+22j
		mov	ecx, offset ??_C@_07ECKBECDA@nombstr?$AA@ ; "nombstr"
		mov	eax, esi

loc_410:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+6Ej
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_430
		test	dl, dl
		jz	short loc_42C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_430
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_410

loc_42C:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+5Cj
		xor	eax, eax
		jmp	short loc_435
; ---------------------------------------------------------------------------

loc_430:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+58j
					; _ASN1_STRING_set_default_mask_asc+64j
		sbb	eax, eax
		or	eax, 1

loc_435:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+72j
		test	eax, eax
		jnz	short loc_44B
		mov	eax, 0FFFFD7FFh
		mov	_global_mask, eax
		mov	eax, 1
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_44B:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+7Bj
		mov	ecx, offset ??_C@_04IMMIJLHO@pkix?$AA@ ; "pkix"
		mov	eax, esi

loc_452:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+B0j
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_472
		test	dl, dl
		jz	short loc_46E
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_472
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_452

loc_46E:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+9Ej
		xor	eax, eax
		jmp	short loc_477
; ---------------------------------------------------------------------------

loc_472:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+9Aj
					; _ASN1_STRING_set_default_mask_asc+A6j
		sbb	eax, eax
		or	eax, 1

loc_477:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+B4j
		test	eax, eax
		jnz	short loc_48D
		mov	eax, 0FFFFFFFBh
		mov	_global_mask, eax
		mov	eax, 1
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_48D:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+BDj
		mov	ecx, offset ??_C@_08PEDMJOOJ@utf8only?$AA@ ; "utf8only"
		mov	eax, esi

loc_494:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+F2j
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_4B4
		test	dl, dl
		jz	short loc_4B0
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_4B4
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_494

loc_4B0:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+E0j
		xor	eax, eax
		jmp	short loc_4B9
; ---------------------------------------------------------------------------

loc_4B4:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+DCj
					; _ASN1_STRING_set_default_mask_asc+E8j
		sbb	eax, eax
		or	eax, 1

loc_4B9:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+F6j
		test	eax, eax
		jnz	short loc_4CF
		mov	eax, 2000h
		mov	_global_mask, eax
		mov	eax, 1
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_4CF:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+FFj
		mov	eax, offset ??_C@_07DLHCIBDH@default?$AA@ ; "default"

loc_4D4:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+132j
		mov	cl, [esi]
		cmp	cl, [eax]
		jnz	short loc_4F4
		test	cl, cl
		jz	short loc_4F0
		mov	cl, [esi+1]
		cmp	cl, [eax+1]
		jnz	short loc_4F4
		add	esi, 2
		add	eax, 2
		test	cl, cl
		jnz	short loc_4D4

loc_4F0:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+120j
		xor	eax, eax
		jmp	short loc_4F9
; ---------------------------------------------------------------------------

loc_4F4:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+11Cj
					; _ASN1_STRING_set_default_mask_asc+128j
		sbb	eax, eax
		or	eax, 1

loc_4F9:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+136j
		test	eax, eax
		jnz	loc_404
		or	eax, 0FFFFFFFFh

loc_504:				; CODE XREF: _ASN1_STRING_set_default_mask_asc+42j
		mov	_global_mask, eax
		mov	eax, 1
		pop	esi
		pop	ecx
		retn
_ASN1_STRING_set_default_mask_asc endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 514h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_OBJ_bsearch_table proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset _table_cmp_BSEARCH_CMP_FN
		push	14h
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	_OBJ_bsearch_
		add	esp, 14h
		retn
_OBJ_bsearch_table endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 530h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_sk_table_cmp	proc near		; DATA XREF: _ASN1_STRING_TABLE_add+14o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	edx, [eax]
		mov	eax, [esp+arg_4]
		mov	ecx, [eax]
		mov	eax, [edx]
		sub	eax, [ecx]
		retn
_sk_table_cmp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 544h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_st_free	proc near		; DATA XREF: _ASN1_STRING_TABLE_cleanup+9o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	byte ptr [eax+10h], 1
		jz	short locret_557
		mov	[esp+arg_0], eax
		jmp	_CRYPTO_free
; ---------------------------------------------------------------------------

locret_557:				; CODE XREF: _st_free+8j
		retn
_st_free	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 558h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_table_cmp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	eax, [eax]
		sub	eax, [ecx]
		retn
_table_cmp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 568h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_table_cmp_BSEARCH_CMP_FN proc near	; DATA XREF: _ASN1_STRING_TABLE_get+19o
					; _OBJ_bsearch_tableo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	eax, [eax]
		sub	eax, [ecx]
		retn
_table_cmp_BSEARCH_CMP_FN endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 578h
; COMDAT (pick any)
		public ??_C@_05BILGCKAD@MASK?3?$AA@
; char `string'[]
??_C@_05BILGCKAD@MASK?3?$AA@ db	'MASK:',0 ; DATA XREF: _ASN1_STRING_set_default_mask_asc+11o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 580h
; COMDAT (pick any)
		public ??_C@_07ECKBECDA@nombstr?$AA@
; `string'
??_C@_07ECKBECDA@nombstr?$AA@ db 'nombstr',0
					; DATA XREF: _ASN1_STRING_set_default_mask_asc:loc_409o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 588h
; COMDAT (pick any)
		public ??_C@_04IMMIJLHO@pkix?$AA@
; `string'
??_C@_04IMMIJLHO@pkix?$AA@ db 'pkix',0  ; DATA XREF: _ASN1_STRING_set_default_mask_asc:loc_44Bo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 590h
; COMDAT (pick any)
		public ??_C@_08PEDMJOOJ@utf8only?$AA@
; `string'
??_C@_08PEDMJOOJ@utf8only?$AA@ db 'utf8only',0
					; DATA XREF: _ASN1_STRING_set_default_mask_asc:loc_48Do
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 59Ch
; COMDAT (pick any)
		public ??_C@_07DLHCIBDH@default?$AA@
; `string'
??_C@_07DLHCIBDH@default?$AA@ db 'default',0
					; DATA XREF: _ASN1_STRING_set_default_mask_asc:loc_4CFo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5A4h
; COMDAT (pick any)
		public ??_C@_0BJ@LMDJKOGB@?4?2crypto?2asn1?2a_strnid?4c?$AA@
; `string'
??_C@_0BJ@LMDJKOGB@?4?2crypto?2asn1?2a_strnid?4c?$AA@ db '.\crypto\asn1\a_strnid.c',0
					; DATA XREF: _ASN1_STRING_TABLE_add+2Fo
					; _ASN1_STRING_TABLE_add+63o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; unsigned __int32 __cdecl _strtoul(const char *Str, char **EndPtr, int	Radix)
		extrn __imp__strtoul:near ; CODE XREF: _ASN1_STRING_set_default_mask_asc+32p
					; DATA XREF: _ASN1_STRING_set_default_mask_asc+32r
; int __cdecl _strncmp(const char *Str1, const char *Str2, size_t MaxCount)
		extrn __imp__strncmp:near ; CODE XREF: _ASN1_STRING_set_default_mask_asc+17p
					; DATA XREF: _ASN1_STRING_set_default_mask_asc+17r
		extrn _sk_value:near	; CODE XREF: _ASN1_STRING_TABLE_get+6Ep
		extrn _sk_new:near	; CODE XREF: _ASN1_STRING_TABLE_add+19p
		extrn _sk_pop_free:near	; CODE XREF: _ASN1_STRING_TABLE_cleanup+19p
		extrn _sk_find:near	; CODE XREF: _ASN1_STRING_TABLE_get+5Bp
		extrn _sk_push:near	; CODE XREF: _ASN1_STRING_TABLE_add+DAp
		extrn _CRYPTO_malloc:near ; CODE XREF: _ASN1_STRING_TABLE_add+6Ap
		extrn _CRYPTO_free:near	; CODE XREF: _st_free+Ej
		extrn _ERR_put_error:near ; CODE XREF: _ASN1_STRING_TABLE_add+3Dp
					; _ASN1_STRING_TABLE_add+8Bp
		extrn _ASN1_mbstring_copy:near ; CODE XREF: _ASN1_STRING_set_by_NID+75p
		extrn _ASN1_mbstring_ncopy:near	; CODE XREF: _ASN1_STRING_set_by_NID+53p
		extrn _OBJ_bsearch_:near ; CODE	XREF: _ASN1_STRING_TABLE_get+30p
					; _OBJ_bsearch_table+13p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _ASN1_STRING_TABLE_get+4Dp
					; _ASN1_STRING_TABLE_get+7Cp
		extrn __chkstk:near	; CODE XREF: _ASN1_STRING_TABLE_get+5p
					; _ASN1_STRING_set_by_NID+5p ...
		extrn ___security_cookie:near ;	DATA XREF: _ASN1_STRING_TABLE_get+Ar


		end
