;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	B3D241B403A64052E57C86922530BFEC
; Input	CRC32 :	A81E45F6

; File Name   :	C:\compspace\Diff\openssl\obj\ec_pmeth.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_ec_init	proc near		; CODE XREF: _pkey_ec_copy+6p
					; DATA XREF: .rdata:0000098Co

arg_0		= dword	ptr  4

		push	5Eh ; '^'
		push	offset ??_C@_0BH@FJHCLIDF@?4?2crypto?2ec?2ec_pmeth?4c?$AA@ ; ".\\crypto\\ec\\ec_pmeth.c"
		push	20h ; ' '
		call	_CRYPTO_malloc
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jnz	short loc_18
		retn
; ---------------------------------------------------------------------------

loc_18:					; CODE XREF: _pkey_ec_init+15j
		mov	eax, [esp+arg_0]
		mov	dword ptr [ecx], 0
		mov	dword ptr [ecx+4], 0
		mov	word ptr [ecx+0Ch], 1FFh
		mov	dword ptr [ecx+8], 0
		mov	dword ptr [ecx+10h], 0
		mov	dword ptr [ecx+1Ch], 0
		mov	dword ptr [ecx+14h], 0
		mov	dword ptr [ecx+18h], 0
		mov	[eax+14h], ecx
		mov	eax, 1
		retn
_pkey_ec_init	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_ec_copy	proc near		; DATA XREF: .rdata:00000990o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	esi
		call	_pkey_ec_init
		add	esp, 4
		test	eax, eax
		jnz	short loc_70
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_70:					; CODE XREF: _pkey_ec_copy+10j
		mov	eax, [esp+4+arg_4]
		mov	esi, [esi+14h]
		push	edi
		mov	edi, [eax+14h]
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_90
		push	eax
		call	_EC_GROUP_dup
		add	esp, 4
		mov	[esi], eax
		test	eax, eax
		jz	short loc_D9

loc_90:					; CODE XREF: _pkey_ec_copy+23j
		mov	eax, [edi+4]
		mov	[esi+4], eax
		mov	eax, [edi+8]
		test	eax, eax
		jz	short loc_AD
		push	eax
		call	_EC_KEY_dup
		add	esp, 4
		mov	[esi+8], eax
		test	eax, eax
		jz	short loc_D9

loc_AD:					; CODE XREF: _pkey_ec_copy+3Fj
		mov	al, [edi+0Dh]
		mov	[esi+0Dh], al
		mov	eax, [edi+10h]
		mov	[esi+10h], eax
		mov	eax, [edi+1Ch]
		mov	[esi+1Ch], eax
		mov	eax, [edi+14h]
		test	eax, eax
		jz	short loc_DE
		push	dword ptr [edi+18h]
		push	eax
		call	_BUF_memdup
		add	esp, 8
		mov	[esi+14h], eax
		test	eax, eax
		jnz	short loc_E5

loc_D9:					; CODE XREF: _pkey_ec_copy+32j
					; _pkey_ec_copy+4Fj
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_DE:					; CODE XREF: _pkey_ec_copy+68j
		mov	dword ptr [esi+14h], 0

loc_E5:					; CODE XREF: _pkey_ec_copy+7Bj
		mov	eax, [edi+18h]
		mov	[esi+18h], eax
		mov	eax, 1
		pop	edi
		pop	esi
		retn
_pkey_ec_copy	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_ec_cleanup proc near		; DATA XREF: .rdata:00000994o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [eax+14h]
		test	esi, esi
		jz	short loc_138
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10F
		push	eax
		call	_EC_GROUP_free
		add	esp, 4

loc_10F:				; CODE XREF: _pkey_ec_cleanup+10j
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_11F
		push	eax
		call	_EC_KEY_free
		add	esp, 4

loc_11F:				; CODE XREF: _pkey_ec_cleanup+20j
		mov	eax, [esi+14h]
		test	eax, eax
		jz	short loc_12F
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_12F:				; CODE XREF: _pkey_ec_cleanup+30j
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_138:				; CODE XREF: _pkey_ec_cleanup+Aj
		pop	esi
		retn
_pkey_ec_cleanup endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 13Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_ec_sign	proc near		; DATA XREF: .rdata:000009ACo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		cmp	[esp+arg_4], 0
		mov	eax, [esp+arg_0]
		push	ebp
		push	esi
		mov	ebp, [eax+14h]
		mov	eax, [eax+8]
		mov	esi, [eax+14h]
		jnz	short loc_169
		push	esi
		call	_ECDSA_size
		mov	ecx, [esp+0Ch+arg_8]
		add	esp, 4
		pop	esi
		mov	[ecx], eax
		mov	eax, 1
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_169:				; CODE XREF: _pkey_ec_sign+14j
		push	edi
		push	esi
		call	_ECDSA_size
		mov	edi, [esp+10h+arg_8]
		add	esp, 4
		cmp	[edi], eax
		jnb	short loc_19C
		push	0ABh ; '«'
		push	offset ??_C@_0BH@FJHCLIDF@?4?2crypto?2ec?2ec_pmeth?4c?$AA@ ; ".\\crypto\\ec\\ec_pmeth.c"
		push	64h ; 'd'
		push	0DAh ; 'Ú'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax

loc_198:				; DATA XREF: .rdata:_ec_pkey_metho
		pop	edi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_19C:				; CODE XREF: _pkey_ec_sign+3Dj
		mov	eax, [ebp+4]
		test	eax, eax
		jz	short loc_1AE
		push	eax
		call	_EVP_MD_type
		add	esp, 4
		jmp	short loc_1B3
; ---------------------------------------------------------------------------

loc_1AE:				; CODE XREF: _pkey_ec_sign+65j
		mov	eax, 40h ; '@'

loc_1B3:				; CODE XREF: _pkey_ec_sign+70j
		push	esi
		lea	ecx, [esp+10h+arg_0]
		push	ecx
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_10]
		push	[esp+1Ch+arg_C]
		push	eax
		call	_ECDSA_sign
		add	esp, 18h
		test	eax, eax
		jle	short loc_1DD
		mov	eax, [esp+0Ch+arg_0]
		mov	[edi], eax
		mov	eax, 1

loc_1DD:				; CODE XREF: _pkey_ec_sign+94j
		pop	edi
		pop	esi
		pop	ebp
		retn
_pkey_ec_sign	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_ec_verify	proc near		; DATA XREF: .rdata:000009B4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_0]
		push	esi
		mov	ecx, [eax+14h]
		mov	eax, [eax+8]
		mov	esi, [eax+14h]
		mov	eax, [ecx+4]
		test	eax, eax
		jz	short loc_204
		push	eax
		call	_EVP_MD_type
		add	esp, 4
		jmp	short loc_209
; ---------------------------------------------------------------------------

loc_204:				; CODE XREF: _pkey_ec_verify+13j
		mov	eax, 40h ; '@'

loc_209:				; CODE XREF: _pkey_ec_verify+1Ej
		push	esi
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_10]
		push	[esp+14h+arg_C]
		push	eax
		call	_ECDSA_verify
		add	esp, 18h
		pop	esi
		retn
_pkey_ec_verify	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 228h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_ec_kdf_derive proc near		; DATA XREF: .rdata:000009E4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	esi
		xor	ebp, ebp
		mov	esi, [ebx+14h]
		cmp	byte ptr [esi+0Dh], 1
		jnz	short loc_24F
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		push	ebx
		call	_pkey_ec_derive
		add	esp, 0Ch
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_24F:				; CODE XREF: _pkey_ec_kdf_derive+10j
		mov	eax, [esp+0Ch+arg_8]
		cmp	[esp+0Ch+arg_4], ebp
		jnz	short loc_267
		mov	ecx, [esi+1Ch]
		pop	esi
		pop	ebp
		mov	[eax], ecx
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_267:				; CODE XREF: _pkey_ec_kdf_derive+2Fj
		mov	eax, [eax]
		cmp	eax, [esi+1Ch]
		jz	short loc_274

loc_26E:				; CODE XREF: _pkey_ec_kdf_derive+5Ej
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_274:				; CODE XREF: _pkey_ec_kdf_derive+44j
		lea	eax, [esp+0Ch+arg_0]
		push	eax
		push	0
		push	ebx
		call	_pkey_ec_derive
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_26E
		push	edi
		push	105h
		push	offset ??_C@_0BH@FJHCLIDF@?4?2crypto?2ec?2ec_pmeth?4c?$AA@ ; ".\\crypto\\ec\\ec_pmeth.c"
		push	[esp+18h+arg_0]
		call	_CRYPTO_malloc
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_2AA
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2AA:				; CODE XREF: _pkey_ec_kdf_derive+7Bj
		lea	eax, [esp+10h+arg_0]
		push	eax
		push	edi
		push	ebx
		call	_pkey_ec_derive
		mov	ebx, [esp+1Ch+arg_0]
		add	esp, 0Ch
		test	eax, eax
		jz	short $err$14
		push	dword ptr [esi+10h]
		mov	eax, [esp+14h+arg_8]
		push	dword ptr [esi+18h]
		push	dword ptr [esi+14h]
		push	ebx
		push	edi
		push	dword ptr [eax]
		push	[esp+28h+arg_4]
		call	_ECDH_KDF_X9_62
		add	esp, 1Ch
		mov	ecx, 1
		test	eax, eax
		cmovnz	ebp, ecx

$err$14:				; CODE XREF: _pkey_ec_kdf_derive+97j
		push	ebx
		push	edi
		call	_OPENSSL_cleanse
		push	edi
		call	_CRYPTO_free
		add	esp, 0Ch
		mov	eax, ebp
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_pkey_ec_kdf_derive endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 300h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_ec_ctrl	proc near		; DATA XREF: .rdata:000009E8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		push	esi
		push	edi
		mov	esi, [ecx+14h]
		cmp	eax, 1001h
		jg	loc_413
		jz	loc_3C5
		dec	eax
		cmp	eax, 0Ch	; switch 13 cases
		ja	$LN50		; jumptable 0000032F default case
		movzx	eax, ds:$LN47[eax]
		jmp	ds:$LN52[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN40:					; CODE XREF: _pkey_ec_ctrl+2Fj
					; DATA XREF: .text$mn:$LN52o
		mov	edi, [esp+8+arg_C] ; jumptable 0000032F	case 0
		push	edi
		call	_EVP_MD_type
		add	esp, 4
		cmp	eax, 40h ; '@'
		jz	short loc_3A9
		push	edi
		call	_EVP_MD_type
		add	esp, 4
		cmp	eax, 1A0h
		jz	short loc_3A9
		push	edi
		call	_EVP_MD_type
		add	esp, 4
		cmp	eax, 2A3h
		jz	short loc_3A9
		push	edi
		call	_EVP_MD_type
		add	esp, 4
		cmp	eax, 2A0h
		jz	short loc_3A9
		push	edi
		call	_EVP_MD_type
		add	esp, 4
		cmp	eax, 2A1h
		jz	short loc_3A9
		push	edi
		call	_EVP_MD_type
		add	esp, 4
		cmp	eax, 2A2h
		jz	short loc_3A9
		push	184h
		push	offset ??_C@_0BH@FJHCLIDF@?4?2crypto?2ec?2ec_pmeth?4c?$AA@ ; ".\\crypto\\ec\\ec_pmeth.c"
		push	8Ah ; ''
		jmp	short loc_3E6
; ---------------------------------------------------------------------------

loc_3A9:				; CODE XREF: _pkey_ec_ctrl+46j
					; _pkey_ec_ctrl+56j ...
		mov	[esi+4], edi
		mov	eax, 1
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN42:					; CODE XREF: _pkey_ec_ctrl+2Fj
					; DATA XREF: .text$mn:$LN52o
		mov	eax, [esp+8+arg_C] ; jumptable 0000032F	case 12
		mov	ecx, [esi+4]
		pop	edi
		pop	esi
		mov	[eax], ecx
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_3C5:				; CODE XREF: _pkey_ec_ctrl+18j
		push	[esp+8+arg_8]
		call	_EC_GROUP_new_by_curve_name
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_3FA
		push	121h
		push	offset ??_C@_0BH@FJHCLIDF@?4?2crypto?2ec?2ec_pmeth?4c?$AA@ ; ".\\crypto\\ec\\ec_pmeth.c"
		push	8Dh ; ''

loc_3E6:				; CODE XREF: _pkey_ec_ctrl+A7j
		push	0C5h ; 'Å'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3FA:				; CODE XREF: _pkey_ec_ctrl+D5j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_409
		push	eax
		call	_EC_GROUP_free
		add	esp, 4

loc_409:				; CODE XREF: _pkey_ec_ctrl+FEj
		mov	[esi], edi

$LN43:					; CODE XREF: _pkey_ec_ctrl+2Fj
					; DATA XREF: .text$mn:$LN52o
		pop	edi		; jumptable 0000032F cases 1,4,6,10
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_413:				; CODE XREF: _pkey_ec_ctrl+12j
		add	eax, 0FFFFEFFEh	; switch 9 cases
		cmp	eax, 8
		ja	$LN50		; jumptable 0000032F default case
		jmp	ds:$LN53[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN7:					; CODE XREF: _pkey_ec_ctrl+121j
					; DATA XREF: .text$mn:$LN53o
		mov	eax, [esi]	; jumptable 00000421 case 4098
		test	eax, eax
		jnz	short loc_451
		push	12Bh
		push	offset ??_C@_0BH@FJHCLIDF@?4?2crypto?2ec?2ec_pmeth?4c?$AA@ ; ".\\crypto\\ec\\ec_pmeth.c"
		push	8Bh ; ''
		push	0C5h ; 'Å'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_451:				; CODE XREF: _pkey_ec_ctrl+12Cj
		push	[esp+8+arg_8]
		push	eax
		call	_EC_GROUP_set_asn1_flag
		add	esp, 8
		mov	eax, 1
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN9:					; CODE XREF: _pkey_ec_ctrl+121j
					; DATA XREF: .text$mn:$LN53o
		push	ebx		; jumptable 00000421 case 4099
		mov	ebx, [esp+0Ch+arg_8]
		cmp	ebx, 0FFFFFFFEh
		jnz	short loc_496
		mov	al, [esi+0Ch]
		cmp	al, 0FFh
		jz	short loc_47E
		pop	ebx
		pop	edi
		movsx	eax, al
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_47E:				; CODE XREF: _pkey_ec_ctrl+175j
		mov	eax, [ecx+8]
		push	dword ptr [eax+14h]
		call	_EC_KEY_get_flags
		add	esp, 4
		shr	eax, 0Ch
		and	eax, 1
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_496:				; CODE XREF: _pkey_ec_ctrl+16Ej
		lea	eax, [ebx+1]
		cmp	eax, 2
		ja	loc_533
		mov	[esi+0Ch], bl
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_513
		mov	eax, [ecx+8]
		mov	edx, [eax+14h]
		mov	ecx, [edx+4]
		test	ecx, ecx
		jz	short loc_533
		cmp	dword ptr [ecx+20h], 1
		jnz	short loc_4CB
		mov	eax, [ecx+1Ch]
		cmp	dword ptr [eax], 1
		jnz	short loc_4CB
		cmp	dword ptr [ecx+28h], 0
		jz	short loc_52A

loc_4CB:				; CODE XREF: _pkey_ec_ctrl+1BBj
					; _pkey_ec_ctrl+1C3j
		cmp	dword ptr [esi+8], 0
		jnz	short loc_4E5
		push	edx
		call	_EC_KEY_dup
		add	esp, 4
		mov	[esi+8], eax
		test	eax, eax
		jnz	short loc_4E5
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4E5:				; CODE XREF: _pkey_ec_ctrl+1CFj
					; _pkey_ec_ctrl+1DFj
		push	1000h
		push	dword ptr [esi+8]
		test	ebx, ebx
		jz	short loc_502
		call	_EC_KEY_set_flags
		add	esp, 8
		mov	eax, 1
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_502:				; CODE XREF: _pkey_ec_ctrl+1EFj
		call	_EC_KEY_clear_flags
		add	esp, 8
		mov	eax, 1
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_513:				; CODE XREF: _pkey_ec_ctrl+1A8j
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_52A
		push	eax
		call	_EC_KEY_free
		add	esp, 4
		mov	dword ptr [esi+8], 0

loc_52A:				; CODE XREF: _pkey_ec_ctrl+1C9j
					; _pkey_ec_ctrl+218j
		pop	ebx
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_533:				; CODE XREF: _pkey_ec_ctrl+19Cj
					; _pkey_ec_ctrl+1B5j
		pop	ebx
		pop	edi
		mov	eax, 0FFFFFFFEh
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN27:					; CODE XREF: _pkey_ec_ctrl+121j
					; DATA XREF: .text$mn:$LN53o
		mov	eax, [esp+8+arg_8] ; jumptable 00000421	case 4100
		cmp	eax, 0FFFFFFFEh
		jnz	short loc_54C
		movsx	eax, byte ptr [esi+0Dh]
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_54C:				; CODE XREF: _pkey_ec_ctrl+243j
		cmp	eax, 1
		jz	short loc_55E
		cmp	eax, 2
		jz	short loc_55E

$LN50:					; CODE XREF: _pkey_ec_ctrl+22j
					; _pkey_ec_ctrl+2Fj ...
		pop	edi		; jumptable 0000032F default case
		mov	eax, 0FFFFFFFEh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_55E:				; CODE XREF: _pkey_ec_ctrl+24Fj
					; _pkey_ec_ctrl+254j
		mov	[esi+0Dh], al
		mov	eax, 1
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN30:					; CODE XREF: _pkey_ec_ctrl+121j
					; DATA XREF: .text$mn:$LN53o
		mov	eax, [esp+8+arg_C] ; jumptable 00000421	case 4101
		mov	[esi+10h], eax
		mov	eax, 1
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN31:					; CODE XREF: _pkey_ec_ctrl+121j
					; DATA XREF: .text$mn:$LN53o
		mov	eax, [esp+8+arg_C] ; jumptable 00000421	case 4102
		mov	ecx, [esi+10h]
		pop	edi
		pop	esi
		mov	[eax], ecx
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

$LN32:					; CODE XREF: _pkey_ec_ctrl+121j
					; DATA XREF: .text$mn:$LN53o
		mov	eax, [esp+8+arg_8] ; jumptable 00000421	case 4103
		test	eax, eax
		jle	short $LN50	; jumptable 0000032F default case
		mov	[esi+1Ch], eax
		mov	eax, 1
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN34:					; CODE XREF: _pkey_ec_ctrl+121j
					; DATA XREF: .text$mn:$LN53o
		mov	eax, [esp+8+arg_C] ; jumptable 00000421	case 4104
		mov	ecx, [esi+1Ch]
		pop	edi
		pop	esi
		mov	[eax], ecx
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

$LN35:					; CODE XREF: _pkey_ec_ctrl+121j
					; DATA XREF: .text$mn:$LN53o
		mov	eax, [esi+14h]	; jumptable 00000421 case 4105
		test	eax, eax
		jz	short loc_5BD
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_5BD:				; CODE XREF: _pkey_ec_ctrl+2B2j
		mov	eax, [esp+8+arg_C]
		xor	ecx, ecx
		test	eax, eax
		mov	[esi+14h], eax
		pop	edi
		cmovnz	ecx, [esp+4+arg_8]
		mov	eax, 1
		mov	[esi+18h], ecx
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN39:					; CODE XREF: _pkey_ec_ctrl+121j
					; DATA XREF: .text$mn:$LN53o
		mov	ecx, [esp+8+arg_C] ; jumptable 00000421	case 4106
		mov	edx, [esi+14h]
		pop	edi
		mov	[ecx], edx
		mov	eax, [esi+18h]
		pop	esi
		retn
_pkey_ec_ctrl	endp

; ---------------------------------------------------------------------------
		align 4
$LN52		dd offset $LN40		; DATA XREF: _pkey_ec_ctrl+2Fr
		dd offset $LN43		; jump table for switch	statement
		dd offset $LN42
		dd offset $LN50
$LN47		db	0,     1,     3,     3 ; DATA XREF: _pkey_ec_ctrl+28r
		db	1,     3,     1,     3 ; indirect table	for switch statement
		db	3,     3,     1,     3
		db	2
		align 4
$LN53		dd offset $LN7		; DATA XREF: _pkey_ec_ctrl+121r
		dd offset $LN9		; jump table for switch	statement
		dd offset $LN27
		dd offset $LN30
		dd offset $LN31
		dd offset $LN32
		dd offset $LN34
		dd offset $LN35
		dd offset $LN39
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 62Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl pkey_ec_ctrl_str(int, int, char *Str)
_pkey_ec_ctrl_str proc near		; DATA XREF: .rdata:000009ECo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Str		= dword	ptr  0Ch

		mov	ecx, [esp+arg_4]
		mov	edx, offset ??_C@_0BC@BLCJLNNM@ec_paramgen_curve?$AA@ ;	"ec_paramgen_curve"
		mov	eax, ecx
		push	ebx
		nop	dword ptr [eax+00h]

loc_63C:				; CODE XREF: _pkey_ec_ctrl_str+2Aj
		mov	bl, [eax]
		cmp	bl, [edx]
		jnz	short loc_65C
		test	bl, bl
		jz	short loc_658
		mov	bl, [eax+1]
		cmp	bl, [edx+1]
		jnz	short loc_65C
		add	eax, 2
		add	edx, 2
		test	bl, bl
		jnz	short loc_63C

loc_658:				; CODE XREF: _pkey_ec_ctrl_str+18j
		xor	eax, eax
		jmp	short loc_661
; ---------------------------------------------------------------------------

loc_65C:				; CODE XREF: _pkey_ec_ctrl_str+14j
					; _pkey_ec_ctrl_str+20j
		sbb	eax, eax
		or	eax, 1

loc_661:				; CODE XREF: _pkey_ec_ctrl_str+2Ej
		test	eax, eax
		jnz	short loc_6D2
		push	esi
		mov	esi, [esp+8+Str]
		push	esi
		call	_EC_curve_nist2nid
		add	esp, 4
		test	eax, eax
		jnz	short loc_6B4
		push	esi
		call	_OBJ_sn2nid
		add	esp, 4
		test	eax, eax
		jnz	short loc_6B4
		push	esi
		call	_OBJ_ln2nid
		add	esp, 4
		test	eax, eax
		jnz	short loc_6B4
		push	1A6h
		push	offset ??_C@_0BH@FJHCLIDF@?4?2crypto?2ec?2ec_pmeth?4c?$AA@ ; ".\\crypto\\ec\\ec_pmeth.c"
		push	8Dh ; ''
		push	0C6h ; 'Æ'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B4:				; CODE XREF: _pkey_ec_ctrl_str+49j
					; _pkey_ec_ctrl_str+56j ...
		push	0
		push	eax
		push	1001h
		push	6
		push	198h
		push	[esp+1Ch+arg_0]
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6D2:				; CODE XREF: _pkey_ec_ctrl_str+37j
		mov	edx, offset ??_C@_0N@CHHABLAI@ec_param_enc?$AA@	; "ec_param_enc"
		mov	eax, ecx
		nop	dword ptr [eax]

loc_6DC:				; CODE XREF: _pkey_ec_ctrl_str+CAj
		mov	bl, [eax]
		cmp	bl, [edx]
		jnz	short loc_6FC
		test	bl, bl
		jz	short loc_6F8
		mov	bl, [eax+1]
		cmp	bl, [edx+1]
		jnz	short loc_6FC
		add	eax, 2
		add	edx, 2
		test	bl, bl
		jnz	short loc_6DC

loc_6F8:				; CODE XREF: _pkey_ec_ctrl_str+B8j
		xor	eax, eax
		jmp	short loc_701
; ---------------------------------------------------------------------------

loc_6FC:				; CODE XREF: _pkey_ec_ctrl_str+B4j
					; _pkey_ec_ctrl_str+C0j
		sbb	eax, eax
		or	eax, 1

loc_701:				; CODE XREF: _pkey_ec_ctrl_str+CEj
		test	eax, eax
		jnz	loc_794
		mov	ecx, [esp+4+Str]
		mov	edx, offset ??_C@_08FCANLLBJ@explicit?$AA@ ; "explicit"
		mov	eax, ecx

loc_714:				; CODE XREF: _pkey_ec_ctrl_str+102j
		mov	bl, [eax]
		cmp	bl, [edx]
		jnz	short loc_734
		test	bl, bl
		jz	short loc_730
		mov	bl, [eax+1]
		cmp	bl, [edx+1]
		jnz	short loc_734
		add	eax, 2
		add	edx, 2
		test	bl, bl
		jnz	short loc_714

loc_730:				; CODE XREF: _pkey_ec_ctrl_str+F0j
		xor	eax, eax
		jmp	short loc_739
; ---------------------------------------------------------------------------

loc_734:				; CODE XREF: _pkey_ec_ctrl_str+ECj
					; _pkey_ec_ctrl_str+F8j
		sbb	eax, eax
		or	eax, 1

loc_739:				; CODE XREF: _pkey_ec_ctrl_str+106j
		test	eax, eax
		jz	short loc_770
		mov	eax, offset ??_C@_0M@FBFAECBG@named_curve?$AA@ ; "named_curve"

loc_742:				; CODE XREF: _pkey_ec_ctrl_str+130j
		mov	dl, [ecx]
		cmp	dl, [eax]
		jnz	short loc_762
		test	dl, dl
		jz	short loc_75E
		mov	dl, [ecx+1]
		cmp	dl, [eax+1]
		jnz	short loc_762
		add	ecx, 2
		add	eax, 2
		test	dl, dl
		jnz	short loc_742

loc_75E:				; CODE XREF: _pkey_ec_ctrl_str+11Ej
		xor	eax, eax
		jmp	short loc_767
; ---------------------------------------------------------------------------

loc_762:				; CODE XREF: _pkey_ec_ctrl_str+11Aj
					; _pkey_ec_ctrl_str+126j
		sbb	eax, eax
		or	eax, 1

loc_767:				; CODE XREF: _pkey_ec_ctrl_str+134j
		test	eax, eax
		jnz	short loc_78D
		mov	eax, 1

loc_770:				; CODE XREF: _pkey_ec_ctrl_str+10Fj
		push	0
		push	eax
		push	1002h
		push	6
		push	198h
		push	[esp+18h+arg_0]
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_78D:				; CODE XREF: _pkey_ec_ctrl_str+13Dj
					; _pkey_ec_ctrl_str+217j
		mov	eax, 0FFFFFFFEh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_794:				; CODE XREF: _pkey_ec_ctrl_str+D7j
		mov	edx, offset ??_C@_0M@JAAKIKPH@ecdh_kdf_md?$AA@ ; "ecdh_kdf_md"
		mov	eax, ecx
		nop

loc_79C:				; CODE XREF: _pkey_ec_ctrl_str+18Aj
		mov	bl, [eax]
		cmp	bl, [edx]
		jnz	short loc_7BC
		test	bl, bl
		jz	short loc_7B8
		mov	bl, [eax+1]
		cmp	bl, [edx+1]
		jnz	short loc_7BC
		add	eax, 2
		add	edx, 2
		test	bl, bl
		jnz	short loc_79C

loc_7B8:				; CODE XREF: _pkey_ec_ctrl_str+178j
		xor	eax, eax
		jmp	short loc_7C1
; ---------------------------------------------------------------------------

loc_7BC:				; CODE XREF: _pkey_ec_ctrl_str+174j
					; _pkey_ec_ctrl_str+180j
		sbb	eax, eax
		or	eax, 1

loc_7C1:				; CODE XREF: _pkey_ec_ctrl_str+18Ej
		test	eax, eax
		jnz	short loc_817
		push	[esp+4+Str]
		call	_EVP_get_digestbyname
		add	esp, 4
		test	eax, eax
		jnz	short loc_7F7
		push	1B6h
		push	offset ??_C@_0BH@FJHCLIDF@?4?2crypto?2ec?2ec_pmeth?4c?$AA@ ; ".\\crypto\\ec\\ec_pmeth.c"
		push	97h ; ''
		push	0C6h ; 'Æ'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_7F7:				; CODE XREF: _pkey_ec_ctrl_str+1A7j
		push	eax
		push	0
		push	1005h
		push	400h
		push	198h
		push	[esp+18h+arg_0]
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_817:				; CODE XREF: _pkey_ec_ctrl_str+197j
		mov	eax, offset ??_C@_0BD@CPNABICB@ecdh_cofactor_mode?$AA@ ; "ecdh_cofactor_mode"

loc_81C:				; CODE XREF: _pkey_ec_ctrl_str+20Aj
		mov	dl, [ecx]
		cmp	dl, [eax]
		jnz	short loc_83C
		test	dl, dl
		jz	short loc_838
		mov	dl, [ecx+1]
		cmp	dl, [eax+1]
		jnz	short loc_83C
		add	ecx, 2
		add	eax, 2
		test	dl, dl
		jnz	short loc_81C

loc_838:				; CODE XREF: _pkey_ec_ctrl_str+1F8j
		xor	eax, eax
		jmp	short loc_841
; ---------------------------------------------------------------------------

loc_83C:				; CODE XREF: _pkey_ec_ctrl_str+1F4j
					; _pkey_ec_ctrl_str+200j
		sbb	eax, eax
		or	eax, 1

loc_841:				; CODE XREF: _pkey_ec_ctrl_str+20Ej
		test	eax, eax
		jnz	loc_78D
		push	[esp+4+Str]	; Str
		call	dword ptr ds:__imp__atoi
		push	0
		push	eax
		push	1003h
		push	400h
		push	198h
		push	[esp+1Ch+arg_0]
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 1Ch
		pop	ebx
		retn
_pkey_ec_ctrl_str endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 874h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_ec_paramgen proc near		; DATA XREF: .rdata:0000099Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	edi
		mov	edi, [eax+14h]
		cmp	dword ptr [edi], 0
		jnz	short loc_8A3
		push	1C9h
		push	offset ??_C@_0BH@FJHCLIDF@?4?2crypto?2ec?2ec_pmeth?4c?$AA@ ; ".\\crypto\\ec\\ec_pmeth.c"
		push	8Bh ; ''
		push	0DBh ; 'Û'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_8A3:				; CODE XREF: _pkey_ec_paramgen+Bj
		push	esi
		call	_EC_KEY_new
		mov	esi, eax
		test	esi, esi
		jnz	short loc_8B2
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_8B2:				; CODE XREF: _pkey_ec_paramgen+39j
		push	dword ptr [edi]
		push	esi
		call	_EC_KEY_set_group
		add	esp, 8
		mov	edi, eax
		push	esi
		test	edi, edi
		jz	short loc_8DA
		push	198h
		push	[esp+10h+arg_4]
		call	_EVP_PKEY_assign
		add	esp, 0Ch
		mov	eax, edi
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_8DA:				; CODE XREF: _pkey_ec_paramgen+4Ej
		call	_EC_KEY_free
		add	esp, 4
		mov	eax, edi
		pop	esi
		pop	edi
		retn
_pkey_ec_paramgen endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_ec_keygen	proc near		; DATA XREF: .rdata:000009A4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	esi
		mov	esi, [esp+8+arg_0]
		cmp	dword ptr [esi+8], 0
		mov	ebp, [esi+14h]
		jnz	short loc_920
		cmp	dword ptr [ebp+0], 0
		jnz	short loc_920
		push	1DCh
		push	offset ??_C@_0BH@FJHCLIDF@?4?2crypto?2ec?2ec_pmeth?4c?$AA@ ; ".\\crypto\\ec\\ec_pmeth.c"
		push	8Bh ; ''
		push	0C7h ; 'Ç'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_920:				; CODE XREF: _pkey_ec_keygen+Dj
					; _pkey_ec_keygen+13j
		push	ebx
		call	_EC_KEY_new
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_930
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_930:				; CODE XREF: _pkey_ec_keygen+42j
		push	edi
		mov	edi, [esp+10h+arg_4]
		push	ebx
		push	198h
		push	edi
		call	_EVP_PKEY_assign
		mov	eax, [esi+8]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_95E
		push	eax
		push	edi
		call	_EVP_PKEY_copy_parameters
		add	esp, 8
		test	eax, eax
		jnz	short loc_973
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_95E:				; CODE XREF: _pkey_ec_keygen+61j
		push	dword ptr [ebp+0]
		push	ebx
		call	_EC_KEY_set_group
		add	esp, 8
		test	eax, eax
		jnz	short loc_973
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_973:				; CODE XREF: _pkey_ec_keygen+6Fj
					; _pkey_ec_keygen+84j
		push	dword ptr [edi+14h]
		call	_EC_KEY_generate_key
		add	esp, 4
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		retn
_pkey_ec_keygen	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 984h
		public _ec_pkey_meth
_ec_pkey_meth	dd offset loc_198
		dd 0
		dd offset _pkey_ec_init
		dd offset _pkey_ec_copy
		dd offset _pkey_ec_cleanup
		dd 0
		dd offset _pkey_ec_paramgen
		dd 0
		dd offset _pkey_ec_keygen
		dd 0
		dd offset _pkey_ec_sign
		dd 0
		dd offset _pkey_ec_verify
		dd 0Bh dup(0)
		dd offset _pkey_ec_kdf_derive
		dd offset _pkey_ec_ctrl
		dd offset _pkey_ec_ctrl_str
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_ec_derive	proc near		; CODE XREF: _pkey_ec_kdf_derive+1Bp
					; _pkey_ec_kdf_derive+54p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		mov	ecx, [eax+8]
		mov	esi, [eax+14h]
		test	ecx, ecx
		jz	short loc_A71
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_A71
		mov	esi, [esi+8]
		test	esi, esi
		jnz	short loc_A10
		mov	esi, [ecx+14h]

loc_A10:				; CODE XREF: _pkey_ec_derive+1Bj
		cmp	[esp+4+arg_4], 0
		jnz	short loc_A3F
		push	esi
		call	_EC_KEY_get0_group
		push	eax
		call	_EC_GROUP_get_degree
		mov	ecx, [esp+0Ch+arg_8]
		add	eax, 7
		cdq
		add	esp, 8
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		mov	[ecx], eax
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_A3F:				; CODE XREF: _pkey_ec_derive+25j
		push	ebx
		push	dword ptr [eax+14h]
		call	_EC_KEY_get0_public_key
		mov	ebx, [esp+0Ch+arg_8]
		push	0
		push	esi
		push	eax
		push	dword ptr [ebx]
		push	[esp+1Ch+arg_4]
		call	_ECDH_compute_key
		add	esp, 18h
		test	eax, eax
		jg	short loc_A67
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_A67:				; CODE XREF: _pkey_ec_derive+70j
		mov	[ebx], eax
		mov	eax, 1
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_A71:				; CODE XREF: _pkey_ec_derive+Dj
					; _pkey_ec_derive+14j
		push	0D8h ; 'Ø'
		push	offset ??_C@_0BH@FJHCLIDF@?4?2crypto?2ec?2ec_pmeth?4c?$AA@ ; ".\\crypto\\ec\\ec_pmeth.c"
		push	8Ch ; ''
		push	0D9h ; 'Ù'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
_pkey_ec_derive	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A94h
; COMDAT (pick any)
		public ??_C@_0BH@FJHCLIDF@?4?2crypto?2ec?2ec_pmeth?4c?$AA@
; `string'
??_C@_0BH@FJHCLIDF@?4?2crypto?2ec?2ec_pmeth?4c?$AA@ db '.\crypto\ec\ec_pmeth.c',0
					; DATA XREF: _pkey_ec_init+2o
					; _pkey_ec_sign+44o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AACh
; COMDAT (pick any)
		public ??_C@_0BC@BLCJLNNM@ec_paramgen_curve?$AA@
; `string'
??_C@_0BC@BLCJLNNM@ec_paramgen_curve?$AA@ db 'ec_paramgen_curve',0
					; DATA XREF: _pkey_ec_ctrl_str+4o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AC0h
; COMDAT (pick any)
		public ??_C@_0N@CHHABLAI@ec_param_enc?$AA@
; `string'
??_C@_0N@CHHABLAI@ec_param_enc?$AA@ db 'ec_param_enc',0
					; DATA XREF: _pkey_ec_ctrl_str:loc_6D2o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AD0h
; COMDAT (pick any)
		public ??_C@_08FCANLLBJ@explicit?$AA@
; `string'
??_C@_08FCANLLBJ@explicit?$AA@ db 'explicit',0 ; DATA XREF: _pkey_ec_ctrl_str+E1o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ADCh
; COMDAT (pick any)
		public ??_C@_0M@FBFAECBG@named_curve?$AA@
; `string'
??_C@_0M@FBFAECBG@named_curve?$AA@ db 'named_curve',0 ; DATA XREF: _pkey_ec_ctrl_str+111o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AE8h
; COMDAT (pick any)
		public ??_C@_0M@JAAKIKPH@ecdh_kdf_md?$AA@
; `string'
??_C@_0M@JAAKIKPH@ecdh_kdf_md?$AA@ db 'ecdh_kdf_md',0
					; DATA XREF: _pkey_ec_ctrl_str:loc_794o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AF4h
; COMDAT (pick any)
		public ??_C@_0BD@CPNABICB@ecdh_cofactor_mode?$AA@
; `string'
??_C@_0BD@CPNABICB@ecdh_cofactor_mode?$AA@ db 'ecdh_cofactor_mode',0
					; DATA XREF: _pkey_ec_ctrl_str:loc_817o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; int __cdecl _atoi(const char *Str)
		extrn __imp__atoi:near	; CODE XREF: _pkey_ec_ctrl_str+221p
					; DATA XREF: _pkey_ec_ctrl_str+221r
		extrn _CRYPTO_malloc:near ; CODE XREF: _pkey_ec_init+9p
					; _pkey_ec_kdf_derive+6Fp
		extrn _CRYPTO_free:near	; CODE XREF: _pkey_ec_cleanup+33p
					; _pkey_ec_cleanup+3Cp	...
		extrn _OPENSSL_cleanse:near ; CODE XREF: _pkey_ec_kdf_derive+C2p
		extrn _BUF_memdup:near	; CODE XREF: _pkey_ec_copy+6Ep
		extrn _ERR_put_error:near ; CODE XREF: _pkey_ec_sign+52p
					; _pkey_ec_ctrl+EDp ...
		extrn _OBJ_ln2nid:near	; CODE XREF: _pkey_ec_ctrl_str+59p
		extrn _OBJ_sn2nid:near	; CODE XREF: _pkey_ec_ctrl_str+4Cp
		extrn _EVP_MD_type:near	; CODE XREF: _pkey_ec_sign+68p
					; _pkey_ec_verify+16p ...
		extrn _EVP_get_digestbyname:near ; CODE	XREF: _pkey_ec_ctrl_str+19Dp
		extrn _EVP_PKEY_assign:near ; CODE XREF: _pkey_ec_paramgen+59p
					; _pkey_ec_keygen+54p
		extrn _EVP_PKEY_copy_parameters:near ; CODE XREF: _pkey_ec_keygen+65p
		extrn _EVP_PKEY_CTX_ctrl:near ;	CODE XREF: _pkey_ec_ctrl_str+9Bp
					; _pkey_ec_ctrl_str+157p ...
		extrn _EC_GROUP_free:near ; CODE XREF: _pkey_ec_cleanup+13p
					; _pkey_ec_ctrl+101p
		extrn _EC_GROUP_dup:near ; CODE	XREF: _pkey_ec_copy+26p
		extrn _EC_GROUP_set_asn1_flag:near ; CODE XREF:	_pkey_ec_ctrl+156p
		extrn _EC_GROUP_get_degree:near	; CODE XREF: _pkey_ec_derive+2Ep
		extrn _EC_GROUP_new_by_curve_name:near ; CODE XREF: _pkey_ec_ctrl+C9p
		extrn _EC_curve_nist2nid:near ;	CODE XREF: _pkey_ec_ctrl_str+3Fp
		extrn _EC_KEY_new:near	; CODE XREF: _pkey_ec_paramgen+30p
					; _pkey_ec_keygen+39p
		extrn _EC_KEY_get_flags:near ; CODE XREF: _pkey_ec_ctrl+184p
		extrn _EC_KEY_set_flags:near ; CODE XREF: _pkey_ec_ctrl+1F1p
		extrn _EC_KEY_clear_flags:near ; CODE XREF: _pkey_ec_ctrl:loc_502p
		extrn _EC_KEY_free:near	; CODE XREF: _pkey_ec_cleanup+23p
					; _pkey_ec_ctrl+21Bp ...
		extrn _EC_KEY_dup:near	; CODE XREF: _pkey_ec_copy+42p
					; _pkey_ec_ctrl+1D2p
		extrn _EC_KEY_get0_group:near ;	CODE XREF: _pkey_ec_derive+28p
		extrn _EC_KEY_set_group:near ; CODE XREF: _pkey_ec_paramgen+41p
					; _pkey_ec_keygen+7Ap
		extrn _EC_KEY_get0_public_key:near ; CODE XREF:	_pkey_ec_derive+53p
		extrn _EC_KEY_generate_key:near	; CODE XREF: _pkey_ec_keygen+8Ep
		extrn _ECDSA_size:near	; CODE XREF: _pkey_ec_sign+17p
					; _pkey_ec_sign+2Fp
		extrn _ECDSA_sign:near	; CODE XREF: _pkey_ec_sign+8Ap
		extrn _ECDSA_verify:near ; CODE	XREF: _pkey_ec_verify+37p
		extrn _ECDH_compute_key:near ; CODE XREF: _pkey_ec_derive+66p
		extrn _ECDH_KDF_X9_62:near ; CODE XREF:	_pkey_ec_kdf_derive+AEp


		end
