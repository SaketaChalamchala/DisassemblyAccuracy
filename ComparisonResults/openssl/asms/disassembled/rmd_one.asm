;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	1884EBE1521C972DE8F312B2722A5BEF
; Input	CRC32 :	D76A19BB

; File Name   :	C:\compspace\Diff\openssl\obj\rmd_one.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RIPEMD160
_RIPEMD160	proc near

var_64		= byte ptr -64h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 64h ; 'd'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+64h+var_4], eax
		mov	eax, [esp+64h+arg_8]
		test	eax, eax
		push	esi
		mov	esi, offset ?m@?1??RIPEMD160@@9@9 ; `RIPEMD160'::`2'::m
		cmovnz	esi, eax
		lea	eax, [esp+68h+var_64]
		push	edi
		mov	edi, [esp+6Ch+arg_0]
		push	eax
		call	_RIPEMD160_Init
		add	esp, 4
		test	eax, eax
		jnz	short loc_4B
		pop	edi
		pop	esi
		mov	ecx, [esp+64h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
; ---------------------------------------------------------------------------

loc_4B:					; CODE XREF: _RIPEMD160+38j
		push	[esp+6Ch+arg_4]
		lea	eax, [esp+70h+var_64]
		push	edi
		push	eax
		call	_RIPEMD160_Update
		lea	eax, [esp+78h+var_64]
		push	eax
		push	esi
		call	_RIPEMD160_Final
		lea	eax, [esp+80h+var_64]
		push	60h ; '`'
		push	eax
		call	_OPENSSL_cleanse
		mov	ecx, [esp+88h+var_4]
		add	esp, 1Ch
		mov	eax, esi
		pop	edi
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
_RIPEMD160	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 8Ch
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
; `RIPEMD160'::`2'::m
?m@?1??RIPEMD160@@9@9 dd 5 dup(?)	; DATA XREF: _RIPEMD160+1Co
_bss		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _RIPEMD160_Init:near ; CODE XREF:	_RIPEMD160+2Ep
		extrn _RIPEMD160_Update:near ; CODE XREF: _RIPEMD160+55p
		extrn _RIPEMD160_Final:near ; CODE XREF: _RIPEMD160+60p
		extrn _OPENSSL_cleanse:near ; CODE XREF: _RIPEMD160+6Cp
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _RIPEMD160+42p
					; _RIPEMD160+81p
		extrn __chkstk:near	; CODE XREF: _RIPEMD160+5p
		extrn ___security_cookie:near ;	DATA XREF: _RIPEMD160+Ar


		end
