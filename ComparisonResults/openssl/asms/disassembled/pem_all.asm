;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	1DA2D6F56C71E7C5C248A822EBADA44D
; Input	CRC32 :	F727772E

; File Name   :	C:\compspace\Diff\openssl\obj\pem_all.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_DSAPrivateKey
_PEM_read_DSAPrivateKey	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	0
		push	[esp+10h+arg_0]
		call	_PEM_read_PrivateKey
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_1F
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1F:					; CODE XREF: _PEM_read_DSAPrivateKey+1Bj
		push	edi
		push	esi
		call	_EVP_PKEY_get1_DSA
		push	esi
		mov	edi, eax
		call	_EVP_PKEY_free
		add	esp, 8
		test	edi, edi
		jnz	short loc_3A
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3A:					; CODE XREF: _PEM_read_DSAPrivateKey+33j
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jz	short loc_4E
		push	dword ptr [esi]
		call	_DSA_free
		add	esp, 4
		mov	[esi], edi

loc_4E:					; CODE XREF: _PEM_read_DSAPrivateKey+40j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_PEM_read_DSAPrivateKey	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 54h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_DSA_PUBKEY
_PEM_read_DSA_PUBKEY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0L@PFAODDHO@PUBLIC?5KEY?$AA@ ; "PUBLIC KEY"
		push	offset _d2i_DSA_PUBKEY
		call	_PEM_ASN1_read
		add	esp, 18h
		retn
_PEM_read_DSA_PUBKEY endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 78h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_DSAparams
_PEM_read_DSAparams proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0P@BOAADPIE@DSA?5PARAMETERS?$AA@ ;	"DSA PARAMETERS"
		push	offset _d2i_DSAparams
		call	_PEM_ASN1_read
		add	esp, 18h
		retn
_PEM_read_DSAparams endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_ECPKParameters
_PEM_read_ECPKParameters proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0O@KGMDJJCL@EC?5PARAMETERS?$AA@ ; "EC PARAMETERS"
		push	offset _d2i_ECPKParameters
		call	_PEM_ASN1_read
		add	esp, 18h
		retn
_PEM_read_ECPKParameters endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_ECPrivateKey
_PEM_read_ECPrivateKey proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	0
		push	[esp+10h+arg_0]
		call	_PEM_read_PrivateKey
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_DF
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_DF:					; CODE XREF: _PEM_read_ECPrivateKey+1Bj
		push	edi
		push	esi
		call	_EVP_PKEY_get1_EC_KEY
		push	esi
		mov	edi, eax
		call	_EVP_PKEY_free
		add	esp, 8
		test	edi, edi
		jnz	short loc_FA
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_FA:					; CODE XREF: _PEM_read_ECPrivateKey+33j
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jz	short loc_10E
		push	dword ptr [esi]
		call	_EC_KEY_free
		add	esp, 4
		mov	[esi], edi

loc_10E:				; CODE XREF: _PEM_read_ECPrivateKey+40j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_PEM_read_ECPrivateKey endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 114h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_EC_PUBKEY
_PEM_read_EC_PUBKEY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0L@PFAODDHO@PUBLIC?5KEY?$AA@ ; "PUBLIC KEY"
		push	offset _d2i_EC_PUBKEY
		call	_PEM_ASN1_read
		add	esp, 18h
		retn
_PEM_read_EC_PUBKEY endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 138h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_NETSCAPE_CERT_SEQUENCE
_PEM_read_NETSCAPE_CERT_SEQUENCE proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0M@BFIJENPO@CERTIFICATE?$AA@ ; "CERTIFICATE"
		push	offset _d2i_NETSCAPE_CERT_SEQUENCE
		call	_PEM_ASN1_read
		add	esp, 18h
		retn
_PEM_read_NETSCAPE_CERT_SEQUENCE endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 15Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_PKCS7
_PEM_read_PKCS7	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_05BKMMPIPN@PKCS7?$AA@ ; "PKCS7"
		push	offset _d2i_PKCS7
		call	_PEM_ASN1_read
		add	esp, 18h
		retn
_PEM_read_PKCS7	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 180h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_PUBKEY
_PEM_read_PUBKEY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0L@PFAODDHO@PUBLIC?5KEY?$AA@ ; "PUBLIC KEY"
		push	offset _d2i_PUBKEY
		call	_PEM_ASN1_read
		add	esp, 18h
		retn
_PEM_read_PUBKEY endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_RSAPrivateKey
_PEM_read_RSAPrivateKey	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	0
		push	[esp+10h+arg_0]
		call	_PEM_read_PrivateKey
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_1C3
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1C3:				; CODE XREF: _PEM_read_RSAPrivateKey+1Bj
		push	edi
		push	esi
		call	_EVP_PKEY_get1_RSA
		push	esi
		mov	edi, eax
		call	_EVP_PKEY_free
		add	esp, 8
		test	edi, edi
		jnz	short loc_1DE
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1DE:				; CODE XREF: _PEM_read_RSAPrivateKey+33j
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jz	short loc_1F2
		push	dword ptr [esi]
		call	_RSA_free
		add	esp, 4
		mov	[esi], edi

loc_1F2:				; CODE XREF: _PEM_read_RSAPrivateKey+40j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_PEM_read_RSAPrivateKey	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_RSAPublicKey
_PEM_read_RSAPublicKey proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0P@EMAFKJEG@RSA?5PUBLIC?5KEY?$AA@ ; "RSA PUBLIC KEY"
		push	offset _d2i_RSAPublicKey
		call	_PEM_ASN1_read
		add	esp, 18h
		retn
_PEM_read_RSAPublicKey endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 21Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_RSA_PUBKEY
_PEM_read_RSA_PUBKEY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0L@PFAODDHO@PUBLIC?5KEY?$AA@ ; "PUBLIC KEY"
		push	offset _d2i_RSA_PUBKEY
		call	_PEM_ASN1_read
		add	esp, 18h
		retn
_PEM_read_RSA_PUBKEY endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 240h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_X509_CRL
_PEM_read_X509_CRL proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_08ONNDIEBB@X509?5CRL?$AA@ ; "X509 CRL"
		push	offset _d2i_X509_CRL
		call	_PEM_ASN1_read
		add	esp, 18h
		retn
_PEM_read_X509_CRL endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 264h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_X509_REQ
_PEM_read_X509_REQ proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0BE@PGIFFILK@CERTIFICATE?5REQUEST?$AA@ ; "CERTIFICATE REQUEST"
		push	offset _d2i_X509_REQ
		call	_PEM_ASN1_read
		add	esp, 18h
		retn
_PEM_read_X509_REQ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 288h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio_DSAPrivateKey
_PEM_read_bio_DSAPrivateKey proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	0
		push	[esp+10h+arg_0]
		call	_PEM_read_bio_PrivateKey
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_2A7
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2A7:				; CODE XREF: _PEM_read_bio_DSAPrivateKey+1Bj
		push	edi
		push	esi
		call	_EVP_PKEY_get1_DSA
		push	esi
		mov	edi, eax
		call	_EVP_PKEY_free
		add	esp, 8
		test	edi, edi
		jnz	short loc_2C2
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2C2:				; CODE XREF: _PEM_read_bio_DSAPrivateKey+33j
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jz	short loc_2D6
		push	dword ptr [esi]
		call	_DSA_free
		add	esp, 4
		mov	[esi], edi

loc_2D6:				; CODE XREF: _PEM_read_bio_DSAPrivateKey+40j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_PEM_read_bio_DSAPrivateKey endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio_DSA_PUBKEY
_PEM_read_bio_DSA_PUBKEY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0L@PFAODDHO@PUBLIC?5KEY?$AA@ ; "PUBLIC KEY"
		push	offset _d2i_DSA_PUBKEY
		call	_PEM_ASN1_read_bio
		add	esp, 18h
		retn
_PEM_read_bio_DSA_PUBKEY endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 300h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio_DSAparams
_PEM_read_bio_DSAparams	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0P@BOAADPIE@DSA?5PARAMETERS?$AA@ ;	"DSA PARAMETERS"
		push	offset _d2i_DSAparams
		call	_PEM_ASN1_read_bio
		add	esp, 18h
		retn
_PEM_read_bio_DSAparams	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 324h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio_ECPKParameters
_PEM_read_bio_ECPKParameters proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0O@KGMDJJCL@EC?5PARAMETERS?$AA@ ; "EC PARAMETERS"
		push	offset _d2i_ECPKParameters
		call	_PEM_ASN1_read_bio
		add	esp, 18h
		retn
_PEM_read_bio_ECPKParameters endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 348h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio_ECPrivateKey
_PEM_read_bio_ECPrivateKey proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	0
		push	[esp+10h+arg_0]
		call	_PEM_read_bio_PrivateKey
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_367
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_367:				; CODE XREF: _PEM_read_bio_ECPrivateKey+1Bj
		push	edi
		push	esi
		call	_EVP_PKEY_get1_EC_KEY
		push	esi
		mov	edi, eax
		call	_EVP_PKEY_free
		add	esp, 8
		test	edi, edi
		jnz	short loc_382
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_382:				; CODE XREF: _PEM_read_bio_ECPrivateKey+33j
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jz	short loc_396
		push	dword ptr [esi]
		call	_EC_KEY_free
		add	esp, 4
		mov	[esi], edi

loc_396:				; CODE XREF: _PEM_read_bio_ECPrivateKey+40j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_PEM_read_bio_ECPrivateKey endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 39Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio_EC_PUBKEY
_PEM_read_bio_EC_PUBKEY	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0L@PFAODDHO@PUBLIC?5KEY?$AA@ ; "PUBLIC KEY"
		push	offset _d2i_EC_PUBKEY
		call	_PEM_ASN1_read_bio
		add	esp, 18h
		retn
_PEM_read_bio_EC_PUBKEY	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio_NETSCAPE_CERT_SEQUENCE
_PEM_read_bio_NETSCAPE_CERT_SEQUENCE proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0M@BFIJENPO@CERTIFICATE?$AA@ ; "CERTIFICATE"
		push	offset _d2i_NETSCAPE_CERT_SEQUENCE
		call	_PEM_ASN1_read_bio
		add	esp, 18h
		retn
_PEM_read_bio_NETSCAPE_CERT_SEQUENCE endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio_PKCS7
_PEM_read_bio_PKCS7 proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_05BKMMPIPN@PKCS7?$AA@ ; "PKCS7"
		push	offset _d2i_PKCS7
		call	_PEM_ASN1_read_bio
		add	esp, 18h
		retn
_PEM_read_bio_PKCS7 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 408h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio_PUBKEY
_PEM_read_bio_PUBKEY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0L@PFAODDHO@PUBLIC?5KEY?$AA@ ; "PUBLIC KEY"
		push	offset _d2i_PUBKEY
		call	_PEM_ASN1_read_bio
		add	esp, 18h
		retn
_PEM_read_bio_PUBKEY endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 42Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio_RSAPrivateKey
_PEM_read_bio_RSAPrivateKey proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	0
		push	[esp+10h+arg_0]
		call	_PEM_read_bio_PrivateKey
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_44B
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_44B:				; CODE XREF: _PEM_read_bio_RSAPrivateKey+1Bj
		push	edi
		push	esi
		call	_EVP_PKEY_get1_RSA
		push	esi
		mov	edi, eax
		call	_EVP_PKEY_free
		add	esp, 8
		test	edi, edi
		jnz	short loc_466
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_466:				; CODE XREF: _PEM_read_bio_RSAPrivateKey+33j
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jz	short loc_47A
		push	dword ptr [esi]
		call	_RSA_free
		add	esp, 4
		mov	[esi], edi

loc_47A:				; CODE XREF: _PEM_read_bio_RSAPrivateKey+40j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_PEM_read_bio_RSAPrivateKey endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 480h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio_RSAPublicKey
_PEM_read_bio_RSAPublicKey proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0P@EMAFKJEG@RSA?5PUBLIC?5KEY?$AA@ ; "RSA PUBLIC KEY"
		push	offset _d2i_RSAPublicKey
		call	_PEM_ASN1_read_bio
		add	esp, 18h
		retn
_PEM_read_bio_RSAPublicKey endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio_RSA_PUBKEY
_PEM_read_bio_RSA_PUBKEY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0L@PFAODDHO@PUBLIC?5KEY?$AA@ ; "PUBLIC KEY"
		push	offset _d2i_RSA_PUBKEY
		call	_PEM_ASN1_read_bio
		add	esp, 18h
		retn
_PEM_read_bio_RSA_PUBKEY endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio_X509_CRL
_PEM_read_bio_X509_CRL proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_08ONNDIEBB@X509?5CRL?$AA@ ; "X509 CRL"
		push	offset _d2i_X509_CRL
		call	_PEM_ASN1_read_bio
		add	esp, 18h
		retn
_PEM_read_bio_X509_CRL endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio_X509_REQ
_PEM_read_bio_X509_REQ proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0BE@PGIFFILK@CERTIFICATE?5REQUEST?$AA@ ; "CERTIFICATE REQUEST"
		push	offset _d2i_X509_REQ
		call	_PEM_ASN1_read_bio
		add	esp, 18h
		retn
_PEM_read_bio_X509_REQ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 510h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_DHparams
_PEM_write_DHparams proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0O@NMAFMHPO@DH?5PARAMETERS?$AA@ ; "DH PARAMETERS"
		push	offset _i2d_DHparams
		call	_PEM_ASN1_write
		add	esp, 24h
		retn
_PEM_write_DHparams endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 538h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_DHxparams
_PEM_write_DHxparams proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0BE@FBOHFABJ@X9?442?5DH?5PARAMETERS?$AA@ ;	"X9.42 DH PARAMETERS"
		push	offset _i2d_DHxparams
		call	_PEM_ASN1_write
		add	esp, 24h
		retn
_PEM_write_DHxparams endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 560h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_DSAPrivateKey
_PEM_write_DSAPrivateKey proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	[esp+arg_18]
		push	[esp+4+arg_14]
		push	[esp+8+arg_10]
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0BA@JLKNDKJH@DSA?5PRIVATE?5KEY?$AA@ ; "DSA	PRIVATE	KEY"
		push	offset _i2d_DSAPrivateKey
		call	_PEM_ASN1_write
		add	esp, 24h
		retn
_PEM_write_DSAPrivateKey endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 590h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_DSA_PUBKEY
_PEM_write_DSA_PUBKEY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0L@PFAODDHO@PUBLIC?5KEY?$AA@ ; "PUBLIC KEY"
		push	offset _i2d_DSA_PUBKEY
		call	_PEM_ASN1_write
		add	esp, 24h
		retn
_PEM_write_DSA_PUBKEY endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_DSAparams
_PEM_write_DSAparams proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0P@BOAADPIE@DSA?5PARAMETERS?$AA@ ;	"DSA PARAMETERS"
		push	offset _i2d_DSAparams
		call	_PEM_ASN1_write
		add	esp, 24h
		retn
_PEM_write_DSAparams endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_ECPKParameters
_PEM_write_ECPKParameters proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0O@KGMDJJCL@EC?5PARAMETERS?$AA@ ; "EC PARAMETERS"
		push	offset _i2d_ECPKParameters
		call	_PEM_ASN1_write
		add	esp, 24h
		retn
_PEM_write_ECPKParameters endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 608h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_ECPrivateKey
_PEM_write_ECPrivateKey	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	[esp+arg_18]
		push	[esp+4+arg_14]
		push	[esp+8+arg_10]
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0P@NNHMEHEI@EC?5PRIVATE?5KEY?$AA@ ; "EC PRIVATE KEY"
		push	offset _i2d_ECPrivateKey
		call	_PEM_ASN1_write
		add	esp, 24h
		retn
_PEM_write_ECPrivateKey	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 638h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_EC_PUBKEY
_PEM_write_EC_PUBKEY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0L@PFAODDHO@PUBLIC?5KEY?$AA@ ; "PUBLIC KEY"
		push	offset _i2d_EC_PUBKEY
		call	_PEM_ASN1_write
		add	esp, 24h
		retn
_PEM_write_EC_PUBKEY endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 660h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_NETSCAPE_CERT_SEQUENCE
_PEM_write_NETSCAPE_CERT_SEQUENCE proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0M@BFIJENPO@CERTIFICATE?$AA@ ; "CERTIFICATE"
		push	offset _i2d_NETSCAPE_CERT_SEQUENCE
		call	_PEM_ASN1_write
		add	esp, 24h
		retn
_PEM_write_NETSCAPE_CERT_SEQUENCE endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 688h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_PKCS7
_PEM_write_PKCS7 proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_05BKMMPIPN@PKCS7?$AA@ ; "PKCS7"
		push	offset _i2d_PKCS7
		call	_PEM_ASN1_write
		add	esp, 24h
		retn
_PEM_write_PKCS7 endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_PUBKEY
_PEM_write_PUBKEY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0L@PFAODDHO@PUBLIC?5KEY?$AA@ ; "PUBLIC KEY"
		push	offset _i2d_PUBKEY
		call	_PEM_ASN1_write
		add	esp, 24h
		retn
_PEM_write_PUBKEY endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_RSAPrivateKey
_PEM_write_RSAPrivateKey proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	[esp+arg_18]
		push	[esp+4+arg_14]
		push	[esp+8+arg_10]
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0BA@COBLGNON@RSA?5PRIVATE?5KEY?$AA@ ; "RSA	PRIVATE	KEY"
		push	offset _i2d_RSAPrivateKey
		call	_PEM_ASN1_write
		add	esp, 24h
		retn
_PEM_write_RSAPrivateKey endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 708h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_RSAPublicKey
_PEM_write_RSAPublicKey	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0P@EMAFKJEG@RSA?5PUBLIC?5KEY?$AA@ ; "RSA PUBLIC KEY"
		push	offset _i2d_RSAPublicKey
		call	_PEM_ASN1_write
		add	esp, 24h
		retn
_PEM_write_RSAPublicKey	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 730h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_RSA_PUBKEY
_PEM_write_RSA_PUBKEY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0L@PFAODDHO@PUBLIC?5KEY?$AA@ ; "PUBLIC KEY"
		push	offset _i2d_RSA_PUBKEY
		call	_PEM_ASN1_write
		add	esp, 24h
		retn
_PEM_write_RSA_PUBKEY endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 758h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_X509_CRL
_PEM_write_X509_CRL proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_08ONNDIEBB@X509?5CRL?$AA@ ; "X509 CRL"
		push	offset _i2d_X509_CRL
		call	_PEM_ASN1_write
		add	esp, 24h
		retn
_PEM_write_X509_CRL endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 780h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_X509_REQ
_PEM_write_X509_REQ proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0BE@PGIFFILK@CERTIFICATE?5REQUEST?$AA@ ; "CERTIFICATE REQUEST"
		push	offset _i2d_X509_REQ
		call	_PEM_ASN1_write
		add	esp, 24h
		retn
_PEM_write_X509_REQ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_X509_REQ_NEW
_PEM_write_X509_REQ_NEW	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0BI@BBDALNCF@NEW?5CERTIFICATE?5REQUEST?$AA@ ; "NEW	CERTIFICATE REQUEST"
		push	offset _i2d_X509_REQ
		call	_PEM_ASN1_write
		add	esp, 24h
		retn
_PEM_write_X509_REQ_NEW	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_DHparams
_PEM_write_bio_DHparams	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0O@NMAFMHPO@DH?5PARAMETERS?$AA@ ; "DH PARAMETERS"
		push	offset _i2d_DHparams
		call	_PEM_ASN1_write_bio
		add	esp, 24h
		retn
_PEM_write_bio_DHparams	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_DHxparams
_PEM_write_bio_DHxparams proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0BE@FBOHFABJ@X9?442?5DH?5PARAMETERS?$AA@ ;	"X9.42 DH PARAMETERS"
		push	offset _i2d_DHxparams
		call	_PEM_ASN1_write_bio
		add	esp, 24h
		retn
_PEM_write_bio_DHxparams endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 820h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_DSAPrivateKey
_PEM_write_bio_DSAPrivateKey proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	[esp+arg_18]
		push	[esp+4+arg_14]
		push	[esp+8+arg_10]
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0BA@JLKNDKJH@DSA?5PRIVATE?5KEY?$AA@ ; "DSA	PRIVATE	KEY"
		push	offset _i2d_DSAPrivateKey
		call	_PEM_ASN1_write_bio
		add	esp, 24h
		retn
_PEM_write_bio_DSAPrivateKey endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 850h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_DSA_PUBKEY
_PEM_write_bio_DSA_PUBKEY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0L@PFAODDHO@PUBLIC?5KEY?$AA@ ; "PUBLIC KEY"
		push	offset _i2d_DSA_PUBKEY
		call	_PEM_ASN1_write_bio
		add	esp, 24h
		retn
_PEM_write_bio_DSA_PUBKEY endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 878h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_DSAparams
_PEM_write_bio_DSAparams proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0P@BOAADPIE@DSA?5PARAMETERS?$AA@ ;	"DSA PARAMETERS"
		push	offset _i2d_DSAparams
		call	_PEM_ASN1_write_bio
		add	esp, 24h
		retn
_PEM_write_bio_DSAparams endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_ECPKParameters
_PEM_write_bio_ECPKParameters proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0O@KGMDJJCL@EC?5PARAMETERS?$AA@ ; "EC PARAMETERS"
		push	offset _i2d_ECPKParameters
		call	_PEM_ASN1_write_bio
		add	esp, 24h
		retn
_PEM_write_bio_ECPKParameters endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_ECPrivateKey
_PEM_write_bio_ECPrivateKey proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	[esp+arg_18]
		push	[esp+4+arg_14]
		push	[esp+8+arg_10]
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0P@NNHMEHEI@EC?5PRIVATE?5KEY?$AA@ ; "EC PRIVATE KEY"
		push	offset _i2d_ECPrivateKey
		call	_PEM_ASN1_write_bio
		add	esp, 24h
		retn
_PEM_write_bio_ECPrivateKey endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_EC_PUBKEY
_PEM_write_bio_EC_PUBKEY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0L@PFAODDHO@PUBLIC?5KEY?$AA@ ; "PUBLIC KEY"
		push	offset _i2d_EC_PUBKEY
		call	_PEM_ASN1_write_bio
		add	esp, 24h
		retn
_PEM_write_bio_EC_PUBKEY endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 920h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_NETSCAPE_CERT_SEQUENCE
_PEM_write_bio_NETSCAPE_CERT_SEQUENCE proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0M@BFIJENPO@CERTIFICATE?$AA@ ; "CERTIFICATE"
		push	offset _i2d_NETSCAPE_CERT_SEQUENCE
		call	_PEM_ASN1_write_bio
		add	esp, 24h
		retn
_PEM_write_bio_NETSCAPE_CERT_SEQUENCE endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 948h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_PKCS7
_PEM_write_bio_PKCS7 proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_05BKMMPIPN@PKCS7?$AA@ ; "PKCS7"
		push	offset _i2d_PKCS7
		call	_PEM_ASN1_write_bio
		add	esp, 24h
		retn
_PEM_write_bio_PKCS7 endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 970h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_PUBKEY
_PEM_write_bio_PUBKEY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0L@PFAODDHO@PUBLIC?5KEY?$AA@ ; "PUBLIC KEY"
		push	offset _i2d_PUBKEY
		call	_PEM_ASN1_write_bio
		add	esp, 24h
		retn
_PEM_write_bio_PUBKEY endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 998h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_RSAPrivateKey
_PEM_write_bio_RSAPrivateKey proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	[esp+arg_18]
		push	[esp+4+arg_14]
		push	[esp+8+arg_10]
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0BA@COBLGNON@RSA?5PRIVATE?5KEY?$AA@ ; "RSA	PRIVATE	KEY"
		push	offset _i2d_RSAPrivateKey
		call	_PEM_ASN1_write_bio
		add	esp, 24h
		retn
_PEM_write_bio_RSAPrivateKey endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_RSAPublicKey
_PEM_write_bio_RSAPublicKey proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0P@EMAFKJEG@RSA?5PUBLIC?5KEY?$AA@ ; "RSA PUBLIC KEY"
		push	offset _i2d_RSAPublicKey
		call	_PEM_ASN1_write_bio
		add	esp, 24h
		retn
_PEM_write_bio_RSAPublicKey endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_RSA_PUBKEY
_PEM_write_bio_RSA_PUBKEY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0L@PFAODDHO@PUBLIC?5KEY?$AA@ ; "PUBLIC KEY"
		push	offset _i2d_RSA_PUBKEY
		call	_PEM_ASN1_write_bio
		add	esp, 24h
		retn
_PEM_write_bio_RSA_PUBKEY endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A18h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_X509_CRL
_PEM_write_bio_X509_CRL	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_08ONNDIEBB@X509?5CRL?$AA@ ; "X509 CRL"
		push	offset _i2d_X509_CRL
		call	_PEM_ASN1_write_bio
		add	esp, 24h
		retn
_PEM_write_bio_X509_CRL	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A40h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_X509_REQ
_PEM_write_bio_X509_REQ	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0BE@PGIFFILK@CERTIFICATE?5REQUEST?$AA@ ; "CERTIFICATE REQUEST"
		push	offset _i2d_X509_REQ
		call	_PEM_ASN1_write_bio
		add	esp, 24h
		retn
_PEM_write_bio_X509_REQ	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A68h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_X509_REQ_NEW
_PEM_write_bio_X509_REQ_NEW proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0BI@BBDALNCF@NEW?5CERTIFICATE?5REQUEST?$AA@ ; "NEW	CERTIFICATE REQUEST"
		push	offset _i2d_X509_REQ
		call	_PEM_ASN1_write_bio
		add	esp, 24h
		retn
_PEM_write_bio_X509_REQ_NEW endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A90h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_get_dsa	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_A9D
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_A9D:				; CODE XREF: _pkey_get_dsa+7j
		push	edi
		push	esi
		call	_EVP_PKEY_get1_DSA
		push	esi
		mov	edi, eax
		call	_EVP_PKEY_free
		add	esp, 8
		test	edi, edi
		jnz	short loc_AB8
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_AB8:				; CODE XREF: _pkey_get_dsa+21j
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jz	short loc_ACC
		push	dword ptr [esi]
		call	_DSA_free
		add	esp, 4
		mov	[esi], edi

loc_ACC:				; CODE XREF: _pkey_get_dsa+2Ej
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_pkey_get_dsa	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0AD4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_get_eckey	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_AE1
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_AE1:				; CODE XREF: _pkey_get_eckey+7j
		push	edi
		push	esi
		call	_EVP_PKEY_get1_EC_KEY
		push	esi
		mov	edi, eax
		call	_EVP_PKEY_free
		add	esp, 8
		test	edi, edi
		jnz	short loc_AFC
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_AFC:				; CODE XREF: _pkey_get_eckey+21j
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jz	short loc_B10
		push	dword ptr [esi]
		call	_EC_KEY_free
		add	esp, 4
		mov	[esi], edi

loc_B10:				; CODE XREF: _pkey_get_eckey+2Ej
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_pkey_get_eckey	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B18h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_pkey_get_rsa	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_B25
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_B25:				; CODE XREF: _pkey_get_rsa+7j
		push	edi
		push	esi
		call	_EVP_PKEY_get1_RSA
		push	esi
		mov	edi, eax
		call	_EVP_PKEY_free
		add	esp, 8
		test	edi, edi
		jnz	short loc_B40
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_B40:				; CODE XREF: _pkey_get_rsa+21j
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jz	short loc_B54
		push	dword ptr [esi]
		call	_RSA_free
		add	esp, 4
		mov	[esi], edi

loc_B54:				; CODE XREF: _pkey_get_rsa+2Ej
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_pkey_get_rsa	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B5Ch
; COMDAT (pick any)
		public ??_C@_0BE@PGIFFILK@CERTIFICATE?5REQUEST?$AA@
; `string'
??_C@_0BE@PGIFFILK@CERTIFICATE?5REQUEST?$AA@ db	'CERTIFICATE REQUEST',0
					; DATA XREF: _PEM_read_X509_REQ+10o
					; _PEM_read_bio_X509_REQ+10o ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B70h
; COMDAT (pick any)
		public ??_C@_0BI@BBDALNCF@NEW?5CERTIFICATE?5REQUEST?$AA@
; `string'
??_C@_0BI@BBDALNCF@NEW?5CERTIFICATE?5REQUEST?$AA@ db 'NEW CERTIFICATE REQUEST',0
					; DATA XREF: _PEM_write_X509_REQ_NEW+12o
					; _PEM_write_bio_X509_REQ_NEW+12o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B88h
; COMDAT (pick any)
		public ??_C@_08ONNDIEBB@X509?5CRL?$AA@
; `string'
??_C@_08ONNDIEBB@X509?5CRL?$AA@	db 'X509 CRL',0 ; DATA XREF: _PEM_read_X509_CRL+10o
					; _PEM_read_bio_X509_CRL+10o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B94h
; COMDAT (pick any)
		public ??_C@_05BKMMPIPN@PKCS7?$AA@
; `string'
??_C@_05BKMMPIPN@PKCS7?$AA@ db 'PKCS7',0 ; DATA XREF: _PEM_read_PKCS7+10o
					; _PEM_read_bio_PKCS7+10o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B9Ch
; COMDAT (pick any)
		public ??_C@_0M@BFIJENPO@CERTIFICATE?$AA@
; `string'
??_C@_0M@BFIJENPO@CERTIFICATE?$AA@ db 'CERTIFICATE',0
					; DATA XREF: _PEM_read_NETSCAPE_CERT_SEQUENCE+10o
					; _PEM_read_bio_NETSCAPE_CERT_SEQUENCE+10o ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BA8h
; COMDAT (pick any)
		public ??_C@_0BA@COBLGNON@RSA?5PRIVATE?5KEY?$AA@
; `string'
??_C@_0BA@COBLGNON@RSA?5PRIVATE?5KEY?$AA@ db 'RSA PRIVATE KEY',0
					; DATA XREF: _PEM_write_RSAPrivateKey+1Co
					; _PEM_write_bio_RSAPrivateKey+1Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BB8h
; COMDAT (pick any)
		public ??_C@_0P@EMAFKJEG@RSA?5PUBLIC?5KEY?$AA@
; `string'
??_C@_0P@EMAFKJEG@RSA?5PUBLIC?5KEY?$AA@	db 'RSA PUBLIC KEY',0
					; DATA XREF: _PEM_read_RSAPublicKey+10o
					; _PEM_read_bio_RSAPublicKey+10o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BC8h
; COMDAT (pick any)
		public ??_C@_0L@PFAODDHO@PUBLIC?5KEY?$AA@
; `string'
??_C@_0L@PFAODDHO@PUBLIC?5KEY?$AA@ db 'PUBLIC KEY',0 ; DATA XREF: _PEM_read_DSA_PUBKEY+10o
					; _PEM_read_EC_PUBKEY+10o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BD4h
; COMDAT (pick any)
		public ??_C@_0BA@JLKNDKJH@DSA?5PRIVATE?5KEY?$AA@
; `string'
??_C@_0BA@JLKNDKJH@DSA?5PRIVATE?5KEY?$AA@ db 'DSA PRIVATE KEY',0
					; DATA XREF: _PEM_write_DSAPrivateKey+1Co
					; _PEM_write_bio_DSAPrivateKey+1Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BE4h
; COMDAT (pick any)
		public ??_C@_0P@BOAADPIE@DSA?5PARAMETERS?$AA@
; `string'
??_C@_0P@BOAADPIE@DSA?5PARAMETERS?$AA@ db 'DSA PARAMETERS',0
					; DATA XREF: _PEM_read_DSAparams+10o
					; _PEM_read_bio_DSAparams+10o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BF4h
; COMDAT (pick any)
		public ??_C@_0O@KGMDJJCL@EC?5PARAMETERS?$AA@
; `string'
??_C@_0O@KGMDJJCL@EC?5PARAMETERS?$AA@ db 'EC PARAMETERS',0
					; DATA XREF: _PEM_read_ECPKParameters+10o
					; _PEM_read_bio_ECPKParameters+10o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C04h
; COMDAT (pick any)
		public ??_C@_0P@NNHMEHEI@EC?5PRIVATE?5KEY?$AA@
; `string'
??_C@_0P@NNHMEHEI@EC?5PRIVATE?5KEY?$AA@	db 'EC PRIVATE KEY',0
					; DATA XREF: _PEM_write_ECPrivateKey+1Co
					; _PEM_write_bio_ECPrivateKey+1Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C14h
; COMDAT (pick any)
		public ??_C@_0O@NMAFMHPO@DH?5PARAMETERS?$AA@
; `string'
??_C@_0O@NMAFMHPO@DH?5PARAMETERS?$AA@ db 'DH PARAMETERS',0
					; DATA XREF: _PEM_write_DHparams+12o
					; _PEM_write_bio_DHparams+12o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C24h
; COMDAT (pick any)
		public ??_C@_0BE@FBOHFABJ@X9?442?5DH?5PARAMETERS?$AA@
; `string'
??_C@_0BE@FBOHFABJ@X9?442?5DH?5PARAMETERS?$AA@ db 'X9.42 DH PARAMETERS',0
					; DATA XREF: _PEM_write_DHxparams+12o
					; _PEM_write_bio_DHxparams+12o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _EVP_PKEY_get1_RSA:near ;	CODE XREF: _PEM_read_RSAPrivateKey+21p
					; _PEM_read_bio_RSAPrivateKey+21p ...
		extrn _EVP_PKEY_get1_DSA:near ;	CODE XREF: _PEM_read_DSAPrivateKey+21p
					; _PEM_read_bio_DSAPrivateKey+21p ...
		extrn _EVP_PKEY_get1_EC_KEY:near ; CODE	XREF: _PEM_read_ECPrivateKey+21p
					; _PEM_read_bio_ECPrivateKey+21p ...
		extrn _EVP_PKEY_free:near ; CODE XREF: _PEM_read_DSAPrivateKey+29p
					; _PEM_read_ECPrivateKey+29p ...
		extrn _d2i_ECPKParameters:near ; DATA XREF: _PEM_read_ECPKParameters+15o
					; _PEM_read_bio_ECPKParameters+15o
		extrn _i2d_ECPKParameters:near ; DATA XREF: _PEM_write_ECPKParameters+17o
					; _PEM_write_bio_ECPKParameters+17o
		extrn _EC_KEY_free:near	; CODE XREF: _PEM_read_ECPrivateKey+44p
					; _PEM_read_bio_ECPrivateKey+44p ...
		extrn _i2d_ECPrivateKey:near ; DATA XREF: _PEM_write_ECPrivateKey+21o
					; _PEM_write_bio_ECPrivateKey+21o
		extrn _RSA_free:near	; CODE XREF: _PEM_read_RSAPrivateKey+44p
					; _PEM_read_bio_RSAPrivateKey+44p ...
		extrn _d2i_RSAPublicKey:near ; DATA XREF: _PEM_read_RSAPublicKey+15o
					; _PEM_read_bio_RSAPublicKey+15o
		extrn _i2d_RSAPublicKey:near ; DATA XREF: _PEM_write_RSAPublicKey+17o
					; _PEM_write_bio_RSAPublicKey+17o
		extrn _i2d_RSAPrivateKey:near ;	DATA XREF: _PEM_write_RSAPrivateKey+21o
					; _PEM_write_bio_RSAPrivateKey+21o
		extrn _i2d_DHparams:near ; DATA	XREF: _PEM_write_DHparams+17o
					; _PEM_write_bio_DHparams+17o
		extrn _i2d_DHxparams:near ; DATA XREF: _PEM_write_DHxparams+17o
					; _PEM_write_bio_DHxparams+17o
		extrn _DSA_free:near	; CODE XREF: _PEM_read_DSAPrivateKey+44p
					; _PEM_read_bio_DSAPrivateKey+44p ...
		extrn _d2i_DSAparams:near ; DATA XREF: _PEM_read_DSAparams+15o
					; _PEM_read_bio_DSAparams+15o
		extrn _i2d_DSAPrivateKey:near ;	DATA XREF: _PEM_write_DSAPrivateKey+21o
					; _PEM_write_bio_DSAPrivateKey+21o
		extrn _i2d_DSAparams:near ; DATA XREF: _PEM_write_DSAparams+17o
					; _PEM_write_bio_DSAparams+17o
		extrn _d2i_PKCS7:near	; DATA XREF: _PEM_read_PKCS7+15o
					; _PEM_read_bio_PKCS7+15o
		extrn _i2d_PKCS7:near	; DATA XREF: _PEM_write_PKCS7+17o
					; _PEM_write_bio_PKCS7+17o
		extrn _i2d_PUBKEY:near	; DATA XREF: _PEM_write_PUBKEY+17o
					; _PEM_write_bio_PUBKEY+17o
		extrn _d2i_PUBKEY:near	; DATA XREF: _PEM_read_PUBKEY+15o
					; _PEM_read_bio_PUBKEY+15o
		extrn _i2d_RSA_PUBKEY:near ; DATA XREF:	_PEM_write_RSA_PUBKEY+17o
					; _PEM_write_bio_RSA_PUBKEY+17o
		extrn _d2i_RSA_PUBKEY:near ; DATA XREF:	_PEM_read_RSA_PUBKEY+15o
					; _PEM_read_bio_RSA_PUBKEY+15o
		extrn _i2d_DSA_PUBKEY:near ; DATA XREF:	_PEM_write_DSA_PUBKEY+17o
					; _PEM_write_bio_DSA_PUBKEY+17o
		extrn _d2i_DSA_PUBKEY:near ; DATA XREF:	_PEM_read_DSA_PUBKEY+15o
					; _PEM_read_bio_DSA_PUBKEY+15o
		extrn _i2d_EC_PUBKEY:near ; DATA XREF: _PEM_write_EC_PUBKEY+17o
					; _PEM_write_bio_EC_PUBKEY+17o
		extrn _d2i_EC_PUBKEY:near ; DATA XREF: _PEM_read_EC_PUBKEY+15o
					; _PEM_read_bio_EC_PUBKEY+15o
		extrn _d2i_X509_REQ:near ; DATA	XREF: _PEM_read_X509_REQ+15o
					; _PEM_read_bio_X509_REQ+15o
		extrn _i2d_X509_REQ:near ; DATA	XREF: _PEM_write_X509_REQ+17o
					; _PEM_write_X509_REQ_NEW+17o ...
		extrn _d2i_X509_CRL:near ; DATA	XREF: _PEM_read_X509_CRL+15o
					; _PEM_read_bio_X509_CRL+15o
		extrn _i2d_X509_CRL:near ; DATA	XREF: _PEM_write_X509_CRL+17o
					; _PEM_write_bio_X509_CRL+17o
		extrn _d2i_NETSCAPE_CERT_SEQUENCE:near
					; DATA XREF: _PEM_read_NETSCAPE_CERT_SEQUENCE+15o
					; _PEM_read_bio_NETSCAPE_CERT_SEQUENCE+15o
		extrn _i2d_NETSCAPE_CERT_SEQUENCE:near
					; DATA XREF: _PEM_write_NETSCAPE_CERT_SEQUENCE+17o
					; _PEM_write_bio_NETSCAPE_CERT_SEQUENCE+17o
		extrn _PEM_ASN1_read_bio:near ;	CODE XREF: _PEM_read_bio_DSA_PUBKEY+1Ap
					; _PEM_read_bio_DSAparams+1Ap ...
		extrn _PEM_ASN1_write_bio:near ; CODE XREF: _PEM_write_bio_DHparams+1Cp
					; _PEM_write_bio_DHxparams+1Cp	...
		extrn _PEM_ASN1_read:near ; CODE XREF: _PEM_read_DSA_PUBKEY+1Ap
					; _PEM_read_DSAparams+1Ap ...
		extrn _PEM_ASN1_write:near ; CODE XREF:	_PEM_write_DHparams+1Cp
					; _PEM_write_DHxparams+1Cp ...
		extrn _PEM_read_bio_PrivateKey:near
					; CODE XREF: _PEM_read_bio_DSAPrivateKey+Fp
					; _PEM_read_bio_ECPrivateKey+Fp ...
		extrn _PEM_read_PrivateKey:near	; CODE XREF: _PEM_read_DSAPrivateKey+Fp
					; _PEM_read_ECPrivateKey+Fp ...


		end
