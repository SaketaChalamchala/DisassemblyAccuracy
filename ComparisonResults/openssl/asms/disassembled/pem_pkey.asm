;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	78E8C7CC4E852E285F3F89CB99C326B5
; Input	CRC32 :	3E8F95F3

; File Name   :	C:\compspace\Diff\openssl\obj\pem_pkey.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_DHparams
_PEM_read_DHparams proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_34
		push	11Bh
		push	offset ??_C@_0BI@HLOHDLB@?4?2crypto?2pem?2pem_pkey?4c?$AA@ ; ".\\crypto\\pem\\pem_pkey.c"
		push	7
		push	8Eh ; 'é'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_34:					; CODE XREF: _PEM_read_DHparams+13j
		push	esi
		push	[esp+8+arg_0]
		push	0
		push	6Ah ; 'j'
		push	edi
		call	_BIO_ctrl
		push	[esp+18h+arg_C]
		push	[esp+1Ch+arg_8]
		push	[esp+20h+arg_4]
		push	edi
		call	_PEM_read_bio_DHparams
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 24h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_PEM_read_DHparams endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 68h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_PrivateKey
_PEM_read_PrivateKey proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_99
		push	0DDh ; '›'
		push	offset ??_C@_0BI@HLOHDLB@?4?2crypto?2pem?2pem_pkey?4c?$AA@ ; ".\\crypto\\pem\\pem_pkey.c"
		push	7
		push	7Ch ; '|'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_99:					; CODE XREF: _PEM_read_PrivateKey+13j
		push	esi
		push	[esp+8+arg_0]
		push	0
		push	6Ah ; 'j'
		push	edi
		call	_BIO_ctrl
		push	[esp+18h+arg_C]
		push	[esp+1Ch+arg_8]
		push	[esp+20h+arg_4]
		push	edi
		call	_PEM_read_bio_PrivateKey
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 24h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_PEM_read_PrivateKey endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0CCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio_DHparams
_PEM_read_bio_DHparams proc near	; CODE XREF: _PEM_read_DHparams+50p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 10h
		call	__chkstk
		push	[esp+10h+arg_C]
		lea	eax, [esp+14h+var_C]
		mov	[esp+14h+var_C], 0
		push	[esp+14h+arg_8]
		mov	[esp+18h+var_10], 0
		push	[esp+18h+arg_0]
		mov	[esp+1Ch+var_8], 0
		push	offset ??_C@_0O@NMAFMHPO@DH?5PARAMETERS?$AA@ ; "DH PARAMETERS"
		push	eax
		lea	eax, [esp+24h+var_4]
		push	eax
		lea	eax, [esp+28h+var_8]
		push	eax
		call	_PEM_bytes_read_bio
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_11E
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_11E:				; CODE XREF: _PEM_read_bio_DHparams+4Cj
		mov	eax, [esp+10h+var_8]
		mov	ecx, offset ??_C@_0BE@FBOHFABJ@X9?442?5DH?5PARAMETERS?$AA@ ; "X9.42 DH PARAMETERS"
		mov	[esp+10h+var_10], eax
		mov	eax, [esp+10h+var_C]

loc_12E:				; CODE XREF: _PEM_read_bio_DHparams+7Cj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_14E
		test	dl, dl
		jz	short loc_14A
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_14E
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_12E

loc_14A:				; CODE XREF: _PEM_read_bio_DHparams+6Aj
		xor	eax, eax
		jmp	short loc_153
; ---------------------------------------------------------------------------

loc_14E:				; CODE XREF: _PEM_read_bio_DHparams+66j
					; _PEM_read_bio_DHparams+72j
		sbb	eax, eax
		or	eax, 1

loc_153:				; CODE XREF: _PEM_read_bio_DHparams+80j
		push	esi
		push	[esp+14h+var_4]
		test	eax, eax
		lea	eax, [esp+18h+var_10]
		push	eax
		push	[esp+1Ch+arg_4]
		jnz	short loc_16C
		call	_d2i_DHxparams
		jmp	short loc_171
; ---------------------------------------------------------------------------

loc_16C:				; CODE XREF: _PEM_read_bio_DHparams+97j
		call	_d2i_DHparams

loc_171:				; CODE XREF: _PEM_read_bio_DHparams+9Ej
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_195
		push	10Eh
		push	offset ??_C@_0BI@HLOHDLB@?4?2crypto?2pem?2pem_pkey?4c?$AA@ ; ".\\crypto\\pem\\pem_pkey.c"
		push	0Dh
		push	8Dh ; 'ç'
		push	9
		call	_ERR_put_error
		add	esp, 14h

loc_195:				; CODE XREF: _PEM_read_bio_DHparams+ACj
		push	[esp+14h+var_C]
		call	_CRYPTO_free
		push	[esp+18h+var_8]
		call	_CRYPTO_free
		add	esp, 8
		mov	eax, esi
		pop	esi
		add	esp, 10h
		retn
_PEM_read_bio_DHparams endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio_Parameters
_PEM_read_bio_Parameters proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 10h
		call	__chkstk
		push	esi
		xor	esi, esi
		mov	[esp+14h+var_10], 0
		push	esi
		push	esi
		push	[esp+1Ch+arg_0]
		lea	eax, [esp+20h+var_10]
		mov	[esp+20h+var_8], 0
		push	offset ??_C@_0L@MBJDOOAB@PARAMETERS?$AA@ ; "PARAMETERS"
		push	eax
		lea	eax, [esp+28h+var_4]
		mov	[esp+28h+var_C], 0
		push	eax
		lea	eax, [esp+2Ch+var_C]
		push	eax
		call	_PEM_bytes_read_bio
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_204
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_204:				; CODE XREF: _PEM_read_bio_Parameters+49j
		mov	eax, [esp+14h+var_C]
		push	edi
		push	offset ??_C@_0L@MBJDOOAB@PARAMETERS?$AA@ ; "PARAMETERS"
		push	[esp+1Ch+var_10]
		mov	[esp+20h+var_8], eax
		call	_pem_check_suffix
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jle	short loc_284
		call	_EVP_PKEY_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_284
		push	edi
		push	[esp+1Ch+var_10]
		push	esi
		call	_EVP_PKEY_set_type_str
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_279
		mov	eax, [esi+0Ch]
		mov	eax, [eax+38h]
		test	eax, eax
		jz	short loc_279
		push	[esp+18h+var_4]
		lea	ecx, [esp+1Ch+var_8]
		push	ecx
		push	esi
		call	eax
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_279
		mov	edi, [esp+18h+arg_4]
		test	edi, edi
		jz	short loc_29F
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_275
		push	eax
		call	_EVP_PKEY_free
		add	esp, 4

loc_275:				; CODE XREF: _PEM_read_bio_Parameters+B6j
		mov	[edi], esi
		jmp	short loc_29F
; ---------------------------------------------------------------------------

loc_279:				; CODE XREF: _PEM_read_bio_Parameters+8Bj
					; _PEM_read_bio_Parameters+95j	...
		push	esi
		call	_EVP_PKEY_free
		add	esp, 4
		xor	esi, esi

loc_284:				; CODE XREF: _PEM_read_bio_Parameters+6Ej
					; _PEM_read_bio_Parameters+79j
		push	0C4h ; 'ƒ'
		push	offset ??_C@_0BI@HLOHDLB@?4?2crypto?2pem?2pem_pkey?4c?$AA@ ; ".\\crypto\\pem\\pem_pkey.c"
		push	0Dh
		push	8Ch ; 'å'
		push	9
		call	_ERR_put_error
		add	esp, 14h

loc_29F:				; CODE XREF: _PEM_read_bio_Parameters+B0j
					; _PEM_read_bio_Parameters+C3j
		push	[esp+18h+var_10]
		call	_CRYPTO_free
		push	[esp+1Ch+var_C]
		call	_CRYPTO_free
		add	esp, 8
		mov	eax, esi
		pop	edi
		pop	esi
		add	esp, 10h
		retn
_PEM_read_bio_Parameters endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio_PrivateKey
_PEM_read_bio_PrivateKey proc near	; CODE XREF: _PEM_read_PrivateKey+4Dp

var_418		= dword	ptr -418h
var_414		= dword	ptr -414h
var_410		= dword	ptr -410h
var_40C		= dword	ptr -40Ch
var_408		= dword	ptr -408h
var_404		= byte ptr -404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 418h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+418h+var_4], eax
		mov	ecx, [esp+418h+arg_C]
		mov	eax, [esp+418h+arg_0]
		push	ebx
		mov	ebx, [esp+41Ch+arg_4]
		push	ebp
		push	edi
		mov	edi, [esp+424h+arg_8]
		xor	ebp, ebp
		push	ecx
		push	edi
		push	eax
		push	offset ??_C@_0BA@MHDCIJI@ANY?5PRIVATE?5KEY?$AA@	; "ANY PRIVATE KEY"
		lea	eax, [esp+434h+var_414]
		mov	[esp+434h+var_408], ecx
		push	eax
		lea	eax, [esp+438h+var_410]
		mov	[esp+438h+var_414], 0
		push	eax
		lea	eax, [esp+43Ch+var_40C]
		mov	[esp+43Ch+var_418], 0
		push	eax
		mov	[esp+440h+var_40C], 0
		call	_PEM_bytes_read_bio
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_34C
		pop	edi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+418h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 418h
		retn
; ---------------------------------------------------------------------------

loc_34C:				; CODE XREF: _PEM_read_bio_PrivateKey+76j
		mov	eax, [esp+424h+var_40C]
		mov	ecx, offset ??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@ ; "PRIVATE KEY"
		push	esi
		mov	esi, [esp+428h+var_414]
		mov	[esp+428h+var_418], eax
		mov	eax, esi

loc_360:				; CODE XREF: _PEM_read_bio_PrivateKey+BEj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_380
		test	dl, dl
		jz	short loc_37C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_380
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_360

loc_37C:				; CODE XREF: _PEM_read_bio_PrivateKey+ACj
		xor	eax, eax
		jmp	short loc_385
; ---------------------------------------------------------------------------

loc_380:				; CODE XREF: _PEM_read_bio_PrivateKey+A8j
					; _PEM_read_bio_PrivateKey+B4j
		sbb	eax, eax
		or	eax, 1

loc_385:				; CODE XREF: _PEM_read_bio_PrivateKey+C2j
		test	eax, eax
		jnz	short loc_3D4
		push	[esp+428h+var_410]
		lea	eax, [esp+42Ch+var_418]
		push	eax
		push	0
		call	_d2i_PKCS8_PRIV_KEY_INFO
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	loc_4F4
		push	esi
		call	_EVP_PKCS82PKEY
		add	esp, 4
		mov	ebp, eax
		test	ebx, ebx
		jz	short loc_3C6
		mov	ecx, [ebx]
		test	ecx, ecx
		jz	short loc_3C4
		push	ecx
		call	_EVP_PKEY_free
		add	esp, 4

loc_3C4:				; CODE XREF: _PEM_read_bio_PrivateKey+FDj
		mov	[ebx], ebp

loc_3C6:				; CODE XREF: _PEM_read_bio_PrivateKey+F7j
		push	esi
		call	_PKCS8_PRIV_KEY_INFO_free
		add	esp, 4
		jmp	$p8err$33
; ---------------------------------------------------------------------------

loc_3D4:				; CODE XREF: _PEM_read_bio_PrivateKey+CBj
		mov	ecx, offset ??_C@_0BG@OLFPLKDJ@ENCRYPTED?5PRIVATE?5KEY?$AA@ ; "ENCRYPTED PRIVATE KEY"
		mov	eax, esi
		nop

loc_3DC:				; CODE XREF: _PEM_read_bio_PrivateKey+13Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_3FC
		test	dl, dl
		jz	short loc_3F8
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_3FC
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_3DC

loc_3F8:				; CODE XREF: _PEM_read_bio_PrivateKey+128j
		xor	eax, eax
		jmp	short loc_401
; ---------------------------------------------------------------------------

loc_3FC:				; CODE XREF: _PEM_read_bio_PrivateKey+124j
					; _PEM_read_bio_PrivateKey+130j
		sbb	eax, eax
		or	eax, 1

loc_401:				; CODE XREF: _PEM_read_bio_PrivateKey+13Ej
		test	eax, eax
		jnz	loc_4B0
		push	[esp+428h+var_410]
		lea	eax, [esp+42Ch+var_418]
		push	eax
		push	0
		call	_d2i_X509_SIG
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	loc_4F4
		lea	eax, [esp+428h+var_404]
		push	[esp+428h+var_408]
		push	0
		push	400h
		push	eax
		test	edi, edi
		jz	short loc_43E
		call	edi
		jmp	short loc_443
; ---------------------------------------------------------------------------

loc_43E:				; CODE XREF: _PEM_read_bio_PrivateKey+17Cj
		call	_PEM_def_callback

loc_443:				; CODE XREF: _PEM_read_bio_PrivateKey+180j
		add	esp, 10h
		test	eax, eax
		jg	short loc_46A
		push	75h ; 'u'
		push	offset ??_C@_0BI@HLOHDLB@?4?2crypto?2pem?2pem_pkey?4c?$AA@ ; ".\\crypto\\pem\\pem_pkey.c"
		push	68h ; 'h'
		push	7Bh ; '{'
		push	9
		call	_ERR_put_error
		push	esi
		call	_X509_SIG_free
		add	esp, 18h
		jmp	$err$34
; ---------------------------------------------------------------------------

loc_46A:				; CODE XREF: _PEM_read_bio_PrivateKey+18Cj
		push	eax
		lea	eax, [esp+42Ch+var_404]
		push	eax
		push	esi
		call	_PKCS8_decrypt
		push	esi
		mov	edi, eax
		call	_X509_SIG_free
		add	esp, 10h
		test	edi, edi
		jz	short loc_4F4
		push	edi
		call	_EVP_PKCS82PKEY
		add	esp, 4
		mov	ebp, eax
		test	ebx, ebx
		jz	short loc_4A5
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_4A3
		push	eax
		call	_EVP_PKEY_free
		add	esp, 4

loc_4A3:				; CODE XREF: _PEM_read_bio_PrivateKey+1DCj
		mov	[ebx], ebp

loc_4A5:				; CODE XREF: _PEM_read_bio_PrivateKey+1D6j
		push	edi
		call	_PKCS8_PRIV_KEY_INFO_free
		add	esp, 4
		jmp	short $p8err$33
; ---------------------------------------------------------------------------

loc_4B0:				; CODE XREF: _PEM_read_bio_PrivateKey+147j
		push	offset ??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@ ; "PRIVATE KEY"
		push	esi
		call	_pem_check_suffix
		add	esp, 8
		test	eax, eax
		jle	short loc_4F4
		push	eax
		push	[esp+42Ch+var_414]
		push	0
		call	_EVP_PKEY_asn1_find_str
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_4F4
		cmp	[eax+5Ch], ebp
		jz	short loc_4F4
		push	[esp+428h+var_410]
		lea	ecx, [esp+42Ch+var_418]
		push	ecx
		push	ebx
		push	dword ptr [eax]
		call	_d2i_PrivateKey
		add	esp, 10h
		mov	ebp, eax

$p8err$33:				; CODE XREF: _PEM_read_bio_PrivateKey+113j
					; _PEM_read_bio_PrivateKey+1F2j
		test	ebp, ebp
		jnz	short $err$34

loc_4F4:				; CODE XREF: _PEM_read_bio_PrivateKey+E4j
					; _PEM_read_bio_PrivateKey+164j ...
		push	8Dh ; 'ç'
		push	offset ??_C@_0BI@HLOHDLB@?4?2crypto?2pem?2pem_pkey?4c?$AA@ ; ".\\crypto\\pem\\pem_pkey.c"
		push	0Dh
		push	7Bh ; '{'
		push	9
		call	_ERR_put_error
		add	esp, 14h

$err$34:				; CODE XREF: _PEM_read_bio_PrivateKey+1A9j
					; _PEM_read_bio_PrivateKey+236j
		push	[esp+428h+var_414]
		call	_CRYPTO_free
		push	[esp+42Ch+var_410]
		push	[esp+430h+var_40C]
		call	_OPENSSL_cleanse
		push	[esp+434h+var_40C]
		call	_CRYPTO_free
		mov	ecx, [esp+438h+var_4]
		add	esp, 10h
		mov	eax, ebp
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 418h
		retn
_PEM_read_bio_PrivateKey endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 54Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_PrivateKey
_PEM_write_PrivateKey proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	edi
		push	0
		push	[esp+8+arg_0]
		call	_BIO_new_fp
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_580
		push	0EEh ; 'Ó'
		push	offset ??_C@_0BI@HLOHDLB@?4?2crypto?2pem?2pem_pkey?4c?$AA@ ; ".\\crypto\\pem\\pem_pkey.c"
		push	7
		push	8Bh ; 'ã'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_580:				; CODE XREF: _PEM_write_PrivateKey+13j
		push	esi
		push	[esp+8+arg_18]
		push	[esp+0Ch+arg_14]
		push	[esp+10h+arg_10]
		push	[esp+14h+arg_C]
		push	[esp+18h+arg_8]
		push	[esp+1Ch+arg_4]
		push	edi
		call	_PEM_write_bio_PrivateKey
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 20h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_PEM_write_PrivateKey endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_Parameters
_PEM_write_bio_Parameters proc near

var_54		= byte ptr -54h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 54h ; 'T'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+54h+var_4], eax
		push	esi
		mov	esi, [esp+58h+arg_4]
		push	edi
		mov	edi, [esp+5Ch+arg_0]
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_620
		cmp	dword ptr [eax+3Ch], 0
		jz	short loc_620
		push	dword ptr [eax+0Ch]
		lea	eax, [esp+60h+var_54]
		push	offset ??_C@_0O@CNGHPLCN@?$CFs?5PARAMETERS?$AA@	; "%s PARAMETERS"
		push	50h ; 'P'
		push	eax
		call	_BIO_snprintf
		push	0
		push	0
		push	0
		push	0
		push	0
		push	esi
		push	edi
		lea	eax, [esp+88h+var_54]
		push	eax
		mov	eax, [esi+0Ch]
		push	dword ptr [eax+3Ch]
		call	_PEM_ASN1_write_bio
		add	esp, 34h
		pop	edi
		pop	esi
		mov	ecx, [esp+54h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 54h
		retn
; ---------------------------------------------------------------------------

loc_620:				; CODE XREF: _PEM_write_bio_Parameters+24j
					; _PEM_write_bio_Parameters+2Aj
		mov	ecx, [esp+5Ch+var_4]
		xor	eax, eax
		pop	edi
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 54h
		retn
_PEM_write_bio_Parameters endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 634h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_PrivateKey
_PEM_write_bio_PrivateKey proc near	; CODE XREF: _PEM_write_PrivateKey+4Ep

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, 5Ch ; '\'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+5Ch+var_4], eax
		mov	ecx, [esp+5Ch+arg_14]
		mov	edx, [esp+5Ch+arg_18]
		push	ebx
		mov	ebx, [esp+60h+arg_8]
		push	ebp
		mov	ebp, [esp+64h+arg_C]
		push	esi
		mov	esi, [esp+68h+arg_4]
		push	edi
		mov	edi, [esp+6Ch+arg_0]
		mov	[esp+6Ch+var_58], ecx
		mov	eax, [esi+0Ch]
		mov	[esp+6Ch+var_5C], edx
		test	eax, eax
		jz	short loc_6C6
		cmp	dword ptr [eax+28h], 0
		jnz	short loc_6C6
		push	dword ptr [eax+0Ch]
		lea	eax, [esp+70h+var_54]
		push	offset ??_C@_0P@DEJEEGBP@?$CFs?5PRIVATE?5KEY?$AA@ ; "%s	PRIVATE	KEY"
		push	50h ; 'P'
		push	eax
		call	_BIO_snprintf
		push	[esp+7Ch+var_5C]
		lea	eax, [esp+80h+var_54]
		push	[esp+80h+var_58]
		push	[esp+84h+arg_10]
		push	ebp
		push	ebx
		push	esi
		push	edi
		push	eax
		push	offset _i2d_PrivateKey
		call	_PEM_ASN1_write_bio
		add	esp, 34h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+5Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 5Ch
		retn
; ---------------------------------------------------------------------------

loc_6C6:				; CODE XREF: _PEM_write_bio_PrivateKey+3Ej
					; _PEM_write_bio_PrivateKey+44j
		push	edx
		push	ecx
		push	[esp+74h+arg_10]
		push	ebp
		push	ebx
		push	esi
		push	edi
		call	_PEM_write_bio_PKCS8PrivateKey
		mov	ecx, [esp+88h+var_4]
		add	esp, 1Ch
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 5Ch
		retn
_PEM_write_bio_PrivateKey endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6F4h
; COMDAT (pick any)
		public ??_C@_0BA@MHDCIJI@ANY?5PRIVATE?5KEY?$AA@
; `string'
??_C@_0BA@MHDCIJI@ANY?5PRIVATE?5KEY?$AA@ db 'ANY PRIVATE KEY',0
					; DATA XREF: _PEM_read_bio_PrivateKey+3Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 704h
; COMDAT (pick any)
		public ??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@
; `string'
??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@ db 'PRIVATE KEY',0
					; DATA XREF: _PEM_read_bio_PrivateKey+94o
					; _PEM_read_bio_PrivateKey:loc_4B0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 710h
; COMDAT (pick any)
		public ??_C@_0BG@OLFPLKDJ@ENCRYPTED?5PRIVATE?5KEY?$AA@
; `string'
??_C@_0BG@OLFPLKDJ@ENCRYPTED?5PRIVATE?5KEY?$AA@	db 'ENCRYPTED PRIVATE KEY',0
					; DATA XREF: _PEM_read_bio_PrivateKey:loc_3D4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 728h
; COMDAT (pick any)
		public ??_C@_0BI@HLOHDLB@?4?2crypto?2pem?2pem_pkey?4c?$AA@
; `string'
??_C@_0BI@HLOHDLB@?4?2crypto?2pem?2pem_pkey?4c?$AA@ db '.\crypto\pem\pem_pkey.c',0
					; DATA XREF: _PEM_read_DHparams+1Ao
					; _PEM_read_PrivateKey+1Ao ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 740h
; COMDAT (pick any)
		public ??_C@_0P@DEJEEGBP@?$CFs?5PRIVATE?5KEY?$AA@
; `string'
??_C@_0P@DEJEEGBP@?$CFs?5PRIVATE?5KEY?$AA@ db '%s PRIVATE KEY',0
					; DATA XREF: _PEM_write_bio_PrivateKey+4Do
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 750h
; COMDAT (pick any)
		public ??_C@_0L@MBJDOOAB@PARAMETERS?$AA@
; `string'
??_C@_0L@MBJDOOAB@PARAMETERS?$AA@ db 'PARAMETERS',0
					; DATA XREF: _PEM_read_bio_Parameters+27o
					; _PEM_read_bio_Parameters+55o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 75Ch
; COMDAT (pick any)
		public ??_C@_0O@CNGHPLCN@?$CFs?5PARAMETERS?$AA@
; `string'
??_C@_0O@CNGHPLCN@?$CFs?5PARAMETERS?$AA@ db '%s PARAMETERS',0
					; DATA XREF: _PEM_write_bio_Parameters+33o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 76Ch
; COMDAT (pick any)
		public ??_C@_0O@NMAFMHPO@DH?5PARAMETERS?$AA@
; `string'
??_C@_0O@NMAFMHPO@DH?5PARAMETERS?$AA@ db 'DH PARAMETERS',0
					; DATA XREF: _PEM_read_bio_DHparams+32o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 77Ch
; COMDAT (pick any)
		public ??_C@_0BE@FBOHFABJ@X9?442?5DH?5PARAMETERS?$AA@
; `string'
??_C@_0BE@FBOHFABJ@X9?442?5DH?5PARAMETERS?$AA@ db 'X9.42 DH PARAMETERS',0
					; DATA XREF: _PEM_read_bio_DHparams+56o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_free:near	; CODE XREF: _PEM_read_bio_DHparams+CDp
					; _PEM_read_bio_DHparams+D6p ...
		extrn _OPENSSL_cleanse:near ; CODE XREF: _PEM_read_bio_PrivateKey+261p
		extrn _BIO_s_file:near	; CODE XREF: _PEM_read_DHparams+1p
					; _PEM_read_PrivateKey+1p
		extrn _BIO_new_fp:near	; CODE XREF: _PEM_write_PrivateKey+7p
		extrn _BIO_new:near	; CODE XREF: _PEM_read_DHparams+7p
					; _PEM_read_PrivateKey+7p
		extrn _BIO_free:near	; CODE XREF: _PEM_read_DHparams+58p
					; _PEM_read_PrivateKey+55p ...
		extrn _BIO_ctrl:near	; CODE XREF: _PEM_read_DHparams+3Ep
					; _PEM_read_PrivateKey+3Bp
		extrn _BIO_snprintf:near ; CODE	XREF: _PEM_write_bio_Parameters+3Bp
					; _PEM_write_bio_PrivateKey+55p
		extrn _ERR_put_error:near ; CODE XREF: _PEM_read_DHparams+28p
					; _PEM_read_PrivateKey+25p ...
		extrn _EVP_PKEY_set_type_str:near ; CODE XREF: _PEM_read_bio_Parameters+81p
		extrn _EVP_PKEY_new:near ; CODE	XREF: _PEM_read_bio_Parameters+70p
		extrn _EVP_PKEY_free:near ; CODE XREF: _PEM_read_bio_Parameters+B9p
					; _PEM_read_bio_Parameters+C6p	...
		extrn _d2i_PrivateKey:near ; CODE XREF:	_PEM_read_bio_PrivateKey+22Ap
		extrn _i2d_PrivateKey:near ; DATA XREF:	_PEM_write_bio_PrivateKey+72o
		extrn _EVP_PKEY_asn1_find_str:near
					; CODE XREF: _PEM_read_bio_PrivateKey+20Dp
		extrn _d2i_DHparams:near ; CODE	XREF: _PEM_read_bio_DHparams:loc_16Cp
		extrn _d2i_DHxparams:near ; CODE XREF: _PEM_read_bio_DHparams+99p
		extrn _X509_SIG_free:near ; CODE XREF: _PEM_read_bio_PrivateKey+1A1p
					; _PEM_read_bio_PrivateKey+1BDp
		extrn _d2i_X509_SIG:near ; CODE	XREF: _PEM_read_bio_PrivateKey+158p
		extrn _PKCS8_PRIV_KEY_INFO_free:near
					; CODE XREF: _PEM_read_bio_PrivateKey+10Bp
					; _PEM_read_bio_PrivateKey+1EAp
		extrn _d2i_PKCS8_PRIV_KEY_INFO:near
					; CODE XREF: _PEM_read_bio_PrivateKey+D8p
		extrn _EVP_PKCS82PKEY:near ; CODE XREF:	_PEM_read_bio_PrivateKey+EBp
					; _PEM_read_bio_PrivateKey+1CAp
		extrn _PKCS8_decrypt:near ; CODE XREF: _PEM_read_bio_PrivateKey+1B5p
		extrn _PEM_bytes_read_bio:near ; CODE XREF: _PEM_read_bio_DHparams+42p
					; _PEM_read_bio_Parameters+3Fp	...
		extrn _PEM_ASN1_write_bio:near ; CODE XREF: _PEM_write_bio_Parameters+57p
					; _PEM_write_bio_PrivateKey+77p
		extrn _PEM_def_callback:near ; CODE XREF: _PEM_read_bio_PrivateKey:loc_43Ep
		extrn _PEM_write_bio_PKCS8PrivateKey:near
					; CODE XREF: _PEM_write_bio_PrivateKey+9Fp
		extrn _pem_check_suffix:near ; CODE XREF: _PEM_read_bio_Parameters+62p
					; _PEM_read_bio_PrivateKey+1FAp
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _PEM_read_bio_PrivateKey+84p
					; _PEM_read_bio_PrivateKey+281p ...
		extrn __chkstk:near	; CODE XREF: _PEM_read_bio_DHparams+5p
					; _PEM_read_bio_Parameters+5p ...
		extrn ___security_cookie:near ;	DATA XREF: _PEM_read_bio_PrivateKey+Ar
					; _PEM_write_bio_Parameters+Ar	...


		end
