;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	DBF308DE6DC1733D76016924EE8685E7
; Input	CRC32 :	09190149

; File Name   :	C:\compspace\Diff\openssl\obj\x_bignum.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_bn_new		proc near		; DATA XREF: .data:00000118o

arg_0		= dword	ptr  4

		call	_BN_new
		mov	ecx, [esp+arg_0]
		mov	edx, eax
		xor	eax, eax
		test	edx, edx
		setnz	al
		mov	[ecx], edx
		retn
_bn_new		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 18h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_bn_free	proc near		; DATA XREF: .data:0000011Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_4C
		mov	eax, [esp+4+arg_4]
		push	ecx
		test	byte ptr [eax+14h], 1
		jz	short loc_3E
		call	_BN_clear_free
		add	esp, 4
		mov	dword ptr [esi], 0
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3E:					; CODE XREF: _bn_free+14j
		call	_BN_free
		add	esp, 4
		mov	dword ptr [esi], 0

loc_4C:					; CODE XREF: _bn_free+9j
		pop	esi
		retn
_bn_free	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 50h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_bn_i2c		proc near		; DATA XREF: .data:00000128o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [eax]
		test	esi, esi
		jnz	short loc_60
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_60:					; CODE XREF: _bn_i2c+9j
		push	ebx
		push	esi
		call	_BN_num_bits
		add	esp, 4
		mov	ebx, 0
		test	al, 7
		mov	eax, [esp+8+arg_4]
		setz	bl
		test	eax, eax
		jz	short loc_8E
		test	ebx, ebx
		jz	short loc_84
		mov	byte ptr [eax],	0
		inc	eax

loc_84:					; CODE XREF: _bn_i2c+2Ej
		push	eax
		push	esi
		call	_BN_bn2bin
		add	esp, 8

loc_8E:					; CODE XREF: _bn_i2c+2Aj
		push	esi
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		add	eax, ebx
		pop	ebx
		pop	esi
		retn
_bn_i2c		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_bn_c2i		proc near		; DATA XREF: .data:00000124o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_14		= dword	ptr  18h

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi], 0
		jnz	short loc_BD
		call	_BN_new
		mov	[esi], eax
		test	eax, eax
		jz	short loc_104

loc_BD:					; CODE XREF: _bn_c2i+8j
		push	dword ptr [esi]
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		call	_BN_bin2bn
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_108
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_104
		mov	eax, [esp+4+arg_14]
		push	ecx
		test	byte ptr [eax+14h], 1
		jz	short loc_F6
		call	_BN_clear_free
		add	esp, 4
		mov	dword ptr [esi], 0
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_F6:					; CODE XREF: _bn_c2i+3Aj
		call	_BN_free
		add	esp, 4
		mov	dword ptr [esi], 0

loc_104:				; CODE XREF: _bn_c2i+13j _bn_c2i+2Fj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_108:				; CODE XREF: _bn_c2i+29j
		mov	eax, 1
		pop	esi
		retn
_bn_c2i		endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 110h
_bignum_pf	dd 2 dup(0)		; DATA XREF: .rdata:00000140o
					; .rdata:0000015Co
		dd offset _bn_new
		dd offset _bn_free
		dd 0
		dd offset _bn_c2i
		dd offset _bn_i2c
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 130h
; `BIGNUM_it'::`2'::local_it
?local_it@?1??BIGNUM_it@@9@9 dd	0	; DATA XREF: _BIGNUM_ito
		dd 2, 2	dup(0)
		dd offset _bignum_pf
		align 8
		dd offset ??_C@_06CHOIGJDB@BIGNUM?$AA@ ; "BIGNUM"
; `CBIGNUM_it'::`2'::local_it
?local_it@?1??CBIGNUM_it@@9@9 dd 0	; DATA XREF: _CBIGNUM_ito
		dd 2, 2	dup(0)
		dd offset _bignum_pf
		dd 1
		dd offset ??_C@_06CHOIGJDB@BIGNUM?$AA@ ; "BIGNUM"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 168h
; COMDAT (pick any)
		public ??_C@_06CHOIGJDB@BIGNUM?$AA@
; `string'
??_C@_06CHOIGJDB@BIGNUM?$AA@ db	'BIGNUM',0 ; DATA XREF: .rdata:00000148o
					; .rdata:00000164o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 170h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIGNUM_it
_BIGNUM_it	proc near
		mov	eax, offset ?local_it@?1??BIGNUM_it@@9@9 ; `BIGNUM_it'::`2'::local_it
		retn
_BIGNUM_it	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 178h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CBIGNUM_it
_CBIGNUM_it	proc near
		mov	eax, offset ?local_it@?1??CBIGNUM_it@@9@9 ; `CBIGNUM_it'::`2'::local_it
		retn
_CBIGNUM_it	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BN_num_bits:near	; CODE XREF: _bn_i2c+12p _bn_i2c+3Fp
		extrn _BN_new:near	; CODE XREF: _bn_newp _bn_c2i+Ap
		extrn _BN_clear_free:near ; CODE XREF: _bn_free+16p
					; _bn_c2i+3Cp
		extrn _BN_bin2bn:near	; CODE XREF: _bn_c2i+1Fp
		extrn _BN_bn2bin:near	; CODE XREF: _bn_i2c+36p
		extrn _BN_free:near	; CODE XREF: _bn_free:loc_3Ep
					; _bn_c2i:loc_F6p


		end
