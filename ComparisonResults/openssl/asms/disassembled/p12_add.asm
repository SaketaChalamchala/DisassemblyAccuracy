;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	B14F8C812C60A1520BB25E81BF8AF61C
; Input	CRC32 :	0664922D

; File Name   :	C:\compspace\Diff\openssl\obj\p12_add.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS12_MAKE_KEYBAG
_PKCS12_MAKE_KEYBAG proc near

arg_0		= dword	ptr  4

		push	esi
		call	_PKCS12_SAFEBAG_new
		mov	esi, eax
		test	esi, esi
		jnz	short loc_25
		push	63h ; 'c'
		push	offset ??_C@_0BK@IOBIADIB@?4?2crypto?2pkcs12?2p12_add?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_add.c"
		push	41h ; 'A'
		push	70h ; 'p'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_25:					; CODE XREF: _PKCS12_MAKE_KEYBAG+Aj
		push	96h ; '–'
		call	_OBJ_nid2obj
		mov	[esi], eax
		add	esp, 4
		mov	eax, [esp+4+arg_0]
		mov	[esi+4], eax
		mov	eax, esi
		pop	esi
		retn
_PKCS12_MAKE_KEYBAG endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 40h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS12_MAKE_SHKEYBAG
_PKCS12_MAKE_SHKEYBAG proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	edi
		call	_PKCS12_SAFEBAG_new
		mov	edi, eax
		test	edi, edi
		jnz	short loc_65
		push	77h ; 'w'
		push	offset ??_C@_0BK@IOBIADIB@?4?2crypto?2pkcs12?2p12_add?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_add.c"
		push	41h ; 'A'
		push	71h ; 'q'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_65:					; CODE XREF: _PKCS12_MAKE_SHKEYBAG+Aj
		push	esi
		push	97h ; '—'
		call	_OBJ_nid2obj
		mov	esi, [esp+0Ch+arg_0]
		push	esi
		mov	[edi], eax
		call	_OBJ_nid2sn
		push	eax
		call	_EVP_get_cipherbyname
		push	[esp+14h+arg_18]
		or	ecx, 0FFFFFFFFh
		test	eax, eax
		push	[esp+18h+arg_14]
		cmovnz	esi, ecx
		push	[esp+1Ch+arg_10]
		push	[esp+20h+arg_C]
		push	[esp+24h+arg_8]
		push	[esp+28h+arg_4]
		push	eax
		push	esi
		call	_PKCS8_encrypt
		add	esp, 2Ch
		mov	[edi+4], eax
		pop	esi
		test	eax, eax
		jnz	short loc_D6
		push	85h ; '…'
		push	offset ??_C@_0BK@IOBIADIB@?4?2crypto?2pkcs12?2p12_add?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_add.c"
		push	41h ; 'A'
		push	71h ; 'q'
		push	23h ; '#'
		call	_ERR_put_error
		push	edi
		call	_PKCS12_SAFEBAG_free
		add	esp, 18h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_D6:					; CODE XREF: _PKCS12_MAKE_SHKEYBAG+72j
		mov	eax, edi
		pop	edi
		retn
_PKCS12_MAKE_SHKEYBAG endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS12_decrypt_skey
_PKCS12_decrypt_skey proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_4]
		push	dword ptr [eax+4]
		call	_PKCS8_decrypt
		add	esp, 0Ch
		retn
_PKCS12_decrypt_skey endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS12_item_pack_safebag
_PKCS12_item_pack_safebag proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		call	_PKCS12_BAGS_new
		mov	esi, eax
		test	esi, esi
		jnz	short loc_119
		push	48h ; 'H'
		push	offset ??_C@_0BK@IOBIADIB@?4?2crypto?2pkcs12?2p12_add?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_add.c"
		push	41h ; 'A'
		push	75h ; 'u'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_119:				; CODE XREF: _PKCS12_item_pack_safebag+Aj
		push	edi
		push	[esp+8+arg_8]
		call	_OBJ_nid2obj
		mov	[esi], eax
		lea	eax, [esi+4]
		push	eax
		push	[esp+10h+arg_4]
		push	[esp+14h+arg_0]
		call	_ASN1_item_pack
		add	esp, 10h
		test	eax, eax
		jnz	short loc_141
		push	4Dh ; 'M'
		jmp	short loc_14E
; ---------------------------------------------------------------------------

loc_141:				; CODE XREF: _PKCS12_item_pack_safebag+47j
		call	_PKCS12_SAFEBAG_new
		mov	edi, eax
		test	edi, edi
		jnz	short loc_16F
		push	51h ; 'Q'

loc_14E:				; CODE XREF: _PKCS12_item_pack_safebag+4Bj
		push	offset ??_C@_0BK@IOBIADIB@?4?2crypto?2pkcs12?2p12_add?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_add.c"
		push	41h ; 'A'
		push	75h ; 'u'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h

$err$9:
		push	esi
		call	_PKCS12_BAGS_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_16F:				; CODE XREF: _PKCS12_item_pack_safebag+56j
		push	[esp+8+arg_C]
		mov	[edi+4], esi
		call	_OBJ_nid2obj
		add	esp, 4
		mov	[edi], eax
		mov	eax, edi
		pop	edi
		pop	esi
		retn
_PKCS12_item_pack_safebag endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 188h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS12_pack_authsafes
_PKCS12_pack_authsafes proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	eax, [eax+8]
		add	eax, 14h
		push	eax
		call	_PKCS12_AUTHSAFES_it
		push	eax
		push	[esp+8+arg_4]
		call	_ASN1_item_pack
		add	esp, 0Ch
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
_PKCS12_pack_authsafes endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS12_pack_p7data
_PKCS12_pack_p7data proc near

arg_0		= dword	ptr  4

		push	esi
		call	_PKCS7_new
		mov	esi, eax
		test	esi, esi
		jnz	short loc_1D4
		push	92h ; '’'
		push	offset ??_C@_0BK@IOBIADIB@?4?2crypto?2pkcs12?2p12_add?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_add.c"
		push	41h ; 'A'
		push	72h ; 'r'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1D4:				; CODE XREF: _PKCS12_pack_p7data+Aj
		push	15h
		call	_OBJ_nid2obj
		push	4
		mov	[esi+10h], eax
		call	_ASN1_STRING_type_new
		add	esp, 8
		mov	[esi+14h], eax
		lea	ecx, [esi+14h]
		test	eax, eax
		jnz	short loc_200
		push	97h ; '—'
		push	offset ??_C@_0BK@IOBIADIB@?4?2crypto?2pkcs12?2p12_add?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_add.c"
		push	41h ; 'A'
		jmp	short loc_223
; ---------------------------------------------------------------------------

loc_200:				; CODE XREF: _PKCS12_pack_p7data+44j
		push	ecx
		call	_PKCS12_SAFEBAGS_it
		push	eax
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_pack
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_23C
		push	9Ch ; 'œ'
		push	offset ??_C@_0BK@IOBIADIB@?4?2crypto?2pkcs12?2p12_add?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_add.c"
		push	64h ; 'd'

loc_223:				; CODE XREF: _PKCS12_pack_p7data+52j
		push	72h ; 'r'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h

$err$8:
		push	esi
		call	_PKCS7_free
		add	esp, 4
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_23C:				; CODE XREF: _PKCS12_pack_p7data+69j
		mov	eax, esi
		pop	esi
		retn
_PKCS12_pack_p7data endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 240h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS12_pack_p7encdata
_PKCS12_pack_p7encdata proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	esi
		call	_PKCS7_new
		mov	esi, eax
		test	esi, esi
		jnz	short loc_268
		push	0BBh ; '»'
		push	offset ??_C@_0BK@IOBIADIB@?4?2crypto?2pkcs12?2p12_add?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_add.c"
		push	41h ; 'A'
		push	73h ; 's'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_268:				; CODE XREF: _PKCS12_pack_p7encdata+Aj
		push	edi
		push	1Ah
		push	esi
		call	_PKCS7_set_type
		add	esp, 8
		test	eax, eax
		jnz	short loc_289
		push	0C0h ; 'À'
		push	offset ??_C@_0BK@IOBIADIB@?4?2crypto?2pkcs12?2p12_add?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_add.c"
		push	78h ; 'x'
		jmp	loc_32F
; ---------------------------------------------------------------------------

loc_289:				; CODE XREF: _PKCS12_pack_p7encdata+36j
		mov	edi, [esp+8+arg_0]
		push	edi
		call	_OBJ_nid2sn
		push	eax
		call	_EVP_get_cipherbyname
		add	esp, 8
		push	[esp+8+arg_10]
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_14]
		test	eax, eax
		jz	short loc_2B4
		push	eax
		call	_PKCS5_pbe2_set
		jmp	short loc_2BA
; ---------------------------------------------------------------------------

loc_2B4:				; CODE XREF: _PKCS12_pack_p7encdata+6Aj
		push	edi
		call	_PKCS5_pbe_set

loc_2BA:				; CODE XREF: _PKCS12_pack_p7encdata+72j
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	short loc_2D1
		push	0CCh ; 'Ì'
		push	offset ??_C@_0BK@IOBIADIB@?4?2crypto?2pkcs12?2p12_add?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_add.c"
		push	41h ; 'A'
		jmp	short loc_32F
; ---------------------------------------------------------------------------

loc_2D1:				; CODE XREF: _PKCS12_pack_p7encdata+81j
		mov	eax, [esi+14h]
		mov	eax, [eax+4]
		push	dword ptr [eax+4]
		call	_X509_ALGOR_free
		mov	eax, [esi+14h]
		mov	eax, [eax+4]
		mov	[eax+4], edi
		mov	eax, [esi+14h]
		mov	eax, [eax+4]
		push	dword ptr [eax+8]
		call	_ASN1_STRING_free
		add	esp, 8
		push	1
		push	[esp+0Ch+arg_18]
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		call	_PKCS12_SAFEBAGS_it
		push	eax
		push	edi
		call	_PKCS12_item_i2d_encrypt
		mov	ecx, [esi+14h]
		add	esp, 18h
		mov	ecx, [ecx+4]
		mov	[ecx+8], eax
		test	eax, eax
		jnz	short loc_349
		push	0D5h ; 'Õ'
		push	offset ??_C@_0BK@IOBIADIB@?4?2crypto?2pkcs12?2p12_add?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_add.c"
		push	67h ; 'g'

loc_32F:				; CODE XREF: _PKCS12_pack_p7encdata+44j
					; _PKCS12_pack_p7encdata+8Fj
		push	73h ; 's'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h

$err$13:
		push	esi
		call	_PKCS7_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_349:				; CODE XREF: _PKCS12_pack_p7encdata+E1j
		pop	edi
		mov	eax, esi
		pop	esi
		retn
_PKCS12_pack_p7encdata endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 350h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS12_unpack_authsafes
_PKCS12_unpack_authsafes proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+8]
		push	dword ptr [eax+10h]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 15h
		jz	short loc_387
		push	0FDh ; 'ý'
		push	offset ??_C@_0BK@IOBIADIB@?4?2crypto?2pkcs12?2p12_add?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_add.c"
		push	79h ; 'y'
		push	82h ; '‚'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_387:				; CODE XREF: _PKCS12_unpack_authsafes+16j
		call	_PKCS12_AUTHSAFES_it
		push	eax
		mov	eax, [esi+8]
		push	dword ptr [eax+14h]
		call	_ASN1_item_unpack
		add	esp, 8
		pop	esi
		retn
_PKCS12_unpack_authsafes endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS12_unpack_p7data
_PKCS12_unpack_p7data proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	dword ptr [esi+10h]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 15h
		jz	short loc_3D4
		push	0ABh ; '«'
		push	offset ??_C@_0BK@IOBIADIB@?4?2crypto?2pkcs12?2p12_add?4c?$AA@ ;	".\\crypto\\pkcs12\\p12_add.c"
		push	79h ; 'y'
		push	83h ; 'ƒ'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3D4:				; CODE XREF: _PKCS12_unpack_p7data+13j
		call	_PKCS12_SAFEBAGS_it
		push	eax
		push	dword ptr [esi+14h]
		call	_ASN1_item_unpack
		add	esp, 8
		pop	esi
		retn
_PKCS12_unpack_p7data endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS12_unpack_p7encdata
_PKCS12_unpack_p7encdata proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		push	dword ptr [esi+10h]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 1Ah
		jz	short loc_401
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_401:				; CODE XREF: _PKCS12_unpack_p7encdata+13j
		mov	eax, [esi+14h]
		push	1
		mov	eax, [eax+4]
		push	dword ptr [eax+8]
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		call	_PKCS12_SAFEBAGS_it
		push	eax
		mov	eax, [esi+14h]
		mov	eax, [eax+4]
		push	dword ptr [eax+4]
		call	_PKCS12_item_decrypt_d2i
		add	esp, 18h
		pop	esi
		retn
_PKCS12_unpack_p7encdata endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 430h
; COMDAT (pick any)
		public ??_C@_0BK@IOBIADIB@?4?2crypto?2pkcs12?2p12_add?4c?$AA@
; `string'
??_C@_0BK@IOBIADIB@?4?2crypto?2pkcs12?2p12_add?4c?$AA@ db '.\crypto\pkcs12\p12_add.c',0
					; DATA XREF: _PKCS12_MAKE_KEYBAG+Eo
					; _PKCS12_MAKE_SHKEYBAG+Eo ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ERR_put_error:near ; CODE XREF: _PKCS12_MAKE_KEYBAG+19p
					; _PKCS12_MAKE_SHKEYBAG+19p ...
		extrn _ASN1_STRING_free:near ; CODE XREF: _PKCS12_pack_p7encdata+B1p
		extrn _ASN1_STRING_type_new:near ; CODE	XREF: _PKCS12_pack_p7data+34p
		extrn _ASN1_item_unpack:near ; CODE XREF: _PKCS12_unpack_authsafes+43p
					; _PKCS12_unpack_p7data+3Dp
		extrn _ASN1_item_pack:near ; CODE XREF:	_PKCS12_item_pack_safebag+3Dp
					; _PKCS12_pack_authsafes+15p ...
		extrn _OBJ_nid2obj:near	; CODE XREF: _PKCS12_MAKE_KEYBAG+2Ap
					; _PKCS12_MAKE_SHKEYBAG+2Bp ...
		extrn _OBJ_nid2sn:near	; CODE XREF: _PKCS12_MAKE_SHKEYBAG+37p
					; _PKCS12_pack_p7encdata+4Ep
		extrn _OBJ_obj2nid:near	; CODE XREF: _PKCS12_unpack_authsafes+Bp
					; _PKCS12_unpack_p7data+8p ...
		extrn _EVP_get_cipherbyname:near ; CODE	XREF: _PKCS12_MAKE_SHKEYBAG+3Dp
					; _PKCS12_pack_p7encdata+54p
		extrn _PKCS7_new:near	; CODE XREF: _PKCS12_pack_p7data+1p
					; _PKCS12_pack_p7encdata+1p
		extrn _PKCS7_free:near	; CODE XREF: _PKCS12_pack_p7data+84p
					; _PKCS12_pack_p7encdata+FCp
		extrn _PKCS7_set_type:near ; CODE XREF:	_PKCS12_pack_p7encdata+2Cp
		extrn _X509_ALGOR_free:near ; CODE XREF: _PKCS12_pack_p7encdata+9Ap
		extrn _PKCS5_pbe_set:near ; CODE XREF: _PKCS12_pack_p7encdata+75p
		extrn _PKCS5_pbe2_set:near ; CODE XREF:	_PKCS12_pack_p7encdata+6Dp
		extrn _PKCS8_decrypt:near ; CODE XREF: _PKCS12_decrypt_skey+Fp
		extrn _PKCS8_encrypt:near ; CODE XREF: _PKCS12_MAKE_SHKEYBAG+64p
		extrn _PKCS12_item_decrypt_d2i:near
					; CODE XREF: _PKCS12_unpack_p7encdata+3Bp
		extrn _PKCS12_item_i2d_encrypt:near ; CODE XREF: _PKCS12_pack_p7encdata+CEp
		extrn _PKCS12_SAFEBAG_new:near ; CODE XREF: _PKCS12_MAKE_KEYBAG+1p
					; _PKCS12_MAKE_SHKEYBAG+1p ...
		extrn _PKCS12_SAFEBAG_free:near	; CODE XREF: _PKCS12_MAKE_SHKEYBAG+8Ap
		extrn _PKCS12_BAGS_new:near ; CODE XREF: _PKCS12_item_pack_safebag+1p
		extrn _PKCS12_BAGS_free:near ; CODE XREF: _PKCS12_item_pack_safebag+6Ep
		extrn _PKCS12_SAFEBAGS_it:near ; CODE XREF: _PKCS12_pack_p7data+55p
					; _PKCS12_pack_p7encdata+C7p ...
		extrn _PKCS12_AUTHSAFES_it:near	; CODE XREF: _PKCS12_pack_authsafes+Bp
					; _PKCS12_unpack_authsafes:loc_387p


		end
