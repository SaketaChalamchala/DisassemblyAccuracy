;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	DE2BF6F8BD2DC3676DF168A92856A36B
; Input	CRC32 :	A408B714

; File Name   :	C:\compspace\Diff\openssl\obj\s23_srvr.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl23_accept
_ssl23_accept	proc near		; DATA XREF: .rdata:00000210o

var_18		= qword	ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	esi
		push	edi
		push	0		; Time
		call	dword ptr ds:__imp___time64
		add	esp, 4
		mov	[esp+10h+var_4], eax
		mov	eax, 8
		call	__chkstk
		xorps	xmm0, xmm0
		lea	eax, [esp+18h+var_4]
		movsd	[esp+18h+var_18], xmm0
		push	4
		push	eax
		call	_RAND_add
		add	esp, 10h
		call	_ERR_clear_error
		push	0		; dwErrCode
		call	dword ptr ds:__imp__SetLastError@4 ; SetLastError(x)
		mov	esi, [esp+10h+arg_0]
		mov	ebx, [esi+0D0h]
		test	ebx, ebx
		jnz	short loc_69
		mov	eax, [esi+0E4h]
		mov	eax, [eax+9Ch]
		test	eax, eax
		cmovnz	ebx, eax

loc_69:					; CODE XREF: _ssl23_accept+56j
		inc	dword ptr [esi+1Ch]
		push	esi
		call	_SSL_state
		add	esp, 4
		test	eax, 3000h
		jz	short loc_8C
		push	esi
		call	_SSL_state
		add	esp, 4
		test	eax, 4000h
		jz	short loc_95

loc_8C:					; CODE XREF: _ssl23_accept+7Aj
		push	esi
		call	_SSL_clear
		add	esp, 4

loc_95:					; CODE XREF: _ssl23_accept+8Aj
		push	ebp
		db	66h, 66h
		nop	word ptr [eax+eax+00000000h]

loc_A0:					; CODE XREF: _ssl23_accept+145j
					; _ssl23_accept+150j ...
		mov	edi, [esi+34h]
		cmp	edi, 2211h
		jg	short loc_C5
		cmp	edi, 2210h
		jge	loc_16E
		mov	eax, edi
		sub	eax, 2000h
		jz	short loc_D9
		sub	eax, 3
		jmp	short loc_D3
; ---------------------------------------------------------------------------

loc_C5:					; CODE XREF: _ssl23_accept+A9j
		cmp	edi, 4000h
		jz	short loc_D9
		cmp	edi, 6000h

loc_D3:					; CODE XREF: _ssl23_accept+C3j
		jnz	loc_188

loc_D9:					; CODE XREF: _ssl23_accept+BEj
					; _ssl23_accept+CBj
		mov	dword ptr [esi+24h], 1
		test	ebx, ebx
		jz	short loc_EE
		push	1
		push	10h
		push	esi
		call	ebx
		add	esp, 0Ch

loc_EE:					; CODE XREF: _ssl23_accept+E2j
		cmp	dword ptr [esi+3Ch], 0
		mov	dword ptr [esi+4], 2000h
		jnz	short loc_123
		call	_BUF_MEM_new
		mov	ebp, eax
		test	ebp, ebp
		jz	loc_1AE
		push	4000h
		push	ebp
		call	_BUF_MEM_grow
		add	esp, 8
		test	eax, eax
		jz	loc_1A5
		mov	[esi+3Ch], ebp

loc_123:				; CODE XREF: _ssl23_accept+F9j
		push	esi
		call	_ssl3_init_finished_mac
		mov	eax, [esi+0E4h]
		add	esp, 4
		mov	dword ptr [esi+34h], 2210h
		inc	dword ptr [eax+40h]
		mov	dword ptr [esi+44h], 0
		test	ebx, ebx
		jz	loc_A0
		mov	ebp, [esi+34h]
		cmp	ebp, edi
		jz	loc_A0
		push	1
		push	2001h
		push	esi
		mov	[esi+34h], edi
		call	ebx
		add	esp, 0Ch
		mov	[esi+34h], ebp
		jmp	loc_A0
; ---------------------------------------------------------------------------

loc_16E:				; CODE XREF: _ssl23_accept+B1j
		push	esi
		mov	dword ptr [esi+30h], 0
		call	_ssl23_get_client_hello
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		js	short $end$42
		xor	ebx, ebx
		jmp	short $end$42
; ---------------------------------------------------------------------------

loc_188:				; CODE XREF: _ssl23_accept:loc_D3j
		push	0D8h ; 'Ø'
		push	offset ??_C@_0BB@NKEKLOOB@?4?2ssl?2s23_srvr?4c?$AA@ ; ".\\ssl\\s23_srvr.c"
		push	0FFh
		push	73h ; 's'
		push	14h
		call	_ERR_put_error
		add	esp, 14h
		jmp	short loc_1AE
; ---------------------------------------------------------------------------

loc_1A5:				; CODE XREF: _ssl23_accept+11Aj
		push	ebp
		call	_BUF_MEM_free
		add	esp, 4

loc_1AE:				; CODE XREF: _ssl23_accept+104j
					; _ssl23_accept+1A3j
		or	edi, 0FFFFFFFFh

$end$42:				; CODE XREF: _ssl23_accept+182j
					; _ssl23_accept+186j
		dec	dword ptr [esi+1Ch]
		pop	ebp
		test	ebx, ebx
		jz	short loc_1C5
		push	edi
		push	2002h
		push	esi
		call	ebx
		add	esp, 0Ch

loc_1C5:				; CODE XREF: _ssl23_accept+1B7j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
_ssl23_accept	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1CCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ssl23_get_server_method proc near	; CODE XREF: _ssl23_get_client_hello+56Bp
					; DATA XREF: .rdata:0000025Co

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 300h
		jz	_SSLv3_server_method
		cmp	eax, 301h
		jz	_TLSv1_server_method
		cmp	eax, 302h
		jz	_TLSv1_1_server_method
		cmp	eax, 303h
		jz	_TLSv1_2_server_method
		xor	eax, eax
		retn
_ssl23_get_server_method endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 200h
; `SSLv23_server_method'::`2'::SSLv23_server_method_data
?SSLv23_server_method_data@?1??SSLv23_server_method@@9@9 dd offset loc_2FF+4
					; DATA XREF: _SSLv23_server_methodo
		dd offset _tls1_new
		dd offset _tls1_clear
		dd offset _tls1_free
		dd offset _ssl23_accept
		dd offset _ssl_undefined_function
		dd offset _ssl23_read
		dd offset _ssl23_peek
		dd offset _ssl23_write
		dd offset _ssl_undefined_function
		dd offset _ssl_undefined_function
		dd offset _ssl_ok
		dd offset _ssl3_get_message
		dd offset _ssl3_read_bytes
		dd offset _ssl3_write_bytes
		dd offset _ssl3_dispatch_alert
		dd offset _ssl3_ctrl
		dd offset _ssl3_ctx_ctrl
		dd offset _ssl23_get_cipher_by_char
		dd offset _ssl23_put_cipher_by_char
		dd offset _ssl_undefined_const_function
		dd offset _ssl23_num_ciphers
		dd offset _ssl23_get_cipher
		dd offset _ssl23_get_server_method
		dd offset _ssl23_default_timeout
		dd offset _TLSv1_2_enc_data
		dd offset _ssl_undefined_void_function
		dd offset _ssl3_callback_ctrl
		dd offset _ssl3_ctx_callback_ctrl
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 274h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SSLv23_server_method
_SSLv23_server_method proc near
		mov	eax, offset ?SSLv23_server_method_data@?1??SSLv23_server_method@@9@9 ; `SSLv23_server_method'::`2'::SSLv23_server_method_data
		retn
_SSLv23_server_method endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 27Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ssl23_get_client_hello
_ssl23_get_client_hello	proc near	; CODE XREF: _ssl23_accept+176p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
Size		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
Src		= qword	ptr -10h
var_8		= word ptr -8
var_6		= byte ptr -6
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 28h ; '('
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+28h+var_4], eax
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+34h+arg_0]
		xor	eax, eax
		xor	ebp, ebp
		mov	[esp+34h+var_24], eax
		push	edi
		cmp	dword ptr [esi+34h], 2210h
		jnz	short loc_323
		push	esi
		call	_ssl3_setup_buffers
		add	esp, 4
		test	eax, eax
		jz	loc_8E3
		push	0Bh
		push	esi
		call	_ssl23_read_bytes
		add	esp, 8
		mov	[esp+38h+var_24], eax
		cmp	eax, 0Bh
		jnz	loc_8E6
		mov	edi, [esi+4Ch]
		movq	xmm0, qword ptr	[edi]
		movq	[esp+38h+Src], xmm0
		mov	ax, [edi+8]
		mov	[esp+38h+var_8], ax
		movzx	eax, byte ptr [edi+0Ah]
		mov	[esp+38h+var_6], al
		mov	al, [edi]
		test	al, al
		jns	loc_44F
		cmp	byte ptr [edi+2], 1

loc_2FF:				; DATA XREF: .rdata:`SSLv23_server_method'::`2'::SSLv23_server_method_datao
		jnz	loc_44F
		mov	al, [edi+3]
		test	al, al
		jnz	short loc_36D
		cmp	byte ptr [edi+4], 2
		jnz	short loc_36D
		test	dword ptr [esi+100h], 1000000h

loc_31C:				; CODE XREF: _ssl23_get_client_hello+1CEj
		jnz	short loc_323
		mov	ebp, 1

loc_323:				; CODE XREF: _ssl23_get_client_hello+2Cj
					; _ssl23_get_client_hello:loc_31Cj ...
		cmp	dword ptr [esi], 303h
		jle	short loc_348
		push	offset ??_C@_0BO@NOMIEOMK@s?9?$DOversion?5?$DM?$DN?5TLS_MAX_VERSION?$AA@ ; "s->version <= TLS_MAX_VERSION"
		push	193h
		push	offset ??_C@_0BB@NKEKLOOB@?4?2ssl?2s23_srvr?4c?$AA@ ; ".\\ssl\\s23_srvr.c"
		call	_OpenSSLDie
		add	esp, 0Ch
		cmp	dword ptr [esi], 303h

loc_348:				; CODE XREF: _ssl23_get_client_hello+ADj
		jge	short loc_399

loc_34A:				; CODE XREF: _ssl23_get_client_hello+186j
					; _ssl23_get_client_hello+1A5j	...
		mov	eax, [esi+98h]
		test	dword ptr [eax+38h], 30000h
		jz	short loc_399
		push	197h
		push	offset ??_C@_0BB@NKEKLOOB@?4?2ssl?2s23_srvr?4c?$AA@ ; ".\\ssl\\s23_srvr.c"
		push	17Bh
		jmp	loc_8D7
; ---------------------------------------------------------------------------

loc_36D:				; CODE XREF: _ssl23_get_client_hello+8Ej
					; _ssl23_get_client_hello+94j
		cmp	al, 3
		jnz	short loc_323
		mov	al, [edi+4]
		cmp	al, 1
		jb	loc_426
		cmp	al, 3
		jb	short loc_3E5
		test	dword ptr [esi+100h], 8000000h
		jnz	short loc_3E5
		mov	dword ptr [esi], 303h
		mov	dword ptr [esi+34h], 2211h

loc_399:				; CODE XREF: _ssl23_get_client_hello:loc_348j
					; _ssl23_get_client_hello+DBj ...
		cmp	dword ptr [esi+34h], 2211h
		jnz	loc_7BA
		mov	eax, [esi+4Ch]
		mov	ebp, 2
		movzx	edi, byte ptr [eax]
		movzx	ecx, byte ptr [eax+4]
		and	edi, 7Fh
		movzx	eax, byte ptr [eax+1]
		shl	edi, 8
		or	edi, eax
		mov	[esp+38h+Size],	ecx
		cmp	edi, 1000h
		jle	loc_5EF
		push	1BCh
		push	offset ??_C@_0BB@NKEKLOOB@?4?2ssl?2s23_srvr?4c?$AA@ ; ".\\ssl\\s23_srvr.c"
		push	0D6h ; 'Ö'
		jmp	loc_8D7
; ---------------------------------------------------------------------------

loc_3E5:				; CODE XREF: _ssl23_get_client_hello+102j
					; _ssl23_get_client_hello+10Ej
		cmp	al, 2
		jb	short loc_407
		test	dword ptr [esi+100h], 10000000h
		jnz	short loc_407
		mov	dword ptr [esi], 302h
		mov	dword ptr [esi+34h], 2211h
		jmp	loc_34A
; ---------------------------------------------------------------------------

loc_407:				; CODE XREF: _ssl23_get_client_hello+16Bj
					; _ssl23_get_client_hello+177j
		mov	eax, [esi+100h]
		test	eax, 4000000h
		jnz	short loc_42C
		mov	dword ptr [esi], 301h
		mov	dword ptr [esi+34h], 2211h
		jmp	loc_34A
; ---------------------------------------------------------------------------

loc_426:				; CODE XREF: _ssl23_get_client_hello+FAj
		mov	eax, [esi+100h]

loc_42C:				; CODE XREF: _ssl23_get_client_hello+196j
		test	eax, 2000000h
		jnz	short loc_445
		mov	dword ptr [esi], 300h
		mov	dword ptr [esi+34h], 2211h
		jmp	loc_34A
; ---------------------------------------------------------------------------

loc_445:				; CODE XREF: _ssl23_get_client_hello+1B5j
		test	eax, 1000000h
		jmp	loc_31C
; ---------------------------------------------------------------------------

loc_44F:				; CODE XREF: _ssl23_get_client_hello+79j
					; _ssl23_get_client_hello:loc_2FFj
		cmp	al, 16h
		jnz	loc_568
		cmp	byte ptr [edi+1], 3
		jnz	loc_568
		cmp	byte ptr [edi+5], 1
		jnz	loc_568
		mov	al, [edi+3]
		test	al, al
		jnz	short loc_478
		cmp	byte ptr [edi+4], 5
		jb	short loc_482

loc_478:				; CODE XREF: _ssl23_get_client_hello+1F4j
		cmp	byte ptr [edi+9], 3
		jb	loc_568

loc_482:				; CODE XREF: _ssl23_get_client_hello+1FAj
		test	al, al
		jnz	short loc_4A0
		cmp	byte ptr [edi+4], 6
		jnb	short loc_4A0
		push	15Ch
		push	offset ??_C@_0BB@NKEKLOOB@?4?2ssl?2s23_srvr?4c?$AA@ ; ".\\ssl\\s23_srvr.c"
		push	12Ah
		jmp	loc_8D7
; ---------------------------------------------------------------------------

loc_4A0:				; CODE XREF: _ssl23_get_client_hello+208j
					; _ssl23_get_client_hello+20Ej
		cmp	byte ptr [edi+9], 3
		jbe	short loc_4AD
		mov	eax, 0FFh
		jmp	short loc_4BB
; ---------------------------------------------------------------------------

loc_4AD:				; CODE XREF: _ssl23_get_client_hello+228j
		movzx	eax, byte ptr [edi+0Ah]
		cmp	eax, 1
		jl	short loc_530
		cmp	eax, 3
		jl	short loc_4D7

loc_4BB:				; CODE XREF: _ssl23_get_client_hello+22Fj
		test	dword ptr [esi+100h], 8000000h
		jnz	short loc_4D7
		mov	dword ptr [esi], 303h
		mov	ebp, 3
		jmp	loc_399
; ---------------------------------------------------------------------------

loc_4D7:				; CODE XREF: _ssl23_get_client_hello+23Dj
					; _ssl23_get_client_hello+249j
		cmp	eax, 2
		jl	short loc_4F8
		test	dword ptr [esi+100h], 10000000h
		jnz	short loc_4F8
		mov	dword ptr [esi], 302h
		mov	ebp, 3
		jmp	loc_34A
; ---------------------------------------------------------------------------

loc_4F8:				; CODE XREF: _ssl23_get_client_hello+25Ej
					; _ssl23_get_client_hello+26Aj
		mov	eax, [esi+100h]
		test	eax, 4000000h
		jnz	short loc_515
		mov	dword ptr [esi], 301h
		mov	ebp, 3
		jmp	loc_34A
; ---------------------------------------------------------------------------

loc_515:				; CODE XREF: _ssl23_get_client_hello+287j
		test	eax, 2000000h
		jnz	loc_323
		mov	dword ptr [esi], 300h
		mov	ebp, 3
		jmp	loc_34A
; ---------------------------------------------------------------------------

loc_530:				; CODE XREF: _ssl23_get_client_hello+238j
		mov	eax, [esi+100h]
		test	eax, 2000000h
		jnz	short loc_54D
		mov	dword ptr [esi], 300h
		mov	ebp, 3
		jmp	loc_34A
; ---------------------------------------------------------------------------

loc_54D:				; CODE XREF: _ssl23_get_client_hello+2BFj
		test	eax, 4000000h
		jnz	loc_323
		mov	dword ptr [esi], 301h
		mov	ebp, 3
		jmp	loc_34A
; ---------------------------------------------------------------------------

loc_568:				; CODE XREF: _ssl23_get_client_hello+1D5j
					; _ssl23_get_client_hello+1DFj	...
		mov	ebx, dword ptr ds:__imp__strncmp
		push	4		; MaxCount
		push	edi		; Str2
		push	offset ??_C@_04IBPFIGHK@GET?5?$AA@ ; "GET "
		call	ebx ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_5DB
		push	5		; MaxCount
		push	edi		; Str2
		push	offset ??_C@_05LPJJJLLB@POST?5?$AA@ ; "POST "
		call	ebx ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_5DB
		push	5		; MaxCount
		push	edi		; Str2
		push	offset ??_C@_05PMJKDPIC@HEAD?5?$AA@ ; "HEAD "
		call	ebx ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_5DB
		push	4		; MaxCount
		push	edi		; Str2
		push	offset ??_C@_04DCMJKHH@PUT?5?$AA@ ; "PUT "
		call	ebx ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_5DB
		push	7		; MaxCount
		push	edi		; Str2
		push	offset ??_C@_07FNNMGOPK@CONNECT?$AA@ ; "CONNECT"
		call	ebx ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_323
		push	18Dh
		push	offset ??_C@_0BB@NKEKLOOB@?4?2ssl?2s23_srvr?4c?$AA@ ; ".\\ssl\\s23_srvr.c"
		push	9Bh ; ''
		jmp	loc_8D7
; ---------------------------------------------------------------------------

loc_5DB:				; CODE XREF: _ssl23_get_client_hello+301j
					; _ssl23_get_client_hello+312j	...
		push	18Ah
		push	offset ??_C@_0BB@NKEKLOOB@?4?2ssl?2s23_srvr?4c?$AA@ ; ".\\ssl\\s23_srvr.c"
		push	9Ch ; ''
		jmp	loc_8D7
; ---------------------------------------------------------------------------

loc_5EF:				; CODE XREF: _ssl23_get_client_hello+14Fj
		cmp	edi, 9
		jge	short loc_608
		push	1C1h
		push	offset ??_C@_0BB@NKEKLOOB@?4?2ssl?2s23_srvr?4c?$AA@ ; ".\\ssl\\s23_srvr.c"
		push	0D5h ; 'Õ'
		jmp	loc_8D7
; ---------------------------------------------------------------------------

loc_608:				; CODE XREF: _ssl23_get_client_hello+376j
		lea	eax, [edi+2]
		push	eax
		push	esi
		call	_ssl23_read_bytes
		add	esp, 8
		test	eax, eax
		jle	loc_8E6
		mov	eax, [esi+50h]
		sub	eax, 2
		push	eax
		mov	eax, [esi+4Ch]
		add	eax, 2
		push	eax
		push	esi
		call	_ssl3_finish_mac
		mov	ecx, [esi+64h]
		add	esp, 0Ch
		test	ecx, ecx
		jz	short loc_658
		push	dword ptr [esi+68h]
		mov	eax, [esi+50h]
		push	esi
		sub	eax, 2
		push	eax
		mov	eax, [esi+4Ch]
		add	eax, 2
		push	eax
		push	0
		push	2
		push	0
		call	ecx
		add	esp, 1Ch

loc_658:				; CODE XREF: _ssl23_get_client_hello+3BDj
		mov	ecx, [esi+4Ch]
		movzx	eax, byte ptr [ecx+5]
		movzx	edx, byte ptr [ecx+6]
		movzx	ebx, byte ptr [ecx+8]
		shl	eax, 8
		or	edx, eax
		movzx	eax, byte ptr [ecx+7]
		shl	eax, 8
		or	ebx, eax
		mov	[esp+38h+var_24], edx
		movzx	eax, byte ptr [ecx+9]
		shl	eax, 8
		mov	[esp+38h+var_1C], ebx
		movzx	ebx, byte ptr [ecx+0Ah]
		add	ecx, 0Bh
		or	ebx, eax
		mov	[esp+38h+var_18], ecx
		mov	eax, [esi+3Ch]
		mov	[esp+38h+var_28], ebx
		mov	ebx, [eax+4]
		mov	eax, [esp+38h+var_28]
		add	eax, 0Bh
		add	eax, [esp+38h+var_1C]
		add	eax, edx
		cmp	eax, [esi+50h]
		jz	short loc_6C1
		push	1E3h
		push	offset ??_C@_0BB@NKEKLOOB@?4?2ssl?2s23_srvr?4c?$AA@ ; ".\\ssl\\s23_srvr.c"
		push	0D5h ; 'Õ'
		jmp	loc_8D7
; ---------------------------------------------------------------------------

loc_6C1:				; CODE XREF: _ssl23_get_client_hello+42Fj
		mov	eax, [esp+38h+Size]
		xorps	xmm0, xmm0
		mov	byte ptr [ebx],	1
		inc	ebx
		mov	[esp+38h+Size],	20h ; ' '
		mov	[esp+38h+var_14], ebx
		mov	byte ptr [ebx+3], 3
		mov	[ebx+4], al
		mov	eax, [esp+38h+var_28]
		cmp	eax, 20h ; ' '
		movups	xmmword	ptr [ebx+5], xmm0
		cmova	eax, [esp+38h+Size]
		push	eax		; Size
		mov	[esp+3Ch+var_28], eax
		mov	eax, [esp+3Ch+var_1C]
		add	eax, edx
		add	eax, ecx
		push	eax		; Src
		lea	eax, [ebx+5]
		sub	eax, [esp+40h+var_28]
		add	eax, 20h ; ' '
		push	eax		; Dst
		movups	xmmword	ptr [ebx+15h], xmm0
		call	_memcpy
		xor	eax, eax
		mov	byte ptr [ebx+25h], 0
		lea	edx, [ebx+26h]
		mov	[esp+44h+var_28], eax
		add	esp, 0Ch
		mov	[esp+38h+Size],	edx
		add	ebx, 28h ; '('
		xor	ecx, ecx
		cmp	[esp+38h+var_24], eax
		jbe	short loc_763
		mov	edx, [esp+38h+var_18]

loc_734:				; CODE XREF: _ssl23_get_client_hello+4E1j
		cmp	byte ptr [ecx+edx], 0
		jnz	short loc_756
		movzx	eax, byte ptr [ecx+edx+1]
		mov	[ebx], al
		movzx	eax, byte ptr [ecx+edx+2]
		mov	[ebx+1], al
		add	ebx, ebp
		mov	eax, [esp+38h+var_28]
		add	eax, 2
		mov	[esp+38h+var_28], eax

loc_756:				; CODE XREF: _ssl23_get_client_hello+4BCj
		add	ecx, 3
		cmp	ecx, [esp+38h+var_24]
		jb	short loc_734
		mov	edx, [esp+38h+Size]

loc_763:				; CODE XREF: _ssl23_get_client_hello+4B2j
		mov	ecx, [esp+38h+var_14]
		sar	eax, 8
		mov	[edx], al
		mov	eax, [esp+38h+var_28]
		mov	[edx+1], al
		mov	byte ptr [ebx],	1
		inc	ebx
		mov	byte ptr [ebx],	0
		mov	eax, [esi+3Ch]
		sub	ebx, [eax+4]
		sub	ebx, 3
		mov	eax, ebx
		mov	[ecx+2], bl
		sar	eax, 10h
		mov	[ecx], al
		mov	eax, ebx
		sar	eax, 8
		mov	[ecx+1], al
		mov	eax, [esi+58h]
		mov	dword ptr [eax+354h], 1
		mov	eax, [esi+58h]
		mov	dword ptr [eax+340h], 1
		mov	eax, [esi+58h]
		mov	[eax+33Ch], ebx
		jmp	short loc_7E5
; ---------------------------------------------------------------------------

loc_7BA:				; CODE XREF: _ssl23_get_client_hello+124j
		cmp	ebp, 1
		jnz	short loc_7D3
		push	222h
		push	offset ??_C@_0BB@NKEKLOOB@?4?2ssl?2s23_srvr?4c?$AA@ ; ".\\ssl\\s23_srvr.c"
		push	102h
		jmp	loc_8D7
; ---------------------------------------------------------------------------

loc_7D3:				; CODE XREF: _ssl23_get_client_hello+541j
		cmp	ebp, 2
		jz	short loc_7E1
		cmp	ebp, 3
		jnz	loc_89D

loc_7E1:				; CODE XREF: _ssl23_get_client_hello+55Aj
		mov	edi, [esp+38h+var_24]

loc_7E5:				; CODE XREF: _ssl23_get_client_hello+53Cj
		push	dword ptr [esi]
		call	_ssl23_get_server_method
		add	esp, 4
		test	eax, eax
		jnz	short loc_807
		push	25Ah
		push	offset ??_C@_0BB@NKEKLOOB@?4?2ssl?2s23_srvr?4c?$AA@ ; ".\\ssl\\s23_srvr.c"
		push	102h
		jmp	loc_8D7
; ---------------------------------------------------------------------------

loc_807:				; CODE XREF: _ssl23_get_client_hello+575j
		push	1
		push	esi
		mov	[esi+8], eax
		call	_ssl_init_wbio_buffer
		add	esp, 8
		test	eax, eax
		jz	loc_8E3
		mov	eax, [esi+58h]
		mov	dword ptr [esi+34h], 2110h
		cmp	ebp, 3
		jnz	short loc_876
		mov	dword ptr [esi+38h], 0F0h ; 'ð'
		mov	[esi+50h], edi
		cmp	dword ptr [eax+0ECh], 0
		jnz	short loc_850
		push	esi
		call	_ssl3_setup_read_buffer
		add	esp, 4
		test	eax, eax
		jz	loc_8E3

loc_850:				; CODE XREF: _ssl23_get_client_hello+5C1j
		mov	eax, [esi+58h]
		lea	ecx, [esp+38h+Src]
		push	edi		; Size
		push	ecx		; Src
		mov	eax, [eax+0ECh]
		push	eax		; Dst
		mov	[esi+4Ch], eax
		call	_memcpy
		mov	eax, [esi+58h]
		add	esp, 0Ch
		mov	[eax+0F8h], edi
		jmp	short loc_887
; ---------------------------------------------------------------------------

loc_876:				; CODE XREF: _ssl23_get_client_hello+5AEj
		mov	dword ptr [esi+50h], 0
		mov	dword ptr [eax+0F8h], 0

loc_887:				; CODE XREF: _ssl23_get_client_hello+5F8j
		mov	eax, [esi+58h]
		mov	dword ptr [eax+0F4h], 0
		mov	eax, [esi+8]
		mov	eax, [eax+10h]
		mov	[esi+20h], eax

loc_89D:				; CODE XREF: _ssl23_get_client_hello+55Fj
		lea	eax, [ebp-1]
		cmp	eax, 2
		ja	short loc_8C8
		push	esi
		mov	dword ptr [esi+44h], 0
		call	_SSL_accept
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_8C8:				; CODE XREF: _ssl23_get_client_hello+627j
		push	280h
		push	offset ??_C@_0BB@NKEKLOOB@?4?2ssl?2s23_srvr?4c?$AA@ ; ".\\ssl\\s23_srvr.c"
		push	0FCh ; 'ü'

loc_8D7:				; CODE XREF: _ssl23_get_client_hello+ECj
					; _ssl23_get_client_hello+164j	...
		push	76h ; 'v'
		push	14h
		call	_ERR_put_error
		add	esp, 14h

loc_8E3:				; CODE XREF: _ssl23_get_client_hello+39j
					; _ssl23_get_client_hello+59Bj	...
		or	eax, 0FFFFFFFFh

loc_8E6:				; CODE XREF: _ssl23_get_client_hello+51j
					; _ssl23_get_client_hello+39Bj
		mov	ecx, [esp+38h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
_ssl23_get_client_hello	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8FCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; time_t __cdecl static	time(time_t *Time)
_time		proc near
		jmp	dword ptr ds:__imp___time64
_time		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 904h
; COMDAT (pick any)
		public ??_C@_0BB@NKEKLOOB@?4?2ssl?2s23_srvr?4c?$AA@
; `string'
??_C@_0BB@NKEKLOOB@?4?2ssl?2s23_srvr?4c?$AA@ db	'.\ssl\s23_srvr.c',0
					; DATA XREF: _ssl23_accept+18Do
					; _ssl23_get_client_hello+B9o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 918h
; COMDAT (pick any)
		public ??_C@_04IBPFIGHK@GET?5?$AA@
; char `string'[]
??_C@_04IBPFIGHK@GET?5?$AA@ db 'GET ',0 ; DATA XREF: _ssl23_get_client_hello+2F5o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 920h
; COMDAT (pick any)
		public ??_C@_05LPJJJLLB@POST?5?$AA@
; char `string'[]
??_C@_05LPJJJLLB@POST?5?$AA@ db	'POST ',0 ; DATA XREF: _ssl23_get_client_hello+306o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 928h
; COMDAT (pick any)
		public ??_C@_05PMJKDPIC@HEAD?5?$AA@
; char `string'[]
??_C@_05PMJKDPIC@HEAD?5?$AA@ db	'HEAD ',0 ; DATA XREF: _ssl23_get_client_hello+317o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 930h
; COMDAT (pick any)
		public ??_C@_04DCMJKHH@PUT?5?$AA@
; char `string'[]
??_C@_04DCMJKHH@PUT?5?$AA@ db 'PUT ',0  ; DATA XREF: _ssl23_get_client_hello+328o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 938h
; COMDAT (pick any)
		public ??_C@_07FNNMGOPK@CONNECT?$AA@
; char `string'[]
??_C@_07FNNMGOPK@CONNECT?$AA@ db 'CONNECT',0 ; DATA XREF: _ssl23_get_client_hello+339o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 940h
; COMDAT (pick any)
		public ??_C@_0BO@NOMIEOMK@s?9?$DOversion?5?$DM?$DN?5TLS_MAX_VERSION?$AA@
; `string'
??_C@_0BO@NOMIEOMK@s?9?$DOversion?5?$DM?$DN?5TLS_MAX_VERSION?$AA@ db 's->version <= TLS_MAX_VERSION',0
					; DATA XREF: _ssl23_get_client_hello+AFo
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _tls1_new:near	; DATA XREF: .rdata:00000204o
		extrn _tls1_free:near	; DATA XREF: .rdata:0000020Co
		extrn _tls1_clear:near	; DATA XREF: .rdata:00000208o
		extrn _TLSv1_2_enc_data:near ; DATA XREF: .rdata:00000264o
		extrn _ssl_ok:near	; DATA XREF: .rdata:0000022Co
		extrn _ssl_undefined_function:near ; DATA XREF:	.rdata:00000214o
					; .rdata:00000224o ...
		extrn _ssl_undefined_void_function:near	; DATA XREF: .rdata:00000268o
		extrn _ssl_undefined_const_function:near ; DATA	XREF: .rdata:00000250o
		extrn _ssl3_get_message:near ; DATA XREF: .rdata:00000230o
		extrn _ssl3_dispatch_alert:near	; DATA XREF: .rdata:0000023Co
		extrn _ssl3_read_bytes:near ; DATA XREF: .rdata:00000234o
		extrn _ssl3_write_bytes:near ; DATA XREF: .rdata:00000238o
		extrn _ssl3_ctrl:near	; DATA XREF: .rdata:00000240o
		extrn _ssl3_ctx_ctrl:near ; DATA XREF: .rdata:00000244o
		extrn _ssl3_callback_ctrl:near ; DATA XREF: .rdata:0000026Co
		extrn _ssl3_ctx_callback_ctrl:near ; DATA XREF:	.rdata:00000270o
		extrn _ssl23_num_ciphers:near ;	DATA XREF: .rdata:00000254o
		extrn _ssl23_get_cipher:near ; DATA XREF: .rdata:00000258o
		extrn _ssl23_read:near	; DATA XREF: .rdata:00000218o
		extrn _ssl23_peek:near	; DATA XREF: .rdata:0000021Co
		extrn _ssl23_write:near	; DATA XREF: .rdata:00000220o
		extrn _ssl23_put_cipher_by_char:near ; DATA XREF: .rdata:0000024Co
		extrn _ssl23_get_cipher_by_char:near ; DATA XREF: .rdata:00000248o
		extrn _ssl23_default_timeout:near ; DATA XREF: .rdata:00000260o
; __time64_t __cdecl __time64(__time64_t *Time)
		extrn __imp___time64:near ; CODE XREF: _ssl23_accept+Fp
					; DATA XREF: _ssl23_accept+Fr ...
; int __cdecl _strncmp(const char *Str1, const char *Str2, size_t MaxCount)
		extrn __imp__strncmp:near ; CODE XREF: _ssl23_get_client_hello+2FAp
					; _ssl23_get_client_hello+30Bp	...
; void __stdcall SetLastError(DWORD dwErrCode)
		extrn __imp__SetLastError@4:near ; CODE	XREF: _ssl23_accept+44p
					; DATA XREF: _ssl23_accept+44r
		extrn _BUF_MEM_new:near	; CODE XREF: _ssl23_accept+FBp
		extrn _BUF_MEM_free:near ; CODE	XREF: _ssl23_accept+1A6p
		extrn _BUF_MEM_grow:near ; CODE	XREF: _ssl23_accept+110p
		extrn _OpenSSLDie:near	; CODE XREF: _ssl23_get_client_hello+BEp
		extrn _ERR_put_error:near ; CODE XREF: _ssl23_accept+19Bp
					; _ssl23_get_client_hello+65Fp
		extrn _ERR_clear_error:near ; CODE XREF: _ssl23_accept+3Dp
		extrn _SSL_clear:near	; CODE XREF: _ssl23_accept+8Dp
		extrn _SSL_accept:near	; CODE XREF: _ssl23_get_client_hello+631p
		extrn _SSLv3_server_method:near	; CODE XREF: _ssl23_get_server_method+9j
		extrn _TLSv1_server_method:near	; CODE XREF: _ssl23_get_server_method+14j
		extrn _TLSv1_1_server_method:near ; CODE XREF: _ssl23_get_server_method+1Fj
		extrn _TLSv1_2_server_method:near ; CODE XREF: _ssl23_get_server_method+2Aj
		extrn _SSL_state:near	; CODE XREF: _ssl23_accept+6Dp
					; _ssl23_accept+7Dp
		extrn _ssl3_init_finished_mac:near ; CODE XREF:	_ssl23_accept+124p
		extrn _ssl3_finish_mac:near ; CODE XREF: _ssl23_get_client_hello+3B0p
		extrn _ssl3_setup_buffers:near ; CODE XREF: _ssl23_get_client_hello+2Fp
		extrn _ssl3_setup_read_buffer:near ; CODE XREF:	_ssl23_get_client_hello+5C4p
		extrn _ssl23_read_bytes:near ; CODE XREF: _ssl23_get_client_hello+42p
					; _ssl23_get_client_hello+391p
		extrn _ssl_init_wbio_buffer:near ; CODE	XREF: _ssl23_get_client_hello+591p
		extrn _RAND_add:near	; CODE XREF: _ssl23_accept+35p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _ssl23_get_client_hello+643p
					; _ssl23_get_client_hello+674p
		extrn __chkstk:near	; CODE XREF: _ssl23_accept+5p
					; _ssl23_accept+21p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _ssl23_get_client_hello+490p
					; _ssl23_get_client_hello+5E7p
		extrn ___security_cookie:near ;	DATA XREF: _ssl23_get_client_hello+Ar
		extrn __fltused:near


		end
