;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	B177F73127910E230986CE020229A5A4
; Input	CRC32 :	C1A2F779

; File Name   :	C:\compspace\Diff\openssl\obj\cms_kari.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_RecipientEncryptedKey_cert_cmp
_CMS_RecipientEncryptedKey_cert_cmp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		mov	ecx, [eax]
		test	ecx, ecx
		jnz	short loc_1C
		push	[esp+arg_4]
		push	dword ptr [eax+4]
		call	_cms_ias_cert_cmp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1C:					; CODE XREF: _CMS_RecipientEncryptedKey_cert_cmp+Aj
		cmp	ecx, 1
		jnz	short loc_33
		mov	eax, [eax+4]
		push	[esp+arg_4]
		push	dword ptr [eax]
		call	_cms_keyid_cert_cmp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_33:					; CODE XREF: _CMS_RecipientEncryptedKey_cert_cmp+1Fj
		or	eax, 0FFFFFFFFh
		retn
_CMS_RecipientEncryptedKey_cert_cmp endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 38h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_RecipientEncryptedKey_get0_id
_CMS_RecipientEncryptedKey_get0_id proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, [esp+arg_0]
		mov	ecx, [eax]
		mov	eax, [ecx]
		test	eax, eax
		jnz	short loc_85
		mov	edx, [esp+arg_10]
		test	edx, edx
		jz	short loc_53
		mov	eax, [ecx+4]
		mov	eax, [eax]
		mov	[edx], eax

loc_53:					; CODE XREF: _CMS_RecipientEncryptedKey_get0_id+12j
		mov	edx, [esp+arg_14]
		test	edx, edx
		jz	short loc_63
		mov	eax, [ecx+4]
		mov	eax, [eax+4]
		mov	[edx], eax

loc_63:					; CODE XREF: _CMS_RecipientEncryptedKey_get0_id+21j
		mov	eax, [esp+arg_4]
		test	eax, eax
		jz	short loc_71
		mov	dword ptr [eax], 0

loc_71:					; CODE XREF: _CMS_RecipientEncryptedKey_get0_id+31j
		mov	eax, [esp+arg_8]
		test	eax, eax
		jz	short loc_7F
		mov	dword ptr [eax], 0

loc_7F:					; CODE XREF: _CMS_RecipientEncryptedKey_get0_id+3Fj
		mov	eax, [esp+arg_C]
		jmp	short loc_CB
; ---------------------------------------------------------------------------

loc_85:					; CODE XREF: _CMS_RecipientEncryptedKey_get0_id+Aj
		cmp	eax, 1
		jnz	short loc_DB
		mov	edx, [esp+arg_4]
		test	edx, edx
		jz	short loc_99
		mov	eax, [ecx+4]
		mov	eax, [eax]
		mov	[edx], eax

loc_99:					; CODE XREF: _CMS_RecipientEncryptedKey_get0_id+58j
		mov	edx, [esp+arg_8]
		test	edx, edx
		jz	short loc_A9
		mov	eax, [ecx+4]
		mov	eax, [eax+4]
		mov	[edx], eax

loc_A9:					; CODE XREF: _CMS_RecipientEncryptedKey_get0_id+67j
		mov	edx, [esp+arg_C]
		test	edx, edx
		jz	short loc_B9
		mov	eax, [ecx+4]
		mov	eax, [eax+8]
		mov	[edx], eax

loc_B9:					; CODE XREF: _CMS_RecipientEncryptedKey_get0_id+77j
		mov	eax, [esp+arg_10]
		test	eax, eax
		jz	short loc_C7
		mov	dword ptr [eax], 0

loc_C7:					; CODE XREF: _CMS_RecipientEncryptedKey_get0_id+87j
		mov	eax, [esp+arg_14]

loc_CB:					; CODE XREF: _CMS_RecipientEncryptedKey_get0_id+4Bj
		test	eax, eax
		jz	short loc_D5
		mov	dword ptr [eax], 0

loc_D5:					; CODE XREF: _CMS_RecipientEncryptedKey_get0_id+95j
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_DB:					; CODE XREF: _CMS_RecipientEncryptedKey_get0_id+50j
		xor	eax, eax
		retn
_CMS_RecipientEncryptedKey_get0_id endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_RecipientInfo_kari_decrypt
_CMS_RecipientInfo_kari_decrypt	proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		mov	eax, [esp+4+arg_8]
		push	ebx
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		mov	eax, [eax+4]
		push	edi
		push	1
		push	esi
		mov	edi, [eax]
		mov	ebx, [eax+8]
		mov	[esp+18h+var_4], 0
		call	_cms_env_asn1_ctrl
		add	esp, 8
		test	eax, eax
		jz	short loc_17F
		push	0
		push	dword ptr [esi+4]
		lea	eax, [esp+18h+arg_8]
		push	edi
		push	ebx
		push	eax
		lea	eax, [esp+24h+var_4]
		push	eax
		call	_cms_kek_cipher
		add	esp, 18h
		test	eax, eax
		jz	short $err$10_0
		mov	eax, [esp+10h+arg_0]
		mov	eax, [eax+4]
		mov	esi, [eax+0Ch]
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_156
		push	dword ptr [esi+14h]
		push	eax
		call	_OPENSSL_cleanse
		push	dword ptr [esi+10h]
		call	_CRYPTO_free
		add	esp, 0Ch

loc_156:				; CODE XREF: _CMS_RecipientInfo_kari_decrypt+60j
		mov	eax, [esp+10h+var_4]
		mov	[esi+10h], eax
		mov	eax, [esp+10h+arg_8]
		pop	edi
		mov	[esi+14h], eax
		mov	eax, 1
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

$err$10_0:				; CODE XREF: _CMS_RecipientInfo_kari_decrypt+4Fj
		mov	ecx, [esp+10h+var_4]
		test	ecx, ecx
		jz	short loc_17F
		push	ecx
		call	_CRYPTO_free
		add	esp, 4

loc_17F:				; CODE XREF: _CMS_RecipientInfo_kari_decrypt+32j
					; _CMS_RecipientInfo_kari_decrypt+94j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
_CMS_RecipientInfo_kari_decrypt	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 188h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_RecipientInfo_kari_get0_alg
_CMS_RecipientInfo_kari_get0_alg proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		cmp	dword ptr [ecx], 1
		jz	short loc_1AF
		push	4Fh ; 'O'
		push	offset ??_C@_0BI@CJEDLOFJ@?4?2crypto?2cms?2cms_kari?4c?$AA@ ; ".\\crypto\\cms\\cms_kari.c"
		push	0B5h ; 'µ'
		push	0AFh ; '¯'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1AF:				; CODE XREF: _CMS_RecipientInfo_kari_get0_alg+7j
		mov	edx, [esp+arg_4]
		test	edx, edx
		jz	short loc_1BF
		mov	eax, [ecx+4]
		mov	eax, [eax+0Ch]
		mov	[edx], eax

loc_1BF:				; CODE XREF: _CMS_RecipientInfo_kari_get0_alg+2Dj
		mov	edx, [esp+arg_8]
		test	edx, edx
		jz	short loc_1CF
		mov	eax, [ecx+4]
		mov	eax, [eax+8]
		mov	[edx], eax

loc_1CF:				; CODE XREF: _CMS_RecipientInfo_kari_get0_alg+3Dj
		mov	eax, 1
		retn
_CMS_RecipientInfo_kari_get0_alg endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_RecipientInfo_kari_get0_ctx
_CMS_RecipientInfo_kari_get0_ctx proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax], 1
		jnz	short loc_1E8
		mov	eax, [eax+4]
		add	eax, 18h
		retn
; ---------------------------------------------------------------------------

loc_1E8:				; CODE XREF: _CMS_RecipientInfo_kari_get0_ctx+7j
		xor	eax, eax
		retn
_CMS_RecipientInfo_kari_get0_ctx endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_RecipientInfo_kari_get0_orig_id
_CMS_RecipientInfo_kari_get0_orig_id proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax], 1
		jz	short loc_213
		push	70h ; 'p'
		push	offset ??_C@_0BI@CJEDLOFJ@?4?2crypto?2cms?2cms_kari?4c?$AA@ ; ".\\crypto\\cms\\cms_kari.c"
		push	0B5h ; 'µ'
		push	0ADh ; '­'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_213:				; CODE XREF: _CMS_RecipientInfo_kari_get0_orig_id+7j
		mov	eax, [eax+4]
		push	edi
		mov	edi, [esp+4+arg_10]
		mov	ecx, [eax+4]
		test	edi, edi
		jz	short loc_228
		mov	dword ptr [edi], 0

loc_228:				; CODE XREF: _CMS_RecipientInfo_kari_get0_orig_id+34j
		mov	edx, [esp+4+arg_14]
		test	edx, edx
		jz	short loc_236
		mov	dword ptr [edx], 0

loc_236:				; CODE XREF: _CMS_RecipientInfo_kari_get0_orig_id+42j
		push	esi
		mov	esi, [esp+8+arg_C]
		test	esi, esi
		jz	short loc_245
		mov	dword ptr [esi], 0

loc_245:				; CODE XREF: _CMS_RecipientInfo_kari_get0_orig_id+51j
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		test	ebx, ebx
		jz	short loc_254
		mov	dword ptr [ebx], 0

loc_254:				; CODE XREF: _CMS_RecipientInfo_kari_get0_orig_id+60j
		push	ebp
		mov	ebp, [esp+10h+arg_8]
		test	ebp, ebp
		jz	short loc_264
		mov	dword ptr [ebp+0], 0

loc_264:				; CODE XREF: _CMS_RecipientInfo_kari_get0_orig_id+6Fj
		mov	eax, [ecx]
		test	eax, eax
		jnz	short loc_28B
		test	edi, edi
		jz	short loc_275
		mov	eax, [ecx+4]
		mov	eax, [eax]
		mov	[edi], eax

loc_275:				; CODE XREF: _CMS_RecipientInfo_kari_get0_orig_id+80j
		test	edx, edx
		jz	short loc_2C0
		mov	eax, [ecx+4]
		pop	ebp
		pop	ebx
		pop	esi
		mov	eax, [eax+4]
		mov	[edx], eax
		mov	eax, 1
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_28B:				; CODE XREF: _CMS_RecipientInfo_kari_get0_orig_id+7Cj
		cmp	eax, 1
		jnz	short loc_2A3
		test	esi, esi
		jz	short loc_2C0
		mov	eax, [ecx+4]
		pop	ebp
		pop	ebx
		mov	[esi], eax
		mov	eax, 1
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_2A3:				; CODE XREF: _CMS_RecipientInfo_kari_get0_orig_id+A2j
		cmp	eax, 2
		jnz	short loc_2CA
		test	ebx, ebx
		jz	short loc_2B3
		mov	eax, [ecx+4]
		mov	eax, [eax]
		mov	[ebx], eax

loc_2B3:				; CODE XREF: _CMS_RecipientInfo_kari_get0_orig_id+BEj
		test	ebp, ebp
		jz	short loc_2C0
		mov	eax, [ecx+4]
		mov	eax, [eax+4]
		mov	[ebp+0], eax

loc_2C0:				; CODE XREF: _CMS_RecipientInfo_kari_get0_orig_id+8Bj
					; _CMS_RecipientInfo_kari_get0_orig_id+A6j ...
		pop	ebp
		pop	ebx
		pop	esi
		mov	eax, 1
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_2CA:				; CODE XREF: _CMS_RecipientInfo_kari_get0_orig_id+BAj
		pop	ebp
		pop	ebx
		pop	esi
		xor	eax, eax
		pop	edi
		retn
_CMS_RecipientInfo_kari_get0_orig_id endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2D4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_RecipientInfo_kari_get0_reks
_CMS_RecipientInfo_kari_get0_reks proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax], 1
		jz	short loc_2FB
		push	60h ; '`'
		push	offset ??_C@_0BI@CJEDLOFJ@?4?2crypto?2cms?2cms_kari?4c?$AA@ ; ".\\crypto\\cms\\cms_kari.c"
		push	0B5h ; 'µ'
		push	0ACh ; '¬'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_2FB:				; CODE XREF: _CMS_RecipientInfo_kari_get0_reks+7j
		mov	eax, [eax+4]
		mov	eax, [eax+10h]
		retn
_CMS_RecipientInfo_kari_get0_reks endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 304h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_RecipientInfo_kari_orig_id_cmp
_CMS_RecipientInfo_kari_orig_id_cmp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax], 1
		jz	short loc_331
		push	95h ; ''
		push	offset ??_C@_0BI@CJEDLOFJ@?4?2crypto?2cms?2cms_kari?4c?$AA@ ; ".\\crypto\\cms\\cms_kari.c"
		push	0B5h ; 'µ'
		push	0AEh ; '®'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, 0FFFFFFFEh
		retn
; ---------------------------------------------------------------------------

loc_331:				; CODE XREF: _CMS_RecipientInfo_kari_orig_id_cmp+7j
		mov	eax, [eax+4]
		mov	eax, [eax+4]
		mov	ecx, [eax]
		test	ecx, ecx
		jnz	short loc_34D
		push	[esp+arg_4]
		push	dword ptr [eax+4]
		call	_cms_ias_cert_cmp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_34D:				; CODE XREF: _CMS_RecipientInfo_kari_orig_id_cmp+37j
		cmp	ecx, 1
		jnz	short loc_362
		push	[esp+arg_4]
		push	dword ptr [eax+4]
		call	_cms_keyid_cert_cmp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_362:				; CODE XREF: _CMS_RecipientInfo_kari_orig_id_cmp+4Cj
		or	eax, 0FFFFFFFFh
		retn
_CMS_RecipientInfo_kari_orig_id_cmp endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 368h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CMS_RecipientInfo_kari_set0_pkey
_CMS_RecipientInfo_kari_set0_pkey proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	edi
		mov	edi, [eax+4]
		mov	eax, [edi+14h]
		test	eax, eax
		jz	short loc_387
		push	eax
		call	_EVP_PKEY_CTX_free
		add	esp, 4
		mov	dword ptr [edi+14h], 0

loc_387:				; CODE XREF: _CMS_RecipientInfo_kari_set0_pkey+Dj
		mov	eax, [esp+4+arg_4]
		test	eax, eax
		jnz	short loc_396
		mov	eax, 1
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_396:				; CODE XREF: _CMS_RecipientInfo_kari_set0_pkey+25j
		push	esi
		push	0
		push	eax
		call	_EVP_PKEY_CTX_new
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_3C9
		push	esi
		call	_EVP_PKEY_derive_init
		add	esp, 4
		test	eax, eax
		jz	short $err$10
		mov	[edi+14h], esi
		mov	eax, 1
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

$err$10:				; CODE XREF: _CMS_RecipientInfo_kari_set0_pkey+4Bj
		push	esi
		call	_EVP_PKEY_CTX_free
		add	esp, 4

loc_3C9:				; CODE XREF: _CMS_RecipientInfo_kari_set0_pkey+3Ej
		pop	esi
		xor	eax, eax
		pop	edi
		retn
_CMS_RecipientInfo_kari_set0_pkey endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _cms_RecipientInfo_kari_encrypt
_cms_RecipientInfo_kari_encrypt	proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 8
		call	__chkstk
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		cmp	dword ptr [esi], 1
		jz	short loc_409
		push	1ABh
		push	offset ??_C@_0BI@CJEDLOFJ@?4?2crypto?2cms?2cms_kari?4c?$AA@ ; ".\\crypto\\cms\\cms_kari.c"
		push	0B5h ; 'µ'
		push	0B2h ; '²'
		push	2Eh ; '.'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_409:				; CODE XREF: _cms_RecipientInfo_kari_encrypt+12j
		mov	eax, [esp+0Ch+arg_0]
		push	ebp
		push	edi
		mov	edi, [esi+4]
		mov	eax, [eax+4]
		mov	ebp, [edi+10h]
		mov	eax, [eax+0Ch]
		mov	[esp+14h+arg_4], eax
		push	dword ptr [eax+0Ch]
		push	edi
		call	_cms_wrap_init
		add	esp, 8
		test	eax, eax
		jnz	short loc_436
		pop	edi
		pop	ebp
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_436:				; CODE XREF: _cms_RecipientInfo_kari_encrypt+5Dj
		push	ebx
		mov	ebx, [edi+4]
		cmp	dword ptr [ebx], 0FFFFFFFFh
		jnz	short loc_45E
		mov	dword ptr [ebx], 2
		call	_CMS_OriginatorPublicKey_it
		push	eax
		call	_ASN1_item_new
		add	esp, 4
		mov	[ebx+4], eax
		test	eax, eax
		jz	loc_4E9

loc_45E:				; CODE XREF: _cms_RecipientInfo_kari_encrypt+6Dj
		push	0
		push	esi
		call	_cms_env_asn1_ctrl
		add	esp, 8
		test	eax, eax
		jz	short loc_4E9
		push	ebp
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_4DC
		nop	dword ptr [eax+00h]

loc_480:				; CODE XREF: _cms_RecipientInfo_kari_encrypt+10Aj
		push	esi
		push	ebp
		call	_sk_value
		mov	ebx, eax
		push	dword ptr [ebx+8]
		push	dword ptr [edi+14h]
		call	_EVP_PKEY_derive_set_peer
		add	esp, 10h
		test	eax, eax
		jle	short loc_4E9
		mov	eax, [esp+18h+arg_4]
		push	1
		push	edi
		push	dword ptr [eax+14h]
		push	dword ptr [eax+10h]
		lea	eax, [esp+28h+var_8]
		push	eax
		lea	eax, [esp+2Ch+var_4]
		push	eax
		call	_cms_kek_cipher
		add	esp, 18h
		test	eax, eax
		jz	short loc_4E9
		push	[esp+18h+var_8]
		push	[esp+1Ch+var_4]
		push	dword ptr [ebx+4]
		call	_ASN1_STRING_set0
		push	ebp
		inc	esi
		call	_sk_num
		add	esp, 10h
		cmp	esi, eax
		jl	short loc_480

loc_4DC:				; CODE XREF: _cms_RecipientInfo_kari_encrypt+AAj
		pop	ebx
		pop	edi
		pop	ebp
		mov	eax, 1
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_4E9:				; CODE XREF: _cms_RecipientInfo_kari_encrypt+88j
					; _cms_RecipientInfo_kari_encrypt+9Bj ...
		pop	ebx
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	esi
		add	esp, 8
		retn
_cms_RecipientInfo_kari_encrypt	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _cms_RecipientInfo_kari_init
_cms_RecipientInfo_kari_init proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		call	_CMS_KeyAgreeRecipientInfo_it
		push	eax
		call	_ASN1_item_new
		mov	edi, eax
		add	esp, 4
		mov	eax, [esp+4+arg_0]
		mov	[eax+4], edi
		test	edi, edi
		jnz	short loc_514
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_514:				; CODE XREF: _cms_RecipientInfo_kari_init+1Aj
		mov	dword ptr [eax], 1
		push	esi
		mov	dword ptr [edi], 3
		call	_CMS_RecipientEncryptedKey_it
		push	eax
		call	_ASN1_item_new
		mov	esi, eax
		push	esi
		push	dword ptr [edi+10h]
		call	_sk_push
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_552
		call	_CMS_RecipientEncryptedKey_it
		push	eax
		push	esi
		call	_ASN1_item_free
		add	esp, 8

loc_54D:				; CODE XREF: _cms_RecipientInfo_kari_init+8Aj
					; _cms_RecipientInfo_kari_init+BAj
		pop	esi
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_552:				; CODE XREF: _cms_RecipientInfo_kari_init+48j
		test	[esp+8+arg_C], 10000h
		mov	eax, [esi]
		jz	short loc_594
		mov	dword ptr [eax], 1
		call	_CMS_RecipientKeyIdentifier_it
		push	eax
		call	_ASN1_item_new
		mov	ecx, [esi]
		add	esp, 4
		mov	[ecx+4], eax
		mov	eax, [esi]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_54D
		push	[esp+8+arg_4]
		push	eax
		call	_cms_set1_keyid
		add	esp, 8
		test	eax, eax
		jnz	short loc_5B0
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_594:				; CODE XREF: _cms_RecipientInfo_kari_init+68j
		push	[esp+8+arg_4]
		mov	dword ptr [eax], 0
		mov	eax, [esi]
		add	eax, 4
		push	eax
		call	_cms_set1_ias
		add	esp, 8
		test	eax, eax
		jz	short loc_54D

loc_5B0:				; CODE XREF: _cms_RecipientInfo_kari_init+9Bj
		push	ebx
		mov	ebx, [esp+0Ch+arg_8]
		push	ebx
		push	edi
		call	_cms_kari_create_ephemeral_key
		add	esp, 8
		test	eax, eax
		jnz	short loc_5C7
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_5C7:				; CODE XREF: _cms_RecipientInfo_kari_init+CDj
		push	17Dh
		push	offset ??_C@_0BI@CJEDLOFJ@?4?2crypto?2cms?2cms_kari?4c?$AA@ ; ".\\crypto\\cms\\cms_kari.c"
		push	0Ah
		lea	eax, [ebx+8]
		push	1
		push	eax
		call	_CRYPTO_add_lock
		add	esp, 14h
		mov	[esi+8], ebx
		mov	eax, 1
		pop	ebx
		pop	esi
		pop	edi
		retn
_cms_RecipientInfo_kari_init endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cms_kari_create_ephemeral_key proc near ; CODE	XREF: _cms_RecipientInfo_kari_init+C3p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 4
		call	__chkstk
		push	esi
		push	edi
		xor	edi, edi
		mov	[esp+0Ch+var_4], 0
		push	edi
		push	[esp+10h+arg_4]
		call	_EVP_PKEY_CTX_new
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_675
		push	esi
		call	_EVP_PKEY_keygen_init
		add	esp, 4
		test	eax, eax
		jle	short loc_66C
		lea	eax, [esp+0Ch+var_4]
		push	eax
		push	esi
		call	_EVP_PKEY_keygen
		add	esp, 8
		test	eax, eax
		jle	short loc_66C
		push	esi
		call	_EVP_PKEY_CTX_free
		push	edi
		push	[esp+14h+var_4]
		call	_EVP_PKEY_CTX_new
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_675
		push	esi
		call	_EVP_PKEY_derive_init
		add	esp, 4
		test	eax, eax
		jle	short loc_66C
		mov	eax, [esp+0Ch+arg_0]
		mov	edi, 1
		mov	[eax+14h], esi
		jmp	short loc_675
; ---------------------------------------------------------------------------

loc_66C:				; CODE XREF: _cms_kari_create_ephemeral_key+34j
					; _cms_kari_create_ephemeral_key+46j ...
		push	esi
		call	_EVP_PKEY_CTX_free
		add	esp, 4

loc_675:				; CODE XREF: _cms_kari_create_ephemeral_key+27j
					; _cms_kari_create_ephemeral_key+5Fj ...
		mov	eax, [esp+0Ch+var_4]
		test	eax, eax
		jz	short loc_686
		push	eax
		call	_EVP_PKEY_free
		add	esp, 4

loc_686:				; CODE XREF: _cms_kari_create_ephemeral_key+8Bj
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ecx
		retn
_cms_kari_create_ephemeral_key endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 68Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cms_kek_cipher	proc near		; CODE XREF: _CMS_RecipientInfo_kari_decrypt+45p
					; _cms_RecipientInfo_kari_encrypt+E2p

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 58h ; 'X'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+58h+var_4], eax
		mov	eax, [esp+58h+arg_0]
		push	ebx
		mov	ebx, [esp+5Ch+arg_10]
		push	ebp
		push	esi
		mov	[esp+64h+var_4C], eax
		xor	ebp, ebp
		mov	eax, [esp+64h+arg_4]
		xor	esi, esi
		push	edi
		mov	[esp+68h+var_48], eax
		lea	edi, [ebx+18h]
		mov	eax, [esp+68h+arg_8]
		push	edi
		mov	[esp+6Ch+var_54], eax
		call	_EVP_CIPHER_CTX_key_length
		add	esp, 4
		mov	[esp+68h+var_50], eax
		cmp	eax, 40h ; '@'
		jbe	short loc_6EF
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+58h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 58h
		retn
; ---------------------------------------------------------------------------

loc_6EF:				; CODE XREF: _cms_kek_cipher+4Cj
		lea	eax, [esp+68h+var_50]
		push	eax
		lea	eax, [esp+6Ch+var_44]
		push	eax
		push	dword ptr [ebx+14h]
		call	_EVP_PKEY_derive
		add	esp, 0Ch
		test	eax, eax
		jle	$err$11
		push	[esp+68h+arg_14]
		lea	eax, [esp+6Ch+var_44]
		push	0
		push	eax
		push	0
		push	0
		push	edi
		call	_EVP_CipherInit_ex
		add	esp, 18h
		test	eax, eax
		jz	short $err$11
		push	[esp+68h+arg_C]
		lea	eax, [esp+6Ch+var_58]
		push	[esp+6Ch+var_54]
		push	eax
		push	0
		push	edi
		call	_EVP_CipherUpdate
		add	esp, 14h
		test	eax, eax
		jz	short $err$11
		push	105h
		push	offset ??_C@_0BI@CJEDLOFJ@?4?2crypto?2cms?2cms_kari?4c?$AA@ ; ".\\crypto\\cms\\cms_kari.c"
		push	[esp+70h+var_58]
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short $err$11
		push	[esp+68h+arg_C]
		lea	eax, [esp+6Ch+var_58]
		push	[esp+6Ch+var_54]
		push	eax
		push	esi
		push	edi
		call	_EVP_CipherUpdate
		add	esp, 14h
		test	eax, eax
		jz	short $err$11
		mov	eax, [esp+68h+var_4C]
		mov	ebp, 1
		mov	ecx, [esp+68h+var_48]
		mov	[eax], esi
		mov	eax, [esp+68h+var_58]
		mov	[ecx], eax

$err$11:				; CODE XREF: _cms_kek_cipher+7Aj
					; _cms_kek_cipher+9Dj ...
		push	[esp+68h+var_50]
		lea	eax, [esp+6Ch+var_44]
		push	eax
		call	_OPENSSL_cleanse
		add	esp, 8
		test	ebp, ebp
		jnz	short loc_7B5
		test	esi, esi
		jz	short loc_7B5
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_7B5:				; CODE XREF: _cms_kek_cipher+11Aj
					; _cms_kek_cipher+11Ej
		push	edi
		call	_EVP_CIPHER_CTX_cleanup
		push	dword ptr [ebx+14h]
		call	_EVP_PKEY_CTX_free
		mov	ecx, [esp+70h+var_4]
		add	esp, 8
		mov	eax, ebp
		mov	dword ptr [ebx+14h], 0
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 58h
		retn
_cms_kek_cipher	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cms_wrap_init	proc near		; CODE XREF: _cms_RecipientInfo_kari_encrypt+53p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		push	[esp+8+arg_4]
		add	edi, 18h
		call	_EVP_CIPHER_key_length
		push	edi
		mov	esi, eax
		call	_EVP_CIPHER_CTX_cipher
		add	esp, 8
		test	eax, eax
		jz	short loc_822
		push	edi
		call	_EVP_CIPHER_CTX_flags
		add	esp, 4
		and	eax, 0F0007h
		xor	ecx, ecx
		cmp	eax, 10002h
		setz	cl
		pop	edi
		mov	eax, ecx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_822:				; CODE XREF: _cms_wrap_init+1Fj
		push	[esp+8+arg_4]
		call	_EVP_CIPHER_type
		add	esp, 4
		cmp	eax, 2Ch ; ','
		jnz	short loc_84B
		call	_EVP_des_ede3_wrap
		push	0
		push	0
		push	0
		push	eax
		push	edi
		call	_EVP_EncryptInit_ex
		add	esp, 14h
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_84B:				; CODE XREF: _cms_wrap_init+4Dj
		cmp	esi, 10h
		jg	short loc_868
		call	_EVP_aes_128_wrap
		push	0
		push	0
		push	0
		push	eax
		push	edi
		call	_EVP_EncryptInit_ex
		add	esp, 14h
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_868:				; CODE XREF: _cms_wrap_init+6Aj
		cmp	esi, 18h
		jg	short loc_885
		call	_EVP_aes_192_wrap
		push	0
		push	0
		push	0
		push	eax
		push	edi
		call	_EVP_EncryptInit_ex
		add	esp, 14h
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_885:				; CODE XREF: _cms_wrap_init+87j
		call	_EVP_aes_256_wrap
		push	0
		push	0
		push	0
		push	eax
		push	edi
		call	_EVP_EncryptInit_ex
		add	esp, 14h
		pop	edi
		pop	esi
		retn
_cms_wrap_init	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8A0h
; COMDAT (pick any)
		public ??_C@_0BI@CJEDLOFJ@?4?2crypto?2cms?2cms_kari?4c?$AA@
; `string'
??_C@_0BI@CJEDLOFJ@?4?2crypto?2cms?2cms_kari?4c?$AA@ db	'.\crypto\cms\cms_kari.c',0
					; DATA XREF: _CMS_RecipientInfo_kari_get0_alg+Bo
					; _CMS_RecipientInfo_kari_get0_orig_id+Bo ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _sk_num:near	; CODE XREF: _cms_RecipientInfo_kari_encrypt+A0p
					; _cms_RecipientInfo_kari_encrypt+100p
		extrn _sk_value:near	; CODE XREF: _cms_RecipientInfo_kari_encrypt+B2p
		extrn _sk_push:near	; CODE XREF: _cms_RecipientInfo_kari_init+3Ep
		extrn _CRYPTO_add_lock:near ; CODE XREF: _cms_RecipientInfo_kari_init+E5p
		extrn _CRYPTO_malloc:near ; CODE XREF: _cms_kek_cipher+C9p
		extrn _CRYPTO_free:near	; CODE XREF: _CMS_RecipientInfo_kari_decrypt+6Ep
					; _CMS_RecipientInfo_kari_decrypt+97p ...
		extrn _OPENSSL_cleanse:near ; CODE XREF: _CMS_RecipientInfo_kari_decrypt+66p
					; _cms_kek_cipher+110p
		extrn _ERR_put_error:near ; CODE XREF: _CMS_RecipientInfo_kari_get0_alg+1Cp
					; _CMS_RecipientInfo_kari_get0_orig_id+1Cp ...
		extrn _ASN1_STRING_set0:near
					; CODE XREF: _cms_RecipientInfo_kari_encrypt+F9p
		extrn _ASN1_item_new:near ; CODE XREF: _cms_RecipientInfo_kari_encrypt+7Bp
					; _cms_RecipientInfo_kari_init+7p ...
		extrn _ASN1_item_free:near ; CODE XREF:	_cms_RecipientInfo_kari_init+51p
		extrn _EVP_CIPHER_key_length:near ; CODE XREF: _cms_wrap_init+Dp
		extrn _EVP_CIPHER_CTX_cipher:near ; CODE XREF: _cms_wrap_init+15p
		extrn _EVP_CIPHER_CTX_key_length:near ;	CODE XREF: _cms_kek_cipher+3Dp
		extrn _EVP_CIPHER_CTX_flags:near ; CODE	XREF: _cms_wrap_init+22p
		extrn _EVP_EncryptInit_ex:near ; CODE XREF: _cms_wrap_init+5Cp
					; _cms_wrap_init+79p ...
		extrn _EVP_CipherInit_ex:near ;	CODE XREF: _cms_kek_cipher+93p
		extrn _EVP_CipherUpdate:near ; CODE XREF: _cms_kek_cipher+AFp
					; _cms_kek_cipher+E6p
		extrn _EVP_CIPHER_CTX_cleanup:near ; CODE XREF:	_cms_kek_cipher+12Ap
		extrn _EVP_des_ede3_wrap:near ;	CODE XREF: _cms_wrap_init+4Fp
		extrn _EVP_aes_128_wrap:near ; CODE XREF: _cms_wrap_init+6Cp
		extrn _EVP_aes_192_wrap:near ; CODE XREF: _cms_wrap_init+89p
		extrn _EVP_aes_256_wrap:near ; CODE XREF: _cms_wrap_init:loc_885p
		extrn _EVP_PKEY_free:near ; CODE XREF: _cms_kari_create_ephemeral_key+8Ep
		extrn _EVP_CIPHER_type:near ; CODE XREF: _cms_wrap_init+42p
		extrn _EVP_PKEY_CTX_new:near
					; CODE XREF: _CMS_RecipientInfo_kari_set0_pkey+32p
					; _cms_kari_create_ephemeral_key+1Bp ...
		extrn _EVP_PKEY_CTX_free:near
					; CODE XREF: _CMS_RecipientInfo_kari_set0_pkey+10p
					; _CMS_RecipientInfo_kari_set0_pkey+59p ...
		extrn _EVP_PKEY_derive_init:near
					; CODE XREF: _CMS_RecipientInfo_kari_set0_pkey+41p
					; _cms_kari_create_ephemeral_key+62p
		extrn _EVP_PKEY_derive_set_peer:near
					; CODE XREF: _cms_RecipientInfo_kari_encrypt+BFp
		extrn _EVP_PKEY_derive:near ; CODE XREF: _cms_kek_cipher+70p
		extrn _EVP_PKEY_keygen_init:near
					; CODE XREF: _cms_kari_create_ephemeral_key+2Ap
		extrn _EVP_PKEY_keygen:near ; CODE XREF: _cms_kari_create_ephemeral_key+3Cp
		extrn _cms_ias_cert_cmp:near
					; CODE XREF: _CMS_RecipientEncryptedKey_cert_cmp+13p
					; _CMS_RecipientInfo_kari_orig_id_cmp+40p
		extrn _cms_keyid_cert_cmp:near
					; CODE XREF: _CMS_RecipientEncryptedKey_cert_cmp+2Ap
					; _CMS_RecipientInfo_kari_orig_id_cmp+55p
		extrn _cms_set1_ias:near ; CODE	XREF: _cms_RecipientInfo_kari_init+B0p
		extrn _cms_set1_keyid:near ; CODE XREF:	_cms_RecipientInfo_kari_init+91p
		extrn _cms_env_asn1_ctrl:near
					; CODE XREF: _CMS_RecipientInfo_kari_decrypt+28p
					; _cms_RecipientInfo_kari_encrypt+91p
		extrn _CMS_KeyAgreeRecipientInfo_it:near
					; CODE XREF: _cms_RecipientInfo_kari_init+1p
		extrn _CMS_RecipientEncryptedKey_it:near
					; CODE XREF: _cms_RecipientInfo_kari_init+2Dp
					; _cms_RecipientInfo_kari_init+4Ap
		extrn _CMS_OriginatorPublicKey_it:near
					; CODE XREF: _cms_RecipientInfo_kari_encrypt+75p
		extrn _CMS_RecipientKeyIdentifier_it:near
					; CODE XREF: _cms_RecipientInfo_kari_init+70p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _cms_kek_cipher+5Ap
					; _cms_kek_cipher+14Dp
		extrn __chkstk:near	; CODE XREF: _CMS_RecipientInfo_kari_decrypt+5p
					; _cms_RecipientInfo_kari_encrypt+5p ...
		extrn ___security_cookie:near ;	DATA XREF: _cms_kek_cipher+Ar


		end
