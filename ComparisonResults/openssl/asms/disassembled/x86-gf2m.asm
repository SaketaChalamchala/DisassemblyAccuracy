;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	7B873FFB2C2E50207360450EA9514792
; Input	CRC32 :	0AED3D76

; File Name   :	C:\compspace\Diff\openssl\obj\x86-gf2m.obj
; Format      :	COFF (X386MAGIC)

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
; Segment alignment '64byte' can not be represented in assembly
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__mul_1x1_mmx	proc near		; CODE XREF: L$_bn_GF2m_mul_2x2_begin+5Cp
					; L$_bn_GF2m_mul_2x2_begin+6Cp	...

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8

		sub	esp, 24h
		mov	ecx, eax
		lea	edx, [eax+eax]
		and	ecx, 3FFFFFFFh
		lea	ebp, [edx+edx]
		mov	[esp+24h+var_24], 0
		and	edx, 7FFFFFFFh
		movd	mm2, eax
		movd	mm3, ebx
		mov	[esp+24h+var_20], ecx
		xor	ecx, edx
		pxor	mm5, mm5
		pxor	mm4, mm4
		mov	[esp+24h+var_1C], edx
		xor	edx, ebp
		mov	[esp+24h+var_18], ecx
		pcmpgtd	mm5, mm2
		paddd	mm2, mm2
		xor	ecx, edx
		mov	[esp+24h+var_14], ebp
		xor	ebp, edx
		pand	mm5, mm3
		pcmpgtd	mm4, mm2
		mov	[esp+24h+var_10], ecx
		xor	ebp, ecx
		psllq	mm5, 1Fh
		pand	mm4, mm3
		mov	[esp+24h+var_C], edx
		mov	esi, 7
		mov	[esp+24h+var_8], ebp
		mov	ebp, esi
		and	esi, ebx
		shr	ebx, 3
		mov	edi, ebp
		psllq	mm4, 1Eh
		and	edi, ebx
		shr	ebx, 3
		movd	mm0, [esp+esi*4+24h+var_24]
		mov	esi, ebp
		and	esi, ebx
		shr	ebx, 3
		movd	mm2, [esp+edi*4+24h+var_24]
		mov	edi, ebp
		psllq	mm2, 3
		and	edi, ebx
		shr	ebx, 3
		pxor	mm0, mm2
		movd	mm1, [esp+esi*4+24h+var_24]
		mov	esi, ebp
		psllq	mm1, 6
		and	esi, ebx
		shr	ebx, 3
		pxor	mm0, mm1
		movd	mm2, [esp+edi*4+24h+var_24]
		mov	edi, ebp
		psllq	mm2, 9
		and	edi, ebx
		shr	ebx, 3
		pxor	mm0, mm2
		movd	mm1, [esp+esi*4+24h+var_24]
		mov	esi, ebp
		psllq	mm1, 0Ch
		and	esi, ebx
		shr	ebx, 3
		pxor	mm0, mm1
		movd	mm2, [esp+edi*4+24h+var_24]
		mov	edi, ebp
		psllq	mm2, 0Fh
		and	edi, ebx
		shr	ebx, 3
		pxor	mm0, mm2
		movd	mm1, [esp+esi*4+24h+var_24]
		mov	esi, ebp
		psllq	mm1, 12h
		and	esi, ebx
		shr	ebx, 3
		pxor	mm0, mm1
		movd	mm2, [esp+edi*4+24h+var_24]
		mov	edi, ebp
		psllq	mm2, 15h
		and	edi, ebx
		shr	ebx, 3
		pxor	mm0, mm2
		movd	mm1, [esp+esi*4+24h+var_24]
		mov	esi, ebp
		psllq	mm1, 18h
		and	esi, ebx
		shr	ebx, 3
		pxor	mm0, mm1
		movd	mm2, [esp+edi*4+24h+var_24]
		pxor	mm0, mm4
		psllq	mm2, 1Bh
		pxor	mm0, mm2
		movd	mm1, [esp+esi*4+24h+var_24]
		pxor	mm0, mm5
		psllq	mm1, 1Eh
		add	esp, 24h
		pxor	mm0, mm1
		retn
__mul_1x1_mmx	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


__mul_1x1_ialu	proc near		; CODE XREF: L$_bn_GF2m_mul_2x2_begin+CFp
					; L$_bn_GF2m_mul_2x2_begin+E4p	...

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8

		sub	esp, 24h
		mov	ecx, eax
		lea	edx, [eax+eax]
		lea	ebp, ds:0[eax*4]
		and	ecx, 3FFFFFFFh
		lea	edi, [eax+eax]
		sar	eax, 1Fh
		mov	[esp+24h+var_24], 0
		and	edx, 7FFFFFFFh
		mov	[esp+24h+var_20], ecx
		xor	ecx, edx
		mov	[esp+24h+var_1C], edx
		xor	edx, ebp
		mov	[esp+24h+var_18], ecx
		xor	ecx, edx
		mov	[esp+24h+var_14], ebp
		xor	ebp, edx
		mov	[esp+24h+var_10], ecx
		xor	ebp, ecx
		sar	edi, 1Fh
		and	eax, ebx
		mov	[esp+24h+var_C], edx
		and	edi, ebx
		mov	[esp+24h+var_8], ebp
		mov	edx, eax
		shl	eax, 1Fh
		mov	ecx, edi
		shr	edx, 1
		mov	esi, 7
		shl	edi, 1Eh
		and	esi, ebx
		shr	ecx, 2
		xor	eax, edi
		shr	ebx, 3
		mov	edi, 7
		and	edi, ebx
		shr	ebx, 3
		xor	edx, ecx
		xor	eax, [esp+esi*4+24h+var_24]
		mov	esi, 7
		and	esi, ebx
		shr	ebx, 3
		mov	ebp, [esp+edi*4+24h+var_24]
		mov	edi, 7
		mov	ecx, ebp
		shl	ebp, 3
		and	edi, ebx
		shr	ecx, 1Dh
		xor	eax, ebp
		shr	ebx, 3
		xor	edx, ecx
		mov	ecx, [esp+esi*4+24h+var_24]
		mov	esi, 7
		mov	ebp, ecx
		shl	ecx, 6
		and	esi, ebx
		shr	ebp, 1Ah
		xor	eax, ecx
		shr	ebx, 3
		xor	edx, ebp
		mov	ebp, [esp+edi*4+24h+var_24]
		mov	edi, 7
		mov	ecx, ebp
		shl	ebp, 9
		and	edi, ebx
		shr	ecx, 17h
		xor	eax, ebp
		shr	ebx, 3
		xor	edx, ecx
		mov	ecx, [esp+esi*4+24h+var_24]
		mov	esi, 7
		mov	ebp, ecx
		shl	ecx, 0Ch
		and	esi, ebx
		shr	ebp, 14h
		xor	eax, ecx
		shr	ebx, 3
		xor	edx, ebp
		mov	ebp, [esp+edi*4+24h+var_24]
		mov	edi, 7
		mov	ecx, ebp
		shl	ebp, 0Fh
		and	edi, ebx
		shr	ecx, 11h
		xor	eax, ebp
		shr	ebx, 3
		xor	edx, ecx
		mov	ecx, [esp+esi*4+24h+var_24]
		mov	esi, 7
		mov	ebp, ecx
		shl	ecx, 12h
		and	esi, ebx
		shr	ebp, 0Eh
		xor	eax, ecx
		shr	ebx, 3
		xor	edx, ebp
		mov	ebp, [esp+edi*4+24h+var_24]
		mov	edi, 7
		mov	ecx, ebp
		shl	ebp, 15h
		and	edi, ebx
		shr	ecx, 0Bh
		xor	eax, ebp
		shr	ebx, 3
		xor	edx, ecx
		mov	ecx, [esp+esi*4+24h+var_24]
		mov	esi, 7
		mov	ebp, ecx
		shl	ecx, 18h
		and	esi, ebx
		shr	ebp, 8
		xor	eax, ecx
		shr	ebx, 3
		xor	edx, ebp
		mov	ebp, [esp+edi*4+24h+var_24]
		mov	ecx, ebp
		shl	ebp, 1Bh
		mov	edi, [esp+esi*4+24h+var_24]
		shr	ecx, 5
		mov	esi, edi
		xor	eax, ebp
		shl	edi, 1Eh
		xor	edx, ecx
		shr	esi, 2
		xor	eax, edi
		xor	edx, esi
		add	esp, 24h
		retn
__mul_1x1_ialu	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_bn_GF2m_mul_2x2_begin
L$_bn_GF2m_mul_2x2_begin proc near

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= xmmword ptr  8

		lea	edx, _OPENSSL_ia32cap_P
		mov	eax, [edx]
		mov	edx, [edx+4]
		test	eax, 800000h
		jz	L$000ialu
		test	eax, 1000000h
		jz	L$001mmx
		test	edx, 2
		jz	L$001mmx
		movups	xmm0, [esp+arg_4]
		shufps	xmm0, xmm0, 0B1h
		pclmulqdq xmm0,	xmm0, 1
		mov	eax, [esp+arg_0]
		movups	xmmword	ptr [eax], xmm0
		retn
; ---------------------------------------------------------------------------
		align 10h

L$001mmx:				; CODE XREF: L$_bn_GF2m_mul_2x2_begin+1Bj
					; L$_bn_GF2m_mul_2x2_begin+27j
		push	ebp
		push	ebx
		push	esi
		push	edi
		mov	eax, dword ptr [esp+10h+arg_4]
		mov	ebx, dword ptr [esp+10h+arg_4+8]
		call	__mul_1x1_mmx
		movq	mm7, mm0
		mov	eax, dword ptr [esp+10h+arg_4+4]
		mov	ebx, dword ptr [esp+10h+arg_4+0Ch]
		call	__mul_1x1_mmx
		movq	mm6, mm0
		mov	eax, dword ptr [esp+10h+arg_4]
		mov	ebx, dword ptr [esp+10h+arg_4+8]
		xor	eax, dword ptr [esp+10h+arg_4+4]
		xor	ebx, dword ptr [esp+10h+arg_4+0Ch]
		call	__mul_1x1_mmx
		pxor	mm0, mm7
		mov	eax, [esp+10h+arg_0]
		pxor	mm0, mm6
		movq	mm2, mm0
		psllq	mm0, 20h ; ' '
		pop	edi
		psrlq	mm2, 20h ; ' '
		pop	esi
		pxor	mm0, mm6
		pop	ebx
		pxor	mm2, mm7
		movq	qword ptr [eax], mm0
		pop	ebp
		movq	qword ptr [eax+8], mm2
		emms
		retn
; ---------------------------------------------------------------------------
		align 10h

L$000ialu:				; CODE XREF: L$_bn_GF2m_mul_2x2_begin+10j
		push	ebp
		push	ebx
		push	esi
		push	edi
		sub	esp, 14h
		mov	eax, dword ptr [esp+24h+arg_4]
		mov	ebx, dword ptr [esp+24h+arg_4+8]
		call	__mul_1x1_ialu
		mov	[esp+24h+var_1C], eax
		mov	[esp+24h+var_18], edx
		mov	eax, dword ptr [esp+24h+arg_4+4]
		mov	ebx, dword ptr [esp+24h+arg_4+0Ch]
		call	__mul_1x1_ialu
		mov	[esp+24h+var_24], eax
		mov	[esp+24h+var_20], edx
		mov	eax, dword ptr [esp+24h+arg_4]
		mov	ebx, dword ptr [esp+24h+arg_4+8]
		xor	eax, dword ptr [esp+24h+arg_4+4]
		xor	ebx, dword ptr [esp+24h+arg_4+0Ch]
		call	__mul_1x1_ialu
		mov	ebp, [esp+24h+arg_0]
		mov	ebx, [esp+24h+var_24]
		mov	ecx, [esp+24h+var_20]
		mov	edi, [esp+24h+var_1C]
		mov	esi, [esp+24h+var_18]
		xor	eax, edx
		xor	edx, ecx
		xor	eax, ebx
		mov	[ebp+0], ebx
		xor	edx, edi
		mov	[ebp+0Ch], esi
		xor	eax, esi
		add	esp, 14h
		xor	edx, esi
		pop	edi
		xor	eax, edx
		pop	esi
		mov	[ebp+8], edx
		pop	ebx
		mov	[ebp+4], eax
		pop	ebp
		retn
L$_bn_GF2m_mul_2x2_begin endp

; ---------------------------------------------------------------------------
aGf2MMultiplica	db 'GF(2^m) Multiplication for x86, CRYPTOGAMS by <appro@openssl.org>'
		db 0
_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
_bss		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _OPENSSL_ia32cap_P:near ;	DATA XREF: L$_bn_GF2m_mul_2x2_begino


		end
