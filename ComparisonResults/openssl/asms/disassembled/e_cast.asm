;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	52228E421CE4149BC9F484550DB238CC
; Input	CRC32 :	B9E69361

; File Name   :	C:\compspace\Diff\openssl\obj\e_cast.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cast_init_key	proc near		; DATA XREF: .rdata:00000204o
					; .rdata:00000238o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+arg_4]
		mov	esi, [esp+8+arg_0]
		push	esi
		call	_EVP_CIPHER_CTX_key_length
		add	esp, 4
		push	eax
		push	dword ptr [esi+60h]
		call	_CAST_set_key
		add	esp, 0Ch
		mov	eax, 1
		pop	esi
		retn
_cast_init_key	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 28h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cast5_cbc_cipher proc near		; DATA XREF: .rdata:00000208o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		mov	esi, [esp+0Ch+arg_C]
		push	edi
		mov	edi, [esp+10h+arg_8]
		cmp	esi, 40000000h
		jb	short loc_82
		mov	eax, esi
		lea	ecx, [ebp+20h]
		shr	eax, 1Eh
		mov	[esp+10h+arg_C], eax

loc_50:					; CODE XREF: _cast5_cbc_cipher+58j
		push	dword ptr [ebp+8]
		push	ecx
		push	dword ptr [ebp+60h]
		push	40000000h
		push	ebx
		push	edi
		call	_CAST_cbc_encrypt
		add	esp, 18h
		lea	ecx, [ebp+20h]

loc_69:					; DATA XREF: .rdata:_cast5_cbco
					; .rdata:_cast5_ecbo ...
		sub	esi, 40000000h

loc_6F:					; DATA XREF: .rdata:_cast5_ofbo
		add	edi, 40000000h
		add	ebx, 40000000h
		sub	[esp+10h+arg_C], 1
		jnz	short loc_50

loc_82:					; CODE XREF: _cast5_cbc_cipher+1Aj
		test	esi, esi

loc_84:					; DATA XREF: .rdata:00000210o
					; .rdata:00000244o ...
		jz	short loc_9B
		push	dword ptr [ebp+8]
		lea	eax, [ebp+20h]
		push	eax
		push	dword ptr [ebp+60h]
		push	esi
		push	ebx
		push	edi
		call	_CAST_cbc_encrypt
		add	esp, 18h

loc_9B:					; CODE XREF: _cast5_cbc_cipher:loc_84j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
_cast5_cbc_cipher endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cast5_cfb64_cipher proc near		; DATA XREF: .rdata:0000023Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, 40000000h
		push	edi
		mov	edi, [esp+8+arg_C]
		cmp	edi, esi
		cmovb	esi, edi
		test	edi, edi
		jz	short loc_103
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		push	ebp
		mov	ebp, [esp+10h+arg_8]
		xchg	ax, ax

loc_C8:					; CODE XREF: _cast5_cfb64_cipher+4Fj
		cmp	edi, esi
		jb	short loc_F9
		push	dword ptr [ebx+8]
		lea	eax, [ebx+50h]
		push	eax
		lea	eax, [ebx+20h]
		push	eax
		push	dword ptr [ebx+60h]
		push	edi
		push	[esp+24h+arg_4]
		push	ebp
		call	_CAST_cfb64_encrypt
		add	[esp+2Ch+arg_4], esi
		sub	edi, esi
		add	ebp, esi
		add	esp, 1Ch
		cmp	edi, esi
		cmovb	esi, edi
		test	edi, edi
		jnz	short loc_C8

loc_F9:					; CODE XREF: _cast5_cfb64_cipher+22j
		pop	ebp
		pop	ebx
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_103:				; CODE XREF: _cast5_cfb64_cipher+12j
		pop	edi
		mov	eax, 1
		pop	esi
		retn
_cast5_cfb64_cipher endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cast5_ecb_cipher proc near		; DATA XREF: .rdata:000002A4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	edi
		mov	eax, [ebp+0]
		mov	edi, [eax+4]
		mov	eax, [esp+8+arg_C]
		cmp	eax, edi
		jb	short loc_15E
		sub	eax, edi
		push	ebx
		mov	[esp+0Ch+arg_C], eax
		xor	ebx, ebx
		mov	eax, [esp+0Ch+arg_4]
		push	esi
		mov	esi, [esp+10h+arg_8]
		sub	eax, esi
		mov	[esp+10h+arg_4], eax
		nop	dword ptr [eax+00h]

loc_13C:				; CODE XREF: _cast5_ecb_cipher+4Ej
		push	dword ptr [ebp+8]
		add	eax, esi
		push	dword ptr [ebp+60h]
		push	eax
		push	esi
		call	_CAST_ecb_encrypt
		mov	eax, [esp+20h+arg_4]
		add	ebx, edi
		add	esp, 10h
		add	esi, edi
		cmp	ebx, [esp+10h+arg_C]
		jbe	short loc_13C
		pop	esi
		pop	ebx

loc_15E:				; CODE XREF: _cast5_ecb_cipher+12j
		pop	edi
		mov	eax, 1
		pop	ebp
		retn
_cast5_ecb_cipher endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 168h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_cast5_ofb_cipher proc near		; DATA XREF: .rdata:00000270o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		mov	esi, [esp+0Ch+arg_C]
		push	edi
		mov	edi, [esp+10h+arg_8]
		cmp	esi, 40000000h
		jb	short loc_1CB
		mov	eax, esi
		lea	ecx, [ebp+50h]
		shr	eax, 1Eh
		lea	edx, [ebp+20h]
		mov	[esp+10h+arg_C], eax
		nop	dword ptr [eax+eax+00h]

loc_198:				; CODE XREF: _cast5_ofb_cipher+61j
		push	ecx
		push	edx
		push	dword ptr [ebp+60h]
		push	40000000h
		push	ebx
		push	edi
		call	_CAST_ofb64_encrypt
		add	esp, 18h
		lea	ecx, [ebp+50h]
		sub	esi, 40000000h
		lea	edx, [ebp+20h]
		add	edi, 40000000h
		add	ebx, 40000000h
		sub	[esp+10h+arg_C], 1
		jnz	short loc_198

loc_1CB:				; CODE XREF: _cast5_ofb_cipher+1Aj
		test	esi, esi
		jz	short loc_1E5
		lea	eax, [ebp+50h]
		push	eax
		lea	eax, [ebp+20h]
		push	eax
		push	dword ptr [ebp+60h]
		push	esi
		push	ebx
		push	edi
		call	_CAST_ofb64_encrypt
		add	esp, 18h

loc_1E5:				; CODE XREF: _cast5_ofb_cipher+65j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
_cast5_ofb_cipher endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1F0h
_cast5_cbc	dd offset loc_69+3	; DATA XREF: _EVP_cast5_cbco
		dd 8, 10h, 8, 0Ah
		dd offset _cast_init_key
		dd offset _cast5_cbc_cipher
		align 10h
		dd offset loc_84
		dd offset _EVP_CIPHER_set_asn1_iv
		dd offset _EVP_CIPHER_get_asn1_iv
		dd 2 dup(0)
_cast5_cfb64	dd offset loc_69+5	; DATA XREF: _EVP_cast5_cfb64o
		dd 1, 10h, 8, 0Bh
		dd offset _cast_init_key
		dd offset _cast5_cfb64_cipher
		dd 0
		dd offset loc_84
		dd offset _EVP_CIPHER_set_asn1_iv
		dd offset _EVP_CIPHER_get_asn1_iv
		dd 2 dup(0)
_cast5_ofb	dd offset loc_6F	; DATA XREF: _EVP_cast5_ofbo
		dd 1, 10h, 8, 0Ch
		dd offset _cast_init_key
		dd offset _cast5_ofb_cipher
		align 8
		dd offset loc_84
		dd offset _EVP_CIPHER_set_asn1_iv
		dd offset _EVP_CIPHER_get_asn1_iv
		dd 2 dup(0)
_cast5_ecb	dd offset loc_69+4	; DATA XREF: _EVP_cast5_ecbo
		dd 8, 10h, 0
		dd 9
		dd offset _cast_init_key
		dd offset _cast5_ecb_cipher
		dd 0
		dd offset loc_84
		dd offset _EVP_CIPHER_set_asn1_iv
		dd offset _EVP_CIPHER_get_asn1_iv
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_cast5_cbc
_EVP_cast5_cbc	proc near
		mov	eax, offset _cast5_cbc
		retn
_EVP_cast5_cbc	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_cast5_cfb64
_EVP_cast5_cfb64 proc near
		mov	eax, offset _cast5_cfb64
		retn
_EVP_cast5_cfb64 endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_cast5_ecb
_EVP_cast5_ecb	proc near
		mov	eax, offset _cast5_ecb
		retn
_EVP_cast5_ecb	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_cast5_ofb
_EVP_cast5_ofb	proc near
		mov	eax, offset _cast5_ofb
		retn
_EVP_cast5_ofb	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _EVP_CIPHER_set_asn1_iv:near ; DATA XREF:	.rdata:00000214o
					; .rdata:00000248o ...
		extrn _EVP_CIPHER_get_asn1_iv:near ; DATA XREF:	.rdata:00000218o
					; .rdata:0000024Co ...
		extrn _EVP_CIPHER_CTX_key_length:near ;	CODE XREF: _cast_init_key+Ap
		extrn _CAST_set_key:near ; CODE	XREF: _cast_init_key+16p
		extrn _CAST_ecb_encrypt:near ; CODE XREF: _cast5_ecb_cipher+3Ap
		extrn _CAST_cbc_encrypt:near ; CODE XREF: _cast5_cbc_cipher+36p
					; _cast5_cbc_cipher+6Bp
		extrn _CAST_cfb64_encrypt:near ; CODE XREF: _cast5_cfb64_cipher+38p
		extrn _CAST_ofb64_encrypt:near ; CODE XREF: _cast5_ofb_cipher+3Cp
					; _cast5_ofb_cipher+75p


		end
