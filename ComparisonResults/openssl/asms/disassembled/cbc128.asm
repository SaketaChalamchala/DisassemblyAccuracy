;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	A82B68F9B707434A80A1D23228C76996
; Input	CRC32 :	72F00A4E

; File Name   :	C:\compspace\Diff\openssl\obj\cbc128.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CRYPTO_cbc128_decrypt
_CRYPTO_cbc128_decrypt proc near

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 3Ch ; '<'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+3Ch+var_4], eax
		mov	ecx, [esp+3Ch+arg_C]
		mov	edx, [esp+3Ch+arg_14]
		push	ebx
		mov	ebx, [esp+40h+arg_0]
		push	ebp
		mov	ebp, [esp+44h+arg_4]
		mov	[esp+44h+var_30], ebx
		mov	[esp+44h+var_2C], ecx
		mov	[esp+44h+var_28], edx
		push	esi
		mov	esi, [esp+48h+arg_10]
		mov	[esp+48h+var_34], esi
		push	edi
		mov	edi, [esp+4Ch+arg_8]
		cmp	ebx, ebp
		jz	short loc_A6
		mov	eax, esi
		cmp	edi, 10h
		jb	short loc_9E
		mov	eax, edi
		shr	eax, 4
		mov	[esp+4Ch+var_38], eax

loc_55:					; CODE XREF: _CRYPTO_cbc128_decrypt+8Cj
		push	ecx
		push	ebp
		push	ebx
		call	edx
		mov	eax, [esi]
		add	esp, 0Ch
		xor	[ebp+0], eax
		sub	edi, 10h
		mov	eax, [esi+4]
		xor	[ebp+4], eax
		mov	eax, [esi+8]
		xor	[ebp+8], eax
		mov	eax, [esi+0Ch]
		mov	esi, ebx
		xor	[ebp+0Ch], eax
		add	ebx, 10h
		mov	ecx, [esp+4Ch+var_2C]
		add	ebp, 10h
		sub	[esp+4Ch+var_38], 1
		mov	edx, [esp+4Ch+var_28]
		jnz	short loc_55
		mov	[esp+4Ch+var_3C], esi
		mov	esi, [esp+4Ch+var_34]
		mov	eax, [esp+4Ch+var_3C]
		mov	[esp+4Ch+var_30], ebx

loc_9E:					; CODE XREF: _CRYPTO_cbc128_decrypt+4Aj
		movups	xmm0, xmmword ptr [eax]
		movups	xmmword	ptr [esi], xmm0
		jmp	short loc_119
; ---------------------------------------------------------------------------

loc_A6:					; CODE XREF: _CRYPTO_cbc128_decrypt+43j
		cmp	edi, 10h
		jb	short loc_119
		mov	eax, edi
		shr	eax, 4
		mov	[esp+4Ch+var_38], eax

loc_B4:					; CODE XREF: _CRYPTO_cbc128_decrypt+113j
		push	ecx
		lea	eax, [esp+50h+var_14]
		push	eax
		push	ebx
		call	edx
		mov	ecx, [ebx]
		add	esp, 0Ch
		mov	eax, [esi]
		sub	edi, 10h
		xor	eax, [esp+4Ch+var_14]
		mov	edx, [esp+4Ch+var_28]
		mov	[ebp+0], eax
		mov	eax, [esi+4]
		xor	eax, [esp+4Ch+var_10]
		mov	[esi], ecx
		mov	ecx, [ebx+4]
		mov	[ebp+4], eax
		mov	eax, [esi+8]
		xor	eax, [esp+4Ch+var_C]
		mov	[esi+4], ecx
		mov	ecx, [ebx+8]
		mov	[ebp+8], eax
		mov	eax, [esi+0Ch]
		xor	eax, [esp+4Ch+var_8]
		mov	[esi+8], ecx
		mov	ecx, [ebx+0Ch]
		add	ebx, 10h
		mov	[ebp+0Ch], eax
		add	ebp, 10h
		sub	[esp+4Ch+var_38], 1
		mov	[esi+0Ch], ecx
		mov	ecx, [esp+4Ch+var_2C]
		jnz	short loc_B4
		mov	[esp+4Ch+var_30], ebx

loc_119:				; CODE XREF: _CRYPTO_cbc128_decrypt+A4j
					; _CRYPTO_cbc128_decrypt+A9j
		test	edi, edi
		jz	loc_29E
		lea	ecx, [esp+4Ch+var_14]
		mov	eax, esi
		sub	eax, ecx
		mov	[esp+4Ch+var_24], eax
		mov	eax, 1
		sub	eax, ecx
		mov	[esp+4Ch+var_20], eax
		mov	eax, 2
		sub	eax, ecx
		mov	[esp+4Ch+var_1C], eax
		mov	eax, 3
		sub	eax, ecx
		mov	[esp+4Ch+var_18], eax
		mov	eax, ebx
		sub	eax, ecx
		mov	[esp+4Ch+var_38], eax
		lea	eax, [ebp+2]
		mov	[esp+4Ch+var_3C], eax
		mov	eax, ecx
		sub	ebp, eax

loc_161:				; CODE XREF: _CRYPTO_cbc128_decrypt+25Dj
		push	[esp+4Ch+var_2C]
		lea	eax, [esp+50h+var_14]
		push	eax
		push	ebx
		call	[esp+58h+var_28]
		add	esp, 0Ch
		xor	eax, eax

loc_174:				; CODE XREF: _CRYPTO_cbc128_decrypt+22Ej
		cmp	eax, edi
		jnb	loc_241
		mov	ecx, [esp+4Ch+var_38]
		lea	esi, [esp+4Ch+var_14]
		mov	ebx, [esp+4Ch+var_24]
		add	esi, eax
		mov	dl, [esi+ecx]
		mov	cl, [esi]
		xor	cl, [esi+ebx]
		mov	[esi+ebp], cl
		mov	ecx, ebx
		mov	ebx, [esp+4Ch+var_30]
		mov	[esi+ecx], dl
		mov	ecx, [esp+4Ch+var_20]
		add	ecx, esi
		cmp	ecx, edi
		jnb	loc_240
		mov	cl, [esi+1]
		mov	esi, [esp+4Ch+var_34]
		mov	dl, [ebx+eax+1]
		xor	cl, [esi+eax+1]
		mov	esi, [esp+4Ch+var_3C]
		mov	[esi+eax-1], cl
		lea	esi, [esp+4Ch+var_14]
		mov	ecx, [esp+4Ch+var_34]
		add	esi, eax
		mov	[ecx+eax+1], dl
		mov	ecx, [esp+4Ch+var_1C]
		add	ecx, esi
		cmp	ecx, edi
		jnb	short loc_23B
		mov	cl, [esi+2]
		mov	esi, [esp+4Ch+var_34]
		mov	dl, [ebx+eax+2]
		xor	cl, [esi+eax+2]
		mov	esi, [esp+4Ch+var_3C]
		mov	[esi+eax], cl
		lea	esi, [esp+4Ch+var_14]
		mov	ecx, [esp+4Ch+var_34]
		add	esi, eax
		mov	[ecx+eax+2], dl
		mov	ecx, [esp+4Ch+var_18]
		add	ecx, esi
		cmp	ecx, edi
		jnb	short loc_236
		mov	cl, [esi+3]
		mov	esi, [esp+4Ch+var_34]
		mov	dl, [ebx+eax+3]
		xor	cl, [esi+eax+3]
		mov	esi, [esp+4Ch+var_3C]
		mov	[esi+eax+1], cl
		mov	esi, [esp+4Ch+var_34]
		mov	[esi+eax+3], dl
		add	eax, 4
		cmp	eax, 10h
		jb	loc_174
		jmp	short loc_241
; ---------------------------------------------------------------------------

loc_236:				; CODE XREF: _CRYPTO_cbc128_decrypt+207j
		add	eax, 3
		jmp	short loc_241
; ---------------------------------------------------------------------------

loc_23B:				; CODE XREF: _CRYPTO_cbc128_decrypt+1D9j
		add	eax, 2
		jmp	short loc_241
; ---------------------------------------------------------------------------

loc_240:				; CODE XREF: _CRYPTO_cbc128_decrypt+1A6j
		inc	eax

loc_241:				; CODE XREF: _CRYPTO_cbc128_decrypt+176j
					; _CRYPTO_cbc128_decrypt+234j ...
		cmp	edi, 10h
		jbe	short loc_276
		add	[esp+4Ch+var_38], 10h
		add	ebx, 10h
		add	[esp+4Ch+var_3C], 10h
		add	ebp, 10h
		mov	[esp+4Ch+var_30], ebx
		sub	edi, 10h
		jnz	loc_161
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_276:				; CODE XREF: _CRYPTO_cbc128_decrypt+244j
		cmp	eax, 10h
		jnb	short loc_29E
		mov	ecx, [esp+4Ch+var_34]
		sub	ebx, ecx
		lea	edx, [ecx+eax]
		mov	ecx, 10h
		sub	ecx, eax
		nop	dword ptr [eax+eax+00h]

loc_290:				; CODE XREF: _CRYPTO_cbc128_decrypt+29Cj
		mov	al, [ebx+edx]
		lea	edx, [edx+1]
		mov	[edx-1], al
		sub	ecx, 1
		jnz	short loc_290

loc_29E:				; CODE XREF: _CRYPTO_cbc128_decrypt+11Bj
					; _CRYPTO_cbc128_decrypt+279j
		mov	ecx, [esp+4Ch+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
_CRYPTO_cbc128_decrypt endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CRYPTO_cbc128_encrypt
_CRYPTO_cbc128_encrypt proc near

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 14h
		call	__chkstk
		mov	ecx, [esp+14h+arg_10]
		mov	edx, ecx
		push	ebx
		push	ebp
		mov	ebp, [esp+1Ch+arg_0]
		push	esi
		mov	esi, [esp+20h+arg_8]
		push	edi
		mov	edi, [esp+24h+arg_4]
		cmp	esi, 10h
		jb	short loc_334
		mov	eax, esi
		shr	eax, 4
		mov	[esp+24h+var_14], eax
		xchg	ax, ax

loc_2E4:				; CODE XREF: _CRYPTO_cbc128_encrypt+7Aj
		mov	eax, edi
		sub	edx, ebp
		sub	eax, ebp
		mov	ecx, ebp
		mov	[esp+24h+var_10], eax
		mov	ebx, 4
		mov	esi, eax

loc_2F7:				; CODE XREF: _CRYPTO_cbc128_encrypt+53j
		mov	eax, [edx+ecx]
		lea	ecx, [ecx+4]
		xor	eax, [ecx-4]
		mov	[esi+ecx-4], eax
		sub	ebx, 1
		jnz	short loc_2F7
		push	[esp+24h+arg_C]
		push	edi
		push	edi
		call	[esp+30h+arg_14]
		mov	esi, [esp+30h+arg_8]
		mov	edx, edi
		sub	esi, 10h
		add	esp, 0Ch
		add	ebp, 10h
		mov	[esp+24h+arg_8], esi
		add	edi, 10h
		sub	[esp+24h+var_14], 1
		jnz	short loc_2E4
		mov	ecx, [esp+24h+arg_10]

loc_334:				; CODE XREF: _CRYPTO_cbc128_encrypt+23j
		test	esi, esi
		jz	loc_440

loc_33C:				; CODE XREF: _CRYPTO_cbc128_encrypt+174j
		mov	ebx, edi
		mov	ecx, edx
		sub	ebx, ebp
		sub	ecx, ebp
		mov	[esp+24h+var_10], ebx
		xor	eax, eax
		mov	ebx, 1
		mov	[esp+24h+var_4], ecx
		sub	ebx, ebp
		mov	[esp+24h+var_14], ebx
		mov	ebx, 2
		sub	ebx, ebp
		mov	[esp+24h+var_C], ebx
		mov	ebx, 3
		sub	ebx, ebp
		mov	[esp+24h+var_8], ebx
		nop	dword ptr [eax+eax+00h]

loc_374:				; CODE XREF: _CRYPTO_cbc128_encrypt+123j
		cmp	eax, esi
		jnb	short loc_3E6
		mov	esi, [esp+24h+var_10]
		lea	ebx, [eax+ebp]
		mov	cl, [ecx+ebx]
		xor	cl, [ebx]
		mov	[esi+ebx], cl
		mov	ecx, [esp+24h+var_14]
		mov	esi, [esp+24h+arg_8]
		add	ecx, ebx
		cmp	ecx, esi
		jnb	short loc_3E5
		mov	cl, [eax+ebp+1]
		xor	cl, [eax+edx+1]
		mov	[edi+eax+1], cl
		mov	ecx, [esp+24h+var_C]
		add	ecx, ebx
		cmp	ecx, esi
		jnb	short loc_3E0
		mov	cl, [eax+ebp+2]
		xor	cl, [eax+edx+2]
		mov	[edi+eax+2], cl
		mov	ecx, [esp+24h+var_8]
		add	ecx, ebx
		cmp	ecx, esi
		jnb	short loc_3DB
		mov	cl, [eax+ebp+3]
		xor	cl, [eax+edx+3]
		mov	[edi+eax+3], cl
		add	eax, 4
		mov	ecx, [esp+24h+var_4]
		cmp	eax, 10h
		jb	short loc_374
		jmp	short loc_405
; ---------------------------------------------------------------------------

loc_3DB:				; CODE XREF: _CRYPTO_cbc128_encrypt+10Bj
		add	eax, 3
		jmp	short loc_3E6
; ---------------------------------------------------------------------------

loc_3E0:				; CODE XREF: _CRYPTO_cbc128_encrypt+F5j
		add	eax, 2
		jmp	short loc_3E6
; ---------------------------------------------------------------------------

loc_3E5:				; CODE XREF: _CRYPTO_cbc128_encrypt+DFj
		inc	eax

loc_3E6:				; CODE XREF: _CRYPTO_cbc128_encrypt+C2j
					; _CRYPTO_cbc128_encrypt+12Aj ...
		cmp	eax, 10h
		jnb	short loc_405
		mov	ebx, 10h
		lea	ecx, [eax+edi]
		sub	edx, edi
		sub	ebx, eax

loc_3F7:				; CODE XREF: _CRYPTO_cbc128_encrypt+14Fj
		mov	al, [edx+ecx]
		lea	ecx, [ecx+1]
		mov	[ecx-1], al
		sub	ebx, 1
		jnz	short loc_3F7

loc_405:				; CODE XREF: _CRYPTO_cbc128_encrypt+125j
					; _CRYPTO_cbc128_encrypt+135j
		push	[esp+24h+arg_C]
		push	edi
		push	edi
		call	[esp+30h+arg_14]
		add	esp, 0Ch
		mov	edx, edi
		cmp	esi, 10h
		jbe	short loc_42E
		sub	esi, 10h
		add	ebp, 10h
		add	edi, 10h
		mov	[esp+24h+arg_8], esi
		test	esi, esi
		jnz	loc_33C

loc_42E:				; CODE XREF: _CRYPTO_cbc128_encrypt+163j
		mov	eax, [esp+24h+arg_10]
		movups	xmm0, xmmword ptr [edx]
		pop	edi
		pop	esi
		pop	ebp
		movups	xmmword	ptr [eax], xmm0
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_440:				; CODE XREF: _CRYPTO_cbc128_encrypt+82j
		movups	xmm0, xmmword ptr [edx]
		pop	edi
		pop	esi
		pop	ebp
		movups	xmmword	ptr [ecx], xmm0
		pop	ebx
		add	esp, 14h
		retn
_CRYPTO_cbc128_encrypt endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _CRYPTO_cbc128_decrypt+26Dp
					; _CRYPTO_cbc128_decrypt+2A8p
		extrn __chkstk:near	; CODE XREF: _CRYPTO_cbc128_decrypt+5p
					; _CRYPTO_cbc128_encrypt+5p
		extrn ___security_cookie:near ;	DATA XREF: _CRYPTO_cbc128_decrypt+Ar


		end
