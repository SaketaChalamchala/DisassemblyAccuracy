;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	2CF892FF78AD74E681ED50D4FACCDFA7
; Input	CRC32 :	300FC55C

; File Name   :	C:\compspace\Diff\openssl\obj\gcm128.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CRYPTO_gcm128_aad
_CRYPTO_gcm128_aad proc	near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [edi+164h]
		mov	edx, [edi+160h]
		mov	[esp+8+arg_0], eax
		mov	eax, [edi+38h]
		or	eax, [edi+3Ch]
		jz	short loc_2F
		mov	eax, 0FFFFFFFEh
		pop	edi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_2F:					; CODE XREF: _CRYPTO_gcm128_aad+25j
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		xor	ecx, ecx
		mov	eax, esi
		add	eax, [edi+30h]
		adc	ecx, [edi+34h]
		cmp	ecx, 20000000h
		ja	loc_E0
		jb	short loc_54
		test	eax, eax
		jnz	loc_E0

loc_54:					; CODE XREF: _CRYPTO_gcm128_aad+4Aj
		push	ebx
		mov	ebx, [edi+16Ch]
		mov	[edi+30h], eax
		mov	[edi+34h], ecx
		push	ebp
		mov	ebp, [esp+14h+arg_4]
		test	ebx, ebx
		jz	short loc_96
		nop	word ptr [eax+eax+00h]

loc_70:					; CODE XREF: _CRYPTO_gcm128_aad+81j
		test	esi, esi
		jz	short loc_85
		mov	al, [ebp+0]
		dec	esi
		xor	[ebx+edi+40h], al
		inc	ebp
		inc	ebx
		and	ebx, 0Fh
		jnz	short loc_70
		jmp	short loc_89
; ---------------------------------------------------------------------------

loc_85:					; CODE XREF: _CRYPTO_gcm128_aad+72j
		test	ebx, ebx
		jnz	short loc_D2

loc_89:					; CODE XREF: _CRYPTO_gcm128_aad+83j
		lea	eax, [edi+60h]
		push	eax
		lea	eax, [edi+40h]
		push	eax
		call	edx
		add	esp, 8

loc_96:					; CODE XREF: _CRYPTO_gcm128_aad+68j
		mov	eax, esi
		and	eax, 0FFFFFFF0h
		mov	[esp+14h+var_4], eax
		jz	short loc_BA
		push	eax
		push	ebp
		lea	eax, [edi+60h]
		push	eax
		lea	eax, [edi+40h]
		push	eax
		call	[esp+24h+arg_0]
		add	ebp, [esp+24h+var_4]
		add	esp, 10h
		sub	esi, [esp+14h+var_4]

loc_BA:					; CODE XREF: _CRYPTO_gcm128_aad+9Fj
		test	esi, esi
		jz	short loc_D2
		xor	ecx, ecx
		mov	ebx, esi
		test	esi, esi
		jz	short loc_D2

loc_C6:					; CODE XREF: _CRYPTO_gcm128_aad+D0j
		mov	al, [ecx+ebp]
		xor	[edi+ecx+40h], al
		inc	ecx
		cmp	ecx, esi
		jb	short loc_C6

loc_D2:					; CODE XREF: _CRYPTO_gcm128_aad+87j
					; _CRYPTO_gcm128_aad+BCj ...
		pop	ebp
		mov	[edi+16Ch], ebx
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_E0:					; CODE XREF: _CRYPTO_gcm128_aad+44j
					; _CRYPTO_gcm128_aad+4Ej
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ecx
		retn
_CRYPTO_gcm128_aad endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CRYPTO_gcm128_decrypt
_CRYPTO_gcm128_decrypt proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 1Ch
		call	__chkstk
		mov	edx, [esp+1Ch+arg_C]
		xor	ecx, ecx
		push	ebx
		push	esi
		mov	esi, [esp+24h+arg_0]
		mov	eax, [esi+170h]
		mov	ebx, [esi+160h]
		mov	[esp+24h+var_10], eax
		mov	eax, [esi+174h]
		mov	[esp+24h+var_14], eax
		mov	eax, [esi+164h]
		mov	[esp+24h+var_4], eax
		mov	eax, edx
		add	eax, [esi+38h]
		mov	[esp+24h+var_8], ebx
		adc	ecx, [esi+3Ch]
		cmp	ecx, 0Fh
		ja	loc_358
		jb	short loc_142
		cmp	eax, 0FFFFFFE0h
		ja	loc_358

loc_142:				; CODE XREF: _CRYPTO_gcm128_decrypt+4Fj
		cmp	dword ptr [esi+16Ch], 0
		mov	[esi+38h], eax
		mov	[esi+3Ch], ecx
		jz	short loc_16C
		lea	eax, [esi+60h]
		push	eax
		lea	eax, [esi+40h]
		push	eax
		call	ebx
		mov	edx, [esp+2Ch+arg_C]
		add	esp, 8
		mov	dword ptr [esi+16Ch], 0

loc_16C:				; CODE XREF: _CRYPTO_gcm128_decrypt+67j
		mov	eax, [esi+0Ch]
		mov	ebx, [esp+24h+arg_8]
		push	ebp
		mov	ebp, [esi+168h]
		mov	[esp+28h+var_18], ebp
		bswap	eax
		mov	[esp+28h+var_1C], eax
		push	edi
		mov	edi, [esp+2Ch+arg_4]
		test	ebp, ebp
		jz	short loc_1C9

loc_18D:				; CODE XREF: _CRYPTO_gcm128_decrypt+C6j
		test	edx, edx
		jz	short loc_1B2
		mov	cl, [edi]
		dec	edx
		mov	al, [esi+ebp+10h]
		inc	edi
		xor	al, cl
		mov	[esp+2Ch+arg_C], edx
		mov	[ebx], al
		inc	ebx
		xor	[esi+ebp+40h], cl
		inc	ebp
		and	ebp, 0Fh
		mov	[esp+2Ch+var_18], ebp
		jnz	short loc_18D
		jmp	short loc_1BA
; ---------------------------------------------------------------------------

loc_1B2:				; CODE XREF: _CRYPTO_gcm128_decrypt+A7j
		test	ebp, ebp
		jnz	loc_348

loc_1BA:				; CODE XREF: _CRYPTO_gcm128_decrypt+C8j
		lea	eax, [esi+60h]
		push	eax
		lea	eax, [esi+40h]
		push	eax
		call	[esp+34h+var_8]
		add	esp, 8

loc_1C9:				; CODE XREF: _CRYPTO_gcm128_decrypt+A3j
		mov	eax, [esp+2Ch+arg_C]
		cmp	eax, 0C00h
		jb	loc_26E
		mov	eax, 0AAAAAAABh
		lea	ecx, [esi+60h]
		mul	[esp+2Ch+arg_C]
		shr	edx, 0Bh
		mov	[esp+2Ch+var_8], edx

loc_1EB:				; CODE XREF: _CRYPTO_gcm128_decrypt+17Cj
		push	0C00h
		push	edi
		push	ecx
		lea	eax, [esi+40h]
		push	eax
		call	[esp+3Ch+var_4]
		mov	ebp, [esp+3Ch+var_1C]
		add	esp, 10h
		mov	[esp+2Ch+var_C], 0C0h ;	'À'

loc_209:				; CODE XREF: _CRYPTO_gcm128_decrypt+166j
		push	[esp+2Ch+var_14]
		lea	eax, [esi+10h]
		push	eax
		push	esi
		call	[esp+38h+var_10]
		inc	ebp
		add	esp, 0Ch
		mov	eax, ebp
		bswap	eax
		mov	[esi+0Ch], eax
		mov	eax, [esi+10h]
		xor	eax, [edi]
		mov	[ebx], eax
		mov	eax, [edi+4]
		xor	eax, [esi+14h]
		mov	[ebx+4], eax
		mov	eax, [edi+8]
		xor	eax, [esi+18h]
		mov	[ebx+8], eax
		mov	eax, [edi+0Ch]
		add	edi, 10h
		xor	eax, [esi+1Ch]
		mov	[ebx+0Ch], eax
		add	ebx, 10h
		sub	[esp+2Ch+var_C], 1
		jnz	short loc_209
		sub	[esp+2Ch+arg_C], 0C00h
		lea	ecx, [esi+60h]
		sub	[esp+2Ch+var_8], 1
		mov	[esp+2Ch+var_1C], ebp
		jnz	short loc_1EB
		mov	ebp, [esp+2Ch+var_18]
		mov	eax, [esp+2Ch+arg_C]

loc_26E:				; CODE XREF: _CRYPTO_gcm128_decrypt+EAj
		mov	ecx, eax
		and	ecx, 0FFFFFFF0h
		jz	loc_2FA
		push	ecx
		push	edi
		lea	eax, [esi+60h]
		push	eax
		lea	eax, [esi+40h]
		push	eax
		call	[esp+3Ch+var_4]
		mov	eax, [esp+3Ch+arg_C]
		add	esp, 10h
		cmp	eax, 10h
		jb	short loc_2FA
		mov	ebp, eax
		lea	ecx, [esi+10h]
		shr	eax, 4
		mov	[esp+2Ch+arg_C], eax

loc_29F:				; CODE XREF: _CRYPTO_gcm128_decrypt+204j
		push	[esp+2Ch+var_14]
		push	ecx
		push	esi
		call	[esp+38h+var_10]
		mov	eax, [esp+38h+var_1C]
		lea	ecx, [esi+10h]
		inc	eax
		add	esp, 0Ch
		mov	[esp+2Ch+var_1C], eax
		sub	ebp, 10h
		bswap	eax
		mov	[esi+0Ch], eax
		mov	eax, [ecx]
		xor	eax, [edi]
		mov	[ebx], eax
		mov	eax, [edi+4]
		xor	eax, [esi+14h]
		mov	[ebx+4], eax
		mov	eax, [edi+8]
		xor	eax, [esi+18h]
		mov	[ebx+8], eax
		mov	eax, [edi+0Ch]
		add	edi, 10h
		xor	eax, [esi+1Ch]
		mov	[ebx+0Ch], eax
		add	ebx, 10h
		sub	[esp+2Ch+arg_C], 1
		jnz	short loc_29F
		mov	[esp+2Ch+arg_C], ebp
		mov	ebp, [esp+2Ch+var_18]
		mov	eax, [esp+2Ch+arg_C]

loc_2FA:				; CODE XREF: _CRYPTO_gcm128_decrypt+18Bj
					; _CRYPTO_gcm128_decrypt+1A9j
		test	eax, eax
		jz	short loc_348
		push	[esp+2Ch+var_14]
		lea	eax, [esi+10h]
		push	eax
		push	esi
		call	[esp+38h+var_10]
		mov	eax, [esp+38h+var_1C]
		add	esp, 0Ch
		mov	edx, [esp+2Ch+arg_C]
		inc	eax
		bswap	eax
		mov	[esi+0Ch], eax
		sub	edi, ebx
		lea	eax, [ebx+ebp]
		lea	ebx, [esi+40h]
		mov	[esp+2Ch+var_4], eax
		mov	esi, eax

loc_32A:				; CODE XREF: _CRYPTO_gcm128_decrypt+25Aj
		mov	cl, [edi+esi]
		lea	eax, [ebx+ebp]
		xor	[eax], cl
		lea	esi, [esi+1]
		mov	al, [ebx+ebp-30h]
		inc	ebp
		xor	al, cl
		mov	[esi-1], al
		sub	edx, 1
		jnz	short loc_32A
		mov	esi, [esp+2Ch+arg_0]

loc_348:				; CODE XREF: _CRYPTO_gcm128_decrypt+CCj
					; _CRYPTO_gcm128_decrypt+214j
		pop	edi
		mov	[esi+168h], ebp
		xor	eax, eax
		pop	ebp
		pop	esi
		pop	ebx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_358:				; CODE XREF: _CRYPTO_gcm128_decrypt+49j
					; _CRYPTO_gcm128_decrypt+54j
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 1Ch
		retn
_CRYPTO_gcm128_decrypt endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 364h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CRYPTO_gcm128_decrypt_ctr32
_CRYPTO_gcm128_decrypt_ctr32 proc near

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 14h
		call	__chkstk
		push	ebx
		mov	ebx, [esp+18h+arg_0]
		xor	ecx, ecx
		push	ebp
		mov	ebp, [esp+1Ch+arg_C]
		mov	eax, [ebx+174h]
		mov	edx, [ebx+160h]
		mov	[esp+1Ch+var_10], eax
		mov	eax, [ebx+164h]
		mov	[esp+1Ch+var_8], eax
		mov	eax, ebp
		add	eax, [ebx+38h]
		mov	[esp+1Ch+var_4], edx
		adc	ecx, [ebx+3Ch]
		cmp	ecx, 0Fh
		ja	loc_584
		jb	short loc_3B4
		cmp	eax, 0FFFFFFE0h
		ja	loc_584

loc_3B4:				; CODE XREF: _CRYPTO_gcm128_decrypt_ctr32+45j
		cmp	dword ptr [ebx+16Ch], 0
		mov	[ebx+38h], eax
		mov	[ebx+3Ch], ecx
		jz	short loc_3DA
		lea	eax, [ebx+60h]
		push	eax
		lea	eax, [ebx+40h]
		push	eax
		call	edx
		add	esp, 8
		mov	dword ptr [ebx+16Ch], 0

loc_3DA:				; CODE XREF: _CRYPTO_gcm128_decrypt_ctr32+5Dj
		mov	eax, [ebx+0Ch]
		push	esi
		mov	esi, [esp+20h+arg_4]
		push	edi
		mov	edi, [ebx+168h]
		mov	[esp+24h+var_C], edi
		mov	[esp+24h+arg_C], esi
		bswap	eax
		mov	[esp+24h+var_14], eax
		test	edi, edi
		jz	short loc_457
		mov	edx, [esp+24h+arg_8]
		mov	[esp+24h+arg_0], edx
		nop

loc_404:				; CODE XREF: _CRYPTO_gcm128_decrypt_ctr32+C7j
		test	ebp, ebp
		jz	short loc_43E
		mov	al, [edi+ebx+10h]
		dec	ebp
		mov	cl, [esi]
		inc	esi
		xor	al, cl
		mov	[esp+24h+arg_C], esi
		mov	[edx], al
		lea	eax, [edi+ebx]
		xor	[eax+40h], cl
		inc	edx
		inc	edi
		mov	[esp+24h+arg_0], edx
		and	edi, 0Fh
		mov	[esp+24h+var_C], edi
		jnz	short loc_404
		lea	eax, [ebx+60h]
		push	eax
		lea	eax, [ebx+40h]
		push	eax
		call	[esp+2Ch+var_4]
		add	esp, 8
		jmp	short loc_45F
; ---------------------------------------------------------------------------

loc_43E:				; CODE XREF: _CRYPTO_gcm128_decrypt_ctr32+A2j
		test	edi, edi
		jnz	loc_574
		lea	eax, [ebx+60h]
		push	eax
		lea	eax, [ebx+40h]
		push	eax
		call	[esp+2Ch+var_4]
		add	esp, 8
		jmp	short loc_45F
; ---------------------------------------------------------------------------

loc_457:				; CODE XREF: _CRYPTO_gcm128_decrypt_ctr32+95j
		mov	eax, [esp+24h+arg_8]
		mov	[esp+24h+arg_0], eax

loc_45F:				; CODE XREF: _CRYPTO_gcm128_decrypt_ctr32+D8j
					; _CRYPTO_gcm128_decrypt_ctr32+F1j
		cmp	ebp, 0C00h
		jb	short loc_4D9
		mov	edi, [esp+24h+arg_0]
		lea	ecx, [ebx+60h]
		mov	eax, 0AAAAAAABh
		mul	ebp
		shr	edx, 0Bh
		mov	[esp+24h+arg_C], edx

loc_47C:				; CODE XREF: _CRYPTO_gcm128_decrypt_ctr32+167j
		push	0C00h
		push	esi
		push	ecx
		lea	eax, [ebx+40h]
		push	eax
		call	[esp+34h+var_8]
		push	ebx
		push	[esp+38h+var_10]
		push	0C0h ; 'À'
		push	edi
		push	esi
		call	[esp+48h+arg_10]
		mov	ecx, [esp+48h+var_14]
		add	esp, 24h
		add	ecx, 0C0h ; 'À'
		add	edi, 0C00h
		mov	[esp+24h+var_14], ecx
		add	esi, 0C00h
		bswap	ecx
		sub	ebp, 0C00h
		mov	[ebx+0Ch], ecx
		sub	[esp+24h+arg_C], 1
		lea	ecx, [ebx+60h]
		jnz	short loc_47C
		mov	[esp+24h+arg_0], edi
		mov	edi, [esp+24h+var_C]
		mov	[esp+24h+arg_C], esi

loc_4D9:				; CODE XREF: _CRYPTO_gcm128_decrypt_ctr32+101j
		mov	eax, ebp
		and	eax, 0FFFFFFF0h
		mov	[esp+24h+var_4], eax
		jz	short loc_52E
		push	eax
		push	[esp+28h+arg_C]
		mov	esi, eax
		lea	eax, [ebx+60h]
		push	eax
		lea	eax, [ebx+40h]
		shr	esi, 4
		push	eax
		call	[esp+34h+var_8]
		push	ebx
		push	[esp+38h+var_10]
		push	esi
		push	[esp+40h+arg_0]
		push	[esp+44h+arg_C]
		call	[esp+48h+arg_10]
		mov	eax, [esp+48h+var_14]
		add	esp, 24h
		add	eax, esi
		mov	esi, [esp+24h+arg_C]
		mov	[esp+24h+var_14], eax
		bswap	eax
		mov	[ebx+0Ch], eax
		mov	eax, [esp+24h+var_4]
		add	esi, eax
		add	[esp+24h+arg_0], eax
		sub	ebp, eax

loc_52E:				; CODE XREF: _CRYPTO_gcm128_decrypt_ctr32+17Ej
		test	ebp, ebp
		jz	short loc_574
		push	[esp+24h+var_10]
		lea	eax, [ebx+10h]
		push	eax
		mov	eax, [ebx+170h]
		push	ebx
		call	eax
		mov	eax, [esp+30h+var_14]
		add	esp, 0Ch
		inc	eax
		bswap	eax
		mov	[ebx+0Ch], eax
		mov	eax, [esp+24h+arg_0]
		sub	esi, eax
		lea	edx, [edi+eax]

loc_559:				; CODE XREF: _CRYPTO_gcm128_decrypt_ctr32+20Ej
		mov	cl, [esi+edx]
		lea	eax, [ebx+edi]
		xor	[eax+40h], cl
		lea	edx, [edx+1]
		mov	al, [ebx+edi+10h]
		inc	edi
		xor	al, cl
		mov	[edx-1], al
		sub	ebp, 1
		jnz	short loc_559

loc_574:				; CODE XREF: _CRYPTO_gcm128_decrypt_ctr32+DCj
					; _CRYPTO_gcm128_decrypt_ctr32+1CCj
		mov	[ebx+168h], edi
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_584:				; CODE XREF: _CRYPTO_gcm128_decrypt_ctr32+3Fj
					; _CRYPTO_gcm128_decrypt_ctr32+4Aj
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn
_CRYPTO_gcm128_decrypt_ctr32 endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 590h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CRYPTO_gcm128_encrypt
_CRYPTO_gcm128_encrypt proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 18h
		call	__chkstk
		mov	ecx, [esp+18h+arg_C]
		xor	edx, edx
		push	ebx
		push	esi
		mov	esi, [esp+20h+arg_0]
		mov	eax, [esi+170h]
		mov	ebx, [esi+160h]
		mov	[esp+20h+var_10], eax
		mov	eax, [esi+174h]
		mov	[esp+20h+var_14], eax
		mov	eax, [esi+164h]
		mov	[esp+20h+var_8], eax
		mov	eax, ecx
		add	eax, [esi+38h]
		mov	[esp+20h+var_C], ebx
		adc	edx, [esi+3Ch]
		cmp	edx, 0Fh
		ja	loc_81D
		jb	short loc_5EA
		cmp	eax, 0FFFFFFE0h
		ja	loc_81D

loc_5EA:				; CODE XREF: _CRYPTO_gcm128_encrypt+4Fj
		cmp	dword ptr [esi+16Ch], 0
		mov	[esi+38h], eax
		mov	[esi+3Ch], edx
		jz	short loc_614
		lea	eax, [esi+60h]
		push	eax
		lea	eax, [esi+40h]
		push	eax
		call	ebx
		mov	ecx, [esp+28h+arg_C]
		add	esp, 8
		mov	dword ptr [esi+16Ch], 0

loc_614:				; CODE XREF: _CRYPTO_gcm128_encrypt+67j
		mov	eax, [esi+0Ch]
		mov	ebx, [esp+20h+arg_8]
		push	ebp
		mov	ebp, [esi+168h]
		mov	[esp+24h+var_18], ebp
		bswap	eax
		mov	[esp+24h+arg_0], eax
		push	edi
		mov	edi, [esp+28h+arg_4]
		test	ebp, ebp
		jz	short loc_66F

loc_635:				; CODE XREF: _CRYPTO_gcm128_encrypt+C4j
		test	ecx, ecx
		jz	short loc_658
		mov	al, [esi+ebp+10h]
		dec	ecx
		xor	al, [edi]
		inc	edi
		mov	[ebx], al
		inc	ebx
		xor	[esi+ebp+40h], al
		inc	ebp
		and	ebp, 0Fh
		mov	[esp+28h+arg_C], ecx
		mov	[esp+28h+var_18], ebp
		jnz	short loc_635
		jmp	short loc_660
; ---------------------------------------------------------------------------

loc_658:				; CODE XREF: _CRYPTO_gcm128_encrypt+A7j
		test	ebp, ebp
		jnz	loc_80D

loc_660:				; CODE XREF: _CRYPTO_gcm128_encrypt+C6j
		lea	eax, [esi+60h]
		push	eax
		lea	eax, [esi+40h]
		push	eax
		call	[esp+30h+var_C]
		add	esp, 8

loc_66F:				; CODE XREF: _CRYPTO_gcm128_encrypt+A3j
		mov	ecx, [esp+28h+arg_C]
		cmp	ecx, 0C00h
		jb	loc_723
		mov	ebp, [esp+28h+arg_0]
		mov	eax, 0AAAAAAABh
		mul	ecx
		shr	edx, 0Bh
		mov	[esp+28h+var_C], edx

loc_691:				; CODE XREF: _CRYPTO_gcm128_encrypt+189j
		mov	[esp+28h+arg_0], 0C0h ;	'À'
		nop	dword ptr [eax+00000000h]

loc_6A0:				; CODE XREF: _CRYPTO_gcm128_encrypt+155j
		push	[esp+28h+var_14]
		lea	eax, [esi+10h]
		push	eax
		push	esi
		call	[esp+34h+var_10]
		inc	ebp
		add	esp, 0Ch
		mov	eax, ebp
		bswap	eax
		mov	[esi+0Ch], eax
		mov	eax, [esi+10h]
		xor	eax, [edi]
		mov	[ebx], eax
		mov	eax, [edi+4]
		xor	eax, [esi+14h]
		mov	[ebx+4], eax
		mov	eax, [edi+8]
		xor	eax, [esi+18h]
		mov	[ebx+8], eax
		mov	eax, [edi+0Ch]
		add	edi, 10h
		xor	eax, [esi+1Ch]
		mov	[ebx+0Ch], eax
		add	ebx, 10h
		sub	[esp+28h+arg_0], 1
		jnz	short loc_6A0
		push	0C00h
		lea	eax, [ebx-0C00h]
		mov	[esp+2Ch+arg_0], ebp
		push	eax
		lea	eax, [esi+60h]
		push	eax
		lea	eax, [esi+40h]
		push	eax
		call	[esp+38h+var_8]
		mov	ecx, [esp+38h+arg_C]
		add	esp, 10h
		sub	ecx, 0C00h
		sub	[esp+28h+var_C], 1
		mov	[esp+28h+arg_C], ecx
		jnz	loc_691
		mov	ebp, [esp+28h+var_18]

loc_723:				; CODE XREF: _CRYPTO_gcm128_encrypt+E9j
		mov	edx, ecx
		and	edx, 0FFFFFFF0h
		mov	[esp+28h+var_4], edx
		jz	loc_7BA
		cmp	ecx, 10h
		jb	short loc_7A1
		mov	ebp, [esp+28h+arg_C]
		lea	eax, [esi+10h]
		shr	ecx, 4
		mov	[esp+28h+var_C], ecx

loc_745:				; CODE XREF: _CRYPTO_gcm128_encrypt+203j
		push	[esp+28h+var_14]
		push	eax
		push	esi
		call	[esp+34h+var_10]
		mov	eax, [esp+34h+arg_0]
		add	esp, 0Ch
		inc	eax
		sub	ebp, 10h
		mov	[esp+28h+arg_0], eax
		bswap	eax
		mov	[esi+0Ch], eax
		mov	eax, [esi+10h]
		xor	eax, [edi]
		mov	[ebx], eax
		mov	eax, [edi+4]
		xor	eax, [esi+14h]
		mov	[ebx+4], eax
		mov	eax, [edi+8]
		xor	eax, [esi+18h]
		mov	[ebx+8], eax
		mov	eax, [edi+0Ch]
		add	edi, 10h
		xor	eax, [esi+1Ch]
		mov	[ebx+0Ch], eax
		add	ebx, 10h
		sub	[esp+28h+var_C], 1
		lea	eax, [esi+10h]
		jnz	short loc_745
		mov	edx, [esp+28h+var_4]
		mov	[esp+28h+arg_C], ebp
		mov	ebp, [esp+28h+var_18]

loc_7A1:				; CODE XREF: _CRYPTO_gcm128_encrypt+1A5j
		push	edx
		mov	eax, ebx
		sub	eax, edx
		push	eax
		lea	eax, [esi+60h]
		push	eax
		lea	eax, [esi+40h]
		push	eax
		call	[esp+38h+var_8]
		mov	ecx, [esp+38h+arg_C]
		add	esp, 10h

loc_7BA:				; CODE XREF: _CRYPTO_gcm128_encrypt+19Cj
		test	ecx, ecx
		jz	short loc_80D
		push	[esp+28h+var_14]
		lea	eax, [esi+10h]
		push	eax
		push	esi
		call	[esp+34h+var_10]
		mov	eax, [esp+34h+arg_0]
		add	esp, 0Ch
		mov	edx, [esp+28h+arg_C]
		inc	eax
		bswap	eax
		mov	[esi+0Ch], eax
		sub	edi, ebx
		lea	eax, [ebx+ebp]
		mov	[esp+28h+arg_0], eax
		mov	ebx, eax
		nop	word ptr [eax+eax+00000000h]

loc_7F0:				; CODE XREF: _CRYPTO_gcm128_encrypt+27Bj
		movzx	eax, byte ptr [edi+ebx]
		lea	ebx, [ebx+1]
		movzx	ecx, byte ptr [esi+ebp+10h]
		xor	ecx, eax
		lea	eax, [esi+ebp]
		mov	[ebx-1], cl
		inc	ebp
		xor	[eax+40h], cl
		sub	edx, 1
		jnz	short loc_7F0

loc_80D:				; CODE XREF: _CRYPTO_gcm128_encrypt+CAj
					; _CRYPTO_gcm128_encrypt+22Cj
		pop	edi
		mov	[esi+168h], ebp
		xor	eax, eax
		pop	ebp
		pop	esi
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_81D:				; CODE XREF: _CRYPTO_gcm128_encrypt+49j
					; _CRYPTO_gcm128_encrypt+54j
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 18h
		retn
_CRYPTO_gcm128_encrypt endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 828h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CRYPTO_gcm128_encrypt_ctr32
_CRYPTO_gcm128_encrypt_ctr32 proc near

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 14h
		call	__chkstk
		push	ebx
		mov	ebx, [esp+18h+arg_0]
		xor	ecx, ecx
		push	ebp
		mov	ebp, [esp+1Ch+arg_C]
		mov	eax, [ebx+174h]
		mov	edx, [ebx+160h]
		mov	[esp+1Ch+var_10], eax
		mov	eax, [ebx+164h]
		mov	[esp+1Ch+var_8], eax
		mov	eax, ebp
		add	eax, [ebx+38h]
		mov	[esp+1Ch+var_4], edx
		adc	ecx, [ebx+3Ch]
		cmp	ecx, 0Fh
		ja	loc_A55
		jb	short loc_878
		cmp	eax, 0FFFFFFE0h
		ja	loc_A55

loc_878:				; CODE XREF: _CRYPTO_gcm128_encrypt_ctr32+45j
		cmp	dword ptr [ebx+16Ch], 0
		mov	[ebx+38h], eax
		mov	[ebx+3Ch], ecx
		jz	short loc_89E
		lea	eax, [ebx+60h]
		push	eax
		lea	eax, [ebx+40h]
		push	eax
		call	edx
		add	esp, 8
		mov	dword ptr [ebx+16Ch], 0

loc_89E:				; CODE XREF: _CRYPTO_gcm128_encrypt_ctr32+5Dj
		mov	eax, [ebx+0Ch]
		push	esi
		mov	esi, [esp+20h+arg_4]
		push	edi
		mov	edi, [ebx+168h]
		mov	[esp+24h+var_C], edi
		mov	[esp+24h+arg_C], esi
		bswap	eax
		mov	[esp+24h+var_14], eax
		test	edi, edi
		jz	short loc_919
		mov	edx, [esp+24h+arg_8]
		mov	[esp+24h+arg_0], edx
		nop

loc_8C8:				; CODE XREF: _CRYPTO_gcm128_encrypt_ctr32+C5j
		test	ebp, ebp
		jz	short loc_900
		mov	cl, [edi+ebx+10h]
		lea	eax, [edi+ebx]
		xor	cl, [esi]
		inc	edi
		mov	[edx], cl
		inc	esi
		xor	[eax+40h], cl
		inc	edx
		dec	ebp
		mov	[esp+24h+arg_0], edx
		and	edi, 0Fh
		mov	[esp+24h+arg_C], esi
		mov	[esp+24h+var_C], edi
		jnz	short loc_8C8
		lea	eax, [ebx+60h]
		push	eax
		lea	eax, [ebx+40h]
		push	eax
		call	[esp+2Ch+var_4]
		add	esp, 8
		jmp	short loc_921
; ---------------------------------------------------------------------------

loc_900:				; CODE XREF: _CRYPTO_gcm128_encrypt_ctr32+A2j
		test	edi, edi
		jnz	loc_A45
		lea	eax, [ebx+60h]
		push	eax
		lea	eax, [ebx+40h]
		push	eax
		call	[esp+2Ch+var_4]
		add	esp, 8
		jmp	short loc_921
; ---------------------------------------------------------------------------

loc_919:				; CODE XREF: _CRYPTO_gcm128_encrypt_ctr32+95j
		mov	eax, [esp+24h+arg_8]
		mov	[esp+24h+arg_0], eax

loc_921:				; CODE XREF: _CRYPTO_gcm128_encrypt_ctr32+D6j
					; _CRYPTO_gcm128_encrypt_ctr32+EFj
		mov	ecx, [esp+24h+arg_10]
		cmp	ebp, 0C00h
		jb	short loc_9A6
		mov	edi, [esp+24h+arg_0]
		mov	eax, 0AAAAAAABh
		mul	ebp
		shr	edx, 0Bh
		mov	[esp+24h+arg_C], edx
		nop	word ptr [eax+eax+00000000h]

loc_948:				; CODE XREF: _CRYPTO_gcm128_encrypt_ctr32+170j
		push	ebx
		push	[esp+28h+var_10]
		push	0C0h ; 'À'
		push	edi
		push	esi
		call	ecx
		mov	eax, [esp+38h+var_14]
		add	eax, 0C0h ; 'À'
		mov	[esp+38h+var_14], eax
		bswap	eax
		push	0C00h
		mov	[ebx+0Ch], eax
		lea	eax, [ebx+60h]
		push	edi
		push	eax
		lea	eax, [ebx+40h]
		push	eax
		call	[esp+48h+var_8]
		mov	ecx, [esp+48h+arg_10]
		add	esp, 24h
		add	edi, 0C00h
		add	esi, 0C00h
		sub	ebp, 0C00h
		sub	[esp+24h+arg_C], 1
		jnz	short loc_948
		mov	[esp+24h+arg_0], edi
		mov	edi, [esp+24h+var_C]
		mov	[esp+24h+arg_C], esi

loc_9A6:				; CODE XREF: _CRYPTO_gcm128_encrypt_ctr32+103j
		mov	eax, ebp
		and	eax, 0FFFFFFF0h
		mov	[esp+24h+var_C], eax
		jz	short loc_9FD
		push	ebx
		push	[esp+28h+var_10]
		mov	esi, eax
		shr	esi, 4
		push	esi
		push	[esp+30h+arg_0]
		push	[esp+34h+arg_C]
		call	ecx
		mov	eax, [esp+38h+var_14]
		add	eax, esi
		mov	esi, [esp+38h+arg_C]
		mov	[esp+38h+var_14], eax
		bswap	eax
		mov	[ebx+0Ch], eax
		mov	eax, [esp+38h+var_C]
		add	esi, eax
		push	eax
		push	[esp+3Ch+arg_0]
		sub	ebp, eax
		lea	eax, [ebx+60h]
		push	eax
		lea	eax, [ebx+40h]
		push	eax
		call	[esp+48h+var_8]
		mov	eax, [esp+48h+var_C]
		add	esp, 24h
		add	[esp+24h+arg_0], eax

loc_9FD:				; CODE XREF: _CRYPTO_gcm128_encrypt_ctr32+187j
		test	ebp, ebp
		jz	short loc_A45
		push	[esp+24h+var_10]
		lea	eax, [ebx+10h]
		push	eax
		mov	eax, [ebx+170h]
		push	ebx
		call	eax
		mov	eax, [esp+30h+var_14]
		add	esp, 0Ch
		inc	eax
		bswap	eax
		mov	[ebx+0Ch], eax
		mov	eax, [esp+24h+arg_0]
		sub	esi, eax
		lea	edx, [edi+eax]

loc_A28:				; CODE XREF: _CRYPTO_gcm128_encrypt_ctr32+21Bj
		movzx	eax, byte ptr [esi+edx]
		lea	edx, [edx+1]
		movzx	ecx, byte ptr [ebx+edi+10h]
		xor	ecx, eax
		lea	eax, [ebx+edi]
		mov	[edx-1], cl
		inc	edi
		xor	[eax+40h], cl
		sub	ebp, 1
		jnz	short loc_A28

loc_A45:				; CODE XREF: _CRYPTO_gcm128_encrypt_ctr32+DAj
					; _CRYPTO_gcm128_encrypt_ctr32+1D7j
		mov	[ebx+168h], edi
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_A55:				; CODE XREF: _CRYPTO_gcm128_encrypt_ctr32+3Fj
					; _CRYPTO_gcm128_encrypt_ctr32+4Aj
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn
_CRYPTO_gcm128_encrypt_ctr32 endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A60h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CRYPTO_gcm128_finish
_CRYPTO_gcm128_finish proc near		; CODE XREF: _CRYPTO_gcm128_tag+Ap

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+10h+arg_0]
		push	edi
		mov	edi, [esi+30h]
		mov	ebp, [esi+34h]
		mov	ebx, [esi+38h]
		mov	eax, [esi+3Ch]
		mov	ecx, [esi+160h]
		shld	eax, ebx, 3
		shld	ebp, edi, 3
		shl	ebx, 3
		shl	edi, 3
		cmp	dword ptr [esi+168h], 0
		mov	[esp+14h+arg_0], eax
		mov	[esp+14h+var_4], ecx
		jnz	short loc_AAC
		cmp	dword ptr [esi+16Ch], 0
		jz	short loc_AC1

loc_AAC:				; CODE XREF: _CRYPTO_gcm128_finish+41j
		lea	eax, [esi+60h]
		push	eax
		lea	eax, [esi+40h]
		push	eax
		call	ecx
		mov	eax, [esp+1Ch+arg_0]
		add	esp, 8
		mov	ecx, [esp+14h+var_4]

loc_AC1:				; CODE XREF: _CRYPTO_gcm128_finish+4Aj
		bswap	eax
		xor	[esi+48h], eax
		lea	eax, [esi+60h]
		bswap	ebp
		xor	[esi+40h], ebp
		lea	ebp, [esi+40h]
		push	eax
		bswap	edi
		xor	[ebp+4], edi
		bswap	ebx
		xor	[esi+4Ch], ebx
		push	ebp
		call	ecx
		mov	eax, [esi+20h]
		add	esp, 8
		xor	[ebp+0], eax
		mov	eax, [esi+24h]
		xor	[ebp+4], eax
		mov	eax, [esi+28h]
		xor	[esi+48h], eax
		mov	eax, [esi+2Ch]
		xor	[esi+4Ch], eax
		mov	ecx, [esp+14h+arg_4]
		test	ecx, ecx
		jz	short loc_B1C
		mov	eax, [esp+14h+arg_8]
		cmp	eax, 10h
		ja	short loc_B1C
		push	eax
		push	ecx
		push	ebp
		call	_CRYPTO_memcmp
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_B1C:				; CODE XREF: _CRYPTO_gcm128_finish+A0j
					; _CRYPTO_gcm128_finish+A9j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ecx
		retn
_CRYPTO_gcm128_finish endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B28h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl CRYPTO_gcm128_init(void *Dst, int, int)
		public _CRYPTO_gcm128_init
_CRYPTO_gcm128_init proc near		; CODE XREF: _CRYPTO_gcm128_new+27p

Dst		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+Dst]
		push	edi
		push	178h		; Size
		push	0		; Val
		push	esi		; Dst
		call	_memset
		mov	eax, [esp+18h+arg_4]
		lea	ebx, [esi+50h]
		mov	ecx, [esp+18h+arg_8]
		push	eax
		push	ebx
		push	ebx
		mov	[esi+170h], ecx
		mov	[esi+174h], eax
		call	ecx
		add	esp, 18h
		mov	edx, ebx
		mov	edi, 2
		nop	word ptr [eax+eax+00h]

loc_B68:				; CODE XREF: _CRYPTO_gcm128_init+56j
		mov	eax, [edx+4]
		lea	edx, [edx+8]
		mov	ecx, [edx-8]
		bswap	eax
		mov	[edx-8], eax
		bswap	ecx
		mov	[edx-4], ecx
		sub	edi, 1
		jnz	short loc_B68
		test	dword ptr ds:_OPENSSL_ia32cap_P, 1000000h
		jz	short loc_BC4
		mov	eax, dword ptr _OPENSSL_ia32cap_P+4
		test	al, 2
		jz	short loc_BC4
		and	eax, 10400000h
		cmp	eax, 10400000h
		lea	eax, [esi+60h]
		push	ebx
		push	eax
		call	_gcm_init_clmul
		add	esp, 8
		mov	dword ptr [esi+160h], offset _gcm_gmult_clmul
		mov	dword ptr [esi+164h], offset _gcm_ghash_clmul
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_BC4:				; CODE XREF: _CRYPTO_gcm128_init+62j
					; _CRYPTO_gcm128_init+6Bj
		lea	eax, [esi+60h]
		push	ebx
		push	eax
		call	_gcm_init_4bit
		add	esp, 8
		test	dword ptr ds:_OPENSSL_ia32cap_P, 2000000h
		jz	short loc_BF5
		pop	edi
		mov	dword ptr [esi+160h], offset _gcm_gmult_4bit_mmx
		mov	dword ptr [esi+164h], offset _gcm_ghash_4bit_mmx
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_BF5:				; CODE XREF: _CRYPTO_gcm128_init+B3j
		pop	edi
		mov	dword ptr [esi+160h], offset _gcm_gmult_4bit_x86
		mov	dword ptr [esi+164h], offset _gcm_ghash_4bit_x86
		pop	esi
		pop	ebx
		retn
_CRYPTO_gcm128_init endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C10h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CRYPTO_gcm128_new
_CRYPTO_gcm128_new proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	6BBh
		push	offset ??_C@_0BI@CLDPLLFH@?4?2crypto?2modes?2gcm128?4c?$AA@ ; ".\\crypto\\modes\\gcm128.c"
		push	178h
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_C41
		push	[esp+4+arg_4]	; int
		push	[esp+8+arg_0]	; int
		push	esi		; Dst
		call	_CRYPTO_gcm128_init
		add	esp, 0Ch
		mov	eax, esi

loc_C41:				; CODE XREF: _CRYPTO_gcm128_new+1Cj
		pop	esi
		retn
_CRYPTO_gcm128_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C44h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CRYPTO_gcm128_release
_CRYPTO_gcm128_release proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_C61
		push	178h
		push	esi
		call	_OPENSSL_cleanse
		push	esi
		call	_CRYPTO_free
		add	esp, 0Ch

loc_C61:				; CODE XREF: _CRYPTO_gcm128_release+7j
		pop	esi
		retn
_CRYPTO_gcm128_release endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C64h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CRYPTO_gcm128_setiv
_CRYPTO_gcm128_setiv proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		mov	edi, [esp+10h+arg_8]
		mov	ebx, [esi+160h]
		mov	dword ptr [esi], 0
		mov	dword ptr [esi+4], 0
		mov	dword ptr [esi+8], 0
		mov	dword ptr [esi+0Ch], 0
		mov	dword ptr [esi+40h], 0
		mov	dword ptr [esi+44h], 0
		mov	dword ptr [esi+48h], 0
		mov	dword ptr [esi+4Ch], 0
		mov	dword ptr [esi+30h], 0
		mov	dword ptr [esi+34h], 0
		mov	dword ptr [esi+38h], 0
		mov	dword ptr [esi+3Ch], 0
		mov	[esp+10h+arg_0], ebx
		mov	dword ptr [esi+16Ch], 0
		mov	dword ptr [esi+168h], 0
		cmp	edi, 0Ch
		jnz	short loc_D0F
		mov	eax, [esp+10h+arg_4]
		mov	edi, 1
		movq	xmm0, qword ptr	[eax]
		movq	qword ptr [esi], xmm0
		mov	eax, [eax+8]
		mov	[esi+8], eax
		mov	byte ptr [esi+0Fh], 1
		jmp	loc_E3D
; ---------------------------------------------------------------------------

loc_D0F:				; CODE XREF: _CRYPTO_gcm128_setiv+89j
		mov	[esp+10h+var_4], edi
		push	ebp
		mov	ebp, [esp+14h+arg_4]
		cmp	edi, 10h
		jb	short loc_D87
		mov	ebx, ebp
		lea	ecx, [esi+0Fh]
		mov	eax, edi
		sub	ebx, esi
		shr	eax, 4
		mov	[esp+14h+arg_8], eax
		nop	dword ptr [eax+00000000h]

loc_D34:				; CODE XREF: _CRYPTO_gcm128_setiv+11Dj
		lea	eax, [ebx+ecx]
		cmp	esi, eax
		ja	short loc_D56
		cmp	ecx, ebp
		jb	short loc_D56
		mov	eax, esi
		mov	edx, 10h

loc_D46:				; CODE XREF: _CRYPTO_gcm128_setiv+EEj
		mov	cl, [ebx+eax]
		lea	eax, [eax+1]
		xor	[eax-1], cl
		sub	edx, 1
		jnz	short loc_D46
		jmp	short loc_D64
; ---------------------------------------------------------------------------

loc_D56:				; CODE XREF: _CRYPTO_gcm128_setiv+D5j
					; _CRYPTO_gcm128_setiv+D9j
		movups	xmm1, xmmword ptr [esi]
		movups	xmm0, xmmword ptr [ebp+0]
		pxor	xmm1, xmm0
		movups	xmmword	ptr [esi], xmm1

loc_D64:				; CODE XREF: _CRYPTO_gcm128_setiv+F0j
		lea	eax, [esi+60h]
		push	eax
		push	esi
		call	[esp+1Ch+arg_0]
		add	esp, 8
		lea	ecx, [esi+0Fh]
		add	ebp, 10h
		add	ebx, 10h
		sub	edi, 10h
		sub	[esp+14h+arg_8], 1
		jnz	short loc_D34
		mov	ebx, [esp+14h+arg_0]

loc_D87:				; CODE XREF: _CRYPTO_gcm128_setiv+B7j
		test	edi, edi
		jz	loc_E16
		xor	edx, edx
		test	edi, edi
		jz	short loc_E0C
		cmp	edi, 20h ; ' '
		jb	short loc_DEF
		lea	eax, [ebp-1]
		lea	ecx, [esi-1]
		add	eax, edi
		add	ecx, edi
		cmp	esi, eax
		ja	short loc_DAC
		cmp	ecx, ebp
		jnb	short loc_DEF

loc_DAC:				; CODE XREF: _CRYPTO_gcm128_setiv+142j
		mov	eax, edi
		mov	ecx, edi
		and	eax, 1Fh
		mov	ebx, ebp
		sub	ecx, eax
		mov	eax, esi
		sub	ebx, esi
		nop	word ptr [eax+eax+00000000h]

loc_DC4:				; CODE XREF: _CRYPTO_gcm128_setiv+189j
		movups	xmm0, xmmword ptr [eax]
		lea	eax, [eax+20h]
		movups	xmm1, xmmword ptr [eax+ebx-20h]
		pxor	xmm1, xmm0
		movups	xmmword	ptr [eax-20h], xmm1
		movups	xmm1, xmmword ptr [edx+ebp+10h]
		add	edx, 20h ; ' '
		movups	xmm0, xmmword ptr [eax-10h]
		pxor	xmm1, xmm0
		movups	xmmword	ptr [eax-10h], xmm1
		cmp	edx, ecx
		jb	short loc_DC4

loc_DEF:				; CODE XREF: _CRYPTO_gcm128_setiv+134j
					; _CRYPTO_gcm128_setiv+146j
		cmp	edx, edi
		jnb	short loc_E08
		sub	ebp, esi
		lea	ecx, [edx+esi]
		sub	edi, edx

loc_DFA:				; CODE XREF: _CRYPTO_gcm128_setiv+1A2j
		mov	al, [ecx+ebp]
		lea	ecx, [ecx+1]
		xor	[ecx-1], al
		sub	edi, 1
		jnz	short loc_DFA

loc_E08:				; CODE XREF: _CRYPTO_gcm128_setiv+18Dj
		mov	ebx, [esp+14h+arg_0]

loc_E0C:				; CODE XREF: _CRYPTO_gcm128_setiv+12Fj
		lea	eax, [esi+60h]
		push	eax
		push	esi
		call	ebx
		add	esp, 8

loc_E16:				; CODE XREF: _CRYPTO_gcm128_setiv+125j
		mov	eax, [esp+14h+var_4]
		xor	ecx, ecx
		shld	ecx, eax, 3
		shl	eax, 3
		bswap	eax
		xor	[esi+0Ch], eax
		lea	eax, [esi+60h]
		push	eax
		bswap	ecx
		xor	[esi+8], ecx
		push	esi
		call	ebx
		mov	edi, [esi+0Ch]
		add	esp, 8
		bswap	edi
		pop	ebp

loc_E3D:				; CODE XREF: _CRYPTO_gcm128_setiv+A6j
		push	dword ptr [esi+174h]
		lea	eax, [esi+20h]
		push	eax
		mov	eax, [esi+170h]
		push	esi
		call	eax
		add	esp, 0Ch
		inc	edi
		bswap	edi
		mov	[esi+0Ch], edi
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
_CRYPTO_gcm128_setiv endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E60h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl CRYPTO_gcm128_tag(int, void *Dst,	size_t Size)
		public _CRYPTO_gcm128_tag
_CRYPTO_gcm128_tag proc	near

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		push	0
		push	0
		push	esi
		call	_CRYPTO_gcm128_finish
		mov	ecx, 10h
		lea	eax, [esi+40h]
		cmp	[esp+10h+Size],	ecx
		cmovbe	ecx, [esp+10h+Size]
		push	ecx		; Size
		push	eax		; Src
		push	[esp+18h+Dst]	; Dst
		call	_memcpy
		add	esp, 18h
		pop	esi
		retn
_CRYPTO_gcm128_tag endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E90h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_gcm_init_4bit	proc near		; CODE XREF: _CRYPTO_gcm128_init+A1p

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= xmmword ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 20h ; ' '
		call	__chkstk
		mov	eax, [esp+20h+arg_4]
		push	ebx
		mov	ebx, [esp+24h+arg_0]
		push	ebp
		push	esi
		push	edi
		mov	dword ptr [ebx], 0
		xor	edi, edi
		mov	dword ptr [ebx+4], 0
		mov	dword ptr [ebx+8], 0
		mov	dword ptr [ebx+0Ch], 0
		mov	esi, [eax]
		mov	edx, [eax+4]
		mov	ecx, [eax+8]
		mov	ebp, ecx
		mov	eax, [eax+0Ch]
		and	ebp, 1
		mov	dword ptr [esp+30h+var_10+8], ecx
		neg	ebp
		mov	dword ptr [esp+30h+var_10+0Ch],	eax
		and	ebp, 0E1000000h
		shrd	ecx, eax, 1
		mov	dword ptr [esp+30h+var_10], esi
		mov	dword ptr [esp+30h+var_10+4], edx
		or	edi, ecx
		movups	xmm0, [esp+30h+var_10]
		mov	ecx, [esp+30h+arg_0]
		shr	eax, 1
		movups	xmmword	ptr [ebx+80h], xmm0
		mov	ebx, esi
		mov	dword ptr [esp+30h+var_10+8], edi
		shrd	esi, edx, 1
		shl	ebx, 1Fh
		or	ebx, eax
		shr	edx, 1
		xor	eax, eax
		mov	dword ptr [esp+30h+var_10+0Ch],	ebx
		xor	eax, esi
		xor	ebp, edx
		mov	dword ptr [esp+30h+var_10], eax
		mov	esi, eax
		mov	dword ptr [esp+30h+var_10+4], ebp
		xor	edx, edx
		movups	xmm0, [esp+30h+var_10]
		shl	esi, 1Fh
		shrd	eax, ebp, 1
		movups	xmmword	ptr [ecx+40h], xmm0
		mov	ecx, edi
		shr	ebp, 1
		and	ecx, 1
		xor	edx, eax
		neg	ecx
		mov	dword ptr [esp+30h+var_10], edx
		shrd	edi, ebx, 1
		and	ecx, 0E1000000h
		mov	[esp+30h+arg_4], ecx
		xor	ecx, ecx
		mov	eax, [esp+30h+arg_4]
		or	ecx, edi
		xor	eax, ebp
		shr	ebx, 1
		or	esi, ebx
		mov	dword ptr [esp+30h+var_10+4], eax
		mov	edi, ecx
		mov	dword ptr [esp+30h+var_10+0Ch],	esi
		and	edi, 1
		mov	dword ptr [esp+30h+var_10+8], ecx
		movups	xmm0, [esp+30h+var_10]
		mov	[esp+30h+arg_4], eax
		neg	edi
		mov	eax, [esp+30h+arg_0]
		mov	ebp, edx
		shrd	ecx, esi, 1
		xor	ebx, ebx
		shl	ebp, 1Fh
		and	edi, 0E1000000h
		shr	esi, 1
		movups	xmmword	ptr [eax+20h], xmm0
		or	ebx, ecx
		mov	ecx, [esp+30h+arg_4]
		xor	eax, eax
		shrd	edx, ecx, 1
		or	ebp, esi
		mov	dword ptr [esp+30h+var_10+8], ebx
		xor	eax, edx
		shr	ecx, 1
		mov	edx, [esp+30h+arg_0]
		xor	edi, ecx
		mov	dword ptr [esp+30h+var_10], eax
		mov	dword ptr [esp+30h+var_10+0Ch],	ebp
		mov	dword ptr [esp+30h+var_10+4], edi
		mov	ecx, [edx+20h]
		movups	xmm0, [esp+30h+var_10]
		mov	[esp+30h+arg_4], ecx
		xor	ecx, eax
		mov	eax, [edx+24h]
		xor	eax, edi
		mov	[edx+30h], ecx
		mov	[edx+34h], eax
		mov	eax, [edx+28h]
		mov	ecx, eax
		mov	[esp+30h+var_20], eax
		xor	ecx, ebx
		mov	eax, [edx+2Ch]
		xor	eax, ebp
		mov	ebp, edx
		movups	xmmword	ptr [edx+10h], xmm0
		movups	xmm1, xmmword ptr [ebp+40h]
		mov	[ebp+3Ch], eax
		mov	eax, [ebp+14h]
		mov	[ebp+38h], ecx
		movaps	xmm0, xmm1
		mov	ecx, [ebp+10h]
		psrldq	xmm0, 4
		movd	edi, xmm0
		movaps	xmm0, xmm1
		movd	ebx, xmm1
		psrldq	xmm1, 0Ch
		xor	eax, edi
		movd	edx, xmm1
		mov	[ebp+54h], eax
		xor	ecx, ebx
		mov	eax, [ebp+1Ch]
		xor	eax, edx
		mov	[ebp+50h], ecx
		mov	ecx, [ebp+18h]
		mov	[ebp+5Ch], eax
		mov	eax, [ebp+24h]
		xor	eax, edi
		psrldq	xmm0, 8
		movd	esi, xmm0
		mov	[ebp+64h], eax
		mov	eax, [ebp+2Ch]
		xor	ecx, esi
		xor	eax, edx
		mov	[ebp+58h], ecx
		mov	ecx, [esp+30h+arg_4]
		xor	ecx, ebx
		mov	[ebp+6Ch], eax
		mov	eax, [esp+30h+arg_0]
		mov	[ebp+60h], ecx
		mov	ecx, [esp+30h+var_20]
		xor	ecx, esi
		mov	[ebp+68h], ecx
		mov	ecx, [eax+30h]
		mov	ebp, [ebp+34h]
		xor	ecx, ebx
		mov	eax, ebp
		mov	[esp+30h+var_14], ebp
		xor	eax, edi
		mov	edi, [esp+30h+arg_0]
		mov	ebx, [edi+38h]
		mov	[edi+70h], ecx
		mov	ecx, ebx
		mov	[edi+74h], eax
		xor	ecx, esi
		mov	edi, [edi+3Ch]
		mov	eax, edi
		mov	esi, [esp+30h+arg_0]
		xor	eax, edx
		movups	xmm1, xmmword ptr [esi+80h]
		mov	[esi+7Ch], eax
		mov	[esi+78h], ecx
		mov	ecx, [esi+10h]
		movaps	xmm0, xmm1
		movd	eax, xmm1
		psrldq	xmm0, 4
		movd	edx, xmm0
		movaps	xmm0, xmm1
		xor	ecx, eax
		mov	[esp+30h+var_1C], eax
		mov	eax, [esi+14h]
		xor	eax, edx
		mov	[esi+90h], ecx
		mov	[esi+94h], eax
		mov	eax, [esp+30h+arg_0]
		mov	ebp, eax
		psrldq	xmm0, 8
		movd	esi, xmm0
		mov	[esp+30h+var_18], edx
		mov	ecx, [eax+18h]
		mov	eax, [ebp+1Ch]
		xor	ecx, esi
		mov	[ebp+98h], ecx
		xor	ebx, esi
		xor	[esp+30h+var_20], esi
		mov	ecx, ebp
		psrldq	xmm1, 0Ch
		movd	edx, xmm1
		xor	eax, edx
		xor	edi, edx
		mov	[ecx+9Ch], eax
		mov	eax, [esp+30h+arg_4]
		xor	eax, [esp+30h+var_1C]
		mov	[esp+30h+arg_4], eax
		mov	ecx, eax
		mov	eax, [ebp+24h]
		xor	eax, [esp+30h+var_18]
		mov	[ebp+0A0h], ecx
		mov	ecx, ebp
		mov	[ecx+0A4h], eax
		mov	eax, [ecx+2Ch]
		mov	ecx, [esp+30h+var_20]
		xor	eax, edx
		mov	[ebp+0A8h], ecx
		mov	ecx, ebp
		mov	ebp, [esp+30h+var_14]
		xor	ebp, [esp+30h+var_18]
		mov	[ecx+0ACh], eax
		mov	eax, [ecx+30h]
		xor	eax, [esp+30h+var_1C]
		mov	[ecx+0B0h], eax
		mov	[ecx+0BCh], edi
		mov	edi, [esp+30h+arg_0]
		mov	[ecx+0B4h], ebp
		mov	ebp, [esp+30h+var_1C]
		mov	[ecx+0B8h], ebx
		mov	ecx, ebp
		xor	ecx, [edi+40h]
		mov	ebx, [esp+30h+var_18]
		mov	eax, ebx
		xor	eax, [edi+44h]
		mov	[edi+0C0h], ecx
		mov	ecx, [edi+48h]
		mov	[edi+0C4h], eax
		xor	ecx, esi
		mov	eax, [edi+4Ch]
		xor	eax, edx
		mov	[edi+0C8h], ecx
		mov	ecx, [edi+50h]
		mov	[edi+0CCh], eax
		xor	ecx, ebp
		mov	eax, [edi+54h]
		xor	eax, ebx
		mov	[edi+0D0h], ecx
		mov	[edi+0D4h], eax
		mov	ecx, esi
		xor	ecx, [edi+58h]
		mov	eax, edx
		xor	eax, [edi+5Ch]
		mov	[edi+0D8h], ecx
		mov	ecx, [edi+60h]
		mov	[edi+0DCh], eax
		xor	ecx, ebp
		mov	eax, [edi+64h]
		xor	ebp, [edi+70h]
		xor	eax, ebx
		xor	ebx, [edi+74h]
		mov	[edi+0E0h], ecx
		mov	ecx, esi
		xor	esi, [edi+78h]
		xor	ecx, [edi+68h]
		mov	[edi+0E4h], eax
		mov	eax, edx
		xor	eax, [edi+6Ch]
		xor	edx, [edi+7Ch]
		mov	[edi+0F0h], ebp
		mov	[edi+0F4h], ebx
		mov	[edi+0F8h], esi
		mov	[edi+0E8h], ecx
		mov	[edi+0ECh], eax
		mov	[edi+0FCh], edx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 20h
		retn
_gcm_init_4bit	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1228h
; COMDAT (pick any)
		public ??_C@_0BI@CLDPLLFH@?4?2crypto?2modes?2gcm128?4c?$AA@
; `string'
??_C@_0BI@CLDPLLFH@?4?2crypto?2modes?2gcm128?4c?$AA@ db	'.\crypto\modes\gcm128.c',0
					; DATA XREF: _CRYPTO_gcm128_new+6o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _CRYPTO_gcm128_new+10p
		extrn _CRYPTO_free:near	; CODE XREF: _CRYPTO_gcm128_release+15p
		extrn _OPENSSL_cleanse:near ; CODE XREF: _CRYPTO_gcm128_release+Fp
		extrn _CRYPTO_memcmp:near ; CODE XREF: _CRYPTO_gcm128_finish+AEp
		extrn _gcm_init_clmul:near ; CODE XREF:	_CRYPTO_gcm128_init+7Cp
		extrn _gcm_gmult_clmul:near ; DATA XREF: _CRYPTO_gcm128_init+84o
		extrn _gcm_ghash_clmul:near ; DATA XREF: _CRYPTO_gcm128_init+8Eo
		extrn _gcm_gmult_4bit_mmx:near ; DATA XREF: _CRYPTO_gcm128_init+B6o
		extrn _gcm_ghash_4bit_mmx:near ; DATA XREF: _CRYPTO_gcm128_init+C0o
		extrn _gcm_gmult_4bit_x86:near ; DATA XREF: _CRYPTO_gcm128_init+CEo
		extrn _gcm_ghash_4bit_x86:near ; DATA XREF: _CRYPTO_gcm128_init+D8o
		extrn __chkstk:near	; CODE XREF: _CRYPTO_gcm128_aad+5p
					; _CRYPTO_gcm128_decrypt+5p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _CRYPTO_gcm128_tag+26p
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _CRYPTO_gcm128_init+Fp
		extrn _OPENSSL_ia32cap_P:near ;	DATA XREF: _CRYPTO_gcm128_init+58r
					; _CRYPTO_gcm128_init+64r ...


		end
