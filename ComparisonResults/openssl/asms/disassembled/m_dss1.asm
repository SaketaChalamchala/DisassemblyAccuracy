;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	36B9D3595EDE6753397A2EB09AC87923
; Input	CRC32 :	D7A1A83E

; File Name   :	C:\compspace\Diff\openssl\obj\m_dss1.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_init		proc near		; DATA XREF: .rdata:0000004Co

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+0Ch]
		call	_SHA1_Init
		add	esp, 4
		retn
_init		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_update		proc near		; DATA XREF: .rdata:00000050o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		mov	eax, [esp+4+arg_0]
		push	[esp+4+arg_4]
		push	dword ptr [eax+0Ch]
		call	_SHA1_Update
		add	esp, 0Ch
		retn
_update		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 28h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_final		proc near		; DATA XREF: .rdata:00000054o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+0Ch]
		push	[esp+4+arg_4]
		call	_SHA1_Final
		add	esp, 8
		retn
_final		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 3Ch
_dss1_md	dd offset off_74	; DATA XREF: _EVP_dss1o
off_40		dd offset byte_71	; DATA XREF: .rdata:0000007Co
					; .rdata:0000006Co
		db 14h,	0
word_46		dw 0			; DATA XREF: .rdata:off_74o
		dd 2
		dd offset _init
		dd offset _update
		dd offset _final
		align 10h
		dd offset _DSA_sign
off_64		dd offset _DSA_verify	; DATA XREF: .rdata:00000080o
		dd offset off_74
		dd offset off_40+2
		db 71h
byte_71		db 3 dup(0)		; DATA XREF: .rdata:off_40o
off_74		dd offset word_46	; DATA XREF: .rdata:_dss1_mdo
					; .rdata:00000068o
		dd 0
		dd offset off_40
		dd offset off_64
		align 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 88h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_dss1
_EVP_dss1	proc near
		mov	eax, offset _dss1_md
		retn
_EVP_dss1	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _DSA_sign:near	; DATA XREF: .rdata:00000060o
		extrn _DSA_verify:near	; DATA XREF: .rdata:off_64o
		extrn _SHA1_Init:near	; CODE XREF: _init+7p
		extrn _SHA1_Update:near	; CODE XREF: _update+Fp
		extrn _SHA1_Final:near	; CODE XREF: _final+Bp


		end
