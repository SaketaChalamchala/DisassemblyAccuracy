;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	CDEB64D1689D5FE084B254A28F3A5CB6
; Input	CRC32 :	3DD80055

; File Name   :	C:\compspace\Diff\openssl\obj\e_idea.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_idea_init_key	proc near		; DATA XREF: .rdata:0000027Co
					; .rdata:000002B0o ...

var_DC		= byte ptr -0DCh
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h

		mov	eax, 0DCh ; 'Ü'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+0DCh+var_4], eax
		cmp	[esp+0DCh+arg_C], 0
		push	esi

loc_21:					; DATA XREF: .rdata:_idea_cbco
					; .rdata:_idea_cfb64o ...
		mov	esi, [esp+0E0h+arg_0]
		push	edi

loc_29:					; DATA XREF: .rdata:_idea_ofbo
		mov	edi, [esp+0E4h+arg_4]
		jnz	short loc_84
		push	esi
		call	_EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		add	esp, 4
		cmp	eax, 4
		jz	short loc_84
		push	esi
		call	_EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		add	esp, 4
		cmp	eax, 3
		jz	short loc_84
		lea	eax, [esp+0E4h+var_DC]
		push	eax
		push	edi
		call	_idea_set_encrypt_key
		push	dword ptr [esi+60h]
		lea	eax, [esp+0F0h+var_DC]
		push	eax
		call	_idea_set_decrypt_key
		lea	eax, [esp+0F4h+var_DC]
		push	0D8h ; 'Ø'
		push	eax
		call	_OPENSSL_cleanse
		add	esp, 18h
		jmp	short loc_90
; ---------------------------------------------------------------------------

loc_84:					; CODE XREF: _idea_init_key+30j
					; _idea_init_key+43j ...
		push	dword ptr [esi+60h]
		push	edi
		call	_idea_set_encrypt_key
		add	esp, 8

loc_90:					; CODE XREF: _idea_init_key+82j
		mov	ecx, [esp+0E4h+var_4]
		mov	eax, 1
		pop	edi
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0DCh
		retn
_idea_init_key	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_idea_ecb_cipher proc near		; DATA XREF: .rdata:0000031Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_0]
		push	ebp
		mov	ebp, [esp+4+arg_C]
		push	edi
		mov	eax, [ecx]
		mov	edi, [eax+4]
		cmp	ebp, edi
		jb	short loc_F4
		mov	eax, [esp+8+arg_4]
		sub	ebp, edi
		push	ebx
		push	esi
		mov	esi, [esp+10h+arg_8]
		xor	ebx, ebx
		sub	eax, esi
		mov	[esp+10h+arg_4], eax

loc_D3:					; CODE XREF: _idea_ecb_cipher+44j
		push	dword ptr [ecx+60h]
		add	eax, esi

loc_D8:					; DATA XREF: .rdata:00000288o
					; .rdata:000002BCo ...
		push	eax
		push	esi
		call	_idea_ecb_encrypt
		mov	ecx, [esp+1Ch+arg_0]
		add	ebx, edi
		mov	eax, [esp+1Ch+arg_4]
		add	esp, 0Ch
		add	esi, edi
		cmp	ebx, ebp
		jbe	short loc_D3
		pop	esi
		pop	ebx

loc_F4:					; CODE XREF: _idea_ecb_cipher+11j
		pop	edi
		mov	eax, 1
		pop	ebp
		retn
_idea_ecb_cipher endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_idea_cbc_cipher proc near		; DATA XREF: .rdata:00000280o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		mov	esi, [esp+0Ch+arg_C]
		push	edi
		mov	edi, [esp+10h+arg_8]
		cmp	esi, 40000000h
		jb	short loc_156
		mov	eax, esi
		lea	ecx, [ebp+20h]
		shr	eax, 1Eh
		mov	[esp+10h+arg_C], eax

loc_124:				; CODE XREF: _idea_cbc_cipher+58j
		push	dword ptr [ebp+8]
		push	ecx
		push	dword ptr [ebp+60h]
		push	40000000h
		push	ebx
		push	edi
		call	_idea_cbc_encrypt
		add	esp, 18h
		lea	ecx, [ebp+20h]
		sub	esi, 40000000h
		add	edi, 40000000h
		add	ebx, 40000000h
		sub	[esp+10h+arg_C], 1
		jnz	short loc_124

loc_156:				; CODE XREF: _idea_cbc_cipher+1Aj
		test	esi, esi
		jz	short loc_16F
		push	dword ptr [ebp+8]
		lea	eax, [ebp+20h]
		push	eax
		push	dword ptr [ebp+60h]
		push	esi
		push	ebx
		push	edi
		call	_idea_cbc_encrypt
		add	esp, 18h

loc_16F:				; CODE XREF: _idea_cbc_cipher+5Cj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
_idea_cbc_cipher endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 17Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_idea_ofb_cipher proc near		; DATA XREF: .rdata:000002E8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		mov	esi, [esp+0Ch+arg_C]
		push	edi
		mov	edi, [esp+10h+arg_8]
		cmp	esi, 40000000h
		jb	short loc_1DF
		mov	eax, esi
		lea	ecx, [ebp+50h]
		shr	eax, 1Eh
		lea	edx, [ebp+20h]
		mov	[esp+10h+arg_C], eax
		nop	dword ptr [eax+eax+00h]

loc_1AC:				; CODE XREF: _idea_ofb_cipher+61j
		push	ecx
		push	edx
		push	dword ptr [ebp+60h]
		push	40000000h
		push	ebx
		push	edi
		call	_idea_ofb64_encrypt
		add	esp, 18h
		lea	ecx, [ebp+50h]
		sub	esi, 40000000h
		lea	edx, [ebp+20h]
		add	edi, 40000000h
		add	ebx, 40000000h
		sub	[esp+10h+arg_C], 1
		jnz	short loc_1AC

loc_1DF:				; CODE XREF: _idea_ofb_cipher+1Aj
		test	esi, esi
		jz	short loc_1F9
		lea	eax, [ebp+50h]
		push	eax
		lea	eax, [ebp+20h]
		push	eax
		push	dword ptr [ebp+60h]
		push	esi
		push	ebx
		push	edi
		call	_idea_ofb64_encrypt
		add	esp, 18h

loc_1F9:				; CODE XREF: _idea_ofb_cipher+65j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
_idea_ofb_cipher endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 204h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_idea_cfb64_cipher proc	near		; DATA XREF: .rdata:000002B4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, 40000000h
		push	edi
		mov	edi, [esp+8+arg_C]
		cmp	edi, esi
		cmovb	esi, edi
		test	edi, edi
		jz	short loc_25F
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		push	ebp
		mov	ebp, [esp+10h+arg_8]
		xchg	ax, ax

loc_224:				; CODE XREF: _idea_cfb64_cipher+4Fj
		cmp	edi, esi
		jb	short loc_255
		push	dword ptr [ebx+8]
		lea	eax, [ebx+50h]
		push	eax
		lea	eax, [ebx+20h]
		push	eax
		push	dword ptr [ebx+60h]
		push	edi
		push	[esp+24h+arg_4]
		push	ebp
		call	_idea_cfb64_encrypt
		add	[esp+2Ch+arg_4], esi
		sub	edi, esi
		add	ebp, esi
		add	esp, 1Ch
		cmp	edi, esi
		cmovb	esi, edi
		test	edi, edi
		jnz	short loc_224

loc_255:				; CODE XREF: _idea_cfb64_cipher+22j
		pop	ebp
		pop	ebx
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_25F:				; CODE XREF: _idea_cfb64_cipher+12j
		pop	edi
		mov	eax, 1
		pop	esi
		retn
_idea_cfb64_cipher endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 268h
_idea_cbc	dd offset loc_21+1	; DATA XREF: _EVP_idea_cbco
		dd 8, 10h, 8, 2
		dd offset _idea_init_key
		dd offset _idea_cbc_cipher
		align 8
		dd offset loc_D8
		dd offset _EVP_CIPHER_set_asn1_iv
		dd offset _EVP_CIPHER_get_asn1_iv
		dd 2 dup(0)
_idea_cfb64	dd offset loc_21+2	; DATA XREF: _EVP_idea_cfb64o
		dd 1, 10h, 8, 3
		dd offset _idea_init_key
		dd offset _idea_cfb64_cipher
		dd 0
		dd offset loc_D8
		dd offset _EVP_CIPHER_set_asn1_iv
		dd offset _EVP_CIPHER_get_asn1_iv
		align 10h
_idea_ofb	dd offset loc_29+5	; DATA XREF: _EVP_idea_ofbo
		dd 1, 10h, 8, 4
		dd offset _idea_init_key
		dd offset _idea_ofb_cipher
		align 10h
		dd offset loc_D8
		dd offset _EVP_CIPHER_set_asn1_iv
		dd offset _EVP_CIPHER_get_asn1_iv
		dd 2 dup(0)
_idea_ecb	dd offset loc_21+3	; DATA XREF: _EVP_idea_ecbo
		dd 8, 10h, 0
		dd 1
		dd offset _idea_init_key
		dd offset _idea_ecb_cipher
		dd 0
		dd offset loc_D8
		dd offset _EVP_CIPHER_set_asn1_iv
		dd offset _EVP_CIPHER_get_asn1_iv
		dd 2 dup(0)
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 338h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_idea_cbc
_EVP_idea_cbc	proc near
		mov	eax, offset _idea_cbc
		retn
_EVP_idea_cbc	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 340h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_idea_cfb64
_EVP_idea_cfb64	proc near
		mov	eax, offset _idea_cfb64
		retn
_EVP_idea_cfb64	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 348h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_idea_ecb
_EVP_idea_ecb	proc near
		mov	eax, offset _idea_ecb
		retn
_EVP_idea_ecb	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 350h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_idea_ofb
_EVP_idea_ofb	proc near
		mov	eax, offset _idea_ofb
		retn
_EVP_idea_ofb	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _EVP_CIPHER_set_asn1_iv:near ; DATA XREF:	.rdata:0000028Co
					; .rdata:000002C0o ...
		extrn _EVP_CIPHER_get_asn1_iv:near ; DATA XREF:	.rdata:00000290o
					; .rdata:000002C4o ...
		extrn _OPENSSL_cleanse:near ; CODE XREF: _idea_init_key+7Ap
		extrn _EVP_CIPHER_CTX_flags:near ; CODE	XREF: _idea_init_key+33p
					; _idea_init_key+46p
		extrn _idea_ecb_encrypt:near ; CODE XREF: _idea_ecb_cipher+2Ep
		extrn _idea_set_encrypt_key:near ; CODE	XREF: _idea_init_key+5Ep
					; _idea_init_key+88p
		extrn _idea_set_decrypt_key:near ; CODE	XREF: _idea_init_key+6Bp
		extrn _idea_cbc_encrypt:near ; CODE XREF: _idea_cbc_cipher+36p
					; _idea_cbc_cipher+6Bp
		extrn _idea_cfb64_encrypt:near ; CODE XREF: _idea_cfb64_cipher+38p
		extrn _idea_ofb64_encrypt:near ; CODE XREF: _idea_ofb_cipher+3Cp
					; _idea_ofb_cipher+75p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _idea_init_key+A0p
		extrn __chkstk:near	; CODE XREF: _idea_init_key+5p
		extrn ___security_cookie:near ;	DATA XREF: _idea_init_key+Ar


		end
