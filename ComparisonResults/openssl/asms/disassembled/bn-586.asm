;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	DD302776122C6FA80FE01E8B74437DAB
; Input	CRC32 :	679FF182

; File Name   :	C:\compspace\Diff\openssl\obj\bn-586.obj
; Format      :	COFF (X386MAGIC)

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
; Segment alignment '64byte' can not be represented in assembly
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public L$_bn_mul_add_words_begin
L$_bn_mul_add_words_begin proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		lea	eax, _OPENSSL_ia32cap_P
		bt	dword ptr [eax], 1Ah
		jnb	L$000maw_non_sse2
		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_8]
		movd	mm0, [esp+arg_C]
		pxor	mm1, mm1
		jmp	L$001maw_sse2_entry
; ---------------------------------------------------------------------------
		align 10h

L$002maw_sse2_unrolled:			; CODE XREF: L$_bn_mul_add_words_begin+10Aj
		movd	mm3, dword ptr [eax]
		paddq	mm1, mm3
		movd	mm2, dword ptr [edx]
		pmuludq	mm2, mm0
		movd	mm4, dword ptr [edx+4]
		pmuludq	mm4, mm0
		movd	mm6, dword ptr [edx+8]
		pmuludq	mm6, mm0
		movd	mm7, dword ptr [edx+0Ch]
		pmuludq	mm7, mm0
		paddq	mm1, mm2
		movd	mm3, dword ptr [eax+4]
		paddq	mm3, mm4
		movd	mm5, dword ptr [eax+8]
		paddq	mm5, mm6
		movd	mm4, dword ptr [eax+0Ch]
		paddq	mm7, mm4
		movd	dword ptr [eax], mm1
		movd	mm2, dword ptr [edx+10h]
		pmuludq	mm2, mm0
		psrlq	mm1, 20h ; ' '
		movd	mm4, dword ptr [edx+14h]
		pmuludq	mm4, mm0
		paddq	mm1, mm3
		movd	mm6, dword ptr [edx+18h]
		pmuludq	mm6, mm0
		movd	dword ptr [eax+4], mm1
		psrlq	mm1, 20h ; ' '
		movd	mm3, dword ptr [edx+1Ch]
		add	edx, 20h ; ' '
		pmuludq	mm3, mm0
		paddq	mm1, mm5
		movd	mm5, dword ptr [eax+10h]
		paddq	mm2, mm5
		movd	dword ptr [eax+8], mm1
		psrlq	mm1, 20h ; ' '
		paddq	mm1, mm7
		movd	mm5, dword ptr [eax+14h]
		paddq	mm4, mm5
		movd	dword ptr [eax+0Ch], mm1
		psrlq	mm1, 20h ; ' '
		paddq	mm1, mm2
		movd	mm5, dword ptr [eax+18h]
		paddq	mm6, mm5
		movd	dword ptr [eax+10h], mm1
		psrlq	mm1, 20h ; ' '
		paddq	mm1, mm4
		movd	mm5, dword ptr [eax+1Ch]
		paddq	mm3, mm5
		movd	dword ptr [eax+14h], mm1
		psrlq	mm1, 20h ; ' '
		paddq	mm1, mm6
		movd	dword ptr [eax+18h], mm1
		psrlq	mm1, 20h ; ' '
		paddq	mm1, mm3
		movd	dword ptr [eax+1Ch], mm1
		lea	eax, [eax+20h]
		psrlq	mm1, 20h ; ' '
		sub	ecx, 8
		jz	L$003maw_sse2_exit

L$001maw_sse2_entry:			; CODE XREF: L$_bn_mul_add_words_begin+24j
		test	ecx, 0FFFFFFF8h
		jnz	L$002maw_sse2_unrolled

L$004maw_sse2_loop:			; CODE XREF: L$_bn_mul_add_words_begin+12Fj
		movd	mm2, dword ptr [edx]
		movd	mm3, dword ptr [eax]
		pmuludq	mm2, mm0
		lea	edx, [edx+4]
		paddq	mm1, mm3
		paddq	mm1, mm2
		movd	dword ptr [eax], mm1
		sub	ecx, 1
		psrlq	mm1, 20h ; ' '
		lea	eax, [eax+4]
		jnz	L$004maw_sse2_loop

L$003maw_sse2_exit:			; CODE XREF: L$_bn_mul_add_words_begin+FEj
		movd	eax, mm1
		emms
		retn
; ---------------------------------------------------------------------------
		align 10h

L$000maw_non_sse2:			; CODE XREF: L$_bn_mul_add_words_begin+Aj
		push	ebp
		push	ebx
		push	esi
		push	edi
		xor	esi, esi
		mov	edi, [esp+10h+arg_0]
		mov	ecx, [esp+10h+arg_8]
		mov	ebx, [esp+10h+arg_4]
		and	ecx, 0FFFFFFF8h
		mov	ebp, [esp+10h+arg_C]
		push	ecx
		jz	L$005maw_finish

L$006maw_loop:				; CODE XREF: L$_bn_mul_add_words_begin+20Ej
		mov	eax, [ebx]
		mul	ebp
		add	eax, esi
		adc	edx, 0
		add	eax, [edi]
		adc	edx, 0
		mov	[edi], eax
		mov	esi, edx
		mov	eax, [ebx+4]
		mul	ebp
		add	eax, esi
		adc	edx, 0
		add	eax, [edi+4]
		adc	edx, 0
		mov	[edi+4], eax
		mov	esi, edx
		mov	eax, [ebx+8]
		mul	ebp
		add	eax, esi
		adc	edx, 0
		add	eax, [edi+8]
		adc	edx, 0
		mov	[edi+8], eax
		mov	esi, edx
		mov	eax, [ebx+0Ch]
		mul	ebp
		add	eax, esi
		adc	edx, 0
		add	eax, [edi+0Ch]
		adc	edx, 0
		mov	[edi+0Ch], eax
		mov	esi, edx
		mov	eax, [ebx+10h]
		mul	ebp
		add	eax, esi
		adc	edx, 0
		add	eax, [edi+10h]
		adc	edx, 0
		mov	[edi+10h], eax
		mov	esi, edx
		mov	eax, [ebx+14h]
		mul	ebp
		add	eax, esi
		adc	edx, 0
		add	eax, [edi+14h]
		adc	edx, 0
		mov	[edi+14h], eax
		mov	esi, edx
		mov	eax, [ebx+18h]
		mul	ebp
		add	eax, esi
		adc	edx, 0
		add	eax, [edi+18h]
		adc	edx, 0
		mov	[edi+18h], eax
		mov	esi, edx
		mov	eax, [ebx+1Ch]
		mul	ebp
		add	eax, esi
		adc	edx, 0
		add	eax, [edi+1Ch]
		adc	edx, 0
		mov	[edi+1Ch], eax
		mov	esi, edx
		sub	ecx, 8
		lea	ebx, [ebx+20h]
		lea	edi, [edi+20h]
		jnz	L$006maw_loop

L$005maw_finish:			; CODE XREF: L$_bn_mul_add_words_begin+15Aj
		mov	ecx, [esp+14h+arg_8]
		and	ecx, 7
		jnz	L$007maw_finish2
		jmp	L$008maw_end
; ---------------------------------------------------------------------------

L$007maw_finish2:			; CODE XREF: L$_bn_mul_add_words_begin+21Bj
		mov	eax, [ebx]
		mul	ebp
		add	eax, esi
		adc	edx, 0
		add	eax, [edi]
		adc	edx, 0
		dec	ecx
		mov	[edi], eax
		mov	esi, edx
		jz	L$008maw_end
		mov	eax, [ebx+4]
		mul	ebp
		add	eax, esi
		adc	edx, 0
		add	eax, [edi+4]
		adc	edx, 0
		dec	ecx
		mov	[edi+4], eax
		mov	esi, edx
		jz	L$008maw_end
		mov	eax, [ebx+8]
		mul	ebp
		add	eax, esi
		adc	edx, 0
		add	eax, [edi+8]
		adc	edx, 0
		dec	ecx
		mov	[edi+8], eax
		mov	esi, edx
		jz	L$008maw_end
		mov	eax, [ebx+0Ch]
		mul	ebp
		add	eax, esi
		adc	edx, 0
		add	eax, [edi+0Ch]
		adc	edx, 0
		dec	ecx
		mov	[edi+0Ch], eax
		mov	esi, edx
		jz	L$008maw_end
		mov	eax, [ebx+10h]
		mul	ebp
		add	eax, esi
		adc	edx, 0
		add	eax, [edi+10h]
		adc	edx, 0
		dec	ecx
		mov	[edi+10h], eax
		mov	esi, edx
		jz	L$008maw_end
		mov	eax, [ebx+14h]
		mul	ebp
		add	eax, esi
		adc	edx, 0
		add	eax, [edi+14h]
		adc	edx, 0
		dec	ecx
		mov	[edi+14h], eax
		mov	esi, edx
		jz	L$008maw_end
		mov	eax, [ebx+18h]
		mul	ebp
		add	eax, esi
		adc	edx, 0
		add	eax, [edi+18h]
		adc	edx, 0
		mov	[edi+18h], eax
		mov	esi, edx

L$008maw_end:				; CODE XREF: L$_bn_mul_add_words_begin+221j
					; L$_bn_mul_add_words_begin+239j ...
		mov	eax, esi
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_bn_mul_add_words_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_bn_mul_words_begin
L$_bn_mul_words_begin proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		lea	eax, _OPENSSL_ia32cap_P
		bt	dword ptr [eax], 1Ah
		jnb	L$009mw_non_sse2
		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_8]
		movd	mm0, [esp+arg_C]
		pxor	mm1, mm1
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop

L$010mw_sse2_loop:			; CODE XREF: L$_bn_mul_words_begin+49j
		movd	mm2, dword ptr [edx]
		pmuludq	mm2, mm0
		lea	edx, [edx+4]
		paddq	mm1, mm2
		movd	dword ptr [eax], mm1
		sub	ecx, 1
		psrlq	mm1, 20h ; ' '
		lea	eax, [eax+4]
		jnz	L$010mw_sse2_loop
		movd	eax, mm1
		emms
		retn
; ---------------------------------------------------------------------------
		align 10h

L$009mw_non_sse2:			; CODE XREF: L$_bn_mul_words_begin+Aj
		push	ebp
		push	ebx
		push	esi
		push	edi
		xor	esi, esi
		mov	edi, [esp+10h+arg_0]
		mov	ebx, [esp+10h+arg_4]
		mov	ebp, [esp+10h+arg_8]
		mov	ecx, [esp+10h+arg_C]
		and	ebp, 0FFFFFFF8h
		jz	L$011mw_finish

L$012mw_loop:				; CODE XREF: L$_bn_mul_words_begin+104j
		mov	eax, [ebx]
		mul	ecx
		add	eax, esi
		adc	edx, 0
		mov	[edi], eax
		mov	esi, edx
		mov	eax, [ebx+4]
		mul	ecx
		add	eax, esi
		adc	edx, 0
		mov	[edi+4], eax
		mov	esi, edx
		mov	eax, [ebx+8]
		mul	ecx
		add	eax, esi
		adc	edx, 0
		mov	[edi+8], eax
		mov	esi, edx
		mov	eax, [ebx+0Ch]
		mul	ecx
		add	eax, esi
		adc	edx, 0
		mov	[edi+0Ch], eax
		mov	esi, edx
		mov	eax, [ebx+10h]
		mul	ecx
		add	eax, esi
		adc	edx, 0
		mov	[edi+10h], eax
		mov	esi, edx
		mov	eax, [ebx+14h]
		mul	ecx
		add	eax, esi
		adc	edx, 0
		mov	[edi+14h], eax
		mov	esi, edx
		mov	eax, [ebx+18h]
		mul	ecx
		add	eax, esi
		adc	edx, 0
		mov	[edi+18h], eax
		mov	esi, edx
		mov	eax, [ebx+1Ch]
		mul	ecx
		add	eax, esi
		adc	edx, 0
		mov	[edi+1Ch], eax
		mov	esi, edx
		add	ebx, 20h ; ' '
		add	edi, 20h ; ' '
		sub	ebp, 8
		jz	L$011mw_finish
		jmp	L$012mw_loop
; ---------------------------------------------------------------------------

L$011mw_finish:				; CODE XREF: L$_bn_mul_words_begin+79j
					; L$_bn_mul_words_begin+FEj
		mov	ebp, [esp+10h+arg_8]
		and	ebp, 7
		jnz	L$013mw_finish2
		jmp	L$014mw_end
; ---------------------------------------------------------------------------

L$013mw_finish2:			; CODE XREF: L$_bn_mul_words_begin+110j
		mov	eax, [ebx]
		mul	ecx
		add	eax, esi
		adc	edx, 0
		mov	[edi], eax
		mov	esi, edx
		dec	ebp
		jz	L$014mw_end
		mov	eax, [ebx+4]
		mul	ecx
		add	eax, esi
		adc	edx, 0
		mov	[edi+4], eax
		mov	esi, edx
		dec	ebp
		jz	L$014mw_end
		mov	eax, [ebx+8]
		mul	ecx
		add	eax, esi
		adc	edx, 0
		mov	[edi+8], eax
		mov	esi, edx
		dec	ebp
		jz	L$014mw_end
		mov	eax, [ebx+0Ch]
		mul	ecx
		add	eax, esi
		adc	edx, 0
		mov	[edi+0Ch], eax
		mov	esi, edx
		dec	ebp
		jz	L$014mw_end
		mov	eax, [ebx+10h]
		mul	ecx
		add	eax, esi
		adc	edx, 0
		mov	[edi+10h], eax
		mov	esi, edx
		dec	ebp
		jz	L$014mw_end
		mov	eax, [ebx+14h]
		mul	ecx
		add	eax, esi
		adc	edx, 0
		mov	[edi+14h], eax
		mov	esi, edx
		dec	ebp
		jz	L$014mw_end
		mov	eax, [ebx+18h]
		mul	ecx
		add	eax, esi
		adc	edx, 0
		mov	[edi+18h], eax
		mov	esi, edx

L$014mw_end:				; CODE XREF: L$_bn_mul_words_begin+116j
					; L$_bn_mul_words_begin+129j ...
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_bn_mul_words_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_bn_sqr_words_begin
L$_bn_sqr_words_begin proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		lea	eax, _OPENSSL_ia32cap_P
		bt	dword ptr [eax], 1Ah
		jnb	L$015sqr_non_sse2
		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_8]
		nop
		nop
		nop
		nop

L$016sqr_sse2_loop:			; CODE XREF: L$_bn_sqr_words_begin+32j
		movd	mm0, dword ptr [edx]
		pmuludq	mm0, mm0
		lea	edx, [edx+4]
		movq	qword ptr [eax], mm0
		sub	ecx, 1
		lea	eax, [eax+8]
		jnz	L$016sqr_sse2_loop
		emms
		retn
; ---------------------------------------------------------------------------
		align 10h

L$015sqr_non_sse2:			; CODE XREF: L$_bn_sqr_words_begin+Aj
		push	ebp
		push	ebx
		push	esi
		push	edi
		mov	esi, [esp+10h+arg_0]
		mov	edi, [esp+10h+arg_4]
		mov	ebx, [esp+10h+arg_8]
		and	ebx, 0FFFFFFF8h
		jz	L$017sw_finish

L$018sw_loop:				; CODE XREF: L$_bn_sqr_words_begin+B8j
		mov	eax, [edi]
		mul	eax
		mov	[esi], eax
		mov	[esi+4], edx
		mov	eax, [edi+4]
		mul	eax
		mov	[esi+8], eax
		mov	[esi+0Ch], edx
		mov	eax, [edi+8]
		mul	eax
		mov	[esi+10h], eax
		mov	[esi+14h], edx
		mov	eax, [edi+0Ch]
		mul	eax
		mov	[esi+18h], eax
		mov	[esi+1Ch], edx
		mov	eax, [edi+10h]
		mul	eax
		mov	[esi+20h], eax
		mov	[esi+24h], edx
		mov	eax, [edi+14h]
		mul	eax
		mov	[esi+28h], eax
		mov	[esi+2Ch], edx
		mov	eax, [edi+18h]
		mul	eax
		mov	[esi+30h], eax
		mov	[esi+34h], edx
		mov	eax, [edi+1Ch]
		mul	eax
		mov	[esi+38h], eax
		mov	[esi+3Ch], edx
		add	edi, 20h ; ' '
		add	esi, 40h ; '@'
		sub	ebx, 8
		jnz	L$018sw_loop

L$017sw_finish:				; CODE XREF: L$_bn_sqr_words_begin+53j
		mov	ebx, [esp+10h+arg_8]
		and	ebx, 7
		jz	L$019sw_end
		mov	eax, [edi]
		mul	eax
		mov	[esi], eax
		dec	ebx
		mov	[esi+4], edx
		jz	L$019sw_end
		mov	eax, [edi+4]
		mul	eax
		mov	[esi+8], eax
		dec	ebx
		mov	[esi+0Ch], edx
		jz	L$019sw_end
		mov	eax, [edi+8]
		mul	eax
		mov	[esi+10h], eax
		dec	ebx
		mov	[esi+14h], edx
		jz	L$019sw_end
		mov	eax, [edi+0Ch]
		mul	eax
		mov	[esi+18h], eax
		dec	ebx
		mov	[esi+1Ch], edx
		jz	L$019sw_end
		mov	eax, [edi+10h]
		mul	eax
		mov	[esi+20h], eax
		dec	ebx
		mov	[esi+24h], edx
		jz	L$019sw_end
		mov	eax, [edi+14h]
		mul	eax
		mov	[esi+28h], eax
		dec	ebx
		mov	[esi+2Ch], edx
		jz	L$019sw_end
		mov	eax, [edi+18h]
		mul	eax
		mov	[esi+30h], eax
		mov	[esi+34h], edx

L$019sw_end:				; CODE XREF: L$_bn_sqr_words_begin+C5j
					; L$_bn_sqr_words_begin+D5j ...
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_bn_sqr_words_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_bn_div_words_begin
L$_bn_div_words_begin proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		mov	ecx, [esp+arg_8]
		div	ecx
		retn
L$_bn_div_words_begin endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public L$_bn_add_words_begin
L$_bn_add_words_begin proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	ebx
		push	esi
		push	edi
		mov	ebx, [esp+10h+arg_0]
		mov	esi, [esp+10h+arg_4]
		mov	edi, [esp+10h+arg_8]
		mov	ebp, [esp+10h+arg_C]
		xor	eax, eax
		and	ebp, 0FFFFFFF8h
		jz	L$020aw_finish

L$021aw_loop:				; CODE XREF: L$_bn_add_words_begin+E0j
		mov	ecx, [esi]
		mov	edx, [edi]
		add	ecx, eax
		mov	eax, 0
		adc	eax, eax
		add	ecx, edx
		adc	eax, 0
		mov	[ebx], ecx
		mov	ecx, [esi+4]
		mov	edx, [edi+4]
		add	ecx, eax
		mov	eax, 0
		adc	eax, eax
		add	ecx, edx
		adc	eax, 0
		mov	[ebx+4], ecx
		mov	ecx, [esi+8]
		mov	edx, [edi+8]
		add	ecx, eax
		mov	eax, 0
		adc	eax, eax
		add	ecx, edx
		adc	eax, 0
		mov	[ebx+8], ecx
		mov	ecx, [esi+0Ch]
		mov	edx, [edi+0Ch]
		add	ecx, eax
		mov	eax, 0
		adc	eax, eax
		add	ecx, edx
		adc	eax, 0
		mov	[ebx+0Ch], ecx
		mov	ecx, [esi+10h]
		mov	edx, [edi+10h]
		add	ecx, eax
		mov	eax, 0
		adc	eax, eax
		add	ecx, edx
		adc	eax, 0
		mov	[ebx+10h], ecx
		mov	ecx, [esi+14h]
		mov	edx, [edi+14h]
		add	ecx, eax
		mov	eax, 0
		adc	eax, eax
		add	ecx, edx
		adc	eax, 0
		mov	[ebx+14h], ecx
		mov	ecx, [esi+18h]
		mov	edx, [edi+18h]
		add	ecx, eax
		mov	eax, 0
		adc	eax, eax
		add	ecx, edx
		adc	eax, 0
		mov	[ebx+18h], ecx
		mov	ecx, [esi+1Ch]
		mov	edx, [edi+1Ch]
		add	ecx, eax
		mov	eax, 0
		adc	eax, eax
		add	ecx, edx
		adc	eax, 0
		mov	[ebx+1Ch], ecx
		add	esi, 20h ; ' '
		add	edi, 20h ; ' '
		add	ebx, 20h ; ' '
		sub	ebp, 8
		jnz	L$021aw_loop

L$020aw_finish:				; CODE XREF: L$_bn_add_words_begin+19j
		mov	ebp, [esp+10h+arg_C]
		and	ebp, 7
		jz	L$022aw_end
		mov	ecx, [esi]
		mov	edx, [edi]
		add	ecx, eax
		mov	eax, 0
		adc	eax, eax
		add	ecx, edx
		adc	eax, 0
		dec	ebp
		mov	[ebx], ecx
		jz	L$022aw_end
		mov	ecx, [esi+4]
		mov	edx, [edi+4]
		add	ecx, eax
		mov	eax, 0
		adc	eax, eax
		add	ecx, edx
		adc	eax, 0
		dec	ebp
		mov	[ebx+4], ecx
		jz	L$022aw_end
		mov	ecx, [esi+8]
		mov	edx, [edi+8]
		add	ecx, eax
		mov	eax, 0
		adc	eax, eax
		add	ecx, edx
		adc	eax, 0
		dec	ebp
		mov	[ebx+8], ecx
		jz	L$022aw_end
		mov	ecx, [esi+0Ch]
		mov	edx, [edi+0Ch]
		add	ecx, eax
		mov	eax, 0
		adc	eax, eax
		add	ecx, edx
		adc	eax, 0
		dec	ebp
		mov	[ebx+0Ch], ecx
		jz	L$022aw_end
		mov	ecx, [esi+10h]
		mov	edx, [edi+10h]
		add	ecx, eax
		mov	eax, 0
		adc	eax, eax
		add	ecx, edx
		adc	eax, 0
		dec	ebp
		mov	[ebx+10h], ecx
		jz	L$022aw_end
		mov	ecx, [esi+14h]
		mov	edx, [edi+14h]
		add	ecx, eax
		mov	eax, 0
		adc	eax, eax
		add	ecx, edx
		adc	eax, 0
		dec	ebp
		mov	[ebx+14h], ecx
		jz	L$022aw_end
		mov	ecx, [esi+18h]
		mov	edx, [edi+18h]
		add	ecx, eax
		mov	eax, 0
		adc	eax, eax
		add	ecx, edx
		adc	eax, 0
		mov	[ebx+18h], ecx

L$022aw_end:				; CODE XREF: L$_bn_add_words_begin+EDj
					; L$_bn_add_words_begin+108j ...
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_bn_add_words_begin endp


; =============== S U B	R O U T	I N E =======================================


		public L$_bn_sub_words_begin
L$_bn_sub_words_begin proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	ebx
		push	esi
		push	edi
		mov	ebx, [esp+10h+arg_0]
		mov	esi, [esp+10h+arg_4]
		mov	edi, [esp+10h+arg_8]
		mov	ebp, [esp+10h+arg_C]
		xor	eax, eax
		and	ebp, 0FFFFFFF8h
		jz	L$023aw_finish

L$024aw_loop:				; CODE XREF: L$_bn_sub_words_begin+E0j
		mov	ecx, [esi]
		mov	edx, [edi]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx], ecx
		mov	ecx, [esi+4]
		mov	edx, [edi+4]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+4], ecx
		mov	ecx, [esi+8]
		mov	edx, [edi+8]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+8], ecx
		mov	ecx, [esi+0Ch]
		mov	edx, [edi+0Ch]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+0Ch], ecx
		mov	ecx, [esi+10h]
		mov	edx, [edi+10h]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+10h], ecx
		mov	ecx, [esi+14h]
		mov	edx, [edi+14h]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+14h], ecx
		mov	ecx, [esi+18h]
		mov	edx, [edi+18h]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+18h], ecx
		mov	ecx, [esi+1Ch]
		mov	edx, [edi+1Ch]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+1Ch], ecx
		add	esi, 20h ; ' '
		add	edi, 20h ; ' '
		add	ebx, 20h ; ' '
		sub	ebp, 8
		jnz	L$024aw_loop

L$023aw_finish:				; CODE XREF: L$_bn_sub_words_begin+19j
		mov	ebp, [esp+10h+arg_C]
		and	ebp, 7
		jz	L$025aw_end
		mov	ecx, [esi]
		mov	edx, [edi]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		dec	ebp
		mov	[ebx], ecx
		jz	L$025aw_end
		mov	ecx, [esi+4]
		mov	edx, [edi+4]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		dec	ebp
		mov	[ebx+4], ecx
		jz	L$025aw_end
		mov	ecx, [esi+8]
		mov	edx, [edi+8]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		dec	ebp
		mov	[ebx+8], ecx
		jz	L$025aw_end
		mov	ecx, [esi+0Ch]
		mov	edx, [edi+0Ch]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		dec	ebp
		mov	[ebx+0Ch], ecx
		jz	L$025aw_end
		mov	ecx, [esi+10h]
		mov	edx, [edi+10h]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		dec	ebp
		mov	[ebx+10h], ecx
		jz	L$025aw_end
		mov	ecx, [esi+14h]
		mov	edx, [edi+14h]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		dec	ebp
		mov	[ebx+14h], ecx
		jz	L$025aw_end
		mov	ecx, [esi+18h]
		mov	edx, [edi+18h]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+18h], ecx

L$025aw_end:				; CODE XREF: L$_bn_sub_words_begin+EDj
					; L$_bn_sub_words_begin+108j ...
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_bn_sub_words_begin endp


; =============== S U B	R O U T	I N E =======================================


		public L$_bn_sub_part_words_begin
L$_bn_sub_part_words_begin proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	ebx
		push	esi
		push	edi
		mov	ebx, [esp+10h+arg_0]
		mov	esi, [esp+10h+arg_4]
		mov	edi, [esp+10h+arg_8]
		mov	ebp, [esp+10h+arg_C]
		xor	eax, eax
		and	ebp, 0FFFFFFF8h
		jz	L$026aw_finish

L$027aw_loop:				; CODE XREF: L$_bn_sub_part_words_begin+E0j
		mov	ecx, [esi]
		mov	edx, [edi]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx], ecx
		mov	ecx, [esi+4]
		mov	edx, [edi+4]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+4], ecx
		mov	ecx, [esi+8]
		mov	edx, [edi+8]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+8], ecx
		mov	ecx, [esi+0Ch]
		mov	edx, [edi+0Ch]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+0Ch], ecx
		mov	ecx, [esi+10h]
		mov	edx, [edi+10h]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+10h], ecx
		mov	ecx, [esi+14h]
		mov	edx, [edi+14h]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+14h], ecx
		mov	ecx, [esi+18h]
		mov	edx, [edi+18h]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+18h], ecx
		mov	ecx, [esi+1Ch]
		mov	edx, [edi+1Ch]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+1Ch], ecx
		add	esi, 20h ; ' '
		add	edi, 20h ; ' '
		add	ebx, 20h ; ' '
		sub	ebp, 8
		jnz	L$027aw_loop

L$026aw_finish:				; CODE XREF: L$_bn_sub_part_words_begin+19j
		mov	ebp, [esp+10h+arg_C]
		and	ebp, 7
		jz	L$028aw_end
		mov	ecx, [esi]
		mov	edx, [edi]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx], ecx
		add	esi, 4
		add	edi, 4
		add	ebx, 4
		dec	ebp
		jz	L$028aw_end
		mov	ecx, [esi]
		mov	edx, [edi]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx], ecx
		add	esi, 4
		add	edi, 4
		add	ebx, 4
		dec	ebp
		jz	L$028aw_end
		mov	ecx, [esi]
		mov	edx, [edi]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx], ecx
		add	esi, 4
		add	edi, 4
		add	ebx, 4
		dec	ebp
		jz	L$028aw_end
		mov	ecx, [esi]
		mov	edx, [edi]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx], ecx
		add	esi, 4
		add	edi, 4
		add	ebx, 4
		dec	ebp
		jz	L$028aw_end
		mov	ecx, [esi]
		mov	edx, [edi]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx], ecx
		add	esi, 4
		add	edi, 4
		add	ebx, 4
		dec	ebp
		jz	L$028aw_end
		mov	ecx, [esi]
		mov	edx, [edi]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx], ecx
		add	esi, 4
		add	edi, 4
		add	ebx, 4
		dec	ebp
		jz	L$028aw_end
		mov	ecx, [esi]
		mov	edx, [edi]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx], ecx
		add	esi, 4
		add	edi, 4
		add	ebx, 4

L$028aw_end:				; CODE XREF: L$_bn_sub_part_words_begin+EDj
					; L$_bn_sub_part_words_begin+111j ...
		cmp	[esp+10h+arg_10], 0
		jz	L$029pw_end
		mov	ebp, [esp+10h+arg_10]
		cmp	ebp, 0
		jz	L$029pw_end
		jge	L$030pw_pos
		mov	edx, 0
		sub	edx, ebp
		mov	ebp, edx
		and	ebp, 0FFFFFFF8h
		jz	L$031pw_neg_finish

L$032pw_neg_loop:			; CODE XREF: L$_bn_sub_part_words_begin+2E7j
		mov	ecx, 0
		mov	edx, [edi]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx], ecx
		mov	ecx, 0
		mov	edx, [edi+4]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+4], ecx
		mov	ecx, 0
		mov	edx, [edi+8]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+8], ecx
		mov	ecx, 0
		mov	edx, [edi+0Ch]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+0Ch], ecx
		mov	ecx, 0
		mov	edx, [edi+10h]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+10h], ecx
		mov	ecx, 0
		mov	edx, [edi+14h]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+14h], ecx
		mov	ecx, 0
		mov	edx, [edi+18h]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+18h], ecx
		mov	ecx, 0
		mov	edx, [edi+1Ch]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+1Ch], ecx
		add	edi, 20h ; ' '
		add	ebx, 20h ; ' '
		sub	ebp, 8
		jnz	L$032pw_neg_loop

L$031pw_neg_finish:			; CODE XREF: L$_bn_sub_part_words_begin+212j
		mov	edx, [esp+10h+arg_10]
		mov	ebp, 0
		sub	ebp, edx
		and	ebp, 7
		jz	L$029pw_end
		mov	ecx, 0
		mov	edx, [edi]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		dec	ebp
		mov	[ebx], ecx
		jz	L$029pw_end
		mov	ecx, 0
		mov	edx, [edi+4]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		dec	ebp
		mov	[ebx+4], ecx
		jz	L$029pw_end
		mov	ecx, 0
		mov	edx, [edi+8]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		dec	ebp
		mov	[ebx+8], ecx
		jz	L$029pw_end
		mov	ecx, 0
		mov	edx, [edi+0Ch]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		dec	ebp
		mov	[ebx+0Ch], ecx
		jz	L$029pw_end
		mov	ecx, 0
		mov	edx, [edi+10h]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		dec	ebp
		mov	[ebx+10h], ecx
		jz	L$029pw_end
		mov	ecx, 0
		mov	edx, [edi+14h]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		dec	ebp
		mov	[ebx+14h], ecx
		jz	L$029pw_end
		mov	ecx, 0
		mov	edx, [edi+18h]
		sub	ecx, eax
		mov	eax, 0
		adc	eax, eax
		sub	ecx, edx
		adc	eax, 0
		mov	[ebx+18h], ecx
		jmp	L$029pw_end
; ---------------------------------------------------------------------------

L$030pw_pos:				; CODE XREF: L$_bn_sub_part_words_begin+200j
		and	ebp, 0FFFFFFF8h
		jz	L$033pw_pos_finish

L$034pw_pos_loop:			; CODE XREF: L$_bn_sub_part_words_begin+45Dj
		mov	ecx, [esi]
		sub	ecx, eax
		mov	[ebx], ecx
		jnb	L$035pw_nc0
		mov	ecx, [esi+4]
		sub	ecx, eax
		mov	[ebx+4], ecx
		jnb	L$036pw_nc1
		mov	ecx, [esi+8]
		sub	ecx, eax
		mov	[ebx+8], ecx
		jnb	L$037pw_nc2
		mov	ecx, [esi+0Ch]
		sub	ecx, eax
		mov	[ebx+0Ch], ecx
		jnb	L$038pw_nc3
		mov	ecx, [esi+10h]
		sub	ecx, eax
		mov	[ebx+10h], ecx
		jnb	L$039pw_nc4
		mov	ecx, [esi+14h]
		sub	ecx, eax
		mov	[ebx+14h], ecx
		jnb	L$040pw_nc5
		mov	ecx, [esi+18h]
		sub	ecx, eax
		mov	[ebx+18h], ecx
		jnb	L$041pw_nc6
		mov	ecx, [esi+1Ch]
		sub	ecx, eax
		mov	[ebx+1Ch], ecx
		jnb	L$042pw_nc7
		add	esi, 20h ; ' '
		add	ebx, 20h ; ' '
		sub	ebp, 8
		jnz	L$034pw_pos_loop

L$033pw_pos_finish:			; CODE XREF: L$_bn_sub_part_words_begin+3E0j
		mov	ebp, [esp+10h+arg_10]
		and	ebp, 7
		jz	L$029pw_end
		mov	ecx, [esi]
		sub	ecx, eax
		mov	[ebx], ecx
		jnb	L$043pw_tail_nc0
		dec	ebp
		jz	L$029pw_end
		mov	ecx, [esi+4]
		sub	ecx, eax
		mov	[ebx+4], ecx
		jnb	L$044pw_tail_nc1
		dec	ebp
		jz	L$029pw_end
		mov	ecx, [esi+8]
		sub	ecx, eax
		mov	[ebx+8], ecx
		jnb	L$045pw_tail_nc2
		dec	ebp
		jz	L$029pw_end
		mov	ecx, [esi+0Ch]
		sub	ecx, eax
		mov	[ebx+0Ch], ecx
		jnb	L$046pw_tail_nc3
		dec	ebp
		jz	L$029pw_end
		mov	ecx, [esi+10h]
		sub	ecx, eax
		mov	[ebx+10h], ecx
		jnb	L$047pw_tail_nc4
		dec	ebp
		jz	L$029pw_end
		mov	ecx, [esi+14h]
		sub	ecx, eax
		mov	[ebx+14h], ecx
		jnb	L$048pw_tail_nc5
		dec	ebp
		jz	L$029pw_end
		mov	ecx, [esi+18h]
		sub	ecx, eax
		mov	[ebx+18h], ecx
		jnb	L$051pw_nc_end
		mov	eax, 1
		jmp	L$029pw_end
; ---------------------------------------------------------------------------

L$050pw_nc_loop:			; CODE XREF: L$_bn_sub_part_words_begin+53Bj
		mov	ecx, [esi]
		mov	[ebx], ecx

L$035pw_nc0:				; CODE XREF: L$_bn_sub_part_words_begin+3ECj
		mov	ecx, [esi+4]
		mov	[ebx+4], ecx

L$036pw_nc1:				; CODE XREF: L$_bn_sub_part_words_begin+3FAj
		mov	ecx, [esi+8]
		mov	[ebx+8], ecx

L$037pw_nc2:				; CODE XREF: L$_bn_sub_part_words_begin+408j
		mov	ecx, [esi+0Ch]
		mov	[ebx+0Ch], ecx

L$038pw_nc3:				; CODE XREF: L$_bn_sub_part_words_begin+416j
		mov	ecx, [esi+10h]
		mov	[ebx+10h], ecx

L$039pw_nc4:				; CODE XREF: L$_bn_sub_part_words_begin+424j
		mov	ecx, [esi+14h]
		mov	[ebx+14h], ecx

L$040pw_nc5:				; CODE XREF: L$_bn_sub_part_words_begin+432j
		mov	ecx, [esi+18h]
		mov	[ebx+18h], ecx

L$041pw_nc6:				; CODE XREF: L$_bn_sub_part_words_begin+440j
		mov	ecx, [esi+1Ch]
		mov	[ebx+1Ch], ecx

L$042pw_nc7:				; CODE XREF: L$_bn_sub_part_words_begin+44Ej
		add	esi, 20h ; ' '
		add	ebx, 20h ; ' '
		sub	ebp, 8
		jnz	L$050pw_nc_loop
		mov	ebp, [esp+10h+arg_10]
		and	ebp, 7
		jz	L$051pw_nc_end
		mov	ecx, [esi]
		mov	[ebx], ecx

L$043pw_tail_nc0:			; CODE XREF: L$_bn_sub_part_words_begin+476j
		dec	ebp
		jz	L$051pw_nc_end
		mov	ecx, [esi+4]
		mov	[ebx+4], ecx

L$044pw_tail_nc1:			; CODE XREF: L$_bn_sub_part_words_begin+48Bj
		dec	ebp
		jz	L$051pw_nc_end
		mov	ecx, [esi+8]
		mov	[ebx+8], ecx

L$045pw_tail_nc2:			; CODE XREF: L$_bn_sub_part_words_begin+4A0j
		dec	ebp
		jz	L$051pw_nc_end
		mov	ecx, [esi+0Ch]
		mov	[ebx+0Ch], ecx

L$046pw_tail_nc3:			; CODE XREF: L$_bn_sub_part_words_begin+4B5j
		dec	ebp
		jz	L$051pw_nc_end
		mov	ecx, [esi+10h]
		mov	[ebx+10h], ecx

L$047pw_tail_nc4:			; CODE XREF: L$_bn_sub_part_words_begin+4CAj
		dec	ebp
		jz	L$051pw_nc_end
		mov	ecx, [esi+14h]
		mov	[ebx+14h], ecx

L$048pw_tail_nc5:			; CODE XREF: L$_bn_sub_part_words_begin+4DFj
		dec	ebp
		jz	L$051pw_nc_end
		mov	ecx, [esi+18h]
		mov	[ebx+18h], ecx

L$051pw_nc_end:				; CODE XREF: L$_bn_sub_part_words_begin+4F4j
					; L$_bn_sub_part_words_begin+548j ...
		mov	eax, 0

L$029pw_end:				; CODE XREF: L$_bn_sub_part_words_begin+1EDj
					; L$_bn_sub_part_words_begin+1FAj ...
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
L$_bn_sub_part_words_begin endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
_bss		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _OPENSSL_ia32cap_P:near ;	DATA XREF: L$_bn_mul_add_words_begino
					; L$_bn_mul_words_begino ...


		end
