;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	EB50F68B6488BE95927F022CDAB49556
; Input	CRC32 :	8974EF63

; File Name   :	C:\compspace\Diff\openssl\obj\pem_pk8.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_PKCS8
_PEM_read_PKCS8	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0BG@OLFPLKDJ@ENCRYPTED?5PRIVATE?5KEY?$AA@ ; "ENCRYPTED PRIVATE KEY"
		push	offset _d2i_X509_SIG
		call	_PEM_ASN1_read
		add	esp, 18h
		retn
_PEM_read_PKCS8	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 24h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_PKCS8_PRIV_KEY_INFO
_PEM_read_PKCS8_PRIV_KEY_INFO proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@ ; "PRIVATE KEY"
		push	offset _d2i_PKCS8_PRIV_KEY_INFO
		call	_PEM_ASN1_read
		add	esp, 18h
		retn
_PEM_read_PKCS8_PRIV_KEY_INFO endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 48h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio_PKCS8
_PEM_read_bio_PKCS8 proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0BG@OLFPLKDJ@ENCRYPTED?5PRIVATE?5KEY?$AA@ ; "ENCRYPTED PRIVATE KEY"
		push	offset _d2i_X509_SIG
		call	_PEM_ASN1_read_bio
		add	esp, 18h
		retn
_PEM_read_bio_PKCS8 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio_PKCS8_PRIV_KEY_INFO
_PEM_read_bio_PKCS8_PRIV_KEY_INFO proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	offset ??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@ ; "PRIVATE KEY"
		push	offset _d2i_PKCS8_PRIV_KEY_INFO
		call	_PEM_ASN1_read_bio
		add	esp, 18h
		retn
_PEM_read_bio_PKCS8_PRIV_KEY_INFO endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 90h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_PKCS8
_PEM_write_PKCS8 proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0BG@OLFPLKDJ@ENCRYPTED?5PRIVATE?5KEY?$AA@ ; "ENCRYPTED PRIVATE KEY"
		push	offset _i2d_X509_SIG
		call	_PEM_ASN1_write
		add	esp, 24h
		retn
_PEM_write_PKCS8 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_PKCS8PrivateKey
_PEM_write_PKCS8PrivateKey proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	edi
		push	0
		push	[esp+8+arg_0]
		call	_BIO_new_fp
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_E9
		push	0E7h ; 'ç'
		push	offset ??_C@_0BH@BCEPEGOE@?4?2crypto?2pem?2pem_pk8?4c?$AA@ ; ".\\crypto\\pem\\pem_pk8.c"
		push	7
		push	7Dh ; '}'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_E9:					; CODE XREF: _PEM_write_PKCS8PrivateKey+13j
		push	esi
		push	[esp+8+arg_18]
		push	[esp+0Ch+arg_14]
		push	[esp+10h+arg_10]
		push	[esp+14h+arg_C]
		push	[esp+18h+arg_8]
		push	0FFFFFFFFh
		push	0
		push	[esp+24h+arg_4]
		push	edi
		call	_do_pk8pkey
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 28h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_PEM_write_PKCS8PrivateKey endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 11Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_PKCS8PrivateKey_nid
_PEM_write_PKCS8PrivateKey_nid proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	edi
		push	0
		push	[esp+8+arg_0]
		call	_BIO_new_fp
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_14D
		push	0E7h ; 'ç'
		push	offset ??_C@_0BH@BCEPEGOE@?4?2crypto?2pem?2pem_pk8?4c?$AA@ ; ".\\crypto\\pem\\pem_pk8.c"
		push	7
		push	7Dh ; '}'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_14D:				; CODE XREF: _PEM_write_PKCS8PrivateKey_nid+13j
		push	esi
		push	[esp+8+arg_18]
		push	[esp+0Ch+arg_14]
		push	[esp+10h+arg_10]
		push	[esp+14h+arg_C]
		push	0
		push	[esp+1Ch+arg_8]
		push	0
		push	[esp+24h+arg_4]
		push	edi
		call	_do_pk8pkey
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 28h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_PEM_write_PKCS8PrivateKey_nid endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 180h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_PKCS8_PRIV_KEY_INFO
_PEM_write_PKCS8_PRIV_KEY_INFO proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@ ; "PRIVATE KEY"
		push	offset _i2d_PKCS8_PRIV_KEY_INFO
		call	_PEM_ASN1_write
		add	esp, 24h
		retn
_PEM_write_PKCS8_PRIV_KEY_INFO endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_PKCS8
_PEM_write_bio_PKCS8 proc near		; CODE XREF: _do_pk8pkey:loc_51Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0BG@OLFPLKDJ@ENCRYPTED?5PRIVATE?5KEY?$AA@ ; "ENCRYPTED PRIVATE KEY"
		push	offset _i2d_X509_SIG
		call	_PEM_ASN1_write_bio
		add	esp, 24h
		retn
_PEM_write_bio_PKCS8 endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_PKCS8PrivateKey
_PEM_write_bio_PKCS8PrivateKey proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	[esp+arg_18]
		push	[esp+4+arg_14]
		push	[esp+8+arg_10]
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_8]
		push	0FFFFFFFFh
		push	0
		push	[esp+1Ch+arg_4]
		push	[esp+20h+arg_0]
		call	_do_pk8pkey
		add	esp, 24h
		retn
_PEM_write_bio_PKCS8PrivateKey endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_PKCS8PrivateKey_nid
_PEM_write_bio_PKCS8PrivateKey_nid proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	[esp+arg_18]
		push	[esp+4+arg_14]
		push	[esp+8+arg_10]
		push	[esp+0Ch+arg_C]
		push	0
		push	[esp+14h+arg_8]
		push	0
		push	[esp+1Ch+arg_4]
		push	[esp+20h+arg_0]
		call	_do_pk8pkey
		add	esp, 24h
		retn
_PEM_write_bio_PKCS8PrivateKey_nid endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 228h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio_PKCS8_PRIV_KEY_INFO
_PEM_write_bio_PKCS8_PRIV_KEY_INFO proc	near ; CODE XREF: _do_pk8pkey:loc_454p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_0]
		push	offset ??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@ ; "PRIVATE KEY"
		push	offset _i2d_PKCS8_PRIV_KEY_INFO
		call	_PEM_ASN1_write_bio
		add	esp, 24h
		retn
_PEM_write_bio_PKCS8_PRIV_KEY_INFO endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 250h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_PKCS8PrivateKey_bio
_d2i_PKCS8PrivateKey_bio proc near	; CODE XREF: _d2i_PKCS8PrivateKey_fp+3Fp

var_404		= byte ptr -404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 404h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+404h+var_4], eax
		mov	eax, [esp+404h+arg_0]
		push	ebx
		mov	ebx, [esp+408h+arg_8]
		push	ebp
		mov	ebp, [esp+40Ch+arg_C]
		push	esi
		push	edi
		mov	edi, [esp+414h+arg_4]
		push	0
		push	eax
		call	_d2i_PKCS8_bio
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_2D8
		lea	eax, [esp+414h+var_404]
		push	ebp
		push	0
		push	400h
		push	eax
		test	ebx, ebx
		jz	short loc_2AE
		call	ebx
		jmp	short loc_2B3
; ---------------------------------------------------------------------------

loc_2AE:				; CODE XREF: _d2i_PKCS8PrivateKey_bio+58j
		call	_PEM_def_callback

loc_2B3:				; CODE XREF: _d2i_PKCS8PrivateKey_bio+5Cj
		add	esp, 10h
		test	eax, eax
		jg	short loc_2DC
		push	0AFh ; '¯'
		push	offset ??_C@_0BH@BCEPEGOE@?4?2crypto?2pem?2pem_pk8?4c?$AA@ ; ".\\crypto\\pem\\pem_pk8.c"
		push	68h ; 'h'
		push	78h ; 'x'
		push	9
		call	_ERR_put_error
		push	esi
		call	_X509_SIG_free
		add	esp, 18h

loc_2D8:				; CODE XREF: _d2i_PKCS8PrivateKey_bio+47j
					; _d2i_PKCS8PrivateKey_bio+A5j	...
		xor	eax, eax
		jmp	short loc_323
; ---------------------------------------------------------------------------

loc_2DC:				; CODE XREF: _d2i_PKCS8PrivateKey_bio+68j
		push	eax
		lea	eax, [esp+418h+var_404]
		push	eax
		push	esi
		call	_PKCS8_decrypt
		push	esi
		mov	ebx, eax
		call	_X509_SIG_free
		add	esp, 10h
		test	ebx, ebx
		jz	short loc_2D8
		push	ebx
		call	_EVP_PKCS82PKEY
		push	ebx
		mov	esi, eax
		call	_PKCS8_PRIV_KEY_INFO_free
		add	esp, 8
		test	esi, esi
		jz	short loc_2D8
		test	edi, edi
		jz	short loc_321
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_31F
		push	eax
		call	_EVP_PKEY_free
		add	esp, 4

loc_31F:				; CODE XREF: _d2i_PKCS8PrivateKey_bio+C4j
		mov	[edi], esi

loc_321:				; CODE XREF: _d2i_PKCS8PrivateKey_bio+BEj
		mov	eax, esi

loc_323:				; CODE XREF: _d2i_PKCS8PrivateKey_bio+8Aj
		mov	ecx, [esp+414h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 404h
		retn
_d2i_PKCS8PrivateKey_bio endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 33Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_PKCS8PrivateKey_fp
_d2i_PKCS8PrivateKey_fp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		push	0
		push	[esp+8+arg_0]
		call	_BIO_new_fp
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_36D
		push	0F5h ; 'õ'
		push	offset ??_C@_0BH@BCEPEGOE@?4?2crypto?2pem?2pem_pk8?4c?$AA@ ; ".\\crypto\\pem\\pem_pk8.c"
		push	7
		push	79h ; 'y'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_36D:				; CODE XREF: _d2i_PKCS8PrivateKey_fp+13j
		push	esi
		push	[esp+8+arg_C]
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		push	edi
		call	_d2i_PKCS8PrivateKey_bio
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 14h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_d2i_PKCS8PrivateKey_fp	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 390h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_do_pk8pkey	proc near		; CODE XREF: _PEM_write_PKCS8PrivateKey+4Fp
					; _PEM_write_PKCS8PrivateKey_nid+4Fp ...

var_418		= dword	ptr -418h
var_414		= dword	ptr -414h
var_410		= dword	ptr -410h
var_40C		= dword	ptr -40Ch
var_408		= dword	ptr -408h
var_404		= byte ptr -404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		mov	eax, 418h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+418h+var_4], eax
		mov	ecx, [esp+418h+arg_C]
		mov	eax, [esp+418h+arg_4]
		push	ebx
		mov	ebx, [esp+41Ch+arg_18]
		push	ebp
		mov	ebp, [esp+420h+arg_0]
		mov	[esp+420h+var_410], ecx
		mov	ecx, [esp+420h+arg_10]
		push	esi
		mov	[esp+424h+var_414], ecx
		mov	ecx, [esp+424h+arg_1C]
		push	edi
		mov	edi, [esp+428h+arg_14]
		mov	[esp+428h+var_408], ecx
		mov	ecx, [esp+428h+arg_20]
		push	eax
		mov	[esp+42Ch+var_40C], edi
		mov	[esp+42Ch+var_418], ecx
		call	_EVP_PKEY2PKCS8
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_423
		push	78h ; 'x'
		push	offset ??_C@_0BH@BCEPEGOE@?4?2crypto?2pem?2pem_pk8?4c?$AA@ ; ".\\crypto\\pem\\pem_pk8.c"
		push	73h ; 's'
		push	7Eh ; '~'
		push	9
		call	_ERR_put_error
		add	esp, 14h

loc_41C:				; CODE XREF: _do_pk8pkey+173j
		xor	eax, eax
		jmp	loc_531
; ---------------------------------------------------------------------------

loc_423:				; CODE XREF: _do_pk8pkey+75j
		mov	eax, [esp+428h+var_414]
		test	eax, eax
		jnz	short loc_46B
		cmp	[esp+428h+var_410], 0FFFFFFFFh
		jnz	short loc_46B
		push	esi
		push	ebp
		cmp	[esp+430h+arg_8], eax
		jz	short loc_454
		call	_i2d_PKCS8_PRIV_KEY_INFO_bio
		add	esp, 8
		mov	edi, eax
		push	esi
		call	_PKCS8_PRIV_KEY_INFO_free
		mov	eax, edi
		jmp	loc_52E
; ---------------------------------------------------------------------------

loc_454:				; CODE XREF: _do_pk8pkey+ABj
		call	_PEM_write_bio_PKCS8_PRIV_KEY_INFO
		add	esp, 8
		mov	edi, eax
		push	esi
		call	_PKCS8_PRIV_KEY_INFO_free
		mov	eax, edi
		jmp	loc_52E
; ---------------------------------------------------------------------------

loc_46B:				; CODE XREF: _do_pk8pkey+99j
					; _do_pk8pkey+A0j
		test	edi, edi
		jnz	short loc_4CC
		push	[esp+428h+var_418]
		mov	eax, [esp+42Ch+var_408]
		push	1
		push	400h
		test	eax, eax
		jnz	short loc_48E
		lea	eax, [esp+434h+var_404]
		push	eax
		call	_PEM_def_callback
		jmp	short loc_495
; ---------------------------------------------------------------------------

loc_48E:				; CODE XREF: _do_pk8pkey+F0j
		lea	ecx, [esp+434h+var_404]
		push	ecx
		call	eax

loc_495:				; CODE XREF: _do_pk8pkey+FCj
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jg	short loc_4C0
		push	82h ; ''
		push	offset ??_C@_0BH@BCEPEGOE@?4?2crypto?2pem?2pem_pk8?4c?$AA@ ; ".\\crypto\\pem\\pem_pk8.c"
		push	6Fh ; 'o'
		push	7Eh ; '~'
		push	9
		call	_ERR_put_error
		push	esi
		call	_PKCS8_PRIV_KEY_INFO_free
		add	esp, 18h
		xor	eax, eax
		jmp	short loc_531
; ---------------------------------------------------------------------------

loc_4C0:				; CODE XREF: _do_pk8pkey+10Cj
		mov	eax, [esp+428h+var_414]
		lea	edi, [esp+428h+var_404]
		mov	[esp+428h+var_40C], edi

loc_4CC:				; CODE XREF: _do_pk8pkey+DDj
		push	esi
		push	0
		push	0
		push	0
		push	ebx
		push	edi
		push	eax
		push	[esp+444h+var_410]
		call	_PKCS8_encrypt
		mov	edi, eax
		add	esp, 20h
		lea	eax, [esp+428h+var_404]
		cmp	[esp+428h+var_40C], eax
		jnz	short loc_4F8
		push	ebx
		push	eax
		call	_OPENSSL_cleanse
		add	esp, 8

loc_4F8:				; CODE XREF: _do_pk8pkey+15Cj
		push	esi
		call	_PKCS8_PRIV_KEY_INFO_free
		add	esp, 4
		test	edi, edi
		jz	loc_41C
		cmp	[esp+428h+arg_8], 0
		push	edi
		push	ebp
		jz	short loc_51C
		call	_i2d_PKCS8_bio
		jmp	short loc_521
; ---------------------------------------------------------------------------

loc_51C:				; CODE XREF: _do_pk8pkey+183j
		call	_PEM_write_bio_PKCS8

loc_521:				; CODE XREF: _do_pk8pkey+18Aj
		add	esp, 8
		mov	esi, eax
		push	edi
		call	_X509_SIG_free
		mov	eax, esi

loc_52E:				; CODE XREF: _do_pk8pkey+BFj
					; _do_pk8pkey+D6j
		add	esp, 4

loc_531:				; CODE XREF: _do_pk8pkey+8Ej
					; _do_pk8pkey+12Ej
		mov	ecx, [esp+428h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 418h
		retn
_do_pk8pkey	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 54Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_do_pk8pkey_fp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		push	edi
		push	0
		push	[esp+8+arg_0]
		call	_BIO_new_fp
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_57D
		push	0E7h ; 'ç'
		push	offset ??_C@_0BH@BCEPEGOE@?4?2crypto?2pem?2pem_pk8?4c?$AA@ ; ".\\crypto\\pem\\pem_pk8.c"
		push	7
		push	7Dh ; '}'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_57D:				; CODE XREF: _do_pk8pkey_fp+13j
		push	esi
		push	[esp+8+arg_20]
		push	[esp+0Ch+arg_1C]
		push	[esp+10h+arg_18]
		push	[esp+14h+arg_14]
		push	[esp+18h+arg_10]
		push	[esp+1Ch+arg_C]
		push	[esp+20h+arg_8]
		push	[esp+24h+arg_4]
		push	edi
		call	_do_pk8pkey
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 28h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_do_pk8pkey_fp	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_PKCS8PrivateKey_bio
_i2d_PKCS8PrivateKey_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	[esp+arg_18]
		push	[esp+4+arg_14]
		push	[esp+8+arg_10]
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_8]
		push	0FFFFFFFFh
		push	1
		push	[esp+1Ch+arg_4]
		push	[esp+20h+arg_0]
		call	_do_pk8pkey
		add	esp, 24h
		retn
_i2d_PKCS8PrivateKey_bio endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_PKCS8PrivateKey_fp
_i2d_PKCS8PrivateKey_fp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	edi
		push	0
		push	[esp+8+arg_0]
		call	_BIO_new_fp
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_611
		push	0E7h ; 'ç'
		push	offset ??_C@_0BH@BCEPEGOE@?4?2crypto?2pem?2pem_pk8?4c?$AA@ ; ".\\crypto\\pem\\pem_pk8.c"
		push	7
		push	7Dh ; '}'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_611:				; CODE XREF: _i2d_PKCS8PrivateKey_fp+13j
		push	esi
		push	[esp+8+arg_18]
		push	[esp+0Ch+arg_14]
		push	[esp+10h+arg_10]
		push	[esp+14h+arg_C]
		push	[esp+18h+arg_8]
		push	0FFFFFFFFh
		push	1
		push	[esp+24h+arg_4]
		push	edi
		call	_do_pk8pkey
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 28h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_i2d_PKCS8PrivateKey_fp	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 644h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_PKCS8PrivateKey_nid_bio
_i2d_PKCS8PrivateKey_nid_bio proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	[esp+arg_18]
		push	[esp+4+arg_14]
		push	[esp+8+arg_10]
		push	[esp+0Ch+arg_C]
		push	0
		push	[esp+14h+arg_8]
		push	1
		push	[esp+1Ch+arg_4]
		push	[esp+20h+arg_0]
		call	_do_pk8pkey
		add	esp, 24h
		retn
_i2d_PKCS8PrivateKey_nid_bio endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 670h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_PKCS8PrivateKey_nid_fp
_i2d_PKCS8PrivateKey_nid_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	edi
		push	0
		push	[esp+8+arg_0]
		call	_BIO_new_fp
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_6A1
		push	0E7h ; 'ç'
		push	offset ??_C@_0BH@BCEPEGOE@?4?2crypto?2pem?2pem_pk8?4c?$AA@ ; ".\\crypto\\pem\\pem_pk8.c"
		push	7
		push	7Dh ; '}'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6A1:				; CODE XREF: _i2d_PKCS8PrivateKey_nid_fp+13j
		push	esi
		push	[esp+8+arg_18]
		push	[esp+0Ch+arg_14]
		push	[esp+10h+arg_10]
		push	[esp+14h+arg_C]
		push	0
		push	[esp+1Ch+arg_8]
		push	1
		push	[esp+24h+arg_4]
		push	edi
		call	_do_pk8pkey
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 28h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_i2d_PKCS8PrivateKey_nid_fp endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6D4h
; COMDAT (pick any)
		public ??_C@_0BH@BCEPEGOE@?4?2crypto?2pem?2pem_pk8?4c?$AA@
; `string'
??_C@_0BH@BCEPEGOE@?4?2crypto?2pem?2pem_pk8?4c?$AA@ db '.\crypto\pem\pem_pk8.c',0
					; DATA XREF: _PEM_write_PKCS8PrivateKey+1Ao
					; _PEM_write_PKCS8PrivateKey_nid+1Ao ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6ECh
; COMDAT (pick any)
		public ??_C@_0BG@OLFPLKDJ@ENCRYPTED?5PRIVATE?5KEY?$AA@
; `string'
??_C@_0BG@OLFPLKDJ@ENCRYPTED?5PRIVATE?5KEY?$AA@	db 'ENCRYPTED PRIVATE KEY',0
					; DATA XREF: _PEM_read_PKCS8+10o
					; _PEM_read_bio_PKCS8+10o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 704h
; COMDAT (pick any)
		public ??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@
; `string'
??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@ db 'PRIVATE KEY',0
					; DATA XREF: _PEM_read_PKCS8_PRIV_KEY_INFO+10o
					; _PEM_read_bio_PKCS8_PRIV_KEY_INFO+10o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _OPENSSL_cleanse:near ; CODE XREF: _do_pk8pkey+160p
		extrn _BIO_new_fp:near	; CODE XREF: _PEM_write_PKCS8PrivateKey+7p
					; _PEM_write_PKCS8PrivateKey_nid+7p ...
		extrn _BIO_free:near	; CODE XREF: _PEM_write_PKCS8PrivateKey+57p
					; _PEM_write_PKCS8PrivateKey_nid+57p ...
		extrn _ERR_put_error:near ; CODE XREF: _PEM_write_PKCS8PrivateKey+25p
					; _PEM_write_PKCS8PrivateKey_nid+25p ...
		extrn _EVP_PKEY_free:near ; CODE XREF: _d2i_PKCS8PrivateKey_bio+C7p
		extrn _d2i_PKCS8_bio:near ; CODE XREF: _d2i_PKCS8PrivateKey_bio+3Bp
		extrn _i2d_PKCS8_bio:near ; CODE XREF: _do_pk8pkey+185p
		extrn _i2d_PKCS8_PRIV_KEY_INFO_bio:near	; CODE XREF: _do_pk8pkey+ADp
		extrn _X509_SIG_free:near ; CODE XREF: _d2i_PKCS8PrivateKey_bio+80p
					; _d2i_PKCS8PrivateKey_bio+9Bp	...
		extrn _d2i_X509_SIG:near ; DATA	XREF: _PEM_read_PKCS8+15o
					; _PEM_read_bio_PKCS8+15o
		extrn _i2d_X509_SIG:near ; DATA	XREF: _PEM_write_PKCS8+17o
					; _PEM_write_bio_PKCS8+17o
		extrn _PKCS8_PRIV_KEY_INFO_free:near
					; CODE XREF: _d2i_PKCS8PrivateKey_bio+B0p
					; _do_pk8pkey+B8p ...
		extrn _d2i_PKCS8_PRIV_KEY_INFO:near
					; DATA XREF: _PEM_read_PKCS8_PRIV_KEY_INFO+15o
					; _PEM_read_bio_PKCS8_PRIV_KEY_INFO+15o
		extrn _i2d_PKCS8_PRIV_KEY_INFO:near
					; DATA XREF: _PEM_write_PKCS8_PRIV_KEY_INFO+17o
					; _PEM_write_bio_PKCS8_PRIV_KEY_INFO+17o
		extrn _EVP_PKCS82PKEY:near ; CODE XREF:	_d2i_PKCS8PrivateKey_bio+A8p
		extrn _EVP_PKEY2PKCS8:near ; CODE XREF:	_do_pk8pkey+69p
		extrn _PKCS8_decrypt:near ; CODE XREF: _d2i_PKCS8PrivateKey_bio+93p
		extrn _PKCS8_encrypt:near ; CODE XREF: _do_pk8pkey+14Ap
		extrn _PEM_ASN1_read_bio:near ;	CODE XREF: _PEM_read_bio_PKCS8+1Ap
					; _PEM_read_bio_PKCS8_PRIV_KEY_INFO+1Ap
		extrn _PEM_ASN1_write_bio:near ; CODE XREF: _PEM_write_bio_PKCS8+1Cp
					; _PEM_write_bio_PKCS8_PRIV_KEY_INFO+1Cp
		extrn _PEM_ASN1_read:near ; CODE XREF: _PEM_read_PKCS8+1Ap
					; _PEM_read_PKCS8_PRIV_KEY_INFO+1Ap
		extrn _PEM_ASN1_write:near ; CODE XREF:	_PEM_write_PKCS8+1Cp
					; _PEM_write_PKCS8_PRIV_KEY_INFO+1Cp
		extrn _PEM_def_callback:near ; CODE XREF: _d2i_PKCS8PrivateKey_bio:loc_2AEp
					; _do_pk8pkey+F7p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _d2i_PKCS8PrivateKey_bio+E0p
					; _do_pk8pkey+1AEp
		extrn __chkstk:near	; CODE XREF: _d2i_PKCS8PrivateKey_bio+5p
					; _do_pk8pkey+5p
		extrn ___security_cookie:near ;	DATA XREF: _d2i_PKCS8PrivateKey_bio+Ar
					; _do_pk8pkey+Ar


		end
