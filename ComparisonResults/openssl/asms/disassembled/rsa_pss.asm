;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	CD39F4DB070CBD95F70992B93D180EED
; Input	CRC32 :	2362CE3D

; File Name   :	C:\compspace\Diff\openssl\obj\rsa_pss.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
_zeroes		dd 2 dup(0)		; DATA XREF: _RSA_padding_add_PKCS1_PSS_mgf1+178o
					; _RSA_verify_PKCS1_PSS_mgf1+326o
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_padding_add_PKCS1_PSS
_RSA_padding_add_PKCS1_PSS proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	[esp+arg_10]
		push	0
		push	[esp+8+arg_C]
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		push	[esp+14h+arg_0]
		call	_RSA_padding_add_PKCS1_PSS_mgf1
		add	esp, 18h
		retn
_RSA_padding_add_PKCS1_PSS endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 28h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_padding_add_PKCS1_PSS_mgf1
_RSA_padding_add_PKCS1_PSS_mgf1	proc near ; CODE XREF: _RSA_padding_add_PKCS1_PSS+16p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 2Ch ; ','
		call	__chkstk
		mov	eax, [esp+2Ch+arg_10]
		mov	ecx, [esp+2Ch+arg_C]
		push	ebx
		push	ebp
		xor	ebp, ebp
		xor	ebx, ebx
		test	eax, eax
		push	ecx
		cmovz	eax, ecx
		mov	[esp+38h+arg_10], eax
		call	_EVP_MD_size
		add	esp, 4
		mov	[esp+34h+var_2C], eax
		test	eax, eax
		js	loc_2EB
		push	edi
		mov	edi, [esp+38h+arg_14]
		cmp	edi, 0FFFFFFFFh
		jnz	loc_FC
		mov	edi, eax

loc_6E:					; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+D9j
					; _RSA_padding_add_PKCS1_PSS_mgf1:loc_106j
		push	esi
		mov	esi, [esp+3Ch+arg_0]
		push	dword ptr [esi+10h]
		call	_BN_num_bits
		dec	eax
		and	eax, 7
		push	esi
		mov	[esp+44h+var_20], eax
		call	_RSA_size
		mov	esi, [esp+44h+arg_4]
		add	esp, 8
		mov	ecx, eax
		mov	[esp+3Ch+var_28], ecx
		cmp	[esp+3Ch+var_20], ebx
		jnz	short loc_A4
		mov	[esi], bl
		inc	esi
		dec	ecx
		mov	[esp+3Ch+var_28], ecx

loc_A4:					; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+72j
		cmp	edi, 0FFFFFFFEh
		jnz	loc_133
		mov	edi, ecx
		sub	edi, [esp+3Ch+var_2C]
		sub	edi, 2

loc_B6:					; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+116j
		test	edi, edi
		jle	loc_168
		push	0E9h ; 'é'
		push	offset ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pss.c"
		push	edi
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_152
		push	0ECh ; 'ì'
		push	offset ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pss.c"
		push	41h ; 'A'

loc_E3:					; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+128j
		push	94h ; '”'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, ebp
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_FC:					; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+3Ej
		cmp	edi, 0FFFFFFFEh
		jnz	short loc_106
		jmp	loc_6E
; ---------------------------------------------------------------------------

loc_106:				; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+D7j
		jge	loc_6E
		push	0D7h ; '×'
		push	offset ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pss.c"
		push	88h ; 'ˆ'
		push	94h ; '”'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, ebp
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_133:				; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+7Fj
		mov	eax, [esp+3Ch+var_2C]
		add	eax, 2
		add	eax, edi
		cmp	ecx, eax
		jge	loc_B6
		push	0E5h ; 'å'
		push	offset ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pss.c"
		push	6Eh ; 'n'
		jmp	short loc_E3
; ---------------------------------------------------------------------------

loc_152:				; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+ADj
		push	edi
		push	ebx
		call	_RAND_bytes
		add	esp, 8
		test	eax, eax
		jle	$err$48
		mov	ecx, [esp+3Ch+var_28]

loc_168:				; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+90j
		sub	ecx, [esp+3Ch+var_2C]
		lea	eax, [esp+3Ch+var_18]
		mov	[esp+3Ch+var_1C], ecx
		dec	ecx
		push	eax
		mov	[esp+40h+var_24], ecx
		call	_EVP_MD_CTX_init
		push	0
		push	[esp+44h+arg_C]
		lea	eax, [esp+48h+var_18]
		push	eax
		call	_EVP_DigestInit_ex
		add	esp, 10h
		test	eax, eax
		jz	$err$48
		push	8
		lea	eax, [esp+40h+var_18]
		push	offset _zeroes
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jz	$err$48
		push	[esp+3Ch+var_2C]
		lea	eax, [esp+40h+var_18]
		push	[esp+40h+arg_8]
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jz	$err$48
		test	edi, edi
		jz	short loc_1EE
		push	edi
		lea	eax, [esp+40h+var_18]
		push	ebx
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jz	$err$48

loc_1EE:				; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+1ADj
		mov	eax, [esp+3Ch+var_24]
		add	eax, esi
		push	0
		push	eax
		lea	eax, [esp+44h+var_18]
		push	eax
		call	_EVP_DigestFinal_ex
		add	esp, 0Ch
		test	eax, eax
		jz	$err$48
		lea	eax, [esp+3Ch+var_18]
		push	eax
		call	_EVP_MD_CTX_cleanup
		push	[esp+40h+arg_10]
		mov	ecx, [esp+44h+var_24]
		push	[esp+44h+var_2C]
		lea	eax, [ecx+esi]
		push	eax
		push	ecx
		push	esi
		call	_PKCS1_MGF1
		add	esp, 18h
		test	eax, eax
		jnz	$err$48
		mov	ecx, [esp+3Ch+var_1C]
		sub	ecx, edi
		add	ecx, esi
		xor	byte ptr [ecx-2], 1
		dec	ecx
		test	edi, edi
		jle	short loc_2B6
		xor	edx, edx
		cmp	edi, 20h ; ' '
		jb	short loc_2A3
		lea	eax, [ebx-1]
		lea	ebp, [ecx-1]
		add	eax, edi
		add	ebp, edi
		cmp	ecx, eax
		ja	short loc_262
		cmp	ebp, ebx
		jnb	short loc_2A3

loc_262:				; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+234j
		mov	eax, edi
		and	eax, 8000001Fh
		jns	short loc_270
		dec	eax
		or	eax, 0FFFFFFE0h
		inc	eax

loc_270:				; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+241j
		mov	ebp, edi
		sub	ebp, eax
		lea	eax, [ebx+10h]
		nop

loc_278:				; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+279j
		movups	xmm0, xmmword ptr [ecx]
		add	edx, 20h ; ' '
		lea	eax, [eax+20h]
		movups	xmm1, xmmword ptr [eax-30h]
		pxor	xmm1, xmm0
		movups	xmmword	ptr [ecx], xmm1
		movups	xmm1, xmmword ptr [eax-20h]
		movups	xmm0, xmmword ptr [ecx+10h]
		pxor	xmm1, xmm0
		movups	xmmword	ptr [ecx+10h], xmm1
		add	ecx, 20h ; ' '
		cmp	edx, ebp
		jl	short loc_278

loc_2A3:				; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+226j
					; _RSA_padding_add_PKCS1_PSS_mgf1+238j
		cmp	edx, edi
		jge	short loc_2B6
		nop

loc_2A8:				; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+28Cj
		mov	al, [edx+ebx]
		lea	ecx, [ecx+1]
		xor	[ecx-1], al
		inc	edx
		cmp	edx, edi
		jl	short loc_2A8

loc_2B6:				; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+21Fj
					; _RSA_padding_add_PKCS1_PSS_mgf1+27Dj
		mov	eax, [esp+3Ch+var_20]
		test	eax, eax
		jz	short loc_2CE
		mov	ecx, 8
		sub	ecx, eax
		mov	eax, 0FFh
		sar	eax, cl
		and	[esi], al

loc_2CE:				; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+294j
		mov	eax, [esp+3Ch+var_28]
		mov	ebp, 1
		mov	byte ptr [eax+esi-1], 0BCh ; '¼'

$err$48:				; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+136j
					; _RSA_padding_add_PKCS1_PSS_mgf1+16Cj	...
		test	ebx, ebx
		jz	short loc_2E9
		push	ebx
		call	_CRYPTO_free
		add	esp, 4

loc_2E9:				; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+2B6j
		pop	esi
		pop	edi

loc_2EB:				; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+30j
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 2Ch
		retn
_RSA_padding_add_PKCS1_PSS_mgf1	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_verify_PKCS1_PSS
_RSA_verify_PKCS1_PSS proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	[esp+arg_10]
		push	[esp+4+arg_C]
		push	0
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		push	[esp+14h+arg_0]
		call	_RSA_verify_PKCS1_PSS_mgf1
		add	esp, 18h
		retn
_RSA_verify_PKCS1_PSS endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 314h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_verify_PKCS1_PSS_mgf1
_RSA_verify_PKCS1_PSS_mgf1 proc	near	; CODE XREF: _RSA_verify_PKCS1_PSS+16p

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 7Ch ; '|'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+7Ch+var_4], eax
		mov	eax, [esp+7Ch+arg_4]
		push	ebx
		mov	ebx, [esp+80h+arg_C]
		push	ebp
		mov	ebp, [esp+84h+arg_0]
		push	esi
		mov	esi, [esp+88h+arg_10]
		mov	[esp+88h+var_60], eax
		lea	eax, [esp+88h+var_5C]
		push	edi
		mov	edi, [esp+8Ch+arg_8]
		push	eax
		mov	[esp+90h+var_64], edi
		mov	[esp+90h+var_70], 0
		call	_EVP_MD_CTX_init
		test	ebx, ebx
		push	edi
		cmovz	ebx, edi
		mov	[esp+94h+var_78], ebx
		call	_EVP_MD_size
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		js	loc_5D2
		mov	ebx, [esp+8Ch+arg_14]
		cmp	ebx, 0FFFFFFFFh
		jnz	short loc_3E5
		mov	ebx, edi

loc_394:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+D6j
		mov	[esp+8Ch+arg_14], ebx

loc_39B:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1:loc_3ECj
		push	dword ptr [ebp+10h]
		call	_BN_num_bits
		dec	eax
		and	eax, 7
		push	ebp
		mov	[esp+94h+var_6C], eax
		call	_RSA_size
		mov	ecx, [esp+94h+var_6C]
		mov	ebp, eax
		mov	eax, 0FFh
		add	esp, 8
		shl	eax, cl
		test	[esi], al
		jz	short loc_40E
		push	76h ; 'v'
		push	offset ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pss.c"
		push	85h ; '…'
		push	95h ; '•'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_5D2
; ---------------------------------------------------------------------------

loc_3E5:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+7Cj
		cmp	ebx, 0FFFFFFFEh
		jnz	short loc_3EC
		jmp	short loc_394
; ---------------------------------------------------------------------------

loc_3EC:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+D4j
		jge	short loc_39B
		push	6Fh ; 'o'
		push	offset ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pss.c"
		push	88h ; 'ˆ'
		push	95h ; '•'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_5D2
; ---------------------------------------------------------------------------

loc_40E:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+AFj
		test	ecx, ecx
		jnz	short loc_414
		inc	esi
		dec	ebp

loc_414:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+FCj
		lea	eax, [edi+2]
		add	eax, ebx
		cmp	ebp, eax
		jge	short loc_43A
		push	7Eh ; '~'
		push	offset ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pss.c"
		push	6Dh ; 'm'
		push	95h ; '•'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_5D2
; ---------------------------------------------------------------------------

loc_43A:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+107j
		cmp	byte ptr [esi+ebp-1], 0BCh ; '¼'
		jz	short loc_464
		push	82h ; '‚'
		push	offset ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pss.c"
		push	86h ; '†'
		push	95h ; '•'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_5D2
; ---------------------------------------------------------------------------

loc_464:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+12Bj
		sub	ebp, edi
		dec	ebp
		push	87h ; '‡'
		push	offset ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pss.c"
		push	ebp
		lea	ebx, [esi+ebp]
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[esp+8Ch+var_7C], eax
		test	eax, eax
		jnz	short loc_4A5
		push	89h ; '‰'
		push	offset ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pss.c"
		push	41h ; 'A'
		push	95h ; '•'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_5D2
; ---------------------------------------------------------------------------

loc_4A5:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+16Fj
		push	[esp+8Ch+var_78]
		push	edi
		push	ebx
		push	ebp
		push	eax
		call	_PKCS1_MGF1
		add	esp, 14h
		test	eax, eax
		js	loc_5C5
		xor	ecx, ecx
		mov	[esp+8Ch+var_74], ecx
		test	ebp, ebp
		jle	loc_565
		mov	edx, [esp+8Ch+var_7C]
		cmp	ebp, 20h ; ' '
		jb	short loc_549
		lea	eax, [ebp-1]
		mov	[esp+8Ch+var_74], ecx
		add	eax, esi
		cmp	edx, eax
		ja	short loc_4EA
		lea	eax, [edx-1]
		add	eax, ebp
		cmp	eax, esi
		jnb	short loc_549

loc_4EA:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+1CBj
		mov	eax, ebp
		and	eax, 8000001Fh
		jns	short loc_4F8
		dec	eax
		or	eax, 0FFFFFFE0h
		inc	eax

loc_4F8:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+1DDj
		mov	[esp+8Ch+var_78], ebp
		mov	ecx, esi
		sub	[esp+8Ch+var_78], eax
		sub	ecx, edx
		mov	[esp+8Ch+var_68], ecx
		mov	eax, edx
		mov	ecx, [esp+8Ch+var_74]
		mov	edx, [esp+8Ch+var_68]
		xchg	ax, ax

loc_514:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+22Bj
		movups	xmm0, xmmword ptr [eax]
		lea	eax, [eax+20h]
		movups	xmm1, xmmword ptr [edx+eax-20h]
		pxor	xmm1, xmm0
		movups	xmmword	ptr [eax-20h], xmm1
		movups	xmm1, xmmword ptr [esi+ecx+10h]
		add	ecx, 20h ; ' '
		movups	xmm0, xmmword ptr [eax-10h]
		pxor	xmm1, xmm0
		movups	xmmword	ptr [eax-10h], xmm1
		cmp	ecx, [esp+8Ch+var_78]
		jl	short loc_514
		mov	edx, [esp+8Ch+var_7C]
		mov	[esp+8Ch+var_74], ecx

loc_549:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+1BEj
					; _RSA_verify_PKCS1_PSS_mgf1+1D4j
		cmp	ecx, ebp
		jge	short loc_565
		add	ecx, edx
		sub	esi, edx
		mov	edx, ebp
		sub	edx, [esp+8Ch+var_74]

loc_557:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+24Fj
		mov	al, [ecx+esi]
		lea	ecx, [ecx+1]
		xor	[ecx-1], al
		sub	edx, 1
		jnz	short loc_557

loc_565:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+1B1j
					; _RSA_verify_PKCS1_PSS_mgf1+237j
		mov	eax, [esp+8Ch+var_6C]
		test	eax, eax
		jz	short loc_583
		mov	ecx, 8
		mov	edx, 0FFh
		sub	ecx, eax
		mov	eax, [esp+8Ch+var_7C]
		sar	edx, cl
		and	[eax], dl
		jmp	short loc_587
; ---------------------------------------------------------------------------

loc_583:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+257j
		mov	eax, [esp+8Ch+var_7C]

loc_587:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+26Dj
		xor	esi, esi
		cmp	byte ptr [eax],	0
		jnz	short loc_59F
		lea	ecx, [ebp-1]
		nop	dword ptr [eax]

loc_594:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+289j
		cmp	esi, ecx
		jge	short loc_59F
		inc	esi
		cmp	byte ptr [esi+eax], 0
		jz	short loc_594

loc_59F:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+278j
					; _RSA_verify_PKCS1_PSS_mgf1+282j
		mov	al, [esi+eax]
		inc	esi
		cmp	al, 1
		jz	short loc_5F9
		push	94h ; '”'
		push	offset ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pss.c"
		push	87h ; '‡'

loc_5B6:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+307j
		push	95h ; '•'
		push	4
		call	_ERR_put_error
		add	esp, 14h

loc_5C5:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+1A3j
					; _RSA_verify_PKCS1_PSS_mgf1+31Ej ...
		mov	ebp, [esp+8Ch+var_7C]

$err$66:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+372j
					; _RSA_verify_PKCS1_PSS_mgf1+394j ...
		push	ebp
		call	_CRYPTO_free
		add	esp, 4

loc_5D2:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+6Cj
					; _RSA_verify_PKCS1_PSS_mgf1+CCj ...
		lea	eax, [esp+8Ch+var_5C]
		push	eax
		call	_EVP_MD_CTX_cleanup
		mov	ecx, [esp+90h+var_4]
		add	esp, 4
		mov	eax, [esp+8Ch+var_70]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 7Ch
		retn
; ---------------------------------------------------------------------------

loc_5F9:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+291j
		mov	ecx, [esp+8Ch+arg_14]
		test	ecx, ecx
		js	short loc_61D
		mov	eax, ebp
		sub	eax, esi
		cmp	eax, ecx
		jz	short loc_61D
		push	98h ; '˜'
		push	offset ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pss.c"
		push	88h ; 'ˆ'
		jmp	short loc_5B6
; ---------------------------------------------------------------------------

loc_61D:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+2EEj
					; _RSA_verify_PKCS1_PSS_mgf1+2F6j
		push	0
		push	[esp+90h+var_64]
		lea	eax, [esp+94h+var_5C]
		push	eax
		call	_EVP_DigestInit_ex
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_5C5
		push	8
		lea	eax, [esp+90h+var_5C]
		push	offset _zeroes
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jz	loc_5C5
		push	edi
		push	[esp+90h+var_60]
		lea	eax, [esp+94h+var_5C]
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jz	loc_5C5
		sub	ebp, esi
		jz	short loc_68E
		push	ebp
		mov	ebp, [esp+90h+var_7C]
		lea	eax, [esi+ebp]
		push	eax
		lea	eax, [esp+94h+var_5C]
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jz	$err$66
		jmp	short loc_692
; ---------------------------------------------------------------------------

loc_68E:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+358j
		mov	ebp, [esp+8Ch+var_7C]

loc_692:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+378j
		push	0
		lea	eax, [esp+90h+var_44]
		push	eax
		lea	eax, [esp+94h+var_5C]
		push	eax
		call	_EVP_DigestFinal_ex
		add	esp, 0Ch
		test	eax, eax
		jz	$err$66
		lea	ecx, [esp+8Ch+var_44]
		sub	edi, 4
		jb	short loc_6C8

loc_6B7:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+3B2j
		mov	eax, [ecx]
		cmp	eax, [ebx]
		jnz	short loc_6CD
		add	ecx, 4
		add	ebx, 4
		sub	edi, 4
		jnb	short loc_6B7

loc_6C8:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+3A1j
		cmp	edi, 0FFFFFFFCh
		jz	short loc_722

loc_6CD:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+3A7j
		mov	al, [ecx]
		cmp	al, [ebx]
		jnz	short loc_6FA
		cmp	edi, 0FFFFFFFDh
		jz	short loc_722
		mov	al, [ecx+1]
		cmp	al, [ebx+1]
		jnz	short loc_6FA
		cmp	edi, 0FFFFFFFEh
		jz	short loc_722
		mov	al, [ecx+2]
		cmp	al, [ebx+2]
		jnz	short loc_6FA
		cmp	edi, 0FFFFFFFFh
		jz	short loc_722
		mov	al, [ecx+3]
		cmp	al, [ebx+3]
		jz	short loc_722

loc_6FA:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+3BDj
					; _RSA_verify_PKCS1_PSS_mgf1+3CAj ...
		push	0A6h ; '¦'
		push	offset ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@ ; ".\\crypto\\rsa\\rsa_pss.c"
		push	68h ; 'h'
		push	95h ; '•'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		mov	[esp+8Ch+var_70], 0
		jmp	$err$66
; ---------------------------------------------------------------------------

loc_722:				; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+3B7j
					; _RSA_verify_PKCS1_PSS_mgf1+3C2j ...
		mov	[esp+8Ch+var_70], 1
		jmp	$err$66
_RSA_verify_PKCS1_PSS_mgf1 endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 730h
; COMDAT (pick any)
		public ??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@
; `string'
??_C@_0BH@HCMMELDJ@?4?2crypto?2rsa?2rsa_pss?4c?$AA@ db '.\crypto\rsa\rsa_pss.c',0
					; DATA XREF: _RSA_padding_add_PKCS1_PSS_mgf1+9Bo
					; _RSA_padding_add_PKCS1_PSS_mgf1+B4o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+A1p
					; _RSA_verify_PKCS1_PSS_mgf1+161p
		extrn _CRYPTO_free:near	; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+2B9p
					; _RSA_verify_PKCS1_PSS_mgf1+2B6p
		extrn _ERR_put_error:near ; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+C2p
					; _RSA_padding_add_PKCS1_PSS_mgf1+FAp ...
		extrn _BN_num_bits:near	; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+4Ep
					; _RSA_verify_PKCS1_PSS_mgf1+8Ap
		extrn _RSA_size:near	; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+5Cp
					; _RSA_verify_PKCS1_PSS_mgf1+98p
		extrn _PKCS1_MGF1:near	; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+200p
					; _RSA_verify_PKCS1_PSS_mgf1+199p
		extrn _EVP_MD_size:near	; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+22p
					; _RSA_verify_PKCS1_PSS_mgf1+60p
		extrn _EVP_MD_CTX_init:near
					; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+152p
					; _RSA_verify_PKCS1_PSS_mgf1+51p
		extrn _EVP_MD_CTX_cleanup:near
					; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+1E9p
					; _RSA_verify_PKCS1_PSS_mgf1+2C3p
		extrn _EVP_DigestInit_ex:near
					; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+162p
					; _RSA_verify_PKCS1_PSS_mgf1+314p
		extrn _EVP_DigestUpdate:near
					; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+17Ep
					; _RSA_padding_add_PKCS1_PSS_mgf1+19Bp	...
		extrn _EVP_DigestFinal_ex:near
					; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+1D4p
					; _RSA_verify_PKCS1_PSS_mgf1+38Ap
		extrn _RAND_bytes:near	; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+12Cp
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _RSA_verify_PKCS1_PSS_mgf1+2DCp
		extrn __chkstk:near	; CODE XREF: _RSA_padding_add_PKCS1_PSS_mgf1+5p
					; _RSA_verify_PKCS1_PSS_mgf1+5p
		extrn ___security_cookie:near ;	DATA XREF: _RSA_verify_PKCS1_PSS_mgf1+Ar


		end
