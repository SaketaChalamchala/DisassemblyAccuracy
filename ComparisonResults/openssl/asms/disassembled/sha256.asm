;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	05F8B5FDEB9D31F5421605017C73EA9C
; Input	CRC32 :	B68BB739

; File Name   :	C:\compspace\Diff\openssl\obj\sha256.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		public _SHA256_version
_SHA256_version	db 'SHA-256 part of OpenSSL 1.0.2h  3 May 2016',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl SHA224(void *Src,	size_t Size, int)
		public _SHA224
_SHA224		proc near

Dst		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Src		= dword	ptr  4
Size		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 74h ; 't'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+74h+var_4], eax
		mov	eax, [esp+74h+arg_8]
		test	eax, eax
		push	esi
		mov	esi, [esp+78h+Src]
		push	edi
		mov	edi, offset ?m@?1??SHA224@@9@9 ; `SHA224'::`2'::m
		push	70h ; 'p'       ; Size
		cmovnz	edi, eax
		lea	eax, [esp+80h+Dst]
		push	0		; Val
		push	eax		; Dst
		call	_memset
		push	[esp+88h+Size]	; Size
		lea	eax, [esp+8Ch+Dst]
		mov	[esp+8Ch+Dst], 0C1059ED8h
		push	esi		; Src
		push	eax		; int
		mov	[esp+94h+var_70], 367CD507h
		mov	[esp+94h+var_6C], 3070DD17h
		mov	[esp+94h+var_68], 0F70E5939h
		mov	[esp+94h+var_64], 0FFC00B31h
		mov	[esp+94h+var_60], 68581511h
		mov	[esp+94h+var_5C], 64F98FA7h
		mov	[esp+94h+var_58], 0BEFA4FA4h
		mov	[esp+94h+var_8], 1Ch
		call	_SHA256_Update
		lea	eax, [esp+94h+Dst]
		push	eax
		push	edi
		call	_SHA256_Final
		lea	eax, [esp+9Ch+Dst]
		push	70h ; 'p'
		push	eax
		call	_OPENSSL_cleanse
		mov	ecx, [esp+0A4h+var_4]
		add	esp, 28h
		mov	eax, edi
		pop	edi
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 74h
		retn
_SHA224		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SHA224_Final
_SHA224_Final	proc near
		jmp	_SHA256_Final
_SHA224_Final	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl SHA224_Init(void *Dst)
		public _SHA224_Init
_SHA224_Init	proc near

Dst		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Dst]
		push	70h ; 'p'       ; Size
		push	0		; Val
		push	esi		; Dst
		call	_memset
		add	esp, 0Ch
		mov	dword ptr [esi], 0C1059ED8h
		mov	dword ptr [esi+4], 367CD507h
		mov	eax, 1
		mov	dword ptr [esi+8], 3070DD17h
		mov	dword ptr [esi+0Ch], 0F70E5939h
		mov	dword ptr [esi+10h], 0FFC00B31h
		mov	dword ptr [esi+14h], 68581511h
		mov	dword ptr [esi+18h], 64F98FA7h
		mov	dword ptr [esi+1Ch], 0BEFA4FA4h
		mov	dword ptr [esi+6Ch], 1Ch
		pop	esi
		retn
_SHA224_Init	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 154h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SHA224_Update
_SHA224_Update	proc near
		jmp	_SHA256_Update
_SHA224_Update	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 15Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl SHA256(void *Src,	size_t Size, int)
		public _SHA256
_SHA256		proc near

Dst		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Src		= dword	ptr  4
Size		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 74h ; 't'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+74h+var_4], eax
		mov	eax, [esp+74h+arg_8]
		test	eax, eax
		push	esi
		mov	esi, [esp+78h+Src]
		push	edi
		mov	edi, offset ?m@?1??SHA256@@9@9 ; `SHA256'::`2'::m
		push	70h ; 'p'       ; Size
		cmovnz	edi, eax
		lea	eax, [esp+80h+Dst]
		push	0		; Val
		push	eax		; Dst
		call	_memset
		push	[esp+88h+Size]	; Size
		lea	eax, [esp+8Ch+Dst]
		mov	[esp+8Ch+Dst], 6A09E667h
		push	esi		; Src
		push	eax		; int
		mov	[esp+94h+var_70], 0BB67AE85h
		mov	[esp+94h+var_6C], 3C6EF372h
		mov	[esp+94h+var_68], 0A54FF53Ah
		mov	[esp+94h+var_64], 510E527Fh
		mov	[esp+94h+var_60], 9B05688Ch
		mov	[esp+94h+var_5C], 1F83D9ABh
		mov	[esp+94h+var_58], 5BE0CD19h
		mov	[esp+94h+var_8], 20h ; ' '
		call	_SHA256_Update
		lea	eax, [esp+94h+Dst]
		push	eax
		push	edi
		call	_SHA256_Final
		lea	eax, [esp+9Ch+Dst]
		push	70h ; 'p'
		push	eax
		call	_OPENSSL_cleanse
		mov	ecx, [esp+0A4h+var_4]
		add	esp, 28h
		mov	eax, edi
		pop	edi
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 74h
		retn
_SHA256		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 224h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SHA256_Final
_SHA256_Final	proc near		; CODE XREF: _SHA224+9Dp
					; _SHA224_Finalj ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		lea	esi, [edi+28h]
		mov	ebx, [edi+68h]
		mov	byte ptr [ebx+esi], 80h	; '€'
		inc	ebx
		cmp	ebx, 38h ; '8'
		jbe	short loc_25C
		mov	eax, 40h ; '@'
		sub	eax, ebx
		push	eax		; Size
		lea	eax, [ebx+esi]
		push	0		; Val
		push	eax		; Dst
		call	_memset
		push	1
		push	esi
		push	edi
		xor	ebx, ebx
		call	_sha256_block_data_order
		add	esp, 18h

loc_25C:				; CODE XREF: _SHA256_Final+15j
		mov	eax, 38h ; '8'
		sub	eax, ebx
		push	eax		; Size
		lea	eax, [ebx+esi]
		push	0		; Val
		push	eax		; Dst
		call	_memset
		movzx	eax, byte ptr [edi+27h]
		mov	[esi+38h], al
		movzx	eax, byte ptr [edi+26h]
		mov	[esi+39h], al
		movzx	eax, byte ptr [edi+25h]
		mov	[esi+3Ah], al
		movzx	eax, byte ptr [edi+24h]
		mov	[esi+3Bh], al
		movzx	eax, byte ptr [edi+23h]
		mov	[esi+3Ch], al
		movzx	eax, byte ptr [edi+22h]
		mov	[esi+3Dh], al
		movzx	eax, byte ptr [edi+21h]
		push	1
		mov	[esi+3Eh], al
		movzx	eax, byte ptr [edi+20h]
		push	esi
		push	edi
		mov	[esi+3Fh], al
		call	_sha256_block_data_order
		push	40h ; '@'       ; Size
		push	0		; Val
		push	esi		; Dst
		mov	dword ptr [edi+68h], 0
		call	_memset
		mov	eax, [edi+6Ch]
		add	esp, 24h
		cmp	eax, 1Ch
		jz	loc_424
		cmp	eax, 20h ; ' '
		jz	short loc_329
		jbe	short loc_2DD
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2DD:				; CODE XREF: _SHA256_Final+B1j
		xor	esi, esi
		test	eax, 0FFFFFFFCh
		jbe	loc_4F8
		mov	eax, [esp+0Ch+arg_0]
		nop	word ptr [eax+eax+00h]

loc_2F4:				; CODE XREF: _SHA256_Final+FAj
		mov	edx, [edi+esi*4]
		lea	eax, [eax+4]
		mov	ecx, edx
		inc	esi
		shr	ecx, 18h
		mov	[eax-4], cl
		mov	ecx, edx
		shr	ecx, 10h
		mov	[eax-3], cl
		mov	ecx, edx
		shr	ecx, 8
		mov	[eax-2], cl
		mov	[eax-1], dl
		mov	ecx, [edi+6Ch]
		shr	ecx, 2
		cmp	esi, ecx
		jb	short loc_2F4
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_329:				; CODE XREF: _SHA256_Final+AFj
		mov	ecx, [edi]
		mov	eax, ecx
		mov	edx, [esp+0Ch+arg_0]
		shr	eax, 18h
		mov	[edx], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+1], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+2], al
		mov	[edx+3], cl
		mov	ecx, [edi+4]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+4], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+5], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+6], al
		mov	[edx+7], cl
		mov	ecx, [edi+8]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+8], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+9], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+0Ah], al
		mov	[edx+0Bh], cl
		mov	ecx, [edi+0Ch]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+0Ch], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+0Dh], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+0Eh], al
		mov	[edx+0Fh], cl
		mov	ecx, [edi+10h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+10h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+11h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+12h], al
		mov	[edx+13h], cl
		mov	ecx, [edi+14h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+14h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+15h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+16h], al
		mov	[edx+17h], cl
		mov	ecx, [edi+18h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+18h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+19h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+1Ah], al
		mov	[edx+1Bh], cl
		mov	ecx, [edi+1Ch]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+1Ch], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+1Dh], al
		mov	eax, ecx
		pop	edi
		shr	eax, 8
		mov	[edx+1Eh], al
		mov	eax, 1
		pop	esi
		mov	[edx+1Fh], cl
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_424:				; CODE XREF: _SHA256_Final+A6j
		mov	ecx, [edi]
		mov	eax, ecx
		mov	edx, [esp+0Ch+arg_0]
		shr	eax, 18h
		mov	[edx], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+1], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+2], al
		mov	[edx+3], cl
		mov	ecx, [edi+4]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+4], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+5], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+6], al
		mov	[edx+7], cl
		mov	ecx, [edi+8]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+8], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+9], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+0Ah], al
		mov	[edx+0Bh], cl
		mov	ecx, [edi+0Ch]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+0Ch], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+0Dh], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+0Eh], al
		mov	[edx+0Fh], cl
		mov	ecx, [edi+10h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+10h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+11h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+12h], al
		mov	[edx+13h], cl
		mov	ecx, [edi+14h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+14h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+15h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+16h], al
		mov	[edx+17h], cl
		mov	ecx, [edi+18h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+18h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+19h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+1Ah], al
		mov	[edx+1Bh], cl

loc_4F8:				; CODE XREF: _SHA256_Final+C0j
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
_SHA256_Final	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 504h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl SHA256_Init(void *Dst)
		public _SHA256_Init
_SHA256_Init	proc near

Dst		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Dst]
		push	70h ; 'p'       ; Size
		push	0		; Val
		push	esi		; Dst
		call	_memset
		add	esp, 0Ch
		mov	dword ptr [esi], 6A09E667h
		mov	dword ptr [esi+4], 0BB67AE85h
		mov	eax, 1
		mov	dword ptr [esi+8], 3C6EF372h
		mov	dword ptr [esi+0Ch], 0A54FF53Ah
		mov	dword ptr [esi+10h], 510E527Fh
		mov	dword ptr [esi+14h], 9B05688Ch
		mov	dword ptr [esi+18h], 1F83D9ABh
		mov	dword ptr [esi+1Ch], 5BE0CD19h
		mov	dword ptr [esi+6Ch], 20h ; ' '
		pop	esi
		retn
_SHA256_Init	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 55Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SHA256_Transform
_SHA256_Transform proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	1
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_sha256_block_data_order
		add	esp, 0Ch
		retn
_SHA256_Transform endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 570h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl SHA256_Update(int, void *Src, size_t Size)
		public _SHA256_Update
_SHA256_Update	proc near		; CODE XREF: _SHA224+92p
					; _SHA224_Updatej ...

arg_0		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, [esp+4+Src]
		push	edi
		mov	edi, [esp+8+Size]
		test	edi, edi
		jz	loc_63D
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		mov	eax, [ebx+20h]
		lea	ecx, [eax+edi*8]
		cmp	ecx, eax
		jnb	short loc_594
		inc	dword ptr [ebx+24h]

loc_594:				; CODE XREF: _SHA256_Update+1Fj
		mov	eax, edi
		mov	[ebx+20h], ecx
		mov	ecx, [ebx+68h]
		shr	eax, 1Dh
		add	[ebx+24h], eax
		push	esi
		test	ecx, ecx
		jz	short loc_60B
		lea	edx, [ebx+28h]
		cmp	edi, 40h ; '@'
		jnb	short loc_5D2
		lea	eax, [ecx+edi]
		cmp	eax, 40h ; '@'
		jnb	short loc_5D2
		push	edi		; Size
		lea	eax, [edx+ecx]
		push	ebp		; Src
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	eax, 1
		add	[ebx+68h], edi
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_5D2:				; CODE XREF: _SHA256_Update+3Dj
					; _SHA256_Update+45j
		mov	esi, 40h ; '@'
		lea	eax, [edx+ecx]
		sub	esi, ecx
		push	esi		; Size
		push	ebp		; Src
		push	eax		; Dst
		call	_memcpy
		push	1
		lea	eax, [ebx+28h]
		push	eax
		push	ebx
		call	_sha256_block_data_order
		push	40h ; '@'       ; Size
		lea	eax, [ebx+28h]
		mov	dword ptr [ebx+68h], 0
		push	0		; Val
		push	eax		; Dst
		add	ebp, esi
		sub	edi, esi
		call	_memset
		add	esp, 24h

loc_60B:				; CODE XREF: _SHA256_Update+35j
		mov	esi, edi
		shr	esi, 6
		test	esi, esi
		jz	short loc_626
		push	esi
		push	ebp
		push	ebx
		call	_sha256_block_data_order
		shl	esi, 6
		add	esp, 0Ch
		add	ebp, esi
		sub	edi, esi

loc_626:				; CODE XREF: _SHA256_Update+A2j
		test	edi, edi
		jz	short loc_63B
		push	edi		; Size
		lea	eax, [ebx+28h]
		mov	[ebx+68h], edi
		push	ebp		; Src
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch

loc_63B:				; CODE XREF: _SHA256_Update+B8j
		pop	esi
		pop	ebx

loc_63D:				; CODE XREF: _SHA256_Update+Cj
		pop	edi
		mov	eax, 1
		pop	ebp
		retn
_SHA256_Update	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 648h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
; `SHA224'::`2'::m
?m@?1??SHA224@@9@9 dd 7	dup(?)		; DATA XREF: _SHA224+24o
; `SHA256'::`2'::m
?m@?1??SHA256@@9@9 dd 8	dup(?)		; DATA XREF: _SHA256+24o
_bss		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _OPENSSL_cleanse:near ; CODE XREF: _SHA224+A9p
					; _SHA256+A9p
		extrn _sha256_block_data_order:near ; CODE XREF: _SHA256_Final+30p
					; _SHA256_Final+87p ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _SHA224+BEp
					; _SHA256+BEp
		extrn __chkstk:near	; CODE XREF: _SHA224+5p _SHA256+5p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _SHA256_Update+4Dp
					; _SHA256_Update+6Fp ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _SHA224+35p
					; _SHA224_Init+Ap ...
		extrn ___security_cookie:near ;	DATA XREF: _SHA224+Ar
					; _SHA256+Ar


		end
