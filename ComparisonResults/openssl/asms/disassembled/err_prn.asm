;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	CB47770EAF3E5359ACE56E11EFA47CFC
; Input	CRC32 :	8AA2BC34

; File Name   :	C:\compspace\Diff\openssl\obj\err_prn.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ERR_print_errors
_ERR_print_errors proc near

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		push	offset _print_bio
		call	_ERR_print_errors_cb
		add	esp, 8
		retn
_ERR_print_errors endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 14h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ERR_print_errors_cb
_ERR_print_errors_cb proc near		; CODE XREF: _ERR_print_errors+9p
					; _ERR_print_errors_fp+9p

var_111C	= byte ptr -111Ch
var_1118	= dword	ptr -1118h
var_1114	= dword	ptr -1114h
var_1110	= dword	ptr -1110h
var_110C	= byte ptr -110Ch
var_1104	= byte ptr -1104h
var_1004	= byte ptr -1004h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 111Ch
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+111Ch+var_4], eax
		push	ebx
		push	esi
		mov	esi, [esp+1124h+arg_0]
		lea	eax, [esp+1124h+var_110C]
		push	edi
		mov	edi, [esp+1128h+arg_4]
		push	eax
		call	_CRYPTO_THREADID_current
		lea	eax, [esp+112Ch+var_110C]
		push	eax
		call	_CRYPTO_THREADID_hash
		mov	ebx, eax
		lea	eax, [esp+1130h+var_111C]
		push	eax
		lea	eax, [esp+1134h+var_1118]
		push	eax
		lea	eax, [esp+1138h+var_1114]
		push	eax
		lea	eax, [esp+113Ch+var_1110]
		push	eax
		call	_ERR_get_error_line_data
		add	esp, 18h
		test	eax, eax
		jz	loc_109

loc_77:					; CODE XREF: _ERR_print_errors_cb+EFj
		push	100h
		lea	ecx, [esp+112Ch+var_1104]
		push	ecx
		push	eax
		call	_ERR_error_string_n
		test	[esp+1134h+var_111C], 2
		mov	eax, offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
		cmovnz	eax, [esp+1134h+var_1118]
		push	eax
		push	[esp+1138h+var_1114]
		lea	eax, [esp+113Ch+var_1104]
		push	[esp+113Ch+var_1110]
		push	eax
		push	ebx
		push	offset ??_C@_0BB@KDJGCOOH@?$CFlu?3?$CFs?3?$CFs?3?$CFd?3?$CFs?6?$AA@ ; "%lu:%s:%s:%d:%s\n"
		lea	eax, [esp+114Ch+var_1004]
		push	1000h
		push	eax
		call	_BIO_snprintf
		lea	eax, [esp+1154h+var_1004]
		add	esp, 2Ch
		lea	edx, [eax+1]

loc_C9:					; CODE XREF: _ERR_print_errors_cb+BAj
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_C9
		sub	eax, edx
		push	edi
		push	eax
		lea	eax, [esp+1130h+var_1004]
		push	eax
		call	esi
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_109
		lea	eax, [esp+1128h+var_111C]
		push	eax
		lea	eax, [esp+112Ch+var_1118]
		push	eax
		lea	eax, [esp+1130h+var_1114]
		push	eax
		lea	eax, [esp+1134h+var_1110]
		push	eax
		call	_ERR_get_error_line_data
		add	esp, 10h
		test	eax, eax
		jnz	loc_77

loc_109:				; CODE XREF: _ERR_print_errors_cb+5Dj
					; _ERR_print_errors_cb+CFj
		mov	ecx, [esp+1128h+var_4]
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 111Ch
		retn
_ERR_print_errors_cb endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 124h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ERR_print_errors_fp
_ERR_print_errors_fp proc near

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		push	offset _print_fp
		call	_ERR_print_errors_cb
		add	esp, 8
		retn
_ERR_print_errors_fp endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 138h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_print_bio	proc near		; DATA XREF: _ERR_print_errors+4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	[esp+8+arg_8]
		call	_BIO_write
		add	esp, 0Ch
		retn
_print_bio	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 150h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_print_fp	proc near		; DATA XREF: _ERR_print_errors_fp+4o

var_40		= byte ptr -40h
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		mov	eax, 40h ; '@'
		call	__chkstk
		call	_BIO_s_file
		push	eax
		lea	eax, [esp+44h+var_40]
		push	eax
		call	_BIO_set
		push	[esp+48h+arg_8]
		lea	eax, [esp+4Ch+var_40]
		push	0
		push	6Ah ; 'j'
		push	eax
		call	_BIO_ctrl
		push	[esp+58h+arg_0]
		lea	eax, [esp+5Ch+var_40]
		push	offset ??_C@_02DKCKIIND@?$CFs?$AA@ ; `string'
		push	eax
		call	_BIO_printf
		add	esp, 64h
		retn
_print_fp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 194h
; COMDAT (pick any)
		public ??_C@_00CNPNBAHC@?$AA@
; `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: _ERR_print_errors_cb+78o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 198h
; COMDAT (pick any)
		public ??_C@_0BB@KDJGCOOH@?$CFlu?3?$CFs?3?$CFs?3?$CFd?3?$CFs?6?$AA@
; `string'
??_C@_0BB@KDJGCOOH@?$CFlu?3?$CFs?3?$CFs?3?$CFd?3?$CFs?6?$AA@ db	'%lu:%s:%s:%d:%s',0Ah,0
					; DATA XREF: _ERR_print_errors_cb+91o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1ACh
; COMDAT (pick any)
		public ??_C@_02DKCKIIND@?$CFs?$AA@
; `string'
??_C@_02DKCKIIND@?$CFs?$AA@ db 25h, 73h, 0 ; DATA XREF:	_print_fp+34o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_THREADID_current:near ; CODE XREF: _ERR_print_errors_cb+2Ep
		extrn _CRYPTO_THREADID_hash:near ; CODE	XREF: _ERR_print_errors_cb+38p
		extrn _BIO_s_file:near	; CODE XREF: _print_fp+Ap
		extrn _BIO_set:near	; CODE XREF: _print_fp+15p
		extrn _BIO_write:near	; CODE XREF: _print_bio+Cp
		extrn _BIO_ctrl:near	; CODE XREF: _print_fp+27p
		extrn _BIO_printf:near	; CODE XREF: _print_fp+3Ap
		extrn _BIO_snprintf:near ; CODE	XREF: _ERR_print_errors_cb+A3p
		extrn _ERR_get_error_line_data:near ; CODE XREF: _ERR_print_errors_cb+53p
					; _ERR_print_errors_cb+E5p
		extrn _ERR_error_string_n:near ; CODE XREF: _ERR_print_errors_cb+6Ep
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _ERR_print_errors_cb+101p
		extrn __chkstk:near	; CODE XREF: _ERR_print_errors_cb+5p
					; _print_fp+5p
		extrn ___security_cookie:near ;	DATA XREF: _ERR_print_errors_cb+Ar


		end
