;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	C854838EFE0FF5838AA0D08E7A678D2B
; Input	CRC32 :	591AA5D2

; File Name   :	C:\compspace\Diff\openssl\obj\ctr128.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CRYPTO_ctr128_encrypt
_CRYPTO_ctr128_encrypt proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		mov	eax, 10h
		call	__chkstk
		mov	ecx, [esp+10h+arg_14]
		push	ebx
		mov	ebx, [esp+14h+arg_4]
		push	ebp
		mov	ebp, [esp+18h+arg_0]
		push	esi
		mov	esi, [esp+1Ch+arg_8]
		push	edi
		mov	edi, [esp+20h+arg_18]
		mov	edi, [edi]
		test	edi, edi
		jz	short loc_3D

loc_28:					; CODE XREF: _CRYPTO_ctr128_encrypt+3Bj
		test	esi, esi
		jz	short loc_3D
		mov	al, [edi+ecx]
		dec	esi
		xor	al, [ebp+0]
		inc	edi
		mov	[ebx], al
		inc	ebp
		inc	ebx
		and	edi, 0Fh
		jnz	short loc_28

loc_3D:					; CODE XREF: _CRYPTO_ctr128_encrypt+26j
					; _CRYPTO_ctr128_encrypt+2Aj
		mov	edx, [esp+20h+arg_10]
		cmp	esi, 10h
		jb	loc_D6
		mov	eax, ebp
		xor	edi, edi
		sub	eax, ecx
		mov	[esp+20h+var_C], edi
		mov	[esp+20h+var_10], eax
		mov	edi, ebx
		mov	eax, esi
		sub	edi, ecx
		shr	eax, 4
		mov	[esp+20h+arg_8], eax
		shl	eax, 4
		add	ebx, eax
		add	ebp, eax
		mov	[esp+20h+var_8], ebx
		mov	ebx, [esp+20h+var_10]
		mov	[esp+20h+var_4], ebp
		mov	ebp, [esp+20h+arg_14]
		nop	dword ptr [eax+00h]

loc_80:					; CODE XREF: _CRYPTO_ctr128_encrypt+C4j
		push	[esp+20h+arg_C]
		push	ebp
		push	edx
		call	[esp+2Ch+arg_1C]
		mov	eax, [esp+2Ch+arg_10]
		push	eax
		call	_ctr128_inc_aligned
		add	esp, 10h
		mov	eax, ebp
		mov	edx, 4
		xchg	ax, ax

loc_A0:					; CODE XREF: _CRYPTO_ctr128_encrypt+B0j
		mov	ecx, [ebx+eax]
		lea	eax, [eax+4]
		xor	ecx, [eax-4]
		mov	[edi+eax-4], ecx
		sub	edx, 1
		jnz	short loc_A0
		mov	edx, [esp+20h+arg_10]
		sub	esi, 10h
		add	edi, 10h
		add	ebx, 10h
		sub	[esp+20h+arg_8], 1
		jnz	short loc_80
		mov	edi, [esp+20h+var_C]
		mov	ebx, [esp+20h+var_8]
		mov	ebp, [esp+20h+var_4]
		mov	ecx, [esp+20h+arg_14]

loc_D6:					; CODE XREF: _CRYPTO_ctr128_encrypt+44j
		test	esi, esi
		jz	short loc_112
		push	[esp+20h+arg_C]
		push	ecx
		push	edx
		call	[esp+2Ch+arg_1C]
		mov	eax, [esp+2Ch+arg_10]
		push	eax
		call	_ctr128_inc_aligned
		mov	eax, [esp+30h+arg_14]
		add	esp, 10h
		sub	ebp, eax
		sub	ebx, eax
		lea	ecx, [edi+eax]
		add	edi, esi
		xchg	ax, ax

loc_100:				; CODE XREF: _CRYPTO_ctr128_encrypt+110j
		mov	al, [ecx+ebp]
		lea	ecx, [ecx+1]
		xor	al, [ecx-1]
		mov	[ecx+ebx-1], al
		sub	esi, 1
		jnz	short loc_100

loc_112:				; CODE XREF: _CRYPTO_ctr128_encrypt+D8j
		mov	eax, [esp+20h+arg_18]
		mov	[eax], edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
_CRYPTO_ctr128_encrypt endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 120h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CRYPTO_ctr128_encrypt_ctr32
_CRYPTO_ctr128_encrypt_ctr32 proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		mov	eax, 8
		call	__chkstk
		mov	edx, [esp+8+arg_18]
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		push	ebp
		mov	ebp, [esp+10h+arg_0]
		push	esi
		mov	esi, [esp+14h+arg_8]
		push	edi
		mov	edi, [edx]
		mov	[esp+18h+var_4], edi
		mov	[esp+18h+var_8], esi
		test	edi, edi
		jz	short loc_16D
		mov	ecx, [esp+18h+arg_14]

loc_150:				; CODE XREF: _CRYPTO_ctr128_encrypt_ctr32+4Bj
		test	esi, esi
		jz	short loc_16D
		mov	al, [edi+ecx]
		dec	esi
		xor	al, [ebp+0]
		inc	edi
		mov	[ebx], al
		inc	ebp
		inc	ebx
		mov	[esp+18h+var_8], esi
		and	edi, 0Fh
		mov	[esp+18h+var_4], edi
		jnz	short loc_150

loc_16D:				; CODE XREF: _CRYPTO_ctr128_encrypt_ctr32+2Aj
					; _CRYPTO_ctr128_encrypt_ctr32+32j
		mov	eax, [esp+18h+arg_10]
		mov	ecx, [eax+0Ch]
		bswap	ecx
		mov	[esp+18h+arg_8], ecx
		cmp	esi, 10h
		jb	loc_208

loc_183:				; CODE XREF: _CRYPTO_ctr128_encrypt_ctr32+DEj
		mov	edi, esi
		shr	edi, 4
		add	ecx, edi
		mov	[esp+18h+arg_8], ecx
		cmp	ecx, edi
		jnb	short loc_19A
		sub	edi, ecx
		xor	ecx, ecx
		mov	[esp+18h+arg_8], ecx

loc_19A:				; CODE XREF: _CRYPTO_ctr128_encrypt_ctr32+70j
		push	eax
		push	[esp+1Ch+arg_C]
		push	edi
		push	ebx
		push	ebp
		call	[esp+2Ch+arg_1C]
		mov	ecx, [esp+2Ch+arg_8]
		add	esp, 14h
		mov	edx, [esp+18h+arg_10]
		mov	eax, ecx
		bswap	eax
		mov	[edx+0Ch], eax
		test	ecx, ecx
		jnz	short loc_1EA
		mov	esi, [esp+18h+arg_10]
		mov	edx, 0Ch
		mov	ecx, 1
		nop	word ptr [eax+eax+00h]

loc_1D0:				; CODE XREF: _CRYPTO_ctr128_encrypt_ctr32+C0j
		movzx	eax, byte ptr [edx+esi-1]
		dec	edx
		add	ecx, eax
		mov	[edx+esi], cl
		shr	ecx, 8
		test	edx, edx
		jnz	short loc_1D0
		mov	esi, [esp+18h+var_8]
		mov	ecx, [esp+18h+arg_8]

loc_1EA:				; CODE XREF: _CRYPTO_ctr128_encrypt_ctr32+9Aj
		mov	eax, [esp+18h+arg_10]
		shl	edi, 4
		sub	esi, edi
		add	ebx, edi
		add	ebp, edi
		mov	[esp+18h+var_8], esi
		cmp	esi, 10h
		jnb	short loc_183
		mov	edi, [esp+18h+var_4]
		mov	edx, [esp+18h+arg_18]

loc_208:				; CODE XREF: _CRYPTO_ctr128_encrypt_ctr32+5Dj
		test	esi, esi
		jz	short loc_270
		mov	ecx, [esp+18h+arg_14]
		xorps	xmm0, xmm0
		push	eax
		push	[esp+1Ch+arg_C]
		push	1
		push	ecx
		push	ecx
		movups	xmmword	ptr [ecx], xmm0
		call	[esp+2Ch+arg_1C]
		mov	eax, [esp+2Ch+arg_8]
		add	esp, 14h
		mov	edx, [esp+18h+arg_10]
		add	eax, 1
		bswap	eax
		mov	[edx+0Ch], eax
		jnz	short loc_241
		push	edx
		call	_ctr96_inc
		add	esp, 4

loc_241:				; CODE XREF: _CRYPTO_ctr128_encrypt_ctr32+116j
		mov	eax, [esp+18h+arg_14]
		sub	ebp, eax
		sub	ebx, eax
		lea	ecx, [edi+eax]
		add	edi, esi
		xchg	ax, ax

loc_250:				; CODE XREF: _CRYPTO_ctr128_encrypt_ctr32+140j
		mov	al, [ecx+ebp]
		lea	ecx, [ecx+1]
		xor	al, [ecx-1]
		mov	[ebx+ecx-1], al
		sub	esi, 1
		jnz	short loc_250
		mov	eax, [esp+18h+arg_18]
		mov	[eax], edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_270:				; CODE XREF: _CRYPTO_ctr128_encrypt_ctr32+EAj
		mov	[edx], edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
_CRYPTO_ctr128_encrypt_ctr32 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 27Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ctr128_inc	proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	edx, 10h
		mov	eax, 1
		nop

loc_28C:				; CODE XREF: _ctr128_inc+20j
		movzx	ecx, byte ptr [edx+esi-1]
		dec	edx
		add	eax, ecx
		mov	[edx+esi], al
		shr	eax, 8
		test	edx, edx
		jnz	short loc_28C
		pop	esi
		retn
_ctr128_inc	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ctr128_inc_aligned proc near		; CODE XREF: _CRYPTO_ctr128_encrypt+8Fp
					; _CRYPTO_ctr128_encrypt+E9p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	edx, 10h
		mov	eax, 1
		nop

loc_2B0:				; CODE XREF: _ctr128_inc_aligned+20j
		movzx	ecx, byte ptr [edx+esi-1]
		dec	edx
		add	eax, ecx
		mov	[edx+esi], al
		shr	eax, 8
		test	edx, edx
		jnz	short loc_2B0
		pop	esi
		retn
_ctr128_inc_aligned endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ctr96_inc	proc near		; CODE XREF: _CRYPTO_ctr128_encrypt_ctr32+119p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	edx, 0Ch
		mov	eax, 1
		nop

loc_2D4:				; CODE XREF: _ctr96_inc+20j
		movzx	ecx, byte ptr [edx+esi-1]
		dec	edx
		add	eax, ecx
		mov	[edx+esi], al
		shr	eax, 8
		test	edx, edx
		jnz	short loc_2D4
		pop	esi
		retn
_ctr96_inc	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __chkstk:near	; CODE XREF: _CRYPTO_ctr128_encrypt+5p
					; _CRYPTO_ctr128_encrypt_ctr32+5p


		end
