;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	E5776FCC94474E889F1FB2A64F16DABC
; Input	CRC32 :	CDE84F37

; File Name   :	C:\compspace\Diff\openssl\obj\dsatest.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
_seed		db 0D5h			; DATA XREF: _main+C8o	_main+118r
byte_1		db 1			; DATA XREF: _main+110r
byte_2		db 4Eh			; DATA XREF: _main+108r
byte_3		db 4Bh			; DATA XREF: _main:loc_2ACr
		dd 0A82BEF60h, 401B21B6h, 2432BA62h, 0D37D42E0h
_out_q		dd 8C2173C7h, 0EEC87E73h, 2D4F3B99h, 8EF430EDh,	5F91CEDAh
					; DATA XREF: _main+1A3o
_out_p		dd 94A4F28Dh, 0AA762249h, 9B75253Dh, 0CB6968B0h, 3AD8C0EAh
					; DATA XREF: _main+1E2o
		dd 0F70C8DFBh, 4F32B8CBh, 0E582780Dh, 0C52F76D0h, 0AF0E21B7h
		dd 0ACADE9C2h, 0AC7AAB32h, 0FB3D6949h, 0C22437F8h, 0EE3607ECh
		dd 9102C831h
_out_g		dd 78026D62h, 130AEA39h, 0A5633141h, 0B54C5Bh, 22559D29h
					; DATA XREF: _main+222o
		dd 0CBEF6C95h, 0F310FF3Bh, 2E2CCE99h, 0E59DCB71h, 0BFBA24FAh
		dd 95B7E558h, 9C5C9221h, 6F9F2EC4h, 8C084B46h, 53AF72C5h
		dd 288D7E6h
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 0A8h
_str1		db '12345678901234567890',0 ; DATA XREF: _main+25Fo _main+27Ao ...
		align 10h
_rnd_seed	db 'string to make the random number generator think it has entropy',0
					; DATA XREF: _main+72o
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 100h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
_bio_err	dd ?			; DATA XREF: _main+1Br	_main+38w ...
; `dsa_cb'::`2'::ok
?ok@?1??dsa_cb@@9@9 dd ?		; DATA XREF: _dsa_cb+2Aw _dsa_cb+6Dr
; `dsa_cb'::`2'::num
?num@?1??dsa_cb@@9@9 dd	?		; DATA XREF: _dsa_cb+Cw _dsa_cb+7Ar
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dsa_cb		proc near		; DATA XREF: _main+A0o

arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	al, 2Ah	; '*'
		push	edi
		test	esi, esi
		jnz	short loc_125
		inc	ds:?num@?1??dsa_cb@@9@9	; `dsa_cb'::`2'::num
		mov	byte ptr [esp+8+arg_0],	2Eh ; '.'
		jmp	short loc_155
; ---------------------------------------------------------------------------

loc_125:				; CODE XREF: _dsa_cb+Aj
		cmp	esi, 1
		jnz	short loc_131
		mov	byte ptr [esp+8+arg_0],	2Bh ; '+'
		jmp	short loc_155
; ---------------------------------------------------------------------------

loc_131:				; CODE XREF: _dsa_cb+1Cj
		cmp	esi, 2
		jnz	short loc_143
		inc	ds:?ok@?1??dsa_cb@@9@9 ; `dsa_cb'::`2'::ok
		mov	byte ptr [esp+8+arg_0],	2Ah ; '*'
		jmp	short loc_155
; ---------------------------------------------------------------------------

loc_143:				; CODE XREF: _dsa_cb+28j
		cmp	esi, 3
		movzx	eax, al
		mov	ecx, 0Ah
		cmovz	eax, ecx
		mov	byte ptr [esp+8+arg_0],	al

loc_155:				; CODE XREF: _dsa_cb+17j _dsa_cb+23j ...
		mov	edi, [esp+8+arg_8]
		lea	eax, [esp+8+arg_0]
		push	1
		push	eax
		push	dword ptr [edi+4]
		call	_BIO_write
		push	0
		push	0
		push	0Bh
		push	dword ptr [edi+4]
		call	_BIO_ctrl
		add	esp, 1Ch
		cmp	ds:?ok@?1??dsa_cb@@9@9,	0 ; `dsa_cb'::`2'::ok
		jnz	short loc_1A2
		test	esi, esi
		jnz	short loc_1A2
		cmp	ds:?num@?1??dsa_cb@@9@9, 1 ; `dsa_cb'::`2'::num
		jle	short loc_1A2
		push	offset ??_C@_0BC@DKDLJCML@error?5in?5dsatest?6?$AA@ ; "error in	dsatest\n"
		push	edi
		call	_BIO_printf
		add	esp, 8
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1A2:				; CODE XREF: _dsa_cb+74j _dsa_cb+78j ...
		pop	edi
		mov	eax, 1
		pop	esi
		retn
_dsa_cb		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public _main
_main		proc near

var_21C		= dword	ptr -21Ch
var_218		= dword	ptr -218h
var_214		= dword	ptr -214h
var_210		= dword	ptr -210h
var_20C		= dword	ptr -20Ch
var_208		= dword	ptr -208h
var_204		= byte ptr -204h
var_104		= byte ptr -104h
var_4		= dword	ptr -4
argc		= dword	ptr  4
argv		= dword	ptr  8
envp		= dword	ptr  0Ch

		mov	eax, 21Ch
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+21Ch+var_4], eax
		push	ebx
		xor	ebx, ebx
		cmp	ds:_bio_err, ebx
		jnz	short loc_1E9
		push	ebx
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax
		call	_BIO_new_fp
		add	esp, 8
		mov	ds:_bio_err, eax

loc_1E9:				; CODE XREF: _main+21j
		push	esi
		push	edi
		push	offset _CRYPTO_dbg_get_options
		push	offset _CRYPTO_dbg_set_options
		push	offset _CRYPTO_dbg_free
		push	offset _CRYPTO_dbg_realloc
		push	offset _CRYPTO_dbg_malloc
		call	_CRYPTO_set_mem_debug_functions
		push	3
		call	_CRYPTO_dbg_set_options
		push	1
		call	_CRYPTO_mem_ctrl
		call	_ERR_load_crypto_strings
		push	40h ; '@'
		push	offset _rnd_seed ; "string to make the random number genera"...
		call	_RAND_seed
		push	offset ??_C@_0CD@EPONLEAN@test?5generation?5of?5DSA?5parameter@	; "test	generation of DSA parameters\n"
		push	ds:_bio_err
		call	_BIO_printf
		mov	eax, ds:_bio_err
		add	esp, 2Ch
		mov	[esp+228h+var_210], 2
		mov	[esp+228h+var_20C], eax
		mov	[esp+228h+var_208], offset _dsa_cb
		call	_DSA_new
		mov	edi, eax
		test	edi, edi
		jz	loc_4B3
		lea	eax, [esp+228h+var_210]
		push	eax
		lea	eax, [esp+22Ch+var_214]
		push	eax
		lea	eax, [esp+230h+var_218]
		push	eax
		push	14h
		push	offset _seed
		push	200h
		push	edi
		call	_DSA_generate_parameters_ex
		add	esp, 1Ch
		test	eax, eax
		jz	loc_4B3
		push	offset ??_C@_05CLJAFFEJ@seed?6?$AA@ ; "seed\n"
		push	ds:_bio_err
		call	_BIO_printf
		add	esp, 8
		xor	esi, esi
		nop	dword ptr [eax+eax+00000000h]

loc_2AC:				; CODE XREF: _main+139j
		movzx	eax, byte_3[esi]
		push	eax
		movzx	eax, byte_2[esi]
		push	eax
		movzx	eax, byte_1[esi]
		push	eax
		movzx	eax, _seed[esi]
		push	eax
		push	offset ??_C@_0BC@FAANNJKC@?$CF02X?$CF02X?$CF02X?$CF02X?5?$AA@ ;	"%02X%02X%02X%02X "
		push	ds:_bio_err
		call	_BIO_printf
		add	esi, 4
		add	esp, 18h
		cmp	esi, 14h
		jl	short loc_2AC
		push	[esp+228h+var_214]
		push	[esp+22Ch+var_218]
		push	offset ??_C@_0BD@LNPKCMNF@?6counter?$DN?$CFd?5h?$DN?$CFld?6?$AA@ ; "\ncounter=%d h=%ld\n"
		push	ds:_bio_err
		call	_BIO_printf
		push	0
		push	edi
		push	ds:_bio_err
		call	_DSA_print
		add	esp, 1Ch
		cmp	[esp+228h+var_218], 69h	; 'i'
		jz	short loc_321
		push	offset ??_C@_0BH@BNJKFJN@counter?5should?5be?5105?6?$AA@ ; "counter should be 105\n"
		jmp	loc_4A5
; ---------------------------------------------------------------------------

loc_321:				; CODE XREF: _main+169j
		cmp	[esp+228h+var_214], 2
		jz	short loc_332
		push	offset ??_C@_0P@NKEEOOHB@h?5should?5be?52?6?$AA@ ; "h should be	2\n"
		jmp	loc_4A5
; ---------------------------------------------------------------------------

loc_332:				; CODE XREF: _main+17Aj
		lea	eax, [esp+228h+var_204]
		push	eax
		push	dword ptr [edi+10h]
		call	_BN_bn2bin
		add	esp, 8
		cmp	eax, 14h
		jnz	loc_4A0
		lea	ecx, [esp+228h+var_204]
		mov	edx, offset _out_q
		lea	esi, [eax-4]
		nop	dword ptr [eax+eax+00h]

loc_35C:				; CODE XREF: _main+1C3j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	loc_4A0
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_35C
		lea	eax, [esp+228h+var_204]
		push	eax
		push	dword ptr [edi+0Ch]
		call	_BN_bn2bin
		add	esp, 8
		cmp	eax, 40h ; '@'
		jnz	loc_499
		lea	ecx, [esp+228h+var_204]
		mov	edx, offset _out_p
		lea	esi, [eax-4]
		nop	word ptr [eax+eax+00h]

loc_39C:				; CODE XREF: _main+203j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	loc_499
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_39C
		lea	eax, [esp+228h+var_204]
		push	eax
		push	dword ptr [edi+14h]
		call	_BN_bn2bin
		add	esp, 8
		cmp	eax, 40h ; '@'
		jnz	loc_492
		lea	ecx, [esp+228h+var_204]
		mov	edx, offset _out_g
		lea	esi, [eax-4]
		nop	word ptr [eax+eax+00h]

loc_3DC:				; CODE XREF: _main+243j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	loc_492
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_3DC
		or	dword ptr [edi+28h], 2
		push	edi
		call	_DSA_generate_key
		push	edi
		lea	eax, [esp+230h+var_21C]
		push	eax
		lea	eax, [esp+234h+var_104]
		push	eax
		push	14h
		push	offset _str1	; "12345678901234567890"
		push	0
		call	_DSA_sign
		push	edi
		push	[esp+248h+var_21C]
		lea	eax, [esp+24Ch+var_104]
		push	eax
		push	14h
		push	offset _str1	; "12345678901234567890"
		push	0
		call	_DSA_verify
		mov	ecx, 1
		cmp	eax, ecx
		push	edi
		cmovz	ebx, ecx
		and	dword ptr [edi+28h], 0FFFFFFFDh
		call	_DSA_generate_key
		push	edi
		lea	eax, [esp+264h+var_21C]
		push	eax
		lea	eax, [esp+268h+var_104]
		push	eax
		push	14h
		push	offset _str1	; "12345678901234567890"
		push	0
		call	_DSA_sign
		add	esp, 50h
		lea	eax, [esp+228h+var_104]
		push	edi
		push	[esp+22Ch+var_21C]
		push	eax
		push	14h
		push	offset _str1	; "12345678901234567890"
		push	0
		call	_DSA_verify
		add	esp, 18h
		cmp	eax, 1
		jnz	short $end$39
		mov	ebx, eax
		jmp	short loc_4C1
; ---------------------------------------------------------------------------

$end$39:				; CODE XREF: _main+2DAj
		test	ebx, ebx
		jnz	short loc_4C1
		jmp	short loc_4B3
; ---------------------------------------------------------------------------

loc_492:				; CODE XREF: _main+218j _main+234j
		push	offset ??_C@_0BC@PFGNGEMG@g?5value?5is?5wrong?6?$AA@ ; "g value	is wrong\n"
		jmp	short loc_4A5
; ---------------------------------------------------------------------------

loc_499:				; CODE XREF: _main+1D8j _main+1F4j
		push	offset ??_C@_0BC@DKOADCLK@p?5value?5is?5wrong?6?$AA@ ; "p value	is wrong\n"
		jmp	short loc_4A5
; ---------------------------------------------------------------------------

loc_4A0:				; CODE XREF: _main+199j _main+1B4j
		push	offset ??_C@_0BC@NFLCIEFL@q?5value?5is?5wrong?6?$AA@ ; "q value	is wrong\n"

loc_4A5:				; CODE XREF: _main+170j _main+181j ...
		push	ds:_bio_err
		call	_BIO_printf
		add	esp, 8

loc_4B3:				; CODE XREF: _main+B1j	_main+DDj ...
		push	ds:_bio_err
		call	_ERR_print_errors
		add	esp, 4

loc_4C1:				; CODE XREF: _main+2DEj _main+2E2j
		test	edi, edi
		jz	short loc_4CE
		push	edi
		call	_DSA_free
		add	esp, 4

loc_4CE:				; CODE XREF: _main+317j
		call	_CRYPTO_cleanup_all_ex_data
		push	0
		call	_ERR_remove_thread_state
		call	_ERR_free_strings
		push	ds:_bio_err
		call	_CRYPTO_mem_leaks
		mov	eax, ds:_bio_err
		add	esp, 8
		pop	edi
		pop	esi
		test	eax, eax
		jz	short loc_50B
		push	eax
		call	_BIO_free
		add	esp, 4
		mov	ds:_bio_err, 0

loc_50B:				; CODE XREF: _main+34Aj
		xor	eax, eax
		test	ebx, ebx
		setz	al
		push	eax		; Code
		call	dword ptr ds:__imp__exit
_main		endp

; ---------------------------------------------------------------------------
		db 5Bh
$LN38:					; $LN36
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 51Ch
; COMDAT (pick any)
		public ??_C@_0CD@EPONLEAN@test?5generation?5of?5DSA?5parameter@
; `string'
??_C@_0CD@EPONLEAN@test?5generation?5of?5DSA?5parameter@ db 'test generation of DSA parameters',0Ah,0
					; DATA XREF: _main+7Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 540h
; COMDAT (pick any)
		public ??_C@_05CLJAFFEJ@seed?6?$AA@
; `string'
??_C@_05CLJAFFEJ@seed?6?$AA@ db	'seed',0Ah,0 ; DATA XREF: _main+E3o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 548h
; COMDAT (pick any)
		public ??_C@_0BC@FAANNJKC@?$CF02X?$CF02X?$CF02X?$CF02X?5?$AA@
; `string'
??_C@_0BC@FAANNJKC@?$CF02X?$CF02X?$CF02X?$CF02X?5?$AA@ db '%02X%02X%02X%02X ',0
					; DATA XREF: _main+120o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 55Ch
; COMDAT (pick any)
		public ??_C@_0BD@LNPKCMNF@?6counter?$DN?$CFd?5h?$DN?$CFld?6?$AA@
; `string'
??_C@_0BD@LNPKCMNF@?6counter?$DN?$CFd?5h?$DN?$CFld?6?$AA@ db 0Ah ; DATA	XREF: _main+143o
		db 'counter=%d h=%ld',0Ah,0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 570h
; COMDAT (pick any)
		public ??_C@_0BH@BNJKFJN@counter?5should?5be?5105?6?$AA@
; `string'
??_C@_0BH@BNJKFJN@counter?5should?5be?5105?6?$AA@ db 'counter should be 105',0Ah,0
					; DATA XREF: _main+16Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 588h
; COMDAT (pick any)
		public ??_C@_0P@NKEEOOHB@h?5should?5be?52?6?$AA@
; `string'
??_C@_0P@NKEEOOHB@h?5should?5be?52?6?$AA@ db 'h should be 2',0Ah,0 ; DATA XREF: _main+17Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 598h
; COMDAT (pick any)
		public ??_C@_0BC@NFLCIEFL@q?5value?5is?5wrong?6?$AA@
; `string'
??_C@_0BC@NFLCIEFL@q?5value?5is?5wrong?6?$AA@ db 'q value is wrong',0Ah,0
					; DATA XREF: _main:loc_4A0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5ACh
; COMDAT (pick any)
		public ??_C@_0BC@DKOADCLK@p?5value?5is?5wrong?6?$AA@
; `string'
??_C@_0BC@DKOADCLK@p?5value?5is?5wrong?6?$AA@ db 'p value is wrong',0Ah,0
					; DATA XREF: _main:loc_499o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5C0h
; COMDAT (pick any)
		public ??_C@_0BC@PFGNGEMG@g?5value?5is?5wrong?6?$AA@
; `string'
??_C@_0BC@PFGNGEMG@g?5value?5is?5wrong?6?$AA@ db 'g value is wrong',0Ah,0
					; DATA XREF: _main:loc_492o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5D4h
; COMDAT (pick any)
		public ??_C@_0BC@DKDLJCML@error?5in?5dsatest?6?$AA@
; `string'
??_C@_0BC@DKDLJCML@error?5in?5dsatest?6?$AA@ db	'error in dsatest',0Ah,0
					; DATA XREF: _dsa_cb+83o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _main+26p
					; DATA XREF: _main+26r
; void __cdecl __noreturn _exit(int Code)
		extrn __imp__exit:near	; CODE XREF: _main+367p
					; DATA XREF: _main+367r
		extrn _CRYPTO_mem_ctrl:near ; CODE XREF: _main+66p
		extrn _CRYPTO_cleanup_all_ex_data:near ; CODE XREF: _main:loc_4CEp
		extrn _CRYPTO_set_mem_debug_functions:near ; CODE XREF:	_main+58p
		extrn _CRYPTO_dbg_malloc:near ;	DATA XREF: _main+53o
		extrn _CRYPTO_dbg_realloc:near ; DATA XREF: _main+4Eo
		extrn _CRYPTO_dbg_free:near ; DATA XREF: _main+49o
		extrn _CRYPTO_dbg_set_options:near ; CODE XREF:	_main+5Fp
					; DATA XREF: _main+44o
		extrn _CRYPTO_dbg_get_options:near ; DATA XREF:	_main+3Fo
		extrn _CRYPTO_mem_leaks:near ; CODE XREF: _main+339p
		extrn _RAND_seed:near	; CODE XREF: _main+77p
		extrn _BIO_new_fp:near	; CODE XREF: _main+30p
		extrn _BIO_free:near	; CODE XREF: _main+34Dp
		extrn _BIO_write:near	; CODE XREF: _dsa_cb+57p
		extrn _BIO_ctrl:near	; CODE XREF: _dsa_cb+65p
		extrn _BIO_printf:near	; CODE XREF: _dsa_cb+89p _main+87p ...
		extrn _ERR_print_errors:near ; CODE XREF: _main+30Dp
		extrn _ERR_load_crypto_strings:near ; CODE XREF: _main+6Bp
		extrn _ERR_free_strings:near ; CODE XREF: _main+32Ep
		extrn _ERR_remove_thread_state:near ; CODE XREF: _main+329p
		extrn _BN_bn2bin:near	; CODE XREF: _main+18Ep _main+1CDp ...
		extrn _DSA_new:near	; CODE XREF: _main+A8p
		extrn _DSA_free:near	; CODE XREF: _main+31Ap
		extrn _DSA_sign:near	; CODE XREF: _main+266p _main+2B1p
		extrn _DSA_verify:near	; CODE XREF: _main+281p _main+2CFp
		extrn _DSA_generate_parameters_ex:near ; CODE XREF: _main+D3p
		extrn _DSA_generate_key:near ; CODE XREF: _main+24Ap
					; _main+295p
		extrn _DSA_print:near	; CODE XREF: _main+15Cp
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
		extrn __chkstk:near	; CODE XREF: _main+5p
		extrn ___security_cookie:near ;	DATA XREF: _main+Ar


		end
