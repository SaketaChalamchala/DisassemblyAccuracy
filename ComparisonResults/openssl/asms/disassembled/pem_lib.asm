;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	AEC489CD3FA735E8B704AA3189BE1399
; Input	CRC32 :	EAEC9F6F

; File Name   :	C:\compspace\Diff\openssl\obj\pem_lib.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		public _PEM_version
_PEM_version	db 'PEM part of OpenSSL 1.0.2h  3 May 2016',0
		align 4
; `PEM_dek_info'::`2'::map
?map@?1??PEM_dek_info@@9@9 db 30h	; DATA XREF: _PEM_dek_info+7Ar
					; _PEM_dek_info+8Cr
a123456789abcde	db '123456789ABCDEF',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_ASN1_read
_PEM_ASN1_read	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	edi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_6D
		push	0ACh ; '¬'
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	7
		push	66h ; 'f'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6D:					; CODE XREF: _PEM_ASN1_read+13j
		push	esi
		push	[esp+8+arg_8]
		push	0
		push	6Ah ; 'j'
		push	edi
		call	_BIO_ctrl
		push	[esp+18h+arg_14]
		push	[esp+1Ch+arg_10]
		push	[esp+20h+arg_C]
		push	edi
		push	[esp+28h+arg_4]
		push	[esp+2Ch+arg_0]
		call	_PEM_ASN1_read_bio
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 2Ch
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_PEM_ASN1_read	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_ASN1_write
_PEM_ASN1_write	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		push	edi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_D9
		push	147h
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	7
		push	68h ; 'h'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_D9:					; CODE XREF: _PEM_ASN1_write+13j
		push	esi
		push	[esp+8+arg_8]
		push	0
		push	6Ah ; 'j'
		push	edi
		call	_BIO_ctrl
		push	[esp+18h+arg_20]
		push	[esp+1Ch+arg_1C]
		push	[esp+20h+arg_18]
		push	[esp+24h+arg_14]
		push	[esp+28h+arg_10]
		push	[esp+2Ch+arg_C]
		push	edi
		push	[esp+34h+arg_4]
		push	[esp+38h+arg_0]
		call	_PEM_ASN1_write_bio
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 38h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_PEM_ASN1_write	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 120h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_ASN1_write_bio
_PEM_ASN1_write_bio proc near		; CODE XREF: _PEM_ASN1_write+61p

var_528		= qword	ptr -528h
var_510		= dword	ptr -510h
var_50C		= dword	ptr -50Ch
var_508		= dword	ptr -508h
var_504		= dword	ptr -504h
Src		= dword	ptr -500h
var_4FC		= dword	ptr -4FCh
var_4F8		= dword	ptr -4F8h
var_4F4		= dword	ptr -4F4h
var_4F0		= dword	ptr -4F0h
var_4EC		= dword	ptr -4ECh
var_4E8		= dword	ptr -4E8h
var_4E4		= dword	ptr -4E4h
var_4E0		= byte ptr -4E0h
var_454		= byte ptr -454h
var_444		= byte ptr -444h
Dst		= byte ptr -404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		mov	eax, 510h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+510h+var_4], eax
		mov	eax, [esp+510h+arg_0]
		mov	[esp+510h+var_504], eax
		mov	eax, [esp+510h+arg_4]
		push	ebx
		mov	ebx, [esp+514h+arg_10]
		mov	[esp+514h+var_4E8], eax
		mov	eax, [esp+514h+arg_8]
		push	ebp
		mov	ebp, [esp+518h+arg_14]
		mov	[esp+518h+var_4E4], eax
		mov	eax, [esp+518h+arg_C]
		push	esi
		mov	[esp+51Ch+var_508], eax
		xor	esi, esi
		mov	eax, [esp+51Ch+arg_1C]
		push	edi
		mov	[esp+520h+var_4EC], eax
		xor	edi, edi
		mov	eax, [esp+520h+arg_20]
		mov	[esp+520h+var_4FC], ebp
		mov	[esp+520h+Src],	eax
		mov	[esp+520h+var_4F8], esi
		test	ebx, ebx
		jz	short loc_1DF
		push	ebx
		call	_EVP_CIPHER_nid
		push	eax
		call	_OBJ_nid2sn
		add	esp, 8
		mov	[esp+520h+var_4F8], eax
		test	eax, eax
		jz	short loc_1C0
		push	ebx
		call	_EVP_CIPHER_iv_length
		add	esp, 4
		test	eax, eax
		jnz	short loc_1DF

loc_1C0:				; CODE XREF: _PEM_ASN1_write_bio+91j
		push	160h
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	71h ; 'q'
		push	69h ; 'i'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	ebx, ebx
		jmp	$err$38
; ---------------------------------------------------------------------------

loc_1DF:				; CODE XREF: _PEM_ASN1_write_bio+7Aj
					; _PEM_ASN1_write_bio+9Ej
		push	0
		push	[esp+524h+var_508]
		call	[esp+528h+var_504]
		add	esp, 8
		mov	[esp+520h+var_50C], eax
		test	eax, eax
		jns	short loc_213
		push	166h
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	0Dh
		push	69h ; 'i'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	ebx, ebx
		jmp	$err$38
; ---------------------------------------------------------------------------

loc_213:				; CODE XREF: _PEM_ASN1_write_bio+D2j
		push	16Ch
		add	eax, 14h
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	eax
		call	_CRYPTO_malloc
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_24C
		push	16Eh
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	41h ; 'A'
		push	69h ; 'i'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_4A2
; ---------------------------------------------------------------------------

loc_24C:				; CODE XREF: _PEM_ASN1_write_bio+10Dj
		lea	eax, [esp+520h+var_4F0]
		mov	[esp+520h+var_4F0], edi
		push	eax
		push	[esp+524h+var_508]
		call	[esp+528h+var_504]
		add	esp, 8
		mov	ecx, eax
		mov	[esp+520h+var_510], ecx
		test	ebx, ebx
		jz	loc_470
		test	ebp, ebp
		jnz	short loc_2D5
		push	[esp+520h+Src]	; Src
		mov	eax, [esp+524h+var_4EC]
		push	1		; int
		push	400h		; Size
		test	eax, eax
		jnz	short loc_294
		lea	eax, [esp+52Ch+Dst]
		push	eax		; Dst
		call	_PEM_def_callback
		jmp	short loc_29E
; ---------------------------------------------------------------------------

loc_294:				; CODE XREF: _PEM_ASN1_write_bio+163j
		lea	ecx, [esp+52Ch+Dst]
		push	ecx
		call	eax

loc_29E:				; CODE XREF: _PEM_ASN1_write_bio+172j
		mov	ebp, eax
		add	esp, 10h
		test	ebp, ebp
		jg	short loc_2C4
		push	17Bh
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	6Fh ; 'o'
		push	69h ; 'i'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_4A2
; ---------------------------------------------------------------------------

loc_2C4:				; CODE XREF: _PEM_ASN1_write_bio+185j
		mov	ecx, [esp+520h+var_510]
		lea	eax, [esp+520h+Dst]
		mov	[esp+520h+var_4FC], eax
		jmp	short loc_2DC
; ---------------------------------------------------------------------------

loc_2D5:				; CODE XREF: _PEM_ASN1_write_bio+150j
		mov	ebp, [esp+520h+arg_18]

loc_2DC:				; CODE XREF: _PEM_ASN1_write_bio+1B3j
		mov	eax, 8
		call	__chkstk
		xorps	xmm0, xmm0
		movsd	[esp+528h+var_528], xmm0
		push	ecx
		push	edi
		call	_RAND_add
		add	esp, 10h
		cmp	dword ptr [ebx+0Ch], 10h
		jle	short loc_315
		push	offset ??_C@_0BP@LNNHPGMG@enc?9?$DOiv_len?5?$DM?$DN?5?$CIint?$CJsizeof?$CIiv?$CJ?$AA@ ;	"enc->iv_len <=	(int)sizeof(iv)"
		push	185h
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		call	_OpenSSLDie
		add	esp, 0Ch

loc_315:				; CODE XREF: _PEM_ASN1_write_bio+1DCj
		push	dword ptr [ebx+0Ch]
		lea	eax, [esp+524h+var_454]
		push	eax
		call	_RAND_pseudo_bytes
		add	esp, 8
		test	eax, eax
		js	loc_4A2
		push	0
		lea	eax, [esp+524h+var_444]
		push	eax
		push	1
		push	ebp
		mov	ebp, [esp+530h+var_4FC]
		lea	eax, [esp+530h+var_454]
		push	ebp
		push	eax
		call	_EVP_md5
		push	eax
		push	ebx
		call	_EVP_BytesToKey
		add	esp, 20h
		test	eax, eax
		jz	loc_4A2
		lea	eax, [esp+520h+Dst]
		cmp	ebp, eax
		jnz	short loc_37A
		push	400h
		push	eax
		call	_OPENSSL_cleanse
		add	esp, 8

loc_37A:				; CODE XREF: _PEM_ASN1_write_bio+24Aj
		mov	esi, [esp+520h+var_4F8]
		mov	ecx, esi
		lea	edx, [ecx+1]

loc_383:				; CODE XREF: _PEM_ASN1_write_bio+268j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_383
		mov	eax, [ebx+0Ch]
		sub	ecx, edx
		add	eax, 12h
		lea	eax, [ecx+eax*2]
		cmp	eax, 400h
		jbe	short loc_3B3
		push	offset ??_C@_0DJ@PLAABAEP@strlen?$CIobjstr?$CJ?5?$CL?523?5?$CL?52?5?$CK?5enc?9?$DOi@ ; "strlen(objstr) + 23 + 2	* enc->iv_len +"...
		push	193h
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		call	_OpenSSLDie
		add	esp, 0Ch

loc_3B3:				; CODE XREF: _PEM_ASN1_write_bio+27Aj
		lea	eax, [esp+520h+Dst]
		mov	[esp+520h+Dst],	0
		push	0Ah
		push	eax
		call	_PEM_proc_type
		lea	eax, [esp+528h+var_454]
		push	eax
		push	dword ptr [ebx+0Ch]
		lea	eax, [esp+530h+Dst]
		push	esi
		push	eax
		call	_PEM_dek_info
		lea	eax, [esp+538h+var_4E0]
		push	eax
		call	_EVP_CIPHER_CTX_init
		lea	eax, [esp+53Ch+var_454]
		mov	esi, 1
		push	eax
		lea	eax, [esp+540h+var_444]
		push	eax
		push	0
		lea	eax, [esp+548h+var_4E0]
		push	ebx
		push	eax
		call	_EVP_EncryptInit_ex
		add	esp, 30h
		test	eax, eax
		jz	short loc_44F
		push	[esp+520h+var_510]
		lea	eax, [esp+524h+var_4F4]
		push	edi
		push	eax
		lea	eax, [esp+52Ch+var_4E0]
		push	edi
		push	eax
		call	_EVP_EncryptUpdate
		add	esp, 14h
		test	eax, eax
		jz	short loc_44F
		lea	eax, [esp+520h+var_510]
		push	eax
		mov	eax, [esp+524h+var_4F4]
		add	eax, edi
		push	eax
		lea	eax, [esp+528h+var_4E0]
		push	eax
		call	_EVP_EncryptFinal_ex
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_451

loc_44F:				; CODE XREF: _PEM_ASN1_write_bio+2F4j
					; _PEM_ASN1_write_bio+310j
		xor	esi, esi

loc_451:				; CODE XREF: _PEM_ASN1_write_bio+32Dj
		lea	eax, [esp+520h+var_4E0]
		push	eax
		call	_EVP_CIPHER_CTX_cleanup
		add	esp, 4
		test	esi, esi
		jz	short loc_4A2
		mov	ecx, [esp+520h+var_510]
		add	ecx, [esp+520h+var_4F4]
		mov	[esp+520h+var_510], ecx
		jmp	short loc_47D
; ---------------------------------------------------------------------------

loc_470:				; CODE XREF: _PEM_ASN1_write_bio+148j
		mov	esi, 1
		mov	[esp+520h+Dst],	0

loc_47D:				; CODE XREF: _PEM_ASN1_write_bio+34Ej
		push	ecx
		push	edi
		lea	eax, [esp+528h+Dst]
		push	eax
		push	[esp+52Ch+var_4E8]
		push	[esp+530h+var_4E4]
		call	_PEM_write_bio
		xor	ecx, ecx
		mov	[esp+534h+var_510], eax
		add	esp, 14h
		test	eax, eax
		cmovle	esi, ecx

loc_4A2:				; CODE XREF: _PEM_ASN1_write_bio+127j
					; _PEM_ASN1_write_bio+19Fj ...
		mov	ebx, [esp+520h+var_50C]

$err$38:				; CODE XREF: _PEM_ASN1_write_bio+BAj
					; _PEM_ASN1_write_bio+EEj
		lea	eax, [esp+520h+var_444]
		push	40h ; '@'
		push	eax
		call	_OPENSSL_cleanse
		lea	eax, [esp+528h+var_454]
		push	10h
		push	eax
		call	_OPENSSL_cleanse
		lea	eax, [esp+530h+var_4E0]
		push	8Ch ; ''
		push	eax
		call	_OPENSSL_cleanse
		lea	eax, [esp+538h+Dst]
		push	400h
		push	eax
		call	_OPENSSL_cleanse
		add	esp, 20h
		test	edi, edi
		jz	short loc_4FC
		push	ebx
		push	edi
		call	_OPENSSL_cleanse
		push	edi
		call	_CRYPTO_free
		add	esp, 0Ch

loc_4FC:				; CODE XREF: _PEM_ASN1_write_bio+3CAj
		mov	ecx, [esp+520h+var_4]
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 510h
		retn
_PEM_ASN1_write_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 518h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_bytes_read_bio
_PEM_bytes_read_bio proc near

Str1		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
Src		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, 3Ch ; '<'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+3Ch+var_4], eax
		mov	ecx, [esp+3Ch+arg_14]
		mov	eax, [esp+3Ch+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+44h+arg_8]
		xor	ebx, ebx
		mov	[esp+44h+var_24], ecx
		mov	ecx, [esp+44h+arg_18]
		push	esi
		push	edi
		mov	edi, [esp+4Ch+arg_C]
		mov	[esp+4Ch+Src], ecx
		lea	ecx, [esp+4Ch+var_30]
		push	ecx
		lea	ecx, [esp+50h+var_38]
		mov	[esp+50h+var_20], eax
		mov	eax, [esp+50h+arg_4]
		push	ecx
		lea	ecx, [esp+54h+Str1]
		mov	[esp+54h+var_1C], eax
		mov	eax, [esp+54h+arg_10]
		push	ecx
		lea	ecx, [esp+58h+var_34]
		mov	[esp+58h+var_2C], eax
		push	ecx
		push	eax
		mov	[esp+60h+var_34], 0
		mov	[esp+60h+Str1],	0
		mov	[esp+60h+var_38], 0
		call	_PEM_read_bio
		add	esp, 14h
		test	eax, eax
		jz	short loc_5EA

loc_59C:				; CODE XREF: _PEM_bytes_read_bio+D0j
		mov	esi, [esp+4Ch+var_34]
		push	edi
		push	esi
		call	_check_pem
		add	esp, 8
		test	eax, eax
		jnz	short loc_61E
		push	esi
		call	_CRYPTO_free
		push	[esp+50h+Str1]
		call	_CRYPTO_free
		push	[esp+54h+var_38]
		call	_CRYPTO_free
		lea	eax, [esp+58h+var_30]
		push	eax
		lea	eax, [esp+5Ch+var_38]
		push	eax
		lea	eax, [esp+60h+Str1]
		push	eax
		lea	eax, [esp+64h+var_34]
		push	eax
		push	[esp+68h+var_2C]
		call	_PEM_read_bio
		add	esp, 20h
		test	eax, eax
		jnz	short loc_59C

loc_5EA:				; CODE XREF: _PEM_bytes_read_bio+82j
		call	_ERR_peek_error
		and	eax, 0FFFh
		cmp	eax, 6Ch ; 'l'
		jnz	short loc_609
		push	edi
		push	offset ??_C@_0M@NNIFEEDF@Expecting?3?5?$AA@ ; "Expecting: "
		push	2
		call	_ERR_add_error_data
		add	esp, 0Ch

loc_609:				; CODE XREF: _PEM_bytes_read_bio+DFj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_61E:				; CODE XREF: _PEM_bytes_read_bio+94j
		lea	eax, [esp+4Ch+var_18]
		push	eax		; int
		push	[esp+50h+Str1]	; Str1
		call	_PEM_get_EVP_CIPHER_INFO
		mov	edi, [esp+54h+var_38]
		add	esp, 8
		test	eax, eax
		jz	short loc_676
		push	[esp+4Ch+Src]	; Src
		lea	eax, [esp+50h+var_30]
		push	[esp+50h+var_24] ; int
		push	eax		; int
		lea	eax, [esp+58h+var_18]
		push	edi		; int
		push	eax		; int
		call	_PEM_do_header
		add	esp, 14h
		test	eax, eax
		jz	short loc_676
		mov	eax, [esp+4Ch+var_20]
		mov	ecx, [esp+4Ch+var_1C]
		mov	[eax], edi
		mov	eax, [esp+4Ch+var_30]
		mov	[ecx], eax
		test	ebp, ebp
		jz	short loc_66D
		mov	[ebp+0], esi

loc_66D:				; CODE XREF: _PEM_bytes_read_bio+150j
		mov	ebx, 1
		test	ebp, ebp
		jnz	short loc_67F

loc_676:				; CODE XREF: _PEM_bytes_read_bio+11Dj
					; _PEM_bytes_read_bio+13Cj
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_67F:				; CODE XREF: _PEM_bytes_read_bio+15Cj
		push	[esp+4Ch+Str1]
		call	_CRYPTO_free
		add	esp, 4
		test	ebx, ebx
		jnz	short loc_698
		push	edi
		call	_CRYPTO_free
		add	esp, 4

loc_698:				; CODE XREF: _PEM_bytes_read_bio+175j
		mov	ecx, [esp+4Ch+var_4]
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
_PEM_bytes_read_bio endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl PEM_def_callback(void *Dst, size_t Size, int, void *Src)
		public _PEM_def_callback
_PEM_def_callback proc near		; CODE XREF: _PEM_ASN1_write_bio+16Dp
					; _PEM_do_header+82p

Dst		= dword	ptr  4
Size		= dword	ptr  8
arg_8		= dword	ptr  0Ch
Src		= dword	ptr  10h

		mov	edx, [esp+Src]
		push	esi
		test	edx, edx
		jz	short loc_6E4
		mov	esi, edx
		lea	ecx, [esi+1]
		xchg	ax, ax

loc_6C0:				; CODE XREF: _PEM_def_callback+15j
		mov	al, [esi]
		inc	esi
		test	al, al
		jnz	short loc_6C0
		sub	esi, ecx
		cmp	esi, [esp+4+Size]
		cmovg	esi, [esp+4+Size]
		push	esi		; Size
		push	edx		; Src
		push	[esp+0Ch+Dst]	; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6E4:				; CODE XREF: _PEM_def_callback+7j
		push	ebx
		push	ebp
		push	edi
		call	_EVP_get_pw_prompt
		mov	ebp, [esp+10h+arg_8]
		test	eax, eax
		mov	ebx, [esp+10h+Size]
		mov	edi, offset ??_C@_0BH@FDMMOMD@Enter?5PEM?5pass?5phrase?3?$AA@ ;	"Enter PEM pass	phrase:"
		mov	esi, [esp+10h+Dst]
		cmovnz	edi, eax
		push	ebp
		push	edi
		push	ebx
		push	4
		push	esi
		call	_EVP_read_pw_string_min
		add	esp, 14h
		test	eax, eax
		jnz	short loc_758

loc_714:				; CODE XREF: _PEM_def_callback+A6j
		mov	eax, esi
		lea	edx, [eax+1]
		nop	dword ptr [eax+00000000h]

loc_720:				; CODE XREF: _PEM_def_callback+75j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_720
		sub	eax, edx
		cmp	eax, 4
		jge	short loc_779
		push	4
		push	offset ??_C@_0DE@MBHEFEFO@phrase?5is?5too?5short?0?5needs?5to?5be@ ; "phrase is	too short, needs to be at lea"...
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		push	eax		; File
		call	_fprintf
		push	ebp
		push	edi
		push	ebx
		push	4
		push	esi
		call	_EVP_read_pw_string_min
		add	esp, 20h
		test	eax, eax
		jz	short loc_714

loc_758:				; CODE XREF: _PEM_def_callback+62j
		push	6Eh ; 'n'
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	6Dh ; 'm'
		push	64h ; 'd'
		push	9
		call	_ERR_put_error
		push	ebx		; Size
		push	0		; Val
		push	esi		; Dst
		call	_memset
		add	esp, 20h
		or	eax, 0FFFFFFFFh

loc_779:				; CODE XREF: _PEM_def_callback+7Cj
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		retn
_PEM_def_callback endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 780h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_dek_info
_PEM_dek_info	proc near		; CODE XREF: _PEM_ASN1_write_bio+2BEp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	edi
		mov	edi, [esp+8+arg_0]
		push	400h
		push	offset ??_C@_0L@JOOMHNBL@DEK?9Info?3?5?$AA@ ; "DEK-Info: "
		push	edi
		call	_BUF_strlcat
		push	400h
		push	[esp+18h+arg_4]
		push	edi
		call	_BUF_strlcat
		push	400h
		push	offset ??_C@_01IHBHIGKO@?0?$AA@	; `string'
		push	edi
		call	_BUF_strlcat
		mov	eax, edi
		add	esp, 24h
		lea	edx, [eax+1]
		nop	dword ptr [eax]

loc_7C0:				; CODE XREF: _PEM_dek_info+45j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_7C0
		mov	ebx, [esp+8+arg_8]
		sub	eax, edx
		lea	ecx, ds:1[ebx*2]
		add	ecx, eax
		cmp	ecx, 400h
		jg	short loc_825
		xor	edx, edx
		test	ebx, ebx
		jle	short loc_81C
		push	ebp
		mov	ebp, [esp+0Ch+arg_C]
		push	esi
		lea	esi, [eax+edi]
		nop	dword ptr [eax]

loc_7F0:				; CODE XREF: _PEM_dek_info+98j
		movzx	ecx, byte ptr [edx+ebp]
		lea	esi, [esi+2]
		shr	ecx, 4
		movzx	ecx, ?map@?1??PEM_dek_info@@9@9[ecx] ; `PEM_dek_info'::`2'::map
		mov	[esi-2], cl
		movsx	ecx, byte ptr [edx+ebp]
		inc	edx
		and	ecx, 0Fh
		movzx	ecx, ?map@?1??PEM_dek_info@@9@9[ecx] ; `PEM_dek_info'::`2'::map
		mov	[esi-1], cl
		cmp	edx, ebx
		jl	short loc_7F0
		pop	esi
		pop	ebp

loc_81C:				; CODE XREF: _PEM_dek_info+62j
		lea	eax, [eax+edx*2]
		mov	word ptr [eax+edi], 0Ah

loc_825:				; CODE XREF: _PEM_dek_info+5Cj
		pop	edi
		pop	ebx
		retn
_PEM_dek_info	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 828h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl PEM_do_header(int, int, int, int,	void *Src)
		public _PEM_do_header
_PEM_do_header	proc near		; CODE XREF: _PEM_bytes_read_bio+132p

var_4DC		= dword	ptr -4DCh
var_4D8		= dword	ptr -4D8h
var_4D4		= dword	ptr -4D4h
var_4D0		= byte ptr -4D0h
var_444		= byte ptr -444h
Dst		= byte ptr -404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
Src		= dword	ptr  14h

		mov	eax, 4DCh
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+4DCh+var_4], eax
		mov	eax, [esp+4DCh+arg_C]
		mov	ecx, [esp+4DCh+Src]
		push	ebx
		mov	ebx, [esp+4E0h+arg_8]
		push	esi
		mov	esi, [esp+4E4h+arg_0]
		push	edi
		mov	edx, [ebx]
		mov	edi, [esp+4E8h+arg_4]
		cmp	dword ptr [esi], 0
		mov	[esp+4E8h+var_4DC], 0
		mov	[esp+4E8h+var_4D4], edx
		jnz	short loc_896
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		mov	ecx, [esp+4DCh+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4DCh
		retn
; ---------------------------------------------------------------------------

loc_896:				; CODE XREF: _PEM_do_header+4Fj
		push	ecx		; Src
		push	0		; int
		push	400h		; Size
		test	eax, eax
		jnz	short loc_8B1
		lea	eax, [esp+4F4h+Dst]
		push	eax		; Dst
		call	_PEM_def_callback
		jmp	short loc_8BB
; ---------------------------------------------------------------------------

loc_8B1:				; CODE XREF: _PEM_do_header+78j
		lea	ecx, [esp+4F4h+Dst]
		push	ecx
		call	eax

loc_8BB:				; CODE XREF: _PEM_do_header+87j
		add	esp, 10h
		test	eax, eax
		jg	short loc_8F4
		push	1C9h
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	68h ; 'h'
		push	6Ah ; 'j'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+4DCh+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4DCh
		retn
; ---------------------------------------------------------------------------

loc_8F4:				; CODE XREF: _PEM_do_header+98j
		push	ebp
		push	0
		lea	ecx, [esp+4F0h+var_444]
		push	ecx
		push	1
		push	eax
		lea	eax, [esp+4FCh+Dst]
		push	eax
		lea	ebp, [esi+4]
		push	ebp
		call	_EVP_md5
		push	eax
		push	dword ptr [esi]
		call	_EVP_BytesToKey
		add	esp, 20h
		test	eax, eax
		jz	loc_9EC
		mov	eax, [esp+4ECh+var_4D4]
		mov	[esp+4ECh+var_4D8], eax
		lea	eax, [esp+4ECh+var_4D0]
		push	eax
		call	_EVP_CIPHER_CTX_init
		push	ebp
		lea	eax, [esp+4F4h+var_444]
		push	eax
		push	0
		push	dword ptr [esi]
		lea	eax, [esp+500h+var_4D0]
		push	eax
		call	_EVP_DecryptInit_ex
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jz	short loc_991
		push	[esp+4ECh+var_4D8]
		lea	eax, [esp+4F0h+var_4DC]
		push	edi
		push	eax
		lea	eax, [esp+4F8h+var_4D0]
		push	edi
		push	eax
		call	_EVP_DecryptUpdate
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jz	short loc_991
		lea	eax, [esp+4ECh+var_4D8]
		push	eax
		mov	eax, [esp+4F0h+var_4DC]
		add	eax, edi
		push	eax
		lea	eax, [esp+4F4h+var_4D0]
		push	eax
		call	_EVP_DecryptFinal_ex
		add	esp, 0Ch
		mov	esi, eax

loc_991:				; CODE XREF: _PEM_do_header+12Ej
					; _PEM_do_header+14Cj
		lea	eax, [esp+4ECh+var_4D0]
		push	eax
		call	_EVP_CIPHER_CTX_cleanup
		lea	eax, [esp+4F0h+Dst]
		push	400h
		push	eax
		call	_OPENSSL_cleanse
		lea	eax, [esp+4F8h+var_444]
		push	40h ; '@'
		push	eax
		call	_OPENSSL_cleanse
		add	esp, 14h
		test	esi, esi
		jz	short loc_9D4
		mov	eax, [esp+4ECh+var_4D8]
		add	eax, [esp+4ECh+var_4DC]
		mov	[ebx], eax
		mov	eax, 1
		jmp	short loc_9EE
; ---------------------------------------------------------------------------

loc_9D4:				; CODE XREF: _PEM_do_header+199j
		push	1E2h
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	65h ; 'e'
		push	6Ah ; 'j'
		push	9
		call	_ERR_put_error
		add	esp, 14h

loc_9EC:				; CODE XREF: _PEM_do_header+F8j
		xor	eax, eax

loc_9EE:				; CODE XREF: _PEM_do_header+1AAj
		mov	ecx, [esp+4ECh+var_4]
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4DCh
		retn
_PEM_do_header	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A08h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl PEM_get_EVP_CIPHER_INFO(char *Str1, int)
		public _PEM_get_EVP_CIPHER_INFO
_PEM_get_EVP_CIPHER_INFO proc near	; CODE XREF: _PEM_bytes_read_bio+10Fp

Str1		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		mov	ebp, [esp+4+arg_4]
		push	esi
		mov	esi, [esp+8+Str1]
		mov	dword ptr [ebp+0], 0
		test	esi, esi
		jz	loc_B8A
		mov	al, [esi]
		test	al, al
		jz	loc_B8A
		cmp	al, 0Ah
		jz	loc_B8A
		push	edi
		mov	edi, dword ptr ds:__imp__strncmp
		push	0Bh		; MaxCount
		push	offset ??_C@_0M@ILILCPAC@Proc?9Type?3?5?$AA@ ; "Proc-Type: "
		push	esi		; Str1
		call	edi ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_A69
		push	1F3h
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	6Bh ; 'k'
		push	6Bh ; 'k'
		push	9
		call	_ERR_put_error
		add	esp, 14h

loc_A63:				; CODE XREF: _PEM_get_EVP_CIPHER_INFO+65j
					; _PEM_get_EVP_CIPHER_INFO+6Bj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_A69:				; CODE XREF: _PEM_get_EVP_CIPHER_INFO+41j
		cmp	byte ptr [esi+0Bh], 34h	; '4'
		jnz	short loc_A63
		cmp	byte ptr [esi+0Ch], 2Ch	; ','
		jnz	short loc_A63
		push	9		; MaxCount
		add	esi, 0Dh
		push	offset ??_C@_09NEFHHFED@ENCRYPTED?$AA@ ; "ENCRYPTED"
		push	esi		; Str1
		call	edi ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_AA7
		push	1FEh
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	6Ah ; 'j'
		push	6Bh ; 'k'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_AA7:				; CODE XREF: _PEM_get_EVP_CIPHER_INFO+7Fj
		mov	al, [esi]
		cmp	al, 0Ah
		jz	short loc_AB9

loc_AAD:				; CODE XREF: _PEM_get_EVP_CIPHER_INFO+AFj
		test	al, al
		jz	short loc_ABE
		mov	al, [esi+1]
		inc	esi
		cmp	al, 0Ah
		jnz	short loc_AAD

loc_AB9:				; CODE XREF: _PEM_get_EVP_CIPHER_INFO+A3j
		cmp	byte ptr [esi],	0
		jnz	short loc_ADC

loc_ABE:				; CODE XREF: _PEM_get_EVP_CIPHER_INFO+A7j
		push	203h
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	70h ; 'p'
		push	6Bh ; 'k'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_ADC:				; CODE XREF: _PEM_get_EVP_CIPHER_INFO+B4j
		push	0Ah		; MaxCount
		inc	esi
		push	offset ??_C@_0L@JOOMHNBL@DEK?9Info?3?5?$AA@ ; "DEK-Info: "
		push	esi		; Str1
		call	edi ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_B0C
		push	208h
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	69h ; 'i'
		push	6Bh ; 'k'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_B0C:				; CODE XREF: _PEM_get_EVP_CIPHER_INFO+E4j
		add	esi, 0Ah
		mov	ecx, esi
		push	ebx
		nop	word ptr [eax+eax+00h]

loc_B18:				; CODE XREF: _PEM_get_EVP_CIPHER_INFO+129j
		mov	bl, [esi]
		cmp	bl, 41h	; 'A'
		jl	short loc_B24
		cmp	bl, 5Ah	; 'Z'
		jle	short loc_B30

loc_B24:				; CODE XREF: _PEM_get_EVP_CIPHER_INFO+115j
		cmp	bl, 2Dh	; '-'
		jz	short loc_B30
		lea	eax, [ebx-30h]
		cmp	al, 9
		ja	short loc_B33

loc_B30:				; CODE XREF: _PEM_get_EVP_CIPHER_INFO+11Aj
					; _PEM_get_EVP_CIPHER_INFO+11Fj
		inc	esi
		jmp	short loc_B18
; ---------------------------------------------------------------------------

loc_B33:				; CODE XREF: _PEM_get_EVP_CIPHER_INFO+126j
		push	ecx
		mov	byte ptr [esi],	0
		call	_EVP_get_cipherbyname
		add	esp, 4
		mov	[ebp+0], eax
		mov	[esi], bl
		inc	esi
		mov	[esp+10h+Str1],	esi
		pop	ebx
		test	eax, eax
		jnz	short loc_B6C
		push	220h
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	72h ; 'r'
		push	6Bh ; 'k'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_B6C:				; CODE XREF: _PEM_get_EVP_CIPHER_INFO+144j
		push	dword ptr [eax+0Ch]
		lea	eax, [ebp+4]
		push	eax
		lea	eax, [esp+14h+Str1]
		push	eax
		call	_load_iv
		add	esp, 0Ch
		neg	eax
		sbb	eax, eax
		neg	eax
		pop	edi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_B8A:				; CODE XREF: _PEM_get_EVP_CIPHER_INFO+13j
					; _PEM_get_EVP_CIPHER_INFO+1Dj	...
		pop	esi
		mov	eax, 1
		pop	ebp
		retn
_PEM_get_EVP_CIPHER_INFO endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B94h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_proc_type
_PEM_proc_type	proc near		; CODE XREF: _PEM_ASN1_write_bio+2A5p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		push	edi
		cmp	eax, 0Ah
		jnz	short loc_BA6
		mov	edi, offset ??_C@_09NEFHHFED@ENCRYPTED?$AA@ ; "ENCRYPTED"
		jmp	short loc_BC2
; ---------------------------------------------------------------------------

loc_BA6:				; CODE XREF: _PEM_proc_type+9j
		cmp	eax, 1Eh
		jnz	short loc_BB2
		mov	edi, offset ??_C@_09ENKIIODD@MIC?9CLEAR?$AA@ ; "MIC-CLEAR"
		jmp	short loc_BC2
; ---------------------------------------------------------------------------

loc_BB2:				; CODE XREF: _PEM_proc_type+15j
		cmp	eax, 14h
		mov	edi, offset ??_C@_08HNLJNNOE@MIC?9ONLY?$AA@ ; "MIC-ONLY"
		mov	ecx, offset ??_C@_08JNPHPJPC@BAD?9TYPE?$AA@ ; "BAD-TYPE"
		cmovnz	edi, ecx

loc_BC2:				; CODE XREF: _PEM_proc_type+10j
					; _PEM_proc_type+1Cj
		mov	esi, [esp+8+arg_0]
		push	400h
		push	offset ??_C@_0O@IDLEPCLC@Proc?9Type?3?54?0?$AA@	; "Proc-Type: 4,"
		push	esi
		call	_BUF_strlcat
		push	400h
		push	edi
		push	esi
		call	_BUF_strlcat
		push	400h
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	esi
		call	_BUF_strlcat
		add	esp, 24h
		pop	edi
		pop	esi
		retn
_PEM_proc_type	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BF8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read
_PEM_read	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	edi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_C29
		push	299h
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	7
		push	6Ch ; 'l'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_C29:				; CODE XREF: _PEM_read+13j
		push	esi
		push	[esp+8+arg_0]
		push	0
		push	6Ah ; 'j'
		push	edi
		call	_BIO_ctrl
		push	[esp+18h+arg_10]
		push	[esp+1Ch+arg_C]
		push	[esp+20h+arg_8]
		push	[esp+24h+arg_4]
		push	edi
		call	_PEM_read_bio
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 28h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_PEM_read	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C60h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_read_bio
_PEM_read_bio	proc near		; CODE XREF: _PEM_bytes_read_bio+78p
					; _PEM_bytes_read_bio+C6p ...

var_18C		= dword	ptr -18Ch
var_188		= dword	ptr -188h
var_184		= dword	ptr -184h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= dword	ptr -178h
var_174		= dword	ptr -174h
var_170		= dword	ptr -170h
var_16C		= dword	ptr -16Ch
var_168		= dword	ptr -168h
var_164		= byte ptr -164h
Str1		= byte ptr -104h
var_103		= byte ptr -103h
var_FF		= byte ptr -0FFh
Str2		= byte ptr -0FBh
Src		= byte ptr -0F9h
var_6		= byte ptr -6
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 18Ch
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+18Ch+var_4], eax
		mov	eax, [esp+18Ch+arg_4]
		mov	[esp+18Ch+var_174], eax
		mov	eax, [esp+18Ch+arg_8]
		push	ebx
		mov	ebx, [esp+190h+arg_0]
		mov	[esp+190h+var_170], eax
		mov	eax, [esp+190h+arg_C]
		mov	[esp+190h+var_16C], eax
		mov	eax, [esp+190h+arg_10]
		push	ebp
		mov	[esp+194h+var_168], eax
		xor	eax, eax
		push	esi
		push	edi
		mov	[esp+19Ch+var_180], ebx
		mov	[esp+19Ch+var_17C], eax
		mov	[esp+19Ch+var_18C], eax
		call	_BUF_MEM_new
		mov	edi, eax
		mov	[esp+19Ch+var_184], edi
		call	_BUF_MEM_new
		mov	esi, eax
		mov	[esp+19Ch+var_188], esi
		call	_BUF_MEM_new
		mov	ebp, eax
		test	edi, edi
		jz	loc_1233
		test	esi, esi
		jz	loc_1233
		test	ebp, ebp
		jz	loc_1233
		push	0FEh ; 'þ'
		lea	eax, [esp+1A0h+Str1]
		mov	[esp+1A0h+var_6], 0
		push	eax
		push	ebx
		call	_BIO_gets
		add	esp, 0Ch
		test	eax, eax
		jle	loc_DB1
		mov	edi, dword ptr ds:__imp__strncmp

loc_D1E:				; CODE XREF: _PEM_read_bio+14Bj
		js	short loc_D2F

loc_D20:				; CODE XREF: _PEM_read_bio+CDj
		cmp	[esp+eax+19Ch+Str1], 20h ; ' '
		jg	short loc_D2F
		sub	eax, 1
		jns	short loc_D20

loc_D2F:				; CODE XREF: _PEM_read_bio:loc_D1Ej
					; _PEM_read_bio+C8j
		mov	[esp+eax+19Ch+var_103],	0Ah
		add	eax, 2
		cmp	eax, 100h
		jnb	loc_1278
		push	0Bh		; MaxCount
		mov	[esp+eax+1A0h+Str1], 0
		lea	eax, [esp+1A0h+Str1]
		push	offset ??_C@_0M@ILJMFDEM@?9?9?9?9?9BEGIN?5?$AA@	; "-----BEGIN "
		push	eax		; Str1
		call	edi ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_D93
		lea	esi, [esp+19Ch+Src]
		lea	ecx, [esi+1]
		nop

loc_D70:				; CODE XREF: _PEM_read_bio+115j
		mov	al, [esi]
		inc	esi
		test	al, al
		jnz	short loc_D70
		sub	esi, ecx
		lea	eax, [esp+19Ch+var_FF]
		push	6		; MaxCount
		add	eax, esi
		push	offset ??_C@_06NGLIMPFK@?9?9?9?9?9?6?$AA@ ; "-----\n"
		push	eax		; Str1
		call	edi ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_DE9

loc_D93:				; CODE XREF: _PEM_read_bio+103j
		push	0FEh ; 'þ'
		lea	eax, [esp+1A0h+Str1]
		push	eax
		push	ebx
		call	_BIO_gets
		add	esp, 0Ch
		test	eax, eax
		jg	loc_D1E

loc_DB1:				; CODE XREF: _PEM_read_bio+B2j
		push	2BDh
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	6Ch ; 'l'

loc_DBD:				; CODE XREF: _PEM_read_bio+1AAj
					; _PEM_read_bio+1ECj ...
		push	6Dh ; 'm'
		push	9
		call	_ERR_put_error
		add	esp, 14h

$err$110:				; CODE XREF: _PEM_read_bio+579j
		push	[esp+19Ch+var_184]
		call	_BUF_MEM_free
		push	[esp+1A0h+var_188]
		call	_BUF_MEM_free
		push	ebp
		call	_BUF_MEM_free
		add	esp, 0Ch
		jmp	loc_125D
; ---------------------------------------------------------------------------

loc_DE9:				; CODE XREF: _PEM_read_bio+131j
		mov	ebx, [esp+19Ch+var_184]
		lea	eax, [esi+9]
		push	eax
		push	ebx
		call	_BUF_MEM_grow
		add	esp, 8
		test	eax, eax
		jnz	short loc_E0C
		push	2CCh
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	41h ; 'A'
		jmp	short loc_DBD
; ---------------------------------------------------------------------------

loc_E0C:				; CODE XREF: _PEM_read_bio+19Cj
		lea	eax, [esi-6]
		push	eax		; Size
		lea	eax, [esp+1A0h+Src]
		push	eax		; Src
		push	dword ptr [ebx+4] ; Dst
		call	_memcpy
		mov	eax, [ebx+4]
		xor	ebx, ebx
		push	100h
		mov	byte ptr [eax+esi-6], 0
		mov	esi, [esp+1ACh+var_188]
		push	esi
		call	_BUF_MEM_grow
		add	esp, 14h
		test	eax, eax
		jnz	short loc_E51
		push	2D6h
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	41h ; 'A'
		jmp	loc_DBD
; ---------------------------------------------------------------------------

loc_E51:				; CODE XREF: _PEM_read_bio+1DEj
		mov	eax, [esi+4]
		push	0FEh ; 'þ'
		mov	[eax], bl
		lea	eax, [esp+1A0h+Str1]
		push	eax
		push	[esp+1A4h+var_180]
		call	_BIO_gets
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jle	loc_F43

loc_E79:				; CODE XREF: _PEM_read_bio+2D7j
		js	short loc_E8F
		nop	dword ptr [eax+eax+00h]

loc_E80:				; CODE XREF: _PEM_read_bio+22Dj
		cmp	[esp+esi+19Ch+Str1], 20h ; ' '
		jg	short loc_E8F
		sub	esi, 1
		jns	short loc_E80

loc_E8F:				; CODE XREF: _PEM_read_bio:loc_E79j
					; _PEM_read_bio+228j
		mov	[esp+esi+19Ch+var_103],	0Ah
		add	esi, 2
		cmp	esi, 100h
		jnb	loc_1278
		mov	[esp+esi+19Ch+Str1], 0
		cmp	[esp+19Ch+Str1], 0Ah
		jz	loc_F3D
		lea	edi, [esi+ebx]
		lea	eax, [edi+9]
		push	eax
		push	[esp+1A0h+var_188]
		call	_BUF_MEM_grow
		add	esp, 8
		test	eax, eax
		jz	loc_F7D
		push	9		; MaxCount
		lea	eax, [esp+1A0h+Str1]
		push	offset ??_C@_09KLIMLKKH@?9?9?9?9?9END?5?$AA@ ; "-----END "
		push	eax		; Str1
		call	dword ptr ds:__imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_F70
		push	esi		; Size
		lea	eax, [esp+1A0h+Str1]
		push	eax		; Src
		mov	eax, [esp+1A4h+var_188]
		mov	eax, [eax+4]
		add	eax, ebx
		push	eax		; Dst
		call	_memcpy
		mov	eax, [esp+1A8h+var_188]
		push	0FEh ; 'þ'
		mov	eax, [eax+4]
		add	eax, esi
		mov	byte ptr [eax+ebx], 0
		lea	eax, [esp+1ACh+Str1]
		push	eax
		push	[esp+1B0h+var_180]
		mov	ebx, edi
		call	_BIO_gets
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jg	loc_E79

loc_F3D:				; CODE XREF: _PEM_read_bio+256j
		mov	edi, dword ptr ds:__imp__strncmp

loc_F43:				; CODE XREF: _PEM_read_bio+213j
		xor	esi, esi

loc_F45:				; CODE XREF: _PEM_read_bio+31Bj
		push	400h
		push	ebp
		mov	[esp+1A4h+var_18C], 0
		call	_BUF_MEM_grow
		add	esp, 8
		test	eax, eax
		jnz	short loc_F8E
		push	2F5h
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	41h ; 'A'
		jmp	loc_DBD
; ---------------------------------------------------------------------------

loc_F70:				; CODE XREF: _PEM_read_bio+291j
		mov	edi, dword ptr ds:__imp__strncmp
		mov	esi, 1
		jmp	short loc_F45
; ---------------------------------------------------------------------------

loc_F7D:				; CODE XREF: _PEM_read_bio+271j
		push	2E7h
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	41h ; 'A'
		jmp	loc_DBD
; ---------------------------------------------------------------------------

loc_F8E:				; CODE XREF: _PEM_read_bio+2FDj
		mov	eax, [ebp+4]
		mov	byte ptr [eax],	0
		test	esi, esi
		jnz	loc_10F0
		mov	ebx, [esp+19Ch+var_180]
		lea	eax, [esp+19Ch+Str1]
		push	0FEh ; 'þ'
		push	eax
		push	ebx
		call	_BIO_gets
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jle	loc_10FE

loc_FC0:				; CODE XREF: _PEM_read_bio+42Fj
		js	short loc_FD1

loc_FC2:				; CODE XREF: _PEM_read_bio+36Fj
		cmp	[esp+esi+19Ch+Str1], 20h ; ' '
		jg	short loc_FD1
		sub	esi, 1
		jns	short loc_FC2

loc_FD1:				; CODE XREF: _PEM_read_bio:loc_FC0j
					; _PEM_read_bio+36Aj
		mov	[esp+esi+19Ch+var_103],	0Ah
		add	esi, 2
		cmp	esi, 100h
		jnb	loc_1278
		mov	eax, [esp+19Ch+var_17C]
		cmp	esi, 41h ; 'A'
		mov	ecx, 1
		mov	[esp+esi+19Ch+Str1], 0
		cmovnz	eax, ecx
		push	9		; MaxCount
		mov	[esp+1A0h+var_17C], eax
		lea	eax, [esp+1A0h+Str1]
		push	offset ??_C@_09KLIMLKKH@?9?9?9?9?9END?5?$AA@ ; "-----END "
		push	eax		; Str1
		call	edi ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jz	loc_10FE
		cmp	esi, 41h ; 'A'
		jg	loc_10FE
		mov	eax, [esp+19Ch+var_18C]
		add	eax, 9
		add	eax, esi
		push	eax
		push	ebp
		call	_BUF_MEM_grow_clean
		add	esp, 8
		test	eax, eax
		jz	loc_10DF
		push	esi		; Size
		lea	eax, [esp+1A0h+Str1]
		push	eax		; Src
		mov	eax, [ebp+4]
		add	eax, [esp+1A4h+var_18C]
		push	eax		; Dst
		call	_memcpy
		mov	ecx, [ebp+4]
		add	esp, 0Ch
		mov	eax, [esp+19Ch+var_18C]
		add	ecx, esi
		push	0FEh ; 'þ'
		mov	byte ptr [ecx+eax], 0
		mov	eax, [esp+1A0h+var_17C]
		add	[esp+1A0h+var_18C], esi
		test	eax, eax
		lea	eax, [esp+1A0h+Str1]
		push	eax
		push	ebx
		jnz	short loc_1097
		call	_BIO_gets
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jg	loc_FC0
		jmp	short loc_10FE
; ---------------------------------------------------------------------------

loc_1097:				; CODE XREF: _PEM_read_bio+421j
		mov	[esp+1A8h+Str1], 0
		call	_BIO_gets
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_10FE
		nop	dword ptr [eax+eax+00h]

loc_10B0:				; CODE XREF: _PEM_read_bio+45Dj
		cmp	[esp+eax+19Ch+Str1], 20h ; ' '
		jg	short loc_10BF
		sub	eax, 1
		jns	short loc_10B0

loc_10BF:				; CODE XREF: _PEM_read_bio+458j
		mov	[esp+eax+19Ch+var_103],	0Ah
		add	eax, 2
		cmp	eax, 100h
		jnb	loc_1278
		mov	[esp+eax+19Ch+Str1], 0
		jmp	short loc_10FE
; ---------------------------------------------------------------------------

loc_10DF:				; CODE XREF: _PEM_read_bio+3DDj
		push	30Bh
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	41h ; 'A'
		jmp	loc_DBD
; ---------------------------------------------------------------------------

loc_10F0:				; CODE XREF: _PEM_read_bio+336j
		mov	eax, [esp+19Ch+var_188]
		mov	[esp+19Ch+var_188], ebp
		mov	ebp, eax
		mov	[esp+19Ch+var_18C], ebx

loc_10FE:				; CODE XREF: _PEM_read_bio+35Aj
					; _PEM_read_bio+3B9j ...
		mov	ebx, [esp+19Ch+var_184]
		mov	esi, [ebx+4]
		lea	ecx, [esi+1]

loc_1108:				; CODE XREF: _PEM_read_bio+4ADj
		mov	al, [esi]
		inc	esi
		test	al, al
		jnz	short loc_1108
		push	9		; MaxCount
		lea	eax, [esp+1A0h+Str1]
		sub	esi, ecx
		push	offset ??_C@_09KLIMLKKH@?9?9?9?9?9END?5?$AA@ ; "-----END "
		push	eax		; Str1
		call	edi ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_1222
		push	esi		; MaxCount
		lea	eax, [esp+1A0h+Str2]
		push	eax		; Str2
		push	dword ptr [ebx+4] ; Str1
		call	edi ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_1222
		push	6		; MaxCount
		lea	eax, [esp+1A0h+Str2]
		add	eax, esi
		push	offset ??_C@_06NGLIMPFK@?9?9?9?9?9?6?$AA@ ; "-----\n"
		push	eax		; Str1
		call	edi ; __imp__strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_1222
		lea	eax, [esp+19Ch+var_164]
		push	eax
		call	_EVP_DecodeInit
		push	[esp+1A0h+var_18C]
		mov	eax, [ebp+4]
		lea	ecx, [esp+1A4h+var_18C]
		push	eax
		push	ecx
		push	eax
		lea	eax, [esp+1B0h+var_164]
		push	eax
		call	_EVP_DecodeUpdate
		add	esp, 18h
		test	eax, eax
		jns	short loc_119E
		push	332h
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	64h ; 'd'
		jmp	loc_DBD
; ---------------------------------------------------------------------------

loc_119E:				; CODE XREF: _PEM_read_bio+52Bj
		lea	eax, [esp+19Ch+var_178]
		push	eax
		mov	eax, [ebp+4]
		add	eax, [esp+1A0h+var_18C]
		push	eax
		lea	eax, [esp+1A4h+var_164]
		push	eax
		call	_EVP_DecodeFinal
		add	esp, 0Ch
		test	eax, eax
		jns	short loc_11CD
		push	337h
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	64h ; 'd'
		jmp	loc_DBD
; ---------------------------------------------------------------------------

loc_11CD:				; CODE XREF: _PEM_read_bio+55Aj
		mov	ecx, [esp+19Ch+var_18C]
		add	ecx, [esp+19Ch+var_178]
		mov	[esp+19Ch+var_18C], ecx
		jz	$err$110
		mov	esi, [esp+19Ch+var_174]
		mov	edx, ebx
		mov	ebx, [esp+19Ch+var_188]
		push	edx
		mov	eax, [edx+4]
		mov	[esi], eax
		mov	esi, [esp+1A0h+var_170]
		mov	eax, [ebx+4]
		mov	[esi], eax
		mov	esi, [esp+1A0h+var_16C]
		mov	eax, [ebp+4]
		mov	[esi], eax
		mov	eax, [esp+1A0h+var_168]
		mov	[eax], ecx
		call	_CRYPTO_free
		push	ebx
		call	_CRYPTO_free
		push	ebp
		call	_CRYPTO_free
		add	esp, 0Ch
		mov	eax, 1
		jmp	short loc_125F
; ---------------------------------------------------------------------------

loc_1222:				; CODE XREF: _PEM_read_bio+4C7j
					; _PEM_read_bio+4E0j ...
		push	329h
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	66h ; 'f'
		jmp	loc_DBD
; ---------------------------------------------------------------------------

loc_1233:				; CODE XREF: _PEM_read_bio+7Cj
					; _PEM_read_bio+84j ...
		push	edi
		call	_BUF_MEM_free
		push	esi
		call	_BUF_MEM_free
		push	ebp
		call	_BUF_MEM_free
		push	2B4h
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	41h ; 'A'
		push	6Dh ; 'm'
		push	9
		call	_ERR_put_error
		add	esp, 20h

loc_125D:				; CODE XREF: _PEM_read_bio+184j
		xor	eax, eax

loc_125F:				; CODE XREF: _PEM_read_bio+5C0j
		mov	ecx, [esp+19Ch+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18Ch
		retn
; ---------------------------------------------------------------------------

loc_1278:				; CODE XREF: _PEM_read_bio+DFj
					; _PEM_read_bio+240j ...
		call	___report_rangecheckfailure

$LN109:					; $LN102
		int	3
_PEM_read_bio	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1280h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write
_PEM_write	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	edi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_12B1
		push	24Dh
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	7
		push	71h ; 'q'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_12B1:				; CODE XREF: _PEM_write+13j
		push	esi
		push	[esp+8+arg_0]
		push	0
		push	6Ah ; 'j'
		push	edi
		call	_BIO_ctrl
		push	[esp+18h+arg_10]
		push	[esp+1Ch+arg_C]
		push	[esp+20h+arg_8]
		push	[esp+24h+arg_4]
		push	edi
		call	_PEM_write_bio
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 28h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_PEM_write	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 12E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PEM_write_bio
_PEM_write_bio	proc near		; CODE XREF: _PEM_ASN1_write_bio+36Fp
					; _PEM_write+51p

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= byte ptr -64h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 7Ch ; '|'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+7Ch+var_4], eax
		mov	eax, [esp+7Ch+arg_C]
		push	ebx
		mov	ebx, [esp+80h+arg_8]
		push	ebp
		mov	ebp, [esp+84h+arg_0]
		push	esi
		mov	esi, [esp+88h+arg_4]
		mov	[esp+88h+var_6C], eax
		lea	eax, [esp+88h+var_64]
		push	edi
		push	eax
		mov	[esp+90h+var_70], ebp
		mov	[esp+90h+var_68], esi
		call	_EVP_EncodeInit
		mov	edi, esi
		add	esp, 4
		lea	ecx, [edi+1]

loc_133B:				; CODE XREF: _PEM_write_bio+58j
		mov	al, [edi]
		inc	edi
		test	al, al
		jnz	short loc_133B
		push	0Bh
		push	offset ??_C@_0M@ILJMFDEM@?9?9?9?9?9BEGIN?5?$AA@	; "-----BEGIN "
		push	ebp
		sub	edi, ecx
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, 0Bh
		jnz	loc_14A7
		push	edi
		push	esi
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, edi
		jnz	loc_14A7
		push	6
		push	offset ??_C@_06NGLIMPFK@?9?9?9?9?9?6?$AA@ ; "-----\n"
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, 6
		jnz	loc_14A7
		mov	esi, ebx
		lea	ecx, [esi+1]

loc_138E:				; CODE XREF: _PEM_write_bio+ABj
		mov	al, [esi]
		inc	esi
		test	al, al
		jnz	short loc_138E
		sub	esi, ecx
		test	esi, esi
		jle	short loc_13C7
		push	esi
		push	ebx
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, esi
		jnz	loc_14A7
		push	1
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, 1
		jnz	loc_14A7

loc_13C7:				; CODE XREF: _PEM_write_bio+B1j
		push	26Dh
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	2000h
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_13EC
		lea	eax, [ebx+41h]
		jmp	loc_14AC
; ---------------------------------------------------------------------------

loc_13EC:				; CODE XREF: _PEM_write_bio+FAj
		mov	esi, [esp+8Ch+arg_10]
		xor	eax, eax
		mov	[esp+8Ch+var_74], eax
		mov	[esp+8Ch+var_78], eax
		test	esi, esi
		jle	short loc_1467
		mov	ecx, 1400h
		xchg	ax, ax

loc_1408:				; CODE XREF: _PEM_write_bio+179j
		cmp	esi, 1400h
		mov	ebp, esi
		cmovg	ebp, ecx
		add	eax, [esp+8Ch+var_6C]
		push	ebp
		push	eax
		lea	eax, [esp+94h+var_7C]
		push	eax
		lea	eax, [esp+98h+var_64]
		push	ebx
		push	eax
		call	_EVP_EncodeUpdate
		mov	ecx, [esp+0A0h+var_7C]
		add	esp, 14h
		test	ecx, ecx
		jz	short loc_144A
		push	ecx
		push	ebx
		push	[esp+94h+var_70]
		call	_BIO_write
		mov	ecx, [esp+98h+var_7C]
		add	esp, 0Ch
		cmp	eax, ecx
		jnz	short $err$32

loc_144A:				; CODE XREF: _PEM_write_bio+14Aj
		mov	eax, [esp+8Ch+var_74]
		sub	esi, ebp
		add	[esp+8Ch+var_78], ecx
		add	eax, ebp
		mov	[esp+8Ch+var_74], eax
		mov	ecx, 1400h
		test	esi, esi
		jg	short loc_1408
		mov	ebp, [esp+8Ch+var_70]

loc_1467:				; CODE XREF: _PEM_write_bio+117j
		lea	eax, [esp+8Ch+var_7C]
		push	eax
		lea	eax, [esp+90h+var_64]
		push	ebx
		push	eax
		call	_EVP_EncodeFinal
		mov	eax, [esp+98h+var_7C]
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_14D8
		push	eax
		push	ebx
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, [esp+8Ch+var_7C]
		jz	short loc_14D8

$err$32:				; CODE XREF: _PEM_write_bio+160j
		push	2000h
		push	ebx
		call	_OPENSSL_cleanse
		push	ebx
		call	_CRYPTO_free
		add	esp, 0Ch

loc_14A7:				; CODE XREF: _PEM_write_bio+6Fj
					; _PEM_write_bio+82j ...
		mov	eax, 7

loc_14AC:				; CODE XREF: _PEM_write_bio+FFj
		push	28Dh
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	eax
		push	72h ; 'r'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+7Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 7Ch
		retn
; ---------------------------------------------------------------------------

loc_14D8:				; CODE XREF: _PEM_write_bio+198j
					; _PEM_write_bio+1A9j
		push	2000h
		push	ebx
		call	_OPENSSL_cleanse
		push	ebx
		call	_CRYPTO_free
		push	9
		push	offset ??_C@_09KLIMLKKH@?9?9?9?9?9END?5?$AA@ ; "-----END "
		push	ebp
		call	_BIO_write
		add	esp, 18h
		cmp	eax, 9
		jnz	short loc_14A7
		push	edi
		push	[esp+90h+var_68]
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, edi
		jnz	short loc_14A7
		push	6
		push	offset ??_C@_06NGLIMPFK@?9?9?9?9?9?6?$AA@ ; "-----\n"
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, 6
		jnz	short loc_14A7
		mov	ecx, [esp+8Ch+var_4]
		mov	eax, [esp+8Ch+var_7C]
		add	eax, [esp+8Ch+var_78]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 7Ch
		retn
_PEM_write_bio	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1544h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; _fprintf+Fp
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 154Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1570h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_check_pem	proc near		; CODE XREF: _PEM_bytes_read_bio+8Ap

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 4
		call	__chkstk
		push	esi
		mov	esi, [esp+8+arg_0]
		mov	eax, esi
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		mov	ecx, edi

loc_1588:				; CODE XREF: _check_pem+32j
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_15A8
		test	dl, dl
		jz	short loc_15A4
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_15A8
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1588

loc_15A4:				; CODE XREF: _check_pem+20j
		xor	eax, eax
		jmp	short loc_15AD
; ---------------------------------------------------------------------------

loc_15A8:				; CODE XREF: _check_pem+1Cj
					; _check_pem+28j
		sbb	eax, eax
		or	eax, 1

loc_15AD:				; CODE XREF: _check_pem+36j
		test	eax, eax
		jnz	short loc_15BA

loc_15B1:				; CODE XREF: _check_pem+ACj
					; _check_pem+DCj ...
		pop	edi
		mov	eax, 1
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_15BA:				; CODE XREF: _check_pem+3Fj
		mov	ecx, offset ??_C@_0BA@MHDCIJI@ANY?5PRIVATE?5KEY?$AA@ ; "ANY PRIVATE KEY"
		mov	eax, edi

loc_15C1:				; CODE XREF: _check_pem+6Bj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_15E1
		test	dl, dl
		jz	short loc_15DD
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_15E1
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_15C1

loc_15DD:				; CODE XREF: _check_pem+59j
		xor	eax, eax
		jmp	short loc_15E6
; ---------------------------------------------------------------------------

loc_15E1:				; CODE XREF: _check_pem+55j
					; _check_pem+61j
		sbb	eax, eax
		or	eax, 1

loc_15E6:				; CODE XREF: _check_pem+6Fj
		test	eax, eax
		jnz	loc_168F
		mov	ecx, offset ??_C@_0BG@OLFPLKDJ@ENCRYPTED?5PRIVATE?5KEY?$AA@ ; "ENCRYPTED PRIVATE KEY"
		mov	eax, esi

loc_15F5:				; CODE XREF: _check_pem+9Fj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1615
		test	dl, dl
		jz	short loc_1611
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1615
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_15F5

loc_1611:				; CODE XREF: _check_pem+8Dj
		xor	eax, eax
		jmp	short loc_161A
; ---------------------------------------------------------------------------

loc_1615:				; CODE XREF: _check_pem+89j
					; _check_pem+95j
		sbb	eax, eax
		or	eax, 1

loc_161A:				; CODE XREF: _check_pem+A3j
		test	eax, eax
		jz	short loc_15B1
		mov	ecx, offset ??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@ ; "PRIVATE KEY"
		mov	eax, esi

loc_1625:				; CODE XREF: _check_pem+CFj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1645
		test	dl, dl
		jz	short loc_1641
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1645
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1625

loc_1641:				; CODE XREF: _check_pem+BDj
		xor	eax, eax
		jmp	short loc_164A
; ---------------------------------------------------------------------------

loc_1645:				; CODE XREF: _check_pem+B9j
					; _check_pem+C5j
		sbb	eax, eax
		or	eax, 1

loc_164A:				; CODE XREF: _check_pem+D3j
		test	eax, eax
		jz	loc_15B1
		push	offset ??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@ ; "PRIVATE KEY"
		push	esi
		call	_pem_check_suffix
		add	esp, 8
		test	eax, eax
		jle	loc_1A9D
		push	eax
		push	esi
		push	0
		call	_EVP_PKEY_asn1_find_str
		add	esp, 0Ch
		test	eax, eax
		jz	loc_1A9D
		cmp	dword ptr [eax+5Ch], 0
		jz	loc_1A9D
		pop	edi
		mov	eax, 1
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_168F:				; CODE XREF: _check_pem+78j
		mov	ecx, offset ??_C@_0L@MBJDOOAB@PARAMETERS?$AA@ ;	"PARAMETERS"
		mov	eax, edi

loc_1696:				; CODE XREF: _check_pem+140j
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_16B6
		test	dl, dl
		jz	short loc_16B2
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_16B6
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1696

loc_16B2:				; CODE XREF: _check_pem+12Ej
		xor	eax, eax
		jmp	short loc_16BB
; ---------------------------------------------------------------------------

loc_16B6:				; CODE XREF: _check_pem+12Aj
					; _check_pem+136j
		sbb	eax, eax
		or	eax, 1

loc_16BB:				; CODE XREF: _check_pem+144j
		test	eax, eax
		jnz	short loc_170D
		push	offset ??_C@_0L@MBJDOOAB@PARAMETERS?$AA@ ; "PARAMETERS"
		push	esi
		call	_pem_check_suffix
		add	esp, 8
		test	eax, eax
		jle	loc_1A9D
		push	eax
		lea	eax, [esp+10h+var_4]
		push	esi
		push	eax
		call	_EVP_PKEY_asn1_find_str
		add	esp, 0Ch
		test	eax, eax
		jz	loc_1A9D
		push	ebx
		xor	ebx, ebx
		cmp	[eax+38h], ebx
		mov	eax, [esp+10h+var_4]
		setnz	bl
		test	eax, eax
		jz	short loc_1706
		push	eax
		call	_ENGINE_finish
		add	esp, 4

loc_1706:				; CODE XREF: _check_pem+18Bj
		mov	eax, ebx
		pop	ebx
		pop	edi
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_170D:				; CODE XREF: _check_pem+14Dj
		mov	ecx, offset ??_C@_0BE@FBOHFABJ@X9?442?5DH?5PARAMETERS?$AA@ ; "X9.42 DH PARAMETERS"
		mov	eax, esi

loc_1714:				; CODE XREF: _check_pem+1BEj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1734
		test	dl, dl
		jz	short loc_1730
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1734
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1714

loc_1730:				; CODE XREF: _check_pem+1ACj
		xor	eax, eax
		jmp	short loc_1739
; ---------------------------------------------------------------------------

loc_1734:				; CODE XREF: _check_pem+1A8j
					; _check_pem+1B4j
		sbb	eax, eax
		or	eax, 1

loc_1739:				; CODE XREF: _check_pem+1C2j
		test	eax, eax
		jnz	short loc_1771
		mov	ecx, offset ??_C@_0O@NMAFMHPO@DH?5PARAMETERS?$AA@ ; "DH	PARAMETERS"
		mov	eax, edi

loc_1744:				; CODE XREF: _check_pem+1EEj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1764
		test	dl, dl
		jz	short loc_1760
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1764
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1744

loc_1760:				; CODE XREF: _check_pem+1DCj
		xor	eax, eax
		jmp	short loc_1769
; ---------------------------------------------------------------------------

loc_1764:				; CODE XREF: _check_pem+1D8j
					; _check_pem+1E4j
		sbb	eax, eax
		or	eax, 1

loc_1769:				; CODE XREF: _check_pem+1F2j
		test	eax, eax
		jz	loc_15B1

loc_1771:				; CODE XREF: _check_pem+1CBj
		mov	ecx, offset ??_C@_0BB@PKKMAABO@X509?5CERTIFICATE?$AA@ ;	"X509 CERTIFICATE"
		mov	eax, esi

loc_1778:				; CODE XREF: _check_pem+222j
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1798
		test	dl, dl
		jz	short loc_1794
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1798
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1778

loc_1794:				; CODE XREF: _check_pem+210j
		xor	eax, eax
		jmp	short loc_179D
; ---------------------------------------------------------------------------

loc_1798:				; CODE XREF: _check_pem+20Cj
					; _check_pem+218j
		sbb	eax, eax
		or	eax, 1

loc_179D:				; CODE XREF: _check_pem+226j
		test	eax, eax
		jnz	short loc_17D5
		mov	ecx, offset ??_C@_0M@BFIJENPO@CERTIFICATE?$AA@ ; "CERTIFICATE"
		mov	eax, edi

loc_17A8:				; CODE XREF: _check_pem+252j
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_17C8
		test	dl, dl
		jz	short loc_17C4
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_17C8
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_17A8

loc_17C4:				; CODE XREF: _check_pem+240j
		xor	eax, eax
		jmp	short loc_17CD
; ---------------------------------------------------------------------------

loc_17C8:				; CODE XREF: _check_pem+23Cj
					; _check_pem+248j
		sbb	eax, eax
		or	eax, 1

loc_17CD:				; CODE XREF: _check_pem+256j
		test	eax, eax
		jz	loc_15B1

loc_17D5:				; CODE XREF: _check_pem+22Fj
		mov	ecx, offset ??_C@_0BI@BBDALNCF@NEW?5CERTIFICATE?5REQUEST?$AA@ ;	"NEW CERTIFICATE REQUEST"
		mov	eax, esi
		nop	dword ptr [eax+00h]

loc_17E0:				; CODE XREF: _check_pem+28Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1800
		test	dl, dl
		jz	short loc_17FC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1800
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_17E0

loc_17FC:				; CODE XREF: _check_pem+278j
		xor	eax, eax
		jmp	short loc_1805
; ---------------------------------------------------------------------------

loc_1800:				; CODE XREF: _check_pem+274j
					; _check_pem+280j
		sbb	eax, eax
		or	eax, 1

loc_1805:				; CODE XREF: _check_pem+28Ej
		test	eax, eax
		jnz	short loc_183D
		mov	ecx, offset ??_C@_0BE@PGIFFILK@CERTIFICATE?5REQUEST?$AA@ ; "CERTIFICATE	REQUEST"
		mov	eax, edi

loc_1810:				; CODE XREF: _check_pem+2BAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1830
		test	dl, dl
		jz	short loc_182C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1830
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1810

loc_182C:				; CODE XREF: _check_pem+2A8j
		xor	eax, eax
		jmp	short loc_1835
; ---------------------------------------------------------------------------

loc_1830:				; CODE XREF: _check_pem+2A4j
					; _check_pem+2B0j
		sbb	eax, eax
		or	eax, 1

loc_1835:				; CODE XREF: _check_pem+2BEj
		test	eax, eax
		jz	loc_15B1

loc_183D:				; CODE XREF: _check_pem+297j
		mov	ecx, offset ??_C@_0M@BFIJENPO@CERTIFICATE?$AA@ ; "CERTIFICATE"
		mov	eax, esi

loc_1844:				; CODE XREF: _check_pem+2EEj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1864
		test	dl, dl
		jz	short loc_1860
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1864
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1844

loc_1860:				; CODE XREF: _check_pem+2DCj
		xor	eax, eax
		jmp	short loc_1869
; ---------------------------------------------------------------------------

loc_1864:				; CODE XREF: _check_pem+2D8j
					; _check_pem+2E4j
		sbb	eax, eax
		or	eax, 1

loc_1869:				; CODE XREF: _check_pem+2F2j
		test	eax, eax
		jnz	short loc_18A1
		mov	ecx, offset ??_C@_0BE@LHICLJDN@TRUSTED?5CERTIFICATE?$AA@ ; "TRUSTED CERTIFICATE"
		mov	eax, edi

loc_1874:				; CODE XREF: _check_pem+31Ej
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1894
		test	dl, dl
		jz	short loc_1890
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1894
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1874

loc_1890:				; CODE XREF: _check_pem+30Cj
		xor	eax, eax
		jmp	short loc_1899
; ---------------------------------------------------------------------------

loc_1894:				; CODE XREF: _check_pem+308j
					; _check_pem+314j
		sbb	eax, eax
		or	eax, 1

loc_1899:				; CODE XREF: _check_pem+322j
		test	eax, eax
		jz	loc_15B1

loc_18A1:				; CODE XREF: _check_pem+2FBj
		mov	ecx, offset ??_C@_0BB@PKKMAABO@X509?5CERTIFICATE?$AA@ ;	"X509 CERTIFICATE"
		mov	eax, esi

loc_18A8:				; CODE XREF: _check_pem+352j
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_18C8
		test	dl, dl
		jz	short loc_18C4
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_18C8
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_18A8

loc_18C4:				; CODE XREF: _check_pem+340j
		xor	eax, eax
		jmp	short loc_18CD
; ---------------------------------------------------------------------------

loc_18C8:				; CODE XREF: _check_pem+33Cj
					; _check_pem+348j
		sbb	eax, eax
		or	eax, 1

loc_18CD:				; CODE XREF: _check_pem+356j
		test	eax, eax
		jnz	short loc_1905
		mov	ecx, offset ??_C@_0BE@LHICLJDN@TRUSTED?5CERTIFICATE?$AA@ ; "TRUSTED CERTIFICATE"
		mov	eax, edi

loc_18D8:				; CODE XREF: _check_pem+382j
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_18F8
		test	dl, dl
		jz	short loc_18F4
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_18F8
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_18D8

loc_18F4:				; CODE XREF: _check_pem+370j
		xor	eax, eax
		jmp	short loc_18FD
; ---------------------------------------------------------------------------

loc_18F8:				; CODE XREF: _check_pem+36Cj
					; _check_pem+378j
		sbb	eax, eax
		or	eax, 1

loc_18FD:				; CODE XREF: _check_pem+386j
		test	eax, eax
		jz	loc_15B1

loc_1905:				; CODE XREF: _check_pem+35Fj
		mov	ecx, offset ??_C@_0M@BFIJENPO@CERTIFICATE?$AA@ ; "CERTIFICATE"
		mov	eax, esi
		nop	dword ptr [eax+00h]

loc_1910:				; CODE XREF: _check_pem+3BAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1930
		test	dl, dl
		jz	short loc_192C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1930
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1910

loc_192C:				; CODE XREF: _check_pem+3A8j
		xor	eax, eax
		jmp	short loc_1935
; ---------------------------------------------------------------------------

loc_1930:				; CODE XREF: _check_pem+3A4j
					; _check_pem+3B0j
		sbb	eax, eax
		or	eax, 1

loc_1935:				; CODE XREF: _check_pem+3BEj
		test	eax, eax
		jnz	short loc_196D
		mov	ecx, offset ??_C@_05BKMMPIPN@PKCS7?$AA@	; "PKCS7"
		mov	eax, edi

loc_1940:				; CODE XREF: _check_pem+3EAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1960
		test	dl, dl
		jz	short loc_195C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1960
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1940

loc_195C:				; CODE XREF: _check_pem+3D8j
		xor	eax, eax
		jmp	short loc_1965
; ---------------------------------------------------------------------------

loc_1960:				; CODE XREF: _check_pem+3D4j
					; _check_pem+3E0j
		sbb	eax, eax
		or	eax, 1

loc_1965:				; CODE XREF: _check_pem+3EEj
		test	eax, eax
		jz	loc_15B1

loc_196D:				; CODE XREF: _check_pem+3C7j
		mov	ecx, offset ??_C@_0BE@COMAFCKH@PKCS?5?$CD7?5SIGNED?5DATA?$AA@ ;	"PKCS #7 SIGNED	DATA"
		mov	eax, esi

loc_1974:				; CODE XREF: _check_pem+41Ej
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1994
		test	dl, dl
		jz	short loc_1990
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1994
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1974

loc_1990:				; CODE XREF: _check_pem+40Cj
		xor	eax, eax
		jmp	short loc_1999
; ---------------------------------------------------------------------------

loc_1994:				; CODE XREF: _check_pem+408j
					; _check_pem+414j
		sbb	eax, eax
		or	eax, 1

loc_1999:				; CODE XREF: _check_pem+422j
		test	eax, eax
		jnz	short loc_19D1
		mov	ecx, offset ??_C@_05BKMMPIPN@PKCS7?$AA@	; "PKCS7"
		mov	eax, edi

loc_19A4:				; CODE XREF: _check_pem+44Ej
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_19C4
		test	dl, dl
		jz	short loc_19C0
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_19C4
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_19A4

loc_19C0:				; CODE XREF: _check_pem+43Cj
		xor	eax, eax
		jmp	short loc_19C9
; ---------------------------------------------------------------------------

loc_19C4:				; CODE XREF: _check_pem+438j
					; _check_pem+444j
		sbb	eax, eax
		or	eax, 1

loc_19C9:				; CODE XREF: _check_pem+452j
		test	eax, eax
		jz	loc_15B1

loc_19D1:				; CODE XREF: _check_pem+42Bj
		mov	ecx, offset ??_C@_0M@BFIJENPO@CERTIFICATE?$AA@ ; "CERTIFICATE"
		mov	eax, esi

loc_19D8:				; CODE XREF: _check_pem+482j
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_19F8
		test	dl, dl
		jz	short loc_19F4
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_19F8
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_19D8

loc_19F4:				; CODE XREF: _check_pem+470j
		xor	eax, eax
		jmp	short loc_19FD
; ---------------------------------------------------------------------------

loc_19F8:				; CODE XREF: _check_pem+46Cj
					; _check_pem+478j
		sbb	eax, eax
		or	eax, 1

loc_19FD:				; CODE XREF: _check_pem+486j
		test	eax, eax
		jnz	short loc_1A35
		mov	ecx, offset ??_C@_03LOMOMHDE@CMS?$AA@ ;	"CMS"
		mov	eax, edi

loc_1A08:				; CODE XREF: _check_pem+4B2j
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1A28
		test	dl, dl
		jz	short loc_1A24
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1A28
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1A08

loc_1A24:				; CODE XREF: _check_pem+4A0j
		xor	eax, eax
		jmp	short loc_1A2D
; ---------------------------------------------------------------------------

loc_1A28:				; CODE XREF: _check_pem+49Cj
					; _check_pem+4A8j
		sbb	eax, eax
		or	eax, 1

loc_1A2D:				; CODE XREF: _check_pem+4B6j
		test	eax, eax
		jz	loc_15B1

loc_1A35:				; CODE XREF: _check_pem+48Fj
		mov	eax, offset ??_C@_05BKMMPIPN@PKCS7?$AA@	; "PKCS7"
		nop	word ptr [eax+eax+00h]

loc_1A40:				; CODE XREF: _check_pem+4EAj
		mov	cl, [esi]
		cmp	cl, [eax]
		jnz	short loc_1A60
		test	cl, cl
		jz	short loc_1A5C
		mov	cl, [esi+1]
		cmp	cl, [eax+1]
		jnz	short loc_1A60
		add	esi, 2
		add	eax, 2
		test	cl, cl
		jnz	short loc_1A40

loc_1A5C:				; CODE XREF: _check_pem+4D8j
		xor	eax, eax
		jmp	short loc_1A65
; ---------------------------------------------------------------------------

loc_1A60:				; CODE XREF: _check_pem+4D4j
					; _check_pem+4E0j
		sbb	eax, eax
		or	eax, 1

loc_1A65:				; CODE XREF: _check_pem+4EEj
		test	eax, eax
		jnz	short loc_1A9D
		mov	eax, offset ??_C@_03LOMOMHDE@CMS?$AA@ ;	"CMS"
		xchg	ax, ax

loc_1A70:				; CODE XREF: _check_pem+51Aj
		mov	cl, [edi]
		cmp	cl, [eax]
		jnz	short loc_1A90
		test	cl, cl
		jz	short loc_1A8C
		mov	cl, [edi+1]
		cmp	cl, [eax+1]
		jnz	short loc_1A90
		add	edi, 2
		add	eax, 2
		test	cl, cl
		jnz	short loc_1A70

loc_1A8C:				; CODE XREF: _check_pem+508j
		xor	eax, eax
		jmp	short loc_1A95
; ---------------------------------------------------------------------------

loc_1A90:				; CODE XREF: _check_pem+504j
					; _check_pem+510j
		sbb	eax, eax
		or	eax, 1

loc_1A95:				; CODE XREF: _check_pem+51Ej
		test	eax, eax
		jz	loc_15B1

loc_1A9D:				; CODE XREF: _check_pem+F2j
					; _check_pem+106j ...
		pop	edi
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
_check_pem	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1AA4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int fprintf(FILE *File, const	char *Format, ...)
		public _fprintf
_fprintf	proc near		; CODE XREF: _PEM_def_callback+91p

File		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= byte ptr  0Ch

		lea	eax, [esp+arg_8]
		push	eax
		push	0
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
_fprintf	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1AC8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_load_iv	proc near		; CODE XREF: _PEM_get_EVP_CIPHER_INFO+170p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		mov	ebp, [esp+8+arg_4]
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		mov	ebx, [ebx]
		push	edi
		test	esi, esi
		jle	short loc_1AF2
		mov	ecx, esi
		xor	eax, eax
		mov	edx, ecx
		mov	edi, ebp
		shr	ecx, 2
		rep stosd
		mov	ecx, edx
		and	ecx, 3
		rep stosb

loc_1AF2:				; CODE XREF: _load_iv+14j
		lea	edi, [esi+esi]
		xor	esi, esi
		test	edi, edi
		jle	short loc_1B4C

loc_1AFB:				; CODE XREF: _load_iv+82j
		mov	al, [ebx]
		cmp	al, 30h	; '0'
		jl	short loc_1B0D
		cmp	al, 39h	; '9'
		jg	short loc_1B0D
		movsx	edx, al
		sub	edx, 30h ; '0'
		jmp	short loc_1B2B
; ---------------------------------------------------------------------------

loc_1B0D:				; CODE XREF: _load_iv+37j _load_iv+3Bj
		cmp	al, 41h	; 'A'
		jl	short loc_1B1D
		cmp	al, 46h	; 'F'
		jg	short loc_1B1D
		movsx	edx, al
		sub	edx, 37h ; '7'
		jmp	short loc_1B2B
; ---------------------------------------------------------------------------

loc_1B1D:				; CODE XREF: _load_iv+47j _load_iv+4Bj
		cmp	al, 61h	; 'a'
		jl	short loc_1B5C
		cmp	al, 66h	; 'f'
		jg	short loc_1B5C
		movsx	edx, al
		sub	edx, 57h ; 'W'

loc_1B2B:				; CODE XREF: _load_iv+43j _load_iv+53j
		inc	ebx
		mov	eax, esi
		test	eax, eax
		jns	short loc_1B35
		add	eax, 1

loc_1B35:				; CODE XREF: _load_iv+68j
		sar	eax, 1
		mov	ecx, esi
		add	eax, ebp
		not	ecx
		inc	esi
		and	ecx, 1
		shl	ecx, 2
		shl	dl, cl
		or	[eax], dl
		cmp	esi, edi
		jl	short loc_1AFB

loc_1B4C:				; CODE XREF: _load_iv+31j
		mov	eax, [esp+10h+arg_0]
		pop	edi
		pop	esi
		pop	ebp
		mov	[eax], ebx
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1B5C:				; CODE XREF: _load_iv+57j _load_iv+5Bj
		push	23Ah
		push	offset ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ ; ".\\crypto\\pem\\pem_lib.c"
		push	67h ; 'g'
		push	65h ; 'e'
		push	9
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_load_iv	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1B7Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _pem_check_suffix
_pem_check_suffix proc near		; CODE XREF: _check_pem+E8p
					; _check_pem+155p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		mov	ecx, edi
		lea	edx, [ecx+1]
		nop	dword ptr [eax+00h]

loc_1B8C:				; CODE XREF: _pem_check_suffix+15j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_1B8C
		sub	ecx, edx
		mov	edx, [esp+0Ch+arg_4]
		mov	esi, edx
		lea	ebx, [esi+1]

loc_1B9E:				; CODE XREF: _pem_check_suffix+27j
		mov	al, [esi]
		inc	esi
		test	al, al
		jnz	short loc_1B9E
		sub	esi, ebx
		lea	eax, [esi+1]
		cmp	eax, ecx
		jl	short loc_1BB4

loc_1BAE:				; CODE XREF: _pem_check_suffix+67j
					; _pem_check_suffix+6Dj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1BB4:				; CODE XREF: _pem_check_suffix+30j
		sub	ecx, esi
		add	ecx, edi
		mov	eax, ecx
		xchg	ax, ax

loc_1BBC:				; CODE XREF: _pem_check_suffix+5Aj
		mov	bl, [eax]
		cmp	bl, [edx]
		jnz	short loc_1BDC
		test	bl, bl
		jz	short loc_1BD8
		mov	bl, [eax+1]
		cmp	bl, [edx+1]
		jnz	short loc_1BDC
		add	eax, 2
		add	edx, 2
		test	bl, bl
		jnz	short loc_1BBC

loc_1BD8:				; CODE XREF: _pem_check_suffix+48j
		xor	eax, eax
		jmp	short loc_1BE1
; ---------------------------------------------------------------------------

loc_1BDC:				; CODE XREF: _pem_check_suffix+44j
					; _pem_check_suffix+50j
		sbb	eax, eax
		or	eax, 1

loc_1BE1:				; CODE XREF: _pem_check_suffix+5Ej
		test	eax, eax
		jnz	short loc_1BAE
		dec	ecx
		cmp	byte ptr [ecx],	20h ; ' '
		jnz	short loc_1BAE
		sub	ecx, edi
		pop	edi
		pop	esi
		mov	eax, ecx
		pop	ebx
		retn
_pem_check_suffix endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1BF4h
; COMDAT (pick any)
		public ??_C@_0BH@FDMMOMD@Enter?5PEM?5pass?5phrase?3?$AA@
; `string'
??_C@_0BH@FDMMOMD@Enter?5PEM?5pass?5phrase?3?$AA@ db 'Enter PEM pass phrase:',0
					; DATA XREF: _PEM_def_callback+46o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1C0Ch
; COMDAT (pick any)
		public ??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@
; `string'
??_C@_0BH@LICLDIKC@?4?2crypto?2pem?2pem_lib?4c?$AA@ db '.\crypto\pem\pem_lib.c',0
					; DATA XREF: _PEM_ASN1_read+1Ao
					; _PEM_ASN1_write+1Ao ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1C24h
; COMDAT (pick any)
		public ??_C@_0DE@MBHEFEFO@phrase?5is?5too?5short?0?5needs?5to?5be@
; char `string'[]
??_C@_0DE@MBHEFEFO@phrase?5is?5too?5short?0?5needs?5to?5be@ db 'phrase is too short, needs to be at least %d chars',0Ah,0
					; DATA XREF: _PEM_def_callback+80o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1C58h
; COMDAT (pick any)
		public ??_C@_09NEFHHFED@ENCRYPTED?$AA@
; char `string'[]
??_C@_09NEFHHFED@ENCRYPTED?$AA@	db 'ENCRYPTED',0 ; DATA XREF: _PEM_get_EVP_CIPHER_INFO+72o
					; _PEM_proc_type+Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1C64h
; COMDAT (pick any)
		public ??_C@_09ENKIIODD@MIC?9CLEAR?$AA@
; `string'
??_C@_09ENKIIODD@MIC?9CLEAR?$AA@ db 'MIC-CLEAR',0 ; DATA XREF: _PEM_proc_type+17o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1C70h
; COMDAT (pick any)
		public ??_C@_08HNLJNNOE@MIC?9ONLY?$AA@
; `string'
??_C@_08HNLJNNOE@MIC?9ONLY?$AA@	db 'MIC-ONLY',0 ; DATA XREF: _PEM_proc_type+21o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1C7Ch
; COMDAT (pick any)
		public ??_C@_08JNPHPJPC@BAD?9TYPE?$AA@
; `string'
??_C@_08JNPHPJPC@BAD?9TYPE?$AA@	db 'BAD-TYPE',0 ; DATA XREF: _PEM_proc_type+26o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1C88h
; COMDAT (pick any)
		public ??_C@_0O@IDLEPCLC@Proc?9Type?3?54?0?$AA@
; `string'
??_C@_0O@IDLEPCLC@Proc?9Type?3?54?0?$AA@ db 'Proc-Type: 4,',0
					; DATA XREF: _PEM_proc_type+37o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1C98h
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; `string'
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah, 0	; DATA XREF: _PEM_proc_type+53o
					; _PEM_write_bio+C8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1C9Ch
; COMDAT (pick any)
		public ??_C@_0L@JOOMHNBL@DEK?9Info?3?5?$AA@
; char `string'[]
??_C@_0L@JOOMHNBL@DEK?9Info?3?5?$AA@ db	'DEK-Info: ',0 ; DATA XREF: _PEM_dek_info+Bo
					; _PEM_get_EVP_CIPHER_INFO+D7o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1CA8h
; COMDAT (pick any)
		public ??_C@_01IHBHIGKO@?0?$AA@
; `string'
??_C@_01IHBHIGKO@?0?$AA@ db 2Ch, 0	; DATA XREF: _PEM_dek_info+2Ao
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1CACh
; COMDAT (pick any)
		public ??_C@_0BA@MHDCIJI@ANY?5PRIVATE?5KEY?$AA@
; `string'
??_C@_0BA@MHDCIJI@ANY?5PRIVATE?5KEY?$AA@ db 'ANY PRIVATE KEY',0
					; DATA XREF: _check_pem:loc_15BAo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1CBCh
; COMDAT (pick any)
		public ??_C@_0BG@OLFPLKDJ@ENCRYPTED?5PRIVATE?5KEY?$AA@
; `string'
??_C@_0BG@OLFPLKDJ@ENCRYPTED?5PRIVATE?5KEY?$AA@	db 'ENCRYPTED PRIVATE KEY',0
					; DATA XREF: _check_pem+7Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1CD4h
; COMDAT (pick any)
		public ??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@
; `string'
??_C@_0M@GKANOOJ@PRIVATE?5KEY?$AA@ db 'PRIVATE KEY',0 ; DATA XREF: _check_pem+AEo
					; _check_pem+E2o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1CE0h
; COMDAT (pick any)
		public ??_C@_0L@MBJDOOAB@PARAMETERS?$AA@
; `string'
??_C@_0L@MBJDOOAB@PARAMETERS?$AA@ db 'PARAMETERS',0 ; DATA XREF: _check_pem:loc_168Fo
					; _check_pem+14Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1CECh
; COMDAT (pick any)
		public ??_C@_0BE@FBOHFABJ@X9?442?5DH?5PARAMETERS?$AA@
; `string'
??_C@_0BE@FBOHFABJ@X9?442?5DH?5PARAMETERS?$AA@ db 'X9.42 DH PARAMETERS',0
					; DATA XREF: _check_pem:loc_170Do
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1D00h
; COMDAT (pick any)
		public ??_C@_0O@NMAFMHPO@DH?5PARAMETERS?$AA@
; `string'
??_C@_0O@NMAFMHPO@DH?5PARAMETERS?$AA@ db 'DH PARAMETERS',0 ; DATA XREF: _check_pem+1CDo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1D10h
; COMDAT (pick any)
		public ??_C@_0BB@PKKMAABO@X509?5CERTIFICATE?$AA@
; `string'
??_C@_0BB@PKKMAABO@X509?5CERTIFICATE?$AA@ db 'X509 CERTIFICATE',0
					; DATA XREF: _check_pem:loc_1771o
					; _check_pem:loc_18A1o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1D24h
; COMDAT (pick any)
		public ??_C@_0M@BFIJENPO@CERTIFICATE?$AA@
; `string'
??_C@_0M@BFIJENPO@CERTIFICATE?$AA@ db 'CERTIFICATE',0 ; DATA XREF: _check_pem+231o
					; _check_pem:loc_183Do	...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1D30h
; COMDAT (pick any)
		public ??_C@_0BI@BBDALNCF@NEW?5CERTIFICATE?5REQUEST?$AA@
; `string'
??_C@_0BI@BBDALNCF@NEW?5CERTIFICATE?5REQUEST?$AA@ db 'NEW CERTIFICATE REQUEST',0
					; DATA XREF: _check_pem:loc_17D5o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1D48h
; COMDAT (pick any)
		public ??_C@_0BE@PGIFFILK@CERTIFICATE?5REQUEST?$AA@
; `string'
??_C@_0BE@PGIFFILK@CERTIFICATE?5REQUEST?$AA@ db	'CERTIFICATE REQUEST',0
					; DATA XREF: _check_pem+299o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1D5Ch
; COMDAT (pick any)
		public ??_C@_0BE@LHICLJDN@TRUSTED?5CERTIFICATE?$AA@
; `string'
??_C@_0BE@LHICLJDN@TRUSTED?5CERTIFICATE?$AA@ db	'TRUSTED CERTIFICATE',0
					; DATA XREF: _check_pem+2FDo
					; _check_pem+361o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1D70h
; COMDAT (pick any)
		public ??_C@_05BKMMPIPN@PKCS7?$AA@
; `string'
??_C@_05BKMMPIPN@PKCS7?$AA@ db 'PKCS7',0 ; DATA XREF: _check_pem+3C9o
					; _check_pem+42Do ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1D78h
; COMDAT (pick any)
		public ??_C@_0BE@COMAFCKH@PKCS?5?$CD7?5SIGNED?5DATA?$AA@
; `string'
??_C@_0BE@COMAFCKH@PKCS?5?$CD7?5SIGNED?5DATA?$AA@ db 'PKCS #7 SIGNED DATA',0
					; DATA XREF: _check_pem:loc_196Do
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1D8Ch
; COMDAT (pick any)
		public ??_C@_03LOMOMHDE@CMS?$AA@
; `string'
??_C@_03LOMOMHDE@CMS?$AA@ db 'CMS',0    ; DATA XREF: _check_pem+491o
					; _check_pem+4F9o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1D90h
; COMDAT (pick any)
		public ??_C@_0M@NNIFEEDF@Expecting?3?5?$AA@
; `string'
??_C@_0M@NNIFEEDF@Expecting?3?5?$AA@ db	'Expecting: ',0 ; DATA XREF: _PEM_bytes_read_bio+E2o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1D9Ch
; COMDAT (pick any)
		public ??_C@_0BP@LNNHPGMG@enc?9?$DOiv_len?5?$DM?$DN?5?$CIint?$CJsizeof?$CIiv?$CJ?$AA@
; `string'
??_C@_0BP@LNNHPGMG@enc?9?$DOiv_len?5?$DM?$DN?5?$CIint?$CJsizeof?$CIiv?$CJ?$AA@ db 'enc->iv_len <= (int)sizeof(iv)',0
					; DATA XREF: _PEM_ASN1_write_bio+1DEo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1DBCh
; COMDAT (pick any)
		public ??_C@_0DJ@PLAABAEP@strlen?$CIobjstr?$CJ?5?$CL?523?5?$CL?52?5?$CK?5enc?9?$DOi@
; `string'
??_C@_0DJ@PLAABAEP@strlen?$CIobjstr?$CJ?5?$CL?523?5?$CL?52?5?$CK?5enc?9?$DOi@ db 'strlen(objstr) + 23 + 2 * enc->iv_len + 13 <= sizeof buf',0
					; DATA XREF: _PEM_ASN1_write_bio+27Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1DF8h
; COMDAT (pick any)
		public ??_C@_0M@ILILCPAC@Proc?9Type?3?5?$AA@
; char `string'[]
??_C@_0M@ILILCPAC@Proc?9Type?3?5?$AA@ db 'Proc-Type: ',0
					; DATA XREF: _PEM_get_EVP_CIPHER_INFO+34o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1E04h
; COMDAT (pick any)
		public ??_C@_0M@ILJMFDEM@?9?9?9?9?9BEGIN?5?$AA@
; char `string'[]
??_C@_0M@ILJMFDEM@?9?9?9?9?9BEGIN?5?$AA@ db '-----BEGIN ',0 ; DATA XREF: _PEM_read_bio+F6o
					; _PEM_write_bio+5Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1E10h
; COMDAT (pick any)
		public ??_C@_06NGLIMPFK@?9?9?9?9?9?6?$AA@
; char `string'[]
??_C@_06NGLIMPFK@?9?9?9?9?9?6?$AA@ db '-----',0Ah,0 ; DATA XREF: _PEM_read_bio+124o
					; _PEM_read_bio+4F1o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1E18h
; COMDAT (pick any)
		public ??_C@_09KLIMLKKH@?9?9?9?9?9END?5?$AA@
; char `string'[]
??_C@_09KLIMLKKH@?9?9?9?9?9END?5?$AA@ db '-----END ',0 ; DATA XREF: _PEM_read_bio+280o
					; _PEM_read_bio+3ACo ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn ___report_rangecheckfailure:near ; CODE XREF: _PEM_read_bio:loc_1278p
		extrn __imp____acrt_iob_func:near ; CODE XREF: _PEM_def_callback+87p
					; DATA XREF: _PEM_def_callback+87r
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _fprintf+19p
					; DATA XREF: ...
; int __cdecl _strncmp(const char *Str1, const char *Str2, size_t MaxCount)
		extrn __imp__strncmp:near ; CODE XREF: _PEM_get_EVP_CIPHER_INFO+3Ap
					; _PEM_get_EVP_CIPHER_INFO+78p	...
		extrn _CRYPTO_malloc:near ; CODE XREF: _PEM_ASN1_write_bio+101p
					; _PEM_write_bio+EEp
		extrn _CRYPTO_free:near	; CODE XREF: _PEM_ASN1_write_bio+3D4p
					; _PEM_bytes_read_bio+97p ...
		extrn _OPENSSL_cleanse:near ; CODE XREF: _PEM_ASN1_write_bio+252p
					; _PEM_ASN1_write_bio+390p ...
		extrn _OpenSSLDie:near	; CODE XREF: _PEM_ASN1_write_bio+1EDp
					; _PEM_ASN1_write_bio+28Bp
		extrn _BUF_MEM_new:near	; CODE XREF: _PEM_read_bio+5Dp
					; _PEM_read_bio+68p ...
		extrn _BUF_MEM_free:near ; CODE	XREF: _PEM_read_bio+16Dp
					; _PEM_read_bio+176p ...
		extrn _BUF_MEM_grow:near ; CODE	XREF: _PEM_read_bio+192p
					; _PEM_read_bio+1D4p ...
		extrn _BUF_MEM_grow_clean:near ; CODE XREF: _PEM_read_bio+3D3p
		extrn _BUF_strlcat:near	; CODE XREF: _PEM_dek_info+11p
					; _PEM_dek_info+20p ...
		extrn _BIO_s_file:near	; CODE XREF: _PEM_ASN1_read+1p
					; _PEM_ASN1_write+1p ...
		extrn _BIO_new:near	; CODE XREF: _PEM_ASN1_read+7p
					; _PEM_ASN1_write+7p ...
		extrn _BIO_free:near	; CODE XREF: _PEM_ASN1_read+5Dp
					; _PEM_ASN1_write+69p ...
		extrn _BIO_gets:near	; CODE XREF: _PEM_read_bio+A8p
					; _PEM_read_bio+141p ...
		extrn _BIO_write:near	; CODE XREF: _PEM_write_bio+64p
					; _PEM_write_bio+78p ...
		extrn _BIO_ctrl:near	; CODE XREF: _PEM_ASN1_read+3Bp
					; _PEM_ASN1_write+3Bp ...
		extrn _ERR_put_error:near ; CODE XREF: _PEM_ASN1_read+25p
					; _PEM_ASN1_write+25p ...
		extrn _ERR_peek_error:near ; CODE XREF:	_PEM_bytes_read_bio:loc_5EAp
		extrn _ERR_add_error_data:near ; CODE XREF: _PEM_bytes_read_bio+E9p
		extrn _OBJ_nid2sn:near	; CODE XREF: _PEM_ASN1_write_bio+83p
		extrn _EVP_CIPHER_nid:near ; CODE XREF:	_PEM_ASN1_write_bio+7Dp
		extrn _EVP_CIPHER_iv_length:near ; CODE	XREF: _PEM_ASN1_write_bio+94p
		extrn _EVP_read_pw_string_min:near ; CODE XREF:	_PEM_def_callback+58p
					; _PEM_def_callback+9Cp
		extrn _EVP_get_pw_prompt:near ;	CODE XREF: _PEM_def_callback+37p
		extrn _EVP_BytesToKey:near ; CODE XREF:	_PEM_ASN1_write_bio+231p
					; _PEM_do_header+EEp
		extrn _EVP_EncryptInit_ex:near ; CODE XREF: _PEM_ASN1_write_bio+2EAp
		extrn _EVP_EncryptUpdate:near ;	CODE XREF: _PEM_ASN1_write_bio+306p
		extrn _EVP_EncryptFinal_ex:near	; CODE XREF: _PEM_ASN1_write_bio+323p
		extrn _EVP_DecryptInit_ex:near ; CODE XREF: _PEM_do_header+122p
		extrn _EVP_DecryptUpdate:near ;	CODE XREF: _PEM_do_header+140p
		extrn _EVP_DecryptFinal_ex:near	; CODE XREF: _PEM_do_header+15Fp
		extrn _EVP_EncodeInit:near ; CODE XREF:	_PEM_write_bio+46p
		extrn _EVP_EncodeUpdate:near ; CODE XREF: _PEM_write_bio+13Cp
		extrn _EVP_EncodeFinal:near ; CODE XREF: _PEM_write_bio+18Ap
		extrn _EVP_DecodeInit:near ; CODE XREF:	_PEM_read_bio+509p
		extrn _EVP_DecodeUpdate:near ; CODE XREF: _PEM_read_bio+521p
		extrn _EVP_DecodeFinal:near ; CODE XREF: _PEM_read_bio+550p
		extrn _EVP_CIPHER_CTX_init:near	; CODE XREF: _PEM_ASN1_write_bio+2C8p
					; _PEM_do_header+10Bp
		extrn _EVP_CIPHER_CTX_cleanup:near ; CODE XREF:	_PEM_ASN1_write_bio+336p
					; _PEM_do_header+16Ep
		extrn _EVP_md5:near	; CODE XREF: _PEM_ASN1_write_bio+22Ap
					; _PEM_do_header+E6p
		extrn _EVP_get_cipherbyname:near ; CODE	XREF: _PEM_get_EVP_CIPHER_INFO+12Fp
		extrn _EVP_PKEY_asn1_find_str:near ; CODE XREF:	_check_pem+FCp
					; _check_pem+16Cp
		extrn _RAND_pseudo_bytes:near ;	CODE XREF: _PEM_ASN1_write_bio+200p
		extrn _RAND_add:near	; CODE XREF: _PEM_ASN1_write_bio+1D0p
		extrn _PEM_ASN1_read_bio:near ;	CODE XREF: _PEM_ASN1_read+55p
		extrn _ENGINE_finish:near ; CODE XREF: _check_pem+18Ep
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _PEM_ASN1_write_bio+3EBp
					; _PEM_bytes_read_bio+FDp ...
		extrn __chkstk:near	; CODE XREF: _PEM_ASN1_write_bio+5p
					; _PEM_ASN1_write_bio+1C1p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _PEM_def_callback+28p
					; _PEM_read_bio+1BBp ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _PEM_def_callback+BEp
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso
		extrn ___security_cookie:near ;	DATA XREF: _PEM_ASN1_write_bio+Ar
					; _PEM_bytes_read_bio+Ar ...
		extrn __fltused:near


		end
