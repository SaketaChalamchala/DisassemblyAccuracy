;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	03555C7D57A3A12CE2B5E386A9157DB0
; Input	CRC32 :	9BAF127B

; File Name   :	C:\compspace\Diff\openssl\obj\v3_ia5.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_i2s_ASN1_IA5STRING proc near		; DATA XREF: .rdata:000000F8o
					; .rdata:00000130o ...

arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jz	short loc_5D
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_5D
		push	edi
		push	57h ; 'W'
		inc	eax
		push	offset ??_C@_0BJ@HJHFFFPI@?4?2crypto?2x509v3?2v3_ia5?4c?$AA@ ; ".\\crypto\\x509v3\\v3_ia5.c"
		push	eax
		call	_CRYPTO_malloc
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_44
		push	58h ; 'X'
		push	offset ??_C@_0BJ@HJHFFFPI@?4?2crypto?2x509v3?2v3_ia5?4c?$AA@ ; ".\\crypto\\x509v3\\v3_ia5.c"
		push	41h ; 'A'
		push	95h ; '•'
		push	22h ; '"'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_44:					; CODE XREF: _i2s_ASN1_IA5STRING+25j
		push	dword ptr [esi]	; Size

loc_46:					; DATA XREF: .rdata:_v3_ns_ia5_listo
		push	dword ptr [esi+8] ; Src

loc_49:					; DATA XREF: .rdata:00000114o
		push	edi		; Dst

loc_4A:					; DATA XREF: .rdata:0000014Co
					; .rdata:00000184o ...
		call	_memcpy
		mov	eax, [esi]
		add	esp, 0Ch
		mov	byte ptr [edi+eax], 0
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_5D:					; CODE XREF: _i2s_ASN1_IA5STRING+7j
					; _i2s_ASN1_IA5STRING+Dj
		xor	eax, eax
		pop	esi
		retn
_i2s_ASN1_IA5STRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 64h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_s2i_ASN1_IA5STRING proc near		; DATA XREF: .rdata:000000FCo
					; .rdata:00000134o ...

arg_8		= dword	ptr  0Ch

		push	edi
		mov	edi, [esp+4+arg_8]
		test	edi, edi
		jnz	short loc_86
		push	66h ; 'f'
		push	offset ??_C@_0BJ@HJHFFFPI@?4?2crypto?2x509v3?2v3_ia5?4c?$AA@ ; ".\\crypto\\x509v3\\v3_ia5.c"
		push	6Bh ; 'k'
		push	64h ; 'd'
		push	22h ; '"'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_86:					; CODE XREF: _s2i_ASN1_IA5STRING+7j
		push	esi
		push	16h
		call	_ASN1_STRING_type_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short $err$9
		mov	ecx, edi
		lea	edx, [ecx+1]

loc_9C:					; CODE XREF: _s2i_ASN1_IA5STRING+3Dj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_9C
		sub	ecx, edx
		push	ecx
		push	edi
		push	esi
		call	_ASN1_STRING_set
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_D7
		push	esi
		call	_ASN1_STRING_free
		add	esp, 4

$err$9:					; CODE XREF: _s2i_ASN1_IA5STRING+31j
		push	75h ; 'u'
		push	offset ??_C@_0BJ@HJHFFFPI@?4?2crypto?2x509v3?2v3_ia5?4c?$AA@ ; ".\\crypto\\x509v3\\v3_ia5.c"
		push	41h ; 'A'
		push	64h ; 'd'
		push	22h ; '"'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_D7:					; CODE XREF: _s2i_ASN1_IA5STRING+4Ej
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_s2i_ASN1_IA5STRING endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 0DCh
		public _v3_ns_ia5_list
_v3_ns_ia5_list	dd offset loc_46+2
		dd 0
		dd offset _ASN1_IA5STRING_it
		dd 4 dup(0)
		dd offset _i2s_ASN1_IA5STRING
		dd offset _s2i_ASN1_IA5STRING
		dd 5 dup(0)
		dd offset loc_49
		dd 0
		dd offset _ASN1_IA5STRING_it
		dd 4 dup(0)
		dd offset _i2s_ASN1_IA5STRING
		dd offset _s2i_ASN1_IA5STRING
		dd 5 dup(0)
		dd offset loc_4A
		dd 0
		dd offset _ASN1_IA5STRING_it
		dd 4 dup(0)
		dd offset _i2s_ASN1_IA5STRING
		dd offset _s2i_ASN1_IA5STRING
		dd 5 dup(0)
		dd offset loc_4A+1
		dd 0
		dd offset _ASN1_IA5STRING_it
		dd 4 dup(0)
		dd offset _i2s_ASN1_IA5STRING
		dd offset _s2i_ASN1_IA5STRING
		dd 5 dup(0)
		dd offset loc_4A+2
		dd 0
		dd offset _ASN1_IA5STRING_it
		dd 4 dup(0)
		dd offset _i2s_ASN1_IA5STRING
		dd offset _s2i_ASN1_IA5STRING
		dd 5 dup(0)
		dd offset loc_4A+3
		dd 0
		dd offset _ASN1_IA5STRING_it
		dd 4 dup(0)
		dd offset _i2s_ASN1_IA5STRING
		dd offset _s2i_ASN1_IA5STRING
		dd 5 dup(0)
		dd offset loc_4A+4
		dd 0
		dd offset _ASN1_IA5STRING_it
		dd 4 dup(0)
		dd offset _i2s_ASN1_IA5STRING
		dd offset _s2i_ASN1_IA5STRING
		dd 5 dup(0)
		dd 0FFFFFFFFh, 0Dh dup(0)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 29Ch
; COMDAT (pick any)
		public ??_C@_0BJ@HJHFFFPI@?4?2crypto?2x509v3?2v3_ia5?4c?$AA@
; `string'
??_C@_0BJ@HJHFFFPI@?4?2crypto?2x509v3?2v3_ia5?4c?$AA@ db '.\crypto\x509v3\v3_ia5.c',0
					; DATA XREF: _i2s_ASN1_IA5STRING+13o
					; _i2s_ASN1_IA5STRING+29o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ASN1_IA5STRING_it:near ;	DATA XREF: .rdata:000000E4o
					; .rdata:0000011Co ...
		extrn _CRYPTO_malloc:near ; CODE XREF: _i2s_ASN1_IA5STRING+19p
		extrn _ERR_put_error:near ; CODE XREF: _i2s_ASN1_IA5STRING+37p
					; _s2i_ASN1_IA5STRING+16p ...
		extrn _ASN1_STRING_free:near ; CODE XREF: _s2i_ASN1_IA5STRING+51p
		extrn _ASN1_STRING_type_new:near ; CODE	XREF: _s2i_ASN1_IA5STRING+25p
		extrn _ASN1_STRING_set:near ; CODE XREF: _s2i_ASN1_IA5STRING+44p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _i2s_ASN1_IA5STRING:loc_4Ap


		end
