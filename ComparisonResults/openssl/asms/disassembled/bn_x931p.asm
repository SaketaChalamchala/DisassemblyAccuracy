;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	C021636C8E61732AD3103E698B762DD0
; Input	CRC32 :	378CA87F

; File Name   :	C:\compspace\Diff\openssl\obj\bn_x931p.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_X931_derive_prime_ex
_BN_X931_derive_prime_ex proc near	; CODE XREF: _BN_X931_generate_prime_ex+7Ap

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		mov	eax, 8
		call	__chkstk
		mov	eax, [esp+8+arg_18]
		mov	[esp+8+var_4], 0
		cmp	dword ptr [eax+4], 0
		jle	loc_25F
		mov	eax, [eax]
		test	byte ptr [eax],	1
		jz	loc_25F
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+18h+arg_1C]
		push	edi
		call	_BN_CTX_start
		add	esp, 4
		cmp	[esp+18h+arg_4], 0
		jnz	short loc_50
		push	edi
		call	_BN_CTX_get
		add	esp, 4
		mov	[esp+18h+arg_4], eax

loc_50:					; CODE XREF: _BN_X931_derive_prime_ex+41j
		mov	esi, [esp+18h+arg_8]
		test	esi, esi
		jnz	short loc_67
		push	edi
		call	_BN_CTX_get
		mov	esi, eax
		add	esp, 4
		mov	[esp+18h+arg_8], esi

loc_67:					; CODE XREF: _BN_X931_derive_prime_ex+56j
		push	edi
		call	_BN_CTX_get
		push	edi
		mov	ebx, eax
		call	_BN_CTX_get
		push	edi
		mov	[esp+24h+var_8], eax
		call	_BN_CTX_get
		push	[esp+24h+arg_20]
		mov	ebp, eax
		push	edi
		push	[esp+2Ch+arg_10]
		push	[esp+30h+arg_4]
		call	_bn_x931_derive_pi
		add	esp, 1Ch
		test	eax, eax
		jz	$err$38
		push	[esp+18h+arg_20]
		push	edi
		push	[esp+20h+arg_14]
		push	esi
		call	_bn_x931_derive_pi
		add	esp, 10h
		test	eax, eax
		jz	$err$38
		push	edi
		push	esi
		push	[esp+20h+arg_4]
		push	[esp+24h+var_8]
		call	_BN_mul
		add	esp, 10h
		test	eax, eax
		jz	$err$38
		push	edi
		push	[esp+1Ch+arg_4]
		push	esi
		mov	esi, [esp+24h+arg_0]
		push	esi
		call	_BN_mod_inverse
		add	esp, 10h
		test	eax, eax
		jz	$err$38
		push	edi
		push	[esp+1Ch+arg_8]
		push	esi
		push	esi
		call	_BN_mul
		add	esp, 10h
		test	eax, eax
		jz	$err$38
		push	edi
		push	[esp+1Ch+arg_8]
		push	[esp+20h+arg_4]
		push	ebx
		call	_BN_mod_inverse
		add	esp, 10h
		test	eax, eax
		jz	$err$38
		push	edi
		push	[esp+1Ch+arg_4]
		push	ebx
		push	ebx
		call	_BN_mul
		add	esp, 10h
		test	eax, eax
		jz	$err$38
		push	ebx
		push	esi
		push	esi
		call	_BN_sub
		add	esp, 0Ch
		test	eax, eax
		jz	$err$38
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_164
		push	[esp+18h+var_8]
		push	esi
		push	esi
		call	_BN_add
		add	esp, 0Ch
		test	eax, eax
		jz	$err$38

loc_164:				; CODE XREF: _BN_X931_derive_prime_ex+14Cj
		push	edi
		push	[esp+1Ch+var_8]
		push	[esp+20h+arg_C]
		push	esi
		push	esi
		call	_BN_mod_sub
		add	esp, 14h
		test	eax, eax
		jz	$err$38
		push	[esp+18h+arg_C]
		push	esi
		push	esi
		call	_BN_add
		add	esp, 0Ch
		test	eax, eax
		jz	$err$38
		push	1
		push	0
		push	[esp+20h+arg_20]
		call	_BN_GENCB_call
		push	esi
		push	ebp
		call	_BN_copy
		add	esp, 14h
		test	eax, eax
		jz	$err$38

loc_1B4:				; CODE XREF: _BN_X931_derive_prime_ex+22Ej
		push	1
		push	ebp
		call	_BN_sub_word
		add	esp, 8
		test	eax, eax
		jz	$err$38
		push	edi
		push	[esp+1Ch+arg_18]
		push	ebp
		push	ebx
		call	_BN_gcd
		add	esp, 10h
		test	eax, eax
		jz	short $err$38
		cmp	dword ptr [ebx+4], 1
		jnz	short loc_203
		mov	eax, [ebx]
		cmp	dword ptr [eax], 1
		jnz	short loc_203
		cmp	dword ptr [ebx+0Ch], 0
		jnz	short loc_203
		push	[esp+18h+arg_20]
		push	1
		push	edi
		push	32h ; '2'
		push	esi
		call	_BN_is_prime_fasttest_ex
		add	esp, 14h
		test	eax, eax
		jnz	short loc_232

loc_203:				; CODE XREF: _BN_X931_derive_prime_ex+1DEj
					; _BN_X931_derive_prime_ex+1E5j ...
		push	[esp+18h+var_8]
		push	esi
		push	esi
		call	_BN_add
		add	esp, 0Ch
		test	eax, eax
		jz	short $err$38
		push	1
		push	0
		push	[esp+20h+arg_20]
		call	_BN_GENCB_call
		push	esi
		push	ebp
		call	_BN_copy
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1B4
		jmp	short $err$38
; ---------------------------------------------------------------------------

loc_232:				; CODE XREF: _BN_X931_derive_prime_ex+201j
		push	0
		push	3
		push	[esp+20h+arg_20]
		call	_BN_GENCB_call
		add	esp, 0Ch
		mov	[esp+18h+var_4], 1

$err$38:				; CODE XREF: _BN_X931_derive_prime_ex+98j
					; _BN_X931_derive_prime_ex+B2j	...
		push	edi
		call	_BN_CTX_end
		mov	eax, [esp+1Ch+var_4]
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_25F:				; CODE XREF: _BN_X931_derive_prime_ex+1Aj
					; _BN_X931_derive_prime_ex+25j
		xor	eax, eax
		add	esp, 8
		retn
_BN_X931_derive_prime_ex endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 268h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_X931_generate_Xpq
_BN_X931_generate_Xpq proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_8]
		cmp	ebx, 400h
		jl	loc_31E
		test	bl, bl
		jnz	loc_31E
		push	ebp
		push	esi
		push	edi
		push	0
		push	1
		sar	ebx, 1
		push	ebx
		push	[esp+1Ch+arg_0]
		call	_BN_rand
		mov	ebp, [esp+20h+arg_C]
		add	esp, 10h
		test	eax, eax
		jz	short $err$23
		push	ebp
		call	_BN_CTX_start
		push	ebp
		call	_BN_CTX_get
		mov	edi, [esp+18h+arg_4]
		add	esp, 8
		mov	ebp, eax
		xor	esi, esi
		xchg	ax, ax

loc_2B8:				; CODE XREF: _BN_X931_generate_Xpq+84j
		push	0
		push	1
		push	ebx
		push	edi
		call	_BN_rand
		add	esp, 10h
		test	eax, eax
		jz	short loc_30A
		push	edi
		push	[esp+14h+arg_0]
		push	ebp
		call	_BN_sub
		push	ebp
		call	_BN_num_bits
		lea	ecx, [ebx-64h]
		add	esp, 10h
		cmp	eax, ecx
		jg	short loc_2EE
		inc	esi
		cmp	esi, 3E8h
		jl	short loc_2B8

loc_2EE:				; CODE XREF: _BN_X931_generate_Xpq+7Bj
		push	[esp+10h+arg_C]
		call	_BN_CTX_end
		add	esp, 4
		xor	eax, eax
		cmp	esi, 3E8h
		setl	al
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_30A:				; CODE XREF: _BN_X931_generate_Xpq+60j
		mov	ebp, [esp+10h+arg_C]

$err$23:				; CODE XREF: _BN_X931_generate_Xpq+35j
		push	ebp
		call	_BN_CTX_end
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_31E:				; CODE XREF: _BN_X931_generate_Xpq+Bj
					; _BN_X931_generate_Xpq+13j
		xor	eax, eax
		pop	ebx
		retn
_BN_X931_generate_Xpq endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 324h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_X931_generate_prime_ex
_BN_X931_generate_prime_ex proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_1C]
		xor	ebp, ebp
		push	edi
		push	esi
		call	_BN_CTX_start
		mov	edi, [esp+14h+arg_C]
		add	esp, 4
		test	edi, edi
		jnz	short loc_34A
		push	esi
		call	_BN_CTX_get
		add	esp, 4
		mov	edi, eax

loc_34A:				; CODE XREF: _BN_X931_generate_prime_ex+19j
		mov	ebx, [esp+10h+arg_10]
		test	ebx, ebx
		jnz	short loc_35D
		push	esi
		call	_BN_CTX_get
		add	esp, 4
		mov	ebx, eax

loc_35D:				; CODE XREF: _BN_X931_generate_prime_ex+2Cj
		push	0
		push	0
		push	65h ; 'e'
		push	edi
		call	_BN_rand
		add	esp, 10h
		test	eax, eax
		jz	short $error$9
		push	0
		push	0
		push	65h ; 'e'
		push	ebx
		call	_BN_rand
		add	esp, 10h
		test	eax, eax
		jz	short $error$9
		push	[esp+10h+arg_20]
		push	esi
		push	[esp+18h+arg_18]
		push	ebx
		push	edi
		push	[esp+24h+arg_14]
		push	[esp+28h+arg_8]
		push	[esp+2Ch+arg_4]
		push	[esp+30h+arg_0]
		call	_BN_X931_derive_prime_ex
		add	esp, 24h
		mov	ecx, 1
		test	eax, eax
		cmovnz	ebp, ecx

$error$9:				; CODE XREF: _BN_X931_generate_prime_ex+4Aj
					; _BN_X931_generate_prime_ex+5Dj
		push	esi
		call	_BN_CTX_end
		add	esp, 4
		mov	eax, ebp
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_BN_X931_generate_prime_ex endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_bn_x931_derive_pi proc	near		; CODE XREF: _BN_X931_derive_prime_ex+8Ep
					; _BN_X931_derive_prime_ex+A8p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	[esp+4+arg_4]
		mov	esi, [esp+8+arg_0]
		push	esi
		call	_BN_copy
		add	esp, 8
		test	eax, eax
		jnz	short loc_3DA

loc_3D6:				; CODE XREF: _bn_x931_derive_pi+34j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3DA:				; CODE XREF: _bn_x931_derive_pi+14j
		cmp	dword ptr [esi+4], 0
		jle	short loc_3E7
		mov	eax, [esi]
		test	byte ptr [eax],	1
		jnz	short loc_3F6

loc_3E7:				; CODE XREF: _bn_x931_derive_pi+1Ej
		push	1
		push	esi
		call	_BN_add_word
		add	esp, 8
		test	eax, eax
		jz	short loc_3D6

loc_3F6:				; CODE XREF: _bn_x931_derive_pi+25j
		push	ebx
		mov	ebx, [esp+8+arg_C]
		push	ebp
		push	edi
		mov	edi, 1
		push	edi
		push	0
		push	ebx
		call	_BN_GENCB_call
		mov	ebp, [esp+1Ch+arg_8]
		push	ebx
		push	edi
		push	ebp
		push	1Bh
		push	esi
		call	_BN_is_prime_fasttest_ex
		add	esp, 20h
		test	eax, eax
		jnz	short loc_44D

loc_421:				; CODE XREF: _bn_x931_derive_pi+8Bj
		push	2
		push	esi
		call	_BN_add_word
		add	esp, 8
		test	eax, eax
		jz	short loc_463
		inc	edi
		push	edi
		push	0
		push	ebx
		call	_BN_GENCB_call
		push	ebx
		push	1
		push	ebp
		push	1Bh
		push	esi
		call	_BN_is_prime_fasttest_ex
		add	esp, 20h
		test	eax, eax
		jz	short loc_421

loc_44D:				; CODE XREF: _bn_x931_derive_pi+5Fj
		push	edi
		push	2
		push	ebx
		call	_BN_GENCB_call
		add	esp, 0Ch
		mov	eax, 1
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_463:				; CODE XREF: _bn_x931_derive_pi+6Ej
		pop	edi
		pop	ebp
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
_bn_x931_derive_pi endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BN_GENCB_call:near ; CODE XREF: _BN_X931_derive_prime_ex+19Dp
					; _BN_X931_derive_prime_ex+21Dp ...
		extrn _BN_CTX_start:near ; CODE	XREF: _BN_X931_derive_prime_ex+34p
					; _BN_X931_generate_Xpq+38p ...
		extrn _BN_CTX_get:near	; CODE XREF: _BN_X931_derive_prime_ex+44p
					; _BN_X931_derive_prime_ex+59p	...
		extrn _BN_CTX_end:near	; CODE XREF: _BN_X931_derive_prime_ex+24Bp
					; _BN_X931_generate_Xpq+8Ap ...
		extrn _BN_rand:near	; CODE XREF: _BN_X931_generate_Xpq+27p
					; _BN_X931_generate_Xpq+56p ...
		extrn _BN_num_bits:near	; CODE XREF: _BN_X931_generate_Xpq+6Ep
		extrn _BN_copy:near	; CODE XREF: _BN_X931_derive_prime_ex+1A4p
					; _BN_X931_derive_prime_ex+224p ...
		extrn _BN_sub:near	; CODE XREF: _BN_X931_derive_prime_ex+138p
					; _BN_X931_generate_Xpq+68p
		extrn _BN_add:near	; CODE XREF: _BN_X931_derive_prime_ex+154p
					; _BN_X931_derive_prime_ex+185p ...
		extrn _BN_mul:near	; CODE XREF: _BN_X931_derive_prime_ex+C2p
					; _BN_X931_derive_prime_ex+F4p	...
		extrn _BN_mod_sub:near	; CODE XREF: _BN_X931_derive_prime_ex+16Fp
		extrn _BN_add_word:near	; CODE XREF: _bn_x931_derive_pi+2Ap
					; _bn_x931_derive_pi+64p
		extrn _BN_sub_word:near	; CODE XREF: _BN_X931_derive_prime_ex+1B7p
		extrn _BN_gcd:near	; CODE XREF: _BN_X931_derive_prime_ex+1CEp
		extrn _BN_mod_inverse:near ; CODE XREF:	_BN_X931_derive_prime_ex+DDp
					; _BN_X931_derive_prime_ex+10Ep
		extrn _BN_is_prime_fasttest_ex:near
					; CODE XREF: _BN_X931_derive_prime_ex+1F7p
					; _bn_x931_derive_pi+55p ...
		extrn __chkstk:near	; CODE XREF: _BN_X931_derive_prime_ex+5p


		end
