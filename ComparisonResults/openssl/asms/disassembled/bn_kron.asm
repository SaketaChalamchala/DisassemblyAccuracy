;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	671B8FAF61828860B9C73CB67D0A37C7
; Input	CRC32 :	C4C182EA

; File Name   :	C:\compspace\Diff\openssl\obj\bn_kron.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
; `BN_kronecker'::`2'::tab
?tab@?1??BN_kronecker@@9@9 dd 0		; DATA XREF: _BN_kronecker+116r
					; _BN_kronecker+126r ...
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd 0FFFFFFFFh, 0
		dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 20h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_kronecker
_BN_kronecker	proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	ebp
		mov	ebp, [esp+0Ch+arg_8]
		mov	ebx, 0FFFFFFFEh
		push	esi
		push	edi
		push	ebp
		xor	esi, esi
		call	_BN_CTX_start
		push	ebp
		call	_BN_CTX_get
		push	ebp
		mov	edi, eax
		call	_BN_CTX_get
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jz	$end$67
		push	[esp+14h+arg_0]
		push	edi
		call	_BN_copy
		add	esp, 8
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		add	esi, 1
		jnz	$end$67
		push	[esp+14h+arg_4]
		push	ebp
		call	_BN_copy
		add	esp, 8
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		add	esi, 1
		jnz	$end$67
		mov	ecx, [ebp+4]
		test	ecx, ecx
		jnz	short loc_B6
		cmp	dword ptr [edi+4], 1
		jnz	loc_268
		mov	eax, [edi]
		cmp	dword ptr [eax], 1
		jnz	loc_268
		lea	ebx, [esi+1]
		jmp	$end$67
; ---------------------------------------------------------------------------

loc_B6:					; CODE XREF: _BN_kronecker+77j
		cmp	dword ptr [edi+4], 0
		jle	short loc_C3
		mov	eax, [edi]
		test	byte ptr [eax],	1
		jnz	short loc_D7

loc_C3:					; CODE XREF: _BN_kronecker+9Aj
		test	ecx, ecx
		jle	loc_268
		mov	eax, [ebp+0]
		test	byte ptr [eax],	1
		jz	loc_268

loc_D7:					; CODE XREF: _BN_kronecker+A1j
		push	0
		push	ebp
		mov	[esp+1Ch+var_4], 0
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jnz	short loc_108
		xor	ebx, ebx

loc_F0:					; CODE XREF: _BN_kronecker+DDj
		inc	ebx
		push	ebx
		push	ebp
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jz	short loc_F0
		mov	[esp+14h+var_4], ebx
		mov	ebx, 0FFFFFFFEh

loc_108:				; CODE XREF: _BN_kronecker+CCj
		push	[esp+14h+var_4]
		push	ebp
		push	ebp
		call	_BN_rshift
		add	esp, 0Ch
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		add	esi, 1
		jnz	$end$67
		test	byte ptr [esp+14h+var_4], 1
		jz	short loc_14F
		cmp	[edi+4], esi
		jnz	short loc_13F
		xor	eax, eax
		and	eax, 7
		mov	eax, ?tab@?1??BN_kronecker@@9@9[eax*4] ; `BN_kronecker'::`2'::tab
		jmp	short loc_154
; ---------------------------------------------------------------------------

loc_13F:				; CODE XREF: _BN_kronecker+10Fj
		mov	eax, [edi]
		mov	eax, [eax]
		and	eax, 7
		mov	eax, ?tab@?1??BN_kronecker@@9@9[eax*4] ; `BN_kronecker'::`2'::tab
		jmp	short loc_154
; ---------------------------------------------------------------------------

loc_14F:				; CODE XREF: _BN_kronecker+10Aj
		mov	eax, 1

loc_154:				; CODE XREF: _BN_kronecker+11Dj
					; _BN_kronecker+12Dj
		cmp	dword ptr [ebp+0Ch], 0
		mov	[esp+14h+var_4], eax
		jz	short loc_171
		mov	dword ptr [ebp+0Ch], 0
		cmp	dword ptr [edi+0Ch], 0
		jz	short loc_171
		neg	eax
		mov	[esp+14h+var_4], eax

loc_171:				; CODE XREF: _BN_kronecker+13Cj
					; _BN_kronecker+149j
		cmp	dword ptr [edi+4], 0
		jz	loc_254
		nop	dword ptr [eax+eax+00h]

loc_180:				; CODE XREF: _BN_kronecker+22Ej
		xor	ebx, ebx
		push	ebx
		push	edi
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jnz	short loc_19F

loc_190:				; CODE XREF: _BN_kronecker+17Dj
		inc	ebx
		push	ebx
		push	edi
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jz	short loc_190

loc_19F:				; CODE XREF: _BN_kronecker+16Ej
		push	ebx
		push	edi
		push	edi
		call	_BN_rshift
		add	esp, 0Ch
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		add	esi, 1
		jnz	loc_26C
		test	bl, 1
		jz	short loc_1E1
		cmp	[ebp+4], esi
		jnz	short loc_1C7
		xor	eax, eax
		jmp	short loc_1CC
; ---------------------------------------------------------------------------

loc_1C7:				; CODE XREF: _BN_kronecker+1A1j
		mov	eax, [ebp+0]
		mov	eax, [eax]

loc_1CC:				; CODE XREF: _BN_kronecker+1A5j
		and	eax, 7
		mov	ebx, ?tab@?1??BN_kronecker@@9@9[eax*4] ; `BN_kronecker'::`2'::tab
		imul	ebx, [esp+14h+var_4]
		mov	[esp+14h+var_4], ebx
		jmp	short loc_1E5
; ---------------------------------------------------------------------------

loc_1E1:				; CODE XREF: _BN_kronecker+19Cj
		mov	ebx, [esp+14h+var_4]

loc_1E5:				; CODE XREF: _BN_kronecker+1BFj
		cmp	dword ptr [edi+0Ch], 0
		jz	short loc_1FF
		cmp	dword ptr [edi+4], 0
		jnz	short loc_1F7
		xor	ecx, ecx
		not	ecx
		jmp	short loc_20D
; ---------------------------------------------------------------------------

loc_1F7:				; CODE XREF: _BN_kronecker+1CFj
		mov	eax, [edi]
		mov	ecx, [eax]
		not	ecx
		jmp	short loc_20D
; ---------------------------------------------------------------------------

loc_1FF:				; CODE XREF: _BN_kronecker+1C9j
		cmp	dword ptr [edi+4], 0
		jnz	short loc_209
		xor	ecx, ecx
		jmp	short loc_20D
; ---------------------------------------------------------------------------

loc_209:				; CODE XREF: _BN_kronecker+1E3j
		mov	eax, [edi]
		mov	ecx, [eax]

loc_20D:				; CODE XREF: _BN_kronecker+1D5j
					; _BN_kronecker+1DDj ...
		cmp	dword ptr [ebp+4], 0
		jnz	short loc_217
		xor	eax, eax
		jmp	short loc_21C
; ---------------------------------------------------------------------------

loc_217:				; CODE XREF: _BN_kronecker+1F1j
		mov	eax, [ebp+0]
		mov	eax, [eax]

loc_21C:				; CODE XREF: _BN_kronecker+1F5j
		and	eax, ecx
		test	al, 2
		jz	short loc_228
		neg	ebx
		mov	[esp+14h+var_4], ebx

loc_228:				; CODE XREF: _BN_kronecker+200j
		push	[esp+14h+arg_8]
		push	edi
		push	ebp
		push	ebp
		call	_BN_nnmod
		add	esp, 10h
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		add	esi, 1
		jnz	short $end$67
		mov	eax, edi
		mov	edi, ebp
		mov	ebp, eax
		mov	[eax+0Ch], esi
		cmp	[edi+4], esi
		jnz	loc_180

loc_254:				; CODE XREF: _BN_kronecker+155j
		cmp	dword ptr [ebp+4], 1
		jnz	short loc_268
		mov	eax, [ebp+0]
		cmp	dword ptr [eax], 1
		jnz	short loc_268
		cmp	dword ptr [ebp+0Ch], 0
		jz	short loc_26C

loc_268:				; CODE XREF: _BN_kronecker+7Dj
					; _BN_kronecker+88j ...
		xor	ebx, ebx
		jmp	short $end$67
; ---------------------------------------------------------------------------

loc_26C:				; CODE XREF: _BN_kronecker+193j
					; _BN_kronecker+246j
		mov	ebx, [esp+14h+var_4]

$end$67:				; CODE XREF: _BN_kronecker+34j
					; _BN_kronecker+50j ...
		push	[esp+14h+arg_8]
		call	_BN_CTX_end
		add	esp, 4
		mov	eax, 0FFFFFFFEh
		test	esi, esi
		cmovnz	ebx, eax
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		pop	ecx
		retn
_BN_kronecker	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BN_CTX_start:near ; CODE	XREF: _BN_kronecker+1Ap
		extrn _BN_CTX_get:near	; CODE XREF: _BN_kronecker+20p
					; _BN_kronecker+28p
		extrn _BN_CTX_end:near	; CODE XREF: _BN_kronecker+254p
		extrn _BN_copy:near	; CODE XREF: _BN_kronecker+3Fp
					; _BN_kronecker+5Bp
		extrn _BN_nnmod:near	; CODE XREF: _BN_kronecker+20Fp
		extrn _BN_is_bit_set:near ; CODE XREF: _BN_kronecker+C2p
					; _BN_kronecker+D3p ...
		extrn _BN_rshift:near	; CODE XREF: _BN_kronecker+EEp
					; _BN_kronecker+182p
		extrn __chkstk:near	; CODE XREF: _BN_kronecker+5p


		end
