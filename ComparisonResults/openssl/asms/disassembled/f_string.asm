;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	5B40337857B94F9B7EB0BB316B4BB0D5
; Input	CRC32 :	50B15504

; File Name   :	C:\compspace\Diff\openssl\obj\f_string.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
; `i2a_ASN1_STRING'::`2'::h
?h@?1??i2a_ASN1_STRING@@9@9 dd offset ??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@
					; DATA XREF: _i2a_ASN1_STRING+82r
_data		ends			; "0123456789ABCDEF"

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4
; COMDAT (pick any)
		public ??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@
; `string'
??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@ db '0123456789ABCDEF',0
					; DATA XREF: .data:`i2a_ASN1_STRING'::`2'::ho
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 18h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _a2i_ASN1_STRING
_a2i_ASN1_STRING proc near

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 14h
		call	__chkstk
		push	ebx
		push	ebp
		mov	ebp, [esp+1Ch+arg_8]
		xor	ebx, ebx
		push	esi
		push	edi
		push	[esp+24h+arg_C]
		xor	esi, esi
		mov	[esp+28h+var_8], ebx
		push	ebp
		push	[esp+2Ch+arg_0]
		xor	edi, edi
		mov	[esp+30h+var_14], esi
		mov	[esp+30h+var_C], edi
		call	_BIO_gets
		mov	ecx, eax
		add	esp, 0Ch
		cmp	ecx, 1
		jl	loc_28B

loc_58:					; CODE XREF: _a2i_ASN1_STRING+1CCj
		cmp	byte ptr [ecx+ebp-1], 0Ah
		jnz	short loc_64
		dec	ecx
		mov	byte ptr [ecx+ebp], 0

loc_64:					; CODE XREF: _a2i_ASN1_STRING+45j
		test	ecx, ecx
		jz	$err_sl$71
		cmp	byte ptr [ecx+ebp-1], 0Dh
		jnz	short loc_78
		dec	ecx
		mov	byte ptr [ecx+ebp], 0

loc_78:					; CODE XREF: _a2i_ASN1_STRING+59j
		test	ecx, ecx
		jz	$err_sl$71
		xor	eax, eax
		lea	edx, [ecx-1]
		cmp	byte ptr [ecx+ebp-1], 5Ch ; '\'
		setz	al
		mov	[esp+24h+var_10], eax
		test	edx, edx
		jle	short loc_C0
		nop	dword ptr [eax]

loc_98:					; CODE XREF: _a2i_ASN1_STRING+9Ej
		mov	al, [edx+ebp]
		cmp	al, 30h	; '0'
		jl	short loc_A3
		cmp	al, 39h	; '9'
		jle	short loc_B3

loc_A3:					; CODE XREF: _a2i_ASN1_STRING+85j
		cmp	al, 61h	; 'a'
		jl	short loc_AB
		cmp	al, 66h	; 'f'
		jle	short loc_B3

loc_AB:					; CODE XREF: _a2i_ASN1_STRING+8Dj
		cmp	al, 41h	; 'A'
		jl	short loc_BA
		cmp	al, 46h	; 'F'
		jg	short loc_BA

loc_B3:					; CODE XREF: _a2i_ASN1_STRING+89j
					; _a2i_ASN1_STRING+91j
		dec	edx
		test	edx, edx
		jg	short loc_98
		jmp	short loc_BC
; ---------------------------------------------------------------------------

loc_BA:					; CODE XREF: _a2i_ASN1_STRING+95j
					; _a2i_ASN1_STRING+99j
		mov	ecx, edx

loc_BC:					; CODE XREF: _a2i_ASN1_STRING+A0j
		mov	eax, [esp+24h+var_10]

loc_C0:					; CODE XREF: _a2i_ASN1_STRING+7Bj
		mov	byte ptr [ecx+ebp], 0
		cmp	ecx, 2
		jl	$err_sl$71
		sub	ecx, eax
		mov	eax, ecx
		and	eax, 80000001h
		jns	short loc_DD
		dec	eax
		or	eax, 0FFFFFFFEh
		inc	eax

loc_DD:					; CODE XREF: _a2i_ASN1_STRING+BEj
		jnz	loc_23D
		mov	eax, ecx
		cdq
		sub	eax, edx
		mov	ebp, eax
		sar	ebp, 1
		lea	eax, [ebx+ebp]
		mov	[esp+24h+var_4], eax
		cmp	eax, edi
		jle	short loc_142
		test	esi, esi
		jnz	short loc_117
		push	0A2h ; '¢'
		lea	ebx, [ebx+ebp*2]
		push	offset ??_C@_0BJ@CIJCPIKE@?4?2crypto?2asn1?2f_string?4c?$AA@ ; ".\\crypto\\asn1\\f_string.c"
		push	ebx
		mov	[esp+30h+var_C], ebx
		call	_CRYPTO_malloc
		add	esp, 0Ch
		jmp	short loc_132
; ---------------------------------------------------------------------------

loc_117:				; CODE XREF: _a2i_ASN1_STRING+E1j
		push	0A6h ; '¶'
		lea	eax, [ebx+ebp*2]
		push	offset ??_C@_0BJ@CIJCPIKE@?4?2crypto?2asn1?2f_string?4c?$AA@ ; ".\\crypto\\asn1\\f_string.c"
		push	eax
		push	esi
		mov	[esp+34h+var_C], eax
		call	_CRYPTO_realloc
		add	esp, 10h

loc_132:				; CODE XREF: _a2i_ASN1_STRING+FDj
		test	eax, eax
		jz	loc_1E9
		mov	edx, eax
		mov	[esp+24h+var_14], edx
		jmp	short loc_146
; ---------------------------------------------------------------------------

loc_142:				; CODE XREF: _a2i_ASN1_STRING+DDj
		mov	edx, [esp+24h+var_14]

loc_146:				; CODE XREF: _a2i_ASN1_STRING+128j
		xor	edi, edi
		test	ebp, ebp
		jle	short loc_1A9
		mov	ebx, [esp+24h+arg_8]
		nop	dword ptr [eax+eax+00000000h]

loc_158:				; CODE XREF: _a2i_ASN1_STRING+18Fj
		xor	esi, esi

loc_15A:				; CODE XREF: _a2i_ASN1_STRING+187j
		movzx	eax, byte ptr [ebx+esi]
		lea	ecx, [eax-30h]
		cmp	ecx, 9
		ja	short loc_16A
		mov	eax, ecx
		jmp	short loc_186
; ---------------------------------------------------------------------------

loc_16A:				; CODE XREF: _a2i_ASN1_STRING+14Cj
		lea	ecx, [eax-61h]
		cmp	ecx, 5
		ja	short loc_177
		sub	eax, 57h ; 'W'
		jmp	short loc_186
; ---------------------------------------------------------------------------

loc_177:				; CODE XREF: _a2i_ASN1_STRING+158j
		lea	ecx, [eax-41h]
		cmp	ecx, 5
		ja	loc_218
		sub	eax, 37h ; '7'

loc_186:				; CODE XREF: _a2i_ASN1_STRING+150j
					; _a2i_ASN1_STRING+15Dj
		mov	ecx, [esp+24h+var_8]
		inc	esi
		add	ecx, edi
		add	edx, ecx
		mov	cl, [edx]
		shl	cl, 4
		or	cl, al
		mov	[edx], cl
		mov	edx, [esp+24h+var_14]
		cmp	esi, 2
		jl	short loc_15A
		inc	edi
		add	ebx, 2
		cmp	edi, ebp
		jl	short loc_158

loc_1A9:				; CODE XREF: _a2i_ASN1_STRING+132j
		cmp	[esp+24h+var_10], 0
		mov	ebx, [esp+24h+var_4]
		mov	[esp+24h+var_8], ebx
		jz	loc_287
		push	[esp+24h+arg_C]
		mov	ebp, [esp+28h+arg_8]
		push	ebp
		push	[esp+2Ch+arg_0]
		call	_BIO_gets
		mov	ecx, eax
		add	esp, 0Ch
		cmp	ecx, 1
		jl	$err_sl$71
		mov	esi, [esp+24h+var_14]
		mov	edi, [esp+24h+var_C]
		jmp	loc_58
; ---------------------------------------------------------------------------

loc_1E9:				; CODE XREF: _a2i_ASN1_STRING+11Cj
		push	0A8h ; '®'
		push	offset ??_C@_0BJ@CIJCPIKE@?4?2crypto?2asn1?2f_string?4c?$AA@ ; ".\\crypto\\asn1\\f_string.c"
		push	41h ; 'A'
		push	67h ; 'g'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		test	esi, esi
		jz	short loc_258
		push	esi
		call	_CRYPTO_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_218:				; CODE XREF: _a2i_ASN1_STRING+165j
		push	0BBh ; 'ª'
		push	offset ??_C@_0BJ@CIJCPIKE@?4?2crypto?2asn1?2f_string?4c?$AA@ ; ".\\crypto\\asn1\\f_string.c"
		push	8Dh ; 'ç'
		push	67h ; 'g'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_23D:				; CODE XREF: _a2i_ASN1_STRING:loc_DDj
		push	9Bh ; 'õ'
		push	offset ??_C@_0BJ@CIJCPIKE@?4?2crypto?2asn1?2f_string?4c?$AA@ ; ".\\crypto\\asn1\\f_string.c"
		push	91h ; 'ë'
		push	67h ; 'g'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h

loc_258:				; CODE XREF: _a2i_ASN1_STRING+1EBj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

$err_sl$71:				; CODE XREF: _a2i_ASN1_STRING+4Ej
					; _a2i_ASN1_STRING+62j	...
		push	0CEh ; 'Œ'
		push	offset ??_C@_0BJ@CIJCPIKE@?4?2crypto?2asn1?2f_string?4c?$AA@ ; ".\\crypto\\asn1\\f_string.c"
		push	96h ; 'ñ'
		push	67h ; 'g'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_287:				; CODE XREF: _a2i_ASN1_STRING+19Ej
		mov	esi, [esp+24h+var_14]

loc_28B:				; CODE XREF: _a2i_ASN1_STRING+3Aj
		mov	eax, [esp+24h+arg_4]

$err$72:
		mov	[eax], ebx
		mov	[eax+8], esi
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
_a2i_ASN1_STRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2a_ASN1_STRING
_i2a_ASN1_STRING proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	edi
		xor	edi, edi
		test	ebx, ebx
		jnz	short loc_2B5
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2B5:				; CODE XREF: _i2a_ASN1_STRING+Aj
		mov	eax, [ebx]
		push	ebp
		push	esi
		test	eax, eax
		jnz	short loc_2E2
		push	1
		push	offset ??_C@_01GBGANLPD@0?$AA@ ; `string'
		push	[esp+18h+arg_0]
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, 1
		jnz	$err$22
		mov	edi, eax

loc_2DB:				; CODE XREF: _i2a_ASN1_STRING+42j
		pop	esi
		pop	ebp
		mov	eax, edi
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2E2:				; CODE XREF: _i2a_ASN1_STRING+17j
		xor	esi, esi
		test	eax, eax
		jle	short loc_2DB
		mov	ebp, [esp+10h+arg_0]

loc_2EC:				; CODE XREF: _i2a_ASN1_STRING+C0j
		test	esi, esi
		jz	short loc_323
		mov	eax, 0EA0EA0EBh
		mov	ecx, esi
		imul	esi
		add	edx, esi
		sar	edx, 5
		mov	eax, edx
		shr	eax, 1Fh
		add	eax, edx
		imul	eax, 23h
		sub	ecx, eax
		jnz	short loc_323
		push	2
		push	offset ??_C@_02JPPHBJLD@?2?6?$AA@ ; `string'
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, 2
		jnz	short $err$22
		add	edi, eax

loc_323:				; CODE XREF: _i2a_ASN1_STRING+4Aj
					; _i2a_ASN1_STRING+66j
		mov	edx, [ebx+8]
		mov	ecx, ?h@?1??i2a_ASN1_STRING@@9@9 ; `i2a_ASN1_STRING'::`2'::h
		push	2
		movzx	eax, byte ptr [edx+esi]
		shr	eax, 4
		movzx	eax, byte ptr [eax+ecx]
		mov	byte ptr [esp+14h+arg_4], al
		movzx	eax, byte ptr [edx+esi]
		and	eax, 0Fh
		movzx	eax, byte ptr [eax+ecx]
		mov	byte ptr [esp+14h+arg_4+1], al
		lea	eax, [esp+14h+arg_4]
		push	eax
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, 2
		jnz	short $err$22
		inc	esi
		add	edi, eax
		cmp	esi, [ebx]
		jl	short loc_2EC
		pop	esi
		pop	ebp
		mov	eax, edi
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$err$22:				; CODE XREF: _i2a_ASN1_STRING+2Fj
					; _i2a_ASN1_STRING+7Bj	...
		pop	esi
		pop	ebp
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
_i2a_ASN1_STRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 378h
; COMDAT (pick any)
		public ??_C@_01GBGANLPD@0?$AA@
; `string'
??_C@_01GBGANLPD@0?$AA@	db 30h,	0	; DATA XREF: _i2a_ASN1_STRING+1Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 37Ch
; COMDAT (pick any)
		public ??_C@_02JPPHBJLD@?2?6?$AA@
; `string'
??_C@_02JPPHBJLD@?2?6?$AA@ db 5Ch, 0Ah,	0 ; DATA XREF: _i2a_ASN1_STRING+6Ao
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 380h
; COMDAT (pick any)
		public ??_C@_0BJ@CIJCPIKE@?4?2crypto?2asn1?2f_string?4c?$AA@
; `string'
??_C@_0BJ@CIJCPIKE@?4?2crypto?2asn1?2f_string?4c?$AA@ db '.\crypto\asn1\f_string.c',0
					; DATA XREF: _a2i_ASN1_STRING+EBo
					; _a2i_ASN1_STRING+107o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _a2i_ASN1_STRING+F5p
		extrn _CRYPTO_free:near	; CODE XREF: _a2i_ASN1_STRING+1EEp
		extrn _CRYPTO_realloc:near ; CODE XREF:	_a2i_ASN1_STRING+112p
		extrn _BIO_gets:near	; CODE XREF: _a2i_ASN1_STRING+2Dp
					; _a2i_ASN1_STRING+1B1p
		extrn _BIO_write:near	; CODE XREF: _i2a_ASN1_STRING+24p
					; _i2a_ASN1_STRING+70p	...
		extrn _ERR_put_error:near ; CODE XREF: _a2i_ASN1_STRING+1E1p
					; _a2i_ASN1_STRING+213p ...
		extrn __chkstk:near	; CODE XREF: _a2i_ASN1_STRING+5p


		end
