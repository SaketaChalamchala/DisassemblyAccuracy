;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	0B6FAC147770B3208ADB07A54807BBF9
; Input	CRC32 :	82656A8E

; File Name   :	C:\compspace\Diff\openssl\obj\gost_keywrap.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _keyDiversifyCryptoPro
_keyDiversifyCryptoPro proc near	; CODE XREF: _keyUnwrapCryptoPro+2Fp
					; _keyWrapCryptoPro+34p

var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_B		= byte ptr -0Bh
var_A		= byte ptr -0Ah
var_9		= byte ptr -9
var_8		= byte ptr -8
var_7		= byte ptr -7
var_6		= byte ptr -6
var_5		= byte ptr -5
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 10h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+10h+var_4], eax
		mov	eax, [esp+10h+arg_0]
		push	ebx
		push	ebp
		mov	[esp+18h+var_10], eax
		xor	ebp, ebp
		mov	eax, [esp+18h+arg_4]
		push	esi
		mov	esi, [esp+1Ch+arg_C]
		push	edi
		movups	xmm0, xmmword ptr [eax]
		movups	xmmword	ptr [esi], xmm0
		movups	xmm0, xmmword ptr [eax+10h]
		movups	xmmword	ptr [esi+10h], xmm0
		nop	dword ptr [eax+00000000h]

loc_40:					; CODE XREF: _keyDiversifyCryptoPro+1F5j
		movzx	edi, byte ptr [esi+3]
		xor	ecx, ecx
		movzx	eax, byte ptr [esi+2]
		xor	edx, edx
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [esi+1]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [esi]
		shl	edi, 8
		or	edi, eax
		mov	eax, [esp+20h+arg_8]
		movzx	ebx, byte ptr [eax+ebp]
		test	bl, 1
		jz	short loc_73
		mov	ecx, edi
		jmp	short loc_75
; ---------------------------------------------------------------------------

loc_73:					; CODE XREF: _keyDiversifyCryptoPro+6Dj
		mov	edx, edi

loc_75:					; CODE XREF: _keyDiversifyCryptoPro+71j
		movzx	edi, byte ptr [esi+7]
		movzx	eax, byte ptr [esi+6]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [esi+5]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [esi+4]
		shl	edi, 8
		or	edi, eax
		test	bl, 2
		jz	short loc_9D
		add	ecx, edi
		jmp	short loc_9F
; ---------------------------------------------------------------------------

loc_9D:					; CODE XREF: _keyDiversifyCryptoPro+97j
		add	edx, edi

loc_9F:					; CODE XREF: _keyDiversifyCryptoPro+9Bj
		movzx	edi, byte ptr [esi+0Bh]
		movzx	eax, byte ptr [esi+0Ah]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [esi+9]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [esi+8]
		shl	edi, 8
		or	edi, eax
		test	bl, 4
		jz	short loc_C7
		add	ecx, edi
		jmp	short loc_C9
; ---------------------------------------------------------------------------

loc_C7:					; CODE XREF: _keyDiversifyCryptoPro+C1j
		add	edx, edi

loc_C9:					; CODE XREF: _keyDiversifyCryptoPro+C5j
		movzx	edi, byte ptr [esi+0Fh]
		movzx	eax, byte ptr [esi+0Eh]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [esi+0Dh]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [esi+0Ch]
		shl	edi, 8
		or	edi, eax
		test	bl, 8
		jz	short loc_F1
		add	ecx, edi
		jmp	short loc_F3
; ---------------------------------------------------------------------------

loc_F1:					; CODE XREF: _keyDiversifyCryptoPro+EBj
		add	edx, edi

loc_F3:					; CODE XREF: _keyDiversifyCryptoPro+EFj
		movzx	edi, byte ptr [esi+13h]
		movzx	eax, byte ptr [esi+12h]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [esi+11h]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [esi+10h]
		shl	edi, 8
		or	edi, eax
		test	bl, 10h
		jz	short loc_11B
		add	ecx, edi
		jmp	short loc_11D
; ---------------------------------------------------------------------------

loc_11B:				; CODE XREF: _keyDiversifyCryptoPro+115j
		add	edx, edi

loc_11D:				; CODE XREF: _keyDiversifyCryptoPro+119j
		movzx	edi, byte ptr [esi+17h]
		movzx	eax, byte ptr [esi+16h]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [esi+15h]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [esi+14h]
		shl	edi, 8
		or	edi, eax
		test	bl, 20h
		jz	short loc_145
		add	ecx, edi
		jmp	short loc_147
; ---------------------------------------------------------------------------

loc_145:				; CODE XREF: _keyDiversifyCryptoPro+13Fj
		add	edx, edi

loc_147:				; CODE XREF: _keyDiversifyCryptoPro+143j
		movzx	edi, byte ptr [esi+1Bh]
		movzx	eax, byte ptr [esi+1Ah]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [esi+19h]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [esi+18h]
		shl	edi, 8
		or	edi, eax
		test	bl, 40h
		jz	short loc_16F
		add	ecx, edi
		jmp	short loc_171
; ---------------------------------------------------------------------------

loc_16F:				; CODE XREF: _keyDiversifyCryptoPro+169j
		add	edx, edi

loc_171:				; CODE XREF: _keyDiversifyCryptoPro+16Dj
		movzx	edi, byte ptr [esi+1Fh]
		movzx	eax, byte ptr [esi+1Eh]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [esi+1Dh]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [esi+1Ch]
		shl	edi, 8
		or	edi, eax
		test	bl, bl
		jns	short loc_198
		add	ecx, edi
		jmp	short loc_19A
; ---------------------------------------------------------------------------

loc_198:				; CODE XREF: _keyDiversifyCryptoPro+192j
		add	edx, edi

loc_19A:				; CODE XREF: _keyDiversifyCryptoPro+196j
		mov	ebx, [esp+20h+var_10]
		mov	eax, ecx
		shr	eax, 8
		mov	[esp+20h+var_B], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[esp+20h+var_A], al
		mov	eax, edx
		shr	eax, 8
		mov	[esp+20h+var_7], al
		mov	eax, edx
		mov	[esp+20h+var_C], cl
		mov	[esp+20h+var_8], dl
		shr	ecx, 18h
		shr	eax, 10h
		shr	edx, 18h
		push	esi
		push	ebx
		mov	[esp+28h+var_9], cl
		mov	[esp+28h+var_6], al
		mov	[esp+28h+var_5], dl
		call	_gost_key
		push	4
		push	esi
		push	esi
		lea	eax, [esp+34h+var_C]
		push	eax
		push	ebx
		call	_gost_enc_cfb
		inc	ebp
		add	esp, 1Ch
		cmp	ebp, 8
		jl	loc_40
		mov	ecx, [esp+20h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 10h
		retn
_keyDiversifyCryptoPro endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 210h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _keyUnwrapCryptoPro
_keyUnwrapCryptoPro proc near

var_28		= byte ptr -28h
var_24		= byte ptr -24h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 28h ; '('
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+28h+var_4], eax
		push	ebx
		mov	ebx, [esp+2Ch+arg_8]
		lea	eax, [esp+2Ch+var_24]
		push	esi
		mov	esi, [esp+30h+arg_C]
		push	edi
		mov	edi, [esp+34h+arg_0]
		push	eax
		push	ebx
		push	[esp+3Ch+arg_4]
		push	edi
		call	_keyDiversifyCryptoPro
		lea	eax, [esp+44h+var_24]
		push	eax
		push	edi
		call	_gost_key
		push	4
		push	esi
		lea	eax, [ebx+8]
		push	eax
		push	edi
		call	_gost_dec
		lea	eax, [esp+5Ch+var_28]
		push	eax
		push	20h ; ' '
		push	esi
		push	ebx
		push	20h ; ' '
		push	edi
		call	_gost_mac_iv
		add	esp, 40h
		lea	ecx, [esp+34h+var_28]
		mov	ecx, [ecx]
		xor	eax, eax
		cmp	ecx, [ebx+28h]
		mov	ecx, [esp+34h+var_4]
		pop	edi
		pop	esi
		setz	al
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
_keyUnwrapCryptoPro endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 290h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _keyWrapCryptoPro
_keyWrapCryptoPro proc near

var_24		= byte ptr -24h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 24h ; '$'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+24h+var_4], eax
		push	ebx
		mov	ebx, [esp+28h+arg_8]
		lea	eax, [esp+28h+var_24]
		push	ebp
		mov	ebp, [esp+2Ch+arg_0]
		push	esi
		mov	esi, [esp+30h+arg_10]
		push	edi
		mov	edi, [esp+34h+arg_C]
		push	eax
		push	ebx
		push	[esp+3Ch+arg_4]
		push	ebp
		call	_keyDiversifyCryptoPro
		lea	eax, [esp+44h+var_24]
		push	eax
		push	ebp
		call	_gost_key
		mov	eax, [ebx]
		mov	[esi], eax
		mov	eax, [ebx+4]
		mov	[esi+4], eax
		lea	eax, [esi+8]
		push	4
		push	eax
		push	edi
		push	ebp
		call	_gost_enc
		lea	eax, [esi+28h]
		push	eax
		push	20h ; ' '
		push	edi
		push	ebx
		push	20h ; ' '
		push	ebp
		call	_gost_mac_iv
		mov	ecx, [esp+74h+var_4]
		add	esp, 40h
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 24h
		retn
_keyWrapCryptoPro endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _gost_enc:near	; CODE XREF: _keyWrapCryptoPro+56p
		extrn _gost_dec:near	; CODE XREF: _keyUnwrapCryptoPro+47p
		extrn _gost_enc_cfb:near ; CODE	XREF: _keyDiversifyCryptoPro+1E9p
		extrn _gost_key:near	; CODE XREF: _keyDiversifyCryptoPro+1DAp
					; _keyUnwrapCryptoPro+3Ap ...
		extrn _gost_mac_iv:near	; CODE XREF: _keyUnwrapCryptoPro+58p
					; _keyWrapCryptoPro+66p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _keyDiversifyCryptoPro+205p
					; _keyUnwrapCryptoPro+77p ...
		extrn __chkstk:near	; CODE XREF: _keyDiversifyCryptoPro+5p
					; _keyUnwrapCryptoPro+5p ...
		extrn ___security_cookie:near ;	DATA XREF: _keyDiversifyCryptoPro+Ar
					; _keyUnwrapCryptoPro+Ar ...


		end
