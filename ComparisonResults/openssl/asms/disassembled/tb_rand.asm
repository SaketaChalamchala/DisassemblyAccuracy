;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	4626C2DAF134B2391AD38AAC2DDEC40F
; Input	CRC32 :	03172A5A

; File Name   :	C:\compspace\Diff\openssl\obj\tb_rand.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
_rand_table	dd ?			; DATA XREF: _ENGINE_get_default_RAND+2o
					; _ENGINE_register_RAND+19o ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4
_dummy_nid	dd 1			; DATA XREF: _ENGINE_register_RAND+Eo
					; _ENGINE_register_all_RAND+1Ao ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_get_RAND
_ENGINE_get_RAND proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+1Ch]
		retn
_ENGINE_get_RAND endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_get_default_RAND
_ENGINE_get_default_RAND proc near
		push	1
		push	offset _rand_table
		call	_engine_table_select
		add	esp, 8
		retn
_ENGINE_get_default_RAND endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 20h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_register_RAND
_ENGINE_register_RAND proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax+1Ch], 0
		jz	short loc_47
		push	0
		push	1
		push	offset _dummy_nid
		push	eax
		push	offset _engine_unregister_all_RAND
		push	offset _rand_table
		call	_engine_table_register
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_47:					; CODE XREF: _ENGINE_register_RAND+8j
		mov	eax, 1
		retn
_ENGINE_register_RAND endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 50h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_register_all_RAND
_ENGINE_register_all_RAND proc near
		push	esi
		call	_ENGINE_get_first
		mov	esi, eax
		test	esi, esi
		jz	short loc_91
		nop	dword ptr [eax+00h]

loc_60:					; CODE XREF: _ENGINE_register_all_RAND+3Fj
		cmp	dword ptr [esi+1Ch], 0
		jz	short loc_82
		push	0
		push	1
		push	offset _dummy_nid
		push	esi
		push	offset _engine_unregister_all_RAND
		push	offset _rand_table
		call	_engine_table_register
		add	esp, 18h

loc_82:					; CODE XREF: _ENGINE_register_all_RAND+14j
		push	esi
		call	_ENGINE_get_next
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_60

loc_91:					; CODE XREF: _ENGINE_register_all_RAND+Aj
		pop	esi
		retn
_ENGINE_register_all_RAND endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 94h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_set_RAND
_ENGINE_set_RAND proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax+1Ch], ecx
		mov	eax, 1
		retn
_ENGINE_set_RAND endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_set_default_RAND
_ENGINE_set_default_RAND proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax+1Ch], 0
		jz	short loc_CF
		push	1
		push	1
		push	offset _dummy_nid
		push	eax
		push	offset _engine_unregister_all_RAND
		push	offset _rand_table
		call	_engine_table_register
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_CF:					; CODE XREF: _ENGINE_set_default_RAND+8j
		mov	eax, 1
		retn
_ENGINE_set_default_RAND endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_unregister_RAND
_ENGINE_unregister_RAND	proc near

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		push	offset _rand_table
		call	_engine_table_unregister
		add	esp, 8
		retn
_ENGINE_unregister_RAND	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_engine_unregister_all_RAND proc near	; DATA XREF: _ENGINE_register_RAND+14o
					; _ENGINE_register_all_RAND+20o ...
		push	offset _rand_table
		call	_engine_table_cleanup
		pop	ecx
		retn
_engine_unregister_all_RAND endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ENGINE_get_first:near ; CODE XREF: _ENGINE_register_all_RAND+1p
		extrn _ENGINE_get_next:near ; CODE XREF: _ENGINE_register_all_RAND+33p
		extrn _engine_table_register:near ; CODE XREF: _ENGINE_register_RAND+1Ep
					; _ENGINE_register_all_RAND+2Ap ...
		extrn _engine_table_unregister:near ; CODE XREF: _ENGINE_unregister_RAND+9p
		extrn _engine_table_cleanup:near ; CODE	XREF: _engine_unregister_all_RAND+5p
		extrn _engine_table_select:near	; CODE XREF: _ENGINE_get_default_RAND+7p


		end
