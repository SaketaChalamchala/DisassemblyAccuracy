;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	67B5A0172E7F15559E089CCA1627F47A
; Input	CRC32 :	0A833EC5

; File Name   :	C:\compspace\Diff\openssl\obj\tb_store.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
_store_table	dd ?			; DATA XREF: _ENGINE_register_STORE+19o
					; _ENGINE_register_all_STORE+25o ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4
_dummy_nid	dd 1			; DATA XREF: _ENGINE_register_STORE+Eo
					; _ENGINE_register_all_STORE+1Ao
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_get_STORE
_ENGINE_get_STORE proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+20h]
		retn
_ENGINE_get_STORE endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_register_STORE
_ENGINE_register_STORE proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax+20h], 0
		jz	short loc_37
		push	0
		push	1
		push	offset _dummy_nid
		push	eax
		push	offset _engine_unregister_all_STORE
		push	offset _store_table
		call	_engine_table_register
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_37:					; CODE XREF: _ENGINE_register_STORE+8j
		mov	eax, 1
		retn
_ENGINE_register_STORE endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 40h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_register_all_STORE
_ENGINE_register_all_STORE proc	near
		push	esi
		call	_ENGINE_get_first
		mov	esi, eax
		test	esi, esi
		jz	short loc_81
		nop	dword ptr [eax+00h]

loc_50:					; CODE XREF: _ENGINE_register_all_STORE+3Fj
		cmp	dword ptr [esi+20h], 0
		jz	short loc_72
		push	0
		push	1
		push	offset _dummy_nid
		push	esi
		push	offset _engine_unregister_all_STORE
		push	offset _store_table
		call	_engine_table_register
		add	esp, 18h

loc_72:					; CODE XREF: _ENGINE_register_all_STORE+14j
		push	esi
		call	_ENGINE_get_next
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_50

loc_81:					; CODE XREF: _ENGINE_register_all_STORE+Aj
		pop	esi
		retn
_ENGINE_register_all_STORE endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 84h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_set_STORE
_ENGINE_set_STORE proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax+20h], ecx
		mov	eax, 1
		retn
_ENGINE_set_STORE endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 98h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_unregister_STORE
_ENGINE_unregister_STORE proc near

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		push	offset _store_table
		call	_engine_table_unregister
		add	esp, 8
		retn
_ENGINE_unregister_STORE endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_engine_unregister_all_STORE proc near	; DATA XREF: _ENGINE_register_STORE+14o
					; _ENGINE_register_all_STORE+20o
		push	offset _store_table
		call	_engine_table_cleanup
		pop	ecx
		retn
_engine_unregister_all_STORE endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ENGINE_get_first:near ; CODE XREF: _ENGINE_register_all_STORE+1p
		extrn _ENGINE_get_next:near ; CODE XREF: _ENGINE_register_all_STORE+33p
		extrn _engine_table_register:near ; CODE XREF: _ENGINE_register_STORE+1Ep
					; _ENGINE_register_all_STORE+2Ap
		extrn _engine_table_unregister:near ; CODE XREF: _ENGINE_unregister_STORE+9p
		extrn _engine_table_cleanup:near
					; CODE XREF: _engine_unregister_all_STORE+5p


		end
