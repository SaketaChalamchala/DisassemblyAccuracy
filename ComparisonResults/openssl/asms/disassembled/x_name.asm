;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	F96DE06B4F78D9E3A6ADBFFC9097B5F2
; Input	CRC32 :	BB0DAD6E

; File Name   :	C:\compspace\Diff\openssl\obj\x_name.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_x509_name_ex_d2i proc near		; DATA XREF: .rdata:000003C4o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		mov	eax, 0Ch
		call	__chkstk
		mov	eax, [esp+0Ch+arg_4]
		push	edi
		mov	[esp+10h+var_C], 0
		mov	[esp+10h+var_4], 0
		mov	edi, [eax]
		mov	eax, [esp+10h+arg_8]
		mov	[esp+10h+var_8], edi
		cmp	eax, 100000h
		jle	short loc_55
		push	0CBh ; 'À'
		push	offset ??_C@_0BH@KOHBKEEJ@?4?2crypto?2asn1?2x_name?4c?$AA@ ; ".\\crypto\\asn1\\x_name.c"
		push	9Bh ; 'õ'
		push	9Eh ; 'û'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_55:					; CODE XREF: _x509_name_ex_d2i+2Ej
		push	[esp+10h+arg_1C]
		push	[esp+14h+arg_18]
		push	[esp+18h+arg_14]
		push	[esp+1Ch+arg_10]
		push	offset ?local_it@?1??X509_NAME_INTERNAL_it@@9@9	; `X509_NAME_INTERNAL_it'::`2'::local_it
		push	eax
		lea	eax, [esp+28h+var_8]
		push	eax
		lea	eax, [esp+2Ch+var_C]
		push	eax
		call	_ASN1_item_ex_d2i
		add	esp, 20h
		test	eax, eax
		jle	loc_1B6
		push	ebx
		mov	ebx, [esp+14h+arg_0]
		cmp	dword ptr [ebx], 0
		jz	short loc_9A
		push	0
		push	ebx
		call	_x509_name_ex_free
		add	esp, 8

loc_9A:					; CODE XREF: _x509_name_ex_d2i+8Dj
		push	ebp
		push	esi
		lea	eax, [esp+1Ch+var_4]
		push	0
		push	eax
		call	_x509_name_ex_new
		mov	esi, [esp+24h+var_4]
		add	esp, 8
		test	eax, eax
		jz	$err$36
		mov	eax, [esp+1Ch+var_8]
		sub	eax, edi
		push	eax
		push	dword ptr [esi+8]
		call	_BUF_MEM_grow
		add	esp, 8
		test	eax, eax
		jz	$err$36
		mov	eax, [esp+1Ch+var_8]
		sub	eax, edi
		push	eax		; Size
		mov	eax, [esi+8]
		push	edi		; Src
		push	dword ptr [eax+4] ; Dst
		call	_memcpy
		push	[esp+28h+var_C]
		xor	ebp, ebp
		call	_sk_num
		add	esp, 10h
		test	eax, eax
		jle	short loc_153

loc_F6:					; CODE XREF: _x509_name_ex_d2i+14Dj
		push	ebp
		push	[esp+20h+var_C]
		call	_sk_value
		mov	ebx, eax
		xor	edi, edi
		push	ebx
		call	_sk_num
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_138

loc_111:				; CODE XREF: _x509_name_ex_d2i+136j
		push	edi
		push	ebx
		call	_sk_value
		push	eax
		mov	[eax+8], ebp
		push	dword ptr [esi]
		call	_sk_push
		add	esp, 10h
		test	eax, eax
		jz	short $err$36
		push	ebx
		inc	edi
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jl	short loc_111

loc_138:				; CODE XREF: _x509_name_ex_d2i+10Fj
		push	ebx
		call	_sk_free
		push	[esp+20h+var_C]
		inc	ebp
		call	_sk_num
		add	esp, 8
		cmp	ebp, eax
		jl	short loc_F6
		mov	ebx, [esp+1Ch+arg_0]

loc_153:				; CODE XREF: _x509_name_ex_d2i+F4j
		push	[esp+1Ch+var_C]
		call	_sk_free
		push	esi
		call	_x509_name_canon
		add	esp, 8
		test	eax, eax
		jz	short $err$36
		mov	edx, [esp+1Ch+arg_4]
		mov	dword ptr [esi+4], 0
		mov	ecx, [esp+1Ch+var_8]
		mov	[ebx], esi
		pop	esi
		pop	ebp
		pop	ebx
		mov	[edx], ecx
		pop	edi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

$err$36:				; CODE XREF: _x509_name_ex_d2i+B1j
					; _x509_name_ex_d2i+CBj ...
		test	esi, esi
		jz	short loc_196
		push	offset ?local_it@?1??X509_NAME_it@@9@9 ; `X509_NAME_it'::`2'::local_it
		push	esi
		call	_ASN1_item_free
		add	esp, 8

loc_196:				; CODE XREF: _x509_name_ex_d2i+186j
		push	0F7h ; '˜'
		push	offset ??_C@_0BH@KOHBKEEJ@?4?2crypto?2asn1?2x_name?4c?$AA@ ; ".\\crypto\\asn1\\x_name.c"
		push	3Ah ; ':'
		push	9Eh ; 'û'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ebx

loc_1B6:				; CODE XREF: _x509_name_ex_d2i+7Fj
		pop	edi
		add	esp, 0Ch
		retn
_x509_name_ex_d2i endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_x509_name_ex_i2d proc near		; DATA XREF: .rdata:000003C8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [eax]
		cmp	dword ptr [esi+4], 0
		jz	short loc_1E3
		push	esi
		call	_x509_name_encode
		add	esp, 4
		test	eax, eax
		js	short loc_204
		push	esi
		call	_x509_name_canon
		add	esp, 4
		test	eax, eax
		js	short loc_204

loc_1E3:				; CODE XREF: _x509_name_ex_i2d+Bj
		mov	eax, [esi+8]
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [eax]
		test	esi, esi
		jz	short loc_201
		push	edi		; Size
		push	dword ptr [eax+4] ; Src
		push	dword ptr [esi]	; Dst
		call	_memcpy
		add	esp, 0Ch
		add	[esi], edi

loc_201:				; CODE XREF: _x509_name_ex_i2d+33j
		mov	eax, edi
		pop	edi

loc_204:				; CODE XREF: _x509_name_ex_i2d+18j
					; _x509_name_ex_i2d+25j
		pop	esi
		retn
_x509_name_ex_i2d endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 208h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_x509_name_ex_new proc near		; CODE XREF: _x509_name_ex_d2i+A3p
					; DATA XREF: .rdata:000003B8o

arg_0		= dword	ptr  4

		push	esi
		push	8Fh ; 'è'
		push	offset ??_C@_0BH@KOHBKEEJ@?4?2crypto?2asn1?2x_name?4c?$AA@ ; ".\\crypto\\asn1\\x_name.c"
		push	14h
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short $memerr$9
		call	_sk_new_null
		mov	[esi], eax
		test	eax, eax
		jz	short $memerr$9
		call	_BUF_MEM_new
		mov	[esi+8], eax
		test	eax, eax
		jz	short $memerr$9
		mov	eax, [esp+4+arg_0]
		mov	dword ptr [esi+0Ch], 0
		mov	dword ptr [esi+10h], 0
		mov	dword ptr [esi+4], 1
		mov	[eax], esi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

$memerr$9:				; CODE XREF: _x509_name_ex_new+19j
					; _x509_name_ex_new+24j ...
		push	9Dh ; 'ù'
		push	offset ??_C@_0BH@KOHBKEEJ@?4?2crypto?2asn1?2x_name?4c?$AA@ ; ".\\crypto\\asn1\\x_name.c"
		push	41h ; 'A'
		push	0ABh ; '´'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		test	esi, esi
		jz	short loc_293
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_28A
		push	eax
		call	_sk_free
		add	esp, 4

loc_28A:				; CODE XREF: _x509_name_ex_new+77j
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_293:				; CODE XREF: _x509_name_ex_new+71j
		xor	eax, eax
		pop	esi
		retn
_x509_name_ex_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 298h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_x509_name_ex_free proc	near		; CODE XREF: _x509_name_ex_d2i+92p
					; DATA XREF: .rdata:000003BCo

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_2DF
		push	esi
		mov	esi, [edi]
		test	esi, esi
		jz	short loc_2DE
		push	dword ptr [esi+8]
		call	_BUF_MEM_free
		push	offset _X509_NAME_ENTRY_free
		push	dword ptr [esi]
		call	_sk_pop_free
		mov	eax, [esi+0Ch]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_2CF
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_2CF:				; CODE XREF: _x509_name_ex_free+2Cj
		push	esi
		call	_CRYPTO_free
		add	esp, 4
		mov	dword ptr [edi], 0

loc_2DE:				; CODE XREF: _x509_name_ex_free+Ej
		pop	esi

loc_2DF:				; CODE XREF: _x509_name_ex_free+7j
		pop	edi
		retn
_x509_name_ex_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_x509_name_ex_print proc near		; DATA XREF: .rdata:000003CCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_10]
		push	dword ptr [eax+4]
		mov	eax, [esp+4+arg_4]
		push	[esp+4+arg_8]
		push	dword ptr [eax]
		push	[esp+0Ch+arg_0]
		call	_X509_NAME_print_ex
		xor	edx, edx
		add	esp, 10h
		test	eax, eax
		mov	ecx, 2
		cmovle	ecx, edx
		mov	eax, ecx
		retn
_x509_name_ex_print endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 310h
_X509_NAME_ENTRY_seq_tt	dd 3 dup(0)	; DATA XREF: .rdata:00000340o
		dd offset ??_C@_06IEOJBDIK@object?$AA@ ; "object"
		dd offset _ASN1_OBJECT_it
		dd 2 dup(0)
		dd 4
		dd offset ??_C@_05MFEJDJP@value?$AA@ ; "value"
		dd offset _ASN1_PRINTABLE_it
; `X509_NAME_ENTRY_it'::`2'::local_it
?local_it@?1??X509_NAME_ENTRY_it@@9@9 dd 1, 10h	; DATA XREF: _X509_NAME_ENTRY_ito
					; _X509_NAME_ENTRY_dup+4o ...
		dd offset _X509_NAME_ENTRY_seq_tt
		dd 2, 0
		dd 10h
		dd offset ??_C@_0BA@KEPIIMOE@X509_NAME_ENTRY?$AA@ ; "X509_NAME_ENTRY"
_X509_NAME_ENTRIES_item_tt dd 2, 2 dup(0) ; DATA XREF: .rdata:00000370o
		dd offset ??_C@_04IEOKPFHO@RDNS?$AA@ ; "RDNS"
		dd offset _X509_NAME_ENTRY_it
; `X509_NAME_ENTRIES_it'::`2'::local_it
?local_it@?1??X509_NAME_ENTRIES_it@@9@9	dd 0 ; DATA XREF: _X509_NAME_ENTRIES_ito
					; _i2d_name_canon+2Bo
		dd 0FFFFFFFFh
		dd offset _X509_NAME_ENTRIES_item_tt
		align 10h
		dd offset ??_C@_0BC@GJMCELDI@X509_NAME_ENTRIES?$AA@ ; "X509_NAME_ENTRIES"
_X509_NAME_INTERNAL_item_tt dd 4, 2 dup(0) ; DATA XREF:	.rdata:000003A0o
		dd offset ??_C@_04FABLJDN@Name?$AA@ ; "Name"
		dd offset _X509_NAME_ENTRIES_it
; `X509_NAME_INTERNAL_it'::`2'::local_it
?local_it@?1??X509_NAME_INTERNAL_it@@9@9 dd 0 ;	DATA XREF: _x509_name_ex_d2i+65o
					; _X509_NAME_INTERNAL_ito ...
		dd 0FFFFFFFFh
		dd offset _X509_NAME_INTERNAL_item_tt
		align 10h
		dd offset ??_C@_0BD@FDNDONGH@X509_NAME_INTERNAL?$AA@ ; "X509_NAME_INTERNAL"
		public _x509_name_ff
_x509_name_ff	dd 0			; DATA XREF: .rdata:000003E0o
		dd offset _x509_name_ex_new
		dd offset _x509_name_ex_free
		dd 0
		dd offset _x509_name_ex_d2i
		dd offset _x509_name_ex_i2d
		dd offset _x509_name_ex_print
; `X509_NAME_it'::`2'::local_it
?local_it@?1??X509_NAME_it@@9@9	dd 4, 10h, 2 dup(0) ; DATA XREF: _x509_name_ex_d2i+188o
					; _X509_NAME_dup+4o ...
		dd offset _x509_name_ff
		align 8
		dd offset ??_C@_09KGNJKBNF@X509_NAME?$AA@ ; "X509_NAME"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3ECh
; COMDAT (pick any)
		public ??_C@_06IEOJBDIK@object?$AA@
; `string'
??_C@_06IEOJBDIK@object?$AA@ db	'object',0 ; DATA XREF: .rdata:0000031Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3F4h
; COMDAT (pick any)
		public ??_C@_05MFEJDJP@value?$AA@
; `string'
??_C@_05MFEJDJP@value?$AA@ db 'value',0 ; DATA XREF: .rdata:00000330o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3FCh
; COMDAT (pick any)
		public ??_C@_0BA@KEPIIMOE@X509_NAME_ENTRY?$AA@
; `string'
??_C@_0BA@KEPIIMOE@X509_NAME_ENTRY?$AA@	db 'X509_NAME_ENTRY',0 ; DATA XREF: .rdata:00000350o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 40Ch
; COMDAT (pick any)
		public ??_C@_04IEOKPFHO@RDNS?$AA@
; `string'
??_C@_04IEOKPFHO@RDNS?$AA@ db 'RDNS',0  ; DATA XREF: .rdata:00000360o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 414h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_NAME_ENTRIES_it
_X509_NAME_ENTRIES_it proc near		; DATA XREF: .rdata:00000394o
		mov	eax, offset ?local_it@?1??X509_NAME_ENTRIES_it@@9@9 ; `X509_NAME_ENTRIES_it'::`2'::local_it
		retn
_X509_NAME_ENTRIES_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 41Ch
; COMDAT (pick any)
		public ??_C@_0BC@GJMCELDI@X509_NAME_ENTRIES?$AA@
; `string'
??_C@_0BC@GJMCELDI@X509_NAME_ENTRIES?$AA@ db 'X509_NAME_ENTRIES',0
					; DATA XREF: .rdata:00000380o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 430h
; COMDAT (pick any)
		public ??_C@_04FABLJDN@Name?$AA@
; `string'
??_C@_04FABLJDN@Name?$AA@ db 'Name',0   ; DATA XREF: .rdata:00000390o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 438h
; COMDAT (pick any)
		public ??_C@_0BD@FDNDONGH@X509_NAME_INTERNAL?$AA@
; `string'
??_C@_0BD@FDNDONGH@X509_NAME_INTERNAL?$AA@ db 'X509_NAME_INTERNAL',0
					; DATA XREF: .rdata:000003B0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 44Ch
; COMDAT (pick any)
		public ??_C@_09KGNJKBNF@X509_NAME?$AA@
; `string'
??_C@_09KGNJKBNF@X509_NAME?$AA@	db 'X509_NAME',0 ; DATA XREF: .rdata:000003E8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 458h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_NAME_ENTRY_it
_X509_NAME_ENTRY_it proc near		; DATA XREF: .rdata:00000364o
		mov	eax, offset ?local_it@?1??X509_NAME_ENTRY_it@@9@9 ; `X509_NAME_ENTRY_it'::`2'::local_it
		retn
_X509_NAME_ENTRY_it endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 460h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_NAME_ENTRY_dup
_X509_NAME_ENTRY_dup proc near

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		push	offset ?local_it@?1??X509_NAME_ENTRY_it@@9@9 ; `X509_NAME_ENTRY_it'::`2'::local_it
		call	_ASN1_item_dup
		add	esp, 8
		retn
_X509_NAME_ENTRY_dup endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 474h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_NAME_ENTRY_free
_X509_NAME_ENTRY_free proc near		; DATA XREF: _x509_name_ex_free+18o
					; _local_sk_X509_NAME_ENTRY_pop_freeo

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??X509_NAME_ENTRY_it@@9@9 ; `X509_NAME_ENTRY_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_X509_NAME_ENTRY_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 488h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_NAME_ENTRY_new
_X509_NAME_ENTRY_new proc near
		push	offset ?local_it@?1??X509_NAME_ENTRY_it@@9@9 ; `X509_NAME_ENTRY_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_X509_NAME_ENTRY_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 498h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_NAME_INTERNAL_it
_X509_NAME_INTERNAL_it proc near
		mov	eax, offset ?local_it@?1??X509_NAME_INTERNAL_it@@9@9 ; `X509_NAME_INTERNAL_it'::`2'::local_it
		retn
_X509_NAME_INTERNAL_it endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_NAME_dup
_X509_NAME_dup	proc near

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		push	offset ?local_it@?1??X509_NAME_it@@9@9 ; `X509_NAME_it'::`2'::local_it
		call	_ASN1_item_dup
		add	esp, 8
		retn
_X509_NAME_dup	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_NAME_free
_X509_NAME_free	proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??X509_NAME_it@@9@9 ; `X509_NAME_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_X509_NAME_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_NAME_it
_X509_NAME_it	proc near
		mov	eax, offset ?local_it@?1??X509_NAME_it@@9@9 ; `X509_NAME_it'::`2'::local_it
		retn
_X509_NAME_it	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_NAME_new
_X509_NAME_new	proc near
		push	offset ?local_it@?1??X509_NAME_it@@9@9 ; `X509_NAME_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_X509_NAME_new	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _X509_NAME_set
_X509_NAME_set	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_525
		mov	eax, [esp+4+arg_4]
		test	eax, eax
		jz	short loc_525
		cmp	[esi], eax
		jz	short loc_51C
		push	edi
		push	eax
		push	offset ?local_it@?1??X509_NAME_it@@9@9 ; `X509_NAME_it'::`2'::local_it
		call	_ASN1_item_dup
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_51B
		push	offset ?local_it@?1??X509_NAME_it@@9@9 ; `X509_NAME_it'::`2'::local_it
		push	dword ptr [esi]
		call	_ASN1_item_free
		add	esp, 8
		mov	[esi], edi

loc_51B:				; CODE XREF: _X509_NAME_set+28j
		pop	edi

loc_51C:				; CODE XREF: _X509_NAME_set+13j
		xor	eax, eax
		cmp	[esi], eax
		pop	esi
		setnz	al
		retn
; ---------------------------------------------------------------------------

loc_525:				; CODE XREF: _X509_NAME_set+7j
					; _X509_NAME_set+Fj
		xor	eax, eax
		pop	esi
		retn
_X509_NAME_set	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 52Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_string_canon proc	near		; CODE XREF: _x509_name_canon+E6p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	dword ptr [esi+4]
		call	_ASN1_tag2bit
		add	esp, 4
		test	eax, 2956h
		jnz	short loc_558
		push	esi
		push	[esp+8+arg_0]
		call	_ASN1_STRING_copy
		add	esp, 8
		neg	eax
		sbb	eax, eax
		neg	eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_558:				; CODE XREF: _asn1_string_canon+15j
		push	ebx
		push	ebp
		push	edi
		mov	edi, [esp+10h+arg_0]
		push	esi
		lea	ebp, [edi+8]
		mov	dword ptr [edi+4], 0Ch
		push	ebp
		mov	[esp+18h+arg_4], ebp
		call	_ASN1_STRING_to_UTF8
		mov	ebx, eax
		add	esp, 8
		mov	[edi], ebx
		cmp	ebx, 0FFFFFFFFh
		jnz	short loc_587
		pop	edi
		pop	ebp
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_587:				; CODE XREF: _asn1_string_canon+52j
		mov	esi, [ebp+0]
		mov	ecx, dword ptr ds:__imp__isspace
		test	ebx, ebx
		jle	short loc_5B3

loc_594:				; CODE XREF: _asn1_string_canon+85j
		mov	al, [esi]
		test	al, al
		js	short loc_5B3
		movzx	eax, al
		push	eax		; C
		call	ecx ; __imp__isspace
		mov	ecx, dword ptr ds:__imp__isspace
		add	esp, 4
		test	eax, eax
		jz	short loc_5B3
		dec	ebx
		inc	esi
		test	ebx, ebx
		jg	short loc_594

loc_5B3:				; CODE XREF: _asn1_string_canon+66j
					; _asn1_string_canon+6Cj ...
		lea	edi, [esi-1]
		add	edi, ebx
		test	ebx, ebx
		jle	short loc_5DB

loc_5BC:				; CODE XREF: _asn1_string_canon+ADj
		mov	al, [edi]
		test	al, al
		js	short loc_5DB
		movzx	eax, al
		push	eax		; C
		call	ecx ; __imp__isspace
		add	esp, 4
		test	eax, eax
		jz	short loc_5DB
		mov	ecx, dword ptr ds:__imp__isspace
		dec	ebx
		dec	edi
		test	ebx, ebx
		jg	short loc_5BC

loc_5DB:				; CODE XREF: _asn1_string_canon+8Ej
					; _asn1_string_canon+94j ...
		mov	ebp, [ebp+0]
		xor	edi, edi
		test	ebx, ebx
		jle	short loc_633

loc_5E4:				; CODE XREF: _asn1_string_canon+105j
		mov	al, [esi]
		test	al, al
		js	short loc_629
		movzx	eax, al
		push	eax		; C
		call	dword ptr ds:__imp__isspace
		add	esp, 4
		test	eax, eax
		jz	short loc_61C
		mov	byte ptr [ebp+0], 20h ;	' '
		inc	ebp

loc_600:				; CODE XREF: _asn1_string_canon+ECj
		mov	al, [esi+1]
		inc	esi
		inc	edi
		test	al, al
		js	short loc_62F
		movzx	eax, al
		push	eax		; C
		call	dword ptr ds:__imp__isspace
		add	esp, 4
		test	eax, eax
		jnz	short loc_600
		jmp	short loc_62F
; ---------------------------------------------------------------------------

loc_61C:				; CODE XREF: _asn1_string_canon+CDj
		movzx	eax, byte ptr [esi]
		push	eax		; C
		call	dword ptr ds:__imp__tolower
		add	esp, 4

loc_629:				; CODE XREF: _asn1_string_canon+BCj
		mov	[ebp+0], al
		inc	esi
		inc	ebp
		inc	edi

loc_62F:				; CODE XREF: _asn1_string_canon+DBj
					; _asn1_string_canon+EEj
		cmp	edi, ebx
		jl	short loc_5E4

loc_633:				; CODE XREF: _asn1_string_canon+B6j
		mov	eax, [esp+10h+arg_4]
		pop	edi
		sub	ebp, [eax]
		mov	eax, [esp+0Ch+arg_0]
		mov	[eax], ebp
		mov	eax, 1
		pop	ebp
		pop	ebx
		pop	esi
		retn
_asn1_string_canon endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 64Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_X509_NAME
_d2i_X509_NAME	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??X509_NAME_it@@9@9 ; `X509_NAME_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_X509_NAME	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 668h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_X509_NAME_ENTRY
_d2i_X509_NAME_ENTRY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??X509_NAME_ENTRY_it@@9@9 ; `X509_NAME_ENTRY_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_X509_NAME_ENTRY endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 684h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_X509_NAME
_i2d_X509_NAME	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??X509_NAME_it@@9@9 ; `X509_NAME_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_X509_NAME	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 69Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_X509_NAME_ENTRY
_i2d_X509_NAME_ENTRY proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??X509_NAME_ENTRY_it@@9@9 ; `X509_NAME_ENTRY_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_X509_NAME_ENTRY endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_i2d_name_canon	proc near		; CODE XREF: _x509_name_canon+11Ap
					; _x509_name_canon+146p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	esi
		push	edi
		push	ebx
		xor	edi, edi
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_70A
		mov	ebp, [esp+10h+arg_4]
		nop	dword ptr [eax]

loc_6D4:				; CODE XREF: _i2d_name_canon+54j
		push	esi
		push	ebx
		call	_sk_value
		push	0FFFFFFFFh
		push	0FFFFFFFFh
		push	offset ?local_it@?1??X509_NAME_ENTRIES_it@@9@9 ; `X509_NAME_ENTRIES_it'::`2'::local_it
		mov	[esp+24h+arg_0], eax
		lea	eax, [esp+24h+arg_0]
		push	ebp
		push	eax
		call	_ASN1_item_ex_i2d
		add	esp, 1Ch
		test	eax, eax
		js	short loc_70C
		push	ebx
		add	edi, eax
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_6D4

loc_70A:				; CODE XREF: _i2d_name_canon+17j
		mov	eax, edi

loc_70C:				; CODE XREF: _i2d_name_canon+44j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_i2d_name_canon	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 714h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_local_sk_X509_NAME_ENTRY_free proc near ; DATA	XREF: _x509_name_encode+EFo
					; _x509_name_encode:$memerr$25o
		jmp	_sk_free
_local_sk_X509_NAME_ENTRY_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 71Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_local_sk_X509_NAME_ENTRY_pop_free proc	near ; DATA XREF: _x509_name_canon:loc_895o

arg_0		= dword	ptr  4

		push	offset _X509_NAME_ENTRY_free
		push	[esp+4+arg_0]
		call	_sk_pop_free
		add	esp, 8
		retn
_local_sk_X509_NAME_ENTRY_pop_free endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 730h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_x509_name_canon proc near		; CODE XREF: _x509_name_ex_d2i+15Dp
					; _x509_name_ex_i2d+1Bp

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 0Ch
		call	__chkstk
		push	ebx
		push	ebp
		push	edi
		mov	edi, [esp+18h+arg_0]
		xor	ebx, ebx
		xor	ebp, ebp
		mov	[esp+18h+var_C], 0FFFFFFFFh
		mov	eax, [edi+0Ch]
		test	eax, eax
		jz	short loc_760
		push	eax
		call	_CRYPTO_free
		add	esp, 4
		mov	[edi+0Ch], ebx

loc_760:				; CODE XREF: _x509_name_canon+22j
		push	dword ptr [edi]
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jnz	short loc_77D
		mov	[edi+10h], ebx
		mov	eax, 1
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_77D:				; CODE XREF: _x509_name_canon+3Cj
		call	_sk_new_null
		mov	[esp+18h+arg_0], eax
		test	eax, eax
		jz	loc_8A7
		push	esi
		push	dword ptr [edi]
		xor	ebp, ebp
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	loc_843

loc_7A3:				; CODE XREF: _x509_name_canon+10Dj
		push	ebp
		push	dword ptr [edi]
		call	_sk_value
		mov	esi, eax
		add	esp, 8
		mov	eax, [esp+1Ch+var_C]
		mov	[esp+1Ch+var_8], esi
		cmp	[esi+8], eax
		jz	short loc_7E8
		call	_sk_new_null
		mov	ebx, eax
		test	ebx, ebx
		jz	loc_893
		push	ebx
		push	[esp+20h+arg_0]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	loc_893
		mov	eax, [esi+8]
		mov	[esp+1Ch+var_C], eax

loc_7E8:				; CODE XREF: _x509_name_canon+8Bj
		push	offset ?local_it@?1??X509_NAME_ENTRY_it@@9@9 ; `X509_NAME_ENTRY_it'::`2'::local_it
		call	_ASN1_item_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	loc_893
		mov	eax, [esp+1Ch+var_8]
		push	dword ptr [eax]
		call	_OBJ_dup
		mov	[esi], eax
		mov	eax, [esp+20h+var_8]
		push	dword ptr [eax+4]
		push	dword ptr [esi+4]
		call	_asn1_string_canon
		add	esp, 0Ch
		test	eax, eax
		jz	short $err$41
		push	esi
		push	ebx
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	short $err$41
		push	dword ptr [edi]
		inc	ebp
		call	_sk_num
		add	esp, 4
		cmp	ebp, eax
		jl	loc_7A3

loc_843:				; CODE XREF: _x509_name_canon+6Dj
		mov	ebx, [esp+1Ch+arg_0]
		push	0
		push	ebx
		call	_i2d_name_canon
		push	18Ah
		push	offset ??_C@_0BH@KOHBKEEJ@?4?2crypto?2asn1?2x_name?4c?$AA@ ; ".\\crypto\\asn1\\x_name.c"
		push	eax
		mov	[edi+10h], eax
		call	_CRYPTO_malloc
		add	esp, 14h
		mov	[esp+1Ch+var_4], eax
		test	eax, eax
		jz	short loc_893
		mov	[edi+0Ch], eax
		lea	eax, [esp+1Ch+var_4]
		push	eax
		push	ebx
		call	_i2d_name_canon
		add	esp, 8
		mov	ebp, 1
		jmp	short loc_895
; ---------------------------------------------------------------------------

$err$41:				; CODE XREF: _x509_name_canon+F0j
					; _x509_name_canon+FEj
		push	offset ?local_it@?1??X509_NAME_ENTRY_it@@9@9 ; `X509_NAME_ENTRY_it'::`2'::local_it
		push	esi
		call	_ASN1_item_free
		add	esp, 8

loc_893:				; CODE XREF: _x509_name_canon+96j
					; _x509_name_canon+ABj	...
		xor	ebp, ebp

loc_895:				; CODE XREF: _x509_name_canon+153j
		push	offset _local_sk_X509_NAME_ENTRY_pop_free
		push	[esp+20h+arg_0]
		call	_sk_pop_free
		add	esp, 8
		pop	esi

loc_8A7:				; CODE XREF: _x509_name_canon+58j
		pop	edi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
_x509_name_canon endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_x509_name_encode proc near		; CODE XREF: _x509_name_ex_i2d+Ep

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 0Ch
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	[esp+1Ch+var_C], 0
		xor	esi, esi
		mov	[esp+1Ch+var_8], 0FFFFFFFFh
		call	_sk_new_null
		mov	[esp+1Ch+var_C], eax
		test	eax, eax
		jz	$memerr$25
		mov	ebp, [esp+1Ch+arg_0]
		xor	edi, edi
		push	dword ptr [ebp+0]
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_956

loc_8F6:				; CODE XREF: _x509_name_encode+A4j
		push	edi
		push	dword ptr [ebp+0]
		call	_sk_value
		mov	ebx, eax
		add	esp, 8
		mov	eax, [esp+1Ch+var_8]
		cmp	[ebx+8], eax
		jz	short loc_938
		call	_sk_new_null
		mov	esi, eax
		test	esi, esi
		jz	loc_9C1
		push	esi
		push	[esp+20h+var_C]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	loc_9C1
		mov	eax, [ebx+8]
		mov	[esp+1Ch+var_8], eax

loc_938:				; CODE XREF: _x509_name_encode+5Bj
		push	ebx
		push	esi
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	short loc_9C1
		push	dword ptr [ebp+0]
		inc	edi
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jl	short loc_8F6

loc_956:				; CODE XREF: _x509_name_encode+44j
		push	0FFFFFFFFh
		push	0FFFFFFFFh
		push	offset ?local_it@?1??X509_NAME_INTERNAL_it@@9@9	; `X509_NAME_INTERNAL_it'::`2'::local_it
		lea	eax, [esp+28h+var_C]
		push	0
		push	eax
		call	_ASN1_item_ex_i2d
		mov	esi, eax
		push	esi
		push	dword ptr [ebp+8]
		call	_BUF_MEM_grow
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_9C1
		mov	eax, [ebp+8]
		push	0FFFFFFFFh
		push	0FFFFFFFFh
		push	offset ?local_it@?1??X509_NAME_INTERNAL_it@@9@9	; `X509_NAME_INTERNAL_it'::`2'::local_it
		mov	eax, [eax+4]
		mov	[esp+28h+var_4], eax
		lea	eax, [esp+28h+var_4]
		push	eax
		lea	eax, [esp+2Ch+var_C]
		push	eax
		call	_ASN1_item_ex_i2d
		push	offset _local_sk_X509_NAME_ENTRY_free
		push	[esp+34h+var_C]
		call	_sk_pop_free
		add	esp, 1Ch
		mov	dword ptr [ebp+4], 0
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_9C1:				; CODE XREF: _x509_name_encode+66j
					; _x509_name_encode+7Bj ...
		mov	eax, [esp+1Ch+var_C]

$memerr$25:				; CODE XREF: _x509_name_encode+2Bj
		push	offset _local_sk_X509_NAME_ENTRY_free
		push	eax
		call	_sk_pop_free
		push	145h
		push	offset ??_C@_0BH@KOHBKEEJ@?4?2crypto?2asn1?2x_name?4c?$AA@ ; ".\\crypto\\asn1\\x_name.c"
		push	41h ; 'A'
		push	0CBh ; 'À'
		push	0Dh
		call	_ERR_put_error
		add	esp, 1Ch
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
_x509_name_encode endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9F8h
; COMDAT (pick any)
		public ??_C@_0BH@KOHBKEEJ@?4?2crypto?2asn1?2x_name?4c?$AA@
; `string'
??_C@_0BH@KOHBKEEJ@?4?2crypto?2asn1?2x_name?4c?$AA@ db '.\crypto\asn1\x_name.c',0
					; DATA XREF: _x509_name_ex_d2i+35o
					; _x509_name_ex_d2i+19Bo ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ASN1_PRINTABLE_it:near ;	DATA XREF: .rdata:00000334o
		extrn _ASN1_OBJECT_it:near ; DATA XREF:	.rdata:00000320o
; int __cdecl _isspace(int C)
		extrn __imp__isspace:near ; CODE XREF: _asn1_string_canon+72p
					; _asn1_string_canon+9Ap ...
; int __cdecl _tolower(int C)
		extrn __imp__tolower:near ; CODE XREF: _asn1_string_canon+F4p
					; DATA XREF: _asn1_string_canon+F4r
		extrn _sk_num:near	; CODE XREF: _x509_name_ex_d2i+EAp
					; _x509_name_ex_d2i+105p ...
		extrn _sk_value:near	; CODE XREF: _x509_name_ex_d2i+FBp
					; _x509_name_ex_d2i+113p ...
		extrn _sk_new_null:near	; CODE XREF: _x509_name_ex_new+1Bp
					; _x509_name_canon:loc_77Dp ...
		extrn _sk_free:near	; CODE XREF: _x509_name_ex_d2i+139p
					; _x509_name_ex_d2i+157p ...
		extrn _sk_pop_free:near	; CODE XREF: _x509_name_ex_free+1Fp
					; _local_sk_X509_NAME_ENTRY_pop_free+9p ...
		extrn _sk_push:near	; CODE XREF: _x509_name_ex_d2i+11Ep
					; _x509_name_canon+A1p	...
		extrn _CRYPTO_malloc:near ; CODE XREF: _x509_name_ex_new+Dp
					; _x509_name_canon+12Dp
		extrn _CRYPTO_free:near	; CODE XREF: _x509_name_ex_new+83p
					; _x509_name_ex_free+2Fp ...
		extrn _BUF_MEM_new:near	; CODE XREF: _x509_name_ex_new+26p
		extrn _BUF_MEM_free:near ; CODE	XREF: _x509_name_ex_free+13p
		extrn _BUF_MEM_grow:near ; CODE	XREF: _x509_name_ex_d2i+C1p
					; _x509_name_encode+C1p
		extrn _ERR_put_error:near ; CODE XREF: _x509_name_ex_d2i+46p
					; _x509_name_ex_d2i+1A9p ...
		extrn _ASN1_STRING_copy:near ; CODE XREF: _asn1_string_canon+1Cp
		extrn _ASN1_tag2bit:near ; CODE	XREF: _asn1_string_canon+8p
		extrn _ASN1_item_dup:near ; CODE XREF: _X509_NAME_ENTRY_dup+9p
					; _X509_NAME_dup+9p ...
		extrn _ASN1_STRING_to_UTF8:near	; CODE XREF: _asn1_string_canon+43p
		extrn _ASN1_item_new:near ; CODE XREF: _X509_NAME_ENTRY_new+5p
					; _X509_NAME_new+5p ...
		extrn _ASN1_item_free:near ; CODE XREF:	_x509_name_ex_d2i+18Ep
					; _X509_NAME_ENTRY_free+9p ...
		extrn _ASN1_item_d2i:near ; CODE XREF: _d2i_X509_NAME+11p
					; _d2i_X509_NAME_ENTRY+11p
		extrn _ASN1_item_i2d:near ; CODE XREF: _i2d_X509_NAME+Dp
					; _i2d_X509_NAME_ENTRY+Dp
		extrn _ASN1_item_ex_d2i:near ; CODE XREF: _x509_name_ex_d2i+75p
		extrn _ASN1_item_ex_i2d:near ; CODE XREF: _i2d_name_canon+3Ap
					; _x509_name_encode+B6p ...
		extrn _OBJ_dup:near	; CODE XREF: _x509_name_canon+D5p
		extrn _X509_NAME_print_ex:near ; CODE XREF: _x509_name_ex_print+15p
		extrn __chkstk:near	; CODE XREF: _x509_name_ex_d2i+5p
					; _x509_name_canon+5p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _x509_name_ex_d2i+DFp
					; _x509_name_ex_i2d+3Bp


		end
