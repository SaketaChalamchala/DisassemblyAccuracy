;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	3F6B095533A7D891CA7C72E0F3D0C77E
; Input	CRC32 :	DBAFDCB9

; File Name   :	C:\compspace\Diff\openssl\obj\v3_sxnet.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SXNET_it
_SXNET_it	proc near		; DATA XREF: .rdata:00000148o
		mov	eax, offset ?local_it@?1??SXNET_it@@9@9	; `SXNET_it'::`2'::local_it
		retn
_SXNET_it	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SXNETID_it
_SXNETID_it	proc near		; DATA XREF: .rdata:000001E0o
		mov	eax, offset ?local_it@?1??SXNETID_it@@9@9 ; `SXNETID_it'::`2'::local_it
		retn
_SXNETID_it	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_sxnet_i2r	proc near		; DATA XREF: .rdata:0000016Co

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_4]
		push	dword ptr [ebp+0]
		call	_ASN1_INTEGER_get
		push	eax
		inc	eax
		push	eax
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	[esp+18h+arg_C]
		push	offset ??_C@_0BI@GOEPAKBG@?$CF?$CKsVersion?3?5?$CFld?5?$CI0x?$CFlX?$CJ?$AA@ ; "%*sVersion: %ld (0x%lX)"
		push	[esp+20h+arg_8]
		call	_BIO_printf
		push	dword ptr [ebp+4]
		xor	ebx, ebx
		call	_sk_num
		add	esp, 20h
		test	eax, eax
		jle	short loc_A2
		push	esi
		push	edi
		nop	dword ptr [eax+eax+00h]

loc_50:					; CODE XREF: _sxnet_i2r+8Ej
		push	ebx
		push	dword ptr [ebp+4]
		call	_sk_value
		mov	edi, eax
		push	dword ptr [edi]
		push	0
		call	_i2s_ASN1_INTEGER
		mov	esi, eax
		push	esi
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	[esp+28h+arg_C]
		push	offset ??_C@_0BF@NMLBNADB@?6?$CF?$CKsZone?3?5?$CFs?0?5User?3?5?$AA@ ; "\n%*sZone: %s, User: "
		push	[esp+30h+arg_8]
		call	_BIO_printf
		push	esi
		call	_CRYPTO_free
		push	dword ptr [edi+4]
		push	[esp+3Ch+arg_8]

loc_8B:					; DATA XREF: .rdata:_v3_sxneto
		call	_ASN1_STRING_print
		push	dword ptr [ebp+4]
		inc	ebx
		call	_sk_num
		add	esp, 34h
		cmp	ebx, eax
		jl	short loc_50
		pop	edi
		pop	esi

loc_A2:					; CODE XREF: _sxnet_i2r+37j
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
_sxnet_i2r	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0ACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_sxnet_v2i	proc near		; DATA XREF: .rdata:00000168o

var_4		= dword	ptr -4
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_8]
		xor	ebx, ebx
		push	edi
		mov	[esp+14h+var_4], ebx
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_114

loc_D2:					; CODE XREF: _sxnet_v2i+62j
		push	esi
		push	edi
		call	_sk_value
		push	dword ptr [eax+4]
		mov	ebx, [eax+8]
		push	0
		call	_s2i_ASN1_INTEGER
		add	esp, 10h
		test	eax, eax
		jz	short loc_11B
		push	0FFFFFFFFh
		push	ebx
		push	eax
		lea	eax, [esp+1Ch+var_4]
		push	eax
		call	_SXNET_add_id_INTEGER
		add	esp, 10h
		test	eax, eax
		jz	short loc_136
		push	edi
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_D2
		mov	ebx, [esp+10h+var_4]

loc_114:				; CODE XREF: _sxnet_v2i+24j
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_11B:				; CODE XREF: _sxnet_v2i+3Fj
		push	9Dh ; 'ù'
		push	offset ??_C@_0BL@CAPOOOIB@?4?2crypto?2x509v3?2v3_sxnet?4c?$AA@ ; ".\\crypto\\x509v3\\v3_sxnet.c"
		push	83h ; 'É'
		push	7Dh ; '}'
		push	22h ; '"'
		call	_ERR_put_error
		add	esp, 14h

loc_136:				; CODE XREF: _sxnet_v2i+54j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
_sxnet_v2i	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 140h
		public _v3_sxnet
_v3_sxnet	dd offset loc_8B+4
		dd 4
		dd offset _SXNET_it
		dd 7 dup(0)
		dd offset _sxnet_v2i
		dd offset _sxnet_i2r
		dd 2 dup(0)
_SXNETID_seq_tt	dd 3 dup(0)		; DATA XREF: .rdata:000001A8o
		dd offset ??_C@_04LDDJGOBB@zone?$AA@ ; "zone"
		dd offset _ASN1_INTEGER_it
		dd 2 dup(0)
		dd 4
		dd offset ??_C@_04CCHAHKJA@user?$AA@ ; "user"
		dd offset _ASN1_OCTET_STRING_it
; `SXNETID_it'::`2'::local_it
?local_it@?1??SXNETID_it@@9@9 dd 1, 10h	; DATA XREF: _SXNETID_ito
					; _SXNETID_freeo ...
		dd offset _SXNETID_seq_tt
		dd 2, 0
		dd 8
		dd offset ??_C@_07FLDOGLPN@SXNETID?$AA@	; "SXNETID"
_SXNET_seq_tt	dd 3 dup(0)		; DATA XREF: .rdata:000001ECo
		dd offset ??_C@_07CPCPJPKL@version?$AA@	; "version"
		dd offset _ASN1_INTEGER_it
		dd 4, 0
		dd 4
		dd offset ??_C@_03NDFJNBKD@ids?$AA@ ; "ids"
		dd offset _SXNETID_it
; `SXNET_it'::`2'::local_it
?local_it@?1??SXNET_it@@9@9 dd 1, 10h	; DATA XREF: _SXNET_ito
					; _SXNET_add_id_INTEGER+6Co ...
		dd offset _SXNET_seq_tt
		dd 2, 0
		dd 8
		dd offset ??_C@_05BPAJFIHK@SXNET?$AA@ ;	"SXNET"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 200h
; COMDAT (pick any)
		public ??_C@_04LDDJGOBB@zone?$AA@
; `string'
??_C@_04LDDJGOBB@zone?$AA@ db 'zone',0  ; DATA XREF: .rdata:00000184o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 208h
; COMDAT (pick any)
		public ??_C@_04CCHAHKJA@user?$AA@
; `string'
??_C@_04CCHAHKJA@user?$AA@ db 'user',0  ; DATA XREF: .rdata:00000198o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 210h
; COMDAT (pick any)
		public ??_C@_07FLDOGLPN@SXNETID?$AA@
; `string'
??_C@_07FLDOGLPN@SXNETID?$AA@ db 'SXNETID',0 ; DATA XREF: .rdata:000001B8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 218h
; COMDAT (pick any)
		public ??_C@_07CPCPJPKL@version?$AA@
; `string'
??_C@_07CPCPJPKL@version?$AA@ db 'version',0 ; DATA XREF: .rdata:000001C8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 220h
; COMDAT (pick any)
		public ??_C@_03NDFJNBKD@ids?$AA@
; `string'
??_C@_03NDFJNBKD@ids?$AA@ db 'ids',0    ; DATA XREF: .rdata:000001DCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 224h
; COMDAT (pick any)
		public ??_C@_05BPAJFIHK@SXNET?$AA@
; `string'
??_C@_05BPAJFIHK@SXNET?$AA@ db 'SXNET',0 ; DATA XREF: .rdata:000001FCo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 22Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SXNETID_free
_SXNETID_free	proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??SXNETID_it@@9@9 ; `SXNETID_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_SXNETID_free	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 240h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SXNETID_new
_SXNETID_new	proc near
		push	offset ?local_it@?1??SXNETID_it@@9@9 ; `SXNETID_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_SXNETID_new	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 250h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SXNET_add_id_INTEGER
_SXNET_add_id_INTEGER proc near		; CODE XREF: _sxnet_v2i+4Ap
					; _SXNET_add_id_asc+34j ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		xor	ebx, ebx
		test	ebp, ebp
		jz	loc_3B6
		cmp	[esp+8+arg_4], ebx
		jz	loc_3B6
		mov	eax, [esp+8+arg_8]
		test	eax, eax
		jz	loc_3B6
		push	esi
		mov	esi, [esp+0Ch+arg_C]
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_28E
		mov	esi, eax
		lea	ecx, [esi+1]

loc_285:				; CODE XREF: _SXNET_add_id_INTEGER+3Aj
		mov	al, [esi]
		inc	esi
		test	al, al
		jnz	short loc_285
		sub	esi, ecx

loc_28E:				; CODE XREF: _SXNET_add_id_INTEGER+2Ej
		cmp	esi, 40h ; '@'
		jle	short loc_2B4
		push	0C4h ; 'ƒ'
		push	offset ??_C@_0BL@CAPOOOIB@?4?2crypto?2x509v3?2v3_sxnet?4c?$AA@ ; ".\\crypto\\x509v3\\v3_sxnet.c"
		push	84h ; 'Ñ'
		push	7Eh ; '~'
		push	22h ; '"'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2B4:				; CODE XREF: _SXNET_add_id_INTEGER+41j
		push	edi
		mov	edi, [ebp+0]
		test	edi, edi
		jnz	short loc_2EA
		push	offset ?local_it@?1??SXNET_it@@9@9 ; `SXNET_it'::`2'::local_it
		call	_ASN1_item_new
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	$err$39
		push	0
		push	dword ptr [edi]
		call	_ASN1_INTEGER_set
		add	esp, 8
		test	eax, eax
		jz	$err$39
		mov	[ebp+0], edi

loc_2EA:				; CODE XREF: _SXNET_add_id_INTEGER+6Aj
		push	[esp+10h+arg_4]
		push	edi
		call	_SXNET_get_id_INTEGER
		add	esp, 8
		test	eax, eax
		jz	short loc_31D
		push	0D0h ; '–'
		push	offset ??_C@_0BL@CAPOOOIB@?4?2crypto?2x509v3?2v3_sxnet?4c?$AA@ ; ".\\crypto\\x509v3\\v3_sxnet.c"
		push	85h ; 'Ö'
		push	7Eh ; '~'
		push	22h ; '"'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_31D:				; CODE XREF: _SXNET_add_id_INTEGER+A9j
		push	offset ?local_it@?1??SXNETID_it@@9@9 ; `SXNETID_it'::`2'::local_it
		call	_ASN1_item_new
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	short $err$39
		mov	ecx, [esp+10h+arg_8]
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_349
		mov	esi, ecx
		lea	edx, [esi+1]
		xchg	ax, ax

loc_340:				; CODE XREF: _SXNET_add_id_INTEGER+F5j
		mov	al, [esi]
		inc	esi
		test	al, al
		jnz	short loc_340
		sub	esi, edx

loc_349:				; CODE XREF: _SXNET_add_id_INTEGER+E7j
		push	esi
		push	ecx
		push	dword ptr [ebx+4]
		call	_ASN1_STRING_set
		add	esp, 0Ch
		test	eax, eax
		jz	short $err$39
		push	ebx
		push	dword ptr [edi+4]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	short $err$39
		mov	eax, [esp+10h+arg_4]
		pop	edi
		pop	esi
		mov	[ebx], eax
		mov	eax, 1
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$err$39:				; CODE XREF: _SXNET_add_id_INTEGER+7Dj
					; _SXNET_add_id_INTEGER+91j ...
		push	0E1h ; '·'
		push	offset ??_C@_0BL@CAPOOOIB@?4?2crypto?2x509v3?2v3_sxnet?4c?$AA@ ; ".\\crypto\\x509v3\\v3_sxnet.c"
		push	41h ; 'A'
		push	7Eh ; '~'
		push	22h ; '"'
		call	_ERR_put_error
		push	offset ?local_it@?1??SXNETID_it@@9@9 ; `SXNETID_it'::`2'::local_it
		push	ebx
		call	_ASN1_item_free
		push	offset ?local_it@?1??SXNET_it@@9@9 ; `SXNET_it'::`2'::local_it
		push	edi
		call	_ASN1_item_free
		add	esp, 24h
		mov	dword ptr [ebp+0], 0
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_3B6:				; CODE XREF: _SXNET_add_id_INTEGER+Aj
					; _SXNET_add_id_INTEGER+14j ...
		push	0BEh ; 'æ'
		push	offset ??_C@_0BL@CAPOOOIB@?4?2crypto?2x509v3?2v3_sxnet?4c?$AA@ ; ".\\crypto\\x509v3\\v3_sxnet.c"
		push	6Bh ; 'k'
		push	7Eh ; '~'
		push	22h ; '"'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebp
		pop	ebx
		retn
_SXNET_add_id_INTEGER endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3D4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SXNET_add_id_asc
_SXNET_add_id_asc proc near

arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	0
		call	_s2i_ASN1_INTEGER
		add	esp, 8
		test	eax, eax
		jnz	short loc_404
		push	9Dh ; 'ù'
		push	offset ??_C@_0BL@CAPOOOIB@?4?2crypto?2x509v3?2v3_sxnet?4c?$AA@ ; ".\\crypto\\x509v3\\v3_sxnet.c"
		push	83h ; 'É'
		push	7Dh ; '}'
		push	22h ; '"'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_404:				; CODE XREF: _SXNET_add_id_asc+10j
		mov	[esp+arg_4], eax
		jmp	_SXNET_add_id_INTEGER
_SXNET_add_id_asc endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 410h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SXNET_add_id_ulong
_SXNET_add_id_ulong proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	2
		call	_ASN1_STRING_type_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_449
		push	[esp+4+arg_4]
		push	esi
		call	_ASN1_INTEGER_set
		add	esp, 8
		test	eax, eax
		jz	short loc_449
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	esi
		push	[esp+10h+arg_0]
		call	_SXNET_add_id_INTEGER
		add	esp, 10h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_449:				; CODE XREF: _SXNET_add_id_ulong+Fj
					; _SXNET_add_id_ulong+20j
		push	0AAh ; '™'
		push	offset ??_C@_0BL@CAPOOOIB@?4?2crypto?2x509v3?2v3_sxnet?4c?$AA@ ; ".\\crypto\\x509v3\\v3_sxnet.c"
		push	41h ; 'A'
		push	7Fh ; ''
		push	22h ; '"'
		call	_ERR_put_error
		push	esi
		call	_ASN1_STRING_free
		add	esp, 18h
		xor	eax, eax
		pop	esi
		retn
_SXNET_add_id_ulong endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 46Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SXNET_free
_SXNET_free	proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??SXNET_it@@9@9 ; `SXNET_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_SXNET_free	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 480h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SXNET_get_id_INTEGER
_SXNET_get_id_INTEGER proc near		; CODE XREF: _SXNET_add_id_INTEGER+9Fp
					; _SXNET_get_id_asc+3Dp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		xor	esi, esi
		push	dword ptr [edi+4]
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_4CA
		mov	ebp, [esp+10h+arg_4]
		nop	dword ptr [eax]

loc_4A0:				; CODE XREF: _SXNET_get_id_INTEGER+48j
		push	esi
		push	dword ptr [edi+4]
		call	_sk_value
		mov	ebx, eax
		push	ebp
		push	dword ptr [ebx]
		call	_ASN1_STRING_cmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_4D1
		push	dword ptr [edi+4]
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_4A0

loc_4CA:				; CODE XREF: _SXNET_get_id_INTEGER+17j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_4D1:				; CODE XREF: _SXNET_get_id_INTEGER+38j
		mov	eax, [ebx+4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_SXNET_get_id_INTEGER endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SXNET_get_id_asc
_SXNET_get_id_asc proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	[esp+4+arg_4]
		push	0
		call	_s2i_ASN1_INTEGER
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_513
		push	0EDh ; 'Ì'
		push	offset ??_C@_0BL@CAPOOOIB@?4?2crypto?2x509v3?2v3_sxnet?4c?$AA@ ; ".\\crypto\\x509v3\\v3_sxnet.c"
		push	83h ; 'É'
		push	80h ; 'Ä'
		push	22h ; '"'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_513:				; CODE XREF: _SXNET_get_id_asc+13j
		push	esi
		push	edi
		push	[esp+0Ch+arg_0]
		call	_SXNET_get_id_INTEGER
		push	edi
		mov	esi, eax
		call	_ASN1_STRING_free
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_SXNET_get_id_asc endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 530h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SXNET_get_id_ulong
_SXNET_get_id_ulong proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	2
		call	_ASN1_STRING_type_new
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_56D
		push	[esp+4+arg_4]
		push	edi
		call	_ASN1_INTEGER_set
		add	esp, 8
		test	eax, eax
		jz	short loc_56D
		push	esi
		push	edi
		push	[esp+0Ch+arg_0]
		call	_SXNET_get_id_INTEGER
		push	edi
		mov	esi, eax
		call	_ASN1_STRING_free
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_56D:				; CODE XREF: _SXNET_get_id_ulong+Fj
					; _SXNET_get_id_ulong+20j
		push	0FAh ; '˙'
		push	offset ??_C@_0BL@CAPOOOIB@?4?2crypto?2x509v3?2v3_sxnet?4c?$AA@ ; ".\\crypto\\x509v3\\v3_sxnet.c"
		push	41h ; 'A'
		push	81h ; 'Å'
		push	22h ; '"'
		call	_ERR_put_error
		push	edi
		call	_ASN1_STRING_free
		add	esp, 18h
		xor	eax, eax
		pop	edi
		retn
_SXNET_get_id_ulong endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 594h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SXNET_new
_SXNET_new	proc near
		push	offset ?local_it@?1??SXNET_it@@9@9 ; `SXNET_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_SXNET_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_SXNET
_d2i_SXNET	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??SXNET_it@@9@9 ; `SXNET_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_SXNET	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_SXNETID
_d2i_SXNETID	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??SXNETID_it@@9@9 ; `SXNETID_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_SXNETID	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_SXNET
_i2d_SXNET	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??SXNET_it@@9@9 ; `SXNET_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_SXNET	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_SXNETID
_i2d_SXNETID	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??SXNETID_it@@9@9 ; `SXNETID_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_SXNETID	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 60Ch
; COMDAT (pick any)
		public ??_C@_00CNPNBAHC@?$AA@
; `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: _sxnet_i2r+11o
					; _sxnet_i2r+57o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 610h
; COMDAT (pick any)
		public ??_C@_0BI@GOEPAKBG@?$CF?$CKsVersion?3?5?$CFld?5?$CI0x?$CFlX?$CJ?$AA@
; `string'
??_C@_0BI@GOEPAKBG@?$CF?$CKsVersion?3?5?$CFld?5?$CI0x?$CFlX?$CJ?$AA@ db	'%*sVersion: %ld (0x%lX)',0
					; DATA XREF: _sxnet_i2r+1Ao
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 628h
; COMDAT (pick any)
		public ??_C@_0BF@NMLBNADB@?6?$CF?$CKsZone?3?5?$CFs?0?5User?3?5?$AA@
; `string'
??_C@_0BF@NMLBNADB@?6?$CF?$CKsZone?3?5?$CFs?0?5User?3?5?$AA@ db	0Ah
					; DATA XREF: _sxnet_i2r+60o
		db '%*sZone: %s, User: ',0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 640h
; COMDAT (pick any)
		public ??_C@_0BL@CAPOOOIB@?4?2crypto?2x509v3?2v3_sxnet?4c?$AA@
; `string'
??_C@_0BL@CAPOOOIB@?4?2crypto?2x509v3?2v3_sxnet?4c?$AA@	db '.\crypto\x509v3\v3_sxnet.c',0
					; DATA XREF: _sxnet_v2i+74o
					; _SXNET_add_id_INTEGER+48o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ASN1_INTEGER_it:near ; DATA XREF: .rdata:00000188o
					; .rdata:000001CCo
		extrn _ASN1_OCTET_STRING_it:near ; DATA	XREF: .rdata:0000019Co
		extrn _sk_num:near	; CODE XREF: _sxnet_i2r+2Dp
					; _sxnet_i2r+84p ...
		extrn _sk_value:near	; CODE XREF: _sxnet_i2r+44p
					; _sxnet_v2i+28p ...
		extrn _sk_push:near	; CODE XREF: _SXNET_add_id_INTEGER+10Ep
		extrn _CRYPTO_free:near	; CODE XREF: _sxnet_i2r+6Fp
		extrn _BIO_printf:near	; CODE XREF: _sxnet_i2r+23p
					; _sxnet_i2r+69p
		extrn _ERR_put_error:near ; CODE XREF: _sxnet_v2i+82p
					; _SXNET_add_id_INTEGER+56p ...
		extrn _ASN1_STRING_free:near ; CODE XREF: _SXNET_add_id_ulong+4Fp
					; _SXNET_get_id_asc+45p ...
		extrn _ASN1_STRING_type_new:near ; CODE	XREF: _SXNET_add_id_ulong+3p
					; _SXNET_get_id_ulong+3p
		extrn _ASN1_STRING_cmp:near ; CODE XREF: _SXNET_get_id_INTEGER+2Ep
		extrn _ASN1_STRING_set:near ; CODE XREF: _SXNET_add_id_INTEGER+FEp
		extrn _ASN1_INTEGER_set:near ; CODE XREF: _SXNET_add_id_INTEGER+87p
					; _SXNET_add_id_ulong+16p ...
		extrn _ASN1_INTEGER_get:near ; CODE XREF: _sxnet_i2r+9p
		extrn _ASN1_STRING_print:near ;	CODE XREF: _sxnet_i2r:loc_8Bp
		extrn _ASN1_item_new:near ; CODE XREF: _SXNETID_new+5p
					; _SXNET_add_id_INTEGER+71p ...
		extrn _ASN1_item_free:near ; CODE XREF:	_SXNETID_free+9p
					; _SXNET_add_id_INTEGER+145p ...
		extrn _ASN1_item_d2i:near ; CODE XREF: _d2i_SXNET+11p
					; _d2i_SXNETID+11p
		extrn _ASN1_item_i2d:near ; CODE XREF: _i2d_SXNET+Dp
					; _i2d_SXNETID+Dp
		extrn _i2s_ASN1_INTEGER:near ; CODE XREF: _sxnet_i2r+4Fp
		extrn _s2i_ASN1_INTEGER:near ; CODE XREF: _sxnet_v2i+35p
					; _SXNET_add_id_asc+6p	...
		extrn __chkstk:near	; CODE XREF: _sxnet_v2i+5p


		end
