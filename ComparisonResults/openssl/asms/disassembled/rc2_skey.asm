;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	E424C2AF2AE4E6AAEB4D5146B0D107EA
; Input	CRC32 :	E34F0CC0

; File Name   :	C:\compspace\Diff\openssl\obj\rc2_skey.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
_key_table	db 0D9h			; DATA XREF: _RC2_set_key+6Ar
					; _RC2_set_key+9Cr ...
		db 78h,	0F9h, 0C4h
		dd 0EDB5DD19h, 79FDE928h, 9DD8A04Ah, 83377EC6h,	8E53762Bh
		dd 88644C62h, 0A2FB8B44h, 0F5599A17h, 134FB387h, 8D6D4561h
		dd 327D8109h, 0EB408FBDh, 0B7BB786h, 222195F0h,	824E6B5Ch
		dd 9365D654h, 1CB260CEh, 14C05673h, 0DCF18CA7h,	1FCA7512h
		dd 0D1E4BE3Bh, 30D43D42h, 26B63CA3h, 0DA0EBF6Fh, 57076946h
		dd 9B1DF227h, 34394BCh,	0F6C711F8h, 0E73EEF90h,	2FD5C306h
		dd 0D71E66C8h, 0DEEAE808h, 0F7EE5280h, 0AC72AA84h, 2A6A4D35h
		dd 71D21A96h, 7449155Ah, 5ED09F4Bh, 0ECA41804h,	6E41E0C2h
		dd 0CCCB510Fh, 50AF9124h, 3970F4A1h, 853A7C99h,	7AB4B823h
		dd 5B3602FCh, 31975525h, 98FA5D2Dh, 0AE928AE3h,	1029DF05h
		dd 0C9BA6C67h, 0CFE600D3h, 2CA89EE1h, 3F011663h, 0A989E258h
		dd 1B34380Dh, 0B0FF33ABh, 5F0C48BBh, 2ECDB1B9h,	47DBF3C5h
		dd 779CA5E5h, 6820A60Ah, 0ADC17FFEh
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 100h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RC2_set_key
_RC2_set_key	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_4]
		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		mov	ebp, [esp+8+arg_C]
		push	esi
		push	edi
		mov	edi, 80h ; '€'
		mov	byte ptr [ebx],	0
		cmp	ecx, edi
		cmovg	ecx, edi
		test	ebp, ebp
		jg	short loc_128
		mov	ebp, 400h
		jmp	short loc_132
; ---------------------------------------------------------------------------

loc_128:				; CODE XREF: _RC2_set_key+1Fj
		mov	eax, 400h
		cmp	ebp, eax
		cmovg	ebp, eax

loc_132:				; CODE XREF: _RC2_set_key+26j
		test	ecx, ecx
		jle	short loc_154
		sub	[esp+10h+arg_8], ebx
		mov	edx, ebx
		mov	ebx, [esp+10h+arg_8]
		mov	esi, ecx

loc_142:				; CODE XREF: _RC2_set_key+4Ej
		mov	al, [ebx+edx]
		lea	edx, [edx+1]
		mov	[edx-1], al
		sub	esi, 1
		jnz	short loc_142
		mov	ebx, [esp+10h+arg_0]

loc_154:				; CODE XREF: _RC2_set_key+34j
		movzx	edx, byte ptr [ebx+ecx-1]
		cmp	ecx, edi
		jge	short loc_179
		mov	esi, ebx
		sub	esi, ecx

loc_161:				; CODE XREF: _RC2_set_key+77j
		movzx	eax, byte ptr [esi+ecx]
		add	eax, edx
		movzx	eax, al
		movzx	edx, _key_table[eax]
		mov	[ecx+ebx], dl
		inc	ecx
		cmp	ecx, edi
		jl	short loc_161

loc_179:				; CODE XREF: _RC2_set_key+5Bj
		lea	eax, [ebp+7]
		mov	edx, 0FFh
		sar	eax, 3
		neg	ebp
		sub	edi, eax
		mov	[esp+10h+arg_0], eax
		movzx	eax, byte ptr [edi+ebx]
		lea	esi, [edi+ebx]
		and	ebp, 7
		mov	ecx, ebp
		sar	edx, cl
		and	edx, eax
		movzx	ecx, _key_table[edx]
		mov	[esi], cl
		test	edi, edi
		jz	short loc_1C8
		mov	edx, [esp+10h+arg_0]
		nop	dword ptr [eax]

loc_1B0:				; CODE XREF: _RC2_set_key+C6j
		movzx	eax, byte ptr [esi+edx-1]
		lea	esi, [esi-1]
		xor	eax, ecx
		movzx	ecx, _key_table[eax]
		mov	[esi], cl
		sub	edi, 1
		jnz	short loc_1B0

loc_1C8:				; CODE XREF: _RC2_set_key+A7j
		lea	esi, [ebx+0FCh]
		mov	edi, 40h ; '@'
		lea	edx, [ebx+7Eh]

loc_1D6:				; CODE XREF: _RC2_set_key+F1j
		movzx	ecx, byte ptr [edx+1]
		lea	esi, [esi-4]
		movzx	eax, byte ptr [edx]
		lea	edx, [edx-2]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, cx
		mov	[esi+4], eax
		sub	edi, 1
		jnz	short loc_1D6
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_RC2_set_key	endp

_text$mn	ends


		end
