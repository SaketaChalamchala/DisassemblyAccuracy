;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	036A94CED3F1B13E9AA333C03B284483
; Input	CRC32 :	6FA65E1E

; File Name   :	C:\compspace\Diff\openssl\obj\ec_ameth.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_eckey_pub_encode proc near		; DATA XREF: .rdata:00000938o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 8
		call	__chkstk
		mov	eax, [esp+8+arg_4]
		push	ebx
		push	esi
		mov	[esp+10h+arg_4], 0
		xor	esi, esi
		mov	ebx, [eax+14h]
		lea	eax, [esp+10h+arg_4]
		push	ebx
		push	eax
		lea	eax, [esp+18h+var_8]
		push	eax
		call	_eckey_param2type
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_54
		push	72h ; 'r'
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	10h
		push	0D8h ; 'Ø'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_54:					; CODE XREF: _eckey_pub_encode+32j
		push	edi
		push	0
		push	ebx
		call	_i2o_ECPublicKey
		mov	edi, [esp+1Ch+arg_4]
		add	esp, 8
		test	eax, eax
		jle	short $err$14
		push	78h ; 'x'
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	eax
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short $err$14
		lea	eax, [esp+14h+var_4]
		mov	[esp+14h+var_4], esi
		push	eax
		push	ebx
		call	_i2o_ECPublicKey
		add	esp, 8
		test	eax, eax
		jle	short $err$14
		push	eax
		push	esi
		push	edi
		push	[esp+20h+var_8]
		push	198h
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+28h+arg_0]
		call	_X509_PUBKEY_set0_param
		add	esp, 18h
		test	eax, eax
		jz	short $err$14
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

$err$14:				; CODE XREF: _eckey_pub_encode+66j
					; _eckey_pub_encode+7Cj ...
		cmp	[esp+14h+var_8], 6
		push	edi
		jnz	short loc_D4
		call	_ASN1_OBJECT_free
		jmp	short loc_D9
; ---------------------------------------------------------------------------

loc_D4:					; CODE XREF: _eckey_pub_encode+CBj
		call	_ASN1_STRING_free

loc_D9:					; CODE XREF: _eckey_pub_encode+D2j
		add	esp, 4
		test	esi, esi
		jz	short loc_E9
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_E9:					; CODE XREF: _eckey_pub_encode+DEj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
_eckey_pub_encode endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_eckey_pub_decode proc near		; DATA XREF: .rdata:00000934o

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 18h
		call	__chkstk
		push	[esp+18h+arg_4]
		lea	eax, [esp+1Ch+var_10]
		mov	[esp+1Ch+var_14], 0
		push	eax
		lea	eax, [esp+20h+var_4]
		mov	[esp+20h+var_18], 0
		push	eax
		lea	eax, [esp+24h+var_14]
		push	eax
		push	0
		call	_X509_PUBKEY_get0_param
		add	esp, 14h
		test	eax, eax
		jz	short loc_176
		push	[esp+18h+var_10]
		lea	eax, [esp+1Ch+var_C]
		push	eax
		lea	eax, [esp+20h+var_8]
		push	eax
		push	0
		call	_X509_ALGOR_get0
		push	[esp+28h+var_C]
		push	[esp+2Ch+var_8]
		call	_eckey_type2param
		add	esp, 18h
		mov	[esp+18h+var_18], eax
		test	eax, eax
		jnz	short loc_17C
		push	0C7h ; 'Ç'
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	10h
		push	0D7h ; '×'
		push	10h
		call	_ERR_put_error
		add	esp, 14h

loc_176:				; CODE XREF: _eckey_pub_decode+39j
		xor	eax, eax
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_17C:				; CODE XREF: _eckey_pub_decode+65j
		push	[esp+18h+var_4]
		lea	eax, [esp+1Ch+var_14]
		push	eax
		lea	eax, [esp+20h+var_18]
		push	eax
		call	_o2i_ECPublicKey
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1CA

loc_196:				; DATA XREF: .rdata:_eckey_asn1_metho
					; .rdata:00000924o
		push	0CDh ; 'Í'
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	8Eh ; 'Ž'
		push	0D7h ; '×'
		push	10h
		call	_ERR_put_error
		add	esp, 14h

$ecerr$9:
		mov	eax, [esp+18h+var_18]
		test	eax, eax
		jz	short loc_1C4
		push	eax
		call	_EC_KEY_free
		add	esp, 4

loc_1C4:				; CODE XREF: _eckey_pub_decode+C5j
		xor	eax, eax
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1CA:				; CODE XREF: _eckey_pub_decode+A0j
		push	[esp+18h+var_18]
		push	198h
		push	[esp+20h+arg_0]
		call	_EVP_PKEY_assign
		add	esp, 0Ch
		mov	eax, 1
		add	esp, 18h
		retn
_eckey_pub_decode endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_eckey_pub_cmp	proc near		; DATA XREF: .rdata:0000093Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		push	dword ptr [edi+14h]
		call	_EC_KEY_get0_group
		mov	ecx, [esp+10h+arg_0]
		mov	ebx, eax
		push	dword ptr [ecx+14h]
		call	_EC_KEY_get0_public_key
		push	dword ptr [edi+14h]
		mov	esi, eax
		call	_EC_KEY_get0_public_key
		push	0
		push	eax
		push	esi
		push	ebx
		call	_EC_POINT_cmp
		add	esp, 1Ch
		pop	edi
		pop	esi
		pop	ebx
		test	eax, eax
		jnz	short loc_229
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_229:				; CODE XREF: _eckey_pub_cmp+39j
		dec	eax
		neg	eax
		sbb	eax, eax
		and	eax, 0FFFFFFFEh
		retn
_eckey_pub_cmp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 234h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_eckey_priv_decode proc	near		; DATA XREF: .rdata:00000944o

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 18h
		call	__chkstk
		push	[esp+18h+arg_4]
		lea	eax, [esp+1Ch+var_10]
		mov	[esp+1Ch+var_14], 0
		push	eax
		lea	eax, [esp+20h+var_4]
		mov	[esp+20h+var_18], 0
		push	eax
		lea	eax, [esp+24h+var_14]
		push	eax
		push	0
		call	_PKCS8_pkey_get0
		add	esp, 14h
		test	eax, eax
		jnz	short loc_273
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_273:				; CODE XREF: _eckey_priv_decode+39j
		push	esi
		push	edi
		push	[esp+20h+var_10]
		lea	eax, [esp+24h+var_C]
		push	eax
		lea	eax, [esp+28h+var_8]
		push	eax
		push	0
		call	_X509_ALGOR_get0
		push	[esp+30h+var_C]
		push	[esp+34h+var_8]
		call	_eckey_type2param
		add	esp, 18h
		mov	[esp+20h+var_18], eax
		test	eax, eax
		jz	short $ecliberr$17
		push	[esp+20h+var_4]
		lea	eax, [esp+24h+var_14]
		push	eax
		lea	eax, [esp+28h+var_18]
		push	eax
		call	_d2i_ECPrivateKey
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_2CD
		push	0FBh ; 'û'
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	8Eh ; 'Ž'
		jmp	short loc_322
; ---------------------------------------------------------------------------

loc_2CD:				; CODE XREF: _eckey_priv_decode+86j
		push	[esp+20h+var_18]
		call	_EC_KEY_get0_public_key
		add	esp, 4
		test	eax, eax
		jnz	loc_3D1
		push	[esp+20h+var_18]
		call	_EC_KEY_get0_group
		mov	edi, eax
		push	edi
		call	_EC_POINT_new
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_34A
		push	10Bh
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	10h
		push	0D5h ; 'Õ'
		push	10h
		call	_ERR_put_error
		add	esp, 14h

$ecliberr$17:				; CODE XREF: _eckey_priv_decode+6Cj
					; _eckey_priv_decode+14Bj
		push	125h
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	10h

loc_322:				; CODE XREF: _eckey_priv_decode+97j
		push	0D5h ; 'Õ'
		push	10h
		call	_ERR_put_error
		add	esp, 14h

$ecerr$18:
		mov	eax, [esp+20h+var_18]
		test	eax, eax
		jz	short loc_342
		push	eax
		call	_EC_KEY_free
		add	esp, 4

loc_342:				; CODE XREF: _eckey_priv_decode+103j
		pop	edi
		xor	eax, eax
		pop	esi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_34A:				; CODE XREF: _eckey_priv_decode+C5j
		push	edi
		call	_EC_GROUP_get0_generator
		push	eax
		push	esi
		call	_EC_POINT_copy
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_381
		push	esi
		call	_EC_POINT_free
		push	110h

loc_369:				; CODE XREF: _eckey_priv_decode+176j
					; _eckey_priv_decode+193j
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	10h
		push	0D5h ; 'Õ'
		push	10h
		call	_ERR_put_error
		add	esp, 18h
		jmp	short $ecliberr$17
; ---------------------------------------------------------------------------

loc_381:				; CODE XREF: _eckey_priv_decode+128j
		push	[esp+20h+var_18]
		call	_EC_KEY_get0_private_key
		push	0
		push	0
		push	0
		push	eax
		push	esi
		push	edi
		call	_EC_POINT_mul
		add	esp, 1Ch
		push	esi
		test	eax, eax
		jnz	short loc_3AC
		call	_EC_POINT_free
		push	116h
		jmp	short loc_369
; ---------------------------------------------------------------------------

loc_3AC:				; CODE XREF: _eckey_priv_decode+16Aj
		push	[esp+24h+var_18]
		call	_EC_KEY_set_public_key
		add	esp, 8
		push	esi
		test	eax, eax
		jnz	short loc_3C9
		call	_EC_POINT_free
		push	11Bh
		jmp	short loc_369
; ---------------------------------------------------------------------------

loc_3C9:				; CODE XREF: _eckey_priv_decode+187j
		call	_EC_POINT_free
		add	esp, 4

loc_3D1:				; CODE XREF: _eckey_priv_decode+A7j
		push	[esp+20h+var_18]
		push	198h
		push	[esp+28h+arg_0]
		call	_EVP_PKEY_assign
		add	esp, 0Ch
		mov	eax, 1
		pop	edi
		pop	esi
		add	esp, 18h
		retn
_eckey_priv_decode endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_eckey_priv_encode proc	near		; DATA XREF: .rdata:00000948o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 8
		call	__chkstk
		mov	eax, [esp+8+arg_4]
		push	esi
		mov	esi, [eax+14h]
		lea	eax, [esp+0Ch+var_8]
		push	esi
		push	eax
		lea	eax, [esp+14h+var_4]
		push	eax
		call	_eckey_param2type
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_442
		push	137h
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	8Eh ; 'Ž'
		push	0D6h ; 'Ö'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_442:				; CODE XREF: _eckey_priv_encode+27j
		push	ebp
		push	edi
		push	esi
		call	_EC_KEY_get_enc_flags
		mov	edi, eax
		mov	ecx, edi
		or	ecx, 1
		push	ecx
		push	esi
		call	_EC_KEY_set_enc_flags
		push	0
		push	esi
		call	_i2d_ECPrivateKey
		mov	ebp, eax
		add	esp, 14h
		test	ebp, ebp
		jnz	short loc_494
		push	edi
		push	esi
		call	_EC_KEY_set_enc_flags
		push	147h
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	10h
		push	0D6h ; 'Ö'
		push	10h
		call	_ERR_put_error
		add	esp, 1Ch
		xor	eax, eax
		pop	edi
		pop	ebp
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_494:				; CODE XREF: _eckey_priv_encode+73j
		push	ebx
		push	14Ah
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	ebp
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_4DA
		push	edi
		push	esi
		call	_EC_KEY_set_enc_flags
		push	14Dh
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	41h ; 'A'
		push	0D6h ; 'Ö'
		push	10h
		call	_ERR_put_error
		add	esp, 1Ch
		xor	eax, eax
		pop	ebx
		pop	edi
		pop	ebp
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_4DA:				; CODE XREF: _eckey_priv_encode+B8j
		lea	eax, [esp+18h+arg_4]
		mov	[esp+18h+arg_4], ebx
		push	eax
		push	esi
		call	_i2d_ECPrivateKey
		add	esp, 8
		push	edi
		push	esi
		test	eax, eax
		jnz	short loc_522
		call	_EC_KEY_set_enc_flags
		push	ebx
		call	_CRYPTO_free
		push	154h
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	10h
		push	0D6h ; 'Ö'
		push	10h
		call	_ERR_put_error
		add	esp, 20h
		xor	eax, eax
		pop	ebx
		pop	edi
		pop	ebp
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_522:				; CODE XREF: _eckey_priv_encode+FCj
		call	_EC_KEY_set_enc_flags
		add	esp, 8
		push	ebp
		push	ebx
		push	[esp+20h+var_8]
		push	[esp+24h+var_4]
		push	0
		push	198h
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+30h+arg_0]
		call	_PKCS8_pkey_set0
		add	esp, 1Ch
		neg	eax
		sbb	eax, eax
		neg	eax
		pop	ebx
		pop	edi
		pop	ebp
		pop	esi
		add	esp, 8
		retn
_eckey_priv_encode endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 560h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_ec_size	proc near		; DATA XREF: .rdata:00000950o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+14h]
		call	_ECDSA_size
		add	esp, 4
		retn
_int_ec_size	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 570h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ec_bits	proc near		; DATA XREF: .rdata:00000954o

arg_0		= dword	ptr  4

		push	edi
		call	_BN_new
		mov	edi, eax
		test	edi, edi
		jnz	short loc_585

loc_57C:				; CODE XREF: _ec_bits+2Fj
		call	_ERR_clear_error
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_585:				; CODE XREF: _ec_bits+Aj
		mov	eax, [esp+4+arg_0]
		push	dword ptr [eax+14h]
		call	_EC_KEY_get0_group
		push	0
		push	edi
		push	eax
		call	_EC_GROUP_get_order
		add	esp, 10h
		test	eax, eax
		jz	short loc_57C
		push	esi
		push	edi
		call	_BN_num_bits
		push	edi
		mov	esi, eax
		call	_BN_free
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_ec_bits	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5B8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ec_missing_parameters proc near	; DATA XREF: .rdata:00000960o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+14h]
		call	_EC_KEY_get0_group
		add	esp, 4
		neg	eax
		sbb	eax, eax
		inc	eax
		retn
_ec_missing_parameters endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ec_copy_parameters proc near		; DATA XREF: .rdata:00000964o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		push	dword ptr [eax+14h]
		call	_EC_KEY_get0_group
		push	eax
		call	_EC_GROUP_dup
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_5F0

loc_5EC:				; CODE XREF: _ec_copy_parameters+32j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_5F0:				; CODE XREF: _ec_copy_parameters+1Aj
		mov	eax, [esp+4+arg_0]
		push	esi
		push	dword ptr [eax+14h]
		call	_EC_KEY_set_group
		add	esp, 8
		test	eax, eax
		jz	short loc_5EC
		push	esi
		call	_EC_GROUP_free
		add	esp, 4
		mov	eax, 1
		pop	esi
		retn
_ec_copy_parameters endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 614h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ec_cmp_parameters proc	near		; DATA XREF: .rdata:00000968o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		push	dword ptr [eax+14h]
		call	_EC_KEY_get0_group
		mov	ecx, [esp+8+arg_4]
		mov	esi, eax
		push	dword ptr [ecx+14h]
		call	_EC_KEY_get0_group
		push	0
		push	eax
		push	esi
		call	_EC_GROUP_cmp
		add	esp, 14h
		neg	eax
		sbb	eax, eax
		inc	eax
		pop	esi
		retn
_ec_cmp_parameters endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 644h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_ec_free	proc near		; DATA XREF: .rdata:00000974o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+14h]
		call	_EC_KEY_free
		pop	ecx
		retn
_int_ec_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 654h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_eckey_param_decode proc near		; DATA XREF: .rdata:00000958o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	[esp+4+arg_4]
		push	0
		call	_d2i_ECParameters
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_688
		push	1FAh
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	10h
		push	0D4h ; 'Ô'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_688:				; CODE XREF: _eckey_param_decode+14j
		push	eax
		push	198h
		push	[esp+8+arg_0]
		call	_EVP_PKEY_assign
		add	esp, 0Ch
		mov	eax, 1
		retn
_eckey_param_decode endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_eckey_param_encode proc near		; DATA XREF: .rdata:0000095Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	[esp+arg_4]
		push	dword ptr [eax+14h]
		call	_i2d_ECParameters
		add	esp, 8
		retn
_eckey_param_encode endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_eckey_param_print proc	near		; DATA XREF: .rdata:0000096Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		push	0
		push	[esp+4+arg_8]
		push	dword ptr [eax+14h]
		push	[esp+0Ch+arg_0]
		call	_do_EC_KEY_print
		add	esp, 10h
		retn
_eckey_param_print endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_eckey_pub_print proc near		; DATA XREF: .rdata:00000940o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		push	1
		push	[esp+4+arg_8]
		push	dword ptr [eax+14h]
		push	[esp+0Ch+arg_0]
		call	_do_EC_KEY_print
		add	esp, 10h
		retn
_eckey_pub_print endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_eckey_priv_print proc near		; DATA XREF: .rdata:0000094Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		push	2
		push	[esp+4+arg_8]
		push	dword ptr [eax+14h]
		push	[esp+0Ch+arg_0]
		call	_do_EC_KEY_print
		add	esp, 10h
		retn
_eckey_priv_print endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 708h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_old_ec_priv_decode proc near		; DATA XREF: .rdata:0000097Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	[esp+4+arg_4]
		push	0
		call	_d2i_ECPrivateKey
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_73F
		push	21Dh
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	8Eh ; 'Ž'
		push	0DEh ; 'Þ'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_73F:				; CODE XREF: _old_ec_priv_decode+14j
		push	eax
		push	198h
		push	[esp+8+arg_0]
		call	_EVP_PKEY_assign
		add	esp, 0Ch
		mov	eax, 1
		retn
_old_ec_priv_decode endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 758h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_old_ec_priv_encode proc near		; DATA XREF: .rdata:00000980o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	[esp+arg_4]
		push	dword ptr [eax+14h]
		call	_i2d_ECPrivateKey
		add	esp, 8
		retn
_old_ec_priv_encode endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 76Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ec_pkey_ctrl	proc near		; DATA XREF: .rdata:00000978o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 8
		call	__chkstk
		mov	eax, [esp+8+arg_4]
		dec	eax
		push	esi
		cmp	eax, 7		; switch 8 cases
		ja	$LN22		; jumptable 00000785 default case
		jmp	ds:$LN26[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN4:					; CODE XREF: _ec_pkey_ctrl+19j
					; DATA XREF: .text$mn:$LN26o
		cmp	[esp+0Ch+arg_8], 0 ; jumptable 00000785	case 0
		jnz	loc_8D5
		lea	eax, [esp+0Ch+var_4]
		push	eax
		lea	eax, [esp+10h+arg_4]
		push	eax
		push	0
		push	[esp+18h+arg_C]
		call	_PKCS7_SIGNER_INFO_get0_algs
		mov	eax, [esp+1Ch+arg_4]
		add	esp, 10h
		test	eax, eax
		jz	short loc_80F
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_80F
		push	eax
		call	_OBJ_obj2nid
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_80F
		push	[esp+0Ch+arg_0]
		call	_EVP_PKEY_id
		push	eax
		lea	eax, [esp+14h+var_8]
		push	esi
		push	eax
		call	_OBJ_find_sigid_by_algs
		add	esp, 10h
		test	eax, eax
		jz	short loc_80F
		push	0
		push	0FFFFFFFFh
		push	[esp+14h+var_8]
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+18h+var_4]
		call	_X509_ALGOR_set0
		add	esp, 10h
		mov	eax, 1
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_80F:				; CODE XREF: _ec_pkey_ctrl+49j
					; _ec_pkey_ctrl+4Fj ...
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

$LN10:					; CODE XREF: _ec_pkey_ctrl+19j
					; DATA XREF: .text$mn:$LN26o
		cmp	[esp+0Ch+arg_8], 0 ; jumptable 00000785	case 4
		jnz	loc_8D5
		lea	eax, [esp+0Ch+var_8]
		push	eax
		lea	eax, [esp+10h+arg_4]
		push	eax
		push	0
		push	0
		push	[esp+1Ch+arg_C]
		call	_CMS_SignerInfo_get0_algs
		mov	eax, [esp+20h+arg_4]
		add	esp, 14h
		test	eax, eax
		jz	short loc_80F
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_80F
		push	eax
		call	_OBJ_obj2nid
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_80F
		push	[esp+0Ch+arg_0]
		call	_EVP_PKEY_id
		push	eax
		lea	eax, [esp+14h+var_4]
		push	esi
		push	eax
		call	_OBJ_find_sigid_by_algs
		add	esp, 10h
		test	eax, eax
		jz	short loc_80F
		push	0
		push	0FFFFFFFFh
		push	[esp+14h+var_4]
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+18h+var_8]
		call	_X509_ALGOR_set0
		add	esp, 10h
		mov	eax, 1
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

$LN16:					; CODE XREF: _ec_pkey_ctrl+19j
					; DATA XREF: .text$mn:$LN26o
		mov	eax, [esp+0Ch+arg_8] ; jumptable 00000785 case 6
		cmp	eax, 1
		jnz	short loc_8B6
		push	[esp+0Ch+arg_C]
		call	_ecdh_cms_decrypt
		add	esp, 4
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_8B6:				; CODE XREF: _ec_pkey_ctrl+137j
		test	eax, eax
		jnz	short $LN22	; jumptable 00000785 default case
		push	[esp+0Ch+arg_C]
		call	_ecdh_cms_encrypt
		add	esp, 4
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

$LN20:					; CODE XREF: _ec_pkey_ctrl+19j
					; DATA XREF: .text$mn:$LN26o
		mov	eax, [esp+0Ch+arg_C] ; jumptable 00000785 case 7
		mov	dword ptr [eax], 1

loc_8D5:				; CODE XREF: _ec_pkey_ctrl+25j
					; _ec_pkey_ctrl+B0j
		mov	eax, 1
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

$LN21:					; CODE XREF: _ec_pkey_ctrl+19j
					; DATA XREF: .text$mn:$LN26o
		mov	eax, [esp+0Ch+arg_C] ; jumptable 00000785 case 2
		pop	esi
		mov	dword ptr [eax], 2A0h
		mov	eax, 2
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

$LN22:					; CODE XREF: _ec_pkey_ctrl+13j
					; _ec_pkey_ctrl+19j ...
		mov	eax, 0FFFFFFFEh	; jumptable 00000785 default case
		pop	esi
		add	esp, 8
		retn
_ec_pkey_ctrl	endp

; ---------------------------------------------------------------------------
		align 10h
$LN26		dd offset $LN4		; DATA XREF: _ec_pkey_ctrl+19r
		dd offset $LN22		; jump table for switch	statement
		dd offset $LN21
		dd offset $LN22
		dd offset $LN10
		dd offset $LN22
		dd offset $LN16
		dd offset $LN20
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 920h
		public _eckey_asn1_meth
_eckey_asn1_meth dd offset loc_196+2
		dd offset loc_196+2
		dd 0
		dd offset ??_C@_02KNLLHFAA@EC?$AA@ ; `string'
		dd offset ??_C@_0BF@DKDIFOGG@OpenSSL?5EC?5algorithm?$AA@ ; "OpenSSL EC algorithm"
		dd offset _eckey_pub_decode
		dd offset _eckey_pub_encode
		dd offset _eckey_pub_cmp
		dd offset _eckey_pub_print
		dd offset _eckey_priv_decode
		dd offset _eckey_priv_encode
		dd offset _eckey_priv_print
		dd offset _int_ec_size
		dd offset _ec_bits
		dd offset _eckey_param_decode
		dd offset _eckey_param_encode
		dd offset _ec_missing_parameters
		dd offset _ec_copy_parameters
		dd offset _ec_cmp_parameters
		dd offset _eckey_param_print
		dd 0
		dd offset _int_ec_free
		dd offset _ec_pkey_ctrl
		dd offset _old_ec_priv_decode
		dd offset _old_ec_priv_encode
		dd 2 dup(0)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 98Ch
; COMDAT (pick any)
		public ??_C@_02KNLLHFAA@EC?$AA@
; `string'
??_C@_02KNLLHFAA@EC?$AA@ db 45h, 43h, 0	; DATA XREF: .rdata:0000092Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 990h
; COMDAT (pick any)
		public ??_C@_0BF@DKDIFOGG@OpenSSL?5EC?5algorithm?$AA@
; `string'
??_C@_0BF@DKDIFOGG@OpenSSL?5EC?5algorithm?$AA@ db 'OpenSSL EC algorithm',0
					; DATA XREF: .rdata:00000930o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_do_EC_KEY_print proc near		; CODE XREF: _eckey_param_print+11p
					; _eckey_pub_print+11p	...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 10h
		call	__chkstk
		push	ebx
		push	ebp
		xor	ebx, ebx
		xor	eax, eax
		push	esi
		mov	esi, [esp+1Ch+arg_4]
		push	edi
		xor	edi, edi
		mov	[esp+20h+var_10], ebx
		mov	[esp+20h+var_C], eax
		lea	ebp, [ebx+20h]
		mov	[esp+20h+var_8], eax
		test	esi, esi
		jz	loc_BB2
		push	esi
		call	_EC_KEY_get0_group
		add	esp, 4
		mov	[esp+20h+arg_4], eax
		test	eax, eax
		jz	loc_BB2
		call	_BN_CTX_new
		mov	[esp+20h+var_8], eax
		test	eax, eax
		jnz	short loc_A01
		lea	ebp, [ebx+41h]
		jmp	loc_BB7
; ---------------------------------------------------------------------------

loc_A01:				; CODE XREF: _do_EC_KEY_print+4Fj
		mov	eax, [esp+20h+arg_C]
		test	eax, eax
		jle	short loc_A66
		push	esi
		call	_EC_KEY_get0_public_key
		add	esp, 4
		mov	[esp+20h+var_4], eax
		test	eax, eax
		jz	short loc_A62
		mov	eax, [esp+20h+var_8]
		push	eax
		push	0
		push	esi
		call	_EC_KEY_get_conv_form
		add	esp, 4
		push	eax
		push	[esp+2Ch+var_4]
		push	[esp+30h+arg_4]
		call	_EC_POINT_point2bn
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jnz	short loc_A49
		lea	ebp, [eax+10h]
		jmp	loc_BB7
; ---------------------------------------------------------------------------

loc_A49:				; CODE XREF: _do_EC_KEY_print+97j
		push	edi
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		mov	[esp+20h+var_10], eax

loc_A62:				; CODE XREF: _do_EC_KEY_print+70j
		mov	eax, [esp+20h+arg_C]

loc_A66:				; CODE XREF: _do_EC_KEY_print+5Fj
		cmp	eax, 2
		jnz	short loc_AA0
		push	esi
		call	_EC_KEY_get0_private_key
		mov	esi, eax
		add	esp, 4
		mov	[esp+20h+var_4], esi
		test	esi, esi
		jz	short loc_AA8
		push	esi
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		lea	ecx, [edx+eax]
		mov	eax, [esp+20h+var_10]
		sar	ecx, 3
		cmp	ecx, eax
		jbe	short loc_AAC
		mov	eax, ecx
		jmp	short loc_AAC
; ---------------------------------------------------------------------------

loc_AA0:				; CODE XREF: _do_EC_KEY_print+C1j
		mov	[esp+20h+var_4], ebx
		test	eax, eax
		jle	short loc_AD4

loc_AA8:				; CODE XREF: _do_EC_KEY_print+D4j
		mov	eax, [esp+20h+var_10]

loc_AAC:				; CODE XREF: _do_EC_KEY_print+F2j
					; _do_EC_KEY_print+F6j
		push	1C9h
		add	eax, 0Ah
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	eax
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_AD0
		lea	ebp, [eax+41h]
		jmp	loc_BB7
; ---------------------------------------------------------------------------

loc_AD0:				; CODE XREF: _do_EC_KEY_print+11Ej
		mov	eax, [esp+20h+arg_C]

loc_AD4:				; CODE XREF: _do_EC_KEY_print+FEj
		cmp	eax, 2
		jnz	short loc_AE3
		mov	[esp+20h+var_10], offset ??_C@_0M@CJKOCIEC@Private?9Key?$AA@ ; "Private-Key"
		jmp	short loc_AF7
; ---------------------------------------------------------------------------

loc_AE3:				; CODE XREF: _do_EC_KEY_print+12Fj
		cmp	eax, 1
		mov	ecx, offset ??_C@_0L@FMJMEKAC@Public?9Key?$AA@ ; "Public-Key"
		mov	edx, offset ??_C@_0BB@DMDKLH@ECDSA?9Parameters?$AA@ ; "ECDSA-Parameters"
		cmovnz	ecx, edx
		mov	[esp+20h+var_10], ecx

loc_AF7:				; CODE XREF: _do_EC_KEY_print+139j
		mov	esi, [esp+20h+arg_0]
		push	80h ; '€'
		push	[esp+24h+arg_8]
		push	esi
		call	_BIO_indent
		add	esp, 0Ch
		test	eax, eax
		jz	loc_BB7
		call	_BN_new
		mov	[esp+20h+var_C], eax
		test	eax, eax
		jz	loc_BB7
		push	0
		push	eax
		push	[esp+28h+arg_4]
		call	_EC_GROUP_get_order
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_BB7
		mov	eax, [esp+20h+var_C]
		push	eax
		call	_BN_num_bits
		push	eax
		push	[esp+28h+var_10]
		push	offset ??_C@_0O@OPPPNLCD@?$CFs?3?5?$CI?$CFd?5bit?$CJ?6?$AA@ ; "%s: (%d bit)\n"
		push	esi
		call	_BIO_printf
		add	esp, 14h
		test	eax, eax
		jle	short loc_BB7
		mov	eax, [esp+20h+var_4]
		test	eax, eax
		jz	short loc_B7A
		push	[esp+20h+arg_8]
		push	ebx
		push	eax
		push	offset ??_C@_05PFPGJCCA@priv?3?$AA@ ; "priv:"
		push	esi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	short loc_BB7

loc_B7A:				; CODE XREF: _do_EC_KEY_print+1B8j
		test	edi, edi
		jz	short loc_B96
		push	[esp+20h+arg_8]
		push	ebx
		push	edi
		push	offset ??_C@_05FJHKEHEO@pub?3?5?$AA@ ; "pub: "
		push	esi
		call	_ASN1_bn_print
		add	esp, 14h
		test	eax, eax
		jz	short loc_BB7

loc_B96:				; CODE XREF: _do_EC_KEY_print+1D4j
		push	[esp+20h+arg_8]
		push	[esp+24h+arg_4]
		push	esi
		call	_ECPKParameters_print
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_BB7
		mov	ebp, 1
		jmp	short loc_BD3
; ---------------------------------------------------------------------------

loc_BB2:				; CODE XREF: _do_EC_KEY_print+29j
					; _do_EC_KEY_print+3Ej
		mov	ebp, 43h ; 'C'

loc_BB7:				; CODE XREF: _do_EC_KEY_print+54j
					; _do_EC_KEY_print+9Cj	...
		push	1E9h
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	ebp
		push	0DDh ; 'Ý'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	ebp, ebp

loc_BD3:				; CODE XREF: _do_EC_KEY_print+208j
		test	edi, edi
		jz	short loc_BE0
		push	edi
		call	_BN_free
		add	esp, 4

loc_BE0:				; CODE XREF: _do_EC_KEY_print+22Dj
		mov	eax, [esp+20h+var_C]
		test	eax, eax
		jz	short loc_BF1
		push	eax
		call	_BN_free
		add	esp, 4

loc_BF1:				; CODE XREF: _do_EC_KEY_print+23Ej
		mov	eax, [esp+20h+var_8]
		test	eax, eax
		jz	short loc_C02
		push	eax
		call	_BN_CTX_free
		add	esp, 4

loc_C02:				; CODE XREF: _do_EC_KEY_print+24Fj
		test	ebx, ebx
		jz	short loc_C0F
		push	ebx
		call	_CRYPTO_free
		add	esp, 4

loc_C0F:				; CODE XREF: _do_EC_KEY_print+25Cj
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
_do_EC_KEY_print endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C1Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ecdh_cms_decrypt proc near		; CODE XREF: _ec_pkey_ctrl+13Dp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 8
		call	__chkstk
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		push	edi
		call	_CMS_RecipientInfo_get0_pkey_ctx
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_C9F
		push	esi
		call	_EVP_PKEY_CTX_get0_peerkey
		add	esp, 4
		test	eax, eax
		jnz	short loc_CA7
		push	eax
		push	eax
		push	eax
		lea	eax, [esp+1Ch+var_4]
		push	eax
		lea	eax, [esp+20h+var_8]
		push	eax
		push	edi
		call	_CMS_RecipientInfo_kari_get0_orig_id
		add	esp, 18h
		test	eax, eax
		jz	short loc_C9F
		mov	eax, [esp+10h+var_8]
		test	eax, eax
		jz	short loc_C9F
		mov	ecx, [esp+10h+var_4]
		test	ecx, ecx
		jz	short loc_C9F
		push	ecx
		push	eax
		push	esi
		call	_ecdh_cms_set_peerkey
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_CA7
		push	32Ah
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	95h ; '•'

loc_C90:				; CODE XREF: _ecdh_cms_decrypt+A8j
		push	0EEh ; 'î'
		push	10h
		call	_ERR_put_error
		add	esp, 14h

loc_C9F:				; CODE XREF: _ecdh_cms_decrypt+1Dj
					; _ecdh_cms_decrypt+44j ...
		pop	edi
		xor	eax, eax
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_CA7:				; CODE XREF: _ecdh_cms_decrypt+2Aj
					; _ecdh_cms_decrypt+63j
		push	edi
		push	esi
		call	_ecdh_cms_set_shared_info
		add	esp, 8
		test	eax, eax
		jnz	short loc_CC6
		push	330h
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	96h ; '–'
		jmp	short loc_C90
; ---------------------------------------------------------------------------

loc_CC6:				; CODE XREF: _ecdh_cms_decrypt+97j
		pop	edi
		mov	eax, 1
		pop	esi
		add	esp, 8
		retn
_ecdh_cms_decrypt endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0CD4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ecdh_cms_encrypt proc near		; CODE XREF: _ec_pkey_ctrl+152p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 24h ; '$'
		call	__chkstk
		push	ebp
		mov	ebp, [esp+28h+arg_0]
		push	esi
		push	edi
		xor	esi, esi
		push	ebp
		mov	[esp+34h+var_24], esi
		mov	[esp+34h+var_14], esi
		call	_CMS_RecipientInfo_get0_pkey_ctx
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_D05
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_D05:				; CODE XREF: _ecdh_cms_encrypt+28j
		push	ebx
		push	edi
		call	_EVP_PKEY_CTX_get0_pkey
		push	0
		push	0
		mov	ebx, eax
		lea	eax, [esp+40h+var_1C]
		push	0
		push	eax
		lea	eax, [esp+48h+var_20]
		push	eax
		push	ebp
		call	_CMS_RecipientInfo_kari_get0_orig_id
		add	esp, 1Ch
		test	eax, eax
		jz	loc_105A
		push	[esp+34h+var_20]
		lea	eax, [esp+38h+var_10]
		push	0
		push	0
		push	eax
		call	_X509_ALGOR_get0
		push	0
		call	_OBJ_nid2obj
		add	esp, 14h
		cmp	[esp+34h+var_10], eax
		jnz	loc_DE7
		mov	ebx, [ebx+14h]
		push	0
		push	ebx
		call	_i2o_ECPublicKey
		add	esp, 8
		test	eax, eax
		jle	loc_105A
		push	359h
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	eax
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[esp+34h+var_24], eax
		test	eax, eax
		jz	loc_1078
		mov	[esp+34h+var_C], eax
		lea	eax, [esp+34h+var_C]
		push	eax
		push	ebx
		call	_i2o_ECPublicKey
		add	esp, 8
		test	eax, eax
		jle	loc_105A
		push	eax
		push	[esp+38h+var_24]
		push	[esp+3Ch+var_1C]
		call	_ASN1_STRING_set0
		mov	eax, [esp+40h+var_1C]
		add	esp, 0Ch
		and	dword ptr [eax+0Ch], 0FFFFFFF0h
		mov	eax, [esp+34h+var_1C]
		push	0
		push	0FFFFFFFFh
		push	198h
		or	dword ptr [eax+0Ch], 8
		mov	[esp+40h+var_24], esi
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+40h+var_20]
		call	_X509_ALGOR_set0
		add	esp, 10h

loc_DE7:				; CODE XREF: _ecdh_cms_encrypt+7Bj
		push	0
		push	0FFFFFFFEh
		push	1004h
		push	400h
		push	198h
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		mov	[esp+34h+var_C], eax
		test	eax, eax
		jle	loc_105A
		lea	eax, [esp+34h+var_18]
		push	eax
		push	0
		push	1006h
		push	400h
		push	198h
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jz	loc_105A
		push	0
		push	0FFFFFFFEh
		push	1003h
		push	400h
		push	198h
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		mov	ebx, eax
		add	esp, 18h
		test	ebx, ebx
		js	loc_105A
		jnz	short loc_E65
		mov	ebx, 3B2h
		jmp	short loc_E70
; ---------------------------------------------------------------------------

loc_E65:				; CODE XREF: _ecdh_cms_encrypt+188j
		cmp	ebx, 1
		mov	eax, 3B3h
		cmovz	ebx, eax

loc_E70:				; CODE XREF: _ecdh_cms_encrypt+18Fj
		cmp	[esp+34h+var_C], 1
		jnz	loc_105A
		push	0
		push	2
		push	1004h
		push	400h
		push	198h
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	loc_105A
		cmp	[esp+34h+var_18], esi
		jnz	short loc_ED1
		call	_EVP_sha1
		push	eax
		push	0
		push	1005h
		push	400h
		push	198h
		push	edi
		mov	[esp+4Ch+var_18], eax
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	loc_105A

loc_ED1:				; CODE XREF: _ecdh_cms_encrypt+1CFj
		lea	eax, [esp+34h+var_8]
		push	eax
		lea	eax, [esp+38h+var_20]
		push	eax
		push	ebp
		call	_CMS_RecipientInfo_kari_get0_alg
		add	esp, 0Ch
		test	eax, eax
		jz	loc_105A
		push	ebx
		push	[esp+38h+var_18]
		call	_EVP_MD_type
		add	esp, 4
		push	eax
		lea	eax, [esp+3Ch+var_4]
		push	eax
		call	_OBJ_find_sigid_by_algs
		add	esp, 0Ch
		test	eax, eax
		jz	loc_105A
		push	ebp
		call	_CMS_RecipientInfo_kari_get0_ctx
		mov	ebx, eax
		push	ebx
		call	_EVP_CIPHER_CTX_cipher
		push	eax
		call	_EVP_CIPHER_type
		push	ebx
		mov	[esp+44h+var_C], eax
		call	_EVP_CIPHER_CTX_key_length
		add	esp, 10h
		mov	ebp, eax
		call	_X509_ALGOR_new
		mov	esi, eax
		test	esi, esi
		jz	loc_105A
		push	[esp+34h+var_C]
		call	_OBJ_nid2obj
		add	esp, 4
		mov	[esi], eax
		call	_ASN1_TYPE_new
		mov	[esi+4], eax
		test	eax, eax
		jz	loc_105A
		push	eax
		push	ebx
		call	_EVP_CIPHER_param_to_asn1
		add	esp, 8
		test	eax, eax
		jle	loc_105A
		push	dword ptr [esi+4]
		call	_ASN1_TYPE_get
		add	esp, 4
		test	eax, eax
		jnz	short loc_F92
		push	dword ptr [esi+4]
		call	_ASN1_TYPE_free
		add	esp, 4
		mov	dword ptr [esi+4], 0

loc_F92:				; CODE XREF: _ecdh_cms_encrypt+2AAj
		push	0
		push	ebp
		push	1007h
		push	400h
		push	198h
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	loc_105A
		push	ebp
		push	[esp+38h+var_8]
		lea	eax, [esp+3Ch+var_24]
		push	esi
		push	eax
		call	_CMS_SharedInfo_encode
		add	esp, 10h
		test	eax, eax
		jz	loc_105A
		push	[esp+34h+var_24]
		push	eax
		push	1009h
		push	400h
		push	198h
		push	edi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	short loc_105A
		lea	eax, [esp+34h+var_24]
		mov	[esp+34h+var_24], 0
		push	eax
		push	esi
		call	_i2d_X509_ALGOR
		mov	ecx, [esp+3Ch+var_24]
		add	esp, 8
		mov	ebx, eax
		test	ecx, ecx
		jz	short loc_106B
		test	ebx, ebx
		jz	short $err$37
		call	_ASN1_STRING_new
		mov	edi, eax
		test	edi, edi
		jz	short loc_105A
		push	ebx
		push	[esp+38h+var_24]
		push	edi
		call	_ASN1_STRING_set0
		add	esp, 0Ch
		mov	[esp+34h+var_24], 0
		push	edi
		push	10h
		push	[esp+3Ch+var_4]
		call	_OBJ_nid2obj
		add	esp, 4
		push	eax
		push	[esp+40h+var_20]
		call	_X509_ALGOR_set0
		add	esp, 10h
		mov	[esp+34h+var_14], 1

loc_105A:				; CODE XREF: _ecdh_cms_encrypt+55j
					; _ecdh_cms_encrypt+91j ...
		mov	ecx, [esp+34h+var_24]

$err$37:				; CODE XREF: _ecdh_cms_encrypt+33Fj
		test	ecx, ecx
		jz	short loc_106B
		push	ecx
		call	_CRYPTO_free
		add	esp, 4

loc_106B:				; CODE XREF: _ecdh_cms_encrypt+33Bj
					; _ecdh_cms_encrypt+38Cj
		test	esi, esi
		jz	short loc_1078
		push	esi
		call	_X509_ALGOR_free
		add	esp, 4

loc_1078:				; CODE XREF: _ecdh_cms_encrypt+B0j
					; _ecdh_cms_encrypt+399j
		mov	eax, [esp+34h+var_14]
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 24h
		retn
_ecdh_cms_encrypt endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1084h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ecdh_cms_set_kdf_param	proc near	; CODE XREF: _ecdh_cms_set_shared_info+45p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 4
		call	__chkstk
		mov	eax, [esp+4+arg_4]
		test	eax, eax
		jnz	short loc_109A

loc_1096:				; CODE XREF: _ecdh_cms_set_kdf_param+2Bj
					; _ecdh_cms_set_kdf_param+41j
		xor	eax, eax
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_109A:				; CODE XREF: _ecdh_cms_set_kdf_param+10j
		lea	ecx, [esp+4+arg_4]
		push	ecx
		lea	ecx, [esp+8+var_4]
		push	ecx
		push	eax
		call	_OBJ_find_sigid_algs
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1096
		mov	eax, [esp+4+arg_4]
		cmp	eax, 3B2h
		jnz	short loc_10C0
		xor	eax, eax
		jmp	short loc_10CC
; ---------------------------------------------------------------------------

loc_10C0:				; CODE XREF: _ecdh_cms_set_kdf_param+36j
		cmp	eax, 3B3h
		jnz	short loc_1096
		mov	eax, 1

loc_10CC:				; CODE XREF: _ecdh_cms_set_kdf_param+3Aj
		push	esi
		mov	esi, [esp+8+arg_0]
		push	0
		push	eax
		push	1003h
		push	400h
		push	198h
		push	esi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	short loc_1126
		push	0
		push	2
		push	1004h
		push	400h
		push	198h
		push	esi
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	short loc_1126
		push	[esp+8+var_4]
		call	_OBJ_nid2sn
		push	eax
		call	_EVP_get_digestbyname
		add	esp, 8
		test	eax, eax
		jnz	short loc_112B

loc_1126:				; CODE XREF: _ecdh_cms_set_kdf_param+6Aj
					; _ecdh_cms_set_kdf_param+8Aj
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_112B:				; CODE XREF: _ecdh_cms_set_kdf_param+A0j
		push	eax
		push	0
		push	1005h
		push	400h
		push	198h
		push	esi
		call	_EVP_PKEY_CTX_ctrl
		xor	ecx, ecx
		add	esp, 18h
		test	eax, eax
		setnle	cl
		mov	eax, ecx
		pop	esi
		pop	ecx
		retn
_ecdh_cms_set_kdf_param	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1154h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ecdh_cms_set_peerkey proc near		; CODE XREF: _ecdh_cms_decrypt+59p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 14h
		call	__chkstk
		push	ebx
		push	esi
		push	edi
		push	[esp+20h+arg_4]
		lea	eax, [esp+24h+var_8]
		xor	ebx, ebx
		push	eax
		lea	eax, [esp+28h+var_C]
		mov	[esp+28h+var_14], ebx
		push	eax
		lea	eax, [esp+2Ch+var_10]
		xor	edi, edi
		push	eax
		call	_X509_ALGOR_get0
		push	[esp+30h+var_10]
		call	_OBJ_obj2nid
		add	esp, 14h
		cmp	eax, 198h
		jnz	$err$22
		mov	eax, [esp+20h+var_C]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_11C4
		cmp	eax, 5
		jz	short loc_11C4
		push	[esp+20h+var_8]
		push	eax
		call	_eckey_type2param
		add	esp, 8
		mov	[esp+20h+var_14], eax
		test	eax, eax
		jnz	short loc_1204
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_11C4:				; CODE XREF: _ecdh_cms_set_peerkey+4Bj
					; _ecdh_cms_set_peerkey+50j
		push	[esp+20h+arg_0]
		call	_EVP_PKEY_CTX_get0_pkey
		add	esp, 4
		test	eax, eax
		jz	$err$22
		push	dword ptr [eax+14h]
		call	_EC_KEY_get0_group
		add	esp, 4
		mov	esi, eax
		call	_EC_KEY_new
		mov	[esp+20h+var_14], eax
		test	eax, eax
		jz	loc_1288
		push	esi
		push	eax
		call	_EC_KEY_set_group
		add	esp, 8
		test	eax, eax
		jz	short $err$22

loc_1204:				; CODE XREF: _ecdh_cms_set_peerkey+65j
		mov	esi, [esp+20h+arg_8]
		push	ebp
		push	esi
		call	_ASN1_STRING_length
		push	esi
		mov	ebp, eax
		call	_ASN1_STRING_data
		add	esp, 8
		mov	[esp+24h+var_4], eax
		test	eax, eax
		jz	short loc_1269
		test	ebp, ebp
		jz	short loc_1269
		push	ebp
		lea	eax, [esp+28h+var_4]
		push	eax
		lea	eax, [esp+2Ch+var_14]
		push	eax
		call	_o2i_ECPublicKey
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1269
		call	_EVP_PKEY_new
		mov	ebx, eax
		test	ebx, ebx
		jz	short loc_1269
		push	[esp+24h+var_14]
		push	ebx
		call	_EVP_PKEY_set1_EC_KEY
		push	ebx
		push	[esp+30h+arg_0]
		call	_EVP_PKEY_derive_set_peer
		add	esp, 10h
		mov	ecx, 1
		test	eax, eax
		cmovg	edi, ecx

loc_1269:				; CODE XREF: _ecdh_cms_set_peerkey+CCj
					; _ecdh_cms_set_peerkey+D0j ...
		pop	ebp

$err$22:				; CODE XREF: _ecdh_cms_set_peerkey+3Ej
					; _ecdh_cms_set_peerkey+7Ej ...
		mov	eax, [esp+20h+var_14]
		test	eax, eax
		jz	short loc_127B
		push	eax
		call	_EC_KEY_free
		add	esp, 4

loc_127B:				; CODE XREF: _ecdh_cms_set_peerkey+11Cj
		test	ebx, ebx
		jz	short loc_1288
		push	ebx
		call	_EVP_PKEY_free
		add	esp, 4

loc_1288:				; CODE XREF: _ecdh_cms_set_peerkey+9Cj
					; _ecdh_cms_set_peerkey+129j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 14h
		retn
_ecdh_cms_set_peerkey endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1294h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ecdh_cms_set_shared_info proc near	; CODE XREF: _ecdh_cms_decrypt+8Dp

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 10h
		call	__chkstk
		push	ebx
		push	esi
		mov	esi, [esp+18h+arg_4]
		lea	eax, [esp+18h+var_4]
		push	eax
		lea	eax, [esp+1Ch+var_C]
		xor	ebx, ebx
		push	eax
		push	esi
		mov	[esp+24h+var_10], ebx
		call	_CMS_RecipientInfo_kari_get0_alg
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_12C7
		pop	esi
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_12C7:				; CODE XREF: _ecdh_cms_set_shared_info+2Bj
		mov	eax, [esp+18h+var_C]
		push	ebp
		push	dword ptr [eax]
		call	_OBJ_obj2nid
		mov	ebp, [esp+20h+arg_0]
		push	eax
		push	ebp
		call	_ecdh_cms_set_kdf_param
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_130C
		push	2EDh
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	94h ; '”'
		push	0EFh ; 'ï'
		push	10h
		call	_ERR_put_error
		add	esp, 14h

loc_1303:				; CODE XREF: _ecdh_cms_set_shared_info+82j
		pop	ebp
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_130C:				; CODE XREF: _ecdh_cms_set_shared_info+4Fj
		mov	ecx, [esp+1Ch+var_C]
		mov	eax, [ecx+4]
		cmp	dword ptr [eax], 10h
		jnz	short loc_1303
		mov	eax, [eax+4]
		push	edi
		mov	eax, [eax+8]
		mov	[esp+20h+var_8], eax
		mov	eax, [ecx+4]
		mov	eax, [eax+4]
		push	dword ptr [eax]
		lea	eax, [esp+24h+var_8]
		push	eax
		push	0
		call	_d2i_X509_ALGOR
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	loc_142D
		push	esi
		call	_CMS_RecipientInfo_kari_get0_ctx
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	$err$28
		push	dword ptr [edi]
		call	_OBJ_obj2nid
		push	eax
		call	_OBJ_nid2sn
		push	eax
		call	_EVP_get_cipherbyname
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jz	loc_1422
		push	ebx
		call	_EVP_CIPHER_flags
		and	eax, 0F0007h
		add	esp, 4
		cmp	eax, 10002h
		jnz	loc_1422
		push	0
		push	0
		push	0
		push	ebx
		push	esi
		call	_EVP_EncryptInit_ex
		add	esp, 14h
		test	eax, eax
		jz	short loc_1422
		push	dword ptr [edi+4]
		push	esi
		call	_EVP_CIPHER_asn1_to_param
		add	esp, 8
		test	eax, eax
		jle	short loc_1422
		push	esi
		call	_EVP_CIPHER_CTX_key_length
		push	0
		mov	esi, eax
		push	esi
		push	1007h
		push	400h
		push	198h
		push	ebp
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 1Ch
		test	eax, eax
		jle	short loc_1422
		push	esi
		push	[esp+24h+var_4]
		lea	eax, [esp+28h+var_10]
		push	edi
		push	eax
		call	_CMS_SharedInfo_encode
		add	esp, 10h
		test	eax, eax
		jz	short loc_1422
		push	[esp+20h+var_10]
		push	eax
		push	1009h
		push	400h
		push	198h
		push	ebp
		call	_EVP_PKEY_CTX_ctrl
		add	esp, 18h
		test	eax, eax
		jle	short loc_1422
		mov	[esp+20h+var_10], 0
		mov	ebx, 1
		jmp	short $err$28
; ---------------------------------------------------------------------------

loc_1422:				; CODE XREF: _ecdh_cms_set_shared_info+DDj
					; _ecdh_cms_set_shared_info+F6j ...
		xor	ebx, ebx

$err$28:				; CODE XREF: _ecdh_cms_set_shared_info+BDj
					; _ecdh_cms_set_shared_info+18Cj
		push	edi
		call	_X509_ALGOR_free
		add	esp, 4

loc_142D:				; CODE XREF: _ecdh_cms_set_shared_info+AAj
		mov	ecx, [esp+20h+var_10]
		pop	edi
		test	ecx, ecx
		jz	short loc_143F
		push	ecx
		call	_CRYPTO_free
		add	esp, 4

loc_143F:				; CODE XREF: _ecdh_cms_set_shared_info+1A0j
		pop	ebp
		pop	esi
		mov	eax, ebx
		pop	ebx
		add	esp, 10h
		retn
_ecdh_cms_set_shared_info endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1448h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_eckey_param2type proc near		; CODE XREF: _eckey_pub_encode+28p
					; _eckey_priv_encode+1Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, [esp+8+arg_8]
		test	edi, edi
		jz	loc_14FD
		push	edi
		call	_EC_KEY_get0_group
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	loc_14FD
		push	esi
		call	_EC_GROUP_get_asn1_flag
		add	esp, 4
		test	eax, eax
		jz	short loc_14A4
		push	esi
		call	_EC_GROUP_get_curve_name
		add	esp, 4
		test	eax, eax
		jz	short loc_14A4
		push	eax
		call	_OBJ_nid2obj
		mov	ecx, [esp+0Ch+arg_4]
		add	esp, 4
		mov	[ecx], eax
		mov	eax, [esp+8+arg_0]
		pop	edi
		pop	esi
		mov	dword ptr [eax], 6
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_14A4:				; CODE XREF: _eckey_param2type+2Cj
					; _eckey_param2type+39j
		call	_ASN1_STRING_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_1515
		lea	eax, [esi+8]
		push	eax
		push	edi
		call	_i2d_ECParameters
		add	esp, 8
		mov	[esi], eax
		test	eax, eax
		jg	short loc_14E5
		push	esi
		call	_ASN1_STRING_free
		push	60h ; '`'
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	10h
		push	0DFh ; 'ß'
		push	10h
		call	_ERR_put_error
		add	esp, 18h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_14E5:				; CODE XREF: _eckey_param2type+78j
		mov	eax, [esp+8+arg_4]
		pop	edi
		mov	[eax], esi
		mov	eax, [esp+4+arg_0]
		pop	esi
		mov	dword ptr [eax], 10h
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_14FD:				; CODE XREF: _eckey_param2type+8j
					; _eckey_param2type+1Bj
		push	4Eh ; 'N'
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	7Ch ; '|'
		push	0DFh ; 'ß'
		push	10h
		call	_ERR_put_error
		add	esp, 14h

loc_1515:				; CODE XREF: _eckey_param2type+65j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
_eckey_param2type endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 151Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_eckey_type2param proc near		; CODE XREF: _eckey_pub_decode+58p
					; _eckey_priv_decode+5Ep ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		cmp	eax, 10h
		jnz	short loc_1550
		mov	ecx, [esp+8+arg_4]
		mov	eax, [ecx+8]
		push	dword ptr [ecx]
		mov	[esp+0Ch+arg_0], eax
		lea	eax, [esp+0Ch+arg_0]
		push	eax
		push	0
		call	_d2i_ECParameters
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_15B7
		push	96h ; '–'
		jmp	short loc_15CF
; ---------------------------------------------------------------------------

loc_1550:				; CODE XREF: _eckey_type2param+9j
		cmp	eax, 6
		jnz	short loc_15CA
		call	_EC_KEY_new
		mov	esi, eax
		test	esi, esi
		jnz	short loc_1580
		push	0A1h ; '¡'
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	41h ; 'A'
		push	0DCh ; 'Ü'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1580:				; CODE XREF: _eckey_type2param+42j
		push	[esp+8+arg_4]
		call	_OBJ_obj2nid
		push	eax
		call	_EC_GROUP_new_by_curve_name
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short $ecerr$15
		push	1
		push	edi
		call	_EC_GROUP_set_asn1_flag
		push	edi
		push	esi
		call	_EC_KEY_set_group
		add	esp, 10h
		test	eax, eax
		jz	short $ecerr$15
		push	edi
		call	_EC_GROUP_free
		add	esp, 4

loc_15B7:				; CODE XREF: _eckey_type2param+2Bj
		pop	edi
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

$ecerr$15:				; CODE XREF: _eckey_type2param+7Aj
					; _eckey_type2param+90j
		push	esi
		call	_EC_KEY_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_15CA:				; CODE XREF: _eckey_type2param+37j
		push	0ACh ; '¬'

loc_15CF:				; CODE XREF: _eckey_type2param+32j
		push	offset ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ ; ".\\crypto\\ec\\ec_ameth.c"
		push	8Eh ; 'Ž'
		push	0DCh ; 'Ü'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
_eckey_type2param endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 15F0h
; COMDAT (pick any)
		public ??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@
; `string'
??_C@_0BH@OJGDIJIA@?4?2crypto?2ec?2ec_ameth?4c?$AA@ db '.\crypto\ec\ec_ameth.c',0
					; DATA XREF: _eckey_pub_encode+36o
					; _eckey_pub_encode+6Ao ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1608h
; COMDAT (pick any)
		public ??_C@_0M@CJKOCIEC@Private?9Key?$AA@
; `string'
??_C@_0M@CJKOCIEC@Private?9Key?$AA@ db 'Private-Key',0 ; DATA XREF: _do_EC_KEY_print+131o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1614h
; COMDAT (pick any)
		public ??_C@_0L@FMJMEKAC@Public?9Key?$AA@
; `string'
??_C@_0L@FMJMEKAC@Public?9Key?$AA@ db 'Public-Key',0 ; DATA XREF: _do_EC_KEY_print+13Eo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1620h
; COMDAT (pick any)
		public ??_C@_0BB@DMDKLH@ECDSA?9Parameters?$AA@
; `string'
??_C@_0BB@DMDKLH@ECDSA?9Parameters?$AA@	db 'ECDSA-Parameters',0
					; DATA XREF: _do_EC_KEY_print+143o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1634h
; COMDAT (pick any)
		public ??_C@_0O@OPPPNLCD@?$CFs?3?5?$CI?$CFd?5bit?$CJ?6?$AA@
; `string'
??_C@_0O@OPPPNLCD@?$CFs?3?5?$CI?$CFd?5bit?$CJ?6?$AA@ db	'%s: (%d bit)',0Ah,0
					; DATA XREF: _do_EC_KEY_print+1A0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1644h
; COMDAT (pick any)
		public ??_C@_05PFPGJCCA@priv?3?$AA@
; `string'
??_C@_05PFPGJCCA@priv?3?$AA@ db	'priv:',0 ; DATA XREF: _do_EC_KEY_print+1C0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 164Ch
; COMDAT (pick any)
		public ??_C@_05FJHKEHEO@pub?3?5?$AA@
; `string'
??_C@_05FJHKEHEO@pub?3?5?$AA@ db 'pub: ',0 ; DATA XREF: _do_EC_KEY_print+1DCo
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _eckey_pub_encode+70p
					; _eckey_priv_encode+ACp ...
		extrn _CRYPTO_free:near	; CODE XREF: _eckey_pub_encode+E1p
					; _eckey_priv_encode+104p ...
		extrn _BIO_indent:near	; CODE XREF: _do_EC_KEY_print+15Dp
		extrn _BIO_printf:near	; CODE XREF: _do_EC_KEY_print+1A6p
		extrn _ERR_put_error:near ; CODE XREF: _eckey_pub_encode+44p
					; _eckey_pub_decode+7Ap ...
		extrn _ERR_clear_error:near ; CODE XREF: _ec_bits:loc_57Cp
		extrn _BN_CTX_new:near	; CODE XREF: _do_EC_KEY_print+44p
		extrn _BN_CTX_free:near	; CODE XREF: _do_EC_KEY_print+252p
		extrn _BN_num_bits:near	; CODE XREF: _ec_bits+33p
					; _do_EC_KEY_print+A2p	...
		extrn _BN_new:near	; CODE XREF: _ec_bits+1p
					; _do_EC_KEY_print+16Dp
		extrn _BN_free:near	; CODE XREF: _ec_bits+3Bp
					; _do_EC_KEY_print+230p ...
		extrn _ASN1_TYPE_new:near ; CODE XREF: _ecdh_cms_encrypt+27Bp
		extrn _ASN1_TYPE_free:near ; CODE XREF:	_ecdh_cms_encrypt+2AFp
		extrn _ASN1_TYPE_get:near ; CODE XREF: _ecdh_cms_encrypt+2A0p
		extrn _ASN1_OBJECT_free:near ; CODE XREF: _eckey_pub_encode+CDp
		extrn _ASN1_STRING_new:near ; CODE XREF: _ecdh_cms_encrypt+341p
					; _eckey_param2type:loc_14A4p
		extrn _ASN1_STRING_free:near ; CODE XREF: _eckey_pub_encode:loc_D4p
					; _eckey_param2type+7Bp
		extrn _ASN1_STRING_set0:near ; CODE XREF: _ecdh_cms_encrypt+D9p
					; _ecdh_cms_encrypt+352p
		extrn _ASN1_STRING_length:near ; CODE XREF: _ecdh_cms_set_peerkey+B6p
		extrn _ASN1_STRING_data:near ; CODE XREF: _ecdh_cms_set_peerkey+BEp
		extrn _ASN1_bn_print:near ; CODE XREF: _do_EC_KEY_print+1C6p
					; _do_EC_KEY_print+1E2p
		extrn _OBJ_nid2obj:near	; CODE XREF: _eckey_pub_encode+A0p
					; _eckey_priv_encode+147p ...
		extrn _OBJ_nid2sn:near	; CODE XREF: _ecdh_cms_set_kdf_param+90p
					; _ecdh_cms_set_shared_info+CBp
		extrn _OBJ_obj2nid:near	; CODE XREF: _ec_pkey_ctrl+52p
					; _ec_pkey_ctrl+DFp ...
		extrn _OBJ_find_sigid_algs:near	; CODE XREF: _ecdh_cms_set_kdf_param+21p
		extrn _OBJ_find_sigid_by_algs:near ; CODE XREF:	_ec_pkey_ctrl+70p
					; _ec_pkey_ctrl+FDp ...
		extrn _EVP_MD_type:near	; CODE XREF: _ecdh_cms_encrypt+21Dp
		extrn _EVP_CIPHER_flags:near ; CODE XREF: _ecdh_cms_set_shared_info+E4p
		extrn _EVP_CIPHER_CTX_cipher:near ; CODE XREF: _ecdh_cms_encrypt+244p
		extrn _EVP_CIPHER_CTX_key_length:near ;	CODE XREF: _ecdh_cms_encrypt+254p
					; _ecdh_cms_set_shared_info+121p
		extrn _EVP_EncryptInit_ex:near ; CODE XREF: _ecdh_cms_set_shared_info+104p
		extrn _EVP_sha1:near	; CODE XREF: _ecdh_cms_encrypt+1D1p
		extrn _EVP_get_cipherbyname:near ; CODE	XREF: _ecdh_cms_set_shared_info+D1p
		extrn _EVP_get_digestbyname:near ; CODE	XREF: _ecdh_cms_set_kdf_param+96p
		extrn _EVP_PKEY_id:near	; CODE XREF: _ec_pkey_ctrl+64p
					; _ec_pkey_ctrl+F1p
		extrn _EVP_PKEY_assign:near ; CODE XREF: _eckey_pub_decode+E2p
					; _eckey_priv_decode+1AAp ...
		extrn _EVP_PKEY_set1_EC_KEY:near ; CODE	XREF: _ecdh_cms_set_peerkey+F9p
		extrn _EVP_PKEY_new:near ; CODE	XREF: _ecdh_cms_set_peerkey+E9p
		extrn _EVP_PKEY_free:near ; CODE XREF: _ecdh_cms_set_peerkey+12Cp
		extrn _EVP_CIPHER_type:near ; CODE XREF: _ecdh_cms_encrypt+24Ap
		extrn _EVP_CIPHER_param_to_asn1:near ; CODE XREF: _ecdh_cms_encrypt+28Dp
		extrn _EVP_CIPHER_asn1_to_param:near
					; CODE XREF: _ecdh_cms_set_shared_info+114p
		extrn _EVP_PKEY_CTX_ctrl:near ;	CODE XREF: _ecdh_cms_encrypt+127p
					; _ecdh_cms_encrypt+152p ...
		extrn _EVP_PKEY_CTX_get0_pkey:near ; CODE XREF:	_ecdh_cms_encrypt+33p
					; _ecdh_cms_set_peerkey+74p
		extrn _EVP_PKEY_CTX_get0_peerkey:near ;	CODE XREF: _ecdh_cms_decrypt+20p
		extrn _EVP_PKEY_derive_set_peer:near ; CODE XREF: _ecdh_cms_set_peerkey+103p
		extrn _EC_GROUP_free:near ; CODE XREF: _ec_copy_parameters+35p
					; _eckey_type2param+93p
		extrn _EC_GROUP_dup:near ; CODE	XREF: _ec_copy_parameters+Ep
		extrn _EC_GROUP_get0_generator:near ; CODE XREF: _eckey_priv_decode+117p
		extrn _EC_GROUP_get_order:near ; CODE XREF: _ec_bits+25p
					; _do_EC_KEY_print+185p
		extrn _EC_GROUP_get_curve_name:near ; CODE XREF: _eckey_param2type+2Fp
		extrn _EC_GROUP_set_asn1_flag:near ; CODE XREF:	_eckey_type2param+7Fp
		extrn _EC_GROUP_get_asn1_flag:near ; CODE XREF:	_eckey_param2type+22p
		extrn _EC_GROUP_cmp:near ; CODE	XREF: _ec_cmp_parameters+1Fp
		extrn _EC_GROUP_new_by_curve_name:near ; CODE XREF: _eckey_type2param+6Ep
		extrn _EC_POINT_new:near ; CODE	XREF: _eckey_priv_decode+B9p
		extrn _EC_POINT_free:near ; CODE XREF: _eckey_priv_decode+12Bp
					; _eckey_priv_decode+16Cp ...
		extrn _EC_POINT_copy:near ; CODE XREF: _eckey_priv_decode+11Ep
		extrn _EC_POINT_point2bn:near ;	CODE XREF: _do_EC_KEY_print+8Bp
		extrn _EC_POINT_cmp:near ; CODE	XREF: _eckey_pub_cmp+2Cp
		extrn _EC_POINT_mul:near ; CODE	XREF: _eckey_priv_decode+15Fp
		extrn _ECPKParameters_print:near ; CODE	XREF: _do_EC_KEY_print+1F7p
		extrn _EC_KEY_new:near	; CODE XREF: _ecdh_cms_set_peerkey+91p
					; _eckey_type2param+39p
		extrn _EC_KEY_free:near	; CODE XREF: _eckey_pub_decode+C8p
					; _eckey_priv_decode+106p ...
		extrn _EC_KEY_get0_group:near ;	CODE XREF: _eckey_pub_cmp+Ap
					; _eckey_priv_decode+B1p ...
		extrn _EC_KEY_set_group:near ; CODE XREF: _ec_copy_parameters+28p
					; _ecdh_cms_set_peerkey+A4p ...
		extrn _EC_KEY_get0_private_key:near ; CODE XREF: _eckey_priv_decode+151p
					; _do_EC_KEY_print+C4p
		extrn _EC_KEY_get0_public_key:near ; CODE XREF:	_eckey_pub_cmp+18p
					; _eckey_pub_cmp+22p ...
		extrn _EC_KEY_set_public_key:near ; CODE XREF: _eckey_priv_decode+17Cp
		extrn _EC_KEY_get_enc_flags:near ; CODE	XREF: _eckey_priv_encode+51p
		extrn _EC_KEY_set_enc_flags:near ; CODE	XREF: _eckey_priv_encode+5Fp
					; _eckey_priv_encode+77p ...
		extrn _EC_KEY_get_conv_form:near ; CODE	XREF: _do_EC_KEY_print+7Ap
		extrn _d2i_ECPrivateKey:near ; CODE XREF: _eckey_priv_decode+7Cp
					; _old_ec_priv_decode+Ap
		extrn _i2d_ECPrivateKey:near ; CODE XREF: _eckey_priv_encode+67p
					; _eckey_priv_encode+F0p ...
		extrn _d2i_ECParameters:near ; CODE XREF: _eckey_param_decode+Ap
					; _eckey_type2param+1Fp
		extrn _i2d_ECParameters:near ; CODE XREF: _eckey_param_encode+Bp
					; _eckey_param2type+6Cp
		extrn _o2i_ECPublicKey:near ; CODE XREF: _eckey_pub_decode+96p
					; _ecdh_cms_set_peerkey+DDp
		extrn _i2o_ECPublicKey:near ; CODE XREF: _eckey_pub_encode+58p
					; _eckey_pub_encode+88p ...
		extrn _ECDSA_size:near	; CODE XREF: _int_ec_size+7p
		extrn _PKCS7_SIGNER_INFO_get0_algs:near	; CODE XREF: _ec_pkey_ctrl+3Bp
		extrn _X509_ALGOR_set0:near ; CODE XREF: _ec_pkey_ctrl+91p
					; _ec_pkey_ctrl+11Ep ...
		extrn _X509_ALGOR_get0:near ; CODE XREF: _eckey_pub_decode+4Bp
					; _eckey_priv_decode+51p ...
		extrn _X509_ALGOR_new:near ; CODE XREF:	_ecdh_cms_encrypt+25Ep
		extrn _X509_ALGOR_free:near ; CODE XREF: _ecdh_cms_encrypt+39Cp
					; _ecdh_cms_set_shared_info+191p
		extrn _d2i_X509_ALGOR:near ; CODE XREF:	_ecdh_cms_set_shared_info+9Ep
		extrn _i2d_X509_ALGOR:near ; CODE XREF:	_ecdh_cms_encrypt+32Bp
		extrn _PKCS8_pkey_set0:near ; CODE XREF: _eckey_priv_encode+154p
		extrn _PKCS8_pkey_get0:near ; CODE XREF: _eckey_priv_decode+2Fp
		extrn _X509_PUBKEY_set0_param:near ; CODE XREF:	_eckey_pub_encode+ADp
		extrn _X509_PUBKEY_get0_param:near ; CODE XREF:	_eckey_pub_decode+2Fp
		extrn _CMS_RecipientInfo_get0_pkey_ctx:near
					; CODE XREF: _ecdh_cms_decrypt+11p
					; _ecdh_cms_encrypt+1Cp
		extrn _CMS_SignerInfo_get0_algs:near ; CODE XREF: _ec_pkey_ctrl+C8p
		extrn _CMS_RecipientInfo_kari_get0_alg:near
					; CODE XREF: _ecdh_cms_encrypt+208p
					; _ecdh_cms_set_shared_info+21p
		extrn _CMS_RecipientInfo_kari_get0_orig_id:near
					; CODE XREF: _ecdh_cms_decrypt+3Ap
					; _ecdh_cms_encrypt+4Bp
		extrn _CMS_RecipientInfo_kari_get0_ctx:near
					; CODE XREF: _ecdh_cms_encrypt+23Cp
					; _ecdh_cms_set_shared_info+B1p
		extrn _CMS_SharedInfo_encode:near ; CODE XREF: _ecdh_cms_encrypt+2ECp
					; _ecdh_cms_set_shared_info+152p
		extrn __chkstk:near	; CODE XREF: _eckey_pub_encode+5p
					; _eckey_pub_decode+5p	...


		end
