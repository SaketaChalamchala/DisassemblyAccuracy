;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	661BAE9A35C9B37DECC81BE4CFA8F94B
; Input	CRC32 :	AAFB0E6E

; File Name   :	C:\compspace\Diff\openssl\obj\ecp_nist.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
; `EC_GFp_nist_method'::`2'::ret
?ret@?1??EC_GFp_nist_method@@9@9 dd 1, 196h ; DATA XREF: _EC_GFp_nist_methodo
		dd offset _ec_GFp_simple_group_init
		dd offset _ec_GFp_simple_group_finish
		dd offset _ec_GFp_simple_group_clear_finish
		dd offset _ec_GFp_nist_group_copy
		dd offset _ec_GFp_nist_group_set_curve
		dd offset _ec_GFp_simple_group_get_curve
		dd offset _ec_GFp_simple_group_get_degree
		dd offset _ec_GFp_simple_group_check_discriminant
		dd offset _ec_GFp_simple_point_init
		dd offset _ec_GFp_simple_point_finish
		dd offset _ec_GFp_simple_point_clear_finish
		dd offset _ec_GFp_simple_point_copy
		dd offset _ec_GFp_simple_point_set_to_infinity
		dd offset _ec_GFp_simple_set_Jprojective_coordinates_GFp
		dd offset _ec_GFp_simple_get_Jprojective_coordinates_GFp
		dd offset _ec_GFp_simple_point_set_affine_coordinates
		dd offset _ec_GFp_simple_point_get_affine_coordinates
		dd 3 dup(0)
		dd offset _ec_GFp_simple_add
		dd offset _ec_GFp_simple_dbl
		dd offset _ec_GFp_simple_invert
		dd offset _ec_GFp_simple_is_at_infinity
		dd offset _ec_GFp_simple_is_on_curve
		dd offset _ec_GFp_simple_cmp
		dd offset _ec_GFp_simple_make_affine
		dd offset _ec_GFp_simple_points_make_affine
		dd 3 dup(0)
		dd offset _ec_GFp_nist_field_mul
		dd offset _ec_GFp_nist_field_sqr
		dd 4 dup(0)
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ec_GFp_nist_group_copy
_ec_GFp_nist_group_copy	proc near	; DATA XREF: .rdata:00000014o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		mov	eax, [edx+0A8h]
		mov	[ecx+0A8h], eax
		mov	[esp+arg_4], edx
		mov	[esp+arg_0], ecx
		jmp	_ec_GFp_simple_group_copy
_ec_GFp_nist_group_copy	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ec_GFp_nist_group_set_curve
_ec_GFp_nist_group_set_curve proc near	; DATA XREF: .rdata:00000018o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	esi
		mov	esi, [esp+8+arg_10]
		xor	ebp, ebp
		push	edi
		xor	edi, edi
		test	esi, esi
		jnz	short loc_E0
		call	_BN_CTX_new
		mov	edi, eax
		mov	esi, edi
		test	edi, edi
		jnz	short loc_E0
		pop	edi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_E0:					; CODE XREF: _ec_GFp_nist_group_set_curve+Dj
					; _ec_GFp_nist_group_set_curve+1Aj
		push	esi
		call	_BN_CTX_start
		push	esi
		call	_BN_CTX_get
		add	esp, 8
		test	eax, eax
		jz	$err$20
		push	ebx
		mov	ebx, [esp+10h+arg_4]
		push	ebx
		call	_BN_get0_nist_prime_192
		push	eax
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_122
		mov	eax, [esp+10h+arg_0]
		mov	dword ptr [eax+0A8h], offset _BN_nist_mod_192
		jmp	loc_1AC
; ---------------------------------------------------------------------------

loc_122:				; CODE XREF: _ec_GFp_nist_group_set_curve+4Dj
		push	ebx
		call	_BN_get0_nist_prime_224
		push	eax
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_145
		mov	eax, [esp+10h+arg_0]
		mov	dword ptr [eax+0A8h], offset _BN_nist_mod_224
		jmp	short loc_1AC
; ---------------------------------------------------------------------------

loc_145:				; CODE XREF: _ec_GFp_nist_group_set_curve+73j
		push	ebx
		call	_BN_get0_nist_prime_256
		push	eax
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_168
		mov	eax, [esp+10h+arg_0]
		mov	dword ptr [eax+0A8h], offset _BN_nist_mod_256
		jmp	short loc_1AC
; ---------------------------------------------------------------------------

loc_168:				; CODE XREF: _ec_GFp_nist_group_set_curve+96j
		push	ebx
		call	_BN_get0_nist_prime_384
		push	eax
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_18B
		mov	eax, [esp+10h+arg_0]
		mov	dword ptr [eax+0A8h], offset _BN_nist_mod_384
		jmp	short loc_1AC
; ---------------------------------------------------------------------------

loc_18B:				; CODE XREF: _ec_GFp_nist_group_set_curve+B9j
		push	ebx
		call	_BN_get0_nist_prime_521
		push	eax
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_1C0
		mov	eax, [esp+10h+arg_0]
		mov	dword ptr [eax+0A8h], offset _BN_nist_mod_521

loc_1AC:				; CODE XREF: _ec_GFp_nist_group_set_curve+5Dj
					; _ec_GFp_nist_group_set_curve+83j ...
		push	esi
		push	[esp+14h+arg_C]
		push	[esp+18h+arg_8]
		push	ebx
		push	eax
		call	_ec_GFp_simple_group_set_curve
		mov	ebp, eax
		jmp	short loc_1DB
; ---------------------------------------------------------------------------

loc_1C0:				; CODE XREF: _ec_GFp_nist_group_set_curve+DCj
		push	9Dh ; 'ù'
		push	offset ??_C@_0BH@MKKJGLGM@?4?2crypto?2ec?2ecp_nist?4c?$AA@ ; ".\\crypto\\ec\\ecp_nist.c"
		push	87h ; 'á'
		push	0CAh ; ' '
		push	10h
		call	_ERR_put_error

loc_1DB:				; CODE XREF: _ec_GFp_nist_group_set_curve+FEj
		add	esp, 14h
		pop	ebx

$err$20:				; CODE XREF: _ec_GFp_nist_group_set_curve+31j
		push	esi
		call	_BN_CTX_end
		add	esp, 4
		test	edi, edi
		jz	short loc_1F5
		push	edi
		call	_BN_CTX_free
		add	esp, 4

loc_1F5:				; CODE XREF: _ec_GFp_nist_group_set_curve+12Aj
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		retn
_ec_GFp_nist_group_set_curve endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ec_GFp_nist_field_mul
_ec_GFp_nist_field_mul proc near	; DATA XREF: .rdata:00000084o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	ebp
		push	esi
		xor	ebx, ebx
		xor	esi, esi
		cmp	[esp+0Ch+arg_0], ebx
		jz	short loc_282
		mov	ebp, [esp+0Ch+arg_4]
		test	ebp, ebp
		jz	short loc_282
		mov	eax, [esp+0Ch+arg_8]
		test	eax, eax
		jz	short loc_282
		mov	ecx, [esp+0Ch+arg_C]
		test	ecx, ecx
		jz	short loc_282
		push	edi
		mov	edi, [esp+10h+arg_10]
		test	edi, edi
		jnz	short loc_23F
		call	_BN_CTX_new
		mov	edi, eax
		mov	ebx, edi
		test	edi, edi
		jz	short loc_27B
		mov	eax, [esp+10h+arg_8]
		mov	ecx, [esp+10h+arg_C]

loc_23F:				; CODE XREF: _ec_GFp_nist_field_mul+2Cj
		push	edi
		push	ecx
		push	eax
		push	ebp
		call	_BN_mul
		add	esp, 10h
		test	eax, eax
		jz	short $err$15
		mov	ecx, [esp+10h+arg_0]
		push	edi
		lea	eax, [ecx+48h]
		push	eax
		mov	eax, [ecx+0A8h]
		push	ebp
		push	ebp
		call	eax
		add	esp, 10h
		test	eax, eax
		jz	short $err$15
		mov	esi, 1

$err$15:				; CODE XREF: _ec_GFp_nist_field_mul+51j
					; _ec_GFp_nist_field_mul+6Bj
		test	ebx, ebx
		jz	short loc_27B
		push	ebx
		call	_BN_CTX_free
		add	esp, 4

loc_27B:				; CODE XREF: _ec_GFp_nist_field_mul+39j
					; _ec_GFp_nist_field_mul+74j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_282:				; CODE XREF: _ec_GFp_nist_field_mul+Bj
					; _ec_GFp_nist_field_mul+13j ...
		push	0B1h ; '±'
		push	offset ??_C@_0BH@MKKJGLGM@?4?2crypto?2ec?2ecp_nist?4c?$AA@ ; ".\\crypto\\ec\\ecp_nist.c"
		push	43h ; 'C'
		push	0C8h ; '»'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_ec_GFp_nist_field_mul endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ec_GFp_nist_field_sqr
_ec_GFp_nist_field_sqr proc near	; DATA XREF: .rdata:00000088o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	ebp
		push	esi
		xor	ebx, ebx
		xor	esi, esi
		cmp	[esp+0Ch+arg_0], ebx
		jz	short loc_31D
		mov	ebp, [esp+0Ch+arg_4]
		test	ebp, ebp
		jz	short loc_31D
		mov	eax, [esp+0Ch+arg_8]
		test	eax, eax
		jz	short loc_31D
		push	edi
		mov	edi, [esp+10h+arg_C]
		test	edi, edi
		jnz	short loc_2DB
		call	_BN_CTX_new
		mov	edi, eax
		mov	ebx, edi
		test	edi, edi
		jz	short loc_316
		mov	eax, [esp+10h+arg_8]

loc_2DB:				; CODE XREF: _ec_GFp_nist_field_sqr+24j
		push	edi
		push	eax
		push	ebp
		call	_BN_sqr
		add	esp, 0Ch
		test	eax, eax
		jz	short $err$15_0
		mov	ecx, [esp+10h+arg_0]
		push	edi
		lea	eax, [ecx+48h]
		push	eax
		mov	eax, [ecx+0A8h]
		push	ebp
		push	ebp
		call	eax
		add	esp, 10h
		test	eax, eax
		jz	short $err$15_0
		mov	esi, 1

$err$15_0:				; CODE XREF: _ec_GFp_nist_field_sqr+44j
					; _ec_GFp_nist_field_sqr+5Ej
		test	ebx, ebx
		jz	short loc_316
		push	ebx
		call	_BN_CTX_free
		add	esp, 4

loc_316:				; CODE XREF: _ec_GFp_nist_field_sqr+31j
					; _ec_GFp_nist_field_sqr+67j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_31D:				; CODE XREF: _ec_GFp_nist_field_sqr+Bj
					; _ec_GFp_nist_field_sqr+13j ...
		push	0CBh ; 'À'
		push	offset ??_C@_0BH@MKKJGLGM@?4?2crypto?2ec?2ecp_nist?4c?$AA@ ; ".\\crypto\\ec\\ecp_nist.c"
		push	86h ; 'Ü'
		push	0C9h ; '…'
		push	10h
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_ec_GFp_nist_field_sqr endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 344h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EC_GFp_nist_method
_EC_GFp_nist_method proc near
		mov	eax, offset ?ret@?1??EC_GFp_nist_method@@9@9 ; `EC_GFp_nist_method'::`2'::ret
		retn
_EC_GFp_nist_method endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 34Ch
; COMDAT (pick any)
		public ??_C@_0BH@MKKJGLGM@?4?2crypto?2ec?2ecp_nist?4c?$AA@
; `string'
??_C@_0BH@MKKJGLGM@?4?2crypto?2ec?2ecp_nist?4c?$AA@ db '.\crypto\ec\ecp_nist.c',0
					; DATA XREF: _ec_GFp_nist_group_set_curve+105o
					; _ec_GFp_nist_field_mul+8Bo ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ec_GFp_simple_group_init:near ; DATA XREF: .rdata:00000008o
		extrn _ec_GFp_simple_group_finish:near ; DATA XREF: .rdata:0000000Co
		extrn _ec_GFp_simple_group_clear_finish:near ; DATA XREF: .rdata:00000010o
		extrn _ec_GFp_simple_group_get_curve:near ; DATA XREF: .rdata:0000001Co
		extrn _ec_GFp_simple_group_get_degree:near ; DATA XREF:	.rdata:00000020o
		extrn _ec_GFp_simple_group_check_discriminant:near
					; DATA XREF: .rdata:00000024o
		extrn _ec_GFp_simple_point_init:near ; DATA XREF: .rdata:00000028o
		extrn _ec_GFp_simple_point_finish:near ; DATA XREF: .rdata:0000002Co
		extrn _ec_GFp_simple_point_clear_finish:near ; DATA XREF: .rdata:00000030o
		extrn _ec_GFp_simple_point_copy:near ; DATA XREF: .rdata:00000034o
		extrn _ec_GFp_simple_point_set_to_infinity:near
					; DATA XREF: .rdata:00000038o
		extrn _ec_GFp_simple_set_Jprojective_coordinates_GFp:near
					; DATA XREF: .rdata:0000003Co
		extrn _ec_GFp_simple_get_Jprojective_coordinates_GFp:near
					; DATA XREF: .rdata:00000040o
		extrn _ec_GFp_simple_point_set_affine_coordinates:near
					; DATA XREF: .rdata:00000044o
		extrn _ec_GFp_simple_point_get_affine_coordinates:near
					; DATA XREF: .rdata:00000048o
		extrn _ec_GFp_simple_add:near ;	DATA XREF: .rdata:00000058o
		extrn _ec_GFp_simple_dbl:near ;	DATA XREF: .rdata:0000005Co
		extrn _ec_GFp_simple_invert:near ; DATA	XREF: .rdata:00000060o
		extrn _ec_GFp_simple_is_at_infinity:near ; DATA	XREF: .rdata:00000064o
		extrn _ec_GFp_simple_is_on_curve:near ;	DATA XREF: .rdata:00000068o
		extrn _ec_GFp_simple_cmp:near ;	DATA XREF: .rdata:0000006Co
		extrn _ec_GFp_simple_make_affine:near ;	DATA XREF: .rdata:00000070o
		extrn _ec_GFp_simple_points_make_affine:near ; DATA XREF: .rdata:00000074o
		extrn _ERR_put_error:near ; CODE XREF: _ec_GFp_nist_group_set_curve+116p
					; _ec_GFp_nist_field_mul+99p ...
		extrn _BN_CTX_new:near	; CODE XREF: _ec_GFp_nist_group_set_curve+Fp
					; _ec_GFp_nist_field_mul+2Ep ...
		extrn _BN_CTX_free:near	; CODE XREF: _ec_GFp_nist_group_set_curve+12Dp
					; _ec_GFp_nist_field_mul+77p ...
		extrn _BN_CTX_start:near ; CODE	XREF: _ec_GFp_nist_group_set_curve+21p
		extrn _BN_CTX_get:near	; CODE XREF: _ec_GFp_nist_group_set_curve+27p
		extrn _BN_CTX_end:near	; CODE XREF: _ec_GFp_nist_group_set_curve+120p
		extrn _BN_mul:near	; CODE XREF: _ec_GFp_nist_field_mul+47p
		extrn _BN_sqr:near	; CODE XREF: _ec_GFp_nist_field_sqr+3Ap
		extrn _BN_ucmp:near	; CODE XREF: _ec_GFp_nist_group_set_curve+43p
					; _ec_GFp_nist_group_set_curve+69p ...
		extrn _BN_nist_mod_192:near ; DATA XREF: _ec_GFp_nist_group_set_curve+53o
		extrn _BN_nist_mod_224:near ; DATA XREF: _ec_GFp_nist_group_set_curve+79o
		extrn _BN_nist_mod_256:near ; DATA XREF: _ec_GFp_nist_group_set_curve+9Co
		extrn _BN_nist_mod_384:near ; DATA XREF: _ec_GFp_nist_group_set_curve+BFo
		extrn _BN_nist_mod_521:near ; DATA XREF: _ec_GFp_nist_group_set_curve+E2o
		extrn _BN_get0_nist_prime_192:near
					; CODE XREF: _ec_GFp_nist_group_set_curve+3Dp
		extrn _BN_get0_nist_prime_224:near
					; CODE XREF: _ec_GFp_nist_group_set_curve+63p
		extrn _BN_get0_nist_prime_256:near
					; CODE XREF: _ec_GFp_nist_group_set_curve+86p
		extrn _BN_get0_nist_prime_384:near
					; CODE XREF: _ec_GFp_nist_group_set_curve+A9p
		extrn _BN_get0_nist_prime_521:near
					; CODE XREF: _ec_GFp_nist_group_set_curve+CCp
		extrn _ec_GFp_simple_group_copy:near
					; CODE XREF: _ec_GFp_nist_group_copy+1Cj
		extrn _ec_GFp_simple_group_set_curve:near
					; CODE XREF: _ec_GFp_nist_group_set_curve+F7p


		end
