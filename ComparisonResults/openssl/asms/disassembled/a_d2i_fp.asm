;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	11D41A29F76851F09CDD5015A58C208F
; Input	CRC32 :	A25A2EE5

; File Name   :	C:\compspace\Diff\openssl\obj\a_d2i_fp.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_d2i_bio
_ASN1_d2i_bio	proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 8
		call	__chkstk
		push	esi
		push	edi
		lea	eax, [esp+10h+var_8]
		mov	[esp+10h+var_8], 0
		push	eax
		push	[esp+14h+arg_8]
		xor	edi, edi
		call	_asn1_d2i_read_bio
		mov	esi, [esp+18h+var_8]
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		js	short $err$7
		mov	eax, [esi+4]
		mov	[esp+10h+var_4], eax
		lea	eax, [esp+10h+var_4]
		push	ecx
		push	eax
		push	[esp+18h+arg_C]
		call	[esp+1Ch+arg_4]
		add	esp, 0Ch
		mov	edi, eax

$err$7:					; CODE XREF: _ASN1_d2i_bio+2Fj
		test	esi, esi
		jz	short loc_58
		push	esi
		call	_BUF_MEM_free
		add	esp, 4

loc_58:					; CODE XREF: _ASN1_d2i_bio+4Dj
		mov	eax, edi
		pop	edi
		pop	esi
		add	esp, 8
		retn
_ASN1_d2i_bio	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 60h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_d2i_fp
_ASN1_d2i_fp	proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 8
		call	__chkstk
		push	esi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_9B
		push	4Ch ; 'L'
		push	offset ??_C@_0BJ@GMLOABJG@?4?2crypto?2asn1?2a_d2i_fp?4c?$AA@ ; ".\\crypto\\asn1\\a_d2i_fp.c"
		push	7
		push	6Dh ; 'm'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_9B:					; CODE XREF: _ASN1_d2i_fp+1Dj
		push	ebx
		push	edi
		push	[esp+14h+arg_8]
		push	0
		push	6Ah ; 'j'
		push	esi
		call	_BIO_ctrl
		lea	eax, [esp+24h+var_8]
		mov	[esp+24h+var_8], 0
		push	eax
		push	esi
		xor	ebx, ebx
		call	_asn1_d2i_read_bio
		mov	edi, [esp+2Ch+var_8]
		add	esp, 18h
		test	eax, eax
		js	short $err$9
		mov	ecx, [edi+4]
		push	eax
		lea	eax, [esp+18h+var_4]
		mov	[esp+18h+var_4], ecx
		push	eax
		push	[esp+1Ch+arg_C]
		call	[esp+20h+arg_4]
		add	esp, 0Ch
		mov	ebx, eax

$err$9:					; CODE XREF: _ASN1_d2i_fp+69j
		test	edi, edi
		jz	short loc_F2
		push	edi
		call	_BUF_MEM_free
		add	esp, 4

loc_F2:					; CODE XREF: _ASN1_d2i_fp+87j
		push	esi
		call	_BIO_free
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	ebx
		pop	esi
		add	esp, 8
		retn
_ASN1_d2i_fp	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 104h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_item_d2i_bio
_ASN1_item_d2i_bio proc	near		; CODE XREF: _ASN1_item_d2i_fp+4Cp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 8
		call	__chkstk
		push	esi
		push	edi
		lea	eax, [esp+10h+var_8]
		mov	[esp+10h+var_8], 0
		push	eax
		push	[esp+14h+arg_4]
		xor	edi, edi
		call	_asn1_d2i_read_bio
		mov	esi, [esp+18h+var_8]
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		js	short $err$7_0
		push	[esp+10h+arg_0]
		mov	eax, [esi+4]
		mov	[esp+14h+var_4], eax
		lea	eax, [esp+14h+var_4]
		push	ecx
		push	eax
		push	[esp+1Ch+arg_8]
		call	_ASN1_item_d2i
		add	esp, 10h
		mov	edi, eax

$err$7_0:				; CODE XREF: _ASN1_item_d2i_bio+2Fj
		test	esi, esi
		jz	short loc_161
		push	esi
		call	_BUF_MEM_free
		add	esp, 4

loc_161:				; CODE XREF: _ASN1_item_d2i_bio+52j
		mov	eax, edi
		pop	edi
		pop	esi
		add	esp, 8
		retn
_ASN1_item_d2i_bio endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 16Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_item_d2i_fp
_ASN1_item_d2i_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_1A0
		push	85h ; '…'
		push	offset ??_C@_0BJ@GMLOABJG@?4?2crypto?2asn1?2a_d2i_fp?4c?$AA@ ; ".\\crypto\\asn1\\a_d2i_fp.c"
		push	7
		push	0CEh ; 'Î'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1A0:				; CODE XREF: _ASN1_item_d2i_fp+13j
		push	esi
		push	[esp+8+arg_4]
		push	0
		push	6Ah ; 'j'
		push	edi
		call	_BIO_ctrl
		push	[esp+18h+arg_8]
		push	edi
		push	[esp+20h+arg_0]
		call	_ASN1_item_d2i_bio
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 20h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_ASN1_item_d2i_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_d2i_read_bio proc	near		; CODE XREF: _ASN1_d2i_bio+1Fp
					; _ASN1_d2i_fp+5Bp ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 38h ; '8'
		call	__chkstk
		push	ebx
		push	esi
		push	edi
		xor	esi, esi
		mov	[esp+44h+var_38], 0
		mov	[esp+44h+var_34], esi
		xor	edi, edi
		call	_BUF_MEM_new
		mov	ebx, eax
		mov	[esp+44h+var_30], ebx
		test	ebx, ebx
		jnz	short loc_21E
		push	9Eh ; 'ž'
		push	offset ??_C@_0BJ@GMLOABJG@?4?2crypto?2asn1?2a_d2i_fp?4c?$AA@ ; ".\\crypto\\asn1\\a_d2i_fp.c"
		push	41h ; 'A'
		push	6Bh ; 'k'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 38h
		retn
; ---------------------------------------------------------------------------

loc_21E:				; CODE XREF: _asn1_d2i_read_bio+2Aj
		call	_ERR_clear_error
		push	ebp

loc_224:				; CODE XREF: _asn1_d2i_read_bio+11Aj
					; _asn1_d2i_read_bio+14Ej
		mov	ebp, edi
		sub	ebp, esi
		cmp	ebp, 8
		ja	short loc_282
		sub	esi, edi
		add	esi, 8
		lea	eax, [edi+esi]
		cmp	eax, edi
		jb	loc_3FE
		push	eax
		push	ebx
		call	_BUF_MEM_grow_clean
		add	esp, 8
		test	eax, eax
		jz	loc_3FE
		mov	eax, [ebx+4]
		push	esi
		add	eax, edi
		push	eax
		push	[esp+50h+arg_0]
		call	_BIO_read
		add	esp, 0Ch
		test	eax, eax
		jns	short loc_270
		test	ebp, ebp
		jz	loc_3E6
		test	eax, eax

loc_270:				; CODE XREF: _asn1_d2i_read_bio+94j
		jle	short loc_27E
		add	eax, edi
		cmp	eax, edi
		jb	loc_3F7
		mov	edi, eax

loc_27E:				; CODE XREF: _asn1_d2i_read_bio:loc_270j
		mov	esi, [esp+48h+var_34]

loc_282:				; CODE XREF: _asn1_d2i_read_bio+5Bj
		mov	ebp, [ebx+4]
		mov	eax, edi
		sub	eax, esi
		add	ebp, esi
		push	eax
		lea	eax, [esp+4Ch+var_18]
		mov	[esp+4Ch+var_2C], ebp
		push	eax
		lea	eax, [esp+50h+var_1C]
		push	eax
		lea	eax, [esp+54h+var_14]
		push	eax
		lea	eax, [esp+58h+var_2C]
		push	eax
		call	_ASN1_get_object
		mov	ecx, eax
		add	esp, 14h
		mov	[esp+48h+var_20], ecx
		test	cl, cl
		jns	short loc_2D4
		call	_ERR_peek_error
		and	eax, 0FFFh
		cmp	eax, 9Bh ; '›'
		jnz	$err$71
		call	_ERR_clear_error
		mov	ecx, [esp+48h+var_20]

loc_2D4:				; CODE XREF: _asn1_d2i_read_bio+E4j
		mov	eax, [esp+48h+var_2C]
		sub	eax, ebp
		add	esi, eax
		mov	[esp+48h+var_34], esi
		test	cl, 1
		jz	short loc_301
		add	[esp+48h+var_38], 1
		jns	loc_224
		push	0CEh ; 'Î'
		push	offset ??_C@_0BJ@GMLOABJG@?4?2crypto?2asn1?2a_d2i_fp?4c?$AA@ ; ".\\crypto\\asn1\\a_d2i_fp.c"
		push	7Bh ; '{'
		jmp	loc_451
; ---------------------------------------------------------------------------

loc_301:				; CODE XREF: _asn1_d2i_read_bio+113j
		mov	edx, [esp+48h+var_38]
		mov	ecx, [esp+48h+var_14]
		test	edx, edx
		jz	short loc_33A
		test	ecx, ecx
		jnz	short loc_33A
		cmp	[esp+48h+var_1C], ecx
		jnz	short loc_33A
		dec	edx
		mov	[esp+48h+var_38], edx

loc_31C:				; CODE XREF: _asn1_d2i_read_bio+211j
		test	edx, edx
		jg	loc_224
		cmp	esi, 7FFFFFFFh
		jbe	loc_432
		push	112h
		jmp	loc_447
; ---------------------------------------------------------------------------

loc_33A:				; CODE XREF: _asn1_d2i_read_bio+13Bj
					; _asn1_d2i_read_bio+13Fj ...
		mov	eax, edi
		sub	eax, esi
		cmp	ecx, eax
		jbe	loc_3D4
		mov	ebx, ecx
		mov	ebp, 4000h
		sub	ebx, edi
		add	ebx, esi
		cmp	ebx, 7FFFFFFFh
		ja	loc_42B
		lea	eax, [edi+ebx]
		cmp	eax, edi
		jb	loc_42B
		test	ebx, ebx
		jz	short loc_3D0
		nop	dword ptr [eax+00h]

loc_370:				; CODE XREF: _asn1_d2i_read_bio+1F2j
		cmp	ebx, ebp
		mov	esi, ebx
		cmova	esi, ebp
		lea	eax, [esi+edi]
		push	eax
		push	[esp+4Ch+var_30]
		call	_BUF_MEM_grow_clean
		add	esp, 8
		test	eax, eax
		jz	loc_41D
		sub	ebx, esi
		test	esi, esi
		jz	short loc_3B6

loc_395:				; CODE XREF: _asn1_d2i_read_bio+1E4j
		mov	eax, [esp+48h+var_30]
		push	esi
		mov	eax, [eax+4]
		add	eax, edi
		push	eax
		push	[esp+50h+arg_0]
		call	_BIO_read
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_40C
		add	edi, eax
		sub	esi, eax
		jnz	short loc_395

loc_3B6:				; CODE XREF: _asn1_d2i_read_bio+1C3j
		cmp	ebp, 3FFFFFFFh
		jnb	short loc_3C0
		add	ebp, ebp

loc_3C0:				; CODE XREF: _asn1_d2i_read_bio+1ECj
		test	ebx, ebx
		jnz	short loc_370
		mov	ecx, [esp+48h+var_14]
		mov	esi, [esp+48h+var_34]
		mov	edx, [esp+48h+var_38]

loc_3D0:				; CODE XREF: _asn1_d2i_read_bio+19Aj
		mov	ebx, [esp+48h+var_30]

loc_3D4:				; CODE XREF: _asn1_d2i_read_bio+170j
		lea	eax, [ecx+esi]
		cmp	eax, esi
		jb	short loc_442
		mov	esi, eax
		mov	[esp+48h+var_34], esi
		jmp	loc_31C
; ---------------------------------------------------------------------------

loc_3E6:				; CODE XREF: _asn1_d2i_read_bio+98j
		push	0ADh ; '­'
		push	offset ??_C@_0BJ@GMLOABJG@?4?2crypto?2asn1?2a_d2i_fp?4c?$AA@ ; ".\\crypto\\asn1\\a_d2i_fp.c"
		push	8Eh ; 'Ž'
		jmp	short loc_451
; ---------------------------------------------------------------------------

loc_3F7:				; CODE XREF: _asn1_d2i_read_bio+A6j
		push	0B2h ; '²'
		jmp	short loc_447
; ---------------------------------------------------------------------------

loc_3FE:				; CODE XREF: _asn1_d2i_read_bio+67j
					; _asn1_d2i_read_bio+79j
		push	0A8h ; '¨'
		push	offset ??_C@_0BJ@GMLOABJG@?4?2crypto?2asn1?2a_d2i_fp?4c?$AA@ ; ".\\crypto\\asn1\\a_d2i_fp.c"
		push	41h ; 'A'
		jmp	short loc_451
; ---------------------------------------------------------------------------

loc_40C:				; CODE XREF: _asn1_d2i_read_bio+1DEj
		push	0F7h ; '÷'
		push	offset ??_C@_0BJ@GMLOABJG@?4?2crypto?2asn1?2a_d2i_fp?4c?$AA@ ; ".\\crypto\\asn1\\a_d2i_fp.c"
		push	8Eh ; 'Ž'
		jmp	short loc_451
; ---------------------------------------------------------------------------

loc_41D:				; CODE XREF: _asn1_d2i_read_bio+1B9j
		push	0EFh ; 'ï'
		push	offset ??_C@_0BJ@GMLOABJG@?4?2crypto?2asn1?2a_d2i_fp?4c?$AA@ ; ".\\crypto\\asn1\\a_d2i_fp.c"
		push	41h ; 'A'
		jmp	short loc_451
; ---------------------------------------------------------------------------

loc_42B:				; CODE XREF: _asn1_d2i_read_bio+187j
					; _asn1_d2i_read_bio+192j
		push	0E2h ; 'â'
		jmp	short loc_447
; ---------------------------------------------------------------------------

loc_432:				; CODE XREF: _asn1_d2i_read_bio+15Aj
		mov	ecx, [esp+48h+arg_4]
		mov	eax, esi
		pop	ebp
		pop	edi
		pop	esi
		mov	[ecx], ebx
		pop	ebx
		add	esp, 38h
		retn
; ---------------------------------------------------------------------------

loc_442:				; CODE XREF: _asn1_d2i_read_bio+209j
		push	106h

loc_447:				; CODE XREF: _asn1_d2i_read_bio+165j
					; _asn1_d2i_read_bio+22Cj ...
		push	offset ??_C@_0BJ@GMLOABJG@?4?2crypto?2asn1?2a_d2i_fp?4c?$AA@ ; ".\\crypto\\asn1\\a_d2i_fp.c"
		push	9Bh ; '›'

loc_451:				; CODE XREF: _asn1_d2i_read_bio+12Cj
					; _asn1_d2i_read_bio+225j ...
		push	6Bh ; 'k'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h

$err$71:				; CODE XREF: _asn1_d2i_read_bio+F5j
		push	[esp+48h+var_30]
		call	_BUF_MEM_free
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 38h
		retn
_asn1_d2i_read_bio endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 474h
; COMDAT (pick any)
		public ??_C@_0BJ@GMLOABJG@?4?2crypto?2asn1?2a_d2i_fp?4c?$AA@
; `string'
??_C@_0BJ@GMLOABJG@?4?2crypto?2asn1?2a_d2i_fp?4c?$AA@ db '.\crypto\asn1\a_d2i_fp.c',0
					; DATA XREF: _ASN1_d2i_fp+21o
					; _ASN1_item_d2i_fp+1Ao ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BUF_MEM_new:near	; CODE XREF: _asn1_d2i_read_bio+1Dp
		extrn _BUF_MEM_free:near ; CODE	XREF: _ASN1_d2i_bio+50p
					; _ASN1_d2i_fp+8Ap ...
		extrn _BUF_MEM_grow_clean:near ; CODE XREF: _asn1_d2i_read_bio+6Fp
					; _asn1_d2i_read_bio+1AFp
		extrn _BIO_s_file:near	; CODE XREF: _ASN1_d2i_fp+Bp
					; _ASN1_item_d2i_fp+1p
		extrn _BIO_new:near	; CODE XREF: _ASN1_d2i_fp+11p
					; _ASN1_item_d2i_fp+7p
		extrn _BIO_free:near	; CODE XREF: _ASN1_d2i_fp+93p
					; _ASN1_item_d2i_fp+54p
		extrn _BIO_read:near	; CODE XREF: _asn1_d2i_read_bio+8Ap
					; _asn1_d2i_read_bio+1D4p
		extrn _BIO_ctrl:near	; CODE XREF: _ASN1_d2i_fp+46p
					; _ASN1_item_d2i_fp+3Ep
		extrn _ERR_put_error:near ; CODE XREF: _ASN1_d2i_fp+2Cp
					; _ASN1_item_d2i_fp+28p ...
		extrn _ERR_peek_error:near ; CODE XREF:	_asn1_d2i_read_bio+E6p
		extrn _ERR_clear_error:near ; CODE XREF: _asn1_d2i_read_bio:loc_21Ep
					; _asn1_d2i_read_bio+FBp
		extrn _ASN1_get_object:near ; CODE XREF: _asn1_d2i_read_bio+D4p
		extrn _ASN1_item_d2i:near ; CODE XREF: _ASN1_item_d2i_bio+46p
		extrn __chkstk:near	; CODE XREF: _ASN1_d2i_bio+5p
					; _ASN1_d2i_fp+5p ...


		end
