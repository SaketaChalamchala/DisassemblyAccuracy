;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	86D8678CD1FA4AC1AEE80E5AFE39B05A
; Input	CRC32 :	755CC8F7

; File Name   :	C:\compspace\Diff\openssl\obj\bftest.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
_bf_key		dd offset ??_C@_0BL@JIGBPIBD@abcdefghijklmnopqrstuvwxyz?$AA@
					; DATA XREF: _test:loc_9E4r
					; "abcdefghijklmnopqrstuvwxyz"
		dd offset ??_C@_0BC@EPEOBBNL@Who?5is?5John?5Galt?$DP?$AA@ ; "Who is John Galt?"
_bf_plain	dd 424C4F57h		; DATA XREF: _test+69r	_test+14Dr ...
dword_C		dd 46495348h		; DATA XREF: _test+74r	_test+158r
		dd 0FEDCBA98h, 76543210h
_bf_cipher	dd 324ED0FEh		; DATA XREF: _test+99r	_test+107r
dword_1C	dd 0F413A203h		; DATA XREF: _test+A4r
		dd 0CC91732Bh, 8022F684h
_ecb_data	db 0			; DATA XREF: _print_test_data:loc_582r
					; _test:loc_BB4o
		align 10h
		dd 2 dup(0FFFFFFFFh), 30h, 0
		dd 2 dup(11111111h), 67452301h,	0EFCDAB89h, 2 dup(11111111h)
		dd 2 dup(0)
		dd 98BADCFEh, 10325476h, 4510A17Ch, 576E1A4Ah, 61D93101h
		dd 6E37C19Dh, 3E13A107h, 86260B4Ah, 4C674938h, 9E310226h
		dd 0BA15B904h, 0B6B5FE43h, 70B91301h, 0CEF234FDh, 75F17001h
		dd 0E6B58F46h, 0AD7F2943h, 0FE73E338h, 7013A707h, 162ADA45h
		dd 4916804h, 2F3BFDC2h,	0B56BD037h, 4675CB16h, 0D26081Fh
		dd 5E46C21Ah, 64234058h, 7661BA1Ah, 16165802h, 7B02946h
		dd 0BC3E7949h, 8F25B379h, 155EB04Fh, 0A773AB15h, 6D5DE949h
		dd 0BF29A24Ch, 0DC108301h, 0D6269B40h, 1C7F581Ch, 0EF4F9213h
		dd 2 dup(1010101h), 1F1F1F1Fh, 0E0E0E0Eh, 0FEE0FEE0h, 0FEF1FEF1h
		dd 2 dup(0)
		dd 2 dup(0FFFFFFFFh), 67452301h, 0EFCDAB89h, 98BADCFEh
		dd 10325476h
_plain_data	dd 0			; DATA XREF: _print_test_data:loc_5B0r
					; _test+237o ...
dword_13C	dd 0			; DATA XREF: _test+330r
		dd 2 dup(0FFFFFFFFh), 10h, 1000000h, 4 dup(11111111h)
		dd 67452301h, 0EFCDAB89h, 2 dup(0)
		dd 67452301h, 0EFCDAB89h, 0D0D6A101h, 42677739h, 0A84CD55Ch
		dd 0DA57EF3Dh, 38D44802h, 7271F606h, 584B4551h,	0A44DF2Dh
		dd 3044FD42h, 0A27F5759h, 85E9B05h, 3A14CF51h, 0E0D85607h
		dd 0D2614777h, 0B8142576h, 6A48BF29h, 9011DD3Bh, 2283749h
		dd 685F9526h, 9A60AF35h, 405E4D16h, 3252274Fh, 186E056Bh
		dd 0CA5C9F75h, 0EFD64B00h, 62601709h, 390D48h, 0F262E76Eh
		dd 0C8407543h, 0FA3C8F69h, 0A0432D07h, 92520777h, 7755FE02h
		dd 2AF11781h, 505C9D1Dh, 0C228F718h, 28325530h,	5A296F6Dh
		dd 67452301h, 0EFCDAB89h, 67452301h, 0EFCDAB89h, 67452301h
		dd 0EFCDAB89h, 2 dup(0FFFFFFFFh), 4 dup(0)
		dd 2 dup(0FFFFFFFFh)
_cipher_data	dd 4597F94Eh		; DATA XREF: _print_test_data:loc_5E0r
					; _test+252r ...
dword_24C	dd 78DD9861h		; DATA XREF: _test+25Dr
		dd 0D56F8651h, 8ACB5EB8h, 9A6F857Dh, 0F2633061h, 87DD6624h
		dd 9D3C968Bh, 80C3F961h, 96B08122h, 30C60C7Dh, 0C71EDAAFh
		dd 4597F94Eh, 78DD9861h, 0FABCE0Ah, 8DA2A0C6h, 4582C659h
		dd 2B2805EBh, 0BCCB8B1h, 0A0090F25h, 77E53017h,	0A41DEA8Bh
		dd 56785EA2h, 0EB5126CFh, 0B1823835h, 1A8FCE09h, 88D0F448h
		dd 1899374Ch, 0B7932143h, 98FC5189h, 5441F013h,	0E51A9DD6h
		dd 93DAED2Eh, 799CD3FFh, 39E087D8h, 0E3A62D3Ch,	4FD0995Fh
		dd 6939165Bh, 3B7A054Ah, 7B97D324h, 0C1312045h,	8EDAFAE4h
		dd 39AE5575h, 0BD879BF5h, 9C5FC553h, 19C09FB4h,	0FA7B8E7Ah
		dd 0A3897E93h, 7A5D9CCFh, 0B5AD8649h, 90B2ABD1h, 78C78B65h
		dd 7437CB55h, 1F23ED1h,	48EC34FAh, 0B268B247h, 517990A7h
		dd 0AE3CEA08h, 2D079EC3h, 1D63AC9Fh, 0E0334901h, 0E4F6AFCDh
		dd 779A1EF2h, 0BC491CB7h, 88465924h, 9A365457h,	9C5A5C6Bh
		dd 5A0A9E5Dh
_cbc_key	db 1			; DATA XREF: _print_test_data:loc_700r
					; _test+48Ao ...
		db 23h,	45h, 67h
		dd 0EFCDAB89h, 0C3D2E1F0h, 8796A5B4h
_cbc_iv		dd 98BADCFEh		; DATA XREF: _print_test_data:loc_730r
					; _test+4A2r ...
dword_36C	dd 10325476h		; DATA XREF: _test+4B1r _test+57Dr ...
_cbc_data	db '7654321 Now is the time for ',0 ; DATA XREF: _print_test_data+1EBo
					; _print_test_data+1FCo ...
		align 10h
		dd 2 dup(0)
_cbc_ok		db 6Bh			; DATA XREF: _print_test_data:loc_820r
					; _test+523o
		db 77h,	0B4h, 0D6h
		dd 0E6DE0630h, 0E256B105h, 93970374h, 0E7B9DE58h, 0D9164615h
		dd 2B65F159h, 0CC92FFD5h
_cfb64_ok	db 0E7h			; DATA XREF: _print_test_data:loc_8A0r
					; _test+712o
		db 32h,	14h, 0A2h
		dd 0CA392182h, 6DCF6EF2h, 6EE7B92Eh, 4DEA33Dh, 7251D1h
		dd 0A6579D51h, 0C3h
_ofb64_ok	db 0E7h			; DATA XREF: _print_test_data:loc_930r
					; _test+97Bo
		db 32h,	14h, 0A2h
		dd 0CA392182h, 0CC43B362h, 7358655Bh, 8D90DD10h, 221B240Ch
		dd 80CFC263h, 0DAh
_key_test	db 0F0h			; DATA XREF: _print_test_data:loc_6B0r
					; _test:loc_DA4o
		db 0E1h, 0D2h, 0C3h
		dd 8796A5B4h, 4B5A6978h, 0F1E2D3Ch, 33221100h, 77665544h
		dd 88h
_key_data	db 0FEh			; DATA XREF: _print_test_data:loc_631r
					; _test+41Fo
		db 0DCh, 0BAh, 98h
dword_418	dd 10325476h		; DATA XREF: _test+439r
dword_41C	dd 0			; DATA XREF: _test+445r
_key_out	dd 7C59ADF9h, 5E00DB49h, 0C1211DE9h, 0D6A661D9h, 0AB7C2E9h
					; DATA XREF: _print_test_data+100o
		dd 0F35CC61Bh, 94631EBEh, 50F6408h, 48449EB3h, 6E1EDB1Bh
		dd 83AA5794h, 0D8C92B1h, 3270B78Bh, 9D6260F9h, 4E247AE8h
		dd 825EC82Ch, 7A0E7515h, 77C54E4Fh, 0BA72B12h, 0E04AB63Ah
		dd 9A3C833Ah, 0F637C5FFh, 87DA0994h, 0F26B0FA9h, 62804F88h
		dd 0B4B86050h, 1C03851Fh, 6819E119h, 3A37D979h,	4FA34C71h
		dd 87281493h, 5CE13BEEh, 839E4203h, 4BD1E28Ch, 279E29A4h
		dd 7BF69F46h, 0D1AED5AFh, 0A896BCC1h, 0E1C8510h, 9FDA5838h
		dd 0D71EF5E6h, 1FB29D9Bh, 4AE1A664h, 6FB436FDh,	0D4D7C780h
		dd 0AD79545Ah, 624B0405h, 80D052FAh, 2 dup(0)
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4E8h
; COMDAT (pick any)
		public ??_C@_0BL@JIGBPIBD@abcdefghijklmnopqrstuvwxyz?$AA@
; `string'
??_C@_0BL@JIGBPIBD@abcdefghijklmnopqrstuvwxyz?$AA@ db 'abcdefghijklmnopqrstuvwxyz',0
					; DATA XREF: .data:_bf_keyo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 504h
; COMDAT (pick any)
		public ??_C@_0BC@EPEOBBNL@Who?5is?5John?5Galt?$DP?$AA@
; `string'
??_C@_0BC@EPEOBBNL@Who?5is?5John?5Galt?$DP?$AA@	db 'Who is John Galt?',0
					; DATA XREF: .data:00000004o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 518h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; _printf+19p
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 520h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 544h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public _main
_main		proc near

argc		= dword	ptr  4
argv		= dword	ptr  8
envp		= dword	ptr  0Ch

		cmp	[esp+argc], 1
		jle	short loc_552
		call	_print_test_data
		jmp	short loc_557
; ---------------------------------------------------------------------------

loc_552:				; CODE XREF: _main+5j
		call	_test

loc_557:				; CODE XREF: _main+Cj
		push	eax		; Code
		call	dword ptr ds:__imp__exit
_main		endp

; ---------------------------------------------------------------------------
$LN6		db 0CCh
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 560h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_print_test_data proc near		; CODE XREF: _main+7p
		push	esi
		push	edi
		push	offset ??_C@_0P@OIJLMDCL@ecb?5test?5data?6?$AA@	; "ecb test data\n"
		call	_printf
		push	offset ??_C@_0CG@JBEMBKPB@key?5bytes?7?7clear?5bytes?7?7cipher?5b@ ; "key bytes\t\tclear bytes\t\tcipher byte"...
		call	_printf
		add	esp, 8
		xor	edi, edi
		nop	dword ptr [eax+eax+00h]

loc_580:				; CODE XREF: _print_test_data+B2j
		xor	esi, esi

loc_582:				; CODE XREF: _print_test_data+3Cj
		movzx	eax, _ecb_data[edi+esi]
		push	eax
		push	offset ??_C@_04JFFKLGJF@?$CF02X?$AA@ ; "%02X"
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 8
		jb	short loc_582
		push	offset ??_C@_01GPOEFGEJ@?7?$AA@	; "\t"
		call	_printf
		add	esp, 4
		xor	esi, esi
		nop	dword ptr [eax]

loc_5B0:				; CODE XREF: _print_test_data+6Aj
		movzx	eax, byte ptr _plain_data[edi+esi]
		push	eax
		push	offset ??_C@_04JFFKLGJF@?$CF02X?$AA@ ; "%02X"
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 8
		jb	short loc_5B0
		push	offset ??_C@_01GPOEFGEJ@?7?$AA@	; "\t"
		call	_printf
		add	esp, 4
		xor	esi, esi
		nop	dword ptr [eax+eax+00h]

loc_5E0:				; CODE XREF: _print_test_data+9Aj
		movzx	eax, byte ptr _cipher_data[edi+esi]
		push	eax
		push	offset ??_C@_04JFFKLGJF@?$CF02X?$AA@ ; "%02X"
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 8
		jb	short loc_5E0
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		add	edi, 8
		add	esp, 4
		cmp	edi, 110h
		jb	loc_580
		push	offset ??_C@_0BD@CKJJILND@set_key?5test?5data?6?$AA@ ; "set_key	test data\n"
		call	_printf
		push	offset ??_C@_09PNPCPADC@data?$FL8?$FN?$DN?5?$AA@ ; "data[8]= "
		call	_printf
		add	esp, 8
		xor	esi, esi

loc_631:				; CODE XREF: _print_test_data+EAj
		movzx	eax, _key_data[esi]
		push	eax
		push	offset ??_C@_04JFFKLGJF@?$CF02X?$AA@ ; "%02X"
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 8
		jb	short loc_631
		push	ebx
		push	ebp
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		mov	edi, 1
		add	esp, 4
		mov	ebx, offset _key_out
		lea	ebp, [edi+17h]
		nop	dword ptr [eax+eax+00000000h]

loc_670:				; CODE XREF: _print_test_data+17Ej
		push	offset ??_C@_02CAMHBLCK@c?$DN?$AA@ ; "c="
		call	_printf
		add	esp, 4
		xor	esi, esi
		nop

loc_680:				; CODE XREF: _print_test_data+136j
		movzx	eax, byte ptr [ebx+esi]
		push	eax
		push	offset ??_C@_04JFFKLGJF@?$CF02X?$AA@ ; "%02X"
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 8
		jb	short loc_680
		push	edi
		push	offset ??_C@_08OJLJLCMC@?5k?$FL?$CF2u?$FN?$DN?$AA@ ; " k[%2u]="
		call	_printf
		add	esp, 8
		xor	esi, esi
		test	edi, edi
		jz	short loc_6CA
		nop	dword ptr [eax+00h]

loc_6B0:				; CODE XREF: _print_test_data+168j
		movzx	eax, _key_test[esi]
		push	eax
		push	offset ??_C@_04JFFKLGJF@?$CF02X?$AA@ ; "%02X"
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, edi
		jb	short loc_6B0

loc_6CA:				; CODE XREF: _print_test_data+14Aj
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		add	esp, 4
		add	ebx, 8
		inc	edi
		sub	ebp, 1
		jnz	short loc_670
		push	offset ??_C@_0BK@GLJLFENG@?6chaining?5mode?5test?5data?6?$AA@ ;	"\nchaining mode test data\n"
		call	_printf
		push	offset ??_C@_0N@IKFJAHCA@key?$FL16?$FN?5?5?5?$DN?5?$AA@	; "key[16]   = "
		call	_printf
		add	esp, 8
		xor	esi, esi
		pop	ebp
		pop	ebx
		nop	dword ptr [eax+eax+00h]

loc_700:				; CODE XREF: _print_test_data+1B9j
		movzx	eax, _cbc_key[esi]
		push	eax
		push	offset ??_C@_04JFFKLGJF@?$CF02X?$AA@ ; "%02X"
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 10h
		jb	short loc_700
		push	offset ??_C@_0O@PEGHBKCL@?6iv?$FL8?$FN?5?5?5?5?5?$DN?5?$AA@ ; "\niv[8]	   = "
		call	_printf
		add	esp, 4
		xor	esi, esi
		nop	word ptr [eax+eax+00h]

loc_730:				; CODE XREF: _print_test_data+1E9j
		movzx	eax, byte ptr _cbc_iv[esi]
		push	eax
		push	offset ??_C@_04JFFKLGJF@?$CF02X?$AA@ ; "%02X"
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 8
		jb	short loc_730
		mov	ecx, offset _cbc_data ;	"7654321 Now is	the time for "
		lea	edx, [ecx+1]

loc_753:				; CODE XREF: _print_test_data+1F8j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_753
		sub	ecx, edx
		push	offset _cbc_data ; "7654321 Now	is the time for	"
		lea	eax, [ecx+1]
		push	eax
		push	offset ??_C@_0BC@JPIBGNCH@?6data?$FL?$CFd?$FN?5?5?$DN?5?8?$CFs?8?$AA@ ;	"\ndata[%d]  = '%s'"
		call	_printf
		mov	ecx, offset _cbc_data ;	"7654321 Now is	the time for "
		add	esp, 0Ch
		lea	edx, [ecx+1]
		nop	word ptr [eax+eax+00h]

loc_780:				; CODE XREF: _print_test_data+225j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_780
		sub	ecx, edx
		lea	eax, [ecx+1]
		push	eax
		push	offset ??_C@_0O@KHKMJACO@?6data?$FL?$CFd?$FN?5?5?$DN?5?$AA@ ; "\ndata[%d]  = "
		call	_printf
		mov	ecx, offset _cbc_data ;	"7654321 Now is	the time for "
		add	esp, 8
		xor	esi, esi
		lea	edx, [ecx+1]

loc_7A4:				; CODE XREF: _print_test_data+249j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_7A4
		sub	ecx, edx
		lea	eax, [ecx+1]
		test	eax, eax
		jz	short loc_7F0
		nop	dword ptr [eax+00h]
		nop	dword ptr [eax+eax+00000000h]

loc_7C0:				; CODE XREF: _print_test_data+28Ej
		movsx	eax, byte ptr _cbc_data[esi] ; "7654321	Now is the time	for "
		push	eax
		push	offset ??_C@_04JFFKLGJF@?$CF02X?$AA@ ; "%02X"
		call	_printf
		mov	ecx, offset _cbc_data ;	"7654321 Now is	the time for "
		add	esp, 8
		inc	esi
		lea	edx, [ecx+1]
		xchg	ax, ax

loc_7E0:				; CODE XREF: _print_test_data+285j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_7E0
		sub	ecx, edx
		lea	eax, [ecx+1]
		cmp	esi, eax
		jb	short loc_7C0

loc_7F0:				; CODE XREF: _print_test_data+252j
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		push	offset ??_C@_0BB@PNLIHHBF@cbc?5cipher?5text?6?$AA@ ; "cbc cipher text\n"
		call	_printf
		push	20h ; ' '
		push	offset ??_C@_0N@KIILGAFO@cipher?$FL?$CFd?$FN?$DN?5?$AA@	; "cipher[%d]= "
		call	_printf
		add	esp, 10h
		xor	esi, esi
		db	66h, 66h
		nop	word ptr [eax+eax+00000000h]

loc_820:				; CODE XREF: _print_test_data+2D9j
		movzx	eax, _cbc_ok[esi]
		push	eax
		push	offset ??_C@_04JFFKLGJF@?$CF02X?$AA@ ; "%02X"
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 20h ; ' '
		jb	short loc_820
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		push	offset ??_C@_0BD@EBGEIDAP@cfb64?5cipher?5text?6?$AA@ ; "cfb64 cipher text\n"
		call	_printf
		mov	ecx, offset _cbc_data ;	"7654321 Now is	the time for "
		add	esp, 8
		lea	edx, [ecx+1]
		nop	word ptr [eax+eax+00h]

loc_860:				; CODE XREF: _print_test_data+305j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_860
		sub	ecx, edx
		lea	eax, [ecx+1]
		push	eax
		push	offset ??_C@_0N@KIILGAFO@cipher?$FL?$CFd?$FN?$DN?5?$AA@	; "cipher[%d]= "
		call	_printf
		mov	ecx, offset _cbc_data ;	"7654321 Now is	the time for "
		add	esp, 8
		xor	esi, esi
		lea	edx, [ecx+1]

loc_884:				; CODE XREF: _print_test_data+329j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_884
		sub	ecx, edx
		lea	eax, [ecx+1]
		test	eax, eax
		jz	short loc_8D0
		nop	dword ptr [eax+00h]
		nop	dword ptr [eax+eax+00000000h]

loc_8A0:				; CODE XREF: _print_test_data+36Ej
		movzx	eax, _cfb64_ok[esi]
		push	eax
		push	offset ??_C@_04JFFKLGJF@?$CF02X?$AA@ ; "%02X"
		call	_printf
		mov	ecx, offset _cbc_data ;	"7654321 Now is	the time for "
		add	esp, 8
		inc	esi
		lea	edx, [ecx+1]
		xchg	ax, ax

loc_8C0:				; CODE XREF: _print_test_data+365j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_8C0
		sub	ecx, edx
		lea	eax, [ecx+1]
		cmp	esi, eax
		jb	short loc_8A0

loc_8D0:				; CODE XREF: _print_test_data+332j
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		push	offset ??_C@_0BD@KBKNJDGI@ofb64?5cipher?5text?6?$AA@ ; "ofb64 cipher text\n"
		call	_printf
		mov	ecx, offset _cbc_data ;	"7654321 Now is	the time for "
		add	esp, 8
		lea	edx, [ecx+1]
		nop

loc_8F0:				; CODE XREF: _print_test_data+395j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_8F0
		sub	ecx, edx
		lea	eax, [ecx+1]
		push	eax
		push	offset ??_C@_0N@KIILGAFO@cipher?$FL?$CFd?$FN?$DN?5?$AA@	; "cipher[%d]= "
		call	_printf
		mov	ecx, offset _cbc_data ;	"7654321 Now is	the time for "
		add	esp, 8
		xor	esi, esi
		lea	edx, [ecx+1]

loc_914:				; CODE XREF: _print_test_data+3B9j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_914
		sub	ecx, edx
		lea	eax, [ecx+1]
		test	eax, eax
		jz	short loc_960
		nop	dword ptr [eax+00h]
		nop	dword ptr [eax+eax+00000000h]

loc_930:				; CODE XREF: _print_test_data+3FEj
		movzx	eax, _ofb64_ok[esi]
		push	eax
		push	offset ??_C@_04JFFKLGJF@?$CF02X?$AA@ ; "%02X"
		call	_printf
		mov	ecx, offset _cbc_data ;	"7654321 Now is	the time for "
		add	esp, 8
		inc	esi
		lea	edx, [ecx+1]
		xchg	ax, ax

loc_950:				; CODE XREF: _print_test_data+3F5j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_950
		sub	ecx, edx
		lea	eax, [ecx+1]
		cmp	esi, eax
		jb	short loc_930

loc_960:				; CODE XREF: _print_test_data+3C2j
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		retn
_print_test_data endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 974h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int printf(const char	*Format, ...)
		public _printf
_printf		proc near		; CODE XREF: _print_test_data+7p
					; _print_test_data+11p	...

Format		= dword	ptr  4
arg_4		= byte ptr  8

		push	esi
		mov	esi, [esp+4+Format]
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		lea	ecx, [esp+4+arg_4]
		push	ecx
		push	0
		push	esi
		push	eax
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		pop	esi
		retn
_printf		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_test		proc near		; CODE XREF: _main:loc_552p

var_10DC	= dword	ptr -10DCh
var_10D8	= dword	ptr -10D8h
var_10D4	= dword	ptr -10D4h
var_10D0	= dword	ptr -10D0h
var_10CC	= dword	ptr -10CCh
var_10C8	= byte ptr -10C8h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= byte ptr -78h
var_70		= xmmword ptr -70h
var_60		= xmmword ptr -60h
var_50		= qword	ptr -50h
var_40		= xmmword ptr -40h
var_30		= xmmword ptr -30h
var_20		= qword	ptr -20h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF0h
		mov	eax, 10E8h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+10E8h+var_4], eax
		push	esi
		push	edi
		push	offset ??_C@_0CC@BFAKGEAD@testing?5blowfish?5in?5raw?5ecb?5mode@ ; "testing blowfish in	raw ecb	mode\n"
		xor	esi, esi
		call	_printf
		add	esp, 4
		xor	ecx, ecx
		mov	[esp+10F0h+var_10DC], ecx
		db	66h, 66h
		nop	word ptr [eax+eax+00000000h]

loc_9E4:				; CODE XREF: _test+1F0j
		mov	edx, _bf_key[ecx*4]
		mov	ecx, edx
		lea	edi, [ecx+1]
		nop	dword ptr [eax+00h]

loc_9F4:				; CODE XREF: _test+55j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_9F4
		push	edx
		sub	ecx, edi
		lea	eax, [esp+10F4h+var_10C8]
		push	ecx
		push	eax
		call	_BF_set_key
		mov	ecx, [esp+10FCh+var_10DC]
		mov	eax, _bf_plain[ecx*8]
		mov	[esp+10FCh+var_10D4], eax
		mov	eax, dword_C[ecx*8]
		mov	[esp+10FCh+var_10D0], eax
		lea	eax, [esp+10FCh+var_10C8]
		push	eax
		lea	eax, [esp+1100h+var_10D4]
		push	eax
		call	_BF_encrypt
		mov	ecx, [esp+1104h+var_10DC]
		lea	edx, [esp+1104h+var_10D4]
		add	esp, 14h
		mov	eax, _bf_cipher[ecx*8]
		cmp	eax, [edx]
		jnz	short loc_A58
		mov	eax, dword_1C[ecx*8]
		cmp	eax, [edx+4]
		jz	loc_AD7

loc_A58:				; CODE XREF: _test+A2j
		push	offset ??_C@_0BN@IPPPNGEM@BF_encrypt?5error?5encrypting?6?$AA@ ; "BF_encrypt error encrypting\n"
		call	_printf
		push	offset ??_C@_09DAIIHNJG@got?5?5?5?5?5?3?$AA@ ; "got	:"
		call	_printf
		add	esp, 8
		xor	esi, esi
		nop	dword ptr [eax]

loc_A74:				; CODE XREF: _test+E5j
		push	[esp+esi*4+10F0h+var_10D4]
		push	offset ??_C@_06OMOGNBEB@?$CF08lX?5?$AA@	; "%08lX "
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 2
		jl	short loc_A74
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		push	offset ??_C@_09PBKDEKON@expected?3?$AA@	; "expected:"
		call	_printf
		add	esp, 8
		xor	esi, esi

loc_AA4:				; CODE XREF: _test+11Fj
		mov	eax, [esp+10F0h+var_10DC]
		lea	eax, [esi+eax*2]
		push	_bf_cipher[eax*4]
		push	offset ??_C@_06OMOGNBEB@?$CF08lX?5?$AA@	; "%08lX "
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 2
		jl	short loc_AA4
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		mov	esi, 1
		call	_printf
		add	esp, 4

loc_AD7:				; CODE XREF: _test+AEj
		lea	eax, [esp+10F0h+var_10C8]
		push	eax
		lea	eax, [esp+10F4h+var_10D4]
		push	eax
		call	_BF_decrypt
		mov	ecx, [esp+10F8h+var_10DC]
		lea	edx, [esp+10F8h+var_10D4]
		add	esp, 8
		mov	eax, _bf_plain[ecx*8]
		cmp	eax, [edx]
		jnz	short loc_B0C
		mov	eax, dword_C[ecx*8]
		cmp	eax, [edx+4]
		jz	loc_B8C

loc_B0C:				; CODE XREF: _test+156j
		push	offset ??_C@_0BN@DHHLBNGH@BF_encrypt?5error?5decrypting?6?$AA@ ; "BF_encrypt error decrypting\n"
		call	_printf
		push	offset ??_C@_09DAIIHNJG@got?5?5?5?5?5?3?$AA@ ; "got	:"
		call	_printf
		add	esp, 8
		xor	esi, esi

loc_B25:				; CODE XREF: _test+196j
		push	[esp+esi*4+10F0h+var_10D4]
		push	offset ??_C@_06OMOGNBEB@?$CF08lX?5?$AA@	; "%08lX "
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 2
		jl	short loc_B25
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		push	offset ??_C@_09PBKDEKON@expected?3?$AA@	; "expected:"
		call	_printf
		add	esp, 8
		xor	esi, esi

loc_B55:				; CODE XREF: _test+1D0j
		mov	eax, [esp+10F0h+var_10DC]
		lea	eax, [esi+eax*2]
		push	_bf_plain[eax*4]
		push	offset ??_C@_06OMOGNBEB@?$CF08lX?5?$AA@	; "%08lX "
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 2
		jl	short loc_B55
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		mov	ecx, [esp+10F4h+var_10DC]
		add	esp, 4
		mov	esi, 1

loc_B8C:				; CODE XREF: _test+162j
		inc	ecx
		mov	[esp+10F0h+var_10DC], ecx
		cmp	ecx, 2
		jl	loc_9E4
		push	offset ??_C@_0BO@FELALHFM@testing?5blowfish?5in?5ecb?5mode?6?$AA@ ; "testing blowfish in ecb mode\n"
		call	_printf
		add	esp, 4
		xor	ecx, ecx
		mov	[esp+10F0h+var_10DC], ecx
		nop	dword ptr [eax+00000000h]

loc_BB4:				; CODE XREF: _test+3DEj
		lea	eax, _ecb_data[ecx*8]
		push	eax
		lea	eax, [esp+10F4h+var_10C8]
		push	8
		push	eax
		call	_BF_set_key
		push	1
		lea	eax, [esp+1100h+var_10C8]
		push	eax
		lea	eax, [esp+1104h+var_78]
		push	eax
		mov	eax, [esp+1108h+var_10DC]
		lea	eax, _plain_data[eax*8]
		push	eax
		call	_BF_ecb_encrypt
		mov	ecx, [esp+110Ch+var_10DC]
		lea	edx, [esp+110Ch+var_78]
		add	esp, 1Ch
		mov	eax, _cipher_data[ecx*8]
		cmp	eax, [edx]
		jnz	short loc_C11
		mov	eax, dword_24C[ecx*8]
		cmp	eax, [edx+4]
		jz	loc_CA6

loc_C11:				; CODE XREF: _test+25Bj
		push	offset ??_C@_0CK@PAINIMOB@BF_ecb_encrypt?5blowfish?5error?5en@ ; "BF_ecb_encrypt blowfish error	encryptin"...
		call	_printf
		push	offset ??_C@_09DAIIHNJG@got?5?5?5?5?5?3?$AA@ ; "got	:"
		call	_printf
		add	esp, 8
		xor	esi, esi
		db	66h, 66h
		nop	word ptr [eax+eax+00000000h]

loc_C34:				; CODE XREF: _test+2AAj
		movzx	eax, [esp+esi+10F0h+var_78]
		push	eax
		push	offset ??_C@_05BFHEBJNP@?$CF02X?5?$AA@ ; "%02X "
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 8
		jl	short loc_C34
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		push	offset ??_C@_09PBKDEKON@expected?3?$AA@	; "expected:"
		call	_printf
		add	esp, 8
		xor	esi, esi
		db	66h, 66h
		nop	word ptr [eax+eax+00000000h]

loc_C74:				; CODE XREF: _test+2EEj
		mov	eax, [esp+10F0h+var_10DC]
		movzx	eax, byte ptr _cipher_data[esi+eax*8]
		push	eax
		push	offset ??_C@_05BFHEBJNP@?$CF02X?5?$AA@ ; "%02X "
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 8
		jl	short loc_C74
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		mov	esi, 1
		call	_printf
		add	esp, 4

loc_CA6:				; CODE XREF: _test+267j
		push	0
		lea	eax, [esp+10F4h+var_10C8]
		push	eax
		lea	eax, [esp+10F8h+var_78]
		push	eax
		push	eax
		call	_BF_ecb_encrypt
		mov	ecx, [esp+1100h+var_10DC]
		lea	edx, [esp+1100h+var_78]
		add	esp, 10h
		mov	eax, _plain_data[ecx*8]
		cmp	eax, [edx]
		jnz	short loc_CE4
		mov	eax, dword_13C[ecx*8]
		cmp	eax, [edx+4]
		jz	loc_D7A

loc_CE4:				; CODE XREF: _test+32Ej
		push	offset ??_C@_0CB@MJMJHHEI@BF_ecb_encrypt?5error?5decrypting?6@ ; "BF_ecb_encrypt error decrypting\n"
		call	_printf
		push	offset ??_C@_09DAIIHNJG@got?5?5?5?5?5?3?$AA@ ; "got	:"
		call	_printf
		add	esp, 8
		xor	esi, esi
		nop	dword ptr [eax+00000000h]

loc_D04:				; CODE XREF: _test+37Aj
		movzx	eax, [esp+esi+10F0h+var_78]
		push	eax
		push	offset ??_C@_05BFHEBJNP@?$CF02X?5?$AA@ ; "%02X "
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 8
		jl	short loc_D04
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		push	offset ??_C@_09PBKDEKON@expected?3?$AA@	; "expected:"
		call	_printf
		add	esp, 8
		xor	esi, esi
		db	66h, 66h
		nop	word ptr [eax+eax+00000000h]

loc_D44:				; CODE XREF: _test+3BEj
		mov	eax, [esp+10F0h+var_10DC]
		movzx	eax, byte ptr _plain_data[esi+eax*8]
		push	eax
		push	offset ??_C@_05BFHEBJNP@?$CF02X?5?$AA@ ; "%02X "
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, 8
		jl	short loc_D44
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		call	_printf
		mov	ecx, [esp+10F4h+var_10DC]
		add	esp, 4
		mov	esi, 1

loc_D7A:				; CODE XREF: _test+33Aj
		inc	ecx
		mov	[esp+10F0h+var_10DC], ecx
		cmp	ecx, 22h ; '"'
		jl	loc_BB4
		push	offset ??_C@_0BK@FBPFHGKJ@testing?5blowfish?5set_key?6?$AA@ ; "testing blowfish	set_key\n"
		call	_printf
		mov	ecx, 1
		add	esp, 4
		mov	[esp+10F0h+var_10DC], ecx
		nop	word ptr [eax+eax+00h]

loc_DA4:				; CODE XREF: _test+46Cj
		push	offset _key_test
		push	ecx
		lea	eax, [esp+10F8h+var_10C8]
		push	eax
		call	_BF_set_key
		push	1
		lea	eax, [esp+1100h+var_10C8]
		push	eax
		lea	eax, [esp+1104h+var_78]
		push	eax
		push	offset _key_data
		call	_BF_ecb_encrypt
		mov	ecx, [esp+110Ch+var_10DC]
		lea	edx, [esp+110Ch+var_78]
		mov	eax, [edx]
		add	esp, 1Ch
		cmp	eax, dword_418[ecx*8]
		jnz	short loc_DF2
		mov	eax, [edx+4]
		cmp	eax, dword_41C[ecx*8]
		jz	short loc_E08

loc_DF2:				; CODE XREF: _test+440j
		push	offset ??_C@_0BH@EMDELIGP@blowfish?5setkey?5error?6?$AA@ ; "blowfish setkey error\n"
		call	_printf
		mov	ecx, [esp+10F4h+var_10DC]
		add	esp, 4
		mov	esi, 1

loc_E08:				; CODE XREF: _test+44Cj
		inc	ecx
		mov	[esp+10F0h+var_10DC], ecx
		cmp	ecx, 19h
		jl	short loc_DA4
		push	offset ??_C@_0BO@ICHPNDMG@testing?5blowfish?5in?5cbc?5mode?6?$AA@ ; "testing blowfish in cbc mode\n"
		call	_printf
		mov	edi, offset _cbc_data ;	"7654321 Now is	the time for "
		add	esp, 4
		lea	ecx, [edi+1]

loc_E27:				; CODE XREF: _test+488j
		mov	al, [edi]
		inc	edi
		test	al, al
		jnz	short loc_E27
		push	offset _cbc_key
		sub	edi, ecx
		lea	eax, [esp+10F4h+var_10C8]
		push	10h
		inc	edi
		push	eax
		mov	[esp+10FCh+var_10CC], edi
		call	_BF_set_key
		mov	eax, _cbc_iv
		xorps	xmm0, xmm0
		mov	[esp+10FCh+var_80], eax
		mov	eax, dword_36C
		mov	[esp+10FCh+var_7C], eax
		lea	eax, [esp+10FCh+var_80]
		push	1
		push	eax
		lea	eax, [esp+1104h+var_10C8]
		movaps	[esp+1104h+var_40], xmm0
		push	eax
		push	edi
		lea	eax, [esp+110Ch+var_70]
		movaps	[esp+110Ch+var_30], xmm0
		push	eax
		push	offset _cbc_data ; "7654321 Now	is the time for	"
		movq	[esp+1114h+var_20], xmm0
		movaps	[esp+1114h+var_70], xmm0
		movaps	[esp+1114h+var_60], xmm0
		movq	[esp+1114h+var_50], xmm0
		call	_BF_cbc_encrypt
		add	esp, 24h
		mov	[esp+10F0h+var_10D8], 1Ch
		lea	ecx, [esp+10F0h+var_70]
		mov	edx, offset _cbc_ok

loc_ECC:				; CODE XREF: _test+539j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_EE1
		add	ecx, 4
		add	edx, 4
		sub	[esp+10F0h+var_10D8], 4
		jnb	short loc_ECC
		jmp	short loc_F15
; ---------------------------------------------------------------------------

loc_EE1:				; CODE XREF: _test+52Cj
		push	offset ??_C@_0BO@KPEFADCK@BF_cbc_encrypt?5encrypt?5error?6?$AA@	; "BF_cbc_encrypt encrypt error\n"
		mov	esi, 1
		call	_printf
		add	esp, 4
		xor	edi, edi

loc_EF5:				; CODE XREF: _test+56Bj
		movzx	eax, byte ptr [esp+edi+10F0h+var_70]
		push	eax
		push	offset ??_C@_07DHGLOFCI@0x?$CF02X?0?$AA@ ; "0x%02X,"
		call	_printf
		inc	edi
		add	esp, 8
		cmp	edi, 20h ; ' '
		jl	short loc_EF5
		mov	edi, [esp+10F0h+var_10CC]

loc_F15:				; CODE XREF: _test+53Bj
		mov	eax, _cbc_iv
		mov	[esp+10F0h+var_80], eax
		mov	eax, dword_36C
		mov	[esp+10F0h+var_7C], eax
		lea	eax, [esp+10F0h+var_80]
		push	0
		push	eax
		lea	eax, [esp+10F8h+var_10C8]
		push	eax
		push	edi
		lea	eax, [esp+1100h+var_40]
		push	eax
		lea	eax, [esp+1104h+var_70]
		push	eax
		call	_BF_cbc_encrypt
		mov	ecx, offset _cbc_data ;	"7654321 Now is	the time for "
		add	esp, 18h
		lea	edx, [ecx+1]
		nop	dword ptr [eax+00000000h]

loc_F64:				; CODE XREF: _test+5C5j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_F64
		sub	ecx, edx
		mov	edx, offset _cbc_data ;	"7654321 Now is	the time for "
		lea	eax, [ecx+1]
		sub	eax, 4
		lea	ecx, [esp+10F0h+var_40]
		mov	[esp+10F0h+var_10D8], eax
		jb	short loc_F9E

loc_F85:				; CODE XREF: _test+5F8j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_FA3
		mov	eax, [esp+10F0h+var_10D8]
		add	ecx, 4
		add	edx, 4
		sub	eax, 4
		mov	[esp+10F0h+var_10D8], eax
		jnb	short loc_F85

loc_F9E:				; CODE XREF: _test+5DFj
		cmp	eax, 0FFFFFFFCh
		jz	short loc_FE8

loc_FA3:				; CODE XREF: _test+5E5j
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_FD6
		cmp	[esp+10F0h+var_10D8], 0FFFFFFFDh
		jz	short loc_FE8
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_FD6
		cmp	[esp+10F0h+var_10D8], 0FFFFFFFEh
		jz	short loc_FE8
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_FD6
		cmp	[esp+10F0h+var_10D8], 0FFFFFFFFh
		jz	short loc_FE8
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jz	short loc_FE8

loc_FD6:				; CODE XREF: _test+603j _test+612j ...
		push	offset ??_C@_0BO@FJIGODCP@BF_cbc_encrypt?5decrypt?5error?6?$AA@	; "BF_cbc_encrypt decrypt error\n"
		call	_printf
		add	esp, 4
		mov	esi, 1

loc_FE8:				; CODE XREF: _test+5FDj _test+60Aj ...
		push	offset ??_C@_0CA@PICEJHPL@testing?5blowfish?5in?5cfb64?5mode?6?$AA@ ; "testing blowfish	in cfb64 mode\n"
		call	_printf
		push	offset _cbc_key
		lea	eax, [esp+10F8h+var_10C8]
		push	10h
		push	eax
		call	_BF_set_key
		mov	eax, _cbc_iv
		xorps	xmm0, xmm0
		mov	[esp+1100h+var_80], eax
		mov	eax, dword_36C
		mov	[esp+1100h+var_7C], eax
		lea	eax, [esp+1100h+var_10DC]
		push	1
		push	eax
		lea	eax, [esp+1108h+var_80]
		movaps	[esp+1108h+var_40], xmm0
		push	eax
		lea	eax, [esp+110Ch+var_10C8]
		movaps	[esp+110Ch+var_30], xmm0
		push	eax
		push	0Dh
		lea	eax, [esp+1114h+var_70]
		movq	[esp+1114h+var_20], xmm0
		push	eax
		push	offset _cbc_data ; "7654321 Now	is the time for	"
		movaps	[esp+111Ch+var_70], xmm0
		movaps	[esp+111Ch+var_60], xmm0
		movq	[esp+111Ch+var_50], xmm0
		mov	[esp+111Ch+var_10DC], 0
		call	_BF_cfb64_encrypt
		push	1
		lea	ecx, [esp+1120h+var_10DC]
		push	ecx
		lea	ecx, [esp+1124h+var_80]
		push	ecx
		lea	ecx, [esp+1128h+var_10C8]
		push	ecx
		lea	eax, [edi-0Dh]
		push	eax
		lea	eax, [esp+1130h+var_70+0Dh]
		push	eax
		push	(offset	_cbc_data+0Dh) ; "s the	time for "
		call	_BF_cfb64_encrypt
		mov	eax, edi
		lea	ecx, [esp+1138h+var_70]
		add	esp, 48h
		mov	edx, offset _cfb64_ok
		sub	eax, 4
		mov	[esp+10F0h+var_10D8], eax
		jb	short loc_10DD

loc_10C4:				; CODE XREF: _test+737j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_10E2
		mov	eax, [esp+10F0h+var_10D8]
		add	ecx, 4
		add	edx, 4
		sub	eax, 4
		mov	[esp+10F0h+var_10D8], eax
		jnb	short loc_10C4

loc_10DD:				; CODE XREF: _test+71Ej
		cmp	eax, 0FFFFFFFCh
		jz	short loc_1153

loc_10E2:				; CODE XREF: _test+724j
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_1115
		cmp	[esp+10F0h+var_10D8], 0FFFFFFFDh
		jz	short loc_1153
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_1115
		cmp	[esp+10F0h+var_10D8], 0FFFFFFFEh
		jz	short loc_1153
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_1115
		cmp	[esp+10F0h+var_10D8], 0FFFFFFFFh
		jz	short loc_1153
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jz	short loc_1153

loc_1115:				; CODE XREF: _test+742j _test+751j ...
		mov	esi, 1
		push	offset ??_C@_0CA@JDFDOIEM@BF_cfb64_encrypt?5encrypt?5error?6?$AA@ ; "BF_cfb64_encrypt encrypt error\n"
		mov	[esp+10F4h+var_10D8], esi
		call	_printf
		add	esp, 4
		test	edi, edi
		jle	short loc_1153
		xor	esi, esi
		nop	dword ptr [eax]

loc_1134:				; CODE XREF: _test+7A9j
		movzx	eax, byte ptr [esp+esi+10F0h+var_70]
		push	eax
		push	offset ??_C@_07DHGLOFCI@0x?$CF02X?0?$AA@ ; "0x%02X,"
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, edi
		jl	short loc_1134
		mov	esi, [esp+10F0h+var_10D8]

loc_1153:				; CODE XREF: _test+73Cj _test+749j ...
		mov	eax, _cbc_iv
		mov	[esp+10F0h+var_80], eax
		mov	eax, dword_36C
		mov	[esp+10F0h+var_7C], eax
		lea	eax, [esp+10F0h+var_10DC]
		push	0
		push	eax
		lea	eax, [esp+10F8h+var_80]
		mov	[esp+10F8h+var_10DC], 0
		push	eax
		lea	eax, [esp+10FCh+var_10C8]
		push	eax
		push	11h
		lea	eax, [esp+1104h+var_40]
		push	eax
		lea	eax, [esp+1108h+var_70]
		push	eax
		call	_BF_cfb64_encrypt
		push	0
		lea	ecx, [esp+1110h+var_10DC]
		push	ecx
		lea	ecx, [esp+1114h+var_80]
		push	ecx
		lea	ecx, [esp+1118h+var_10C8]
		push	ecx
		lea	eax, [edi-11h]
		push	eax
		lea	eax, [esp+1120h+var_30+1]
		push	eax
		lea	eax, [esp+1124h+var_60+1]
		push	eax
		call	_BF_cfb64_encrypt
		mov	eax, edi
		lea	ecx, [esp+1128h+var_40]
		add	esp, 38h
		mov	edx, offset _cbc_data ;	"7654321 Now is	the time for "
		sub	eax, 4
		mov	[esp+10F0h+var_10D8], eax
		jb	short loc_11FE

loc_11E5:				; CODE XREF: _test+858j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_1203
		mov	eax, [esp+10F0h+var_10D8]
		add	ecx, 4
		add	edx, 4
		sub	eax, 4
		mov	[esp+10F0h+var_10D8], eax
		jnb	short loc_11E5

loc_11FE:				; CODE XREF: _test+83Fj
		cmp	eax, 0FFFFFFFCh
		jz	short loc_123D

loc_1203:				; CODE XREF: _test+845j
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_1236
		cmp	[esp+10F0h+var_10D8], 0FFFFFFFDh
		jz	short loc_123D
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_1236
		cmp	[esp+10F0h+var_10D8], 0FFFFFFFEh
		jz	short loc_123D
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_1236
		cmp	[esp+10F0h+var_10D8], 0FFFFFFFFh
		jz	short loc_123D
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jz	short loc_123D

loc_1236:				; CODE XREF: _test+863j _test+872j ...
		sbb	eax, eax
		or	eax, 1
		jmp	short loc_123F
; ---------------------------------------------------------------------------

loc_123D:				; CODE XREF: _test+85Dj _test+86Aj ...
		xor	eax, eax

loc_123F:				; CODE XREF: _test+897j
		test	eax, eax
		jz	short loc_1255
		push	offset ??_C@_0CA@GFJAAIEJ@BF_cfb64_encrypt?5decrypt?5error?6?$AA@ ; "BF_cfb64_encrypt decrypt error\n"
		call	_printf
		add	esp, 4
		mov	esi, 1

loc_1255:				; CODE XREF: _test+89Dj
		push	offset ??_C@_0BL@HNFOJOBN@testing?5blowfish?5in?5ofb64?6?$AA@ ;	"testing blowfish in ofb64\n"
		call	_printf
		push	offset _cbc_key
		lea	eax, [esp+10F8h+var_10C8]
		push	10h
		push	eax
		call	_BF_set_key
		mov	eax, _cbc_iv
		xorps	xmm0, xmm0
		mov	[esp+1100h+var_80], eax
		mov	eax, dword_36C
		mov	[esp+1100h+var_7C], eax
		lea	eax, [esp+1100h+var_10DC]
		push	eax
		lea	eax, [esp+1104h+var_80]
		movaps	[esp+1104h+var_40], xmm0
		push	eax
		lea	eax, [esp+1108h+var_10C8]
		movaps	[esp+1108h+var_30], xmm0
		push	eax
		push	0Dh
		lea	eax, [esp+1110h+var_70]
		movq	[esp+1110h+var_20], xmm0
		push	eax
		push	offset _cbc_data ; "7654321 Now	is the time for	"
		movaps	[esp+1118h+var_70], xmm0
		movaps	[esp+1118h+var_60], xmm0
		movq	[esp+1118h+var_50], xmm0
		mov	[esp+1118h+var_10DC], 0
		call	_BF_ofb64_encrypt
		lea	eax, [esp+1118h+var_10DC]
		push	eax
		lea	eax, [esp+111Ch+var_80]
		push	eax
		lea	eax, [esp+1120h+var_10C8]
		push	eax
		lea	eax, [edi-0Dh]
		push	eax
		lea	eax, [esp+1128h+var_70+0Dh]
		push	eax
		push	(offset	_cbc_data+0Dh) ; "s the	time for "
		call	_BF_ofb64_encrypt
		mov	eax, edi
		lea	ecx, [esp+1130h+var_70]
		add	esp, 40h
		mov	edx, offset _ofb64_ok
		sub	eax, 4
		mov	[esp+10F0h+var_10D8], eax
		jb	short loc_134D
		nop	dword ptr [eax+00000000h]

loc_1334:				; CODE XREF: _test+9A7j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_1352
		mov	eax, [esp+10F0h+var_10D8]
		add	ecx, 4
		add	edx, 4
		sub	eax, 4
		mov	[esp+10F0h+var_10D8], eax
		jnb	short loc_1334

loc_134D:				; CODE XREF: _test+987j
		cmp	eax, 0FFFFFFFCh
		jz	short loc_13C3

loc_1352:				; CODE XREF: _test+994j
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_1385
		cmp	[esp+10F0h+var_10D8], 0FFFFFFFDh
		jz	short loc_13C3
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_1385
		cmp	[esp+10F0h+var_10D8], 0FFFFFFFEh
		jz	short loc_13C3
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_1385
		cmp	[esp+10F0h+var_10D8], 0FFFFFFFFh
		jz	short loc_13C3
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jz	short loc_13C3

loc_1385:				; CODE XREF: _test+9B2j _test+9C1j ...
		mov	esi, 1
		push	offset ??_C@_0CA@GKOBEPDP@BF_ofb64_encrypt?5encrypt?5error?6?$AA@ ; "BF_ofb64_encrypt encrypt error\n"
		mov	[esp+10F4h+var_10D8], esi
		call	_printf
		add	esp, 4
		test	edi, edi
		jle	short loc_13C3
		xor	esi, esi
		nop	dword ptr [eax]

loc_13A4:				; CODE XREF: _test+A19j
		movzx	eax, byte ptr [esp+esi+10F0h+var_70]
		push	eax
		push	offset ??_C@_07DHGLOFCI@0x?$CF02X?0?$AA@ ; "0x%02X,"
		call	_printf
		inc	esi
		add	esp, 8
		cmp	esi, edi
		jl	short loc_13A4
		mov	esi, [esp+10F0h+var_10D8]

loc_13C3:				; CODE XREF: _test+9ACj _test+9B9j ...
		mov	eax, _cbc_iv
		mov	[esp+10F0h+var_80], eax
		mov	eax, dword_36C
		mov	[esp+10F0h+var_7C], eax
		lea	eax, [esp+10F0h+var_10DC]
		push	eax
		lea	eax, [esp+10F4h+var_80]
		mov	[esp+10F4h+var_10DC], 0
		push	eax
		lea	eax, [esp+10F8h+var_10C8]
		push	eax
		push	11h
		lea	eax, [esp+1100h+var_40]
		push	eax
		lea	eax, [esp+1104h+var_70]
		push	eax
		call	_BF_ofb64_encrypt
		lea	eax, [esp+1108h+var_10DC]
		push	eax
		lea	eax, [esp+110Ch+var_80]
		push	eax
		lea	eax, [esp+1110h+var_10C8]
		push	eax
		lea	eax, [edi-11h]
		push	eax
		lea	eax, [esp+1118h+var_30+1]
		push	eax
		lea	eax, [esp+111Ch+var_60+1]
		push	eax
		call	_BF_ofb64_encrypt
		add	esp, 30h
		lea	ecx, [esp+10F0h+var_40]
		mov	edx, offset _cbc_data ;	"7654321 Now is	the time for "
		sub	edi, 4
		jb	short loc_145C

loc_144B:				; CODE XREF: _test+AB6j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_1461
		add	ecx, 4
		add	edx, 4
		sub	edi, 4
		jnb	short loc_144B

loc_145C:				; CODE XREF: _test+AA5j
		cmp	edi, 0FFFFFFFCh
		jz	short loc_14B4

loc_1461:				; CODE XREF: _test+AABj
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_148E
		cmp	edi, 0FFFFFFFDh
		jz	short loc_14B4
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_148E
		cmp	edi, 0FFFFFFFEh
		jz	short loc_14B4
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_148E
		cmp	edi, 0FFFFFFFFh
		jz	short loc_14B4
		mov	cl, [ecx+3]
		cmp	cl, [edx+3]
		jz	short loc_14B4

loc_148E:				; CODE XREF: _test+AC1j _test+ACEj ...
		push	offset ??_C@_0CA@JMCCKPDK@BF_ofb64_encrypt?5decrypt?5error?6?$AA@ ; "BF_ofb64_encrypt decrypt error\n"
		call	_printf
		add	esp, 4
		mov	eax, 1
		pop	edi
		pop	esi
		mov	ecx, [esp+10E8h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_14B4:				; CODE XREF: _test+ABBj _test+AC6j ...
		mov	ecx, [esp+10F0h+var_4]
		mov	eax, esi
		pop	edi
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
_test		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14CCh
; COMDAT (pick any)
		public ??_C@_0P@OIJLMDCL@ecb?5test?5data?6?$AA@
; char `string'[]
??_C@_0P@OIJLMDCL@ecb?5test?5data?6?$AA@ db 'ecb test data',0Ah,0
					; DATA XREF: _print_test_data+2o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14DCh
; COMDAT (pick any)
		public ??_C@_0CG@JBEMBKPB@key?5bytes?7?7clear?5bytes?7?7cipher?5b@
; char `string'[]
??_C@_0CG@JBEMBKPB@key?5bytes?7?7clear?5bytes?7?7cipher?5b@ db 'key bytes',9,9,'clear bytes',9,9,'cipher bytes',0Ah,0
					; DATA XREF: _print_test_data+Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1504h
; COMDAT (pick any)
		public ??_C@_04JFFKLGJF@?$CF02X?$AA@
; char `string'[]
??_C@_04JFFKLGJF@?$CF02X?$AA@ db '%02X',0 ; DATA XREF: _print_test_data+2Bo
					; _print_test_data+59o	...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 150Ch
; COMDAT (pick any)
		public ??_C@_01GPOEFGEJ@?7?$AA@
; char `string'[2]
??_C@_01GPOEFGEJ@?7?$AA@ db 9,0		; DATA XREF: _print_test_data+3Eo
					; _print_test_data+6Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1510h
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; char `string'[2]
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah,0	; DATA XREF: _print_test_data+9Co
					; _print_test_data+EEo	...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1514h
; COMDAT (pick any)
		public ??_C@_0BD@CKJJILND@set_key?5test?5data?6?$AA@
; char `string'[]
??_C@_0BD@CKJJILND@set_key?5test?5data?6?$AA@ db 'set_key test data',0Ah,0
					; DATA XREF: _print_test_data+B8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1528h
; COMDAT (pick any)
		public ??_C@_09PNPCPADC@data?$FL8?$FN?$DN?5?$AA@
; char `string'[]
??_C@_09PNPCPADC@data?$FL8?$FN?$DN?5?$AA@ db 'data[8]= ',0 ; DATA XREF: _print_test_data+C2o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1534h
; COMDAT (pick any)
		public ??_C@_02CAMHBLCK@c?$DN?$AA@
; char `string'[3]
??_C@_02CAMHBLCK@c?$DN?$AA@ db 'c=',0   ; DATA XREF: _print_test_data:loc_670o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1538h
; COMDAT (pick any)
		public ??_C@_08OJLJLCMC@?5k?$FL?$CF2u?$FN?$DN?$AA@
; char `string'[]
??_C@_08OJLJLCMC@?5k?$FL?$CF2u?$FN?$DN?$AA@ db ' k[%2u]=',0
					; DATA XREF: _print_test_data+139o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1544h
; COMDAT (pick any)
		public ??_C@_0BK@GLJLFENG@?6chaining?5mode?5test?5data?6?$AA@
; char `string'[]
??_C@_0BK@GLJLFENG@?6chaining?5mode?5test?5data?6?$AA@ db 0Ah
					; DATA XREF: _print_test_data+180o
		db 'chaining mode test data',0Ah,0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1560h
; COMDAT (pick any)
		public ??_C@_0N@IKFJAHCA@key?$FL16?$FN?5?5?5?$DN?5?$AA@
; char `string'[]
??_C@_0N@IKFJAHCA@key?$FL16?$FN?5?5?5?$DN?5?$AA@ db 'key[16]   = ',0
					; DATA XREF: _print_test_data+18Ao
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1570h
; COMDAT (pick any)
		public ??_C@_0O@PEGHBKCL@?6iv?$FL8?$FN?5?5?5?5?5?$DN?5?$AA@
; char `string'[]
??_C@_0O@PEGHBKCL@?6iv?$FL8?$FN?5?5?5?5?5?$DN?5?$AA@ db	0Ah
					; DATA XREF: _print_test_data+1BBo
		db 'iv[8]     = ',0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1580h
; COMDAT (pick any)
		public ??_C@_0BC@JPIBGNCH@?6data?$FL?$CFd?$FN?5?5?$DN?5?8?$CFs?8?$AA@
; char `string'[]
??_C@_0BC@JPIBGNCH@?6data?$FL?$CFd?$FN?5?5?$DN?5?8?$CFs?8?$AA@ db 0Ah
					; DATA XREF: _print_test_data+205o
		db 'data[%d]  = ',27h,'%s',27h,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1594h
; COMDAT (pick any)
		public ??_C@_0O@KHKMJACO@?6data?$FL?$CFd?$FN?5?5?$DN?5?$AA@
; char `string'[]
??_C@_0O@KHKMJACO@?6data?$FL?$CFd?$FN?5?5?$DN?5?$AA@ db	0Ah
					; DATA XREF: _print_test_data+22Do
		db 'data[%d]  = ',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 15A4h
; COMDAT (pick any)
		public ??_C@_0BB@PNLIHHBF@cbc?5cipher?5text?6?$AA@
; char `string'[]
??_C@_0BB@PNLIHHBF@cbc?5cipher?5text?6?$AA@ db 'cbc cipher text',0Ah,0
					; DATA XREF: _print_test_data+29Ao
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 15B8h
; COMDAT (pick any)
		public ??_C@_0N@KIILGAFO@cipher?$FL?$CFd?$FN?$DN?5?$AA@
; char `string'[]
??_C@_0N@KIILGAFO@cipher?$FL?$CFd?$FN?$DN?5?$AA@ db 'cipher[%d]= ',0
					; DATA XREF: _print_test_data+2A6o
					; _print_test_data+30Do ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 15C8h
; COMDAT (pick any)
		public ??_C@_0BD@EBGEIDAP@cfb64?5cipher?5text?6?$AA@
; char `string'[]
??_C@_0BD@EBGEIDAP@cfb64?5cipher?5text?6?$AA@ db 'cfb64 cipher text',0Ah,0
					; DATA XREF: _print_test_data+2E5o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 15DCh
; COMDAT (pick any)
		public ??_C@_0BD@KBKNJDGI@ofb64?5cipher?5text?6?$AA@
; char `string'[]
??_C@_0BD@KBKNJDGI@ofb64?5cipher?5text?6?$AA@ db 'ofb64 cipher text',0Ah,0
					; DATA XREF: _print_test_data+37Ao
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 15F0h
; COMDAT (pick any)
		public ??_C@_0CC@BFAKGEAD@testing?5blowfish?5in?5raw?5ecb?5mode@
; char `string'[]
??_C@_0CC@BFAKGEAD@testing?5blowfish?5in?5raw?5ecb?5mode@ db 'testing blowfish in raw ecb mode',0Ah,0
					; DATA XREF: _test+20o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1614h
; COMDAT (pick any)
		public ??_C@_0BN@IPPPNGEM@BF_encrypt?5error?5encrypting?6?$AA@
; char `string'[]
??_C@_0BN@IPPPNGEM@BF_encrypt?5error?5encrypting?6?$AA@	db 'BF_encrypt error encrypting',0Ah,0
					; DATA XREF: _test:loc_A58o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1634h
; COMDAT (pick any)
		public ??_C@_09DAIIHNJG@got?5?5?5?5?5?3?$AA@
; char `string'[]
??_C@_09DAIIHNJG@got?5?5?5?5?5?3?$AA@ db 'got     :',0 ; DATA XREF: _test+BEo
					; _test+172o ...
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1640h
; COMDAT (pick any)
		public ??_C@_06OMOGNBEB@?$CF08lX?5?$AA@
; char `string'[]
??_C@_06OMOGNBEB@?$CF08lX?5?$AA@ db '%08lX ',0 ; DATA XREF: _test+D4o
					; _test+10Eo ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1648h
; COMDAT (pick any)
		public ??_C@_09PBKDEKON@expected?3?$AA@
; char `string'[]
??_C@_09PBKDEKON@expected?3?$AA@ db 'expected:',0 ; DATA XREF: _test+F1o
					; _test+1A2o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1654h
; COMDAT (pick any)
		public ??_C@_0BN@DHHLBNGH@BF_encrypt?5error?5decrypting?6?$AA@
; char `string'[]
??_C@_0BN@DHHLBNGH@BF_encrypt?5error?5decrypting?6?$AA@	db 'BF_encrypt error decrypting',0Ah,0
					; DATA XREF: _test:loc_B0Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1674h
; COMDAT (pick any)
		public ??_C@_0BO@FELALHFM@testing?5blowfish?5in?5ecb?5mode?6?$AA@
; char `string'[]
??_C@_0BO@FELALHFM@testing?5blowfish?5in?5ecb?5mode?6?$AA@ db 'testing blowfish in ecb mode',0Ah,0
					; DATA XREF: _test+1F6o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1694h
; COMDAT (pick any)
		public ??_C@_0CK@PAINIMOB@BF_ecb_encrypt?5blowfish?5error?5en@
; char `string'[]
??_C@_0CK@PAINIMOB@BF_ecb_encrypt?5blowfish?5error?5en@	db 'BF_ecb_encrypt blowfish error encrypting',0Ah,0
					; DATA XREF: _test:loc_C11o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 16C0h
; COMDAT (pick any)
		public ??_C@_05BFHEBJNP@?$CF02X?5?$AA@
; char `string'[]
??_C@_05BFHEBJNP@?$CF02X?5?$AA@	db '%02X ',0 ; DATA XREF: _test+299o
					; _test+2DDo ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 16C8h
; COMDAT (pick any)
		public ??_C@_0CB@MJMJHHEI@BF_ecb_encrypt?5error?5decrypting?6@
; char `string'[]
??_C@_0CB@MJMJHHEI@BF_ecb_encrypt?5error?5decrypting?6@	db 'BF_ecb_encrypt error decrypting',0Ah,0
					; DATA XREF: _test:loc_CE4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 16ECh
; COMDAT (pick any)
		public ??_C@_0BK@FBPFHGKJ@testing?5blowfish?5set_key?6?$AA@
; char `string'[]
??_C@_0BK@FBPFHGKJ@testing?5blowfish?5set_key?6?$AA@ db	'testing blowfish set_key',0Ah,0
					; DATA XREF: _test+3E4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1708h
; COMDAT (pick any)
		public ??_C@_0BH@EMDELIGP@blowfish?5setkey?5error?6?$AA@
; char `string'[]
??_C@_0BH@EMDELIGP@blowfish?5setkey?5error?6?$AA@ db 'blowfish setkey error',0Ah,0
					; DATA XREF: _test:loc_DF2o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1720h
; COMDAT (pick any)
		public ??_C@_0BO@ICHPNDMG@testing?5blowfish?5in?5cbc?5mode?6?$AA@
; char `string'[]
??_C@_0BO@ICHPNDMG@testing?5blowfish?5in?5cbc?5mode?6?$AA@ db 'testing blowfish in cbc mode',0Ah,0
					; DATA XREF: _test+46Eo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1740h
; COMDAT (pick any)
		public ??_C@_0BO@KPEFADCK@BF_cbc_encrypt?5encrypt?5error?6?$AA@
; char `string'[]
??_C@_0BO@KPEFADCK@BF_cbc_encrypt?5encrypt?5error?6?$AA@ db 'BF_cbc_encrypt encrypt error',0Ah,0
					; DATA XREF: _test:loc_EE1o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1760h
; COMDAT (pick any)
		public ??_C@_07DHGLOFCI@0x?$CF02X?0?$AA@
; char `string'[]
??_C@_07DHGLOFCI@0x?$CF02X?0?$AA@ db '0x%02X,',0 ; DATA XREF: _test+55Ao
					; _test+799o ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1768h
; COMDAT (pick any)
		public ??_C@_0BO@FJIGODCP@BF_cbc_encrypt?5decrypt?5error?6?$AA@
; char `string'[]
??_C@_0BO@FJIGODCP@BF_cbc_encrypt?5decrypt?5error?6?$AA@ db 'BF_cbc_encrypt decrypt error',0Ah,0
					; DATA XREF: _test:loc_FD6o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1788h
; COMDAT (pick any)
		public ??_C@_0CA@PICEJHPL@testing?5blowfish?5in?5cfb64?5mode?6?$AA@
; char `string'[]
??_C@_0CA@PICEJHPL@testing?5blowfish?5in?5cfb64?5mode?6?$AA@ db	'testing blowfish in cfb64 mode',0Ah,0
					; DATA XREF: _test:loc_FE8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 17A8h
; COMDAT (pick any)
		public ??_C@_0CA@JDFDOIEM@BF_cfb64_encrypt?5encrypt?5error?6?$AA@
; char `string'[]
??_C@_0CA@JDFDOIEM@BF_cfb64_encrypt?5encrypt?5error?6?$AA@ db 'BF_cfb64_encrypt encrypt error',0Ah,0
					; DATA XREF: _test+776o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 17C8h
; COMDAT (pick any)
		public ??_C@_0CA@GFJAAIEJ@BF_cfb64_encrypt?5decrypt?5error?6?$AA@
; char `string'[]
??_C@_0CA@GFJAAIEJ@BF_cfb64_encrypt?5decrypt?5error?6?$AA@ db 'BF_cfb64_encrypt decrypt error',0Ah,0
					; DATA XREF: _test+89Fo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 17E8h
; COMDAT (pick any)
		public ??_C@_0BL@HNFOJOBN@testing?5blowfish?5in?5ofb64?6?$AA@
; char `string'[]
??_C@_0BL@HNFOJOBN@testing?5blowfish?5in?5ofb64?6?$AA@ db 'testing blowfish in ofb64',0Ah,0
					; DATA XREF: _test:loc_1255o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1804h
; COMDAT (pick any)
		public ??_C@_0CA@GKOBEPDP@BF_ofb64_encrypt?5encrypt?5error?6?$AA@
; char `string'[]
??_C@_0CA@GKOBEPDP@BF_ofb64_encrypt?5encrypt?5error?6?$AA@ db 'BF_ofb64_encrypt encrypt error',0Ah,0
					; DATA XREF: _test+9E6o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1824h
; COMDAT (pick any)
		public ??_C@_0CA@JMCCKPDK@BF_ofb64_encrypt?5decrypt?5error?6?$AA@
; char `string'[]
??_C@_0CA@JMCCKPDK@BF_ofb64_encrypt?5decrypt?5error?6?$AA@ db 'BF_ofb64_encrypt decrypt error',0Ah,0
					; DATA XREF: _test:loc_148Eo
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _printf+7p
					; DATA XREF: _printf+7r
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _printf+23p
					; DATA XREF: ...
; void __cdecl __noreturn _exit(int Code)
		extrn __imp__exit:near	; CODE XREF: _main+14p
					; DATA XREF: _main+14r
		extrn _BF_set_key:near	; CODE XREF: _test+60p	_test+21Fp ...
		extrn _BF_encrypt:near	; CODE XREF: _test+89p
		extrn _BF_decrypt:near	; CODE XREF: _test+13Dp
		extrn _BF_ecb_encrypt:near ; CODE XREF:	_test+23Fp _test+312p	...
		extrn _BF_cbc_encrypt:near ; CODE XREF:	_test+50Cp _test+5A9p
		extrn _BF_cfb64_encrypt:near ; CODE XREF: _test+6D7p
					; _test+701p ...
		extrn _BF_ofb64_encrypt:near ; CODE XREF: _test+942p
					; _test+96Ap ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _test+B07p
					; _test+B1Dp
		extrn __chkstk:near	; CODE XREF: _test+Bp
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso
		extrn ___security_cookie:near ;	DATA XREF: _test+10r


		end
