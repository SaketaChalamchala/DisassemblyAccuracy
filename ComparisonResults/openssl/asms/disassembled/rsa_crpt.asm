;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	E864C7C719522E781E2B1393E6042F53
; Input	CRC32 :	58FF3840

; File Name   :	C:\compspace\Diff\openssl\obj\rsa_crpt.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_blinding_off
_RSA_blinding_off proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+50h]
		test	eax, eax
		jz	short loc_1C
		push	eax
		call	_BN_BLINDING_free
		add	esp, 4
		mov	dword ptr [esi+50h], 0

loc_1C:					; CODE XREF: _RSA_blinding_off+Aj
		mov	eax, [esi+3Ch]
		and	eax, 0FFFFFFF7h
		or	eax, 80h
		mov	[esi+3Ch], eax
		pop	esi
		retn
_RSA_blinding_off endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_blinding_on
_RSA_blinding_on proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+50h]
		test	eax, eax
		jz	short loc_56
		push	eax
		call	_BN_BLINDING_free
		mov	eax, [esi+3Ch]
		add	esp, 4
		and	eax, 0FFFFFFF7h
		mov	dword ptr [esi+50h], 0
		or	eax, 80h
		mov	[esi+3Ch], eax

loc_56:					; CODE XREF: _RSA_blinding_on+Aj
		push	[esp+4+arg_4]
		push	esi
		call	_RSA_setup_blinding
		add	esp, 8
		mov	[esi+50h], eax
		test	eax, eax
		jz	short loc_7F
		mov	eax, [esi+3Ch]
		and	eax, 0FFFFFF7Fh
		or	eax, 8
		mov	[esi+3Ch], eax
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_7F:					; CODE XREF: _RSA_blinding_on+3Cj
		xor	eax, eax

$err$10:
		pop	esi
		retn
_RSA_blinding_on endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 84h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_flags
_RSA_flags	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_8D
		retn
; ---------------------------------------------------------------------------

loc_8D:					; CODE XREF: _RSA_flags+6j
		mov	eax, [eax+8]
		mov	eax, [eax+24h]
		retn
_RSA_flags	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 94h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_private_decrypt
_RSA_private_decrypt proc near

arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		mov	ecx, [eax+8]
		mov	[esp+arg_C], eax
		mov	eax, [ecx+10h]
		jmp	eax
_RSA_private_decrypt endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_private_encrypt
_RSA_private_encrypt proc near

arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		mov	ecx, [eax+8]
		mov	[esp+arg_C], eax
		mov	eax, [ecx+0Ch]
		jmp	eax
_RSA_private_encrypt endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_public_decrypt
_RSA_public_decrypt proc near

arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		mov	ecx, [eax+8]
		mov	[esp+arg_C], eax
		mov	eax, [ecx+8]
		jmp	eax
_RSA_public_decrypt endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_public_encrypt
_RSA_public_encrypt proc near

arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		mov	ecx, [eax+8]
		mov	[esp+arg_C], eax
		mov	eax, [ecx+4]
		jmp	eax
_RSA_public_encrypt endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_setup_blinding
_RSA_setup_blinding proc near		; CODE XREF: _RSA_blinding_on+2Fp

var_2C		= qword	ptr -2Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 14h
		call	__chkstk
		mov	eax, [esp+14h+arg_4]
		push	ebp
		xor	ebp, ebp
		push	edi
		test	eax, eax
		jnz	short loc_FB
		call	_BN_CTX_new
		mov	edi, eax
		test	edi, edi
		jnz	short loc_FD
		pop	edi
		pop	ebp
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_FB:					; CODE XREF: _RSA_setup_blinding+14j
		mov	edi, eax

loc_FD:					; CODE XREF: _RSA_setup_blinding+1Fj
		push	ebx
		push	esi
		push	edi
		call	_BN_CTX_start
		push	edi
		call	_BN_CTX_get
		mov	esi, [esp+2Ch+arg_0]
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_138
		push	0CCh ; 'Ì'
		push	offset ??_C@_0BI@BHJPKCFE@?4?2crypto?2rsa?2rsa_crpt?4c?$AA@ ; ".\\crypto\\rsa\\rsa_crpt.c"
		push	41h ; 'A'
		push	88h ; 'ˆ'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$17
; ---------------------------------------------------------------------------

loc_138:				; CODE XREF: _RSA_setup_blinding+42j
		mov	ebx, [esi+14h]
		test	ebx, ebx
		jnz	short loc_17A
		push	edi
		push	dword ptr [esi+20h]
		push	dword ptr [esi+1Ch]
		push	dword ptr [esi+18h]
		call	_rsa_get_public_exp
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jnz	short loc_17A
		push	0D3h ; 'Ó'
		push	offset ??_C@_0BI@BHJPKCFE@?4?2crypto?2rsa?2rsa_crpt?4c?$AA@ ; ".\\crypto\\rsa\\rsa_crpt.c"
		push	8Ch ; 'Œ'
		push	88h ; 'ˆ'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$17
; ---------------------------------------------------------------------------

loc_17A:				; CODE XREF: _RSA_setup_blinding+69j
					; _RSA_setup_blinding+81j
		call	_RAND_status
		test	eax, eax
		jnz	short loc_1B2
		mov	ecx, [esi+18h]
		test	ecx, ecx
		jz	short loc_1B2
		mov	edx, [ecx]
		test	edx, edx
		jz	short loc_1B2
		mov	eax, 8
		call	__chkstk
		mov	eax, [ecx+8]
		xorps	xmm0, xmm0
		movsd	[esp+2Ch+var_2C], xmm0
		shl	eax, 2
		push	eax
		push	edx
		call	_RAND_add
		add	esp, 10h

loc_1B2:				; CODE XREF: _RSA_setup_blinding+ADj
					; _RSA_setup_blinding+B4j ...
		test	dword ptr [esi+3Ch], 100h
		jnz	short loc_1F5
		mov	ecx, [esi+10h]
		lea	edx, [esp+24h+var_14]
		mov	eax, [ecx]
		mov	[esp+24h+var_14], eax
		mov	eax, [ecx+4]
		mov	[esp+24h+var_10], eax
		mov	eax, [ecx+8]
		mov	[esp+24h+var_C], eax
		mov	eax, [ecx+0Ch]
		mov	[esp+24h+var_8], eax
		mov	ecx, [ecx+10h]
		mov	eax, [esp+24h+var_4]
		and	ecx, 0FFFFFFFEh
		and	eax, 1
		or	ecx, eax
		or	ecx, 6
		mov	[esp+24h+var_4], ecx
		jmp	short loc_1F8
; ---------------------------------------------------------------------------

loc_1F5:				; CODE XREF: _RSA_setup_blinding+E5j
		mov	edx, [esi+10h]

loc_1F8:				; CODE XREF: _RSA_setup_blinding+11Fj
		push	dword ptr [esi+40h]
		mov	eax, [esi+8]
		push	dword ptr [eax+18h]
		push	edi
		push	edx
		push	ebx
		push	0
		call	_BN_BLINDING_create_param
		mov	ebp, eax
		add	esp, 18h
		test	ebp, ebp
		jnz	short loc_231
		push	0EBh ; 'ë'
		push	offset ??_C@_0BI@BHJPKCFE@?4?2crypto?2rsa?2rsa_crpt?4c?$AA@ ; ".\\crypto\\rsa\\rsa_crpt.c"
		push	3
		push	88h ; 'ˆ'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	short $err$17
; ---------------------------------------------------------------------------

loc_231:				; CODE XREF: _RSA_setup_blinding+13Ej
		push	ebp
		call	_BN_BLINDING_thread_id
		push	eax
		call	_CRYPTO_THREADID_current
		add	esp, 8

$err$17:				; CODE XREF: _RSA_setup_blinding+5Fj
					; _RSA_setup_blinding+A1j ...
		push	edi
		call	_BN_CTX_end
		add	esp, 4
		cmp	[esp+24h+arg_4], 0
		jnz	short loc_259
		push	edi
		call	_BN_CTX_free
		add	esp, 4

loc_259:				; CODE XREF: _RSA_setup_blinding+17Aj
		cmp	dword ptr [esi+14h], 0
		jnz	short loc_268
		push	ebx
		call	_BN_free
		add	esp, 4

loc_268:				; CODE XREF: _RSA_setup_blinding+189j
		pop	esi
		pop	ebx
		pop	edi
		mov	eax, ebp
		pop	ebp
		add	esp, 14h
		retn
_RSA_setup_blinding endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 274h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_size
_RSA_size	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+10h]
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		retn
_RSA_size	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 290h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_get_public_exp proc near		; CODE XREF: _RSA_setup_blinding+75p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 0Ch
		call	__chkstk
		push	ebx
		xor	ebx, ebx
		push	ebp
		cmp	[esp+14h+arg_0], ebx
		jz	loc_35A
		mov	ebp, [esp+14h+arg_4]
		test	ebp, ebp
		jz	loc_35A
		cmp	[esp+14h+arg_8], ebx
		jz	loc_35A
		push	esi
		mov	esi, [esp+18h+arg_C]
		push	esi
		call	_BN_CTX_start
		push	esi
		call	_BN_CTX_get
		push	esi
		mov	[esp+24h+var_4], eax
		call	_BN_CTX_get
		push	esi
		mov	[esp+28h+var_C], eax
		call	_BN_CTX_get
		add	esp, 10h
		mov	[esp+18h+var_8], eax
		test	eax, eax
		jz	short $err$10_0
		call	_BN_value_one
		push	eax
		push	ebp
		push	[esp+20h+var_C]
		call	_BN_sub
		add	esp, 0Ch
		test	eax, eax
		jz	short $err$10_0
		call	_BN_value_one
		mov	ebp, [esp+18h+var_8]
		push	eax
		push	[esp+1Ch+arg_8]
		push	ebp
		call	_BN_sub
		add	esp, 0Ch
		test	eax, eax
		jz	short $err$10_0
		push	esi
		push	ebp
		push	[esp+20h+var_C]
		mov	ebp, [esp+24h+var_4]
		push	ebp
		call	_BN_mul
		add	esp, 10h
		test	eax, eax
		jz	short $err$10_0
		push	esi
		push	ebp
		push	[esp+20h+arg_0]
		push	ebx
		call	_BN_mod_inverse
		add	esp, 10h
		mov	ebx, eax

$err$10_0:				; CODE XREF: _rsa_get_public_exp+5Cj
					; _rsa_get_public_exp+73j ...
		push	esi
		call	_BN_CTX_end
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_35A:				; CODE XREF: _rsa_get_public_exp+12j
					; _rsa_get_public_exp+1Ej ...
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
_rsa_get_public_exp endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 364h
; COMDAT (pick any)
		public ??_C@_0BI@BHJPKCFE@?4?2crypto?2rsa?2rsa_crpt?4c?$AA@
; `string'
??_C@_0BI@BHJPKCFE@?4?2crypto?2rsa?2rsa_crpt?4c?$AA@ db	'.\crypto\rsa\rsa_crpt.c',0
					; DATA XREF: _RSA_setup_blinding+49o
					; _RSA_setup_blinding+88o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_THREADID_current:near ; CODE XREF: _RSA_setup_blinding+164p
		extrn _ERR_put_error:near ; CODE XREF: _RSA_setup_blinding+57p
					; _RSA_setup_blinding+99p ...
		extrn _BN_value_one:near ; CODE	XREF: _rsa_get_public_exp+5Ep
					; _rsa_get_public_exp+75p
		extrn _BN_CTX_new:near	; CODE XREF: _RSA_setup_blinding+16p
		extrn _BN_CTX_free:near	; CODE XREF: _RSA_setup_blinding+17Dp
		extrn _BN_CTX_start:near ; CODE	XREF: _RSA_setup_blinding+2Cp
					; _rsa_get_public_exp+34p
		extrn _BN_CTX_get:near	; CODE XREF: _RSA_setup_blinding+32p
					; _rsa_get_public_exp+3Ap ...
		extrn _BN_CTX_end:near	; CODE XREF: _RSA_setup_blinding+16Dp
					; _rsa_get_public_exp+B9p
		extrn _BN_num_bits:near	; CODE XREF: _RSA_size+7p
		extrn _BN_sub:near	; CODE XREF: _rsa_get_public_exp+69p
					; _rsa_get_public_exp+84p
		extrn _BN_mul:near	; CODE XREF: _rsa_get_public_exp+9Bp
		extrn _BN_free:near	; CODE XREF: _RSA_setup_blinding+18Cp
		extrn _BN_mod_inverse:near ; CODE XREF:	_rsa_get_public_exp+AEp
		extrn _BN_BLINDING_free:near ; CODE XREF: _RSA_blinding_off+Dp
					; _RSA_blinding_on+Dp
		extrn _BN_BLINDING_thread_id:near ; CODE XREF: _RSA_setup_blinding+15Ep
		extrn _BN_BLINDING_create_param:near ; CODE XREF: _RSA_setup_blinding+132p
		extrn _RAND_add:near	; CODE XREF: _RSA_setup_blinding+D6p
		extrn _RAND_status:near	; CODE XREF: _RSA_setup_blinding:loc_17Ap
		extrn __chkstk:near	; CODE XREF: _RSA_setup_blinding+5p
					; _RSA_setup_blinding+C1p ...
		extrn __fltused:near


		end
