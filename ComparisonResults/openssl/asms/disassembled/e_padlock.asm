;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	55EF082CA5A58BBA57B0733C24A9929F
; Input	CRC32 :	FB115627

; File Name   :	C:\compspace\Diff\openssl\obj\e_padlock.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
_padlock_cipher_nids dd	offset loc_1A1+1 ; DATA	XREF: _padlock_ciphers+Co
		dd offset loc_1A1+2
		dd offset loc_1A1+4
		dd offset loc_1A1+3
		dd offset loc_1A6
		dd offset loc_1A7
		dd offset loc_1A9
		dd offset loc_1A8
		dd offset loc_1A9+1
		dd offset loc_1A9+2
		dd offset loc_1A9+4
		dd offset loc_1A9+3
_padlock_cipher_nids_num dd 0Ch		; DATA XREF: _padlock_ciphers+12r
_padlock_rand	dd 0			; DATA XREF: _padlock_bind_helper+9Ao
		dd offset _padlock_rand_bytes
		dd 2 dup(0)
		dd offset _padlock_rand_bytes
		dd offset _padlock_rand_status
_padlock_id	dd offset ??_C@_07HLDGABBH@padlock?$AA@	; DATA XREF: _bind_engine+75r
					; _padlock_bind_fn+8r ...
					; "padlock"
_padlock_aes_align_required dd 1	; DATA XREF: _padlock_aes_cipher+101r
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 54h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_padlock_aes_init_key proc near		; DATA XREF: .rdata:00000758o
					; .rdata:0000078Co ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		mov	edi, [esp+8+arg_0]
		push	edi
		call	_EVP_CIPHER_CTX_key_length
		mov	ebp, eax
		add	esp, 4
		shl	ebp, 3
		cmp	[esp+8+arg_4], 0
		jnz	short loc_74
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_74:					; CODE XREF: _padlock_aes_init_key+19j
		push	esi
		mov	esi, [edi+60h]
		neg	esi
		push	114h		; Size
		and	esi, 0Fh
		add	esi, [edi+60h]
		push	0		; Val
		push	esi		; Dst
		call	_memset
		push	edi
		call	_EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		add	esp, 10h
		cmp	eax, 4
		jnz	short loc_A9
		and	dword ptr [esi+10h], 0FFFFFDFFh
		jmp	short loc_BF
; ---------------------------------------------------------------------------

loc_A9:					; CODE XREF: _padlock_aes_init_key+4Aj
		xor	eax, eax
		cmp	[edi+8], eax
		setz	al
		shl	eax, 9
		xor	eax, [esi+10h]
		and	eax, 200h
		xor	[esi+10h], eax

loc_BF:					; CODE XREF: _padlock_aes_init_key+53j
		lea	eax, [ebp-80h]
		cdq
		and	edx, 1Fh
		push	ebx
		lea	ebx, [edx+eax]
		sar	ebx, 5
		lea	eax, [ebp-80h]
		cdq
		sub	ebx, 6
		xor	ebx, [esi+10h]
		and	edx, 3Fh
		add	eax, edx
		and	ebx, 0Fh
		xor	ebx, [esi+10h]
		sar	eax, 6
		shl	eax, 0Ah
		xor	eax, ebx
		and	eax, 0C00h
		xor	ebx, eax
		mov	eax, ebp
		mov	[esi+10h], ebx
		sub	eax, 80h ; '€'
		jz	loc_18D
		sub	eax, 40h ; '@'
		jz	short loc_112
		sub	eax, 40h ; '@'
		jz	short loc_112
		pop	ebx
		pop	esi
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_112:				; CODE XREF: _padlock_aes_init_key+B0j
					; _padlock_aes_init_key+B5j
		push	edi
		call	_EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		add	esp, 4
		cmp	eax, 3

loc_123:				; DATA XREF: .rdata:00000764o
					; .rdata:00000798o ...
		jz	short loc_166
		push	edi
		call	_EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		add	esp, 4
		cmp	eax, 4
		jz	short loc_166
		cmp	[esp+10h+arg_C], 0
		jnz	short loc_166
		lea	eax, [esi+20h]
		push	eax
		push	ebp
		push	[esp+18h+arg_4]
		call	_AES_set_decrypt_key
		or	dword ptr [esi+10h], 80h
		add	esp, 0Ch
		call	@padlock_reload_key@0 ;	padlock_reload_key()
		pop	ebx
		pop	esi
		pop	edi
		mov	eax, 1
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_166:				; CODE XREF: _padlock_aes_init_key:loc_123j
					; _padlock_aes_init_key+E2j ...
		lea	eax, [esi+20h]
		push	eax
		push	ebp
		push	[esp+18h+arg_4]
		call	_AES_set_encrypt_key
		or	dword ptr [esi+10h], 80h
		add	esp, 0Ch
		call	@padlock_reload_key@0 ;	padlock_reload_key()
		pop	ebx
		pop	esi
		pop	edi
		mov	eax, 1
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_18D:				; CODE XREF: _padlock_aes_init_key+A7j
		mov	eax, [esp+10h+arg_4]
		and	ebx, 0FFFFFF7Fh
		movups	xmm0, xmmword ptr [eax]
		mov	[esi+10h], ebx
		movups	xmmword	ptr [esi+20h], xmm0

loc_1A1:				; DATA XREF: .data:_padlock_cipher_nidso
					; .rdata:_padlock_aes_128_ecbo	...
		call	@padlock_reload_key@0 ;	padlock_reload_key()

loc_1A6:				; DATA XREF: .data:00000010o
					; .rdata:_padlock_aes_192_ecbo
		pop	ebx

loc_1A7:				; DATA XREF: .data:00000014o
					; .rdata:_padlock_aes_192_cbco
		pop	esi

loc_1A8:				; DATA XREF: .data:0000001Co
					; .rdata:_padlock_aes_192_ofbo
		pop	edi

loc_1A9:				; DATA XREF: .data:00000018o
					; .rdata:_padlock_aes_192_cfbo	...
		mov	eax, 1
		pop	ebp
		retn
_padlock_aes_init_key endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl padlock_aes_cipher(int, void *, void *Src, int)
_padlock_aes_cipher proc near		; DATA XREF: .rdata:0000075Co
					; .rdata:00000790o ...

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
Dst		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Src		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	eax, 20h ; ' '
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		xor	ecx, ecx
		mov	[ebp+var_20], ecx
		mov	ecx, [ebp+arg_0]
		push	ebx
		push	esi
		push	edi
		mov	eax, [ecx+50h]
		mov	[ebp+var_14], eax
		test	eax, eax
		jz	loc_29D
		push	ecx
		call	_EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		add	esp, 4
		sub	eax, 3
		jz	short loc_233
		sub	eax, 1
		jnz	loc_29D
		mov	ecx, [ebp+var_14]
		cmp	ecx, 10h
		jnb	loc_71D		; jumptable 0000038A default case
		mov	ebx, [ebp+arg_C]
		mov	edi, [ebp+Src]
		mov	esi, [ebp+arg_4]
		mov	edx, [ebp+arg_0]

loc_214:				; CODE XREF: _padlock_aes_cipher+77j
		test	ebx, ebx
		jz	short loc_229
		mov	al, [edx+ecx+20h]
		dec	ebx
		xor	al, [edi]
		inc	ecx
		mov	[esi], al
		inc	edi
		inc	esi
		cmp	ecx, 10h
		jb	short loc_214

loc_229:				; CODE XREF: _padlock_aes_cipher+66j
		and	ecx, 0Fh
		mov	[edx+50h], ecx
		mov	ecx, edx
		jmp	short loc_2A9
; ---------------------------------------------------------------------------

loc_233:				; CODE XREF: _padlock_aes_cipher+41j
		mov	edx, [ebp+var_14]
		cmp	edx, 10h
		jnb	loc_71D		; jumptable 0000038A default case
		mov	ecx, [ebp+arg_0]
		mov	ebx, [ebp+arg_C]
		mov	edi, [ebp+Src]
		mov	esi, [ebp+arg_4]
		cmp	dword ptr [ecx+8], 0
		jz	short loc_272

loc_251:				; CODE XREF: _padlock_aes_cipher+B8j
		test	ebx, ebx
		jz	short loc_295
		mov	al, [edi]
		dec	ebx
		xor	al, [ecx+edx+20h]
		inc	edi
		mov	[esi], al
		inc	esi
		mov	[ecx+edx+20h], al
		inc	edx
		cmp	edx, 10h
		jb	short loc_251
		and	edx, 0Fh
		mov	[ecx+50h], edx
		jmp	short loc_2A9
; ---------------------------------------------------------------------------

loc_272:				; CODE XREF: _padlock_aes_cipher+9Fj
		mov	eax, ecx

loc_274:				; CODE XREF: _padlock_aes_cipher+E0j
		test	ebx, ebx
		jz	short loc_292
		mov	al, [eax+edx+20h]
		dec	ebx
		mov	cl, [edi]
		inc	edi
		xor	al, cl
		mov	[esi], al
		inc	esi
		mov	eax, [ebp+arg_0]
		mov	[eax+edx+20h], cl
		inc	edx
		cmp	edx, 10h
		jb	short loc_274

loc_292:				; CODE XREF: _padlock_aes_cipher+C6j
		mov	ecx, [ebp+arg_0]

loc_295:				; CODE XREF: _padlock_aes_cipher+A3j
		and	edx, 0Fh
		mov	[ecx+50h], edx
		jmp	short loc_2A9
; ---------------------------------------------------------------------------

loc_29D:				; CODE XREF: _padlock_aes_cipher+2Aj
					; _padlock_aes_cipher+46j
		mov	ebx, [ebp+arg_C]
		mov	edi, [ebp+Src]
		mov	esi, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]

loc_2A9:				; CODE XREF: _padlock_aes_cipher+81j
					; _padlock_aes_cipher+C0j ...
		test	ebx, ebx
		jz	loc_704
		cmp	_padlock_aes_align_required, 0
		jnz	short loc_2DF
		test	bl, 0Fh
		jnz	short loc_2DF
		push	ebx
		push	edi
		push	esi
		push	ecx
		call	_padlock_aes_cipher_omnivorous
		add	esp, 10h
		lea	esp, [ebp-2Ch]
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_2DF:				; CODE XREF: _padlock_aes_cipher+108j
					; _padlock_aes_cipher+10Dj
		mov	edx, esi
		mov	ecx, edi
		and	edx, 0Fh
		and	ecx, 0Fh
		mov	eax, edx
		mov	[ebp+var_14], ecx
		or	eax, ecx
		mov	[ebp+var_1C], edx
		jnz	short loc_31C
		test	bl, 0Fh
		jnz	short loc_31C
		push	ebx
		push	edi
		push	esi
		push	[ebp+arg_0]
		call	_padlock_aes_cipher_omnivorous
		add	esp, 10h
		lea	esp, [ebp-2Ch]
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_31C:				; CODE XREF: _padlock_aes_cipher+143j
					; _padlock_aes_cipher+148j
		mov	eax, ebx
		mov	ecx, 200h
		and	eax, 1FFh
		cmovz	eax, ecx
		mov	[ebp+var_8], eax
		test	edx, edx
		jz	short loc_359
		cmp	eax, ebx
		mov	ecx, ebx
		mov	eax, 200h
		cmovb	ecx, eax
		mov	[ebp+var_20], ecx
		lea	eax, [ecx+10h]
		call	__alloca_probe_16
		mov	ecx, esp
		mov	eax, ecx
		neg	eax
		and	eax, 0Fh
		add	ecx, eax
		mov	[ebp+Dst], ecx
		jmp	short loc_35C
; ---------------------------------------------------------------------------

loc_359:				; CODE XREF: _padlock_aes_cipher+180j
		mov	[ebp+Dst], esi

loc_35C:				; CODE XREF: _padlock_aes_cipher+1A7j
		mov	edx, [ebp+arg_0]
		mov	ecx, [edx+60h]
		neg	ecx
		and	ecx, 0Fh
		add	ecx, [edx+60h]
		mov	[ebp+var_10], ecx
		call	@padlock_verify_context@4 ; padlock_verify_context(x)
		push	edx
		call	_EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		add	esp, 4
		dec	eax
		cmp	eax, 3		; switch 4 cases
		ja	loc_71D		; jumptable 0000038A default case
		jmp	ds:$LN252[eax*4] ; switch jump
; ---------------------------------------------------------------------------

$LN239:					; CODE XREF: _padlock_aes_cipher+1DAj
					; DATA XREF: .text$mn:$LN252o
		mov	eax, [ebp+var_8] ; jumptable 0000038A case 0

loc_394:				; CODE XREF: _padlock_aes_cipher+247j
		cmp	[ebp+var_14], 0
		jz	short loc_3B1
		and	eax, 0FFFFFFFCh
		push	eax		; Size
		push	edi		; Src
		push	[ebp+Dst]	; Dst
		call	_memcpy
		mov	ecx, eax
		add	esp, 0Ch
		mov	eax, [ebp+var_8]
		jmp	short loc_3B3
; ---------------------------------------------------------------------------

loc_3B1:				; CODE XREF: _padlock_aes_cipher+1E8j
		mov	ecx, edi

loc_3B3:				; CODE XREF: _padlock_aes_cipher+1FFj
		mov	edx, [ebp+var_10]
		add	edi, eax
		push	ecx
		push	[ebp+Dst]
		mov	ecx, eax
		shr	ecx, 4
		call	@padlock_xcrypt_ecb@16 ; padlock_xcrypt_ecb(x,x,x,x)
		cmp	[ebp+var_1C], 0
		mov	eax, [ebp+var_8]
		jz	short loc_3E8
		and	eax, 0FFFFFFFCh
		push	eax		; Size
		push	[ebp+Dst]	; Src
		push	esi		; Dst
		call	_memcpy
		mov	esi, eax
		add	esp, 0Ch
		mov	eax, [ebp+var_8]
		add	esi, eax
		jmp	short loc_3ED
; ---------------------------------------------------------------------------

loc_3E8:				; CODE XREF: _padlock_aes_cipher+21Dj
		add	esi, eax
		mov	[ebp+Dst], esi

loc_3ED:				; CODE XREF: _padlock_aes_cipher+236j
		sub	ebx, eax
		mov	eax, 200h
		mov	[ebp+var_8], eax
		jnz	short loc_394
		mov	ecx, [ebp+var_10]
		jmp	loc_6D2
; ---------------------------------------------------------------------------

$LN50:					; CODE XREF: _padlock_aes_cipher+1DAj
					; DATA XREF: .text$mn:$LN252o
		mov	eax, [ebp+arg_0] ; jumptable 0000038A case 1
		movups	xmm0, xmmword ptr [eax+20h]
		mov	eax, [ebp+var_10]
		movups	xmmword	ptr [eax], xmm0
		mov	eax, [ebp+var_8]

$cbc_shortcut$253:			; CODE XREF: _padlock_aes_cipher+2DEj
		cmp	[ebp+var_14], 0
		jz	short loc_42E
		and	eax, 0FFFFFFFCh
		push	eax		; Size
		push	edi		; Src
		push	[ebp+Dst]	; Dst
		call	_memcpy
		mov	ecx, eax
		add	esp, 0Ch
		mov	eax, [ebp+var_8]
		jmp	short loc_430
; ---------------------------------------------------------------------------

loc_42E:				; CODE XREF: _padlock_aes_cipher+265j
		mov	ecx, edi

loc_430:				; CODE XREF: _padlock_aes_cipher+27Cj
		mov	edx, [ebp+var_10]
		add	edi, eax
		push	ecx
		push	[ebp+Dst]
		mov	ecx, eax
		shr	ecx, 4
		call	@padlock_xcrypt_cbc@16 ; padlock_xcrypt_cbc(x,x,x,x)
		cmp	[ebp+var_1C], 0
		mov	ecx, eax
		mov	[ebp+var_18], ecx
		jz	short loc_46D
		mov	ecx, [ebp+var_8]
		and	ecx, 0FFFFFFFCh
		push	ecx		; Size
		push	[ebp+Dst]	; Src
		push	esi		; Dst
		call	_memcpy
		mov	ecx, [ebp+var_18]
		mov	esi, eax
		mov	eax, [ebp+var_8]
		add	esp, 0Ch
		add	esi, eax
		jmp	short loc_475
; ---------------------------------------------------------------------------

loc_46D:				; CODE XREF: _padlock_aes_cipher+29Cj
		mov	eax, [ebp+var_8]
		add	esi, eax
		mov	[ebp+Dst], esi

loc_475:				; CODE XREF: _padlock_aes_cipher+2BBj
		sub	ebx, eax
		jz	short loc_490
		mov	eax, [ebp+var_10]
		cmp	ecx, eax
		jz	short loc_486
		movups	xmm0, xmmword ptr [ecx]
		movups	xmmword	ptr [eax], xmm0

loc_486:				; CODE XREF: _padlock_aes_cipher+2CEj
		mov	eax, 200h
		mov	[ebp+var_8], eax
		jmp	short $cbc_shortcut$253
; ---------------------------------------------------------------------------

loc_490:				; CODE XREF: _padlock_aes_cipher+2C7j
		movups	xmm0, xmmword ptr [ecx]
		mov	ecx, [ebp+var_10]
		jmp	loc_6CB
; ---------------------------------------------------------------------------

$LN56:					; CODE XREF: _padlock_aes_cipher+1DAj
					; DATA XREF: .text$mn:$LN252o
		mov	eax, [ebp+arg_0] ; jumptable 0000038A case 2
		mov	ecx, [ebp+var_10]
		mov	edx, ecx
		mov	[ebp+var_18], edx
		movups	xmm0, xmmword ptr [eax+20h]
		mov	eax, [ebp+var_8]
		and	eax, 0FFFFFFF0h
		movups	xmmword	ptr [ecx], xmm0
		mov	[ebp+var_8], eax
		jz	$cfb_skiploop$254
		nop	dword ptr [eax+00h]

$cfb_shortcut$255:			; CODE XREF: _padlock_aes_cipher+390j
		cmp	[ebp+var_14], 0
		jz	short loc_4DD
		and	eax, 0FFFFFFFCh
		push	eax		; Size
		push	edi		; Src
		push	[ebp+Dst]	; Dst
		call	_memcpy
		mov	ecx, eax
		add	esp, 0Ch
		mov	eax, [ebp+var_8]
		jmp	short loc_4DF
; ---------------------------------------------------------------------------

loc_4DD:				; CODE XREF: _padlock_aes_cipher+314j
		mov	ecx, edi

loc_4DF:				; CODE XREF: _padlock_aes_cipher+32Bj
		mov	edx, [ebp+var_10]
		add	edi, eax
		push	ecx
		push	[ebp+Dst]
		mov	ecx, eax
		shr	ecx, 4
		call	@padlock_xcrypt_cfb@16 ; padlock_xcrypt_cfb(x,x,x,x)
		cmp	[ebp+var_1C], 0
		mov	edx, eax
		mov	[ebp+var_18], edx
		jz	short loc_51C
		mov	ecx, [ebp+var_8]
		and	ecx, 0FFFFFFFCh
		push	ecx		; Size
		push	[ebp+Dst]	; Src
		push	esi		; Dst
		call	_memcpy
		mov	edx, [ebp+var_18]
		mov	esi, eax
		mov	eax, [ebp+var_8]
		add	esp, 0Ch
		add	esi, eax
		jmp	short loc_524
; ---------------------------------------------------------------------------

loc_51C:				; CODE XREF: _padlock_aes_cipher+34Bj
		mov	eax, [ebp+var_8]
		add	esi, eax
		mov	[ebp+Dst], esi

loc_524:				; CODE XREF: _padlock_aes_cipher+36Aj
		mov	ecx, [ebp+var_10]
		sub	ebx, eax
		cmp	ebx, 10h
		jb	short $cfb_skiploop$254
		cmp	edx, ecx
		jz	short loc_538
		movups	xmm0, xmmword ptr [edx]
		movups	xmmword	ptr [ecx], xmm0

loc_538:				; CODE XREF: _padlock_aes_cipher+380j
		mov	eax, 200h
		mov	[ebp+var_8], eax
		jmp	$cfb_shortcut$255
; ---------------------------------------------------------------------------

$cfb_skiploop$254:			; CODE XREF: _padlock_aes_cipher+306j
					; _padlock_aes_cipher+37Cj
		test	ebx, ebx
		jz	loc_5F8
		mov	[ebp+var_14], ecx
		cmp	edx, ecx
		jz	short loc_55D
		movups	xmm0, xmmword ptr [edx]
		mov	[ebp+var_18], ecx
		movups	xmmword	ptr [ecx], xmm0

loc_55D:				; CODE XREF: _padlock_aes_cipher+3A2j
		mov	eax, [ebp+arg_0]
		mov	[eax+50h], ebx
		mov	eax, [ecx+10h]
		test	eax, 200h
		jz	short loc_5C5
		and	eax, 0FFFFFDFFh
		mov	[ecx+10h], eax
		call	@padlock_reload_key@0 ;	padlock_reload_key()
		push	ecx
		push	ecx
		mov	edx, ecx
		mov	ecx, 1
		call	@padlock_xcrypt_ecb@16 ; padlock_xcrypt_ecb(x,x,x,x)
		mov	eax, [ebp+var_10]
		or	dword ptr [eax+10h], 200h
		call	@padlock_reload_key@0 ;	padlock_reload_key()
		mov	edx, [ebp+var_14]
		sub	edi, eax
		sub	esi, eax
		xchg	ax, ax

loc_5A0:				; CODE XREF: _padlock_aes_cipher+405j
		mov	cl, [edi+edx]
		lea	edx, [edx+1]
		mov	al, [edx-1]
		xor	al, cl
		mov	[esi+edx-1], al
		mov	[edx-1], cl
		sub	ebx, 1
		jnz	short loc_5A0
		mov	eax, [ebp+var_18]
		mov	ecx, [ebp+var_10]
		movups	xmm0, xmmword ptr [eax]
		jmp	loc_6CB
; ---------------------------------------------------------------------------

loc_5C5:				; CODE XREF: _padlock_aes_cipher+3BBj
		call	@padlock_reload_key@0 ;	padlock_reload_key()
		push	ecx
		push	ecx
		mov	edx, ecx
		mov	ecx, 1
		call	@padlock_xcrypt_ecb@16 ; padlock_xcrypt_ecb(x,x,x,x)
		call	@padlock_reload_key@0 ;	padlock_reload_key()
		mov	ecx, [ebp+var_14]
		sub	esi, edi

loc_5E2:				; CODE XREF: _padlock_aes_cipher+446j
		mov	al, [edi]
		lea	edi, [edi+1]
		xor	al, [ecx]
		lea	ecx, [ecx+1]
		mov	[esi+edi-1], al
		mov	[ecx-1], al
		sub	ebx, 1
		jnz	short loc_5E2

loc_5F8:				; CODE XREF: _padlock_aes_cipher+397j
		mov	eax, [ebp+var_18]
		mov	ecx, [ebp+var_10]
		movups	xmm0, xmmword ptr [eax]
		jmp	loc_6CB
; ---------------------------------------------------------------------------

$LN68:					; CODE XREF: _padlock_aes_cipher+1DAj
					; DATA XREF: .text$mn:$LN252o
		mov	edx, [ebp+arg_0] ; jumptable 0000038A case 3
		mov	ecx, [ebp+var_10]
		mov	eax, [ebp+var_8]
		and	eax, 0FFFFFFF0h
		movups	xmm0, xmmword ptr [edx+20h]
		mov	[ebp+var_8], eax
		movups	xmmword	ptr [ecx], xmm0
		jz	short loc_68E
		xchg	ax, ax

loc_620:				; CODE XREF: _padlock_aes_cipher+4D6j
		cmp	[ebp+var_14], 0
		jz	short loc_63D
		and	eax, 0FFFFFFFCh
		push	eax		; Size
		push	edi		; Src
		push	[ebp+Dst]	; Dst
		call	_memcpy
		mov	ecx, eax
		add	esp, 0Ch
		mov	eax, [ebp+var_8]
		jmp	short loc_63F
; ---------------------------------------------------------------------------

loc_63D:				; CODE XREF: _padlock_aes_cipher+474j
		mov	ecx, edi

loc_63F:				; CODE XREF: _padlock_aes_cipher+48Bj
		mov	edx, [ebp+var_10]
		add	edi, eax
		push	ecx
		push	[ebp+Dst]
		mov	ecx, eax
		shr	ecx, 4
		call	@padlock_xcrypt_ofb@16 ; padlock_xcrypt_ofb(x,x,x,x)
		cmp	[ebp+var_1C], 0
		mov	eax, [ebp+var_8]
		jz	short loc_674
		and	eax, 0FFFFFFFCh
		push	eax		; Size
		push	[ebp+Dst]	; Src
		push	esi		; Dst
		call	_memcpy
		mov	esi, eax
		add	esp, 0Ch
		mov	eax, [ebp+var_8]
		add	esi, eax
		jmp	short loc_679
; ---------------------------------------------------------------------------

loc_674:				; CODE XREF: _padlock_aes_cipher+4A9j
		add	esi, eax
		mov	[ebp+Dst], esi

loc_679:				; CODE XREF: _padlock_aes_cipher+4C2j
		sub	ebx, eax
		mov	eax, 200h
		mov	[ebp+var_8], eax
		cmp	ebx, 10h
		jnb	short loc_620
		mov	ecx, [ebp+var_10]
		mov	edx, [ebp+arg_0]

loc_68E:				; CODE XREF: _padlock_aes_cipher+46Cj
		test	ebx, ebx
		jz	short loc_6C8
		mov	[edx+50h], ebx
		call	@padlock_reload_key@0 ;	padlock_reload_key()
		push	ecx
		push	ecx
		mov	edx, ecx
		mov	ecx, 1
		call	@padlock_xcrypt_ecb@16 ; padlock_xcrypt_ecb(x,x,x,x)
		call	@padlock_reload_key@0 ;	padlock_reload_key()
		mov	ecx, [ebp+var_10]
		mov	edx, ecx
		sub	edx, esi
		sub	edi, esi

loc_6B6:				; CODE XREF: _padlock_aes_cipher+516j
		mov	al, [edi+esi]
		lea	esi, [esi+1]
		xor	al, [edx+esi-1]
		mov	[esi-1], al
		sub	ebx, 1
		jnz	short loc_6B6

loc_6C8:				; CODE XREF: _padlock_aes_cipher+4E0j
		movups	xmm0, xmmword ptr [ecx]

loc_6CB:				; CODE XREF: _padlock_aes_cipher+2E6j
					; _padlock_aes_cipher+410j ...
		mov	eax, [ebp+arg_0]
		movups	xmmword	ptr [eax+20h], xmm0

loc_6D2:				; CODE XREF: _padlock_aes_cipher+24Cj
		cmp	[ebp+var_1C], 0
		jz	short loc_6FE
		mov	edx, [ebp+var_20]
		shr	edx, 2
		test	edx, edx
		jz	short loc_6FE
		mov	eax, [ebp+Dst]
		db	66h, 66h
		nop	word ptr [eax+eax+00000000h]

loc_6F0:				; CODE XREF: _padlock_aes_cipher+54Cj
		mov	dword ptr [eax], 0
		lea	eax, [eax+4]
		sub	edx, 1
		jnz	short loc_6F0

loc_6FE:				; CODE XREF: _padlock_aes_cipher+526j
					; _padlock_aes_cipher+530j
		xorps	xmm0, xmm0
		movups	xmmword	ptr [ecx], xmm0

loc_704:				; CODE XREF: _padlock_aes_cipher+FBj
		mov	eax, 1
		lea	esp, [ebp-2Ch]
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_71D:				; CODE XREF: _padlock_aes_cipher+52j
					; _padlock_aes_cipher+89j ...
		xor	eax, eax	; jumptable 0000038A default case
		lea	esp, [ebp-2Ch]
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
_padlock_aes_cipher endp

; ---------------------------------------------------------------------------
		align 4
$LN252		dd offset $LN239	; DATA XREF: _padlock_aes_cipher+1DAr
		dd offset $LN50		; jump table for switch	statement
		dd offset $LN56
		dd offset $LN68
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 744h
_padlock_aes_128_ecb dd	offset loc_1A1+1 ; DATA	XREF: _padlock_ciphers:$LN5o
		dd 3 dup(10h), 1
		dd offset _padlock_aes_init_key
		dd offset _padlock_aes_cipher
		dd 0
		dd offset loc_123+1
		dd offset _EVP_CIPHER_set_asn1_iv
		dd offset _EVP_CIPHER_get_asn1_iv
		dd 2 dup(0)
_padlock_aes_128_cbc dd	offset loc_1A1+2 ; DATA	XREF: _padlock_ciphers:$LN6o
		dd 3 dup(10h), 2
		dd offset _padlock_aes_init_key
		dd offset _padlock_aes_cipher
		align 8
		dd offset loc_123+1
		dd offset _EVP_CIPHER_set_asn1_iv
		dd offset _EVP_CIPHER_get_asn1_iv
		dd 2 dup(0)
_padlock_aes_128_cfb dd	offset loc_1A1+4 ; DATA	XREF: _padlock_ciphers:$LN7o
		dd 1, 2	dup(10h), 3
		dd offset _padlock_aes_init_key
		dd offset _padlock_aes_cipher
		dd 0
		dd offset loc_123+1
		dd offset _EVP_CIPHER_set_asn1_iv
		dd offset _EVP_CIPHER_get_asn1_iv
		align 10h
_padlock_aes_128_ofb dd	offset loc_1A1+3 ; DATA	XREF: _padlock_ciphers:$LN8o
		dd 1, 2	dup(10h), 4
		dd offset _padlock_aes_init_key
		dd offset _padlock_aes_cipher
		align 10h
		dd offset loc_123+1
		dd offset _EVP_CIPHER_set_asn1_iv
		dd offset _EVP_CIPHER_get_asn1_iv
		dd 2 dup(0)
_padlock_aes_192_ecb dd	offset loc_1A6	; DATA XREF: _padlock_ciphers:$LN9o
		dd 10h,	18h, 10h, 1
		dd offset _padlock_aes_init_key
		dd offset _padlock_aes_cipher
		dd 0
		dd offset loc_123+1
		dd offset _EVP_CIPHER_set_asn1_iv
		dd offset _EVP_CIPHER_get_asn1_iv
		dd 2 dup(0)
_padlock_aes_192_cbc dd	offset loc_1A7	; DATA XREF: _padlock_ciphers:$LN10o
		dd 10h,	18h, 10h, 2
		dd offset _padlock_aes_init_key
		dd offset _padlock_aes_cipher
		align 8
		dd offset loc_123+1
		dd offset _EVP_CIPHER_set_asn1_iv
		dd offset _EVP_CIPHER_get_asn1_iv
		dd 2 dup(0)
_padlock_aes_192_cfb dd	offset loc_1A9	; DATA XREF: _padlock_ciphers:$LN11o
		dd 1, 18h, 10h,	3
		dd offset _padlock_aes_init_key
		dd offset _padlock_aes_cipher
		dd 0
		dd offset loc_123+1
		dd offset _EVP_CIPHER_set_asn1_iv
		dd offset _EVP_CIPHER_get_asn1_iv
		align 10h
_padlock_aes_192_ofb dd	offset loc_1A8	; DATA XREF: _padlock_ciphers:$LN12o
		dd 1, 18h, 10h,	4
		dd offset _padlock_aes_init_key
		dd offset _padlock_aes_cipher
		align 10h
		dd offset loc_123+1
		dd offset _EVP_CIPHER_set_asn1_iv
		dd offset _EVP_CIPHER_get_asn1_iv
		dd 2 dup(0)
_padlock_aes_256_ecb dd	offset loc_1A9+1 ; DATA	XREF: _padlock_ciphers:$LN13o
		dd 10h,	20h, 10h, 1
		dd offset _padlock_aes_init_key
		dd offset _padlock_aes_cipher
		dd 0
		dd offset loc_123+1
		dd offset _EVP_CIPHER_set_asn1_iv
		dd offset _EVP_CIPHER_get_asn1_iv
		dd 2 dup(0)
_padlock_aes_256_cbc dd	offset loc_1A9+2 ; DATA	XREF: _padlock_ciphers:$LN14o
		dd 10h,	20h, 10h, 2
		dd offset _padlock_aes_init_key
		dd offset _padlock_aes_cipher
		align 8
		dd offset loc_123+1
		dd offset _EVP_CIPHER_set_asn1_iv
		dd offset _EVP_CIPHER_get_asn1_iv
		dd 2 dup(0)
_padlock_aes_256_cfb dd	offset loc_1A9+4 ; DATA	XREF: _padlock_ciphers:$LN15o
		dd 1, 20h, 10h,	3
		dd offset _padlock_aes_init_key
		dd offset _padlock_aes_cipher
		dd 0
		dd offset loc_123+1
		dd offset _EVP_CIPHER_set_asn1_iv
		dd offset _EVP_CIPHER_get_asn1_iv
		align 10h
_padlock_aes_256_ofb dd	offset loc_1A9+3 ; DATA	XREF: _padlock_ciphers:$LN16o
		dd 1, 20h, 10h,	4
		dd offset _padlock_aes_init_key
		dd offset _padlock_aes_cipher
		align 10h
		dd offset loc_123+1
		dd offset _EVP_CIPHER_set_asn1_iv
		dd offset _EVP_CIPHER_get_asn1_iv
		dd 2 dup(0)
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_padlock_rand_bytes proc near		; DATA XREF: .data:00000038o
					; .data:00000044o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		cmp	esi, 8
		jl	short loc_9EB
		nop

loc_9C4:				; CODE XREF: _padlock_rand_bytes+35j
		xor	edx, edx
		mov	ecx, edi
		call	@padlock_xstore@8 ; padlock_xstore(x,x)
		test	al, 40h
		jz	short loc_A33
		test	eax, 7C00h
		jnz	short loc_A33
		and	eax, 1Fh
		jz	short loc_9E6
		cmp	eax, 8
		jnz	short loc_A33
		add	edi, eax
		sub	esi, eax

loc_9E6:				; CODE XREF: _padlock_rand_bytes+27j
		cmp	esi, 8
		jge	short loc_9C4

loc_9EB:				; CODE XREF: _padlock_rand_bytes+Dj
		test	esi, esi
		jle	short loc_A23
		nop	dword ptr [eax+eax+00h]

loc_9F4:				; CODE XREF: _padlock_rand_bytes+6Dj
		mov	edx, 3
		lea	ecx, [esp+8+arg_4]
		call	@padlock_xstore@8 ; padlock_xstore(x,x)
		test	al, 40h
		jz	short loc_A33
		test	eax, 7C00h
		jnz	short loc_A33
		and	eax, 1Fh
		jz	short loc_A1F
		cmp	eax, 1
		jnz	short loc_A33
		mov	al, byte ptr [esp+8+arg_4]
		mov	[edi], al
		inc	edi
		dec	esi

loc_A1F:				; CODE XREF: _padlock_rand_bytes+5Cj
		test	esi, esi
		jg	short loc_9F4

loc_A23:				; CODE XREF: _padlock_rand_bytes+39j
		pop	edi
		mov	[esp+4+arg_4], 0
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_A33:				; CODE XREF: _padlock_rand_bytes+1Bj
					; _padlock_rand_bytes+22j ...
		pop	edi
		xor	eax, eax
		pop	esi
		retn
_padlock_rand_bytes endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A38h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_padlock_rand_status proc near		; DATA XREF: .data:00000048o
		mov	eax, 1
		retn
_padlock_rand_status endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A40h
; COMDAT (pick any)
		public ??_C@_07HLDGABBH@padlock?$AA@
; `string'
??_C@_07HLDGABBH@padlock?$AA@ db 'padlock',0 ; DATA XREF: .data:_padlock_ido
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 0A48h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
_padlock_use_ace dd ?			; DATA XREF: _padlock_available+5Fw
					; _padlock_bind_helper+6r ...
_padlock_use_rng dd ?			; DATA XREF: _padlock_available+76w
					; _padlock_bind_helper+17w ...
_padlock_name	dd 19h dup(?)		; DATA XREF: _padlock_bind_helper+31o
					; _padlock_bind_helper+52o
_padlock_saved_context dd ?		; DATA XREF: padlock_verify_context(x)+8r
					; padlock_verify_context(x)+17w
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0AB8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; __fastcall padlock_reload_key()
@padlock_reload_key@0 proc near		; CODE XREF: _padlock_aes_init_key+103p
					; _padlock_aes_init_key+12Ap ...
		pushf
		popf
		retn
@padlock_reload_key@0 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0ABCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; __fastcall padlock_verify_context(x)
@padlock_verify_context@4 proc near	; CODE XREF: _padlock_aes_cipher+1BDp
					; _padlock_aes_cipher_omnivorous+13p

var_4		= dword	ptr -4

		pushf
		bt	[esp+4+var_4], 1Eh
		jnb	short $skip$4
		cmp	ecx, ds:_padlock_saved_context
		jz	short $skip$4
		popf
		sub	esp, 4

$skip$4:				; CODE XREF: padlock_verify_context(x)+6j
					; padlock_verify_context(x)+Ej
		add	esp, 4
		mov	ds:_padlock_saved_context, ecx
		retn
@padlock_verify_context@4 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0ADCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; __fastcall padlock_xcrypt_cbc(x, x, x, x)
@padlock_xcrypt_cbc@16 proc near	; CODE XREF: _padlock_aes_cipher+28Ep
					; _padlock_aes_cipher_omnivorous+73p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		mov	eax, edx
		lea	edx, [eax+10h]
		lea	ebx, [eax+20h]
		mov	edi, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		rep cmpxchg eax, edx
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	8
@padlock_xcrypt_cbc@16 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0AFCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; __fastcall padlock_xcrypt_cfb(x, x, x, x)
@padlock_xcrypt_cfb@16 proc near	; CODE XREF: _padlock_aes_cipher+33Dp
					; _padlock_aes_cipher_omnivorous+A5p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		mov	eax, edx
		lea	edx, [eax+10h]
		lea	ebx, [eax+20h]
		mov	edi, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		rep cmpxchg eax, esp
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	8
@padlock_xcrypt_cfb@16 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B1Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; __fastcall padlock_xcrypt_ecb(x, x, x, x)
@padlock_xcrypt_ecb@16 proc near	; CODE XREF: _padlock_aes_cipher+211p
					; _padlock_aes_cipher+3D3p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		mov	eax, edx
		lea	edx, [eax+10h]
		lea	ebx, [eax+20h]
		mov	edi, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		rep cmpxchg eax, ecx
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	8
@padlock_xcrypt_ecb@16 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B3Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; __fastcall padlock_xcrypt_ofb(x, x, x, x)
@padlock_xcrypt_ofb@16 proc near	; CODE XREF: _padlock_aes_cipher+49Dp
					; _padlock_aes_cipher_omnivorous+D7p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		mov	eax, edx
		lea	edx, [eax+10h]
		lea	ebx, [eax+20h]
		mov	edi, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		rep cmpxchg eax, ebp
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	8
@padlock_xcrypt_ofb@16 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B5Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; __fastcall padlock_xstore(x, x)
@padlock_xstore@8 proc near		; CODE XREF: _padlock_rand_bytes+14p
					; _padlock_rand_bytes+49p
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		cmpxchg	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
@padlock_xstore@8 endp

_text$mn	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B68h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _bind_engine
_bind_engine	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		call	_ENGINE_get_static_state
		mov	esi, [esp+4+arg_8]
		cmp	eax, [esi]
		jz	short $skip_cbs$19
		push	dword ptr [esi+14h]
		push	dword ptr [esi+10h]
		push	dword ptr [esi+0Ch]
		call	_CRYPTO_set_mem_functions
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_B8F

loc_B8B:				; CODE XREF: _bind_engine+5Cj
					; _bind_engine+6Bj ...
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_B8F:				; CODE XREF: _bind_engine+21j
		push	dword ptr [esi+18h]
		call	_CRYPTO_set_locking_callback
		push	dword ptr [esi+1Ch]
		call	_CRYPTO_set_add_lock_callback
		push	dword ptr [esi+20h]
		call	_CRYPTO_set_dynlock_create_callback
		push	dword ptr [esi+24h]
		call	_CRYPTO_set_dynlock_lock_callback
		push	dword ptr [esi+28h]
		call	_CRYPTO_set_dynlock_destroy_callback
		push	dword ptr [esi+8]
		call	_CRYPTO_set_ex_data_implementation
		add	esp, 18h
		test	eax, eax
		jz	short loc_B8B
		push	dword ptr [esi+4]
		call	_ERR_set_implementation
		add	esp, 4
		test	eax, eax
		jz	short loc_B8B

$skip_cbs$19:				; CODE XREF: _bind_engine+Cj
		mov	eax, [esp+4+arg_4]
		test	eax, eax
		jz	short loc_C15
		mov	ecx, _padlock_id
		nop	dword ptr [eax+eax+00h]

loc_BE8:				; CODE XREF: _bind_engine+9Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_C08
		test	dl, dl
		jz	short loc_C04
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_C08
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_BE8

loc_C04:				; CODE XREF: _bind_engine+88j
		xor	eax, eax
		jmp	short loc_C0D
; ---------------------------------------------------------------------------

loc_C08:				; CODE XREF: _bind_engine+84j
					; _bind_engine+90j
		sbb	eax, eax
		or	eax, 1

loc_C0D:				; CODE XREF: _bind_engine+9Ej
		test	eax, eax
		jnz	loc_B8B

loc_C15:				; CODE XREF: _bind_engine+73j
		push	[esp+4+arg_0]
		call	_padlock_bind_helper
		add	esp, 4
		test	eax, eax
		jz	loc_B8B
		mov	eax, 1
		pop	esi
		retn
_bind_engine	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C30h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_padlock_aes_cipher_omnivorous proc near ; CODE	XREF: _padlock_aes_cipher+113p
					; _padlock_aes_cipher+150p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	esi, [edi+60h]
		neg	esi
		and	esi, 0Fh
		add	esi, [edi+60h]
		mov	ecx, esi
		call	@padlock_verify_context@4 ; padlock_verify_context(x)
		push	edi
		call	_EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		add	esp, 4
		dec	eax
		cmp	eax, 3		; switch 4 cases
		ja	loc_D21		; jumptable 00000C60 default case
		jmp	ds:$LN22[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN4:					; CODE XREF: _padlock_aes_cipher_omnivorous+30j
					; DATA XREF: .text$mn:$LN22o
		push	[esp+8+arg_8]	; jumptable 00000C60 case 0
		mov	ecx, [esp+0Ch+arg_C]
		mov	edx, esi
		push	[esp+0Ch+arg_4]
		shr	ecx, 4
		call	@padlock_xcrypt_ecb@16 ; padlock_xcrypt_ecb(x,x,x,x)
		xorps	xmm0, xmm0
		mov	eax, 1
		pop	edi
		movups	xmmword	ptr [esi], xmm0
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN5_0:					; CODE XREF: _padlock_aes_cipher_omnivorous+30j
					; DATA XREF: .text$mn:$LN22o
		push	[esp+8+arg_8]	; jumptable 00000C60 case 1
		movups	xmm0, xmmword ptr [edi+20h]
		mov	ecx, [esp+0Ch+arg_C]
		mov	edx, esi
		push	[esp+0Ch+arg_4]
		shr	ecx, 4
		movups	xmmword	ptr [esi], xmm0
		call	@padlock_xcrypt_cbc@16 ; padlock_xcrypt_cbc(x,x,x,x)
		movups	xmm0, xmmword ptr [eax]
		mov	eax, 1
		movups	xmmword	ptr [edi+20h], xmm0
		pop	edi
		xorps	xmm0, xmm0
		movups	xmmword	ptr [esi], xmm0
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN6_0:					; CODE XREF: _padlock_aes_cipher_omnivorous+30j
					; DATA XREF: .text$mn:$LN22o
		push	[esp+8+arg_8]	; jumptable 00000C60 case 2
		movups	xmm0, xmmword ptr [edi+20h]
		mov	ecx, [esp+0Ch+arg_C]
		mov	edx, esi
		push	[esp+0Ch+arg_4]
		shr	ecx, 4
		movups	xmmword	ptr [esi], xmm0
		call	@padlock_xcrypt_cfb@16 ; padlock_xcrypt_cfb(x,x,x,x)
		movups	xmm0, xmmword ptr [eax]
		mov	eax, 1
		movups	xmmword	ptr [edi+20h], xmm0
		pop	edi
		xorps	xmm0, xmm0
		movups	xmmword	ptr [esi], xmm0
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN7_0:					; CODE XREF: _padlock_aes_cipher_omnivorous+30j
					; DATA XREF: .text$mn:$LN22o
		push	[esp+8+arg_8]	; jumptable 00000C60 case 3
		movups	xmm0, xmmword ptr [edi+20h]
		mov	ecx, [esp+0Ch+arg_C]
		mov	edx, esi
		push	[esp+0Ch+arg_4]
		shr	ecx, 4
		movups	xmmword	ptr [esi], xmm0
		call	@padlock_xcrypt_ofb@16 ; padlock_xcrypt_ofb(x,x,x,x)
		movups	xmm0, xmmword ptr [esi]
		mov	eax, 1
		movups	xmmword	ptr [edi+20h], xmm0
		pop	edi
		xorps	xmm0, xmm0
		movups	xmmword	ptr [esi], xmm0
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_D21:				; CODE XREF: _padlock_aes_cipher_omnivorous+2Aj
		pop	edi		; jumptable 00000C60 default case
		xor	eax, eax
		pop	esi
		retn
_padlock_aes_cipher_omnivorous endp

; ---------------------------------------------------------------------------
		align 4
$LN22		dd offset $LN4		; DATA XREF: _padlock_aes_cipher_omnivorous+30r
		dd offset $LN5_0	; jump table for switch	statement
		dd offset $LN6_0
		dd offset $LN7_0
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D38h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_padlock_available proc	near		; CODE XREF: _padlock_bind_helper+1p
		push	ebx
		pushf
		pop	eax
		mov	ecx, eax
		xor	eax, 200000h
		push	eax
		popf
		pushf
		pop	eax
		xor	eax, ecx
		bt	eax, 15h
		jnb	short $skip_r$6
		mov	eax, 0
		cpuid
		xor	eax, eax
		cmp	ebx, 746E6543h
		jnz	short $skip_r$6
		cmp	edx, 48727561h
		jnz	short $skip_r$6
		cmp	ecx, 736C7561h
		jnz	short $skip_r$6
		mov	eax, 0C0000000h
		cpuid
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0C0000001h
		jb	short $skip_r$6
		mov	eax, 0C0000001h
		cpuid
		xor	eax, eax
		bt	edx, 6
		jnb	short $skip_a$5
		bt	edx, 7
		jnb	short $skip_a$5
		mov	ds:_padlock_use_ace, 1
		inc	eax

$skip_a$5:				; CODE XREF: _padlock_available+57j
					; _padlock_available+5Dj
		bt	edx, 2
		jnb	short $skip_r$6
		bt	edx, 3
		jnb	short $skip_r$6
		mov	ds:_padlock_use_rng, 1
		inc	eax

$skip_r$6:				; CODE XREF: _padlock_available+14j
					; _padlock_available+25j ...
		pop	ebx		; $noluck$4
		retn
_padlock_available endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0DBCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_padlock_bind_fn proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		test	eax, eax
		jz	short loc_DF8
		mov	ecx, _padlock_id
		xchg	ax, ax

loc_DCC:				; CODE XREF: _padlock_bind_fn+2Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_DEC
		test	dl, dl
		jz	short loc_DE8
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_DEC
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_DCC

loc_DE8:				; CODE XREF: _padlock_bind_fn+18j
		xor	eax, eax
		jmp	short loc_DF1
; ---------------------------------------------------------------------------

loc_DEC:				; CODE XREF: _padlock_bind_fn+14j
					; _padlock_bind_fn+20j
		sbb	eax, eax
		or	eax, 1

loc_DF1:				; CODE XREF: _padlock_bind_fn+2Ej
		test	eax, eax
		jz	short loc_DF8
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_DF8:				; CODE XREF: _padlock_bind_fn+6j
					; _padlock_bind_fn+37j
		push	[esp+arg_0]
		call	_padlock_bind_helper
		add	esp, 4
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
_padlock_bind_fn endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0E0Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_padlock_bind_helper proc near		; CODE XREF: _bind_engine+B1p
					; _padlock_bind_fn+40p

arg_0		= dword	ptr  4

		push	esi
		call	_padlock_available
		cmp	ds:_padlock_use_ace, 0
		mov	ecx, offset ??_C@_06KFJDPGIC@no?9ACE?$AA@ ; "no-ACE"
		mov	eax, offset ??_C@_03CMBJHGC@ACE?$AA@ ; `string'
		mov	ds:_padlock_use_rng, 0
		cmovz	eax, ecx
		push	eax
		push	offset ??_C@_06NNNBPPCC@no?9RNG?$AA@ ; "no-RNG"
		push	offset ??_C@_0BF@KIHBIGGJ@VIA?5PadLock?5?$CI?$CFs?0?5?$CFs?$CJ?$AA@ ; "VIA PadLock (%s,	%s)"
		push	64h ; 'd'
		push	offset _padlock_name
		call	_BIO_snprintf
		push	_padlock_id
		mov	esi, [esp+1Ch+arg_0]
		push	esi
		call	_ENGINE_set_id
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_EBF
		push	offset _padlock_name
		push	esi
		call	_ENGINE_set_name
		add	esp, 8
		test	eax, eax
		jz	short loc_EBF
		push	offset _padlock_init
		push	esi
		call	_ENGINE_set_init_function
		add	esp, 8
		test	eax, eax
		jz	short loc_EBF
		cmp	ds:_padlock_use_ace, 0
		jz	short loc_E9D
		push	offset _padlock_ciphers
		push	esi
		call	_ENGINE_set_ciphers
		add	esp, 8
		test	eax, eax
		jz	short loc_EBF

loc_E9D:				; CODE XREF: _padlock_bind_helper+7Dj
		cmp	ds:_padlock_use_rng, 0
		jz	short loc_EB8
		push	offset _padlock_rand
		push	esi
		call	_ENGINE_set_RAND
		add	esp, 8
		test	eax, eax
		jz	short loc_EBF

loc_EB8:				; CODE XREF: _padlock_bind_helper+98j
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_EBF:				; CODE XREF: _padlock_bind_helper+50j
					; _padlock_bind_helper+62j ...
		xor	eax, eax
		pop	esi
		retn
_padlock_bind_helper endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0EC4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_padlock_ciphers proc near		; DATA XREF: _padlock_bind_helper+7Fo

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jnz	short loc_EDC
		mov	eax, [esp+arg_8]
		mov	dword ptr [eax], offset	_padlock_cipher_nids
		mov	eax, _padlock_cipher_nids_num
		retn
; ---------------------------------------------------------------------------

loc_EDC:				; CODE XREF: _padlock_ciphers+6j
		mov	eax, [esp+arg_C]
		add	eax, 0FFFFFE5Eh	; switch 12 cases
		cmp	eax, 0Bh
		ja	loc_F85		; jumptable 00000EEE default case
		jmp	ds:$LN20[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN5:					; CODE XREF: _padlock_ciphers+2Aj
					; DATA XREF: .text$mn:$LN20o
		mov	dword ptr [ecx], offset	_padlock_aes_128_ecb ; jumptable 00000EEE case 418
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

$LN6:					; CODE XREF: _padlock_ciphers+2Aj
					; DATA XREF: .text$mn:$LN20o
		mov	dword ptr [ecx], offset	_padlock_aes_128_cbc ; jumptable 00000EEE case 419
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

$LN7:					; CODE XREF: _padlock_ciphers+2Aj
					; DATA XREF: .text$mn:$LN20o
		mov	dword ptr [ecx], offset	_padlock_aes_128_cfb ; jumptable 00000EEE case 421
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

$LN8:					; CODE XREF: _padlock_ciphers+2Aj
					; DATA XREF: .text$mn:$LN20o
		mov	dword ptr [ecx], offset	_padlock_aes_128_ofb ; jumptable 00000EEE case 420
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

$LN9:					; CODE XREF: _padlock_ciphers+2Aj
					; DATA XREF: .text$mn:$LN20o
		mov	dword ptr [ecx], offset	_padlock_aes_192_ecb ; jumptable 00000EEE case 422
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

$LN10:					; CODE XREF: _padlock_ciphers+2Aj
					; DATA XREF: .text$mn:$LN20o
		mov	dword ptr [ecx], offset	_padlock_aes_192_cbc ; jumptable 00000EEE case 423
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

$LN11:					; CODE XREF: _padlock_ciphers+2Aj
					; DATA XREF: .text$mn:$LN20o
		mov	dword ptr [ecx], offset	_padlock_aes_192_cfb ; jumptable 00000EEE case 425
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

$LN12:					; CODE XREF: _padlock_ciphers+2Aj
					; DATA XREF: .text$mn:$LN20o
		mov	dword ptr [ecx], offset	_padlock_aes_192_ofb ; jumptable 00000EEE case 424
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

$LN13:					; CODE XREF: _padlock_ciphers+2Aj
					; DATA XREF: .text$mn:$LN20o
		mov	dword ptr [ecx], offset	_padlock_aes_256_ecb ; jumptable 00000EEE case 426
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

$LN14:					; CODE XREF: _padlock_ciphers+2Aj
					; DATA XREF: .text$mn:$LN20o
		mov	dword ptr [ecx], offset	_padlock_aes_256_cbc ; jumptable 00000EEE case 427
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

$LN15:					; CODE XREF: _padlock_ciphers+2Aj
					; DATA XREF: .text$mn:$LN20o
		mov	dword ptr [ecx], offset	_padlock_aes_256_cfb ; jumptable 00000EEE case 429
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

$LN16:					; CODE XREF: _padlock_ciphers+2Aj
					; DATA XREF: .text$mn:$LN20o
		mov	dword ptr [ecx], offset	_padlock_aes_256_ofb ; jumptable 00000EEE case 428
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_F85:				; CODE XREF: _padlock_ciphers+24j
		mov	dword ptr [ecx], 0 ; jumptable 00000EEE	default	case
		xor	eax, eax
		retn
_padlock_ciphers endp

; ---------------------------------------------------------------------------
		align 10h
$LN20		dd offset $LN5		; DATA XREF: _padlock_ciphers+2Ar
		dd offset $LN6		; jump table for switch	statement
		dd offset $LN8
		dd offset $LN7
		dd offset $LN9
		dd offset $LN10
		dd offset $LN12
		dd offset $LN11
		dd offset $LN13
		dd offset $LN14
		dd offset $LN16
		dd offset $LN15
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0FC0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_padlock_init	proc near		; DATA XREF: _padlock_bind_helper+64o
		cmp	ds:_padlock_use_rng, 0
		jnz	short loc_FD5
		cmp	ds:_padlock_use_ace, 0
		jnz	short loc_FD5
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_FD5:				; CODE XREF: _padlock_init+7j
					; _padlock_init+10j
		mov	eax, 1
		retn
_padlock_init	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0FDCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _v_check
_v_check	proc near

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 20000h
		sbb	eax, eax
		and	eax, 0FFFE0000h
		add	eax, 20000h
		retn
_v_check	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FF4h
; COMDAT (pick any)
		public ??_C@_03CMBJHGC@ACE?$AA@
; `string'
??_C@_03CMBJHGC@ACE?$AA@ dd 454341h	; DATA XREF: _padlock_bind_helper+12o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FF8h
; COMDAT (pick any)
		public ??_C@_06KFJDPGIC@no?9ACE?$AA@
; `string'
??_C@_06KFJDPGIC@no?9ACE?$AA@ db 'no-ACE',0 ; DATA XREF: _padlock_bind_helper+Do
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1000h
; COMDAT (pick any)
		public ??_C@_06NNNBPPCC@no?9RNG?$AA@
; `string'
??_C@_06NNNBPPCC@no?9RNG?$AA@ db 'no-RNG',0 ; DATA XREF: _padlock_bind_helper+25o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1008h
; COMDAT (pick any)
		public ??_C@_0BF@KIHBIGGJ@VIA?5PadLock?5?$CI?$CFs?0?5?$CFs?$CJ?$AA@
; `string'
??_C@_0BF@KIHBIGGJ@VIA?5PadLock?5?$CI?$CFs?0?5?$CFs?$CJ?$AA@ db	'VIA PadLock (%s, %s)',0
					; DATA XREF: _padlock_bind_helper+2Ao
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _EVP_CIPHER_set_asn1_iv:near ; DATA XREF:	.rdata:00000768o
					; .rdata:0000079Co ...
		extrn _EVP_CIPHER_get_asn1_iv:near ; DATA XREF:	.rdata:0000076Co
					; .rdata:000007A0o ...
		extrn _CRYPTO_set_ex_data_implementation:near ;	CODE XREF: _bind_engine+52p
		extrn _CRYPTO_set_locking_callback:near	; CODE XREF: _bind_engine+2Ap
		extrn _CRYPTO_set_add_lock_callback:near ; CODE	XREF: _bind_engine+32p
		extrn _CRYPTO_set_dynlock_create_callback:near ; CODE XREF: _bind_engine+3Ap
		extrn _CRYPTO_set_dynlock_lock_callback:near ; CODE XREF: _bind_engine+42p
		extrn _CRYPTO_set_dynlock_destroy_callback:near
					; CODE XREF: _bind_engine+4Ap
		extrn _CRYPTO_set_mem_functions:near ; CODE XREF: _bind_engine+17p
		extrn _BIO_snprintf:near ; CODE	XREF: _padlock_bind_helper+36p
		extrn _ERR_set_implementation:near ; CODE XREF:	_bind_engine+61p
		extrn _EVP_CIPHER_CTX_key_length:near ;	CODE XREF: _padlock_aes_init_key+7p
		extrn _EVP_CIPHER_CTX_flags:near ; CODE	XREF: _padlock_aes_init_key+3Ap
					; _padlock_aes_init_key+BFp ...
		extrn _ENGINE_set_id:near ; CODE XREF: _padlock_bind_helper+46p
		extrn _ENGINE_set_name:near ; CODE XREF: _padlock_bind_helper+58p
		extrn _ENGINE_set_RAND:near ; CODE XREF: _padlock_bind_helper+A0p
		extrn _ENGINE_set_init_function:near ; CODE XREF: _padlock_bind_helper+6Ap
		extrn _ENGINE_set_ciphers:near ; CODE XREF: _padlock_bind_helper+85p
		extrn _ENGINE_get_static_state:near ; CODE XREF: _bind_engine+1p
		extrn _AES_set_encrypt_key:near	; CODE XREF: _padlock_aes_init_key+11Bp
		extrn _AES_set_decrypt_key:near	; CODE XREF: _padlock_aes_init_key+F4p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _padlock_aes_cipher+126p
					; _padlock_aes_cipher+163p ...
		extrn __alloca_probe_16:near ; CODE XREF: _padlock_aes_cipher+194p
		extrn __chkstk:near	; CODE XREF: _padlock_aes_cipher+8p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _padlock_aes_cipher+1F2p
					; _padlock_aes_cipher+227p ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _padlock_aes_init_key+34p
		extrn ___security_cookie:near ;	DATA XREF: _padlock_aes_cipher+Dr


		end
