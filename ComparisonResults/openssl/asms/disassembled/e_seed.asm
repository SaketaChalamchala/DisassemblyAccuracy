;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	64964C7F05AFF8019147E68A21A9FA74
; Input	CRC32 :	0CCB7209

; File Name   :	C:\compspace\Diff\openssl\obj\e_seed.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
_seed_cbc	dd 309h, 3 dup(10h), 2	; DATA XREF: _EVP_seed_cbco
		dd offset _seed_init_key
		dd offset _seed_cbc_cipher
		align 10h
		dd offset off_80
		dd 4 dup(0)
_seed_cfb128	dd 30Bh, 1, 2 dup(10h),	3 ; DATA XREF: _EVP_seed_cfb128o
		dd offset _seed_init_key
		dd offset _seed_cfb128_cipher
		dd 0
		dd offset off_80
		dd 4 dup(0)
_seed_ofb	dd 30Ah, 1, 2 dup(10h),	4 ; DATA XREF: _EVP_seed_ofbo
		dd offset _seed_init_key
off_80		dd offset _seed_ofb_cipher ; DATA XREF:	.rdata:00000020o
					; .rdata:00000054o ...
		align 8
		dd offset off_80
		dd 4 dup(0)
_seed_ecb	dd 308h, 2 dup(10h), 0	; DATA XREF: _EVP_seed_ecbo
		dd 1
		dd offset _seed_init_key
		dd offset _seed_ecb_cipher
		dd 0
		dd offset off_80
		dd 4 dup(0)
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_seed_init_key	proc near		; DATA XREF: .rdata:00000014o
					; .rdata:00000048o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+60h]
		push	[esp+4+arg_4]
		call	_SEED_set_key
		add	esp, 8
		mov	eax, 1
		retn
_seed_init_key	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_seed_cbc_cipher proc near		; DATA XREF: .rdata:00000018o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		mov	esi, [esp+0Ch+arg_C]
		push	edi
		mov	edi, [esp+10h+arg_8]
		cmp	esi, 40000000h
		jb	short loc_146
		mov	eax, esi
		lea	ecx, [ebp+20h]
		shr	eax, 1Eh
		mov	[esp+10h+arg_C], eax

loc_114:				; CODE XREF: _seed_cbc_cipher+58j
		push	dword ptr [ebp+8]
		push	ecx
		push	dword ptr [ebp+60h]
		push	40000000h
		push	ebx
		push	edi
		call	_SEED_cbc_encrypt
		add	esp, 18h
		lea	ecx, [ebp+20h]
		sub	esi, 40000000h
		add	edi, 40000000h
		add	ebx, 40000000h
		sub	[esp+10h+arg_C], 1
		jnz	short loc_114

loc_146:				; CODE XREF: _seed_cbc_cipher+1Aj
		test	esi, esi
		jz	short loc_15F
		push	dword ptr [ebp+8]
		lea	eax, [ebp+20h]
		push	eax
		push	dword ptr [ebp+60h]
		push	esi
		push	ebx
		push	edi
		call	_SEED_cbc_encrypt
		add	esp, 18h

loc_15F:				; CODE XREF: _seed_cbc_cipher+5Cj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
_seed_cbc_cipher endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 16Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_seed_cfb128_cipher proc near		; DATA XREF: .rdata:0000004Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, 40000000h
		push	edi
		mov	edi, [esp+8+arg_C]
		cmp	edi, esi
		cmovb	esi, edi
		test	edi, edi
		jz	short loc_1C7
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		push	ebp
		mov	ebp, [esp+10h+arg_8]
		xchg	ax, ax

loc_18C:				; CODE XREF: _seed_cfb128_cipher+4Fj
		cmp	edi, esi
		jb	short loc_1BD
		push	dword ptr [ebx+8]
		lea	eax, [ebx+50h]
		push	eax
		lea	eax, [ebx+20h]
		push	eax
		push	dword ptr [ebx+60h]
		push	edi
		push	[esp+24h+arg_4]
		push	ebp
		call	_SEED_cfb128_encrypt
		add	[esp+2Ch+arg_4], esi
		sub	edi, esi
		add	ebp, esi
		add	esp, 1Ch
		cmp	edi, esi
		cmovb	esi, edi
		test	edi, edi
		jnz	short loc_18C

loc_1BD:				; CODE XREF: _seed_cfb128_cipher+22j
		pop	ebp
		pop	ebx
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1C7:				; CODE XREF: _seed_cfb128_cipher+12j
		pop	edi
		mov	eax, 1
		pop	esi
		retn
_seed_cfb128_cipher endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_seed_ecb_cipher proc near		; DATA XREF: .rdata:000000B4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	edi
		mov	eax, [ebp+0]
		mov	edi, [eax+4]
		mov	eax, [esp+8+arg_C]
		cmp	eax, edi
		jb	short loc_222
		sub	eax, edi
		push	ebx
		mov	[esp+0Ch+arg_C], eax
		xor	ebx, ebx
		mov	eax, [esp+0Ch+arg_4]
		push	esi
		mov	esi, [esp+10h+arg_8]
		sub	eax, esi
		mov	[esp+10h+arg_4], eax
		nop	dword ptr [eax+00h]

loc_200:				; CODE XREF: _seed_ecb_cipher+4Ej
		push	dword ptr [ebp+8]
		add	eax, esi
		push	dword ptr [ebp+60h]
		push	eax
		push	esi
		call	_SEED_ecb_encrypt
		mov	eax, [esp+20h+arg_4]
		add	ebx, edi
		add	esp, 10h
		add	esi, edi
		cmp	ebx, [esp+10h+arg_C]
		jbe	short loc_200
		pop	esi
		pop	ebx

loc_222:				; CODE XREF: _seed_ecb_cipher+12j
		pop	edi
		mov	eax, 1
		pop	ebp
		retn
_seed_ecb_cipher endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 22Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_seed_ofb_cipher proc near		; DATA XREF: .rdata:off_80o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		mov	esi, [esp+0Ch+arg_C]
		push	edi
		mov	edi, [esp+10h+arg_8]
		cmp	esi, 40000000h
		jb	short loc_28F
		mov	eax, esi
		lea	ecx, [ebp+50h]
		shr	eax, 1Eh
		lea	edx, [ebp+20h]
		mov	[esp+10h+arg_C], eax
		nop	dword ptr [eax+eax+00h]

loc_25C:				; CODE XREF: _seed_ofb_cipher+61j
		push	ecx
		push	edx
		push	dword ptr [ebp+60h]
		push	40000000h
		push	ebx
		push	edi
		call	_SEED_ofb128_encrypt
		add	esp, 18h
		lea	ecx, [ebp+50h]
		sub	esi, 40000000h
		lea	edx, [ebp+20h]
		add	edi, 40000000h
		add	ebx, 40000000h
		sub	[esp+10h+arg_C], 1
		jnz	short loc_25C

loc_28F:				; CODE XREF: _seed_ofb_cipher+1Aj
		test	esi, esi
		jz	short loc_2A9
		lea	eax, [ebp+50h]
		push	eax
		lea	eax, [ebp+20h]
		push	eax
		push	dword ptr [ebp+60h]
		push	esi
		push	ebx
		push	edi
		call	_SEED_ofb128_encrypt
		add	esp, 18h

loc_2A9:				; CODE XREF: _seed_ofb_cipher+65j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
_seed_ofb_cipher endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_seed_cbc
_EVP_seed_cbc	proc near
		mov	eax, offset _seed_cbc
		retn
_EVP_seed_cbc	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_seed_cfb128
_EVP_seed_cfb128 proc near
		mov	eax, offset _seed_cfb128
		retn
_EVP_seed_cfb128 endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_seed_ecb
_EVP_seed_ecb	proc near
		mov	eax, offset _seed_ecb
		retn
_EVP_seed_ecb	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2CCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_seed_ofb
_EVP_seed_ofb	proc near
		mov	eax, offset _seed_ofb
		retn
_EVP_seed_ofb	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _SEED_set_key:near ; CODE	XREF: _seed_init_key+Bp
		extrn _SEED_ecb_encrypt:near ; CODE XREF: _seed_ecb_cipher+3Ap
		extrn _SEED_cbc_encrypt:near ; CODE XREF: _seed_cbc_cipher+36p
					; _seed_cbc_cipher+6Bp
		extrn _SEED_cfb128_encrypt:near	; CODE XREF: _seed_cfb128_cipher+38p
		extrn _SEED_ofb128_encrypt:near	; CODE XREF: _seed_ofb_cipher+3Cp
					; _seed_ofb_cipher+75p


		end
