;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	9D8E7258F863FB014305D8213C93C721
; Input	CRC32 :	8C2C1410

; File Name   :	C:\compspace\Diff\openssl\obj\eng_cnf.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
_initialized_engines dd	?		; DATA XREF: _int_engine_configure+329r
					; _int_engine_configure+337w ...
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ENGINE_add_conf_module
_ENGINE_add_conf_module	proc near
		push	offset _int_engine_module_finish
		push	offset _int_engine_module_init
		push	offset ??_C@_07MJHLDAOB@engines?$AA@ ; "engines"
		call	_CONF_module_add
		add	esp, 0Ch
		retn
_ENGINE_add_conf_module	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl int_engine_configure(char	*Str, int, int)
_int_engine_configure proc near		; CODE XREF: _int_engine_module_init+60p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Str		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 10h
		call	__chkstk
		push	ebp
		push	esi
		push	2Eh ; '.'       ; Val
		push	[esp+1Ch+Str]	; Str
		xor	eax, eax
		mov	[esp+20h+var_10], 0FFFFFFFFh
		xor	esi, esi
		mov	[esp+20h+var_8], eax
		call	dword ptr ds:__imp__strchr
		add	esp, 8
		test	eax, eax
		jz	short loc_50
		inc	eax
		mov	[esp+18h+Str], eax

loc_50:					; CODE XREF: _int_engine_configure+2Dj
		push	[esp+18h+arg_4]
		push	[esp+1Ch+arg_8]
		call	_NCONF_get_section
		mov	ebp, eax
		add	esp, 8
		mov	[esp+18h+var_4], ebp
		test	ebp, ebp
		jnz	short loc_8D
		push	6Fh ; 'o'
		push	offset ??_C@_0BK@JDIFDBLN@?4?2crypto?2engine?2eng_cnf?4c?$AA@ ;	".\\crypto\\engine\\eng_cnf.c"
		push	95h ; '•'
		push	0BCh ; '¼'
		push	26h ; '&'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebp
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_8D:					; CODE XREF: _int_engine_configure+4Cj
		push	ebx
		push	edi
		xor	ebx, ebx
		push	ebp
		mov	[esp+24h+var_C], ebx
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	loc_3E9
		nop	word ptr [eax+eax+00h]

loc_AC:					; CODE XREF: _int_engine_configure+303j
		push	ebx
		push	ebp
		call	_sk_value
		mov	ebp, eax
		push	2Eh ; '.'       ; Val
		mov	edi, [ebp+4]
		push	edi		; Str
		call	dword ptr ds:__imp__strchr
		add	esp, 10h
		test	eax, eax
		jz	short loc_CB
		lea	edi, [eax+1]

loc_CB:					; CODE XREF: _int_engine_configure+AAj
		mov	ebx, [ebp+8]
		mov	ecx, offset ??_C@_09MNMPHFPA@engine_id?$AA@ ; "engine_id"
		mov	eax, edi
		nop	dword ptr [eax+00000000h]

loc_DC:					; CODE XREF: _int_engine_configure+DAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_FC
		test	dl, dl
		jz	short loc_F8
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_FC
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_DC

loc_F8:					; CODE XREF: _int_engine_configure+C8j
		xor	eax, eax
		jmp	short loc_101
; ---------------------------------------------------------------------------

loc_FC:					; CODE XREF: _int_engine_configure+C4j
					; _int_engine_configure+D0j
		sbb	eax, eax
		or	eax, 1

loc_101:				; CODE XREF: _int_engine_configure+DEj
		test	eax, eax
		jnz	short loc_10E
		mov	[esp+20h+Str], ebx
		jmp	loc_307
; ---------------------------------------------------------------------------

loc_10E:				; CODE XREF: _int_engine_configure+E7j
		mov	ecx, offset ??_C@_09GKJHCOM@soft_load?$AA@ ; "soft_load"
		mov	eax, edi
		nop	dword ptr [eax+00000000h]

loc_11C:				; CODE XREF: _int_engine_configure+11Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_13C
		test	dl, dl
		jz	short loc_138
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_13C
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_11C

loc_138:				; CODE XREF: _int_engine_configure+108j
		xor	eax, eax
		jmp	short loc_141
; ---------------------------------------------------------------------------

loc_13C:				; CODE XREF: _int_engine_configure+104j
					; _int_engine_configure+110j
		sbb	eax, eax
		or	eax, 1

loc_141:				; CODE XREF: _int_engine_configure+11Ej
		test	eax, eax
		jnz	short loc_152
		mov	[esp+20h+var_8], 1
		jmp	loc_307
; ---------------------------------------------------------------------------

loc_152:				; CODE XREF: _int_engine_configure+127j
		mov	ecx, offset ??_C@_0N@BKDPAABD@dynamic_path?$AA@	; "dynamic_path"
		mov	eax, edi
		nop	dword ptr [eax]

loc_15C:				; CODE XREF: _int_engine_configure+15Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_17C
		test	dl, dl
		jz	short loc_178
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_17C
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_15C

loc_178:				; CODE XREF: _int_engine_configure+148j
		xor	eax, eax
		jmp	short loc_181
; ---------------------------------------------------------------------------

loc_17C:				; CODE XREF: _int_engine_configure+144j
					; _int_engine_configure+150j
		sbb	eax, eax
		or	eax, 1

loc_181:				; CODE XREF: _int_engine_configure+15Ej
		test	eax, eax
		jnz	short loc_1E0
		push	offset ??_C@_07OBLKMMON@dynamic?$AA@ ; "dynamic"
		call	_ENGINE_by_id
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	loc_375
		push	0
		push	ebx
		push	offset ??_C@_07EGEBNIPD@SO_PATH?$AA@ ; "SO_PATH"
		push	esi
		call	_ENGINE_ctrl_cmd_string
		add	esp, 10h
		test	eax, eax
		jz	loc_375
		push	0
		push	offset ??_C@_01FDFGLJHB@2?$AA@ ; "2"
		push	offset ??_C@_08OIMNLDBA@LIST_ADD?$AA@ ;	"LIST_ADD"
		push	esi
		call	_ENGINE_ctrl_cmd_string
		add	esp, 10h
		test	eax, eax
		jz	loc_375
		push	0
		push	0
		push	offset ??_C@_04ICOEJIDH@LOAD?$AA@ ; "LOAD"
		jmp	loc_2FA
; ---------------------------------------------------------------------------

loc_1E0:				; CODE XREF: _int_engine_configure+167j
		test	esi, esi
		jnz	short loc_1FA
		push	[esp+20h+Str]
		call	_ENGINE_by_id
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	loc_3CF

loc_1FA:				; CODE XREF: _int_engine_configure+1C6j
		mov	ecx, offset ??_C@_05HKAKDGKI@EMPTY?$AA@	; "EMPTY"
		mov	eax, ebx

loc_201:				; CODE XREF: _int_engine_configure+1FFj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_221
		test	dl, dl
		jz	short loc_21D
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_221
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_201

loc_21D:				; CODE XREF: _int_engine_configure+1EDj
		xor	eax, eax
		jmp	short loc_226
; ---------------------------------------------------------------------------

loc_221:				; CODE XREF: _int_engine_configure+1E9j
					; _int_engine_configure+1F5j
		sbb	eax, eax
		or	eax, 1

loc_226:				; CODE XREF: _int_engine_configure+203j
		xor	ecx, ecx
		test	eax, eax
		mov	eax, edi
		cmovz	ebx, ecx
		mov	ecx, offset ??_C@_04HKFDNBLD@init?$AA@ ; "init"

loc_234:				; CODE XREF: _int_engine_configure+232j
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_254
		test	dl, dl
		jz	short loc_250
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_254
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_234

loc_250:				; CODE XREF: _int_engine_configure+220j
		xor	eax, eax
		jmp	short loc_259
; ---------------------------------------------------------------------------

loc_254:				; CODE XREF: _int_engine_configure+21Cj
					; _int_engine_configure+228j
		sbb	eax, eax
		or	eax, 1

loc_259:				; CODE XREF: _int_engine_configure+236j
		test	eax, eax
		jnz	short loc_2BA
		lea	eax, [esp+20h+var_10]
		push	eax
		push	offset ??_C@_04HKFDNBLD@init?$AA@ ; "init"
		push	[esp+28h+arg_4]
		push	[esp+2Ch+arg_8]
		call	_NCONF_get_number_e
		add	esp, 10h
		test	eax, eax
		jz	loc_375
		mov	eax, [esp+20h+var_10]
		cmp	eax, 1
		jnz	short loc_293
		push	esi
		call	_int_engine_init
		add	esp, 4
		jmp	short loc_303
; ---------------------------------------------------------------------------

loc_293:				; CODE XREF: _int_engine_configure+26Aj
		test	eax, eax
		jz	short loc_307
		push	0ACh ; '¬'
		push	offset ??_C@_0BK@JDIFDBLN@?4?2crypto?2engine?2eng_cnf?4c?$AA@ ;	".\\crypto\\engine\\eng_cnf.c"
		push	97h ; '—'
		push	0BCh ; '¼'
		push	26h ; '&'
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_375
; ---------------------------------------------------------------------------

loc_2BA:				; CODE XREF: _int_engine_configure+23Fj
		mov	ecx, offset ??_C@_0BD@MJBCNKOM@default_algorithms?$AA@ ; "default_algorithms"
		mov	eax, edi

loc_2C1:				; CODE XREF: _int_engine_configure+2BFj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_2E1
		test	dl, dl
		jz	short loc_2DD
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_2E1
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_2C1

loc_2DD:				; CODE XREF: _int_engine_configure+2ADj
		xor	eax, eax
		jmp	short loc_2E6
; ---------------------------------------------------------------------------

loc_2E1:				; CODE XREF: _int_engine_configure+2A9j
					; _int_engine_configure+2B5j
		sbb	eax, eax
		or	eax, 1

loc_2E6:				; CODE XREF: _int_engine_configure+2C3j
		test	eax, eax
		jnz	short loc_2F6
		push	ebx
		push	esi
		call	_ENGINE_set_default_string
		add	esp, 8
		jmp	short loc_303
; ---------------------------------------------------------------------------

loc_2F6:				; CODE XREF: _int_engine_configure+2CCj
		push	0
		push	ebx
		push	edi

loc_2FA:				; CODE XREF: _int_engine_configure+1BFj
		push	esi
		call	_ENGINE_ctrl_cmd_string
		add	esp, 10h

loc_303:				; CODE XREF: _int_engine_configure+275j
					; _int_engine_configure+2D8j
		test	eax, eax
		jz	short loc_375

loc_307:				; CODE XREF: _int_engine_configure+EDj
					; _int_engine_configure+131j ...
		mov	ebx, [esp+20h+var_C]
		mov	ebp, [esp+20h+var_4]
		inc	ebx
		push	ebp
		mov	[esp+24h+var_C], ebx
		call	_sk_num
		add	esp, 4
		cmp	ebx, eax
		jl	loc_AC
		test	esi, esi
		jz	loc_3E9
		cmp	[esp+20h+var_10], 0FFFFFFFFh
		jnz	loc_3E9
		push	esi
		call	_ENGINE_init
		add	esp, 4
		test	eax, eax
		jz	short loc_373
		mov	eax, ds:_initialized_engines
		test	eax, eax
		jnz	short loc_35C
		call	_sk_new_null
		mov	ds:_initialized_engines, eax
		test	eax, eax
		jz	short loc_36A

loc_35C:				; CODE XREF: _int_engine_configure+330j
		push	esi
		push	eax
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jnz	short loc_3E9

loc_36A:				; CODE XREF: _int_engine_configure+33Ej
		push	esi
		call	_ENGINE_finish
		add	esp, 4

loc_373:				; CODE XREF: _int_engine_configure+327j
		xor	ebp, ebp

loc_375:				; CODE XREF: _int_engine_configure+17Aj
					; _int_engine_configure+193j ...
		push	0BFh ; '¿'
		push	offset ??_C@_0BK@JDIFDBLN@?4?2crypto?2engine?2eng_cnf?4c?$AA@ ;	".\\crypto\\engine\\eng_cnf.c"
		push	66h ; 'f'
		push	0BCh ; '¼'
		push	26h ; '&'
		call	_ERR_put_error
		add	esp, 14h
		test	ebp, ebp
		jz	short loc_3B6
		push	dword ptr [ebp+8]
		push	offset ??_C@_08OMICEKMJ@?0?5value?$DN?$AA@ ; ",	value="
		push	dword ptr [ebp+4]
		push	offset ??_C@_07IAKNDAGP@?0?5name?$DN?$AA@ ; ", name="
		push	dword ptr [ebp+0]
		push	offset ??_C@_08LNPIPPMM@section?$DN?$AA@ ; "section="
		push	6
		call	_ERR_add_error_data
		add	esp, 1Ch

loc_3B6:				; CODE XREF: _int_engine_configure+376j
		xor	ebx, ebx

loc_3B8:				; CODE XREF: _int_engine_configure+3D2j
		test	esi, esi
		jz	short loc_3C5
		push	esi
		call	_ENGINE_free
		add	esp, 4

loc_3C5:				; CODE XREF: _int_engine_configure+39Ej
		pop	edi
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	ebp
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_3CF:				; CODE XREF: _int_engine_configure+1D8j
		mov	eax, [esp+20h+var_8]
		test	eax, eax
		jz	short loc_375
		call	_ERR_clear_error
		pop	edi
		pop	ebx
		pop	esi
		mov	eax, 1
		pop	ebp
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_3E9:				; CODE XREF: _int_engine_configure+84j
					; _int_engine_configure+30Bj ...
		mov	ebx, 1
		jmp	short loc_3B8
_int_engine_configure endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3F0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_engine_init proc near		; CODE XREF: _int_engine_configure+26Dp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	esi
		call	_ENGINE_init
		add	esp, 4
		test	eax, eax
		jz	short loc_437
		mov	eax, ds:_initialized_engines
		test	eax, eax
		jnz	short loc_419
		call	_sk_new_null
		mov	ds:_initialized_engines, eax
		test	eax, eax
		jz	short loc_42E

loc_419:				; CODE XREF: _int_engine_init+19j
		push	esi
		push	eax
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	short loc_42E
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_42E:				; CODE XREF: _int_engine_init+27j
					; _int_engine_init+35j
		push	esi
		call	_ENGINE_finish
		add	esp, 4

loc_437:				; CODE XREF: _int_engine_init+10j
		xor	eax, eax
		pop	esi
		retn
_int_engine_init endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 43Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_engine_module_finish proc near	; DATA XREF: _ENGINE_add_conf_moduleo
		push	ds:_initialized_engines
		call	_sk_pop
		add	esp, 4
		test	eax, eax
		jz	short loc_466

loc_44E:				; CODE XREF: _int_engine_module_finish+28j
		push	eax
		call	_ENGINE_finish
		push	ds:_initialized_engines
		call	_sk_pop
		add	esp, 8
		test	eax, eax
		jnz	short loc_44E

loc_466:				; CODE XREF: _int_engine_module_finish+10j
		push	ds:_initialized_engines
		call	_sk_free
		add	esp, 4
		mov	ds:_initialized_engines, 0
		retn
_int_engine_module_finish endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 480h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_int_engine_module_init	proc near	; DATA XREF: _ENGINE_add_conf_module+5o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	edi
		push	[esp+8+arg_0]
		call	_CONF_imodule_get_value
		mov	ebx, [esp+0Ch+arg_4]
		push	eax
		push	ebx
		call	_NCONF_get_section
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_4C2
		push	0D8h ; 'Ø'
		push	offset ??_C@_0BK@JDIFDBLN@?4?2crypto?2engine?2eng_cnf?4c?$AA@ ;	".\\crypto\\engine\\eng_cnf.c"
		push	94h ; '”'
		push	0BBh ; '»'
		push	26h ; '&'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_4C2:				; CODE XREF: _int_engine_module_init+1Dj
		push	esi
		push	edi
		xor	esi, esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_4FA

loc_4D2:				; CODE XREF: _int_engine_module_init+78j
		push	esi
		push	edi
		call	_sk_value
		push	ebx		; int
		push	dword ptr [eax+8] ; int
		push	dword ptr [eax+4] ; Str
		call	_int_engine_configure
		add	esp, 14h
		test	eax, eax
		jz	short loc_503
		push	edi
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_4D2

loc_4FA:				; CODE XREF: _int_engine_module_init+50j
		pop	esi
		pop	edi
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_503:				; CODE XREF: _int_engine_module_init+6Aj
		pop	esi
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
_int_engine_module_init	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 50Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl skip_dot(char *Str)
_skip_dot	proc near

Str		= dword	ptr  4

		push	2Eh ; '.'       ; Val
		push	[esp+4+Str]	; Str
		call	dword ptr ds:__imp__strchr
		add	esp, 8
		test	eax, eax
		jz	short loc_521
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_521:				; CODE XREF: _skip_dot+11j
		mov	eax, [esp+Str]
		retn
_skip_dot	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 528h
; COMDAT (pick any)
		public ??_C@_0BK@JDIFDBLN@?4?2crypto?2engine?2eng_cnf?4c?$AA@
; `string'
??_C@_0BK@JDIFDBLN@?4?2crypto?2engine?2eng_cnf?4c?$AA@ db '.\crypto\engine\eng_cnf.c',0
					; DATA XREF: _int_engine_configure+50o
					; _int_engine_configure+280o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 544h
; COMDAT (pick any)
		public ??_C@_09MNMPHFPA@engine_id?$AA@
; `string'
??_C@_09MNMPHFPA@engine_id?$AA@	db 'engine_id',0 ; DATA XREF: _int_engine_configure+B2o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 550h
; COMDAT (pick any)
		public ??_C@_09GKJHCOM@soft_load?$AA@
; `string'
??_C@_09GKJHCOM@soft_load?$AA@ db 'soft_load',0 ; DATA XREF: _int_engine_configure:loc_10Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 55Ch
; COMDAT (pick any)
		public ??_C@_0N@BKDPAABD@dynamic_path?$AA@
; `string'
??_C@_0N@BKDPAABD@dynamic_path?$AA@ db 'dynamic_path',0
					; DATA XREF: _int_engine_configure:loc_152o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 56Ch
; COMDAT (pick any)
		public ??_C@_07OBLKMMON@dynamic?$AA@
; `string'
??_C@_07OBLKMMON@dynamic?$AA@ db 'dynamic',0 ; DATA XREF: _int_engine_configure+169o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 574h
; COMDAT (pick any)
		public ??_C@_07EGEBNIPD@SO_PATH?$AA@
; `string'
??_C@_07EGEBNIPD@SO_PATH?$AA@ db 'SO_PATH',0 ; DATA XREF: _int_engine_configure+183o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 57Ch
; COMDAT (pick any)
		public ??_C@_01FDFGLJHB@2?$AA@
; `string'
??_C@_01FDFGLJHB@2?$AA@	db '2',0        ; DATA XREF: _int_engine_configure+19Bo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 580h
; COMDAT (pick any)
		public ??_C@_08OIMNLDBA@LIST_ADD?$AA@
; `string'
??_C@_08OIMNLDBA@LIST_ADD?$AA@ db 'LIST_ADD',0 ; DATA XREF: _int_engine_configure+1A0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 58Ch
; COMDAT (pick any)
		public ??_C@_04ICOEJIDH@LOAD?$AA@
; `string'
??_C@_04ICOEJIDH@LOAD?$AA@ db 'LOAD',0  ; DATA XREF: _int_engine_configure+1BAo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 594h
; COMDAT (pick any)
		public ??_C@_05HKAKDGKI@EMPTY?$AA@
; `string'
??_C@_05HKAKDGKI@EMPTY?$AA@ db 'EMPTY',0 ; DATA XREF: _int_engine_configure:loc_1FAo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 59Ch
; COMDAT (pick any)
		public ??_C@_04HKFDNBLD@init?$AA@
; `string'
??_C@_04HKFDNBLD@init?$AA@ db 'init',0  ; DATA XREF: _int_engine_configure+213o
					; _int_engine_configure+246o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5A4h
; COMDAT (pick any)
		public ??_C@_0BD@MJBCNKOM@default_algorithms?$AA@
; `string'
??_C@_0BD@MJBCNKOM@default_algorithms?$AA@ db 'default_algorithms',0
					; DATA XREF: _int_engine_configure:loc_2BAo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5B8h
; COMDAT (pick any)
		public ??_C@_08OMICEKMJ@?0?5value?$DN?$AA@
; `string'
??_C@_08OMICEKMJ@?0?5value?$DN?$AA@ db ', value=',0 ; DATA XREF: _int_engine_configure+37Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5C4h
; COMDAT (pick any)
		public ??_C@_07IAKNDAGP@?0?5name?$DN?$AA@
; `string'
??_C@_07IAKNDAGP@?0?5name?$DN?$AA@ db ', name=',0 ; DATA XREF: _int_engine_configure+383o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5CCh
; COMDAT (pick any)
		public ??_C@_08LNPIPPMM@section?$DN?$AA@
; `string'
??_C@_08LNPIPPMM@section?$DN?$AA@ db 'section=',0 ; DATA XREF: _int_engine_configure+38Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5D8h
; COMDAT (pick any)
		public ??_C@_07MJHLDAOB@engines?$AA@
; `string'
??_C@_07MJHLDAOB@engines?$AA@ db 'engines',0 ; DATA XREF: _ENGINE_add_conf_module+Ao
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; char *__cdecl	_strchr(const char *Str, int Val)
		extrn __imp__strchr:near ; CODE	XREF: _int_engine_configure+22p
					; _int_engine_configure+9Fp ...
		extrn _sk_num:near	; CODE XREF: _int_engine_configure+7Ap
					; _int_engine_configure+2F9p ...
		extrn _sk_value:near	; CODE XREF: _int_engine_configure+92p
					; _int_engine_module_init+54p
		extrn _sk_new_null:near	; CODE XREF: _int_engine_configure+332p
					; _int_engine_init+1Bp
		extrn _sk_free:near	; CODE XREF: _int_engine_module_finish+30p
		extrn _sk_push:near	; CODE XREF: _int_engine_configure+342p
					; _int_engine_init+2Bp
		extrn _sk_pop:near	; CODE XREF: _int_engine_module_finish+6p
					; _int_engine_module_finish+1Ep
		extrn _ERR_put_error:near ; CODE XREF: _int_engine_configure+61p
					; _int_engine_configure+291p ...
		extrn _ERR_clear_error:near ; CODE XREF: _int_engine_configure+3BBp
		extrn _ERR_add_error_data:near ; CODE XREF: _int_engine_configure+392p
		extrn _ENGINE_by_id:near ; CODE	XREF: _int_engine_configure+16Ep
					; _int_engine_configure+1CCp
		extrn _ENGINE_ctrl_cmd_string:near ; CODE XREF:	_int_engine_configure+189p
					; _int_engine_configure+1A6p ...
		extrn _ENGINE_free:near	; CODE XREF: _int_engine_configure+3A1p
		extrn _ENGINE_init:near	; CODE XREF: _int_engine_configure+31Dp
					; _int_engine_init+6p
		extrn _ENGINE_finish:near ; CODE XREF: _int_engine_configure+34Fp
					; _int_engine_init+3Fp	...
		extrn _ENGINE_set_default_string:near
					; CODE XREF: _int_engine_configure+2D0p
		extrn _NCONF_get_section:near ;	CODE XREF: _int_engine_configure+3Cp
					; _int_engine_module_init+11p
		extrn _NCONF_get_number_e:near ; CODE XREF: _int_engine_configure+253p
		extrn _CONF_module_add:near ; CODE XREF: _ENGINE_add_conf_module+Fp
		extrn _CONF_imodule_get_value:near ; CODE XREF:	_int_engine_module_init+6p
		extrn __chkstk:near	; CODE XREF: _int_engine_configure+5p


		end
