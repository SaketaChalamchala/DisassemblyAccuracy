;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	CC93C9C9C907B64205260F1AC9AE5D6D
; Input	CRC32 :	A28BAED2

; File Name   :	C:\compspace\Diff\openssl\obj\sha_dgst.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		public _SHA_version
_SHA_version	db 'SHA part of OpenSSL 1.0.2h  3 May 2016',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 28h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SHA_Final
_SHA_Final	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	esi
		push	edi
		lea	edi, [ebx+1Ch]
		mov	esi, [ebx+5Ch]
		mov	byte ptr [esi+edi], 80h	; '€'
		inc	esi
		cmp	esi, 38h ; '8'
		jbe	short loc_60
		mov	eax, 40h ; '@'
		sub	eax, esi
		push	eax		; Size
		lea	eax, [esi+edi]
		push	0		; Val
		push	eax		; Dst
		call	_memset
		push	1
		push	edi
		push	ebx
		xor	esi, esi
		call	_sha_block_data_order
		add	esp, 18h

loc_60:					; CODE XREF: _SHA_Final+15j
		mov	eax, 38h ; '8'
		sub	eax, esi
		push	eax		; Size
		lea	eax, [esi+edi]
		push	0		; Val
		push	eax		; Dst
		call	_memset
		movzx	eax, byte ptr [ebx+1Bh]
		mov	[edi+38h], al
		movzx	eax, byte ptr [ebx+1Ah]
		mov	[edi+39h], al
		movzx	eax, byte ptr [ebx+19h]
		mov	[edi+3Ah], al
		movzx	eax, byte ptr [ebx+18h]
		mov	[edi+3Bh], al
		movzx	eax, byte ptr [ebx+17h]
		mov	[edi+3Ch], al
		movzx	eax, byte ptr [ebx+16h]
		mov	[edi+3Dh], al
		movzx	eax, byte ptr [ebx+15h]
		push	1
		mov	[edi+3Eh], al
		movzx	eax, byte ptr [ebx+14h]
		push	edi
		push	ebx
		mov	[edi+3Fh], al
		call	_sha_block_data_order
		push	40h ; '@'       ; Size
		push	0		; Val
		push	edi		; Dst
		mov	dword ptr [ebx+5Ch], 0
		call	_memset
		mov	ecx, [ebx]
		add	esp, 24h
		mov	edx, [esp+0Ch+arg_0]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+1], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+2], al
		mov	[edx+3], cl
		mov	ecx, [ebx+4]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+4], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+5], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+6], al
		mov	[edx+7], cl
		mov	ecx, [ebx+8]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+8], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+9], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+0Ah], al
		mov	[edx+0Bh], cl
		mov	ecx, [ebx+0Ch]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+0Ch], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+0Dh], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+0Eh], al
		mov	[edx+0Fh], cl
		mov	ecx, [ebx+10h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+10h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+11h], al
		mov	eax, ecx
		pop	edi
		shr	eax, 8
		mov	[edx+12h], al
		mov	eax, 1
		pop	esi
		mov	[edx+13h], cl
		pop	ebx
		retn
_SHA_Final	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 16Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl SHA_Init(void *Dst)
		public _SHA_Init
_SHA_Init	proc near

Dst		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Dst]
		push	60h ; '`'       ; Size
		push	0		; Val
		push	esi		; Dst
		call	_memset
		add	esp, 0Ch
		mov	dword ptr [esi], 67452301h
		mov	dword ptr [esi+4], 0EFCDAB89h
		mov	eax, 1
		mov	dword ptr [esi+8], 98BADCFEh
		mov	dword ptr [esi+0Ch], 10325476h
		mov	dword ptr [esi+10h], 0C3D2E1F0h
		pop	esi
		retn
_SHA_Init	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SHA_Transform
_SHA_Transform	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	1
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_sha_block_data_order
		add	esp, 0Ch
		retn
_SHA_Transform	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl SHA_Update(int, void *Src, size_t	Size)
		public _SHA_Update
_SHA_Update	proc near

arg_0		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, [esp+4+Src]
		push	edi
		mov	edi, [esp+8+Size]
		test	edi, edi
		jz	loc_289
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		mov	eax, [ebx+14h]
		lea	ecx, [eax+edi*8]
		cmp	ecx, eax
		jnb	short loc_1E0
		inc	dword ptr [ebx+18h]

loc_1E0:				; CODE XREF: _SHA_Update+1Fj
		mov	eax, edi
		mov	[ebx+14h], ecx
		mov	ecx, [ebx+5Ch]
		shr	eax, 1Dh
		add	[ebx+18h], eax
		push	esi
		test	ecx, ecx
		jz	short loc_257
		lea	edx, [ebx+1Ch]
		cmp	edi, 40h ; '@'
		jnb	short loc_21E
		lea	eax, [ecx+edi]
		cmp	eax, 40h ; '@'
		jnb	short loc_21E
		push	edi		; Size
		lea	eax, [edx+ecx]
		push	ebp		; Src
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	eax, 1
		add	[ebx+5Ch], edi
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_21E:				; CODE XREF: _SHA_Update+3Dj
					; _SHA_Update+45j
		mov	esi, 40h ; '@'
		lea	eax, [edx+ecx]
		sub	esi, ecx
		push	esi		; Size
		push	ebp		; Src
		push	eax		; Dst
		call	_memcpy
		push	1
		lea	eax, [ebx+1Ch]
		push	eax
		push	ebx
		call	_sha_block_data_order
		push	40h ; '@'       ; Size
		lea	eax, [ebx+1Ch]
		mov	dword ptr [ebx+5Ch], 0
		push	0		; Val
		push	eax		; Dst
		add	ebp, esi
		sub	edi, esi
		call	_memset
		add	esp, 24h

loc_257:				; CODE XREF: _SHA_Update+35j
		mov	esi, edi
		shr	esi, 6
		test	esi, esi
		jz	short loc_272
		push	esi
		push	ebp
		push	ebx
		call	_sha_block_data_order
		shl	esi, 6
		add	esp, 0Ch
		add	ebp, esi
		sub	edi, esi

loc_272:				; CODE XREF: _SHA_Update+A2j
		test	edi, edi
		jz	short loc_287
		push	edi		; Size
		lea	eax, [ebx+1Ch]
		mov	[ebx+5Ch], edi
		push	ebp		; Src
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch

loc_287:				; CODE XREF: _SHA_Update+B8j
		pop	esi
		pop	ebx

loc_289:				; CODE XREF: _SHA_Update+Cj
		pop	edi
		mov	eax, 1
		pop	ebp
		retn
_SHA_Update	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 294h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_sha_block_data_order proc near		; CODE XREF: _SHA_Final+30p
					; _SHA_Final+87p ...

var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 54h ; 'T'
		call	__chkstk
		mov	eax, [esp+54h+arg_0]
		push	ebx
		push	ebp
		push	esi
		mov	edx, [eax]
		mov	esi, [eax+8]
		push	edi
		mov	[esp+64h+arg_0], edx
		nop	dword ptr [eax+eax+00h]

loc_2B4:				; CODE XREF: _sha_block_data_order+148Aj
		mov	edi, [esp+64h+arg_4]
		rol	edx, 5
		movzx	ebx, byte ptr [edi]
		movzx	ecx, byte ptr [edi+1]
		shl	ecx, 10h
		movzx	ebp, byte ptr [edi+4]
		shl	ebx, 18h
		or	ebx, ecx
		shl	ebp, 18h
		movzx	ecx, byte ptr [edi+2]
		shl	ecx, 8
		or	ebx, ecx
		movzx	ecx, byte ptr [edi+3]
		or	ebx, ecx
		movzx	ecx, byte ptr [edi+5]
		shl	ecx, 10h
		add	edx, ebx
		or	ebp, ecx
		mov	[esp+64h+var_34], ebx
		movzx	ecx, byte ptr [edi+6]
		shl	ecx, 8
		or	ebp, ecx
		movzx	ebx, byte ptr [edi+8]
		movzx	ecx, byte ptr [edi+7]
		or	ebp, ecx
		shl	ebx, 18h
		mov	ecx, [eax+0Ch]
		xor	ecx, esi
		mov	[esp+64h+var_3C], ebp
		and	ecx, [eax+4]
		xor	ecx, [eax+0Ch]
		mov	esi, [eax+10h]
		add	ecx, edx
		add	esi, 5A827999h
		add	esi, ecx
		mov	ecx, [eax+4]
		rol	ecx, 1Eh
		mov	edx, esi
		mov	[esp+64h+var_C], ecx
		movzx	ecx, byte ptr [edi+9]
		shl	ecx, 10h
		or	ebx, ecx
		rol	edx, 5
		movzx	ecx, byte ptr [edi+0Ah]
		add	edx, ebp
		shl	ecx, 8
		or	ebx, ecx
		movzx	ecx, byte ptr [edi+0Bh]
		or	ebx, ecx
		add	edi, 0Ch
		mov	ecx, [eax+8]
		xor	ecx, [esp+64h+var_C]
		and	ecx, [esp+64h+arg_0]
		xor	ecx, [eax+8]
		add	ecx, edx
		mov	[esp+64h+arg_4], edi
		mov	edi, [eax+0Ch]
		mov	edx, [esp+64h+arg_4]
		add	edi, 5A827999h
		add	edi, ecx
		mov	[esp+64h+var_2C], ebx
		mov	ecx, [eax]
		rol	ecx, 1Eh
		movzx	ebp, byte ptr [edx]
		mov	[esp+64h+arg_0], ecx
		movzx	ecx, byte ptr [edx+1]
		shl	ecx, 10h
		shl	ebp, 18h
		or	ebp, ecx
		movzx	ecx, byte ptr [edx+2]
		shl	ecx, 8
		or	ebp, ecx
		movzx	ecx, byte ptr [edx+3]
		add	edx, 4
		or	ebp, ecx
		mov	ecx, [esp+64h+var_C]
		mov	[esp+64h+arg_4], edx
		mov	edx, edi
		rol	edx, 5
		xor	ecx, [esp+64h+arg_0]
		mov	[esp+64h+var_30], ebp
		and	ecx, esi
		add	edx, ebx
		xor	ecx, [esp+64h+var_C]
		add	ecx, edx
		mov	ebx, [eax+8]
		add	ebx, 5A827999h
		rol	esi, 1Eh
		add	ebx, ecx
		mov	ecx, [esp+64h+arg_4]
		movzx	edx, byte ptr [ecx]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		shl	edx, 18h
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 10h
		or	edx, ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 8
		or	edx, ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		inc	[esp+64h+arg_4]
		movzx	ecx, byte ptr [ecx]
		or	edx, ecx
		mov	ecx, esi
		xor	ecx, [esp+64h+arg_0]
		and	ecx, edi
		mov	[esp+64h+var_20], edx
		xor	ecx, [esp+64h+arg_0]
		mov	edx, ebx
		rol	edx, 5
		add	edx, ebp
		rol	edi, 1Eh
		mov	ebp, [esp+64h+var_C]
		add	ecx, edx
		add	ebp, 5A827999h
		add	ebp, ecx
		mov	ecx, [esp+64h+arg_4]
		movzx	edx, byte ptr [ecx]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		shl	edx, 18h
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 10h
		or	edx, ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 8
		or	edx, ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		inc	[esp+64h+arg_4]
		movzx	ecx, byte ptr [ecx]
		or	edx, ecx
		mov	ecx, esi
		xor	ecx, edi
		mov	[esp+64h+var_24], edx
		and	ecx, ebx
		mov	edx, ebp
		rol	edx, 5
		xor	ecx, esi
		add	edx, [esp+64h+var_20]
		add	ecx, edx
		rol	ebx, 1Eh
		mov	edx, [esp+64h+arg_0]
		add	edx, 5A827999h
		add	edx, ecx
		mov	ecx, [esp+64h+arg_4]
		mov	[esp+64h+arg_0], edx
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 18h
		mov	[esp+64h+var_4C], ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 10h
		or	[esp+64h+var_4C], ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		rol	edx, 5
		mov	[esp+64h+arg_4], ecx
		add	edx, [esp+64h+var_24]
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 8
		or	[esp+64h+var_4C], ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		inc	[esp+64h+arg_4]
		movzx	ecx, byte ptr [ecx]
		or	[esp+64h+var_4C], ecx
		mov	ecx, edi
		xor	ecx, ebx
		and	ecx, ebp
		rol	ebp, 1Eh
		xor	ecx, edi
		add	ecx, edx
		lea	edx, [esi+5A827999h]
		add	edx, ecx
		mov	ecx, [esp+64h+arg_4]
		mov	[esp+64h+var_8], edx
		rol	edx, 5
		add	edx, [esp+64h+var_4C]
		movzx	esi, byte ptr [ecx]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		shl	esi, 18h
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 10h
		or	esi, ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 8
		or	esi, ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		inc	[esp+64h+arg_4]
		movzx	ecx, byte ptr [ecx]
		or	esi, ecx
		mov	ecx, ebx
		xor	ecx, ebp
		mov	[esp+64h+var_28], esi
		mov	esi, [esp+64h+arg_0]
		and	ecx, esi
		xor	ecx, ebx
		rol	esi, 1Eh
		add	ecx, edx
		lea	edx, [edi+5A827999h]
		add	edx, ecx
		mov	ecx, [esp+64h+arg_4]
		mov	[esp+64h+var_14], edx
		movzx	edi, byte ptr [ecx]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		shl	edi, 18h
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 10h
		or	edi, ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 8
		or	edi, ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		movzx	ecx, byte ptr [ecx]
		or	edi, ecx
		inc	[esp+64h+arg_4]
		mov	[esp+64h+var_C], edi
		mov	edi, [esp+64h+var_8]
		mov	ecx, ebp
		xor	ecx, esi
		rol	edx, 5
		and	ecx, edi
		add	edx, 5A827999h
		add	edx, [esp+64h+var_28]
		xor	ecx, ebp
		add	ecx, edx
		rol	edi, 1Eh
		add	ebx, ecx
		mov	ecx, [esp+64h+arg_4]
		mov	[esp+64h+var_1C], ebx
		movzx	edx, byte ptr [ecx]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		shl	edx, 18h
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 10h
		or	edx, ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 8
		or	edx, ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		inc	[esp+64h+arg_4]
		movzx	ecx, byte ptr [ecx]
		or	edx, ecx
		mov	ecx, esi
		xor	ecx, edi
		mov	[esp+64h+var_10], edx
		and	ecx, [esp+64h+var_14]
		mov	edx, ebx
		xor	ecx, esi
		rol	edx, 5
		add	edx, [esp+64h+var_C]
		add	ecx, edx
		lea	edx, [ebp+5A827999h]
		add	edx, ecx
		mov	ebp, [esp+64h+var_14]
		mov	ecx, [esp+64h+arg_4]
		rol	ebp, 1Eh
		mov	[esp+64h+arg_0], edx
		rol	edx, 5
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 18h
		mov	[esp+64h+var_50], ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		add	edx, [esp+64h+var_10]
		mov	[esp+64h+arg_4], ecx
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 10h
		or	[esp+64h+var_50], ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 8
		or	[esp+64h+var_50], ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		inc	[esp+64h+arg_4]
		movzx	ecx, byte ptr [ecx]
		or	[esp+64h+var_50], ecx
		mov	ecx, ebp
		xor	ecx, edi
		and	ecx, ebx
		lea	ebx, [esi+5A827999h]
		mov	esi, [esp+64h+var_1C]
		xor	ecx, edi
		add	ecx, edx
		add	ebx, ecx
		mov	ecx, [esp+64h+arg_4]
		rol	esi, 1Eh
		mov	[esp+64h+var_1C], esi
		movzx	edx, byte ptr [ecx]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		shl	edx, 18h
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 10h
		or	edx, ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 8
		or	edx, ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		inc	[esp+64h+arg_4]
		movzx	ecx, byte ptr [ecx]
		or	edx, ecx
		mov	ecx, ebp
		xor	ecx, esi
		mov	[esp+64h+var_14], edx
		and	ecx, [esp+64h+arg_0]
		lea	esi, [edi+5A827999h]
		mov	edi, [esp+64h+arg_4]
		xor	ecx, ebp
		rol	[esp+64h+arg_0], 1Eh
		mov	edx, ebx
		rol	edx, 5
		add	ebp, 5A827999h
		add	edx, [esp+64h+var_50]
		add	ecx, edx
		movzx	edx, byte ptr [edi]
		add	esi, ecx
		shl	edx, 18h
		movzx	ecx, byte ptr [edi+1]
		shl	ecx, 10h
		or	edx, ecx
		movzx	ecx, byte ptr [edi+2]
		shl	ecx, 8
		or	edx, ecx
		movzx	ecx, byte ptr [edi+3]
		or	edx, ecx
		add	edi, 4
		mov	[esp+64h+var_18], edx
		mov	edx, esi
		mov	[esp+64h+arg_4], edi
		mov	edi, [esp+64h+var_1C]
		mov	ecx, edi
		xor	ecx, [esp+64h+arg_0]
		and	ecx, ebx
		rol	edx, 5
		add	edx, [esp+64h+var_14]
		xor	ecx, edi
		add	ecx, edx
		rol	ebx, 1Eh
		add	ebp, ecx
		mov	[esp+64h+var_8], ebx
		mov	ecx, [esp+64h+arg_4]
		movzx	edx, byte ptr [ecx]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		shl	edx, 18h
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 10h
		or	edx, ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 8
		or	edx, ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		inc	[esp+64h+arg_4]
		movzx	ecx, byte ptr [ecx]
		or	edx, ecx
		mov	[esp+64h+var_44], edx
		mov	edx, ebp
		rol	edx, 5
		add	edx, [esp+64h+var_18]
		add	edi, 5A827999h
		mov	ecx, [esp+64h+arg_0]
		xor	ecx, ebx
		and	ecx, esi
		rol	esi, 1Eh
		xor	ecx, [esp+64h+arg_0]
		add	ecx, edx
		mov	[esp+64h+var_1C], esi
		add	edi, ecx
		mov	ecx, [esp+64h+arg_4]
		movzx	edx, byte ptr [ecx]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		shl	edx, 18h
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 10h
		or	edx, ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 8
		or	edx, ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		inc	[esp+64h+arg_4]
		movzx	ecx, byte ptr [ecx]
		or	edx, ecx
		mov	ecx, ebx
		xor	ecx, esi
		mov	[esp+64h+var_54], edx
		and	ecx, ebp
		mov	edx, edi
		xor	ecx, ebx
		rol	edx, 5
		add	edx, [esp+64h+var_44]
		mov	ebx, [esp+64h+arg_0]
		add	ecx, edx
		add	ebx, 5A827999h
		rol	ebp, 1Eh
		add	ebx, ecx
		mov	[esp+64h+var_38], ebp
		mov	ecx, [esp+64h+arg_4]
		movzx	edx, byte ptr [ecx]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		shl	edx, 18h
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 10h
		or	edx, ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		movzx	ecx, byte ptr [ecx]
		shl	ecx, 8
		or	edx, ecx
		mov	ecx, [esp+64h+arg_4]
		inc	ecx
		mov	[esp+64h+arg_4], ecx
		inc	[esp+64h+arg_4]
		movzx	ecx, byte ptr [ecx]
		or	edx, ecx
		mov	ecx, esi
		mov	[esp+64h+arg_0], edx
		xor	ecx, ebp
		and	ecx, edi
		mov	edx, ebx
		xor	ecx, esi
		rol	edx, 5
		add	edx, [esp+64h+var_54]
		mov	esi, [esp+64h+var_8]
		add	ecx, edx
		add	esi, 5A827999h
		rol	edi, 1Eh
		add	esi, ecx
		mov	[esp+64h+var_8], edi
		mov	edx, esi
		mov	ecx, edi
		rol	edx, 5
		add	edx, [esp+64h+arg_0]
		xor	ecx, ebp
		and	ecx, ebx
		rol	ebx, 1Eh
		xor	ecx, ebp
		mov	[esp+64h+var_4], ebx
		add	ecx, edx
		mov	ebp, [esp+64h+var_1C]
		add	ebp, 5A827999h
		add	ebp, ecx
		mov	ecx, [esp+64h+var_44]
		xor	ecx, [esp+64h+var_C]
		mov	edx, ebp
		xor	ecx, [esp+64h+var_2C]
		xor	ecx, [esp+64h+var_34]
		mov	[esp+64h+var_48], ecx
		mov	ecx, edi
		xor	ecx, ebx
		rol	edx, 5
		add	edx, [esp+64h+var_38]
		and	ecx, esi
		xor	edi, ecx
		rol	esi, 1Eh
		mov	ecx, [esp+64h+var_54]
		add	edi, edx
		xor	ecx, [esp+64h+var_10]
		xor	ecx, [esp+64h+var_30]
		xor	ecx, [esp+64h+var_3C]
		mov	edx, [esp+64h+var_48]
		add	edx, 5A827999h
		mov	[esp+64h+var_40], ecx
		add	edi, edx
		mov	ecx, ebx
		xor	ecx, esi
		mov	edx, edi
		and	ecx, ebp
		rol	edx, 5
		add	edx, [esp+64h+var_8]
		xor	ebx, ecx
		mov	ecx, [esp+64h+arg_0]
		add	ebx, edx
		xor	ecx, [esp+64h+var_50]
		xor	ecx, [esp+64h+var_20]
		mov	edx, [esp+64h+var_40]
		xor	ecx, [esp+64h+var_2C]
		add	edx, 5A827999h
		add	ebx, edx
		rol	ebp, 1Eh
		mov	[esp+64h+var_1C], ebp
		mov	edx, ebx
		xor	ebp, esi
		rol	edx, 5
		add	edx, [esp+64h+var_4]
		and	ebp, edi
		mov	[esp+64h+var_3C], ecx
		xor	ebp, esi
		add	ebp, edx
		rol	edi, 1Eh
		mov	edx, ecx
		mov	[esp+64h+var_4], edi
		mov	ecx, [esp+64h+var_14]
		add	edx, 5A827999h
		xor	ecx, [esp+64h+var_24]
		add	ebp, edx
		xor	ecx, [esp+64h+var_30]
		mov	edx, ebp
		xor	ecx, [esp+64h+var_48]
		mov	[esp+64h+var_38], ecx
		mov	ecx, [esp+64h+var_1C]
		xor	ecx, edi
		rol	edx, 5
		add	esi, edx
		and	ecx, ebx
		xor	ecx, [esp+64h+var_1C]
		mov	edx, [esp+64h+var_38]
		add	esi, ecx
		mov	ecx, [esp+64h+var_18]
		add	edx, 5A827999h
		add	esi, edx
		rol	ebx, 1Eh
		mov	[esp+64h+var_8], ebx
		xor	ecx, [esp+64h+var_4C]
		xor	edi, ebp
		xor	ecx, [esp+64h+var_20]
		xor	edi, ebx
		xor	ecx, [esp+64h+var_40]
		mov	edx, esi
		rol	edx, 5
		add	edx, [esp+64h+var_1C]
		mov	[esp+64h+var_34], ecx
		add	edi, edx
		mov	edx, ecx
		rol	ebp, 1Eh
		mov	ecx, [esp+64h+var_44]
		add	edx, 6ED9EBA1h
		xor	ecx, [esp+64h+var_28]
		add	edi, edx
		xor	ecx, [esp+64h+var_24]
		mov	edx, edi
		xor	ecx, [esp+64h+var_3C]
		mov	[esp+64h+var_30], ecx
		mov	ecx, ebp
		xor	ecx, esi
		rol	edx, 5
		add	edx, [esp+64h+var_4]
		xor	ebx, ecx
		mov	ecx, [esp+64h+var_54]
		add	ebx, edx
		xor	ecx, [esp+64h+var_C]
		xor	ecx, [esp+64h+var_4C]
		xor	ecx, [esp+64h+var_38]
		mov	edx, [esp+64h+var_30]
		add	edx, 6ED9EBA1h
		mov	[esp+64h+var_4C], ecx
		add	ebx, edx
		mov	[esp+64h+var_1C], ebp
		rol	esi, 1Eh
		mov	edx, ebx
		rol	edx, 5
		xor	ebp, esi
		add	edx, [esp+64h+var_8]
		xor	ebp, edi
		add	ebp, edx
		rol	edi, 1Eh
		mov	edx, ecx
		mov	ecx, [esp+64h+arg_0]
		xor	ecx, [esp+64h+var_10]
		add	edx, 6ED9EBA1h
		xor	ecx, [esp+64h+var_28]
		add	ebp, edx
		xor	ecx, [esp+64h+var_34]
		mov	edx, ebp
		mov	[esp+64h+var_2C], ecx
		mov	ecx, esi
		xor	ecx, edi
		rol	edx, 5
		add	edx, [esp+64h+var_1C]
		xor	ecx, ebx
		add	ecx, edx
		rol	ebx, 1Eh
		mov	edx, [esp+64h+var_2C]
		add	edx, 6ED9EBA1h
		add	edx, ecx
		mov	ecx, [esp+64h+var_50]
		xor	ecx, [esp+64h+var_C]
		xor	ecx, [esp+64h+var_30]
		xor	ecx, [esp+64h+var_48]
		mov	[esp+64h+var_28], ecx
		mov	ecx, edi
		mov	[esp+64h+var_4], edx
		xor	ecx, ebx
		rol	edx, 5
		xor	ecx, ebp
		add	edx, esi
		rol	ebp, 1Eh
		add	ecx, edx
		mov	edx, [esp+64h+var_28]
		add	edx, 6ED9EBA1h
		add	edx, ecx
		mov	ecx, [esp+64h+var_14]
		xor	ecx, [esp+64h+var_10]
		mov	[esp+64h+var_8], edx
		xor	ecx, [esp+64h+var_4C]
		xor	ecx, [esp+64h+var_40]
		mov	[esp+64h+var_24], ecx
		mov	ecx, ebx
		xor	ecx, ebp
		mov	esi, [esp+64h+var_4]
		xor	ecx, esi
		rol	edx, 5
		add	edx, edi
		rol	esi, 1Eh
		add	ecx, edx
		mov	edi, [esp+64h+var_8]
		mov	edx, [esp+64h+var_24]
		add	edx, 6ED9EBA1h
		add	edx, ecx
		mov	ecx, [esp+64h+var_18]
		xor	ecx, [esp+64h+var_50]
		xor	ecx, [esp+64h+var_2C]
		xor	ecx, [esp+64h+var_3C]
		mov	[esp+64h+var_50], ecx
		mov	ecx, edi
		xor	ecx, ebp
		mov	[esp+64h+var_4], edx
		xor	ecx, esi
		rol	edx, 5
		add	edx, ebx
		rol	edi, 1Eh
		add	ecx, edx
		mov	ebx, [esp+64h+var_4]
		mov	edx, [esp+64h+var_50]
		add	edx, 6ED9EBA1h
		add	edx, ecx
		mov	ecx, [esp+64h+var_44]
		xor	ecx, [esp+64h+var_14]
		xor	ecx, [esp+64h+var_28]
		xor	ecx, [esp+64h+var_38]
		mov	[esp+64h+var_20], ecx
		mov	ecx, edi
		xor	ecx, ebx
		mov	[esp+64h+var_8], edx
		xor	ecx, esi
		rol	edx, 5
		add	edx, ebp
		rol	ebx, 1Eh
		add	ecx, edx
		mov	ebp, [esp+64h+var_8]
		mov	edx, [esp+64h+var_20]
		add	edx, 6ED9EBA1h
		add	edx, ecx
		mov	ecx, [esp+64h+var_54]
		xor	ecx, [esp+64h+var_18]
		xor	ecx, [esp+64h+var_24]
		xor	ecx, [esp+64h+var_34]
		mov	[esp+64h+var_1C], ecx
		mov	ecx, edi
		mov	[esp+64h+var_4], edx
		xor	ecx, ebx
		rol	edx, 5
		xor	ecx, ebp
		add	edx, esi
		rol	ebp, 1Eh
		add	ecx, edx
		mov	esi, [esp+64h+var_4]
		mov	edx, [esp+64h+var_1C]
		add	edx, 6ED9EBA1h
		add	edx, ecx
		mov	ecx, [esp+64h+arg_0]
		xor	ecx, [esp+64h+var_44]
		xor	ecx, [esp+64h+var_50]
		xor	ecx, [esp+64h+var_30]
		mov	[esp+64h+var_44], ecx
		mov	ecx, ebx
		mov	[esp+64h+var_8], edx
		xor	ecx, ebp
		rol	edx, 5
		xor	ecx, esi
		add	edx, edi
		add	ecx, edx
		mov	edx, [esp+64h+var_44]
		add	edx, 6ED9EBA1h
		add	edx, ecx
		mov	ecx, [esp+64h+var_54]
		xor	ecx, [esp+64h+var_20]
		xor	ecx, [esp+64h+var_4C]
		xor	ecx, [esp+64h+var_48]
		mov	[esp+64h+var_54], ecx
		mov	ecx, ebp
		mov	edi, [esp+64h+var_8]
		mov	[esp+64h+var_4], edx
		rol	edx, 5
		add	edx, ebx
		rol	esi, 1Eh
		xor	ecx, esi
		mov	ebx, [esp+64h+var_4]
		xor	ecx, edi
		rol	edi, 1Eh
		add	ecx, edx
		mov	edx, [esp+64h+var_54]
		add	edx, 6ED9EBA1h
		add	edx, ecx
		mov	ecx, [esp+64h+arg_0]
		xor	ecx, [esp+64h+var_1C]
		xor	ecx, [esp+64h+var_2C]
		xor	ecx, [esp+64h+var_40]
		mov	[esp+64h+arg_0], ecx
		mov	ecx, esi
		xor	ecx, edi
		mov	[esp+64h+var_8], edx
		xor	ecx, ebx
		rol	edx, 5
		add	edx, ebp
		rol	ebx, 1Eh
		add	ecx, edx
		mov	ebp, [esp+64h+var_8]
		mov	edx, [esp+64h+arg_0]
		add	edx, 6ED9EBA1h
		add	edx, ecx
		mov	ecx, [esp+64h+var_44]
		xor	ecx, [esp+64h+var_28]
		xor	ecx, [esp+64h+var_3C]
		xor	[esp+64h+var_48], ecx
		mov	ecx, ebp
		xor	ecx, edi
		mov	[esp+64h+var_4], edx
		xor	ecx, ebx
		rol	edx, 5
		add	edx, esi
		rol	ebp, 1Eh
		add	ecx, edx
		mov	esi, [esp+64h+var_4]
		mov	edx, [esp+64h+var_48]
		add	edx, 6ED9EBA1h
		add	edx, ecx
		mov	ecx, [esp+64h+var_54]
		xor	ecx, [esp+64h+var_24]
		xor	ecx, [esp+64h+var_38]
		xor	[esp+64h+var_40], ecx
		mov	ecx, ebp
		mov	[esp+64h+var_8], edx
		xor	ecx, esi
		rol	edx, 5
		xor	ecx, ebx
		add	edx, edi
		rol	esi, 1Eh
		mov	edi, [esp+64h+var_8]
		add	ecx, edx
		mov	edx, [esp+64h+var_40]
		add	edx, 6ED9EBA1h
		add	edx, ecx
		mov	ecx, [esp+64h+arg_0]
		xor	ecx, [esp+64h+var_50]
		xor	ecx, [esp+64h+var_34]
		xor	[esp+64h+var_3C], ecx
		mov	ecx, ebp
		mov	[esp+64h+var_4], edx
		xor	ecx, esi
		rol	edx, 5
		xor	ecx, edi
		add	edx, ebx
		add	ecx, edx
		mov	edx, [esp+64h+var_3C]
		add	edx, 6ED9EBA1h
		add	edx, ecx
		mov	ebx, [esp+64h+var_4]
		mov	ecx, [esp+64h+var_20]
		xor	ecx, [esp+64h+var_30]
		xor	ecx, [esp+64h+var_38]
		xor	ecx, [esp+64h+var_48]
		mov	[esp+64h+var_38], ecx
		mov	ecx, esi
		mov	[esp+64h+var_8], edx
		rol	edx, 5
		add	edx, ebp
		rol	edi, 1Eh
		xor	ecx, edi
		mov	ebp, [esp+64h+var_1C]
		xor	ebp, [esp+64h+var_4C]
		xor	ecx, ebx
		add	ecx, edx
		xor	ebp, [esp+64h+var_34]
		mov	edx, [esp+64h+var_38]
		xor	ebp, [esp+64h+var_40]
		add	edx, 6ED9EBA1h
		add	ecx, edx
		rol	ebx, 1Eh
		mov	[esp+64h+var_C], ecx
		mov	edx, ecx
		rol	edx, 5
		mov	ecx, edi
		xor	ecx, ebx
		mov	[esp+64h+var_34], ebp
		mov	ebp, [esp+64h+var_8]
		add	edx, esi
		mov	esi, [esp+64h+var_34]
		xor	ecx, ebp
		add	edx, ecx
		rol	ebp, 1Eh
		mov	ecx, [esp+64h+var_44]
		add	esi, 6ED9EBA1h
		xor	ecx, [esp+64h+var_2C]
		add	edx, esi
		xor	ecx, [esp+64h+var_30]
		xor	ecx, [esp+64h+var_3C]
		mov	esi, [esp+64h+var_C]
		mov	[esp+64h+var_30], ecx
		mov	ecx, ebx
		xor	ecx, ebp
		mov	[esp+64h+var_4], edx
		xor	ecx, esi
		rol	edx, 5
		add	edx, edi
		rol	esi, 1Eh
		add	ecx, edx
		mov	edi, [esp+64h+var_4]
		mov	edx, [esp+64h+var_30]
		add	edx, 6ED9EBA1h
		mov	[esp+64h+var_C], esi
		add	edx, ecx
		mov	ecx, [esp+64h+var_54]
		xor	ecx, [esp+64h+var_28]
		xor	ecx, [esp+64h+var_4C]
		xor	ecx, [esp+64h+var_38]
		mov	[esp+64h+var_18], ecx
		mov	ecx, edi
		mov	[esp+64h+var_8], edx
		xor	ecx, ebp
		rol	edx, 5
		xor	ecx, esi
		add	edx, ebx
		rol	edi, 1Eh
		mov	ebx, [esp+64h+var_8]
		add	ecx, edx
		mov	edx, [esp+64h+var_18]
		add	edx, 6ED9EBA1h
		add	edx, ecx
		mov	ecx, [esp+64h+arg_0]
		xor	ecx, [esp+64h+var_24]
		xor	ecx, [esp+64h+var_2C]
		xor	ecx, [esp+64h+var_34]
		mov	[esp+64h+var_4], edx
		mov	[esp+64h+var_2C], ecx
		mov	ecx, edi
		rol	edx, 5
		add	edx, ebp
		xor	ecx, ebx
		xor	ecx, esi
		mov	ebp, [esp+64h+var_50]
		add	ecx, edx
		xor	ebp, [esp+64h+var_28]
		xor	ebp, [esp+64h+var_30]
		mov	edx, [esp+64h+var_2C]
		xor	ebp, [esp+64h+var_48]
		add	edx, 6ED9EBA1h
		add	ecx, edx
		rol	ebx, 1Eh
		mov	[esp+64h+var_10], ecx
		mov	esi, ecx
		rol	esi, 5
		mov	edx, ebx
		mov	[esp+64h+var_28], ebp
		mov	ecx, ebx
		mov	ebp, [esp+64h+var_4]
		or	edx, ebp
		and	edx, edi
		and	ecx, ebp
		or	edx, ecx
		rol	ebp, 1Eh
		add	edx, [esp+64h+var_C]
		lea	ecx, [esi-70E44324h]
		add	edx, [esp+64h+var_28]
		mov	esi, [esp+64h+var_20]
		add	ecx, edx
		xor	esi, [esp+64h+var_24]
		mov	edx, ebp
		xor	esi, [esp+64h+var_18]
		or	edx, [esp+64h+var_10]
		xor	esi, [esp+64h+var_40]
		and	edx, ebx
		mov	[esp+64h+var_24], esi
		mov	esi, ecx
		mov	[esp+64h+var_C], ecx
		mov	ecx, ebp
		and	ecx, [esp+64h+var_10]
		or	edx, ecx
		rol	esi, 5
		add	edx, edi
		mov	edi, [esp+64h+var_10]
		add	edx, [esp+64h+var_24]
		rol	edi, 1Eh
		lea	ecx, [esi-70E44324h]
		mov	esi, [esp+64h+var_1C]
		xor	esi, [esp+64h+var_50]
		add	ecx, edx
		xor	esi, [esp+64h+var_2C]
		mov	edx, edi
		or	edx, [esp+64h+var_C]
		xor	esi, [esp+64h+var_3C]
		and	edx, ebp
		mov	[esp+64h+var_4C], ecx
		mov	[esp+64h+var_14], esi
		mov	esi, ecx
		rol	esi, 5
		mov	ecx, edi
		and	ecx, [esp+64h+var_C]
		or	edx, ecx
		add	edx, ebx
		mov	ebx, [esp+64h+var_C]
		add	edx, [esp+64h+var_14]
		lea	ecx, [esi-70E44324h]
		add	ecx, edx
		rol	ebx, 1Eh
		mov	edx, [esp+64h+var_44]
		mov	esi, ecx
		xor	edx, [esp+64h+var_20]
		xor	edx, [esp+64h+var_28]
		xor	edx, [esp+64h+var_38]
		mov	[esp+64h+var_20], edx
		mov	edx, ebx
		or	edx, [esp+64h+var_4C]
		mov	[esp+64h+var_8], ecx
		and	edx, edi
		mov	ecx, ebx
		rol	esi, 5
		and	ecx, [esp+64h+var_4C]
		or	edx, ecx
		add	edi, 8F1BBCDCh
		add	edx, ebp
		lea	ecx, [esi-70E44324h]
		add	edx, [esp+64h+var_20]
		add	ecx, edx
		mov	ebp, [esp+64h+var_4C]
		mov	edx, [esp+64h+var_54]
		mov	esi, ecx
		xor	edx, [esp+64h+var_1C]
		xor	edx, [esp+64h+var_24]
		xor	edx, [esp+64h+var_34]
		mov	[esp+64h+var_10], edx
		mov	[esp+64h+var_50], ecx
		mov	ecx, [esp+64h+var_8]
		mov	edx, ecx
		rol	ebp, 1Eh
		or	edx, ebp
		rol	esi, 5
		and	edx, ebx
		and	ecx, ebp
		or	ecx, edx
		mov	edx, [esp+64h+arg_0]
		xor	edx, [esp+64h+var_44]
		add	ecx, edi
		xor	edx, [esp+64h+var_14]
		xor	edx, [esp+64h+var_30]
		add	ecx, [esp+64h+var_10]
		mov	edi, [esp+64h+var_8]
		add	ecx, esi
		mov	[esp+64h+var_C], edx
		mov	esi, ecx
		mov	[esp+64h+var_1C], ecx
		rol	edi, 1Eh
		rol	esi, 5
		mov	edx, edi
		or	edx, [esp+64h+var_50]
		mov	ecx, edi
		and	ecx, [esp+64h+var_50]
		and	edx, ebp
		or	edx, ecx
		add	edx, ebx
		lea	ecx, [esi-70E44324h]
		add	edx, [esp+64h+var_C]
		mov	ebx, [esp+64h+var_50]
		add	ecx, edx
		mov	edx, [esp+64h+var_54]
		mov	esi, ecx
		xor	edx, [esp+64h+var_20]
		xor	edx, [esp+64h+var_18]
		xor	edx, [esp+64h+var_48]
		mov	[esp+64h+var_54], edx
		mov	[esp+64h+var_44], ecx
		rol	ebx, 1Eh
		mov	edx, ebx
		rol	esi, 5
		or	edx, [esp+64h+var_1C]
		mov	ecx, ebx
		and	ecx, [esp+64h+var_1C]
		and	edx, edi
		or	edx, ecx
		add	edx, ebp
		lea	ecx, [esi-70E44324h]
		add	edx, [esp+64h+var_54]
		mov	ebp, [esp+64h+var_1C]
		add	ecx, edx
		mov	edx, [esp+64h+arg_0]
		mov	esi, ecx
		xor	edx, [esp+64h+var_10]
		xor	edx, [esp+64h+var_2C]
		xor	edx, [esp+64h+var_40]
		rol	ebp, 1Eh
		mov	[esp+64h+arg_0], edx
		mov	edx, ebp
		or	edx, [esp+64h+var_44]
		mov	[esp+64h+var_4C], ecx
		and	edx, ebx
		mov	ecx, ebp
		rol	esi, 5
		and	ecx, [esp+64h+var_44]
		or	edx, ecx
		add	edx, edi
		lea	ecx, [esi-70E44324h]
		add	edx, [esp+64h+arg_0]
		add	ecx, edx
		mov	edi, [esp+64h+var_44]
		mov	edx, [esp+64h+var_C]
		mov	esi, ecx
		xor	edx, [esp+64h+var_28]
		xor	edx, [esp+64h+var_3C]
		xor	edx, [esp+64h+var_48]
		mov	[esp+64h+var_50], edx
		mov	[esp+64h+var_1C], ecx
		rol	edi, 1Eh
		mov	edx, edi
		rol	esi, 5
		or	edx, [esp+64h+var_4C]
		mov	ecx, edi
		and	ecx, [esp+64h+var_4C]
		and	edx, ebp
		or	edx, ecx
		add	edx, ebx
		lea	ecx, [esi-70E44324h]
		add	edx, [esp+64h+var_50]
		add	ecx, edx
		mov	ebx, [esp+64h+var_4C]
		mov	edx, [esp+64h+var_54]
		mov	esi, ecx
		xor	edx, [esp+64h+var_24]
		xor	edx, [esp+64h+var_38]
		xor	edx, [esp+64h+var_40]
		mov	[esp+64h+var_4C], edx
		mov	[esp+64h+var_8], ecx
		rol	ebx, 1Eh
		rol	esi, 5
		mov	edx, ebx
		or	edx, [esp+64h+var_1C]
		mov	ecx, ebx
		and	ecx, [esp+64h+var_1C]
		and	edx, edi
		or	edx, ecx
		add	edi, 8F1BBCDCh
		add	edx, ebp
		lea	ecx, [esi-70E44324h]
		add	edx, [esp+64h+var_4C]
		add	ecx, edx
		mov	ebp, [esp+64h+var_1C]
		mov	edx, [esp+64h+arg_0]
		mov	esi, ecx
		xor	edx, [esp+64h+var_14]
		xor	edx, [esp+64h+var_34]
		xor	edx, [esp+64h+var_3C]
		mov	[esp+64h+var_48], edx
		mov	[esp+64h+var_40], ecx
		mov	ecx, [esp+64h+var_8]
		mov	edx, ecx
		rol	ebp, 1Eh
		or	edx, ebp
		rol	esi, 5
		and	edx, ebx
		and	ecx, ebp
		or	ecx, edx
		mov	edx, [esp+64h+var_20]
		xor	edx, [esp+64h+var_30]
		add	ecx, edi
		xor	edx, [esp+64h+var_38]
		xor	edx, [esp+64h+var_50]
		add	ecx, [esp+64h+var_48]
		mov	edi, [esp+64h+var_8]
		add	ecx, esi
		mov	[esp+64h+var_38], edx
		mov	esi, ecx
		rol	edi, 1Eh
		mov	[esp+64h+var_1C], ecx
		mov	edx, edi
		or	edx, [esp+64h+var_40]
		mov	ecx, edi
		and	ecx, [esp+64h+var_40]
		and	edx, ebp
		or	edx, ecx
		rol	esi, 5
		add	edx, ebx
		add	edx, [esp+64h+var_38]
		lea	ecx, [esi-70E44324h]
		add	ecx, edx
		mov	ebx, [esp+64h+var_40]
		mov	edx, [esp+64h+var_10]
		mov	esi, ecx
		xor	edx, [esp+64h+var_18]
		xor	edx, [esp+64h+var_34]
		xor	edx, [esp+64h+var_4C]
		mov	[esp+64h+var_34], edx
		mov	[esp+64h+var_3C], ecx
		rol	ebx, 1Eh
		mov	edx, ebx
		rol	esi, 5
		or	edx, [esp+64h+var_1C]
		mov	ecx, ebx
		and	ecx, [esp+64h+var_1C]
		and	edx, edi
		or	edx, ecx
		add	edx, ebp
		lea	ecx, [esi-70E44324h]
		add	edx, [esp+64h+var_34]
		add	ecx, edx
		mov	ebp, [esp+64h+var_1C]
		mov	edx, [esp+64h+var_C]
		mov	esi, ecx
		xor	edx, [esp+64h+var_2C]
		xor	edx, [esp+64h+var_30]
		xor	edx, [esp+64h+var_48]
		mov	[esp+64h+var_30], edx
		mov	[esp+64h+var_44], ecx
		rol	ebp, 1Eh
		mov	edx, ebp
		rol	esi, 5
		or	edx, [esp+64h+var_3C]
		mov	ecx, ebp
		and	ecx, [esp+64h+var_3C]
		and	edx, ebx
		or	edx, ecx
		add	edx, edi
		lea	ecx, [esi-70E44324h]
		add	edx, [esp+64h+var_30]
		mov	edi, [esp+64h+var_3C]
		add	ecx, edx
		mov	edx, [esp+64h+var_54]
		mov	esi, ecx
		xor	edx, [esp+64h+var_28]
		xor	edx, [esp+64h+var_18]
		xor	edx, [esp+64h+var_38]
		mov	[esp+64h+var_3C], edx
		rol	edi, 1Eh
		mov	[esp+64h+var_1C], ecx
		mov	edx, edi
		or	edx, [esp+64h+var_44]
		mov	ecx, edi
		and	ecx, [esp+64h+var_44]
		and	edx, ebp
		or	edx, ecx
		rol	esi, 5
		mov	ecx, [esp+64h+var_44]
		add	edx, ebx
		add	edx, [esp+64h+var_3C]
		add	esi, 8F1BBCDCh
		mov	ebx, [esp+64h+arg_0]
		add	edx, esi
		xor	ebx, [esp+64h+var_24]
		add	ebp, 8F1BBCDCh
		xor	ebx, [esp+64h+var_2C]
		xor	ebx, [esp+64h+var_34]
		mov	[esp+64h+var_18], edx
		rol	ecx, 1Eh
		mov	[esp+64h+var_2C], ebx
		mov	ebx, edx
		mov	edx, ecx
		mov	[esp+64h+var_44], ecx
		or	edx, [esp+64h+var_1C]
		and	ecx, [esp+64h+var_1C]
		and	edx, edi
		or	edx, ecx
		rol	ebx, 5
		add	edx, ebp
		add	edx, [esp+64h+var_2C]
		add	edi, 8F1BBCDCh
		mov	ebp, [esp+64h+var_1C]
		add	ebx, edx
		mov	edx, [esp+64h+var_18]
		mov	esi, ebx
		mov	ecx, [esp+64h+var_14]
		xor	ecx, [esp+64h+var_28]
		xor	ecx, [esp+64h+var_30]
		xor	ecx, [esp+64h+var_50]
		rol	ebp, 1Eh
		or	edx, ebp
		mov	[esp+64h+var_1C], ebp
		and	edx, [esp+64h+var_44]
		and	ebp, [esp+64h+var_18]
		or	ebp, edx
		mov	[esp+64h+var_28], ecx
		add	ebp, edi
		rol	esi, 5
		mov	edi, [esp+64h+var_20]
		add	ebp, ecx
		mov	ecx, [esp+64h+var_18]
		add	ebp, esi
		xor	edi, [esp+64h+var_24]
		mov	esi, ebp
		xor	edi, [esp+64h+var_3C]
		xor	edi, [esp+64h+var_4C]
		rol	ecx, 1Eh
		mov	edx, ecx
		mov	[esp+64h+var_18], ecx
		or	edx, ebx
		rol	esi, 5
		and	edx, [esp+64h+var_1C]
		and	ecx, ebx
		or	edx, ecx
		mov	[esp+64h+var_24], edi
		add	edx, [esp+64h+var_44]
		mov	ecx, [esp+64h+var_10]
		add	edx, edi
		xor	ecx, [esp+64h+var_14]
		lea	edi, [esi-70E44324h]
		xor	ecx, [esp+64h+var_2C]
		add	edi, edx
		xor	ecx, [esp+64h+var_48]
		mov	esi, edi
		rol	ebx, 1Eh
		mov	edx, ebx
		mov	[esp+64h+var_8], ebx
		or	edx, ebp
		rol	esi, 5
		and	edx, [esp+64h+var_18]
		and	ebx, ebp
		or	edx, ebx
		rol	ebp, 1Eh
		add	edx, [esp+64h+var_1C]
		add	edx, ecx
		mov	[esp+64h+var_14], ecx
		mov	ecx, [esp+64h+var_C]
		lea	ebx, [esi-70E44324h]
		xor	ecx, [esp+64h+var_20]
		add	ebx, edx
		xor	ecx, [esp+64h+var_28]
		mov	edx, ebp
		xor	ecx, [esp+64h+var_38]
		or	edx, edi
		and	edx, [esp+64h+var_8]
		mov	esi, ebx
		rol	esi, 5
		mov	[esp+64h+var_40], ebp
		and	ebp, edi
		or	edx, ebp
		rol	edi, 1Eh
		add	edx, [esp+64h+var_18]
		lea	ebp, [esi-70E44324h]
		mov	[esp+64h+var_1C], ecx
		mov	esi, [esp+64h+var_54]
		add	edx, ecx
		xor	esi, [esp+64h+var_10]
		add	ebp, edx
		xor	esi, [esp+64h+var_24]
		mov	[esp+64h+var_4], edi
		xor	esi, [esp+64h+var_34]
		mov	edx, ebp
		mov	ecx, [esp+64h+var_40]
		xor	ecx, edi
		rol	edx, 5
		add	edx, [esp+64h+var_8]
		xor	ecx, ebx
		add	ecx, esi
		mov	[esp+64h+var_20], esi
		rol	ebx, 1Eh
		mov	[esp+64h+var_8], ebx
		lea	esi, [edx-359D3E2Ah]
		add	esi, ecx
		mov	ecx, [esp+64h+arg_0]
		xor	ecx, [esp+64h+var_C]
		mov	edx, esi
		xor	ecx, [esp+64h+var_14]
		xor	ecx, [esp+64h+var_30]
		mov	[esp+64h+var_10], ecx
		mov	ecx, edi
		xor	ecx, ebx
		rol	edx, 5
		add	edx, [esp+64h+var_40]
		xor	ecx, ebp
		add	ecx, [esp+64h+var_10]
		rol	ebp, 1Eh
		mov	[esp+64h+var_C], ebp
		lea	edi, [edx-359D3E2Ah]
		add	edi, ecx
		mov	ecx, [esp+64h+var_54]
		xor	ecx, [esp+64h+var_1C]
		mov	edx, edi
		xor	ecx, [esp+64h+var_3C]
		xor	ecx, [esp+64h+var_50]
		mov	[esp+64h+var_54], ecx
		mov	ecx, esi
		xor	ecx, ebx
		rol	edx, 5
		add	edx, [esp+64h+var_4]
		xor	ecx, ebp
		add	ecx, [esp+64h+var_54]
		rol	esi, 1Eh
		lea	ebx, [edx-359D3E2Ah]
		add	ebx, ecx
		mov	ecx, [esp+64h+arg_0]
		xor	ecx, [esp+64h+var_20]
		mov	edx, ebx
		xor	ecx, [esp+64h+var_2C]
		xor	ecx, [esp+64h+var_4C]
		mov	[esp+64h+arg_0], ecx
		mov	ecx, esi
		xor	ecx, edi
		rol	edx, 5
		add	edx, [esp+64h+var_8]
		xor	ecx, ebp
		add	ecx, [esp+64h+arg_0]
		rol	edi, 1Eh
		lea	ebp, [edx-359D3E2Ah]
		add	ebp, ecx
		mov	ecx, [esp+64h+var_10]
		xor	ecx, [esp+64h+var_28]
		mov	edx, ebp
		xor	ecx, [esp+64h+var_48]
		xor	[esp+64h+var_50], ecx
		mov	ecx, esi
		xor	ecx, edi
		rol	edx, 5
		add	edx, [esp+64h+var_C]
		xor	ecx, ebx
		add	ecx, 0CA62C1D6h
		rol	ebx, 1Eh
		add	ecx, [esp+64h+var_50]
		add	edx, ecx
		mov	ecx, [esp+64h+var_54]
		xor	ecx, [esp+64h+var_24]
		xor	ecx, [esp+64h+var_38]
		xor	[esp+64h+var_4C], ecx
		mov	ecx, edi
		mov	[esp+64h+var_4], edx
		rol	edx, 5
		xor	ecx, ebx
		add	edx, [esp+64h+var_4C]
		xor	ecx, ebp
		add	esi, 0CA62C1D6h
		rol	ebp, 1Eh
		add	ecx, esi
		mov	esi, [esp+64h+var_4]
		add	edx, ecx
		mov	ecx, [esp+64h+arg_0]
		xor	ecx, [esp+64h+var_14]
		xor	ecx, [esp+64h+var_34]
		xor	[esp+64h+var_48], ecx
		mov	ecx, ebx
		xor	ecx, ebp
		mov	[esp+64h+var_8], edx
		xor	ecx, esi
		rol	edx, 5
		add	ecx, 0CA62C1D6h
		rol	esi, 1Eh
		add	ecx, [esp+64h+var_48]
		add	edx, edi
		add	edx, ecx
		mov	edi, [esp+64h+var_8]
		mov	ecx, [esp+64h+var_1C]
		xor	ecx, [esp+64h+var_30]
		xor	ecx, [esp+64h+var_38]
		xor	ecx, [esp+64h+var_50]
		mov	[esp+64h+var_38], ecx
		mov	ecx, ebp
		xor	ecx, esi
		mov	[esp+64h+var_4], edx
		xor	ecx, edi
		rol	edx, 5
		add	ecx, 0CA62C1D6h
		rol	edi, 1Eh
		add	ecx, [esp+64h+var_38]
		add	edx, ebx
		add	edx, ecx
		mov	ebx, [esp+64h+var_4]
		mov	ecx, [esp+64h+var_20]
		xor	ecx, [esp+64h+var_3C]
		xor	ecx, [esp+64h+var_34]
		xor	ecx, [esp+64h+var_4C]
		mov	[esp+64h+var_40], ecx
		mov	ecx, ebx
		mov	[esp+64h+var_8], edx
		xor	ecx, esi
		rol	edx, 5
		xor	ecx, edi
		add	edx, ebp
		rol	ebx, 1Eh
		mov	ebp, [esp+64h+var_8]
		add	ecx, 0CA62C1D6h
		add	ecx, [esp+64h+var_40]
		add	ecx, edx
		mov	edx, [esp+64h+var_10]
		xor	edx, [esp+64h+var_2C]
		xor	edx, [esp+64h+var_30]
		xor	edx, [esp+64h+var_48]
		mov	[esp+64h+var_30], edx
		mov	edx, ecx
		mov	[esp+64h+var_34], ecx
		mov	ecx, ebx
		xor	ecx, ebp
		rol	edx, 5
		xor	ecx, edi
		rol	ebp, 1Eh
		add	edx, esi
		add	ecx, 0CA62C1D6h
		add	ecx, [esp+64h+var_30]
		mov	esi, [esp+64h+var_34]
		add	ecx, edx
		mov	edx, [esp+64h+var_54]
		xor	edx, [esp+64h+var_28]
		xor	edx, [esp+64h+var_3C]
		xor	edx, [esp+64h+var_38]
		mov	[esp+64h+var_3C], edx
		mov	edx, ecx
		mov	[esp+64h+var_18], ecx
		mov	ecx, ebx
		rol	edx, 5
		xor	ecx, ebp
		xor	ecx, esi
		add	edx, edi
		add	ecx, 0CA62C1D6h
		mov	edi, [esp+64h+var_18]
		add	ecx, [esp+64h+var_3C]
		add	ecx, edx
		rol	esi, 1Eh
		mov	edx, [esp+64h+arg_0]
		xor	edx, [esp+64h+var_24]
		xor	edx, [esp+64h+var_2C]
		xor	edx, [esp+64h+var_40]
		mov	[esp+64h+var_C], ecx
		mov	[esp+64h+var_2C], edx
		mov	edx, ecx
		mov	ecx, ebp
		rol	edx, 5
		xor	ecx, esi
		mov	[esp+64h+var_34], esi
		xor	ecx, edi
		mov	esi, [esp+64h+var_14]
		xor	esi, [esp+64h+var_28]
		add	ecx, 0CA62C1D6h
		add	ecx, [esp+64h+var_2C]
		add	edx, ebx
		add	ecx, edx
		xor	esi, [esp+64h+var_30]
		xor	esi, [esp+64h+var_50]
		mov	edx, ecx
		mov	[esp+64h+var_44], ecx
		mov	ecx, [esp+64h+var_34]
		rol	edi, 1Eh
		xor	ecx, edi
		mov	ebx, [esp+64h+var_20]
		xor	ebx, [esp+64h+var_14]
		mov	[esp+64h+var_18], edi
		mov	edi, [esp+64h+var_C]
		xor	ecx, edi
		add	ecx, 0CA62C1D6h
		xor	ebx, [esp+64h+var_2C]
		add	ecx, esi
		xor	ebx, [esp+64h+var_48]
		rol	edx, 5
		add	ebp, edx
		rol	edi, 1Eh
		add	ebp, ecx
		mov	[esp+64h+var_C], edi
		mov	ecx, [esp+64h+var_18]
		mov	edx, ebp
		xor	ecx, [esp+64h+var_C]
		xor	ecx, [esp+64h+var_44]
		mov	edi, [esp+64h+var_1C]
		add	ecx, 0CA62C1D6h
		xor	edi, [esp+64h+var_24]
		xor	edi, [esp+64h+var_3C]
		xor	edi, [esp+64h+var_4C]
		rol	[esp+64h+var_44], 1Eh
		add	ecx, edi
		rol	edx, 5
		add	edx, [esp+64h+var_34]
		add	ecx, edx
		mov	[esp+64h+var_4], ebx
		mov	edx, ecx
		mov	[esp+64h+var_24], ecx
		mov	ecx, ebp
		rol	edx, 5
		xor	ecx, [esp+64h+var_C]
		add	edx, 0CA62C1D6h
		add	edx, [esp+64h+var_18]
		xor	ecx, [esp+64h+var_44]
		rol	ebp, 1Eh
		add	ecx, ebx
		mov	[esp+64h+var_18], ebp
		add	ecx, edx
		mov	ebp, [esp+64h+var_10]
		mov	edx, ecx
		xor	ebp, [esp+64h+var_1C]
		xor	ebp, esi
		mov	[esp+64h+var_14], ecx
		xor	ebp, [esp+64h+var_38]
		mov	ecx, [esp+64h+var_18]
		rol	edx, 5
		add	edx, [esp+64h+var_C]
		mov	esi, [esp+64h+var_24]
		xor	ecx, esi
		xor	ecx, [esp+64h+var_44]
		mov	ebx, [esp+64h+var_54]
		add	ecx, 0CA62C1D6h
		xor	ebx, [esp+64h+var_20]
		add	ecx, ebp
		add	ecx, edx
		rol	esi, 1Eh
		mov	[esp+64h+var_24], esi
		mov	edx, ecx
		xor	esi, [esp+64h+var_18]
		xor	ebx, edi
		mov	edi, [esp+64h+var_14]
		xor	esi, edi
		xor	ebx, [esp+64h+var_40]
		add	esi, 0CA62C1D6h
		rol	edx, 5
		add	esi, ebx
		add	edx, [esp+64h+var_44]
		add	esi, edx
		mov	[esp+64h+var_C], ecx
		mov	edx, [esp+64h+arg_0]
		xor	edx, [esp+64h+var_10]
		xor	edx, [esp+64h+var_4]
		xor	edx, [esp+64h+var_30]
		rol	edi, 1Eh
		add	edx, 0CA62C1D6h
		mov	[esp+64h+var_14], edi
		xor	edi, [esp+64h+var_24]
		xor	edi, ecx
		mov	[esp+64h+var_8], esi
		add	edi, edx
		rol	esi, 5
		add	esi, [esp+64h+var_18]
		add	edi, esi
		mov	esi, ecx
		mov	ecx, [esp+64h+var_54]
		mov	edx, edi
		xor	ecx, ebp
		rol	esi, 1Eh
		xor	ecx, [esp+64h+var_3C]
		xor	ecx, [esp+64h+var_50]
		mov	ebp, [esp+64h+var_8]
		mov	[esp+64h+var_54], ecx
		mov	ecx, [esp+64h+var_14]
		xor	ecx, esi
		mov	[esp+64h+var_C], esi
		mov	esi, [esp+64h+var_54]
		xor	ecx, ebp
		add	esi, 0CA62C1D6h
		rol	edx, 5
		add	edx, [esp+64h+var_24]
		add	esi, ecx
		mov	ecx, [esp+64h+arg_0]
		add	esi, edx
		add	[eax+4], esi
		xor	ecx, ebx
		xor	ecx, [esp+64h+var_2C]
		mov	edx, esi
		xor	ecx, [esp+64h+var_4C]
		mov	ebx, [esp+64h+var_C]
		mov	[esp+64h+arg_0], ecx
		mov	ecx, ebx
		rol	ebp, 1Eh
		xor	ecx, ebp
		rol	edx, 5
		add	edx, [esp+64h+var_14]
		xor	ecx, edi
		add	[esp+64h+arg_0], ecx
		mov	ecx, [esp+64h+arg_0]
		add	ecx, 0CA62C1D6h
		rol	edi, 1Eh
		add	edi, [eax+8]
		add	ecx, edx
		add	[eax], ecx
		mov	edx, [eax]
		add	[eax+0Ch], ebp
		mov	[esp+64h+arg_0], edx
		mov	[eax+8], edi
		add	[eax+10h], ebx
		sub	[esp+64h+arg_8], 1
		jz	short loc_1723
		mov	esi, edi
		jmp	loc_2B4
; ---------------------------------------------------------------------------

loc_1723:				; CODE XREF: _sha_block_data_order+1486j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 54h
		retn
_sha_block_data_order endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __chkstk:near	; CODE XREF: _sha_block_data_order+5p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _SHA_Update+4Dp
					; _SHA_Update+6Fp ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _SHA_Final+25p
					; _SHA_Final+46p ...


		end
