;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	96C67200F33D2DE5ADE306DAB41D5753
; Input	CRC32 :	354003C9

; File Name   :	C:\compspace\Diff\openssl\obj\gost89.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
		public _GostR3411_94_TestParamSet
_GostR3411_94_TestParamSet dd 0D0F01h, 40A0705h, 0E030209h, 0C080B06h, 1040B0Dh, 9050F03h
					; DATA XREF: _gost_init+4o
		dd 70E0A00h, 0C020806h,	0A0B04h, 0D010207h, 5080603h, 0E0F0C09h
		dd 1070C06h, 80D0F05h, 0E090A04h, 20B0300h, 10A0D07h, 0F090800h
		dd 0C06040Eh, 305020Bh,	0D010805h, 204030Ah, 70C0F0Eh
		dd 0B090006h, 0C040B0Eh, 0A0F0D06h, 1080302h, 9050700h
		dd 2090A04h, 0E00080Dh,	0C010B06h, 3050F07h
		public _GostR3411_94_CryptoProParamSet
_GostR3411_94_CryptoProParamSet	dd 90A0301h, 0F040B05h,	0E070608h, 0C02000Dh, 1040E0Dh
		dd 0A050007h, 0F080C03h, 0B090206h, 4020607h, 0F090Dh
		dd 0B05010Ah, 30C0E08h,	0B040607h, 0A020C09h, 0E000801h
		dd 5030D0Fh, 0C070A04h,	8020F00h, 506010Eh, 3090B0Dh, 0E0C0F07h
		dd 10409h, 2050B03h, 0D080A06h,	40F05h,	90B0D02h, 3060701h
		dd 80A0E0Ch, 605040Ah, 7030108h, 0E0C0Dh, 0F0B0209h
		public _Gost28147_TestParamSet
_Gost28147_TestParamSet	dd 205060Ch, 0D09000Bh,	0A070E03h, 801040Fh, 0C0B09h, 5070603h
		dd 0F0E0804h, 0D020A01h, 0B060F08h, 50C0901h, 0A07030Dh
		dd 4020E00h, 9050E03h, 0D000806h, 0C070B0Ah, 40F0102h
		dd 20B090Eh, 1070F05h, 60C0D00h, 803040Ah, 0C0E080Dh, 0A090307h
		dd 4020501h, 0B000F06h,	0E0F090Ch, 0A030108h, 0D040702h
		dd 50B0006h, 50F0204h, 8000109h, 0C0B030Eh, 60A070Dh
		public _Gost28147_CryptoProParamSetA
_Gost28147_CryptoProParamSetA dd 50F0A0Bh, 80E0C00h, 9030206h, 40D0701h, 9020D01h, 60A07h
		dd 5040C08h, 0E0B030Fh,	0C0D0A03h, 0B000201h, 4090507h
		dd 60E0F08h, 901050Bh, 0F0D08h,	302040Eh, 60A070Ch, 0C0A070Eh
		dd 903010Dh, 40B0200h, 605080Fh, 206040Eh, 80D030Bh, 0A050F0Ch
		dd 9010700h, 90E0703h, 0F0A08h,	0C060205h, 10D040Bh, 2030609h
		dd 7010B08h, 0F0E040Ah,	50D000Ch
		public _Gost28147_CryptoProParamSetB
_Gost28147_CryptoProParamSetB dd 0E0B0400h, 1070308h, 609020Ah,	0C050D0Fh, 0B0A0205h
		dd 30C0109h, 0D0407h, 0E080F06h, 6020308h, 0B0E0D04h, 0F07010Ch
		dd 509000Ah, 0F0C0702h,	0B0A0509h, 0D000401h, 30E0806h
		dd 0D000507h, 201060Bh,	0F0C0A03h, 8090E04h, 0A000C0Eh
		dd 0B0D0209h, 0F080507h, 4010603h, 0A020100h, 0C050D04h
		dd 0F030709h, 0E06080Bh, 10B0408h, 9000503h, 0C0A0E02h
		dd 0F07060Dh
		public _Gost28147_CryptoProParamSetC
_Gost28147_CryptoProParamSetC dd 5000407h, 0E0F020Ah, 0B01060Ch, 803090Dh, 806090Ah
		dd 20E0Dh, 0B05030Fh, 70C0104h,	10B090Ch, 4020E08h, 5060307h
		dd 0D0F000Ah, 0B0D08h, 2010504h, 0E0C0309h, 70A0F06h, 1000603h
		dd 80A0D05h, 709020Bh, 40C0F0Eh, 50208h, 0A0F0904h, 0D0C0703h
		dd 0B010E06h, 0D070100h, 205040Bh, 0C0F0E08h, 3060A09h
		dd 20C0B01h, 0F000D09h,	0E080504h, 306070Ah
		public _Gost28147_CryptoProParamSetD
_Gost28147_CryptoProParamSetD dd 8060A01h, 4000B0Fh, 905030Ch, 0E020D07h, 0F060003h
		dd 2090E01h, 40C080Dh, 7050A0Bh, 30F0008h, 0B0E0502h, 7040A01h
		dd 60D090Ch, 9080C00h, 0B0A020Dh, 5060307h, 10F0E04h, 0C0E0501h
		dd 0D00070Ah, 40B0206h,	80F0309h, 0B0C01h, 5060E0Fh, 8040D0Ah
		dd 2070309h, 403060Bh, 20E0F0Ch, 80D07h, 1090A05h, 0A020C0Fh
		dd 50406h, 0D0E0907h, 3080B01h
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 380h
		public _CryptoProKeyMeshingKey
_CryptoProKeyMeshingKey	dd 22720069h, 2304C964h, 96DB3A8Dh, 0C42AE946h,	94ACFE18h
					; DATA XREF: _cryptopro_key_meshing+2Do
		dd 1207ED00h, 0C2DC86C0h, 2BA94CEFh
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _cryptopro_key_meshing
_cryptopro_key_meshing proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 2Ch ; ','
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+2Ch+var_4], eax
		push	ebx
		mov	ebx, [esp+30h+arg_0]
		push	ebp
		mov	ebp, [esp+34h+arg_4]
		push	esi
		xor	esi, esi
		push	edi
		lea	edi, [esi+4]

loc_3C6:				; CODE XREF: _cryptopro_key_meshing+43j
		lea	eax, [esp+3Ch+var_24]
		add	eax, esi
		push	eax
		lea	eax, _CryptoProKeyMeshingKey[esi]
		push	eax
		push	ebx
		call	_gostdecrypt
		add	esp, 0Ch
		add	esi, 8
		sub	edi, 1
		jnz	short loc_3C6
		lea	eax, [esp+3Ch+var_24]
		push	eax
		push	ebx
		call	_gost_key
		lea	eax, [esp+44h+var_2C]
		push	eax
		push	ebp
		push	ebx
		call	_gostcrypt
		mov	eax, [esp+50h+var_2C]
		add	esp, 14h
		mov	ecx, [esp+3Ch+var_4]
		mov	[ebp+0], eax
		mov	eax, [esp+3Ch+var_28]
		pop	edi
		pop	esi
		mov	[ebp+4], eax
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 2Ch
		retn
_cryptopro_key_meshing endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 420h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_f		proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		mov	eax, ebx
		shr	eax, 8
		movzx	edx, al
		mov	eax, ebx
		shr	eax, 10h
		push	esi
		mov	esi, [esp+8+arg_0]
		movzx	ecx, al
		mov	eax, [esi+edx*4+820h]
		or	eax, [esi+ecx*4+420h]
		mov	ecx, ebx
		shr	ecx, 18h
		or	eax, [esi+ecx*4+20h]
		movzx	ecx, bl
		or	eax, [esi+ecx*4+0C20h]
		pop	esi
		rol	eax, 0Bh
		pop	ebx
		retn
_f		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 464h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _get_mac
_get_mac	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		mov	edx, esi
		sar	edx, 3
		and	esi, 7
		jz	short loc_480
		xor	ebx, ebx
		cmp	esi, 1
		setnle	bl
		dec	ebx
		jmp	short loc_482
; ---------------------------------------------------------------------------

loc_480:				; CODE XREF: _get_mac+Fj
		xor	ebx, ebx

loc_482:				; CODE XREF: _get_mac+1Aj
		xor	ebp, ebp
		test	edx, edx
		jle	short loc_4A4
		mov	ecx, [esp+0Ch+arg_8]
		mov	ebp, edx
		push	edi
		mov	edi, [esp+10h+arg_0]
		sub	edi, ecx

loc_495:				; CODE XREF: _get_mac+3Dj
		mov	al, [edi+ecx]
		lea	ecx, [ecx+1]
		mov	[ecx-1], al
		sub	edx, 1
		jnz	short loc_495
		pop	edi

loc_4A4:				; CODE XREF: _get_mac+22j
		test	esi, esi
		jz	short loc_4B8
		mov	eax, [esp+0Ch+arg_0]
		mov	ecx, [esp+0Ch+arg_8]
		mov	al, [eax+ebp]
		and	al, bl
		mov	[ecx+ebp], al

loc_4B8:				; CODE XREF: _get_mac+42j
		pop	esi
		pop	ebp
		pop	ebx
		retn
_get_mac	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gost_dec
_gost_dec	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		mov	edi, [esp+4+arg_C]
		test	edi, edi
		jle	short loc_4F5
		push	ebx
		mov	ebx, [esp+8+arg_4]
		push	ebp
		mov	ebp, [esp+0Ch+arg_0]
		push	esi
		mov	esi, [esp+10h+arg_8]
		sub	ebx, esi
		nop	word ptr [eax+eax+00h]

loc_4DC:				; CODE XREF: _gost_dec+34j
		push	esi
		lea	eax, [ebx+esi]
		push	eax
		push	ebp
		call	_gostdecrypt
		add	esp, 0Ch
		add	esi, 8
		sub	edi, 1
		jnz	short loc_4DC
		pop	esi
		pop	ebp
		pop	ebx

loc_4F5:				; CODE XREF: _gost_dec+7j
		pop	edi
		retn
_gost_dec	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gost_dec_cfb
_gost_dec_cfb	proc near

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 14h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+14h+var_4], eax
		mov	ecx, [esp+14h+arg_4]
		push	ebx
		mov	ebx, [esp+18h+arg_10]
		push	ebp
		mov	eax, [ecx]
		mov	ebp, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], eax
		mov	eax, [ecx+4]
		mov	[esp+1Ch+var_10], eax
		push	edi
		mov	edi, [esp+20h+arg_C]
		test	ebx, ebx
		jle	short loc_57E
		push	esi
		mov	esi, [esp+24h+arg_8]
		lea	eax, [esp+24h+var_14]
		sub	esi, eax

loc_53C:				; CODE XREF: _gost_dec_cfb+83j
		lea	eax, [esp+24h+var_C]
		push	eax
		lea	eax, [esp+28h+var_14]
		push	eax
		push	ebp
		call	_gostcrypt
		add	esp, 0Ch
		xor	eax, eax
		nop	dword ptr [eax+00000000h]

loc_558:				; CODE XREF: _gost_dec_cfb+78j
		lea	ecx, [esp+24h+var_14]
		add	ecx, eax
		mov	dl, [esi+ecx]
		mov	[ecx], dl
		mov	cl, [esp+eax+24h+var_C]
		xor	cl, dl
		mov	[edi+eax], cl
		inc	eax
		cmp	eax, 8
		jl	short loc_558
		add	esi, 8
		add	edi, 8
		sub	ebx, 1
		jnz	short loc_53C
		pop	esi

loc_57E:				; CODE XREF: _gost_dec_cfb+37j
		mov	ecx, [esp+20h+var_4]
		pop	edi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 14h
		retn
_gost_dec_cfb	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 590h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gost_destroy
_gost_destroy	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], 0
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax+8], 0
		mov	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax+10h], 0
		mov	dword ptr [eax+14h], 0
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+1Ch], 0
		retn
_gost_destroy	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5CCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gost_enc
_gost_enc	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		mov	edi, [esp+4+arg_C]
		test	edi, edi
		jle	short loc_605
		push	ebx
		mov	ebx, [esp+8+arg_4]
		push	ebp
		mov	ebp, [esp+0Ch+arg_0]
		push	esi
		mov	esi, [esp+10h+arg_8]
		sub	ebx, esi
		nop	word ptr [eax+eax+00h]

loc_5EC:				; CODE XREF: _gost_enc+34j
		push	esi
		lea	eax, [ebx+esi]
		push	eax
		push	ebp
		call	_gostcrypt
		add	esp, 0Ch
		add	esi, 8
		sub	edi, 1
		jnz	short loc_5EC
		pop	esi
		pop	ebp
		pop	ebx

loc_605:				; CODE XREF: _gost_enc+7j
		pop	edi
		retn
_gost_enc	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 608h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gost_enc_cfb
_gost_enc_cfb	proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_B		= byte ptr -0Bh
var_A		= byte ptr -0Ah
var_9		= byte ptr -9
var_8		= byte ptr -8
var_7		= byte ptr -7
var_6		= byte ptr -6
var_5		= byte ptr -5
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 18h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+18h+var_4], eax
		mov	ecx, [esp+18h+arg_4]
		mov	eax, [esp+18h+arg_0]
		mov	edx, [esp+18h+arg_C]
		mov	[esp+18h+var_18], eax
		mov	eax, [ecx]
		push	ebp
		mov	ebp, [esp+1Ch+arg_10]
		mov	[esp+1Ch+var_14], eax
		mov	eax, [ecx+4]
		mov	[esp+1Ch+var_10], eax
		test	ebp, ebp
		jle	loc_711
		push	ebx
		mov	ebx, [esp+20h+arg_8]
		push	esi
		push	edi
		lea	esi, [edx+2]
		lea	edi, [ebx+3]
		sub	ebx, edx
		nop	dword ptr [eax]

loc_658:				; CODE XREF: _gost_enc_cfb+100j
		lea	eax, [esp+28h+var_C]
		push	eax
		lea	eax, [esp+2Ch+var_14]
		push	eax
		push	[esp+30h+var_18]
		call	_gostcrypt
		movzx	ecx, byte ptr [edi-3]
		lea	edi, [edi+8]
		movzx	eax, [esp+34h+var_C]
		lea	esi, [esi+8]
		xor	ecx, eax
		add	esp, 0Ch
		movzx	eax, [esp+28h+var_B]
		mov	[esi-0Ah], cl
		mov	byte ptr [esp+28h+var_14], cl
		movzx	ecx, byte ptr [edi-0Ah]
		xor	ecx, eax
		movzx	eax, [esp+28h+var_A]
		mov	[esi-9], cl
		mov	byte ptr [esp+28h+var_14+1], cl
		movzx	ecx, byte ptr [esi+ebx-8]
		xor	ecx, eax
		movzx	eax, [esp+28h+var_9]
		mov	[esi-8], cl
		mov	byte ptr [esp+28h+var_14+2], cl
		movzx	ecx, byte ptr [edi-8]
		xor	ecx, eax
		movzx	eax, [esp+28h+var_8]
		mov	[esi-7], cl
		mov	byte ptr [esp+28h+var_14+3], cl
		movzx	ecx, byte ptr [edi-7]
		xor	ecx, eax
		movzx	eax, [esp+28h+var_7]
		mov	[esi-6], cl
		mov	byte ptr [esp+28h+var_10], cl
		movzx	ecx, byte ptr [edi-6]
		xor	ecx, eax
		movzx	eax, [esp+28h+var_6]
		mov	[esi-5], cl
		mov	byte ptr [esp+28h+var_10+1], cl
		movzx	ecx, byte ptr [edi-5]
		xor	ecx, eax
		movzx	eax, [esp+28h+var_5]
		mov	[esi-4], cl
		mov	byte ptr [esp+28h+var_10+2], cl
		movzx	ecx, byte ptr [edi-4]
		xor	ecx, eax
		mov	[esi-3], cl
		mov	byte ptr [esp+28h+var_10+3], cl
		sub	ebp, 1
		jnz	loc_658
		pop	edi
		pop	esi
		pop	ebx

loc_711:				; CODE XREF: _gost_enc_cfb+38j
		mov	ecx, [esp+1Ch+var_4]
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
_gost_enc_cfb	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 724h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gost_enc_with_key
_gost_enc_with_key proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	_gost_key
		push	[esp+8+arg_C]
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_0]
		call	_gostcrypt
		add	esp, 14h
		retn
_gost_enc_with_key endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 748h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gost_get_key
_gost_get_key	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		movzx	eax, byte ptr [edx]
		mov	[ecx], al
		movzx	eax, byte ptr [edx+1]
		mov	[ecx+1], al
		movzx	eax, byte ptr [edx+2]
		mov	[ecx+2], al
		movzx	eax, byte ptr [edx+3]
		mov	[ecx+3], al
		movzx	eax, byte ptr [edx+4]
		mov	[ecx+4], al
		movzx	eax, byte ptr [edx+5]
		mov	[ecx+5], al
		movzx	eax, byte ptr [edx+6]
		mov	[ecx+6], al
		movzx	eax, byte ptr [edx+7]
		mov	[ecx+7], al
		movzx	eax, byte ptr [edx+8]
		mov	[ecx+8], al
		movzx	eax, byte ptr [edx+9]
		mov	[ecx+9], al
		movzx	eax, byte ptr [edx+0Ah]
		mov	[ecx+0Ah], al
		movzx	eax, byte ptr [edx+0Bh]
		mov	[ecx+0Bh], al
		movzx	eax, byte ptr [edx+0Ch]
		mov	[ecx+0Ch], al
		movzx	eax, byte ptr [edx+0Dh]
		mov	[ecx+0Dh], al
		movzx	eax, byte ptr [edx+0Eh]
		mov	[ecx+0Eh], al
		movzx	eax, byte ptr [edx+0Fh]
		mov	[ecx+0Fh], al
		movzx	eax, byte ptr [edx+10h]
		mov	[ecx+10h], al
		movzx	eax, byte ptr [edx+11h]
		mov	[ecx+11h], al
		movzx	eax, byte ptr [edx+12h]
		mov	[ecx+12h], al
		movzx	eax, byte ptr [edx+13h]
		mov	[ecx+13h], al
		movzx	eax, byte ptr [edx+14h]
		mov	[ecx+14h], al
		movzx	eax, byte ptr [edx+15h]
		mov	[ecx+15h], al
		movzx	eax, byte ptr [edx+16h]
		mov	[ecx+16h], al
		movzx	eax, byte ptr [edx+17h]
		mov	[ecx+17h], al
		movzx	eax, byte ptr [edx+18h]
		mov	[ecx+18h], al
		movzx	eax, byte ptr [edx+19h]
		mov	[ecx+19h], al
		movzx	eax, byte ptr [edx+1Ah]
		mov	[ecx+1Ah], al
		movzx	eax, byte ptr [edx+1Bh]
		mov	[ecx+1Bh], al
		movzx	eax, byte ptr [edx+1Ch]
		mov	[ecx+1Ch], al
		movzx	eax, byte ptr [edx+1Dh]
		mov	[ecx+1Dh], al
		movzx	eax, byte ptr [edx+1Eh]
		mov	[ecx+1Eh], al
		movzx	eax, byte ptr [edx+1Fh]
		mov	[ecx+1Fh], al
		retn
_gost_get_key	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 830h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gost_init
_gost_init	proc near

arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	ecx, offset _GostR3411_94_TestParamSet
		test	eax, eax
		cmovnz	ecx, eax
		mov	[esp+arg_4], ecx
		jmp	_kboxinit
_gost_init	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 848h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gost_key
_gost_key	proc near		; CODE XREF: _cryptopro_key_meshing+4Bp
					; _gost_enc_with_key+8p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_0]
		push	esi
		mov	esi, [esp+4+arg_4]
		movzx	ecx, byte ptr [esi+3]
		shl	ecx, 8
		movzx	eax, byte ptr [esi+2]
		or	ecx, eax
		movzx	eax, byte ptr [esi+1]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi]
		shl	ecx, 8
		or	ecx, eax
		mov	[edx], ecx
		movzx	ecx, byte ptr [esi+7]
		shl	ecx, 8
		movzx	eax, byte ptr [esi+6]
		or	ecx, eax
		movzx	eax, byte ptr [esi+5]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+4]
		shl	ecx, 8
		or	ecx, eax
		mov	[edx+4], ecx
		movzx	ecx, byte ptr [esi+0Bh]
		movzx	eax, byte ptr [esi+0Ah]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+9]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+8]
		shl	ecx, 8
		or	ecx, eax
		mov	[edx+8], ecx
		movzx	ecx, byte ptr [esi+0Fh]
		movzx	eax, byte ptr [esi+0Eh]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+0Dh]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+0Ch]
		shl	ecx, 8
		or	ecx, eax
		mov	[edx+0Ch], ecx
		movzx	ecx, byte ptr [esi+13h]
		movzx	eax, byte ptr [esi+12h]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+11h]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+10h]
		shl	ecx, 8
		or	ecx, eax
		mov	[edx+10h], ecx
		movzx	ecx, byte ptr [esi+17h]
		movzx	eax, byte ptr [esi+16h]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+15h]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+14h]
		shl	ecx, 8
		or	ecx, eax
		mov	[edx+14h], ecx
		movzx	ecx, byte ptr [esi+1Bh]
		movzx	eax, byte ptr [esi+1Ah]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+19h]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+18h]
		shl	ecx, 8
		or	ecx, eax
		mov	[edx+18h], ecx
		movzx	ecx, byte ptr [esi+1Fh]
		movzx	eax, byte ptr [esi+1Eh]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+1Dh]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+1Ch]
		shl	ecx, 8
		or	ecx, eax
		mov	[edx+1Ch], ecx
		pop	esi
		retn
_gost_key	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 964h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gost_mac
_gost_mac	proc near

var_18		= dword	ptr -18h
Src		= dword	ptr -14h
var_10		= dword	ptr -10h
Dst		= qword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 18h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+18h+var_4], eax
		mov	ecx, [esp+18h+arg_8]
		mov	eax, [esp+18h+arg_10]
		push	ebx
		mov	ebx, [esp+1Ch+arg_C]
		push	ebp
		mov	ebp, [esp+20h+arg_0]
		push	esi
		push	edi
		xor	edi, edi
		mov	dword ptr [esp+28h+Dst], ecx
		mov	[esp+28h+var_18], eax
		mov	[esp+28h+Src], 0
		mov	[esp+28h+var_10], 0
		cmp	ebx, 8
		jb	short loc_9D6
		mov	esi, 8
		nop	dword ptr [eax]

loc_9B4:				; CODE XREF: _gost_mac+70j
		lea	eax, [ecx-8]
		add	eax, esi
		push	eax
		lea	eax, [esp+2Ch+Src]
		push	eax
		push	ebp
		call	_mac_block
		mov	ecx, dword ptr [esp+34h+Dst]
		add	esi, 8
		add	esp, 0Ch
		add	edi, 8
		cmp	esi, ebx
		jbe	short loc_9B4

loc_9D6:				; CODE XREF: _gost_mac+46j
		cmp	edi, ebx
		jnb	short loc_A0A
		sub	ebx, edi
		lea	eax, [ecx+edi]
		push	ebx		; Size
		push	eax		; Src
		lea	eax, [esp+30h+Dst]
		xorps	xmm0, xmm0
		push	eax		; Dst
		movq	[esp+34h+Dst], xmm0
		call	_memcpy
		lea	eax, [esp+34h+Dst]
		push	eax
		lea	eax, [esp+38h+Src]
		push	eax
		push	ebp
		call	_mac_block
		add	esp, 18h
		add	edi, 8

loc_A0A:				; CODE XREF: _gost_mac+74j
		cmp	edi, 8
		jnz	short loc_A2B
		lea	eax, [esp+28h+Dst]
		xorps	xmm0, xmm0
		push	eax
		lea	eax, [esp+2Ch+Src]
		movq	[esp+2Ch+Dst], xmm0
		push	eax
		push	ebp
		call	_mac_block
		add	esp, 0Ch

loc_A2B:				; CODE XREF: _gost_mac+A9j
		mov	esi, [esp+28h+arg_4]
		mov	edi, esi
		sar	edi, 3
		and	esi, 7
		jz	short loc_A44
		xor	ebx, ebx
		cmp	esi, 1
		setnle	bl
		dec	ebx
		jmp	short loc_A46
; ---------------------------------------------------------------------------

loc_A44:				; CODE XREF: _gost_mac+D3j
		xor	ebx, ebx

loc_A46:				; CODE XREF: _gost_mac+DEj
		mov	ebp, [esp+28h+var_18]
		xor	ecx, ecx
		test	edi, edi
		jle	short loc_A61
		push	edi		; Size
		lea	eax, [esp+2Ch+Src]
		push	eax		; Src
		push	ebp		; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	ecx, edi

loc_A61:				; CODE XREF: _gost_mac+EAj
		test	esi, esi
		jz	short loc_A6E
		mov	al, byte ptr [esp+ecx+28h+Src]
		and	al, bl
		mov	[ecx+ebp], al

loc_A6E:				; CODE XREF: _gost_mac+FFj
		mov	ecx, [esp+28h+var_4]
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
_gost_mac	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A88h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gost_mac_iv
_gost_mac_iv	proc near

var_18		= dword	ptr -18h
Dst		= qword	ptr -14h
Src		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 18h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+18h+var_4], eax
		mov	ecx, [esp+18h+arg_8]
		mov	eax, [esp+18h+arg_14]
		mov	edx, [esp+18h+arg_C]
		push	ebx
		mov	ebx, [esp+1Ch+arg_10]
		push	ebp
		mov	ebp, [esp+20h+arg_0]
		push	esi
		mov	[esp+24h+var_18], eax
		mov	eax, [ecx]
		push	edi
		mov	[esp+28h+Src], eax
		xor	edi, edi
		mov	eax, [ecx+4]
		mov	dword ptr [esp+28h+Dst], edx
		mov	[esp+28h+var_8], eax
		cmp	ebx, 8
		jb	short loc_AFA
		mov	esi, 8
		xchg	ax, ax

loc_AD8:				; CODE XREF: _gost_mac_iv+70j
		lea	eax, [edx-8]
		add	eax, esi
		push	eax
		lea	eax, [esp+2Ch+Src]
		push	eax
		push	ebp
		call	_mac_block
		mov	edx, dword ptr [esp+34h+Dst]
		add	esi, 8
		add	esp, 0Ch
		add	edi, 8
		cmp	esi, ebx
		jbe	short loc_AD8

loc_AFA:				; CODE XREF: _gost_mac_iv+47j
		cmp	edi, ebx
		jnb	short loc_B2E
		sub	ebx, edi
		lea	eax, [edx+edi]
		push	ebx		; Size
		push	eax		; Src
		lea	eax, [esp+30h+Dst]
		xorps	xmm0, xmm0
		push	eax		; Dst
		movq	[esp+34h+Dst], xmm0
		call	_memcpy
		lea	eax, [esp+34h+Dst]
		push	eax
		lea	eax, [esp+38h+Src]
		push	eax
		push	ebp
		call	_mac_block
		add	esp, 18h
		add	edi, 8

loc_B2E:				; CODE XREF: _gost_mac_iv+74j
		cmp	edi, 8
		jnz	short loc_B4F
		lea	eax, [esp+28h+Dst]
		xorps	xmm0, xmm0
		push	eax
		lea	eax, [esp+2Ch+Src]
		movq	[esp+2Ch+Dst], xmm0
		push	eax
		push	ebp
		call	_mac_block
		add	esp, 0Ch

loc_B4F:				; CODE XREF: _gost_mac_iv+A9j
		mov	esi, [esp+28h+arg_4]
		mov	edi, esi
		sar	edi, 3
		and	esi, 7
		jz	short loc_B68
		xor	ebx, ebx
		cmp	esi, 1
		setnle	bl
		dec	ebx
		jmp	short loc_B6A
; ---------------------------------------------------------------------------

loc_B68:				; CODE XREF: _gost_mac_iv+D3j
		xor	ebx, ebx

loc_B6A:				; CODE XREF: _gost_mac_iv+DEj
		mov	ebp, [esp+28h+var_18]
		xor	ecx, ecx
		test	edi, edi
		jle	short loc_B85
		push	edi		; Size
		lea	eax, [esp+2Ch+Src]
		push	eax		; Src
		push	ebp		; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	ecx, edi

loc_B85:				; CODE XREF: _gost_mac_iv+EAj
		test	esi, esi
		jz	short loc_B92
		mov	al, byte ptr [esp+ecx+28h+Src]
		and	al, bl
		mov	[ecx+ebp], al

loc_B92:				; CODE XREF: _gost_mac_iv+FFj
		mov	ecx, [esp+28h+var_4]
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
_gost_mac_iv	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BACh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gostcrypt
_gostcrypt	proc near		; CODE XREF: _cryptopro_key_meshing+57p
					; _gost_dec_cfb+4Fp ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 8
		call	__chkstk
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		push	ebp
		push	esi
		mov	esi, [esp+14h+arg_4]
		mov	edx, [ebx]
		push	edi
		movzx	ecx, byte ptr [esi+3]
		movzx	eax, byte ptr [esi+2]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+1]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi]
		shl	ecx, 8
		or	ecx, eax
		add	edx, ecx
		mov	[esp+18h+arg_4], ecx
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	edi, [ebx+ecx*4+820h]
		movzx	ecx, byte ptr [esi+7]
		or	edi, [ebx+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		shl	ecx, 8
		or	edi, [ebx+eax*4+20h]
		movzx	eax, dl
		or	edi, [ebx+eax*4+0C20h]
		movzx	eax, byte ptr [esi+6]
		or	ecx, eax
		rol	edi, 0Bh
		movzx	eax, byte ptr [esi+5]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+4]
		shl	ecx, 8
		mov	esi, ebx
		or	ecx, eax
		mov	ebx, [esp+18h+arg_4]
		xor	edi, ecx
		mov	edx, [esi+4]
		add	edx, edi
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		mov	edx, [esi+8]
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	ebx, ecx
		add	edx, ebx
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		mov	edx, [esi+0Ch]
		xor	edi, ecx
		add	edx, edi
		mov	ebp, [esi+10h]
		mov	eax, edx
		mov	[esp+18h+var_4], ebp
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	ebx, ecx
		mov	[esp+18h+arg_4], ebx
		lea	edx, [ebx+ebp]
		mov	ebx, [esi+14h]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	edi, ecx
		mov	[esp+18h+var_8], edi
		lea	edx, [ebx+edi]
		mov	edi, [esi+18h]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		mov	eax, [esp+18h+arg_4]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+18h+arg_4], eax
		lea	edx, [edi+eax]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		mov	eax, [esp+18h+var_8]
		mov	esi, [esi+1Ch]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+18h+var_8], eax
		lea	edx, [esi+eax]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	ebp, [esp+18h+arg_0]
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		mov	ebp, [esp+18h+arg_4]
		or	ecx, [edx+eax*4+0C20h]
		mov	edx, [edx]
		rol	ecx, 0Bh
		xor	ebp, ecx
		add	edx, ebp
		mov	[esp+18h+arg_4], ebp
		mov	ebp, [esp+18h+arg_0]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		mov	ebp, [esp+18h+var_8]
		or	ecx, [edx+eax*4+0C20h]
		mov	edx, [edx+4]
		rol	ecx, 0Bh
		xor	ebp, ecx
		add	edx, ebp
		mov	[esp+18h+var_8], ebp
		mov	ebp, [esp+18h+arg_0]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		mov	ebp, [esp+18h+arg_4]
		or	ecx, [edx+eax*4+0C20h]
		mov	edx, [edx+8]
		rol	ecx, 0Bh
		xor	ebp, ecx
		add	edx, ebp
		mov	[esp+18h+arg_4], ebp
		mov	ebp, [esp+18h+arg_0]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		mov	ebp, [esp+18h+var_8]
		or	ecx, [edx+eax*4+0C20h]
		mov	edx, [edx+0Ch]
		rol	ecx, 0Bh
		xor	ebp, ecx
		mov	[esp+18h+var_8], ebp
		add	edx, ebp
		mov	ebp, [esp+18h+arg_0]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		or	ecx, [edx+eax*4+0C20h]
		mov	eax, [esp+18h+arg_4]
		mov	edx, [esp+18h+var_4]
		rol	ecx, 0Bh
		xor	eax, ecx
		add	edx, eax
		mov	[esp+18h+arg_4], eax
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		or	ecx, [edx+eax*4+0C20h]
		mov	eax, [esp+18h+var_8]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+18h+var_8], eax
		lea	edx, [ebx+eax]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		or	ecx, [edx+eax*4+0C20h]
		mov	eax, [esp+18h+arg_4]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+18h+arg_4], eax
		lea	edx, [edi+eax]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		or	ecx, [edx+eax*4+0C20h]
		mov	eax, [esp+18h+var_8]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+18h+var_8], eax
		lea	edx, [esi+eax]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	ecx, [ebp+ecx*4+820h]
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		mov	ebp, [esp+18h+arg_4]
		or	ecx, [edx+eax*4+0C20h]
		mov	edx, [edx]
		rol	ecx, 0Bh
		xor	ebp, ecx
		add	edx, ebp
		mov	[esp+18h+arg_4], ebp
		mov	ebp, [esp+18h+arg_0]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		mov	ebp, [esp+18h+var_8]
		or	ecx, [edx+eax*4+0C20h]
		mov	edx, [edx+4]
		rol	ecx, 0Bh
		xor	ebp, ecx
		add	edx, ebp
		mov	[esp+18h+var_8], ebp
		mov	ebp, [esp+18h+arg_0]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		mov	ebp, [esp+18h+arg_4]
		or	ecx, [edx+eax*4+0C20h]
		mov	edx, [edx+8]
		rol	ecx, 0Bh
		xor	ebp, ecx
		add	edx, ebp
		mov	[esp+18h+arg_4], ebp
		mov	ebp, [esp+18h+arg_0]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		mov	ebp, [esp+18h+var_8]
		or	ecx, [edx+eax*4+0C20h]
		mov	edx, [edx+0Ch]
		rol	ecx, 0Bh
		xor	ebp, ecx
		add	edx, ebp
		mov	[esp+18h+var_8], ebp
		mov	eax, edx
		mov	ebp, [esp+18h+arg_0]
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		or	ecx, [edx+eax*4+0C20h]
		mov	eax, [esp+18h+arg_4]
		mov	edx, [esp+18h+var_4]
		rol	ecx, 0Bh
		xor	eax, ecx
		add	edx, eax
		mov	[esp+18h+arg_4], eax
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		or	ecx, [edx+eax*4+0C20h]
		mov	eax, [esp+18h+var_8]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+18h+var_8], eax
		lea	edx, [ebx+eax]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		or	ecx, [edx+eax*4+0C20h]
		mov	eax, [esp+18h+arg_4]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+18h+arg_4], eax
		lea	edx, [edi+eax]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		or	ecx, [edx+eax*4+0C20h]
		mov	eax, [esp+18h+var_8]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+18h+var_8], eax
		lea	edx, [esi+eax]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		mov	ecx, [ebp+ecx*4+820h]
		shr	eax, 10h
		movzx	eax, al
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		or	ecx, [edx+eax*4+0C20h]
		mov	eax, [esp+18h+arg_4]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+18h+arg_4], eax
		lea	edx, [esi+eax]
		mov	esi, ebp
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		mov	eax, [esp+18h+var_8]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+18h+var_8], eax
		lea	edx, [edi+eax]
		mov	edi, [esp+18h+arg_4]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	edi, ecx
		lea	edx, [ebx+edi]
		mov	ebx, [esp+18h+var_8]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		mov	edx, [esp+18h+var_4]
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	ebx, ecx
		add	edx, ebx
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		mov	edx, [esi+0Ch]
		rol	ecx, 0Bh
		xor	edi, ecx
		add	edx, edi
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		mov	edx, [esi+8]
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	ebx, ecx
		add	edx, ebx
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		mov	edx, [esi+4]
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	edi, ecx
		add	edx, edi
		mov	[esp+18h+arg_4], edi
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		mov	edx, [esi]
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	ebx, ecx
		add	edx, ebx
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		mov	edx, edi
		or	ecx, [esi+eax*4+0C20h]
		mov	eax, ebx
		rol	ecx, 0Bh
		xor	edx, ecx
		shr	eax, 8
		mov	ecx, [esp+18h+arg_8]
		mov	[ecx+1], al
		mov	eax, ebx
		shr	eax, 10h
		mov	[ecx], bl
		mov	[ecx+2], al
		mov	eax, edx
		shr	ebx, 18h
		shr	eax, 8
		pop	edi
		mov	[ecx+5], al
		mov	eax, edx
		pop	esi
		shr	eax, 10h
		mov	[ecx+4], dl
		shr	edx, 18h
		pop	ebp
		mov	[ecx+3], bl
		mov	[ecx+6], al
		mov	[ecx+7], dl
		pop	ebx
		add	esp, 8
		retn
_gostcrypt	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 149Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gostdecrypt
_gostdecrypt	proc near		; CODE XREF: _cryptopro_key_meshing+35p
					; _gost_dec+26p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 8
		call	__chkstk
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		push	ebp
		push	esi
		mov	esi, [esp+14h+arg_4]
		mov	edx, [ebx]
		push	edi
		movzx	ecx, byte ptr [esi+3]
		movzx	eax, byte ptr [esi+2]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+1]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi]
		shl	ecx, 8
		or	ecx, eax
		add	edx, ecx
		mov	[esp+18h+arg_4], ecx
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	edi, [ebx+ecx*4+820h]
		movzx	ecx, byte ptr [esi+7]
		or	edi, [ebx+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		shl	ecx, 8
		or	edi, [ebx+eax*4+20h]
		movzx	eax, dl
		or	edi, [ebx+eax*4+0C20h]
		movzx	eax, byte ptr [esi+6]
		or	ecx, eax
		rol	edi, 0Bh
		movzx	eax, byte ptr [esi+5]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+4]
		shl	ecx, 8
		mov	esi, ebx
		or	ecx, eax
		mov	ebx, [esp+18h+arg_4]
		xor	edi, ecx
		mov	edx, [esi+4]
		add	edx, edi
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		mov	edx, [esi+8]
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	ebx, ecx
		add	edx, ebx
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		mov	edx, [esi+0Ch]
		xor	edi, ecx
		add	edx, edi
		mov	ebp, [esi+10h]
		mov	eax, edx
		mov	[esp+18h+var_4], ebp
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	ebx, ecx
		mov	[esp+18h+arg_4], ebx
		lea	edx, [ebx+ebp]
		mov	ebx, [esi+14h]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	edi, ecx
		mov	[esp+18h+var_8], edi
		lea	edx, [ebx+edi]
		mov	edi, [esi+18h]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		mov	eax, [esp+18h+arg_4]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+18h+arg_4], eax
		lea	edx, [edi+eax]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		mov	eax, [esp+18h+var_8]
		mov	esi, [esi+1Ch]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+18h+var_8], eax
		lea	edx, [esi+eax]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	ebp, [esp+18h+arg_0]
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		or	ecx, [edx+eax*4+0C20h]
		mov	eax, [esp+18h+arg_4]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+18h+arg_4], eax
		lea	edx, [esi+eax]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		or	ecx, [edx+eax*4+0C20h]
		mov	eax, [esp+18h+var_8]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+18h+var_8], eax
		lea	edx, [edi+eax]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		or	ecx, [edx+eax*4+0C20h]
		mov	eax, [esp+18h+arg_4]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+18h+arg_4], eax
		lea	edx, [ebx+eax]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		or	ecx, [edx+eax*4+0C20h]
		mov	eax, [esp+18h+var_8]
		mov	edx, [esp+18h+var_4]
		rol	ecx, 0Bh
		xor	eax, ecx
		add	edx, eax
		mov	[esp+18h+var_8], eax
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		mov	ebp, [esp+18h+arg_4]
		or	ecx, [edx+eax*4+0C20h]
		mov	edx, [edx+0Ch]
		rol	ecx, 0Bh
		xor	ebp, ecx
		add	edx, ebp
		mov	[esp+18h+arg_4], ebp
		mov	ebp, [esp+18h+arg_0]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		mov	ebp, [esp+18h+var_8]
		or	ecx, [edx+eax*4+0C20h]
		mov	edx, [edx+8]
		rol	ecx, 0Bh
		xor	ebp, ecx
		add	edx, ebp
		mov	[esp+18h+var_8], ebp
		mov	ebp, [esp+18h+arg_0]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		mov	ebp, [esp+18h+arg_4]
		or	ecx, [edx+eax*4+0C20h]
		mov	edx, [edx+4]
		rol	ecx, 0Bh
		xor	ebp, ecx
		add	edx, ebp
		mov	[esp+18h+arg_4], ebp
		mov	ebp, [esp+18h+arg_0]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		mov	ebp, [esp+18h+var_8]
		or	ecx, [edx+eax*4+0C20h]
		mov	edx, [edx]
		rol	ecx, 0Bh
		xor	ebp, ecx
		add	edx, ebp
		mov	[esp+18h+var_8], ebp
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		mov	ebp, [esp+18h+arg_0]
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		or	ecx, [edx+eax*4+0C20h]
		mov	eax, [esp+18h+arg_4]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+18h+arg_4], eax
		lea	edx, [esi+eax]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		or	ecx, [edx+eax*4+0C20h]
		mov	eax, [esp+18h+var_8]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+18h+var_8], eax
		lea	edx, [edi+eax]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		or	ecx, [edx+eax*4+0C20h]
		mov	eax, [esp+18h+arg_4]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+18h+arg_4], eax
		lea	edx, [ebx+eax]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		or	ecx, [edx+eax*4+0C20h]
		mov	eax, [esp+18h+var_8]
		mov	edx, [esp+18h+var_4]
		rol	ecx, 0Bh
		xor	eax, ecx
		add	edx, eax
		mov	[esp+18h+var_8], eax
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		mov	ebp, [esp+18h+arg_4]
		or	ecx, [edx+eax*4+0C20h]
		mov	edx, [edx+0Ch]
		rol	ecx, 0Bh
		xor	ebp, ecx
		add	edx, ebp
		mov	[esp+18h+arg_4], ebp
		mov	ebp, [esp+18h+arg_0]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		mov	ebp, [esp+18h+var_8]
		or	ecx, [edx+eax*4+0C20h]
		mov	edx, [edx+8]
		rol	ecx, 0Bh
		xor	ebp, ecx
		add	edx, ebp
		mov	[esp+18h+var_8], ebp
		mov	ebp, [esp+18h+arg_0]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		mov	ebp, [esp+18h+arg_4]
		or	ecx, [edx+eax*4+0C20h]
		mov	edx, [edx+4]
		rol	ecx, 0Bh
		xor	ebp, ecx
		add	edx, ebp
		mov	[esp+18h+arg_4], ebp
		mov	ebp, [esp+18h+arg_0]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		mov	ebp, [esp+18h+var_8]
		or	ecx, [edx+eax*4+0C20h]
		mov	edx, [edx]
		rol	ecx, 0Bh
		xor	ebp, ecx
		add	edx, ebp
		mov	[esp+18h+var_8], ebp
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ebp, [esp+18h+arg_0]
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		or	ecx, [edx+eax*4+0C20h]
		mov	eax, [esp+18h+arg_4]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+18h+arg_4], eax
		lea	edx, [esi+eax]
		mov	esi, ebp
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		mov	eax, [esp+18h+var_8]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+18h+var_8], eax
		lea	edx, [edi+eax]
		mov	edi, [esp+18h+arg_4]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	edi, ecx
		lea	edx, [ebx+edi]
		mov	ebx, [esp+18h+var_8]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		mov	edx, [esp+18h+var_4]
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	ebx, ecx
		add	edx, ebx
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		mov	edx, [esi+0Ch]
		rol	ecx, 0Bh
		xor	edi, ecx
		add	edx, edi
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		mov	edx, [esi+8]
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	ebx, ecx
		add	edx, ebx
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		mov	edx, [esi+4]
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	edi, ecx
		add	edx, edi
		mov	[esp+18h+arg_4], edi
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		mov	edx, [esi]
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	ebx, ecx
		add	edx, ebx
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		mov	edx, edi
		or	ecx, [esi+eax*4+0C20h]
		mov	eax, ebx
		rol	ecx, 0Bh
		xor	edx, ecx
		shr	eax, 8
		mov	ecx, [esp+18h+arg_8]
		mov	[ecx+1], al
		mov	eax, ebx
		shr	eax, 10h
		mov	[ecx], bl
		mov	[ecx+2], al
		mov	eax, edx
		shr	ebx, 18h
		shr	eax, 8
		pop	edi
		mov	[ecx+5], al
		mov	eax, edx
		pop	esi
		shr	eax, 10h
		mov	[ecx+4], dl
		shr	edx, 18h
		pop	ebp
		mov	[ecx+3], bl
		mov	[ecx+6], al
		mov	[ecx+7], dl
		pop	ebx
		add	esp, 8
		retn
_gostdecrypt	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D8Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_kboxinit	proc near		; CODE XREF: _gost_init+12j

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_4]
		xor	ebx, ebx
		push	esi
		push	edi
		add	eax, 420h

loc_1D9F:				; CODE XREF: _kboxinit+7Cj
		mov	edi, ebx
		lea	eax, [eax+4]
		sar	edi, 4
		mov	esi, ebx
		add	edi, ebp
		and	esi, 0Fh
		add	esi, ebp
		inc	ebx
		movzx	edx, byte ptr [edi]
		movzx	ecx, byte ptr [esi+10h]
		shl	edx, 4
		or	edx, ecx
		shl	edx, 18h
		mov	[eax-404h], edx
		movzx	edx, byte ptr [edi+20h]
		movzx	ecx, byte ptr [esi+30h]
		shl	edx, 4
		or	edx, ecx
		shl	edx, 10h
		mov	[eax-4], edx
		movzx	edx, byte ptr [edi+40h]
		movzx	ecx, byte ptr [esi+50h]
		shl	edx, 4
		or	edx, ecx
		shl	edx, 8
		mov	[eax+3FCh], edx
		movzx	edx, byte ptr [edi+60h]
		movzx	ecx, byte ptr [esi+70h]
		shl	edx, 4
		or	edx, ecx
		mov	[eax+7FCh], edx
		cmp	ebx, 100h
		jl	short loc_1D9F
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_kboxinit	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1E10h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _mac_block
_mac_block	proc near		; CODE XREF: _gost_mac+5Cp
					; _gost_mac+9Bp ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 0Ch
		call	__chkstk
		mov	ecx, [esp+0Ch+arg_8]
		push	ebx
		push	ebp
		push	esi
		movzx	eax, byte ptr [ecx]
		mov	esi, [esp+18h+arg_0]
		push	edi
		mov	edi, [esp+1Ch+arg_4]
		xor	[edi], al
		movzx	eax, byte ptr [ecx+1]
		xor	[edi+1], al
		movzx	eax, byte ptr [ecx+2]
		xor	[edi+2], al
		movzx	eax, byte ptr [ecx+3]
		xor	[edi+3], al
		movzx	eax, byte ptr [ecx+4]
		xor	[edi+4], al
		movzx	eax, byte ptr [ecx+5]
		xor	[edi+5], al
		movzx	eax, byte ptr [ecx+6]
		xor	[edi+6], al
		movzx	eax, byte ptr [ecx+7]
		xor	[edi+7], al
		movzx	ecx, byte ptr [edi+3]
		movzx	eax, byte ptr [edi+2]
		shl	ecx, 8
		or	ecx, eax
		mov	edx, [esi]
		movzx	eax, byte ptr [edi+1]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [edi]
		shl	ecx, 8
		or	ecx, eax
		add	edx, ecx
		mov	[esp+1Ch+var_C], ecx
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		mov	edx, [esi+4]
		or	ecx, [esi+eax*4+0C20h]
		movzx	eax, byte ptr [edi+6]
		rol	ecx, 0Bh
		mov	[esp+1Ch+var_8], ecx
		movzx	ecx, byte ptr [edi+7]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [edi+5]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [edi+4]
		mov	edi, [esp+1Ch+var_8]
		shl	ecx, 8
		or	ecx, eax
		xor	edi, ecx
		add	edx, edi
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		mov	ebx, [esp+1Ch+var_C]
		mov	edx, [esi+8]
		xor	ebx, ecx
		add	edx, ebx
		mov	ebp, [esi+10h]
		mov	eax, edx
		mov	[esp+1Ch+var_4], ebp
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		mov	edx, [esi+0Ch]
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	edi, ecx
		add	edx, edi
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	ebx, ecx
		mov	[esp+1Ch+var_C], ebx
		lea	edx, [ebx+ebp]
		mov	ebx, [esi+14h]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	edi, ecx
		mov	[esp+1Ch+var_8], edi
		lea	edx, [ebx+edi]
		mov	edi, [esi+18h]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [esi+ecx*4+820h]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		mov	eax, [esp+1Ch+var_C]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+1Ch+var_C], eax
		lea	edx, [edi+eax]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		mov	ecx, [esi+ecx*4+820h]
		shr	eax, 10h
		movzx	eax, al
		mov	ebp, [esp+1Ch+arg_0]
		or	ecx, [esi+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [esi+eax*4+20h]
		movzx	eax, dl
		or	ecx, [esi+eax*4+0C20h]
		mov	eax, [esp+1Ch+var_8]
		mov	esi, [esi+1Ch]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+1Ch+var_8], eax
		lea	edx, [esi+eax]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		mov	ebp, [esp+1Ch+var_C]
		or	ecx, [edx+eax*4+0C20h]
		mov	edx, [edx]
		rol	ecx, 0Bh
		xor	ebp, ecx
		add	edx, ebp
		mov	[esp+1Ch+var_C], ebp
		mov	ebp, [esp+1Ch+arg_0]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		mov	ebp, [esp+1Ch+var_8]
		or	ecx, [edx+eax*4+0C20h]
		mov	edx, [edx+4]
		rol	ecx, 0Bh
		xor	ebp, ecx
		add	edx, ebp
		mov	[esp+1Ch+var_8], ebp
		mov	ebp, [esp+1Ch+arg_0]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		mov	ebp, [esp+1Ch+var_C]
		or	ecx, [edx+eax*4+0C20h]
		mov	edx, [edx+8]
		rol	ecx, 0Bh
		xor	ebp, ecx
		add	edx, ebp
		mov	[esp+1Ch+var_C], ebp
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	ebp, [esp+1Ch+arg_0]
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		mov	ebp, [esp+1Ch+var_8]
		or	ecx, [edx+eax*4+0C20h]
		mov	edx, [edx+0Ch]
		rol	ecx, 0Bh
		xor	ebp, ecx
		add	edx, ebp
		mov	[esp+1Ch+var_8], ebp
		mov	ebp, [esp+1Ch+arg_0]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, ebp
		or	ecx, [edx+eax*4+0C20h]
		mov	eax, [esp+1Ch+var_C]
		mov	edx, [esp+1Ch+var_4]
		rol	ecx, 0Bh
		xor	eax, ecx
		add	edx, eax
		mov	[esp+1Ch+var_C], eax
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		or	ecx, [ebp+eax*4+0C20h]
		mov	eax, [esp+1Ch+var_8]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+1Ch+var_8], eax
		lea	edx, [ebx+eax]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		or	ecx, [ebp+eax*4+0C20h]
		mov	eax, [esp+1Ch+var_C]
		rol	ecx, 0Bh
		xor	eax, ecx
		mov	[esp+1Ch+var_C], eax
		lea	edx, [edi+eax]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		mov	ebx, [esp+1Ch+var_8]
		shr	eax, 18h
		pop	edi
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		or	ecx, [ebp+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	ebx, ecx
		lea	edx, [esi+ebx]
		mov	eax, edx
		shr	eax, 8
		movzx	ecx, al
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		pop	esi
		mov	ecx, [ebp+ecx*4+820h]
		or	ecx, [ebp+eax*4+420h]
		mov	eax, edx
		shr	eax, 18h
		or	ecx, [ebp+eax*4+20h]
		movzx	eax, dl
		mov	edx, [esp+14h+var_C]
		or	ecx, [ebp+eax*4+0C20h]
		rol	ecx, 0Bh
		xor	edx, ecx
		mov	ecx, [esp+14h+arg_4]
		mov	eax, edx
		shr	eax, 8
		pop	ebp
		mov	[ecx+1], al
		mov	eax, edx
		shr	eax, 10h
		mov	[ecx+2], al
		mov	eax, ebx
		shr	eax, 8
		mov	[ecx+5], al
		mov	eax, ebx
		mov	[ecx], dl
		shr	edx, 18h
		mov	[ecx+4], bl
		shr	eax, 10h
		shr	ebx, 18h
		mov	[ecx+7], bl
		mov	[ecx+3], dl
		mov	[ecx+6], al
		pop	ebx
		add	esp, 0Ch
		retn
_mac_block	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _cryptopro_key_meshing+77p
					; _gost_dec_cfb+8Fp ...
		extrn __chkstk:near	; CODE XREF: _cryptopro_key_meshing+5p
					; _gost_dec_cfb+5p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _gost_mac+8Bp
					; _gost_mac+F3p ...
		extrn ___security_cookie:near ;	DATA XREF: _cryptopro_key_meshing+Ar
					; _gost_dec_cfb+Ar ...


		end
