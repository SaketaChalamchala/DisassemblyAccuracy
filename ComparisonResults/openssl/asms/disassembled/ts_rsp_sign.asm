;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	C5A86F4ABFE2B02B9CC5A9FC7CA80257
; Input	CRC32 :	7DB3D704

; File Name   :	C:\compspace\Diff\openssl\obj\ts_rsp_sign.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ESS_CERT_ID_new_init proc near		; CODE XREF: _ESS_SIGNING_CERT_new_init+82p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		push	edi
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		push	ebx
		call	_X509_check_purpose
		add	esp, 0Ch
		call	_ESS_CERT_ID_new
		mov	esi, eax
		test	esi, esi
		jz	$err$12
		push	14h
		lea	eax, [ebx+50h]
		push	eax
		push	dword ptr [esi]
		call	_ASN1_OCTET_STRING_set
		add	esp, 0Ch
		test	eax, eax
		jz	short $err$12
		cmp	[esp+0Ch+arg_4], edi
		jz	short loc_AA
		cmp	[esi+4], edi
		jnz	short loc_4F
		call	_ESS_ISSUER_SERIAL_new
		mov	[esi+4], eax
		test	eax, eax
		jz	short $err$12

loc_4F:					; CODE XREF: _ESS_CERT_ID_new_init+41j
		call	_GENERAL_NAME_new
		mov	edi, eax
		test	edi, edi
		jz	short $err$12
		mov	dword ptr [edi], 4
		mov	ecx, [ebx]
		push	dword ptr [ecx+0Ch]
		call	_X509_NAME_dup
		add	esp, 4
		mov	[edi+4], eax
		test	eax, eax
		jz	short $err$12
		mov	eax, [esi+4]
		push	edi
		push	dword ptr [eax]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	short $err$12
		mov	eax, [esi+4]
		xor	edi, edi
		push	dword ptr [eax+4]
		call	_ASN1_INTEGER_free
		mov	eax, [ebx]
		push	dword ptr [eax+4]
		call	_ASN1_INTEGER_dup
		mov	ecx, [esi+4]
		add	esp, 8
		mov	[ecx+4], eax
		test	eax, eax
		jz	short $err$12

loc_AA:					; CODE XREF: _ESS_CERT_ID_new_init+3Cj
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$err$12:				; CODE XREF: _ESS_CERT_ID_new_init+1Ej
					; _ESS_CERT_ID_new_init+36j ...
		push	edi
		call	_GENERAL_NAME_free
		push	esi
		call	_ESS_CERT_ID_free
		push	375h
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	41h ; 'A'
		push	71h ; 'q'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 1Ch
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
_ESS_CERT_ID_new_init endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ESS_SIGNING_CERT_new_init proc	near	; CODE XREF: _TS_RESP_sign+1ACp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		push	edi
		call	_ESS_SIGNING_CERT_new
		mov	edi, eax
		test	edi, edi
		jz	$err$28
		cmp	dword ptr [edi], 0
		jnz	short loc_102
		call	_sk_new_null
		mov	[edi], eax
		test	eax, eax
		jz	$err$28

loc_102:				; CODE XREF: _ESS_SIGNING_CERT_new_init+15j
		mov	ebx, [esp+0Ch+arg_0]
		push	0
		push	0FFFFFFFFh
		push	ebx
		call	_X509_check_purpose
		add	esp, 0Ch
		call	_ESS_CERT_ID_new
		mov	esi, eax
		test	esi, esi
		jz	short $err$29
		push	14h
		lea	ecx, [ebx+50h]
		push	ecx
		push	dword ptr [esi]
		call	_ASN1_OCTET_STRING_set
		add	esp, 0Ch
		test	eax, eax
		jz	short $err$29
		push	esi
		push	dword ptr [edi]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	short $err$28
		mov	ebx, [esp+0Ch+arg_4]
		xor	esi, esi
		push	ebx
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_187

loc_154:				; CODE XREF: _ESS_SIGNING_CERT_new_init+A9j
		push	esi
		push	ebx
		call	_sk_value
		push	1
		push	eax
		call	_ESS_CERT_ID_new_init
		add	esp, 10h
		test	eax, eax
		jz	short $err$28
		push	eax
		push	dword ptr [edi]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	short $err$28
		push	ebx
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_154

loc_187:				; CODE XREF: _ESS_SIGNING_CERT_new_init+76j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$err$29:				; CODE XREF: _ESS_SIGNING_CERT_new_init+40j
					; _ESS_SIGNING_CERT_new_init+54j
		push	0
		call	_GENERAL_NAME_free
		push	esi
		call	_ESS_CERT_ID_free
		push	375h
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	41h ; 'A'
		push	71h ; 'q'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 1Ch

$err$28:				; CODE XREF: _ESS_SIGNING_CERT_new_init+Cj
					; _ESS_SIGNING_CERT_new_init+20j ...
		push	edi
		call	_ESS_SIGNING_CERT_free
		push	349h
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	41h ; 'A'
		push	72h ; 'r'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 18h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
_ESS_SIGNING_CERT_new_init endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_ESS_add_signing_cert proc near		; CODE XREF: _TS_RESP_sign+1C2p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	esi
		push	edi
		xor	esi, esi
		push	esi
		push	[esp+14h+arg_4]
		call	_i2d_ESS_SIGNING_CERT
		push	39Bh
		mov	ebx, eax
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	ebx
		call	_CRYPTO_malloc
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jnz	short loc_213
		push	39Ch
		jmp	short loc_266
; ---------------------------------------------------------------------------

loc_213:				; CODE XREF: _ESS_add_signing_cert+32j
		lea	eax, [esp+10h+var_4]
		mov	[esp+10h+var_4], edi
		push	eax
		push	[esp+14h+arg_4]
		call	_i2d_ESS_SIGNING_CERT
		add	esp, 8
		call	_ASN1_STRING_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_261
		push	ebx
		push	edi
		push	esi
		call	_ASN1_STRING_set
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_261
		push	edi
		call	_CRYPTO_free
		push	esi
		push	10h
		push	0DFh ; 'ß'
		push	[esp+20h+arg_0]
		call	_PKCS7_add_signed_attribute
		add	esp, 14h
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_261:				; CODE XREF: _ESS_add_signing_cert+59j
					; _ESS_add_signing_cert+68j
		push	3A2h

loc_266:				; CODE XREF: _ESS_add_signing_cert+39j
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	41h ; 'A'
		push	70h ; 'p'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h

$err$8_0:
		push	esi
		call	_ASN1_STRING_free
		push	edi
		call	_CRYPTO_free
		add	esp, 8
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
_ESS_add_signing_cert endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 290h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_CTX_add_failure_info
_TS_RESP_CTX_add_failure_info proc near	; CODE XREF: _TS_RESP_check_request+34p
					; _TS_RESP_check_request+D0p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		push	dword ptr [eax+48h]
		call	_TS_RESP_get_status_info
		mov	esi, eax
		add	esp, 4
		cmp	dword ptr [esi+8], 0
		jnz	short loc_2B4
		call	_ASN1_BIT_STRING_new
		mov	[esi+8], eax
		test	eax, eax
		jz	short $err$6_1

loc_2B4:				; CODE XREF: _TS_RESP_CTX_add_failure_info+16j
		push	1
		push	[esp+8+arg_4]
		push	dword ptr [esi+8]
		call	_ASN1_BIT_STRING_set_bit
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_2E5

$err$6_1:				; CODE XREF: _TS_RESP_CTX_add_failure_info+22j
		push	18Eh
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	41h ; 'A'
		push	7Ch ; '|'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2E5:				; CODE XREF: _TS_RESP_CTX_add_failure_info+37j
		mov	eax, 1
		pop	esi
		retn
_TS_RESP_CTX_add_failure_info endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2ECh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_CTX_add_flags
_TS_RESP_CTX_add_flags proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		or	[ecx+28h], eax
		retn
_TS_RESP_CTX_add_flags endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2F8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_CTX_add_md
_TS_RESP_CTX_add_md proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+14h], 0
		jnz	short loc_30F
		call	_sk_new_null
		mov	[esi+14h], eax
		test	eax, eax
		jz	short $err$6_0

loc_30F:				; CODE XREF: _TS_RESP_CTX_add_md+9j
		push	[esp+4+arg_4]
		push	dword ptr [esi+14h]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jnz	short loc_33E

$err$6_0:				; CODE XREF: _TS_RESP_CTX_add_md+15j
		push	11Eh
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	41h ; 'A'
		push	7Dh ; '}'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_33E:				; CODE XREF: _TS_RESP_CTX_add_md+28j
		mov	eax, 1
		pop	esi
		retn
_TS_RESP_CTX_add_md endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 348h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_CTX_add_policy
_TS_RESP_CTX_add_policy	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		xor	esi, esi
		cmp	[edi+0Ch], esi
		jnz	short loc_361
		call	_sk_new_null
		mov	[edi+0Ch], eax
		test	eax, eax
		jz	short $err$7

loc_361:				; CODE XREF: _TS_RESP_CTX_add_policy+Bj
		push	[esp+8+arg_4]
		call	_OBJ_dup
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short $err$7
		push	esi
		push	dword ptr [edi+0Ch]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	short $err$7
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

$err$7:					; CODE XREF: _TS_RESP_CTX_add_policy+17j
					; _TS_RESP_CTX_add_policy+29j ...
		push	10Eh
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	41h ; 'A'
		push	7Eh ; '~'
		push	2Fh ; '/'
		call	_ERR_put_error
		push	esi
		call	_ASN1_OBJECT_free
		add	esp, 18h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
_TS_RESP_CTX_add_policy	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_RESP_CTX_cleanup proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	dword ptr [esi+44h]
		call	_TS_REQ_free
		push	dword ptr [esi+48h]
		mov	dword ptr [esi+44h], 0
		call	_TS_RESP_free
		push	dword ptr [esi+4Ch]
		mov	dword ptr [esi+48h], 0
		call	_TS_TST_INFO_free
		add	esp, 0Ch
		mov	dword ptr [esi+4Ch], 0
		pop	esi
		retn
_TS_RESP_CTX_cleanup endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_CTX_free
_TS_RESP_CTX_free proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_44B
		push	dword ptr [esi]
		call	_X509_free
		push	dword ptr [esi+4]
		call	_EVP_PKEY_free
		push	offset _X509_free
		push	dword ptr [esi+8]
		call	_sk_pop_free
		push	offset _ASN1_OBJECT_free
		push	dword ptr [esi+0Ch]
		call	_sk_pop_free
		push	dword ptr [esi+10h]
		call	_ASN1_OBJECT_free
		push	dword ptr [esi+14h]
		call	_sk_free
		push	dword ptr [esi+18h]
		call	_ASN1_INTEGER_free
		push	dword ptr [esi+1Ch]
		call	_ASN1_INTEGER_free
		push	dword ptr [esi+20h]
		call	_ASN1_INTEGER_free
		push	esi
		call	_CRYPTO_free
		add	esp, 30h

loc_44B:				; CODE XREF: _TS_RESP_CTX_free+7j
		pop	esi
		retn
_TS_RESP_CTX_free endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 450h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_CTX_get_request
_TS_RESP_CTX_get_request proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+44h]
		retn
_TS_RESP_CTX_get_request endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 458h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_CTX_get_tst_info
_TS_RESP_CTX_get_tst_info proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+4Ch]
		retn
_TS_RESP_CTX_get_tst_info endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 460h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_RESP_CTX_init proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax+44h], 0
		mov	dword ptr [eax+48h], 0
		mov	dword ptr [eax+4Ch], 0
		retn
_TS_RESP_CTX_init endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 47Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_CTX_new
_TS_RESP_CTX_new proc near
		push	esi
		push	0ACh ; '¬'
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	50h ; 'P'
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_4B3
		push	0ADh ; '­'
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	41h ; 'A'
		push	7Fh ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4B3:				; CODE XREF: _TS_RESP_CTX_new+19j
		push	50h ; 'P'       ; Size
		push	0		; Val
		push	esi		; Dst
		call	_memset
		add	esp, 0Ch
		mov	dword ptr [esi+2Ch], offset _def_serial_cb
		mov	dword ptr [esi+34h], offset _def_time_cb
		mov	eax, esi
		mov	dword ptr [esi+3Ch], offset _def_extension_cb
		pop	esi
		retn
_TS_RESP_CTX_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_CTX_set_accuracy
_TS_RESP_CTX_set_accuracy proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		push	dword ptr [esi+18h]
		call	_ASN1_INTEGER_free
		push	dword ptr [esi+1Ch]
		mov	dword ptr [esi+18h], 0
		call	_ASN1_INTEGER_free
		push	dword ptr [esi+20h]
		mov	dword ptr [esi+1Ch], 0
		call	_ASN1_INTEGER_free
		mov	edi, [esp+14h+arg_4]
		add	esp, 0Ch
		mov	dword ptr [esi+20h], 0
		test	edi, edi
		jz	short loc_534
		call	_ASN1_INTEGER_new
		mov	[esi+18h], eax
		test	eax, eax
		jz	short $err$10
		push	edi
		push	eax
		call	_ASN1_INTEGER_set
		add	esp, 8
		test	eax, eax
		jz	short $err$10

loc_534:				; CODE XREF: _TS_RESP_CTX_set_accuracy+3Cj
		mov	edi, [esp+8+arg_8]
		test	edi, edi
		jz	short loc_556
		call	_ASN1_INTEGER_new
		mov	[esi+1Ch], eax
		test	eax, eax
		jz	short $err$10
		push	edi
		push	eax
		call	_ASN1_INTEGER_set
		add	esp, 8
		test	eax, eax
		jz	short $err$10

loc_556:				; CODE XREF: _TS_RESP_CTX_set_accuracy+5Ej
		mov	edi, [esp+8+arg_C]
		test	edi, edi
		jz	short loc_5C5
		call	_ASN1_INTEGER_new
		mov	[esi+20h], eax
		test	eax, eax
		jz	short $err$10
		push	edi
		push	eax
		call	_ASN1_INTEGER_set
		add	esp, 8
		test	eax, eax
		jnz	short loc_5C5

$err$10:				; CODE XREF: _TS_RESP_CTX_set_accuracy+48j
					; _TS_RESP_CTX_set_accuracy+56j ...
		push	dword ptr [esi+18h]
		call	_ASN1_INTEGER_free
		push	dword ptr [esi+1Ch]
		mov	dword ptr [esi+18h], 0
		call	_ASN1_INTEGER_free
		push	dword ptr [esi+20h]
		mov	dword ptr [esi+1Ch], 0
		call	_ASN1_INTEGER_free
		push	13Ch
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	41h ; 'A'
		push	80h ; ''
		push	2Fh ; '/'
		mov	dword ptr [esi+20h], 0
		call	_ERR_put_error
		add	esp, 20h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_5C5:				; CODE XREF: _TS_RESP_CTX_set_accuracy+80j
					; _TS_RESP_CTX_set_accuracy+9Aj
		pop	edi
		mov	eax, 1
		pop	esi
		retn
_TS_RESP_CTX_set_accuracy endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5D0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_CTX_set_certs
_TS_RESP_CTX_set_certs proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_5F1
		push	offset _X509_free
		push	eax
		call	_sk_pop_free
		add	esp, 8
		mov	dword ptr [esi+8], 0

loc_5F1:				; CODE XREF: _TS_RESP_CTX_set_certs+Aj
		mov	eax, [esp+4+arg_4]
		test	eax, eax
		jz	short loc_628
		push	eax
		call	_X509_chain_up_ref
		add	esp, 4
		mov	[esi+8], eax
		test	eax, eax
		jnz	short loc_628
		push	0F9h ; 'ù'
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	41h ; 'A'
		push	81h ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_628:				; CODE XREF: _TS_RESP_CTX_set_certs+27j
					; _TS_RESP_CTX_set_certs+37j
		mov	eax, 1
		pop	esi
		retn
_TS_RESP_CTX_set_certs endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 630h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_CTX_set_clock_precision_digits
_TS_RESP_CTX_set_clock_precision_digits	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		cmp	ecx, 6
		jbe	short loc_63C
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_63C:				; CODE XREF: _TS_RESP_CTX_set_clock_precision_digits+7j
		mov	eax, [esp+arg_0]
		mov	[eax+24h], ecx
		mov	eax, 1
		retn
_TS_RESP_CTX_set_clock_precision_digits	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 64Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_CTX_set_def_policy
_TS_RESP_CTX_set_def_policy proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_661
		push	eax
		call	_ASN1_OBJECT_free
		add	esp, 4

loc_661:				; CODE XREF: _TS_RESP_CTX_set_def_policy+Aj
		push	[esp+4+arg_4]
		call	_OBJ_dup
		add	esp, 4
		mov	[esi+10h], eax
		pop	esi
		test	eax, eax
		jnz	short loc_693

$err$6:
		push	0EBh ; 'ë'
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	41h ; 'A'
		push	82h ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_693:				; CODE XREF: _TS_RESP_CTX_set_def_policy+27j
		mov	eax, 1
		retn
_TS_RESP_CTX_set_def_policy endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 69Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_CTX_set_extension_cb
_TS_RESP_CTX_set_extension_cb proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		mov	[ecx+3Ch], eax
		mov	eax, [esp+arg_8]
		mov	[ecx+40h], eax
		retn
_TS_RESP_CTX_set_extension_cb endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6B0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_CTX_set_serial_cb
_TS_RESP_CTX_set_serial_cb proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		mov	[ecx+2Ch], eax
		mov	eax, [esp+arg_8]
		mov	[ecx+30h], eax
		retn
_TS_RESP_CTX_set_serial_cb endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_CTX_set_signer_cert
_TS_RESP_CTX_set_signer_cert proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	0
		push	9
		push	esi
		call	_X509_check_purpose
		add	esp, 0Ch
		cmp	eax, 1
		jz	short loc_6FA
		push	0CFh ; 'Ï'
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	75h ; 'u'
		push	83h ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6FA:				; CODE XREF: _TS_RESP_CTX_set_signer_cert+15j
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_70E
		push	eax
		call	_X509_free
		add	esp, 4

loc_70E:				; CODE XREF: _TS_RESP_CTX_set_signer_cert+3Fj
		push	0D5h ; 'Õ'
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	3
		lea	eax, [esi+10h]
		mov	[edi], esi
		push	1
		push	eax
		call	_CRYPTO_add_lock
		add	esp, 14h
		mov	eax, 1
		pop	edi
		pop	esi
		retn
_TS_RESP_CTX_set_signer_cert endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 734h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_CTX_set_signer_key
_TS_RESP_CTX_set_signer_key proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_749
		push	eax
		call	_EVP_PKEY_free
		add	esp, 4

loc_749:				; CODE XREF: _TS_RESP_CTX_set_signer_key+Aj
		mov	eax, [esp+4+arg_4]
		push	0DEh ; 'Þ'
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	0Ah
		mov	[esi+4], eax
		add	eax, 8
		push	1
		push	eax
		call	_CRYPTO_add_lock
		add	esp, 14h
		mov	eax, 1
		pop	esi
		retn
_TS_RESP_CTX_set_signer_key endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 774h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_CTX_set_status_info
_TS_RESP_CTX_set_status_info proc near	; CODE XREF: _TS_RESP_CTX_set_status_info_cond+24p
					; _TS_RESP_check_request+2Cp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		push	edi
		xor	edi, edi
		xor	ebp, ebp
		call	_TS_STATUS_INFO_new
		mov	esi, eax
		test	esi, esi
		jz	loc_80B
		push	[esp+10h+arg_4]
		push	dword ptr [esi]
		call	_ASN1_INTEGER_set
		add	esp, 8
		test	eax, eax
		jz	short loc_80B
		mov	ebx, [esp+10h+arg_8]
		test	ebx, ebx
		jz	short loc_7F0
		call	_ASN1_UTF8STRING_new
		mov	edi, eax
		test	edi, edi
		jz	short loc_80B
		mov	ecx, ebx
		lea	edx, [ecx+1]

loc_7B5:				; CODE XREF: _TS_RESP_CTX_set_status_info+46j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_7B5
		sub	ecx, edx
		push	ecx
		push	ebx
		push	edi
		call	_ASN1_STRING_set
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_80B
		cmp	[esi+4], ebp
		jnz	short loc_7DE
		call	_sk_new_null
		mov	[esi+4], eax
		test	eax, eax
		jz	short loc_80B

loc_7DE:				; CODE XREF: _TS_RESP_CTX_set_status_info+5Cj
		push	edi
		push	dword ptr [esi+4]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	short loc_80B
		xor	edi, edi

loc_7F0:				; CODE XREF: _TS_RESP_CTX_set_status_info+2Fj
		mov	eax, [esp+10h+arg_0]
		push	esi
		push	dword ptr [eax+48h]
		call	_TS_RESP_set_status_info
		add	esp, 8
		test	eax, eax
		jz	short loc_80B
		mov	ebp, 1
		jmp	short loc_826
; ---------------------------------------------------------------------------

loc_80B:				; CODE XREF: _TS_RESP_CTX_set_status_info+11j
					; _TS_RESP_CTX_set_status_info+27j ...
		push	172h
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	41h ; 'A'
		push	84h ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h

loc_826:				; CODE XREF: _TS_RESP_CTX_set_status_info+95j
		push	esi
		call	_TS_STATUS_INFO_free
		push	edi
		call	_ASN1_UTF8STRING_free
		add	esp, 8
		mov	eax, ebp
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_TS_RESP_CTX_set_status_info endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 83Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_CTX_set_status_info_cond
_TS_RESP_CTX_set_status_info_cond proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		push	dword ptr [esi+48h]
		call	_TS_RESP_get_status_info
		push	dword ptr [eax]
		call	_ASN1_INTEGER_get
		add	esp, 8
		test	eax, eax
		jnz	short loc_86A
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	esi
		call	_TS_RESP_CTX_set_status_info
		add	esp, 0Ch
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_86A:				; CODE XREF: _TS_RESP_CTX_set_status_info_cond+19j
		mov	eax, 1
		pop	esi
		retn
_TS_RESP_CTX_set_status_info_cond endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 874h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_CTX_set_time_cb
_TS_RESP_CTX_set_time_cb proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		mov	[ecx+34h], eax
		mov	eax, [esp+arg_8]
		mov	[ecx+38h], eax
		retn
_TS_RESP_CTX_set_time_cb endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 888h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_RESP_check_request proc near	; CODE XREF: _TS_RESP_create_response+85p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 8
		call	__chkstk
		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+14h+arg_0]
		xor	ebx, ebx
		mov	esi, [edi+44h]
		push	esi
		call	_TS_REQ_get_version
		add	esp, 4
		cmp	eax, 1
		jz	short loc_8CD
		push	offset ??_C@_0BF@LJAOPGO@Bad?5request?5version?4?$AA@ ;	"Bad request version."
		push	2
		push	edi
		call	_TS_RESP_CTX_set_status_info
		push	2
		push	edi
		call	_TS_RESP_CTX_add_failure_info
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_8CD:				; CODE XREF: _TS_RESP_check_request+22j
		push	ebp
		push	esi
		call	_TS_REQ_get_msg_imprint
		mov	esi, eax
		push	esi
		mov	[esp+20h+var_4], esi
		call	_TS_MSG_IMPRINT_get_algo
		mov	[esp+20h+var_8], eax
		push	dword ptr [eax]
		call	_OBJ_obj2nid
		add	esp, 0Ch
		mov	[esp+18h+arg_0], eax
		xor	ebp, ebp
		nop	dword ptr [eax+00h]

loc_8F8:				; CODE XREF: _TS_RESP_check_request+9Dj
		push	dword ptr [edi+14h]
		call	_sk_num
		add	esp, 4
		cmp	ebp, eax
		jge	short loc_96A
		push	ebp
		push	dword ptr [edi+14h]
		call	_sk_value
		mov	esi, eax
		push	esi
		call	_EVP_MD_type
		add	esp, 0Ch
		cmp	[esp+18h+arg_0], eax
		cmovz	ebx, esi
		inc	ebp
		test	ebx, ebx
		jz	short loc_8F8

loc_927:				; CODE XREF: _TS_RESP_check_request+E4j
		mov	eax, [esp+18h+var_8]
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_9CE
		push	eax
		call	_ASN1_TYPE_get
		add	esp, 4
		cmp	eax, 5
		jz	loc_9CE
		push	offset ??_C@_0CG@MHCAOKLJ@Superfluous?5message?5digest?5param@ ; "Superfluous message digest parameter."
		push	2
		push	edi
		call	_TS_RESP_CTX_set_status_info
		push	0
		push	edi
		call	_TS_RESP_CTX_add_failure_info
		add	esp, 14h
		xor	eax, eax
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_96A:				; CODE XREF: _TS_RESP_check_request+7Dj
		test	ebx, ebx
		jnz	short loc_927
		push	offset ??_C@_0CL@IPOEKJMF@Message?5digest?5algorithm?5is?5not?5@ ; "Message digest algorithm is	not support"...
		push	2
		push	edi
		call	_TS_RESP_CTX_set_status_info
		push	dword ptr [edi+48h]
		call	_TS_RESP_get_status_info
		mov	esi, eax
		add	esp, 10h
		cmp	[esi+8], ebx
		jnz	short loc_999
		call	_ASN1_BIT_STRING_new
		mov	[esi+8], eax
		test	eax, eax
		jz	short $err$21

loc_999:				; CODE XREF: _TS_RESP_check_request+103j
		push	1
		push	0
		push	dword ptr [esi+8]
		call	_ASN1_BIT_STRING_set_bit
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_9C4

$err$21:				; CODE XREF: _TS_RESP_check_request+10Fj
		push	18Eh
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	41h ; 'A'
		push	7Ch ; '|'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h

loc_9C4:				; CODE XREF: _TS_RESP_check_request+122j
		pop	ebp
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_9CE:				; CODE XREF: _TS_RESP_check_request+A8j
					; _TS_RESP_check_request+BAj
		push	[esp+18h+var_4]
		call	_TS_MSG_IMPRINT_get_msg
		push	ebx
		mov	esi, eax
		call	_EVP_MD_size
		add	esp, 8
		cmp	[esi], eax
		jz	short loc_A08
		push	offset ??_C@_0BE@PBMOHPHD@Bad?5message?5digest?4?$AA@ ;	"Bad message digest."
		push	2
		push	edi
		call	_TS_RESP_CTX_set_status_info
		push	5
		push	edi
		call	_TS_RESP_CTX_add_failure_info
		add	esp, 14h
		xor	eax, eax
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_A08:				; CODE XREF: _TS_RESP_check_request+15Cj
		pop	ebp
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		add	esp, 8
		retn
_TS_RESP_check_request endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A18h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _TS_RESP_create_response
_TS_RESP_create_response proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	dword ptr [edi+44h], 0
		mov	dword ptr [edi+48h], 0
		mov	dword ptr [edi+4Ch], 0
		call	_TS_RESP_new
		mov	[edi+48h], eax
		test	eax, eax
		jnz	short loc_A5C
		push	1B0h
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	41h ; 'A'
		push	7Ah ; 'z'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_AE1
; ---------------------------------------------------------------------------

loc_A5C:				; CODE XREF: _TS_RESP_create_response+25j
		push	0
		push	[esp+0Ch+arg_4]
		call	_d2i_TS_REQ_bio
		add	esp, 8
		mov	[edi+44h], eax
		test	eax, eax
		jnz	short loc_A8B
		push	offset ??_C@_0CE@OCFPDKJO@Bad?5request?5format?5or?5system?5err@ ; "Bad	request	format or system error."
		push	2
		push	edi
		call	_TS_RESP_CTX_set_status_info
		push	5
		push	edi
		call	_TS_RESP_CTX_add_failure_info
		add	esp, 14h
		jmp	short loc_AE1
; ---------------------------------------------------------------------------

loc_A8B:				; CODE XREF: _TS_RESP_create_response+57j
		push	0
		push	0
		push	edi
		call	_TS_RESP_CTX_set_status_info
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_AE1
		push	edi
		call	_TS_RESP_check_request
		add	esp, 4
		test	eax, eax
		jz	short loc_AE1
		push	edi
		call	_TS_RESP_get_policy
		add	esp, 4
		test	eax, eax
		jz	short loc_AE1
		push	eax
		push	edi
		call	_TS_RESP_create_tst_info
		add	esp, 8
		mov	[edi+4Ch], eax
		test	eax, eax
		jz	short loc_AE1
		push	edi
		call	_TS_RESP_process_extensions
		add	esp, 4
		test	eax, eax
		jz	short loc_AE1
		push	edi
		call	_TS_RESP_sign
		add	esp, 4
		test	eax, eax
		jnz	short loc_B3A

loc_AE1:				; CODE XREF: _TS_RESP_create_response+3Fj
					; _TS_RESP_create_response+71j	...
		push	1D8h
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	79h ; 'y'
		push	7Ah ; 'z'
		push	2Fh ; '/'
		call	_ERR_put_error
		mov	eax, [edi+48h]
		add	esp, 14h
		test	eax, eax
		jz	short loc_B3A
		push	eax
		call	_TS_RESP_get_status_info
		push	dword ptr [eax]
		call	_ASN1_INTEGER_get
		add	esp, 8
		test	eax, eax
		jnz	short loc_B3A
		push	offset ??_C@_0CC@DNFFCHKG@Error?5during?5response?5generation@ ; "Error	during response	generation."
		push	2
		push	edi
		call	_TS_RESP_CTX_set_status_info
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_B3A
		push	dword ptr [edi+48h]
		call	_TS_RESP_free
		add	esp, 4
		mov	dword ptr [edi+48h], 0

loc_B3A:				; CODE XREF: _TS_RESP_create_response+C7j
					; _TS_RESP_create_response+E6j	...
		mov	esi, [edi+48h]
		push	dword ptr [edi+44h]
		mov	dword ptr [edi+48h], 0
		call	_TS_REQ_free
		push	dword ptr [edi+48h]
		mov	dword ptr [edi+44h], 0
		call	_TS_RESP_free
		push	dword ptr [edi+4Ch]
		mov	dword ptr [edi+48h], 0
		call	_TS_TST_INFO_free
		add	esp, 0Ch
		mov	dword ptr [edi+4Ch], 0
		mov	eax, esi
		pop	edi
		pop	esi
		retn
_TS_RESP_create_response endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B7Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_RESP_create_tst_info proc near	; CODE XREF: _TS_RESP_create_response+A0p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 10h
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	[esp+20h+var_C], 0
		xor	ebx, ebx
		mov	[esp+20h+var_10], 0
		xor	ebp, ebp
		call	_TS_TST_INFO_new
		mov	esi, [esp+20h+arg_0]
		mov	edi, eax
		test	edi, edi
		jz	loc_D53
		push	1
		push	edi
		call	_TS_TST_INFO_set_version
		add	esp, 8
		test	eax, eax
		jz	loc_D53
		push	[esp+20h+arg_4]
		push	edi
		call	_TS_TST_INFO_set_policy_id
		add	esp, 8
		test	eax, eax
		jz	loc_D53
		mov	eax, [esi+44h]
		push	dword ptr [eax+4]
		push	edi
		call	_TS_TST_INFO_set_msg_imprint
		add	esp, 8
		test	eax, eax
		jz	loc_D53
		push	dword ptr [esi+30h]
		mov	eax, [esi+2Ch]
		push	esi
		call	eax
		add	esp, 8
		mov	[esp+20h+var_C], eax
		test	eax, eax
		jz	loc_D53
		push	eax
		push	edi
		call	_TS_TST_INFO_set_serial
		add	esp, 8
		test	eax, eax
		jz	loc_D53
		lea	eax, [esp+20h+var_8]
		push	eax
		lea	eax, [esp+24h+var_4]
		push	eax
		push	dword ptr [esi+38h]
		mov	eax, [esi+34h]
		push	esi
		call	eax
		add	esp, 10h
		test	eax, eax
		jz	loc_D53
		push	dword ptr [esi+24h]
		push	[esp+24h+var_8]
		push	[esp+28h+var_4]
		push	ebp
		call	_TS_RESP_set_genTime_with_precision
		add	esp, 10h
		mov	[esp+20h+var_10], eax
		test	eax, eax
		jz	loc_D53
		push	eax
		push	edi
		call	_TS_TST_INFO_set_time
		add	esp, 8
		test	eax, eax
		jz	loc_D53
		cmp	[esi+18h], ebx
		jnz	short loc_C79
		cmp	[esi+1Ch], ebx
		jnz	short loc_C79
		cmp	[esi+20h], ebx
		jz	short loc_C88

loc_C79:				; CODE XREF: _TS_RESP_create_tst_info+F1j
					; _TS_RESP_create_tst_info+F6j
		call	_TS_ACCURACY_new
		mov	ebx, eax
		test	ebx, ebx
		jz	loc_D53

loc_C88:				; CODE XREF: _TS_RESP_create_tst_info+FBj
		mov	eax, [esi+18h]
		test	eax, eax
		jz	short loc_CA1
		push	eax
		push	ebx
		call	_TS_ACCURACY_set_seconds
		add	esp, 8
		test	eax, eax
		jz	loc_D53

loc_CA1:				; CODE XREF: _TS_RESP_create_tst_info+111j
		mov	eax, [esi+1Ch]
		test	eax, eax
		jz	short loc_CBA
		push	eax
		push	ebx
		call	_TS_ACCURACY_set_millis
		add	esp, 8
		test	eax, eax
		jz	loc_D53

loc_CBA:				; CODE XREF: _TS_RESP_create_tst_info+12Aj
		mov	eax, [esi+20h]
		test	eax, eax
		jz	short loc_CD3
		push	eax
		push	ebx
		call	_TS_ACCURACY_set_micros
		add	esp, 8
		test	eax, eax
		jz	loc_D53

loc_CD3:				; CODE XREF: _TS_RESP_create_tst_info+143j
		test	ebx, ebx
		jz	short loc_CE5
		push	ebx
		push	edi
		call	_TS_TST_INFO_set_accuracy
		add	esp, 8
		test	eax, eax
		jz	short loc_D53

loc_CE5:				; CODE XREF: _TS_RESP_create_tst_info+159j
		test	byte ptr [esi+28h], 2
		jz	short loc_CFA
		push	1
		push	edi
		call	_TS_TST_INFO_set_ordering
		add	esp, 8
		test	eax, eax
		jz	short loc_D53

loc_CFA:				; CODE XREF: _TS_RESP_create_tst_info+16Dj
		push	dword ptr [esi+44h]
		call	_TS_REQ_get_nonce
		add	esp, 4
		test	eax, eax
		jz	short loc_D17
		push	eax
		push	edi
		call	_TS_TST_INFO_set_nonce
		add	esp, 8
		test	eax, eax
		jz	short loc_D53

loc_D17:				; CODE XREF: _TS_RESP_create_tst_info+18Bj
		test	byte ptr [esi+28h], 1
		jz	short loc_D96
		call	_GENERAL_NAME_new
		mov	ebp, eax
		test	ebp, ebp
		jz	short loc_D53
		mov	dword ptr [ebp+0], 4
		mov	ecx, [esi]
		mov	ecx, [ecx]
		push	dword ptr [ecx+14h]
		call	_X509_NAME_dup
		add	esp, 4
		mov	[ebp+4], eax
		test	eax, eax
		jz	short loc_D53
		push	ebp
		push	edi
		call	_TS_TST_INFO_set_tsa
		add	esp, 8
		test	eax, eax
		jnz	short loc_D96

loc_D53:				; CODE XREF: _TS_RESP_create_tst_info+2Fj
					; _TS_RESP_create_tst_info+42j	...
		push	edi
		call	_TS_TST_INFO_free
		push	29Eh
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	7Bh ; '{'
		push	7Bh ; '{'
		push	2Fh ; '/'
		xor	edi, edi
		call	_ERR_put_error
		push	dword ptr [esi+48h]
		call	_TS_RESP_get_status_info
		push	dword ptr [eax]
		call	_ASN1_INTEGER_get
		add	esp, 20h
		test	eax, eax
		jnz	short loc_D96
		push	offset ??_C@_0CB@FHFIDOJI@Error?5during?5TSTInfo?5generation?4@	; "Error during	TSTInfo	generation."
		push	2
		push	esi
		call	_TS_RESP_CTX_set_status_info
		add	esp, 0Ch

loc_D96:				; CODE XREF: _TS_RESP_create_tst_info+19Fj
					; _TS_RESP_create_tst_info+1D5j ...
		push	ebp
		call	_GENERAL_NAME_free
		push	ebx
		call	_TS_ACCURACY_free
		push	[esp+28h+var_10]
		call	_ASN1_GENERALIZEDTIME_free
		push	[esp+2Ch+var_C]
		call	_ASN1_INTEGER_free
		add	esp, 10h
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
_TS_RESP_create_tst_info endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0DC4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_RESP_get_policy proc near		; CODE XREF: _TS_RESP_create_response+92p

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	edi
		push	dword ptr [ebx+44h]
		call	_TS_REQ_get_policy_id
		mov	ecx, [ebx+10h]
		add	esp, 4
		xor	edi, edi
		mov	[esp+8+arg_0], eax
		test	ecx, ecx
		jnz	short loc_E02
		push	23Ch
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	66h ; 'f'
		push	85h ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_E02:				; CODE XREF: _TS_RESP_get_policy+1Cj
		test	eax, eax
		jz	short loc_E14
		push	ecx
		push	eax
		call	_OBJ_cmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_E17

loc_E14:				; CODE XREF: _TS_RESP_get_policy+40j
		mov	edi, [ebx+10h]

loc_E17:				; CODE XREF: _TS_RESP_get_policy+4Ej
		push	ebp
		xor	ebp, ebp
		test	edi, edi
		jnz	loc_ECF
		push	esi
		nop

loc_E24:				; CODE XREF: _TS_RESP_get_policy+8Fj
		push	dword ptr [ebx+0Ch]
		call	_sk_num
		add	esp, 4
		cmp	ebp, eax
		jge	short loc_E5C
		push	ebp
		push	dword ptr [ebx+0Ch]
		call	_sk_value
		mov	esi, eax
		push	esi
		push	[esp+1Ch+arg_0]
		call	_OBJ_cmp
		add	esp, 10h
		test	eax, eax
		cmovz	edi, esi
		inc	ebp
		test	edi, edi
		jz	short loc_E24
		pop	esi
		pop	ebp
		mov	eax, edi
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_E5C:				; CODE XREF: _TS_RESP_get_policy+6Dj
		test	edi, edi
		jnz	short loc_ECE
		push	24Dh
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	7Dh ; '}'
		push	85h ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		push	offset ??_C@_0CD@CNMJDOJA@Requested?5policy?5is?5not?5supporte@	; "Requested policy is not supported."
		push	2
		push	ebx
		call	_TS_RESP_CTX_set_status_info
		push	dword ptr [ebx+48h]
		call	_TS_RESP_get_status_info
		mov	esi, eax
		add	esp, 24h
		cmp	[esi+8], edi
		jnz	short loc_EA3
		call	_ASN1_BIT_STRING_new
		mov	[esi+8], eax
		test	eax, eax
		jz	short $err$21_0

loc_EA3:				; CODE XREF: _TS_RESP_get_policy+D1j
		push	1
		push	0Fh
		push	dword ptr [esi+8]
		call	_ASN1_BIT_STRING_set_bit
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_ECE

$err$21_0:				; CODE XREF: _TS_RESP_get_policy+DDj
		push	18Eh
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	41h ; 'A'
		push	7Ch ; '|'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h

loc_ECE:				; CODE XREF: _TS_RESP_get_policy+9Aj
					; _TS_RESP_get_policy+F0j
		pop	esi

loc_ECF:				; CODE XREF: _TS_RESP_get_policy+58j
		pop	ebp
		mov	eax, edi
		pop	edi
		pop	ebx
		retn
_TS_RESP_get_policy endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0ED8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_RESP_process_extensions proc near	; CODE XREF: _TS_RESP_create_response+B0p

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		push	edi
		push	dword ptr [ebp+44h]
		call	_TS_REQ_get_exts
		add	esp, 4
		mov	ebx, eax
		mov	edi, 1
		xor	esi, esi
		nop	dword ptr [eax+00h]

loc_EF8:				; CODE XREF: _TS_RESP_process_extensions+45j
		push	ebx
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jge	short loc_F1F
		push	esi
		push	ebx
		call	_sk_value
		push	0
		push	eax
		mov	eax, [ebp+3Ch]
		push	ebp
		call	eax
		mov	edi, eax
		add	esp, 14h
		inc	esi
		test	edi, edi
		jnz	short loc_EF8

loc_F1F:				; CODE XREF: _TS_RESP_process_extensions+2Bj
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_TS_RESP_process_extensions endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F28h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_RESP_set_genTime_with_precision proc near ;	CODE XREF: _TS_RESP_create_tst_info+C8p

Time		= qword	ptr -24h
var_1C		= byte ptr -1Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 24h ; '$'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+24h+var_4], eax
		mov	eax, [esp+24h+arg_4]
		push	ebx
		mov	ebx, [esp+28h+arg_C]
		cdq
		mov	dword ptr [esp+28h+Time], eax
		mov	dword ptr [esp+28h+Time+4], edx
		push	edi
		mov	edi, [esp+2Ch+arg_0]
		cmp	ebx, 6
		ja	$err$18
		lea	eax, [esp+2Ch+Time]
		push	eax		; Time
		call	dword ptr ds:__imp___gmtime64
		mov	ecx, eax
		add	esp, 4
		test	ecx, ecx
		jz	$err$18
		mov	eax, [ecx+10h]
		push	esi
		push	dword ptr [ecx]
		inc	eax
		push	dword ptr [ecx+4]
		push	dword ptr [ecx+8]
		push	dword ptr [ecx+0Ch]
		push	eax
		mov	eax, [ecx+14h]
		add	eax, 76Ch
		push	eax
		push	offset ??_C@_0BJ@NPJPFJML@?$CF04d?$CF02d?$CF02d?$CF02d?$CF02d?$CF02d?$AA@ ; "%04d%02d%02d%02d%02d%02d"
		lea	eax, [esp+4Ch+var_1C]
		push	17h
		push	eax
		call	_BIO_snprintf
		lea	esi, [esp+54h+var_1C]
		add	esp, 24h
		add	esi, eax
		test	ebx, ebx
		jz	short loc_FE4
		push	[esp+30h+arg_8]
		lea	eax, [ebx+2]
		push	offset ??_C@_06JOENHFNJ@?4?$CF06ld?$AA@	; ".%06ld"
		push	eax
		push	esi
		call	_BIO_snprintf
		mov	ecx, esi
		add	esp, 10h
		lea	edx, [ecx+1]

loc_FC8:				; CODE XREF: _TS_RESP_set_genTime_with_precision+A5j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_FC8
		sub	ecx, edx
		add	esi, ecx
		nop	dword ptr [eax+eax+00h]

loc_FD8:				; CODE XREF: _TS_RESP_set_genTime_with_precision+B4j
		dec	esi
		cmp	byte ptr [esi],	30h ; '0'
		jz	short loc_FD8
		cmp	byte ptr [esi],	2Eh ; '.'
		jz	short loc_FE4
		inc	esi

loc_FE4:				; CODE XREF: _TS_RESP_set_genTime_with_precision+83j
					; _TS_RESP_set_genTime_with_precision+B9j
		mov	word ptr [esi],	5Ah ; 'Z'
		pop	esi
		test	edi, edi
		jnz	short loc_FFE
		push	18h
		call	_ASN1_STRING_type_new
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short $err$18

loc_FFE:				; CODE XREF: _TS_RESP_set_genTime_with_precision+C4j
		lea	eax, [esp+2Ch+var_1C]
		push	eax
		push	edi
		call	_ASN1_GENERALIZEDTIME_set_string
		add	esp, 8
		test	eax, eax
		jnz	short loc_1047
		push	edi
		call	_ASN1_GENERALIZEDTIME_free
		add	esp, 4

$err$18:				; CODE XREF: _TS_RESP_set_genTime_with_precision+2Fj
					; _TS_RESP_set_genTime_with_precision+47j ...
		push	3FAh
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	73h ; 's'
		push	86h ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	ebx
		mov	ecx, [esp+24h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1047:				; CODE XREF: _TS_RESP_set_genTime_with_precision+E6j
		mov	ecx, [esp+2Ch+var_4]
		mov	eax, edi
		pop	edi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 24h
		retn
_TS_RESP_set_genTime_with_precision endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 105Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_RESP_sign	proc near		; CODE XREF: _TS_RESP_create_response+BDp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+10h+arg_0]
		xor	ebx, ebx
		push	edi
		xor	edi, edi
		mov	[esp+14h+var_4], ebx
		xor	ebp, ebp
		push	dword ptr [esi+4]
		push	dword ptr [esi]
		call	_X509_check_private_key
		add	esp, 8
		test	eax, eax
		jnz	short loc_10A9
		push	2CEh
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	78h ; 'x'
		push	88h ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_1185
; ---------------------------------------------------------------------------

loc_10A9:				; CODE XREF: _TS_RESP_sign+2Bj
		call	_PKCS7_new
		mov	edi, eax
		test	edi, edi
		jnz	short loc_10D4
		push	2D4h
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	41h ; 'A'
		push	88h ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h
		jmp	loc_1185
; ---------------------------------------------------------------------------

loc_10D4:				; CODE XREF: _TS_RESP_sign+56j
		push	16h
		push	edi
		call	_PKCS7_set_type
		add	esp, 8
		test	eax, eax
		jz	loc_1185
		mov	eax, [edi+14h]
		push	3
		push	dword ptr [eax]
		call	_ASN1_INTEGER_set
		add	esp, 8
		test	eax, eax
		jz	loc_1185
		push	dword ptr [esi+44h]
		call	_TS_REQ_get_cert_req
		add	esp, 4
		test	eax, eax
		jz	short loc_114E
		push	dword ptr [esi]
		push	edi
		call	_PKCS7_add_certificate
		mov	eax, [esi+8]
		add	esp, 8
		test	eax, eax
		jz	short loc_114E
		push	eax
		xor	ebx, ebx
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_114E

loc_112E:				; CODE XREF: _TS_RESP_sign+F0j
		push	ebx
		push	dword ptr [esi+8]
		call	_sk_value
		push	eax
		push	edi
		call	_PKCS7_add_certificate
		push	dword ptr [esi+8]
		inc	ebx
		call	_sk_num
		add	esp, 14h
		cmp	ebx, eax
		jl	short loc_112E

loc_114E:				; CODE XREF: _TS_RESP_sign+AFj
					; _TS_RESP_sign+C1j ...
		call	_EVP_sha1
		push	eax
		push	dword ptr [esi+4]
		push	dword ptr [esi]
		push	edi
		call	_PKCS7_add_signature
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jnz	short loc_11CB
		push	2ECh
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	76h ; 'v'

loc_1174:				; CODE XREF: _TS_RESP_sign+197j
					; _TS_RESP_sign+1DAj ...
		push	88h ; ''
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h

loc_1183:				; CODE XREF: _TS_RESP_sign+1BAj
					; _TS_RESP_sign+1EAj
		xor	ebx, ebx

loc_1185:				; CODE XREF: _TS_RESP_sign+48j
					; _TS_RESP_sign+73j ...
		push	dword ptr [esi+48h]
		call	_TS_RESP_get_status_info
		push	dword ptr [eax]
		call	_ASN1_INTEGER_get
		add	esp, 8
		test	eax, eax
		jnz	short loc_11AB
		push	offset ??_C@_0CD@EIFJLLDN@Error?5during?5signature?5generatio@ ; "Error	during signature generation."
		push	2
		push	esi
		call	_TS_RESP_CTX_set_status_info
		add	esp, 0Ch

loc_11AB:				; CODE XREF: _TS_RESP_sign+13Dj
					; _TS_RESP_sign+269j
		push	ebp
		call	_BIO_free_all
		push	[esp+18h+var_4]
		call	_ESS_SIGNING_CERT_free
		push	edi
		call	_PKCS7_free
		add	esp, 0Ch
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_11CB:				; CODE XREF: _TS_RESP_sign+10Aj
		push	0CFh ; 'Ï'
		call	_OBJ_nid2obj
		push	eax
		push	6
		push	32h ; '2'
		push	ebx
		call	_PKCS7_add_signed_attribute
		add	esp, 14h
		test	eax, eax
		jnz	short loc_11F8
		push	2F4h
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	77h ; 'w'
		jmp	loc_1174
; ---------------------------------------------------------------------------

loc_11F8:				; CODE XREF: _TS_RESP_sign+189j
		test	byte ptr [esi+28h], 4
		jz	short loc_1203
		mov	eax, [esi+8]
		jmp	short loc_1205
; ---------------------------------------------------------------------------

loc_1203:				; CODE XREF: _TS_RESP_sign+1A0j
		xor	eax, eax

loc_1205:				; CODE XREF: _TS_RESP_sign+1A5j
		push	eax
		push	dword ptr [esi]
		call	_ESS_SIGNING_CERT_new_init
		add	esp, 8
		mov	[esp+14h+var_4], eax
		test	eax, eax
		jz	loc_1183
		push	eax
		push	ebx
		call	_ESS_add_signing_cert
		add	esp, 8
		test	eax, eax
		jnz	short loc_123B
		push	302h
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	74h ; 't'
		jmp	loc_1174
; ---------------------------------------------------------------------------

loc_123B:				; CODE XREF: _TS_RESP_sign+1CCj
		push	edi
		call	_TS_TST_INFO_content_new
		add	esp, 4
		test	eax, eax
		jz	loc_1183
		push	0
		push	edi
		call	_PKCS7_dataInit
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jnz	short loc_126E
		push	30Ch
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	41h ; 'A'
		jmp	loc_1174
; ---------------------------------------------------------------------------

loc_126E:				; CODE XREF: _TS_RESP_sign+1FFj
		push	dword ptr [esi+4Ch]
		push	ebp
		call	_i2d_TS_TST_INFO_bio
		add	esp, 8
		test	eax, eax
		jnz	short loc_128F
		push	312h
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	7Ch ; '|'
		jmp	loc_1174
; ---------------------------------------------------------------------------

loc_128F:				; CODE XREF: _TS_RESP_sign+220j
		push	ebp
		push	edi
		call	_PKCS7_dataFinal
		add	esp, 8
		test	eax, eax
		jnz	short loc_12AE
		push	318h
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	7Ch ; '|'
		jmp	loc_1174
; ---------------------------------------------------------------------------

loc_12AE:				; CODE XREF: _TS_RESP_sign+23Fj
		push	dword ptr [esi+4Ch]
		push	edi
		push	dword ptr [esi+48h]
		call	_TS_RESP_set_tst_info
		add	esp, 0Ch
		xor	edi, edi
		mov	[esi+4Ch], edi
		lea	ebx, [edi+1]
		jmp	loc_11AB
_TS_RESP_sign	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 12CCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_TS_TST_INFO_content_new proc near	; CODE XREF: _TS_RESP_sign+1E0p

arg_0		= dword	ptr  4

		push	esi
		push	edi
		xor	edi, edi
		call	_PKCS7_new
		mov	esi, eax
		test	esi, esi
		jz	short $err$8
		call	_ASN1_TYPE_new
		mov	[esi+14h], eax
		test	eax, eax
		jz	short $err$8
		push	0CFh ; 'Ï'
		call	_OBJ_nid2obj
		add	esp, 4
		mov	[esi+10h], eax
		call	_ASN1_OCTET_STRING_new
		mov	edi, eax
		test	edi, edi
		jz	short $err$8
		push	edi
		push	4
		push	dword ptr [esi+14h]
		call	_ASN1_TYPE_set
		push	esi
		push	[esp+18h+arg_0]
		xor	edi, edi
		call	_PKCS7_set_content
		add	esp, 14h
		test	eax, eax
		jz	short $err$8
		lea	eax, [edi+1]
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

$err$8:					; CODE XREF: _TS_TST_INFO_content_new+Dj
					; _TS_TST_INFO_content_new+19j	...
		push	edi
		call	_ASN1_OCTET_STRING_free
		push	esi
		call	_PKCS7_free
		add	esp, 8
		xor	eax, eax
		pop	edi
		pop	esi
		retn
_TS_TST_INFO_content_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 133Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_def_extension_cb proc near		; DATA XREF: _TS_RESP_CTX_new+54o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	offset ??_C@_0BH@DLFNNFMJ@Unsupported?5extension?4?$AA@	; "Unsupported extension."
		push	2
		push	esi
		call	_TS_RESP_CTX_set_status_info
		push	dword ptr [esi+48h]
		call	_TS_RESP_get_status_info
		mov	esi, eax
		add	esp, 10h
		cmp	dword ptr [esi+8], 0
		jnz	short loc_136D
		call	_ASN1_BIT_STRING_new
		mov	[esi+8], eax
		test	eax, eax
		jz	short $err$9

loc_136D:				; CODE XREF: _def_extension_cb+23j
		push	1
		push	10h
		push	dword ptr [esi+8]
		call	_ASN1_BIT_STRING_set_bit
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1398

$err$9:					; CODE XREF: _def_extension_cb+2Fj
		push	18Eh
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	41h ; 'A'
		push	7Ch ; '|'
		push	2Fh ; '/'
		call	_ERR_put_error
		add	esp, 14h

loc_1398:				; CODE XREF: _def_extension_cb+42j
		xor	eax, eax
		pop	esi
		retn
_def_extension_cb endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 139Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_def_serial_cb	proc near		; DATA XREF: _TS_RESP_CTX_new+44o

arg_0		= dword	ptr  4

		push	esi
		call	_ASN1_INTEGER_new
		mov	esi, eax
		test	esi, esi
		jz	short $err$6_2
		push	1
		push	esi
		call	_ASN1_INTEGER_set
		add	esp, 8
		test	eax, eax
		jz	short $err$6_2
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

$err$6_2:				; CODE XREF: _def_serial_cb+Aj
					; _def_serial_cb+19j
		push	6Ah ; 'j'
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	41h ; 'A'
		push	6Eh ; 'n'
		push	2Fh ; '/'
		call	_ERR_put_error
		push	offset ??_C@_0CH@IKKNJBOJ@Error?5during?5serial?5number?5gener@	; "Error during	serial number generation."
		push	2
		push	[esp+20h+arg_0]
		call	_TS_RESP_CTX_set_status_info
		add	esp, 20h
		xor	eax, eax
		pop	esi
		retn
_def_serial_cb	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 13E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_def_time_cb	proc near		; DATA XREF: _TS_RESP_CTX_new+4Bo

var_8		= dword	ptr -8
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 8
		call	__chkstk
		lea	eax, [esp+8+var_8]
		push	eax		; Time
		call	dword ptr ds:__imp___time64
		and	eax, edx
		add	esp, 4
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_143B
		push	8Dh ; ''
		push	offset ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ ;	".\\crypto\\ts\\ts_rsp_sign.c"
		push	7Ah ; 'z'
		push	6Fh ; 'o'
		push	2Fh ; '/'
		call	_ERR_put_error
		push	offset ??_C@_0BH@BCEEDHCH@Time?5is?5not?5available?4?$AA@ ; "Time is not available."
		push	2
		push	[esp+24h+arg_0]
		call	_TS_RESP_CTX_set_status_info
		push	0Eh
		push	[esp+2Ch+arg_0]
		call	_TS_RESP_CTX_add_failure_info
		add	esp, 28h
		xor	eax, eax
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_143B:				; CODE XREF: _def_time_cb+1Cj
		mov	ecx, [esp+8+arg_8]
		mov	eax, [esp+8+var_8]
		mov	[ecx], eax
		mov	eax, [esp+8+arg_C]
		mov	dword ptr [eax], 0
		mov	eax, 1
		add	esp, 8
		retn
_def_time_cb	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1458h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; struct tm *__cdecl static gmtime(const time_t	*Time)
_gmtime		proc near
		jmp	dword ptr ds:__imp___gmtime64
_gmtime		endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1460h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; time_t __cdecl static	time(time_t *Time)
_time		proc near
		jmp	dword ptr ds:__imp___time64
_time		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1468h
; COMDAT (pick any)
		public ??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@
; `string'
??_C@_0BK@IPGDPCNI@?4?2crypto?2ts?2ts_rsp_sign?4c?$AA@ db '.\crypto\ts\ts_rsp_sign.c',0
					; DATA XREF: _ESS_CERT_ID_new_init+C1o
					; _ESS_SIGNING_CERT_new_init+C3o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1484h
; COMDAT (pick any)
		public ??_C@_0CH@IKKNJBOJ@Error?5during?5serial?5number?5gener@
; `string'
??_C@_0CH@IKKNJBOJ@Error?5during?5serial?5number?5gener@ db 'Error during serial number generation.',0
					; DATA XREF: _def_serial_cb+31o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14ACh
; COMDAT (pick any)
		public ??_C@_0BH@BCEEDHCH@Time?5is?5not?5available?4?$AA@
; `string'
??_C@_0BH@BCEEDHCH@Time?5is?5not?5available?4?$AA@ db 'Time is not available.',0
					; DATA XREF: _def_time_cb+33o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14C4h
; COMDAT (pick any)
		public ??_C@_0BH@DLFNNFMJ@Unsupported?5extension?4?$AA@
; `string'
??_C@_0BH@DLFNNFMJ@Unsupported?5extension?4?$AA@ db 'Unsupported extension.',0
					; DATA XREF: _def_extension_cb+5o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14DCh
; COMDAT (pick any)
		public ??_C@_0CE@OCFPDKJO@Bad?5request?5format?5or?5system?5err@
; `string'
??_C@_0CE@OCFPDKJO@Bad?5request?5format?5or?5system?5err@ db 'Bad request format or system error.',0
					; DATA XREF: _TS_RESP_create_response+59o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1500h
; COMDAT (pick any)
		public ??_C@_0CC@DNFFCHKG@Error?5during?5response?5generation@
; `string'
??_C@_0CC@DNFFCHKG@Error?5during?5response?5generation@	db 'Error during response generation.',0
					; DATA XREF: _TS_RESP_create_response+FCo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1524h
; COMDAT (pick any)
		public ??_C@_0BF@LJAOPGO@Bad?5request?5version?4?$AA@
; `string'
??_C@_0BF@LJAOPGO@Bad?5request?5version?4?$AA@ db 'Bad request version.',0
					; DATA XREF: _TS_RESP_check_request+24o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 153Ch
; COMDAT (pick any)
		public ??_C@_0CL@IPOEKJMF@Message?5digest?5algorithm?5is?5not?5@
; `string'
??_C@_0CL@IPOEKJMF@Message?5digest?5algorithm?5is?5not?5@ db 'Message digest algorithm is not supported.',0
					; DATA XREF: _TS_RESP_check_request+E6o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1568h
; COMDAT (pick any)
		public ??_C@_0CG@MHCAOKLJ@Superfluous?5message?5digest?5param@
; `string'
??_C@_0CG@MHCAOKLJ@Superfluous?5message?5digest?5param@	db 'Superfluous message digest parameter.',0
					; DATA XREF: _TS_RESP_check_request+C0o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1590h
; COMDAT (pick any)
		public ??_C@_0BE@PBMOHPHD@Bad?5message?5digest?4?$AA@
; `string'
??_C@_0BE@PBMOHPHD@Bad?5message?5digest?4?$AA@ db 'Bad message digest.',0
					; DATA XREF: _TS_RESP_check_request+15Eo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 15A4h
; COMDAT (pick any)
		public ??_C@_0CD@CNMJDOJA@Requested?5policy?5is?5not?5supporte@
; `string'
??_C@_0CD@CNMJDOJA@Requested?5policy?5is?5not?5supporte@ db 'Requested policy is not supported.',0
					; DATA XREF: _TS_RESP_get_policy+B4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 15C8h
; COMDAT (pick any)
		public ??_C@_0CB@FHFIDOJI@Error?5during?5TSTInfo?5generation?4@
; `string'
??_C@_0CB@FHFIDOJI@Error?5during?5TSTInfo?5generation?4@ db 'Error during TSTInfo generation.',0
					; DATA XREF: _TS_RESP_create_tst_info+20Ao
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 15ECh
; COMDAT (pick any)
		public ??_C@_0CD@EIFJLLDN@Error?5during?5signature?5generatio@
; `string'
??_C@_0CD@EIFJLLDN@Error?5during?5signature?5generatio@	db 'Error during signature generation.',0
					; DATA XREF: _TS_RESP_sign+13Fo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1610h
; COMDAT (pick any)
		public ??_C@_0BJ@NPJPFJML@?$CF04d?$CF02d?$CF02d?$CF02d?$CF02d?$CF02d?$AA@
; `string'
??_C@_0BJ@NPJPFJML@?$CF04d?$CF02d?$CF02d?$CF02d?$CF02d?$CF02d?$AA@ db '%04d%02d%02d%02d%02d%02d',0
					; DATA XREF: _TS_RESP_set_genTime_with_precision+67o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 162Ch
; COMDAT (pick any)
		public ??_C@_06JOENHFNJ@?4?$CF06ld?$AA@
; `string'
??_C@_06JOENHFNJ@?4?$CF06ld?$AA@ db '.%06ld',0
					; DATA XREF: _TS_RESP_set_genTime_with_precision+8Co
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _sk_num:near	; CODE XREF: _ESS_SIGNING_CERT_new_init+6Cp
					; _ESS_SIGNING_CERT_new_init+9Fp ...
		extrn _sk_value:near	; CODE XREF: _ESS_SIGNING_CERT_new_init+7Ap
					; _TS_RESP_check_request+83p ...
		extrn _sk_new_null:near	; CODE XREF: _ESS_SIGNING_CERT_new_init+17p
					; _TS_RESP_CTX_add_md+Bp ...
		extrn _sk_free:near	; CODE XREF: _TS_RESP_CTX_free+3Dp
		extrn _sk_pop_free:near	; CODE XREF: _TS_RESP_CTX_free+20p
					; _TS_RESP_CTX_free+2Dp ...
		extrn _sk_push:near	; CODE XREF: _ESS_CERT_ID_new_init+7Ap
					; _ESS_SIGNING_CERT_new_init+59p ...
		extrn _CRYPTO_add_lock:near ; CODE XREF: _TS_RESP_CTX_set_signer_cert+5Ep
					; _TS_RESP_CTX_set_signer_key+2Ep
		extrn _CRYPTO_malloc:near ; CODE XREF: _ESS_add_signing_cert+26p
					; _TS_RESP_CTX_new+Dp
		extrn _CRYPTO_free:near	; CODE XREF: _ESS_add_signing_cert+6Bp
					; _ESS_add_signing_cert+A8p ...
		extrn _BIO_free_all:near ; CODE	XREF: _TS_RESP_sign+150p
		extrn _BIO_snprintf:near
					; CODE XREF: _TS_RESP_set_genTime_with_precision+73p
					; _TS_RESP_set_genTime_with_precision+93p
		extrn _ERR_put_error:near ; CODE XREF: _ESS_CERT_ID_new_init+CCp
					; _ESS_SIGNING_CERT_new_init+CEp ...
; struct tm *__cdecl __gmtime64(const __time64_t *Time)
		extrn __imp___gmtime64:near
					; CODE XREF: _TS_RESP_set_genTime_with_precision+3Ap
					; DATA XREF: _TS_RESP_set_genTime_with_precision+3Ar ...
; __time64_t __cdecl __time64(__time64_t *Time)
		extrn __imp___time64:near ; CODE XREF: _def_time_cb+Ep
					; DATA XREF: _def_time_cb+Er ...
		extrn _ASN1_TYPE_new:near ; CODE XREF: _TS_TST_INFO_content_new+Fp
		extrn _ASN1_TYPE_get:near ; CODE XREF: _TS_RESP_check_request+AFp
		extrn _ASN1_TYPE_set:near ; CODE XREF: _TS_TST_INFO_content_new+3Cp
		extrn _ASN1_OBJECT_free:near ; CODE XREF: _TS_RESP_CTX_add_policy+59p
					; _TS_RESP_CTX_free+35p ...
		extrn _ASN1_STRING_new:near ; CODE XREF: _ESS_add_signing_cert+50p
		extrn _ASN1_STRING_free:near ; CODE XREF: _ESS_add_signing_cert+A2p
		extrn _ASN1_STRING_type_new:near
					; CODE XREF: _TS_RESP_set_genTime_with_precision+C8p
		extrn _ASN1_STRING_set:near ; CODE XREF: _ESS_add_signing_cert+5Ep
					; _TS_RESP_CTX_set_status_info+4Dp
		extrn _ASN1_BIT_STRING_new:near
					; CODE XREF: _TS_RESP_CTX_add_failure_info+18p
					; _TS_RESP_check_request+105p ...
		extrn _ASN1_BIT_STRING_set_bit:near
					; CODE XREF: _TS_RESP_CTX_add_failure_info+2Dp
					; _TS_RESP_check_request+118p ...
		extrn _ASN1_INTEGER_new:near ; CODE XREF: _TS_RESP_CTX_set_accuracy+3Ep
					; _TS_RESP_CTX_set_accuracy+60p ...
		extrn _ASN1_INTEGER_free:near ;	CODE XREF: _ESS_CERT_ID_new_init+8Ep
					; _TS_RESP_CTX_free+45p ...
		extrn _ASN1_INTEGER_dup:near ; CODE XREF: _ESS_CERT_ID_new_init+98p
		extrn _ASN1_GENERALIZEDTIME_set_string:near
					; CODE XREF: _TS_RESP_set_genTime_with_precision+DCp
		extrn _ASN1_OCTET_STRING_new:near ; CODE XREF: _TS_TST_INFO_content_new+2Bp
		extrn _ASN1_OCTET_STRING_free:near ; CODE XREF:	_TS_TST_INFO_content_new+5Bp
		extrn _ASN1_OCTET_STRING_set:near ; CODE XREF: _ESS_CERT_ID_new_init+2Cp
					; _ESS_SIGNING_CERT_new_init+4Ap
		extrn _ASN1_UTF8STRING_new:near
					; CODE XREF: _TS_RESP_CTX_set_status_info+31p
		extrn _ASN1_UTF8STRING_free:near
					; CODE XREF: _TS_RESP_CTX_set_status_info+B9p
		extrn _ASN1_GENERALIZEDTIME_free:near
					; CODE XREF: _TS_RESP_create_tst_info+22Ap
					; _TS_RESP_set_genTime_with_precision+E9p
		extrn _ASN1_INTEGER_set:near ; CODE XREF: _TS_RESP_CTX_set_accuracy+4Cp
					; _TS_RESP_CTX_set_accuracy+6Ep ...
		extrn _ASN1_INTEGER_get:near
					; CODE XREF: _TS_RESP_CTX_set_status_info_cond+Fp
					; _TS_RESP_create_response+F0p	...
		extrn _OBJ_dup:near	; CODE XREF: _TS_RESP_CTX_add_policy+1Dp
					; _TS_RESP_CTX_set_def_policy+19p
		extrn _OBJ_nid2obj:near	; CODE XREF: _TS_RESP_sign+174p
					; _TS_TST_INFO_content_new+20p
		extrn _OBJ_obj2nid:near	; CODE XREF: _TS_RESP_check_request+5Ep
		extrn _OBJ_cmp:near	; CODE XREF: _TS_RESP_get_policy+44p
					; _TS_RESP_get_policy+7Fp
		extrn _EVP_MD_type:near	; CODE XREF: _TS_RESP_check_request+8Bp
		extrn _EVP_MD_size:near	; CODE XREF: _TS_RESP_check_request+152p
		extrn _EVP_sha1:near	; CODE XREF: _TS_RESP_sign:loc_114Ep
		extrn _EVP_PKEY_free:near ; CODE XREF: _TS_RESP_CTX_free+13p
					; _TS_RESP_CTX_set_signer_key+Dp
		extrn _PKCS7_new:near	; CODE XREF: _TS_RESP_sign:loc_10A9p
					; _TS_TST_INFO_content_new+4p
		extrn _PKCS7_free:near	; CODE XREF: _TS_RESP_sign+15Fp
					; _TS_TST_INFO_content_new+61p
		extrn _PKCS7_set_type:near ; CODE XREF:	_TS_RESP_sign+7Bp
		extrn _PKCS7_set_content:near ;	CODE XREF: _TS_TST_INFO_content_new+48p
		extrn _PKCS7_add_certificate:near ; CODE XREF: _TS_RESP_sign+B4p
					; _TS_RESP_sign+DDp
		extrn _PKCS7_dataInit:near ; CODE XREF:	_TS_RESP_sign+1F3p
		extrn _PKCS7_dataFinal:near ; CODE XREF: _TS_RESP_sign+235p
		extrn _PKCS7_add_signature:near	; CODE XREF: _TS_RESP_sign+FEp
		extrn _PKCS7_add_signed_attribute:near
					; CODE XREF: _ESS_add_signing_cert+7Cp
					; _TS_RESP_sign+17Fp
		extrn _X509_NAME_dup:near ; CODE XREF: _ESS_CERT_ID_new_init+65p
					; _TS_RESP_create_tst_info+1BAp
		extrn _X509_free:near	; CODE XREF: _TS_RESP_CTX_free+Bp
					; _TS_RESP_CTX_set_signer_cert+42p
					; DATA XREF: ...
		extrn _X509_check_private_key:near ; CODE XREF:	_TS_RESP_sign+21p
		extrn _X509_chain_up_ref:near ;	CODE XREF: _TS_RESP_CTX_set_certs+2Ap
		extrn _GENERAL_NAME_new:near ; CODE XREF: _ESS_CERT_ID_new_init:loc_4Fp
					; _TS_RESP_create_tst_info+1A1p
		extrn _GENERAL_NAME_free:near ;	CODE XREF: _ESS_CERT_ID_new_init+B1p
					; _ESS_SIGNING_CERT_new_init+B3p ...
		extrn _X509_check_purpose:near ; CODE XREF: _ESS_CERT_ID_new_init+Dp
					; _ESS_SIGNING_CERT_new_init+2Fp ...
		extrn _TS_REQ_free:near	; CODE XREF: _TS_RESP_CTX_cleanup+8p
					; _TS_RESP_create_response+12Fp
		extrn _d2i_TS_REQ_bio:near ; CODE XREF:	_TS_RESP_create_response+4Ap
		extrn _TS_RESP_new:near	; CODE XREF: _TS_RESP_create_response+1Bp
		extrn _TS_RESP_free:near ; CODE	XREF: _TS_RESP_CTX_cleanup+17p
					; _TS_RESP_create_response+113p ...
		extrn _TS_STATUS_INFO_new:near ; CODE XREF: _TS_RESP_CTX_set_status_info+8p
		extrn _TS_STATUS_INFO_free:near
					; CODE XREF: _TS_RESP_CTX_set_status_info+B3p
		extrn _TS_TST_INFO_new:near ; CODE XREF: _TS_RESP_create_tst_info+22p
		extrn _TS_TST_INFO_free:near ; CODE XREF: _TS_RESP_CTX_cleanup+26p
					; _TS_RESP_create_response+14Dp ...
		extrn _i2d_TS_TST_INFO_bio:near	; CODE XREF: _TS_RESP_sign+216p
		extrn _TS_ACCURACY_new:near ; CODE XREF: _TS_RESP_create_tst_info:loc_C79p
		extrn _TS_ACCURACY_free:near ; CODE XREF: _TS_RESP_create_tst_info+221p
		extrn _ESS_ISSUER_SERIAL_new:near ; CODE XREF: _ESS_CERT_ID_new_init+43p
		extrn _ESS_CERT_ID_new:near ; CODE XREF: _ESS_CERT_ID_new_init+15p
					; _ESS_SIGNING_CERT_new_init+37p
		extrn _ESS_CERT_ID_free:near ; CODE XREF: _ESS_CERT_ID_new_init+B7p
					; _ESS_SIGNING_CERT_new_init+B9p
		extrn _ESS_SIGNING_CERT_new:near ; CODE	XREF: _ESS_SIGNING_CERT_new_init+3p
		extrn _ESS_SIGNING_CERT_free:near
					; CODE XREF: _ESS_SIGNING_CERT_new_init+D7p
					; _TS_RESP_sign+159p
		extrn _i2d_ESS_SIGNING_CERT:near ; CODE	XREF: _ESS_add_signing_cert+14p
					; _ESS_add_signing_cert+48p
		extrn _TS_REQ_get_version:near ; CODE XREF: _TS_RESP_check_request+17p
		extrn _TS_REQ_get_msg_imprint:near ; CODE XREF:	_TS_RESP_check_request+47p
		extrn _TS_MSG_IMPRINT_get_algo:near ; CODE XREF: _TS_RESP_check_request+53p
		extrn _TS_MSG_IMPRINT_get_msg:near ; CODE XREF:	_TS_RESP_check_request+14Ap
		extrn _TS_REQ_get_policy_id:near ; CODE	XREF: _TS_RESP_get_policy+9p
		extrn _TS_REQ_get_nonce:near ; CODE XREF: _TS_RESP_create_tst_info+181p
		extrn _TS_REQ_get_cert_req:near	; CODE XREF: _TS_RESP_sign+A5p
		extrn _TS_REQ_get_exts:near ; CODE XREF: _TS_RESP_process_extensions+Bp
		extrn _TS_RESP_set_status_info:near
					; CODE XREF: _TS_RESP_CTX_set_status_info+84p
		extrn _TS_RESP_get_status_info:near
					; CODE XREF: _TS_RESP_CTX_add_failure_info+8p
					; _TS_RESP_CTX_set_status_info_cond+8p	...
		extrn _TS_RESP_set_tst_info:near ; CODE	XREF: _TS_RESP_sign+259p
		extrn _TS_TST_INFO_set_version:near
					; CODE XREF: _TS_RESP_create_tst_info+38p
		extrn _TS_TST_INFO_set_policy_id:near
					; CODE XREF: _TS_RESP_create_tst_info+4Dp
		extrn _TS_TST_INFO_set_msg_imprint:near
					; CODE XREF: _TS_RESP_create_tst_info+64p
		extrn _TS_TST_INFO_set_serial:near ; CODE XREF:	_TS_RESP_create_tst_info+8Ep
		extrn _TS_TST_INFO_set_time:near ; CODE	XREF: _TS_RESP_create_tst_info+DEp
		extrn _TS_TST_INFO_set_accuracy:near
					; CODE XREF: _TS_RESP_create_tst_info+15Dp
		extrn _TS_ACCURACY_set_seconds:near
					; CODE XREF: _TS_RESP_create_tst_info+115p
		extrn _TS_ACCURACY_set_millis:near
					; CODE XREF: _TS_RESP_create_tst_info+12Ep
		extrn _TS_ACCURACY_set_micros:near
					; CODE XREF: _TS_RESP_create_tst_info+147p
		extrn _TS_TST_INFO_set_ordering:near
					; CODE XREF: _TS_RESP_create_tst_info+172p
		extrn _TS_TST_INFO_set_nonce:near ; CODE XREF: _TS_RESP_create_tst_info+18Fp
		extrn _TS_TST_INFO_set_tsa:near	; CODE XREF: _TS_RESP_create_tst_info+1CBp
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _TS_RESP_set_genTime_with_precision+116p
					; _TS_RESP_set_genTime_with_precision+129p
		extrn __chkstk:near	; CODE XREF: _ESS_add_signing_cert+5p
					; _TS_RESP_check_request+5p ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _TS_RESP_CTX_new+3Cp
		extrn ___security_cookie:near
					; DATA XREF: _TS_RESP_set_genTime_with_precision+Ar


		end
