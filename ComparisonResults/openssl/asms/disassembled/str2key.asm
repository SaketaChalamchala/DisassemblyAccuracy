;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	064857006FE4833E02290A5803099A6D
; Input	CRC32 :	1871FF7B

; File Name   :	C:\compspace\Diff\openssl\obj\str2key.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_string_to_2keys
_DES_string_to_2keys proc near

var_88		= dword	ptr -88h
var_84		= byte ptr -84h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 88h ; 'ˆ'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+88h+var_4], eax
		push	ebx
		mov	ebx, [esp+8Ch+arg_0]
		xorps	xmm0, xmm0
		push	ebp
		mov	ebp, [esp+90h+arg_8]
		push	esi
		push	edi
		mov	edi, [esp+98h+arg_4]
		mov	esi, ebx
		mov	[esp+98h+var_88], ebx
		movq	qword ptr [edi], xmm0
		lea	ecx, [esi+1]
		movq	qword ptr [ebp+0], xmm0

loc_46:					; CODE XREF: _DES_string_to_2keys+4Bj
		mov	al, [esi]
		inc	esi
		test	al, al
		jnz	short loc_46
		sub	esi, ecx
		xor	eax, eax
		test	esi, esi
		jle	short loc_C9

loc_55:					; CODE XREF: _DES_string_to_2keys+C7j
		mov	bl, [ebx+eax]
		mov	ecx, eax
		and	cl, 1Fh
		cmp	cl, 10h
		jge	short loc_80
		mov	ecx, eax
		add	bl, bl
		and	cl, 0Fh
		cmp	cl, 8
		mov	ecx, eax
		jge	short loc_78
		and	ecx, 7
		xor	[ecx+edi], bl
		jmp	short loc_C0
; ---------------------------------------------------------------------------

loc_78:					; CODE XREF: _DES_string_to_2keys+6Ej
		and	ecx, 7
		xor	[ecx+ebp], bl
		jmp	short loc_C0
; ---------------------------------------------------------------------------

loc_80:					; CODE XREF: _DES_string_to_2keys+60j
		rol	bl, 4
		mov	dl, bl
		mov	cl, bl
		shl	cl, 2
		shr	dl, 2
		xor	dl, cl
		shl	bl, 2
		and	dl, 33h
		xor	dl, bl
		mov	cl, dl
		mov	bl, dl
		add	cl, cl
		shr	bl, 1
		xor	bl, cl
		add	dl, dl
		mov	ecx, eax
		and	bl, 55h
		and	cl, 0Fh
		xor	bl, dl
		cmp	cl, 8
		mov	edx, edi
		mov	ecx, eax
		jl	short loc_B8
		mov	edx, ebp

loc_B8:					; CODE XREF: _DES_string_to_2keys+B4j
		and	ecx, 7
		sub	edx, ecx
		xor	[edx+7], bl

loc_C0:					; CODE XREF: _DES_string_to_2keys+76j
					; _DES_string_to_2keys+7Ej
		mov	ebx, [esp+98h+var_88]
		inc	eax
		cmp	eax, esi
		jl	short loc_55

loc_C9:					; CODE XREF: _DES_string_to_2keys+53j
		cmp	esi, 8
		jg	short loc_D9
		mov	eax, [edi]
		mov	[ebp+0], eax
		mov	eax, [edi+4]
		mov	[ebp+4], eax

loc_D9:					; CODE XREF: _DES_string_to_2keys+CCj
		push	edi
		call	_DES_set_odd_parity
		push	ebp
		call	_DES_set_odd_parity
		lea	eax, [esp+0A0h+var_84]
		push	eax
		push	edi
		call	_DES_set_key_unchecked
		push	edi
		lea	eax, [esp+0ACh+var_84]
		push	eax
		push	esi
		push	edi
		push	ebx
		call	_DES_cbc_cksum
		lea	eax, [esp+0BCh+var_84]
		push	eax
		push	ebp
		call	_DES_set_key_unchecked
		push	ebp
		lea	eax, [esp+0C8h+var_84]
		push	eax
		push	esi
		push	ebp
		push	ebx
		call	_DES_cbc_cksum
		add	esp, 40h
		lea	eax, [esp+98h+var_84]
		push	80h ; '€'
		push	eax
		call	_OPENSSL_cleanse
		push	edi
		call	_DES_set_odd_parity
		push	ebp
		call	_DES_set_odd_parity
		mov	ecx, [esp+0A8h+var_4]
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 88h
		retn
_DES_string_to_2keys endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 154h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_string_to_key
_DES_string_to_key proc	near

var_88		= dword	ptr -88h
var_84		= byte ptr -84h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 88h ; 'ˆ'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+88h+var_4], eax
		push	ebx
		mov	ebx, [esp+8Ch+arg_0]
		xorps	xmm0, xmm0
		push	ebp
		mov	ebp, [esp+90h+arg_4]
		push	edi
		mov	edi, ebx
		mov	[esp+94h+var_88], ebx
		movq	qword ptr [ebp+0], xmm0
		lea	ecx, [edi+1]
		nop	word ptr [eax+eax+00h]

loc_194:				; CODE XREF: _DES_string_to_key+45j
		mov	al, [edi]
		inc	edi
		test	al, al
		jnz	short loc_194
		sub	edi, ecx
		xor	eax, eax
		test	edi, edi
		jle	short loc_1FB
		push	esi

loc_1A4:				; CODE XREF: _DES_string_to_key+A4j
		mov	dl, [ebx+eax]
		mov	ecx, eax
		and	cl, 0Fh
		cmp	cl, 8
		jge	short loc_1BD
		mov	ecx, eax
		add	dl, dl
		and	ecx, 7
		xor	[ecx+ebp], dl
		jmp	short loc_1F5
; ---------------------------------------------------------------------------

loc_1BD:				; CODE XREF: _DES_string_to_key+5Bj
		rol	dl, 4
		mov	esi, ebp
		mov	bl, dl
		mov	cl, dl
		shr	bl, 2
		shl	cl, 2
		xor	bl, cl
		shl	dl, 2
		and	bl, 33h
		mov	ecx, eax
		xor	bl, dl
		and	ecx, 7
		sub	esi, ecx
		mov	dl, bl
		mov	cl, bl
		shr	dl, 1
		add	cl, cl
		add	bl, bl
		xor	dl, cl
		and	dl, 55h
		xor	dl, bl
		mov	ebx, [esp+98h+var_88]
		xor	[esi+7], dl

loc_1F5:				; CODE XREF: _DES_string_to_key+67j
		inc	eax
		cmp	eax, edi
		jl	short loc_1A4
		pop	esi

loc_1FB:				; CODE XREF: _DES_string_to_key+4Dj
		push	ebp
		call	_DES_set_odd_parity
		lea	eax, [esp+98h+var_84]
		push	eax
		push	ebp
		call	_DES_set_key_unchecked
		push	ebp
		lea	eax, [esp+0A4h+var_84]
		push	eax
		push	edi
		push	ebp
		push	ebx
		call	_DES_cbc_cksum
		lea	eax, [esp+0B4h+var_84]
		push	80h ; '€'
		push	eax
		call	_OPENSSL_cleanse
		push	ebp
		call	_DES_set_odd_parity
		mov	ecx, [esp+0C0h+var_4]
		add	esp, 2Ch
		pop	edi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 88h
		retn
_DES_string_to_key endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _OPENSSL_cleanse:near ; CODE XREF: _DES_string_to_2keys+124p
					; _DES_string_to_key+D0p
		extrn _DES_cbc_cksum:near ; CODE XREF: _DES_string_to_2keys+F9p
					; _DES_string_to_2keys+112p ...
		extrn _DES_set_odd_parity:near ; CODE XREF: _DES_string_to_2keys+DAp
					; _DES_string_to_2keys+E0p ...
		extrn _DES_set_key_unchecked:near ; CODE XREF: _DES_string_to_2keys+EBp
					; _DES_string_to_2keys+104p ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _DES_string_to_2keys+145p
					; _DES_string_to_key+EAp
		extrn __chkstk:near	; CODE XREF: _DES_string_to_2keys+5p
					; _DES_string_to_key+5p
		extrn ___security_cookie:near ;	DATA XREF: _DES_string_to_2keys+Ar
					; _DES_string_to_key+Ar


		end
