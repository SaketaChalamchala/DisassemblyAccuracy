;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	05686642D3CD42A7F4F8987669A56513
; Input	CRC32 :	C28C1D7A

; File Name   :	C:\compspace\Diff\openssl\obj\rsa_eay.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_RSA_eay_public_encrypt	proc near	; DATA XREF: .data:00001194o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 0Ch
		call	__chkstk
		push	esi
		mov	esi, [esp+10h+arg_C]
		mov	[esp+10h+var_8], 0FFFFFFFFh
		push	dword ptr [esi+10h]
		call	_BN_num_bits
		add	esp, 4
		cmp	eax, 4000h
		jle	short loc_49
		push	0A4h ; '¤'
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	69h ; 'i'
		push	68h ; 'h'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_49:					; CODE XREF: _RSA_eay_public_encrypt+27j
		push	dword ptr [esi+14h]
		push	dword ptr [esi+10h]
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jg	short loc_7B
		push	0A9h ; '©'

loc_60:					; CODE XREF: _RSA_eay_public_encrypt+A2j
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	65h ; 'e'
		push	68h ; 'h'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_7B:					; CODE XREF: _RSA_eay_public_encrypt+59j
		push	dword ptr [esi+10h]
		call	_BN_num_bits
		add	esp, 4
		cmp	eax, 0C00h
		jle	short loc_A4
		push	dword ptr [esi+14h]
		call	_BN_num_bits
		add	esp, 4
		cmp	eax, 40h ; '@'
		jle	short loc_A4
		push	0B0h ; '°'
		jmp	short loc_60
; ---------------------------------------------------------------------------

loc_A4:					; CODE XREF: _RSA_eay_public_encrypt+8Bj
					; _RSA_eay_public_encrypt+9Bj
		push	edi
		call	_BN_CTX_new
		mov	edi, eax
		mov	[esp+14h+var_4], edi
		test	edi, edi
		jz	loc_299
		push	ebx
		push	ebp
		push	edi
		call	_BN_CTX_start
		push	edi
		call	_BN_CTX_get
		push	edi
		mov	[esp+28h+arg_C], eax
		call	_BN_CTX_get
		push	dword ptr [esi+10h]
		mov	[esp+2Ch+var_C], eax
		call	_BN_num_bits
		add	eax, 7
		cdq
		and	edx, 7
		push	0BBh ; '»'
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		lea	ebp, [edx+eax]
		sar	ebp, 3
		push	ebp
		call	_CRYPTO_malloc
		add	esp, 1Ch
		mov	ebx, eax
		cmp	[esp+1Ch+arg_C], 0
		jz	loc_25C
		cmp	[esp+1Ch+var_C], 0
		jz	loc_25C
		test	ebx, ebx
		jz	loc_25C
		mov	eax, [esp+1Ch+arg_10]
		dec	eax
		cmp	eax, 3		; switch 4 cases
		ja	loc_24E		; jumptable 0000012A default case
		jmp	ds:$LN38[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN14:					; CODE XREF: _RSA_eay_public_encrypt+12Aj
					; DATA XREF: .text$mn:$LN38o
		push	[esp+1Ch+arg_0]	; jumptable 0000012A case 0
		push	[esp+20h+arg_4]
		push	ebp
		push	ebx
		call	_RSA_padding_add_PKCS1_type_2
		jmp	short loc_17A
; ---------------------------------------------------------------------------

$LN15:					; CODE XREF: _RSA_eay_public_encrypt+12Aj
					; DATA XREF: .text$mn:$LN38o
		push	0		; jumptable 0000012A case 3
		push	0
		push	[esp+24h+arg_0]
		push	[esp+28h+arg_4]
		push	ebp
		push	ebx
		call	_RSA_padding_add_PKCS1_OAEP
		add	esp, 18h
		jmp	short loc_17D
; ---------------------------------------------------------------------------

$LN16:					; CODE XREF: _RSA_eay_public_encrypt+12Aj
					; DATA XREF: .text$mn:$LN38o
		push	[esp+1Ch+arg_0]	; jumptable 0000012A case 1
		push	[esp+20h+arg_4]
		push	ebp
		push	ebx
		call	_RSA_padding_add_SSLv23
		jmp	short loc_17A
; ---------------------------------------------------------------------------

$LN17:					; CODE XREF: _RSA_eay_public_encrypt+12Aj
					; DATA XREF: .text$mn:$LN38o
		push	[esp+1Ch+arg_0]	; jumptable 0000012A case 2
		push	[esp+20h+arg_4]
		push	ebp
		push	ebx
		call	_RSA_padding_add_none

loc_17A:				; CODE XREF: _RSA_eay_public_encrypt+140j
					; _RSA_eay_public_encrypt+169j
		add	esp, 10h

loc_17D:				; CODE XREF: _RSA_eay_public_encrypt+158j
		test	eax, eax
		jle	$err$39
		push	[esp+1Ch+arg_C]
		push	ebp
		push	ebx
		call	_BN_bin2bn
		add	esp, 0Ch
		test	eax, eax
		jz	$err$39
		push	dword ptr [esi+10h]
		push	[esp+20h+arg_C]
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		js	short loc_1C2
		push	0DDh ; 'Ý'
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	84h ; '„'
		jmp	loc_268
; ---------------------------------------------------------------------------

loc_1C2:				; CODE XREF: _RSA_eay_public_encrypt+1ACj
		test	byte ptr [esi+3Ch], 2
		jz	short loc_1E2
		push	edi
		push	dword ptr [esi+10h]
		lea	eax, [esi+40h]
		push	9
		push	eax
		call	_BN_MONT_CTX_set_locked
		add	esp, 10h
		test	eax, eax
		jz	$err$39

loc_1E2:				; CODE XREF: _RSA_eay_public_encrypt+1C6j
		push	dword ptr [esi+40h]
		mov	eax, [esi+8]
		push	edi
		push	dword ptr [esi+10h]
		push	dword ptr [esi+14h]
		mov	esi, [esp+2Ch+var_C]
		push	[esp+2Ch+arg_C]
		mov	eax, [eax+18h]
		push	esi
		call	eax
		add	esp, 18h
		test	eax, eax
		jz	short $err$39
		push	esi
		call	_BN_num_bits
		add	eax, 7
		mov	ecx, ebp
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		sub	ecx, eax
		add	ecx, [esp+20h+arg_8]
		push	ecx
		push	esi
		call	_BN_bn2bin
		mov	ecx, ebp
		add	esp, 0Ch
		sub	ecx, eax
		test	ecx, ecx
		jle	short loc_248
		mov	edi, [esp+1Ch+arg_8]
		mov	edx, ecx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		mov	ecx, edx
		and	ecx, 3
		rep stosb
		mov	edi, [esp+1Ch+var_4]

loc_248:				; CODE XREF: _RSA_eay_public_encrypt+22Ej
		mov	[esp+1Ch+var_8], ebp
		jmp	short $err$39
; ---------------------------------------------------------------------------

loc_24E:				; CODE XREF: _RSA_eay_public_encrypt+124j
		push	0D1h ; 'Ñ'      ; jumptable 0000012A default case
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	76h ; 'v'
		jmp	short loc_268
; ---------------------------------------------------------------------------

loc_25C:				; CODE XREF: _RSA_eay_public_encrypt+103j
					; _RSA_eay_public_encrypt+10Ej	...
		push	0BDh ; '½'
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	41h ; 'A'

loc_268:				; CODE XREF: _RSA_eay_public_encrypt+1BDj
					; _RSA_eay_public_encrypt+25Aj
		push	68h ; 'h'
		push	4
		call	_ERR_put_error
		add	esp, 14h

$err$39:				; CODE XREF: _RSA_eay_public_encrypt+17Fj
					; _RSA_eay_public_encrypt+195j	...
		push	edi
		call	_BN_CTX_end
		push	edi
		call	_BN_CTX_free
		add	esp, 8
		test	ebx, ebx
		jz	short loc_297
		push	ebp
		push	ebx
		call	_OPENSSL_cleanse
		push	ebx
		call	_CRYPTO_free
		add	esp, 0Ch

loc_297:				; CODE XREF: _RSA_eay_public_encrypt+285j
		pop	ebp
		pop	ebx

loc_299:				; CODE XREF: _RSA_eay_public_encrypt+B2j
		mov	eax, [esp+14h+var_8]
		pop	edi
		pop	esi
		add	esp, 0Ch
		retn
_RSA_eay_public_encrypt	endp

; ---------------------------------------------------------------------------
		align 4
$LN38		dd offset $LN14		; DATA XREF: _RSA_eay_public_encrypt+12Ar
		dd offset $LN16		; jump table for switch	statement
		dd offset $LN17
		dd offset $LN15
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_RSA_eay_private_encrypt proc near	; DATA XREF: .data:0000119Co

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 28h ; '('
		call	__chkstk
		push	ebx
		mov	[esp+2Ch+var_18], 0
		mov	[esp+2Ch+var_1C], 0
		mov	[esp+2Ch+var_20], 0
		call	_BN_CTX_new
		mov	ebx, eax
		test	ebx, ebx
		jz	loc_61F
		push	ebp
		push	esi
		push	edi
		push	ebx
		call	_BN_CTX_start
		push	ebx
		call	_BN_CTX_get
		push	ebx
		mov	[esp+44h+var_24], eax
		call	_BN_CTX_get
		mov	esi, [esp+44h+arg_C]
		mov	edi, eax
		push	dword ptr [esi+10h]
		call	_BN_num_bits
		add	eax, 7
		cdq
		and	edx, 7
		add	eax, edx
		push	172h
		sar	eax, 3
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	eax
		mov	[esp+54h+var_28], eax
		call	_CRYPTO_malloc
		add	esp, 1Ch
		mov	ebp, eax
		cmp	[esp+38h+var_24], 0
		jz	loc_5D3
		test	edi, edi
		jz	loc_5D3
		test	ebp, ebp
		jz	loc_5D3
		mov	eax, [esp+38h+arg_10]
		sub	eax, 1
		jz	short loc_399
		sub	eax, 2
		jz	short loc_385
		sub	eax, 2
		jz	short loc_371
		push	184h
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	76h ; 'v'
		jmp	loc_5DF
; ---------------------------------------------------------------------------

loc_371:				; CODE XREF: _RSA_eay_private_encrypt+AAj
		push	[esp+38h+arg_0]
		push	[esp+3Ch+arg_4]
		push	[esp+40h+var_28]
		push	ebp
		call	_RSA_padding_add_X931
		jmp	short loc_3AB
; ---------------------------------------------------------------------------

loc_385:				; CODE XREF: _RSA_eay_private_encrypt+A5j
		push	[esp+38h+arg_0]
		push	[esp+3Ch+arg_4]
		push	[esp+40h+var_28]
		push	ebp
		call	_RSA_padding_add_none
		jmp	short loc_3AB
; ---------------------------------------------------------------------------

loc_399:				; CODE XREF: _RSA_eay_private_encrypt+A0j
		push	[esp+38h+arg_0]
		push	[esp+3Ch+arg_4]
		push	[esp+40h+var_28]
		push	ebp
		call	_RSA_padding_add_PKCS1_type_1

loc_3AB:				; CODE XREF: _RSA_eay_private_encrypt+CFj
					; _RSA_eay_private_encrypt+E3j
		add	esp, 10h
		test	eax, eax
		jle	loc_5EB
		push	[esp+38h+var_24]
		push	[esp+3Ch+var_28]
		push	ebp
		call	_BN_bin2bn
		add	esp, 0Ch
		test	eax, eax
		jz	loc_5EB
		push	dword ptr [esi+10h]
		push	[esp+3Ch+var_24]
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		js	short loc_3F6
		push	190h
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	84h ; '„'
		jmp	loc_5DF
; ---------------------------------------------------------------------------

loc_3F6:				; CODE XREF: _RSA_eay_private_encrypt+12Cj
		test	byte ptr [esi+3Ch], 80h
		jnz	short loc_464
		push	ebx
		lea	eax, [esp+3Ch+var_18]
		push	eax
		push	esi
		call	_rsa_get_blinding
		add	esp, 0Ch
		mov	[esp+38h+var_20], eax
		test	eax, eax
		jnz	short loc_424
		push	197h
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	44h ; 'D'
		jmp	loc_5DF
; ---------------------------------------------------------------------------

loc_424:				; CODE XREF: _RSA_eay_private_encrypt+15Dj
		cmp	[esp+38h+var_18], 0
		jnz	short loc_44A
		push	ebx
		call	_BN_CTX_get
		add	esp, 4
		mov	[esp+38h+var_1C], eax
		test	eax, eax
		jnz	short loc_446
		push	19Eh
		jmp	loc_5D8
; ---------------------------------------------------------------------------

loc_446:				; CODE XREF: _RSA_eay_private_encrypt+186j
		mov	eax, [esp+38h+var_20]

loc_44A:				; CODE XREF: _RSA_eay_private_encrypt+175j
		push	ebx
		push	[esp+3Ch+var_1C]
		push	[esp+40h+var_24]
		push	eax
		call	_rsa_blinding_convert
		add	esp, 10h
		test	eax, eax
		jz	loc_5EB

loc_464:				; CODE XREF: _RSA_eay_private_encrypt+146j
		mov	eax, [esi+3Ch]
		test	al, 20h
		jnz	loc_52E
		cmp	dword ptr [esi+1Ch], 0
		jz	short loc_491
		cmp	dword ptr [esi+20h], 0
		jz	short loc_491
		cmp	dword ptr [esi+24h], 0
		jz	short loc_491
		cmp	dword ptr [esi+28h], 0
		jz	short loc_491
		cmp	dword ptr [esi+2Ch], 0
		jnz	loc_52E

loc_491:				; CODE XREF: _RSA_eay_private_encrypt+1BFj
					; _RSA_eay_private_encrypt+1C5j ...
		test	eax, 100h
		jnz	short loc_4E3
		lea	eax, [esp+38h+var_14]
		push	eax
		call	_BN_init
		mov	ecx, [esi+18h]
		lea	edx, [esp+3Ch+var_14]
		add	esp, 4
		mov	[esp+38h+var_18], edx
		mov	eax, [ecx]
		mov	[esp+38h+var_14], eax
		mov	eax, [ecx+4]
		mov	[esp+38h+var_10], eax
		mov	eax, [ecx+8]
		mov	[esp+38h+var_C], eax
		mov	eax, [ecx+0Ch]
		mov	[esp+38h+var_8], eax
		mov	ecx, [ecx+10h]
		mov	eax, [esp+38h+var_4]
		and	ecx, 0FFFFFFFEh
		and	eax, 1
		or	ecx, eax
		or	ecx, 6
		mov	[esp+38h+var_4], ecx
		jmp	short loc_4EA
; ---------------------------------------------------------------------------

loc_4E3:				; CODE XREF: _RSA_eay_private_encrypt+1E2j
		mov	eax, [esi+18h]
		mov	[esp+38h+var_18], eax

loc_4EA:				; CODE XREF: _RSA_eay_private_encrypt+22Dj
		test	byte ptr [esi+3Ch], 2
		jz	short loc_50A
		push	ebx
		push	dword ptr [esi+10h]
		lea	eax, [esi+40h]
		push	9
		push	eax
		call	_BN_MONT_CTX_set_locked
		add	esp, 10h
		test	eax, eax
		jz	loc_5EB

loc_50A:				; CODE XREF: _RSA_eay_private_encrypt+23Aj
		push	dword ptr [esi+40h]
		mov	eax, [esi+8]
		push	ebx
		push	dword ptr [esi+10h]
		push	[esp+44h+var_18]
		mov	eax, [eax+18h]
		push	[esp+48h+var_24]
		push	edi
		call	eax
		add	esp, 18h
		test	eax, eax
		jnz	short loc_548
		jmp	loc_5EB
; ---------------------------------------------------------------------------

loc_52E:				; CODE XREF: _RSA_eay_private_encrypt+1B5j
					; _RSA_eay_private_encrypt+1D7j
		mov	eax, [esi+8]
		push	ebx
		push	esi
		push	[esp+40h+var_24]
		mov	eax, [eax+14h]
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		jz	loc_5EB

loc_548:				; CODE XREF: _RSA_eay_private_encrypt+273j
		mov	eax, [esp+38h+var_20]
		test	eax, eax
		jz	short loc_567
		push	ebx
		push	eax
		push	[esp+40h+var_1C]
		push	edi
		call	_BN_BLINDING_invert_ex
		add	esp, 10h
		test	eax, eax
		jz	loc_5EB

loc_567:				; CODE XREF: _RSA_eay_private_encrypt+29Aj
		cmp	[esp+38h+arg_10], 5
		jnz	short loc_58B
		push	edi
		push	dword ptr [esi+10h]
		mov	esi, [esp+40h+var_24]
		push	esi
		call	_BN_sub
		push	esi
		push	edi
		call	_BN_cmp
		add	esp, 14h
		test	eax, eax
		cmovg	edi, esi

loc_58B:				; CODE XREF: _RSA_eay_private_encrypt+2B8j
		push	edi
		call	_BN_num_bits
		mov	esi, [esp+3Ch+var_28]
		add	eax, 7
		cdq
		mov	ecx, esi
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		sub	ecx, eax
		add	ecx, [esp+3Ch+arg_8]
		push	ecx
		push	edi
		call	_BN_bn2bin
		mov	ecx, esi
		add	esp, 0Ch
		sub	ecx, eax
		test	ecx, ecx
		jle	short loc_5CF
		mov	edi, [esp+38h+arg_8]
		mov	edx, ecx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		mov	ecx, edx
		and	ecx, 3
		rep stosb

loc_5CF:				; CODE XREF: _RSA_eay_private_encrypt+305j
		mov	edi, esi
		jmp	short $err$63
; ---------------------------------------------------------------------------

loc_5D3:				; CODE XREF: _RSA_eay_private_encrypt+83j
					; _RSA_eay_private_encrypt+8Bj	...
		push	174h

loc_5D8:				; CODE XREF: _RSA_eay_private_encrypt+18Dj
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	41h ; 'A'

loc_5DF:				; CODE XREF: _RSA_eay_private_encrypt+B8j
					; _RSA_eay_private_encrypt+13Dj ...
		push	66h ; 'f'
		push	4
		call	_ERR_put_error
		add	esp, 14h

loc_5EB:				; CODE XREF: _RSA_eay_private_encrypt+FCj
					; _RSA_eay_private_encrypt+115j ...
		mov	esi, [esp+38h+var_28]
		or	edi, 0FFFFFFFFh

$err$63:				; CODE XREF: _RSA_eay_private_encrypt+31Dj
		push	ebx
		call	_BN_CTX_end
		push	ebx
		call	_BN_CTX_free
		add	esp, 8
		test	ebp, ebp
		jz	short loc_615
		push	esi
		push	ebp
		call	_OPENSSL_cleanse
		push	ebp
		call	_CRYPTO_free
		add	esp, 0Ch

loc_615:				; CODE XREF: _RSA_eay_private_encrypt+34Fj
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_61F:				; CODE XREF: _RSA_eay_private_encrypt+2Cj
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 28h
		retn
_RSA_eay_private_encrypt endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 628h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_RSA_eay_public_decrypt	proc near	; DATA XREF: .data:00001198o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 8
		call	__chkstk
		push	esi
		mov	esi, [esp+0Ch+arg_C]
		push	edi
		or	edi, 0FFFFFFFFh
		push	dword ptr [esi+10h]
		call	_BN_num_bits
		add	esp, 4
		cmp	eax, 4000h
		jle	short loc_66D
		push	273h
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	69h ; 'i'
		push	67h ; 'g'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		or	eax, edi
		pop	edi
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_66D:				; CODE XREF: _RSA_eay_public_decrypt+23j
		push	dword ptr [esi+14h]
		push	dword ptr [esi+10h]
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jg	short loc_6A0
		push	278h

loc_684:				; CODE XREF: _RSA_eay_public_decrypt+9Fj
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	65h ; 'e'
		push	67h ; 'g'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_6A0:				; CODE XREF: _RSA_eay_public_decrypt+55j
		push	dword ptr [esi+10h]
		call	_BN_num_bits
		add	esp, 4
		cmp	eax, 0C00h
		jle	short loc_6C9
		push	dword ptr [esi+14h]
		call	_BN_num_bits
		add	esp, 4
		cmp	eax, 40h ; '@'
		jle	short loc_6C9
		push	27Fh
		jmp	short loc_684
; ---------------------------------------------------------------------------

loc_6C9:				; CODE XREF: _RSA_eay_public_decrypt+88j
					; _RSA_eay_public_decrypt+98j
		push	ebx
		call	_BN_CTX_new
		mov	ebx, eax
		mov	[esp+14h+var_4], ebx
		test	ebx, ebx
		jz	loc_880
		push	ebp
		push	ebx
		call	_BN_CTX_start
		push	ebx
		call	_BN_CTX_get
		push	ebx
		mov	[esp+24h+var_8], eax
		call	_BN_CTX_get
		push	dword ptr [esi+10h]
		mov	[esp+28h+arg_C], eax
		call	_BN_num_bits
		add	eax, 7
		cdq
		and	edx, 7
		push	28Ah
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		lea	ebx, [edx+eax]
		sar	ebx, 3
		push	ebx
		call	_CRYPTO_malloc
		mov	ecx, [esp+34h+var_8]
		add	esp, 1Ch
		mov	ebp, eax
		test	ecx, ecx
		jz	loc_8D7
		cmp	[esp+18h+arg_C], 0
		jz	loc_8D7
		test	ebp, ebp
		jz	loc_8D7
		mov	eax, [esp+18h+arg_0]
		cmp	eax, ebx
		jle	short loc_766
		push	295h
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	6Ch ; 'l'
		push	67h ; 'g'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$36
; ---------------------------------------------------------------------------

loc_766:				; CODE XREF: _RSA_eay_public_decrypt+11Fj
		push	ecx
		push	eax
		push	[esp+20h+arg_4]
		call	_BN_bin2bn
		add	esp, 0Ch
		test	eax, eax
		jz	$err$36
		push	dword ptr [esi+10h]
		push	[esp+1Ch+var_8]
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		js	short loc_7AF
		push	29Eh
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	84h ; '„'
		push	67h ; 'g'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$36
; ---------------------------------------------------------------------------

loc_7AF:				; CODE XREF: _RSA_eay_public_decrypt+165j
		test	byte ptr [esi+3Ch], 2
		mov	edi, [esp+18h+var_4]
		jz	short loc_7D3
		push	edi
		push	dword ptr [esi+10h]
		lea	eax, [esi+40h]
		push	9
		push	eax
		call	_BN_MONT_CTX_set_locked
		add	esp, 10h
		test	eax, eax
		jz	loc_855

loc_7D3:				; CODE XREF: _RSA_eay_public_decrypt+18Fj
		push	dword ptr [esi+40h]
		mov	eax, [esi+8]
		push	edi
		push	dword ptr [esi+10h]
		push	dword ptr [esi+14h]
		mov	eax, [eax+18h]
		push	[esp+28h+var_8]
		push	[esp+2Ch+arg_C]
		call	eax
		add	esp, 18h
		test	eax, eax
		jz	short loc_855
		mov	edi, [esp+18h+arg_10]
		cmp	edi, 5
		jnz	short loc_821
		mov	eax, [esp+18h+arg_C]
		mov	eax, [eax]
		mov	eax, [eax]
		and	eax, 0Fh
		cmp	al, 0Ch
		jz	short loc_821
		mov	eax, [esp+18h+arg_C]
		push	eax
		push	dword ptr [esi+10h]
		push	eax
		call	_BN_sub
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_855

loc_821:				; CODE XREF: _RSA_eay_public_decrypt+1D3j
					; _RSA_eay_public_decrypt+1E2j
		push	ebp
		push	[esp+1Ch+arg_C]
		call	_BN_bn2bin
		add	esp, 8
		sub	edi, 1
		jz	short loc_8A7
		sub	edi, 2
		jz	short loc_898
		sub	edi, 2
		jz	short loc_889
		push	2BDh
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	76h ; 'v'
		push	67h ; 'g'
		push	4
		call	_ERR_put_error
		add	esp, 14h

loc_855:				; CODE XREF: _RSA_eay_public_decrypt+1A5j
					; _RSA_eay_public_decrypt+1CAj	...
		or	edi, 0FFFFFFFFh

$err$36:				; CODE XREF: _RSA_eay_public_decrypt+139j
					; _RSA_eay_public_decrypt+14Ej	...
		mov	esi, [esp+18h+var_4]
		push	esi
		call	_BN_CTX_end
		push	esi
		call	_BN_CTX_free
		add	esp, 8
		test	ebp, ebp
		jz	short loc_87F
		push	ebx
		push	ebp
		call	_OPENSSL_cleanse
		push	ebp
		call	_CRYPTO_free
		add	esp, 0Ch

loc_87F:				; CODE XREF: _RSA_eay_public_decrypt+245j
		pop	ebp

loc_880:				; CODE XREF: _RSA_eay_public_decrypt+AFj
		pop	ebx
		mov	eax, edi
		pop	edi
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_889:				; CODE XREF: _RSA_eay_public_decrypt+213j
		push	ebx
		push	eax
		push	ebp
		push	ebx
		push	[esp+28h+arg_8]
		call	_RSA_padding_check_X931
		jmp	short loc_8B4
; ---------------------------------------------------------------------------

loc_898:				; CODE XREF: _RSA_eay_public_decrypt+20Ej
		push	ebx
		push	eax
		push	ebp
		push	ebx
		push	[esp+28h+arg_8]
		call	_RSA_padding_check_none
		jmp	short loc_8B4
; ---------------------------------------------------------------------------

loc_8A7:				; CODE XREF: _RSA_eay_public_decrypt+209j
		push	ebx
		push	eax
		push	ebp
		push	ebx
		push	[esp+28h+arg_8]
		call	_RSA_padding_check_PKCS1_type_1

loc_8B4:				; CODE XREF: _RSA_eay_public_decrypt+26Ej
					; _RSA_eay_public_decrypt+27Dj
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jns	short $err$36
		push	2C1h
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	72h ; 'r'
		push	67h ; 'g'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	short $err$36
; ---------------------------------------------------------------------------

loc_8D7:				; CODE XREF: _RSA_eay_public_decrypt+100j
					; _RSA_eay_public_decrypt+10Bj	...
		push	28Ch
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	41h ; 'A'
		push	67h ; 'g'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	$err$36
_RSA_eay_public_decrypt	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_RSA_eay_private_decrypt proc near	; DATA XREF: .data:000011A0o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 2Ch ; ','
		call	__chkstk
		push	ebx
		push	ebp
		or	ebp, 0FFFFFFFFh
		mov	[esp+34h+var_18], 0
		mov	[esp+34h+var_1C], 0
		mov	[esp+34h+var_20], 0
		call	_BN_CTX_new
		mov	ebx, eax
		test	ebx, ebx
		jz	loc_C43
		push	esi
		push	edi
		push	ebx
		call	_BN_CTX_start
		push	ebx
		call	_BN_CTX_get
		push	ebx
		mov	[esp+48h+var_28], eax
		call	_BN_CTX_get
		mov	esi, [esp+48h+arg_C]
		mov	[esp+48h+var_24], eax
		push	dword ptr [esi+10h]
		call	_BN_num_bits
		add	eax, 7
		cdq
		and	edx, 7
		push	1FAh
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		lea	edi, [edx+eax]
		sar	edi, 3
		push	edi
		call	_CRYPTO_malloc
		mov	ecx, [esp+58h+var_28]
		add	esp, 1Ch
		mov	[esp+3Ch+var_2C], eax
		test	ecx, ecx
		jz	loc_BFA
		cmp	[esp+3Ch+var_24], 0
		jz	loc_BFA
		test	eax, eax
		jz	loc_BFA
		mov	eax, [esp+3Ch+arg_0]
		cmp	eax, edi
		jle	short loc_9AE
		push	206h
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	6Ch ; 'l'
		jmp	loc_C06
; ---------------------------------------------------------------------------

loc_9AE:				; CODE XREF: _RSA_eay_private_decrypt+A7j
		push	ecx
		push	eax
		push	[esp+44h+arg_4]
		call	_BN_bin2bn
		add	esp, 0Ch
		test	eax, eax
		jz	loc_C12
		push	dword ptr [esi+10h]
		push	[esp+40h+var_28]
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		js	short loc_9EB
		push	210h
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	84h ; '„'
		jmp	loc_C06
; ---------------------------------------------------------------------------

loc_9EB:				; CODE XREF: _RSA_eay_private_decrypt+E1j
		test	byte ptr [esi+3Ch], 80h
		jnz	short loc_A59
		push	ebx
		lea	eax, [esp+40h+var_18]
		push	eax
		push	esi
		call	_rsa_get_blinding
		add	esp, 0Ch
		mov	[esp+3Ch+var_20], eax
		test	eax, eax
		jnz	short loc_A19
		push	217h
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	44h ; 'D'
		jmp	loc_C06
; ---------------------------------------------------------------------------

loc_A19:				; CODE XREF: _RSA_eay_private_decrypt+112j
		cmp	[esp+3Ch+var_18], 0
		jnz	short loc_A3F
		push	ebx
		call	_BN_CTX_get
		add	esp, 4
		mov	[esp+3Ch+var_1C], eax
		test	eax, eax
		jnz	short loc_A3B
		push	21Eh
		jmp	loc_BFF
; ---------------------------------------------------------------------------

loc_A3B:				; CODE XREF: _RSA_eay_private_decrypt+13Bj
		mov	eax, [esp+3Ch+var_20]

loc_A3F:				; CODE XREF: _RSA_eay_private_decrypt+12Aj
		push	ebx
		push	[esp+40h+var_1C]
		push	[esp+44h+var_28]
		push	eax
		call	_rsa_blinding_convert
		add	esp, 10h
		test	eax, eax
		jz	loc_C12

loc_A59:				; CODE XREF: _RSA_eay_private_decrypt+FBj
		mov	edx, [esi+3Ch]
		test	dl, 20h
		jnz	loc_B1B
		cmp	dword ptr [esi+1Ch], 0
		jz	short loc_A87
		cmp	dword ptr [esi+20h], 0
		jz	short loc_A87
		cmp	dword ptr [esi+24h], 0
		jz	short loc_A87
		cmp	dword ptr [esi+28h], 0
		jz	short loc_A87
		cmp	dword ptr [esi+2Ch], 0
		jnz	loc_B1B

loc_A87:				; CODE XREF: _RSA_eay_private_decrypt+175j
					; _RSA_eay_private_decrypt+17Bj ...
		test	edx, 100h
		jnz	short loc_ACD
		mov	ecx, [esi+18h]
		lea	eax, [esp+3Ch+var_14]
		mov	[esp+3Ch+var_18], eax
		mov	eax, [ecx]
		mov	[esp+3Ch+var_14], eax
		mov	eax, [ecx+4]
		mov	[esp+3Ch+var_10], eax
		mov	eax, [ecx+8]
		mov	[esp+3Ch+var_C], eax
		mov	eax, [ecx+0Ch]
		mov	[esp+3Ch+var_8], eax
		mov	ecx, [ecx+10h]
		mov	eax, [esp+3Ch+var_4]
		and	ecx, 0FFFFFFFEh
		and	eax, 1
		or	ecx, eax
		or	ecx, 6
		mov	[esp+3Ch+var_4], ecx
		jmp	short loc_AD4
; ---------------------------------------------------------------------------

loc_ACD:				; CODE XREF: _RSA_eay_private_decrypt+199j
		mov	eax, [esi+18h]
		mov	[esp+3Ch+var_18], eax

loc_AD4:				; CODE XREF: _RSA_eay_private_decrypt+1D7j
		test	dl, 2
		jz	short loc_AF3
		push	ebx
		push	dword ptr [esi+10h]
		lea	eax, [esi+40h]
		push	9
		push	eax
		call	_BN_MONT_CTX_set_locked
		add	esp, 10h
		test	eax, eax
		jz	loc_C12

loc_AF3:				; CODE XREF: _RSA_eay_private_decrypt+1E3j
		push	dword ptr [esi+40h]
		mov	eax, [esi+8]
		push	ebx
		push	dword ptr [esi+10h]
		mov	esi, [esp+48h+var_24]
		push	[esp+48h+var_18]
		mov	eax, [eax+18h]
		push	[esp+4Ch+var_28]
		push	esi
		call	eax
		add	esp, 18h
		test	eax, eax
		jnz	short loc_B39
		jmp	loc_C12
; ---------------------------------------------------------------------------

loc_B1B:				; CODE XREF: _RSA_eay_private_decrypt+16Bj
					; _RSA_eay_private_decrypt+18Dj
		mov	eax, [esi+8]
		push	ebx
		push	esi
		push	[esp+44h+var_28]
		mov	esi, [esp+48h+var_24]
		mov	eax, [eax+14h]
		push	esi
		call	eax
		add	esp, 10h
		test	eax, eax
		jz	loc_C12

loc_B39:				; CODE XREF: _RSA_eay_private_decrypt+220j
		mov	eax, [esp+3Ch+var_20]
		test	eax, eax
		jz	short loc_B58
		push	ebx
		push	eax
		push	[esp+44h+var_1C]
		push	esi
		call	_BN_BLINDING_invert_ex
		add	esp, 10h
		test	eax, eax
		jz	loc_C12

loc_B58:				; CODE XREF: _RSA_eay_private_decrypt+24Bj
		mov	esi, [esp+3Ch+var_2C]
		push	esi
		push	[esp+40h+var_24]
		call	_BN_bn2bin
		mov	ecx, eax
		add	esp, 8
		mov	eax, [esp+3Ch+arg_10]
		dec	eax
		cmp	eax, 3		; switch 4 cases
		ja	short loc_BE0	; jumptable 00000B75 default case
		jmp	ds:$LN53[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN26:					; CODE XREF: _RSA_eay_private_decrypt+281j
					; DATA XREF: .text$mn:$LN53o
		push	edi		; jumptable 00000B75 case 0
		push	ecx
		push	esi
		push	edi
		push	[esp+4Ch+arg_8]
		call	_RSA_padding_check_PKCS1_type_2
		jmp	short loc_BBD
; ---------------------------------------------------------------------------

$LN27:					; CODE XREF: _RSA_eay_private_decrypt+281j
					; DATA XREF: .text$mn:$LN53o
		push	0		; jumptable 00000B75 case 3
		push	0
		push	edi
		push	ecx
		push	esi
		push	edi
		push	[esp+54h+arg_8]
		call	_RSA_padding_check_PKCS1_OAEP
		add	esp, 1Ch
		jmp	short loc_BC0
; ---------------------------------------------------------------------------

$LN28:					; CODE XREF: _RSA_eay_private_decrypt+281j
					; DATA XREF: .text$mn:$LN53o
		push	edi		; jumptable 00000B75 case 1
		push	ecx
		push	esi
		push	edi
		push	[esp+4Ch+arg_8]
		call	_RSA_padding_check_SSLv23
		jmp	short loc_BBD
; ---------------------------------------------------------------------------

$LN29:					; CODE XREF: _RSA_eay_private_decrypt+281j
					; DATA XREF: .text$mn:$LN53o
		push	edi		; jumptable 00000B75 case 2
		push	ecx
		push	esi
		push	edi
		push	[esp+4Ch+arg_8]
		call	_RSA_padding_check_none

loc_BBD:				; CODE XREF: _RSA_eay_private_decrypt+295j
					; _RSA_eay_private_decrypt+2BAj
		add	esp, 14h

loc_BC0:				; CODE XREF: _RSA_eay_private_decrypt+2ABj
		mov	ebp, eax
		test	ebp, ebp
		jns	short $err$54
		push	25Ah
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	72h ; 'r'
		push	65h ; 'e'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	short $err$54
; ---------------------------------------------------------------------------

loc_BE0:				; CODE XREF: _RSA_eay_private_decrypt+27Fj
		push	256h		; jumptable 00000B75 default case
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	76h ; 'v'
		push	65h ; 'e'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		jmp	short $err$54
; ---------------------------------------------------------------------------

loc_BFA:				; CODE XREF: _RSA_eay_private_decrypt+88j
					; _RSA_eay_private_decrypt+93j	...
		push	1FCh

loc_BFF:				; CODE XREF: _RSA_eay_private_decrypt+142j
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	41h ; 'A'

loc_C06:				; CODE XREF: _RSA_eay_private_decrypt+B5j
					; _RSA_eay_private_decrypt+F2j	...
		push	65h ; 'e'
		push	4
		call	_ERR_put_error
		add	esp, 14h

loc_C12:				; CODE XREF: _RSA_eay_private_decrypt+CAj
					; _RSA_eay_private_decrypt+15Fj ...
		mov	esi, [esp+3Ch+var_2C]

$err$54:				; CODE XREF: _RSA_eay_private_decrypt+2D0j
					; _RSA_eay_private_decrypt+2EAj ...
		push	ebx
		call	_BN_CTX_end
		push	ebx
		call	_BN_CTX_free
		add	esp, 8
		test	esi, esi
		jz	short loc_C39
		push	edi
		push	esi
		call	_OPENSSL_cleanse
		push	esi
		call	_CRYPTO_free
		add	esp, 0Ch

loc_C39:				; CODE XREF: _RSA_eay_private_decrypt+333j
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_C43:				; CODE XREF: _RSA_eay_private_decrypt+30j
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 2Ch
		retn
_RSA_eay_private_decrypt endp

; ---------------------------------------------------------------------------
		align 4
$LN53		dd offset $LN26		; DATA XREF: _RSA_eay_private_decrypt+281r
		dd offset $LN28		; jump table for switch	statement
		dd offset $LN29
		dd offset $LN27
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C5Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_RSA_eay_mod_exp proc near		; DATA XREF: .data:000011A4o

var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 88h ; 'ˆ'
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+98h+arg_C]
		push	edi
		mov	[esp+9Ch+var_7C], 0
		call	_BN_CTX_start
		push	edi
		call	_BN_CTX_get
		push	edi
		mov	ebp, eax
		call	_BN_CTX_get
		push	edi
		mov	[esp+0A8h+var_84], eax
		call	_BN_CTX_get
		mov	esi, [esp+0A8h+arg_8]
		add	esp, 10h
		mov	[esp+98h+var_88], eax
		test	dword ptr [esi+3Ch], 100h
		jnz	loc_D3F
		lea	eax, [esp+98h+var_50]
		push	eax
		call	_BN_init
		mov	ecx, [esi+1Ch]
		lea	ebx, [esp+9Ch+var_50]
		mov	eax, [ecx]
		mov	[esp+9Ch+var_50], eax
		mov	eax, [ecx+4]
		mov	[esp+9Ch+var_4C], eax
		mov	eax, [ecx+8]
		mov	[esp+9Ch+var_48], eax
		mov	eax, [ecx+0Ch]
		mov	[esp+9Ch+var_44], eax
		mov	ecx, [ecx+10h]
		mov	eax, [esp+9Ch+var_40]
		and	ecx, 0FFFFFFFEh
		and	eax, 1
		or	ecx, eax
		lea	eax, [esp+9Ch+var_78]
		or	ecx, 6
		push	eax
		mov	[esp+0A0h+var_40], ecx
		call	_BN_init
		mov	ecx, [esi+20h]
		lea	edx, [esp+0A0h+var_78]
		add	esp, 8
		mov	[esp+98h+var_80], edx
		mov	eax, [ecx]
		mov	[esp+98h+var_78], eax
		mov	eax, [ecx+4]
		mov	[esp+98h+var_74], eax
		mov	eax, [ecx+8]
		mov	[esp+98h+var_70], eax
		mov	eax, [ecx+0Ch]
		mov	[esp+98h+var_6C], eax
		mov	ecx, [ecx+10h]
		mov	eax, [esp+98h+var_68]
		and	ecx, 0FFFFFFFEh
		and	eax, 1
		or	ecx, eax
		or	ecx, 6
		mov	[esp+98h+var_68], ecx
		jmp	short loc_D49
; ---------------------------------------------------------------------------

loc_D3F:				; CODE XREF: _RSA_eay_mod_exp+50j
		mov	eax, [esi+20h]
		mov	ebx, [esi+1Ch]
		mov	[esp+98h+var_80], eax

loc_D49:				; CODE XREF: _RSA_eay_mod_exp+E1j
		test	byte ptr [esi+3Ch], 4
		jz	short loc_D82
		push	edi
		push	ebx
		lea	eax, [esi+44h]
		push	9
		push	eax
		call	_BN_MONT_CTX_set_locked
		add	esp, 10h
		test	eax, eax
		jz	$err$50
		push	edi
		push	[esp+9Ch+var_80]
		lea	eax, [esi+48h]
		push	9
		push	eax
		call	_BN_MONT_CTX_set_locked
		add	esp, 10h
		test	eax, eax
		jz	$err$50

loc_D82:				; CODE XREF: _RSA_eay_mod_exp+F1j
		test	byte ptr [esi+3Ch], 2
		jz	short loc_DA2
		push	edi
		push	dword ptr [esi+10h]
		lea	eax, [esi+40h]
		push	9
		push	eax
		call	_BN_MONT_CTX_set_locked
		add	esp, 10h
		test	eax, eax
		jz	$err$50

loc_DA2:				; CODE XREF: _RSA_eay_mod_exp+12Aj
		test	dword ptr [esi+3Ch], 100h
		mov	ebx, [esp+98h+arg_4]
		push	edi
		push	dword ptr [esi+20h]
		jnz	short loc_DEE
		mov	eax, [ebx]
		mov	ecx, [ebx+10h]
		mov	[esp+0A0h+var_64], eax
		and	ecx, 0FFFFFFFEh
		mov	eax, [ebx+4]
		mov	[esp+0A0h+var_60], eax
		mov	eax, [ebx+8]
		mov	[esp+0A0h+var_5C], eax
		mov	eax, [ebx+0Ch]
		mov	[esp+0A0h+var_58], eax
		mov	eax, [esp+0A0h+var_54]
		and	eax, 1
		or	ecx, eax
		lea	eax, [esp+0A0h+var_64]
		or	ecx, 6
		mov	[esp+0A0h+var_54], ecx
		push	eax
		jmp	short loc_DEF
; ---------------------------------------------------------------------------

loc_DEE:				; CODE XREF: _RSA_eay_mod_exp+158j
		push	ebx

loc_DEF:				; CODE XREF: _RSA_eay_mod_exp+190j
		push	ebp
		push	0
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jz	$err$50
		test	dword ptr [esi+3Ch], 100h
		jnz	short loc_E45
		mov	ecx, [esi+28h]
		lea	edx, [esp+98h+var_3C]
		mov	eax, [ecx]
		mov	[esp+98h+var_3C], eax
		mov	eax, [ecx+4]
		mov	[esp+98h+var_38], eax
		mov	eax, [ecx+8]
		mov	[esp+98h+var_34], eax
		mov	eax, [ecx+0Ch]
		mov	[esp+98h+var_30], eax
		mov	ecx, [ecx+10h]
		mov	eax, [esp+98h+var_2C]
		and	ecx, 0FFFFFFFEh
		and	eax, 1
		or	ecx, eax
		or	ecx, 6
		mov	[esp+98h+var_2C], ecx
		jmp	short loc_E48
; ---------------------------------------------------------------------------

loc_E45:				; CODE XREF: _RSA_eay_mod_exp+1ADj
		mov	edx, [esi+28h]

loc_E48:				; CODE XREF: _RSA_eay_mod_exp+1E7j
		push	dword ptr [esi+48h]
		mov	eax, [esi+8]
		push	edi
		push	dword ptr [esi+20h]
		mov	eax, [eax+18h]
		push	edx
		push	ebp
		push	[esp+0ACh+var_84]
		call	eax
		add	esp, 18h
		test	eax, eax
		jz	$err$50
		test	dword ptr [esi+3Ch], 100h
		push	edi
		push	dword ptr [esi+1Ch]
		jnz	short loc_EAD
		mov	eax, [ebx]
		mov	ecx, [ebx+10h]
		mov	[esp+0A0h+var_64], eax
		and	ecx, 0FFFFFFFEh
		mov	eax, [ebx+4]
		mov	[esp+0A0h+var_60], eax
		mov	eax, [ebx+8]
		mov	[esp+0A0h+var_5C], eax
		mov	eax, [ebx+0Ch]
		mov	[esp+0A0h+var_58], eax
		mov	eax, [esp+0A0h+var_54]
		and	eax, 1
		or	ecx, eax
		lea	eax, [esp+0A0h+var_64]
		or	ecx, 6
		mov	[esp+0A0h+var_54], ecx
		push	eax
		jmp	short loc_EAE
; ---------------------------------------------------------------------------

loc_EAD:				; CODE XREF: _RSA_eay_mod_exp+217j
		push	ebx

loc_EAE:				; CODE XREF: _RSA_eay_mod_exp+24Fj
		push	ebp
		push	0
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jz	$err$50
		test	dword ptr [esi+3Ch], 100h
		jnz	short loc_F0A
		mov	ecx, [esi+24h]
		lea	edx, [esp+98h+var_28]
		mov	eax, [ecx]
		mov	[esp+98h+var_28], eax
		mov	eax, [ecx+4]
		mov	[esp+98h+var_24], eax
		mov	eax, [ecx+8]
		mov	[esp+98h+var_20], eax
		mov	eax, [ecx+0Ch]
		mov	[esp+98h+var_1C], eax
		mov	ecx, [ecx+10h]
		mov	eax, [esp+98h+var_18]
		and	ecx, 0FFFFFFFEh
		and	eax, 1
		or	ecx, eax
		or	ecx, 6
		mov	[esp+98h+var_18], ecx
		jmp	short loc_F0D
; ---------------------------------------------------------------------------

loc_F0A:				; CODE XREF: _RSA_eay_mod_exp+26Cj
		mov	edx, [esi+24h]

loc_F0D:				; CODE XREF: _RSA_eay_mod_exp+2ACj
		push	dword ptr [esi+44h]
		mov	eax, [esi+8]
		mov	ebx, [esp+9Ch+arg_0]
		push	edi
		push	dword ptr [esi+1Ch]
		mov	eax, [eax+18h]
		push	edx
		push	ebp
		push	ebx
		call	eax
		add	esp, 18h
		test	eax, eax
		jz	$err$50
		push	[esp+98h+var_84]
		push	ebx
		push	ebx
		call	_BN_sub
		add	esp, 0Ch
		test	eax, eax
		jz	$err$50
		cmp	dword ptr [ebx+0Ch], 0
		jz	short loc_F62
		push	dword ptr [esi+1Ch]
		push	ebx
		push	ebx
		call	_BN_add
		add	esp, 0Ch
		test	eax, eax
		jz	$err$50

loc_F62:				; CODE XREF: _RSA_eay_mod_exp+2EFj
		push	edi
		push	dword ptr [esi+2Ch]
		push	ebx
		push	ebp
		call	_BN_mul
		add	esp, 10h
		test	eax, eax
		jz	$err$50
		test	dword ptr [esi+3Ch], 100h
		jnz	short loc_FCE
		mov	eax, [ebp+0]
		lea	edx, [esp+98h+var_14]
		mov	[esp+98h+var_14], eax
		mov	eax, [ebp+4]
		mov	[esp+98h+var_10], eax
		mov	eax, [ebp+8]
		mov	[esp+98h+var_C], eax
		mov	eax, [ebp+0Ch]
		mov	[esp+98h+var_8], eax
		mov	ecx, [ebp+10h]
		mov	eax, [esp+98h+var_4]
		and	ecx, 0FFFFFFFEh
		and	eax, 1
		or	ecx, eax
		or	ecx, 6
		mov	[esp+98h+var_4], ecx
		jmp	short loc_FD0
; ---------------------------------------------------------------------------

loc_FCE:				; CODE XREF: _RSA_eay_mod_exp+323j
		mov	edx, ebp

loc_FD0:				; CODE XREF: _RSA_eay_mod_exp+370j
		push	edi
		push	dword ptr [esi+1Ch]
		push	edx
		push	ebx
		push	0
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jz	$err$50
		cmp	dword ptr [ebx+0Ch], 0
		jz	short loc_1003
		push	dword ptr [esi+1Ch]
		push	ebx
		push	ebx
		call	_BN_add
		add	esp, 0Ch
		test	eax, eax
		jz	$err$50

loc_1003:				; CODE XREF: _RSA_eay_mod_exp+390j
		push	edi
		push	dword ptr [esi+20h]
		push	ebx
		push	ebp
		call	_BN_mul
		add	esp, 10h
		test	eax, eax
		jz	$err$50
		push	[esp+98h+var_84]
		push	ebp
		push	ebx
		call	_BN_add
		add	esp, 0Ch
		test	eax, eax
		jz	$err$50
		mov	ecx, [esi+14h]
		test	ecx, ecx
		jz	loc_1121
		mov	edx, [esi+10h]
		test	edx, edx
		jz	loc_1121
		push	dword ptr [esi+40h]
		mov	eax, [esi+8]
		push	edi
		push	edx
		push	ecx
		mov	eax, [eax+18h]
		push	ebx
		push	[esp+0ACh+var_88]
		call	eax
		add	esp, 18h
		test	eax, eax
		jz	$err$50
		mov	ebp, [esp+98h+arg_4]
		mov	eax, [esp+98h+var_88]
		push	ebp
		push	eax
		push	eax
		call	_BN_sub
		add	esp, 0Ch
		test	eax, eax
		jz	$err$50
		mov	eax, [esp+98h+var_88]
		push	edi
		push	dword ptr [esi+10h]
		push	eax
		push	eax
		push	0
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jz	$err$50
		mov	eax, [esp+98h+var_88]
		cmp	dword ptr [eax+0Ch], 0
		jz	short loc_10BC
		push	dword ptr [esi+10h]
		push	eax
		push	eax
		call	_BN_add
		add	esp, 0Ch
		test	eax, eax
		jz	short $err$50
		mov	eax, [esp+98h+var_88]

loc_10BC:				; CODE XREF: _RSA_eay_mod_exp+449j
		cmp	dword ptr [eax+4], 0
		jz	short loc_1121
		test	dword ptr [esi+3Ch], 100h
		jnz	short loc_1105
		mov	ecx, [esi+18h]
		lea	edx, [esp+98h+var_78]
		mov	eax, [ecx]
		mov	[esp+98h+var_78], eax
		mov	eax, [ecx+4]
		mov	[esp+98h+var_74], eax
		mov	eax, [ecx+8]
		mov	[esp+98h+var_70], eax
		mov	eax, [ecx+0Ch]
		mov	[esp+98h+var_6C], eax
		mov	ecx, [ecx+10h]
		mov	eax, [esp+98h+var_68]
		and	ecx, 0FFFFFFFEh
		and	eax, 1
		or	ecx, eax
		or	ecx, 6
		mov	[esp+98h+var_68], ecx
		jmp	short loc_1108
; ---------------------------------------------------------------------------

loc_1105:				; CODE XREF: _RSA_eay_mod_exp+46Dj
		mov	edx, [esi+18h]

loc_1108:				; CODE XREF: _RSA_eay_mod_exp+4A7j
		push	dword ptr [esi+40h]
		mov	eax, [esi+8]
		push	edi
		push	dword ptr [esi+10h]
		mov	eax, [eax+18h]
		push	edx
		push	ebp
		push	ebx
		call	eax
		add	esp, 18h
		test	eax, eax
		jz	short $err$50

loc_1121:				; CODE XREF: _RSA_eay_mod_exp+3D8j
					; _RSA_eay_mod_exp+3E3j ...
		mov	[esp+98h+var_7C], 1

$err$50:				; CODE XREF: _RSA_eay_mod_exp+105j
					; _RSA_eay_mod_exp+120j ...
		push	edi
		call	_BN_CTX_end
		mov	eax, [esp+9Ch+var_7C]
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 88h
		retn
_RSA_eay_mod_exp endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1144h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_RSA_eay_init	proc near		; DATA XREF: .data:000011ACo

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		or	dword ptr [eax+3Ch], 6
		mov	eax, 1
		retn
_RSA_eay_init	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1154h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_RSA_eay_finish	proc near		; DATA XREF: .data:000011B0o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+40h]
		test	eax, eax
		jz	short loc_1169
		push	eax
		call	_BN_MONT_CTX_free
		add	esp, 4

loc_1169:				; CODE XREF: _RSA_eay_finish+Aj
		mov	eax, [esi+44h]
		test	eax, eax
		jz	short loc_1179
		push	eax
		call	_BN_MONT_CTX_free
		add	esp, 4

loc_1179:				; CODE XREF: _RSA_eay_finish+1Aj
		mov	eax, [esi+48h]
		pop	esi
		test	eax, eax
		jz	short loc_118A
		push	eax
		call	_BN_MONT_CTX_free
		add	esp, 4

loc_118A:				; CODE XREF: _RSA_eay_finish+2Bj
		mov	eax, 1
		retn
_RSA_eay_finish	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 1190h
_rsa_pkcs1_eay_meth dd offset ??_C@_0BI@NFPKAKEA@Eric?5Young?8s?5PKCS?$CD1?5RSA?$AA@
					; DATA XREF: _RSA_PKCS1_SSLeayo
					; "Eric	Young's PKCS#1 RSA"
		dd offset _RSA_eay_public_encrypt
		dd offset _RSA_eay_public_decrypt
		dd offset _RSA_eay_private_encrypt
		dd offset _RSA_eay_private_decrypt
		dd offset _RSA_eay_mod_exp
		dd offset _BN_mod_exp_mont
		dd offset _RSA_eay_init
		dd offset _RSA_eay_finish
		dd 5 dup(0)
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11C8h
; COMDAT (pick any)
		public ??_C@_0BI@NFPKAKEA@Eric?5Young?8s?5PKCS?$CD1?5RSA?$AA@
; `string'
??_C@_0BI@NFPKAKEA@Eric?5Young?8s?5PKCS?$CD1?5RSA?$AA@ db 'Eric Young',27h,'s PKCS#1 RSA',0
					; DATA XREF: .data:_rsa_pkcs1_eay_metho
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 11E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_PKCS1_SSLeay
_RSA_PKCS1_SSLeay proc near
		mov	eax, offset _rsa_pkcs1_eay_meth
		retn
_RSA_PKCS1_SSLeay endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 11E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_blinding_convert proc near		; CODE XREF: _RSA_eay_private_encrypt+1A0p
					; _RSA_eay_private_decrypt+155p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_8]
		test	esi, esi
		jnz	short loc_1208
		push	[esp+4+arg_C]
		push	[esp+8+arg_0]
		push	esi
		push	[esp+10h+arg_4]
		call	_BN_BLINDING_convert_ex
		add	esp, 10h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1208:				; CODE XREF: _rsa_blinding_convert+7j
		push	146h
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	19h
		push	9
		call	_CRYPTO_lock
		push	[esp+14h+arg_C]
		push	[esp+18h+arg_0]
		push	esi
		push	[esp+20h+arg_4]
		call	_BN_BLINDING_convert_ex
		push	148h
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	19h
		push	0Ah
		mov	esi, eax
		call	_CRYPTO_lock
		add	esp, 30h
		mov	eax, esi
		pop	esi
		retn
_rsa_blinding_convert endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 124Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_blinding_invert proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_0]
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		call	_BN_BLINDING_invert_ex
		add	esp, 10h
		retn
_rsa_blinding_invert endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1268h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rsa_get_blinding proc near		; CODE XREF: _RSA_eay_private_encrypt+14Fp
					; _RSA_eay_private_decrypt+104p

var_8		= byte ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 8
		call	__chkstk
		push	ebx
		push	esi
		push	edi
		push	106h
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	9
		push	5
		xor	ebx, ebx
		call	_CRYPTO_lock
		mov	esi, [esp+24h+arg_0]
		add	esp, 10h
		cmp	[esi+50h], ebx
		jnz	short loc_12DA
		push	109h
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	9
		push	6
		call	_CRYPTO_lock
		push	10Ah
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	9
		push	9
		call	_CRYPTO_lock
		add	esp, 20h
		mov	ebx, 1
		cmp	dword ptr [esi+50h], 0
		jnz	short loc_12DA
		push	[esp+14h+arg_8]
		push	esi
		call	_RSA_setup_blinding
		add	esp, 8
		mov	[esi+50h], eax

loc_12DA:				; CODE XREF: _rsa_get_blinding+2Cj
					; _rsa_get_blinding+60j
		mov	edi, [esi+50h]
		test	edi, edi
		jz	$err$15
		lea	eax, [esp+14h+var_8]
		push	eax
		call	_CRYPTO_THREADID_current
		push	edi
		call	_BN_BLINDING_thread_id
		push	eax
		lea	eax, [esp+20h+var_8]
		push	eax
		call	_CRYPTO_THREADID_cmp
		add	esp, 10h
		test	eax, eax
		mov	eax, [esp+14h+arg_4]
		jnz	short loc_1313
		mov	dword ptr [eax], 1
		jmp	short $err$15
; ---------------------------------------------------------------------------

loc_1313:				; CODE XREF: _rsa_get_blinding+A1j
		mov	dword ptr [eax], 0
		cmp	dword ptr [esi+54h], 0
		jnz	short loc_1367
		test	ebx, ebx
		jnz	short loc_1351
		push	126h
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	9
		push	6
		call	_CRYPTO_lock
		push	127h
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	9
		push	9
		call	_CRYPTO_lock
		add	esp, 20h
		mov	ebx, 1

loc_1351:				; CODE XREF: _rsa_get_blinding+B9j
		cmp	dword ptr [esi+54h], 0
		jnz	short loc_1367
		push	[esp+14h+arg_8]
		push	esi
		call	_RSA_setup_blinding
		add	esp, 8
		mov	[esi+54h], eax

loc_1367:				; CODE XREF: _rsa_get_blinding+B5j
					; _rsa_get_blinding+EDj
		mov	edi, [esi+54h]

$err$15:				; CODE XREF: _rsa_get_blinding+77j
					; _rsa_get_blinding+A9j
		test	ebx, ebx
		jz	short loc_138D
		push	133h
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	9
		push	0Ah
		call	_CRYPTO_lock
		add	esp, 10h
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_138D:				; CODE XREF: _rsa_get_blinding+104j
		push	135h
		push	offset ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ ; ".\\crypto\\rsa\\rsa_eay.c"
		push	9
		push	6
		call	_CRYPTO_lock
		add	esp, 10h
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 8
		retn
_rsa_get_blinding endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 13ACh
; COMDAT (pick any)
		public ??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@
; `string'
??_C@_0BH@FEEKPMJH@?4?2crypto?2rsa?2rsa_eay?4c?$AA@ db '.\crypto\rsa\rsa_eay.c',0
					; DATA XREF: _RSA_eay_public_encrypt+2Eo
					; _RSA_eay_public_encrypt:loc_60o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BN_mod_exp_mont:near ; DATA XREF: .data:000011A8o
		extrn _CRYPTO_lock:near	; CODE XREF: _rsa_blinding_convert+2Ep
					; _rsa_blinding_convert+55p ...
		extrn _CRYPTO_THREADID_current:near ; CODE XREF: _rsa_get_blinding+82p
		extrn _CRYPTO_THREADID_cmp:near	; CODE XREF: _rsa_get_blinding+93p
		extrn _CRYPTO_malloc:near ; CODE XREF: _RSA_eay_public_encrypt+F4p
					; _RSA_eay_private_encrypt+74p	...
		extrn _CRYPTO_free:near	; CODE XREF: _RSA_eay_public_encrypt+28Fp
					; _RSA_eay_private_encrypt+359p ...
		extrn _OPENSSL_cleanse:near ; CODE XREF: _RSA_eay_public_encrypt+289p
					; _RSA_eay_private_encrypt+353p ...
		extrn _ERR_put_error:near ; CODE XREF: _RSA_eay_public_encrypt+39p
					; _RSA_eay_public_encrypt+6Bp ...
		extrn _BN_CTX_new:near	; CODE XREF: _RSA_eay_public_encrypt+A5p
					; _RSA_eay_private_encrypt+23p	...
		extrn _BN_CTX_free:near	; CODE XREF: _RSA_eay_public_encrypt+27Bp
					; _RSA_eay_private_encrypt+345p ...
		extrn _BN_CTX_start:near ; CODE	XREF: _RSA_eay_public_encrypt+BBp
					; _RSA_eay_private_encrypt+36p	...
		extrn _BN_CTX_get:near	; CODE XREF: _RSA_eay_public_encrypt+C1p
					; _RSA_eay_public_encrypt+CBp ...
		extrn _BN_CTX_end:near	; CODE XREF: _RSA_eay_public_encrypt+275p
					; _RSA_eay_private_encrypt+33Fp ...
		extrn _BN_num_bits:near	; CODE XREF: _RSA_eay_public_encrypt+1Ap
					; _RSA_eay_public_encrypt+7Ep ...
		extrn _BN_init:near	; CODE XREF: _RSA_eay_private_encrypt+1E9p
					; _RSA_eay_mod_exp+5Bp	...
		extrn _BN_bin2bn:near	; CODE XREF: _RSA_eay_public_encrypt+18Bp
					; _RSA_eay_private_encrypt+10Bp ...
		extrn _BN_bn2bin:near	; CODE XREF: _RSA_eay_public_encrypt+220p
					; _RSA_eay_private_encrypt+2F7p ...
		extrn _BN_sub:near	; CODE XREF: _RSA_eay_private_encrypt+2C3p
					; _RSA_eay_public_decrypt+1EDp	...
		extrn _BN_add:near	; CODE XREF: _RSA_eay_mod_exp+2F6p
					; _RSA_eay_mod_exp+397p ...
		extrn _BN_mul:near	; CODE XREF: _RSA_eay_mod_exp+30Cp
					; _RSA_eay_mod_exp+3ADp
		extrn _BN_div:near	; CODE XREF: _RSA_eay_mod_exp+196p
					; _RSA_eay_mod_exp+255p ...
		extrn _BN_cmp:near	; CODE XREF: _RSA_eay_private_encrypt+2CAp
		extrn _BN_ucmp:near	; CODE XREF: _RSA_eay_public_encrypt+4Fp
					; _RSA_eay_public_encrypt+1A2p	...
		extrn _BN_MONT_CTX_free:near ; CODE XREF: _RSA_eay_finish+Dp
					; _RSA_eay_finish+1Dp ...
		extrn _BN_MONT_CTX_set_locked:near ; CODE XREF:	_RSA_eay_public_encrypt+1D2p
					; _RSA_eay_private_encrypt+246p ...
		extrn _BN_BLINDING_convert_ex:near ; CODE XREF:	_rsa_blinding_convert+16p
					; _rsa_blinding_convert+40p
		extrn _BN_BLINDING_invert_ex:near ; CODE XREF: _RSA_eay_private_encrypt+2A3p
					; _RSA_eay_private_decrypt+254p ...
		extrn _BN_BLINDING_thread_id:near ; CODE XREF: _rsa_get_blinding+88p
		extrn _RSA_setup_blinding:near ; CODE XREF: _rsa_get_blinding+67p
					; _rsa_get_blinding+F4p
		extrn _RSA_padding_add_PKCS1_type_1:near
					; CODE XREF: _RSA_eay_private_encrypt+F2p
		extrn _RSA_padding_check_PKCS1_type_1:near
					; CODE XREF: _RSA_eay_public_decrypt+287p
		extrn _RSA_padding_add_PKCS1_type_2:near
					; CODE XREF: _RSA_eay_public_encrypt+13Bp
		extrn _RSA_padding_check_PKCS1_type_2:near
					; CODE XREF: _RSA_eay_private_decrypt+290p
		extrn _RSA_padding_add_PKCS1_OAEP:near
					; CODE XREF: _RSA_eay_public_encrypt+150p
		extrn _RSA_padding_check_PKCS1_OAEP:near
					; CODE XREF: _RSA_eay_private_decrypt+2A3p
		extrn _RSA_padding_add_SSLv23:near ; CODE XREF:	_RSA_eay_public_encrypt+164p
		extrn _RSA_padding_check_SSLv23:near
					; CODE XREF: _RSA_eay_private_decrypt+2B5p
		extrn _RSA_padding_add_none:near ; CODE	XREF: _RSA_eay_public_encrypt+175p
					; _RSA_eay_private_encrypt+DEp
		extrn _RSA_padding_check_none:near ; CODE XREF:	_RSA_eay_public_decrypt+278p
					; _RSA_eay_private_decrypt+2C4p
		extrn _RSA_padding_add_X931:near ; CODE	XREF: _RSA_eay_private_encrypt+CAp
		extrn _RSA_padding_check_X931:near ; CODE XREF:	_RSA_eay_public_decrypt+269p
		extrn __chkstk:near	; CODE XREF: _RSA_eay_public_encrypt+5p
					; _RSA_eay_private_encrypt+5p ...


		end
