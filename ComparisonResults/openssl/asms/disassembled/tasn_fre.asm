;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	ED6992E2A2710D87578A6746857F44B1
; Input	CRC32 :	65BE00D2

; File Name   :	C:\compspace\Diff\openssl\obj\tasn_fre.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_item_ex_free
_ASN1_item_ex_free proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_asn1_item_combine_free
		add	esp, 0Ch
		retn
_ASN1_item_ex_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 14h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_item_free
_ASN1_item_free	proc near

arg_0		= byte ptr  4
arg_4		= dword	ptr  8

		push	0
		push	[esp+4+arg_4]
		lea	eax, [esp+8+arg_0]
		push	eax
		call	_asn1_item_combine_free
		add	esp, 0Ch
		retn
_ASN1_item_free	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 28h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_primitive_free
_ASN1_primitive_free proc near		; CODE XREF: _ASN1_primitive_free+84p
					; _asn1_item_combine_free+66p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		push	esi
		test	ecx, ecx
		jz	short loc_5E
		mov	eax, [ecx+10h]
		test	eax, eax
		jz	short loc_46
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_46
		pop	esi
		mov	[esp+arg_4], ecx
		jmp	eax
; ---------------------------------------------------------------------------

loc_46:					; CODE XREF: _ASN1_primitive_free+Ej
					; _ASN1_primitive_free+15j
		cmp	byte ptr [ecx],	5
		mov	esi, [esp+4+arg_0]
		jnz	short loc_54
		or	edx, 0FFFFFFFFh
		jmp	short loc_69
; ---------------------------------------------------------------------------

loc_54:					; CODE XREF: _ASN1_primitive_free+25j
		mov	edx, [ecx+4]
		cmp	edx, 1
		jnz	short loc_69
		jmp	short loc_6E
; ---------------------------------------------------------------------------

loc_5E:					; CODE XREF: _ASN1_primitive_free+7j
		mov	eax, [esp+4+arg_0]
		mov	eax, [eax]
		mov	edx, [eax]
		lea	esi, [eax+4]

loc_69:					; CODE XREF: _ASN1_primitive_free+2Aj
					; _ASN1_primitive_free+32j
		cmp	dword ptr [esi], 0
		jz	short loc_D9

loc_6E:					; CODE XREF: _ASN1_primitive_free+34j
		add	edx, 4		; switch 11 cases
		cmp	edx, 0Ah
		ja	short $LN19	; jumptable 0000007D default case
		movzx	eax, ds:$LN22[edx]
		jmp	ds:$LN29[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN13:					; CODE XREF: _ASN1_primitive_free+55j
					; DATA XREF: .text$mn:$LN29o
		push	dword ptr [esi]	; jumptable 0000007D case 6
		call	_ASN1_OBJECT_free
		add	esp, 4
		mov	dword ptr [esi], 0
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN14:					; CODE XREF: _ASN1_primitive_free+55j
					; DATA XREF: .text$mn:$LN29o
		test	ecx, ecx	; jumptable 0000007D case 1
		jz	short loc_A1
		mov	eax, [ecx+14h]
		mov	[esi], eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_A1:					; CODE XREF: _ASN1_primitive_free+70j
		mov	dword ptr [esi], 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN18:					; CODE XREF: _ASN1_primitive_free+55j
					; DATA XREF: .text$mn:$LN29o
		push	0		; jumptable 0000007D case -4
		push	esi
		call	_ASN1_primitive_free
		push	dword ptr [esi]
		call	_CRYPTO_free
		add	esp, 0Ch
		mov	dword ptr [esi], 0
		pop	esi
		retn
; ---------------------------------------------------------------------------

$LN19:					; CODE XREF: _ASN1_primitive_free+4Cj
					; _ASN1_primitive_free+55j
					; DATA XREF: ...
		push	dword ptr [esi]	; jumptable 0000007D default case
		call	_ASN1_STRING_free
		mov	dword ptr [esi], 0
		add	esp, 4

$LN2:					; CODE XREF: _ASN1_primitive_free+55j
					; DATA XREF: .text$mn:$LN29o
		mov	dword ptr [esi], 0 ; jumptable 0000007D	case 5

loc_D9:					; CODE XREF: _ASN1_primitive_free+44j
		pop	esi
		retn
_ASN1_primitive_free endp

; ---------------------------------------------------------------------------
		align 4
$LN29		dd offset $LN18		; DATA XREF: _ASN1_primitive_free+55r
		dd offset $LN14		; jump table for switch	statement
		dd offset $LN2
		dd offset $LN13
		dd offset $LN19
$LN22		db	0,     4,     4,     4 ; DATA XREF: _ASN1_primitive_free+4Er
		db	4,     1,     4,     4 ; indirect table	for switch statement
		db	4,     2,     3
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_template_free
_ASN1_template_free proc near		; CODE XREF: _asn1_item_combine_free+57p
					; _asn1_item_combine_free+B0p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		mov	eax, [ebx]
		test	al, 6
		jz	short loc_163
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		push	edi
		xor	esi, esi
		mov	edi, [ebp+0]
		push	edi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_14E

loc_120:				; CODE XREF: _ASN1_template_free+50j
		push	esi
		push	edi
		call	_sk_value
		add	esp, 8
		mov	[esp+10h+arg_4], eax
		mov	eax, [ebx+10h]
		push	0
		call	eax
		push	eax
		lea	eax, [esp+18h+arg_4]
		push	eax
		call	_asn1_item_combine_free
		push	edi
		inc	esi
		call	_sk_num
		add	esp, 10h
		cmp	esi, eax
		jl	short loc_120

loc_14E:				; CODE XREF: _ASN1_template_free+22j
		push	edi
		call	_sk_free
		add	esp, 4
		mov	dword ptr [ebp+0], 0
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_163:				; CODE XREF: _ASN1_template_free+9j
		and	eax, 400h
		push	eax
		mov	eax, [ebx+10h]
		call	eax
		push	eax
		push	[esp+0Ch+arg_0]
		call	_asn1_item_combine_free
		add	esp, 0Ch
		pop	ebx
		retn
_ASN1_template_free endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 180h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_asn1_item_combine_free	proc near	; CODE XREF: _ASN1_item_ex_free+Ap
					; _ASN1_item_free+Bp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [ebx+10h]
		test	edi, edi
		jz	loc_340
		mov	cl, [ebx]
		test	cl, cl
		jz	short loc_1A4
		cmp	dword ptr [edi], 0
		jz	loc_340

loc_1A4:				; CODE XREF: _asn1_item_combine_free+19j
		push	ebp
		test	eax, eax
		jz	short loc_1B4
		mov	ebp, [eax+10h]
		mov	[esp+0Ch+arg_0], ebp
		test	ebp, ebp
		jnz	short loc_1BA

loc_1B4:				; CODE XREF: _asn1_item_combine_free+27j
		xor	ebp, ebp
		mov	[esp+0Ch+arg_0], ebp

loc_1BA:				; CODE XREF: _asn1_item_combine_free+32j
		movsx	ecx, cl
		cmp	ecx, 6		; switch 7 cases
		ja	loc_33F		; jumptable 000001C7 default case
		push	esi
		jmp	ds:$LN43[ecx*4]	; switch jump
; ---------------------------------------------------------------------------

$LN11:					; CODE XREF: _asn1_item_combine_free+47j
					; DATA XREF: .text$mn:$LN43o
		mov	eax, [ebx+8]	; jumptable 000001C7 case 0
		test	eax, eax
		jz	short $LN14_0	; jumptable 000001C7 case 5
		push	eax
		push	edi
		call	_ASN1_template_free
		add	esp, 8
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN14_0:				; CODE XREF: _asn1_item_combine_free+47j
					; _asn1_item_combine_free+53j
					; DATA XREF: ...
		push	ebx		; jumptable 000001C7 case 5
		push	edi
		call	_ASN1_primitive_free
		add	esp, 8
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN15:					; CODE XREF: _asn1_item_combine_free+47j
					; DATA XREF: .text$mn:$LN43o
		test	ebp, ebp	; jumptable 000001C7 case 2
		jz	short loc_20B
		push	0
		push	ebx
		push	edi
		push	2
		call	ebp
		add	esp, 10h
		cmp	eax, 2
		jz	loc_33E

loc_20B:				; CODE XREF: _asn1_item_combine_free+75j
		push	ebx
		push	edi
		call	_asn1_get_choice_selector
		add	esp, 8
		test	eax, eax
		js	short loc_238
		cmp	eax, [ebx+0Ch]
		jge	short loc_238
		lea	ecx, [eax+eax*4]
		mov	eax, [ebx+8]
		lea	esi, [eax+ecx*4]
		push	esi
		push	edi
		call	_asn1_get_field_ptr
		push	esi
		push	eax
		call	_ASN1_template_free
		add	esp, 10h

loc_238:				; CODE XREF: _asn1_item_combine_free+97j
					; _asn1_item_combine_free+9Cj
		test	ebp, ebp
		jz	loc_327
		push	0
		push	ebx
		push	edi
		push	3
		call	ebp
		jmp	loc_324
; ---------------------------------------------------------------------------

$LN21:					; CODE XREF: _asn1_item_combine_free+47j
					; DATA XREF: .text$mn:$LN43o
		test	eax, eax	; jumptable 000001C7 case 3
		jz	loc_33E
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_33E
		push	dword ptr [edi]
		call	eax
		add	esp, 4
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN23:					; CODE XREF: _asn1_item_combine_free+47j
					; DATA XREF: .text$mn:$LN43o
		test	eax, eax	; jumptable 000001C7 case 4
		jz	loc_33E
		mov	eax, [eax+8]
		test	eax, eax
		jz	loc_33E
		push	ebx
		push	edi
		call	eax
		add	esp, 8
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN25:					; CODE XREF: _asn1_item_combine_free+47j
					; DATA XREF: .text$mn:$LN43o
		push	ebx		; jumptable 000001C7 cases 1,6
		push	0FFFFFFFFh
		push	edi
		call	_asn1_do_lock
		add	esp, 0Ch
		test	eax, eax
		jg	loc_33E
		test	ebp, ebp
		jz	short loc_2B7
		push	0
		push	ebx
		push	edi
		push	2
		call	ebp
		add	esp, 10h
		cmp	eax, 2
		jz	loc_33E

loc_2B7:				; CODE XREF: _asn1_item_combine_free+121j
		push	ebx
		push	edi
		call	_asn1_enc_free
		mov	edx, [ebx+0Ch]
		add	esp, 8
		mov	eax, [ebx+8]
		xor	ebp, ebp
		lea	ecx, [edx+edx*4]
		lea	eax, [eax+ecx*4]
		add	eax, 0FFFFFFECh
		mov	[esp+10h+arg_4], eax
		test	edx, edx
		jle	short loc_314
		nop	word ptr [eax+eax+00h]

loc_2E0:				; CODE XREF: _asn1_item_combine_free+192j
		push	0
		push	eax
		push	edi
		call	_asn1_do_adb
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_303
		push	esi
		push	edi
		call	_asn1_get_field_ptr
		push	esi
		push	eax
		call	_ASN1_template_free
		add	esp, 10h

loc_303:				; CODE XREF: _asn1_item_combine_free+170j
		mov	eax, [esp+10h+arg_4]
		inc	ebp
		sub	eax, 14h
		mov	[esp+10h+arg_4], eax
		cmp	ebp, [ebx+0Ch]
		jl	short loc_2E0

loc_314:				; CODE XREF: _asn1_item_combine_free+158j
		mov	eax, [esp+10h+arg_0]
		test	eax, eax
		jz	short loc_327
		push	0
		push	ebx
		push	edi
		push	3
		call	eax

loc_324:				; CODE XREF: _asn1_item_combine_free+C8j
		add	esp, 10h

loc_327:				; CODE XREF: _asn1_item_combine_free+BAj
					; _asn1_item_combine_free+19Aj
		cmp	[esp+10h+arg_8], 0
		jnz	short loc_33E
		push	dword ptr [edi]
		call	_CRYPTO_free
		mov	dword ptr [edi], 0
		add	esp, 4

loc_33E:				; CODE XREF: _asn1_item_combine_free+85j
					; _asn1_item_combine_free+CFj ...
		pop	esi

loc_33F:				; CODE XREF: _asn1_item_combine_free+40j
		pop	ebp		; jumptable 000001C7 default case

loc_340:				; CODE XREF: _asn1_item_combine_free+Fj
					; _asn1_item_combine_free+1Ej
		pop	edi
		pop	ebx
		retn
_asn1_item_combine_free	endp

; ---------------------------------------------------------------------------
		align 4
$LN43		dd offset $LN11		; DATA XREF: _asn1_item_combine_free+47r
		dd offset $LN25		; jump table for switch	statement
		dd offset $LN15
		dd offset $LN21
		dd offset $LN23
		dd offset $LN14_0
		dd offset $LN25
_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _sk_num:near	; CODE XREF: _ASN1_template_free+18p
					; _ASN1_template_free+46p
		extrn _sk_value:near	; CODE XREF: _ASN1_template_free+26p
		extrn _sk_free:near	; CODE XREF: _ASN1_template_free+53p
		extrn _CRYPTO_free:near	; CODE XREF: _ASN1_primitive_free+8Bp
					; _asn1_item_combine_free+1B0p
		extrn _ASN1_OBJECT_free:near ; CODE XREF: _ASN1_primitive_free+5Ep
		extrn _ASN1_STRING_free:near ; CODE XREF: _ASN1_primitive_free+9Dp
		extrn _asn1_get_choice_selector:near
					; CODE XREF: _asn1_item_combine_free+8Dp
		extrn _asn1_get_field_ptr:near ; CODE XREF: _asn1_item_combine_free+A9p
					; _asn1_item_combine_free+174p
		extrn _asn1_do_adb:near	; CODE XREF: _asn1_item_combine_free+164p
		extrn _asn1_do_lock:near ; CODE	XREF: _asn1_item_combine_free+10Fp
		extrn _asn1_enc_free:near ; CODE XREF: _asn1_item_combine_free+139p


		end
