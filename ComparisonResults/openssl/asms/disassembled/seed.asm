;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	FFFB69FEFBAB6465D131D37FD64EF14B
; Input	CRC32 :	5BC31664

; File Name   :	C:\compspace\Diff\openssl\obj\seed.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
_SS		dd 2989A1A8h		; DATA XREF: _SEED_decrypt+95r
					; _SEED_decrypt+D3r ...
		dd 5858184h, 16C6D2D4h,	13C3D3D0h, 14445054h, 1D0D111Ch
		dd 2C8CA0ACh, 25052124h, 1D4D515Ch, 3434340h, 18081018h
		dd 1E0E121Ch, 11415150h, 3CCCF0FCh, 0ACAC2C8h, 23436360h
		dd 28082028h, 4444044h,	20002020h, 1D8D919Ch, 20C0E0E0h
		dd 22C2E2E0h, 8C8C0C8h,	17071314h, 2585A1A4h, 0F8F838Ch
		dd 3030300h, 3B4B7378h,	3B8BB3B8h, 13031310h, 12C2D2D0h
		dd 2ECEE2ECh, 30407070h, 0C8C808Ch, 3F0F333Ch, 2888A0A8h
		dd 32023230h, 1DCDD1DCh, 36C6F2F4h, 34447074h, 2CCCE0ECh
		dd 15859194h, 0B0B0308h, 17475354h, 1C4C505Ch, 1B4B5358h
		dd 3D8DB1BCh, 1010100h,	24042024h, 1C0C101Ch, 33437370h
		dd 18889098h, 10001010h, 0CCCC0CCh, 32C2F2F0h, 19C9D1D8h
		dd 2C0C202Ch, 27C7E3E4h, 32427270h, 3838380h, 1B8B9398h
		dd 11C1D1D0h, 6868284h,	9C9C1C8h, 20406060h, 10405050h
		dd 2383A3A0h, 2BCBE3E8h, 0D0D010Ch, 3686B2B4h, 1E8E929Ch
		dd 0F4F434Ch, 3787B3B4h, 1A4A5258h, 6C6C2C4h, 38487078h
		dd 2686A2A4h, 12021210h, 2F8FA3ACh, 15C5D1D4h, 21416160h
		dd 3C3C3C0h, 3484B0B4h,	1414140h, 12425250h, 3D4D717Ch
		dd 0D8D818Ch, 8080008h,	1F0F131Ch, 19899198h, 0
		dd 19091118h, 4040004h,	13435350h, 37C7F3F4h, 21C1E1E0h
		dd 3DCDF1FCh, 36467274h, 2F0F232Ch, 27072324h, 3080B0B0h
		dd 0B8B8388h, 0E0E020Ch, 2B8BA3A8h, 2282A2A0h, 2E4E626Ch
		dd 13839390h, 0D4D414Ch, 29496168h, 3C4C707Ch, 9090108h
		dd 0A0A0208h, 3F8FB3BCh, 2FCFE3ECh, 33C3F3F0h, 5C5C1C4h
		dd 7878384h, 14041014h,	3ECEF2FCh, 24446064h, 1ECED2DCh
		dd 2E0E222Ch, 0B4B4348h, 1A0A1218h, 6060204h, 21012120h
		dd 2B4B6368h, 26466264h, 2020200h, 35C5F1F4h, 12829290h
		dd 0A8A8288h, 0C0C000Ch, 3383B3B0h, 3E4E727Ch, 10C0D0D0h
		dd 3A4A7278h, 7474344h,	16869294h, 25C5E1E4h, 26062224h
		dd 808080h, 2D8DA1ACh, 1FCFD3DCh, 2181A1A0h, 30003030h
		dd 37073334h, 2E8EA2ACh, 36063234h, 15051114h, 22022220h
		dd 38083038h, 34C4F0F4h, 2787A3A4h, 5454144h, 0C4C404Ch
		dd 1818180h, 29C9E1E8h,	4848084h, 17879394h, 35053134h
		dd 0BCBC3C8h, 0ECEC2CCh, 3C0C303Ch, 31417170h, 11011110h
		dd 7C7C3C4h, 9898188h, 35457174h, 3BCBF3F8h, 1ACAD2D8h
		dd 38C8F0F8h, 14849094h, 19495158h, 2828280h, 4C4C0C4h
		dd 3FCFF3FCh, 9494148h,	39093138h, 27476364h, 0C0C0C0h
		dd 0FCFC3CCh, 17C7D3D4h, 3888B0B8h, 0F0F030Ch, 0E8E828Ch
		dd 2424240h, 23032320h,	11819190h, 2C4C606Ch, 1BCBD3D8h
		dd 2484A0A4h, 34043034h, 31C1F1F0h, 8484048h, 2C2C2C0h
		dd 2F4F636Ch, 3D0D313Ch, 2D0D212Ch, 404040h, 3E8EB2BCh
		dd 3E0E323Ch, 3C8CB0BCh, 1C1C1C0h, 2A8AA2A8h, 3A8AB2B8h
		dd 0E4E424Ch, 15455154h, 3B0B3338h, 1CCCD0DCh, 28486068h
		dd 3F4F737Ch, 1C8C909Ch, 18C8D0D8h, 0A4A4248h, 16465254h
		dd 37477374h, 2080A0A0h, 2DCDE1ECh, 6464244h, 3585B1B4h
		dd 2B0B2328h, 25456164h, 3ACAF2F8h, 23C3E3E0h, 3989B1B8h
		dd 3181B1B0h, 1F8F939Ch, 1E4E525Ch, 39C9F1F8h, 26C6E2E4h
		dd 3282B2B0h, 31013130h, 2ACAE2E8h, 2D4D616Ch, 1F4F535Ch
		dd 24C4E0E4h, 30C0F0F0h, 0DCDC1CCh, 8888088h, 16061214h
		dd 3A0A3238h, 18485058h, 14C4D0D4h, 22426260h, 29092128h
		dd 7070304h, 33033330h,	28C8E0E8h, 1B0B1318h, 5050104h
		dd 39497178h, 10809090h, 2A4A6268h, 2A0A2228h, 1A8A9298h
dword_400	dd 38380830h		; DATA XREF: _SEED_decrypt+8Br
					; _SEED_decrypt+C5r ...
		dd 0E828C8E0h, 2C2D0D21h, 0A42686A2h, 0CC0FCFC3h, 0DC1ECED2h
		dd 0B03383B3h, 0B83888B0h, 0AC2F8FA3h, 60204060h, 54154551h
		dd 0C407C7C3h, 44044440h, 6C2F4F63h, 682B4B63h,	581B4B53h
		dd 0C003C3C3h, 60224262h, 30330333h, 0B43585B1h, 28290921h
		dd 0A02080A0h, 0E022C2E2h, 0A42787A3h, 0D013C3D3h, 90118191h
		dd 10110111h, 4060602h,	1C1C0C10h, 0BC3C8CB0h, 34360632h
		dd 480B4B43h, 0EC2FCFE3h, 88088880h, 6C2C4C60h,	0A82888A0h
		dd 14170713h, 0C404C4C0h, 14160612h, 0F434C4F0h, 0C002C2C2h
		dd 44054541h, 0E021C1E1h, 0D416C6D2h, 3C3F0F33h, 3C3D0D31h
		dd 8C0E8E82h, 98188890h, 28280820h, 4C0E4E42h, 0F436C6F2h
		dd 3C3E0E32h, 0A42585A1h, 0F839C9F1h, 0C0D0D01h, 0DC1FCFD3h
		dd 0D818C8D0h, 282B0B23h, 64264662h, 783A4A72h,	24270723h
		dd 2C2F0F23h, 0F031C1F1h, 70324272h, 40024242h,	0D414C4D0h
		dd 40014141h, 0C000C0C0h, 70334373h, 64274763h,	0AC2C8CA0h
		dd 880B8B83h, 0F437C7F3h, 0AC2D8DA1h, 80008080h, 1C1F0F13h
		dd 0C80ACAC2h, 2C2C0C20h, 0A82A8AA2h, 34340430h, 0D012C2D2h
		dd 80B0B03h, 0EC2ECEE2h, 0E829C9E1h, 5C1D4D51h,	94148490h
		dd 18180810h, 0F838C8F0h, 54174753h, 0AC2E8EA2h, 8080800h
		dd 0C405C5C1h, 10130313h, 0CC0DCDC1h, 84068682h, 0B83989B1h
		dd 0FC3FCFF3h, 7C3D4D71h, 0C001C1C1h, 30310131h, 0F435C5F1h
		dd 880A8A82h, 682A4A62h, 0B03181B1h, 0D011C1D1h, 20200020h
		dd 0D417C7D3h, 20202h, 20220222h, 4040400h, 68284860h
		dd 70314171h, 4070703h,	0D81BCBD3h, 9C1D8D91h, 98198991h
		dd 60214161h, 0BC3E8EB2h, 0E426C6E2h, 58194951h, 0DC1DCDD1h
		dd 50114151h, 90108090h, 0DC1CCCD0h, 981A8A92h,	0A02383A3h
		dd 0A82B8BA3h, 0D010C0D0h, 80018181h, 0C0F0F03h, 44074743h
		dd 181A0A12h, 0E023C3E3h, 0EC2CCCE0h, 8C0D8D81h, 0BC3F8FB3h
		dd 94168692h, 783B4B73h, 5C1C4C50h, 0A02282A2h,	0A02181A1h
		dd 60234363h, 20230323h, 4C0D4D41h, 0C808C8C0h,	9C1E8E92h
		dd 9C1C8C90h, 383A0A32h, 0C0C0C00h, 2C2E0E22h, 0B83A8AB2h
		dd 6C2E4E62h, 9C1F8F93h, 581A4A52h, 0F032C2F2h,	90128292h
		dd 0F033C3F3h, 48094941h, 78384870h, 0CC0CCCC0h, 14150511h
		dd 0F83BCBF3h, 70304070h, 74354571h, 7C3F4F73h,	34350531h
		dd 10100010h, 30303h, 64244460h, 6C2D4D61h, 0C406C6C2h
		dd 74344470h, 0D415C5D1h, 0B43484B0h, 0E82ACAE2h, 8090901h
		dd 74364672h, 18190911h, 0FC3ECEF2h, 40004040h,	10120212h
		dd 0E020C0E0h, 0BC3D8DB1h, 4050501h, 0F83ACAF2h, 10101h
		dd 0F030C0F0h, 282A0A22h, 5C1E4E52h, 0A82989A1h, 54164652h
		dd 40034343h, 84058581h, 14140410h, 88098981h, 981B8B93h
		dd 0B03080B0h, 0E425C5E1h, 48084840h, 78394971h, 94178793h
		dd 0FC3CCCF0h, 1C1E0E12h, 80028282h, 20210121h,	8C0C8C80h
		dd 181B0B13h, 5C1F4F53h, 74374773h, 54144450h, 0B03282B2h
		dd 1C1D0D11h, 24250521h, 4C0F4F43h, 0
		dd 44064642h, 0EC2DCDE1h, 58184850h, 50124252h,	0E82BCBE3h
		dd 7C3E4E72h, 0D81ACAD2h, 0C809C9C1h, 0FC3DCDF1h, 30300030h
		dd 94158591h, 64254561h, 3C3C0C30h, 0B43686B2h,	0E424C4E0h
		dd 0B83B8BB3h, 7C3C4C70h, 0C0E0E02h, 50104050h,	38390931h
		dd 24260622h, 30320232h, 84048480h, 68294961h, 90138393h
		dd 34370733h, 0E427C7E3h, 24240420h, 0A42484A0h, 0C80BCBC3h
		dd 50134353h, 80A0A02h,	84078783h, 0D819C9D1h, 4C0C4C40h
		dd 80038383h, 8C0F8F83h, 0CC0ECEC2h, 383B0B33h,	480A4A42h
		dd 0B43787B3h
dword_800	dd 0A1A82989h		; DATA XREF: _SEED_decrypt+7Cr
					; _SEED_decrypt+B6r ...
		dd 81840585h, 0D2D416C6h, 0D3D013C3h, 50541444h, 111C1D0Dh
		dd 0A0AC2C8Ch, 21242505h, 515C1D4Dh, 43400343h,	10181808h
		dd 121C1E0Eh, 51501141h, 0F0FC3CCCh, 0C2C80ACAh, 63602343h
		dd 20282808h, 40440444h, 20202000h, 919C1D8Dh, 0E0E020C0h
		dd 0E2E022C2h, 0C0C808C8h, 13141707h, 0A1A42585h, 838C0F8Fh
		dd 3000303h, 73783B4Bh,	0B3B83B8Bh, 13101303h, 0D2D012C2h
		dd 0E2EC2ECEh, 70703040h, 808C0C8Ch, 333C3F0Fh,	0A0A82888h
		dd 32303202h, 0D1DC1DCDh, 0F2F436C6h, 70743444h, 0E0EC2CCCh
		dd 91941585h, 3080B0Bh,	53541747h, 505C1C4Ch, 53581B4Bh
		dd 0B1BC3D8Dh, 1000101h, 20242404h, 101C1C0Ch, 73703343h
		dd 90981888h, 10101000h, 0C0CC0CCCh, 0F2F032C2h, 0D1D819C9h
		dd 202C2C0Ch, 0E3E427C7h, 72703242h, 83800383h,	93981B8Bh
		dd 0D1D011C1h, 82840686h, 0C1C809C9h, 60602040h, 50501040h
		dd 0A3A02383h, 0E3E82BCBh, 10C0D0Dh, 0B2B43686h, 929C1E8Eh
		dd 434C0F4Fh, 0B3B43787h, 52581A4Ah, 0C2C406C6h, 70783848h
		dd 0A2A42686h, 12101202h, 0A3AC2F8Fh, 0D1D415C5h, 61602141h
		dd 0C3C003C3h, 0B0B43484h, 41400141h, 52501242h, 717C3D4Dh
		dd 818C0D8Dh, 80808h, 131C1F0Fh, 91981989h, 0
		dd 11181909h, 40404h, 53501343h, 0F3F437C7h, 0E1E021C1h
		dd 0F1FC3DCDh, 72743646h, 232C2F0Fh, 23242707h,	0B0B03080h
		dd 83880B8Bh, 20C0E0Eh,	0A3A82B8Bh, 0A2A02282h,	626C2E4Eh
		dd 93901383h, 414C0D4Dh, 61682949h, 707C3C4Ch, 1080909h
		dd 2080A0Ah, 0B3BC3F8Fh, 0E3EC2FCFh, 0F3F033C3h, 0C1C405C5h
		dd 83840787h, 10141404h, 0F2FC3ECEh, 60642444h,	0D2DC1ECEh
		dd 222C2E0Eh, 43480B4Bh, 12181A0Ah, 2040606h, 21202101h
		dd 63682B4Bh, 62642646h, 2000202h, 0F1F435C5h, 92901282h
		dd 82880A8Ah, 0C0C0Ch, 0B3B03383h, 727C3E4Eh, 0D0D010C0h
		dd 72783A4Ah, 43440747h, 92941686h, 0E1E425C5h,	22242606h
		dd 80800080h, 0A1AC2D8Dh, 0D3DC1FCFh, 0A1A02181h, 30303000h
		dd 33343707h, 0A2AC2E8Eh, 32343606h, 11141505h,	22202202h
		dd 30383808h, 0F0F434C4h, 0A3A42787h, 41440545h, 404C0C4Ch
		dd 81800181h, 0E1E829C9h, 80840484h, 93941787h,	31343505h
		dd 0C3C80BCBh, 0C2CC0ECEh, 303C3C0Ch, 71703141h, 11101101h
		dd 0C3C407C7h, 81880989h, 71743545h, 0F3F83BCBh, 0D2D81ACAh
		dd 0F0F838C8h, 90941484h, 51581949h, 82800282h,	0C0C404C4h
		dd 0F3FC3FCFh, 41480949h, 31383909h, 63642747h,	0C0C000C0h
		dd 0C3CC0FCFh, 0D3D417C7h, 0B0B83888h, 30C0F0Fh, 828C0E8Eh
		dd 42400242h, 23202303h, 91901181h, 606C2C4Ch, 0D3D81BCBh
		dd 0A0A42484h, 30343404h, 0F1F031C1h, 40480848h, 0C2C002C2h
		dd 636C2F4Fh, 313C3D0Dh, 212C2D0Dh, 40400040h, 0B2BC3E8Eh
		dd 323C3E0Eh, 0B0BC3C8Ch, 0C1C001C1h, 0A2A82A8Ah, 0B2B83A8Ah
		dd 424C0E4Eh, 51541545h, 33383B0Bh, 0D0DC1CCCh,	60682848h
		dd 737C3F4Fh, 909C1C8Ch, 0D0D818C8h, 42480A4Ah,	52541646h
		dd 73743747h, 0A0A02080h, 0E1EC2DCDh, 42440646h, 0B1B43585h
		dd 23282B0Bh, 61642545h, 0F2F83ACAh, 0E3E023C3h, 0B1B83989h
		dd 0B1B03181h, 939C1F8Fh, 525C1E4Eh, 0F1F839C9h, 0E2E426C6h
		dd 0B2B03282h, 31303101h, 0E2E82ACAh, 616C2D4Dh, 535C1F4Fh
		dd 0E0E424C4h, 0F0F030C0h, 0C1CC0DCDh, 80880888h, 12141606h
		dd 32383A0Ah, 50581848h, 0D0D414C4h, 62602242h,	21282909h
		dd 3040707h, 33303303h,	0E0E828C8h, 13181B0Bh, 1040505h
		dd 71783949h, 90901080h, 62682A4Ah, 22282A0Ah, 92981A8Ah
dword_C00	dd 8303838h		; DATA XREF: _SEED_decrypt+75r
					; _SEED_decrypt+AFr ...
		dd 0C8E0E828h, 0D212C2Dh, 86A2A426h, 0CFC3CC0Fh, 0CED2DC1Eh
		dd 83B3B033h, 88B0B838h, 8FA3AC2Fh, 40606020h, 45515415h
		dd 0C7C3C407h, 44404404h, 4F636C2Fh, 4B63682Bh,	4B53581Bh
		dd 0C3C3C003h, 42626022h, 3333033h, 85B1B435h, 9212829h
		dd 80A0A020h, 0C2E2E022h, 87A3A427h, 0C3D3D013h, 81919011h
		dd 1111011h, 6020406h, 0C101C1Ch, 8CB0BC3Ch, 6323436h
		dd 4B43480Bh, 0CFE3EC2Fh, 88808808h, 4C606C2Ch,	88A0A828h
		dd 7131417h, 0C4C0C404h, 6121416h, 0C4F0F434h, 0C2C2C002h
		dd 45414405h, 0C1E1E021h, 0C6D2D416h, 0F333C3Fh, 0D313C3Dh
		dd 8E828C0Eh, 88909818h, 8202828h, 4E424C0Eh, 0C6F2F436h
		dd 0E323C3Eh, 85A1A425h, 0C9F1F839h, 0D010C0Dh,	0CFD3DC1Fh
		dd 0C8D0D818h, 0B23282Bh, 46626426h, 4A72783Ah,	7232427h
		dd 0F232C2Fh, 0C1F1F031h, 42727032h, 42424002h,	0C4D0D414h
		dd 41414001h, 0C0C0C000h, 43737033h, 47636427h,	8CA0AC2Ch
		dd 8B83880Bh, 0C7F3F437h, 8DA1AC2Dh, 80808000h,	0F131C1Fh
		dd 0CAC2C80Ah, 0C202C2Ch, 8AA2A82Ah, 4303434h, 0C2D2D012h
		dd 0B03080Bh, 0CEE2EC2Eh, 0C9E1E829h, 4D515C1Dh, 84909414h
		dd 8101818h, 0C8F0F838h, 47535417h, 8EA2AC2Eh, 8000808h
		dd 0C5C1C405h, 3131013h, 0CDC1CC0Dh, 86828406h,	89B1B839h
		dd 0CFF3FC3Fh, 4D717C3Dh, 0C1C1C001h, 1313031h,	0C5F1F435h
		dd 8A82880Ah, 4A62682Ah, 81B1B031h, 0C1D1D011h,	202020h
		dd 0C7D3D417h, 2020002h, 2222022h, 4000404h, 48606828h
		dd 41717031h, 7030407h,	0CBD3D81Bh, 8D919C1Dh, 89919819h
		dd 41616021h, 8EB2BC3Eh, 0C6E2E426h, 49515819h,	0CDD1DC1Dh
		dd 41515011h, 80909010h, 0CCD0DC1Ch, 8A92981Ah,	83A3A023h
		dd 8BA3A82Bh, 0C0D0D010h, 81818001h, 0F030C0Fh,	47434407h
		dd 0A12181Ah, 0C3E3E023h, 0CCE0EC2Ch, 8D818C0Dh, 8FB3BC3Fh
		dd 86929416h, 4B73783Bh, 4C505C1Ch, 82A2A022h, 81A1A021h
		dd 43636023h, 3232023h,	4D414C0Dh, 0C8C0C808h, 8E929C1Eh
		dd 8C909C1Ch, 0A32383Ah, 0C000C0Ch, 0E222C2Eh, 8AB2B83Ah
		dd 4E626C2Eh, 8F939C1Fh, 4A52581Ah, 0C2F2F032h,	82929012h
		dd 0C3F3F033h, 49414809h, 48707838h, 0CCC0CC0Ch, 5111415h
		dd 0CBF3F83Bh, 40707030h, 45717435h, 4F737C3Fh,	5313435h
		dd 101010h, 3030003h, 44606424h, 4D616C2Dh, 0C6C2C406h
		dd 44707434h, 0C5D1D415h, 84B0B434h, 0CAE2E82Ah, 9010809h
		dd 46727436h, 9111819h,	0CEF2FC3Eh, 40404000h, 2121012h
		dd 0C0E0E020h, 8DB1BC3Dh, 5010405h, 0CAF2F83Ah,	1010001h
		dd 0C0F0F030h, 0A22282Ah, 4E525C1Eh, 89A1A829h,	46525416h
		dd 43434003h, 85818405h, 4101414h, 89818809h, 8B93981Bh
		dd 80B0B030h, 0C5E1E425h, 48404808h, 49717839h,	87939417h
		dd 0CCF0FC3Ch, 0E121C1Eh, 82828002h, 1212021h, 8C808C0Ch
		dd 0B13181Bh, 4F535C1Fh, 47737437h, 44505414h, 82B2B032h
		dd 0D111C1Dh, 5212425h,	4F434C0Fh, 0
		dd 46424406h, 0CDE1EC2Dh, 48505818h, 42525012h,	0CBE3E82Bh
		dd 4E727C3Eh, 0CAD2D81Ah, 0C9C1C809h, 0CDF1FC3Dh, 303030h
		dd 85919415h, 45616425h, 0C303C3Ch, 86B2B436h, 0C4E0E424h
		dd 8BB3B83Bh, 4C707C3Ch, 0E020C0Eh, 40505010h, 9313839h
		dd 6222426h, 2323032h, 84808404h, 49616829h, 83939013h
		dd 7333437h, 0C7E3E427h, 4202424h, 84A0A424h, 0CBC3C80Bh
		dd 43535013h, 0A02080Ah, 87838407h, 0C9D1D819h,	4C404C0Ch
		dd 83838003h, 8F838C0Fh, 0CEC2CC0Eh, 0B33383Bh,	4A42480Ah
		dd 87B3B437h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1000h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SEED_decrypt
_SEED_decrypt	proc near

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 0Ch
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+18h+arg_0]
		push	edi
		mov	edi, [esp+1Ch+arg_8]
		movzx	edx, byte ptr [esi+8]
		movzx	eax, byte ptr [esi+9]
		movzx	ecx, byte ptr [esi+0Ch]
		mov	ebx, [edi+78h]
		shl	edx, 8
		or	edx, eax
		shl	ecx, 8
		movzx	eax, byte ptr [esi+0Ah]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [esi+0Bh]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [esi+0Dh]
		or	ecx, eax
		mov	[esp+1Ch+arg_0], edx
		movzx	eax, byte ptr [esi+0Eh]
		xor	ebx, edx
		mov	edx, [edi+7Ch]
		shl	ecx, 8
		xor	edx, ebx
		or	ecx, eax
		movzx	eax, byte ptr [esi+0Fh]
		shl	ecx, 8
		or	ecx, eax
		xor	edx, ecx
		mov	[esp+1Ch+var_C], ecx
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		movzx	ebx, byte ptr [esi]
		xor	ecx, _SS[eax*4]
		movzx	eax, byte ptr [esi+1]
		shl	ebx, 8
		or	ebx, eax
		movzx	eax, byte ptr [esi+2]
		shl	ebx, 8
		or	ebx, eax
		movzx	eax, byte ptr [esi+3]
		shl	ebx, 8
		or	ebx, eax
		lea	eax, [ecx+edx]
		xor	ebx, eax
		movzx	edx, byte ptr [esi+4]
		movzx	eax, byte ptr [esi+5]
		shl	edx, 8
		or	edx, eax
		mov	[esp+1Ch+arg_8], ebx
		movzx	eax, byte ptr [esi+6]
		mov	ebx, [edi+70h]
		mov	ebp, [esp+1Ch+arg_8]
		xor	ebx, ebp
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [esi+7]
		shl	edx, 8
		or	edx, eax
		xor	edx, ecx
		mov	[esp+1Ch+var_8], edx
		mov	edx, [edi+74h]
		mov	esi, [esp+1Ch+var_8]
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+68h]
		xor	ecx, _SS[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		mov	[esp+1Ch+var_C], eax
		xor	ebx, edx
		mov	edx, [edi+6Ch]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+60h]
		xor	ecx, _SS[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+64h]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		xor	edx, _SS[eax*4]
		mov	ebx, [esp+1Ch+arg_8]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+58h]
		xor	ecx, _SS[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		mov	[esp+1Ch+var_C], eax
		xor	ebx, edx
		mov	edx, [edi+5Ch]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+50h]
		xor	ecx, _SS[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+54h]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+48h]
		xor	ecx, _SS[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		mov	[esp+1Ch+var_C], eax
		xor	ebx, edx
		mov	edx, [edi+4Ch]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		xor	edx, _SS[eax*4]
		mov	ebx, [esp+1Ch+arg_8]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+40h]
		xor	ecx, _SS[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+44h]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+38h]
		xor	ecx, _SS[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	ebx, edx
		mov	[esp+1Ch+arg_0], edx
		mov	edx, [edi+3Ch]
		xor	eax, ecx
		xor	edx, ebx
		mov	[esp+1Ch+var_C], eax
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+30h]
		xor	ecx, _SS[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+34h]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+28h]
		xor	ecx, _SS[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		mov	[esp+1Ch+var_C], eax
		xor	ebx, edx
		mov	edx, [edi+2Ch]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+20h]
		xor	ecx, _SS[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+24h]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+18h]
		xor	ecx, _SS[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		xor	ebx, edx
		mov	[esp+1Ch+var_C], eax
		mov	edx, [edi+1Ch]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 18h
		shr	eax, 10h
		mov	ecx, dword_C00[ecx*4]
		movzx	eax, al
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+10h]
		xor	ecx, _SS[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+14h]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+8]
		xor	ecx, _SS[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		xor	ebx, edx
		mov	[esp+1Ch+var_C], eax
		mov	edx, [edi+0Ch]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi]
		xor	ecx, _SS[eax*4]
		xor	esi, ecx
		mov	[esp+1Ch+var_8], esi
		lea	eax, [ecx+edx]
		mov	edx, [edi+4]
		xor	ebp, eax
		xor	ebx, ebp
		mov	[esp+1Ch+arg_8], ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+var_4], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+var_4]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 18h
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		pop	edi
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+18h+arg_0]
		xor	ecx, _SS[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+18h+var_C]
		xor	ebx, eax
		xor	edx, ecx
		mov	ecx, [esp+18h+arg_4]
		mov	eax, ebx
		shr	eax, 18h
		mov	[ecx], al
		mov	eax, ebx
		shr	eax, 10h
		mov	[ecx+1], al
		mov	eax, ebx
		shr	eax, 8
		mov	[ecx+2], al
		mov	eax, edx
		shr	eax, 18h
		mov	[ecx+4], al
		mov	eax, edx
		shr	eax, 10h
		mov	[ecx+5], al
		mov	eax, edx
		shr	eax, 8
		mov	[ecx+6], al
		mov	[ecx+7], dl
		mov	edx, ebp
		mov	eax, edx
		mov	[ecx+0Bh], dl
		shr	eax, 18h
		mov	[ecx+8], al
		mov	eax, edx
		shr	eax, 10h
		mov	[ecx+9], al
		mov	eax, edx
		shr	eax, 8
		mov	edx, esi
		mov	[ecx+0Ah], al
		mov	eax, edx
		shr	eax, 18h
		mov	[ecx+0Ch], al
		mov	eax, edx
		shr	eax, 10h
		mov	[ecx+0Dh], al
		mov	eax, edx
		pop	esi
		shr	eax, 8
		pop	ebp
		mov	[ecx+3], bl
		mov	[ecx+0Eh], al
		mov	[ecx+0Fh], dl
		pop	ebx
		add	esp, 0Ch
		retn
_SEED_decrypt	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D54h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SEED_encrypt
_SEED_encrypt	proc near

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 0Ch
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+18h+arg_0]
		push	edi
		mov	edi, [esp+1Ch+arg_8]
		movzx	edx, byte ptr [esi+8]
		movzx	eax, byte ptr [esi+9]
		movzx	ecx, byte ptr [esi+0Ch]
		mov	ebx, [edi]
		shl	edx, 8
		or	edx, eax
		shl	ecx, 8
		movzx	eax, byte ptr [esi+0Ah]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [esi+0Bh]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [esi+0Dh]
		or	ecx, eax
		mov	[esp+1Ch+arg_0], edx
		movzx	eax, byte ptr [esi+0Eh]
		xor	ebx, edx
		mov	edx, [edi+4]
		shl	ecx, 8
		xor	edx, ebx
		or	ecx, eax
		movzx	eax, byte ptr [esi+0Fh]
		shl	ecx, 8
		or	ecx, eax
		xor	edx, ecx
		mov	[esp+1Ch+var_C], ecx
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		movzx	ebx, byte ptr [esi]
		xor	ecx, _SS[eax*4]
		movzx	eax, byte ptr [esi+1]
		shl	ebx, 8
		or	ebx, eax
		movzx	eax, byte ptr [esi+2]
		shl	ebx, 8
		or	ebx, eax
		movzx	eax, byte ptr [esi+3]
		shl	ebx, 8
		or	ebx, eax
		lea	eax, [ecx+edx]
		xor	ebx, eax
		movzx	edx, byte ptr [esi+4]
		movzx	eax, byte ptr [esi+5]
		shl	edx, 8
		or	edx, eax
		mov	[esp+1Ch+arg_8], ebx
		movzx	eax, byte ptr [esi+6]
		mov	ebx, [edi+8]
		mov	ebp, [esp+1Ch+arg_8]
		xor	ebx, ebp
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [esi+7]
		shl	edx, 8
		or	edx, eax
		xor	edx, ecx
		mov	[esp+1Ch+var_8], edx
		mov	edx, [edi+0Ch]
		mov	esi, [esp+1Ch+var_8]
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+10h]
		xor	ecx, _SS[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		mov	[esp+1Ch+var_C], eax
		xor	ebx, edx
		mov	edx, [edi+14h]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+18h]
		xor	ecx, _SS[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+1Ch]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		xor	edx, _SS[eax*4]
		mov	ebx, [esp+1Ch+arg_8]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+20h]
		xor	ecx, _SS[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		mov	[esp+1Ch+var_C], eax
		xor	ebx, edx
		mov	edx, [edi+24h]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+28h]
		xor	ecx, _SS[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+2Ch]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+30h]
		xor	ecx, _SS[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		mov	[esp+1Ch+var_C], eax
		xor	ebx, edx
		mov	edx, [edi+34h]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		xor	edx, _SS[eax*4]
		mov	ebx, [esp+1Ch+arg_8]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+38h]
		xor	ecx, _SS[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+3Ch]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+40h]
		xor	ecx, _SS[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	ebx, edx
		mov	[esp+1Ch+arg_0], edx
		mov	edx, [edi+44h]
		xor	eax, ecx
		xor	edx, ebx
		mov	[esp+1Ch+var_C], eax
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+48h]
		xor	ecx, _SS[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+4Ch]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+50h]
		xor	ecx, _SS[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		mov	[esp+1Ch+var_C], eax
		xor	ebx, edx
		mov	edx, [edi+54h]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+58h]
		xor	ecx, _SS[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+5Ch]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+60h]
		xor	ecx, _SS[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		xor	ebx, edx
		mov	[esp+1Ch+var_C], eax
		mov	edx, [edi+64h]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 18h
		shr	eax, 10h
		mov	ecx, dword_C00[ecx*4]
		movzx	eax, al
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+68h]
		xor	ecx, _SS[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+6Ch]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+70h]
		xor	ecx, _SS[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		xor	ebx, edx
		mov	[esp+1Ch+var_C], eax
		mov	edx, [edi+74h]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+78h]
		xor	ecx, _SS[eax*4]
		xor	esi, ecx
		mov	[esp+1Ch+var_8], esi
		lea	eax, [ecx+edx]
		mov	edx, [edi+7Ch]
		xor	ebp, eax
		xor	ebx, ebp
		mov	[esp+1Ch+arg_8], ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		xor	ecx, _SS[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+var_4], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, dword_C00[ecx*4]
		xor	edx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+var_4]
		xor	edx, _SS[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 18h
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		pop	edi
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+18h+arg_0]
		xor	ecx, _SS[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+18h+var_C]
		xor	ebx, eax
		xor	edx, ecx
		mov	ecx, [esp+18h+arg_4]
		mov	eax, ebx
		shr	eax, 18h
		mov	[ecx], al
		mov	eax, ebx
		shr	eax, 10h
		mov	[ecx+1], al
		mov	eax, ebx
		shr	eax, 8
		mov	[ecx+2], al
		mov	eax, edx
		shr	eax, 18h
		mov	[ecx+4], al
		mov	eax, edx
		shr	eax, 10h
		mov	[ecx+5], al
		mov	eax, edx
		shr	eax, 8
		mov	[ecx+6], al
		mov	[ecx+7], dl
		mov	edx, ebp
		mov	eax, edx
		mov	[ecx+0Bh], dl
		shr	eax, 18h
		mov	[ecx+8], al
		mov	eax, edx
		shr	eax, 10h
		mov	[ecx+9], al
		mov	eax, edx
		shr	eax, 8
		mov	edx, esi
		mov	[ecx+0Ah], al
		mov	eax, edx
		shr	eax, 18h
		mov	[ecx+0Ch], al
		mov	eax, edx
		shr	eax, 10h
		mov	[ecx+0Dh], al
		mov	eax, edx
		pop	esi
		shr	eax, 8
		pop	ebp
		mov	[ecx+3], bl
		mov	[ecx+0Eh], al
		mov	[ecx+0Fh], dl
		pop	ebx
		add	esp, 0Ch
		retn
_SEED_encrypt	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2AA8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _SEED_set_key
_SEED_set_key	proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 8
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	ecx, [esp+18h+arg_0]
		movzx	ebp, byte ptr [ecx]
		movzx	eax, byte ptr [ecx+1]
		movzx	esi, byte ptr [ecx+4]
		movzx	edx, byte ptr [ecx+8]
		shl	ebp, 8
		or	ebp, eax
		shl	esi, 8
		movzx	eax, byte ptr [ecx+2]
		shl	ebp, 8
		or	ebp, eax
		shl	edx, 8
		movzx	eax, byte ptr [ecx+3]
		shl	ebp, 8
		or	ebp, eax
		movzx	eax, byte ptr [ecx+5]
		or	esi, eax
		movzx	eax, byte ptr [ecx+6]
		shl	esi, 8
		or	esi, eax
		movzx	eax, byte ptr [ecx+7]
		shl	esi, 8
		or	esi, eax
		movzx	eax, byte ptr [ecx+9]
		or	edx, eax
		mov	ebx, esi
		movzx	eax, byte ptr [ecx+0Ah]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [ecx+0Bh]
		movzx	edi, byte ptr [ecx+0Ch]
		shl	edx, 8
		or	edx, eax
		shl	edi, 8
		movzx	eax, byte ptr [ecx+0Dh]
		or	edi, eax
		mov	[esp+18h+arg_0], edx
		movzx	eax, byte ptr [ecx+0Eh]
		add	edx, 61C88647h
		shl	edi, 8
		add	edx, ebp
		or	edi, eax
		movzx	eax, byte ptr [ecx+0Fh]
		shl	edi, 8
		mov	ecx, edx
		or	edi, eax
		shr	ecx, 18h
		mov	eax, edx
		sub	ebx, edi
		shr	eax, 10h
		sub	ebx, 61C88647h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, _SS[eax*4]
		mov	eax, ebx
		mov	[edx], ecx
		mov	ecx, ebx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		xor	ecx, _SS[eax*4]
		mov	[edx+4], ecx
		mov	eax, ebp
		mov	edx, [esp+18h+arg_0]
		mov	ecx, esi
		shr	eax, 8
		add	edx, 0C3910C8Dh
		shl	ecx, 18h
		xor	ecx, eax
		shr	esi, 8
		shl	ebp, 18h
		xor	ebp, esi
		mov	esi, ecx
		add	edx, esi
		mov	ebx, ebp
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		sub	ebx, edi
		movzx	eax, al
		add	ebx, 3C6EF373h
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, _SS[eax*4]
		mov	eax, ebx
		mov	[edx+8], ecx
		mov	ecx, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, ebp
		xor	ecx, _SS[eax*4]
		mov	eax, [esp+18h+arg_0]
		mov	[edx+0Ch], ecx
		mov	ecx, edi
		shl	eax, 8
		lea	edx, [esi-78DDE6E6h]
		shr	ecx, 18h
		xor	ecx, eax
		shl	edi, 8
		mov	eax, [esp+18h+arg_0]
		shr	eax, 18h
		xor	eax, edi
		mov	edi, ecx
		sub	ebx, eax
		mov	[esp+18h+arg_0], eax
		add	edx, edi
		add	ebx, 78DDE6E6h
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, _SS[eax*4]
		mov	eax, ebx
		mov	[edx+10h], ecx
		mov	ecx, ebx
		shr	ecx, 18h
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		xor	ecx, _SS[eax*4]
		mov	eax, esi
		mov	[edx+14h], ecx
		mov	ecx, ebp
		shr	eax, 8
		shl	ecx, 18h
		xor	ecx, eax
		shr	ebp, 8
		shl	esi, 18h
		xor	esi, ebp
		mov	ebp, ecx
		mov	ebx, esi
		sub	ebx, [esp+18h+arg_0]
		sub	ebx, 0E443234h
		lea	edx, [ebp+0E443234h]
		add	edx, edi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, _SS[eax*4]
		mov	eax, ebx
		mov	[edx+18h], ecx
		mov	ecx, ebx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, esi
		xor	ecx, _SS[eax*4]
		mov	eax, edi
		mov	[edx+1Ch], ecx
		mov	edx, [esp+18h+arg_0]
		mov	ecx, edx
		shl	eax, 8
		shr	ecx, 18h
		xor	ecx, eax
		shl	edx, 8
		shr	edi, 18h
		xor	edi, edx
		mov	[esp+18h+arg_0], ecx
		lea	edx, [ebp+1C886467h]
		sub	ebx, edi
		add	edx, ecx
		sub	ebx, 1C886467h
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, _SS[eax*4]
		mov	[edx+20h], ecx
		mov	eax, ebx
		shr	eax, 10h
		mov	ecx, ebx
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		xor	ecx, _SS[eax*4]
		mov	eax, ebp
		mov	[edx+24h], ecx
		mov	ecx, esi
		shr	eax, 8
		shl	ecx, 18h
		xor	ecx, eax
		shr	esi, 8
		mov	[esp+18h+var_4], ecx
		shl	ebp, 18h
		xor	ebp, esi
		mov	esi, [esp+18h+arg_0]
		mov	ebx, ebp
		sub	ebx, edi
		sub	ebx, 3910C8CDh
		lea	edx, [esi+3910C8CDh]
		add	edx, ecx
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, _SS[eax*4]
		mov	eax, ebx
		mov	[edx+28h], ecx
		mov	ecx, ebx
		shr	ecx, 18h
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, ebp
		xor	ecx, _SS[eax*4]
		mov	eax, esi
		mov	[edx+2Ch], ecx
		mov	ecx, edi
		shl	edi, 8
		shr	esi, 18h
		xor	esi, edi
		shr	ecx, 18h
		mov	edi, [esp+18h+var_4]
		sub	ebx, esi
		shl	eax, 8
		sub	ebx, 72219199h
		xor	ecx, eax
		mov	[esp+18h+arg_0], ecx
		lea	edx, [edi+72219199h]
		add	edx, ecx
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, _SS[eax*4]
		mov	eax, ebx
		mov	[edx+30h], ecx
		mov	ecx, ebx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		xor	ecx, _SS[eax*4]
		mov	eax, edi
		mov	[edx+34h], ecx
		mov	ecx, ebp
		shr	eax, 8
		shl	ecx, 18h
		xor	ecx, eax
		shr	ebp, 8
		mov	[esp+18h+var_4], ecx
		shl	edi, 18h
		xor	edi, ebp
		mov	ebp, [esp+18h+arg_0]
		mov	ebx, edi
		sub	ebx, esi
		add	ebx, 1BBCDCCFh
		lea	edx, [ebp-1BBCDCCFh]
		add	edx, ecx
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, _SS[eax*4]
		mov	eax, ebx
		mov	[edx+38h], ecx
		mov	ecx, ebx
		shr	ecx, 18h
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, edi
		xor	ecx, _SS[eax*4]
		mov	eax, ebp
		mov	[edx+3Ch], ecx
		mov	ecx, esi
		shl	esi, 8
		shr	ebp, 18h
		xor	ebp, esi
		shr	ecx, 18h
		mov	esi, [esp+18h+var_4]
		sub	ebx, ebp
		shl	eax, 8
		xor	ecx, eax
		mov	[esp+18h+arg_0], ecx
		lea	edx, [esi-3779B99Eh]
		add	edx, ecx
		add	ebx, 3779B99Eh
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, _SS[eax*4]
		mov	eax, ebx
		mov	[edx+40h], ecx
		mov	ecx, ebx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		xor	ecx, _SS[eax*4]
		mov	eax, esi
		mov	[edx+44h], ecx
		mov	ecx, edi
		shr	eax, 8
		shl	ecx, 18h
		xor	ecx, eax
		shr	edi, 8
		mov	[esp+18h+var_4], ecx
		shl	esi, 18h
		xor	esi, edi
		mov	edi, [esp+18h+arg_0]
		mov	ebx, esi
		sub	ebx, ebp
		add	ebx, 6EF3733Ch
		lea	edx, [edi-6EF3733Ch]
		add	edx, ecx
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, _SS[eax*4]
		mov	eax, ebx
		mov	[edx+48h], ecx
		mov	ecx, ebx
		shr	ecx, 18h
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		xor	ecx, _SS[eax*4]
		mov	eax, edi
		mov	[edx+4Ch], ecx
		mov	ecx, ebp
		shr	ecx, 18h
		shl	eax, 8
		xor	ecx, eax
		shr	edi, 18h
		mov	[esp+18h+arg_0], ecx
		shl	ebp, 8
		xor	edi, ebp
		mov	ebx, esi
		mov	ebp, [esp+18h+var_4]
		sub	ebx, edi
		sub	ebx, 22191988h
		lea	edx, [ebp+22191988h]
		add	edx, ecx
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, _SS[eax*4]
		mov	eax, ebx
		mov	[edx+50h], ecx
		mov	ecx, ebx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		xor	ecx, _SS[eax*4]
		mov	eax, ebp
		mov	[edx+54h], ecx
		mov	ecx, esi
		mov	edx, [esp+18h+arg_0]
		shr	eax, 8
		add	edx, 4432330Fh
		shl	ecx, 18h
		xor	ecx, eax
		shl	ebp, 18h
		add	edx, ecx
		mov	[esp+18h+var_8], ecx
		mov	ecx, edx
		shr	esi, 8
		shr	ecx, 18h
		mov	eax, edx
		shr	eax, 10h
		xor	ebp, esi
		movzx	eax, al
		mov	ebx, ebp
		sub	ebx, edi
		mov	[esp+18h+var_4], ebp
		mov	ecx, dword_C00[ecx*4]
		sub	ebx, 4432330Fh
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, _SS[eax*4]
		mov	eax, ebx
		mov	[edx+58h], ecx
		mov	ecx, ebx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		xor	ecx, _SS[eax*4]
		mov	[edx+5Ch], ecx
		mov	ecx, [esp+18h+arg_0]
		mov	ebp, edi
		mov	edx, [esp+18h+var_8]
		mov	eax, ecx
		mov	esi, [esp+18h+var_4]
		add	edx, 8864661Dh
		shl	eax, 8
		mov	ebx, esi
		shr	ecx, 18h
		shl	edi, 8
		xor	ecx, edi
		shr	ebp, 18h
		xor	ebp, eax
		mov	[esp+18h+arg_0], ecx
		sub	ebx, ecx
		add	edx, ebp
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		add	ebx, 779B99E3h
		shr	ecx, 18h
		mov	edi, esi
		movzx	eax, al
		shl	edi, 18h
		shr	esi, 8
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, _SS[eax*4]
		mov	eax, ebx
		mov	[edx+60h], ecx
		mov	ecx, ebx
		shr	ecx, 18h
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		xor	ecx, _SS[eax*4]
		mov	[edx+64h], ecx
		mov	ecx, [esp+18h+var_8]
		mov	eax, ecx
		shr	eax, 8
		xor	edi, eax
		shl	ecx, 18h
		xor	ecx, esi
		mov	[esp+18h+var_4], edi
		mov	ebx, ecx
		mov	[esp+18h+var_8], ecx
		sub	ebx, [esp+18h+arg_0]
		lea	edx, [edi+10C8CC3Ah]
		sub	ebx, 10C8CC3Ah
		add	edx, ebp
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		shr	eax, 10h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, _SS[eax*4]
		mov	eax, ebx
		mov	[edx+68h], ecx
		mov	ecx, ebx
		shr	ecx, 18h
		shr	eax, 10h
		mov	ecx, dword_C00[ecx*4]
		movzx	eax, al
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		xor	ecx, _SS[eax*4]
		mov	eax, ebp
		mov	[edx+6Ch], ecx
		lea	edx, [edi+21919873h]
		mov	ecx, [esp+18h+arg_0]
		mov	esi, ecx
		shl	eax, 8
		shl	ecx, 8
		mov	edi, [esp+18h+var_8]
		mov	ebx, edi
		shr	esi, 18h
		xor	esi, eax
		shr	ebp, 18h
		xor	ebp, ecx
		add	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		sub	ebx, ebp
		movzx	eax, al
		sub	ebx, 21919873h
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, _SS[eax*4]
		mov	eax, ebx
		mov	[edx+70h], ecx
		mov	ecx, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+18h+var_4]
		xor	ecx, _SS[eax*4]
		mov	eax, ebx
		mov	[edx+74h], ecx
		mov	edx, edi
		shr	eax, 8
		shl	edx, 18h
		xor	edx, eax
		shl	ebx, 18h
		add	edx, 432330E5h
		shr	edi, 8
		add	edx, esi
		xor	ebx, edi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		sub	ebx, ebp
		shr	ecx, 18h
		sub	ebx, 432330E5h
		movzx	eax, al
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, edx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, dword_400[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, _SS[eax*4]
		mov	[edx+78h], ecx
		mov	eax, ebx
		shr	eax, 10h
		mov	ecx, ebx
		shr	ecx, 18h
		movzx	eax, al
		pop	edi
		pop	esi
		mov	ecx, dword_C00[ecx*4]
		xor	ecx, dword_800[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		pop	ebp
		xor	ecx, dword_400[eax*4]
		movzx	eax, bl
		pop	ebx
		xor	ecx, _SS[eax*4]
		mov	[edx+7Ch], ecx
		add	esp, 8
		retn
_SEED_set_key	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __chkstk:near	; CODE XREF: _SEED_decrypt+5p
					; _SEED_encrypt+5p ...


		end
