;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	2C39D48C73E79AFBB7B46D7D312EBCD4
; Input	CRC32 :	35A2BA0F

; File Name   :	C:\compspace\Diff\openssl\obj\p12_kiss.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _PKCS12_parse
_PKCS12_parse	proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 4
		call	__chkstk
		mov	eax, [esp+4+arg_0]
		push	esi
		xor	esi, esi
		mov	[esp+8+var_4], 0
		test	eax, eax
		jnz	short loc_37
		push	5Bh ; '['
		push	offset ??_C@_0BL@FPOKFNDP@?4?2crypto?2pkcs12?2p12_kiss?4c?$AA@ ; ".\\crypto\\pkcs12\\p12_kiss.c"
		push	69h ; 'i'
		push	76h ; 'v'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_37:					; CODE XREF: _PKCS12_parse+1Bj
		push	edi
		mov	edi, [esp+0Ch+arg_8]
		test	edi, edi
		jz	short loc_42
		mov	[edi], esi

loc_42:					; CODE XREF: _PKCS12_parse+3Ej
		push	ebp
		mov	ebp, [esp+10h+arg_C]
		test	ebp, ebp
		jz	short loc_4E
		mov	[ebp+0], esi

loc_4E:					; CODE XREF: _PKCS12_parse+49j
		push	ebx
		mov	ebx, [esp+14h+arg_4]
		test	ebx, ebx
		jz	short loc_73
		cmp	byte ptr [ebx],	0
		jz	short loc_73
		push	0FFFFFFFFh
		push	ebx
		push	eax
		call	_PKCS12_verify_mac
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_A8
		push	77h ; 'w'
		jmp	loc_1A7
; ---------------------------------------------------------------------------

loc_73:					; CODE XREF: _PKCS12_parse+55j
					; _PKCS12_parse+5Aj
		push	0
		push	0
		push	eax
		call	_PKCS12_verify_mac
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_88
		xor	ebx, ebx
		jmp	short loc_A8
; ---------------------------------------------------------------------------

loc_88:					; CODE XREF: _PKCS12_parse+82j
		push	0
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	[esp+1Ch+arg_0]
		call	_PKCS12_verify_mac
		add	esp, 0Ch
		test	eax, eax
		jz	loc_1A5
		mov	ebx, offset ??_C@_00CNPNBAHC@?$AA@ ; `string'

loc_A8:					; CODE XREF: _PKCS12_parse+6Aj
					; _PKCS12_parse+86j
		call	_sk_new_null
		mov	[esp+14h+var_4], eax
		test	eax, eax
		jnz	short loc_D2
		push	7Fh ; ''
		push	offset ??_C@_0BL@FPOKFNDP@?4?2crypto?2pkcs12?2p12_kiss?4c?$AA@ ; ".\\crypto\\pkcs12\\p12_kiss.c"
		push	41h ; 'A'
		push	76h ; 'v'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebx
		pop	ebp
		pop	edi
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_D2:					; CODE XREF: _PKCS12_parse+B3j
		push	eax
		push	edi
		push	0FFFFFFFFh
		push	ebx
		push	[esp+24h+arg_0]
		call	_parse_pk12
		add	esp, 14h
		test	eax, eax
		jnz	short loc_F8
		push	84h ; 'Ñ'
		push	offset ??_C@_0BL@FPOKFNDP@?4?2crypto?2pkcs12?2p12_kiss?4c?$AA@ ; ".\\crypto\\pkcs12\\p12_kiss.c"
		push	72h ; 'r'
		jmp	loc_1AE
; ---------------------------------------------------------------------------

loc_F8:					; CODE XREF: _PKCS12_parse+E5j
		push	[esp+14h+var_4]
		call	_sk_pop
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_189
		mov	ebx, [esp+14h+arg_10]
		xchg	ax, ax

loc_110:				; CODE XREF: _PKCS12_parse+187j
		test	edi, edi
		jz	short loc_141
		cmp	dword ptr [edi], 0
		jz	short loc_141
		test	ebp, ebp
		jz	short loc_141
		cmp	dword ptr [ebp+0], 0
		jnz	short loc_141
		call	_ERR_set_mark
		push	dword ptr [edi]
		push	esi
		call	_X509_check_private_key
		add	esp, 8
		test	eax, eax
		jz	short loc_13C
		mov	[ebp+0], esi
		xor	esi, esi

loc_13C:				; CODE XREF: _PKCS12_parse+135j
		call	_ERR_pop_to_mark

loc_141:				; CODE XREF: _PKCS12_parse+112j
					; _PKCS12_parse+117j ...
		test	ebx, ebx
		jz	short loc_16A
		test	esi, esi
		jz	short loc_177
		cmp	dword ptr [ebx], 0
		jnz	short loc_159
		call	_sk_new_null
		mov	[ebx], eax
		test	eax, eax
		jz	short $err$42

loc_159:				; CODE XREF: _PKCS12_parse+14Cj
		push	esi
		push	dword ptr [ebx]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	short $err$42
		jmp	short loc_177
; ---------------------------------------------------------------------------

loc_16A:				; CODE XREF: _PKCS12_parse+143j
		test	esi, esi
		jz	short loc_177
		push	esi
		call	_X509_free
		add	esp, 4

loc_177:				; CODE XREF: _PKCS12_parse+147j
					; _PKCS12_parse+168j ...
		push	[esp+14h+var_4]
		call	_sk_pop
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_110

loc_189:				; CODE XREF: _PKCS12_parse+108j
		push	offset _X509_free
		push	[esp+18h+var_4]
		call	_sk_pop_free
		add	esp, 8
		mov	eax, 1
		pop	ebx
		pop	ebp
		pop	edi
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1A5:				; CODE XREF: _PKCS12_parse+9Dj
		push	73h ; 's'

loc_1A7:				; CODE XREF: _PKCS12_parse+6Ej
		push	offset ??_C@_0BL@FPOKFNDP@?4?2crypto?2pkcs12?2p12_kiss?4c?$AA@ ; ".\\crypto\\pkcs12\\p12_kiss.c"
		push	71h ; 'q'

loc_1AE:				; CODE XREF: _PKCS12_parse+F3j
		push	76h ; 'v'
		push	23h ; '#'
		call	_ERR_put_error
		add	esp, 14h

$err$42:				; CODE XREF: _PKCS12_parse+157j
					; _PKCS12_parse+166j
		test	edi, edi
		jz	short loc_1CD
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_1CD
		push	eax
		call	_EVP_PKEY_free
		add	esp, 4

loc_1CD:				; CODE XREF: _PKCS12_parse+1BCj
					; _PKCS12_parse+1C2j
		test	ebp, ebp
		jz	short loc_1E1
		mov	eax, [ebp+0]
		test	eax, eax
		jz	short loc_1E1
		push	eax
		call	_X509_free
		add	esp, 4

loc_1E1:				; CODE XREF: _PKCS12_parse+1CFj
					; _PKCS12_parse+1D6j
		test	esi, esi
		jz	short loc_1EE
		push	esi
		call	_X509_free
		add	esp, 4

loc_1EE:				; CODE XREF: _PKCS12_parse+1E3j
		mov	eax, [esp+14h+var_4]
		test	eax, eax
		jz	short loc_204
		push	offset _X509_free
		push	eax
		call	_sk_pop_free
		add	esp, 8

loc_204:				; CODE XREF: _PKCS12_parse+1F4j
		pop	ebx
		pop	ebp
		pop	edi
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
_PKCS12_parse	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 20Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_parse_bag	proc near		; CODE XREF: _parse_bag+199p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		xor	ebp, ebp
		push	edi
		push	9Ch ; 'ú'
		xor	ebx, ebx
		push	dword ptr [esi+8]
		call	_PKCS12_get_attr_gen
		add	esp, 8
		test	eax, eax
		jz	short loc_22F
		mov	ebp, [eax+4]

loc_22F:				; CODE XREF: _parse_bag+1Ej
		push	9Dh ; 'ù'
		push	dword ptr [esi+8]
		call	_PKCS12_get_attr_gen
		add	esp, 8
		test	eax, eax
		jz	short loc_246
		mov	ebx, [eax+4]

loc_246:				; CODE XREF: _parse_bag+35j
		push	dword ptr [esi]
		call	_OBJ_obj2nid
		add	eax, 0FFFFFF6Ah
		add	esp, 4
		cmp	eax, 5		; switch 6 cases
		ja	$LN24		; jumptable 0000025E default case
		jmp	ds:$LN40[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN6:					; CODE XREF: _parse_bag+52j
					; DATA XREF: .text$mn:$LN40o
		mov	edi, [esp+10h+arg_C] ; jumptable 0000025E case 0
		test	edi, edi
		jz	$LN24		; jumptable 0000025E default case
		cmp	dword ptr [edi], 0
		jnz	$LN24		; jumptable 0000025E default case
		push	dword ptr [esi+4]
		call	_EVP_PKCS82PKEY
		add	esp, 4
		mov	[edi], eax
		test	eax, eax
		jnz	$LN24		; jumptable 0000025E default case
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN10:					; CODE XREF: _parse_bag+52j
					; DATA XREF: .text$mn:$LN40o
		mov	edi, [esp+10h+arg_C] ; jumptable 0000025E case 1
		test	edi, edi
		jz	$LN24		; jumptable 0000025E default case
		cmp	dword ptr [edi], 0
		jnz	$LN24		; jumptable 0000025E default case
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	esi
		call	_PKCS12_decrypt_skey
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	loc_36F
		push	esi
		call	_EVP_PKCS82PKEY
		push	esi
		mov	[edi], eax
		call	_PKCS8_PRIV_KEY_INFO_free
		add	esp, 8
		cmp	dword ptr [edi], 0
		jnz	$LN24		; jumptable 0000025E default case
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN15:					; CODE XREF: _parse_bag+52j
					; DATA XREF: .text$mn:$LN40o
		mov	eax, [esi+4]	; jumptable 0000025E case 2
		push	dword ptr [eax]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 9Eh ; 'û'
		jnz	$LN24		; jumptable 0000025E default case
		push	esi
		call	_PKCS12_certbag2x509
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_36F
		test	ebx, ebx
		jz	short loc_322
		push	dword ptr [ebx]
		push	dword ptr [ebx+8]
		push	edi
		call	_X509_keyid_set1
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_366

loc_322:				; CODE XREF: _parse_bag+102j
		test	ebp, ebp
		jz	short loc_355
		lea	eax, [esp+10h+arg_0]
		push	ebp
		push	eax
		call	_ASN1_STRING_to_UTF8
		add	esp, 8
		test	eax, eax
		js	short loc_355
		push	eax
		push	[esp+14h+arg_0]
		push	edi
		call	_X509_alias_set1
		push	[esp+1Ch+arg_0]
		mov	esi, eax
		call	_CRYPTO_free
		add	esp, 10h
		test	esi, esi
		jz	short loc_366

loc_355:				; CODE XREF: _parse_bag+118j
					; _parse_bag+12Aj
		push	edi
		push	[esp+14h+arg_10]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jnz	short $LN24	; jumptable 0000025E default case

loc_366:				; CODE XREF: _parse_bag+114j
					; _parse_bag+147j
		push	edi
		call	_X509_free
		add	esp, 4

loc_36F:				; CODE XREF: _parse_bag+B2j
					; _parse_bag+FEj ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN23:					; CODE XREF: _parse_bag+52j
					; DATA XREF: .text$mn:$LN40o
		mov	edi, [esi+4]	; jumptable 0000025E case 5
		xor	esi, esi
		push	edi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short $LN24	; jumptable 0000025E default case
		mov	ebx, [esp+10h+arg_10]
		mov	ebp, [esp+10h+arg_C]

loc_390:				; CODE XREF: _parse_bag+1B1j
		push	ebx
		push	ebp
		push	[esp+18h+arg_8]
		push	[esp+1Ch+arg_4]
		push	esi
		push	edi
		call	_sk_value
		add	esp, 8
		push	eax
		call	_parse_bag
		add	esp, 14h
		test	eax, eax
		jz	short loc_36F
		push	edi
		inc	esi
		call	_sk_num
		add	esp, 4
		cmp	esi, eax
		jl	short loc_390

$LN24:					; CODE XREF: _parse_bag+4Cj
					; _parse_bag+52j ...
		pop	edi		; jumptable 0000025E default case
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
_parse_bag	endp

; ---------------------------------------------------------------------------
		align 4
$LN40		dd offset $LN6		; DATA XREF: _parse_bag+52r
		dd offset $LN10		; jump table for switch	statement
		dd offset $LN15
		dd offset $LN24
		dd offset $LN24
		dd offset $LN23
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_parse_bags	proc near		; CODE XREF: _parse_bags+1A5p
					; _parse_pk12+7Bp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, 8
		call	__chkstk
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		push	ebp
		push	esi
		push	edi
		push	ebx
		xor	edi, edi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	loc_5A7

loc_409:				; CODE XREF: _parse_bags+1BDj
		push	edi
		push	ebx
		call	_sk_value
		mov	esi, eax
		mov	[esp+20h+var_8], 0
		push	9Ch ; 'ú'
		xor	ebp, ebp
		push	dword ptr [esi+8]
		call	_PKCS12_get_attr_gen
		add	esp, 10h
		test	eax, eax
		jz	short loc_437
		mov	eax, [eax+4]
		mov	[esp+18h+var_8], eax

loc_437:				; CODE XREF: _parse_bags+4Aj
		push	9Dh ; 'ù'
		push	dword ptr [esi+8]
		call	_PKCS12_get_attr_gen
		add	esp, 8
		test	eax, eax
		jz	short loc_44E
		mov	ebp, [eax+4]

loc_44E:				; CODE XREF: _parse_bags+65j
		push	dword ptr [esi]
		call	_OBJ_obj2nid
		add	eax, 0FFFFFF6Ah
		add	esp, 4
		cmp	eax, 5		; switch 6 cases
		ja	$LN37		; jumptable 00000466 default case
		jmp	ds:$LN49[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN12:					; CODE XREF: _parse_bags+82j
					; DATA XREF: .text$mn:$LN49o
		mov	ebp, [esp+18h+arg_C] ; jumptable 00000466 case 0
		test	ebp, ebp
		jz	$LN37		; jumptable 00000466 default case
		cmp	dword ptr [ebp+0], 0
		jnz	$LN37		; jumptable 00000466 default case
		push	dword ptr [esi+4]
		call	_EVP_PKCS82PKEY
		add	esp, 4
		mov	[ebp+0], eax
		jmp	loc_591
; ---------------------------------------------------------------------------

$LN16:					; CODE XREF: _parse_bags+82j
					; DATA XREF: .text$mn:$LN49o
		mov	ebp, [esp+18h+arg_C] ; jumptable 00000466 case 1
		test	ebp, ebp
		jz	$LN37		; jumptable 00000466 default case
		cmp	dword ptr [ebp+0], 0
		jnz	$LN37		; jumptable 00000466 default case
		push	[esp+18h+arg_8]
		push	[esp+1Ch+arg_4]
		push	esi
		call	_PKCS12_decrypt_skey
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	loc_5BD
		push	esi
		call	_EVP_PKCS82PKEY
		push	esi
		mov	[ebp+0], eax
		call	_PKCS8_PRIV_KEY_INFO_free
		add	esp, 8
		cmp	dword ptr [ebp+0], 0
		jmp	loc_593
; ---------------------------------------------------------------------------

$LN21:					; CODE XREF: _parse_bags+82j
					; DATA XREF: .text$mn:$LN49o
		mov	eax, [esi+4]	; jumptable 00000466 case 2
		push	dword ptr [eax]
		call	_OBJ_obj2nid
		add	esp, 4
		cmp	eax, 9Eh ; 'û'
		jnz	$LN37		; jumptable 00000466 default case
		push	esi
		call	_PKCS12_certbag2x509
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	loc_5BD
		test	ebp, ebp
		jz	short loc_528
		push	dword ptr [ebp+0]
		push	dword ptr [ebp+8]
		push	ebx
		call	_X509_keyid_set1
		add	esp, 0Ch
		test	eax, eax
		jz	loc_5B4

loc_528:				; CODE XREF: _parse_bags+12Bj
		mov	eax, [esp+18h+var_8]
		test	eax, eax
		jz	short loc_55F
		push	eax
		lea	eax, [esp+1Ch+var_4]
		push	eax
		call	_ASN1_STRING_to_UTF8
		add	esp, 8
		test	eax, eax
		js	short loc_55F
		push	eax
		push	[esp+1Ch+var_4]
		push	ebx
		call	_X509_alias_set1
		push	[esp+24h+var_4]
		mov	esi, eax
		call	_CRYPTO_free
		add	esp, 10h
		test	esi, esi
		jz	short loc_5B4

loc_55F:				; CODE XREF: _parse_bags+14Aj
					; _parse_bags+15Cj
		push	ebx
		push	[esp+1Ch+arg_10]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	short loc_5B4
		mov	ebx, [esp+18h+arg_0]
		jmp	short $LN37	; jumptable 00000466 default case
; ---------------------------------------------------------------------------

$LN29:					; CODE XREF: _parse_bags+82j
					; DATA XREF: .text$mn:$LN49o
		push	[esp+18h+arg_10] ; jumptable 00000466 case 5
		push	[esp+1Ch+arg_C]
		push	[esp+20h+arg_8]
		push	[esp+24h+arg_4]
		push	dword ptr [esi+4]
		call	_parse_bags
		add	esp, 14h

loc_591:				; CODE XREF: _parse_bags+ADj
		test	eax, eax

loc_593:				; CODE XREF: _parse_bags+F9j
		jz	short loc_5BD

$LN37:					; CODE XREF: _parse_bags+7Cj
					; _parse_bags+82j ...
		push	ebx		; jumptable 00000466 default case
		inc	edi
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jl	loc_409

loc_5A7:				; CODE XREF: _parse_bags+1Fj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_5B4:				; CODE XREF: _parse_bags+13Ej
					; _parse_bags+179j ...
		push	ebx
		call	_X509_free
		add	esp, 4

loc_5BD:				; CODE XREF: _parse_bags+DDj
					; _parse_bags+123j ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
_parse_bags	endp

; ---------------------------------------------------------------------------
		align 4
$LN49		dd offset $LN12		; DATA XREF: _parse_bags+82r
		dd offset $LN16		; jump table for switch	statement
		dd offset $LN21
		dd offset $LN37
		dd offset $LN37
		dd offset $LN29
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_parse_pk12	proc near		; CODE XREF: _PKCS12_parse+DBp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	[esp+4+arg_0]
		call	_PKCS12_unpack_authsafes
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jnz	short loc_5F5
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_5F5:				; CODE XREF: _parse_pk12+11j
		push	ebp
		push	esi
		push	edi
		push	ebx
		xor	edi, edi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	short loc_683
		mov	ebp, [esp+10h+arg_8]
		nop	dword ptr [eax+eax+00h]

loc_610:				; CODE XREF: _parse_pk12+A1j
		push	edi
		push	ebx
		call	_sk_value
		mov	esi, eax
		push	dword ptr [esi+10h]
		call	_OBJ_obj2nid
		add	esp, 0Ch
		cmp	eax, 15h
		jnz	short loc_634
		push	esi
		call	_PKCS12_unpack_p7data
		add	esp, 4
		jmp	short loc_647
; ---------------------------------------------------------------------------

loc_634:				; CODE XREF: _parse_pk12+47j
		cmp	eax, 1Ah
		jnz	short loc_675
		push	ebp
		push	[esp+14h+arg_4]
		push	esi
		call	_PKCS12_unpack_p7encdata
		add	esp, 0Ch

loc_647:				; CODE XREF: _parse_pk12+52j
		mov	esi, eax
		test	esi, esi
		jz	short loc_6B5
		push	[esp+10h+arg_10]
		push	[esp+14h+arg_C]
		push	ebp
		push	[esp+1Ch+arg_4]
		push	esi
		call	_parse_bags
		add	esp, 14h
		push	offset _PKCS12_SAFEBAG_free
		push	esi
		test	eax, eax
		jz	short loc_69B
		call	_sk_pop_free
		add	esp, 8

loc_675:				; CODE XREF: _parse_pk12+57j
		push	ebx
		inc	edi
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jl	short loc_610

loc_683:				; CODE XREF: _parse_pk12+25j
		push	offset _PKCS7_free
		push	ebx
		call	_sk_pop_free
		add	esp, 8
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_69B:				; CODE XREF: _parse_pk12+8Bj
		call	_sk_pop_free
		push	offset _PKCS7_free
		push	ebx
		call	_sk_pop_free
		add	esp, 10h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B5:				; CODE XREF: _parse_pk12+6Bj
		push	offset _PKCS7_free
		push	ebx
		call	_sk_pop_free
		add	esp, 8
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
_parse_pk12	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6CCh
; COMDAT (pick any)
		public ??_C@_0BL@FPOKFNDP@?4?2crypto?2pkcs12?2p12_kiss?4c?$AA@
; `string'
??_C@_0BL@FPOKFNDP@?4?2crypto?2pkcs12?2p12_kiss?4c?$AA@	db '.\crypto\pkcs12\p12_kiss.c',0
					; DATA XREF: _PKCS12_parse+1Fo
					; _PKCS12_parse+B7o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 6E8h
; COMDAT (pick any)
		public ??_C@_00CNPNBAHC@?$AA@
; `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: _PKCS12_parse+8Ao
					; _PKCS12_parse+A3o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _sk_num:near	; CODE XREF: _parse_bag+170p
					; _parse_bag+1A7p ...
		extrn _sk_value:near	; CODE XREF: _parse_bag+190p
					; _parse_bags+27p ...
		extrn _sk_new_null:near	; CODE XREF: _PKCS12_parse:loc_A8p
					; _PKCS12_parse+14Ep
		extrn _sk_pop_free:near	; CODE XREF: _PKCS12_parse+192p
					; _PKCS12_parse+1FCp ...
		extrn _sk_push:near	; CODE XREF: _PKCS12_parse+15Cp
					; _parse_bag+14Ep ...
		extrn _sk_pop:near	; CODE XREF: _PKCS12_parse+FCp
					; _PKCS12_parse+17Bp
		extrn _CRYPTO_free:near	; CODE XREF: _parse_bag+13Dp
					; _parse_bags+16Fp
		extrn _ERR_put_error:near ; CODE XREF: _PKCS12_parse+2Ap
					; _PKCS12_parse+C2p ...
		extrn _ERR_set_mark:near ; CODE	XREF: _PKCS12_parse+123p
		extrn _ERR_pop_to_mark:near ; CODE XREF: _PKCS12_parse:loc_13Cp
		extrn _ASN1_STRING_to_UTF8:near	; CODE XREF: _parse_bag+120p
					; _parse_bags+152p
		extrn _OBJ_obj2nid:near	; CODE XREF: _parse_bag+3Cp
					; _parse_bag+DEp ...
		extrn _EVP_PKEY_free:near ; CODE XREF: _PKCS12_parse+1C5p
		extrn _PKCS7_free:near	; DATA XREF: _parse_pk12:loc_683o
					; _parse_pk12+C0o ...
		extrn _X509_free:near	; CODE XREF: _PKCS12_parse+16Fp
					; _PKCS12_parse+1D9p ...
		extrn _X509_alias_set1:near ; CODE XREF: _parse_bag+132p
					; _parse_bags+164p
		extrn _X509_keyid_set1:near ; CODE XREF: _parse_bag+10Ap
					; _parse_bags+134p
		extrn _X509_check_private_key:near ; CODE XREF:	_PKCS12_parse+12Bp
		extrn _PKCS8_PRIV_KEY_INFO_free:near ; CODE XREF: _parse_bag+C1p
					; _parse_bags+EDp
		extrn _EVP_PKCS82PKEY:near ; CODE XREF:	_parse_bag+71p
					; _parse_bag+B9p ...
		extrn _PKCS12_certbag2x509:near	; CODE XREF: _parse_bag+F2p
					; _parse_bags+117p
		extrn _PKCS12_decrypt_skey:near	; CODE XREF: _parse_bag+A6p
					; _parse_bags+D1p
		extrn _PKCS12_unpack_p7data:near ; CODE	XREF: _parse_pk12+4Ap
		extrn _PKCS12_unpack_p7encdata:near ; CODE XREF: _parse_pk12+5Fp
		extrn _PKCS12_unpack_authsafes:near ; CODE XREF: _parse_pk12+5p
		extrn _PKCS12_get_attr_gen:near	; CODE XREF: _parse_bag+14p
					; _parse_bag+2Bp ...
		extrn _PKCS12_verify_mac:near ;	CODE XREF: _PKCS12_parse+60p
					; _PKCS12_parse+78p ...
		extrn _PKCS12_SAFEBAG_free:near	; DATA XREF: _parse_pk12+83o
		extrn __chkstk:near	; CODE XREF: _PKCS12_parse+5p
					; _parse_bags+5p


		end
