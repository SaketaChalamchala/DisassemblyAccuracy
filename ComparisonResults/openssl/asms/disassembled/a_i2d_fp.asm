;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	3899B48715B7E97C691F9C654DD79687
; Input	CRC32 :	5924F665

; File Name   :	C:\compspace\Diff\openssl\obj\a_i2d_fp.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_i2d_bio
_ASN1_i2d_bio	proc near		; CODE XREF: _ASN1_i2d_fp+46p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 8
		call	__chkstk
		push	ebx
		push	ebp
		mov	ebp, [esp+10h+arg_8]
		push	esi
		push	edi
		xor	edi, edi
		mov	[esp+18h+var_8], 1
		push	edi
		push	ebp
		call	[esp+20h+arg_0]
		push	5Ah ; 'Z'
		mov	esi, eax
		push	offset ??_C@_0BJ@PMCGIHAB@?4?2crypto?2asn1?2a_i2d_fp?4c?$AA@ ; ".\\crypto\\asn1\\a_i2d_fp.c"
		push	esi
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jnz	short loc_59
		push	5Ch ; '\'
		push	offset ??_C@_0BJ@PMCGIHAB@?4?2crypto?2asn1?2a_i2d_fp?4c?$AA@ ; ".\\crypto\\asn1\\a_i2d_fp.c"
		push	41h ; 'A'
		push	74h ; 't'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_59:					; CODE XREF: _ASN1_i2d_bio+38j
		lea	eax, [esp+18h+var_4]
		mov	[esp+18h+var_4], ebx
		push	eax
		push	ebp
		call	[esp+20h+arg_0]
		mov	ebp, [esp+20h+arg_4]
		push	esi
		push	ebx
		push	ebp
		call	_BIO_write
		add	esp, 14h
		cmp	eax, esi
		jz	short loc_B7
		nop	word ptr [eax+eax+00h]

loc_80:					; CODE XREF: _ASN1_i2d_bio+98j
		test	eax, eax
		jle	short loc_AF
		add	edi, eax
		sub	esi, eax
		push	esi
		lea	eax, [ebx+edi]
		push	eax
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, esi
		jnz	short loc_80
		push	ebx
		call	_CRYPTO_free
		mov	eax, [esp+1Ch+var_8]
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_AF:					; CODE XREF: _ASN1_i2d_bio+82j
		mov	[esp+18h+var_8], 0

loc_B7:					; CODE XREF: _ASN1_i2d_bio+78j
		push	ebx
		call	_CRYPTO_free
		mov	eax, [esp+1Ch+var_8]
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
_ASN1_i2d_bio	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0CCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_i2d_fp
_ASN1_i2d_fp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_FA
		push	49h ; 'I'
		push	offset ??_C@_0BJ@PMCGIHAB@?4?2crypto?2asn1?2a_i2d_fp?4c?$AA@ ; ".\\crypto\\asn1\\a_i2d_fp.c"
		push	7
		push	75h ; 'u'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_FA:					; CODE XREF: _ASN1_i2d_fp+13j
		push	esi
		push	[esp+8+arg_4]
		push	0
		push	6Ah ; 'j'
		push	edi
		call	_BIO_ctrl
		push	[esp+18h+arg_8]
		push	edi
		push	[esp+20h+arg_0]
		call	_ASN1_i2d_bio
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 20h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_ASN1_i2d_fp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 128h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_item_i2d_bio
_ASN1_item_i2d_bio proc	near		; CODE XREF: _ASN1_item_i2d_fp+49p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		push	ebp
		push	esi
		push	edi
		push	[esp+10h+arg_0]
		lea	eax, [esp+14h+var_4]
		mov	[esp+14h+var_4], 0
		xor	edi, edi
		push	eax
		push	[esp+18h+arg_8]
		lea	ebp, [edi+1]
		call	_ASN1_item_i2d
		mov	esi, eax
		add	esp, 0Ch
		mov	eax, [esp+10h+var_4]
		test	eax, eax
		jnz	short loc_183
		push	8Ch ; 'Œ'
		push	offset ??_C@_0BJ@PMCGIHAB@?4?2crypto?2asn1?2a_i2d_fp?4c?$AA@ ; ".\\crypto\\asn1\\a_i2d_fp.c"
		push	41h ; 'A'
		push	0C0h ; 'À'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_183:				; CODE XREF: _ASN1_item_i2d_bio+37j
		push	ebx
		mov	ebx, [esp+14h+arg_4]
		push	esi
		push	eax
		push	ebx
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, esi
		jz	short loc_1CB
		nop

loc_198:				; CODE XREF: _ASN1_item_i2d_bio+8Bj
		test	eax, eax
		jle	short loc_1C9
		sub	esi, eax
		add	edi, eax
		mov	eax, [esp+14h+var_4]
		push	esi
		add	eax, edi
		push	eax
		push	ebx
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, esi
		jnz	short loc_198
		push	[esp+14h+var_4]
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, ebp
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1C9:				; CODE XREF: _ASN1_item_i2d_bio+72j
		xor	ebp, ebp

loc_1CB:				; CODE XREF: _ASN1_item_i2d_bio+6Dj
		push	[esp+14h+var_4]
		call	_CRYPTO_free
		add	esp, 4
		mov	eax, ebp
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ecx
		retn
_ASN1_item_i2d_bio endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ASN1_item_i2d_fp
_ASN1_item_i2d_fp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_211
		push	7Bh ; '{'
		push	offset ??_C@_0BJ@PMCGIHAB@?4?2crypto?2asn1?2a_i2d_fp?4c?$AA@ ; ".\\crypto\\asn1\\a_i2d_fp.c"
		push	7
		push	0C1h ; 'Á'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_211:				; CODE XREF: _ASN1_item_i2d_fp+13j
		push	esi
		push	[esp+8+arg_4]
		push	0
		push	6Ah ; 'j'
		push	edi
		call	_BIO_ctrl
		push	[esp+18h+arg_8]
		push	edi
		push	[esp+20h+arg_0]
		call	_ASN1_item_i2d_bio
		push	edi
		mov	esi, eax
		call	_BIO_free
		add	esp, 20h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_ASN1_item_i2d_fp endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 240h
; COMDAT (pick any)
		public ??_C@_0BJ@PMCGIHAB@?4?2crypto?2asn1?2a_i2d_fp?4c?$AA@
; `string'
??_C@_0BJ@PMCGIHAB@?4?2crypto?2asn1?2a_i2d_fp?4c?$AA@ db '.\crypto\asn1\a_i2d_fp.c',0
					; DATA XREF: _ASN1_i2d_bio+26o
					; _ASN1_i2d_bio+3Co ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _ASN1_i2d_bio+2Cp
		extrn _CRYPTO_free:near	; CODE XREF: _ASN1_i2d_bio+9Bp
					; _ASN1_i2d_bio+B8p ...
		extrn _BIO_s_file:near	; CODE XREF: _ASN1_i2d_fp+1p
					; _ASN1_item_i2d_fp+1p
		extrn _BIO_new:near	; CODE XREF: _ASN1_i2d_fp+7p
					; _ASN1_item_i2d_fp+7p
		extrn _BIO_free:near	; CODE XREF: _ASN1_i2d_fp+4Ep
					; _ASN1_item_i2d_fp+51p
		extrn _BIO_write:near	; CODE XREF: _ASN1_i2d_bio+6Ep
					; _ASN1_i2d_bio+8Ep ...
		extrn _BIO_ctrl:near	; CODE XREF: _ASN1_i2d_fp+38p
					; _ASN1_item_i2d_fp+3Bp
		extrn _ERR_put_error:near ; CODE XREF: _ASN1_i2d_bio+47p
					; _ASN1_i2d_fp+22p ...
		extrn _ASN1_item_i2d:near ; CODE XREF: _ASN1_item_i2d_bio+27p
		extrn __chkstk:near	; CODE XREF: _ASN1_i2d_bio+5p
					; _ASN1_item_i2d_bio+5p


		end
