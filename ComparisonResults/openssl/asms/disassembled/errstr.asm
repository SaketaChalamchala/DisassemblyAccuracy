;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	F06BF997A75199E788D9B787898DADC4
; Input	CRC32 :	76CE58C8

; File Name   :	C:\compspace\Diff\openssl\obj\errstr.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_printf_options
___local_stdio_printf_options proc near	; CODE XREF: __vfprintf_l+10p
					; _printf+19p
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
		retn
___local_stdio_printf_options endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public ___local_stdio_scanf_options
___local_stdio_scanf_options proc near	; CODE XREF: __vsscanf_l+12p
					; _sscanf+11p
		mov	eax, offset ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
		retn
___local_stdio_scanf_options endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList)
		public __vfprintf_l
__vfprintf_l	proc near

File		= dword	ptr  4
Format		= dword	ptr  8
Locale		= dword	ptr  0Ch
ArgList		= dword	ptr  10h

		push	[esp+ArgList]
		push	[esp+4+Locale]
		push	[esp+8+Format]
		push	[esp+0Ch+File]
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		retn
__vfprintf_l	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 34h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public __vsscanf_l
__vsscanf_l	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	0FFFFFFFFh
		push	[esp+10h+arg_0]
		call	___local_stdio_scanf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vsscanf
		add	esp, 1Ch
		retn
__vsscanf_l	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _errstr_main
_errstr_main	proc near

var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= byte ptr -104h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 10Ch
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+10Ch+var_4], eax
		push	ebx
		push	ebp
		mov	ebp, [esp+114h+arg_4]
		push	esi
		push	edi
		xor	edi, edi
		cmp	dword ptr ds:_bio_err, edi
		jnz	short loc_BB
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		add	esp, 4
		mov	dword ptr ds:_bio_err, eax
		test	eax, eax
		jz	short loc_BB
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		push	eax
		push	10h
		push	6Ah ; 'j'
		push	dword ptr ds:_bio_err
		call	_BIO_ctrl
		add	esp, 14h

loc_BB:					; CODE XREF: _errstr_main+2Bj
					; _errstr_main+42j
		call	_SSL_load_error_strings
		mov	ebx, [esp+11Ch+arg_0]
		cmp	ebx, 1
		jle	loc_170
		lea	eax, [ebp+4]
		mov	ecx, offset ??_C@_06JJGNDLGC@?9stats?$AA@ ; "-stats"
		mov	[esp+11Ch+var_10C], eax
		mov	eax, [eax]

loc_DE:					; CODE XREF: _errstr_main+9Cj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_FE
		test	dl, dl
		jz	short loc_FA
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_FE
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_DE

loc_FA:					; CODE XREF: _errstr_main+8Aj
		xor	eax, eax
		jmp	short loc_103
; ---------------------------------------------------------------------------

loc_FE:					; CODE XREF: _errstr_main+86j
					; _errstr_main+92j
		sbb	eax, eax
		or	eax, 1

loc_103:				; CODE XREF: _errstr_main+A0j
		test	eax, eax
		jnz	short loc_170
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_16B
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		push	eax
		push	0
		push	6Ah ; 'j'
		push	esi
		call	_BIO_ctrl
		add	esp, 14h
		test	eax, eax
		jz	short loc_162
		push	esi
		call	_ERR_get_string_table
		push	eax
		call	_lh_node_stats_bio
		add	esp, 8
		push	esi
		call	_ERR_get_string_table
		push	eax
		call	_lh_stats_bio
		add	esp, 8
		push	esi
		call	_ERR_get_string_table
		push	eax
		call	_lh_node_usage_stats_bio
		add	esp, 8

loc_162:				; CODE XREF: _errstr_main+D7j
		push	esi
		call	_BIO_free_all
		add	esp, 4

loc_16B:				; CODE XREF: _errstr_main+BDj
		mov	ebp, [esp+11Ch+var_10C]
		dec	ebx

loc_170:				; CODE XREF: _errstr_main+6Ej
					; _errstr_main+A9j
		mov	esi, 1
		cmp	ebx, esi
		jle	short loc_1DE
		nop	dword ptr [eax]

loc_17C:				; CODE XREF: _errstr_main+180j
		lea	eax, [esp+11Ch+var_108]
		push	eax
		push	offset ??_C@_03OPHMLOFF@?$CFlx?$AA@ ; "%lx"
		push	dword ptr [ebp+esi*4+0]	; Src
		call	_sscanf
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1BD
		push	100h
		lea	eax, [esp+120h+var_104]
		push	eax
		push	[esp+124h+var_108]
		call	_ERR_error_string_n
		lea	eax, [esp+128h+var_104]
		push	eax
		push	offset ??_C@_03OFAPEBGM@?$CFs?6?$AA@ ; "%s\n"
		call	_printf
		add	esp, 14h
		jmp	short loc_1D9
; ---------------------------------------------------------------------------

loc_1BD:				; CODE XREF: _errstr_main+138j
		push	dword ptr [ebp+esi*4+0]
		push	offset ??_C@_0BE@OFIIPFHK@?$CFs?3?5bad?5error?5code?6?$AA@ ; "%s: bad error code\n"
		call	_printf
		push	offset ??_C@_0CE@DKEECCNJ@usage?3?5errstr?5?$FL?9stats?$FN?5?$DMerrno?$DO?5?4@ ; "usage: errstr	[-stats] <errno> ...\n"
		call	_printf
		add	esp, 0Ch
		inc	edi

loc_1D9:				; CODE XREF: _errstr_main+15Fj
		inc	esi
		cmp	esi, ebx
		jl	short loc_17C

loc_1DE:				; CODE XREF: _errstr_main+11Bj
		mov	ecx, [esp+11Ch+var_4]
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 10Ch
		retn
_errstr_main	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1FCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int printf(const char	*Format, ...)
		public _printf
_printf		proc near		; CODE XREF: _errstr_main+157p
					; _errstr_main+16Ap ...

Format		= dword	ptr  4
arg_4		= byte ptr  8

		push	esi
		mov	esi, [esp+4+Format]
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		add	esp, 4
		lea	ecx, [esp+4+arg_4]
		push	ecx
		push	0
		push	esi
		push	eax
		call	___local_stdio_printf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vfprintf
		add	esp, 18h
		pop	esi
		retn
_printf		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 22Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int sscanf(const char	*Src, const char *Format, ...)
		public _sscanf
_sscanf		proc near		; CODE XREF: _errstr_main+12Ep

Src		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= byte ptr  0Ch

		lea	eax, [esp+arg_8]
		push	eax
		push	0
		push	[esp+8+Format]
		push	0FFFFFFFFh
		push	[esp+10h+Src]
		call	___local_stdio_scanf_options
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		call	dword ptr ds:__imp____stdio_common_vsscanf
		add	esp, 1Ch
		retn
_sscanf		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 254h
; COMDAT (pick any)
		public ??_C@_06JJGNDLGC@?9stats?$AA@
; `string'
??_C@_06JJGNDLGC@?9stats?$AA@ db '-stats',0 ; DATA XREF: _errstr_main+77o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 25Ch
; COMDAT (pick any)
		public ??_C@_03OPHMLOFF@?$CFlx?$AA@
; char `string'[4]
??_C@_03OPHMLOFF@?$CFlx?$AA@ db	'%lx',0 ; DATA XREF: _errstr_main+125o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 260h
; COMDAT (pick any)
		public ??_C@_03OFAPEBGM@?$CFs?6?$AA@
; char `string'[4]
??_C@_03OFAPEBGM@?$CFs?6?$AA@ db '%s',0Ah,0 ; DATA XREF: _errstr_main+152o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 264h
; COMDAT (pick any)
		public ??_C@_0BE@OFIIPFHK@?$CFs?3?5bad?5error?5code?6?$AA@
; char `string'[]
??_C@_0BE@OFIIPFHK@?$CFs?3?5bad?5error?5code?6?$AA@ db '%s: bad error code',0Ah,0
					; DATA XREF: _errstr_main+165o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 278h
; COMDAT (pick any)
		public ??_C@_0CE@DKEECCNJ@usage?3?5errstr?5?$FL?9stats?$FN?5?$DMerrno?$DO?5?4@
; char `string'[]
??_C@_0CE@DKEECCNJ@usage?3?5errstr?5?$FL?9stats?$FN?5?$DMerrno?$DO?5?4@	db 'usage: errstr [-stats] <errno> ...',0Ah,0
					; DATA XREF: _errstr_main+16Fo
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _errstr_main+46p
					; _errstr_main+C1p ...
		extrn __imp____stdio_common_vfprintf:near ; CODE XREF: __vfprintf_l+1Ap
					; _printf+23p
					; DATA XREF: ...
		extrn __imp____stdio_common_vsscanf:near ; CODE	XREF: __vsscanf_l+1Cp
					; _sscanf+1Bp
					; DATA XREF: ...
		extrn _BIO_s_file:near	; CODE XREF: _errstr_main+2Dp
					; _errstr_main+ABp
		extrn _BIO_new:near	; CODE XREF: _errstr_main+33p
					; _errstr_main+B1p
		extrn _BIO_ctrl:near	; CODE XREF: _errstr_main+57p
					; _errstr_main+CDp
		extrn _BIO_free_all:near ; CODE	XREF: _errstr_main+107p
		extrn _lh_stats_bio:near ; CODE	XREF: _errstr_main+EFp
		extrn _lh_node_stats_bio:near ;	CODE XREF: _errstr_main+E0p
		extrn _lh_node_usage_stats_bio:near ; CODE XREF: _errstr_main+FEp
		extrn _ERR_error_string_n:near ; CODE XREF: _errstr_main+148p
		extrn _ERR_get_string_table:near ; CODE	XREF: _errstr_main+DAp
					; _errstr_main+E9p ...
		extrn _SSL_load_error_strings:near ; CODE XREF:	_errstr_main:loc_BBp
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _errstr_main+191p
		extrn __chkstk:near	; CODE XREF: _errstr_main+5p
; `__local_stdio_printf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:near
					; DATA XREF: ___local_stdio_printf_optionso
; `__local_stdio_scanf_options'::`2'::_OptionsStorage
		extrn ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:near
					; DATA XREF: ___local_stdio_scanf_optionso
		extrn _bio_err:near	; DATA XREF: _errstr_main+25r
					; _errstr_main+3Bw ...
		extrn ___security_cookie:near ;	DATA XREF: _errstr_main+Ar


		end
