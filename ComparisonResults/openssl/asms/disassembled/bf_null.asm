;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	B7C8681BA20F3CC4D20A03E93076EA72
; Input	CRC32 :	C99D7F36

; File Name   :	C:\compspace\Diff\openssl\obj\bf_null.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nullf_write	proc near		; DATA XREF: .data:00000168o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		test	eax, eax
		jz	short loc_41
		mov	ecx, [esp+arg_8]
		test	ecx, ecx
		jle	short loc_41
		push	edi
		mov	edi, [esp+4+arg_0]
		mov	edx, [edi+24h]
		test	edx, edx
		jnz	short loc_20
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_20:					; CODE XREF: _nullf_write+1Aj
		push	esi
		push	ecx
		push	eax
		push	edx
		call	_BIO_write
		push	0Fh
		push	edi
		mov	esi, eax
		call	_BIO_clear_flags
		push	edi
		call	_BIO_copy_next_retry
		add	esp, 18h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_41:					; CODE XREF: _nullf_write+6j
					; _nullf_write+Ej
		xor	eax, eax
		retn
_nullf_write	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 44h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nullf_read	proc near		; DATA XREF: .data:0000016Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		test	eax, eax
		jnz	short loc_4D
		retn
; ---------------------------------------------------------------------------

loc_4D:					; CODE XREF: _nullf_read+6j
		push	edi
		mov	edi, [esp+4+arg_0]
		mov	ecx, [edi+24h]
		test	ecx, ecx
		jnz	short loc_5D
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_5D:					; CODE XREF: _nullf_read+13j
		push	esi
		push	[esp+8+arg_8]
		push	eax
		push	ecx
		call	_BIO_read
		push	0Fh
		push	edi
		mov	esi, eax
		call	_BIO_clear_flags
		push	edi
		call	_BIO_copy_next_retry
		add	esp, 18h
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_nullf_read	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 84h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nullf_puts	proc near		; DATA XREF: .data:00000170o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+24h]
		test	eax, eax
		jnz	short loc_90
		retn
; ---------------------------------------------------------------------------

loc_90:					; CODE XREF: _nullf_puts+9j
		mov	[esp+arg_0], eax
		jmp	_BIO_puts
_nullf_puts	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nullf_gets	proc near		; DATA XREF: .data:00000174o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+24h]
		test	eax, eax
		jnz	short loc_A8
		retn
; ---------------------------------------------------------------------------

loc_A8:					; CODE XREF: _nullf_gets+9j
		mov	[esp+arg_0], eax
		jmp	_BIO_gets
_nullf_gets	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nullf_ctrl	proc near		; DATA XREF: .data:00000178o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		mov	edi, [esp+4+arg_0]
		mov	ecx, [edi+24h]
		test	ecx, ecx
		jnz	short loc_C4
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_C4:					; CODE XREF: _nullf_ctrl+Aj
		mov	eax, [esp+4+arg_4]
		push	esi
		cmp	eax, 0Ch
		jz	short loc_114
		cmp	eax, 65h ; 'e'
		jz	short loc_EA
		push	[esp+8+arg_C]
		push	[esp+0Ch+arg_8]
		push	eax
		push	ecx
		call	_BIO_ctrl
		add	esp, 10h
		mov	esi, eax
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_EA:					; CODE XREF: _nullf_ctrl+1Dj
		push	0Fh
		push	edi
		call	_BIO_clear_flags
		push	[esp+10h+arg_C]
		push	[esp+14h+arg_8]
		push	65h ; 'e'
		push	dword ptr [edi+24h]
		call	_BIO_ctrl
		push	edi
		mov	esi, eax
		call	_BIO_copy_next_retry
		add	esp, 1Ch
		mov	eax, esi
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_114:				; CODE XREF: _nullf_ctrl+18j
		xor	esi, esi
		mov	eax, esi
		pop	esi
		pop	edi
		retn
_nullf_ctrl	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 11Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nullf_new	proc near		; DATA XREF: .data:0000017Co

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax+0Ch], 1
		mov	dword ptr [eax+20h], 0
		mov	dword ptr [eax+14h], 0
		mov	eax, 1
		retn
_nullf_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 13Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nullf_free	proc near		; DATA XREF: .data:00000180o

arg_0		= dword	ptr  4

		xor	eax, eax
		cmp	[esp+arg_0], eax
		setnz	al
		retn
_nullf_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 148h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_nullf_callback_ctrl proc near		; DATA XREF: .data:00000184o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+24h]
		test	eax, eax
		jnz	short loc_154
		retn
; ---------------------------------------------------------------------------

loc_154:				; CODE XREF: _nullf_callback_ctrl+9j
		mov	[esp+arg_0], eax
		jmp	_BIO_callback_ctrl
_nullf_callback_ctrl endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 160h
_methods_nullf	dd 211h			; DATA XREF: _BIO_f_nullo
		dd offset ??_C@_0M@DNNAMBAG@NULL?5filter?$AA@ ;	"NULL filter"
		dd offset _nullf_write
		dd offset _nullf_read
		dd offset _nullf_puts
		dd offset _nullf_gets
		dd offset _nullf_ctrl
		dd offset _nullf_new
		dd offset _nullf_free
		dd offset _nullf_callback_ctrl
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 188h
; COMDAT (pick any)
		public ??_C@_0M@DNNAMBAG@NULL?5filter?$AA@
; `string'
??_C@_0M@DNNAMBAG@NULL?5filter?$AA@ db 'NULL filter',0 ; DATA XREF: .data:00000164o
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 194h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_f_null
_BIO_f_null	proc near
		mov	eax, offset _methods_nullf
		retn
_BIO_f_null	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _BIO_clear_flags:near ; CODE XREF: _nullf_write+2Ep
					; _nullf_read+2Ap ...
		extrn _BIO_read:near	; CODE XREF: _nullf_read+20p
		extrn _BIO_gets:near	; CODE XREF: _nullf_gets+10j
		extrn _BIO_write:near	; CODE XREF: _nullf_write+24p
		extrn _BIO_puts:near	; CODE XREF: _nullf_puts+10j
		extrn _BIO_ctrl:near	; CODE XREF: _nullf_ctrl+29p
					; _nullf_ctrl+4Bp
		extrn _BIO_callback_ctrl:near ;	CODE XREF: _nullf_callback_ctrl+10j
		extrn _BIO_copy_next_retry:near	; CODE XREF: _nullf_write+34p
					; _nullf_read+30p ...


		end
