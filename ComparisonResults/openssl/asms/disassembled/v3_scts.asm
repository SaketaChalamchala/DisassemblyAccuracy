;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	6A9437A0FCFCF7B66E6CBE74D357BFB1
; Input	CRC32 :	3821E308

; File Name   :	C:\compspace\Diff\openssl\obj\v3_scts.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_SCT_LIST_free	proc near		; DATA XREF: .rdata:00000484o
					; .rdata:000004BCo

arg_0		= dword	ptr  4

		push	offset _SCT_free
		push	[esp+4+arg_0]
		call	_sk_pop_free
		add	esp, 8
		retn
_SCT_LIST_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 14h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_d2i_SCT_LIST	proc near		; DATA XREF: .rdata:00000488o
					; .rdata:000004C0o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 10h
		call	__chkstk
		mov	eax, [esp+10h+arg_4]
		push	[esp+10h+arg_8]
		mov	[esp+14h+var_C], 0
		mov	[esp+14h+var_10], 0
		mov	eax, [eax]
		mov	[esp+14h+var_4], eax
		lea	eax, [esp+14h+var_4]
		push	eax
		lea	eax, [esp+18h+var_C]
		push	eax
		call	_d2i_ASN1_OCTET_STRING
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_56
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_56:					; CODE XREF: _d2i_SCT_LIST+3Cj
		push	ebp
		mov	ebp, [esp+14h+var_C]
		mov	edx, [ebp+0]
		cmp	edx, 2
		jl	$done$39
		mov	ebp, [ebp+8]
		push	ebx
		movzx	eax, byte ptr [ebp+0]
		movzx	ecx, byte ptr [ebp+1]
		add	ebp, 2
		shl	ax, 8
		or	cx, ax
		movzx	ebx, cx
		lea	ecx, [edx-2]
		cmp	ebx, ecx
		jnz	loc_26F
		call	_sk_new_null
		mov	[esp+18h+var_10], eax
		test	eax, eax
		jz	loc_26F
		test	bx, bx
		jz	loc_26F
		push	esi
		push	edi

loc_A7:					; CODE XREF: _d2i_SCT_LIST+22Ej
		cmp	bx, 2
		jb	$err$40
		movzx	eax, byte ptr [ebp+0]
		add	ebx, 0FFFEh
		movzx	ecx, byte ptr [ebp+1]
		add	ebp, 2
		shl	ax, 8
		or	cx, ax
		movzx	edi, cx
		cmp	edi, 1
		jb	$err$40
		cmp	di, bx
		ja	$err$40
		push	0D9h ; 'Ù'
		push	offset ??_C@_0BK@FHBPONIB@?4?2crypto?2x509v3?2v3_scts?4c?$AA@ ;	".\\crypto\\x509v3\\v3_scts.c"
		push	28h ; '('
		sub	ebx, edi
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	$err$40
		push	esi
		push	[esp+24h+var_10]
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	loc_24A
		push	0E1h ; 'á'
		mov	eax, edi
		push	offset ??_C@_0BK@FHBPONIB@?4?2crypto?2x509v3?2v3_scts?4c?$AA@ ;	".\\crypto\\x509v3\\v3_scts.c"
		push	eax
		mov	[esp+2Ch+var_8], eax
		call	_CRYPTO_malloc
		add	esp, 0Ch
		mov	[esi], eax
		test	eax, eax
		jz	$err$40
		push	edi		; Size
		push	ebp		; Src
		push	eax		; Dst
		call	_memcpy
		mov	ecx, [esi]
		add	esp, 0Ch
		mov	[esi+4], di
		add	ebp, edi
		mov	al, [ecx]
		inc	ecx
		mov	[esi+6], al
		test	al, al
		jnz	loc_23F
		cmp	edi, 2Bh ; '+'
		jb	$err$40
		mov	[esi+8], ecx
		mov	eax, 20h ; ' '
		mov	[esi+0Ch], ax
		add	edi, 0FFD5h
		movzx	eax, byte ptr [ecx+20h]
		cdq
		shl	eax, 18h
		mov	[esi+14h], eax
		mov	dword ptr [esi+10h], 0
		movzx	eax, byte ptr [ecx+21h]
		cdq
		shl	eax, 10h
		or	[esi+14h], eax
		movzx	eax, byte ptr [ecx+22h]
		cdq
		shl	eax, 8
		or	[esi+14h], eax
		movzx	eax, byte ptr [ecx+23h]
		cdq
		or	[esi+14h], eax
		movzx	eax, byte ptr [ecx+24h]
		cdq
		shld	edx, eax, 18h
		or	[esi+14h], edx
		shl	eax, 18h
		or	[esi+10h], eax
		movzx	eax, byte ptr [ecx+25h]
		cdq
		shld	edx, eax, 10h
		or	[esi+14h], edx
		shl	eax, 10h
		or	[esi+10h], eax
		movzx	eax, byte ptr [ecx+26h]
		cdq
		shld	edx, eax, 8
		or	[esi+14h], edx
		shl	eax, 8
		or	[esi+10h], eax
		movzx	eax, byte ptr [ecx+27h]
		cdq
		or	[esi+14h], edx
		or	[esi+10h], eax
		movzx	edx, byte ptr [ecx+28h]
		movzx	eax, byte ptr [ecx+29h]
		add	ecx, 2Ah ; '*'
		shl	dx, 8
		or	dx, ax
		movzx	edx, dx
		cmp	di, dx
		jb	short $err$40
		mov	[esi+18h], ecx
		sub	edi, edx
		add	ecx, edx
		mov	[esi+1Ch], dx
		cmp	di, 4
		jb	short $err$40
		movzx	eax, byte ptr [ecx]
		mov	[esi+1Eh], al
		movzx	eax, byte ptr [ecx+1]
		mov	[esi+1Fh], al
		movzx	edx, byte ptr [ecx+2]
		movzx	eax, byte ptr [ecx+3]
		shl	dx, 8
		or	dx, ax
		lea	eax, [edi-4]
		movzx	edx, dx
		cmp	ax, dx
		jnz	short $err$40
		add	ecx, 4
		mov	[esi+24h], dx
		mov	[esi+20h], ecx

loc_23F:				; CODE XREF: _d2i_SCT_LIST+13Dj
		test	bx, bx
		jnz	loc_A7
		jmp	short loc_26D
; ---------------------------------------------------------------------------

loc_24A:				; CODE XREF: _d2i_SCT_LIST+F9j
		push	esi
		call	_CRYPTO_free
		add	esp, 4

$err$40:				; CODE XREF: _d2i_SCT_LIST+97j
					; _d2i_SCT_LIST+BBj ...
		mov	eax, [esp+20h+var_10]
		push	offset _SCT_free
		push	eax
		call	_sk_pop_free
		add	esp, 8
		mov	[esp+20h+var_10], 0

loc_26D:				; CODE XREF: _d2i_SCT_LIST+234j
		pop	edi
		pop	esi

loc_26F:				; CODE XREF: _d2i_SCT_LIST+71j
					; _d2i_SCT_LIST+82j ...
		pop	ebx

$done$39:				; CODE XREF: _d2i_SCT_LIST+4Dj
		push	[esp+14h+var_C]
		call	_ASN1_OCTET_STRING_free
		mov	ecx, [esp+18h+arg_4]
		add	esp, 4
		mov	eax, [esp+14h+var_4]
		mov	[ecx], eax
		mov	eax, [esp+14h+var_10]
		pop	ebp
		add	esp, 10h
		retn
_d2i_SCT_LIST	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 290h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_i2r_SCT_LIST	proc near		; DATA XREF: .rdata:000004A0o
					; .rdata:000004D8o

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	edi
		mov	edi, [esp+8+arg_4]
		xor	ebx, ebx
		push	edi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	loc_46C
		push	ebp
		mov	ebp, [esp+0Ch+arg_C]
		push	esi
		mov	esi, [esp+10h+arg_8]
		add	ebp, 4

loc_2B6:				; CODE XREF: _i2r_SCT_LIST+1D4j
		push	ebx
		push	edi
		call	_sk_value
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	[esp+1Ch+arg_C]
		mov	edi, eax
		push	offset ??_C@_0CB@JJCHKHF@?$CF?$CKsSigned?5Certificate?5Timestamp?3@ ; "%*sSigned Certificate Timestamp:"
		push	esi
		call	_BIO_printf
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	ebp
		push	offset ??_C@_0BB@EKJFPHMD@?6?$CF?$CKsVersion?5?5?5?3?5?$AA@ ; "\n%*sVersion   :	"
		push	esi
		call	_BIO_printf
		add	esp, 28h
		cmp	byte ptr [edi+6], 0
		jnz	loc_407
		push	offset ??_C@_05KKMNMBM@v1?$CI0?$CJ?$AA@	; "v1(0)"
		push	esi
		call	_BIO_printf
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	ebp
		push	offset ??_C@_0BB@JBKBHIBL@?6?$CF?$CKsLog?5ID?5?5?5?5?3?5?$AA@ ;	"\n%*sLog ID	: "
		push	esi
		call	_BIO_printf
		movzx	eax, word ptr [edi+0Ch]
		mov	ecx, [esp+28h+arg_C]
		push	eax
		push	dword ptr [edi+8]
		push	10h
		lea	eax, [ecx+10h]
		push	eax
		push	esi
		call	_BIO_hex_string
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	ebp
		push	offset ??_C@_0BB@FNNPINKJ@?6?$CF?$CKsTimestamp?5?3?5?$AA@ ; "\n%*sTimestamp : "
		push	esi
		call	_BIO_printf
		push	dword ptr [edi+14h]
		push	dword ptr [edi+10h]
		push	esi
		call	_timestamp_print
		add	esp, 48h
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	ebp
		push	offset ??_C@_0BB@FJENGDNH@?6?$CF?$CKsExtensions?3?5?$AA@ ; "\n%*sExtensions: "
		push	esi
		call	_BIO_printf
		movzx	eax, word ptr [edi+1Ch]
		add	esp, 10h
		test	ax, ax
		jnz	short loc_372
		push	offset ??_C@_04CGFJFPFD@none?$AA@ ; "none"
		push	esi
		call	_BIO_printf
		add	esp, 8
		jmp	short loc_389
; ---------------------------------------------------------------------------

loc_372:				; CODE XREF: _i2r_SCT_LIST+D0j
		mov	ecx, [esp+10h+arg_C]
		push	eax
		push	dword ptr [edi+18h]
		push	10h
		lea	eax, [ecx+10h]
		push	eax
		push	esi
		call	_BIO_hex_string
		add	esp, 14h

loc_389:				; CODE XREF: _i2r_SCT_LIST+E0j
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	ebp
		push	offset ??_C@_0BB@HBMEFCBE@?6?$CF?$CKsSignature?5?3?5?$AA@ ; "\n%*sSignature : "
		push	esi
		call	_BIO_printf
		mov	cl, [edi+1Eh]
		add	esp, 10h
		mov	al, [edi+1Fh]
		cmp	cl, 4
		jnz	short loc_3D6
		cmp	al, 1
		jnz	short loc_3BF
		mov	eax, 29Ch
		push	eax
		call	_OBJ_nid2ln

loc_3B7:				; DATA XREF: .rdata:_v3_ct_sctso
		push	eax

loc_3B8:				; DATA XREF: .rdata:000004ACo
		push	offset ??_C@_02DKCKIIND@?$CFs?$AA@ ; `string'
		jmp	short loc_3E3
; ---------------------------------------------------------------------------

loc_3BF:				; CODE XREF: _i2r_SCT_LIST+11Aj
		cmp	al, 3
		jnz	short loc_3D6
		mov	eax, 31Ah
		push	eax
		call	_OBJ_nid2ln
		push	eax
		push	offset ??_C@_02DKCKIIND@?$CFs?$AA@ ; `string'
		jmp	short loc_3E3
; ---------------------------------------------------------------------------

loc_3D6:				; CODE XREF: _i2r_SCT_LIST+116j
					; _i2r_SCT_LIST+131j
		movzx	eax, al
		push	eax
		movzx	eax, cl
		push	eax
		push	offset ??_C@_08CHPLPPFG@?$CF02X?$CF02X?$AA@ ; "%02X%02X"

loc_3E3:				; CODE XREF: _i2r_SCT_LIST+12Dj
					; _i2r_SCT_LIST+144j
		push	esi
		call	_BIO_printf
		add	esp, 10h
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		push	ebp
		push	offset ??_C@_0BB@NLMIAEL@?6?$CF?$CKs?5?5?5?5?5?5?5?5?5?5?5?5?$AA@ ; "\n%*s	      "
		push	esi
		call	_BIO_printf
		movzx	eax, word ptr [edi+24h]
		push	eax
		push	dword ptr [edi+20h]
		jmp	short loc_426
; ---------------------------------------------------------------------------

loc_407:				; CODE XREF: _i2r_SCT_LIST+5Bj
		mov	eax, [esp+10h+arg_C]
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	`string'
		add	eax, 10h
		push	eax
		push	offset ??_C@_0M@HJKJELMN@unknown?6?$CF?$CKs?$AA@ ; "unknown\n%*s"
		push	esi
		call	_BIO_printf
		movzx	eax, word ptr [edi+4]
		push	eax
		push	dword ptr [edi]

loc_426:				; CODE XREF: _i2r_SCT_LIST+175j
		mov	eax, [esp+28h+arg_C]
		push	10h
		add	eax, 10h
		push	eax
		push	esi
		call	_BIO_hex_string
		mov	edi, [esp+34h+arg_4]
		add	esp, 24h
		inc	ebx
		push	edi
		call	_sk_num
		add	esp, 4
		cmp	ebx, eax
		jge	short loc_459
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; "\n"
		push	esi
		call	_BIO_printf
		add	esp, 8

loc_459:				; CODE XREF: _i2r_SCT_LIST+1B9j
		push	edi
		call	_sk_num
		add	esp, 4
		cmp	ebx, eax
		jl	loc_2B6
		pop	esi
		pop	ebp

loc_46C:				; CODE XREF: _i2r_SCT_LIST+13j
		pop	edi
		mov	eax, 1
		pop	ebx
		retn
_i2r_SCT_LIST	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 474h
		public _v3_ct_scts
_v3_ct_scts	dd offset loc_3B7
		dd 3 dup(0)
		dd offset _SCT_LIST_free
		dd offset _d2i_SCT_LIST
		align 20h
		dd offset _i2r_SCT_LIST
		dd 2 dup(0)
		dd offset loc_3B8+2
		dd 3 dup(0)
		dd offset _SCT_LIST_free
		dd offset _d2i_SCT_LIST
		dd 5 dup(0)
		dd offset _i2r_SCT_LIST
		dd 2 dup(0)
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_SCT_free	proc near		; DATA XREF: _SCT_LIST_freeo
					; _d2i_SCT_LIST+243o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_505
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_4FC
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_4FC:				; CODE XREF: _SCT_free+Dj
		push	esi
		call	_CRYPTO_free
		add	esp, 4

loc_505:				; CODE XREF: _SCT_free+7j
		pop	esi
		retn
_SCT_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 508h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_timestamp_print proc near		; CODE XREF: _i2r_SCT_LIST+ADp

var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 1Ch
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+1Ch+var_4], eax
		push	ebx
		push	ebp
		mov	ebp, [esp+24h+arg_0]
		push	esi
		push	edi
		call	_ASN1_GENERALIZEDTIME_new
		mov	edi, [esp+2Ch+arg_8]
		mov	ebx, [esp+2Ch+arg_4]
		push	0
		push	5265C00h
		push	edi
		push	ebx
		mov	[esp+3Ch+var_1C], eax
		call	__aulldiv
		push	0
		push	5265C00h
		mov	esi, eax
		push	edx
		push	esi
		call	__allmul
		mov	ecx, ebx
		sub	ecx, eax
		mov	eax, edi
		push	0
		push	3E8h
		sbb	eax, edx
		push	eax
		push	ecx
		call	__aulldiv
		push	eax
		push	esi
		mov	esi, [esp+34h+var_1C]
		push	0
		push	0
		push	esi
		call	_ASN1_GENERALIZEDTIME_adj
		add	esp, 14h
		push	0
		push	3E8h
		push	edi
		push	ebx
		call	__aulldiv
		imul	eax, 3E8h
		sub	ebx, eax
		push	ebx
		push	esi
		call	_ASN1_STRING_data
		add	esp, 4
		push	eax
		push	offset ??_C@_0M@ICLHDAKN@?$CF?414s?4?$CF03dZ?$AA@ ; "%.14s.%03dZ"
		lea	eax, [esp+38h+var_18]
		push	14h
		push	eax
		call	_BIO_snprintf
		lea	eax, [esp+40h+var_18]
		push	eax
		push	esi
		call	_ASN1_GENERALIZEDTIME_set_string
		push	esi
		push	ebp
		call	_ASN1_GENERALIZEDTIME_print
		push	esi
		call	_ASN1_GENERALIZEDTIME_free
		mov	ecx, [esp+54h+var_4]
		add	esp, 28h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1Ch
		retn
_timestamp_print endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_tls12_signature_print proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	cl, byte ptr [esp+arg_4]
		mov	al, byte ptr [esp+arg_8]
		cmp	cl, 4
		jnz	short loc_61B
		cmp	al, 1
		jnz	short loc_5F8
		mov	eax, 29Ch
		jmp	short loc_601
; ---------------------------------------------------------------------------

loc_5F8:				; CODE XREF: _tls12_signature_print+Fj
		cmp	al, 3
		jnz	short loc_61B
		mov	eax, 31Ah

loc_601:				; CODE XREF: _tls12_signature_print+16j
		push	eax
		call	_OBJ_nid2ln
		add	esp, 4
		mov	[esp+arg_8], eax
		mov	[esp+arg_4], offset ??_C@_02DKCKIIND@?$CFs?$AA@	; `string'
		jmp	_BIO_printf
; ---------------------------------------------------------------------------

loc_61B:				; CODE XREF: _tls12_signature_print+Bj
					; _tls12_signature_print+1Aj
		movzx	eax, al
		push	eax
		movzx	eax, cl
		push	eax
		push	offset ??_C@_08CHPLPPFG@?$CF02X?$CF02X?$AA@ ; "%02X%02X"
		push	[esp+0Ch+arg_0]
		call	_BIO_printf
		add	esp, 10h
		retn
_tls12_signature_print endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 638h
; COMDAT (pick any)
		public ??_C@_08CHPLPPFG@?$CF02X?$CF02X?$AA@
; `string'
??_C@_08CHPLPPFG@?$CF02X?$CF02X?$AA@ db	'%02X%02X',0 ; DATA XREF: _i2r_SCT_LIST+14Eo
					; _tls12_signature_print+43o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 644h
; COMDAT (pick any)
		public ??_C@_02DKCKIIND@?$CFs?$AA@
; `string'
??_C@_02DKCKIIND@?$CFs?$AA@ db 25h, 73h, 0 ; DATA XREF:	_i2r_SCT_LIST:loc_3B8o
					; _i2r_SCT_LIST+13Fo ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 648h
; COMDAT (pick any)
		public ??_C@_0M@ICLHDAKN@?$CF?414s?4?$CF03dZ?$AA@
; `string'
??_C@_0M@ICLHDAKN@?$CF?414s?4?$CF03dZ?$AA@ db '%.14s.%03dZ',0
					; DATA XREF: _timestamp_print+96o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 654h
; COMDAT (pick any)
		public ??_C@_0BK@FHBPONIB@?4?2crypto?2x509v3?2v3_scts?4c?$AA@
; `string'
??_C@_0BK@FHBPONIB@?4?2crypto?2x509v3?2v3_scts?4c?$AA@ db '.\crypto\x509v3\v3_scts.c',0
					; DATA XREF: _d2i_SCT_LIST+CFo
					; _d2i_SCT_LIST+106o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 670h
; COMDAT (pick any)
		public ??_C@_00CNPNBAHC@?$AA@
; `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: _i2r_SCT_LIST+2Do
					; _i2r_SCT_LIST+43o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 674h
; COMDAT (pick any)
		public ??_C@_0CB@JJCHKHF@?$CF?$CKsSigned?5Certificate?5Timestamp?3@
; `string'
??_C@_0CB@JJCHKHF@?$CF?$CKsSigned?5Certificate?5Timestamp?3@ db	'%*sSigned Certificate Timestamp:',0
					; DATA XREF: _i2r_SCT_LIST+38o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 698h
; COMDAT (pick any)
		public ??_C@_0BB@EKJFPHMD@?6?$CF?$CKsVersion?5?5?5?3?5?$AA@
; `string'
??_C@_0BB@EKJFPHMD@?6?$CF?$CKsVersion?5?5?5?3?5?$AA@ db	0Ah ; DATA XREF: _i2r_SCT_LIST+49o
		db '%*sVersion   : ',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6ACh
; COMDAT (pick any)
		public ??_C@_05KKMNMBM@v1?$CI0?$CJ?$AA@
; `string'
??_C@_05KKMNMBM@v1?$CI0?$CJ?$AA@ db 'v1(0)',0 ; DATA XREF: _i2r_SCT_LIST+61o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6B4h
; COMDAT (pick any)
		public ??_C@_0BB@JBKBHIBL@?6?$CF?$CKsLog?5ID?5?5?5?5?3?5?$AA@
; `string'
??_C@_0BB@JBKBHIBL@?6?$CF?$CKsLog?5ID?5?5?5?5?3?5?$AA@ db 0Ah ;	DATA XREF: _i2r_SCT_LIST+72o
		db '%*sLog ID    : ',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6C8h
; COMDAT (pick any)
		public ??_C@_0BB@FNNPINKJ@?6?$CF?$CKsTimestamp?5?3?5?$AA@
; `string'
??_C@_0BB@FNNPINKJ@?6?$CF?$CKsTimestamp?5?3?5?$AA@ db 0Ah ; DATA XREF: _i2r_SCT_LIST+9Bo
		db '%*sTimestamp : ',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6DCh
; COMDAT (pick any)
		public ??_C@_0BB@FJENGDNH@?6?$CF?$CKsExtensions?3?5?$AA@
; `string'
??_C@_0BB@FJENGDNH@?6?$CF?$CKsExtensions?3?5?$AA@ db 0Ah ; DATA	XREF: _i2r_SCT_LIST+BBo
		db '%*sExtensions: ',0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6F0h
; COMDAT (pick any)
		public ??_C@_04CGFJFPFD@none?$AA@
; `string'
??_C@_04CGFJFPFD@none?$AA@ db 'none',0  ; DATA XREF: _i2r_SCT_LIST+D2o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6F8h
; COMDAT (pick any)
		public ??_C@_0BB@HBMEFCBE@?6?$CF?$CKsSignature?5?3?5?$AA@
; `string'
??_C@_0BB@HBMEFCBE@?6?$CF?$CKsSignature?5?3?5?$AA@ db 0Ah ; DATA XREF: _i2r_SCT_LIST+FFo
		db '%*sSignature : ',0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 70Ch
; COMDAT (pick any)
		public ??_C@_0BB@NLMIAEL@?6?$CF?$CKs?5?5?5?5?5?5?5?5?5?5?5?5?$AA@
; `string'
??_C@_0BB@NLMIAEL@?6?$CF?$CKs?5?5?5?5?5?5?5?5?5?5?5?5?$AA@ db 0Ah
					; DATA XREF: _i2r_SCT_LIST+162o
		db '%*s            ',0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 720h
; COMDAT (pick any)
		public ??_C@_0M@HJKJELMN@unknown?6?$CF?$CKs?$AA@
; `string'
??_C@_0M@HJKJELMN@unknown?6?$CF?$CKs?$AA@ db 'unknown',0Ah ; DATA XREF: _i2r_SCT_LIST+184o
		db '%*s',0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 72Ch
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; `string'
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah,0	; DATA XREF: _i2r_SCT_LIST+1BBo
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _sk_num:near	; CODE XREF: _i2r_SCT_LIST+9p
					; _i2r_SCT_LIST+1AFp ...
		extrn _sk_value:near	; CODE XREF: _i2r_SCT_LIST+28p
		extrn _sk_new_null:near	; CODE XREF: _d2i_SCT_LIST+77p
		extrn _sk_pop_free:near	; CODE XREF: _SCT_LIST_free+9p
					; _d2i_SCT_LIST+249p
		extrn _sk_push:near	; CODE XREF: _d2i_SCT_LIST+EFp
		extrn _CRYPTO_malloc:near ; CODE XREF: _d2i_SCT_LIST+D8p
					; _d2i_SCT_LIST+110p
		extrn _CRYPTO_free:near	; CODE XREF: _d2i_SCT_LIST+237p
					; _SCT_free+10p ...
		extrn _BIO_hex_string:near ; CODE XREF:	_i2r_SCT_LIST+90p
					; _i2r_SCT_LIST+F1p ...
		extrn _BIO_printf:near	; CODE XREF: _i2r_SCT_LIST+3Ep
					; _i2r_SCT_LIST+4Fp ...
		extrn _BIO_snprintf:near ; CODE	XREF: _timestamp_print+A2p
		extrn _ASN1_STRING_data:near ; CODE XREF: _timestamp_print+8Dp
		extrn _ASN1_GENERALIZEDTIME_adj:near ; CODE XREF: _timestamp_print+6Dp
		extrn _ASN1_GENERALIZEDTIME_set_string:near
					; CODE XREF: _timestamp_print+ADp
		extrn _ASN1_OCTET_STRING_free:near ; CODE XREF:	_d2i_SCT_LIST+260p
		extrn _d2i_ASN1_OCTET_STRING:near ; CODE XREF: _d2i_SCT_LIST+32p
		extrn _ASN1_GENERALIZEDTIME_new:near ; CODE XREF: _timestamp_print+1Dp
		extrn _ASN1_GENERALIZEDTIME_free:near ;	CODE XREF: _timestamp_print+BAp
		extrn _ASN1_GENERALIZEDTIME_print:near ; CODE XREF: _timestamp_print+B4p
		extrn _OBJ_nid2ln:near	; CODE XREF: _i2r_SCT_LIST+122p
					; _i2r_SCT_LIST+139p ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _timestamp_print+CCp
		extrn __allmul:near	; CODE XREF: _timestamp_print+47p
		extrn __aulldiv:near	; CODE XREF: _timestamp_print+37p
					; _timestamp_print+5Dp	...
		extrn __chkstk:near	; CODE XREF: _d2i_SCT_LIST+5p
					; _timestamp_print+5p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _d2i_SCT_LIST+125p
		extrn ___security_cookie:near ;	DATA XREF: _timestamp_print+Ar


		end
