;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	C72C978D1715B9440991344EB253879A
; Input	CRC32 :	F84AE290

; File Name   :	C:\compspace\Diff\openssl\obj\rsa.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _rsa_main
_rsa_main	proc near

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
ErrMsg		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 4Ch ; 'L'
		call	__chkstk
		xor	eax, eax
		mov	[esp+4Ch+var_38], 2
		push	ebx
		push	ebp
		xor	ebp, ebp
		mov	[esp+54h+var_44], eax
		push	edi
		mov	[esp+58h+var_40], eax
		xor	edi, edi
		mov	[esp+58h+var_20], eax
		mov	ebx, 1
		mov	[esp+58h+var_24], eax
		mov	[esp+58h+var_34], eax
		mov	[esp+58h+var_30], eax
		mov	[esp+58h+var_14], eax
		mov	eax, dword ptr ds:_bio_err
		mov	[esp+58h+var_48], ebp
		mov	[esp+58h+var_8], ebp
		mov	[esp+58h+var_18], ebp
		mov	[esp+58h+var_28], ebp
		mov	[esp+58h+var_10], ebp
		mov	[esp+58h+var_4C], edi
		test	eax, eax
		jnz	short loc_94
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		add	esp, 4
		mov	dword ptr ds:_bio_err, eax
		test	eax, eax
		jz	short loc_94
		push	2
		call	dword ptr ds:__imp____acrt_iob_func
		push	eax
		push	10h
		push	6Ah ; 'j'
		push	dword ptr ds:_bio_err
		call	_BIO_ctrl
		mov	eax, dword ptr ds:_bio_err
		add	esp, 14h

loc_94:					; CODE XREF: _rsa_main+5Bj
					; _rsa_main+72j
		push	0
		push	eax
		call	_load_config
		add	esp, 8
		test	eax, eax
		jz	loc_B5D
		mov	ebx, [esp+58h+arg_4]
		push	esi
		mov	esi, [esp+5Ch+arg_0]
		dec	esi
		mov	[esp+5Ch+var_2C], edi
		mov	eax, [ebx]
		add	ebx, 4
		mov	[esp+5Ch+ErrMsg], edi
		mov	[esp+5Ch+var_3C], 3
		mov	[esp+5Ch+var_C], 3
		mov	[esp+5Ch+var_4], eax
		cmp	esi, 1
		jl	loc_638
		nop	dword ptr [eax+eax+00h]

loc_E0:					; CODE XREF: _rsa_main+632j
		mov	edi, [ebx]
		mov	ecx, offset ??_C@_07CGGPPMGB@?9inform?$AA@ ; "-inform"
		mov	eax, edi
		nop	dword ptr [eax+00000000h]

loc_F0:					; CODE XREF: _rsa_main+10Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_110
		test	dl, dl
		jz	short loc_10C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_110
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_F0

loc_10C:				; CODE XREF: _rsa_main+F8j
		xor	eax, eax
		jmp	short loc_115
; ---------------------------------------------------------------------------

loc_110:				; CODE XREF: _rsa_main+F4j
					; _rsa_main+100j
		sbb	eax, eax
		or	eax, 1

loc_115:				; CODE XREF: _rsa_main+10Ej
		test	eax, eax
		jnz	short loc_13A
		dec	esi
		cmp	esi, 1
		jl	$bad$220
		push	dword ptr [ebx+4]
		add	ebx, 4
		call	_str2fmt
		add	esp, 4
		mov	[esp+5Ch+var_3C], eax
		jmp	loc_627
; ---------------------------------------------------------------------------

loc_13A:				; CODE XREF: _rsa_main+117j
		mov	ecx, offset ??_C@_08LPHBEAIF@?9outform?$AA@ ; "-outform"
		mov	eax, edi

loc_141:				; CODE XREF: _rsa_main+15Bj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_161
		test	dl, dl
		jz	short loc_15D
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_161
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_141

loc_15D:				; CODE XREF: _rsa_main+149j
		xor	eax, eax
		jmp	short loc_166
; ---------------------------------------------------------------------------

loc_161:				; CODE XREF: _rsa_main+145j
					; _rsa_main+151j
		sbb	eax, eax
		or	eax, 1

loc_166:				; CODE XREF: _rsa_main+15Fj
		test	eax, eax
		jnz	short loc_18B
		dec	esi
		cmp	esi, 1
		jl	$bad$220
		push	dword ptr [ebx+4]
		add	ebx, 4
		call	_str2fmt
		add	esp, 4
		mov	[esp+5Ch+var_C], eax
		jmp	loc_627
; ---------------------------------------------------------------------------

loc_18B:				; CODE XREF: _rsa_main+168j
		mov	ecx, offset ??_C@_03DAJLOBIG@?9in?$AA@ ; `string'
		mov	eax, edi

loc_192:				; CODE XREF: _rsa_main+1ACj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1B2
		test	dl, dl
		jz	short loc_1AE
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1B2
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_192

loc_1AE:				; CODE XREF: _rsa_main+19Aj
		xor	eax, eax
		jmp	short loc_1B7
; ---------------------------------------------------------------------------

loc_1B2:				; CODE XREF: _rsa_main+196j
					; _rsa_main+1A2j
		sbb	eax, eax
		or	eax, 1

loc_1B7:				; CODE XREF: _rsa_main+1B0j
		test	eax, eax
		jnz	short loc_1D4
		dec	esi
		cmp	esi, 1
		jl	$bad$220
		mov	edx, [ebx+4]
		add	ebx, 4
		mov	[esp+5Ch+var_2C], edx
		jmp	loc_627
; ---------------------------------------------------------------------------

loc_1D4:				; CODE XREF: _rsa_main+1B9j
		mov	ecx, offset ??_C@_04HKKABCEL@?9out?$AA@	; "-out"
		mov	eax, edi
		nop	dword ptr [eax+eax+00h]

loc_1E0:				; CODE XREF: _rsa_main+1FAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_200
		test	dl, dl
		jz	short loc_1FC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_200
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1E0

loc_1FC:				; CODE XREF: _rsa_main+1E8j
		xor	eax, eax
		jmp	short loc_205
; ---------------------------------------------------------------------------

loc_200:				; CODE XREF: _rsa_main+1E4j
					; _rsa_main+1F0j
		sbb	eax, eax
		or	eax, 1

loc_205:				; CODE XREF: _rsa_main+1FEj
		test	eax, eax
		jnz	short loc_222
		dec	esi
		cmp	esi, 1
		jl	$bad$220
		mov	edx, [ebx+4]
		add	ebx, 4
		mov	[esp+5Ch+ErrMsg], edx
		jmp	loc_627
; ---------------------------------------------------------------------------

loc_222:				; CODE XREF: _rsa_main+207j
		mov	ecx, offset ??_C@_07KMOOHICO@?9passin?$AA@ ; "-passin"
		mov	eax, edi
		nop	dword ptr [eax+00000000h]

loc_230:				; CODE XREF: _rsa_main+24Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_250
		test	dl, dl
		jz	short loc_24C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_250
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_230

loc_24C:				; CODE XREF: _rsa_main+238j
		xor	eax, eax
		jmp	short loc_255
; ---------------------------------------------------------------------------

loc_250:				; CODE XREF: _rsa_main+234j
					; _rsa_main+240j
		sbb	eax, eax
		or	eax, 1

loc_255:				; CODE XREF: _rsa_main+24Ej
		test	eax, eax
		jnz	short loc_272
		dec	esi
		cmp	esi, 1
		jl	$bad$220
		mov	eax, [ebx+4]
		add	ebx, 4
		mov	[esp+5Ch+var_20], eax
		jmp	loc_627
; ---------------------------------------------------------------------------

loc_272:				; CODE XREF: _rsa_main+257j
		mov	ecx, offset ??_C@_08KCDBEMAI@?9passout?$AA@ ; "-passout"
		mov	eax, edi
		nop	dword ptr [eax+00000000h]

loc_280:				; CODE XREF: _rsa_main+29Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_2A0
		test	dl, dl
		jz	short loc_29C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_2A0
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_280

loc_29C:				; CODE XREF: _rsa_main+288j
		xor	eax, eax
		jmp	short loc_2A5
; ---------------------------------------------------------------------------

loc_2A0:				; CODE XREF: _rsa_main+284j
					; _rsa_main+290j
		sbb	eax, eax
		or	eax, 1

loc_2A5:				; CODE XREF: _rsa_main+29Ej
		test	eax, eax
		jnz	short loc_2C2
		dec	esi
		cmp	esi, 1
		jl	$bad$220
		mov	eax, [ebx+4]
		add	ebx, 4
		mov	[esp+5Ch+var_24], eax
		jmp	loc_627
; ---------------------------------------------------------------------------

loc_2C2:				; CODE XREF: _rsa_main+2A7j
		mov	ecx, offset ??_C@_07CECBDAGF@?9engine?$AA@ ; "-engine"
		mov	eax, edi
		nop	dword ptr [eax+00000000h]

loc_2D0:				; CODE XREF: _rsa_main+2EAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_2F0
		test	dl, dl
		jz	short loc_2EC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_2F0
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_2D0

loc_2EC:				; CODE XREF: _rsa_main+2D8j
		xor	eax, eax
		jmp	short loc_2F5
; ---------------------------------------------------------------------------

loc_2F0:				; CODE XREF: _rsa_main+2D4j
					; _rsa_main+2E0j
		sbb	eax, eax
		or	eax, 1

loc_2F5:				; CODE XREF: _rsa_main+2EEj
		test	eax, eax
		jnz	short loc_312
		dec	esi
		cmp	esi, 1
		jl	$bad$220
		mov	edi, [ebx+4]
		add	ebx, 4
		mov	[esp+5Ch+var_4C], edi
		jmp	loc_62B
; ---------------------------------------------------------------------------

loc_312:				; CODE XREF: _rsa_main+2F7j
		mov	ecx, offset ??_C@_07LCILBEKO@?9sgckey?$AA@ ; "-sgckey"
		mov	eax, edi
		nop	dword ptr [eax+00000000h]

loc_320:				; CODE XREF: _rsa_main+33Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_340
		test	dl, dl
		jz	short loc_33C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_340
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_320

loc_33C:				; CODE XREF: _rsa_main+328j
		xor	eax, eax
		jmp	short loc_345
; ---------------------------------------------------------------------------

loc_340:				; CODE XREF: _rsa_main+324j
					; _rsa_main+330j
		sbb	eax, eax
		or	eax, 1

loc_345:				; CODE XREF: _rsa_main+33Ej
		test	eax, eax
		jnz	short loc_356
		mov	[esp+5Ch+var_48], 1
		jmp	loc_627
; ---------------------------------------------------------------------------

loc_356:				; CODE XREF: _rsa_main+347j
		mov	ecx, offset ??_C@_06NLLOJDKN@?9pubin?$AA@ ; "-pubin"
		mov	eax, edi
		nop	dword ptr [eax]

loc_360:				; CODE XREF: _rsa_main+37Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_380
		test	dl, dl
		jz	short loc_37C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_380
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_360

loc_37C:				; CODE XREF: _rsa_main+368j
		xor	eax, eax
		jmp	short loc_385
; ---------------------------------------------------------------------------

loc_380:				; CODE XREF: _rsa_main+364j
					; _rsa_main+370j
		sbb	eax, eax
		or	eax, 1

loc_385:				; CODE XREF: _rsa_main+37Ej
		test	eax, eax
		jnz	short loc_396
		mov	[esp+5Ch+var_44], 1
		jmp	loc_627
; ---------------------------------------------------------------------------

loc_396:				; CODE XREF: _rsa_main+387j
		mov	ecx, offset ??_C@_07NGPHMOHJ@?9pubout?$AA@ ; "-pubout"
		mov	eax, edi
		nop	dword ptr [eax]

loc_3A0:				; CODE XREF: _rsa_main+3BAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_3C0
		test	dl, dl
		jz	short loc_3BC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_3C0
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_3A0

loc_3BC:				; CODE XREF: _rsa_main+3A8j
		xor	eax, eax
		jmp	short loc_3C5
; ---------------------------------------------------------------------------

loc_3C0:				; CODE XREF: _rsa_main+3A4j
					; _rsa_main+3B0j
		sbb	eax, eax
		or	eax, 1

loc_3C5:				; CODE XREF: _rsa_main+3BEj
		test	eax, eax
		jnz	short loc_3D6
		mov	[esp+5Ch+var_40], 1
		jmp	loc_627
; ---------------------------------------------------------------------------

loc_3D6:				; CODE XREF: _rsa_main+3C7j
		mov	ecx, offset ??_C@_0BB@BLODOEPC@?9RSAPublicKey_in?$AA@ ;	"-RSAPublicKey_in"
		mov	eax, edi
		nop	dword ptr [eax]

loc_3E0:				; CODE XREF: _rsa_main+3FAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_400
		test	dl, dl
		jz	short loc_3FC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_400
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_3E0

loc_3FC:				; CODE XREF: _rsa_main+3E8j
		xor	eax, eax
		jmp	short loc_405
; ---------------------------------------------------------------------------

loc_400:				; CODE XREF: _rsa_main+3E4j
					; _rsa_main+3F0j
		sbb	eax, eax
		or	eax, 1

loc_405:				; CODE XREF: _rsa_main+3FEj
		test	eax, eax
		jnz	short loc_416
		mov	[esp+5Ch+var_44], 2
		jmp	loc_627
; ---------------------------------------------------------------------------

loc_416:				; CODE XREF: _rsa_main+407j
		mov	ecx, offset ??_C@_0BC@CNODNPGL@?9RSAPublicKey_out?$AA@ ; "-RSAPublicKey_out"
		mov	eax, edi
		nop	dword ptr [eax]

loc_420:				; CODE XREF: _rsa_main+43Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_440
		test	dl, dl
		jz	short loc_43C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_440
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_420

loc_43C:				; CODE XREF: _rsa_main+428j
		xor	eax, eax
		jmp	short loc_445
; ---------------------------------------------------------------------------

loc_440:				; CODE XREF: _rsa_main+424j
					; _rsa_main+430j
		sbb	eax, eax
		or	eax, 1

loc_445:				; CODE XREF: _rsa_main+43Ej
		test	eax, eax
		jnz	short loc_456
		mov	[esp+5Ch+var_40], 2
		jmp	loc_627
; ---------------------------------------------------------------------------

loc_456:				; CODE XREF: _rsa_main+447j
		mov	ecx, offset ??_C@_0M@HOBFOGIF@?9pvk?9strong?$AA@ ; "-pvk-strong"
		mov	eax, edi
		nop	dword ptr [eax]

loc_460:				; CODE XREF: _rsa_main+47Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_480
		test	dl, dl
		jz	short loc_47C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_480
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_460

loc_47C:				; CODE XREF: _rsa_main+468j
		xor	eax, eax
		jmp	short loc_485
; ---------------------------------------------------------------------------

loc_480:				; CODE XREF: _rsa_main+464j
					; _rsa_main+470j
		sbb	eax, eax
		or	eax, 1

loc_485:				; CODE XREF: _rsa_main+47Ej
		test	eax, eax
		jnz	short loc_496
		mov	[esp+5Ch+var_38], 2
		jmp	loc_627
; ---------------------------------------------------------------------------

loc_496:				; CODE XREF: _rsa_main+487j
		mov	ecx, offset ??_C@_09IGNPGCEJ@?9pvk?9weak?$AA@ ;	"-pvk-weak"
		mov	eax, edi
		nop	dword ptr [eax]

loc_4A0:				; CODE XREF: _rsa_main+4BAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_4C0
		test	dl, dl
		jz	short loc_4BC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_4C0
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_4A0

loc_4BC:				; CODE XREF: _rsa_main+4A8j
		xor	eax, eax
		jmp	short loc_4C5
; ---------------------------------------------------------------------------

loc_4C0:				; CODE XREF: _rsa_main+4A4j
					; _rsa_main+4B0j
		sbb	eax, eax
		or	eax, 1

loc_4C5:				; CODE XREF: _rsa_main+4BEj
		test	eax, eax
		jnz	short loc_4D6
		mov	[esp+5Ch+var_38], 1
		jmp	loc_627
; ---------------------------------------------------------------------------

loc_4D6:				; CODE XREF: _rsa_main+4C7j
		mov	ecx, offset ??_C@_09BBENBNGN@?9pvk?9none?$AA@ ;	"-pvk-none"
		mov	eax, edi
		nop	dword ptr [eax]

loc_4E0:				; CODE XREF: _rsa_main+4FAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_500
		test	dl, dl
		jz	short loc_4FC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_500
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_4E0

loc_4FC:				; CODE XREF: _rsa_main+4E8j
		xor	eax, eax
		jmp	short loc_505
; ---------------------------------------------------------------------------

loc_500:				; CODE XREF: _rsa_main+4E4j
					; _rsa_main+4F0j
		sbb	eax, eax
		or	eax, 1

loc_505:				; CODE XREF: _rsa_main+4FEj
		test	eax, eax
		jnz	short loc_512
		mov	[esp+5Ch+var_38], ebp
		jmp	loc_627
; ---------------------------------------------------------------------------

loc_512:				; CODE XREF: _rsa_main+507j
		mov	ecx, offset ??_C@_06JPEJAHHH@?9noout?$AA@ ; "-noout"
		mov	eax, edi
		nop	dword ptr [eax+00000000h]

loc_520:				; CODE XREF: _rsa_main+53Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_540
		test	dl, dl
		jz	short loc_53C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_540
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_520

loc_53C:				; CODE XREF: _rsa_main+528j
		xor	eax, eax
		jmp	short loc_545
; ---------------------------------------------------------------------------

loc_540:				; CODE XREF: _rsa_main+524j
					; _rsa_main+530j
		sbb	eax, eax
		or	eax, 1

loc_545:				; CODE XREF: _rsa_main+53Ej
		test	eax, eax
		jnz	short loc_556
		mov	[esp+5Ch+var_10], 1
		jmp	loc_627
; ---------------------------------------------------------------------------

loc_556:				; CODE XREF: _rsa_main+547j
		mov	ecx, offset ??_C@_05OEBEIMJA@?9text?$AA@ ; "-text"
		mov	eax, edi
		nop	dword ptr [eax]

loc_560:				; CODE XREF: _rsa_main+57Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_580
		test	dl, dl
		jz	short loc_57C
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_580
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_560

loc_57C:				; CODE XREF: _rsa_main+568j
		xor	eax, eax
		jmp	short loc_585
; ---------------------------------------------------------------------------

loc_580:				; CODE XREF: _rsa_main+564j
					; _rsa_main+570j
		sbb	eax, eax
		or	eax, 1

loc_585:				; CODE XREF: _rsa_main+57Ej
		test	eax, eax
		jnz	short loc_596
		mov	[esp+5Ch+var_18], 1
		jmp	loc_627
; ---------------------------------------------------------------------------

loc_596:				; CODE XREF: _rsa_main+587j
		mov	ecx, offset ??_C@_08NJNHONAF@?9modulus?$AA@ ; "-modulus"
		mov	eax, edi
		nop	dword ptr [eax]

loc_5A0:				; CODE XREF: _rsa_main+5BAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_5C0
		test	dl, dl
		jz	short loc_5BC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_5C0
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_5A0

loc_5BC:				; CODE XREF: _rsa_main+5A8j
		xor	eax, eax
		jmp	short loc_5C5
; ---------------------------------------------------------------------------

loc_5C0:				; CODE XREF: _rsa_main+5A4j
					; _rsa_main+5B0j
		sbb	eax, eax
		or	eax, 1

loc_5C5:				; CODE XREF: _rsa_main+5BEj
		test	eax, eax
		jnz	short loc_5D3
		mov	[esp+5Ch+var_14], 1
		jmp	short loc_627
; ---------------------------------------------------------------------------

loc_5D3:				; CODE XREF: _rsa_main+5C7j
		mov	ecx, offset ??_C@_06CLLLPJIB@?9check?$AA@ ; "-check"
		mov	eax, edi
		nop	word ptr [eax+eax+00h]

loc_5E0:				; CODE XREF: _rsa_main+5FAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_600
		test	dl, dl
		jz	short loc_5FC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_600
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_5E0

loc_5FC:				; CODE XREF: _rsa_main+5E8j
		xor	eax, eax
		jmp	short loc_605
; ---------------------------------------------------------------------------

loc_600:				; CODE XREF: _rsa_main+5E4j
					; _rsa_main+5F0j
		sbb	eax, eax
		or	eax, 1

loc_605:				; CODE XREF: _rsa_main+5FEj
		test	eax, eax
		jnz	short loc_613
		mov	[esp+5Ch+var_28], 1
		jmp	short loc_627
; ---------------------------------------------------------------------------

loc_613:				; CODE XREF: _rsa_main+607j
		lea	eax, [edi+1]
		push	eax
		call	_EVP_get_cipherbyname
		add	esp, 4
		mov	[esp+5Ch+var_8], eax
		test	eax, eax
		jz	short loc_67F

loc_627:				; CODE XREF: _rsa_main+135j
					; _rsa_main+186j ...
		mov	edi, [esp+5Ch+var_4C]

loc_62B:				; CODE XREF: _rsa_main+30Dj
		dec	esi
		add	ebx, 4
		cmp	esi, 1
		jge	loc_E0

loc_638:				; CODE XREF: _rsa_main+D5j
		call	_ERR_load_crypto_strings
		push	0
		push	edi
		push	dword ptr ds:_bio_err
		call	_setup_engine
		mov	edi, eax
		lea	eax, [esp+68h+var_30]
		push	eax
		lea	eax, [esp+6Ch+var_34]
		push	eax
		push	[esp+70h+var_24]
		push	[esp+74h+var_20]
		push	dword ptr ds:_bio_err
		call	_app_passwd
		add	esp, 20h
		test	eax, eax
		jnz	loc_82B
		push	offset ??_C@_0BJ@GIECAOMO@Error?5getting?5passwords?6?$AA@ ; "Error getting passwords\n"
		jmp	loc_83E
; ---------------------------------------------------------------------------

loc_67F:				; CODE XREF: _rsa_main+625j
		push	dword ptr [ebx]
		push	offset ??_C@_0BD@NFDCLIJC@unknown?5option?5?$CFs?6?$AA@	; "unknown option %s\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 0Ch

$bad$220:				; CODE XREF: _rsa_main+11Dj
					; _rsa_main+16Ej ...
		push	[esp+5Ch+var_4]
		push	offset ??_C@_0BP@OGEEJGDD@?$CFs?5?$FLoptions?$FN?5?$DMinfile?5?$DOoutfile?6?$AA@ ; "%s [options] <infile >outfile\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0BD@KHANLAHK@where?5options?5are?6?$AA@ ; "where options are\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0DE@FMGDDDIO@?5?9inform?5arg?5?5?5?5?5input?5format?5?9?5@	; " -inform arg	    input format - one of "...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0DF@HDJAAOHH@?5?9outform?5arg?5?5?5?5output?5format?5?9@ ;	" -outform arg	  output format	- one of"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0BN@CPNHCDE@?5?9in?5arg?5?5?5?5?5?5?5?5?5input?5file?6?$AA@ ; " -in arg	     input file\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0CJ@IFDJHJBE@?5?9sgckey?5?5?5?5?5?5?5?5?5Use?5IIS?5SGC?5key@ ; " -sgckey	      Use IIS SGC key format"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0DA@NCOFKKHG@?5?9passin?5arg?5?5?5?5?5input?5file?5pass@ ;	" -passin arg	  input	file pass phrase"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0BO@NEOEGBBD@?5?9out?5arg?5?5?5?5?5?5?5?5output?5file?6?$AA@ ; " -out arg	      output file\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 44h
		push	offset ??_C@_0DB@GKELOAFE@?5?9passout?5arg?5?5?5?5output?5file?5pas@ ; " -passout arg	 output	file pass phras"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0DC@FJEDCHJC@?5?9des?5?5?5?5?5?5?5?5?5?5?5?5encrypt?5PEM?5out@ ; "	-des		encrypt	PEM output wit"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0EI@GADKMKGK@?5?9des3?5?5?5?5?5?5?5?5?5?5?5encrypt?5PEM?5out@ ; " -des3	       encrypt PEM output wit"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0DD@MNCKNCPN@?5?9idea?5?5?5?5?5?5?5?5?5?5?5encrypt?5PEM?5out@ ; " -idea	       encrypt PEM output wit"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0DD@MOHKOOBN@?5?9seed?5?5?5?5?5?5?5?5?5?5?5encrypt?5PEM?5out@ ; " -seed	       encrypt PEM output wit"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0BM@MBDDJHIE@?5?9aes128?0?5?9aes192?0?5?9aes256?6?$AA@ ; "	-aes128, -aes192, -aes256\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0DC@NPDCOOCP@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5encrypt?5PEM?5out@ ; "		   encrypt PEM output wit"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0CL@PJKJLP@?5?9camellia128?0?5?9camellia192?0?5?9ca@ ; " -camellia128, -camellia192, -camellia2"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 40h
		push	offset ??_C@_0DH@MPIIFMKN@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5encrypt?5PEM?5out@ ; "		   encrypt PEM output wit"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0CI@KCMBBMNI@?5?9text?5?5?5?5?5?5?5?5?5?5?5print?5the?5key?5i@ ; "	-text		print the key in text\"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0CG@HBBCCFOB@?5?9noout?5?5?5?5?5?5?5?5?5?5don?8t?5print?5key@ ; " -noout	       don't print key out\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0CM@IENIFPI@?5?9modulus?5?5?5?5?5?5?5?5print?5the?5RSA?5k@	; " -modulus	    print the RSA key modu"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0CJ@HBGLJOIO@?5?9check?5?5?5?5?5?5?5?5?5?5verify?5key?5cons@ ; " -check	      verify key consistency"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0DE@BJKEJKAK@?5?9pubin?5?5?5?5?5?5?5?5?5?5expect?5a?5public@ ; " -pubin	      expect a public key in"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0CG@HGPMKHGB@?5?9pubout?5?5?5?5?5?5?5?5?5output?5a?5public@ ; " -pubout	     output a public key\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	offset ??_C@_0DM@CHMINMOP@?5?9engine?5e?5?5?5?5?5?5?5use?5engine?5e?0?5p@ ; " -engine e	      use engine e, possibly"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 40h
		mov	ebx, 1
		jmp	loc_B5C
; ---------------------------------------------------------------------------

loc_82B:				; CODE XREF: _rsa_main+66Fj
		mov	ebx, [esp+5Ch+var_44]
		cmp	[esp+5Ch+var_28], ebp
		jz	short loc_856
		test	ebx, ebx
		jz	short loc_856
		push	offset ??_C@_0CC@NEENNMBO@Only?5private?5keys?5can?5be?5checked@ ; "Only private keys can be checked\n"

loc_83E:				; CODE XREF: _rsa_main+67Aj
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 8
		mov	ebx, 1
		jmp	loc_B5C
; ---------------------------------------------------------------------------

loc_856:				; CODE XREF: _rsa_main+833j
					; _rsa_main+837j
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		add	esp, 4
		mov	esi, eax
		test	ebx, ebx
		jz	short loc_8BC
		or	eax, 0FFFFFFFFh
		cmp	ebx, 2
		jnz	short loc_88A
		mov	ecx, [esp+5Ch+var_3C]
		cmp	ecx, 3
		jnz	short loc_880
		lea	eax, [ebx+7]
		jmp	short loc_89E
; ---------------------------------------------------------------------------

loc_880:				; CODE XREF: _rsa_main+879j
		cmp	ecx, 1
		jnz	short loc_89E
		lea	eax, [ecx+9]
		jmp	short loc_89E
; ---------------------------------------------------------------------------

loc_88A:				; CODE XREF: _rsa_main+870j
		mov	eax, [esp+5Ch+var_3C]
		cmp	eax, 4
		jnz	short loc_89E
		cmp	[esp+5Ch+var_48], ebp
		jz	short loc_89E
		mov	eax, 8

loc_89E:				; CODE XREF: _rsa_main+87Ej
					; _rsa_main+883j ...
		push	offset ??_C@_0L@KEAMIOLD@Public?5Key?$AA@ ; "Public Key"
		push	edi
		push	[esp+64h+var_34]
		push	1
		push	eax
		push	[esp+70h+var_2C]
		push	dword ptr ds:_bio_err
		call	_load_pubkey
		jmp	short loc_8EC
; ---------------------------------------------------------------------------

loc_8BC:				; CODE XREF: _rsa_main+868j
		mov	eax, [esp+5Ch+var_3C]
		cmp	eax, 4
		jnz	short loc_8D0
		cmp	[esp+5Ch+var_48], ebp
		jz	short loc_8D0
		mov	eax, 8

loc_8D0:				; CODE XREF: _rsa_main+8C3j
					; _rsa_main+8C9j
		push	offset ??_C@_0M@NBDOOMPD@Private?5Key?$AA@ ; "Private Key"
		push	edi
		push	[esp+64h+var_34]
		push	1
		push	eax
		push	[esp+70h+var_2C]
		push	dword ptr ds:_bio_err
		call	_load_key

loc_8EC:				; CODE XREF: _rsa_main+8BAj
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		jz	short loc_900
		push	edi
		call	_EVP_PKEY_get1_RSA
		add	esp, 4
		mov	ebp, eax

loc_900:				; CODE XREF: _rsa_main+8F3j
		push	edi
		call	_EVP_PKEY_free
		add	esp, 4
		test	ebp, ebp
		jnz	short loc_925

loc_90D:				; CODE XREF: _rsa_main+A52j
					; _rsa_main+A5Fj
		push	dword ptr ds:_bio_err
		call	_ERR_print_errors
		add	esp, 4
		mov	ebx, 1
		jmp	$end$221
; ---------------------------------------------------------------------------

loc_925:				; CODE XREF: _rsa_main+90Bj
		mov	edi, [esp+5Ch+ErrMsg]
		test	edi, edi
		jnz	short loc_978
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		push	eax
		push	edi
		push	6Ah ; 'j'
		push	esi
		call	_BIO_ctrl
		add	esp, 14h

loc_942:				; CODE XREF: _rsa_main+988j
		cmp	[esp+5Ch+var_18], 0
		jz	short loc_99E
		push	0
		push	ebp
		push	esi
		call	_RSA_print
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_99E
		push	edi		; ErrMsg
		call	dword ptr ds:__imp__perror
		push	dword ptr ds:_bio_err
		call	_ERR_print_errors
		add	esp, 8
		mov	ebx, 1
		jmp	$end$221
; ---------------------------------------------------------------------------

loc_978:				; CODE XREF: _rsa_main+92Bj
		push	edi
		push	5
		push	6Ch ; 'l'
		push	esi
		call	_BIO_ctrl
		add	esp, 10h
		test	eax, eax
		jg	short loc_942
		push	edi		; ErrMsg
		call	dword ptr ds:__imp__perror
		add	esp, 4
		mov	ebx, 1
		jmp	$end$221
; ---------------------------------------------------------------------------

loc_99E:				; CODE XREF: _rsa_main+947j
					; _rsa_main+957j
		cmp	[esp+5Ch+var_14], 0
		jz	short loc_9C7
		push	offset ??_C@_08CHIKBNMH@Modulus?$DN?$AA@ ; "Modulus="
		push	esi
		call	_BIO_printf
		push	dword ptr [ebp+10h]
		push	esi
		call	_BN_print
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	esi
		call	_BIO_printf
		add	esp, 18h

loc_9C7:				; CODE XREF: _rsa_main+9A3j
		cmp	[esp+5Ch+var_28], 0
		jz	loc_A65
		push	ebp
		call	_RSA_check_key
		add	esp, 4
		cmp	eax, 1
		jnz	short loc_9F0
		push	offset ??_C@_0M@CCHECPKH@RSA?5key?5ok?6?$AA@ ; "RSA key	ok\n"
		push	esi
		call	_BIO_printf
		add	esp, 8
		jmp	short loc_A58
; ---------------------------------------------------------------------------

loc_9F0:				; CODE XREF: _rsa_main+9DEj
		test	eax, eax
		jnz	short loc_A4F
		call	_ERR_peek_error
		mov	ecx, eax
		test	ecx, ecx
		jz	short loc_A58
		nop

loc_A00:				; CODE XREF: _rsa_main+A4Bj
		mov	eax, ecx
		and	eax, 0FF000000h
		cmp	eax, 4000000h
		jnz	short loc_A58
		mov	eax, ecx
		and	eax, 0FFF000h
		cmp	eax, 7B000h
		jnz	short loc_A58
		mov	eax, ecx
		and	eax, 0FFFh
		cmp	eax, 41h ; 'A'
		jz	short loc_A58
		push	ecx
		call	_ERR_reason_error_string
		push	eax
		push	offset ??_C@_0BD@CNFIPBIH@RSA?5key?5error?3?5?$CFs?6?$AA@ ; "RSA key error: %s\n"
		push	esi
		call	_BIO_printf
		add	esp, 10h
		call	_ERR_get_error
		call	_ERR_peek_error
		mov	ecx, eax
		test	ecx, ecx
		jnz	short loc_A00
		jmp	short loc_A58
; ---------------------------------------------------------------------------

loc_A4F:				; CODE XREF: _rsa_main+9F2j
		cmp	eax, 0FFFFFFFFh
		jz	loc_90D

loc_A58:				; CODE XREF: _rsa_main+9EEj
					; _rsa_main+9FDj ...
		call	_ERR_peek_error
		test	eax, eax
		jnz	loc_90D

loc_A65:				; CODE XREF: _rsa_main+9CCj
		cmp	[esp+5Ch+var_10], 0
		jnz	loc_B40
		push	offset ??_C@_0BB@LCMALHAP@writing?5RSA?5key?6?$AA@ ; "writing RSA key\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		mov	edi, [esp+64h+var_C]
		add	esp, 8
		cmp	edi, 1
		jnz	short loc_AD0
		mov	eax, [esp+5Ch+var_40]
		test	eax, eax
		jnz	short loc_AA9
		test	ebx, ebx
		jnz	short loc_ABF
		push	ebp
		push	esi
		call	_i2d_RSAPrivateKey_bio
		add	esp, 8
		mov	edi, eax
		jmp	loc_C58
; ---------------------------------------------------------------------------

loc_AA9:				; CODE XREF: _rsa_main+A92j
		cmp	eax, 2
		jnz	short loc_ABF
		push	ebp
		push	esi
		call	_i2d_RSAPublicKey_bio
		add	esp, 8
		mov	edi, eax
		jmp	loc_C58
; ---------------------------------------------------------------------------

loc_ABF:				; CODE XREF: _rsa_main+A96j
					; _rsa_main+AACj
		push	ebp
		push	esi
		call	_i2d_RSA_PUBKEY_bio
		add	esp, 8
		mov	edi, eax
		jmp	loc_C58
; ---------------------------------------------------------------------------

loc_AD0:				; CODE XREF: _rsa_main+A8Aj
		cmp	edi, 4
		jnz	loc_B88
		push	[esp+5Ch+var_48]
		push	0
		push	0
		push	ebp
		call	_i2d_RSA_NET
		push	17Ch
		mov	ebx, eax
		push	offset ??_C@_0N@NGHJAGIN@?4?2apps?2rsa?4c?$AA@ ; ".\\apps\\rsa.c"
		push	ebx
		call	_CRYPTO_malloc
		mov	edi, eax
		add	esp, 1Ch
		mov	[esp+5Ch+var_4], edi
		test	edi, edi
		jnz	short loc_B1E
		push	offset ??_C@_0BL@GIPEOCEI@Memory?5allocation?5failure?6?$AA@ ; "Memory allocation failure\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 8
		lea	ebx, [edi+1]
		jmp	short $end$221
; ---------------------------------------------------------------------------

loc_B1E:				; CODE XREF: _rsa_main+B04j
		push	[esp+5Ch+var_48]
		lea	eax, [esp+60h+var_4]
		push	0
		push	eax
		push	ebp
		call	_i2d_RSA_NET
		push	ebx
		push	edi
		push	esi
		call	_BIO_write
		push	edi
		call	_CRYPTO_free
		add	esp, 20h

loc_B40:				; CODE XREF: _rsa_main+A6Aj
					; _rsa_main+C5Aj
		xor	ebx, ebx

$end$221:				; CODE XREF: _rsa_main+920j
					; _rsa_main+973j ...
		test	esi, esi
		jz	short loc_B4F
		push	esi
		call	_BIO_free_all
		add	esp, 4

loc_B4F:				; CODE XREF: _rsa_main+B44j
		test	ebp, ebp
		jz	short loc_B5C
		push	ebp
		call	_RSA_free
		add	esp, 4

loc_B5C:				; CODE XREF: _rsa_main+826j
					; _rsa_main+851j ...
		pop	esi

loc_B5D:				; CODE XREF: _rsa_main+A1j
		mov	eax, [esp+58h+var_34]
		test	eax, eax
		jz	short loc_B6E
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_B6E:				; CODE XREF: _rsa_main+B63j
		mov	ecx, [esp+58h+var_30]
		test	ecx, ecx
		jz	short loc_B7F
		push	ecx
		call	_CRYPTO_free
		add	esp, 4

loc_B7F:				; CODE XREF: _rsa_main+B74j
		pop	edi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_B88:				; CODE XREF: _rsa_main+AD3j
		cmp	edi, 3
		jnz	short loc_BD9
		mov	eax, [esp+5Ch+var_40]
		test	eax, eax
		jnz	short loc_BB5
		test	ebx, ebx
		jnz	short loc_BCB
		push	[esp+5Ch+var_30]
		push	ebx
		push	ebx
		push	ebx
		push	[esp+6Ch+var_8]
		push	ebp
		push	esi
		call	_PEM_write_bio_RSAPrivateKey
		add	esp, 1Ch
		mov	edi, eax
		jmp	loc_C58
; ---------------------------------------------------------------------------

loc_BB5:				; CODE XREF: _rsa_main+B93j
		cmp	eax, 2
		jnz	short loc_BCB
		push	ebp
		push	esi
		call	_PEM_write_bio_RSAPublicKey
		add	esp, 8
		mov	edi, eax
		jmp	loc_C58
; ---------------------------------------------------------------------------

loc_BCB:				; CODE XREF: _rsa_main+B97j
					; _rsa_main+BB8j
		push	ebp
		push	esi
		call	_PEM_write_bio_RSA_PUBKEY
		add	esp, 8
		mov	edi, eax
		jmp	short loc_C58
; ---------------------------------------------------------------------------

loc_BD9:				; CODE XREF: _rsa_main+B8Bj
		cmp	edi, 0Bh
		jz	short loc_C00
		cmp	edi, 0Ch
		jz	short loc_C00
		push	offset ??_C@_0CJ@JNEPIEPI@bad?5output?5format?5specified?5for?5@ ; "bad	output format specified	for outfile"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 8
		mov	ebx, 1
		jmp	$end$221
; ---------------------------------------------------------------------------

loc_C00:				; CODE XREF: _rsa_main+BDCj
					; _rsa_main+BE1j
		call	_EVP_PKEY_new
		mov	ebx, eax
		push	ebp
		push	ebx
		call	_EVP_PKEY_set1_RSA
		add	esp, 8
		cmp	edi, 0Ch
		jnz	short loc_C2C
		push	[esp+5Ch+var_30]
		push	0
		push	[esp+64h+var_38]
		push	ebx
		push	esi
		call	_i2b_PVK_bio
		add	esp, 14h
		jmp	short loc_C4D
; ---------------------------------------------------------------------------

loc_C2C:				; CODE XREF: _rsa_main+C14j
		mov	eax, [esp+5Ch+var_44]
		test	eax, eax
		jnz	short loc_C43
		cmp	[esp+5Ch+var_40], eax
		jnz	short loc_C43
		push	ebx
		push	esi
		call	_i2b_PrivateKey_bio
		jmp	short loc_C4A
; ---------------------------------------------------------------------------

loc_C43:				; CODE XREF: _rsa_main+C32j
					; _rsa_main+C38j
		push	ebx
		push	esi
		call	_i2b_PublicKey_bio

loc_C4A:				; CODE XREF: _rsa_main+C41j
		add	esp, 8

loc_C4D:				; CODE XREF: _rsa_main+C2Aj
		push	ebx
		mov	edi, eax
		call	_EVP_PKEY_free
		add	esp, 4

loc_C58:				; CODE XREF: _rsa_main+AA4j
					; _rsa_main+ABAj ...
		test	edi, edi
		jg	loc_B40
		push	offset ??_C@_0BF@PMEBFKMI@unable?5to?5write?5key?6?$AA@	; "unable to write key\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		push	dword ptr ds:_bio_err
		call	_ERR_print_errors
		add	esp, 0Ch
		mov	ebx, 1
		jmp	$end$221
_rsa_main	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C88h
; COMDAT (pick any)
		public ??_C@_07CGGPPMGB@?9inform?$AA@
; `string'
??_C@_07CGGPPMGB@?9inform?$AA@ db '-inform',0 ; DATA XREF: _rsa_main+E2o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C90h
; COMDAT (pick any)
		public ??_C@_08LPHBEAIF@?9outform?$AA@
; `string'
??_C@_08LPHBEAIF@?9outform?$AA@	db '-outform',0 ; DATA XREF: _rsa_main:loc_13Ao
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C9Ch
; COMDAT (pick any)
		public ??_C@_03DAJLOBIG@?9in?$AA@
; `string'
??_C@_03DAJLOBIG@?9in?$AA@ dd 6E692Dh	; DATA XREF: _rsa_main:loc_18Bo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CA0h
; COMDAT (pick any)
		public ??_C@_04HKKABCEL@?9out?$AA@
; `string'
??_C@_04HKKABCEL@?9out?$AA@ db '-out',0 ; DATA XREF: _rsa_main:loc_1D4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CA8h
; COMDAT (pick any)
		public ??_C@_07KMOOHICO@?9passin?$AA@
; `string'
??_C@_07KMOOHICO@?9passin?$AA@ db '-passin',0 ; DATA XREF: _rsa_main:loc_222o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CB0h
; COMDAT (pick any)
		public ??_C@_08KCDBEMAI@?9passout?$AA@
; `string'
??_C@_08KCDBEMAI@?9passout?$AA@	db '-passout',0 ; DATA XREF: _rsa_main:loc_272o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CBCh
; COMDAT (pick any)
		public ??_C@_07CECBDAGF@?9engine?$AA@
; `string'
??_C@_07CECBDAGF@?9engine?$AA@ db '-engine',0 ; DATA XREF: _rsa_main:loc_2C2o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CC4h
; COMDAT (pick any)
		public ??_C@_07LCILBEKO@?9sgckey?$AA@
; `string'
??_C@_07LCILBEKO@?9sgckey?$AA@ db '-sgckey',0 ; DATA XREF: _rsa_main:loc_312o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CCCh
; COMDAT (pick any)
		public ??_C@_06NLLOJDKN@?9pubin?$AA@
; `string'
??_C@_06NLLOJDKN@?9pubin?$AA@ db '-pubin',0 ; DATA XREF: _rsa_main:loc_356o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CD4h
; COMDAT (pick any)
		public ??_C@_07NGPHMOHJ@?9pubout?$AA@
; `string'
??_C@_07NGPHMOHJ@?9pubout?$AA@ db '-pubout',0 ; DATA XREF: _rsa_main:loc_396o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CDCh
; COMDAT (pick any)
		public ??_C@_0BB@BLODOEPC@?9RSAPublicKey_in?$AA@
; `string'
??_C@_0BB@BLODOEPC@?9RSAPublicKey_in?$AA@ db '-RSAPublicKey_in',0
					; DATA XREF: _rsa_main:loc_3D6o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CF0h
; COMDAT (pick any)
		public ??_C@_0BC@CNODNPGL@?9RSAPublicKey_out?$AA@
; `string'
??_C@_0BC@CNODNPGL@?9RSAPublicKey_out?$AA@ db '-RSAPublicKey_out',0
					; DATA XREF: _rsa_main:loc_416o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D04h
; COMDAT (pick any)
		public ??_C@_0M@HOBFOGIF@?9pvk?9strong?$AA@
; `string'
??_C@_0M@HOBFOGIF@?9pvk?9strong?$AA@ db	'-pvk-strong',0 ; DATA XREF: _rsa_main:loc_456o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D10h
; COMDAT (pick any)
		public ??_C@_09IGNPGCEJ@?9pvk?9weak?$AA@
; `string'
??_C@_09IGNPGCEJ@?9pvk?9weak?$AA@ db '-pvk-weak',0 ; DATA XREF: _rsa_main:loc_496o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D1Ch
; COMDAT (pick any)
		public ??_C@_09BBENBNGN@?9pvk?9none?$AA@
; `string'
??_C@_09BBENBNGN@?9pvk?9none?$AA@ db '-pvk-none',0 ; DATA XREF: _rsa_main:loc_4D6o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D28h
; COMDAT (pick any)
		public ??_C@_06JPEJAHHH@?9noout?$AA@
; `string'
??_C@_06JPEJAHHH@?9noout?$AA@ db '-noout',0 ; DATA XREF: _rsa_main:loc_512o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D30h
; COMDAT (pick any)
		public ??_C@_05OEBEIMJA@?9text?$AA@
; `string'
??_C@_05OEBEIMJA@?9text?$AA@ db	'-text',0 ; DATA XREF: _rsa_main:loc_556o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D38h
; COMDAT (pick any)
		public ??_C@_08NJNHONAF@?9modulus?$AA@
; `string'
??_C@_08NJNHONAF@?9modulus?$AA@	db '-modulus',0 ; DATA XREF: _rsa_main:loc_596o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D44h
; COMDAT (pick any)
		public ??_C@_06CLLLPJIB@?9check?$AA@
; `string'
??_C@_06CLLLPJIB@?9check?$AA@ db '-check',0 ; DATA XREF: _rsa_main:loc_5D3o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D4Ch
; COMDAT (pick any)
		public ??_C@_0BD@NFDCLIJC@unknown?5option?5?$CFs?6?$AA@
; `string'
??_C@_0BD@NFDCLIJC@unknown?5option?5?$CFs?6?$AA@ db 'unknown option %s',0Ah,0
					; DATA XREF: _rsa_main+681o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D60h
; COMDAT (pick any)
		public ??_C@_0BP@OGEEJGDD@?$CFs?5?$FLoptions?$FN?5?$DMinfile?5?$DOoutfile?6?$AA@
; `string'
??_C@_0BP@OGEEJGDD@?$CFs?5?$FLoptions?$FN?5?$DMinfile?5?$DOoutfile?6?$AA@ db '%s [options] <infile >outfile',0Ah,0
					; DATA XREF: _rsa_main+698o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D80h
; COMDAT (pick any)
		public ??_C@_0BD@KHANLAHK@where?5options?5are?6?$AA@
; `string'
??_C@_0BD@KHANLAHK@where?5options?5are?6?$AA@ db 'where options are',0Ah,0
					; DATA XREF: _rsa_main+6A8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D94h
; COMDAT (pick any)
		public ??_C@_0DE@FMGDDDIO@?5?9inform?5arg?5?5?5?5?5input?5format?5?9?5@
; `string'
??_C@_0DE@FMGDDDIO@?5?9inform?5arg?5?5?5?5?5input?5format?5?9?5@ db ' -inform arg     input format - one of DER NET PEM',0Ah,0
					; DATA XREF: _rsa_main+6B8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0DC8h
; COMDAT (pick any)
		public ??_C@_0DF@HDJAAOHH@?5?9outform?5arg?5?5?5?5output?5format?5?9@
; `string'
??_C@_0DF@HDJAAOHH@?5?9outform?5arg?5?5?5?5output?5format?5?9@ db ' -outform arg    output format - one of DER NET PEM',0Ah,0
					; DATA XREF: _rsa_main+6C8o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E00h
; COMDAT (pick any)
		public ??_C@_0BN@CPNHCDE@?5?9in?5arg?5?5?5?5?5?5?5?5?5input?5file?6?$AA@
; `string'
??_C@_0BN@CPNHCDE@?5?9in?5arg?5?5?5?5?5?5?5?5?5input?5file?6?$AA@ db ' -in arg         input file',0Ah,0
					; DATA XREF: _rsa_main+6D8o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E20h
; COMDAT (pick any)
		public ??_C@_0CJ@IFDJHJBE@?5?9sgckey?5?5?5?5?5?5?5?5?5Use?5IIS?5SGC?5key@
; `string'
??_C@_0CJ@IFDJHJBE@?5?9sgckey?5?5?5?5?5?5?5?5?5Use?5IIS?5SGC?5key@ db ' -sgckey         Use IIS SGC key format',0Ah,0
					; DATA XREF: _rsa_main+6E8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E4Ch
; COMDAT (pick any)
		public ??_C@_0DA@NCOFKKHG@?5?9passin?5arg?5?5?5?5?5input?5file?5pass@
; `string'
??_C@_0DA@NCOFKKHG@?5?9passin?5arg?5?5?5?5?5input?5file?5pass@ db ' -passin arg     input file pass phrase source',0Ah,0
					; DATA XREF: _rsa_main+6F8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E7Ch
; COMDAT (pick any)
		public ??_C@_0BO@NEOEGBBD@?5?9out?5arg?5?5?5?5?5?5?5?5output?5file?6?$AA@
; `string'
??_C@_0BO@NEOEGBBD@?5?9out?5arg?5?5?5?5?5?5?5?5output?5file?6?$AA@ db ' -out arg        output file',0Ah,0
					; DATA XREF: _rsa_main+708o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E9Ch
; COMDAT (pick any)
		public ??_C@_0DB@GKELOAFE@?5?9passout?5arg?5?5?5?5output?5file?5pas@
; `string'
??_C@_0DB@GKELOAFE@?5?9passout?5arg?5?5?5?5output?5file?5pas@ db ' -passout arg    output file pass phrase source',0Ah,0
					; DATA XREF: _rsa_main+71Bo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ED0h
; COMDAT (pick any)
		public ??_C@_0DC@FJEDCHJC@?5?9des?5?5?5?5?5?5?5?5?5?5?5?5encrypt?5PEM?5out@
; `string'
??_C@_0DC@FJEDCHJC@?5?9des?5?5?5?5?5?5?5?5?5?5?5?5encrypt?5PEM?5out@ db	' -des            encrypt PEM output with cbc des',0Ah,0
					; DATA XREF: _rsa_main+72Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 0F04h
; COMDAT (pick any)
		public ??_C@_0EI@GADKMKGK@?5?9des3?5?5?5?5?5?5?5?5?5?5?5encrypt?5PEM?5out@
; `string'
??_C@_0EI@GADKMKGK@?5?9des3?5?5?5?5?5?5?5?5?5?5?5encrypt?5PEM?5out@ db ' -des3           encrypt PEM output with ede cbc des using 168 bi'
					; DATA XREF: _rsa_main+73Bo
		db 't key',0Ah,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F4Ch
; COMDAT (pick any)
		public ??_C@_0DD@MNCKNCPN@?5?9idea?5?5?5?5?5?5?5?5?5?5?5encrypt?5PEM?5out@
; `string'
??_C@_0DD@MNCKNCPN@?5?9idea?5?5?5?5?5?5?5?5?5?5?5encrypt?5PEM?5out@ db ' -idea           encrypt PEM output with cbc idea',0Ah,0
					; DATA XREF: _rsa_main+74Bo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F80h
; COMDAT (pick any)
		public ??_C@_0DD@MOHKOOBN@?5?9seed?5?5?5?5?5?5?5?5?5?5?5encrypt?5PEM?5out@
; `string'
??_C@_0DD@MOHKOOBN@?5?9seed?5?5?5?5?5?5?5?5?5?5?5encrypt?5PEM?5out@ db ' -seed           encrypt PEM output with cbc seed',0Ah,0
					; DATA XREF: _rsa_main+75Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FB4h
; COMDAT (pick any)
		public ??_C@_0BM@MBDDJHIE@?5?9aes128?0?5?9aes192?0?5?9aes256?6?$AA@
; `string'
??_C@_0BM@MBDDJHIE@?5?9aes128?0?5?9aes192?0?5?9aes256?6?$AA@ db	' -aes128, -aes192, -aes256',0Ah,0
					; DATA XREF: _rsa_main+76Bo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FD0h
; COMDAT (pick any)
		public ??_C@_0DC@NPDCOOCP@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5encrypt?5PEM?5out@
; `string'
??_C@_0DC@NPDCOOCP@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5encrypt?5PEM?5out@	db '                 encrypt PEM output with cbc aes',0Ah,0
					; DATA XREF: _rsa_main+77Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1004h
; COMDAT (pick any)
		public ??_C@_0CL@PJKJLP@?5?9camellia128?0?5?9camellia192?0?5?9ca@
; `string'
??_C@_0CL@PJKJLP@?5?9camellia128?0?5?9camellia192?0?5?9ca@ db ' -camellia128, -camellia192, -camellia256',0Ah,0
					; DATA XREF: _rsa_main+78Bo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1030h
; COMDAT (pick any)
		public ??_C@_0DH@MPIIFMKN@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5encrypt?5PEM?5out@
; `string'
??_C@_0DH@MPIIFMKN@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5encrypt?5PEM?5out@	db '                 encrypt PEM output with cbc camellia',0Ah,0
					; DATA XREF: _rsa_main+79Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1068h
; COMDAT (pick any)
		public ??_C@_0CI@KCMBBMNI@?5?9text?5?5?5?5?5?5?5?5?5?5?5print?5the?5key?5i@
; `string'
??_C@_0CI@KCMBBMNI@?5?9text?5?5?5?5?5?5?5?5?5?5?5print?5the?5key?5i@ db	' -text           print the key in text',0Ah,0
					; DATA XREF: _rsa_main+7AEo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1090h
; COMDAT (pick any)
		public ??_C@_0CG@HBBCCFOB@?5?9noout?5?5?5?5?5?5?5?5?5?5don?8t?5print?5key@
; `string'
??_C@_0CG@HBBCCFOB@?5?9noout?5?5?5?5?5?5?5?5?5?5don?8t?5print?5key@ db ' -noout          don',27h,'t print key out',0Ah,0
					; DATA XREF: _rsa_main+7BEo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10B8h
; COMDAT (pick any)
		public ??_C@_0CM@IENIFPI@?5?9modulus?5?5?5?5?5?5?5?5print?5the?5RSA?5k@
; `string'
??_C@_0CM@IENIFPI@?5?9modulus?5?5?5?5?5?5?5?5print?5the?5RSA?5k@ db ' -modulus        print the RSA key modulus',0Ah,0
					; DATA XREF: _rsa_main+7CEo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10E4h
; COMDAT (pick any)
		public ??_C@_0CJ@HBGLJOIO@?5?9check?5?5?5?5?5?5?5?5?5?5verify?5key?5cons@
; `string'
??_C@_0CJ@HBGLJOIO@?5?9check?5?5?5?5?5?5?5?5?5?5verify?5key?5cons@ db ' -check          verify key consistency',0Ah,0
					; DATA XREF: _rsa_main+7DEo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1110h
; COMDAT (pick any)
		public ??_C@_0DE@BJKEJKAK@?5?9pubin?5?5?5?5?5?5?5?5?5?5expect?5a?5public@
; `string'
??_C@_0DE@BJKEJKAK@?5?9pubin?5?5?5?5?5?5?5?5?5?5expect?5a?5public@ db ' -pubin          expect a public key in input file',0Ah,0
					; DATA XREF: _rsa_main+7EEo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1144h
; COMDAT (pick any)
		public ??_C@_0CG@HGPMKHGB@?5?9pubout?5?5?5?5?5?5?5?5?5output?5a?5public@
; `string'
??_C@_0CG@HGPMKHGB@?5?9pubout?5?5?5?5?5?5?5?5?5output?5a?5public@ db ' -pubout         output a public key',0Ah,0
					; DATA XREF: _rsa_main+7FEo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 116Ch
; COMDAT (pick any)
		public ??_C@_0DM@CHMINMOP@?5?9engine?5e?5?5?5?5?5?5?5use?5engine?5e?0?5p@
; `string'
??_C@_0DM@CHMINMOP@?5?9engine?5e?5?5?5?5?5?5?5use?5engine?5e?0?5p@ db ' -engine e       use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _rsa_main+80Eo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11A8h
; COMDAT (pick any)
		public ??_C@_0BJ@GIECAOMO@Error?5getting?5passwords?6?$AA@
; `string'
??_C@_0BJ@GIECAOMO@Error?5getting?5passwords?6?$AA@ db 'Error getting passwords',0Ah,0
					; DATA XREF: _rsa_main+675o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11C4h
; COMDAT (pick any)
		public ??_C@_0CC@NEENNMBO@Only?5private?5keys?5can?5be?5checked@
; `string'
??_C@_0CC@NEENNMBO@Only?5private?5keys?5can?5be?5checked@ db 'Only private keys can be checked',0Ah,0
					; DATA XREF: _rsa_main+839o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11E8h
; COMDAT (pick any)
		public ??_C@_0L@KEAMIOLD@Public?5Key?$AA@
; `string'
??_C@_0L@KEAMIOLD@Public?5Key?$AA@ db 'Public Key',0 ; DATA XREF: _rsa_main:loc_89Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11F4h
; COMDAT (pick any)
		public ??_C@_0M@NBDOOMPD@Private?5Key?$AA@
; `string'
??_C@_0M@NBDOOMPD@Private?5Key?$AA@ db 'Private Key',0 ; DATA XREF: _rsa_main:loc_8D0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1200h
; COMDAT (pick any)
		public ??_C@_08CHIKBNMH@Modulus?$DN?$AA@
; `string'
??_C@_08CHIKBNMH@Modulus?$DN?$AA@ db 'Modulus=',0 ; DATA XREF: _rsa_main+9A5o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 120Ch
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; `string'
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah, 0	; DATA XREF: _rsa_main+9B9o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1210h
; COMDAT (pick any)
		public ??_C@_0M@CCHECPKH@RSA?5key?5ok?6?$AA@
; `string'
??_C@_0M@CCHECPKH@RSA?5key?5ok?6?$AA@ db 'RSA key ok',0Ah,0 ; DATA XREF: _rsa_main+9E0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 121Ch
; COMDAT (pick any)
		public ??_C@_0BD@CNFIPBIH@RSA?5key?5error?3?5?$CFs?6?$AA@
; `string'
??_C@_0BD@CNFIPBIH@RSA?5key?5error?3?5?$CFs?6?$AA@ db 'RSA key error: %s',0Ah,0
					; DATA XREF: _rsa_main+A2Fo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1230h
; COMDAT (pick any)
		public ??_C@_0BB@LCMALHAP@writing?5RSA?5key?6?$AA@
; `string'
??_C@_0BB@LCMALHAP@writing?5RSA?5key?6?$AA@ db 'writing RSA key',0Ah,0
					; DATA XREF: _rsa_main+A70o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1244h
; COMDAT (pick any)
		public ??_C@_0N@NGHJAGIN@?4?2apps?2rsa?4c?$AA@
; `string'
??_C@_0N@NGHJAGIN@?4?2apps?2rsa?4c?$AA@	db '.\apps\rsa.c',0 ; DATA XREF: _rsa_main+AEEo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1254h
; COMDAT (pick any)
		public ??_C@_0BL@GIPEOCEI@Memory?5allocation?5failure?6?$AA@
; `string'
??_C@_0BL@GIPEOCEI@Memory?5allocation?5failure?6?$AA@ db 'Memory allocation failure',0Ah,0
					; DATA XREF: _rsa_main+B06o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1270h
; COMDAT (pick any)
		public ??_C@_0CJ@JNEPIEPI@bad?5output?5format?5specified?5for?5@
; `string'
??_C@_0CJ@JNEPIEPI@bad?5output?5format?5specified?5for?5@ db 'bad output format specified for outfile',0Ah,0
					; DATA XREF: _rsa_main+BE3o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 129Ch
; COMDAT (pick any)
		public ??_C@_0BF@PMEBFKMI@unable?5to?5write?5key?6?$AA@
; `string'
??_C@_0BF@PMEBFKMI@unable?5to?5write?5key?6?$AA@ db 'unable to write key',0Ah,0
					; DATA XREF: _rsa_main+C60o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _rsa_main+76p
					; _rsa_main+92Fp
					; DATA XREF: ...
; void __cdecl _perror(const char *ErrMsg)
		extrn __imp__perror:near ; CODE	XREF: _rsa_main+95Ap
					; _rsa_main+98Bp
					; DATA XREF: ...
		extrn _CRYPTO_malloc:near ; CODE XREF: _rsa_main+AF4p
		extrn _CRYPTO_free:near	; CODE XREF: _rsa_main+B38p
					; _rsa_main+B66p ...
		extrn _BIO_s_file:near	; CODE XREF: _rsa_main+5Dp
					; _rsa_main:loc_856p
		extrn _BIO_new:near	; CODE XREF: _rsa_main+63p
					; _rsa_main+85Cp
		extrn _BIO_write:near	; CODE XREF: _rsa_main+B32p
		extrn _BIO_ctrl:near	; CODE XREF: _rsa_main+87p
					; _rsa_main+93Ap ...
		extrn _BIO_free_all:near ; CODE	XREF: _rsa_main+B47p
		extrn _BIO_printf:near	; CODE XREF: _rsa_main+68Cp
					; _rsa_main+6A3p ...
		extrn _BN_print:near	; CODE XREF: _rsa_main+9B4p
		extrn _EVP_get_cipherbyname:near ; CODE	XREF: _rsa_main+617p
		extrn _EVP_PKEY_set1_RSA:near ;	CODE XREF: _rsa_main+C09p
		extrn _EVP_PKEY_get1_RSA:near ;	CODE XREF: _rsa_main+8F6p
		extrn _EVP_PKEY_new:near ; CODE	XREF: _rsa_main:loc_C00p
		extrn _EVP_PKEY_free:near ; CODE XREF: _rsa_main+901p
					; _rsa_main+C50p
		extrn _RSA_check_key:near ; CODE XREF: _rsa_main+9D3p
		extrn _RSA_free:near	; CODE XREF: _rsa_main+B54p
		extrn _RSA_print:near	; CODE XREF: _rsa_main+94Dp
		extrn _i2d_RSA_NET:near	; CODE XREF: _rsa_main+AE2p
					; _rsa_main+B2Ap
		extrn _i2d_RSAPrivateKey_bio:near ; CODE XREF: _rsa_main+A9Ap
		extrn _i2d_RSAPublicKey_bio:near ; CODE	XREF: _rsa_main+AB0p
		extrn _i2d_RSA_PUBKEY_bio:near ; CODE XREF: _rsa_main+AC1p
		extrn _ERR_get_error:near ; CODE XREF: _rsa_main+A3Dp
		extrn _ERR_peek_error:near ; CODE XREF:	_rsa_main+9F4p
					; _rsa_main+A42p ...
		extrn _ERR_reason_error_string:near ; CODE XREF: _rsa_main+A29p
		extrn _ERR_print_errors:near ; CODE XREF: _rsa_main+913p
					; _rsa_main+966p ...
		extrn _ERR_load_crypto_strings:near ; CODE XREF: _rsa_main:loc_638p
		extrn _str2fmt:near	; CODE XREF: _rsa_main+129p
					; _rsa_main+17Ap
		extrn _app_passwd:near	; CODE XREF: _rsa_main+665p
		extrn _load_key:near	; CODE XREF: _rsa_main+8E7p
		extrn _load_pubkey:near	; CODE XREF: _rsa_main+8B5p
		extrn _setup_engine:near ; CODE	XREF: _rsa_main+646p
		extrn _load_config:near	; CODE XREF: _rsa_main+97p
		extrn _PEM_write_bio_RSAPrivateKey:near	; CODE XREF: _rsa_main+BA6p
		extrn _PEM_write_bio_RSAPublicKey:near ; CODE XREF: _rsa_main+BBCp
		extrn _PEM_write_bio_RSA_PUBKEY:near ; CODE XREF: _rsa_main+BCDp
		extrn _i2b_PrivateKey_bio:near ; CODE XREF: _rsa_main+C3Cp
		extrn _i2b_PublicKey_bio:near ;	CODE XREF: _rsa_main+C45p
		extrn _i2b_PVK_bio:near	; CODE XREF: _rsa_main+C22p
		extrn __chkstk:near	; CODE XREF: _rsa_main+5p
		extrn _bio_err:near	; DATA XREF: _rsa_main+3Cr
					; _rsa_main+6Bw ...


		end
