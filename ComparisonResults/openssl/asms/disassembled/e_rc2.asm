;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	51D34726535D2036B40BEFFE023EC910
; Input	CRC32 :	1D0C74EE

; File Name   :	C:\compspace\Diff\openssl\obj\e_rc2.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rc2_init_key	proc near		; DATA XREF: .rdata:000003E8o
					; .rdata:0000041Co ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+60h]
		push	dword ptr [eax]
		push	[esp+8+arg_4]
		push	esi
		call	_EVP_CIPHER_CTX_key_length
		add	esp, 4
		push	eax
		mov	eax, [esi+60h]
		add	eax, 4
		push	eax
		call	_RC2_set_key

loc_24:					; DATA XREF: .rdata:_rc2_cbco
					; .rdata:_rc2_ecbo
		add	esp, 10h

loc_27:					; DATA XREF: .rdata:_rc2_cfb64o
					; .rdata:_rc2_ofbo
		mov	eax, 1
		pop	esi
		retn
_rc2_init_key	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 30h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rc2_set_asn1_type_and_iv proc near	; DATA XREF: .rdata:000003F8o
					; .rdata:0000042Co ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 4
		call	__chkstk
		cmp	[esp+4+arg_4], 0
		jz	short loc_9C
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]

loc_47:					; DATA XREF: .rdata:00000480o
		lea	eax, [esp+0Ch+var_4]
		push	eax
		push	0
		push	2
		push	edi
		call	_EVP_CIPHER_CTX_ctrl
		mov	eax, [esp+1Ch+var_4]
		add	esp, 10h
		cmp	eax, 80h ; '€'

loc_62:					; DATA XREF: .rdata:_r2_40_cbc_ciphero
		jnz	short loc_69
		lea	esi, [eax-46h]
		jmp	short loc_80
; ---------------------------------------------------------------------------

loc_69:					; CODE XREF: _rc2_set_asn1_type_and_iv:loc_62j
		cmp	eax, 40h ; '@'
		jnz	short loc_73
		lea	esi, [eax+38h]
		jmp	short loc_80
; ---------------------------------------------------------------------------

loc_73:					; CODE XREF: _rc2_set_asn1_type_and_iv+3Cj
		xor	esi, esi
		mov	ecx, 0A0h ; ' '
		cmp	eax, 28h ; '('
		cmovz	esi, ecx

loc_80:					; CODE XREF: _rc2_set_asn1_type_and_iv+37j
					; _rc2_set_asn1_type_and_iv+41j
		push	edi
		call	_EVP_CIPHER_CTX_iv_length
		push	eax
		lea	eax, [edi+10h]
		push	eax
		push	esi
		push	[esp+1Ch+arg_4]
		call	_ASN1_TYPE_set_int_octetstring
		add	esp, 14h
		pop	edi
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_9C:					; CODE XREF: _rc2_set_asn1_type_and_iv+Fj
		xor	eax, eax
		pop	ecx
		retn
_rc2_set_asn1_type_and_iv endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0A0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rc2_get_asn1_type_and_iv proc near	; DATA XREF: .rdata:000003FCo
					; .rdata:00000430o ...

var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 18h

loc_A5:					; DATA XREF: .rdata:_r2_64_cbc_ciphero
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+18h+var_4], eax
		push	ebx
		push	ebp
		mov	ebp, [esp+20h+arg_4]
		push	esi
		xor	esi, esi
		mov	[esp+24h+var_18], 0
		push	edi
		mov	edi, [esp+28h+arg_0]
		test	ebp, ebp
		jz	loc_17A
		push	edi
		call	_EVP_CIPHER_CTX_iv_length
		mov	ebx, eax
		add	esp, 4
		cmp	ebx, 10h
		jbe	short loc_FA
		push	offset ??_C@_0BA@GLOHCMJJ@l?5?$DM?$DN?5sizeof?$CIiv?$CJ?$AA@ ; "l <= sizeof(iv)"
		push	0B3h ; '³'
		push	offset ??_C@_0BF@NACJHEJH@?4?2crypto?2evp?2e_rc2?4c?$AA@ ; ".\\crypto\\evp\\e_rc2.c"
		call	_OpenSSLDie
		add	esp, 0Ch

loc_FA:					; CODE XREF: _rc2_get_asn1_type_and_iv+41j
		push	ebx
		lea	eax, [esp+2Ch+var_14]
		push	eax
		lea	eax, [esp+30h+var_18]

loc_104:				; DATA XREF: .rdata:000003F4o
					; .rdata:00000428o ...
		push	eax
		push	ebp
		call	_ASN1_TYPE_get_int_octetstring
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebx
		jz	short loc_12A

loc_114:				; CODE XREF: _rc2_get_asn1_type_and_iv+9Aj
					; _rc2_get_asn1_type_and_iv+B8j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+18h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_12A:				; CODE XREF: _rc2_get_asn1_type_and_iv+72j
		push	[esp+28h+var_18]
		call	_rc2_magic_to_meth
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	short loc_114
		test	esi, esi
		jle	short loc_15A
		push	0FFFFFFFFh
		lea	eax, [esp+2Ch+var_14]
		push	eax
		push	0
		push	0
		push	0
		push	edi
		call	_EVP_CipherInit_ex
		add	esp, 18h
		test	eax, eax
		jz	short loc_114

loc_15A:				; CODE XREF: _rc2_get_asn1_type_and_iv+9Ej
		push	0
		push	ebx
		push	3
		push	edi
		call	_EVP_CIPHER_CTX_ctrl
		mov	eax, ebx
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		push	eax
		push	edi
		call	_EVP_CIPHER_CTX_set_key_length
		add	esp, 18h

loc_17A:				; CODE XREF: _rc2_get_asn1_type_and_iv+2Dj
		mov	ecx, [esp+28h+var_4]
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
_rc2_get_asn1_type_and_iv endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 190h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rc2_ctrl	proc near		; DATA XREF: .rdata:00000400o
					; .rdata:00000434o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		sub	eax, 0
		jz	short loc_1D6
		sub	eax, 2
		jz	short loc_1C1
		sub	eax, 1
		jz	short loc_1A7
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1A7:				; CODE XREF: _rc2_ctrl+11j
		mov	ecx, [esp+arg_8]
		test	ecx, ecx
		jle	short loc_1BE
		mov	eax, [esp+arg_0]
		mov	eax, [eax+60h]
		mov	[eax], ecx
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_1BE:				; CODE XREF: _rc2_ctrl+1Dj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1C1:				; CODE XREF: _rc2_ctrl+Cj
		mov	eax, [esp+arg_0]
		mov	eax, [eax+60h]
		mov	ecx, [eax]
		mov	eax, [esp+arg_C]
		mov	[eax], ecx
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_1D6:				; CODE XREF: _rc2_ctrl+7j
		push	esi
		mov	esi, [esp+4+arg_0]
		push	esi
		call	_EVP_CIPHER_CTX_key_length
		mov	ecx, [esi+60h]
		add	esp, 4
		shl	eax, 3
		mov	[ecx], eax
		mov	eax, 1
		pop	esi
		retn
_rc2_ctrl	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rc2_cbc_cipher	proc near		; DATA XREF: .rdata:000003ECo
					; .rdata:000004BCo ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		mov	esi, [esp+0Ch+arg_C]
		push	edi
		mov	edi, [esp+10h+arg_8]
		cmp	esi, 40000000h
		jb	short loc_252
		mov	eax, esi
		lea	ecx, [ebp+20h]
		shr	eax, 1Eh
		mov	[esp+10h+arg_C], eax

loc_21C:				; CODE XREF: _rc2_cbc_cipher+5Cj
		push	dword ptr [ebp+8]
		mov	eax, [ebp+60h]
		push	ecx
		add	eax, 4
		push	eax
		push	40000000h
		push	ebx
		push	edi
		call	_RC2_cbc_encrypt
		add	esp, 18h
		lea	ecx, [ebp+20h]
		sub	esi, 40000000h
		add	edi, 40000000h
		add	ebx, 40000000h
		sub	[esp+10h+arg_C], 1
		jnz	short loc_21C

loc_252:				; CODE XREF: _rc2_cbc_cipher+1Aj
		test	esi, esi
		jz	short loc_26F
		push	dword ptr [ebp+8]
		lea	eax, [ebp+20h]
		push	eax
		mov	eax, [ebp+60h]
		add	eax, 4
		push	eax
		push	esi
		push	ebx
		push	edi
		call	_RC2_cbc_encrypt
		add	esp, 18h

loc_26F:				; CODE XREF: _rc2_cbc_cipher+60j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
_rc2_cbc_cipher	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 27Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rc2_cfb64_cipher proc near		; DATA XREF: .rdata:00000420o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, 40000000h
		push	edi
		mov	edi, [esp+8+arg_C]
		cmp	edi, esi
		cmovb	esi, edi
		test	edi, edi
		jz	short loc_2DB
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		push	ebp
		mov	ebp, [esp+10h+arg_8]
		xchg	ax, ax

loc_29C:				; CODE XREF: _rc2_cfb64_cipher+53j
		cmp	edi, esi
		jb	short loc_2D1
		push	dword ptr [ebx+8]
		lea	eax, [ebx+50h]
		push	eax
		lea	eax, [ebx+20h]
		push	eax
		mov	eax, [ebx+60h]
		add	eax, 4
		push	eax
		push	edi
		push	[esp+24h+arg_4]
		push	ebp
		call	_RC2_cfb64_encrypt
		add	[esp+2Ch+arg_4], esi
		sub	edi, esi
		add	ebp, esi
		add	esp, 1Ch
		cmp	edi, esi
		cmovb	esi, edi
		test	edi, edi
		jnz	short loc_29C

loc_2D1:				; CODE XREF: _rc2_cfb64_cipher+22j
		pop	ebp
		pop	ebx
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2DB:				; CODE XREF: _rc2_cfb64_cipher+12j
		pop	edi
		mov	eax, 1
		pop	esi
		retn
_rc2_cfb64_cipher endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2E4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rc2_ecb_cipher	proc near		; DATA XREF: .rdata:00000488o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	edi
		mov	eax, [ebp+0]
		mov	edi, [eax+4]
		mov	eax, [esp+8+arg_C]
		cmp	eax, edi
		jb	short loc_33B
		mov	ecx, [esp+8+arg_4]
		sub	eax, edi
		push	ebx
		push	esi
		mov	esi, [esp+10h+arg_8]
		xor	ebx, ebx
		sub	ecx, esi
		mov	[esp+10h+arg_C], eax
		mov	[esp+10h+arg_4], ecx
		nop	dword ptr [eax+00h]

loc_314:				; CODE XREF: _rc2_ecb_cipher+53j
		push	dword ptr [ebp+8]
		mov	eax, [ebp+60h]
		add	eax, 4
		push	eax
		lea	eax, [ecx+esi]
		push	eax
		push	esi
		call	_RC2_ecb_encrypt
		mov	ecx, [esp+20h+arg_4]
		add	ebx, edi
		add	esp, 10h
		add	esi, edi
		cmp	ebx, [esp+10h+arg_C]
		jbe	short loc_314
		pop	esi
		pop	ebx

loc_33B:				; CODE XREF: _rc2_ecb_cipher+12j
		pop	edi
		mov	eax, 1
		pop	ebp
		retn
_rc2_ecb_cipher	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 344h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rc2_ofb_cipher	proc near		; DATA XREF: .rdata:00000454o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		mov	esi, [esp+0Ch+arg_C]
		push	edi
		mov	edi, [esp+10h+arg_8]
		cmp	esi, 40000000h
		jb	short loc_3AB
		mov	eax, esi
		lea	ecx, [ebp+50h]
		shr	eax, 1Eh
		lea	edx, [ebp+20h]
		mov	[esp+10h+arg_C], eax
		nop	dword ptr [eax+eax+00h]

loc_374:				; CODE XREF: _rc2_ofb_cipher+65j
		mov	eax, [ebp+60h]
		push	ecx
		push	edx
		add	eax, 4
		push	eax
		push	40000000h
		push	ebx
		push	edi
		call	_RC2_ofb64_encrypt
		add	esp, 18h
		lea	ecx, [ebp+50h]
		sub	esi, 40000000h
		lea	edx, [ebp+20h]
		add	edi, 40000000h
		add	ebx, 40000000h
		sub	[esp+10h+arg_C], 1
		jnz	short loc_374

loc_3AB:				; CODE XREF: _rc2_ofb_cipher+1Aj
		test	esi, esi
		jz	short loc_3C9
		lea	eax, [ebp+50h]
		push	eax
		lea	eax, [ebp+20h]
		push	eax
		mov	eax, [ebp+60h]
		add	eax, 4
		push	eax
		push	esi
		push	ebx
		push	edi
		call	_RC2_ofb64_encrypt
		add	esp, 18h

loc_3C9:				; CODE XREF: _rc2_ofb_cipher+69j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
_rc2_ofb_cipher	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3D4h
_rc2_cbc	dd offset loc_24+1	; DATA XREF: _EVP_rc2_cbco
		dd 8, 10h, 8, 4Ah
		dd offset _rc2_init_key
		dd offset _rc2_cbc_cipher
		dd 0
		dd offset loc_104
		dd offset _rc2_set_asn1_type_and_iv
		dd offset _rc2_get_asn1_type_and_iv
		dd offset _rc2_ctrl
		align 8
_rc2_cfb64	dd offset loc_27	; DATA XREF: _EVP_rc2_cfb64o
		dd 1, 10h, 8, 4Bh
		dd offset _rc2_init_key
		dd offset _rc2_cfb64_cipher
		align 8
		dd offset loc_104
		dd offset _rc2_set_asn1_type_and_iv
		dd offset _rc2_get_asn1_type_and_iv
		dd offset _rc2_ctrl
		dd 0
_rc2_ofb	dd offset loc_27+1	; DATA XREF: _EVP_rc2_ofbo
		dd 1, 10h, 8, 4Ch
		dd offset _rc2_init_key
		dd offset _rc2_ofb_cipher
		dd 0
		dd offset loc_104
		dd offset _rc2_set_asn1_type_and_iv
		dd offset _rc2_get_asn1_type_and_iv
		dd offset _rc2_ctrl
		align 10h
_rc2_ecb	dd offset loc_24+2	; DATA XREF: _EVP_rc2_ecbo
		dd 8, 10h, 0
		dd offset loc_47+2
		dd offset _rc2_init_key
		dd offset _rc2_ecb_cipher
		align 10h
		dd offset loc_104
		dd offset _rc2_set_asn1_type_and_iv
		dd offset _rc2_get_asn1_type_and_iv
		dd offset _rc2_ctrl
		dd 0
_r2_64_cbc_cipher dd offset loc_A5+1	; DATA XREF: _EVP_rc2_64_cbco
		dd 3 dup(8), 4Ah
		dd offset _rc2_init_key
		dd offset _rc2_cbc_cipher
		dd 0
		dd offset loc_104
		dd offset _rc2_set_asn1_type_and_iv
		dd offset _rc2_get_asn1_type_and_iv
		dd offset _rc2_ctrl
		align 8
_r2_40_cbc_cipher dd offset loc_62	; DATA XREF: _EVP_rc2_40_cbco
		dd 8, 5, 8, 4Ah
		dd offset _rc2_init_key
		dd offset _rc2_cbc_cipher
		align 8
		dd offset loc_104
		dd offset _rc2_set_asn1_type_and_iv
		dd offset _rc2_get_asn1_type_and_iv
		dd offset _rc2_ctrl
		dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 50Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_rc2_40_cbc
_EVP_rc2_40_cbc	proc near
		mov	eax, offset _r2_40_cbc_cipher
		retn
_EVP_rc2_40_cbc	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 514h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_rc2_64_cbc
_EVP_rc2_64_cbc	proc near
		mov	eax, offset _r2_64_cbc_cipher
		retn
_EVP_rc2_64_cbc	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 51Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_rc2_cbc
_EVP_rc2_cbc	proc near
		mov	eax, offset _rc2_cbc
		retn
_EVP_rc2_cbc	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 524h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_rc2_cfb64
_EVP_rc2_cfb64	proc near
		mov	eax, offset _rc2_cfb64
		retn
_EVP_rc2_cfb64	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 52Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_rc2_ecb
_EVP_rc2_ecb	proc near
		mov	eax, offset _rc2_ecb
		retn
_EVP_rc2_ecb	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 534h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _EVP_rc2_ofb
_EVP_rc2_ofb	proc near
		mov	eax, offset _rc2_ofb
		retn
_EVP_rc2_ofb	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 53Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rc2_magic_to_meth proc	near		; CODE XREF: _rc2_get_asn1_type_and_iv+8Ep

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 3Ah ; ':'
		jnz	short loc_54B
		mov	eax, 80h ; '€'
		retn
; ---------------------------------------------------------------------------

loc_54B:				; CODE XREF: _rc2_magic_to_meth+7j
		cmp	eax, 78h ; 'x'
		jnz	short loc_556
		mov	eax, 40h ; '@'
		retn
; ---------------------------------------------------------------------------

loc_556:				; CODE XREF: _rc2_magic_to_meth+12j
		cmp	eax, 0A0h ; ' '
		jnz	short loc_563
		mov	eax, 28h ; '('
		retn
; ---------------------------------------------------------------------------

loc_563:				; CODE XREF: _rc2_magic_to_meth+1Fj
		push	0A4h ; '¤'
		push	offset ??_C@_0BF@NACJHEJH@?4?2crypto?2evp?2e_rc2?4c?$AA@ ; ".\\crypto\\evp\\e_rc2.c"
		push	6Ch ; 'l'
		push	6Dh ; 'm'
		push	6
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		retn
_rc2_magic_to_meth endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 580h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_rc2_meth_to_magic proc	near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 4
		call	__chkstk
		lea	eax, [esp+4+var_4]
		push	eax
		push	0
		push	2
		push	[esp+10h+arg_0]
		call	_EVP_CIPHER_CTX_ctrl
		mov	ecx, [esp+14h+var_4]
		add	esp, 10h
		cmp	ecx, 80h ; '€'
		jnz	short loc_5AF
		lea	eax, [ecx-46h]
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_5AF:				; CODE XREF: _rc2_meth_to_magic+28j
		cmp	ecx, 40h ; '@'
		jnz	short loc_5BB
		mov	eax, 78h ; 'x'
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_5BB:				; CODE XREF: _rc2_meth_to_magic+32j
		xor	eax, eax
		mov	edx, 0A0h ; ' '
		cmp	ecx, 28h ; '('
		cmovz	eax, edx
		pop	ecx
		retn
_rc2_meth_to_magic endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5CCh
; COMDAT (pick any)
		public ??_C@_0BF@NACJHEJH@?4?2crypto?2evp?2e_rc2?4c?$AA@
; `string'
??_C@_0BF@NACJHEJH@?4?2crypto?2evp?2e_rc2?4c?$AA@ db '.\crypto\evp\e_rc2.c',0
					; DATA XREF: _rc2_get_asn1_type_and_iv+4Do
					; _rc2_magic_to_meth+2Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5E4h
; COMDAT (pick any)
		public ??_C@_0BA@GLOHCMJJ@l?5?$DM?$DN?5sizeof?$CIiv?$CJ?$AA@
; `string'
??_C@_0BA@GLOHCMJJ@l?5?$DM?$DN?5sizeof?$CIiv?$CJ?$AA@ db 'l <= sizeof(iv)',0
					; DATA XREF: _rc2_get_asn1_type_and_iv+43o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _OpenSSLDie:near	; CODE XREF: _rc2_get_asn1_type_and_iv+52p
		extrn _ERR_put_error:near ; CODE XREF: _rc2_magic_to_meth+37p
		extrn _ASN1_TYPE_set_int_octetstring:near
					; CODE XREF: _rc2_set_asn1_type_and_iv+60p
		extrn _ASN1_TYPE_get_int_octetstring:near
					; CODE XREF: _rc2_get_asn1_type_and_iv+66p
		extrn _EVP_CIPHER_CTX_key_length:near ;	CODE XREF: _rc2_init_key+Fp
					; _rc2_ctrl+4Cp
		extrn _EVP_CIPHER_CTX_iv_length:near
					; CODE XREF: _rc2_set_asn1_type_and_iv+51p
					; _rc2_get_asn1_type_and_iv+34p
		extrn _EVP_CipherInit_ex:near ;	CODE XREF: _rc2_get_asn1_type_and_iv+AEp
		extrn _EVP_CIPHER_CTX_set_key_length:near
					; CODE XREF: _rc2_get_asn1_type_and_iv+D2p
		extrn _EVP_CIPHER_CTX_ctrl:near	; CODE XREF: _rc2_set_asn1_type_and_iv+21p
					; _rc2_get_asn1_type_and_iv+C0p ...
		extrn _RC2_set_key:near	; CODE XREF: _rc2_init_key+1Fp
		extrn _RC2_ecb_encrypt:near ; CODE XREF: _rc2_ecb_cipher+3Fp
		extrn _RC2_cbc_encrypt:near ; CODE XREF: _rc2_cbc_cipher+3Ap
					; _rc2_cbc_cipher+73p
		extrn _RC2_cfb64_encrypt:near ;	CODE XREF: _rc2_cfb64_cipher+3Cp
		extrn _RC2_ofb64_encrypt:near ;	CODE XREF: _rc2_ofb_cipher+40p
					; _rc2_ofb_cipher+7Dp
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _rc2_get_asn1_type_and_iv+81p
					; _rc2_get_asn1_type_and_iv+E6p
		extrn __chkstk:near	; CODE XREF: _rc2_set_asn1_type_and_iv+5p
					; _rc2_get_asn1_type_and_iv:loc_A5p ...
		extrn ___security_cookie:near ;	DATA XREF: _rc2_get_asn1_type_and_iv+Ar


		end
