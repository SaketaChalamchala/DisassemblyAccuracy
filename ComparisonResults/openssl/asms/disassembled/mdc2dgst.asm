;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	7286EA94E568F85CAAD67E7E9D789990
; Input	CRC32 :	86B97C15

; File Name   :	C:\compspace\Diff\openssl\obj\mdc2dgst.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _MDC2_Final
_MDC2_Final	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		mov	ecx, [esi]
		mov	eax, [esi+1Ch]
		test	ecx, ecx
		jnz	short loc_15
		cmp	eax, 2
		jnz	short loc_44
		jmp	short loc_1A
; ---------------------------------------------------------------------------

loc_15:					; CODE XREF: _MDC2_Final+Cj
		cmp	eax, 2
		jnz	short loc_20

loc_1A:					; CODE XREF: _MDC2_Final+13j
		mov	byte ptr [ecx+esi+4], 80h ; '€'
		inc	ecx

loc_20:					; CODE XREF: _MDC2_Final+18j
		mov	eax, 8
		sub	eax, ecx
		push	eax		; Size
		lea	eax, [esi+4]
		add	eax, ecx
		push	0		; Val
		push	eax		; Dst
		call	_memset
		push	8
		lea	eax, [esi+4]
		push	eax
		push	esi
		call	_mdc2_body
		add	esp, 18h

loc_44:					; CODE XREF: _MDC2_Final+11j
		mov	ecx, [esp+4+arg_0]
		mov	eax, [esi+0Ch]
		mov	[ecx], eax
		mov	eax, [esi+10h]
		mov	[ecx+4], eax
		mov	eax, [esi+14h]
		mov	[ecx+8], eax
		mov	eax, [esi+18h]
		mov	[ecx+0Ch], eax
		mov	eax, 1
		pop	esi
		retn
_MDC2_Final	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 68h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _MDC2_Init
_MDC2_Init	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], 0
		mov	dword ptr [eax+1Ch], 1
		mov	dword ptr [eax+0Ch], 52525252h
		mov	dword ptr [eax+10h], 52525252h
		mov	dword ptr [eax+14h], 25252525h
		mov	dword ptr [eax+18h], 25252525h
		mov	eax, 1
		retn
_MDC2_Init	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 9Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl MDC2_Update(int, void *Src, size_t Size)
		public _MDC2_Update
_MDC2_Update	proc near

arg_0		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	esi
		push	edi
		mov	ecx, [ebx]
		mov	edi, [esp+10h+Size]
		test	ecx, ecx
		jz	short loc_105
		lea	eax, [ecx+edi]
		cmp	eax, 8
		lea	eax, [ebx+4]
		jnb	short loc_D5
		push	edi		; Size
		push	[esp+14h+Src]	; Src
		add	eax, ecx
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	eax, 1
		add	[ebx], edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_D5:					; CODE XREF: _MDC2_Update+1Bj
		mov	ebp, [esp+10h+Src]
		mov	esi, 8
		sub	esi, ecx
		add	eax, ecx
		push	esi		; Size
		push	ebp		; Src
		push	eax		; Dst
		call	_memcpy
		push	8
		lea	eax, [ebx+4]
		mov	dword ptr [ebx], 0
		push	eax
		push	ebx
		sub	edi, esi
		add	ebp, esi
		call	_mdc2_body
		add	esp, 18h
		jmp	short loc_109
; ---------------------------------------------------------------------------

loc_105:				; CODE XREF: _MDC2_Update+10j
		mov	ebp, [esp+10h+Src]

loc_109:				; CODE XREF: _MDC2_Update+67j
		mov	esi, edi
		and	esi, 0FFFFFFF8h
		jbe	short loc_11B
		push	esi
		push	ebp
		push	ebx
		call	_mdc2_body
		add	esp, 0Ch

loc_11B:				; CODE XREF: _MDC2_Update+72j
		sub	edi, esi
		jz	short loc_132
		push	edi		; Size
		lea	eax, [esi+ebp]
		push	eax		; Src
		lea	eax, [ebx+4]
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	[ebx], edi

loc_132:				; CODE XREF: _MDC2_Update+81j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
_MDC2_Update	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 13Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_mdc2_body	proc near		; CODE XREF: _MDC2_Final+3Cp
					; _MDC2_Update+5Fp ...

var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= byte ptr -84h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 0A0h ; ' '
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+0A0h+var_4], eax
		push	ebx
		mov	ebx, [esp+0A4h+arg_0]
		push	edi
		mov	edi, [esp+0A8h+arg_8]
		test	edi, edi
		jz	loc_2E1
		push	ebp
		dec	edi
		lea	ebp, [ebx+0Ch]
		add	ebx, 14h
		shr	edi, 3
		push	esi
		mov	esi, [esp+0B0h+arg_4]
		inc	edi
		mov	[esp+0B0h+var_98], ebx
		nop	dword ptr [eax+eax+00000000h]

loc_18C:				; CODE XREF: _mdc2_body+19Dj
		movzx	eax, byte ptr [esi+1]
		lea	esi, [esi+8]
		movzx	ecx, byte ptr [esi-8]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi-6]
		shl	eax, 10h
		or	ecx, eax
		movzx	eax, byte ptr [esi-5]
		shl	eax, 18h
		or	ecx, eax
		movzx	eax, byte ptr [esi-3]
		shl	eax, 8
		mov	[esp+0B0h+var_A0], ecx
		mov	[esp+0B0h+var_94], ecx
		mov	[esp+0B0h+var_8C], ecx
		movzx	ecx, byte ptr [esi-4]
		or	ecx, eax
		movzx	eax, byte ptr [esi-2]
		shl	eax, 10h
		or	ecx, eax
		movzx	eax, byte ptr [esi-1]
		shl	eax, 18h
		or	ecx, eax
		movzx	eax, byte ptr [ebp+0]
		and	al, 0DFh
		mov	[esp+0B0h+var_9C], ecx
		or	al, 40h
		mov	[esp+0B0h+var_90], ecx
		mov	[ebp+0], al
		movzx	eax, byte ptr [ebx]
		and	al, 0BFh
		mov	[esp+0B0h+var_88], ecx
		or	al, 20h
		push	ebp
		mov	[ebx], al
		call	_DES_set_odd_parity
		lea	eax, [esp+0B4h+var_84]
		push	eax
		push	ebp
		call	_DES_set_key_unchecked
		push	1
		lea	eax, [esp+0C0h+var_84]
		push	eax
		lea	eax, [esp+0C4h+var_8C]
		push	eax
		call	_DES_encrypt1
		push	ebx
		call	_DES_set_odd_parity
		lea	eax, [esp+0CCh+var_84]
		push	eax
		push	ebx
		call	_DES_set_key_unchecked
		push	1
		lea	eax, [esp+0D8h+var_84]
		push	eax
		lea	eax, [esp+0DCh+var_94]
		push	eax
		call	_DES_encrypt1
		mov	ecx, [esp+0E0h+var_9C]
		add	esp, 30h
		mov	edx, [esp+0B0h+var_90]
		mov	eax, [esp+0B0h+var_A0]
		xor	edx, ecx
		xor	ecx, [esp+0B0h+var_88]
		mov	ebx, [esp+0B0h+var_94]
		xor	ebx, eax
		mov	[esp+0B0h+var_9C], ecx
		xor	eax, [esp+0B0h+var_8C]
		mov	ecx, ebp
		mov	[esp+0B0h+var_A0], eax
		mov	[ecx], al
		shr	eax, 8
		mov	[ecx+1], al
		mov	eax, [esp+0B0h+var_A0]
		shr	eax, 10h
		mov	[ecx+2], al
		mov	eax, [esp+0B0h+var_A0]
		shr	eax, 18h
		mov	[ecx+3], al
		mov	[ecx+4], dl
		mov	eax, edx
		shr	eax, 8
		mov	[ecx+5], al
		mov	eax, edx
		shr	eax, 10h
		mov	[ecx+6], al
		mov	eax, ebx
		shr	edx, 18h
		mov	[ecx+7], dl
		mov	ecx, [esp+0B0h+var_98]
		mov	edx, [esp+0B0h+var_9C]
		shr	eax, 8
		mov	[ecx], bl
		mov	[ecx+1], al
		mov	eax, ebx
		shr	eax, 10h
		mov	[ecx+2], al
		mov	eax, edx
		shr	ebx, 18h
		mov	[ecx+3], bl
		mov	ebx, ecx
		shr	eax, 8
		mov	[ecx+4], dl
		mov	[ecx+5], al
		mov	eax, edx
		shr	eax, 10h
		shr	edx, 18h
		mov	[ecx+6], al
		mov	[ecx+7], dl
		sub	edi, 1
		jnz	loc_18C
		pop	esi
		pop	ebp

loc_2E1:				; CODE XREF: _mdc2_body+2Aj
		mov	ecx, [esp+0A8h+var_4]
		pop	edi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0A0h
		retn
_mdc2_body	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _DES_encrypt1:near ; CODE	XREF: _mdc2_body+DAp
					; _mdc2_body+FCp
		extrn _DES_set_odd_parity:near ; CODE XREF: _mdc2_body+BEp
					; _mdc2_body+E0p
		extrn _DES_set_key_unchecked:near ; CODE XREF: _mdc2_body+C9p
					; _mdc2_body+EBp
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _mdc2_body+1B0p
		extrn __chkstk:near	; CODE XREF: _mdc2_body+5p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _MDC2_Update+25p
					; _MDC2_Update+49p ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _MDC2_Final+30p
		extrn ___security_cookie:near ;	DATA XREF: _mdc2_body+Ar


		end
