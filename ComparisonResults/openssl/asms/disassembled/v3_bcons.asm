;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	4C15860522005118CFB5EB9B8D84F86A
; Input	CRC32 :	9BDA2A29

; File Name   :	C:\compspace\Diff\openssl\obj\v3_bcons.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BASIC_CONSTRAINTS_it
_BASIC_CONSTRAINTS_it proc near		; DATA XREF: .rdata:00000194o
		mov	eax, offset ?local_it@?1??BASIC_CONSTRAINTS_it@@9@9 ; `BASIC_CONSTRAINTS_it'::`2'::local_it
		retn
_BASIC_CONSTRAINTS_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_i2v_BASIC_CONSTRAINTS proc near	; DATA XREF: .rdata:000001B0o

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_4]
		lea	eax, [esp+4+arg_8]
		push	eax
		push	dword ptr [esi]
		push	offset ??_C@_02JLAAGLDA@CA?$AA@	; `string'
		call	_X509V3_add_value_bool
		lea	eax, [esp+10h+arg_8]
		push	eax
		push	dword ptr [esi+4]
		push	offset ??_C@_07OGCPICFF@pathlen?$AA@ ; "pathlen"
		call	_X509V3_add_value_int
		mov	eax, [esp+1Ch+arg_8]
		add	esp, 18h
		pop	esi
		retn
_i2v_BASIC_CONSTRAINTS endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_v2i_BASIC_CONSTRAINTS proc near	; DATA XREF: .rdata:000001B4o

var_4		= dword	ptr -4
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		push	offset ?local_it@?1??BASIC_CONSTRAINTS_it@@9@9 ; `BASIC_CONSTRAINTS_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		mov	[esp+4+var_4], eax

loc_56:					; DATA XREF: .rdata:_v3_bconso
		test	eax, eax
		jnz	short loc_73
		push	6Fh ; 'o'
		push	offset ??_C@_0BL@NEGNMNAN@?4?2crypto?2x509v3?2v3_bcons?4c?$AA@ ; ".\\crypto\\x509v3\\v3_bcons.c"
		push	41h ; 'A'
		push	66h ; 'f'
		push	22h ; '"'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_73:					; CODE XREF: _v2i_BASIC_CONSTRAINTS+1Cj
		push	ebx
		mov	ebx, [esp+8+arg_8]
		push	ebp
		push	esi
		push	edi
		push	ebx
		xor	edi, edi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	loc_132

loc_8E:					; CODE XREF: _v2i_BASIC_CONSTRAINTS+F0j
		push	edi
		push	ebx
		call	_sk_value
		mov	ebp, eax
		add	esp, 8
		mov	esi, offset ??_C@_02JLAAGLDA@CA?$AA@ ; `string'
		mov	ecx, [ebp+4]
		mov	edx, ecx

loc_A4:					; CODE XREF: _v2i_BASIC_CONSTRAINTS+82j
		mov	bl, [edx]
		cmp	bl, [esi]
		jnz	short loc_C4
		test	bl, bl
		jz	short loc_C0
		mov	al, [edx+1]
		cmp	al, [esi+1]
		jnz	short loc_C4
		add	edx, 2
		add	esi, 2
		test	al, al
		jnz	short loc_A4

loc_C0:					; CODE XREF: _v2i_BASIC_CONSTRAINTS+70j
		xor	eax, eax
		jmp	short loc_C9
; ---------------------------------------------------------------------------

loc_C4:					; CODE XREF: _v2i_BASIC_CONSTRAINTS+6Cj
					; _v2i_BASIC_CONSTRAINTS+78j
		sbb	eax, eax
		or	eax, 1

loc_C9:					; CODE XREF: _v2i_BASIC_CONSTRAINTS+86j
		test	eax, eax
		jnz	short loc_D9
		push	[esp+14h+var_4]
		push	ebp
		call	_X509V3_get_value_bool
		jmp	short loc_115
; ---------------------------------------------------------------------------

loc_D9:					; CODE XREF: _v2i_BASIC_CONSTRAINTS+8Fj
		mov	eax, offset ??_C@_07OGCPICFF@pathlen?$AA@ ; "pathlen"

loc_DE:					; CODE XREF: _v2i_BASIC_CONSTRAINTS+BCj
		mov	dl, [ecx]
		cmp	dl, [eax]
		jnz	short loc_FE
		test	dl, dl
		jz	short loc_FA
		mov	dl, [ecx+1]
		cmp	dl, [eax+1]
		jnz	short loc_FE
		add	ecx, 2
		add	eax, 2
		test	dl, dl
		jnz	short loc_DE

loc_FA:					; CODE XREF: _v2i_BASIC_CONSTRAINTS+AAj
		xor	eax, eax
		jmp	short loc_103
; ---------------------------------------------------------------------------

loc_FE:					; CODE XREF: _v2i_BASIC_CONSTRAINTS+A6j
					; _v2i_BASIC_CONSTRAINTS+B2j
		sbb	eax, eax
		or	eax, 1

loc_103:				; CODE XREF: _v2i_BASIC_CONSTRAINTS+C0j
		test	eax, eax
		jnz	short loc_13C
		mov	eax, [esp+14h+var_4]
		add	eax, 4
		push	eax
		push	ebp
		call	_X509V3_get_value_int

loc_115:				; CODE XREF: _v2i_BASIC_CONSTRAINTS+9Bj
		add	esp, 8
		test	eax, eax
		jz	short $err$42
		mov	ebx, [esp+14h+arg_8]
		inc	edi
		push	ebx
		call	_sk_num
		add	esp, 4
		cmp	edi, eax
		jl	loc_8E

loc_132:				; CODE XREF: _v2i_BASIC_CONSTRAINTS+4Cj
		mov	eax, [esp+14h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_13C:				; CODE XREF: _v2i_BASIC_CONSTRAINTS+C9j
		push	7Bh ; '{'
		push	offset ??_C@_0BL@NEGNMNAN@?4?2crypto?2x509v3?2v3_bcons?4c?$AA@ ; ".\\crypto\\x509v3\\v3_bcons.c"
		push	6Ah ; 'j'
		push	66h ; 'f'
		push	22h ; '"'
		call	_ERR_put_error
		push	dword ptr [ebp+8]
		push	offset ??_C@_07BDICHDDB@?0value?3?$AA@ ; ",value:"
		push	dword ptr [ebp+4]
		push	offset ??_C@_06FONLLLNC@?0name?3?$AA@ ;	",name:"
		push	dword ptr [ebp+0]
		push	offset ??_C@_08PCLJGJAL@section?3?$AA@ ; "section:"
		push	6
		call	_ERR_add_error_data
		add	esp, 30h

$err$42:				; CODE XREF: _v2i_BASIC_CONSTRAINTS+DEj
		push	offset ?local_it@?1??BASIC_CONSTRAINTS_it@@9@9 ; `BASIC_CONSTRAINTS_it'::`2'::local_it
		push	[esp+18h+var_4]
		call	_ASN1_item_free
		add	esp, 8
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
_v2i_BASIC_CONSTRAINTS endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18Ch
		public _v3_bcons
_v3_bcons	dd offset loc_56+1
		dd 0
		dd offset _BASIC_CONSTRAINTS_it
		dd 6 dup(0)
		dd offset _i2v_BASIC_CONSTRAINTS
		dd offset _v2i_BASIC_CONSTRAINTS
		dd 3 dup(0)
_BASIC_CONSTRAINTS_seq_tt dd 1,	2 dup(0) ; DATA	XREF: .rdata:000001F4o
		dd offset ??_C@_02DGMJAJHC@ca?$AA@ ; `string'
		dd offset _ASN1_FBOOLEAN_it
		dd 1, 0
		dd 4
		dd offset ??_C@_07OGCPICFF@pathlen?$AA@	; "pathlen"
		dd offset _ASN1_INTEGER_it
; `BASIC_CONSTRAINTS_it'::`2'::local_it
?local_it@?1??BASIC_CONSTRAINTS_it@@9@9	dd 1, 10h ; DATA XREF: _BASIC_CONSTRAINTS_ito
					; _v2i_BASIC_CONSTRAINTS+Ao ...
		dd offset _BASIC_CONSTRAINTS_seq_tt
		dd 2, 0
		dd 8
		dd offset ??_C@_0BC@PKPCGCD@BASIC_CONSTRAINTS?$AA@ ; "BASIC_CONSTRAINTS"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 208h
; COMDAT (pick any)
		public ??_C@_02DGMJAJHC@ca?$AA@
; `string'
??_C@_02DGMJAJHC@ca?$AA@ db 63h, 61h, 0	; DATA XREF: .rdata:000001D0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 20Ch
; COMDAT (pick any)
		public ??_C@_07OGCPICFF@pathlen?$AA@
; `string'
??_C@_07OGCPICFF@pathlen?$AA@ db 'pathlen',0 ; DATA XREF: _i2v_BASIC_CONSTRAINTS+1Eo
					; _v2i_BASIC_CONSTRAINTS:loc_D9o ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 214h
; COMDAT (pick any)
		public ??_C@_0BC@PKPCGCD@BASIC_CONSTRAINTS?$AA@
; `string'
??_C@_0BC@PKPCGCD@BASIC_CONSTRAINTS?$AA@ db 'BASIC_CONSTRAINTS',0
					; DATA XREF: .rdata:00000204o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 228h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BASIC_CONSTRAINTS_free
_BASIC_CONSTRAINTS_free	proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??BASIC_CONSTRAINTS_it@@9@9 ; `BASIC_CONSTRAINTS_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_BASIC_CONSTRAINTS_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 23Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BASIC_CONSTRAINTS_new
_BASIC_CONSTRAINTS_new proc near
		push	offset ?local_it@?1??BASIC_CONSTRAINTS_it@@9@9 ; `BASIC_CONSTRAINTS_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_BASIC_CONSTRAINTS_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 24Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_BASIC_CONSTRAINTS
_d2i_BASIC_CONSTRAINTS proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??BASIC_CONSTRAINTS_it@@9@9 ; `BASIC_CONSTRAINTS_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_BASIC_CONSTRAINTS endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 268h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_BASIC_CONSTRAINTS
_i2d_BASIC_CONSTRAINTS proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??BASIC_CONSTRAINTS_it@@9@9 ; `BASIC_CONSTRAINTS_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_BASIC_CONSTRAINTS endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 280h
; COMDAT (pick any)
		public ??_C@_02JLAAGLDA@CA?$AA@
; `string'
??_C@_02JLAAGLDA@CA?$AA@ db 43h, 41h, 0	; DATA XREF: _i2v_BASIC_CONSTRAINTS+Co
					; _v2i_BASIC_CONSTRAINTS+5Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 284h
; COMDAT (pick any)
		public ??_C@_0BL@NEGNMNAN@?4?2crypto?2x509v3?2v3_bcons?4c?$AA@
; `string'
??_C@_0BL@NEGNMNAN@?4?2crypto?2x509v3?2v3_bcons?4c?$AA@	db '.\crypto\x509v3\v3_bcons.c',0
					; DATA XREF: _v2i_BASIC_CONSTRAINTS+20o
					; _v2i_BASIC_CONSTRAINTS+102o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2A0h
; COMDAT (pick any)
		public ??_C@_07BDICHDDB@?0value?3?$AA@
; `string'
??_C@_07BDICHDDB@?0value?3?$AA@	db ',value:',0 ; DATA XREF: _v2i_BASIC_CONSTRAINTS+115o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2A8h
; COMDAT (pick any)
		public ??_C@_06FONLLLNC@?0name?3?$AA@
; `string'
??_C@_06FONLLLNC@?0name?3?$AA@ db ',name:',0 ; DATA XREF: _v2i_BASIC_CONSTRAINTS+11Do
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2B0h
; COMDAT (pick any)
		public ??_C@_08PCLJGJAL@section?3?$AA@
; `string'
??_C@_08PCLJGJAL@section?3?$AA@	db 'section:',0 ; DATA XREF: _v2i_BASIC_CONSTRAINTS+125o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ASN1_INTEGER_it:near ; DATA XREF: .rdata:000001E8o
		extrn _ASN1_FBOOLEAN_it:near ; DATA XREF: .rdata:000001D4o
		extrn _sk_num:near	; CODE XREF: _v2i_BASIC_CONSTRAINTS+42p
					; _v2i_BASIC_CONSTRAINTS+E6p
		extrn _sk_value:near	; CODE XREF: _v2i_BASIC_CONSTRAINTS+54p
		extrn _ERR_put_error:near ; CODE XREF: _v2i_BASIC_CONSTRAINTS+2Bp
					; _v2i_BASIC_CONSTRAINTS+10Dp
		extrn _ERR_add_error_data:near ; CODE XREF: _v2i_BASIC_CONSTRAINTS+12Cp
		extrn _ASN1_item_new:near ; CODE XREF: _v2i_BASIC_CONSTRAINTS+Fp
					; _BASIC_CONSTRAINTS_new+5p
		extrn _ASN1_item_free:near ; CODE XREF:	_v2i_BASIC_CONSTRAINTS+13Dp
					; _BASIC_CONSTRAINTS_free+9p
		extrn _ASN1_item_d2i:near ; CODE XREF: _d2i_BASIC_CONSTRAINTS+11p
		extrn _ASN1_item_i2d:near ; CODE XREF: _i2d_BASIC_CONSTRAINTS+Dp
		extrn _X509V3_get_value_bool:near ; CODE XREF: _v2i_BASIC_CONSTRAINTS+96p
		extrn _X509V3_get_value_int:near ; CODE	XREF: _v2i_BASIC_CONSTRAINTS+D4p
		extrn _X509V3_add_value_bool:near ; CODE XREF: _i2v_BASIC_CONSTRAINTS+11p
		extrn _X509V3_add_value_int:near ; CODE	XREF: _i2v_BASIC_CONSTRAINTS+23p
		extrn __chkstk:near	; CODE XREF: _v2i_BASIC_CONSTRAINTS+5p


		end
