;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	B11BA48135F8B684E53D39408B6075B3
; Input	CRC32 :	0C67B011

; File Name   :	C:\compspace\Diff\openssl\obj\dsa_gen.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
; `dsa_builtin_paramgen2'::`23'::ggen
?ggen@?BH@??dsa_builtin_paramgen2@@9@9 dd 6E656767h ; DATA XREF: _dsa_builtin_paramgen2+74Eo
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl DSA_generate_parameters_ex(int, int, void	*Src, int, int,	int, int)
		public _DSA_generate_parameters_ex
_DSA_generate_parameters_ex proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+3Ch]
		mov	eax, [eax+28h]
		test	eax, eax
		jz	short loc_33
		push	[esp+4+arg_18]
		push	[esp+8+arg_14]
		push	[esp+0Ch+arg_10]
		push	[esp+10h+arg_C]
		push	[esp+14h+Src]
		push	[esp+18h+arg_4]
		push	esi
		call	eax
		add	esp, 1Ch
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_33:					; CODE XREF: _DSA_generate_parameters_ex+Dj
		cmp	[esp+4+arg_4], 800h
		push	edi
		jl	short loc_45
		call	_EVP_sha256
		jmp	short loc_4A
; ---------------------------------------------------------------------------

loc_45:					; CODE XREF: _DSA_generate_parameters_ex+38j
		call	_EVP_sha1

loc_4A:					; CODE XREF: _DSA_generate_parameters_ex+3Fj
		mov	edi, eax
		push	edi
		call	_EVP_MD_size
		push	[esp+0Ch+arg_18] ; int
		shl	eax, 3
		push	[esp+10h+arg_14] ; int
		push	[esp+14h+arg_10] ; int
		push	0		; int
		push	[esp+1Ch+arg_C]	; int
		push	[esp+20h+Src]	; Src
		push	edi		; int
		push	eax		; int
		push	[esp+2Ch+arg_4]	; int
		push	esi		; int
		call	_dsa_builtin_paramgen
		add	esp, 2Ch
		pop	edi
		pop	esi
		retn
_DSA_generate_parameters_ex endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 80h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl dsa_builtin_paramgen(int,	int, int, int, void *Src, int, int, int, int, int)
		public _dsa_builtin_paramgen
_dsa_builtin_paramgen proc near		; CODE XREF: _DSA_generate_parameters_ex+6Ep

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= xmmword ptr -84h
var_74		= xmmword ptr -74h
var_64		= byte ptr -64h
Dst		= byte ptr -44h
var_24		= xmmword ptr -24h
var_14		= xmmword ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
Src		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		mov	eax, 0D8h ; 'Ø'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+0D8h+var_4], eax
		mov	eax, [esp+0D8h+arg_0]
		mov	edx, [esp+0D8h+Src]
		push	ebp
		mov	ebp, [esp+0DCh+arg_C]
		push	esi
		mov	esi, [esp+0E0h+arg_8]
		mov	[esp+0E0h+var_94], eax
		mov	eax, [esp+0E0h+arg_18]
		mov	[esp+0E0h+var_88], eax
		mov	eax, [esp+0E0h+arg_1C]
		shr	esi, 3
		mov	[esp+0E0h+var_90], eax
		mov	eax, [esp+0E0h+arg_20]
		mov	[esp+0E0h+var_AC], ebp
		mov	[esp+0E0h+var_B8], edx
		mov	[esp+0E0h+var_8C], eax
		mov	[esp+0E0h+var_A0], 0
		mov	[esp+0E0h+var_BC], 0
		mov	[esp+0E0h+var_A4], 2
		push	edi
		mov	edi, [esp+0E4h+arg_24]
		mov	[esp+0E4h+var_CC], edi
		cmp	esi, 14h
		jz	short loc_133
		cmp	esi, 1Ch
		jz	short loc_133
		cmp	esi, 20h ; ' '
		jz	short loc_133
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		mov	ecx, [esp+0D8h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0D8h
		retn
; ---------------------------------------------------------------------------

loc_133:				; CODE XREF: _dsa_builtin_paramgen+8Dj
					; _dsa_builtin_paramgen+92j ...
		test	ebp, ebp
		jnz	short loc_146
		call	_EVP_sha1
		mov	edx, [esp+0E4h+var_B8]
		mov	ebp, eax
		mov	[esp+0E4h+var_AC], eax

loc_146:				; CODE XREF: _dsa_builtin_paramgen+B5j
		mov	ecx, [esp+0E4h+arg_4]
		mov	eax, 200h
		cmp	ecx, eax
		cmovb	ecx, eax
		lea	eax, [ecx+3Fh]
		and	eax, 0FFFFFFC0h
		mov	[esp+0E4h+var_B4], eax
		mov	eax, [esp+0E4h+arg_14]
		test	eax, eax
		jz	short loc_177
		xor	ecx, ecx
		cmp	eax, esi
		cmovb	edx, ecx
		mov	[esp+0E4h+var_B8], edx

loc_177:				; CODE XREF: _dsa_builtin_paramgen+EAj
		cmp	eax, esi
		cmova	eax, esi
		mov	[esp+0E4h+arg_14], eax
		test	edx, edx
		jz	short loc_199
		push	eax		; Size
		push	edx		; Src
		lea	eax, [esp+0ECh+Dst]
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch

loc_199:				; CODE XREF: _dsa_builtin_paramgen+105j
		call	_BN_MONT_CTX_new
		mov	[esp+0E4h+var_C0], eax
		test	eax, eax
		jz	loc_7F2
		push	ebx
		call	_BN_CTX_new
		mov	ebx, eax
		mov	[esp+0E8h+var_D8], ebx
		test	ebx, ebx
		jz	loc_7E5
		push	ebx
		call	_BN_CTX_start
		push	ebx
		call	_BN_CTX_get
		push	[esp+0F0h+var_D8]
		mov	ebx, eax
		call	_BN_CTX_get
		push	[esp+0F4h+var_D8]
		mov	[esp+0F8h+var_C4], eax
		call	_BN_CTX_get
		push	[esp+0F8h+var_D8]
		mov	[esp+0FCh+var_B0], eax
		call	_BN_CTX_get
		push	[esp+0FCh+var_D8]
		mov	[esp+100h+var_C8], eax
		call	_BN_CTX_get
		push	[esp+100h+var_D8]
		mov	[esp+104h+var_98], eax
		call	_BN_CTX_get
		push	[esp+104h+var_D8]
		mov	[esp+108h+var_9C], eax
		call	_BN_CTX_get
		push	[esp+108h+var_D8]
		mov	[esp+10Ch+var_D0], eax
		call	_BN_CTX_get
		mov	[esp+10Ch+var_D4], eax
		add	esp, 24h
		mov	eax, [esp+0E8h+var_B4]
		dec	eax
		push	eax
		call	_BN_value_one
		push	eax
		push	[esp+0F0h+var_D4]
		call	_BN_lshift
		add	esp, 0Ch
		test	eax, eax
		jz	loc_7D2
		nop	word ptr [eax+eax+00h]

loc_250:				; CODE XREF: _dsa_builtin_paramgen+379j
					; _dsa_builtin_paramgen+584j
		push	[esp+0E8h+var_BC]
		push	0
		push	edi
		call	_BN_GENCB_call
		inc	[esp+0F4h+var_BC]
		add	esp, 0Ch
		test	eax, eax
		jz	loc_7D2
		cmp	[esp+0E8h+arg_14], 0
		jz	short loc_287
		cmp	[esp+0E8h+var_B8], 0
		jz	short loc_287
		xor	edi, edi
		mov	[esp+0E8h+arg_14], edi
		jmp	short loc_2A5
; ---------------------------------------------------------------------------

loc_287:				; CODE XREF: _dsa_builtin_paramgen+1F3j
					; _dsa_builtin_paramgen+1FAj
		lea	eax, [esp+0E8h+Dst]
		push	esi
		push	eax
		call	_RAND_pseudo_bytes
		add	esp, 8
		test	eax, eax
		js	loc_7D2
		mov	edi, 1

loc_2A5:				; CODE XREF: _dsa_builtin_paramgen+205j
		push	esi		; Size
		lea	eax, [esp+0ECh+Dst]
		push	eax		; Src
		lea	eax, [esp+0F0h+var_64]
		push	eax		; Dst
		call	_memcpy
		push	esi		; Size
		lea	eax, [esp+0F8h+Dst]
		push	eax		; Src
		lea	eax, [esp+0FCh+var_24]
		push	eax		; Dst
		call	_memcpy
		lea	eax, [esi-1]
		add	esp, 18h
		test	eax, eax
		js	short loc_2EF
		nop	dword ptr [eax+eax+00h]

loc_2E0:				; CODE XREF: _dsa_builtin_paramgen+26Dj
		add	[esp+eax+0E8h+var_64], 1
		jnz	short loc_2EF
		sub	eax, 1
		jns	short loc_2E0

loc_2EF:				; CODE XREF: _dsa_builtin_paramgen+259j
					; _dsa_builtin_paramgen+268j
		push	0
		push	ebp
		push	0
		lea	eax, [esp+0F4h+var_84]
		push	eax
		lea	eax, [esp+0F8h+Dst]
		push	esi
		push	eax
		call	_EVP_Digest
		add	esp, 18h
		test	eax, eax
		jz	loc_7D2
		push	0
		push	ebp
		push	0
		lea	eax, [esp+0F4h+var_24]
		push	eax
		lea	eax, [esp+0F8h+var_64]
		push	esi
		push	eax
		call	_EVP_Digest
		add	esp, 18h
		test	eax, eax
		jz	loc_7D2
		xor	ecx, ecx
		test	esi, esi
		jle	short loc_3B0
		cmp	esi, 20h ; ' '
		jb	short loc_393
		mov	eax, esi
		and	eax, 8000001Fh
		jns	short loc_351
		dec	eax
		or	eax, 0FFFFFFE0h
		inc	eax

loc_351:				; CODE XREF: _dsa_builtin_paramgen+2CAj
		mov	edx, esi
		sub	edx, eax
		db	66h, 66h
		nop	word ptr [eax+eax+00000000h]

loc_360:				; CODE XREF: _dsa_builtin_paramgen+311j
		movups	xmm0, [esp+ecx+0E8h+var_84]
		movups	xmm1, [esp+ecx+0E8h+var_24]
		pxor	xmm1, xmm0
		movups	[esp+ecx+0E8h+var_84], xmm1
		movups	xmm0, [esp+ecx+0E8h+var_74]
		movups	xmm1, [esp+ecx+0E8h+var_14]
		pxor	xmm1, xmm0
		movups	[esp+ecx+0E8h+var_74], xmm1
		add	ecx, 20h ; ' '
		cmp	ecx, edx
		jl	short loc_360

loc_393:				; CODE XREF: _dsa_builtin_paramgen+2C1j
		cmp	ecx, esi
		jge	short loc_3B0
		nop	word ptr [eax+eax+00000000h]

loc_3A0:				; CODE XREF: _dsa_builtin_paramgen+32Ej
		mov	al, byte ptr [esp+ecx+0E8h+var_24]
		xor	byte ptr [esp+ecx+0E8h+var_84],	al
		inc	ecx
		cmp	ecx, esi
		jl	short loc_3A0

loc_3B0:				; CODE XREF: _dsa_builtin_paramgen+2BCj
					; _dsa_builtin_paramgen+315j
		push	[esp+0E8h+var_C8]
		or	byte ptr [esp+0ECh+var_84], 80h
		lea	eax, [esp+0ECh+var_84]
		or	byte ptr [esp+esi+0ECh+var_88+3], 1
		push	esi
		push	eax
		call	_BN_bin2bn
		add	esp, 0Ch
		test	eax, eax
		jz	loc_7D2
		push	[esp+0E8h+var_CC]
		push	edi
		push	[esp+0F0h+var_D8]
		push	32h ; '2'
		push	[esp+0F8h+var_C8]
		call	_BN_is_prime_fasttest_ex
		add	esp, 14h
		test	eax, eax
		jg	short loc_3FE
		jnz	loc_7D2
		mov	edi, [esp+0E8h+var_CC]
		jmp	loc_250
; ---------------------------------------------------------------------------

loc_3FE:				; CODE XREF: _dsa_builtin_paramgen+36Dj
		mov	ebp, [esp+0E8h+var_CC]
		push	0
		push	2
		push	ebp
		call	_BN_GENCB_call
		add	esp, 0Ch
		test	eax, eax
		jz	loc_7D2
		push	0
		push	3
		push	ebp
		call	_BN_GENCB_call
		add	esp, 0Ch
		test	eax, eax
		jz	loc_7D2
		mov	ecx, [esp+0E8h+var_B4]
		mov	eax, 0CCCCCCCDh
		xor	edi, edi
		mov	[esp+0E8h+var_A8], edi
		lea	ecx, [ecx-1]
		mul	ecx
		mov	ebp, edx
		shr	ebp, 7

loc_445:				; CODE XREF: _dsa_builtin_paramgen+576j
		test	edi, edi
		jz	short loc_460
		push	edi
		push	0
		push	[esp+0F0h+var_CC]
		call	_BN_GENCB_call
		add	esp, 0Ch
		test	eax, eax
		jz	loc_7D2

loc_460:				; CODE XREF: _dsa_builtin_paramgen+3C7j
		push	0
		push	[esp+0ECh+var_B0]
		call	_BN_set_word
		add	esp, 8
		xor	edi, edi
		test	ebp, ebp
		js	loc_509

loc_478:				; CODE XREF: _dsa_builtin_paramgen+483j
		lea	eax, [esi-1]
		test	eax, eax
		js	short loc_48F
		nop

loc_480:				; CODE XREF: _dsa_builtin_paramgen+40Dj
		add	[esp+eax+0E8h+var_64], 1
		jnz	short loc_48F
		sub	eax, 1
		jns	short loc_480

loc_48F:				; CODE XREF: _dsa_builtin_paramgen+3FDj
					; _dsa_builtin_paramgen+408j
		push	0
		push	[esp+0ECh+var_AC]
		lea	eax, [esp+0F0h+var_84]
		push	0
		push	eax
		lea	eax, [esp+0F8h+var_64]
		push	esi
		push	eax
		call	_EVP_Digest
		add	esp, 18h
		test	eax, eax
		jz	loc_7D2
		push	ebx
		lea	eax, [esp+0ECh+var_84]
		push	esi
		push	eax
		call	_BN_bin2bn
		add	esp, 0Ch
		test	eax, eax
		jz	loc_7D2
		lea	eax, ds:0[esi*8]
		imul	eax, edi
		push	eax
		push	ebx
		push	ebx
		call	_BN_lshift
		add	esp, 0Ch
		test	eax, eax
		jz	loc_7D2
		mov	eax, [esp+0E8h+var_B0]
		push	ebx
		push	eax
		push	eax
		call	_BN_add
		add	esp, 0Ch
		test	eax, eax
		jz	loc_7D2
		inc	edi
		cmp	edi, ebp
		jle	loc_478

loc_509:				; CODE XREF: _dsa_builtin_paramgen+3F2j
		mov	eax, [esp+0E8h+var_B4]
		mov	edi, [esp+0E8h+var_B0]
		dec	eax
		push	eax
		push	edi
		call	_BN_mask_bits
		add	esp, 8
		test	eax, eax
		jz	loc_7D2
		push	edi
		mov	edi, [esp+0ECh+var_98]
		push	edi
		call	_BN_copy
		add	esp, 8
		test	eax, eax
		jz	loc_7D2
		push	[esp+0E8h+var_D4]
		push	edi
		push	edi
		call	_BN_add
		add	esp, 0Ch
		test	eax, eax
		jz	loc_7D2
		push	[esp+0E8h+var_C8]
		push	ebx
		call	_BN_lshift1
		add	esp, 8
		test	eax, eax
		jz	loc_7D2
		push	[esp+0E8h+var_D8]
		push	ebx
		push	edi
		push	[esp+0F4h+var_9C]
		push	0
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jz	loc_7D2
		call	_BN_value_one
		push	eax
		push	[esp+0ECh+var_9C]
		push	ebx
		call	_BN_sub
		add	esp, 0Ch
		test	eax, eax
		jz	loc_7D2
		push	ebx
		push	edi
		mov	edi, [esp+0F0h+var_D0]
		push	edi
		call	_BN_sub
		add	esp, 0Ch
		test	eax, eax
		jz	loc_7D2
		push	[esp+0E8h+var_D4]
		push	edi
		call	_BN_cmp
		add	esp, 8
		test	eax, eax
		js	short loc_5E7
		mov	edi, [esp+0E8h+var_CC]
		push	edi
		push	1
		push	[esp+0F0h+var_D8]
		push	32h ; '2'
		push	[esp+0F8h+var_D0]
		call	_BN_is_prime_fasttest_ex
		add	esp, 14h
		test	eax, eax
		jg	short $end$168
		jnz	loc_7D2

loc_5E7:				; CODE XREF: _dsa_builtin_paramgen+542j
		mov	edi, [esp+0E8h+var_A8]
		inc	edi
		mov	[esp+0E8h+var_A8], edi
		cmp	edi, 1000h
		jl	loc_445
		mov	ebp, [esp+0E8h+var_AC]
		mov	edi, [esp+0E8h+var_CC]
		jmp	loc_250
; ---------------------------------------------------------------------------

$end$168:				; CODE XREF: _dsa_builtin_paramgen+55Fj
		push	1
		push	2
		push	edi
		call	_BN_GENCB_call
		add	esp, 0Ch
		test	eax, eax
		jz	loc_7D2
		call	_BN_value_one
		push	eax
		push	[esp+0ECh+var_D0]
		push	[esp+0F0h+var_D4]
		call	_BN_sub
		add	esp, 0Ch
		test	eax, eax
		jz	loc_7D2
		mov	ebp, [esp+0E8h+var_D8]
		push	ebp
		push	[esp+0ECh+var_C8]
		push	[esp+0F0h+var_D4]
		push	0
		push	ebx
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jz	loc_7D2
		push	2
		push	[esp+0ECh+var_D4]
		call	_BN_set_word
		add	esp, 8
		test	eax, eax
		jz	loc_7D2
		push	ebp
		push	[esp+0ECh+var_D0]
		push	[esp+0F0h+var_C0]
		call	_BN_MONT_CTX_set
		add	esp, 0Ch
		test	eax, eax
		jz	loc_7D2
		push	[esp+0E8h+var_C0]
		push	ebp
		push	[esp+0F0h+var_D0]
		push	ebx
		push	[esp+0F8h+var_D4]
		push	[esp+0FCh+var_C4]
		call	_BN_mod_exp_mont
		add	esp, 18h
		test	eax, eax
		jz	loc_7D2
		nop	dword ptr [eax]

loc_6B0:				; CODE XREF: _dsa_builtin_paramgen+683j
		mov	ecx, [esp+0E8h+var_C4]
		cmp	dword ptr [ecx+4], 1
		jnz	short loc_70A
		mov	eax, [ecx]
		cmp	dword ptr [eax], 1
		jnz	short loc_70A
		cmp	dword ptr [ecx+0Ch], 0
		jnz	short loc_70A
		call	_BN_value_one
		push	eax
		mov	eax, [esp+0ECh+var_D4]
		push	eax
		push	eax
		call	_BN_add
		add	esp, 0Ch
		test	eax, eax
		jz	loc_7D2
		push	[esp+0E8h+var_C0]
		inc	[esp+0ECh+var_A4]
		push	ebp
		push	[esp+0F0h+var_D0]
		push	ebx
		push	[esp+0F8h+var_D4]
		push	[esp+0FCh+var_C4]
		call	_BN_mod_exp_mont
		add	esp, 18h
		test	eax, eax
		jnz	short loc_6B0
		jmp	loc_7D2
; ---------------------------------------------------------------------------

loc_70A:				; CODE XREF: _dsa_builtin_paramgen+638j
					; _dsa_builtin_paramgen+63Fj ...
		push	1
		push	3
		push	edi
		call	_BN_GENCB_call
		add	esp, 0Ch
		test	eax, eax
		jz	loc_7D2
		mov	[esp+0E8h+var_A0], 1

$err$169:
		mov	ebx, [esp+0E8h+var_94]
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	short loc_73B
		push	eax
		call	_BN_free
		add	esp, 4

loc_73B:				; CODE XREF: _dsa_builtin_paramgen+6B0j
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_74B
		push	eax
		call	_BN_free
		add	esp, 4

loc_74B:				; CODE XREF: _dsa_builtin_paramgen+6C0j
		mov	eax, [ebx+14h]
		test	eax, eax
		jz	short loc_75B
		push	eax
		call	_BN_free
		add	esp, 4

loc_75B:				; CODE XREF: _dsa_builtin_paramgen+6D0j
		push	[esp+0E8h+var_D0]
		call	_BN_dup
		push	[esp+0ECh+var_C8]
		mov	[ebx+0Ch], eax
		call	_BN_dup
		push	[esp+0F0h+var_C4]
		mov	[ebx+10h], eax
		call	_BN_dup
		add	esp, 0Ch
		mov	[ebx+14h], eax
		cmp	dword ptr [ebx+0Ch], 0
		jz	short loc_7CA
		cmp	dword ptr [ebx+10h], 0
		jz	short loc_7CA
		test	eax, eax
		jz	short loc_7CA
		mov	ecx, [esp+0E8h+var_90]
		test	ecx, ecx
		jz	short loc_7A0
		mov	eax, [esp+0E8h+var_A8]
		mov	[ecx], eax

loc_7A0:				; CODE XREF: _dsa_builtin_paramgen+718j
		mov	ecx, [esp+0E8h+var_8C]
		test	ecx, ecx
		jz	short loc_7AE
		mov	eax, [esp+0E8h+var_A4]
		mov	[ecx], eax

loc_7AE:				; CODE XREF: _dsa_builtin_paramgen+726j
		mov	eax, [esp+0E8h+var_88]
		test	eax, eax
		jz	short loc_7D2
		push	esi		; Size
		lea	ecx, [esp+0ECh+Dst]
		push	ecx		; Src
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch
		jmp	short loc_7D2
; ---------------------------------------------------------------------------

loc_7CA:				; CODE XREF: _dsa_builtin_paramgen+706j
					; _dsa_builtin_paramgen+70Cj ...
		mov	[esp+0E8h+var_A0], 0

loc_7D2:				; CODE XREF: _dsa_builtin_paramgen+1C4j
					; _dsa_builtin_paramgen+1E5j ...
		mov	ebx, [esp+0E8h+var_D8]
		push	ebx
		call	_BN_CTX_end
		push	ebx
		call	_BN_CTX_free
		add	esp, 8

loc_7E5:				; CODE XREF: _dsa_builtin_paramgen+138j
		push	[esp+0E8h+var_C0]
		call	_BN_MONT_CTX_free
		add	esp, 4
		pop	ebx

loc_7F2:				; CODE XREF: _dsa_builtin_paramgen+124j
		mov	ecx, [esp+0E4h+var_4]
		mov	eax, [esp+0E4h+var_A0]
		pop	edi
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0D8h
		retn
_dsa_builtin_paramgen endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 810h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _dsa_builtin_paramgen2
_dsa_builtin_paramgen2 proc near

var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
Size		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
Dst		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
Src		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_44		= byte ptr -44h
var_43		= byte ptr -43h
var_42		= byte ptr -42h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch

		mov	eax, 0C8h ; 'È'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+0C8h+var_4], eax
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	eax, [esp+0D8h+arg_C]
		mov	ecx, [esp+0D8h+arg_0]
		mov	[esp+0D8h+var_BC], eax
		mov	eax, [esp+0D8h+arg_10]
		mov	[esp+0D8h+Src],	eax
		mov	eax, [esp+0D8h+arg_1C]
		mov	[esp+0D8h+var_80], eax
		mov	eax, [esp+0D8h+arg_20]
		mov	[esp+0D8h+var_64], eax
		mov	eax, [esp+0D8h+arg_24]
		mov	[esp+0D8h+var_60], eax
		xor	ebx, ebx
		mov	eax, [esp+0D8h+arg_28]
		mov	ebp, [esp+0D8h+arg_14]
		mov	[esp+0D8h+var_B4], eax
		mov	esi, [esp+0D8h+arg_8]
		mov	eax, esi
		shr	eax, 3
		mov	[esp+0D8h+var_74], eax
		mov	eax, 2
		mov	[esp+0D8h+var_A8], eax
		lea	eax, [esp+0D8h+var_5C]
		push	eax
		mov	[esp+0DCh+var_88], ecx
		xor	edi, edi
		mov	[esp+0DCh+Size], ebp
		mov	[esp+0DCh+var_A0], 0FFFFFFFFh
		mov	[esp+0DCh+Dst],	ebx
		mov	[esp+0DCh+var_98], ebx
		mov	[esp+0DCh+var_94], ebx
		mov	[esp+0DCh+var_C8], ebx
		call	_EVP_MD_CTX_init
		mov	eax, [esp+0DCh+var_BC]
		add	esp, 4
		test	eax, eax
		jnz	short loc_8F5
		cmp	esi, 0A0h ; ' '
		jnz	short loc_8DD
		call	_EVP_sha1
		jmp	short loc_8F1
; ---------------------------------------------------------------------------

loc_8DD:				; CODE XREF: _dsa_builtin_paramgen2+C4j
		cmp	esi, 0E0h ; 'à'
		jnz	short loc_8EC
		call	_EVP_sha224
		jmp	short loc_8F1
; ---------------------------------------------------------------------------

loc_8EC:				; CODE XREF: _dsa_builtin_paramgen2+D3j
		call	_EVP_sha256

loc_8F1:				; CODE XREF: _dsa_builtin_paramgen2+CBj
					; _dsa_builtin_paramgen2+DAj
		mov	[esp+0D8h+var_BC], eax

loc_8F5:				; CODE XREF: _dsa_builtin_paramgen2+BCj
		push	eax
		call	_EVP_MD_size
		mov	esi, eax
		add	esp, 4
		mov	eax, [esp+0D8h+var_88]
		mov	[esp+0D8h+var_AC], esi
		cmp	[eax+0Ch], ebx
		jz	short loc_91B
		cmp	[eax+10h], ebx
		jz	short loc_91B
		cmp	[esp+0D8h+arg_18], ebx
		jl	short loc_97B

loc_91B:				; CODE XREF: _dsa_builtin_paramgen2+FBj
					; _dsa_builtin_paramgen2+100j
		test	ebp, ebp
		push	1BBh
		cmovz	ebp, esi
		push	offset ??_C@_0BH@JFAMBCAP@?4?2crypto?2dsa?2dsa_gen?4c?$AA@ ; ".\\crypto\\dsa\\dsa_gen.c"
		push	ebp
		mov	[esp+0E4h+Size], ebp
		call	_CRYPTO_malloc
		mov	ebx, eax
		add	esp, 0Ch
		mov	eax, [esp+0D8h+var_80]
		test	eax, eax
		jnz	short loc_954
		push	1C0h
		push	offset ??_C@_0BH@JFAMBCAP@?4?2crypto?2dsa?2dsa_gen?4c?$AA@ ; ".\\crypto\\dsa\\dsa_gen.c"
		push	ebp
		call	_CRYPTO_malloc
		add	esp, 0Ch

loc_954:				; CODE XREF: _dsa_builtin_paramgen2+12Fj
		mov	[esp+0D8h+Dst],	eax
		test	ebx, ebx
		jz	loc_DE4
		test	eax, eax
		jz	loc_DD7
		mov	eax, [esp+0D8h+Src]
		test	eax, eax
		jz	short loc_97B
		push	ebp		; Size
		push	eax		; Src
		push	ebx		; Dst
		call	_memcpy
		add	esp, 0Ch

loc_97B:				; CODE XREF: _dsa_builtin_paramgen2+109j
					; _dsa_builtin_paramgen2+15Ej
		call	_BN_CTX_new
		mov	ebp, eax
		mov	[esp+0D8h+var_C8], ebp
		test	ebp, ebp
		jz	loc_DD7
		call	_BN_MONT_CTX_new
		mov	[esp+0D8h+var_98], eax
		test	eax, eax
		jz	loc_DD7
		push	ebp
		call	_BN_CTX_start
		push	ebp
		call	_BN_CTX_get
		push	[esp+0E0h+var_C8]
		mov	ebp, eax
		call	_BN_CTX_get
		push	[esp+0E4h+var_C8]
		mov	[esp+0E8h+var_84], eax
		call	_BN_CTX_get
		push	[esp+0E8h+var_C8]
		mov	[esp+0ECh+var_90], eax
		call	_BN_CTX_get
		push	[esp+0ECh+var_C8]
		mov	[esp+0F0h+var_68], eax
		call	_BN_CTX_get
		push	[esp+0F0h+var_C8]
		mov	[esp+0F4h+var_78], eax
		call	_BN_CTX_get
		mov	ecx, [esp+0F4h+var_88]
		add	esp, 1Ch
		mov	[esp+0D8h+var_C4], eax
		mov	eax, [ecx+0Ch]
		mov	[esp+0D8h+var_B8], eax
		test	eax, eax
		jz	short loc_A31
		mov	eax, [ecx+10h]
		mov	[esp+0D8h+var_B0], eax
		test	eax, eax
		jz	short loc_A31
		cmp	[esp+0D8h+arg_18], edi
		jl	$g_only$182
		push	[esp+0D8h+Size]	; Size
		push	ebx		; Src
		push	[esp+0E0h+Dst]	; Dst
		call	_memcpy
		add	esp, 0Ch
		jmp	$g_only$182
; ---------------------------------------------------------------------------

loc_A31:				; CODE XREF: _dsa_builtin_paramgen2+1F1j
					; _dsa_builtin_paramgen2+1FCj
		mov	esi, [esp+0D8h+var_C8]
		push	esi
		call	_BN_CTX_get
		push	esi
		mov	[esp+0E0h+var_B8], eax
		call	_BN_CTX_get
		mov	[esp+0E0h+var_B0], eax
		add	esp, 8
		mov	eax, [esp+0D8h+arg_4]
		dec	eax
		mov	[esp+0D8h+var_6C], eax
		push	eax
		call	_BN_value_one
		push	eax
		push	[esp+0E0h+var_C4]
		call	_BN_lshift
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7
		mov	esi, [esp+0D8h+Src]
		nop	word ptr [eax+eax+00000000h]

loc_A80:				; CODE XREF: _dsa_builtin_paramgen2+5A1j
		mov	edi, [esp+0D8h+var_74]

loc_A84:				; CODE XREF: _dsa_builtin_paramgen2+34Ej
		push	[esp+0D8h+var_94]
		push	0
		push	[esp+0E0h+var_B4]
		call	_BN_GENCB_call
		inc	[esp+0E4h+var_94]
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7
		test	esi, esi
		jnz	short loc_ABB
		push	[esp+0D8h+Size]
		push	ebx
		call	_RAND_pseudo_bytes
		add	esp, 8
		test	eax, eax
		js	loc_DD7

loc_ABB:				; CODE XREF: _dsa_builtin_paramgen2+294j
		push	0
		push	[esp+0DCh+var_BC]
		lea	eax, [esp+0E0h+var_44]
		push	0
		push	eax
		push	[esp+0E8h+Size]
		push	ebx
		call	_EVP_Digest
		add	esp, 18h
		test	eax, eax
		jz	loc_DD7
		mov	ecx, [esp+0D8h+var_AC]
		lea	esi, [esp+0D8h+var_44]
		cmp	ecx, edi
		jle	short loc_AF7
		mov	eax, ecx
		sub	eax, edi
		add	esi, eax
		cmp	ecx, edi

loc_AF7:				; CODE XREF: _dsa_builtin_paramgen2+2DDj
		jge	short loc_B12
		mov	eax, edi
		sub	eax, ecx
		push	eax		; Size
		lea	eax, [esp+0DCh+var_44]
		add	eax, ecx
		push	0		; Val
		push	eax		; Dst
		call	_memset
		add	esp, 0Ch

loc_B12:				; CODE XREF: _dsa_builtin_paramgen2:loc_AF7j
		push	[esp+0D8h+var_B0]
		or	byte ptr [esi],	80h
		or	byte ptr [esi+edi-1], 1
		push	edi
		push	esi
		call	_BN_bin2bn
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7
		push	[esp+0D8h+var_B4]
		mov	esi, [esp+0DCh+Src]
		xor	eax, eax
		test	esi, esi
		setnz	al
		push	eax
		push	[esp+0E0h+var_C8]
		push	32h ; '2'
		push	[esp+0E8h+var_B0]
		call	_BN_is_prime_fasttest_ex
		add	esp, 14h
		test	eax, eax
		jg	short loc_B75
		jnz	loc_DD7
		test	esi, esi
		jz	loc_A84
		push	20Dh
		push	offset ??_C@_0BH@JFAMBCAP@?4?2crypto?2dsa?2dsa_gen?4c?$AA@ ; ".\\crypto\\dsa\\dsa_gen.c"
		push	71h ; 'q'
		jmp	loc_DC3
; ---------------------------------------------------------------------------

loc_B75:				; CODE XREF: _dsa_builtin_paramgen2+344j
		mov	eax, [esp+0D8h+var_80]
		test	eax, eax
		jz	short loc_B8B
		push	[esp+0D8h+Size]	; Size
		push	ebx		; Src
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch

loc_B8B:				; CODE XREF: _dsa_builtin_paramgen2+36Bj
		mov	esi, [esp+0D8h+var_B4]
		push	0
		push	2
		push	esi
		call	_BN_GENCB_call
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7
		push	0
		push	3
		push	esi
		call	_BN_GENCB_call
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7
		mov	ecx, [esp+0D8h+var_AC]
		xor	edi, edi
		mov	eax, [esp+0D8h+arg_4]
		xor	edx, edx
		shl	ecx, 3
		dec	eax
		div	ecx
		mov	[esp+0D8h+var_8C], edi
		mov	esi, eax
		mov	[esp+0D8h+var_7C], esi

loc_BD8:				; CODE XREF: _dsa_builtin_paramgen2+595j
		test	edi, edi
		jz	short loc_BF3
		push	edi
		push	0
		push	[esp+0E0h+var_B4]
		call	_BN_GENCB_call
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7

loc_BF3:				; CODE XREF: _dsa_builtin_paramgen2+3CAj
		push	0
		push	[esp+0DCh+var_90]
		call	_BN_set_word
		add	esp, 8
		xor	edi, edi
		test	esi, esi
		js	loc_CB8
		mov	ecx, [esp+0D8h+Size]
		xor	esi, esi
		lea	eax, [ecx-1]
		mov	[esp+0D8h+var_70], eax

loc_C18:				; CODE XREF: _dsa_builtin_paramgen2+49Ej
		test	eax, eax
		js	short loc_C2B
		nop	dword ptr [eax+00h]

loc_C20:				; CODE XREF: _dsa_builtin_paramgen2+419j
		add	byte ptr [eax+ebx], 1
		jnz	short loc_C2B
		sub	eax, 1
		jns	short loc_C20

loc_C2B:				; CODE XREF: _dsa_builtin_paramgen2+40Aj
					; _dsa_builtin_paramgen2+414j
		push	0
		push	[esp+0DCh+var_BC]
		lea	eax, [esp+0E0h+var_44]
		push	0
		push	eax
		push	ecx
		push	ebx
		call	_EVP_Digest
		add	esp, 18h
		test	eax, eax
		jz	loc_DD7
		push	ebp
		push	[esp+0DCh+var_AC]
		lea	eax, [esp+0E0h+var_44]
		push	eax
		call	_BN_bin2bn
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7
		push	esi
		push	ebp
		push	ebp
		call	_BN_lshift
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7
		mov	eax, [esp+0D8h+var_90]
		push	ebp
		push	eax
		push	eax
		call	_BN_add
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7
		mov	ecx, [esp+0D8h+var_AC]
		inc	edi
		lea	eax, ds:0[ecx*8]
		mov	ecx, [esp+0D8h+Size]
		add	esi, eax
		mov	eax, [esp+0D8h+var_70]
		cmp	edi, [esp+0D8h+var_7C]
		jle	loc_C18
		mov	esi, [esp+0D8h+var_7C]

loc_CB8:				; CODE XREF: _dsa_builtin_paramgen2+3F5j
		push	[esp+0D8h+var_6C]
		mov	edi, [esp+0DCh+var_90]
		push	edi
		call	_BN_mask_bits
		add	esp, 8
		test	eax, eax
		jz	loc_DD7
		push	edi
		mov	edi, [esp+0DCh+var_68]
		push	edi
		call	_BN_copy
		add	esp, 8
		test	eax, eax
		jz	loc_DD7
		push	[esp+0D8h+var_C4]
		push	edi
		push	edi
		call	_BN_add
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7
		push	[esp+0D8h+var_B0]
		push	ebp
		call	_BN_lshift1
		add	esp, 8
		test	eax, eax
		jz	loc_DD7
		push	[esp+0D8h+var_C8]
		push	ebp
		push	edi
		push	[esp+0E4h+var_78]
		push	0
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jz	loc_DD7
		call	_BN_value_one
		push	eax
		push	[esp+0DCh+var_78]
		push	ebp
		call	_BN_sub
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7
		push	ebp
		push	edi
		mov	edi, [esp+0E0h+var_B8]
		push	edi
		call	_BN_sub
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_DD7
		push	[esp+0D8h+var_C4]
		push	edi
		call	_BN_cmp
		add	esp, 8
		test	eax, eax
		js	short loc_D90
		mov	edi, [esp+0D8h+var_B4]
		push	edi
		push	1
		push	[esp+0E0h+var_C8]
		push	32h ; '2'
		push	[esp+0E8h+var_B8]
		call	_BN_is_prime_fasttest_ex
		add	esp, 14h
		test	eax, eax
		jg	$end$183
		jnz	short loc_DD7

loc_D90:				; CODE XREF: _dsa_builtin_paramgen2+55Bj
		mov	edi, [esp+0D8h+var_8C]
		mov	eax, [esp+0D8h+arg_4]
		inc	edi
		shl	eax, 2
		mov	[esp+0D8h+var_8C], edi
		cmp	edi, eax
		jl	loc_BD8
		mov	esi, [esp+0D8h+Src]
		test	esi, esi
		jz	loc_A80
		push	266h
		push	offset ??_C@_0BH@JFAMBCAP@?4?2crypto?2dsa?2dsa_gen?4c?$AA@ ; ".\\crypto\\dsa\\dsa_gen.c"
		push	70h ; 'p'

loc_DC3:				; CODE XREF: _dsa_builtin_paramgen2+360j
		push	7Eh ; '~'
		push	0Ah
		mov	[esp+0ECh+var_A0], 0
		call	_ERR_put_error
		add	esp, 14h

loc_DD7:				; CODE XREF: _dsa_builtin_paramgen2+152j
					; _dsa_builtin_paramgen2+178j ...
		test	ebx, ebx
		jz	short loc_DE4
		push	ebx
		call	_CRYPTO_free
		add	esp, 4

loc_DE4:				; CODE XREF: _dsa_builtin_paramgen2+14Aj
					; _dsa_builtin_paramgen2+5C9j
		mov	eax, [esp+0D8h+Dst]
		cmp	[esp+0D8h+var_80], eax
		jz	short loc_DF7
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_DF7:				; CODE XREF: _dsa_builtin_paramgen2+5DCj
		mov	ebx, [esp+0D8h+var_C8]
		test	ebx, ebx
		jz	short loc_E0E
		push	ebx
		call	_BN_CTX_end
		push	ebx
		call	_BN_CTX_free
		add	esp, 8

loc_E0E:				; CODE XREF: _dsa_builtin_paramgen2+5EDj
		mov	eax, [esp+0D8h+var_98]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		test	eax, eax
		jz	short loc_E23
		push	eax
		call	_BN_MONT_CTX_free
		add	esp, 4

loc_E23:				; CODE XREF: _dsa_builtin_paramgen2+608j
		lea	eax, [esp+0C8h+var_5C]
		push	eax
		call	_EVP_MD_CTX_cleanup
		mov	ecx, [esp+0CCh+var_4]
		add	esp, 4
		mov	eax, [esp+0C8h+var_A0]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0C8h
		retn
; ---------------------------------------------------------------------------

$end$183:				; CODE XREF: _dsa_builtin_paramgen2+578j
		push	1
		push	2
		push	edi
		call	_BN_GENCB_call
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7
		mov	edi, [esp+0D8h+var_8C]
		mov	esi, [esp+0D8h+var_AC]

$g_only$182:				; CODE XREF: _dsa_builtin_paramgen2+205j
					; _dsa_builtin_paramgen2+21Cj
		call	_BN_value_one
		push	eax
		push	[esp+0DCh+var_B8]
		push	[esp+0E0h+var_C4]
		call	_BN_sub
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7
		push	[esp+0D8h+var_C8]
		push	[esp+0DCh+var_B0]
		push	[esp+0E0h+var_C4]
		push	0
		push	ebp
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jz	loc_DD7
		cmp	[esp+0D8h+arg_18], 0
		jge	short loc_EC5
		push	2
		push	[esp+0DCh+var_C4]
		call	_BN_set_word
		add	esp, 8
		test	eax, eax
		jz	loc_DD7
		jmp	short loc_ECE
; ---------------------------------------------------------------------------

loc_EC5:				; CODE XREF: _dsa_builtin_paramgen2+69Bj
		mov	eax, 1
		mov	[esp+0D8h+var_A8], eax

loc_ECE:				; CODE XREF: _dsa_builtin_paramgen2+6B3j
		push	[esp+0D8h+var_C8]
		push	[esp+0DCh+var_B8]
		push	[esp+0E0h+var_98]
		call	_BN_MONT_CTX_set
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7
		mov	eax, [esp+0D8h+arg_18]
		mov	ecx, [esp+0D8h+var_A8]

loc_EF5:				; CODE XREF: _dsa_builtin_paramgen2+842j
		test	eax, eax
		js	loc_FD5
		mov	[esp+0D8h+var_44], al
		mov	eax, ecx
		shr	eax, 8
		push	0
		push	[esp+0DCh+var_BC]
		mov	[esp+0E0h+var_43], al
		lea	eax, [esp+0E0h+var_5C]
		push	eax
		mov	[esp+0E4h+var_42], cl
		call	_EVP_DigestInit_ex
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7
		push	[esp+0D8h+Size]
		lea	eax, [esp+0DCh+var_5C]
		push	[esp+0DCh+Dst]
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7
		push	4
		lea	eax, [esp+0DCh+var_5C]
		push	offset ?ggen@?BH@??dsa_builtin_paramgen2@@9@9 ;	`dsa_builtin_paramgen2'::`23'::ggen
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7
		push	3
		lea	eax, [esp+0DCh+var_44]
		push	eax
		lea	eax, [esp+0E0h+var_5C]
		push	eax
		call	_EVP_DigestUpdate
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7
		push	0
		lea	eax, [esp+0DCh+var_44]
		push	eax
		lea	eax, [esp+0E0h+var_5C]
		push	eax
		call	_EVP_DigestFinal_ex
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7
		push	[esp+0D8h+var_C4]
		lea	eax, [esp+0DCh+var_44]
		push	esi
		push	eax
		call	_BN_bin2bn
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7

loc_FD5:				; CODE XREF: _dsa_builtin_paramgen2+6E7j
					; _dsa_builtin_paramgen2+83Aj
		push	[esp+0D8h+var_98]
		push	[esp+0DCh+var_C8]
		push	[esp+0E0h+var_B8]
		push	ebp
		push	[esp+0E8h+var_C4]
		push	[esp+0ECh+var_84]
		call	_BN_mod_exp_mont
		add	esp, 18h
		test	eax, eax
		jz	loc_DD7
		mov	ecx, [esp+0D8h+var_84]
		cmp	dword ptr [ecx+4], 1
		jnz	short loc_105D
		mov	eax, [ecx]
		cmp	dword ptr [eax], 1
		jnz	short loc_105D
		cmp	dword ptr [ecx+0Ch], 0
		jnz	short loc_105D
		mov	eax, [esp+0D8h+arg_18]
		test	eax, eax
		jns	short loc_103F
		call	_BN_value_one
		push	eax
		mov	eax, [esp+0DCh+var_C4]
		push	eax
		push	eax
		call	_BN_add
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7
		mov	eax, [esp+0D8h+arg_18]

loc_103F:				; CODE XREF: _dsa_builtin_paramgen2+80Aj
		mov	ecx, [esp+0D8h+var_A8]
		inc	ecx
		mov	[esp+0D8h+var_A8], ecx
		test	eax, eax
		js	short loc_FD5
		cmp	ecx, 0FFFFh
		jbe	loc_EF5
		jmp	loc_DD7
; ---------------------------------------------------------------------------

loc_105D:				; CODE XREF: _dsa_builtin_paramgen2+7F2j
					; _dsa_builtin_paramgen2+7F9j ...
		push	1
		push	3
		push	[esp+0E0h+var_B4]
		call	_BN_GENCB_call
		add	esp, 0Ch
		test	eax, eax
		jz	loc_DD7
		mov	[esp+0D8h+var_A0], 1
		nop	dword ptr [eax]

$err$184:
		mov	esi, [esp+0D8h+var_88]
		mov	ebp, [esp+0D8h+var_B8]
		mov	eax, [esi+0Ch]
		cmp	ebp, eax
		jz	short loc_10A8
		test	eax, eax
		jz	short loc_109C
		push	eax
		call	_BN_free
		add	esp, 4

loc_109C:				; CODE XREF: _dsa_builtin_paramgen2+881j
		push	ebp
		call	_BN_dup
		add	esp, 4
		mov	[esi+0Ch], eax

loc_10A8:				; CODE XREF: _dsa_builtin_paramgen2+87Dj
		mov	eax, [esi+10h]
		mov	ebp, [esp+0D8h+var_B0]
		cmp	ebp, eax
		jz	short loc_10CC
		test	eax, eax
		jz	short loc_10C0
		push	eax
		call	_BN_free
		add	esp, 4

loc_10C0:				; CODE XREF: _dsa_builtin_paramgen2+8A5j
		push	ebp
		call	_BN_dup
		add	esp, 4
		mov	[esi+10h], eax

loc_10CC:				; CODE XREF: _dsa_builtin_paramgen2+8A1j
		mov	eax, [esi+14h]
		test	eax, eax
		jz	short loc_10DC
		push	eax
		call	_BN_free
		add	esp, 4

loc_10DC:				; CODE XREF: _dsa_builtin_paramgen2+8C1j
		push	[esp+0D8h+var_84]
		call	_BN_dup
		add	esp, 4
		mov	[esi+14h], eax
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_111C
		cmp	dword ptr [esi+10h], 0
		jz	short loc_111C
		test	eax, eax
		jz	short loc_111C
		mov	eax, [esp+0D8h+var_64]
		test	eax, eax
		jz	short loc_1105
		mov	[eax], edi

loc_1105:				; CODE XREF: _dsa_builtin_paramgen2+8F1j
		mov	ecx, [esp+0D8h+var_60]
		test	ecx, ecx
		jz	loc_DD7
		mov	eax, [esp+0D8h+var_A8]
		mov	[ecx], eax
		jmp	loc_DD7
; ---------------------------------------------------------------------------

loc_111C:				; CODE XREF: _dsa_builtin_paramgen2+8DFj
					; _dsa_builtin_paramgen2+8E5j ...
		mov	[esp+0D8h+var_A0], 0FFFFFFFFh
		jmp	loc_DD7
_dsa_builtin_paramgen2 endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 112Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _dsa_paramgen_check_g
_dsa_paramgen_check_g proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	esi
		push	edi
		xor	ebx, ebx
		or	esi, 0FFFFFFFFh
		call	_BN_CTX_new
		mov	edi, eax
		test	edi, edi
		jnz	short loc_1150
		pop	edi
		or	eax, esi
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1150:				; CODE XREF: _dsa_paramgen_check_g+1Bj
		push	ebp
		push	edi
		call	_BN_CTX_start
		mov	ebp, [esp+18h+arg_0]
		call	_BN_value_one
		push	eax
		push	dword ptr [ebp+14h]
		call	_BN_cmp
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_1182
		push	dword ptr [ebp+0Ch]
		push	dword ptr [ebp+14h]
		call	_BN_cmp
		add	esp, 8
		test	eax, eax
		js	short loc_118A

loc_1182:				; CODE XREF: _dsa_paramgen_check_g+42j
		pop	ebp
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_118A:				; CODE XREF: _dsa_paramgen_check_g+54j
		push	edi
		call	_BN_CTX_get
		add	esp, 4
		mov	[esp+14h+var_4], eax
		test	eax, eax
		jz	short $err$16
		call	_BN_MONT_CTX_new
		mov	ebx, eax
		test	ebx, ebx
		jz	short $err$16
		push	edi
		push	dword ptr [ebp+0Ch]
		push	ebx
		call	_BN_MONT_CTX_set
		add	esp, 0Ch
		test	eax, eax
		jz	short $err$16
		push	ebx
		push	edi
		push	dword ptr [ebp+0Ch]
		push	dword ptr [ebp+10h]
		push	dword ptr [ebp+14h]
		mov	ebp, [esp+28h+var_4]
		push	ebp
		call	_BN_mod_exp_mont
		add	esp, 18h
		test	eax, eax
		jz	short $err$16
		call	_BN_value_one
		push	eax
		push	ebp
		call	_BN_cmp
		add	esp, 8
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		inc	esi

$err$16:				; CODE XREF: _dsa_paramgen_check_g+6Dj
					; _dsa_paramgen_check_g+78j ...
		push	edi
		call	_BN_CTX_end
		add	esp, 4
		test	ebx, ebx
		jz	short loc_11FF
		push	ebx
		call	_BN_MONT_CTX_free
		add	esp, 4

loc_11FF:				; CODE XREF: _dsa_paramgen_check_g+C8j
		push	edi
		call	_BN_CTX_free
		add	esp, 4
		mov	eax, esi
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
_dsa_paramgen_check_g endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1210h
; COMDAT (pick any)
		public ??_C@_0BH@JFAMBCAP@?4?2crypto?2dsa?2dsa_gen?4c?$AA@
; `string'
??_C@_0BH@JFAMBCAP@?4?2crypto?2dsa?2dsa_gen?4c?$AA@ db '.\crypto\dsa\dsa_gen.c',0
					; DATA XREF: _dsa_builtin_paramgen2+115o
					; _dsa_builtin_paramgen2+136o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _dsa_builtin_paramgen2+11Fp
					; _dsa_builtin_paramgen2+13Cp
		extrn _CRYPTO_free:near	; CODE XREF: _dsa_builtin_paramgen2+5CCp
					; _dsa_builtin_paramgen2+5DFp
		extrn _ERR_put_error:near ; CODE XREF: _dsa_builtin_paramgen2+5BFp
		extrn _BN_GENCB_call:near ; CODE XREF: _dsa_builtin_paramgen+1D7p
					; _dsa_builtin_paramgen+387p ...
		extrn _BN_value_one:near ; CODE	XREF: _dsa_builtin_paramgen+1B0p
					; _dsa_builtin_paramgen+501p ...
		extrn _BN_CTX_new:near	; CODE XREF: _dsa_builtin_paramgen+12Bp
					; _dsa_builtin_paramgen2:loc_97Bp ...
		extrn _BN_CTX_free:near	; CODE XREF: _dsa_builtin_paramgen+75Dp
					; _dsa_builtin_paramgen2+5F6p ...
		extrn _BN_CTX_start:near ; CODE	XREF: _dsa_builtin_paramgen+13Fp
					; _dsa_builtin_paramgen2+190p ...
		extrn _BN_CTX_get:near	; CODE XREF: _dsa_builtin_paramgen+145p
					; _dsa_builtin_paramgen+150p ...
		extrn _BN_CTX_end:near	; CODE XREF: _dsa_builtin_paramgen+757p
					; _dsa_builtin_paramgen2+5F0p ...
		extrn _BN_copy:near	; CODE XREF: _dsa_builtin_paramgen+4AAp
					; _dsa_builtin_paramgen2+4C7p
		extrn _BN_bin2bn:near	; CODE XREF: _dsa_builtin_paramgen+344p
					; _dsa_builtin_paramgen+43Cp ...
		extrn _BN_sub:near	; CODE XREF: _dsa_builtin_paramgen+50Cp
					; _dsa_builtin_paramgen+523p ...
		extrn _BN_add:near	; CODE XREF: _dsa_builtin_paramgen+470p
					; _dsa_builtin_paramgen+4C0p ...
		extrn _BN_div:near	; CODE XREF: _dsa_builtin_paramgen+4F1p
					; _dsa_builtin_paramgen+5CCp ...
		extrn _BN_set_word:near	; CODE XREF: _dsa_builtin_paramgen+3E6p
					; _dsa_builtin_paramgen+5E2p ...
		extrn _BN_cmp:near	; CODE XREF: _dsa_builtin_paramgen+538p
					; _dsa_builtin_paramgen2+551p ...
		extrn _BN_free:near	; CODE XREF: _dsa_builtin_paramgen+6B3p
					; _dsa_builtin_paramgen+6C3p ...
		extrn _BN_lshift:near	; CODE XREF: _dsa_builtin_paramgen+1BAp
					; _dsa_builtin_paramgen+459p ...
		extrn _BN_lshift1:near	; CODE XREF: _dsa_builtin_paramgen+4D5p
					; _dsa_builtin_paramgen2+4F2p
		extrn _BN_mod_exp_mont:near ; CODE XREF: _dsa_builtin_paramgen+61Dp
					; _dsa_builtin_paramgen+679p ...
		extrn _BN_mask_bits:near ; CODE	XREF: _dsa_builtin_paramgen+494p
					; _dsa_builtin_paramgen2+4B1p
		extrn _BN_dup:near	; CODE XREF: _dsa_builtin_paramgen+6DFp
					; _dsa_builtin_paramgen+6EBp ...
		extrn _BN_is_prime_fasttest_ex:near ; CODE XREF: _dsa_builtin_paramgen+363p
					; _dsa_builtin_paramgen+555p ...
		extrn _BN_MONT_CTX_new:near ; CODE XREF: _dsa_builtin_paramgen:loc_199p
					; _dsa_builtin_paramgen2+17Ep ...
		extrn _BN_MONT_CTX_free:near ; CODE XREF: _dsa_builtin_paramgen+769p
					; _dsa_builtin_paramgen2+60Bp ...
		extrn _BN_MONT_CTX_set:near ; CODE XREF: _dsa_builtin_paramgen+5FBp
					; _dsa_builtin_paramgen2+6CAp ...
		extrn _EVP_MD_size:near	; CODE XREF: _DSA_generate_parameters_ex+49p
					; _dsa_builtin_paramgen2+E6p
		extrn _EVP_MD_CTX_init:near ; CODE XREF: _dsa_builtin_paramgen2+AEp
		extrn _EVP_MD_CTX_cleanup:near ; CODE XREF: _dsa_builtin_paramgen2+618p
		extrn _EVP_DigestInit_ex:near ;	CODE XREF: _dsa_builtin_paramgen2+715p
		extrn _EVP_DigestUpdate:near ; CODE XREF: _dsa_builtin_paramgen2+735p
					; _dsa_builtin_paramgen2+754p ...
		extrn _EVP_DigestFinal_ex:near ; CODE XREF: _dsa_builtin_paramgen2+798p
		extrn _EVP_Digest:near	; CODE XREF: _dsa_builtin_paramgen+282p
					; _dsa_builtin_paramgen+2A8p ...
		extrn _EVP_sha1:near	; CODE XREF: _DSA_generate_parameters_ex:loc_45p
					; _dsa_builtin_paramgen+B7p ...
		extrn _EVP_sha224:near	; CODE XREF: _dsa_builtin_paramgen2+D5p
		extrn _EVP_sha256:near	; CODE XREF: _DSA_generate_parameters_ex+3Ap
					; _dsa_builtin_paramgen2:loc_8ECp
		extrn _RAND_pseudo_bytes:near ;	CODE XREF: _dsa_builtin_paramgen+210p
					; _dsa_builtin_paramgen2+29Bp
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _dsa_builtin_paramgen+A7p
					; _dsa_builtin_paramgen+782p ...
		extrn __chkstk:near	; CODE XREF: _dsa_builtin_paramgen+5p
					; _dsa_builtin_paramgen2+5p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _dsa_builtin_paramgen+111p
					; _dsa_builtin_paramgen+236p ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _dsa_builtin_paramgen2+2FAp
		extrn ___security_cookie:near ;	DATA XREF: _dsa_builtin_paramgen+Ar
					; _dsa_builtin_paramgen2+Ar


		end
