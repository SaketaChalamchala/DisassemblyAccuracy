;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	7F8F44FF1F6AB1549FFAAB45237CE5C8
; Input	CRC32 :	CB8FCEDA

; File Name   :	C:\compspace\Diff\openssl\obj\v3_info.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ACCESS_DESCRIPTION_it
_ACCESS_DESCRIPTION_it proc near	; DATA XREF: .rdata:00000420o
		mov	eax, offset ?local_it@?1??ACCESS_DESCRIPTION_it@@9@9 ; `ACCESS_DESCRIPTION_it'::`2'::local_it
		retn
_ACCESS_DESCRIPTION_it endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _AUTHORITY_INFO_ACCESS_it
_AUTHORITY_INFO_ACCESS_it proc near	; DATA XREF: .rdata:00000364o
					; .rdata:0000039Co
		mov	eax, offset ?local_it@?1??AUTHORITY_INFO_ACCESS_it@@9@9	; `AUTHORITY_INFO_ACCESS_it'::`2'::local_it
		retn
_AUTHORITY_INFO_ACCESS_it endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_i2v_AUTHORITY_INFO_ACCESS proc	near	; DATA XREF: .rdata:00000380o
					; .rdata:000003B8o

var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 60h ; '`'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+60h+var_4], eax
		push	ebx
		mov	ebx, [esp+64h+arg_8]
		push	ebp
		push	esi
		mov	esi, [esp+6Ch+arg_4]
		xor	ebp, ebp
		push	edi
		mov	edi, [esp+70h+arg_0]
		push	esi
		mov	[esp+74h+var_58], edi
		mov	[esp+74h+var_5C], esi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	loc_113

loc_50:					; CODE XREF: _i2v_AUTHORITY_INFO_ACCESS+FDj
		push	ebp
		push	esi
		call	_sk_value
		mov	esi, eax
		push	ebx
		push	dword ptr [esi+4]
		push	edi
		call	_i2v_GENERAL_NAME
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jz	loc_117
		push	ebp
		push	ebx
		call	_sk_value
		push	dword ptr [esi]
		mov	edi, eax
		lea	eax, [esp+7Ch+var_54]
		push	50h ; 'P'
		push	eax
		mov	[esp+84h+var_60], edi
		call	_i2t_ASN1_OBJECT
		lea	ecx, [esp+84h+var_54]
		add	esp, 14h
		lea	edx, [ecx+1]

loc_95:					; CODE XREF: _i2v_AUTHORITY_INFO_ACCESS+8Aj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_95
		sub	ecx, edx
		mov	edx, [edi+4]
		lea	esi, [edx+1]

loc_A4:					; CODE XREF: _i2v_AUTHORITY_INFO_ACCESS+99j
		mov	al, [edx]
		inc	edx
		test	al, al
		jnz	short loc_A4
		sub	edx, esi
		push	7Fh ; ''

loc_AF:					; DATA XREF: .rdata:_v3_infoo
		push	offset ??_C@_0BK@CIMABBBK@?4?2crypto?2x509v3?2v3_info?4c?$AA@ ;	".\\crypto\\x509v3\\v3_info.c"
		lea	edi, [edx+5]
		add	edi, ecx
		push	edi
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_12F
		push	edi
		lea	eax, [esp+74h+var_54]
		push	eax
		push	esi
		call	_BUF_strlcpy
		push	edi
		push	offset ??_C@_03NLJIHOMM@?5?9?5?$AA@ ; `string'
		push	esi
		call	_BUF_strlcat
		push	edi
		mov	edi, [esp+8Ch+var_60]
		push	dword ptr [edi+4]
		push	esi
		call	_BUF_strlcat
		push	dword ptr [edi+4]
		call	_CRYPTO_free
		mov	[edi+4], esi
		inc	ebp
		mov	esi, [esp+98h+var_5C]
		push	esi
		call	_sk_num
		mov	edi, [esp+9Ch+var_58]
		add	esp, 2Ch
		cmp	ebp, eax
		jl	loc_50

loc_113:				; CODE XREF: _i2v_AUTHORITY_INFO_ACCESS+3Aj
		test	ebx, ebx
		jnz	short loc_15F

loc_117:				; CODE XREF: _i2v_AUTHORITY_INFO_ACCESS+5Aj
		call	_sk_new_null
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+60h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_12F:				; CODE XREF: _i2v_AUTHORITY_INFO_ACCESS+B6j
		push	82h ; 'Ç'
		push	offset ??_C@_0BK@CIMABBBK@?4?2crypto?2x509v3?2v3_info?4c?$AA@ ;	".\\crypto\\x509v3\\v3_info.c"
		push	41h ; 'A'
		push	8Ah ; 'ä'
		push	22h ; '"'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+60h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_15F:				; CODE XREF: _i2v_AUTHORITY_INFO_ACCESS+105j
		mov	ecx, [esp+70h+var_4]
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 60h
		retn
_i2v_AUTHORITY_INFO_ACCESS endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 174h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_v2i_AUTHORITY_INFO_ACCESS proc	near	; DATA XREF: .rdata:00000384o
					; .rdata:000003BCo

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 14h
		call	__chkstk
		push	ebp
		call	_sk_new_null
		mov	ebp, eax
		mov	[esp+18h+var_14], ebp
		test	ebp, ebp
		jnz	short loc_1B0

loc_18E:				; DATA XREF: .rdata:_v3_sinfoo
		push	9Dh ; 'ù'
		push	offset ??_C@_0BK@CIMABBBK@?4?2crypto?2x509v3?2v3_info?4c?$AA@ ;	".\\crypto\\x509v3\\v3_info.c"
		push	41h ; 'A'
		push	8Bh ; 'ã'
		push	22h ; '"'
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebp
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1B0:				; CODE XREF: _v2i_AUTHORITY_INFO_ACCESS+18j
		push	ebx
		mov	ebx, [esp+1Ch+arg_8]
		push	esi
		push	edi
		push	ebx
		xor	edi, edi
		call	_sk_num
		add	esp, 4
		test	eax, eax
		jle	loc_2AD

loc_1CA:				; CODE XREF: _v2i_AUTHORITY_INFO_ACCESS+133j
		push	edi
		push	ebx
		call	_sk_value
		mov	esi, eax
		push	offset ?local_it@?1??ACCESS_DESCRIPTION_it@@9@9	; `ACCESS_DESCRIPTION_it'::`2'::local_it
		mov	[esp+30h+var_10], esi
		call	_ASN1_item_new
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jz	loc_33E
		push	ebx
		push	ebp
		call	_sk_push
		add	esp, 8
		test	eax, eax
		jz	loc_33E
		push	3Bh ; ';'       ; Val
		push	dword ptr [esi+4] ; Str
		call	dword ptr ds:__imp__strchr
		add	esp, 8
		test	eax, eax
		jz	loc_31E
		mov	ebp, eax
		inc	eax
		sub	ebp, [esi+4]
		mov	[esp+24h+var_8], eax
		mov	eax, [esi+8]
		mov	[esp+24h+var_4], eax
		lea	eax, [esp+24h+var_C]
		push	0
		push	eax
		push	[esp+2Ch+arg_4]
		push	[esp+30h+arg_0]
		push	dword ptr [ebx+4]
		call	_v2i_GENERAL_NAME_ex
		add	esp, 14h
		test	eax, eax
		jz	loc_2E5
		push	0B3h ; '≥'
		lea	eax, [ebp+1]
		push	offset ??_C@_0BK@CIMABBBK@?4?2crypto?2x509v3?2v3_info?4c?$AA@ ;	".\\crypto\\x509v3\\v3_info.c"
		push	eax
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	loc_301
		mov	eax, [esp+24h+var_10]
		push	ebp		; Count
		push	dword ptr [eax+4] ; Source
		push	esi		; Dest
		call	dword ptr ds:__imp__strncpy
		push	0
		push	esi
		mov	byte ptr [esi+ebp], 0
		call	_OBJ_txt2obj
		add	esp, 14h
		mov	[ebx], eax
		test	eax, eax
		jz	short loc_2B7
		push	esi
		call	_CRYPTO_free
		mov	ebx, [esp+28h+arg_8]
		inc	edi
		push	ebx
		call	_sk_num
		mov	ebp, [esp+2Ch+var_14]
		add	esp, 8
		cmp	edi, eax
		jl	loc_1CA

loc_2AD:				; CODE XREF: _v2i_AUTHORITY_INFO_ACCESS+50j
		pop	edi
		pop	esi
		pop	ebx
		mov	eax, ebp
		pop	ebp
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_2B7:				; CODE XREF: _v2i_AUTHORITY_INFO_ACCESS+117j
		push	0BDh ; 'Ω'
		push	offset ??_C@_0BK@CIMABBBK@?4?2crypto?2x509v3?2v3_info?4c?$AA@ ;	".\\crypto\\x509v3\\v3_info.c"
		push	77h ; 'w'
		push	8Bh ; 'ã'
		push	22h ; '"'
		call	_ERR_put_error
		push	esi
		push	offset ??_C@_06KFEJCPI@value?$DN?$AA@ ;	"value="
		push	2
		call	_ERR_add_error_data
		push	esi
		call	_CRYPTO_free
		add	esp, 24h

loc_2E5:				; CODE XREF: _v2i_AUTHORITY_INFO_ACCESS+CFj
					; _v2i_AUTHORITY_INFO_ACCESS+1A8j
		mov	ebp, [esp+24h+var_14]

$err$31:				; CODE XREF: _v2i_AUTHORITY_INFO_ACCESS+1C8j
					; _v2i_AUTHORITY_INFO_ACCESS+1E5j
		push	offset _ACCESS_DESCRIPTION_free
		push	ebp
		call	_sk_pop_free
		add	esp, 8
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_301:				; CODE XREF: _v2i_AUTHORITY_INFO_ACCESS+EFj
		push	0B5h ; 'µ'
		push	offset ??_C@_0BK@CIMABBBK@?4?2crypto?2x509v3?2v3_info?4c?$AA@ ;	".\\crypto\\x509v3\\v3_info.c"
		push	41h ; 'A'
		push	8Bh ; 'ã'
		push	22h ; '"'
		call	_ERR_put_error
		add	esp, 14h
		jmp	short loc_2E5
; ---------------------------------------------------------------------------

loc_31E:				; CODE XREF: _v2i_AUTHORITY_INFO_ACCESS+9Cj
		push	0ABh ; '´'
		push	offset ??_C@_0BK@CIMABBBK@?4?2crypto?2x509v3?2v3_info?4c?$AA@ ;	".\\crypto\\x509v3\\v3_info.c"
		push	8Fh ; 'è'
		push	8Bh ; 'ã'
		push	22h ; '"'
		call	_ERR_put_error
		add	esp, 14h
		jmp	short $err$31
; ---------------------------------------------------------------------------

loc_33E:				; CODE XREF: _v2i_AUTHORITY_INFO_ACCESS+74j
					; _v2i_AUTHORITY_INFO_ACCESS+86j
		push	0A5h ; '•'
		push	offset ??_C@_0BK@CIMABBBK@?4?2crypto?2x509v3?2v3_info?4c?$AA@ ;	".\\crypto\\x509v3\\v3_info.c"
		push	41h ; 'A'
		push	8Bh ; 'ã'
		push	22h ; '"'
		call	_ERR_put_error
		add	esp, 14h
		jmp	short $err$31
_v2i_AUTHORITY_INFO_ACCESS endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 35Ch
		public _v3_info
_v3_info	dd offset loc_AF+2
		dd 4
		dd offset _AUTHORITY_INFO_ACCESS_it
		align 20h
		dd offset _i2v_AUTHORITY_INFO_ACCESS
		dd offset _v2i_AUTHORITY_INFO_ACCESS
		dd 3 dup(0)
		public _v3_sinfo
_v3_sinfo	dd offset loc_18E
		dd 4
		dd offset _AUTHORITY_INFO_ACCESS_it
		dd 6 dup(0)
		dd offset _i2v_AUTHORITY_INFO_ACCESS
		dd offset _v2i_AUTHORITY_INFO_ACCESS
		dd 3 dup(0)
_ACCESS_DESCRIPTION_seq_tt dd 3	dup(0)	; DATA XREF: .rdata:000003FCo
		dd offset ??_C@_06GABBCIBA@method?$AA@ ; "method"
		dd offset _ASN1_OBJECT_it
		dd 2 dup(0)
		dd 4
		dd offset ??_C@_08CBBFJFMD@location?$AA@ ; "location"
		dd offset _GENERAL_NAME_it
; `ACCESS_DESCRIPTION_it'::`2'::local_it
?local_it@?1??ACCESS_DESCRIPTION_it@@9@9 dd 1, 10h ; DATA XREF:	_ACCESS_DESCRIPTION_ito
					; _v2i_AUTHORITY_INFO_ACCESS+5Fo ...
		dd offset _ACCESS_DESCRIPTION_seq_tt
		dd 2, 0
		dd 8
		dd offset ??_C@_0BD@IKHCEBLA@ACCESS_DESCRIPTION?$AA@ ; "ACCESS_DESCRIPTION"
_AUTHORITY_INFO_ACCESS_item_tt dd 4, 2 dup(0) ;	DATA XREF: .rdata:0000042Co
		dd offset ??_C@_0N@CJKIBDLK@GeneralNames?$AA@ ;	"GeneralNames"
		dd offset _ACCESS_DESCRIPTION_it
; `AUTHORITY_INFO_ACCESS_it'::`2'::local_it
?local_it@?1??AUTHORITY_INFO_ACCESS_it@@9@9 dd 0 ; DATA	XREF: _AUTHORITY_INFO_ACCESS_ito
					; _AUTHORITY_INFO_ACCESS_freeo	...
		dd 0FFFFFFFFh
		dd offset _AUTHORITY_INFO_ACCESS_item_tt
		dd 3 dup(0)
		dd offset ??_C@_0BG@PFEKCAHJ@AUTHORITY_INFO_ACCESS?$AA@	; "AUTHORITY_INFO_ACCESS"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 440h
; COMDAT (pick any)
		public ??_C@_06GABBCIBA@method?$AA@
; `string'
??_C@_06GABBCIBA@method?$AA@ db	'method',0 ; DATA XREF: .rdata:000003D8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 448h
; COMDAT (pick any)
		public ??_C@_08CBBFJFMD@location?$AA@
; `string'
??_C@_08CBBFJFMD@location?$AA@ db 'location',0 ; DATA XREF: .rdata:000003ECo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 454h
; COMDAT (pick any)
		public ??_C@_0BD@IKHCEBLA@ACCESS_DESCRIPTION?$AA@
; `string'
??_C@_0BD@IKHCEBLA@ACCESS_DESCRIPTION?$AA@ db 'ACCESS_DESCRIPTION',0
					; DATA XREF: .rdata:0000040Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 468h
; COMDAT (pick any)
		public ??_C@_0N@CJKIBDLK@GeneralNames?$AA@
; `string'
??_C@_0N@CJKIBDLK@GeneralNames?$AA@ db 'GeneralNames',0 ; DATA XREF: .rdata:0000041Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 478h
; COMDAT (pick any)
		public ??_C@_0BG@PFEKCAHJ@AUTHORITY_INFO_ACCESS?$AA@
; `string'
??_C@_0BG@PFEKCAHJ@AUTHORITY_INFO_ACCESS?$AA@ db 'AUTHORITY_INFO_ACCESS',0
					; DATA XREF: .rdata:0000043Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 490h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ACCESS_DESCRIPTION_free
_ACCESS_DESCRIPTION_free proc near	; DATA XREF: _v2i_AUTHORITY_INFO_ACCESS:$err$31o

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??ACCESS_DESCRIPTION_it@@9@9	; `ACCESS_DESCRIPTION_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_ACCESS_DESCRIPTION_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4A4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _ACCESS_DESCRIPTION_new
_ACCESS_DESCRIPTION_new	proc near
		push	offset ?local_it@?1??ACCESS_DESCRIPTION_it@@9@9	; `ACCESS_DESCRIPTION_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_ACCESS_DESCRIPTION_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _AUTHORITY_INFO_ACCESS_free
_AUTHORITY_INFO_ACCESS_free proc near

arg_0		= dword	ptr  4

		push	offset ?local_it@?1??AUTHORITY_INFO_ACCESS_it@@9@9 ; `AUTHORITY_INFO_ACCESS_it'::`2'::local_it
		push	[esp+4+arg_0]
		call	_ASN1_item_free
		add	esp, 8
		retn
_AUTHORITY_INFO_ACCESS_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _AUTHORITY_INFO_ACCESS_new
_AUTHORITY_INFO_ACCESS_new proc	near
		push	offset ?local_it@?1??AUTHORITY_INFO_ACCESS_it@@9@9 ; `AUTHORITY_INFO_ACCESS_it'::`2'::local_it
		call	_ASN1_item_new
		add	esp, 4
		retn
_AUTHORITY_INFO_ACCESS_new endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_ACCESS_DESCRIPTION
_d2i_ACCESS_DESCRIPTION	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??ACCESS_DESCRIPTION_it@@9@9	; `ACCESS_DESCRIPTION_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_ACCESS_DESCRIPTION	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _d2i_AUTHORITY_INFO_ACCESS
_d2i_AUTHORITY_INFO_ACCESS proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	offset ?local_it@?1??AUTHORITY_INFO_ACCESS_it@@9@9 ; `AUTHORITY_INFO_ACCESS_it'::`2'::local_it
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	_ASN1_item_d2i
		add	esp, 10h
		retn
_d2i_AUTHORITY_INFO_ACCESS endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 510h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2a_ACCESS_DESCRIPTION
_i2a_ACCESS_DESCRIPTION	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	dword ptr [eax]
		push	[esp+4+arg_0]
		call	_i2a_ASN1_OBJECT
		add	esp, 8
		mov	eax, 2
		retn
_i2a_ACCESS_DESCRIPTION	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 528h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_ACCESS_DESCRIPTION
_i2d_ACCESS_DESCRIPTION	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??ACCESS_DESCRIPTION_it@@9@9	; `ACCESS_DESCRIPTION_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_ACCESS_DESCRIPTION	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 540h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2d_AUTHORITY_INFO_ACCESS
_i2d_AUTHORITY_INFO_ACCESS proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?local_it@?1??AUTHORITY_INFO_ACCESS_it@@9@9 ; `AUTHORITY_INFO_ACCESS_it'::`2'::local_it
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_ASN1_item_i2d
		add	esp, 0Ch
		retn
_i2d_AUTHORITY_INFO_ACCESS endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 558h
; COMDAT (pick any)
		public ??_C@_0BK@CIMABBBK@?4?2crypto?2x509v3?2v3_info?4c?$AA@
; `string'
??_C@_0BK@CIMABBBK@?4?2crypto?2x509v3?2v3_info?4c?$AA@ db '.\crypto\x509v3\v3_info.c',0
					; DATA XREF: _i2v_AUTHORITY_INFO_ACCESS:loc_AFo
					; _i2v_AUTHORITY_INFO_ACCESS+124o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 574h
; COMDAT (pick any)
		public ??_C@_03NLJIHOMM@?5?9?5?$AA@
; `string'
??_C@_03NLJIHOMM@?5?9?5?$AA@ dd	202D20h	; DATA XREF: _i2v_AUTHORITY_INFO_ACCESS+C5o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 578h
; COMDAT (pick any)
		public ??_C@_06KFEJCPI@value?$DN?$AA@
; `string'
??_C@_06KFEJCPI@value?$DN?$AA@ db 'value=',0 ; DATA XREF: _v2i_AUTHORITY_INFO_ACCESS+15Co
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _GENERAL_NAME_it:near ; DATA XREF: .rdata:000003F0o
		extrn _ASN1_OBJECT_it:near ; DATA XREF:	.rdata:000003DCo
; char *__cdecl	_strchr(const char *Str, int Val)
		extrn __imp__strchr:near ; CODE	XREF: _v2i_AUTHORITY_INFO_ACCESS+91p
					; DATA XREF: _v2i_AUTHORITY_INFO_ACCESS+91r
; char *__cdecl	_strncpy(char *Dest, const char	*Source, size_t	Count)
		extrn __imp__strncpy:near ; CODE XREF: _v2i_AUTHORITY_INFO_ACCESS+FEp
					; DATA XREF: _v2i_AUTHORITY_INFO_ACCESS+FEr
		extrn _sk_num:near	; CODE XREF: _i2v_AUTHORITY_INFO_ACCESS+30p
					; _i2v_AUTHORITY_INFO_ACCESS+EFp ...
		extrn _sk_value:near	; CODE XREF: _i2v_AUTHORITY_INFO_ACCESS+42p
					; _i2v_AUTHORITY_INFO_ACCESS+62p ...
		extrn _sk_new_null:near	; CODE XREF: _i2v_AUTHORITY_INFO_ACCESS:loc_117p
					; _v2i_AUTHORITY_INFO_ACCESS+Bp
		extrn _sk_pop_free:near	; CODE XREF: _v2i_AUTHORITY_INFO_ACCESS+17Bp
		extrn _sk_push:near	; CODE XREF: _v2i_AUTHORITY_INFO_ACCESS+7Cp
		extrn _CRYPTO_malloc:near ; CODE XREF: _i2v_AUTHORITY_INFO_ACCESS+AAp
					; _v2i_AUTHORITY_INFO_ACCESS+E3p
		extrn _CRYPTO_free:near	; CODE XREF: _i2v_AUTHORITY_INFO_ACCESS+E1p
					; _v2i_AUTHORITY_INFO_ACCESS+11Ap ...
		extrn _BUF_strlcpy:near	; CODE XREF: _i2v_AUTHORITY_INFO_ACCESS+BFp
		extrn _BUF_strlcat:near	; CODE XREF: _i2v_AUTHORITY_INFO_ACCESS+CBp
					; _i2v_AUTHORITY_INFO_ACCESS+D9p
		extrn _ERR_put_error:near ; CODE XREF: _i2v_AUTHORITY_INFO_ACCESS+132p
					; _v2i_AUTHORITY_INFO_ACCESS+2Dp ...
		extrn _ERR_add_error_data:near ; CODE XREF: _v2i_AUTHORITY_INFO_ACCESS+163p
		extrn _i2a_ASN1_OBJECT:near ; CODE XREF: _i2a_ACCESS_DESCRIPTION+Ap
		extrn _i2t_ASN1_OBJECT:near ; CODE XREF: _i2v_AUTHORITY_INFO_ACCESS+76p
		extrn _ASN1_item_new:near ; CODE XREF: _v2i_AUTHORITY_INFO_ACCESS+68p
					; _ACCESS_DESCRIPTION_new+5p ...
		extrn _ASN1_item_free:near ; CODE XREF:	_ACCESS_DESCRIPTION_free+9p
					; _AUTHORITY_INFO_ACCESS_free+9p
		extrn _ASN1_item_d2i:near ; CODE XREF: _d2i_ACCESS_DESCRIPTION+11p
					; _d2i_AUTHORITY_INFO_ACCESS+11p
		extrn _ASN1_item_i2d:near ; CODE XREF: _i2d_ACCESS_DESCRIPTION+Dp
					; _i2d_AUTHORITY_INFO_ACCESS+Dp
		extrn _OBJ_txt2obj:near	; CODE XREF: _v2i_AUTHORITY_INFO_ACCESS+10Bp
		extrn _i2v_GENERAL_NAME:near ; CODE XREF: _i2v_AUTHORITY_INFO_ACCESS+4Ep
		extrn _v2i_GENERAL_NAME_ex:near	; CODE XREF: _v2i_AUTHORITY_INFO_ACCESS+C5p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _i2v_AUTHORITY_INFO_ACCESS+116p
					; _i2v_AUTHORITY_INFO_ACCESS+146p ...
		extrn __chkstk:near	; CODE XREF: _i2v_AUTHORITY_INFO_ACCESS+5p
					; _v2i_AUTHORITY_INFO_ACCESS+5p
		extrn ___security_cookie:near ;	DATA XREF: _i2v_AUTHORITY_INFO_ACCESS+Ar


		end
