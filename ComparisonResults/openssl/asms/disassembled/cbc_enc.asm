;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	06A0FD560B7ED2082C28099AE86B8732
; Input	CRC32 :	1E92FA25

; File Name   :	C:\compspace\Diff\openssl\obj\cbc_enc.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_cbc_encrypt
_DES_cbc_encrypt proc near

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 0Ch
		call	__chkstk
		cmp	[esp+0Ch+arg_14], 0
		mov	eax, [esp+0Ch+arg_10]
		push	ebx
		push	ebp
		push	esi
		push	edi
		lea	edx, [eax+1]
		jz	loc_20E
		movzx	ebx, byte ptr [eax]
		movzx	eax, byte ptr [edx]
		movzx	ebp, byte ptr [edx+3]
		movzx	ecx, byte ptr [edx+6]
		shl	eax, 8
		or	ebx, eax
		mov	esi, [esp+1Ch+arg_4]
		movzx	eax, byte ptr [edx+1]
		mov	edi, [esp+1Ch+arg_0]
		shl	eax, 10h
		or	ebx, eax
		shl	ecx, 8
		movzx	eax, byte ptr [edx+2]
		shl	eax, 18h
		or	ebx, eax
		movzx	eax, byte ptr [edx+4]
		shl	eax, 8
		or	ebp, eax
		movzx	eax, byte ptr [edx+5]
		or	ecx, eax
		shl	ecx, 10h
		or	ebp, ecx
		mov	ecx, [esp+1Ch+arg_8]
		add	ecx, 0FFFFFFF8h
		mov	[esp+1Ch+arg_10], ecx
		js	loc_144
		lea	eax, [ecx+8]
		shr	eax, 3
		mov	[esp+1Ch+arg_8], eax
		neg	eax
		lea	ecx, [ecx+eax*8]
		mov	[esp+1Ch+arg_10], ecx
		nop	dword ptr [eax+eax+00000000h]

loc_90:					; CODE XREF: _DES_cbc_encrypt+13Aj
		movzx	eax, byte ptr [edi+1]
		movzx	edx, byte ptr [edi]
		movzx	ecx, byte ptr [edi+4]
		shl	eax, 8
		or	edx, eax
		movzx	eax, byte ptr [edi+2]
		shl	eax, 10h
		or	edx, eax
		movzx	eax, byte ptr [edi+3]
		shl	eax, 18h
		or	edx, eax
		movzx	eax, byte ptr [edi+5]
		shl	eax, 8
		xor	edx, ebx
		or	ecx, eax
		mov	[esp+1Ch+var_8], edx
		movzx	eax, byte ptr [edi+6]
		shl	eax, 10h
		or	ecx, eax
		movzx	eax, byte ptr [edi+7]
		shl	eax, 18h
		add	edi, 8
		push	1
		push	[esp+20h+arg_C]
		or	ecx, eax
		lea	eax, [esp+24h+var_8]
		xor	ecx, ebp
		push	eax
		mov	[esp+28h+var_4], ecx
		call	_DES_encrypt1
		mov	ebx, [esp+28h+var_8]
		add	esp, 0Ch
		mov	edx, [esp+1Ch+var_4]
		mov	eax, ebx
		shr	eax, 8
		mov	ebp, edx
		mov	[esi], bl
		mov	[esi+1], al
		mov	eax, ebx
		shr	eax, 10h
		mov	[esi+2], al
		mov	eax, ebx
		shr	eax, 18h
		mov	[esi+3], al
		mov	eax, edx
		shr	eax, 8
		mov	[esi+4], dl
		mov	[esi+5], al
		mov	eax, edx
		shr	eax, 10h
		mov	[esi+6], al
		mov	eax, edx
		shr	eax, 18h
		mov	[esi+7], al
		add	esi, 8
		sub	[esp+1Ch+arg_8], 1
		mov	[esp+1Ch+arg_14], edx
		jnz	loc_90
		mov	ecx, [esp+1Ch+arg_10]

loc_144:				; CODE XREF: _DES_cbc_encrypt+6Fj
		cmp	ecx, 0FFFFFFF8h
		jz	loc_3F0		; jumptable 000003B3 default case
		mov	eax, [esp+1Ch+arg_10]
		add	edi, 8
		add	ecx, edi
		add	eax, 7
		xor	edx, edx
		xor	edi, edi
		cmp	eax, 7		; switch 8 cases
		ja	short loc_1AE	; jumptable 00000162 default case
		jmp	ds:$LN44[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN15:					; CODE XREF: _DES_cbc_encrypt+162j
					; DATA XREF: .text$mn:$LN44o
		movzx	edx, byte ptr [ecx-1] ;	jumptable 00000162 case	7
		dec	ecx
		shl	edx, 18h

$LN16:					; CODE XREF: _DES_cbc_encrypt+162j
					; DATA XREF: .text$mn:$LN44o
		movzx	eax, byte ptr [ecx-1] ;	jumptable 00000162 case	6
		dec	ecx
		shl	eax, 10h
		or	edx, eax

$LN17:					; CODE XREF: _DES_cbc_encrypt+162j
					; DATA XREF: .text$mn:$LN44o
		movzx	eax, byte ptr [ecx-1] ;	jumptable 00000162 case	5
		dec	ecx
		shl	eax, 8
		or	edx, eax

$LN18:					; CODE XREF: _DES_cbc_encrypt+162j
					; DATA XREF: .text$mn:$LN44o
		movzx	eax, byte ptr [ecx-1] ;	jumptable 00000162 case	4
		dec	ecx
		or	edx, eax

$LN19:					; CODE XREF: _DES_cbc_encrypt+162j
					; DATA XREF: .text$mn:$LN44o
		movzx	edi, byte ptr [ecx-1] ;	jumptable 00000162 case	3
		dec	ecx
		shl	edi, 18h

$LN20:					; CODE XREF: _DES_cbc_encrypt+162j
					; DATA XREF: .text$mn:$LN44o
		movzx	eax, byte ptr [ecx-1] ;	jumptable 00000162 case	2
		dec	ecx
		shl	eax, 10h
		or	edi, eax

$LN21:					; CODE XREF: _DES_cbc_encrypt+162j
					; DATA XREF: .text$mn:$LN44o
		movzx	eax, byte ptr [ecx-1] ;	jumptable 00000162 case	1
		dec	ecx
		shl	eax, 8
		or	edi, eax

$LN22:					; CODE XREF: _DES_cbc_encrypt+162j
					; DATA XREF: .text$mn:$LN44o
		movzx	eax, byte ptr [ecx-1] ;	jumptable 00000162 case	0
		or	edi, eax

loc_1AE:				; CODE XREF: _DES_cbc_encrypt+160j
		push	1		; jumptable 00000162 default case
		push	[esp+20h+arg_C]
		lea	eax, [esp+24h+var_8]
		xor	edx, ebp
		xor	edi, ebx
		mov	[esp+24h+var_4], edx
		push	eax
		mov	[esp+28h+var_8], edi
		call	_DES_encrypt1
		mov	ecx, [esp+28h+var_8]
		add	esp, 0Ch
		mov	[esi], cl
		mov	eax, ecx
		shr	eax, 8
		mov	[esi+1], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[esi+2], al
		shr	ecx, 18h
		mov	[esi+3], cl
		mov	ecx, [esp+1Ch+var_4]
		mov	eax, ecx
		mov	[esi+4], cl
		shr	eax, 8
		mov	[esi+5], al
		mov	eax, ecx
		shr	eax, 10h
		pop	edi
		mov	[esi+6], al
		shr	ecx, 18h
		mov	[esi+7], cl
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_20E:				; CODE XREF: _DES_cbc_encrypt+1Aj
		movzx	edi, byte ptr [eax]
		movzx	eax, byte ptr [edx]
		movzx	ecx, byte ptr [edx+3]
		shl	eax, 8
		or	edi, eax
		mov	esi, [esp+1Ch+arg_8]
		movzx	eax, byte ptr [edx+1]
		mov	ebp, [esp+1Ch+arg_4]
		mov	ebx, [esp+1Ch+arg_0]
		shl	eax, 10h
		or	edi, eax
		movzx	eax, byte ptr [edx+2]
		shl	eax, 18h
		or	edi, eax
		movzx	eax, byte ptr [edx+4]
		shl	eax, 8
		or	ecx, eax
		mov	[esp+1Ch+arg_14], edi
		movzx	eax, byte ptr [edx+5]
		mov	[esp+1Ch+arg_10], ecx
		movzx	ecx, byte ptr [edx+6]
		shl	ecx, 8
		or	ecx, eax
		shl	ecx, 10h
		or	[esp+1Ch+arg_10], ecx
		add	esi, 0FFFFFFF8h
		js	loc_337
		lea	eax, [esi+8]
		shr	eax, 3
		mov	[esp+1Ch+arg_8], eax
		neg	eax
		lea	esi, [esi+eax*8]
		mov	[esp+1Ch+var_C], esi
		nop	dword ptr [eax+00h]

loc_280:				; CODE XREF: _DES_cbc_encrypt+32Dj
		movzx	eax, byte ptr [ebx+1]
		movzx	edi, byte ptr [ebx]
		movzx	esi, byte ptr [ebx+4]
		shl	eax, 8
		or	edi, eax
		movzx	eax, byte ptr [ebx+2]
		shl	eax, 10h
		or	edi, eax
		movzx	eax, byte ptr [ebx+3]
		shl	eax, 18h
		or	edi, eax
		movzx	eax, byte ptr [ebx+5]
		shl	eax, 8
		or	esi, eax
		mov	[esp+1Ch+var_8], edi
		movzx	eax, byte ptr [ebx+6]
		shl	eax, 10h
		or	esi, eax
		movzx	eax, byte ptr [ebx+7]
		shl	eax, 18h
		add	ebx, 8
		push	0
		push	[esp+20h+arg_C]
		or	esi, eax
		lea	eax, [esp+24h+var_8]
		push	eax
		mov	[esp+28h+var_4], esi
		call	_DES_encrypt1
		mov	ecx, [esp+28h+var_8]
		add	esp, 0Ch
		xor	ecx, [esp+1Ch+arg_14]
		mov	edx, [esp+1Ch+var_4]
		mov	eax, ecx
		xor	edx, [esp+1Ch+arg_10]
		mov	[ebp+0], cl
		shr	eax, 8
		mov	[ebp+1], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[ebp+2], al
		mov	eax, edx
		shr	ecx, 18h
		mov	[ebp+3], cl
		mov	[ebp+4], dl
		shr	eax, 8
		mov	[ebp+5], al
		mov	eax, edx
		shr	eax, 10h
		shr	edx, 18h
		mov	[ebp+6], al
		mov	[ebp+7], dl
		add	ebp, 8
		sub	[esp+1Ch+arg_8], 1
		mov	[esp+1Ch+arg_14], edi
		mov	[esp+1Ch+arg_10], esi
		jnz	loc_280
		mov	esi, [esp+1Ch+var_C]

loc_337:				; CODE XREF: _DES_cbc_encrypt+263j
		cmp	esi, 0FFFFFFF8h
		jz	loc_3F0		; jumptable 000003B3 default case
		movzx	eax, byte ptr [ebx+1]
		movzx	ecx, byte ptr [ebx]
		movzx	edx, byte ptr [ebx+4]
		shl	eax, 8
		or	ecx, eax
		movzx	eax, byte ptr [ebx+2]
		shl	eax, 10h
		or	ecx, eax
		movzx	eax, byte ptr [ebx+3]
		shl	eax, 18h
		or	ecx, eax
		movzx	eax, byte ptr [ebx+5]
		mov	[esp+1Ch+var_8], ecx
		movzx	ecx, byte ptr [ebx+7]
		shl	eax, 8
		or	edx, eax
		shl	ecx, 8
		movzx	eax, byte ptr [ebx+6]
		or	ecx, eax
		lea	eax, [esp+1Ch+var_8]
		push	0
		push	[esp+20h+arg_C]
		shl	ecx, 10h
		or	ecx, edx
		push	eax
		mov	[esp+28h+var_4], ecx
		call	_DES_encrypt1
		mov	edx, [esp+28h+var_8]
		lea	ecx, [ebp+8]
		mov	ebx, [esp+28h+var_4]
		add	ecx, esi
		xor	ebx, [esp+28h+arg_10]
		add	esi, 7
		add	esp, 0Ch
		xor	edx, edi
		cmp	esi, 7		; switch 8 cases
		ja	short loc_3F0	; jumptable 000003B3 default case
		jmp	ds:$LN45[esi*4]	; switch jump
; ---------------------------------------------------------------------------

$LN24:					; CODE XREF: _DES_cbc_encrypt+3B3j
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 000003B3 case 7
		mov	eax, ebx
		shr	eax, 18h
		mov	[ecx], al

$LN25:					; CODE XREF: _DES_cbc_encrypt+3B3j
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 000003B3 case 6
		mov	eax, ebx
		shr	eax, 10h
		mov	[ecx], al

$LN26:					; CODE XREF: _DES_cbc_encrypt+3B3j
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 000003B3 case 5
		mov	eax, ebx
		shr	eax, 8
		mov	[ecx], al

$LN27:					; CODE XREF: _DES_cbc_encrypt+3B3j
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 000003B3 case 4
		mov	[ecx], bl

$LN28:					; CODE XREF: _DES_cbc_encrypt+3B3j
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 000003B3 case 3
		mov	eax, edx
		shr	eax, 18h
		mov	[ecx], al

$LN29:					; CODE XREF: _DES_cbc_encrypt+3B3j
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 000003B3 case 2
		mov	eax, edx
		shr	eax, 10h
		mov	[ecx], al

$LN30:					; CODE XREF: _DES_cbc_encrypt+3B3j
					; DATA XREF: .text$mn:$LN45o
		dec	ecx		; jumptable 000003B3 case 1
		mov	eax, edx
		shr	eax, 8
		mov	[ecx], al

$LN31:					; CODE XREF: _DES_cbc_encrypt+3B3j
					; DATA XREF: .text$mn:$LN45o
		mov	[ecx-1], dl	; jumptable 000003B3 case 0

loc_3F0:				; CODE XREF: _DES_cbc_encrypt+147j
					; _DES_cbc_encrypt+33Aj ...
		pop	edi		; jumptable 000003B3 default case
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
_DES_cbc_encrypt endp

; ---------------------------------------------------------------------------
$LN44		dd offset $LN22		; DATA XREF: _DES_cbc_encrypt+162r
		dd offset $LN21		; jump table for switch	statement
		dd offset $LN20
		dd offset $LN19
		dd offset $LN18
		dd offset $LN17
		dd offset $LN16
		dd offset $LN15
$LN45		dd offset $LN31		; DATA XREF: _DES_cbc_encrypt+3B3r
		dd offset $LN30		; jump table for switch	statement
		dd offset $LN29
		dd offset $LN28
		dd offset $LN27
		dd offset $LN26
		dd offset $LN25
		dd offset $LN24
_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _DES_encrypt1:near ; CODE	XREF: _DES_cbc_encrypt+E7p
					; _DES_cbc_encrypt+1C5p ...
		extrn __chkstk:near	; CODE XREF: _DES_cbc_encrypt+5p


		end
