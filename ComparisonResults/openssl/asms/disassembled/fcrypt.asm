;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	3D03513CD98F7FD0539B1DC63CFE0309
; Input	CRC32 :	9DB5AB29

; File Name   :	C:\compspace\Diff\openssl\obj\fcrypt.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
_con_salt	db 0D2h			; DATA XREF: _DES_fcrypt+3Er
					; _DES_fcrypt+66r
		db 0D3h, 0D4h, 0D5h
		dd 0D9D8D7D6h, 0DDDCDBDAh, 0E1E0DFDEh, 0E5E4E3E2h, 0E9E8E7E6h
		dd 0EDECEBEAh, 0F1F0EFEEh, 0F5F4F3F2h, 0F9F8F7F6h, 0FDFCFBFAh
		dd 100FFFEh, 5040302h, 9080706h, 6050B0Ah, 0A090807h, 0E0D0C0Bh
		dd 1211100Fh, 16151413h, 1A191817h, 1E1D1C1Bh, 2221201Fh
		dd 20252423h, 24232221h, 28272625h, 2C2B2A29h, 302F2E2Dh
		dd 34333231h, 38373635h, 3C3B3A39h, 403F3E3Dh, 44434241h
_cov_2char	db 2Eh			; DATA XREF: _DES_fcrypt+19Fr
		db 2Fh,	30h, 31h
		dd 35343332h, 39383736h, 44434241h, 48474645h, 4C4B4A49h
		dd 504F4E4Dh, 54535251h, 58575655h, 62615A59h, 66656463h
		dd 6A696867h, 6E6D6C6Bh, 7271706Fh, 76757473h, 7A797877h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_crypt
_DES_crypt	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	offset ?buff@?1??DES_crypt@@9@9	; `DES_crypt'::`2'::buff
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	_DES_fcrypt
		add	esp, 0Ch
		retn
_DES_crypt	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DES_fcrypt
_DES_fcrypt	proc near		; CODE XREF: _DES_crypt+Dp

var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= byte ptr -90h
var_10		= byte ptr -10h
var_F		= byte ptr -0Fh
var_E		= byte ptr -0Eh
var_D		= byte ptr -0Dh
var_C		= byte ptr -0Ch
var_B		= byte ptr -0Bh
var_A		= byte ptr -0Ah
var_9		= byte ptr -9
var_8		= byte ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 98h ; '˜'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+98h+var_4], eax
		mov	ecx, [esp+98h+arg_4]
		push	ebx
		push	esi
		push	edi
		mov	al, [ecx]
		mov	edi, [esp+0A4h+arg_8]
		test	al, al
		jnz	short loc_10E
		mov	eax, 41h ; 'A'
		jmp	short loc_111
; ---------------------------------------------------------------------------

loc_10E:				; CODE XREF: _DES_fcrypt+2Dj
		movsx	eax, al

loc_111:				; CODE XREF: _DES_fcrypt+34j
		mov	[edi], al
		movsx	eax, al
		movzx	esi, _con_salt[eax]
		mov	al, [ecx+1]
		shl	esi, 2
		test	al, al
		jnz	short loc_12E
		mov	eax, 41h ; 'A'
		jmp	short loc_131
; ---------------------------------------------------------------------------

loc_12E:				; CODE XREF: _DES_fcrypt+4Dj
		movsx	eax, al

loc_131:				; CODE XREF: _DES_fcrypt+54j
		mov	edx, [esp+0A4h+arg_0]
		mov	[edi+1], al
		movsx	eax, al
		movzx	ebx, _con_salt[eax]
		shl	ebx, 6
		xor	eax, eax

loc_14A:				; CODE XREF: _DES_fcrypt+88j
		mov	cl, [edx]
		lea	edx, [edx+1]
		test	cl, cl
		jz	short loc_164
		add	cl, cl
		mov	[esp+eax+0A4h+var_10], cl
		inc	eax
		cmp	eax, 8
		jb	short loc_14A
		jmp	short loc_177
; ---------------------------------------------------------------------------

loc_164:				; CODE XREF: _DES_fcrypt+79j
		cmp	eax, 8
		jnb	short loc_177

loc_169:				; CODE XREF: _DES_fcrypt+9Dj
		mov	[esp+eax+0A4h+var_10], 0
		inc	eax
		cmp	eax, 8
		jb	short loc_169

loc_177:				; CODE XREF: _DES_fcrypt+8Aj
					; _DES_fcrypt+8Fj
		lea	eax, [esp+0A4h+var_90]
		push	eax
		lea	eax, [esp+0A8h+var_10]
		push	eax
		call	_DES_set_key_unchecked
		push	ebx
		push	esi
		lea	eax, [esp+0B4h+var_90]
		push	eax
		lea	eax, [esp+0B8h+var_98]
		push	eax
		call	_fcrypt_body
		mov	ecx, [esp+0BCh+var_98]
		lea	edx, [esp+0BCh+var_10]
		mov	eax, ecx
		mov	[esp+0BCh+var_10], cl
		shr	eax, 8
		add	esp, 18h
		mov	[esp+0A4h+var_F], al
		mov	esi, 2
		mov	eax, ecx
		mov	[esp+0A4h+var_8], 0
		shr	eax, 10h
		mov	ebx, 1
		shr	ecx, 18h
		mov	[esp+0A4h+var_E], al
		mov	[esp+0A4h+var_D], cl
		mov	ecx, [esp+0A4h+var_94]
		mov	eax, ecx
		shr	eax, 8
		mov	[esp+0A4h+var_B], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[esp+0A4h+var_C], cl
		shr	ecx, 18h
		mov	[esp+0A4h+var_A], al
		mov	al, 80h	; '€'
		mov	[esp+0A4h+var_9], cl
		nop	word ptr [eax+eax+00h]

loc_218:				; CODE XREF: _DES_fcrypt+1ACj
		xor	cl, cl
		test	[edx], al
		movzx	ecx, cl
		cmovnz	ecx, ebx
		shr	al, 1
		jnz	short loc_229
		inc	edx
		mov	al, 80h	; '€'

loc_229:				; CODE XREF: _DES_fcrypt+14Cj
		add	cl, cl
		test	[edx], al
		jz	short loc_231
		or	cl, bl

loc_231:				; CODE XREF: _DES_fcrypt+155j
		shr	al, 1
		jnz	short loc_238
		inc	edx
		mov	al, 80h	; '€'

loc_238:				; CODE XREF: _DES_fcrypt+15Bj
		add	cl, cl
		test	[edx], al
		jz	short loc_240
		or	cl, bl

loc_240:				; CODE XREF: _DES_fcrypt+164j
		shr	al, 1
		jnz	short loc_247
		inc	edx
		mov	al, 80h	; '€'

loc_247:				; CODE XREF: _DES_fcrypt+16Aj
		add	cl, cl
		test	[edx], al
		jz	short loc_24F
		or	cl, bl

loc_24F:				; CODE XREF: _DES_fcrypt+173j
		shr	al, 1
		jnz	short loc_256
		inc	edx
		mov	al, 80h	; '€'

loc_256:				; CODE XREF: _DES_fcrypt+179j
		add	cl, cl
		test	[edx], al
		jz	short loc_25E
		or	cl, bl

loc_25E:				; CODE XREF: _DES_fcrypt+182j
		shr	al, 1
		jnz	short loc_265
		inc	edx
		mov	al, 80h	; '€'

loc_265:				; CODE XREF: _DES_fcrypt+188j
		add	cl, cl
		test	[edx], al
		jz	short loc_26D
		or	cl, bl

loc_26D:				; CODE XREF: _DES_fcrypt+191j
		shr	al, 1
		jnz	short loc_274
		inc	edx
		mov	al, 80h	; '€'

loc_274:				; CODE XREF: _DES_fcrypt+197j
		movzx	ecx, cl
		mov	cl, _cov_2char[ecx]
		mov	[edi+esi], cl
		inc	esi
		cmp	esi, 0Dh
		jb	short loc_218
		mov	ecx, [esp+0A4h+var_4]
		mov	eax, edi
		mov	byte ptr [edi+0Dh], 0
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 98h
		retn
_DES_fcrypt	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 2A4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
; `DES_crypt'::`2'::buff
?buff@?1??DES_crypt@@9@9 dd 3 dup(?)	; DATA XREF: _DES_crypto
		db 2 dup(?)
_bss		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _DES_set_key_unchecked:near ; CODE XREF: _DES_fcrypt+ACp
		extrn _fcrypt_body:near	; CODE XREF: _DES_fcrypt+BDp
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _DES_fcrypt+1C0p
		extrn __chkstk:near	; CODE XREF: _DES_fcrypt+5p
		extrn ___security_cookie:near ;	DATA XREF: _DES_fcrypt+Ar


		end
