;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	07E890AECD8BC5894E3A6CD13DC17E3E
; Input	CRC32 :	4F095548

; File Name   :	C:\compspace\Diff\openssl\obj\bio_enc.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_enc_write	proc near		; CODE XREF: _enc_ctrl+A5p
					; DATA XREF: .data:000005B8o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		push	ebx
		mov	ebx, [esp+8+arg_0]
		push	ebp
		mov	ebp, [esp+0Ch+arg_8]
		push	esi
		mov	esi, [ebx+20h]
		push	edi
		push	0Fh
		push	ebx
		mov	[esp+1Ch+arg_8], ebp
		call	_BIO_clear_flags
		mov	edi, [esi]
		add	esp, 8
		sub	edi, [esi+4]
		test	edi, edi
		jle	short loc_5F

loc_31:					; CODE XREF: _enc_write+5Dj
		mov	eax, [esi+4]
		add	eax, 0A0h ; ' '
		push	edi
		add	eax, esi
		push	eax
		push	dword ptr [ebx+24h]
		call	_BIO_write
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jle	loc_108
		add	[esi+4], ebx
		sub	edi, ebx
		mov	ebx, [esp+14h+arg_0]
		test	edi, edi
		jg	short loc_31

loc_5F:					; CODE XREF: _enc_write+2Fj
		mov	eax, [esp+14h+arg_4]
		test	eax, eax
		jz	loc_152
		test	ebp, ebp
		jle	loc_152
		mov	dword ptr [esi+4], 0
		mov	[esp+14h+var_4], 1000h

loc_82:					; CODE XREF: _enc_write+103j
		cmp	ebp, 1000h
		lea	ecx, [esi+0A0h]
		mov	edi, ebp
		lea	edx, [esi+14h]
		cmovg	edi, [esp+14h+var_4]
		push	edi
		push	eax
		push	esi
		push	ecx
		push	edx
		call	_EVP_CipherUpdate
		mov	eax, [esp+28h+arg_4]
		sub	ebp, edi
		add	eax, edi
		mov	dword ptr [esi+4], 0
		mov	edi, [esi]
		add	esp, 14h
		mov	[esp+14h+arg_4], eax
		test	edi, edi
		jle	short loc_EE
		xchg	ax, ax

loc_C0:					; CODE XREF: _enc_write+E8j
		mov	eax, [esi+4]
		add	eax, 0A0h ; ' '
		push	edi
		add	eax, esi
		push	eax
		push	dword ptr [ebx+24h]
		call	_BIO_write
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jle	short loc_11C
		add	[esi+4], ebx
		sub	edi, ebx
		mov	ebx, [esp+14h+arg_0]
		test	edi, edi
		jg	short loc_C0
		mov	eax, [esp+14h+arg_4]

loc_EE:					; CODE XREF: _enc_write+BCj
		mov	dword ptr [esi], 0
		mov	dword ptr [esi+4], 0
		test	ebp, ebp
		jle	short loc_13C
		mov	ebx, [esp+14h+arg_0]
		jmp	loc_82
; ---------------------------------------------------------------------------

loc_108:				; CODE XREF: _enc_write+4Cj
		push	[esp+14h+arg_0]
		call	_BIO_copy_next_retry
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_11C:				; CODE XREF: _enc_write+DBj
		push	[esp+14h+arg_0]
		call	_BIO_copy_next_retry
		mov	eax, [esp+18h+arg_8]
		add	esp, 4
		cmp	eax, ebp
		jz	short loc_134
		sub	eax, ebp
		mov	ebx, eax

loc_134:				; CODE XREF: _enc_write+12Ej
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_13C:				; CODE XREF: _enc_write+FDj
		push	[esp+14h+arg_0]
		call	_BIO_copy_next_retry
		mov	eax, [esp+18h+arg_8]
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_152:				; CODE XREF: _enc_write+65j
					; _enc_write+6Dj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
_enc_write	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 15Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl enc_read(int, void *Dst, size_t Size)
_enc_read	proc near		; DATA XREF: .data:000005BCo

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
Size		= dword	ptr  0Ch

		mov	ecx, [esp+Dst]
		push	ebx
		xor	ebx, ebx
		test	ecx, ecx
		jnz	short loc_16B
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_16B:				; CODE XREF: _enc_read+9j
		mov	eax, [esp+4+arg_0]
		push	esi
		mov	esi, [eax+20h]
		test	esi, esi
		jz	loc_2C6
		cmp	[eax+24h], ebx
		jz	loc_2C6
		mov	edx, [esi]
		push	ebp
		mov	ebp, [esp+0Ch+Size]
		test	edx, edx
		jle	short loc_1CF
		mov	eax, [esi+4]
		mov	ebx, edx
		sub	ebx, [esi+4]
		cmp	ebx, ebp
		cmovg	ebx, ebp
		add	eax, 0A0h ; ' '
		push	ebx		; Size
		add	eax, esi
		push	eax		; Src
		push	ecx		; Dst
		call	_memcpy
		add	[esi+4], ebx
		add	esp, 0Ch
		mov	eax, [esi+4]
		sub	ebp, ebx
		add	[esp+0Ch+Dst], ebx
		cmp	[esi], eax
		mov	eax, [esp+0Ch+arg_0]
		jnz	short loc_1CF
		mov	dword ptr [esi], 0
		mov	dword ptr [esi+4], 0

loc_1CF:				; CODE XREF: _enc_read+31j
					; _enc_read+64j
		test	ebp, ebp
		jle	loc_2A4
		push	edi
		nop	dword ptr [eax+00h]

loc_1DC:				; CODE XREF: _enc_read+13Dj
		cmp	dword ptr [esi+8], 0
		jle	loc_2A3
		lea	ecx, [esi+0E0h]
		push	1000h
		push	ecx
		push	dword ptr [eax+24h]
		call	_BIO_read
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jg	short loc_23F
		mov	eax, [esp+10h+arg_0]
		push	8

loc_209:				; DATA XREF: .data:_methods_enco
		push	dword ptr [eax+24h]
		call	_BIO_test_flags
		add	esp, 8
		test	eax, eax
		jnz	loc_29E
		lea	eax, [esi+0A0h]
		mov	[esi+8], edi
		push	esi
		push	eax
		lea	eax, [esi+14h]
		push	eax
		call	_EVP_CipherFinal_ex
		add	esp, 0Ch
		mov	[esi+10h], eax
		mov	dword ptr [esi+4], 0
		jmp	short loc_267
; ---------------------------------------------------------------------------

loc_23F:				; CODE XREF: _enc_read+A5j
		push	edi
		lea	ecx, [esi+0E0h]
		push	ecx
		lea	eax, [esi+0A0h]
		push	esi
		push	eax
		lea	eax, [esi+14h]
		push	eax
		call	_EVP_CipherUpdate
		add	esp, 14h
		mov	dword ptr [esi+8], 1
		cmp	dword ptr [esi], 0
		jz	short loc_291

loc_267:				; CODE XREF: _enc_read+E1j
		cmp	[esi], ebp
		mov	edi, ebp
		cmovle	edi, [esi]
		test	edi, edi
		jle	short loc_2A3
		push	edi		; Size
		lea	eax, [esi+0A0h]
		push	eax		; Src
		push	[esp+18h+Dst]	; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	[esi+4], edi
		add	ebx, edi
		sub	ebp, edi
		add	[esp+10h+Dst], edi

loc_291:				; CODE XREF: _enc_read+109j
		test	ebp, ebp
		jle	short loc_2A3
		mov	eax, [esp+10h+arg_0]
		jmp	loc_1DC
; ---------------------------------------------------------------------------

loc_29E:				; CODE XREF: _enc_read+BAj
		test	ebx, ebx
		cmovz	ebx, edi

loc_2A3:				; CODE XREF: _enc_read+84j
					; _enc_read+114j ...
		pop	edi

loc_2A4:				; CODE XREF: _enc_read+75j
		mov	ebp, [esp+0Ch+arg_0]
		push	0Fh
		push	ebp
		call	_BIO_clear_flags
		push	ebp
		call	_BIO_copy_next_retry
		add	esp, 0Ch
		pop	ebp
		test	ebx, ebx
		jnz	short loc_2C1
		mov	ebx, [esi+8]

loc_2C1:				; CODE XREF: _enc_read+160j
		pop	esi
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2C6:				; CODE XREF: _enc_read+19j
					; _enc_read+22j
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
_enc_read	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2CCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_enc_ctrl	proc near		; DATA XREF: .data:000005C8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		mov	ebp, [esp+8+arg_4]
		push	esi
		mov	esi, [ebx+20h]
		push	edi
		lea	eax, [ebp-1]	; switch 129 cases
		mov	edi, 1
		cmp	eax, 80h ; '€'
		ja	short $LN23	; jumptable 000002F1 default case
		movzx	eax, ds:$LN37[eax]
		jmp	ds:$LN43[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN6:					; CODE XREF: _enc_ctrl+25j
					; DATA XREF: .text$mn:$LN43o
		push	dword ptr [esi+1Ch] ; jumptable	000002F1 case 1
		mov	[esi+10h], edi
		push	0
		push	0
		push	0
		mov	dword ptr [esi+0Ch], 0
		add	esi, 14h
		push	0
		push	esi
		call	_EVP_CipherInit_ex
		push	[esp+28h+arg_C]
		push	[esp+2Ch+arg_8]
		push	ebp
		push	dword ptr [ebx+24h]
		call	_BIO_ctrl
		add	esp, 28h
		mov	edi, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN7:					; CODE XREF: _enc_ctrl+25j
					; DATA XREF: .text$mn:$LN43o
		cmp	dword ptr [esi+8], 0 ; jumptable 000002F1 case 2
		jle	short loc_34D

$LN23:					; CODE XREF: _enc_ctrl+1Cj
					; _enc_ctrl+25j ...
		push	[esp+10h+arg_C]	; jumptable 000002F1 default case
		push	[esp+14h+arg_8]
		push	ebp
		push	dword ptr [ebx+24h]
		call	_BIO_ctrl
		add	esp, 10h
		mov	edi, eax

loc_34D:				; CODE XREF: _enc_ctrl+69j
					; _enc_ctrl+8Fj ...
		mov	eax, edi

loc_34F:				; CODE XREF: _enc_ctrl+AFj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN10:					; CODE XREF: _enc_ctrl+25j
					; DATA XREF: .text$mn:$LN43o
		mov	edi, [esi]	; jumptable 000002F1 cases 10,13
		sub	edi, [esi+4]
		test	edi, edi
		jg	short loc_34D
		jmp	short $LN23	; jumptable 000002F1 default case
; ---------------------------------------------------------------------------

$again$44:				; CODE XREF: _enc_ctrl+25j
					; _enc_ctrl+E7j
					; DATA XREF: ...
		mov	eax, [esi]	; jumptable 000002F1 case 11
		cmp	eax, [esi+4]
		jz	short loc_384
		nop	word ptr [eax+eax+00h]

loc_36C:				; CODE XREF: _enc_ctrl+B6j
		push	0
		push	0
		push	ebx
		call	_enc_write
		add	esp, 0Ch
		test	eax, eax
		js	short loc_34F
		mov	eax, [esi]
		cmp	eax, [esi+4]
		jnz	short loc_36C

loc_384:				; CODE XREF: _enc_ctrl+98j
		cmp	dword ptr [esi+0Ch], 0
		jnz	short $LN23	; jumptable 000002F1 default case
		push	esi
		lea	eax, [esi+0A0h]
		mov	dword ptr [esi+0Ch], 1
		push	eax
		lea	eax, [esi+14h]
		mov	dword ptr [esi+4], 0
		push	eax
		call	_EVP_CipherFinal_ex
		mov	edi, eax
		add	esp, 0Ch
		mov	[esi+10h], edi
		test	edi, edi
		jg	short $again$44	; jumptable 000002F1 case 11
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN18:					; CODE XREF: _enc_ctrl+25j
					; DATA XREF: .text$mn:$LN43o
		mov	edi, [esi+10h]	; jumptable 000002F1 case 113
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN19:					; CODE XREF: _enc_ctrl+25j
					; DATA XREF: .text$mn:$LN43o
		push	0Fh		; jumptable 000002F1 case 101
		push	ebx
		call	_BIO_clear_flags
		push	[esp+18h+arg_C]
		push	[esp+1Ch+arg_8]
		push	ebp
		push	dword ptr [ebx+24h]
		call	_BIO_ctrl
		push	ebx
		mov	edi, eax
		call	_BIO_copy_next_retry
		add	esp, 1Ch
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN20:					; CODE XREF: _enc_ctrl+25j
					; DATA XREF: .text$mn:$LN43o
		mov	eax, [esp+10h+arg_C] ; jumptable 000002F1 case 129
		add	esi, 14h
		mov	[eax], esi
		mov	eax, edi
		mov	[ebx+0Ch], edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$LN21:					; CODE XREF: _enc_ctrl+25j
					; DATA XREF: .text$mn:$LN43o
		mov	ebx, [esp+10h+arg_C] ; jumptable 000002F1 case 12
		mov	edi, [ebx+20h]
		add	edi, 14h
		push	edi
		call	_EVP_CIPHER_CTX_init
		add	esi, 14h
		push	esi
		push	edi
		call	_EVP_CIPHER_CTX_copy
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	loc_34D
		pop	edi
		pop	esi
		pop	ebp
		mov	dword ptr [ebx+0Ch], 1
		pop	ebx
		retn
_enc_ctrl	endp

; ---------------------------------------------------------------------------
		align 4
$LN43		dd offset $LN6,	offset $LN7, offset $LN10, offset $again$44
					; DATA XREF: _enc_ctrl+25r
		dd offset $LN21, offset	$LN19, offset $LN18, offset $LN20 ; jump table for switch statement
		dd offset $LN23
$LN37		db	0,     1,     8,     8 ; DATA XREF: _enc_ctrl+1Er
		db	8,     8,     8,     8 ; indirect table	for switch statement
		db	8,     2,     3,     4
		db	2,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	5,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	6,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     8
		db	7
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_enc_new	proc near		; DATA XREF: .data:000005CCo

arg_0		= dword	ptr  4

		push	esi
		push	73h ; 's'
		push	offset ??_C@_0BH@GLJJADKE@?4?2crypto?2evp?2bio_enc?4c?$AA@ ; ".\\crypto\\evp\\bio_enc.c"
		push	10E4h
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_4FD
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4FD:				; CODE XREF: _enc_new+19j
		lea	eax, [esi+14h]
		push	eax
		call	_EVP_CIPHER_CTX_init
		mov	eax, [esp+8+arg_0]
		add	esp, 4
		mov	dword ptr [esi], 0
		mov	dword ptr [esi+4], 0
		mov	dword ptr [esi+8], 1
		mov	dword ptr [esi+0Ch], 0
		mov	dword ptr [esi+10h], 1
		mov	[eax+20h], esi
		mov	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax+14h], 0
		mov	eax, 1
		pop	esi
		retn
_enc_new	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 548h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_enc_free	proc near		; DATA XREF: .data:000005D0o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_555
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_555:				; CODE XREF: _enc_free+7j
		mov	eax, [esi+20h]
		add	eax, 14h
		push	eax
		call	_EVP_CIPHER_CTX_cleanup
		push	10E4h
		push	dword ptr [esi+20h]
		call	_OPENSSL_cleanse
		push	dword ptr [esi+20h]
		call	_CRYPTO_free
		add	esp, 10h
		mov	dword ptr [esi+20h], 0
		mov	dword ptr [esi+0Ch], 0
		mov	eax, 1
		mov	dword ptr [esi+14h], 0
		pop	esi
		retn
_enc_free	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 598h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_enc_callback_ctrl proc	near		; DATA XREF: .data:000005D4o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+24h]
		test	eax, eax
		jnz	short loc_5A4
		retn
; ---------------------------------------------------------------------------

loc_5A4:				; CODE XREF: _enc_callback_ctrl+9j
		mov	[esp+arg_0], eax
		jmp	_BIO_callback_ctrl
_enc_callback_ctrl endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 5B0h
_methods_enc	dd offset loc_209+1	; DATA XREF: _BIO_f_ciphero
		dd offset ??_C@_06KDGDAFPH@cipher?$AA@ ; "cipher"
		dd offset _enc_write
		dd offset _enc_read
		dd 2 dup(0)
		dd offset _enc_ctrl
		dd offset _enc_new
		dd offset _enc_free
		dd offset _enc_callback_ctrl
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5D8h
; COMDAT (pick any)
		public ??_C@_06KDGDAFPH@cipher?$AA@
; `string'
??_C@_06KDGDAFPH@cipher?$AA@ db	'cipher',0 ; DATA XREF: .data:000005B4o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5E0h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_f_cipher
_BIO_f_cipher	proc near
		mov	eax, offset _methods_enc
		retn
_BIO_f_cipher	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5E8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BIO_set_cipher
_BIO_set_cipher	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_64D
		mov	eax, [esi+4]
		push	ebx
		mov	ebx, [esp+8+arg_4]
		push	edi
		mov	edi, [esp+0Ch+arg_10]
		test	eax, eax
		jz	short loc_614
		push	0
		push	edi
		push	4
		push	ebx
		push	6
		push	esi
		call	eax
		add	esp, 18h
		test	eax, eax
		jle	short loc_64B

loc_614:				; CODE XREF: _BIO_set_cipher+18j
		mov	eax, [esi+20h]
		push	edi
		push	[esp+10h+arg_C]
		add	eax, 14h
		mov	dword ptr [esi+0Ch], 1
		push	[esp+14h+arg_8]
		push	0
		push	ebx
		push	eax
		call	_EVP_CipherInit_ex
		mov	eax, [esi+4]
		add	esp, 18h
		test	eax, eax
		jz	short loc_64B
		push	1
		push	edi
		push	4
		push	ebx
		push	6
		push	esi
		call	eax
		add	esp, 18h

loc_64B:				; CODE XREF: _BIO_set_cipher+2Aj
					; _BIO_set_cipher+53j
		pop	edi
		pop	ebx

loc_64D:				; CODE XREF: _BIO_set_cipher+7j
		pop	esi
		retn
_BIO_set_cipher	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 650h
; COMDAT (pick any)
		public ??_C@_0BH@GLJJADKE@?4?2crypto?2evp?2bio_enc?4c?$AA@
; `string'
??_C@_0BH@GLJJADKE@?4?2crypto?2evp?2bio_enc?4c?$AA@ db '.\crypto\evp\bio_enc.c',0
					; DATA XREF: _enc_new+3o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _enc_new+Dp
		extrn _CRYPTO_free:near	; CODE XREF: _enc_free+29p
		extrn _OPENSSL_cleanse:near ; CODE XREF: _enc_free+21p
		extrn _BIO_test_flags:near ; CODE XREF:	_enc_read+B0p
		extrn _BIO_clear_flags:near ; CODE XREF: _enc_write+20p
					; _enc_read+14Fp ...
		extrn _BIO_read:near	; CODE XREF: _enc_read+99p
		extrn _BIO_write:near	; CODE XREF: _enc_write+40p
					; _enc_write+CFp
		extrn _BIO_ctrl:near	; CODE XREF: _enc_ctrl+56p
					; _enc_ctrl+77p ...
		extrn _BIO_callback_ctrl:near ;	CODE XREF: _enc_callback_ctrl+10j
		extrn _BIO_copy_next_retry:near	; CODE XREF: _enc_write+10Cp
					; _enc_write+120p ...
		extrn _EVP_CIPHER_CTX_copy:near	; CODE XREF: _enc_ctrl+14Bp
		extrn _EVP_CipherInit_ex:near ;	CODE XREF: _enc_ctrl+45p
					; _BIO_set_cipher+46p
		extrn _EVP_CipherUpdate:near ; CODE XREF: _enc_write+9Dp
					; _enc_read+F7p
		extrn _EVP_CipherFinal_ex:near ; CODE XREF: _enc_read+CFp
					; _enc_ctrl+D8p
		extrn _EVP_CIPHER_CTX_init:near	; CODE XREF: _enc_ctrl+141p
					; _enc_new+21p
		extrn _EVP_CIPHER_CTX_cleanup:near ; CODE XREF:	_enc_free+14p
		extrn __chkstk:near	; CODE XREF: _enc_write+5p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _enc_read+4Ap
					; _enc_read+122p


		end
