;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	9E07128615E104169F10653D4A51D4ED
; Input	CRC32 :	B4834E3C

; File Name   :	C:\compspace\Diff\openssl\obj\gost_ctl.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		public _gost_cmds
_gost_cmds	dd offset loc_C7+1
		dd offset ??_C@_0N@FGKNJHPL@CRYPT_PARAMS?$AA@ ;	"CRYPT_PARAMS"
		dd offset ??_C@_0CI@DFMKNJHI@OID?5of?5default?5GOST?528147?989?5par@ ; "OID of default GOST 28147-89 parameters"
		dd 2, 4	dup(0)
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 20h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
_gost_params	dd ?			; DATA XREF: _get_gost_engine_param+9r
					; _get_gost_engine_param+2Br ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 24h
; char *gost_envnames
_gost_envnames	dd offset ??_C@_0N@FGKNJHPL@CRYPT_PARAMS?$AA@
					; DATA XREF: _get_gost_engine_param+15r
					; _gost_set_default_param+Ar
_data		ends			; "CRYPT_PARAMS"

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 28h
; COMDAT (pick any)
		public ??_C@_0N@FGKNJHPL@CRYPT_PARAMS?$AA@
; `string'
??_C@_0N@FGKNJHPL@CRYPT_PARAMS?$AA@ db 'CRYPT_PARAMS',0 ; DATA XREF: .rdata:00000004o
					; .data:_gost_envnameso
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 38h
; COMDAT (pick any)
		public ??_C@_0CI@DFMKNJHI@OID?5of?5default?5GOST?528147?989?5par@
; `string'
??_C@_0CI@DFMKNJHI@OID?5of?5default?5GOST?528147?989?5par@ db 'OID of default GOST 28147-89 parameters',0
					; DATA XREF: .rdata:00000008o
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 60h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _get_gost_engine_param
_get_gost_engine_param proc near

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_B7
		mov	eax, ds:_gost_params[esi*4]
		test	eax, eax
		jnz	short loc_B0
		push	edi
		push	ds:_gost_envnames[esi*4] ; VarName
		call	dword ptr ds:__imp__getenv
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_B2
		mov	ecx, ds:_gost_params[esi*4]
		test	ecx, ecx
		jz	short loc_9F
		push	ecx
		call	_CRYPTO_free
		add	esp, 4

loc_9F:					; CODE XREF: _get_gost_engine_param+34j
		push	edi
		call	_BUF_strdup
		add	esp, 4
		mov	ds:_gost_params[esi*4],	eax
		pop	edi

loc_B0:					; CODE XREF: _get_gost_engine_param+12j
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_B2:					; CODE XREF: _get_gost_engine_param+29j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_B7:					; CODE XREF: _get_gost_engine_param+7j
		xor	eax, eax
		pop	esi
		retn
_get_gost_engine_param endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gost_control_func
_gost_control_func proc	near

arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		add	eax, 0FFFFFF38h
		jnz	short loc_D5

loc_C7:					; DATA XREF: .rdata:_gost_cmdso
		push	[esp+arg_C]
		push	eax
		call	_gost_set_default_param
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_D5:					; CODE XREF: _gost_control_func+9j
		or	eax, 0FFFFFFFFh
		retn
_gost_control_func endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0DCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gost_param_free
_gost_param_free proc near
		mov	eax, ds:_gost_params
		test	eax, eax
		jz	short locret_F8
		push	eax
		call	_CRYPTO_free
		add	esp, 4
		mov	ds:_gost_params, 0

locret_F8:				; CODE XREF: _gost_param_free+7j
		retn
_gost_param_free endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gost_set_default_param
_gost_set_default_param	proc near	; CODE XREF: _gost_control_func+10p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_14B
		push	edi
		push	ds:_gost_envnames[esi*4] ; VarName
		call	dword ptr ds:__imp__getenv
		mov	edi, eax
		add	esp, 4
		mov	eax, ds:_gost_params[esi*4]
		test	edi, edi
		cmovz	edi, [esp+8+arg_4]
		test	eax, eax
		jz	short loc_133
		push	eax
		call	_CRYPTO_free
		add	esp, 4

loc_133:				; CODE XREF: _gost_set_default_param+2Cj
		push	edi
		call	_BUF_strdup
		add	esp, 4
		mov	ds:_gost_params[esi*4],	eax
		mov	eax, 1
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_14B:				; CODE XREF: _gost_set_default_param+7j
		xor	eax, eax
		pop	esi
		retn
_gost_set_default_param	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; char *__cdecl	_getenv(const char *VarName)
		extrn __imp__getenv:near ; CODE	XREF: _get_gost_engine_param+1Cp
					; _gost_set_default_param+11p
					; DATA XREF: ...
		extrn _CRYPTO_free:near	; CODE XREF: _get_gost_engine_param+37p
					; _gost_param_free+Ap ...
		extrn _BUF_strdup:near	; CODE XREF: _get_gost_engine_param+40p
					; _gost_set_default_param+38p


		end
