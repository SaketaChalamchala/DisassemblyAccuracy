;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	FE3603A32175AE39EB985D8273559646
; Input	CRC32 :	73FA9603

; File Name   :	C:\compspace\Diff\openssl\obj\dh_key.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_generate_key	proc near		; DATA XREF: .data:00000380o

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 20h ; ' '
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		xor	ebp, ebp
		mov	[esp+2Ch+var_18], 0
		push	edi
		mov	[esp+30h+var_1C], ebp
		xor	ebx, ebx
		xor	esi, esi
		call	_BN_CTX_new
		mov	edi, [esp+30h+arg_0]
		mov	[esp+30h+var_20], eax
		test	eax, eax
		jz	loc_16C
		mov	esi, [edi+18h]
		test	esi, esi
		jnz	short loc_4E
		call	_BN_new
		mov	esi, eax
		test	esi, esi
		jz	loc_166
		lea	ebp, [ebx+1]

loc_4E:					; CODE XREF: _generate_key+3Aj
		mov	ebx, [edi+14h]
		test	ebx, ebx
		jnz	short loc_64
		call	_BN_new
		mov	ebx, eax
		test	ebx, ebx
		jz	loc_166

loc_64:					; CODE XREF: _generate_key+53j
		test	byte ptr [edi+1Ch], 1
		jz	short loc_8B
		push	[esp+30h+var_20]
		lea	eax, [edi+20h]
		push	dword ptr [edi+8]
		push	1Ah
		push	eax
		call	_BN_MONT_CTX_set_locked
		add	esp, 10h
		mov	[esp+30h+var_1C], eax
		test	eax, eax
		jz	loc_166

loc_8B:					; CODE XREF: _generate_key+68j
		test	ebp, ebp
		jz	short loc_E9
		cmp	dword ptr [edi+24h], 0
		jz	short loc_C4

loc_95:					; CODE XREF: _generate_key+AEj
					; _generate_key+C0j
		push	dword ptr [edi+24h]
		push	esi
		call	_BN_rand_range
		add	esp, 8
		test	eax, eax
		jz	loc_166
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_95
		cmp	eax, 1
		jnz	short loc_E9
		mov	eax, [esi]
		cmp	dword ptr [eax], 1
		jnz	short loc_E9
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_95
		jmp	short loc_E9
; ---------------------------------------------------------------------------

loc_C4:					; CODE XREF: _generate_key+93j
		mov	eax, [edi+10h]
		test	eax, eax
		jnz	short loc_D7
		push	dword ptr [edi+8]
		call	_BN_num_bits
		add	esp, 4
		dec	eax

loc_D7:					; CODE XREF: _generate_key+C9j
		push	0
		push	0
		push	eax
		push	esi
		call	_BN_rand
		add	esp, 10h
		test	eax, eax
		jz	short loc_166

loc_E9:					; CODE XREF: _generate_key+8Dj
					; _generate_key+B3j ...
		test	byte ptr [edi+1Ch], 2
		jnz	short loc_133
		lea	eax, [esp+30h+var_14]
		push	eax
		call	_BN_init
		mov	eax, [esi]
		lea	edx, [esp+34h+var_14]
		mov	ecx, [esi+10h]
		add	esp, 4
		mov	[esp+30h+var_14], eax
		and	ecx, 0FFFFFFFEh
		mov	eax, [esi+4]
		mov	[esp+30h+var_10], eax
		mov	eax, [esi+8]
		mov	[esp+30h+var_C], eax
		mov	eax, [esi+0Ch]
		mov	[esp+30h+var_8], eax
		mov	eax, [esp+30h+var_4]
		and	eax, 1
		or	ecx, eax
		or	ecx, 6
		mov	[esp+30h+var_4], ecx
		jmp	short loc_135
; ---------------------------------------------------------------------------

loc_133:				; CODE XREF: _generate_key+EDj
		mov	edx, esi

loc_135:				; CODE XREF: _generate_key+131j
		push	[esp+30h+var_1C]
		mov	ebp, [esp+34h+var_20]
		mov	eax, [edi+44h]
		push	ebp
		push	dword ptr [edi+8]
		mov	eax, [eax+0Ch]
		push	edx
		push	dword ptr [edi+0Ch]
		push	ebx
		push	edi
		call	eax
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_16E
		mov	[edi+14h], ebx
		mov	[edi+18h], esi
		mov	[esp+30h+var_18], 1
		jmp	short loc_186
; ---------------------------------------------------------------------------

loc_166:				; CODE XREF: _generate_key+45j
					; _generate_key+5Ej ...
		mov	ebp, [esp+30h+var_20]
		jmp	short loc_16E
; ---------------------------------------------------------------------------

loc_16C:				; CODE XREF: _generate_key+2Fj
		mov	ebp, eax

loc_16E:				; CODE XREF: _generate_key+154j
					; _generate_key+16Aj
		push	0C6h ; 'Æ'
		push	offset ??_C@_0BF@LANDKLP@?4?2crypto?2dh?2dh_key?4c?$AA@	; ".\\crypto\\dh\\dh_key.c"
		push	3
		push	67h ; 'g'
		push	5
		call	_ERR_put_error
		add	esp, 14h

loc_186:				; CODE XREF: _generate_key+164j
		test	ebx, ebx
		jz	short loc_199
		cmp	dword ptr [edi+14h], 0
		jnz	short loc_199
		push	ebx
		call	_BN_free
		add	esp, 4

loc_199:				; CODE XREF: _generate_key+188j
					; _generate_key+18Ej
		test	esi, esi
		jz	short loc_1AC
		cmp	dword ptr [edi+18h], 0
		jnz	short loc_1AC
		push	esi
		call	_BN_free
		add	esp, 4

loc_1AC:				; CODE XREF: _generate_key+19Bj
					; _generate_key+1A1j
		push	ebp
		call	_BN_CTX_free
		mov	eax, [esp+34h+var_18]
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 20h
		retn
_generate_key	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1C4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_compute_key	proc near		; DATA XREF: .data:00000384o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 4
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+10h+arg_8]
		xor	ebp, ebp
		or	ebx, 0FFFFFFFFh
		push	dword ptr [esi+8]
		call	_BN_num_bits
		add	esp, 4
		cmp	eax, 2710h
		jle	short loc_20B
		push	0D9h ; 'Ù'
		push	offset ??_C@_0BF@LANDKLP@?4?2crypto?2dh?2dh_key?4c?$AA@	; ".\\crypto\\dh\\dh_key.c"
		push	67h ; 'g'
		push	66h ; 'f'
		push	5
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, ebx
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_20B:				; CODE XREF: _compute_key+26j
		push	edi
		call	_BN_CTX_new
		mov	edi, eax
		test	edi, edi
		jz	loc_2F3
		push	edi
		call	_BN_CTX_start
		push	edi
		call	_BN_CTX_get
		add	esp, 8
		mov	[esp+14h+var_4], eax
		cmp	[esi+18h], ebp
		jnz	short loc_244
		push	0E4h ; 'ä'
		push	offset ??_C@_0BF@LANDKLP@?4?2crypto?2dh?2dh_key?4c?$AA@	; ".\\crypto\\dh\\dh_key.c"
		push	64h ; 'd'
		jmp	loc_2D8
; ---------------------------------------------------------------------------

loc_244:				; CODE XREF: _compute_key+6Dj
		test	byte ptr [esi+1Ch], 1
		jz	short loc_26F
		push	edi
		push	dword ptr [esi+8]
		lea	eax, [esi+20h]
		push	1Ah
		push	eax
		call	_BN_MONT_CTX_set_locked
		add	esp, 10h
		mov	ebp, eax
		test	byte ptr [esi+1Ch], 2
		jnz	short loc_26B
		mov	ecx, [esi+18h]
		or	dword ptr [ecx+10h], 4

loc_26B:				; CODE XREF: _compute_key+9Ej
		test	ebp, ebp
		jz	short $err$18

loc_26F:				; CODE XREF: _compute_key+84j
		lea	eax, [esp+14h+arg_8]
		push	eax
		push	[esp+18h+arg_4]
		push	esi
		call	_DH_check_pub_key
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_2CC
		cmp	[esp+14h+arg_8], 0
		jnz	short loc_2CC
		mov	eax, [esi+44h]
		push	ebp
		mov	ebp, [esp+18h+var_4]
		push	edi
		push	dword ptr [esi+8]
		mov	eax, [eax+0Ch]
		push	dword ptr [esi+18h]
		push	[esp+24h+arg_4]
		push	ebp
		push	esi
		call	eax
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_2BB
		push	0FAh ; 'ú'
		push	offset ??_C@_0BF@LANDKLP@?4?2crypto?2dh?2dh_key?4c?$AA@	; ".\\crypto\\dh\\dh_key.c"
		push	3
		jmp	short loc_2D8
; ---------------------------------------------------------------------------

loc_2BB:				; CODE XREF: _compute_key+E7j
		push	[esp+14h+arg_0]
		push	ebp
		call	_BN_bn2bin
		add	esp, 8
		mov	ebx, eax
		jmp	short $err$18
; ---------------------------------------------------------------------------

loc_2CC:				; CODE XREF: _compute_key+BFj
					; _compute_key+C6j
		push	0F4h ; 'ô'
		push	offset ??_C@_0BF@LANDKLP@?4?2crypto?2dh?2dh_key?4c?$AA@	; ".\\crypto\\dh\\dh_key.c"
		push	66h ; 'f'

loc_2D8:				; CODE XREF: _compute_key+7Bj
					; _compute_key+F5j
		push	66h ; 'f'
		push	5
		call	_ERR_put_error
		add	esp, 14h

$err$18:				; CODE XREF: _compute_key+A9j
					; _compute_key+106j
		push	edi
		call	_BN_CTX_end
		push	edi
		call	_BN_CTX_free
		add	esp, 8

loc_2F3:				; CODE XREF: _compute_key+51j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		pop	ecx
		retn
_compute_key	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2FCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_bn_mod_exp	proc near		; DATA XREF: .data:00000388o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	ecx, [esp+arg_8]
		cmp	dword ptr [ecx+4], 1
		jnz	short loc_331
		mov	eax, [esp+arg_0]
		test	byte ptr [eax+1Ch], 2
		jz	short loc_331
		push	[esp+arg_18]
		mov	eax, [ecx]
		push	[esp+4+arg_14]
		push	[esp+8+arg_10]
		push	[esp+0Ch+arg_C]
		push	dword ptr [eax]
		push	[esp+14h+arg_4]
		call	_BN_mod_exp_mont_word
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_331:				; CODE XREF: _dh_bn_mod_exp+8j
					; _dh_bn_mod_exp+12j
		push	[esp+arg_18]
		push	[esp+4+arg_14]
		push	[esp+8+arg_10]
		push	[esp+0Ch+arg_C]
		push	ecx
		push	[esp+14h+arg_4]
		call	_BN_mod_exp_mont
		add	esp, 18h
		retn
_dh_bn_mod_exp	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 350h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_init	proc near		; DATA XREF: .data:0000038Co

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		or	dword ptr [eax+1Ch], 1
		mov	eax, 1
		retn
_dh_init	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 360h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_dh_finish	proc near		; DATA XREF: .data:00000390o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+20h]
		test	eax, eax
		jz	short loc_374
		push	eax
		call	_BN_MONT_CTX_free
		add	esp, 4

loc_374:				; CODE XREF: _dh_finish+9j
		mov	eax, 1
		retn
_dh_finish	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 37Ch
_dh_ossl	dd offset ??_C@_0BC@MGHKLCAP@OpenSSL?5DH?5Method?$AA@
					; DATA XREF: _DH_OpenSSLo
					; "OpenSSL DH Method"
		dd offset _generate_key
		dd offset _compute_key
		dd offset _dh_bn_mod_exp
		dd offset _dh_init
		dd offset _dh_finish
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3A0h
; COMDAT (pick any)
		public ??_C@_0BC@MGHKLCAP@OpenSSL?5DH?5Method?$AA@
; `string'
??_C@_0BC@MGHKLCAP@OpenSSL?5DH?5Method?$AA@ db 'OpenSSL DH Method',0
					; DATA XREF: .data:_dh_osslo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3B4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DH_OpenSSL
_DH_OpenSSL	proc near
		mov	eax, offset _dh_ossl
		retn
_DH_OpenSSL	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3BCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DH_compute_key
_DH_compute_key	proc near

arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	ecx, [eax+44h]
		mov	[esp+arg_8], eax
		mov	eax, [ecx+8]
		jmp	eax
_DH_compute_key	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3CCh
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl DH_compute_key_padded(void *Src, int, int)
		public _DH_compute_key_padded
_DH_compute_key_padded proc near

Src		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+Src]
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_8]
		push	edi
		push	[esp+10h+arg_4]
		mov	eax, [edi+44h]
		push	ebx
		mov	eax, [eax+8]
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jle	short loc_427
		push	dword ptr [edi+8]
		call	_BN_num_bits
		add	eax, 7
		add	esp, 4
		cdq
		and	edx, 7
		lea	edi, [edx+eax]
		sar	edi, 3
		sub	edi, esi
		test	edi, edi
		jle	short loc_424
		push	esi		; Size
		lea	ecx, [edi+ebx]
		push	ebx		; Src
		push	ecx		; Dst
		call	dword ptr ds:__imp__memmove
		push	edi		; Size
		push	0		; Val
		push	ebx		; Dst
		call	_memset
		add	esp, 18h

loc_424:				; CODE XREF: _DH_compute_key_padded+3Ej
		lea	eax, [edi+esi]

loc_427:				; CODE XREF: _DH_compute_key_padded+20j
		pop	edi
		pop	esi
		pop	ebx
		retn
_DH_compute_key_padded endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 42Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _DH_generate_key
_DH_generate_key proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	ecx, [eax+44h]
		mov	[esp+arg_0], eax
		mov	eax, [ecx+4]
		jmp	eax
_DH_generate_key endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 43Ch
; COMDAT (pick any)
		public ??_C@_0BF@LANDKLP@?4?2crypto?2dh?2dh_key?4c?$AA@
; `string'
??_C@_0BF@LANDKLP@?4?2crypto?2dh?2dh_key?4c?$AA@ db '.\crypto\dh\dh_key.c',0
					; DATA XREF: _generate_key+173o
					; _compute_key+2Do ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; void *__cdecl	_memmove(void *Dst, const void *Src, size_t Size)
		extrn __imp__memmove:near ; CODE XREF: _DH_compute_key_padded+46p
					; DATA XREF: _DH_compute_key_padded+46r
		extrn _ERR_put_error:near ; CODE XREF: _generate_key+17Ep
					; _compute_key+38p ...
		extrn _BN_CTX_new:near	; CODE XREF: _generate_key+20p
					; _compute_key+48p
		extrn _BN_CTX_free:near	; CODE XREF: _generate_key+1ADp
					; _compute_key+127p
		extrn _BN_CTX_start:near ; CODE	XREF: _compute_key+58p
		extrn _BN_CTX_get:near	; CODE XREF: _compute_key+5Ep
		extrn _BN_CTX_end:near	; CODE XREF: _compute_key+121p
		extrn _BN_rand:near	; CODE XREF: _generate_key+DDp
		extrn _BN_rand_range:near ; CODE XREF: _generate_key+99p
		extrn _BN_num_bits:near	; CODE XREF: _generate_key+CEp
					; _compute_key+19p ...
		extrn _BN_new:near	; CODE XREF: _generate_key+3Cp
					; _generate_key+55p
		extrn _BN_init:near	; CODE XREF: _generate_key+F4p
		extrn _BN_bn2bin:near	; CODE XREF: _compute_key+FCp
		extrn _BN_free:near	; CODE XREF: _generate_key+191p
					; _generate_key+1A4p
		extrn _BN_mod_exp_mont:near ; CODE XREF: _dh_bn_mod_exp+4Ap
		extrn _BN_mod_exp_mont_word:near ; CODE	XREF: _dh_bn_mod_exp+2Cp
		extrn _BN_MONT_CTX_free:near ; CODE XREF: _dh_finish+Cp
		extrn _BN_MONT_CTX_set_locked:near ; CODE XREF:	_generate_key+77p
					; _compute_key+90p
		extrn _DH_check_pub_key:near ; CODE XREF: _compute_key+B5p
		extrn __chkstk:near	; CODE XREF: _generate_key+5p
					; _compute_key+5p
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _DH_compute_key_padded+50p


		end
