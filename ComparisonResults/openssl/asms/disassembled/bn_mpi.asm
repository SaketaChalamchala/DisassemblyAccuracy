;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	BCF1B5E5055E33FA34C6CA01C3B25502
; Input	CRC32 :	D529E289

; File Name   :	C:\compspace\Diff\openssl\obj\bn_mpi.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_bn2mpi
_BN_bn2mpi	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		xor	ebx, ebx
		push	edi
		call	_BN_num_bits
		mov	ecx, eax
		add	esp, 4
		lea	eax, [ecx+7]
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		test	ecx, ecx
		jle	short loc_2A
		test	cl, 7
		setz	bl

loc_2A:					; CODE XREF: _BN_bn2mpi+22j
		mov	esi, [esp+0Ch+arg_4]
		test	esi, esi
		jz	short loc_70
		lea	ecx, [ebx+eax]
		mov	eax, ecx
		mov	[esi+3], cl
		sar	eax, 18h
		mov	[esi], al
		mov	eax, ecx
		sar	eax, 10h
		mov	[esi+1], al
		mov	eax, ecx
		sar	eax, 8
		mov	[esi+2], al
		test	ebx, ebx
		jz	short loc_57
		mov	byte ptr [esi+4], 0

loc_57:					; CODE XREF: _BN_bn2mpi+51j
		lea	eax, [esi+4]
		add	eax, ebx
		push	eax
		push	edi
		call	_BN_bn2bin
		add	esp, 8
		cmp	dword ptr [edi+0Ch], 0
		jz	short loc_70
		or	byte ptr [esi+4], 80h

loc_70:					; CODE XREF: _BN_bn2mpi+30j
					; _BN_bn2mpi+6Aj
		pop	edi
		add	eax, 4
		pop	esi
		add	eax, ebx
		pop	ebx
		retn
_BN_bn2mpi	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_mpi2bn
_BN_mpi2bn	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_4]
		push	ebx
		xor	ebx, ebx
		cmp	ecx, 4
		jge	short loc_A1
		push	61h ; 'a'
		push	offset ??_C@_0BF@JHLAIJGB@?4?2crypto?2bn?2bn_mpi?4c?$AA@ ; ".\\crypto\\bn\\bn_mpi.c"
		push	6Ah ; 'j'
		push	70h ; 'p'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_A1:					; CODE XREF: _BN_mpi2bn+Aj
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	edi
		movzx	edi, byte ptr [ebp+0]
		movzx	eax, byte ptr [ebp+1]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [ebp+2]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [ebp+3]
		shl	edi, 8
		or	edi, eax
		lea	eax, [edi+4]
		cmp	eax, ecx
		jz	short loc_E8
		push	67h ; 'g'
		push	offset ??_C@_0BF@JHLAIJGB@?4?2crypto?2bn?2bn_mpi?4c?$AA@ ; ".\\crypto\\bn\\bn_mpi.c"
		push	68h ; 'h'
		push	70h ; 'p'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_E8:					; CODE XREF: _BN_mpi2bn+4Fj
		push	esi
		mov	esi, [esp+10h+arg_8]
		test	esi, esi
		jnz	short loc_FC
		call	_BN_new
		mov	esi, eax
		test	esi, esi
		jz	short loc_12B

loc_FC:					; CODE XREF: _BN_mpi2bn+73j
		test	edi, edi
		jnz	short loc_10D
		mov	[esi+0Ch], ebx
		mov	eax, esi
		mov	[esi+4], ebx
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10D:				; CODE XREF: _BN_mpi2bn+82j
		add	ebp, 4
		mov	eax, 1
		push	esi
		push	edi
		push	ebp
		test	byte ptr [ebp+0], 80h
		cmovnz	ebx, eax
		call	_BN_bin2bn
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_132

loc_12B:				; CODE XREF: _BN_mpi2bn+7Ej
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_132:				; CODE XREF: _BN_mpi2bn+ADj
		mov	[esi+0Ch], ebx
		test	ebx, ebx
		jz	short loc_14A
		push	esi
		call	_BN_num_bits
		dec	eax
		push	eax
		push	esi
		call	_BN_clear_bit
		add	esp, 0Ch

loc_14A:				; CODE XREF: _BN_mpi2bn+BBj
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		retn
_BN_mpi2bn	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 154h
; COMDAT (pick any)
		public ??_C@_0BF@JHLAIJGB@?4?2crypto?2bn?2bn_mpi?4c?$AA@
; `string'
??_C@_0BF@JHLAIJGB@?4?2crypto?2bn?2bn_mpi?4c?$AA@ db '.\crypto\bn\bn_mpi.c',0
					; DATA XREF: _BN_mpi2bn+Eo
					; _BN_mpi2bn+53o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ERR_put_error:near ; CODE XREF: _BN_mpi2bn+19p
					; _BN_mpi2bn+5Ep
		extrn _BN_num_bits:near	; CODE XREF: _BN_bn2mpi+Ap
					; _BN_mpi2bn+BEp
		extrn _BN_new:near	; CODE XREF: _BN_mpi2bn+75p
		extrn _BN_bin2bn:near	; CODE XREF: _BN_mpi2bn+A3p
		extrn _BN_bn2bin:near	; CODE XREF: _BN_bn2mpi+5Ep
		extrn _BN_clear_bit:near ; CODE	XREF: _BN_mpi2bn+C6p


		end
