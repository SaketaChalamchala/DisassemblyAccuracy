;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	5589C8A77C7E7D0C2E9BDA38272313AE
; Input	CRC32 :	48310F0A

; File Name   :	C:\compspace\Diff\openssl\obj\rsa_saos.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_sign_ASN1_OCTET_STRING
_RSA_sign_ASN1_OCTET_STRING proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 10h
		call	__chkstk
		mov	eax, [esp+10h+arg_8]
		push	ebx
		push	ebp
		mov	[esp+18h+var_10], eax
		mov	eax, [esp+18h+arg_4]
		push	edi
		mov	[esp+1Ch+var_8], eax
		mov	edi, 1
		lea	eax, [esp+1Ch+var_10]
		mov	[esp+1Ch+var_C], 4
		push	0
		push	eax
		call	_i2d_ASN1_OCTET_STRING
		push	[esp+24h+arg_14]
		mov	ebp, eax
		call	_RSA_size
		mov	ebx, eax
		add	esp, 0Ch
		lea	eax, [ebx-0Bh]
		cmp	ebp, eax
		jle	short loc_6B
		push	53h ; 'S'
		push	offset ??_C@_0BI@IKGEHGEF@?4?2crypto?2rsa?2rsa_saos?4c?$AA@ ; ".\\crypto\\rsa\\rsa_saos.c"
		push	70h ; 'p'
		push	76h ; 'v'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_6B:					; CODE XREF: _RSA_sign_ASN1_OCTET_STRING+4Bj
		push	esi
		push	56h ; 'V'
		inc	ebx
		push	offset ??_C@_0BI@IKGEHGEF@?4?2crypto?2rsa?2rsa_saos?4c?$AA@ ; ".\\crypto\\rsa\\rsa_saos.c"
		push	ebx
		call	_CRYPTO_malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_A2
		push	58h ; 'X'
		push	offset ??_C@_0BI@IKGEHGEF@?4?2crypto?2rsa?2rsa_saos?4c?$AA@ ; ".\\crypto\\rsa\\rsa_saos.c"
		push	41h ; 'A'
		push	76h ; 'v'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_A2:					; CODE XREF: _RSA_sign_ASN1_OCTET_STRING+81j
		lea	eax, [esp+20h+arg_8]
		mov	[esp+20h+arg_8], esi
		push	eax
		lea	eax, [esp+24h+var_10]
		push	eax
		call	_i2d_ASN1_OCTET_STRING
		push	1
		push	[esp+2Ch+arg_14]
		push	[esp+30h+arg_C]
		push	esi
		push	ebp
		call	_RSA_private_encrypt
		mov	ecx, eax
		add	esp, 1Ch
		test	ecx, ecx
		jg	short loc_D3
		xor	edi, edi
		jmp	short loc_D9
; ---------------------------------------------------------------------------

loc_D3:					; CODE XREF: _RSA_sign_ASN1_OCTET_STRING+CDj
		mov	eax, [esp+20h+arg_10]
		mov	[eax], ecx

loc_D9:					; CODE XREF: _RSA_sign_ASN1_OCTET_STRING+D1j
		push	ebx
		push	esi
		call	_OPENSSL_cleanse
		push	esi
		call	_CRYPTO_free
		add	esp, 0Ch
		mov	eax, edi
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
_RSA_sign_ASN1_OCTET_STRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F4h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _RSA_verify_ASN1_OCTET_STRING
_RSA_verify_ASN1_OCTET_STRING proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 8
		call	__chkstk
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+14h+arg_14]
		xor	ebp, ebp
		push	esi
		mov	[esp+18h+var_8], ebp
		call	_RSA_size
		mov	ebx, [esp+18h+arg_10]
		add	esp, 4
		cmp	ebx, eax
		jz	short loc_13A
		push	74h ; 't'
		push	offset ??_C@_0BI@IKGEHGEF@?4?2crypto?2rsa?2rsa_saos?4c?$AA@ ; ".\\crypto\\rsa\\rsa_saos.c"
		push	77h ; 'w'
		push	78h ; 'x'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_13A:				; CODE XREF: _RSA_verify_ASN1_OCTET_STRING+26j
		push	edi
		push	78h ; 'x'
		push	offset ??_C@_0BI@IKGEHGEF@?4?2crypto?2rsa?2rsa_saos?4c?$AA@ ; ".\\crypto\\rsa\\rsa_saos.c"
		push	ebx
		call	_CRYPTO_malloc
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_170
		push	7Ah ; 'z'
		push	offset ??_C@_0BI@IKGEHGEF@?4?2crypto?2rsa?2rsa_saos?4c?$AA@ ; ".\\crypto\\rsa\\rsa_saos.c"
		push	41h ; 'A'
		push	78h ; 'x'
		push	4
		call	_ERR_put_error
		add	esp, 14h
		mov	eax, ebp
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_170:				; CODE XREF: _RSA_verify_ASN1_OCTET_STRING+5Bj
		push	1
		push	esi
		push	edi
		push	[esp+24h+arg_C]
		push	ebx
		call	_RSA_public_decrypt
		add	esp, 14h
		test	eax, eax
		jle	loc_23F
		push	eax
		lea	eax, [esp+1Ch+var_4]
		mov	[esp+1Ch+var_4], edi
		push	eax
		push	0
		call	_d2i_ASN1_OCTET_STRING
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jz	loc_23D
		mov	ecx, [esp+18h+arg_8]
		cmp	[ebp+0], ecx
		jnz	short loc_216
		mov	edx, [esp+18h+arg_4]
		mov	esi, [ebp+8]
		sub	ecx, 4
		jb	short loc_1CD

loc_1BC:				; CODE XREF: _RSA_verify_ASN1_OCTET_STRING+D7j
		mov	eax, [edx]
		cmp	eax, [esi]
		jnz	short loc_1D2
		add	edx, 4
		add	esi, 4
		sub	ecx, 4
		jnb	short loc_1BC

loc_1CD:				; CODE XREF: _RSA_verify_ASN1_OCTET_STRING+C6j
		cmp	ecx, 0FFFFFFFCh
		jz	short loc_1FF

loc_1D2:				; CODE XREF: _RSA_verify_ASN1_OCTET_STRING+CCj
		mov	al, [edx]
		cmp	al, [esi]
		jnz	short loc_216
		cmp	ecx, 0FFFFFFFDh
		jz	short loc_1FF
		mov	al, [edx+1]
		cmp	al, [esi+1]
		jnz	short loc_216
		cmp	ecx, 0FFFFFFFEh
		jz	short loc_1FF
		mov	al, [edx+2]
		cmp	al, [esi+2]
		jnz	short loc_216
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_1FF
		mov	al, [edx+3]
		cmp	al, [esi+3]
		jnz	short loc_216

loc_1FF:				; CODE XREF: _RSA_verify_ASN1_OCTET_STRING+DCj
					; _RSA_verify_ASN1_OCTET_STRING+E7j ...
		push	ebp
		mov	[esp+1Ch+var_8], 1
		call	_ASN1_STRING_free
		mov	ebp, [esp+1Ch+var_8]
		add	esp, 4
		jmp	short loc_23F
; ---------------------------------------------------------------------------

loc_216:				; CODE XREF: _RSA_verify_ASN1_OCTET_STRING+BAj
					; _RSA_verify_ASN1_OCTET_STRING+E2j ...
		push	89h ; '‰'
		push	offset ??_C@_0BI@IKGEHGEF@?4?2crypto?2rsa?2rsa_saos?4c?$AA@ ; ".\\crypto\\rsa\\rsa_saos.c"
		push	68h ; 'h'
		push	78h ; 'x'
		push	4
		call	_ERR_put_error
		add	esp, 14h

$err$18:
		push	ebp
		call	_ASN1_STRING_free
		mov	ebp, [esp+1Ch+var_8]
		add	esp, 4
		jmp	short loc_23F
; ---------------------------------------------------------------------------

loc_23D:				; CODE XREF: _RSA_verify_ASN1_OCTET_STRING+ADj
		xor	ebp, ebp

loc_23F:				; CODE XREF: _RSA_verify_ASN1_OCTET_STRING+8Fj
					; _RSA_verify_ASN1_OCTET_STRING+120j ...
		push	ebx
		push	edi
		call	_OPENSSL_cleanse
		push	edi
		call	_CRYPTO_free
		add	esp, 0Ch
		mov	eax, ebp
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
_RSA_verify_ASN1_OCTET_STRING endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 25Ch
; COMDAT (pick any)
		public ??_C@_0BI@IKGEHGEF@?4?2crypto?2rsa?2rsa_saos?4c?$AA@
; `string'
??_C@_0BI@IKGEHGEF@?4?2crypto?2rsa?2rsa_saos?4c?$AA@ db	'.\crypto\rsa\rsa_saos.c',0
					; DATA XREF: _RSA_sign_ASN1_OCTET_STRING+4Fo
					; _RSA_sign_ASN1_OCTET_STRING+6Fo ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _RSA_sign_ASN1_OCTET_STRING+75p
					; _RSA_verify_ASN1_OCTET_STRING+4Fp
		extrn _CRYPTO_free:near	; CODE XREF: _RSA_sign_ASN1_OCTET_STRING+E1p
					; _RSA_verify_ASN1_OCTET_STRING+153p
		extrn _OPENSSL_cleanse:near ; CODE XREF: _RSA_sign_ASN1_OCTET_STRING+DBp
					; _RSA_verify_ASN1_OCTET_STRING+14Dp
		extrn _ERR_put_error:near ; CODE XREF: _RSA_sign_ASN1_OCTET_STRING+5Ap
					; _RSA_sign_ASN1_OCTET_STRING+90p ...
		extrn _ASN1_STRING_free:near ; CODE XREF: _RSA_verify_ASN1_OCTET_STRING+114p
					; _RSA_verify_ASN1_OCTET_STRING+13Bp
		extrn _d2i_ASN1_OCTET_STRING:near
					; CODE XREF: _RSA_verify_ASN1_OCTET_STRING+A1p
		extrn _i2d_ASN1_OCTET_STRING:near
					; CODE XREF: _RSA_sign_ASN1_OCTET_STRING+31p
					; _RSA_sign_ASN1_OCTET_STRING+B0p
		extrn _RSA_size:near	; CODE XREF: _RSA_sign_ASN1_OCTET_STRING+3Cp
					; _RSA_verify_ASN1_OCTET_STRING+18p
		extrn _RSA_private_encrypt:near	; CODE XREF: _RSA_sign_ASN1_OCTET_STRING+C1p
		extrn _RSA_public_decrypt:near
					; CODE XREF: _RSA_verify_ASN1_OCTET_STRING+85p
		extrn __chkstk:near	; CODE XREF: _RSA_sign_ASN1_OCTET_STRING+5p
					; _RSA_verify_ASN1_OCTET_STRING+5p


		end
