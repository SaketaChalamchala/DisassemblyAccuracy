;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	28083C213BD4B00ADED792C9D5C98584
; Input	CRC32 :	69141540

; File Name   :	C:\compspace\Diff\openssl\obj\o_time.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl OPENSSL_gmtime(__time64_t	*Time, int)
		public _OPENSSL_gmtime
_OPENSSL_gmtime	proc near

Time		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+Time]	; Time
		call	dword ptr ds:__imp___gmtime64
		mov	ecx, eax
		add	esp, 4
		test	ecx, ecx
		jnz	short loc_14
		retn
; ---------------------------------------------------------------------------

loc_14:					; CODE XREF: _OPENSSL_gmtime+11j
		movups	xmm0, xmmword ptr [ecx]
		mov	eax, [esp+arg_4]
		movups	xmmword	ptr [eax], xmm0
		movups	xmm0, xmmword ptr [ecx+10h]
		movups	xmmword	ptr [eax+10h], xmm0
		mov	ecx, [ecx+20h]
		mov	[eax+20h], ecx
		retn
_OPENSSL_gmtime	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 30h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OPENSSL_gmtime_adj
_OPENSSL_gmtime_adj proc near

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, 14h
		call	__chkstk
		push	edi
		mov	edi, [esp+18h+arg_0]
		lea	eax, [esp+18h+var_4]
		push	eax
		lea	eax, [esp+1Ch+var_14]
		push	eax
		push	[esp+20h+arg_8]
		push	[esp+24h+arg_4]
		push	edi
		call	_julian_adj
		add	esp, 14h
		test	eax, eax
		jz	loc_FA
		lea	eax, [esp+18h+var_8]
		push	eax
		lea	eax, [esp+1Ch+var_C]
		push	eax
		lea	eax, [esp+20h+var_10]
		push	eax
		push	[esp+24h+var_14]
		call	_julian_to_date
		mov	ecx, [esp+28h+var_10]
		add	esp, 10h
		lea	eax, [ecx-76Ch]
		cmp	eax, 1FA3h
		ja	short loc_FA
		lea	eax, [ecx-76Ch]
		mov	[edi+14h], eax
		mov	eax, [esp+18h+var_C]
		dec	eax
		mov	[edi+10h], eax
		mov	eax, [esp+18h+var_8]
		mov	[edi+0Ch], eax
		mov	eax, 91A2B3C5h
		push	ebx
		push	esi
		mov	esi, [esp+20h+var_4]
		mov	ebx, 3Ch ; '<'
		imul	esi
		add	edx, esi
		sar	edx, 0Bh
		mov	eax, edx
		shr	eax, 1Fh
		add	eax, edx
		mov	[edi+8], eax
		mov	eax, 88888889h
		imul	esi
		add	edx, esi
		sar	edx, 5
		mov	ecx, edx
		shr	ecx, 1Fh
		add	ecx, edx
		mov	eax, ecx
		cdq
		idiv	ebx
		mov	eax, ecx
		shl	eax, 4
		sub	eax, ecx
		mov	[edi+4], edx
		shl	eax, 2
		sub	esi, eax
		lea	eax, [ebx-3Bh]
		mov	[edi], esi
		pop	esi
		pop	ebx
		pop	edi
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_FA:					; CODE XREF: _OPENSSL_gmtime_adj+2Cj
					; _OPENSSL_gmtime_adj+5Cj
		xor	eax, eax
		pop	edi
		add	esp, 14h
		retn
_OPENSSL_gmtime_adj endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 104h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _OPENSSL_gmtime_diff
_OPENSSL_gmtime_diff proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 10h
		call	__chkstk
		lea	eax, [esp+10h+var_4]
		push	eax
		lea	eax, [esp+14h+var_C]
		push	eax
		push	0
		push	0
		push	[esp+20h+arg_8]
		call	_julian_adj
		add	esp, 14h
		test	eax, eax
		jnz	short loc_132

loc_12C:				; CODE XREF: _OPENSSL_gmtime_diff+4Aj
		xor	eax, eax
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_132:				; CODE XREF: _OPENSSL_gmtime_diff+26j
		lea	eax, [esp+10h+var_8]
		push	eax
		lea	eax, [esp+14h+var_10]
		push	eax
		push	0
		push	0
		push	[esp+20h+arg_C]
		call	_julian_adj
		add	esp, 14h
		test	eax, eax
		jz	short loc_12C
		mov	ecx, [esp+10h+var_10]
		mov	eax, [esp+10h+var_8]
		sub	ecx, [esp+10h+var_C]
		sub	eax, [esp+10h+var_4]
		test	ecx, ecx
		jle	short loc_16F
		test	eax, eax
		jns	short loc_16D
		dec	ecx
		add	eax, 15180h

loc_16D:				; CODE XREF: _OPENSSL_gmtime_diff+61j
		test	ecx, ecx

loc_16F:				; CODE XREF: _OPENSSL_gmtime_diff+5Dj
		jns	short loc_17B
		test	eax, eax
		jle	short loc_17B
		inc	ecx
		sub	eax, 15180h

loc_17B:				; CODE XREF: _OPENSSL_gmtime_diff:loc_16Fj
					; _OPENSSL_gmtime_diff+6Fj
		mov	edx, [esp+10h+arg_0]
		test	edx, edx
		jz	short loc_185
		mov	[edx], ecx

loc_185:				; CODE XREF: _OPENSSL_gmtime_diff+7Dj
		mov	ecx, [esp+10h+arg_4]
		test	ecx, ecx
		jz	short loc_18F
		mov	[ecx], eax

loc_18F:				; CODE XREF: _OPENSSL_gmtime_diff+87j
		mov	eax, 1
		add	esp, 10h
		retn
_OPENSSL_gmtime_diff endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 198h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_date_to_julian	proc near		; CODE XREF: _julian_adj+73p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		mov	eax, 2AAAAAABh
		mov	ebx, [esp+0Ch+arg_0]
		lea	ecx, [edi-0Eh]
		imul	ecx
		mov	eax, 2AAAAAABh
		sar	edx, 1
		mov	esi, edx
		shr	esi, 1Fh
		add	esi, edx
		add	ebx, esi
		lea	ecx, [esi+esi*2]
		shl	ecx, 2
		sub	edi, ecx
		sub	edi, 2
		imul	ecx, edi, 16Fh
		pop	edi
		imul	ecx
		lea	ecx, [ebx+1324h]
		mov	eax, 51EB851Fh
		sar	edx, 1
		mov	esi, edx
		shr	esi, 1Fh
		add	esi, edx
		imul	ecx
		sar	edx, 5
		mov	eax, edx
		shr	eax, 1Fh
		add	eax, edx
		lea	eax, [eax+eax*2]
		cdq
		and	edx, 3
		add	eax, edx
		sar	eax, 2
		sub	esi, eax
		lea	eax, [ebx+12C0h]
		imul	eax, 5B5h
		add	esi, 0FFFF82B5h
		add	esi, [esp+8+arg_8]
		cdq
		and	edx, 3
		add	eax, edx
		sar	eax, 2
		add	eax, esi
		pop	esi
		pop	ebx
		retn
_date_to_julian	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 224h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; struct tm *__cdecl static gmtime(const time_t	*Time)
_gmtime		proc near
		jmp	dword ptr ds:__imp___gmtime64
_gmtime		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 22Ch
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_julian_adj	proc near		; CODE XREF: _OPENSSL_gmtime_adj+22p
					; _OPENSSL_gmtime_diff+1Cp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		mov	esi, [esp+4+arg_8]
		mov	eax, 0C22E4507h
		imul	esi
		push	edi
		add	edx, esi
		sar	edx, 10h
		mov	edi, edx
		shr	edi, 1Fh
		add	edi, edx
		mov	edx, [esp+8+arg_0]
		imul	eax, edi, 15180h
		add	edi, [esp+8+arg_4]
		mov	ecx, [edx+8]
		shl	ecx, 4
		sub	ecx, [edx+8]
		sub	esi, eax
		mov	eax, [edx+4]
		lea	eax, [eax+ecx*4]
		mov	ecx, eax
		shl	ecx, 4
		sub	ecx, eax
		mov	eax, [edx]
		lea	eax, [eax+ecx*4]
		add	esi, eax
		cmp	esi, 15180h
		jl	short loc_283
		inc	edi
		sub	esi, 15180h
		jmp	short loc_28E
; ---------------------------------------------------------------------------

loc_283:				; CODE XREF: _julian_adj+4Cj
		test	esi, esi
		jns	short loc_28E
		dec	edi
		add	esi, 15180h

loc_28E:				; CODE XREF: _julian_adj+55j
					; _julian_adj+59j
		push	dword ptr [edx+0Ch]
		mov	eax, [edx+10h]
		inc	eax
		push	eax
		mov	eax, [edx+14h]
		add	eax, 76Ch
		push	eax
		call	_date_to_julian
		mov	ecx, eax
		add	esp, 0Ch
		add	ecx, edi
		jns	short loc_2B2
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2B2:				; CODE XREF: _julian_adj+7Fj
		mov	eax, [esp+8+arg_C]
		pop	edi
		mov	[eax], ecx
		mov	eax, [esp+4+arg_10]
		mov	[eax], esi
		mov	eax, 1
		pop	esi
		retn
_julian_adj	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2C8h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


_julian_to_date	proc near		; CODE XREF: _OPENSSL_gmtime_adj+45p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		mov	eax, 396B06BDh
		add	esi, 10BD9h
		push	edi
		lea	ecx, ds:0[esi*4]
		imul	ecx
		sar	edx, 0Fh
		mov	ebp, edx
		shr	ebp, 1Fh
		add	ebp, edx
		imul	eax, ebp, 23AB1h
		add	eax, 3
		cdq
		and	edx, 3
		add	eax, edx
		sar	eax, 2
		neg	eax
		add	esi, eax
		lea	eax, [esi+1]
		imul	ecx, eax, 0FA0h
		mov	eax, 0B7BBE2DDh
		imul	ecx
		add	edx, ecx
		mov	ecx, 1Fh
		sar	edx, 14h
		mov	ebx, edx
		shr	ebx, 1Fh
		add	ebx, edx
		imul	eax, ebx, 5B5h
		cdq
		and	edx, 3
		add	eax, edx
		sar	eax, 2
		sub	ecx, eax
		mov	eax, 1AC83D19h
		add	esi, ecx
		lea	ecx, [esi+esi*4]
		shl	ecx, 4
		imul	ecx
		mov	eax, 66666667h
		sar	edx, 8
		mov	edi, edx
		shr	edi, 1Fh
		add	edi, edx
		imul	ecx, edi, 98Fh
		imul	ecx
		sar	edx, 5
		mov	eax, edx
		shr	eax, 1Fh
		add	eax, edx
		sub	esi, eax
		mov	eax, [esp+10h+arg_C]
		mov	[eax], esi
		mov	eax, 2E8BA2E9h
		imul	edi
		sar	edx, 1
		mov	esi, edx
		shr	esi, 1Fh
		add	esi, edx
		lea	eax, [esi+esi*2]
		shl	eax, 2
		sub	edi, eax
		mov	eax, [esp+10h+arg_8]
		add	edi, 2
		mov	[eax], edi
		lea	eax, [ebp-31h]
		imul	ecx, eax, 64h
		mov	eax, [esp+10h+arg_4]
		pop	edi
		add	ecx, ebx
		add	ecx, esi
		pop	esi
		pop	ebp
		mov	[eax], ecx
		pop	ebx
		retn
_julian_to_date	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; struct tm *__cdecl __gmtime64(const __time64_t *Time)
		extrn __imp___gmtime64:near ; CODE XREF: _OPENSSL_gmtime+4p
					; DATA XREF: _OPENSSL_gmtime+4r ...
		extrn __chkstk:near	; CODE XREF: _OPENSSL_gmtime_adj+5p
					; _OPENSSL_gmtime_diff+5p


		end
