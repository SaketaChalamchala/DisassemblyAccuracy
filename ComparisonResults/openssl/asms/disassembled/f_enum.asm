;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	FC5DF7F085B349C8BD0D2B30556765A0
; Input	CRC32 :	AD404796

; File Name   :	C:\compspace\Diff\openssl\obj\f_enum.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
; `i2a_ASN1_ENUMERATED'::`2'::h
?h@?1??i2a_ASN1_ENUMERATED@@9@9	dd offset ??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@
					; DATA XREF: _i2a_ASN1_ENUMERATED+82r
_data		ends			; "0123456789ABCDEF"

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4
; COMDAT (pick any)
		public ??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@
; `string'
??_C@_0BB@JGGOGLEG@0123456789ABCDEF?$AA@ db '0123456789ABCDEF',0
					; DATA XREF: .data:`i2a_ASN1_ENUMERATED'::`2'::ho
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 18h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _a2i_ASN1_ENUMERATED
_a2i_ASN1_ENUMERATED proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, 18h
		call	__chkstk
		mov	eax, [esp+18h+arg_4]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+24h+arg_8]
		mov	ebp, 1
		push	edi
		push	[esp+28h+arg_C]
		xor	edi, edi
		mov	[esp+2Ch+var_8], ebp
		push	esi
		push	[esp+30h+arg_0]
		mov	[esp+34h+var_18], edi
		mov	[esp+34h+var_10], edi
		mov	[esp+34h+var_14], edi
		mov	dword ptr [eax+4], 0Ah
		call	_BIO_gets
		mov	ecx, eax
		add	esp, 0Ch
		cmp	ecx, ebp
		jl	$err_sl$72
		nop

loc_68:					; CODE XREF: _a2i_ASN1_ENUMERATED+1E6j
		cmp	byte ptr [esi+ecx-1], 0Ah
		jnz	short loc_74
		dec	ecx
		mov	byte ptr [ecx+esi], 0

loc_74:					; CODE XREF: _a2i_ASN1_ENUMERATED+55j
		test	ecx, ecx
		jz	$err_sl$72
		cmp	byte ptr [esi+ecx-1], 0Dh
		jnz	short loc_88
		dec	ecx
		mov	byte ptr [ecx+esi], 0

loc_88:					; CODE XREF: _a2i_ASN1_ENUMERATED+69j
		test	ecx, ecx
		jz	$err_sl$72
		xor	eax, eax
		cmp	byte ptr [esi+ecx-1], 5Ch ; '\'
		setz	al
		xor	edx, edx
		mov	[esp+28h+var_C], eax
		test	ecx, ecx
		jle	short loc_D0
		nop	dword ptr [eax+00h]

loc_A8:					; CODE XREF: _a2i_ASN1_ENUMERATED+AEj
		mov	al, [edx+esi]
		cmp	al, 30h	; '0'
		jl	short loc_B3
		cmp	al, 39h	; '9'
		jle	short loc_C3

loc_B3:					; CODE XREF: _a2i_ASN1_ENUMERATED+95j
		cmp	al, 61h	; 'a'
		jl	short loc_BB
		cmp	al, 66h	; 'f'
		jle	short loc_C3

loc_BB:					; CODE XREF: _a2i_ASN1_ENUMERATED+9Dj
		cmp	al, 41h	; 'A'
		jl	short loc_CA
		cmp	al, 46h	; 'F'
		jg	short loc_CA

loc_C3:					; CODE XREF: _a2i_ASN1_ENUMERATED+99j
					; _a2i_ASN1_ENUMERATED+A1j
		inc	edx
		cmp	edx, ecx
		jl	short loc_A8
		jmp	short loc_CC
; ---------------------------------------------------------------------------

loc_CA:					; CODE XREF: _a2i_ASN1_ENUMERATED+A5j
					; _a2i_ASN1_ENUMERATED+A9j
		mov	ecx, edx

loc_CC:					; CODE XREF: _a2i_ASN1_ENUMERATED+B0j
		mov	eax, [esp+28h+var_C]

loc_D0:					; CODE XREF: _a2i_ASN1_ENUMERATED+8Aj
		mov	byte ptr [ecx+esi], 0
		cmp	ecx, 2
		jl	$err_sl$72
		mov	ebx, esi
		test	ebp, ebp
		jz	short loc_FC
		cmp	byte ptr [esi],	30h ; '0'
		mov	[esp+28h+var_8], 0
		jnz	short loc_FC
		cmp	byte ptr [esi+1], 30h ;	'0'
		jnz	short loc_FC
		lea	ebx, [esi+2]
		sub	ecx, 2

loc_FC:					; CODE XREF: _a2i_ASN1_ENUMERATED+C9j
					; _a2i_ASN1_ENUMERATED+D6j ...
		sub	ecx, eax
		mov	eax, ecx
		and	eax, 80000001h
		jns	short loc_10C
		dec	eax
		or	eax, 0FFFFFFFEh
		inc	eax

loc_10C:				; CODE XREF: _a2i_ASN1_ENUMERATED+EDj
		jnz	loc_25D
		mov	eax, ecx
		cdq
		sub	eax, edx
		mov	ebp, eax
		mov	eax, [esp+28h+var_10]
		sar	ebp, 1
		lea	ecx, [eax+ebp]
		mov	[esp+28h+var_4], ecx
		cmp	ecx, [esp+28h+var_14]
		jle	short loc_170
		lea	eax, [eax+ebp*2]
		mov	[esp+28h+var_14], eax
		test	edi, edi
		jnz	short loc_14C
		push	9Ch ; 'ú'
		push	offset ??_C@_0BH@KMAGCPCJ@?4?2crypto?2asn1?2f_enum?4c?$AA@ ; ".\\crypto\\asn1\\f_enum.c"
		push	eax
		call	_CRYPTO_malloc
		add	esp, 0Ch
		jmp	short loc_160
; ---------------------------------------------------------------------------

loc_14C:				; CODE XREF: _a2i_ASN1_ENUMERATED+11Dj
		push	0A0h ; '†'
		push	offset ??_C@_0BH@KMAGCPCJ@?4?2crypto?2asn1?2f_enum?4c?$AA@ ; ".\\crypto\\asn1\\f_enum.c"
		push	eax
		push	edi
		call	_CRYPTO_realloc
		add	esp, 10h

loc_160:				; CODE XREF: _a2i_ASN1_ENUMERATED+132j
		test	eax, eax
		jz	loc_203
		mov	edx, eax
		mov	[esp+28h+var_18], edx
		jmp	short loc_174
; ---------------------------------------------------------------------------

loc_170:				; CODE XREF: _a2i_ASN1_ENUMERATED+112j
		mov	edx, [esp+28h+var_18]

loc_174:				; CODE XREF: _a2i_ASN1_ENUMERATED+156j
		xor	edi, edi
		test	ebp, ebp
		jle	short loc_1CF

loc_17A:				; CODE XREF: _a2i_ASN1_ENUMERATED+1B1j
		xor	esi, esi

loc_17C:				; CODE XREF: _a2i_ASN1_ENUMERATED+1A9j
		movzx	eax, byte ptr [ebx+esi]
		lea	ecx, [eax-30h]
		cmp	ecx, 9
		ja	short loc_18C
		mov	eax, ecx
		jmp	short loc_1A8
; ---------------------------------------------------------------------------

loc_18C:				; CODE XREF: _a2i_ASN1_ENUMERATED+16Ej
		lea	ecx, [eax-61h]
		cmp	ecx, 5
		ja	short loc_199
		sub	eax, 57h ; 'W'
		jmp	short loc_1A8
; ---------------------------------------------------------------------------

loc_199:				; CODE XREF: _a2i_ASN1_ENUMERATED+17Aj
		lea	ecx, [eax-41h]
		cmp	ecx, 5
		ja	loc_232
		sub	eax, 37h ; '7'

loc_1A8:				; CODE XREF: _a2i_ASN1_ENUMERATED+172j
					; _a2i_ASN1_ENUMERATED+17Fj
		mov	ecx, [esp+28h+var_10]
		inc	esi
		add	ecx, edi
		add	edx, ecx
		mov	cl, [edx]
		shl	cl, 4
		or	cl, al
		mov	[edx], cl
		mov	edx, [esp+28h+var_18]
		cmp	esi, 2
		jl	short loc_17C
		inc	edi
		add	ebx, 2
		cmp	edi, ebp
		jl	short loc_17A
		mov	esi, [esp+28h+arg_8]

loc_1CF:				; CODE XREF: _a2i_ASN1_ENUMERATED+160j
		cmp	[esp+28h+var_C], 0
		mov	eax, [esp+28h+var_4]
		mov	[esp+28h+var_10], eax
		jz	short loc_243
		push	[esp+28h+arg_C]
		push	esi
		push	[esp+30h+arg_0]
		call	_BIO_gets
		mov	ecx, eax
		add	esp, 0Ch
		cmp	ecx, 1
		jl	short $err_sl$72
		mov	edi, [esp+28h+var_18]
		mov	ebp, [esp+28h+var_8]
		jmp	loc_68
; ---------------------------------------------------------------------------

loc_203:				; CODE XREF: _a2i_ASN1_ENUMERATED+14Aj
		push	0A2h ; '¢'
		push	offset ??_C@_0BH@KMAGCPCJ@?4?2crypto?2asn1?2f_enum?4c?$AA@ ; ".\\crypto\\asn1\\f_enum.c"
		push	41h ; 'A'
		push	65h ; 'e'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h
		test	edi, edi
		jz	short loc_289
		push	edi
		call	_CRYPTO_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_232:				; CODE XREF: _a2i_ASN1_ENUMERATED+187j
		push	0B5h ; 'µ'
		push	offset ??_C@_0BH@KMAGCPCJ@?4?2crypto?2asn1?2f_enum?4c?$AA@ ; ".\\crypto\\asn1\\f_enum.c"
		push	8Dh ; 'ç'
		jmp	short loc_27D
; ---------------------------------------------------------------------------

loc_243:				; CODE XREF: _a2i_ASN1_ENUMERATED+1C4j
		mov	ecx, [esp+28h+arg_4]
		mov	edi, [esp+28h+var_18]
		mov	[ecx+8], edi
		pop	edi
		pop	esi
		pop	ebp
		mov	[ecx], eax
		mov	eax, 1
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_25D:				; CODE XREF: _a2i_ASN1_ENUMERATED:loc_10Cj
		push	95h ; 'ï'
		push	offset ??_C@_0BH@KMAGCPCJ@?4?2crypto?2asn1?2f_enum?4c?$AA@ ; ".\\crypto\\asn1\\f_enum.c"
		push	91h ; 'ë'
		jmp	short loc_27D
; ---------------------------------------------------------------------------

$err_sl$72:				; CODE XREF: _a2i_ASN1_ENUMERATED+49j
					; _a2i_ASN1_ENUMERATED+5Ej ...
		push	0C8h ; '»'
		push	offset ??_C@_0BH@KMAGCPCJ@?4?2crypto?2asn1?2f_enum?4c?$AA@ ; ".\\crypto\\asn1\\f_enum.c"
		push	96h ; 'ñ'

loc_27D:				; CODE XREF: _a2i_ASN1_ENUMERATED+229j
					; _a2i_ASN1_ENUMERATED+254j
		push	65h ; 'e'
		push	0Dh
		call	_ERR_put_error
		add	esp, 14h

loc_289:				; CODE XREF: _a2i_ASN1_ENUMERATED+205j
		xor	eax, eax

$err$73:
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 18h
		retn
_a2i_ASN1_ENUMERATED endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 294h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _i2a_ASN1_ENUMERATED
_i2a_ASN1_ENUMERATED proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	edi
		xor	edi, edi
		test	ebx, ebx
		jnz	short loc_2A5
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2A5:				; CODE XREF: _i2a_ASN1_ENUMERATED+Aj
		mov	eax, [ebx]
		push	ebp
		push	esi
		test	eax, eax
		jnz	short loc_2D2
		push	2
		push	offset ??_C@_02PLJDPFIO@00?$AA@	; `string'
		push	[esp+18h+arg_0]
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, 2
		jnz	$err$22
		mov	edi, eax

loc_2CB:				; CODE XREF: _i2a_ASN1_ENUMERATED+42j
		pop	esi
		pop	ebp
		mov	eax, edi
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_2D2:				; CODE XREF: _i2a_ASN1_ENUMERATED+17j
		xor	esi, esi
		test	eax, eax
		jle	short loc_2CB
		mov	ebp, [esp+10h+arg_0]

loc_2DC:				; CODE XREF: _i2a_ASN1_ENUMERATED+C0j
		test	esi, esi
		jz	short loc_313
		mov	eax, 0EA0EA0EBh
		mov	ecx, esi
		imul	esi
		add	edx, esi
		sar	edx, 5
		mov	eax, edx
		shr	eax, 1Fh
		add	eax, edx
		imul	eax, 23h
		sub	ecx, eax
		jnz	short loc_313
		push	2
		push	offset ??_C@_02JPPHBJLD@?2?6?$AA@ ; `string'
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, 2
		jnz	short $err$22
		add	edi, eax

loc_313:				; CODE XREF: _i2a_ASN1_ENUMERATED+4Aj
					; _i2a_ASN1_ENUMERATED+66j
		mov	edx, [ebx+8]
		mov	ecx, ?h@?1??i2a_ASN1_ENUMERATED@@9@9 ; `i2a_ASN1_ENUMERATED'::`2'::h
		push	2
		movzx	eax, byte ptr [edx+esi]
		shr	eax, 4
		movzx	eax, byte ptr [eax+ecx]
		mov	byte ptr [esp+14h+arg_4], al
		movzx	eax, byte ptr [edx+esi]
		and	eax, 0Fh
		movzx	eax, byte ptr [eax+ecx]
		mov	byte ptr [esp+14h+arg_4+1], al
		lea	eax, [esp+14h+arg_4]
		push	eax
		push	ebp
		call	_BIO_write
		add	esp, 0Ch
		cmp	eax, 2
		jnz	short $err$22
		inc	esi
		add	edi, eax
		cmp	esi, [ebx]
		jl	short loc_2DC
		pop	esi
		pop	ebp
		mov	eax, edi
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

$err$22:				; CODE XREF: _i2a_ASN1_ENUMERATED+2Fj
					; _i2a_ASN1_ENUMERATED+7Bj ...
		pop	esi
		pop	ebp
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
_i2a_ASN1_ENUMERATED endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 368h
; COMDAT (pick any)
		public ??_C@_02PLJDPFIO@00?$AA@
; `string'
??_C@_02PLJDPFIO@00?$AA@ db 2 dup(30h),	0 ; DATA XREF: _i2a_ASN1_ENUMERATED+1Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 36Ch
; COMDAT (pick any)
		public ??_C@_02JPPHBJLD@?2?6?$AA@
; `string'
??_C@_02JPPHBJLD@?2?6?$AA@ db 5Ch, 0Ah,	0 ; DATA XREF: _i2a_ASN1_ENUMERATED+6Ao
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 370h
; COMDAT (pick any)
		public ??_C@_0BH@KMAGCPCJ@?4?2crypto?2asn1?2f_enum?4c?$AA@
; `string'
??_C@_0BH@KMAGCPCJ@?4?2crypto?2asn1?2f_enum?4c?$AA@ db '.\crypto\asn1\f_enum.c',0
					; DATA XREF: _a2i_ASN1_ENUMERATED+124o
					; _a2i_ASN1_ENUMERATED+139o ...
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _CRYPTO_malloc:near ; CODE XREF: _a2i_ASN1_ENUMERATED+12Ap
		extrn _CRYPTO_free:near	; CODE XREF: _a2i_ASN1_ENUMERATED+208p
		extrn _CRYPTO_realloc:near ; CODE XREF:	_a2i_ASN1_ENUMERATED+140p
		extrn _BIO_gets:near	; CODE XREF: _a2i_ASN1_ENUMERATED+3Dp
					; _a2i_ASN1_ENUMERATED+1CFp
		extrn _BIO_write:near	; CODE XREF: _i2a_ASN1_ENUMERATED+24p
					; _i2a_ASN1_ENUMERATED+70p ...
		extrn _ERR_put_error:near ; CODE XREF: _a2i_ASN1_ENUMERATED+1FBp
					; _a2i_ASN1_ENUMERATED+269p
		extrn __chkstk:near	; CODE XREF: _a2i_ASN1_ENUMERATED+5p


		end
