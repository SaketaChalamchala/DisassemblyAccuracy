;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	5A2D7EE014761B4FC0E30BBA75149B61
; Input	CRC32 :	2F0195DE

; File Name   :	C:\compspace\Diff\openssl\obj\crl.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
_crl_usage	dd offset ??_C@_0BB@MPEAOOGK@usage?3?5crl?5args?6?$AA@
					; DATA XREF: _crl_main:$bad$251r
					; _crl_main+8DBo
					; "usage: crl args\n"
		dd offset ??_C@_01EEMJAFIK@?6?$AA@ ; `string'
		dd offset ??_C@_0DM@PHNHJNIF@?5?9inform?5arg?5?5?5?5?5?9?5input?5format?5@ ; " -inform arg     - input format -	defau"...
		dd offset ??_C@_0DA@KKNGHCLN@?5?9outform?5arg?5?5?5?5?9?5output?5format@ ; " -outform arg    - output format - defa"...
		dd offset ??_C@_0DE@CMCDPINC@?5?9text?5?5?5?5?5?5?5?5?5?5?5?9?5print?5out?5a?5t@ ; " -text	     - print out a text	for"...
		dd offset ??_C@_0CP@OHCNNAMM@?5?9in?5arg?5?5?5?5?5?5?5?5?5?9?5input?5file?5?9?5@ ; " -in arg	     - input file - default"...
		dd offset ??_C@_0DB@EFLGJJDD@?5?9out?5arg?5?5?5?5?5?5?5?5?9?5output?5file?5?9@ ; " -out	arg	   - output file - defaul"...
		dd offset ??_C@_0CF@NOAFFEHE@?5?9hash?5?5?5?5?5?5?5?5?5?5?5?9?5print?5hash?5va@	; " -hash	    - print hash value\n"
		dd offset ??_C@_0DF@EOLPCIIJ@?5?9hash_old?5?5?5?5?5?5?5?9?5print?5old?9sty@ ; "	-hash_old	- print	old-style (MD5"...
		dd offset ??_C@_0CO@KEFHBAIF@?5?9fingerprint?5?5?5?5?9?5print?5the?5crl@ ; " -fingerprint    - print the crl finger"...
		dd offset ??_C@_0CE@MDFJAKHB@?5?9issuer?5?5?5?5?5?5?5?5?5?9?5print?5issuer?5@ ;	" -issuer	  - print issuer DN\n"
		dd offset ??_C@_0CF@BOOFDJPJ@?5?9lastupdate?5?5?5?5?5?9?5lastUpdate?5fi@ ; " -lastupdate     - lastUpdate field\n"
		dd offset ??_C@_0CF@NDFEADMN@?5?9nextupdate?5?5?5?5?5?9?5nextUpdate?5fi@ ; " -nextupdate     - nextUpdate field\n"
		dd offset ??_C@_0CF@MBNNLHDM@?5?9crlnumber?5?5?5?5?5?5?9?5print?5CRL?5num@ ; " -crlnumber      - print CRL number\n"
		dd offset ??_C@_0CC@CIPJOIHG@?5?9noout?5?5?5?5?5?5?5?5?5?5?9?5no?5CRL?5output@ ; " -noout	   - no	CRL output\n"
		dd offset ??_C@_0EB@GJOKHONG@?5?9CAfile?5?5name?5?5?5?9?5verify?5CRL?5us@ ; " -CAfile  name   -	verify CRL using cer"...
		dd offset ??_C@_0DL@PIKJLCCI@?5?9CApath?5?5dir?5?5?5?5?9?5verify?5CRL?5us@ ; " -CApath	dir    - verify	CRL using cer"...
		dd offset ??_C@_0DF@KKFNFDFD@?5?9nameopt?5arg?5?5?5?5?9?5various?5certi@ ; " -nameopt arg    - various certificate "...
		dd 0
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4Ch
; COMDAT (pick any)
		public ??_C@_0BB@MPEAOOGK@usage?3?5crl?5args?6?$AA@
; `string'
??_C@_0BB@MPEAOOGK@usage?3?5crl?5args?6?$AA@ db	'usage: crl args',0Ah,0
					; DATA XREF: .data:_crl_usageo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 60h
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; `string'
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah, 0	; DATA XREF: .data:00000004o
					; _crl_main:loc_E5Bo ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 64h
; COMDAT (pick any)
		public ??_C@_0DM@PHNHJNIF@?5?9inform?5arg?5?5?5?5?5?9?5input?5format?5@
; `string'
??_C@_0DM@PHNHJNIF@?5?9inform?5arg?5?5?5?5?5?9?5input?5format?5@ db ' -inform arg     - input format - default PEM (DER or PEM)',0Ah,0
					; DATA XREF: .data:00000008o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A0h
; COMDAT (pick any)
		public ??_C@_0DA@KKNGHCLN@?5?9outform?5arg?5?5?5?5?9?5output?5format@
; `string'
??_C@_0DA@KKNGHCLN@?5?9outform?5arg?5?5?5?5?9?5output?5format@ db ' -outform arg    - output format - default PEM',0Ah,0
					; DATA XREF: .data:0000000Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D0h
; COMDAT (pick any)
		public ??_C@_0DE@CMCDPINC@?5?9text?5?5?5?5?5?5?5?5?5?5?5?9?5print?5out?5a?5t@
; `string'
??_C@_0DE@CMCDPINC@?5?9text?5?5?5?5?5?5?5?5?5?5?5?9?5print?5out?5a?5t@ db ' -text           - print out a text format version',0Ah,0
					; DATA XREF: .data:00000010o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 104h
; COMDAT (pick any)
		public ??_C@_0CP@OHCNNAMM@?5?9in?5arg?5?5?5?5?5?5?5?5?5?9?5input?5file?5?9?5@
; `string'
??_C@_0CP@OHCNNAMM@?5?9in?5arg?5?5?5?5?5?5?5?5?5?9?5input?5file?5?9?5@ db ' -in arg         - input file - default stdin',0Ah,0
					; DATA XREF: .data:00000014o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 134h
; COMDAT (pick any)
		public ??_C@_0DB@EFLGJJDD@?5?9out?5arg?5?5?5?5?5?5?5?5?9?5output?5file?5?9@
; `string'
??_C@_0DB@EFLGJJDD@?5?9out?5arg?5?5?5?5?5?5?5?5?9?5output?5file?5?9@ db	' -out arg        - output file - default stdout',0Ah,0
					; DATA XREF: .data:00000018o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 168h
; COMDAT (pick any)
		public ??_C@_0CF@NOAFFEHE@?5?9hash?5?5?5?5?5?5?5?5?5?5?5?9?5print?5hash?5va@
; `string'
??_C@_0CF@NOAFFEHE@?5?9hash?5?5?5?5?5?5?5?5?5?5?5?9?5print?5hash?5va@ db ' -hash           - print hash value',0Ah,0
					; DATA XREF: .data:0000001Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 190h
; COMDAT (pick any)
		public ??_C@_0DF@EOLPCIIJ@?5?9hash_old?5?5?5?5?5?5?5?9?5print?5old?9sty@
; `string'
??_C@_0DF@EOLPCIIJ@?5?9hash_old?5?5?5?5?5?5?5?9?5print?5old?9sty@ db ' -hash_old       - print old-style (MD5) hash value',0Ah,0
					; DATA XREF: .data:00000020o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1C8h
; COMDAT (pick any)
		public ??_C@_0CO@KEFHBAIF@?5?9fingerprint?5?5?5?5?9?5print?5the?5crl@
; `string'
??_C@_0CO@KEFHBAIF@?5?9fingerprint?5?5?5?5?9?5print?5the?5crl@ db ' -fingerprint    - print the crl fingerprint',0Ah,0
					; DATA XREF: .data:00000024o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1F8h
; COMDAT (pick any)
		public ??_C@_0CE@MDFJAKHB@?5?9issuer?5?5?5?5?5?5?5?5?5?9?5print?5issuer?5@
; `string'
??_C@_0CE@MDFJAKHB@?5?9issuer?5?5?5?5?5?5?5?5?5?9?5print?5issuer?5@ db ' -issuer         - print issuer DN',0Ah,0
					; DATA XREF: .data:00000028o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 21Ch
; COMDAT (pick any)
		public ??_C@_0CF@BOOFDJPJ@?5?9lastupdate?5?5?5?5?5?9?5lastUpdate?5fi@
; `string'
??_C@_0CF@BOOFDJPJ@?5?9lastupdate?5?5?5?5?5?9?5lastUpdate?5fi@ db ' -lastupdate     - lastUpdate field',0Ah,0
					; DATA XREF: .data:0000002Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 244h
; COMDAT (pick any)
		public ??_C@_0CF@NDFEADMN@?5?9nextupdate?5?5?5?5?5?9?5nextUpdate?5fi@
; `string'
??_C@_0CF@NDFEADMN@?5?9nextupdate?5?5?5?5?5?9?5nextUpdate?5fi@ db ' -nextupdate     - nextUpdate field',0Ah,0
					; DATA XREF: .data:00000030o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 26Ch
; COMDAT (pick any)
		public ??_C@_0CF@MBNNLHDM@?5?9crlnumber?5?5?5?5?5?5?9?5print?5CRL?5num@
; `string'
??_C@_0CF@MBNNLHDM@?5?9crlnumber?5?5?5?5?5?5?9?5print?5CRL?5num@ db ' -crlnumber      - print CRL number',0Ah,0
					; DATA XREF: .data:00000034o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 294h
; COMDAT (pick any)
		public ??_C@_0CC@CIPJOIHG@?5?9noout?5?5?5?5?5?5?5?5?5?5?9?5no?5CRL?5output@
; `string'
??_C@_0CC@CIPJOIHG@?5?9noout?5?5?5?5?5?5?5?5?5?5?9?5no?5CRL?5output@ db	' -noout          - no CRL output',0Ah,0
					; DATA XREF: .data:00000038o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 2B8h
; COMDAT (pick any)
		public ??_C@_0EB@GJOKHONG@?5?9CAfile?5?5name?5?5?5?9?5verify?5CRL?5us@
; `string'
??_C@_0EB@GJOKHONG@?5?9CAfile?5?5name?5?5?5?9?5verify?5CRL?5us@	db ' -CAfile  name   - verify CRL using certificates in file "name"',0Ah
					; DATA XREF: .data:0000003Co
		db 0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2FCh
; COMDAT (pick any)
		public ??_C@_0DL@PIKJLCCI@?5?9CApath?5?5dir?5?5?5?5?9?5verify?5CRL?5us@
; `string'
??_C@_0DL@PIKJLCCI@?5?9CApath?5?5dir?5?5?5?5?9?5verify?5CRL?5us@ db ' -CApath  dir    - verify CRL using certificates in "dir"',0Ah,0
					; DATA XREF: .data:00000040o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 338h
; COMDAT (pick any)
		public ??_C@_0DF@KKFNFDFD@?5?9nameopt?5arg?5?5?5?5?9?5various?5certi@
; `string'
??_C@_0DF@KKFNFDFD@?5?9nameopt?5arg?5?5?5?5?9?5various?5certi@ db ' -nameopt arg    - various certificate name options',0Ah,0
					; DATA XREF: .data:00000044o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 370h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
_bio_out	dd ?			; DATA XREF: _crl_main+E1r
					; _crl_main+F7w ...
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 374h
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _crl_main
_crl_main	proc near

var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
ErrMsg		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= byte ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= byte ptr -0CCh
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, 134h
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+134h+var_4], eax
		push	ebx
		mov	ebx, [esp+138h+arg_4]
		push	ebp
		xor	ebp, ebp
		mov	[esp+13Ch+var_108], 0
		push	esi
		push	edi
		xor	edi, edi
		mov	[esp+144h+var_118], 0
		mov	[esp+144h+var_114], 0
		mov	[esp+144h+var_E0], 0
		mov	[esp+144h+var_11C], ebp
		mov	[esp+144h+ErrMsg], ebp
		mov	[esp+144h+var_110], ebp
		mov	[esp+144h+var_12C], ebp
		mov	[esp+144h+var_100], ebp
		mov	[esp+144h+var_10C], ebp
		mov	[esp+144h+var_F8], ebp
		mov	[esp+144h+var_F4], ebp
		mov	[esp+144h+var_E4], ebp
		mov	[esp+144h+var_E8], ebp
		mov	[esp+144h+var_FC], ebp
		mov	[esp+144h+var_F0], ebp
		mov	[esp+144h+var_104], ebp
		mov	[esp+144h+var_D8], ebp
		mov	[esp+144h+var_134], edi
		call	_EVP_sha1
		mov	esi, dword ptr ds:__imp____acrt_iob_func
		mov	[esp+144h+var_120], eax
		mov	eax, dword ptr ds:_bio_err
		test	eax, eax
		jnz	short loc_442
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		add	esp, 4
		mov	dword ptr ds:_bio_err, eax
		test	eax, eax
		jz	short loc_442
		push	2
		call	esi ; __imp____acrt_iob_func
		push	eax
		push	10h
		push	6Ah ; 'j'
		push	dword ptr ds:_bio_err
		call	_BIO_ctrl
		mov	eax, dword ptr ds:_bio_err
		add	esp, 14h

loc_442:				; CODE XREF: _crl_main+99j
					; _crl_main+B0j
		push	0
		push	eax
		call	_load_config
		add	esp, 8
		test	eax, eax
		jz	loc_1108
		cmp	ds:_bio_out, edi
		jnz	short loc_48B
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		add	esp, 4
		mov	ds:_bio_out, eax
		test	eax, eax
		jz	short loc_48B
		push	1
		call	esi ; __imp____acrt_iob_func
		push	eax
		push	0
		push	6Ah ; 'j'
		push	ds:_bio_out
		call	_BIO_ctrl
		add	esp, 14h

loc_48B:				; CODE XREF: _crl_main+E7j
					; _crl_main+FEj
		mov	esi, [esp+144h+arg_0]
		xor	ebp, ebp
		dec	esi
		mov	[esp+144h+var_124], 3
		add	ebx, 4
		mov	[esp+144h+var_DC], 3
		mov	[esp+144h+var_128], 3
		mov	[esp+144h+var_130], ebp
		cmp	esi, 1
		jl	loc_AE0
		nop	dword ptr [eax+00000000h]

loc_4C4:				; CODE XREF: _crl_main+766j
		mov	edi, [ebx]
		mov	ecx, offset ??_C@_07CGGPPMGB@?9inform?$AA@ ; "-inform"
		mov	eax, edi
		nop	dword ptr [eax+00000000h]

loc_4D4:				; CODE XREF: _crl_main+17Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_4F4
		test	dl, dl
		jz	short loc_4F0
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_4F4
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_4D4

loc_4F0:				; CODE XREF: _crl_main+168j
		xor	eax, eax
		jmp	short loc_4F9
; ---------------------------------------------------------------------------

loc_4F4:				; CODE XREF: _crl_main+164j
					; _crl_main+170j
		sbb	eax, eax
		or	eax, 1

loc_4F9:				; CODE XREF: _crl_main+17Ej
		test	eax, eax
		jnz	short loc_51E
		dec	esi
		cmp	esi, 1
		jl	$bad$251
		push	dword ptr [ebx+4]
		add	ebx, 4
		call	_str2fmt
		add	esp, 4
		mov	[esp+144h+var_124], eax
		jmp	loc_ACF
; ---------------------------------------------------------------------------

loc_51E:				; CODE XREF: _crl_main+187j
		mov	ecx, offset ??_C@_08LPHBEAIF@?9outform?$AA@ ; "-outform"
		mov	eax, edi

loc_525:				; CODE XREF: _crl_main+1CBj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_545
		test	dl, dl
		jz	short loc_541
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_545
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_525

loc_541:				; CODE XREF: _crl_main+1B9j
		xor	eax, eax
		jmp	short loc_54A
; ---------------------------------------------------------------------------

loc_545:				; CODE XREF: _crl_main+1B5j
					; _crl_main+1C1j
		sbb	eax, eax
		or	eax, 1

loc_54A:				; CODE XREF: _crl_main+1CFj
		test	eax, eax
		jnz	short loc_56F
		dec	esi
		cmp	esi, 1
		jl	$bad$251
		push	dword ptr [ebx+4]
		add	ebx, 4
		call	_str2fmt
		add	esp, 4
		mov	[esp+144h+var_DC], eax
		jmp	loc_ACF
; ---------------------------------------------------------------------------

loc_56F:				; CODE XREF: _crl_main+1D8j
		mov	ecx, offset ??_C@_03DAJLOBIG@?9in?$AA@ ; `string'
		mov	eax, edi

loc_576:				; CODE XREF: _crl_main+21Cj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_596
		test	dl, dl
		jz	short loc_592
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_596
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_576

loc_592:				; CODE XREF: _crl_main+20Aj
		xor	eax, eax
		jmp	short loc_59B
; ---------------------------------------------------------------------------

loc_596:				; CODE XREF: _crl_main+206j
					; _crl_main+212j
		sbb	eax, eax
		or	eax, 1

loc_59B:				; CODE XREF: _crl_main+220j
		test	eax, eax
		jnz	short loc_5B8
		dec	esi
		cmp	esi, 1
		jl	$bad$251
		mov	eax, [ebx+4]
		add	ebx, 4
		mov	[esp+144h+var_11C], eax
		jmp	loc_ACF
; ---------------------------------------------------------------------------

loc_5B8:				; CODE XREF: _crl_main+229j
		mov	ecx, offset ??_C@_09EBAPANED@?9gendelta?$AA@ ; "-gendelta"
		mov	eax, edi
		nop	dword ptr [eax+eax+00h]

loc_5C4:				; CODE XREF: _crl_main+26Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_5E4
		test	dl, dl
		jz	short loc_5E0
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_5E4
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_5C4

loc_5E0:				; CODE XREF: _crl_main+258j
		xor	eax, eax
		jmp	short loc_5E9
; ---------------------------------------------------------------------------

loc_5E4:				; CODE XREF: _crl_main+254j
					; _crl_main+260j
		sbb	eax, eax
		or	eax, 1

loc_5E9:				; CODE XREF: _crl_main+26Ej
		test	eax, eax
		jnz	short loc_606
		dec	esi
		cmp	esi, 1
		jl	$bad$251
		mov	eax, [ebx+4]
		add	ebx, 4
		mov	[esp+144h+var_110], eax
		jmp	loc_ACF
; ---------------------------------------------------------------------------

loc_606:				; CODE XREF: _crl_main+277j
		mov	ecx, offset ??_C@_04FMEKFICB@?9key?$AA@	; "-key"
		mov	eax, edi
		nop	dword ptr [eax+00000000h]

loc_614:				; CODE XREF: _crl_main+2BAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_634
		test	dl, dl
		jz	short loc_630
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_634
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_614

loc_630:				; CODE XREF: _crl_main+2A8j
		xor	eax, eax
		jmp	short loc_639
; ---------------------------------------------------------------------------

loc_634:				; CODE XREF: _crl_main+2A4j
					; _crl_main+2B0j
		sbb	eax, eax
		or	eax, 1

loc_639:				; CODE XREF: _crl_main+2BEj
		test	eax, eax
		jnz	short loc_656
		dec	esi
		cmp	esi, 1
		jl	$bad$251
		mov	eax, [ebx+4]
		add	ebx, 4
		mov	[esp+144h+var_12C], eax
		jmp	loc_ACF
; ---------------------------------------------------------------------------

loc_656:				; CODE XREF: _crl_main+2C7j
		mov	ecx, offset ??_C@_08OAHLMBGP@?9keyform?$AA@ ; "-keyform"
		mov	eax, edi
		nop	dword ptr [eax+00000000h]

loc_664:				; CODE XREF: _crl_main+30Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_684
		test	dl, dl
		jz	short loc_680
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_684
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_664

loc_680:				; CODE XREF: _crl_main+2F8j
		xor	eax, eax
		jmp	short loc_689
; ---------------------------------------------------------------------------

loc_684:				; CODE XREF: _crl_main+2F4j
					; _crl_main+300j
		sbb	eax, eax
		or	eax, 1

loc_689:				; CODE XREF: _crl_main+30Ej
		test	eax, eax
		jnz	short loc_6AE
		dec	esi
		cmp	esi, 1
		jl	$bad$251
		push	dword ptr [ebx+4]
		add	ebx, 4
		call	_str2fmt
		add	esp, 4
		mov	[esp+144h+var_128], eax
		jmp	loc_ACF
; ---------------------------------------------------------------------------

loc_6AE:				; CODE XREF: _crl_main+317j
		mov	ecx, offset ??_C@_04HKKABCEL@?9out?$AA@	; "-out"
		mov	eax, edi

loc_6B5:				; CODE XREF: _crl_main+35Bj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_6D5
		test	dl, dl
		jz	short loc_6D1
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_6D5
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_6B5

loc_6D1:				; CODE XREF: _crl_main+349j
		xor	eax, eax
		jmp	short loc_6DA
; ---------------------------------------------------------------------------

loc_6D5:				; CODE XREF: _crl_main+345j
					; _crl_main+351j
		sbb	eax, eax
		or	eax, 1

loc_6DA:				; CODE XREF: _crl_main+35Fj
		test	eax, eax
		jnz	short loc_6F7
		dec	esi
		cmp	esi, 1
		jl	$bad$251
		mov	eax, [ebx+4]
		add	ebx, 4
		mov	[esp+144h+ErrMsg], eax
		jmp	loc_ACF
; ---------------------------------------------------------------------------

loc_6F7:				; CODE XREF: _crl_main+368j
		mov	ecx, offset ??_C@_07MNNNLALG@?9CApath?$AA@ ; "-CApath"
		mov	eax, edi
		nop	word ptr [eax+eax+00h]

loc_704:				; CODE XREF: _crl_main+3AAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_724
		test	dl, dl
		jz	short loc_720
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_724
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_704

loc_720:				; CODE XREF: _crl_main+398j
		xor	eax, eax
		jmp	short loc_729
; ---------------------------------------------------------------------------

loc_724:				; CODE XREF: _crl_main+394j
					; _crl_main+3A0j
		sbb	eax, eax
		or	eax, 1

loc_729:				; CODE XREF: _crl_main+3AEj
		test	eax, eax
		jnz	short loc_74F
		dec	esi
		cmp	esi, 1
		jl	$bad$251
		mov	eax, [ebx+4]
		add	ebx, 4
		mov	edi, 1
		mov	[esp+144h+var_114], eax
		mov	[esp+144h+var_134], edi
		jmp	loc_AD3
; ---------------------------------------------------------------------------

loc_74F:				; CODE XREF: _crl_main+3B7j
		mov	ecx, offset ??_C@_07EAFCHGPO@?9CAfile?$AA@ ; "-CAfile"
		mov	eax, edi

loc_756:				; CODE XREF: _crl_main+3FCj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_776
		test	dl, dl
		jz	short loc_772
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_776
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_756

loc_772:				; CODE XREF: _crl_main+3EAj
		xor	eax, eax
		jmp	short loc_77B
; ---------------------------------------------------------------------------

loc_776:				; CODE XREF: _crl_main+3E6j
					; _crl_main+3F2j
		sbb	eax, eax
		or	eax, 1

loc_77B:				; CODE XREF: _crl_main+400j
		test	eax, eax
		jnz	short loc_7A1
		dec	esi
		cmp	esi, 1
		jl	$bad$251
		mov	eax, [ebx+4]
		add	ebx, 4
		mov	edi, 1
		mov	[esp+144h+var_118], eax
		mov	[esp+144h+var_134], edi
		jmp	loc_AD3
; ---------------------------------------------------------------------------

loc_7A1:				; CODE XREF: _crl_main+409j
		mov	ecx, offset ??_C@_07FILEFCOC@?9verify?$AA@ ; "-verify"
		mov	eax, edi

loc_7A8:				; CODE XREF: _crl_main+44Ej
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_7C8
		test	dl, dl
		jz	short loc_7C4
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_7C8
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_7A8

loc_7C4:				; CODE XREF: _crl_main+43Cj
		xor	eax, eax
		jmp	short loc_7CD
; ---------------------------------------------------------------------------

loc_7C8:				; CODE XREF: _crl_main+438j
					; _crl_main+444j
		sbb	eax, eax
		or	eax, 1

loc_7CD:				; CODE XREF: _crl_main+452j
		test	eax, eax
		jnz	short loc_7DF
		mov	edi, 1
		mov	[esp+144h+var_134], edi
		jmp	loc_AD3
; ---------------------------------------------------------------------------

loc_7DF:				; CODE XREF: _crl_main+45Bj
		mov	ecx, offset ??_C@_05OEBEIMJA@?9text?$AA@ ; "-text"
		mov	eax, edi

loc_7E6:				; CODE XREF: _crl_main+48Cj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_806
		test	dl, dl
		jz	short loc_802
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_806
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_7E6

loc_802:				; CODE XREF: _crl_main+47Aj
		xor	eax, eax
		jmp	short loc_80B
; ---------------------------------------------------------------------------

loc_806:				; CODE XREF: _crl_main+476j
					; _crl_main+482j
		sbb	eax, eax
		or	eax, 1

loc_80B:				; CODE XREF: _crl_main+490j
		test	eax, eax
		jnz	short loc_81C
		mov	[esp+144h+var_E8], 1
		jmp	loc_ACF
; ---------------------------------------------------------------------------

loc_81C:				; CODE XREF: _crl_main+499j
		mov	ecx, offset ??_C@_05CEEENDPI@?9hash?$AA@ ; "-hash"
		mov	eax, edi
		nop

loc_824:				; CODE XREF: _crl_main+4CAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_844
		test	dl, dl
		jz	short loc_840
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_844
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_824

loc_840:				; CODE XREF: _crl_main+4B8j
		xor	eax, eax
		jmp	short loc_849
; ---------------------------------------------------------------------------

loc_844:				; CODE XREF: _crl_main+4B4j
					; _crl_main+4C0j
		sbb	eax, eax
		or	eax, 1

loc_849:				; CODE XREF: _crl_main+4CEj
		test	eax, eax
		jnz	short loc_85B
		inc	ebp
		mov	[esp+144h+var_130], ebp
		mov	[esp+144h+var_100], ebp
		jmp	loc_ACF
; ---------------------------------------------------------------------------

loc_85B:				; CODE XREF: _crl_main+4D7j
		mov	ecx, offset ??_C@_09PNFBPIFJ@?9hash_old?$AA@ ; "-hash_old"
		mov	eax, edi
		xchg	ax, ax

loc_864:				; CODE XREF: _crl_main+50Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_884
		test	dl, dl
		jz	short loc_880
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_884
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_864

loc_880:				; CODE XREF: _crl_main+4F8j
		xor	eax, eax
		jmp	short loc_889
; ---------------------------------------------------------------------------

loc_884:				; CODE XREF: _crl_main+4F4j
					; _crl_main+500j
		sbb	eax, eax
		or	eax, 1

loc_889:				; CODE XREF: _crl_main+50Ej
		test	eax, eax
		jnz	short loc_89B
		inc	ebp
		mov	[esp+144h+var_130], ebp
		mov	[esp+144h+var_FC], ebp
		jmp	loc_ACF
; ---------------------------------------------------------------------------

loc_89B:				; CODE XREF: _crl_main+517j
		mov	ecx, offset ??_C@_08BLLHKMDD@?9nameopt?$AA@ ; "-nameopt"
		mov	eax, edi
		xchg	ax, ax

loc_8A4:				; CODE XREF: _crl_main+54Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_8C4
		test	dl, dl
		jz	short loc_8C0
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_8C4
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_8A4

loc_8C0:				; CODE XREF: _crl_main+538j
		xor	eax, eax
		jmp	short loc_8C9
; ---------------------------------------------------------------------------

loc_8C4:				; CODE XREF: _crl_main+534j
					; _crl_main+540j
		sbb	eax, eax
		or	eax, 1

loc_8C9:				; CODE XREF: _crl_main+54Ej
		test	eax, eax
		jnz	short loc_8F7
		dec	esi
		cmp	esi, 1
		jl	$bad$251
		push	dword ptr [ebx+4]
		add	ebx, 4
		lea	eax, [esp+148h+var_108]
		push	eax
		call	_set_name_ex
		add	esp, 8
		test	eax, eax
		jz	$bad$251
		jmp	loc_ACF
; ---------------------------------------------------------------------------

loc_8F7:				; CODE XREF: _crl_main+557j
		mov	ecx, offset ??_C@_07NKLAPJEG@?9issuer?$AA@ ; "-issuer"
		mov	eax, edi
		nop	word ptr [eax+eax+00h]

loc_904:				; CODE XREF: _crl_main+5AAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_924
		test	dl, dl
		jz	short loc_920
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_924
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_904

loc_920:				; CODE XREF: _crl_main+598j
		xor	eax, eax
		jmp	short loc_929
; ---------------------------------------------------------------------------

loc_924:				; CODE XREF: _crl_main+594j
					; _crl_main+5A0j
		sbb	eax, eax
		or	eax, 1

loc_929:				; CODE XREF: _crl_main+5AEj
		test	eax, eax
		jnz	short loc_93B
		inc	ebp
		mov	[esp+144h+var_130], ebp
		mov	[esp+144h+var_10C], ebp
		jmp	loc_ACF
; ---------------------------------------------------------------------------

loc_93B:				; CODE XREF: _crl_main+5B7j
		mov	ecx, offset ??_C@_0M@JGEDAEIF@?9lastupdate?$AA@	; "-lastupdate"
		mov	eax, edi
		xchg	ax, ax

loc_944:				; CODE XREF: _crl_main+5EAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_964
		test	dl, dl
		jz	short loc_960
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_964
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_944

loc_960:				; CODE XREF: _crl_main+5D8j
		xor	eax, eax
		jmp	short loc_969
; ---------------------------------------------------------------------------

loc_964:				; CODE XREF: _crl_main+5D4j
					; _crl_main+5E0j
		sbb	eax, eax
		or	eax, 1

loc_969:				; CODE XREF: _crl_main+5EEj
		test	eax, eax
		jnz	short loc_97B
		inc	ebp
		mov	[esp+144h+var_130], ebp
		mov	[esp+144h+var_F8], ebp
		jmp	loc_ACF
; ---------------------------------------------------------------------------

loc_97B:				; CODE XREF: _crl_main+5F7j
		mov	ecx, offset ??_C@_0M@EFJBIDOD@?9nextupdate?$AA@	; "-nextupdate"
		mov	eax, edi
		xchg	ax, ax

loc_984:				; CODE XREF: _crl_main+62Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_9A4
		test	dl, dl
		jz	short loc_9A0
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_9A4
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_984

loc_9A0:				; CODE XREF: _crl_main+618j
		xor	eax, eax
		jmp	short loc_9A9
; ---------------------------------------------------------------------------

loc_9A4:				; CODE XREF: _crl_main+614j
					; _crl_main+620j
		sbb	eax, eax
		or	eax, 1

loc_9A9:				; CODE XREF: _crl_main+62Ej
		test	eax, eax
		jnz	short loc_9BB
		inc	ebp
		mov	[esp+144h+var_130], ebp
		mov	[esp+144h+var_F4], ebp
		jmp	loc_ACF
; ---------------------------------------------------------------------------

loc_9BB:				; CODE XREF: _crl_main+637j
		mov	ecx, offset ??_C@_06JPEJAHHH@?9noout?$AA@ ; "-noout"
		mov	eax, edi
		xchg	ax, ax

loc_9C4:				; CODE XREF: _crl_main+66Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_9E4
		test	dl, dl
		jz	short loc_9E0
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_9E4
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_9C4

loc_9E0:				; CODE XREF: _crl_main+658j
		xor	eax, eax
		jmp	short loc_9E9
; ---------------------------------------------------------------------------

loc_9E4:				; CODE XREF: _crl_main+654j
					; _crl_main+660j
		sbb	eax, eax
		or	eax, 1

loc_9E9:				; CODE XREF: _crl_main+66Ej
		test	eax, eax
		jnz	short loc_9FB
		inc	ebp
		mov	[esp+144h+var_130], ebp
		mov	[esp+144h+var_E4], ebp
		jmp	loc_ACF
; ---------------------------------------------------------------------------

loc_9FB:				; CODE XREF: _crl_main+677j
		mov	ecx, offset ??_C@_0N@DLPLBIOP@?9fingerprint?$AA@ ; "-fingerprint"
		mov	eax, edi
		xchg	ax, ax

loc_A04:				; CODE XREF: _crl_main+6AAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_A24
		test	dl, dl
		jz	short loc_A20
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_A24
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_A04

loc_A20:				; CODE XREF: _crl_main+698j
		xor	eax, eax
		jmp	short loc_A29
; ---------------------------------------------------------------------------

loc_A24:				; CODE XREF: _crl_main+694j
					; _crl_main+6A0j
		sbb	eax, eax
		or	eax, 1

loc_A29:				; CODE XREF: _crl_main+6AEj
		test	eax, eax
		jnz	short loc_A3B
		inc	ebp
		mov	[esp+144h+var_130], ebp
		mov	[esp+144h+var_F0], ebp
		jmp	loc_ACF
; ---------------------------------------------------------------------------

loc_A3B:				; CODE XREF: _crl_main+6B7j
		mov	ecx, offset ??_C@_0L@JJEPFIBG@?9crlnumber?$AA@ ; "-crlnumber"
		mov	eax, edi
		xchg	ax, ax

loc_A44:				; CODE XREF: _crl_main+6EAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_A64
		test	dl, dl
		jz	short loc_A60
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_A64
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_A44

loc_A60:				; CODE XREF: _crl_main+6D8j
		xor	eax, eax
		jmp	short loc_A69
; ---------------------------------------------------------------------------

loc_A64:				; CODE XREF: _crl_main+6D4j
					; _crl_main+6E0j
		sbb	eax, eax
		or	eax, 1

loc_A69:				; CODE XREF: _crl_main+6EEj
		test	eax, eax
		jnz	short loc_A78
		inc	ebp
		mov	[esp+144h+var_130], ebp
		mov	[esp+144h+var_104], ebp
		jmp	short loc_ACF
; ---------------------------------------------------------------------------

loc_A78:				; CODE XREF: _crl_main+6F7j
		mov	ecx, offset ??_C@_07FPKNAFBC@?9badsig?$AA@ ; "-badsig"
		mov	eax, edi
		nop	dword ptr [eax+eax+00h]

loc_A84:				; CODE XREF: _crl_main+72Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_AA4
		test	dl, dl
		jz	short loc_AA0
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_AA4
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_A84

loc_AA0:				; CODE XREF: _crl_main+718j
		xor	eax, eax
		jmp	short loc_AA9
; ---------------------------------------------------------------------------

loc_AA4:				; CODE XREF: _crl_main+714j
					; _crl_main+720j
		sbb	eax, eax
		or	eax, 1

loc_AA9:				; CODE XREF: _crl_main+72Ej
		test	eax, eax
		jnz	short loc_AB7
		mov	[esp+144h+var_E0], 1
		jmp	short loc_ACF
; ---------------------------------------------------------------------------

loc_AB7:				; CODE XREF: _crl_main+737j
		lea	eax, [edi+1]
		push	eax
		call	_EVP_get_digestbyname
		add	esp, 4
		mov	[esp+144h+var_120], eax
		test	eax, eax
		jz	loc_C35

loc_ACF:				; CODE XREF: _crl_main+1A5j
					; _crl_main+1F6j ...
		mov	edi, [esp+144h+var_134]

loc_AD3:				; CODE XREF: _crl_main+3D6j
					; _crl_main+428j ...
		dec	esi
		add	ebx, 4
		cmp	esi, 1
		jge	loc_4C4

loc_AE0:				; CODE XREF: _crl_main+143j
		call	_ERR_load_crypto_strings
		mov	esi, [esp+144h+var_124]
		push	esi
		push	[esp+148h+var_11C]
		call	_load_crl
		mov	ebx, eax
		add	esp, 8
		mov	[esp+144h+var_134], ebx
		test	ebx, ebx
		jz	loc_BC6
		test	edi, edi
		jz	loc_D07
		call	_X509_STORE_new
		mov	edi, eax
		mov	[esp+144h+var_D8], edi
		call	_X509_LOOKUP_file
		push	eax
		push	edi
		call	_X509_STORE_add_lookup
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	loc_BC6
		push	0
		push	1
		push	[esp+14Ch+var_118]
		push	1
		push	esi
		call	_X509_LOOKUP_ctrl
		add	esp, 14h
		test	eax, eax
		jnz	short loc_B56
		push	eax
		push	3
		push	eax
		push	1
		push	esi
		call	_X509_LOOKUP_ctrl
		add	esp, 14h

loc_B56:				; CODE XREF: _crl_main+7D1j
		call	_X509_LOOKUP_hash_dir
		push	eax
		push	edi
		call	_X509_STORE_add_lookup
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_BC6
		push	0
		push	1
		push	[esp+14Ch+var_114]
		push	2
		push	esi
		call	_X509_LOOKUP_ctrl
		add	esp, 14h
		test	eax, eax
		jnz	short loc_B91
		push	eax
		push	3
		push	eax
		push	2
		push	esi
		call	_X509_LOOKUP_ctrl
		add	esp, 14h

loc_B91:				; CODE XREF: _crl_main+80Cj
		call	_ERR_clear_error
		push	0
		push	0
		lea	eax, [esp+14Ch+var_CC]
		push	edi
		push	eax
		call	_X509_STORE_CTX_init
		add	esp, 10h
		test	eax, eax
		jnz	loc_C7D
		push	offset ??_C@_0BP@JMGLOJAO@Error?5initialising?5X509?5store?6?$AA@ ; "Error initialising	X509 store\n"

loc_BB8:				; CODE XREF: _crl_main+92Ej
					; _crl_main+954j ...
		push	dword ptr ds:_bio_err
		call	_BIO_printf

loc_BC3:				; CODE XREF: _crl_main+9B7j
					; _crl_main+ACFj
		add	esp, 8

loc_BC6:				; CODE XREF: _crl_main+78Aj
					; _crl_main+7B6j ...
		xor	ebp, ebp

loc_BC8:				; CODE XREF: _crl_main+CC1j
					; _crl_main+D26j ...
		push	dword ptr ds:_bio_err
		call	_ERR_print_errors
		add	esp, 4
		mov	esi, 1

loc_BDB:				; CODE XREF: _crl_main+D01j
		push	ebp
		call	_BIO_free_all
		push	ds:_bio_out
		call	_BIO_free_all
		push	ebx
		mov	ds:_bio_out, 0
		call	_X509_CRL_free
		mov	edi, [esp+150h+var_D8]
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_C1A
		lea	eax, [esp+144h+var_CC]
		push	eax
		call	_X509_STORE_CTX_cleanup
		push	edi
		call	_X509_STORE_free
		add	esp, 8

loc_C1A:				; CODE XREF: _crl_main+891j
		mov	ecx, [esp+144h+var_4]
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 134h
		retn
; ---------------------------------------------------------------------------

loc_C35:				; CODE XREF: _crl_main+755j
		push	dword ptr [ebx]
		push	offset ??_C@_0BD@NFDCLIJC@unknown?5option?5?$CFs?6?$AA@	; "unknown option %s\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 0Ch

$bad$251:				; CODE XREF: _crl_main+18Dj
					; _crl_main+1DEj ...
		mov	eax, _crl_usage
		mov	esi, offset _crl_usage
		test	eax, eax
		jz	short loc_C76

loc_C58:				; CODE XREF: _crl_main+900j
		push	eax
		push	offset ??_C@_02DKCKIIND@?$CFs?$AA@ ; `string'
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		mov	eax, [esi+4]
		lea	esi, [esi+4]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_C58

loc_C76:				; CODE XREF: _crl_main+8E2j
		xor	ebx, ebx
		jmp	loc_BC6
; ---------------------------------------------------------------------------

loc_C7D:				; CODE XREF: _crl_main+839j
		lea	eax, [esp+144h+var_D4]
		push	eax
		mov	eax, [ebx]
		push	dword ptr [eax+8]
		lea	eax, [esp+14Ch+var_CC]
		push	1
		push	eax
		call	_X509_STORE_get_by_subject
		add	esp, 10h
		test	eax, eax
		jg	short loc_CA7
		push	offset ??_C@_0CG@MLNJBOFF@Error?5getting?5CRL?5issuer?5certifi@	; "Error getting CRL issuer certificate\n"
		jmp	loc_BB8
; ---------------------------------------------------------------------------

loc_CA7:				; CODE XREF: _crl_main+927j
		push	[esp+144h+var_D0]
		call	_X509_get_pubkey
		mov	esi, eax
		lea	eax, [esp+148h+var_D4]
		push	eax
		call	_X509_OBJECT_free_contents
		add	esp, 8
		test	esi, esi
		jnz	short loc_CCD
		push	offset ??_C@_0CF@JCHOOGEG@Error?5getting?5CRL?5issuer?5public?5@ ; "Error getting CRL issuer public key\n"
		jmp	loc_BB8
; ---------------------------------------------------------------------------

loc_CCD:				; CODE XREF: _crl_main+94Dj
		push	esi
		push	ebx
		call	_X509_CRL_verify
		push	esi
		mov	edi, eax
		call	_EVP_PKEY_free
		add	esp, 0Ch
		test	edi, edi
		js	loc_BC6
		jnz	short loc_CF0
		push	offset ??_C@_0BA@HHOHOMNK@verify?5failure?6?$AA@ ; "verify failure\n"
		jmp	short loc_CF5
; ---------------------------------------------------------------------------

loc_CF0:				; CODE XREF: _crl_main+973j
		push	offset ??_C@_0L@OEANIBEG@verify?5OK?6?$AA@ ; "verify OK\n"

loc_CF5:				; CODE XREF: _crl_main+97Aj
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		mov	esi, [esp+14Ch+var_124]
		add	esp, 8

loc_D07:				; CODE XREF: _crl_main+792j
		mov	eax, [esp+144h+var_110]
		test	eax, eax
		jz	loc_DAE
		mov	edi, [esp+144h+var_12C]
		test	edi, edi
		jnz	short loc_D30
		push	offset ??_C@_0BJ@FNGPPCDD@Missing?5CRL?5signing?5key?6?$AA@ ; "Missing CRL signing key\n"
		push	dword ptr ds:_bio_err
		call	_BIO_puts
		jmp	loc_BC3
; ---------------------------------------------------------------------------

loc_D30:				; CODE XREF: _crl_main+9A5j
		push	esi
		push	eax
		call	_load_crl
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	loc_BC6
		push	offset ??_C@_0BA@KJNDBHBG@CRL?5signing?5key?$AA@ ; "CRL	signing	key"
		push	0
		push	0
		push	0
		push	[esp+154h+var_128]
		push	edi
		push	dword ptr ds:_bio_err
		call	_load_key
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		jnz	short loc_D76
		push	esi
		call	_X509_CRL_free
		add	esp, 4
		jmp	loc_BC6
; ---------------------------------------------------------------------------

loc_D76:				; CODE XREF: _crl_main+9F2j
		push	0
		push	[esp+148h+var_120]
		push	edi
		push	esi
		push	ebx
		call	_X509_CRL_diff
		push	esi
		mov	ebx, eax
		call	_X509_CRL_free
		push	edi
		call	_EVP_PKEY_free
		add	esp, 1Ch
		test	ebx, ebx
		jz	loc_E2F
		mov	eax, [esp+144h+var_134]
		push	eax
		call	_X509_CRL_free
		add	esp, 4
		mov	[esp+144h+var_134], ebx

loc_DAE:				; CODE XREF: _crl_main+999j
		test	ebp, ebp
		jz	loc_100F
		mov	edi, 1
		mov	[esp+144h+var_12C], edi
		cmp	ebp, edi
		jl	loc_100F

loc_DC7:				; CODE XREF: _crl_main+C8Cj
		cmp	[esp+144h+var_10C], edi
		jnz	short loc_DE9
		push	[esp+144h+var_108]
		mov	eax, [ebx]
		push	dword ptr [eax+8]
		push	offset ??_C@_07FBILCNB@issuer?$DN?$AA@ ; "issuer="
		push	ds:_bio_out
		call	_print_name
		add	esp, 10h

loc_DE9:				; CODE XREF: _crl_main+A57j
		cmp	[esp+144h+var_104], edi
		jnz	loc_E6E
		push	0
		push	0
		push	58h ; 'X'
		push	ebx
		call	_X509_CRL_get_ext_d2i
		push	offset ??_C@_0L@PBBPHNHE@crlNumber?$DN?$AA@ ; "crlNumber="
		push	ds:_bio_out
		mov	esi, eax
		call	_BIO_printf
		add	esp, 18h
		test	esi, esi
		jz	short loc_E48
		push	esi
		push	ds:_bio_out
		call	_i2a_ASN1_INTEGER
		push	esi
		call	_ASN1_INTEGER_free
		add	esp, 0Ch
		jmp	short loc_E5B
; ---------------------------------------------------------------------------

loc_E2F:				; CODE XREF: _crl_main+A23j
		push	offset ??_C@_0BK@DNGLAPHD@Error?5creating?5delta?5CRL?6?$AA@ ; "Error creating delta CRL\n"
		push	dword ptr ds:_bio_err
		call	_BIO_puts
		mov	ebx, [esp+14Ch+var_134]
		jmp	loc_BC3
; ---------------------------------------------------------------------------

loc_E48:				; CODE XREF: _crl_main+AA2j
		push	offset ??_C@_06KOPODAHL@?$DMNONE?$DO?$AA@ ; "<NONE>"
		push	ds:_bio_out
		call	_BIO_puts
		add	esp, 8

loc_E5B:				; CODE XREF: _crl_main+AB9j
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	ds:_bio_out
		call	_BIO_printf
		add	esp, 8

loc_E6E:				; CODE XREF: _crl_main+A79j
		cmp	[esp+144h+var_100], edi
		jnz	short loc_E92
		mov	eax, [ebx]
		push	dword ptr [eax+8]
		call	_X509_NAME_hash
		push	eax
		push	offset ??_C@_06LLMAFLIJ@?$CF08lx?6?$AA@	; "%08lx\n"
		push	ds:_bio_out
		call	_BIO_printf
		add	esp, 10h

loc_E92:				; CODE XREF: _crl_main+AFEj
		cmp	[esp+144h+var_FC], edi
		jnz	short loc_EB6
		mov	eax, [ebx]
		push	dword ptr [eax+8]
		call	_X509_NAME_hash_old
		push	eax
		push	offset ??_C@_06LLMAFLIJ@?$CF08lx?6?$AA@	; "%08lx\n"
		push	ds:_bio_out
		call	_BIO_printf
		add	esp, 10h

loc_EB6:				; CODE XREF: _crl_main+B22j
		cmp	[esp+144h+var_F8], edi
		jnz	short loc_EEF
		push	offset ??_C@_0M@IOCJLFCF@lastUpdate?$DN?$AA@ ; "lastUpdate="
		push	ds:_bio_out
		call	_BIO_printf
		mov	eax, [ebx]
		push	dword ptr [eax+0Ch]
		push	ds:_bio_out
		call	_ASN1_TIME_print
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	ds:_bio_out
		call	_BIO_printf
		add	esp, 18h

loc_EEF:				; CODE XREF: _crl_main+B46j
		cmp	[esp+144h+var_F4], edi
		jnz	short loc_F45
		push	offset ??_C@_0M@CKCLKDMP@nextUpdate?$DN?$AA@ ; "nextUpdate="
		push	ds:_bio_out
		call	_BIO_printf
		mov	eax, [ebx]
		add	esp, 8
		mov	eax, [eax+10h]
		test	eax, eax
		jz	short loc_F1F
		push	eax
		push	ds:_bio_out
		call	_ASN1_TIME_print
		jmp	short loc_F2F
; ---------------------------------------------------------------------------

loc_F1F:				; CODE XREF: _crl_main+B9Bj
		push	offset ??_C@_04OKGDLNCL@NONE?$AA@ ; "NONE"
		push	ds:_bio_out
		call	_BIO_printf

loc_F2F:				; CODE XREF: _crl_main+BA9j
		add	esp, 8
		push	offset ??_C@_01EEMJAFIK@?6?$AA@	; `string'
		push	ds:_bio_out
		call	_BIO_printf
		add	esp, 8

loc_F45:				; CODE XREF: _crl_main+B7Fj
		cmp	[esp+144h+var_F0], edi
		jnz	loc_FF3
		mov	esi, [esp+144h+var_120]
		lea	eax, [esp+144h+var_128]
		push	eax
		lea	eax, [esp+148h+var_44]
		push	eax
		push	esi
		push	ebx
		call	_X509_CRL_digest
		add	esp, 10h
		test	eax, eax
		jz	loc_1005
		push	esi
		call	_EVP_MD_type
		push	eax
		call	_OBJ_nid2sn
		push	eax
		push	offset ??_C@_0BA@BJKFFDMN@?$CFs?5Fingerprint?$DN?$AA@ ;	"%s Fingerprint="
		push	ds:_bio_out
		call	_BIO_printf
		mov	ebx, [esp+158h+var_128]
		add	esp, 14h
		xor	esi, esi
		test	ebx, ebx
		jle	short loc_FF3
		mov	ebp, 1
		lea	eax, [esp+144h+var_44]
		sub	ebp, eax
		lea	edi, [esi+0Ah]
		nop	dword ptr [eax+00000000h]

loc_FB4:				; CODE XREF: _crl_main+C75j
		lea	edx, [esp+144h+var_44]
		mov	ecx, 3Ah ; ':'
		add	edx, esi
		lea	eax, [edx+ebp]
		cmp	eax, ebx
		movzx	eax, byte ptr [edx]
		cmovz	ecx, edi
		push	ecx
		push	eax
		push	offset ??_C@_06FOGCEBND@?$CF02X?$CFc?$AA@ ; "%02X%c"
		push	ds:_bio_out
		call	_BIO_printf
		mov	ebx, [esp+154h+var_128]
		inc	esi
		add	esp, 10h
		cmp	esi, ebx
		jl	short loc_FB4
		mov	edi, [esp+144h+var_12C]
		mov	ebp, [esp+144h+var_130]

loc_FF3:				; CODE XREF: _crl_main+BD5j
					; _crl_main+C26j
		inc	edi
		mov	[esp+144h+var_12C], edi
		cmp	edi, ebp
		jg	short loc_100F
		mov	ebx, [esp+144h+var_134]
		jmp	loc_DC7
; ---------------------------------------------------------------------------

loc_1005:				; CODE XREF: _crl_main+BF8j
		push	offset ??_C@_0P@PCJPAHLM@out?5of?5memory?6?$AA@	; "out of memory\n"
		jmp	loc_BB8
; ---------------------------------------------------------------------------

loc_100F:				; CODE XREF: _crl_main+A3Cj
					; _crl_main+A4Dj ...
		call	_BIO_s_file
		push	eax
		call	_BIO_new
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jnz	short loc_103A
		push	dword ptr ds:_bio_err
		call	_ERR_print_errors
		mov	ebx, [esp+148h+var_134]
		add	esp, 4
		jmp	loc_BC8
; ---------------------------------------------------------------------------

loc_103A:				; CODE XREF: _crl_main+CADj
		mov	ebx, [esp+144h+ErrMsg]
		test	ebx, ebx
		jnz	short loc_107A
		push	1
		call	dword ptr ds:__imp____acrt_iob_func
		push	eax
		push	ebx
		push	6Ah ; 'j'
		push	ebp
		call	_BIO_ctrl
		add	esp, 14h

loc_1057:				; CODE XREF: _crl_main+D16j
		cmp	[esp+144h+var_E8], 0
		mov	ebx, [esp+144h+var_134]
		jz	short loc_106C
		push	ebx
		push	ebp
		call	_X509_CRL_print
		add	esp, 8

loc_106C:				; CODE XREF: _crl_main+CECj
		cmp	[esp+144h+var_E4], 0
		jz	short loc_109F

loc_1073:				; CODE XREF: _crl_main+D62j
		xor	esi, esi
		jmp	loc_BDB
; ---------------------------------------------------------------------------

loc_107A:				; CODE XREF: _crl_main+CCCj
		push	ebx
		push	5
		push	6Ch ; 'l'
		push	ebp
		call	_BIO_ctrl
		add	esp, 10h
		test	eax, eax
		jg	short loc_1057
		push	ebx		; ErrMsg
		call	dword ptr ds:__imp__perror
		mov	ebx, [esp+148h+var_134]
		add	esp, 4
		jmp	loc_BC8
; ---------------------------------------------------------------------------

loc_109F:				; CODE XREF: _crl_main+CFDj
		cmp	[esp+144h+var_E0], 0
		jz	short loc_10B3
		mov	eax, [ebx+8]
		mov	ecx, [eax+8]
		mov	eax, [eax]
		xor	byte ptr [ecx+eax-1], 1

loc_10B3:				; CODE XREF: _crl_main+D30j
		mov	eax, [esp+144h+var_DC]
		cmp	eax, 1
		jnz	short loc_10C5
		push	ebx
		push	ebp
		call	_i2d_X509_CRL_bio
		jmp	short loc_10D1
; ---------------------------------------------------------------------------

loc_10C5:				; CODE XREF: _crl_main+D46j
		cmp	eax, 3
		jnz	short loc_10F0
		push	ebx
		push	ebp
		call	_PEM_write_bio_X509_CRL

loc_10D1:				; CODE XREF: _crl_main+D4Fj
		add	esp, 8
		test	eax, eax
		jnz	short loc_1073
		push	offset ??_C@_0BF@ECKMNJGO@unable?5to?5write?5CRL?6?$AA@	; "unable to write CRL\n"
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 8
		jmp	loc_BC8
; ---------------------------------------------------------------------------

loc_10F0:				; CODE XREF: _crl_main+D54j
		push	offset ??_C@_0CJ@JNEPIEPI@bad?5output?5format?5specified?5for?5@ ; "bad	output format specified	for outfile"...
		push	dword ptr ds:_bio_err
		call	_BIO_printf
		add	esp, 8
		jmp	loc_BC8
; ---------------------------------------------------------------------------

loc_1108:				; CODE XREF: _crl_main+DBj
		xor	ebx, ebx
		jmp	loc_BC8
_crl_main	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1110h
; COMDAT (pick any)
		public ??_C@_07CGGPPMGB@?9inform?$AA@
; `string'
??_C@_07CGGPPMGB@?9inform?$AA@ db '-inform',0 ; DATA XREF: _crl_main+152o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1118h
; COMDAT (pick any)
		public ??_C@_08LPHBEAIF@?9outform?$AA@
; `string'
??_C@_08LPHBEAIF@?9outform?$AA@	db '-outform',0 ; DATA XREF: _crl_main:loc_51Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1124h
; COMDAT (pick any)
		public ??_C@_03DAJLOBIG@?9in?$AA@
; `string'
??_C@_03DAJLOBIG@?9in?$AA@ dd 6E692Dh	; DATA XREF: _crl_main:loc_56Fo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1128h
; COMDAT (pick any)
		public ??_C@_09EBAPANED@?9gendelta?$AA@
; `string'
??_C@_09EBAPANED@?9gendelta?$AA@ db '-gendelta',0 ; DATA XREF: _crl_main:loc_5B8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1134h
; COMDAT (pick any)
		public ??_C@_04FMEKFICB@?9key?$AA@
; `string'
??_C@_04FMEKFICB@?9key?$AA@ db '-key',0 ; DATA XREF: _crl_main:loc_606o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 113Ch
; COMDAT (pick any)
		public ??_C@_08OAHLMBGP@?9keyform?$AA@
; `string'
??_C@_08OAHLMBGP@?9keyform?$AA@	db '-keyform',0 ; DATA XREF: _crl_main:loc_656o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1148h
; COMDAT (pick any)
		public ??_C@_04HKKABCEL@?9out?$AA@
; `string'
??_C@_04HKKABCEL@?9out?$AA@ db '-out',0 ; DATA XREF: _crl_main:loc_6AEo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1150h
; COMDAT (pick any)
		public ??_C@_07MNNNLALG@?9CApath?$AA@
; `string'
??_C@_07MNNNLALG@?9CApath?$AA@ db '-CApath',0 ; DATA XREF: _crl_main:loc_6F7o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1158h
; COMDAT (pick any)
		public ??_C@_07EAFCHGPO@?9CAfile?$AA@
; `string'
??_C@_07EAFCHGPO@?9CAfile?$AA@ db '-CAfile',0 ; DATA XREF: _crl_main:loc_74Fo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1160h
; COMDAT (pick any)
		public ??_C@_07FILEFCOC@?9verify?$AA@
; `string'
??_C@_07FILEFCOC@?9verify?$AA@ db '-verify',0 ; DATA XREF: _crl_main:loc_7A1o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1168h
; COMDAT (pick any)
		public ??_C@_05OEBEIMJA@?9text?$AA@
; `string'
??_C@_05OEBEIMJA@?9text?$AA@ db	'-text',0 ; DATA XREF: _crl_main:loc_7DFo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1170h
; COMDAT (pick any)
		public ??_C@_05CEEENDPI@?9hash?$AA@
; `string'
??_C@_05CEEENDPI@?9hash?$AA@ db	'-hash',0 ; DATA XREF: _crl_main:loc_81Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1178h
; COMDAT (pick any)
		public ??_C@_09PNFBPIFJ@?9hash_old?$AA@
; `string'
??_C@_09PNFBPIFJ@?9hash_old?$AA@ db '-hash_old',0 ; DATA XREF: _crl_main:loc_85Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1184h
; COMDAT (pick any)
		public ??_C@_08BLLHKMDD@?9nameopt?$AA@
; `string'
??_C@_08BLLHKMDD@?9nameopt?$AA@	db '-nameopt',0 ; DATA XREF: _crl_main:loc_89Bo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1190h
; COMDAT (pick any)
		public ??_C@_07NKLAPJEG@?9issuer?$AA@
; `string'
??_C@_07NKLAPJEG@?9issuer?$AA@ db '-issuer',0 ; DATA XREF: _crl_main:loc_8F7o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1198h
; COMDAT (pick any)
		public ??_C@_0M@JGEDAEIF@?9lastupdate?$AA@
; `string'
??_C@_0M@JGEDAEIF@?9lastupdate?$AA@ db '-lastupdate',0 ; DATA XREF: _crl_main:loc_93Bo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11A4h
; COMDAT (pick any)
		public ??_C@_0M@EFJBIDOD@?9nextupdate?$AA@
; `string'
??_C@_0M@EFJBIDOD@?9nextupdate?$AA@ db '-nextupdate',0 ; DATA XREF: _crl_main:loc_97Bo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11B0h
; COMDAT (pick any)
		public ??_C@_06JPEJAHHH@?9noout?$AA@
; `string'
??_C@_06JPEJAHHH@?9noout?$AA@ db '-noout',0 ; DATA XREF: _crl_main:loc_9BBo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11B8h
; COMDAT (pick any)
		public ??_C@_0N@DLPLBIOP@?9fingerprint?$AA@
; `string'
??_C@_0N@DLPLBIOP@?9fingerprint?$AA@ db	'-fingerprint',0 ; DATA XREF: _crl_main:loc_9FBo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11C8h
; COMDAT (pick any)
		public ??_C@_0L@JJEPFIBG@?9crlnumber?$AA@
; `string'
??_C@_0L@JJEPFIBG@?9crlnumber?$AA@ db '-crlnumber',0 ; DATA XREF: _crl_main:loc_A3Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11D4h
; COMDAT (pick any)
		public ??_C@_07FPKNAFBC@?9badsig?$AA@
; `string'
??_C@_07FPKNAFBC@?9badsig?$AA@ db '-badsig',0 ; DATA XREF: _crl_main:loc_A78o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11DCh
; COMDAT (pick any)
		public ??_C@_0BD@NFDCLIJC@unknown?5option?5?$CFs?6?$AA@
; `string'
??_C@_0BD@NFDCLIJC@unknown?5option?5?$CFs?6?$AA@ db 'unknown option %s',0Ah,0
					; DATA XREF: _crl_main+8C3o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11F0h
; COMDAT (pick any)
		public ??_C@_02DKCKIIND@?$CFs?$AA@
; `string'
??_C@_02DKCKIIND@?$CFs?$AA@ db 25h, 73h, 0 ; DATA XREF:	_crl_main+8E5o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11F4h
; COMDAT (pick any)
		public ??_C@_0BP@JMGLOJAO@Error?5initialising?5X509?5store?6?$AA@
; `string'
??_C@_0BP@JMGLOJAO@Error?5initialising?5X509?5store?6?$AA@ db 'Error initialising X509 store',0Ah,0
					; DATA XREF: _crl_main+83Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1214h
; COMDAT (pick any)
		public ??_C@_0CG@MLNJBOFF@Error?5getting?5CRL?5issuer?5certifi@
; `string'
??_C@_0CG@MLNJBOFF@Error?5getting?5CRL?5issuer?5certifi@ db 'Error getting CRL issuer certificate',0Ah,0
					; DATA XREF: _crl_main+929o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 123Ch
; COMDAT (pick any)
		public ??_C@_0CF@JCHOOGEG@Error?5getting?5CRL?5issuer?5public?5@
; `string'
??_C@_0CF@JCHOOGEG@Error?5getting?5CRL?5issuer?5public?5@ db 'Error getting CRL issuer public key',0Ah,0
					; DATA XREF: _crl_main+94Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1264h
; COMDAT (pick any)
		public ??_C@_0BA@HHOHOMNK@verify?5failure?6?$AA@
; `string'
??_C@_0BA@HHOHOMNK@verify?5failure?6?$AA@ db 'verify failure',0Ah,0
					; DATA XREF: _crl_main+975o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1274h
; COMDAT (pick any)
		public ??_C@_0L@OEANIBEG@verify?5OK?6?$AA@
; `string'
??_C@_0L@OEANIBEG@verify?5OK?6?$AA@ db 'verify OK',0Ah,0 ; DATA XREF: _crl_main:loc_CF0o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1280h
; COMDAT (pick any)
		public ??_C@_0BJ@FNGPPCDD@Missing?5CRL?5signing?5key?6?$AA@
; `string'
??_C@_0BJ@FNGPPCDD@Missing?5CRL?5signing?5key?6?$AA@ db	'Missing CRL signing key',0Ah,0
					; DATA XREF: _crl_main+9A7o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 129Ch
; COMDAT (pick any)
		public ??_C@_0BA@KJNDBHBG@CRL?5signing?5key?$AA@
; `string'
??_C@_0BA@KJNDBHBG@CRL?5signing?5key?$AA@ db 'CRL signing key',0 ; DATA XREF: _crl_main+9D0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 12ACh
; COMDAT (pick any)
		public ??_C@_0BK@DNGLAPHD@Error?5creating?5delta?5CRL?6?$AA@
; `string'
??_C@_0BK@DNGLAPHD@Error?5creating?5delta?5CRL?6?$AA@ db 'Error creating delta CRL',0Ah,0
					; DATA XREF: _crl_main:loc_E2Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 12C8h
; COMDAT (pick any)
		public ??_C@_07FBILCNB@issuer?$DN?$AA@
; `string'
??_C@_07FBILCNB@issuer?$DN?$AA@	db 'issuer=',0 ; DATA XREF: _crl_main+A62o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 12D0h
; COMDAT (pick any)
		public ??_C@_0L@PBBPHNHE@crlNumber?$DN?$AA@
; `string'
??_C@_0L@PBBPHNHE@crlNumber?$DN?$AA@ db	'crlNumber=',0 ; DATA XREF: _crl_main+A8Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 12DCh
; COMDAT (pick any)
		public ??_C@_06KOPODAHL@?$DMNONE?$DO?$AA@
; `string'
??_C@_06KOPODAHL@?$DMNONE?$DO?$AA@ db '<NONE>',0 ; DATA XREF: _crl_main:loc_E48o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 12E4h
; COMDAT (pick any)
		public ??_C@_06LLMAFLIJ@?$CF08lx?6?$AA@
; `string'
??_C@_06LLMAFLIJ@?$CF08lx?6?$AA@ db '%08lx',0Ah,0 ; DATA XREF: _crl_main+B0Bo
					; _crl_main+B2Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 12ECh
; COMDAT (pick any)
		public ??_C@_0M@IOCJLFCF@lastUpdate?$DN?$AA@
; `string'
??_C@_0M@IOCJLFCF@lastUpdate?$DN?$AA@ db 'lastUpdate=',0 ; DATA XREF: _crl_main+B48o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 12F8h
; COMDAT (pick any)
		public ??_C@_0M@CKCLKDMP@nextUpdate?$DN?$AA@
; `string'
??_C@_0M@CKCLKDMP@nextUpdate?$DN?$AA@ db 'nextUpdate=',0 ; DATA XREF: _crl_main+B81o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1304h
; COMDAT (pick any)
		public ??_C@_04OKGDLNCL@NONE?$AA@
; `string'
??_C@_04OKGDLNCL@NONE?$AA@ db 'NONE',0  ; DATA XREF: _crl_main:loc_F1Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 130Ch
; COMDAT (pick any)
		public ??_C@_0P@PCJPAHLM@out?5of?5memory?6?$AA@
; `string'
??_C@_0P@PCJPAHLM@out?5of?5memory?6?$AA@ db 'out of memory',0Ah,0
					; DATA XREF: _crl_main:loc_1005o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 131Ch
; COMDAT (pick any)
		public ??_C@_0BA@BJKFFDMN@?$CFs?5Fingerprint?$DN?$AA@
; `string'
??_C@_0BA@BJKFFDMN@?$CFs?5Fingerprint?$DN?$AA@ db '%s Fingerprint=',0
					; DATA XREF: _crl_main+C0Bo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 132Ch
; COMDAT (pick any)
		public ??_C@_06FOGCEBND@?$CF02X?$CFc?$AA@
; `string'
??_C@_06FOGCEBND@?$CF02X?$CFc?$AA@ db '%02X%c',0 ; DATA XREF: _crl_main+C5Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1334h
; COMDAT (pick any)
		public ??_C@_0CJ@JNEPIEPI@bad?5output?5format?5specified?5for?5@
; `string'
??_C@_0CJ@JNEPIEPI@bad?5output?5format?5specified?5for?5@ db 'bad output format specified for outfile',0Ah,0
					; DATA XREF: _crl_main:loc_10F0o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1360h
; COMDAT (pick any)
		public ??_C@_0BF@ECKMNJGO@unable?5to?5write?5CRL?6?$AA@
; `string'
??_C@_0BF@ECKMNJGO@unable?5to?5write?5CRL?6?$AA@ db 'unable to write CRL',0Ah,0
					; DATA XREF: _crl_main+D64o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __imp____acrt_iob_func:near ; CODE XREF: _crl_main+B4p
					; _crl_main+102p ...
; void __cdecl _perror(const char *ErrMsg)
		extrn __imp__perror:near ; CODE	XREF: _crl_main+D19p
					; DATA XREF: _crl_main+D19r
		extrn _BIO_s_file:near	; CODE XREF: _crl_main+9Bp
					; _crl_main+E9p ...
		extrn _BIO_new:near	; CODE XREF: _crl_main+A1p
					; _crl_main+EFp ...
		extrn _BIO_puts:near	; CODE XREF: _crl_main+9B2p
					; _crl_main+AC6p ...
		extrn _BIO_ctrl:near	; CODE XREF: _crl_main+C1p
					; _crl_main+10Fp ...
		extrn _BIO_free_all:near ; CODE	XREF: _crl_main+868p
					; _crl_main+873p
		extrn _BIO_printf:near	; CODE XREF: _crl_main+84Ap
					; _crl_main+8CEp ...
		extrn _ASN1_INTEGER_free:near ;	CODE XREF: _crl_main+AB1p
		extrn _i2a_ASN1_INTEGER:near ; CODE XREF: _crl_main+AABp
		extrn _ASN1_TIME_print:near ; CODE XREF: _crl_main+B63p
					; _crl_main+BA4p
		extrn _OBJ_nid2sn:near	; CODE XREF: _crl_main+C05p
		extrn _EVP_MD_type:near	; CODE XREF: _crl_main+BFFp
		extrn _EVP_sha1:near	; CODE XREF: _crl_main+83p
		extrn _EVP_get_digestbyname:near ; CODE	XREF: _crl_main+747p
		extrn _EVP_PKEY_free:near ; CODE XREF: _crl_main+963p
					; _crl_main+A19p
		extrn _X509_OBJECT_free_contents:near ;	CODE XREF: _crl_main+943p
		extrn _X509_STORE_new:near ; CODE XREF:	_crl_main+798p
		extrn _X509_STORE_free:near ; CODE XREF: _crl_main+89Ep
		extrn _X509_STORE_CTX_init:near	; CODE XREF: _crl_main+82Fp
		extrn _X509_STORE_CTX_cleanup:near ; CODE XREF:	_crl_main+898p
		extrn _X509_STORE_add_lookup:near ; CODE XREF: _crl_main+7AAp
					; _crl_main+7E9p
		extrn _X509_LOOKUP_hash_dir:near ; CODE	XREF: _crl_main:loc_B56p
		extrn _X509_LOOKUP_file:near ; CODE XREF: _crl_main+7A3p
		extrn _X509_STORE_get_by_subject:near ;	CODE XREF: _crl_main+91Dp
		extrn _X509_LOOKUP_ctrl:near ; CODE XREF: _crl_main+7C7p
					; _crl_main+7DAp ...
		extrn _X509_CRL_verify:near ; CODE XREF: _crl_main+95Bp
		extrn _X509_CRL_digest:near ; CODE XREF: _crl_main+BEEp
		extrn _i2d_X509_CRL_bio:near ; CODE XREF: _crl_main+D4Ap
		extrn _X509_CRL_free:near ; CODE XREF: _crl_main+883p
					; _crl_main+9F5p ...
		extrn _X509_get_pubkey:near ; CODE XREF: _crl_main+937p
		extrn _X509_CRL_diff:near ; CODE XREF: _crl_main+A0Bp
		extrn _X509_NAME_hash:near ; CODE XREF:	_crl_main+B05p
		extrn _X509_NAME_hash_old:near ; CODE XREF: _crl_main+B29p
		extrn _X509_CRL_print:near ; CODE XREF:	_crl_main+CF0p
		extrn _X509_CRL_get_ext_d2i:near ; CODE	XREF: _crl_main+A86p
		extrn _ERR_clear_error:near ; CODE XREF: _crl_main:loc_B91p
		extrn _ERR_print_errors:near ; CODE XREF: _crl_main+85Ap
					; _crl_main+CB5p
		extrn _ERR_load_crypto_strings:near ; CODE XREF: _crl_main:loc_AE0p
		extrn _str2fmt:near	; CODE XREF: _crl_main+199p
					; _crl_main+1EAp ...
		extrn _print_name:near	; CODE XREF: _crl_main+A6Dp
		extrn _set_name_ex:near	; CODE XREF: _crl_main+56Ep
		extrn _load_crl:near	; CODE XREF: _crl_main+77Ap
					; _crl_main+9BEp
		extrn _load_key:near	; CODE XREF: _crl_main+9E6p
		extrn _load_config:near	; CODE XREF: _crl_main+D1p
		extrn _PEM_write_bio_X509_CRL:near ; CODE XREF:	_crl_main+D58p
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _crl_main+8B5p
		extrn __chkstk:near	; CODE XREF: _crl_main+5p
		extrn _bio_err:near	; DATA XREF: _crl_main+92r
					; _crl_main+A9w ...
		extrn ___security_cookie:near ;	DATA XREF: _crl_main+Ar


		end
