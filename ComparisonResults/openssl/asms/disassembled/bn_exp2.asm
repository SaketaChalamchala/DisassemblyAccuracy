;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	AAE89D3CF77C897AFEF99152013CC71E
; Input	CRC32 :	7CC1DD44

; File Name   :	C:\compspace\Diff\openssl\obj\bn_exp2.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _BN_mod_exp2_mont
_BN_mod_exp2_mont proc near

var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		mov	eax, 14Ch
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+14Ch+var_4], eax
		mov	eax, [esp+14Ch+arg_0]
		mov	edx, [esp+14Ch+arg_18]
		mov	ecx, [esp+14Ch+arg_8]
		mov	[esp+14Ch+var_11C], eax
		mov	eax, [esp+14Ch+arg_C]
		mov	[esp+14Ch+var_120], eax
		mov	eax, [esp+14Ch+arg_14]
		mov	[esp+14Ch+var_140], eax
		push	ebx
		mov	ebx, [esp+150h+arg_4]
		mov	eax, [eax]
		push	ebp
		mov	ebp, [esp+154h+arg_10]
		mov	[esp+154h+var_14C], edx
		test	byte ptr [eax],	1
		mov	edx, [esp+154h+arg_1C]
		mov	[esp+154h+var_114], ecx
		mov	[esp+154h+var_10C], ebp
		mov	[esp+154h+var_108], edx
		mov	[esp+154h+var_118], 0
		mov	[esp+154h+var_148], 0
		jnz	short loc_B6
		push	8Ah ; 'Š'
		push	offset ??_C@_0BG@KEDDBGGO@?4?2crypto?2bn?2bn_exp2?4c?$AA@ ; ".\\crypto\\bn\\bn_exp2.c"
		push	66h ; 'f'
		push	76h ; 'v'
		push	3
		call	_ERR_put_error
		add	esp, 14h
		xor	eax, eax
		pop	ebp
		pop	ebx
		mov	ecx, [esp+14Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 14Ch
		retn
; ---------------------------------------------------------------------------

loc_B6:					; CODE XREF: _BN_mod_exp2_mont+83j
		push	esi
		push	edi
		push	ecx
		call	_BN_num_bits
		push	ebp
		mov	esi, eax
		call	_BN_num_bits
		add	esp, 8
		mov	edi, eax
		test	esi, esi
		jnz	short loc_E6
		test	edi, edi
		jnz	short loc_E6
		push	1
		push	[esp+160h+var_11C]
		call	_BN_set_word
		add	esp, 8
		jmp	loc_682
; ---------------------------------------------------------------------------

loc_E6:					; CODE XREF: _BN_mod_exp2_mont+CDj
					; _BN_mod_exp2_mont+D1j
		mov	ebp, [esp+15Ch+var_14C]
		cmp	esi, edi
		push	ebp
		cmovg	eax, esi
		mov	[esp+160h+var_110], eax
		call	_BN_CTX_start
		push	ebp
		call	_BN_CTX_get
		push	ebp
		mov	[esp+168h+var_13C], eax
		call	_BN_CTX_get
		push	ebp
		mov	[esp+16Ch+var_138], eax
		call	_BN_CTX_get
		push	[esp+16Ch+var_14C]
		mov	ebp, eax
		mov	[esp+170h+var_84], ebp
		call	_BN_CTX_get
		add	esp, 14h
		mov	[esp+15Ch+var_104], eax
		cmp	[esp+15Ch+var_13C], 0
		jz	$err$121
		cmp	[esp+15Ch+var_138], 0
		jz	$err$121
		test	ebp, ebp
		jz	$err$121
		test	eax, eax
		jz	$err$121
		mov	eax, [esp+15Ch+var_108]
		test	eax, eax
		jz	short loc_160
		mov	[esp+15Ch+var_148], eax
		jmp	short loc_18A
; ---------------------------------------------------------------------------

loc_160:				; CODE XREF: _BN_mod_exp2_mont+158j
		call	_BN_MONT_CTX_new
		mov	[esp+15Ch+var_148], eax
		test	eax, eax
		jz	loc_672
		push	[esp+15Ch+var_14C]
		push	[esp+160h+var_140]
		push	eax
		call	_BN_MONT_CTX_set
		add	esp, 0Ch
		test	eax, eax
		jz	loc_661

loc_18A:				; CODE XREF: _BN_mod_exp2_mont+15Ej
		cmp	esi, 29Fh
		jle	short loc_19C
		mov	[esp+15Ch+var_130], 6
		jmp	short loc_1D0
; ---------------------------------------------------------------------------

loc_19C:				; CODE XREF: _BN_mod_exp2_mont+190j
		cmp	esi, 0EFh ; 'ï'
		jle	short loc_1AE
		mov	[esp+15Ch+var_130], 5
		jmp	short loc_1D0
; ---------------------------------------------------------------------------

loc_1AE:				; CODE XREF: _BN_mod_exp2_mont+1A2j
		cmp	esi, 4Fh ; 'O'
		jle	short loc_1BD
		mov	[esp+15Ch+var_130], 4
		jmp	short loc_1D0
; ---------------------------------------------------------------------------

loc_1BD:				; CODE XREF: _BN_mod_exp2_mont+1B1j
		xor	eax, eax
		cmp	esi, 17h
		setnle	al
		lea	eax, ds:1[eax*2]
		mov	[esp+15Ch+var_130], eax

loc_1D0:				; CODE XREF: _BN_mod_exp2_mont+19Aj
					; _BN_mod_exp2_mont+1ACj ...
		cmp	edi, 29Fh
		jle	short loc_1E2
		mov	[esp+15Ch+var_144], 6
		jmp	short loc_210
; ---------------------------------------------------------------------------

loc_1E2:				; CODE XREF: _BN_mod_exp2_mont+1D6j
		cmp	edi, 0EFh ; 'ï'
		jle	short loc_1F1
		mov	eax, 5
		jmp	short loc_20C
; ---------------------------------------------------------------------------

loc_1F1:				; CODE XREF: _BN_mod_exp2_mont+1E8j
		cmp	edi, 4Fh ; 'O'
		jle	short loc_1FD
		mov	eax, 4
		jmp	short loc_20C
; ---------------------------------------------------------------------------

loc_1FD:				; CODE XREF: _BN_mod_exp2_mont+1F4j
		xor	eax, eax
		cmp	edi, 17h
		setnle	al
		lea	eax, ds:1[eax*2]

loc_20C:				; CODE XREF: _BN_mod_exp2_mont+1EFj
					; _BN_mod_exp2_mont+1FBj
		mov	[esp+15Ch+var_144], eax

loc_210:				; CODE XREF: _BN_mod_exp2_mont+1E0j
		cmp	dword ptr [ebx+0Ch], 0
		mov	esi, [esp+15Ch+var_140]
		jnz	short loc_228
		push	esi
		push	ebx
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		js	short loc_243

loc_228:				; CODE XREF: _BN_mod_exp2_mont+218j
		push	[esp+15Ch+var_14C]
		push	esi
		push	ebx
		push	ebp
		push	0
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jz	$err$121
		mov	ebx, ebp

loc_243:				; CODE XREF: _BN_mod_exp2_mont+226j
		cmp	dword ptr [ebx+4], 0
		jnz	short loc_264
		push	0
		push	[esp+160h+var_11C]
		call	_BN_set_word
		add	esp, 8
		mov	[esp+15Ch+var_118], 1
		jmp	$err$121
; ---------------------------------------------------------------------------

loc_264:				; CODE XREF: _BN_mod_exp2_mont+247j
		mov	eax, [esp+15Ch+var_148]
		push	[esp+15Ch+var_14C]
		push	eax
		lea	edi, [eax+4]
		push	edi
		push	ebx
		push	ebp
		mov	[esp+170h+var_134], edi
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	$err$121
		mov	ebx, [esp+15Ch+var_130]
		cmp	ebx, 1
		jle	short loc_309
		push	[esp+15Ch+var_14C]
		push	[esp+160h+var_148]
		push	ebp
		push	ebp
		mov	ebp, [esp+16Ch+var_13C]
		push	ebp
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	$err$121
		lea	ecx, [ebx-1]
		mov	edi, 1
		shl	edi, cl
		mov	esi, 1
		cmp	edi, esi
		jle	short loc_301
		mov	ebx, [esp+15Ch+var_14C]

loc_2C6:				; CODE XREF: _BN_mod_exp2_mont+2FFj
		push	ebx
		call	_BN_CTX_get
		add	esp, 4
		mov	[esp+esi*4+15Ch+var_84], eax
		test	eax, eax
		jz	$err$121
		push	ebx
		push	[esp+160h+var_148]
		push	ebp
		push	[esp+esi*4+168h+var_88]
		push	eax
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	$err$121
		inc	esi
		cmp	esi, edi
		jl	short loc_2C6

loc_301:				; CODE XREF: _BN_mod_exp2_mont+2C0j
		mov	edi, [esp+15Ch+var_134]
		mov	esi, [esp+15Ch+var_140]

loc_309:				; CODE XREF: _BN_mod_exp2_mont+28Ej
		mov	ebx, [esp+15Ch+var_120]
		cmp	dword ptr [ebx+0Ch], 0
		jnz	short loc_327
		push	esi
		push	ebx
		call	_BN_ucmp
		add	esp, 8
		test	eax, eax
		jns	short loc_327
		mov	ebp, [esp+15Ch+var_104]
		jmp	short loc_346
; ---------------------------------------------------------------------------

loc_327:				; CODE XREF: _BN_mod_exp2_mont+311j
					; _BN_mod_exp2_mont+31Fj
		push	[esp+15Ch+var_14C]
		mov	ebp, [esp+160h+var_104]
		push	esi
		push	ebx
		push	ebp
		push	0
		call	_BN_div
		add	esp, 14h
		test	eax, eax
		jz	$err$121
		mov	ebx, ebp

loc_346:				; CODE XREF: _BN_mod_exp2_mont+325j
		cmp	dword ptr [ebx+4], 0
		jnz	short loc_367
		push	0
		push	[esp+160h+var_11C]
		call	_BN_set_word
		add	esp, 8
		mov	[esp+15Ch+var_118], 1
		jmp	$err$121
; ---------------------------------------------------------------------------

loc_367:				; CODE XREF: _BN_mod_exp2_mont+34Aj
		push	[esp+15Ch+var_14C]
		push	[esp+160h+var_148]
		push	edi
		push	ebx
		push	ebp
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	$err$121
		mov	esi, [esp+15Ch+var_144]
		cmp	esi, 1
		jle	short loc_3FA
		push	[esp+15Ch+var_14C]
		mov	ebx, [esp+160h+var_13C]
		push	[esp+160h+var_148]
		push	ebp
		push	ebp
		push	ebx
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	$err$121
		lea	ecx, [esi-1]
		mov	edi, 1
		shl	edi, cl
		mov	esi, 1
		cmp	edi, esi
		jle	short loc_3F6
		mov	ebp, [esp+15Ch+var_14C]

loc_3C1:				; CODE XREF: _BN_mod_exp2_mont+3F4j
		push	ebp
		call	_BN_CTX_get
		add	esp, 4
		mov	[esp+esi*4+15Ch+var_104], eax
		test	eax, eax
		jz	$err$121
		push	ebp
		push	[esp+160h+var_148]
		push	ebx
		push	[esp+esi*4+168h+var_108]
		push	eax
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	$err$121
		inc	esi
		cmp	esi, edi
		jl	short loc_3C1

loc_3F6:				; CODE XREF: _BN_mod_exp2_mont+3BBj
		mov	esi, [esp+15Ch+var_144]

loc_3FA:				; CODE XREF: _BN_mod_exp2_mont+389j
		push	[esp+15Ch+var_14C]
		xor	ebx, ebx
		mov	[esp+160h+var_13C], 1
		push	[esp+160h+var_148]
		xor	edi, edi
		mov	[esp+164h+var_124], ebx
		push	[esp+164h+var_134]
		xor	ebp, ebp
		mov	[esp+168h+var_128], edi
		mov	[esp+168h+var_12C], ebx
		mov	[esp+168h+var_120], ebp
		call	_BN_value_one
		push	eax
		push	[esp+16Ch+var_138]
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	$err$121
		mov	eax, [esp+15Ch+var_110]
		add	eax, 0FFFFFFFFh
		mov	[esp+15Ch+var_144], eax
		js	loc_632
		dec	eax
		mov	[esp+15Ch+var_140], eax
		mov	eax, esi
		sub	eax, [esp+15Ch+var_130]
		mov	[esp+15Ch+var_110], eax
		mov	eax, 2
		sub	eax, esi
		mov	esi, [esp+15Ch+var_144]
		mov	[esp+15Ch+var_134], eax
		mov	eax, 1

loc_472:				; CODE XREF: _BN_mod_exp2_mont+62Cj
		test	eax, eax
		jnz	short loc_495
		push	[esp+15Ch+var_14C]
		mov	eax, [esp+160h+var_138]
		push	[esp+160h+var_148]
		push	eax
		push	eax
		push	eax
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	$err$121

loc_495:				; CODE XREF: _BN_mod_exp2_mont+474j
		test	edi, edi
		jnz	loc_52A
		push	esi
		push	[esp+160h+var_114]
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jz	loc_52A
		mov	esi, [esp+15Ch+var_134]
		add	esi, [esp+15Ch+var_110]
		add	esi, [esp+15Ch+var_140]
		mov	edi, [esp+15Ch+var_114]
		push	esi
		push	edi
		mov	[esp+164h+var_12C], esi
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jnz	short loc_4E7

loc_4D4:				; CODE XREF: _BN_mod_exp2_mont+4E1j
		inc	esi
		push	esi
		push	edi
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jz	short loc_4D4
		mov	[esp+15Ch+var_12C], esi

loc_4E7:				; CODE XREF: _BN_mod_exp2_mont+4D2j
		mov	eax, [esp+15Ch+var_140]
		mov	edi, 1
		mov	esi, eax
		mov	[esp+15Ch+var_128], edi
		cmp	eax, [esp+15Ch+var_12C]
		jl	short loc_526
		mov	ebp, [esp+15Ch+var_12C]
		mov	ebx, [esp+15Ch+var_114]

loc_504:				; CODE XREF: _BN_mod_exp2_mont+518j
		push	esi
		push	ebx
		add	edi, edi
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jz	short loc_515
		inc	edi

loc_515:				; CODE XREF: _BN_mod_exp2_mont+512j
		dec	esi
		cmp	esi, ebp
		jge	short loc_504
		mov	ebx, [esp+15Ch+var_124]
		mov	ebp, [esp+15Ch+var_120]
		mov	[esp+15Ch+var_128], edi

loc_526:				; CODE XREF: _BN_mod_exp2_mont+4FAj
		mov	esi, [esp+15Ch+var_144]

loc_52A:				; CODE XREF: _BN_mod_exp2_mont+497j
					; _BN_mod_exp2_mont+4ACj
		test	ebx, ebx
		jnz	short loc_5A6
		push	esi
		mov	esi, [esp+160h+var_10C]
		push	esi
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jz	short loc_5A6
		mov	ebp, [esp+15Ch+var_134]
		add	ebp, [esp+15Ch+var_140]
		push	ebp
		push	esi
		mov	[esp+164h+var_120], ebp
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jnz	short loc_573
		nop	word ptr [eax+eax+00h]

loc_560:				; CODE XREF: _BN_mod_exp2_mont+56Dj
		inc	ebp
		push	ebp
		push	esi
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jz	short loc_560
		mov	[esp+15Ch+var_120], ebp

loc_573:				; CODE XREF: _BN_mod_exp2_mont+558j
		mov	esi, [esp+15Ch+var_140]
		mov	ebx, 1
		mov	[esp+15Ch+var_124], ebx
		cmp	esi, ebp
		jl	short loc_5A6
		mov	edi, [esp+15Ch+var_10C]

loc_588:				; CODE XREF: _BN_mod_exp2_mont+59Cj
		push	esi
		push	edi
		add	ebx, ebx
		call	_BN_is_bit_set
		add	esp, 8
		test	eax, eax
		jz	short loc_599
		inc	ebx

loc_599:				; CODE XREF: _BN_mod_exp2_mont+596j
		dec	esi
		cmp	esi, ebp
		jge	short loc_588
		mov	edi, [esp+15Ch+var_128]
		mov	[esp+15Ch+var_124], ebx

loc_5A6:				; CODE XREF: _BN_mod_exp2_mont+52Cj
					; _BN_mod_exp2_mont+53Ej ...
		mov	esi, [esp+15Ch+var_144]
		test	edi, edi
		jz	short loc_5E9
		cmp	esi, [esp+15Ch+var_12C]
		jnz	short loc_5E9
		push	[esp+15Ch+var_14C]
		mov	eax, [esp+160h+var_138]
		push	[esp+160h+var_148]
		sar	edi, 1
		push	[esp+edi*4+164h+var_84]
		push	eax
		push	eax
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	$err$121
		xor	edi, edi
		xor	eax, eax
		mov	[esp+15Ch+var_128], edi
		mov	[esp+15Ch+var_13C], eax
		jmp	short loc_5ED
; ---------------------------------------------------------------------------

loc_5E9:				; CODE XREF: _BN_mod_exp2_mont+5ACj
					; _BN_mod_exp2_mont+5B2j
		mov	eax, [esp+15Ch+var_13C]

loc_5ED:				; CODE XREF: _BN_mod_exp2_mont+5E7j
		test	ebx, ebx
		jz	short loc_621
		cmp	esi, ebp
		jnz	short loc_621
		push	[esp+15Ch+var_14C]
		mov	eax, [esp+160h+var_138]
		push	[esp+160h+var_148]
		sar	ebx, 1
		push	[esp+ebx*4+164h+var_104]
		push	eax
		push	eax
		call	_BN_mod_mul_montgomery
		add	esp, 14h
		test	eax, eax
		jz	short $err$121
		xor	ebx, ebx
		xor	eax, eax
		mov	[esp+15Ch+var_124], ebx
		mov	[esp+15Ch+var_13C], eax

loc_621:				; CODE XREF: _BN_mod_exp2_mont+5EFj
					; _BN_mod_exp2_mont+5F3j
		dec	[esp+15Ch+var_140]
		dec	esi
		mov	[esp+15Ch+var_144], esi
		test	esi, esi
		jns	loc_472

loc_632:				; CODE XREF: _BN_mod_exp2_mont+449j
		push	[esp+15Ch+var_14C]
		push	[esp+160h+var_148]
		push	[esp+164h+var_138]
		push	[esp+168h+var_11C]
		call	_BN_from_montgomery
		xor	ecx, ecx
		add	esp, 10h
		test	eax, eax
		mov	eax, 1
		cmovnz	ecx, eax
		mov	[esp+15Ch+var_118], ecx

$err$121:				; CODE XREF: _BN_mod_exp2_mont+131j
					; _BN_mod_exp2_mont+13Cj ...
		cmp	[esp+15Ch+var_108], 0
		jnz	short loc_672

loc_661:				; CODE XREF: _BN_mod_exp2_mont+184j
		mov	eax, [esp+15Ch+var_148]
		test	eax, eax
		jz	short loc_672
		push	eax
		call	_BN_MONT_CTX_free
		add	esp, 4

loc_672:				; CODE XREF: _BN_mod_exp2_mont+16Bj
					; _BN_mod_exp2_mont+65Fj ...
		push	[esp+15Ch+var_14C]
		call	_BN_CTX_end
		mov	eax, [esp+160h+var_118]
		add	esp, 4

loc_682:				; CODE XREF: _BN_mod_exp2_mont+E1j
		mov	ecx, [esp+15Ch+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 14Ch
		retn
_BN_mod_exp2_mont endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 69Ch
; COMDAT (pick any)
		public ??_C@_0BG@KEDDBGGO@?4?2crypto?2bn?2bn_exp2?4c?$AA@
; `string'
??_C@_0BG@KEDDBGGO@?4?2crypto?2bn?2bn_exp2?4c?$AA@ db '.\crypto\bn\bn_exp2.c',0
					; DATA XREF: _BN_mod_exp2_mont+8Ao
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ERR_put_error:near ; CODE XREF: _BN_mod_exp2_mont+95p
		extrn _BN_value_one:near ; CODE	XREF: _BN_mod_exp2_mont+424p
		extrn _BN_CTX_start:near ; CODE	XREF: _BN_mod_exp2_mont+F4p
		extrn _BN_CTX_get:near	; CODE XREF: _BN_mod_exp2_mont+FAp
					; _BN_mod_exp2_mont+104p ...
		extrn _BN_CTX_end:near	; CODE XREF: _BN_mod_exp2_mont+676p
		extrn _BN_num_bits:near	; CODE XREF: _BN_mod_exp2_mont+B9p
					; _BN_mod_exp2_mont+C1p
		extrn _BN_div:near	; CODE XREF: _BN_mod_exp2_mont+231p
					; _BN_mod_exp2_mont+334p
		extrn _BN_set_word:near	; CODE XREF: _BN_mod_exp2_mont+D9p
					; _BN_mod_exp2_mont+24Fp ...
		extrn _BN_is_bit_set:near ; CODE XREF: _BN_mod_exp2_mont+4A2p
					; _BN_mod_exp2_mont+4C8p ...
		extrn _BN_ucmp:near	; CODE XREF: _BN_mod_exp2_mont+21Cp
					; _BN_mod_exp2_mont+315p
		extrn _BN_MONT_CTX_new:near ; CODE XREF: _BN_mod_exp2_mont:loc_160p
		extrn _BN_mod_mul_montgomery:near ; CODE XREF: _BN_mod_exp2_mont+277p
					; _BN_mod_exp2_mont+29Fp ...
		extrn _BN_from_montgomery:near ; CODE XREF: _BN_mod_exp2_mont+642p
		extrn _BN_MONT_CTX_free:near ; CODE XREF: _BN_mod_exp2_mont+66Ap
		extrn _BN_MONT_CTX_set:near ; CODE XREF: _BN_mod_exp2_mont+17Ap
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _BN_mod_exp2_mont+AAp
					; _BN_mod_exp2_mont+68Fp
		extrn __chkstk:near	; CODE XREF: _BN_mod_exp2_mont+5p
		extrn ___security_cookie:near ;	DATA XREF: _BN_mod_exp2_mont+Ar


		end
