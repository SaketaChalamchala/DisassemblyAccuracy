;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	0EA2737E8671AEF0ABFA0D84CAA221B0
; Input	CRC32 :	C2D3A9C2

; File Name   :	C:\compspace\Diff\openssl\obj\xts128.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRT"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
; COMDAT (pick no duplicate)
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _CRYPTO_xts128_encrypt
_CRYPTO_xts128_encrypt proc near

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= xmmword ptr -34h
var_24		= xmmword ptr -24h
var_14		= xmmword ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, 48h ; 'H'
		call	__chkstk
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, esp
		mov	[esp+48h+var_4], eax
		mov	ecx, [esp+48h+arg_0]
		mov	eax, [esp+48h+arg_C]
		mov	edx, [esp+48h+arg_4]
		push	ebx
		mov	ebx, [esp+4Ch+arg_10]
		mov	[esp+4Ch+var_3C], ecx
		mov	[esp+4Ch+var_44], eax
		cmp	ebx, 10h
		jnb	short loc_46
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+48h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
; ---------------------------------------------------------------------------

loc_46:					; CODE XREF: _CRYPTO_xts128_encrypt+31j
		push	dword ptr [ecx+4]
		movups	xmm0, xmmword ptr [edx]
		lea	eax, [esp+50h+var_24]
		push	eax
		push	eax
		mov	eax, [ecx+0Ch]
		movups	[esp+58h+var_24], xmm0
		call	eax
		mov	eax, [esp+58h+arg_14]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6F
		test	bl, 0Fh
		jz	short loc_6F
		sub	ebx, 10h

loc_6F:					; CODE XREF: _CRYPTO_xts128_encrypt+65j
					; _CRYPTO_xts128_encrypt+6Aj
		mov	edx, dword ptr [esp+4Ch+var_24]
		push	ebp
		mov	ebp, dword ptr [esp+50h+var_24+8]
		push	esi
		mov	esi, dword ptr [esp+54h+var_24+0Ch]
		push	edi
		mov	edi, [esp+58h+arg_8]
		cmp	ebx, 10h
		jb	loc_18B
		mov	eax, dword ptr [esp+58h+var_24+4]
		mov	[esp+58h+var_48], eax

loc_93:					; CODE XREF: _CRYPTO_xts128_encrypt+17Fj
		mov	eax, [edi+4]
		xor	eax, [esp+58h+var_48]
		mov	ecx, [edi]
		mov	dword ptr [esp+58h+var_34+4], eax
		xor	ecx, edx
		mov	eax, [edi+0Ch]
		xor	eax, esi
		mov	dword ptr [esp+58h+var_34], ecx
		mov	ecx, [edi+8]
		mov	dword ptr [esp+58h+var_34+0Ch],	eax
		xor	ecx, ebp
		mov	eax, [esp+58h+var_3C]
		mov	dword ptr [esp+58h+var_34+8], ecx
		lea	ecx, [esp+58h+var_34]
		push	dword ptr [eax]
		mov	eax, [eax+8]
		push	ecx
		push	ecx
		call	eax
		mov	eax, dword ptr [esp+64h+var_24]
		add	edi, 10h
		mov	ecx, dword ptr [esp+64h+var_34]
		add	esp, 0Ch
		mov	edx, dword ptr [esp+58h+var_24+4]
		xor	ecx, eax
		mov	ebp, dword ptr [esp+58h+var_24+8]
		mov	esi, dword ptr [esp+58h+var_24+0Ch]
		mov	[esp+58h+var_40], eax
		mov	eax, dword ptr [esp+58h+var_34+4]
		xor	eax, edx
		mov	[esp+58h+var_48], edx
		mov	edx, [esp+58h+var_44]
		mov	dword ptr [esp+58h+var_34], ecx
		mov	dword ptr [esp+58h+var_34+4], eax
		mov	[esp+58h+var_38], edi
		mov	[edx], ecx
		mov	ecx, dword ptr [esp+58h+var_34+8]
		mov	[edx+4], eax
		xor	ecx, ebp
		mov	eax, dword ptr [esp+58h+var_34+0Ch]
		xor	eax, esi
		mov	[edx+8], ecx
		mov	[edx+0Ch], eax
		add	edx, 10h
		mov	dword ptr [esp+58h+var_34+8], ecx
		mov	dword ptr [esp+58h+var_34+0Ch],	eax
		mov	[esp+58h+var_44], edx
		sub	ebx, 10h
		jz	loc_32C
		mov	eax, [esp+58h+var_48]
		mov	edx, esi
		mov	edi, [esp+58h+var_40]
		xor	ecx, ecx
		shld	[esp+58h+var_48], edi, 1
		xor	ecx, [esp+58h+var_48]
		shld	esi, ebp, 1
		sar	edx, 1Fh
		add	edi, edi
		shr	eax, 1Fh
		and	edx, 87h
		add	ebp, ebp
		mov	[esp+58h+var_48], ecx
		xor	edx, edi
		mov	dword ptr [esp+58h+var_24+4], ecx
		mov	edi, [esp+58h+var_38]
		or	ebp, eax
		mov	dword ptr [esp+58h+var_24], edx
		mov	[esp+58h+var_40], esi
		mov	dword ptr [esp+58h+var_24+8], ebp
		mov	dword ptr [esp+58h+var_24+0Ch],	esi
		cmp	ebx, 10h
		jnb	loc_93
		mov	eax, [esp+58h+arg_14]
		jmp	short loc_197
; ---------------------------------------------------------------------------

loc_18B:				; CODE XREF: _CRYPTO_xts128_encrypt+85j
		mov	ecx, dword ptr [esp+58h+var_24+4]
		mov	[esp+58h+var_38], edi
		mov	[esp+58h+var_40], esi

loc_197:				; CODE XREF: _CRYPTO_xts128_encrypt+189j
		test	eax, eax
		jz	loc_222
		xor	ebp, ebp
		test	ebx, ebx
		jz	short loc_1D0
		mov	eax, [esp+58h+var_44]
		lea	ecx, [esp+58h+var_34]
		sub	edi, eax
		sub	eax, ecx
		mov	[esp+58h+var_40], eax

loc_1B5:				; CODE XREF: _CRYPTO_xts128_encrypt+1CEj
		lea	esi, [esp+58h+var_34]
		add	esi, ebp
		inc	ebp
		lea	ecx, [esi+eax]
		mov	dl, [ecx+edi]
		mov	al, [esi]
		mov	[ecx], al
		mov	eax, [esp+58h+var_40]
		mov	[esi], dl
		cmp	ebp, ebx
		jb	short loc_1B5

loc_1D0:				; CODE XREF: _CRYPTO_xts128_encrypt+1A3j
		mov	eax, [esp+58h+var_3C]
		lea	ecx, [esp+58h+var_34]
		movups	xmm1, [esp+58h+var_34]
		movups	xmm0, [esp+58h+var_24]
		push	dword ptr [eax]
		mov	eax, [eax+8]
		pxor	xmm1, xmm0
		push	ecx
		push	ecx
		movups	[esp+64h+var_34], xmm1
		call	eax
		movups	xmm1, [esp+64h+var_34]
		mov	eax, [esp+64h+var_44]
		add	esp, 0Ch
		movups	xmm0, [esp+58h+var_24]
		pop	edi
		pop	esi
		pxor	xmm1, xmm0
		pop	ebp
		movups	xmmword	ptr [eax-10h], xmm1
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+48h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
; ---------------------------------------------------------------------------

loc_222:				; CODE XREF: _CRYPTO_xts128_encrypt+199j
		mov	eax, ecx
		mov	edi, esi
		shld	eax, edx, 1
		xor	esi, esi
		shr	ecx, 1Fh
		xor	esi, eax
		sar	edi, 1Fh
		mov	eax, [esp+58h+var_40]
		add	edx, edx
		shld	eax, ebp, 1
		and	edi, 87h
		mov	dword ptr [esp+58h+var_14+4], esi
		add	ebp, ebp
		xor	edi, edx
		or	ecx, ebp
		mov	dword ptr [esp+58h+var_14], edi
		mov	ebp, [esp+58h+var_38]
		xor	edx, edx
		or	edx, eax
		mov	[esp+58h+var_48], ecx
		mov	dword ptr [esp+58h+var_14+8], ecx
		mov	dword ptr [esp+58h+var_14+0Ch],	edx
		mov	eax, [ebp+4]
		mov	ecx, [ebp+0]
		xor	eax, esi
		mov	esi, [esp+58h+var_3C]
		xor	ecx, edi
		mov	dword ptr [esp+58h+var_34+4], eax
		mov	eax, [ebp+0Ch]
		xor	eax, edx
		mov	dword ptr [esp+58h+var_34], ecx
		push	dword ptr [esi]
		mov	ecx, [ebp+8]
		xor	ecx, [esp+5Ch+var_48]
		mov	dword ptr [esp+5Ch+var_34+0Ch],	eax
		lea	eax, [esp+5Ch+var_34]
		push	eax
		push	eax
		mov	eax, [esi+8]
		mov	dword ptr [esp+64h+var_34+8], ecx
		call	eax
		movups	xmm0, [esp+64h+var_34]
		mov	edi, [esp+64h+var_44]
		add	esp, 0Ch
		movups	xmm1, [esp+58h+var_14]
		pxor	xmm1, xmm0
		movups	[esp+58h+var_34], xmm1
		test	ebx, ebx
		jz	short loc_2E3
		lea	edx, [esp+58h+var_34]
		sub	ebp, edi
		lea	esi, [edi+10h]

loc_2C4:				; CODE XREF: _CRYPTO_xts128_encrypt+2D8j
		mov	cl, [esi+ebp]
		lea	esi, [esi+1]
		mov	al, [edx]
		lea	edx, [edx+1]
		mov	[esi-1], al
		mov	[edx-1], cl
		sub	ebx, 1
		jnz	short loc_2C4
		movups	xmm1, [esp+58h+var_34]
		mov	esi, [esp+58h+var_3C]

loc_2E3:				; CODE XREF: _CRYPTO_xts128_encrypt+2B9j
		push	dword ptr [esi]
		movups	xmm0, [esp+5Ch+var_24]
		lea	eax, [esp+5Ch+var_34]
		push	eax
		pxor	xmm1, xmm0
		push	eax
		mov	eax, [esi+8]
		movups	[esp+64h+var_34], xmm1
		call	eax
		mov	ecx, dword ptr [esp+64h+var_24]
		add	esp, 0Ch
		xor	ecx, dword ptr [esp+58h+var_34]
		mov	eax, dword ptr [esp+58h+var_24+4]
		xor	eax, dword ptr [esp+58h+var_34+4]
		mov	[edi], ecx
		mov	ecx, dword ptr [esp+58h+var_24+8]
		xor	ecx, dword ptr [esp+58h+var_34+8]
		mov	[edi+4], eax
		mov	eax, dword ptr [esp+58h+var_24+0Ch]
		xor	eax, dword ptr [esp+58h+var_34+0Ch]
		mov	[edi+8], ecx
		mov	[edi+0Ch], eax

loc_32C:				; CODE XREF: _CRYPTO_xts128_encrypt+12Cj
		mov	ecx, [esp+58h+var_4]
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
_CRYPTO_xts128_encrypt endp

_text$mn	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _CRYPTO_xts128_encrypt+3Dp
					; _CRYPTO_xts128_encrypt+219p ...
		extrn __chkstk:near	; CODE XREF: _CRYPTO_xts128_encrypt+5p
		extrn ___security_cookie:near ;	DATA XREF: _CRYPTO_xts128_encrypt+Ar


		end
